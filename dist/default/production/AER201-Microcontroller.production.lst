

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 22:13:37 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108  0000                     
   109                           ; Version 1.40
   110                           ; Generated 01/12/2016 GMT
   111                           ; 
   112                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC18F4620 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     
   144                           	psect	idataBANK1
   145  004546                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for UI@F3222
   149  004546  4D                 	db	77
   150  004547  4D                 	db	77
   151  004548  4D                 	db	77
   152  004549  00                 	db	0
   153                           
   154                           ;initializer for printRTC@F3213
   155  00454A  4D                 	db	77
   156  00454B  4D                 	db	77
   157  00454C  4D                 	db	77
   158  00454D  00                 	db	0
   159                           
   160                           	psect	mediumconst
   161  00FB38                     __pmediumconst:
   162                           	opt stack 0
   163  00FB38  00                 	db	0
   164  00FB39                     _keys:
   165                           	opt stack 0
   166  00FB39  31                 	db	49
   167  00FB3A  32                 	db	50
   168  00FB3B  33                 	db	51
   169  00FB3C  41                 	db	65
   170  00FB3D  34                 	db	52
   171  00FB3E  35                 	db	53
   172  00FB3F  36                 	db	54
   173  00FB40  42                 	db	66
   174  00FB41  37                 	db	55
   175  00FB42  38                 	db	56
   176  00FB43  39                 	db	57
   177  00FB44  43                 	db	67
   178  00FB45  2A                 	db	42
   179  00FB46  30                 	db	48
   180  00FB47  23                 	db	35
   181  00FB48  44                 	db	68
   182  00FB49  00                 	db	0
   183  00FB4A                     __end_of_keys:
   184                           	opt stack 0
   185  00FB4A                     _dpowers:
   186                           	opt stack 0
   187  00FB4A  0001               	dw	1
   188  00FB4C  000A               	dw	10
   189  00FB4E  0064               	dw	100
   190  00FB50  03E8               	dw	1000
   191  00FB52  2710               	dw	10000
   192  00FB54                     __end_of_dpowers:
   193                           	opt stack 0
   194  0000                     _ADCON0	set	4034
   195  0000                     _ADCON0bits	set	4034
   196  0000                     _ADCON1	set	4033
   197  0000                     _ADCON2	set	4032
   198  0000                     _ADRESH	set	4036
   199  0000                     _ADRESL	set	4035
   200  0000                     _CMCONbits	set	4020
   201  0000                     _CVRCON	set	4021
   202  0000                     _EEADR	set	4009
   203  0000                     _EEADRH	set	4010
   204  0000                     _EECON1bits	set	4006
   205  0000                     _EECON2	set	4007
   206  0000                     _EEDATA	set	4008
   207  0000                     _INTCONbits	set	4082
   208  0000                     _LATA	set	3977
   209  0000                     _LATAbits	set	3977
   210  0000                     _LATB	set	3978
   211  0000                     _LATC	set	3979
   212  0000                     _LATCbits	set	3979
   213  0000                     _LATD	set	3980
   214  0000                     _LATDbits	set	3980
   215  0000                     _LATE	set	3981
   216  0000                     _LATEbits	set	3981
   217  0000                     _OSCCON	set	4051
   218  0000                     _OSCTUNEbits	set	3995
   219  0000                     _PIR2bits	set	4001
   220  0000                     _PORTAbits	set	3968
   221  0000                     _PORTB	set	3969
   222  0000                     _PORTBbits	set	3969
   223  0000                     _SSPADD	set	4040
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSPCON1	set	4038
   226  0000                     _SSPCON2	set	4037
   227  0000                     _SSPSTAT	set	4039
   228  0000                     _T0CON	set	4053
   229  0000                     _T1CON	set	4045
   230  0000                     _T3CON	set	4017
   231  0000                     _TMR0H	set	4055
   232  0000                     _TMR0L	set	4054
   233  0000                     _TMR1H	set	4047
   234  0000                     _TMR1L	set	4046
   235  0000                     _TMR3H	set	4019
   236  0000                     _TMR3L	set	4018
   237  0000                     _TRISA	set	3986
   238  0000                     _TRISB	set	3987
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISE	set	3990
   242  0000                     _ACKDT	set	32301
   243  0000                     _ACKEN	set	32300
   244  0000                     _ADIE	set	31982
   245  0000                     _INT1IE	set	32643
   246  0000                     _INT1IF	set	32640
   247  0000                     _PEIE	set	32662
   248  0000                     _PEN	set	32298
   249  0000                     _RCEN	set	32299
   250  0000                     _RSEN	set	32297
   251  0000                     _SEN	set	32296
   252  0000                     _TMR0IE	set	32661
   253  0000                     _TMR0IF	set	32658
   254  0000                     _TMR0ON	set	32431
   255  0000                     _TMR1IE	set	31976
   256  0000                     _TMR1IF	set	31984
   257  0000                     _TMR1ON	set	32360
   258  0000                     _TMR2IE	set	31977
   259  0000                     _TMR3IE	set	32001
   260  0000                     _TMR3IF	set	32009
   261  0000                     _TMR3ON	set	32136
   262  0000                     _TRISC3	set	31907
   263  0000                     _TRISC4	set	31908
   264  0000                     _nRBPU	set	32655
   265  00FB54                     STR_21:
   266  00FB54  25                 	db	37
   267  00FB55  30                 	db	48	;'0'
   268  00FB56  32                 	db	50	;'2'
   269  00FB57  64                 	db	100	;'d'
   270  00FB58  25                 	db	37
   271  00FB59  73                 	db	115	;'s'
   272  00FB5A  20                 	db	32
   273  00FB5B  7C                 	db	124
   274  00FB5C  20                 	db	32
   275  00FB5D  25                 	db	37
   276  00FB5E  30                 	db	48	;'0'
   277  00FB5F  32                 	db	50	;'2'
   278  00FB60  64                 	db	100	;'d'
   279  00FB61  3A                 	db	58	;':'
   280  00FB62  25                 	db	37
   281  00FB63  30                 	db	48	;'0'
   282  00FB64  32                 	db	50	;'2'
   283  00FB65  64                 	db	100	;'d'
   284  00FB66  3A                 	db	58	;':'
   285  00FB67  25                 	db	37
   286  00FB68  30                 	db	48	;'0'
   287  00FB69  32                 	db	50	;'2'
   288  00FB6A  64                 	db	100	;'d'
   289  00FB6B  00                 	db	0
   290  00FB6C                     STR_66:
   291  00FB6C  28                 	db	40
   292  00FB6D  64                 	db	100	;'d'
   293  00FB6E  61                 	db	97	;'a'
   294  00FB6F  74                 	db	116	;'t'
   295  00FB70  61                 	db	97	;'a'
   296  00FB71  3A                 	db	58	;':'
   297  00FB72  20                 	db	32
   298  00FB73  25                 	db	37
   299  00FB74  75                 	db	117	;'u'
   300  00FB75  2C                 	db	44
   301  00FB76  20                 	db	32
   302  00FB77  61                 	db	97	;'a'
   303  00FB78  64                 	db	100	;'d'
   304  00FB79  64                 	db	100	;'d'
   305  00FB7A  72                 	db	114	;'r'
   306  00FB7B  3A                 	db	58	;':'
   307  00FB7C  20                 	db	32
   308  00FB7D  25                 	db	37
   309  00FB7E  75                 	db	117	;'u'
   310  00FB7F  29                 	db	41
   311  00FB80  00                 	db	0
   312  00FB81                     STR_27:
   313  00FB81  4E                 	db	78	;'N'
   314  00FB82  4F                 	db	79	;'O'
   315  00FB83  20                 	db	32
   316  00FB84  4C                 	db	76	;'L'
   317  00FB85  41                 	db	65	;'A'
   318  00FB86  42                 	db	66	;'B'
   319  00FB87  3A                 	db	58	;':'
   320  00FB88  20                 	db	32
   321  00FB89  25                 	db	37
   322  00FB8A  64                 	db	100	;'d'
   323  00FB8B  7C                 	db	124
   324  00FB8C  4C                 	db	76	;'L'
   325  00FB8D  41                 	db	65	;'A'
   326  00FB8E  42                 	db	66	;'B'
   327  00FB8F  3A                 	db	58	;':'
   328  00FB90  20                 	db	32
   329  00FB91  25                 	db	37
   330  00FB92  64                 	db	100	;'d'
   331  00FB93  00                 	db	0
   332  00FB94                     STR_25:
   333  00FB94  4E                 	db	78	;'N'
   334  00FB95  4F                 	db	79	;'O'
   335  00FB96  20                 	db	32
   336  00FB97  54                 	db	84	;'T'
   337  00FB98  41                 	db	65	;'A'
   338  00FB99  42                 	db	66	;'B'
   339  00FB9A  3A                 	db	58	;':'
   340  00FB9B  20                 	db	32
   341  00FB9C  25                 	db	37
   342  00FB9D  64                 	db	100	;'d'
   343  00FB9E  7C                 	db	124
   344  00FB9F  54                 	db	84	;'T'
   345  00FBA0  41                 	db	65	;'A'
   346  00FBA1  42                 	db	66	;'B'
   347  00FBA2  3A                 	db	58	;':'
   348  00FBA3  20                 	db	32
   349  00FBA4  25                 	db	37
   350  00FBA5  64                 	db	100	;'d'
   351  00FBA6  00                 	db	0
   352  00FBA7                     STR_105:
   353  00FBA7  44                 	db	68	;'D'
   354  00FBA8  20                 	db	32
   355  00FBA9  57                 	db	87	;'W'
   356  00FBAA  49                 	db	73	;'I'
   357  00FBAB  4C                 	db	76	;'L'
   358  00FBAC  4C                 	db	76	;'L'
   359  00FBAD  20                 	db	32
   360  00FBAE  52                 	db	82	;'R'
   361  00FBAF  45                 	db	69	;'E'
   362  00FBB0  54                 	db	84	;'T'
   363  00FBB1  55                 	db	85	;'U'
   364  00FBB2  52                 	db	82	;'R'
   365  00FBB3  4E                 	db	78	;'N'
   366  00FBB4  20                 	db	32
   367  00FBB5  20                 	db	32
   368  00FBB6  20                 	db	32
   369  00FBB7  20                 	db	32
   370  00FBB8  00                 	db	0
   371  00FBB9                     STR_106:
   372  00FBB9  4F                 	db	79	;'O'
   373  00FBBA  54                 	db	84	;'T'
   374  00FBBB  48                 	db	72	;'H'
   375  00FBBC  45                 	db	69	;'E'
   376  00FBBD  52                 	db	82	;'R'
   377  00FBBE  20                 	db	32
   378  00FBBF  53                 	db	83	;'S'
   379  00FBC0  45                 	db	69	;'E'
   380  00FBC1  54                 	db	84	;'T'
   381  00FBC2  53                 	db	83	;'S'
   382  00FBC3  20                 	db	32
   383  00FBC4  52                 	db	82	;'R'
   384  00FBC5  41                 	db	65	;'A'
   385  00FBC6  35                 	db	53	;'5'
   386  00FBC7  20                 	db	32
   387  00FBC8  20                 	db	32
   388  00FBC9  20                 	db	32
   389  00FBCA  00                 	db	0
   390  00FBCB                     STR_3:
   391  00FBCB  2D                 	db	45
   392  00FBCC  2D                 	db	45
   393  00FBCD  20                 	db	32
   394  00FBCE  4C                 	db	76	;'L'
   395  00FBCF  4F                 	db	79	;'O'
   396  00FBD0  47                 	db	71	;'G'
   397  00FBD1  20                 	db	32
   398  00FBD2  25                 	db	37
   399  00FBD3  32                 	db	50	;'2'
   400  00FBD4  64                 	db	100	;'d'
   401  00FBD5  20                 	db	32
   402  00FBD6  48                 	db	72	;'H'
   403  00FBD7  45                 	db	69	;'E'
   404  00FBD8  52                 	db	82	;'R'
   405  00FBD9  45                 	db	69	;'E'
   406  00FBDA  2D                 	db	45
   407  00FBDB  2D                 	db	45
   408  00FBDC  00                 	db	0
   409  00FBDD                     STR_1:
   410  00FBDD  52                 	db	82	;'R'
   411  00FBDE  45                 	db	69	;'E'
   412  00FBDF  53                 	db	83	;'S'
   413  00FBE0  55                 	db	85	;'U'
   414  00FBE1  4C                 	db	76	;'L'
   415  00FBE2  54                 	db	84	;'T'
   416  00FBE3  53                 	db	83	;'S'
   417  00FBE4  20                 	db	32
   418  00FBE5  49                 	db	73	;'I'
   419  00FBE6  4E                 	db	78	;'N'
   420  00FBE7  20                 	db	32
   421  00FBE8  4C                 	db	76	;'L'
   422  00FBE9  4F                 	db	79	;'O'
   423  00FBEA  47                 	db	71	;'G'
   424  00FBEB  20                 	db	32
   425  00FBEC  25                 	db	37
   426  00FBED  64                 	db	100	;'d'
   427  00FBEE  00                 	db	0
   428  00FBEF                     STR_97:
   429  00FBEF  4D                 	db	77	;'M'
   430  00FBF0  49                 	db	73	;'I'
   431  00FBF1  44                 	db	68	;'D'
   432  00FBF2  20                 	db	32
   433  00FBF3  2D                 	db	45
   434  00FBF4  2D                 	db	45
   435  00FBF5  20                 	db	32
   436  00FBF6  32                 	db	50	;'2'
   437  00FBF7  73                 	db	115	;'s'
   438  00FBF8  20                 	db	32
   439  00FBF9  20                 	db	32
   440  00FBFA  20                 	db	32
   441  00FBFB  20                 	db	32
   442  00FBFC  20                 	db	32
   443  00FBFD  20                 	db	32
   444  00FBFE  20                 	db	32
   445  00FBFF  00                 	db	0
   446  00FC00                     STR_100:
   447  00FC00  44                 	db	68	;'D'
   448  00FC01  52                 	db	82	;'R'
   449  00FC02  4F                 	db	79	;'O'
   450  00FC03  50                 	db	80	;'P'
   451  00FC04  20                 	db	32
   452  00FC05  2D                 	db	45
   453  00FC06  2D                 	db	45
   454  00FC07  20                 	db	32
   455  00FC08  32                 	db	50	;'2'
   456  00FC09  73                 	db	115	;'s'
   457  00FC0A  20                 	db	32
   458  00FC0B  20                 	db	32
   459  00FC0C  20                 	db	32
   460  00FC0D  20                 	db	32
   461  00FC0E  20                 	db	32
   462  00FC0F  20                 	db	32
   463  00FC10  00                 	db	0
   464  00FC11                     STR_94:
   465  00FC11  4C                 	db	76	;'L'
   466  00FC12  45                 	db	69	;'E'
   467  00FC13  46                 	db	70	;'F'
   468  00FC14  54                 	db	84	;'T'
   469  00FC15  20                 	db	32
   470  00FC16  2D                 	db	45
   471  00FC17  2D                 	db	45
   472  00FC18  20                 	db	32
   473  00FC19  32                 	db	50	;'2'
   474  00FC1A  73                 	db	115	;'s'
   475  00FC1B  20                 	db	32
   476  00FC1C  20                 	db	32
   477  00FC1D  20                 	db	32
   478  00FC1E  20                 	db	32
   479  00FC1F  20                 	db	32
   480  00FC20  20                 	db	32
   481  00FC21  00                 	db	0
   482  00FC22                     STR_99:
   483  00FC22  4C                 	db	76	;'L'
   484  00FC23  45                 	db	69	;'E'
   485  00FC24  56                 	db	86	;'V'
   486  00FC25  45                 	db	69	;'E'
   487  00FC26  4C                 	db	76	;'L'
   488  00FC27  20                 	db	32
   489  00FC28  2D                 	db	45
   490  00FC29  2D                 	db	45
   491  00FC2A  20                 	db	32
   492  00FC2B  32                 	db	50	;'2'
   493  00FC2C  73                 	db	115	;'s'
   494  00FC2D  20                 	db	32
   495  00FC2E  20                 	db	32
   496  00FC2F  20                 	db	32
   497  00FC30  20                 	db	32
   498  00FC31  20                 	db	32
   499  00FC32  00                 	db	0
   500  00FC33                     STR_93:
   501  00FC33  52                 	db	82	;'R'
   502  00FC34  49                 	db	73	;'I'
   503  00FC35  47                 	db	71	;'G'
   504  00FC36  48                 	db	72	;'H'
   505  00FC37  54                 	db	84	;'T'
   506  00FC38  20                 	db	32
   507  00FC39  2D                 	db	45
   508  00FC3A  2D                 	db	45
   509  00FC3B  20                 	db	32
   510  00FC3C  32                 	db	50	;'2'
   511  00FC3D  73                 	db	115	;'s'
   512  00FC3E  20                 	db	32
   513  00FC3F  20                 	db	32
   514  00FC40  20                 	db	32
   515  00FC41  20                 	db	32
   516  00FC42  20                 	db	32
   517  00FC43  00                 	db	0
   518  00FC44                     STR_92:
   519  00FC44  4D                 	db	77	;'M'
   520  00FC45  49                 	db	73	;'I'
   521  00FC46  44                 	db	68	;'D'
   522  00FC47  44                 	db	68	;'D'
   523  00FC48  4C                 	db	76	;'L'
   524  00FC49  45                 	db	69	;'E'
   525  00FC4A  20                 	db	32
   526  00FC4B  2D                 	db	45
   527  00FC4C  2D                 	db	45
   528  00FC4D  20                 	db	32
   529  00FC4E  32                 	db	50	;'2'
   530  00FC4F  73                 	db	115	;'s'
   531  00FC50  20                 	db	32
   532  00FC51  20                 	db	32
   533  00FC52  20                 	db	32
   534  00FC53  20                 	db	32
   535  00FC54  00                 	db	0
   536  00FC55                     STR_109:
   537  00FC55  44                 	db	68	;'D'
   538  00FC56  20                 	db	32
   539  00FC57  57                 	db	87	;'W'
   540  00FC58  49                 	db	73	;'I'
   541  00FC59  4C                 	db	76	;'L'
   542  00FC5A  4C                 	db	76	;'L'
   543  00FC5B  20                 	db	32
   544  00FC5C  52                 	db	82	;'R'
   545  00FC5D  45                 	db	69	;'E'
   546  00FC5E  54                 	db	84	;'T'
   547  00FC5F  55                 	db	85	;'U'
   548  00FC60  52                 	db	82	;'R'
   549  00FC61  4E                 	db	78	;'N'
   550  00FC62  20                 	db	32
   551  00FC63  20                 	db	32
   552  00FC64  20                 	db	32
   553  00FC65  00                 	db	0
   554  00FC66                     STR_95:
   555  00FC66  4D                 	db	77	;'M'
   556  00FC67  49                 	db	73	;'I'
   557  00FC68  44                 	db	68	;'D'
   558  00FC69  2D                 	db	45
   559  00FC6A  4C                 	db	76	;'L'
   560  00FC6B  45                 	db	69	;'E'
   561  00FC6C  46                 	db	70	;'F'
   562  00FC6D  54                 	db	84	;'T'
   563  00FC6E  20                 	db	32
   564  00FC6F  2D                 	db	45
   565  00FC70  2D                 	db	45
   566  00FC71  20                 	db	32
   567  00FC72  32                 	db	50	;'2'
   568  00FC73  73                 	db	115	;'s'
   569  00FC74  20                 	db	32
   570  00FC75  20                 	db	32
   571  00FC76  00                 	db	0
   572  00FC77                     STR_96:
   573  00FC77  4D                 	db	77	;'M'
   574  00FC78  49                 	db	73	;'I'
   575  00FC79  44                 	db	68	;'D'
   576  00FC7A  2D                 	db	45
   577  00FC7B  52                 	db	82	;'R'
   578  00FC7C  49                 	db	73	;'I'
   579  00FC7D  47                 	db	71	;'G'
   580  00FC7E  48                 	db	72	;'H'
   581  00FC7F  54                 	db	84	;'T'
   582  00FC80  20                 	db	32
   583  00FC81  2D                 	db	45
   584  00FC82  2D                 	db	45
   585  00FC83  20                 	db	32
   586  00FC84  32                 	db	50	;'2'
   587  00FC85  73                 	db	115	;'s'
   588  00FC86  20                 	db	32
   589  00FC87  00                 	db	0
   590  00FC88                     STR_110:
   591  00FC88  45                 	db	69	;'E'
   592  00FC89  4C                 	db	76	;'L'
   593  00FC8A  53                 	db	83	;'S'
   594  00FC8B  45                 	db	69	;'E'
   595  00FC8C  20                 	db	32
   596  00FC8D  54                 	db	84	;'T'
   597  00FC8E  4F                 	db	79	;'O'
   598  00FC8F  47                 	db	71	;'G'
   599  00FC90  47                 	db	71	;'G'
   600  00FC91  4C                 	db	76	;'L'
   601  00FC92  45                 	db	69	;'E'
   602  00FC93  53                 	db	83	;'S'
   603  00FC94  20                 	db	32
   604  00FC95  52                 	db	82	;'R'
   605  00FC96  41                 	db	65	;'A'
   606  00FC97  35                 	db	53	;'5'
   607  00FC98  00                 	db	0
   608  00FC99                     STR_72:
   609  00FC99  41                 	db	65	;'A'
   610  00FC9A  4C                 	db	76	;'L'
   611  00FC9B  47                 	db	71	;'G'
   612  00FC9C  31                 	db	49	;'1'
   613  00FC9D  3A                 	db	58	;':'
   614  00FC9E  20                 	db	32
   615  00FC9F  39                 	db	57	;'9'
   616  00FCA0  20                 	db	32
   617  00FCA1  50                 	db	80	;'P'
   618  00FCA2  4F                 	db	79	;'O'
   619  00FCA3  50                 	db	80	;'P'
   620  00FCA4  4E                 	db	78	;'N'
   621  00FCA5  4F                 	db	79	;'O'
   622  00FCA6  54                 	db	84	;'T'
   623  00FCA7  41                 	db	65	;'A'
   624  00FCA8  42                 	db	66	;'B'
   625  00FCA9  00                 	db	0
   626  00FCAA                     STR_68:
   627  00FCAA  31                 	db	49	;'1'
   628  00FCAB  2E                 	db	46
   629  00FCAC  41                 	db	65	;'A'
   630  00FCAD  4C                 	db	76	;'L'
   631  00FCAE  47                 	db	71	;'G'
   632  00FCAF  7C                 	db	124
   633  00FCB0  32                 	db	50	;'2'
   634  00FCB1  2E                 	db	46
   635  00FCB2  53                 	db	83	;'S'
   636  00FCB3  4E                 	db	78	;'N'
   637  00FCB4  52                 	db	82	;'R'
   638  00FCB5  7C                 	db	124
   639  00FCB6  33                 	db	51	;'3'
   640  00FCB7  2E                 	db	46
   641  00FCB8  41                 	db	65	;'A'
   642  00FCB9  43                 	db	67	;'C'
   643  00FCBA  00                 	db	0
   644  00FCBB                     STR_87:
   645  00FCBB  54                 	db	84	;'T'
   646  00FCBC  53                 	db	83	;'S'
   647  00FCBD  54                 	db	84	;'T'
   648  00FCBE  3A                 	db	58	;':'
   649  00FCBF  20                 	db	32
   650  00FCC0  43                 	db	67	;'C'
   651  00FCC1  4F                 	db	79	;'O'
   652  00FCC2  4E                 	db	78	;'N'
   653  00FCC3  44                 	db	68	;'D'
   654  00FCC4  20                 	db	32
   655  00FCC5  53                 	db	83	;'S'
   656  00FCC6  4F                 	db	79	;'O'
   657  00FCC7  4C                 	db	76	;'L'
   658  00FCC8  4E                 	db	78	;'N'
   659  00FCC9  27                 	db	39
   660  00FCCA  44                 	db	68	;'D'
   661  00FCCB  00                 	db	0
   662  00FCCC                     STR_89:
   663  00FCCC  54                 	db	84	;'T'
   664  00FCCD  53                 	db	83	;'S'
   665  00FCCE  54                 	db	84	;'T'
   666  00FCCF  3A                 	db	58	;':'
   667  00FCD0  20                 	db	32
   668  00FCD1  50                 	db	80	;'P'
   669  00FCD2  55                 	db	85	;'U'
   670  00FCD3  53                 	db	83	;'S'
   671  00FCD4  48                 	db	72	;'H'
   672  00FCD5  20                 	db	32
   673  00FCD6  53                 	db	83	;'S'
   674  00FCD7  4F                 	db	79	;'O'
   675  00FCD8  4C                 	db	76	;'L'
   676  00FCD9  4E                 	db	78	;'N'
   677  00FCDA  27                 	db	39
   678  00FCDB  44                 	db	68	;'D'
   679  00FCDC  00                 	db	0
   680  00FCDD                     STR_69:
   681  00FCDD  34                 	db	52	;'4'
   682  00FCDE  2E                 	db	46
   683  00FCDF  48                 	db	72	;'H'
   684  00FCE0  49                 	db	73	;'I'
   685  00FCE1  7C                 	db	124
   686  00FCE2  35                 	db	53	;'5'
   687  00FCE3  2E                 	db	46
   688  00FCE4  54                 	db	84	;'T'
   689  00FCE5  4F                 	db	79	;'O'
   690  00FCE6  47                 	db	71	;'G'
   691  00FCE7  7C                 	db	124
   692  00FCE8  36                 	db	54	;'6'
   693  00FCE9  2E                 	db	46
   694  00FCEA  45                 	db	69	;'E'
   695  00FCEB  45                 	db	69	;'E'
   696  00FCEC  50                 	db	80	;'P'
   697  00FCED  00                 	db	0
   698  00FCEE                     STR_41:
   699  00FCEE  4C                 	db	76	;'L'
   700  00FCEF  4F                 	db	79	;'O'
   701  00FCF0  47                 	db	71	;'G'
   702  00FCF1  20                 	db	32
   703  00FCF2  31                 	db	49	;'1'
   704  00FCF3  20                 	db	32
   705  00FCF4  20                 	db	32
   706  00FCF5  20                 	db	32
   707  00FCF6  20                 	db	32
   708  00FCF7  20                 	db	32
   709  00FCF8  20                 	db	32
   710  00FCF9  20                 	db	32
   711  00FCFA  20                 	db	32
   712  00FCFB  20                 	db	32
   713  00FCFC  20                 	db	32
   714  00FCFD  20                 	db	32
   715  00FCFE  00                 	db	0
   716  00FCFF                     STR_40:
   717  00FCFF  4C                 	db	76	;'L'
   718  00FD00  4F                 	db	79	;'O'
   719  00FD01  47                 	db	71	;'G'
   720  00FD02  20                 	db	32
   721  00FD03  32                 	db	50	;'2'
   722  00FD04  20                 	db	32
   723  00FD05  20                 	db	32
   724  00FD06  20                 	db	32
   725  00FD07  20                 	db	32
   726  00FD08  20                 	db	32
   727  00FD09  20                 	db	32
   728  00FD0A  20                 	db	32
   729  00FD0B  20                 	db	32
   730  00FD0C  20                 	db	32
   731  00FD0D  20                 	db	32
   732  00FD0E  20                 	db	32
   733  00FD0F  00                 	db	0
   734  00FD10                     STR_44:
   735  00FD10  4C                 	db	76	;'L'
   736  00FD11  4F                 	db	79	;'O'
   737  00FD12  47                 	db	71	;'G'
   738  00FD13  20                 	db	32
   739  00FD14  33                 	db	51	;'3'
   740  00FD15  20                 	db	32
   741  00FD16  20                 	db	32
   742  00FD17  20                 	db	32
   743  00FD18  20                 	db	32
   744  00FD19  20                 	db	32
   745  00FD1A  20                 	db	32
   746  00FD1B  20                 	db	32
   747  00FD1C  20                 	db	32
   748  00FD1D  20                 	db	32
   749  00FD1E  20                 	db	32
   750  00FD1F  20                 	db	32
   751  00FD20  00                 	db	0
   752  00FD21                     STR_48:
   753  00FD21  4C                 	db	76	;'L'
   754  00FD22  4F                 	db	79	;'O'
   755  00FD23  47                 	db	71	;'G'
   756  00FD24  20                 	db	32
   757  00FD25  34                 	db	52	;'4'
   758  00FD26  20                 	db	32
   759  00FD27  20                 	db	32
   760  00FD28  20                 	db	32
   761  00FD29  20                 	db	32
   762  00FD2A  20                 	db	32
   763  00FD2B  20                 	db	32
   764  00FD2C  20                 	db	32
   765  00FD2D  20                 	db	32
   766  00FD2E  20                 	db	32
   767  00FD2F  20                 	db	32
   768  00FD30  20                 	db	32
   769  00FD31  00                 	db	0
   770  00FD32                     STR_36:
   771  00FD32  33                 	db	51	;'3'
   772  00FD33  2E                 	db	46
   773  00FD34  20                 	db	32
   774  00FD35  4C                 	db	76	;'L'
   775  00FD36  4F                 	db	79	;'O'
   776  00FD37  47                 	db	71	;'G'
   777  00FD38  53                 	db	83	;'S'
   778  00FD39  20                 	db	32
   779  00FD3A  20                 	db	32
   780  00FD3B  20                 	db	32
   781  00FD3C  20                 	db	32
   782  00FD3D  20                 	db	32
   783  00FD3E  20                 	db	32
   784  00FD3F  20                 	db	32
   785  00FD40  20                 	db	32
   786  00FD41  20                 	db	32
   787  00FD42  00                 	db	0
   788  00FD43                     STR_32:
   789  00FD43  32                 	db	50	;'2'
   790  00FD44  2E                 	db	46
   791  00FD45  20                 	db	32
   792  00FD46  53                 	db	83	;'S'
   793  00FD47  4F                 	db	79	;'O'
   794  00FD48  52                 	db	82	;'R'
   795  00FD49  54                 	db	84	;'T'
   796  00FD4A  20                 	db	32
   797  00FD4B  20                 	db	32
   798  00FD4C  20                 	db	32
   799  00FD4D  20                 	db	32
   800  00FD4E  20                 	db	32
   801  00FD4F  20                 	db	32
   802  00FD50  20                 	db	32
   803  00FD51  20                 	db	32
   804  00FD52  20                 	db	32
   805  00FD53  00                 	db	0
   806  00FD54                     STR_33:
   807  00FD54  31                 	db	49	;'1'
   808  00FD55  2E                 	db	46
   809  00FD56  20                 	db	32
   810  00FD57  44                 	db	68	;'D'
   811  00FD58  41                 	db	65	;'A'
   812  00FD59  54                 	db	84	;'T'
   813  00FD5A  45                 	db	69	;'E'
   814  00FD5B  2F                 	db	47
   815  00FD5C  54                 	db	84	;'T'
   816  00FD5D  49                 	db	73	;'I'
   817  00FD5E  4D                 	db	77	;'M'
   818  00FD5F  45                 	db	69	;'E'
   819  00FD60  20                 	db	32
   820  00FD61  20                 	db	32
   821  00FD62  20                 	db	32
   822  00FD63  20                 	db	32
   823  00FD64  00                 	db	0
   824  00FD65                     STR_24:
   825  00FD65  20                 	db	32
   826  00FD66  2D                 	db	45
   827  00FD67  2D                 	db	45
   828  00FD68  20                 	db	32
   829  00FD69  50                 	db	80	;'P'
   830  00FD6A  4F                 	db	79	;'O'
   831  00FD6B  50                 	db	80	;'P'
   832  00FD6C  20                 	db	32
   833  00FD6D  20                 	db	32
   834  00FD6E  43                 	db	67	;'C'
   835  00FD6F  41                 	db	65	;'A'
   836  00FD70  4E                 	db	78	;'N'
   837  00FD71  20                 	db	32
   838  00FD72  2D                 	db	45
   839  00FD73  2D                 	db	45
   840  00FD74  20                 	db	32
   841  00FD75  00                 	db	0
   842  00FD76                     STR_26:
   843  00FD76  20                 	db	32
   844  00FD77  2D                 	db	45
   845  00FD78  2D                 	db	45
   846  00FD79  20                 	db	32
   847  00FD7A  53                 	db	83	;'S'
   848  00FD7B  4F                 	db	79	;'O'
   849  00FD7C  55                 	db	85	;'U'
   850  00FD7D  50                 	db	80	;'P'
   851  00FD7E  20                 	db	32
   852  00FD7F  43                 	db	67	;'C'
   853  00FD80  41                 	db	65	;'A'
   854  00FD81  4E                 	db	78	;'N'
   855  00FD82  20                 	db	32
   856  00FD83  2D                 	db	45
   857  00FD84  2D                 	db	45
   858  00FD85  20                 	db	32
   859  00FD86  00                 	db	0
   860  00FD87                     STR_28:
   861  00FD87  2D                 	db	45
   862  00FD88  2D                 	db	45
   863  00FD89  20                 	db	32
   864  00FD8A  54                 	db	84	;'T'
   865  00FD8B  4F                 	db	79	;'O'
   866  00FD8C  54                 	db	84	;'T'
   867  00FD8D  41                 	db	65	;'A'
   868  00FD8E  4C                 	db	76	;'L'
   869  00FD8F  20                 	db	32
   870  00FD90  43                 	db	67	;'C'
   871  00FD91  41                 	db	65	;'A'
   872  00FD92  4E                 	db	78	;'N'
   873  00FD93  53                 	db	83	;'S'
   874  00FD94  20                 	db	32
   875  00FD95  2D                 	db	45
   876  00FD96  2D                 	db	45
   877  00FD97  00                 	db	0
   878  00FD98                     STR_39:
   879  00FD98  4C                 	db	76	;'L'
   880  00FD99  4F                 	db	79	;'O'
   881  00FD9A  47                 	db	71	;'G'
   882  00FD9B  20                 	db	32
   883  00FD9C  31                 	db	49	;'1'
   884  00FD9D  20                 	db	32
   885  00FD9E  20                 	db	32
   886  00FD9F  20                 	db	32
   887  00FDA0  20                 	db	32
   888  00FDA1  20                 	db	32
   889  00FDA2  20                 	db	32
   890  00FDA3  20                 	db	32
   891  00FDA4  20                 	db	32
   892  00FDA5  20                 	db	32
   893  00FDA6  20                 	db	32
   894  00FDA7  3C                 	db	60	;'<'
   895  00FDA8  00                 	db	0
   896  00FDA9                     STR_42:
   897  00FDA9  4C                 	db	76	;'L'
   898  00FDAA  4F                 	db	79	;'O'
   899  00FDAB  47                 	db	71	;'G'
   900  00FDAC  20                 	db	32
   901  00FDAD  32                 	db	50	;'2'
   902  00FDAE  20                 	db	32
   903  00FDAF  20                 	db	32
   904  00FDB0  20                 	db	32
   905  00FDB1  20                 	db	32
   906  00FDB2  20                 	db	32
   907  00FDB3  20                 	db	32
   908  00FDB4  20                 	db	32
   909  00FDB5  20                 	db	32
   910  00FDB6  20                 	db	32
   911  00FDB7  20                 	db	32
   912  00FDB8  3C                 	db	60	;'<'
   913  00FDB9  00                 	db	0
   914  00FDBA                     STR_46:
   915  00FDBA  4C                 	db	76	;'L'
   916  00FDBB  4F                 	db	79	;'O'
   917  00FDBC  47                 	db	71	;'G'
   918  00FDBD  20                 	db	32
   919  00FDBE  33                 	db	51	;'3'
   920  00FDBF  20                 	db	32
   921  00FDC0  20                 	db	32
   922  00FDC1  20                 	db	32
   923  00FDC2  20                 	db	32
   924  00FDC3  20                 	db	32
   925  00FDC4  20                 	db	32
   926  00FDC5  20                 	db	32
   927  00FDC6  20                 	db	32
   928  00FDC7  20                 	db	32
   929  00FDC8  20                 	db	32
   930  00FDC9  3C                 	db	60	;'<'
   931  00FDCA  00                 	db	0
   932  00FDCB                     STR_50:
   933  00FDCB  4C                 	db	76	;'L'
   934  00FDCC  4F                 	db	79	;'O'
   935  00FDCD  47                 	db	71	;'G'
   936  00FDCE  20                 	db	32
   937  00FDCF  34                 	db	52	;'4'
   938  00FDD0  20                 	db	32
   939  00FDD1  20                 	db	32
   940  00FDD2  20                 	db	32
   941  00FDD3  20                 	db	32
   942  00FDD4  20                 	db	32
   943  00FDD5  20                 	db	32
   944  00FDD6  20                 	db	32
   945  00FDD7  20                 	db	32
   946  00FDD8  20                 	db	32
   947  00FDD9  20                 	db	32
   948  00FDDA  3C                 	db	60	;'<'
   949  00FDDB  00                 	db	0
   950  00FDDC                     STR_38:
   951  00FDDC  33                 	db	51	;'3'
   952  00FDDD  2E                 	db	46
   953  00FDDE  20                 	db	32
   954  00FDDF  4C                 	db	76	;'L'
   955  00FDE0  4F                 	db	79	;'O'
   956  00FDE1  47                 	db	71	;'G'
   957  00FDE2  53                 	db	83	;'S'
   958  00FDE3  20                 	db	32
   959  00FDE4  20                 	db	32
   960  00FDE5  20                 	db	32
   961  00FDE6  20                 	db	32
   962  00FDE7  20                 	db	32
   963  00FDE8  20                 	db	32
   964  00FDE9  20                 	db	32
   965  00FDEA  20                 	db	32
   966  00FDEB  3C                 	db	60	;'<'
   967  00FDEC  00                 	db	0
   968  00FDED                     STR_34:
   969  00FDED  32                 	db	50	;'2'
   970  00FDEE  2E                 	db	46
   971  00FDEF  20                 	db	32
   972  00FDF0  53                 	db	83	;'S'
   973  00FDF1  4F                 	db	79	;'O'
   974  00FDF2  52                 	db	82	;'R'
   975  00FDF3  54                 	db	84	;'T'
   976  00FDF4  20                 	db	32
   977  00FDF5  20                 	db	32
   978  00FDF6  20                 	db	32
   979  00FDF7  20                 	db	32
   980  00FDF8  20                 	db	32
   981  00FDF9  20                 	db	32
   982  00FDFA  20                 	db	32
   983  00FDFB  20                 	db	32
   984  00FDFC  3C                 	db	60	;'<'
   985  00FDFD  00                 	db	0
   986  00FDFE                     STR_31:
   987  00FDFE  31                 	db	49	;'1'
   988  00FDFF  2E                 	db	46
   989  00FE00  20                 	db	32
   990  00FE01  44                 	db	68	;'D'
   991  00FE02  41                 	db	65	;'A'
   992  00FE03  54                 	db	84	;'T'
   993  00FE04  45                 	db	69	;'E'
   994  00FE05  2F                 	db	47
   995  00FE06  54                 	db	84	;'T'
   996  00FE07  49                 	db	73	;'I'
   997  00FE08  4D                 	db	77	;'M'
   998  00FE09  45                 	db	69	;'E'
   999  00FE0A  20                 	db	32
  1000  00FE0B  20                 	db	32
  1001  00FE0C  20                 	db	32
  1002  00FE0D  3C                 	db	60	;'<'
  1003  00FE0E  00                 	db	0
  1004  00FE0F                     STR_6:
  1005  00FE0F  50                 	db	80	;'P'
  1006  00FE10  41                 	db	65	;'A'
  1007  00FE11  55                 	db	85	;'U'
  1008  00FE12  53                 	db	83	;'S'
  1009  00FE13  45                 	db	69	;'E'
  1010  00FE14  20                 	db	32
  1011  00FE15  3C                 	db	60	;'<'
  1012  00FE16  20                 	db	32
  1013  00FE17  7C                 	db	124
  1014  00FE18  20                 	db	32
  1015  00FE19  42                 	db	66	;'B'
  1016  00FE1A  41                 	db	65	;'A'
  1017  00FE1B  43                 	db	67	;'C'
  1018  00FE1C  4B                 	db	75	;'K'
  1019  00FE1D  20                 	db	32
  1020  00FE1E  3E                 	db	62	;'>'
  1021  00FE1F  00                 	db	0
  1022  00FE20                     STR_30:
  1023  00FE20  50                 	db	80	;'P'
  1024  00FE21  55                 	db	85	;'U'
  1025  00FE22  53                 	db	83	;'S'
  1026  00FE23  48                 	db	72	;'H'
  1027  00FE24  20                 	db	32
  1028  00FE25  54                 	db	84	;'T'
  1029  00FE26  4F                 	db	79	;'O'
  1030  00FE27  20                 	db	32
  1031  00FE28  43                 	db	67	;'C'
  1032  00FE29  4F                 	db	79	;'O'
  1033  00FE2A  4E                 	db	78	;'N'
  1034  00FE2B  54                 	db	84	;'T'
  1035  00FE2C  49                 	db	73	;'I'
  1036  00FE2D  4E                 	db	78	;'N'
  1037  00FE2E  55                 	db	85	;'U'
  1038  00FE2F  45                 	db	69	;'E'
  1039  00FE30  00                 	db	0
  1040  00FE31                     STR_82:
  1041  00FE31  4D                 	db	77	;'M'
  1042  00FE32  41                 	db	65	;'A'
  1043  00FE33  47                 	db	71	;'G'
  1044  00FE34  5F                 	db	95	;'_'
  1045  00FE35  73                 	db	115	;'s'
  1046  00FE36  69                 	db	105	;'i'
  1047  00FE37  67                 	db	103	;'g'
  1048  00FE38  6E                 	db	110	;'n'
  1049  00FE39  61                 	db	97	;'a'
  1050  00FE3A  6C                 	db	108	;'l'
  1051  00FE3B  3A                 	db	58	;':'
  1052  00FE3C  20                 	db	32
  1053  00FE3D  25                 	db	37
  1054  00FE3E  64                 	db	100	;'d'
  1055  00FE3F  20                 	db	32
  1056  00FE40  00                 	db	0
  1057  00FE41                     STR_98:
  1058  00FE41  54                 	db	84	;'T'
  1059  00FE42  53                 	db	83	;'S'
  1060  00FE43  54                 	db	84	;'T'
  1061  00FE44  3A                 	db	58	;':'
  1062  00FE45  20                 	db	32
  1063  00FE46  54                 	db	84	;'T'
  1064  00FE47  49                 	db	73	;'I'
  1065  00FE48  4C                 	db	76	;'L'
  1066  00FE49  54                 	db	84	;'T'
  1067  00FE4A  20                 	db	32
  1068  00FE4B  53                 	db	83	;'S'
  1069  00FE4C  45                 	db	69	;'E'
  1070  00FE4D  52                 	db	82	;'R'
  1071  00FE4E  56                 	db	86	;'V'
  1072  00FE4F  4F                 	db	79	;'O'
  1073  00FE50  00                 	db	0
  1074  00FE51                     STR_4:
  1075  00FE51  44                 	db	68	;'D'
  1076  00FE52  49                 	db	73	;'I'
  1077  00FE53  44                 	db	68	;'D'
  1078  00FE54  4E                 	db	78	;'N'
  1079  00FE55  27                 	db	39
  1080  00FE56  54                 	db	84	;'T'
  1081  00FE57  20                 	db	32
  1082  00FE58  43                 	db	67	;'C'
  1083  00FE59  4F                 	db	79	;'O'
  1084  00FE5A  4D                 	db	77	;'M'
  1085  00FE5B  50                 	db	80	;'P'
  1086  00FE5C  4C                 	db	76	;'L'
  1087  00FE5D  45                 	db	69	;'E'
  1088  00FE5E  54                 	db	84	;'T'
  1089  00FE5F  45                 	db	69	;'E'
  1090  00FE60  00                 	db	0
  1091  00FE61                     STR_80:
  1092  00FE61  49                 	db	73	;'I'
  1093  00FE62  52                 	db	82	;'R'
  1094  00FE63  5F                 	db	95	;'_'
  1095  00FE64  73                 	db	115	;'s'
  1096  00FE65  69                 	db	105	;'i'
  1097  00FE66  67                 	db	103	;'g'
  1098  00FE67  6E                 	db	110	;'n'
  1099  00FE68  61                 	db	97	;'a'
  1100  00FE69  6C                 	db	108	;'l'
  1101  00FE6A  3A                 	db	58	;':'
  1102  00FE6B  20                 	db	32
  1103  00FE6C  25                 	db	37
  1104  00FE6D  64                 	db	100	;'d'
  1105  00FE6E  20                 	db	32
  1106  00FE6F  00                 	db	0
  1107  00FE70                     STR_104:
  1108  00FE70  43                 	db	67	;'C'
  1109  00FE71  41                 	db	65	;'A'
  1110  00FE72  4D                 	db	77	;'M'
  1111  00FE73  20                 	db	32
  1112  00FE74  44                 	db	68	;'D'
  1113  00FE75  57                 	db	87	;'W'
  1114  00FE76  4E                 	db	78	;'N'
  1115  00FE77  20                 	db	32
  1116  00FE78  7C                 	db	124
  1117  00FE79  52                 	db	82	;'R'
  1118  00FE7A  43                 	db	67	;'C'
  1119  00FE7B  30                 	db	48	;'0'
  1120  00FE7C  3D                 	db	61	;'='
  1121  00FE7D  30                 	db	48	;'0'
  1122  00FE7E  00                 	db	0
  1123  00FE7F                     STR_103:
  1124  00FE7F  43                 	db	67	;'C'
  1125  00FE80  41                 	db	65	;'A'
  1126  00FE81  4D                 	db	77	;'M'
  1127  00FE82  20                 	db	32
  1128  00FE83  55                 	db	85	;'U'
  1129  00FE84  50                 	db	80	;'P'
  1130  00FE85  20                 	db	32
  1131  00FE86  20                 	db	32
  1132  00FE87  7C                 	db	124
  1133  00FE88  52                 	db	82	;'R'
  1134  00FE89  43                 	db	67	;'C'
  1135  00FE8A  30                 	db	48	;'0'
  1136  00FE8B  3D                 	db	61	;'='
  1137  00FE8C  31                 	db	49	;'1'
  1138  00FE8D  00                 	db	0
  1139  00FE8E                     STR_81:
  1140  00FE8E  54                 	db	84	;'T'
  1141  00FE8F  53                 	db	83	;'S'
  1142  00FE90  54                 	db	84	;'T'
  1143  00FE91  3A                 	db	58	;':'
  1144  00FE92  20                 	db	32
  1145  00FE93  4D                 	db	77	;'M'
  1146  00FE94  41                 	db	65	;'A'
  1147  00FE95  47                 	db	71	;'G'
  1148  00FE96  4E                 	db	78	;'N'
  1149  00FE97  45                 	db	69	;'E'
  1150  00FE98  54                 	db	84	;'T'
  1151  00FE99  49                 	db	73	;'I'
  1152  00FE9A  53                 	db	83	;'S'
  1153  00FE9B  4D                 	db	77	;'M'
  1154  00FE9C  00                 	db	0
  1155  00FE9D                     STR_102:
  1156  00FE9D  54                 	db	84	;'T'
  1157  00FE9E  53                 	db	83	;'S'
  1158  00FE9F  54                 	db	84	;'T'
  1159  00FEA0  3A                 	db	58	;':'
  1160  00FEA1  20                 	db	32
  1161  00FEA2  43                 	db	67	;'C'
  1162  00FEA3  41                 	db	65	;'A'
  1163  00FEA4  4D                 	db	77	;'M'
  1164  00FEA5  20                 	db	32
  1165  00FEA6  53                 	db	83	;'S'
  1166  00FEA7  45                 	db	69	;'E'
  1167  00FEA8  52                 	db	82	;'R'
  1168  00FEA9  56                 	db	86	;'V'
  1169  00FEAA  4F                 	db	79	;'O'
  1170  00FEAB  00                 	db	0
  1171  00FEAC                     STR_91:
  1172  00FEAC  54                 	db	84	;'T'
  1173  00FEAD  53                 	db	83	;'S'
  1174  00FEAE  54                 	db	84	;'T'
  1175  00FEAF  3A                 	db	58	;':'
  1176  00FEB0  20                 	db	32
  1177  00FEB1  50                 	db	80	;'P'
  1178  00FEB2  41                 	db	65	;'A'
  1179  00FEB3  4E                 	db	78	;'N'
  1180  00FEB4  20                 	db	32
  1181  00FEB5  53                 	db	83	;'S'
  1182  00FEB6  45                 	db	69	;'E'
  1183  00FEB7  52                 	db	82	;'R'
  1184  00FEB8  56                 	db	86	;'V'
  1185  00FEB9  4F                 	db	79	;'O'
  1186  00FEBA  00                 	db	0
  1187  00FEBB                     STR_75:
  1188  00FEBB  41                 	db	65	;'A'
  1189  00FEBC  4C                 	db	76	;'L'
  1190  00FEBD  47                 	db	71	;'G'
  1191  00FEBE  34                 	db	52	;'4'
  1192  00FEBF  3A                 	db	58	;':'
  1193  00FEC0  20                 	db	32
  1194  00FEC1  41                 	db	65	;'A'
  1195  00FEC2  4C                 	db	76	;'L'
  1196  00FEC3  4C                 	db	76	;'L'
  1197  00FEC4  20                 	db	32
  1198  00FEC5  43                 	db	67	;'C'
  1199  00FEC6  41                 	db	65	;'A'
  1200  00FEC7  4E                 	db	78	;'N'
  1201  00FEC8  53                 	db	83	;'S'
  1202  00FEC9  00                 	db	0
  1203  00FECA                     STR_85:
  1204  00FECA  54                 	db	84	;'T'
  1205  00FECB  53                 	db	83	;'S'
  1206  00FECC  54                 	db	84	;'T'
  1207  00FECD  3A                 	db	58	;':'
  1208  00FECE  20                 	db	32
  1209  00FECF  44                 	db	68	;'D'
  1210  00FED0  43                 	db	67	;'C'
  1211  00FED1  20                 	db	32
  1212  00FED2  4D                 	db	77	;'M'
  1213  00FED3  4F                 	db	79	;'O'
  1214  00FED4  54                 	db	84	;'T'
  1215  00FED5  4F                 	db	79	;'O'
  1216  00FED6  52                 	db	82	;'R'
  1217  00FED7  53                 	db	83	;'S'
  1218  00FED8  00                 	db	0
  1219  00FED9                     STR_70:
  1220  00FED9  41                 	db	65	;'A'
  1221  00FEDA  4C                 	db	76	;'L'
  1222  00FEDB  47                 	db	71	;'G'
  1223  00FEDC  4F                 	db	79	;'O'
  1224  00FEDD  52                 	db	82	;'R'
  1225  00FEDE  49                 	db	73	;'I'
  1226  00FEDF  54                 	db	84	;'T'
  1227  00FEE0  48                 	db	72	;'H'
  1228  00FEE1  4D                 	db	77	;'M'
  1229  00FEE2  20                 	db	32
  1230  00FEE3  54                 	db	84	;'T'
  1231  00FEE4  45                 	db	69	;'E'
  1232  00FEE5  53                 	db	83	;'S'
  1233  00FEE6  54                 	db	84	;'T'
  1234  00FEE7  00                 	db	0
  1235  00FEE8                     STR_86:
  1236  00FEE8  50                 	db	80	;'P'
  1237  00FEE9  49                 	db	73	;'I'
  1238  00FEEA  4E                 	db	78	;'N'
  1239  00FEEB  20                 	db	32
  1240  00FEEC  52                 	db	82	;'R'
  1241  00FEED  41                 	db	65	;'A'
  1242  00FEEE  35                 	db	53	;'5'
  1243  00FEEF  20                 	db	32
  1244  00FEF0  48                 	db	72	;'H'
  1245  00FEF1  49                 	db	73	;'I'
  1246  00FEF2  47                 	db	71	;'G'
  1247  00FEF3  48                 	db	72	;'H'
  1248  00FEF4  2E                 	db	46
  1249  00FEF5  00                 	db	0
  1250  00FEF6                     STR_73:
  1251  00FEF6  41                 	db	65	;'A'
  1252  00FEF7  4C                 	db	76	;'L'
  1253  00FEF8  47                 	db	71	;'G'
  1254  00FEF9  32                 	db	50	;'2'
  1255  00FEFA  3A                 	db	58	;':'
  1256  00FEFB  20                 	db	32
  1257  00FEFC  31                 	db	49	;'1'
  1258  00FEFD  32                 	db	50	;'2'
  1259  00FEFE  20                 	db	32
  1260  00FEFF  43                 	db	67	;'C'
  1261  00FF00  41                 	db	65	;'A'
  1262  00FF01  4E                 	db	78	;'N'
  1263  00FF02  53                 	db	83	;'S'
  1264  00FF03  00                 	db	0
  1265  00FF04                     STR_76:
  1266  00FF04  41                 	db	65	;'A'
  1267  00FF05  4C                 	db	76	;'L'
  1268  00FF06  47                 	db	71	;'G'
  1269  00FF07  35                 	db	53	;'5'
  1270  00FF08  3A                 	db	58	;':'
  1271  00FF09  20                 	db	32
  1272  00FF0A  4E                 	db	78	;'N'
  1273  00FF0B  4F                 	db	79	;'O'
  1274  00FF0C  20                 	db	32
  1275  00FF0D  43                 	db	67	;'C'
  1276  00FF0E  41                 	db	65	;'A'
  1277  00FF0F  4E                 	db	78	;'N'
  1278  00FF10  53                 	db	83	;'S'
  1279  00FF11  00                 	db	0
  1280  00FF12                     STR_71:
  1281  00FF12  50                 	db	80	;'P'
  1282  00FF13  55                 	db	85	;'U'
  1283  00FF14  53                 	db	83	;'S'
  1284  00FF15  48                 	db	72	;'H'
  1285  00FF16  20                 	db	32
  1286  00FF17  54                 	db	84	;'T'
  1287  00FF18  4F                 	db	79	;'O'
  1288  00FF19  20                 	db	32
  1289  00FF1A  53                 	db	83	;'S'
  1290  00FF1B  54                 	db	84	;'T'
  1291  00FF1C  41                 	db	65	;'A'
  1292  00FF1D  52                 	db	82	;'R'
  1293  00FF1E  54                 	db	84	;'T'
  1294  00FF1F  00                 	db	0
  1295  00FF20                     STR_23:
  1296  00FF20  25                 	db	37
  1297  00FF21  64                 	db	100	;'d'
  1298  00FF22  20                 	db	32
  1299  00FF23  4D                 	db	77	;'M'
  1300  00FF24  49                 	db	73	;'I'
  1301  00FF25  4E                 	db	78	;'N'
  1302  00FF26  20                 	db	32
  1303  00FF27  25                 	db	37
  1304  00FF28  64                 	db	100	;'d'
  1305  00FF29  20                 	db	32
  1306  00FF2A  53                 	db	83	;'S'
  1307  00FF2B  45                 	db	69	;'E'
  1308  00FF2C  43                 	db	67	;'C'
  1309  00FF2D  00                 	db	0
  1310  00FF2E                     STR_2:
  1311  00FF2E  54                 	db	84	;'T'
  1312  00FF2F  49                 	db	73	;'I'
  1313  00FF30  4D                 	db	77	;'M'
  1314  00FF31  45                 	db	69	;'E'
  1315  00FF32  3A                 	db	58	;':'
  1316  00FF33  20                 	db	32
  1317  00FF34  25                 	db	37
  1318  00FF35  64                 	db	100	;'d'
  1319  00FF36  3A                 	db	58	;':'
  1320  00FF37  25                 	db	37
  1321  00FF38  30                 	db	48	;'0'
  1322  00FF39  32                 	db	50	;'2'
  1323  00FF3A  64                 	db	100	;'d'
  1324  00FF3B  00                 	db	0
  1325  00FF3C                     STR_79:
  1326  00FF3C  54                 	db	84	;'T'
  1327  00FF3D  53                 	db	83	;'S'
  1328  00FF3E  54                 	db	84	;'T'
  1329  00FF3F  3A                 	db	58	;':'
  1330  00FF40  20                 	db	32
  1331  00FF41  49                 	db	73	;'I'
  1332  00FF42  52                 	db	82	;'R'
  1333  00FF43  20                 	db	32
  1334  00FF44  53                 	db	83	;'S'
  1335  00FF45  4E                 	db	78	;'N'
  1336  00FF46  53                 	db	83	;'S'
  1337  00FF47  52                 	db	82	;'R'
  1338  00FF48  00                 	db	0
  1339  00FF49                     STR_107:
  1340  00FF49  53                 	db	83	;'S'
  1341  00FF4A  4F                 	db	79	;'O'
  1342  00FF4B  4C                 	db	76	;'L'
  1343  00FF4C  45                 	db	69	;'E'
  1344  00FF4D  4E                 	db	78	;'N'
  1345  00FF4E  4F                 	db	79	;'O'
  1346  00FF4F  49                 	db	73	;'I'
  1347  00FF50  44                 	db	68	;'D'
  1348  00FF51  20                 	db	32
  1349  00FF52  54                 	db	84	;'T'
  1350  00FF53  53                 	db	83	;'S'
  1351  00FF54  54                 	db	84	;'T'
  1352  00FF55  00                 	db	0
  1353  00FF56                     STR_65:
  1354  00FF56  54                 	db	84	;'T'
  1355  00FF57  49                 	db	73	;'I'
  1356  00FF58  4D                 	db	77	;'M'
  1357  00FF59  45                 	db	69	;'E'
  1358  00FF5A  20                 	db	32
  1359  00FF5B  25                 	db	37
  1360  00FF5C  64                 	db	100	;'d'
  1361  00FF5D  3A                 	db	58	;':'
  1362  00FF5E  25                 	db	37
  1363  00FF5F  30                 	db	48	;'0'
  1364  00FF60  32                 	db	50	;'2'
  1365  00FF61  64                 	db	100	;'d'
  1366  00FF62  00                 	db	0
  1367  00FF63                     STR_74:
  1368  00FF63  41                 	db	65	;'A'
  1369  00FF64  4C                 	db	76	;'L'
  1370  00FF65  47                 	db	71	;'G'
  1371  00FF66  33                 	db	51	;'3'
  1372  00FF67  3A                 	db	58	;':'
  1373  00FF68  20                 	db	32
  1374  00FF69  31                 	db	49	;'1'
  1375  00FF6A  20                 	db	32
  1376  00FF6B  43                 	db	67	;'C'
  1377  00FF6C  41                 	db	65	;'A'
  1378  00FF6D  4E                 	db	78	;'N'
  1379  00FF6E  00                 	db	0
  1380  00FF6F                     STR_88:
  1381  00FF6F  50                 	db	80	;'P'
  1382  00FF70  49                 	db	73	;'I'
  1383  00FF71  4E                 	db	78	;'N'
  1384  00FF72  20                 	db	32
  1385  00FF73  52                 	db	82	;'R'
  1386  00FF74  41                 	db	65	;'A'
  1387  00FF75  33                 	db	51	;'3'
  1388  00FF76  2E                 	db	46
  1389  00FF77  2E                 	db	46
  1390  00FF78  2E                 	db	46
  1391  00FF79  00                 	db	0
  1392  00FF7A                     STR_90:
  1393  00FF7A  50                 	db	80	;'P'
  1394  00FF7B  49                 	db	73	;'I'
  1395  00FF7C  4E                 	db	78	;'N'
  1396  00FF7D  20                 	db	32
  1397  00FF7E  52                 	db	82	;'R'
  1398  00FF7F  41                 	db	65	;'A'
  1399  00FF80  34                 	db	52	;'4'
  1400  00FF81  2E                 	db	46
  1401  00FF82  2E                 	db	46
  1402  00FF83  2E                 	db	46
  1403  00FF84  00                 	db	0
  1404  00FF85                     STR_64:
  1405  00FF85  53                 	db	83	;'S'
  1406  00FF86  4F                 	db	79	;'O'
  1407  00FF87  52                 	db	82	;'R'
  1408  00FF88  54                 	db	84	;'T'
  1409  00FF89  49                 	db	73	;'I'
  1410  00FF8A  4E                 	db	78	;'N'
  1411  00FF8B  47                 	db	71	;'G'
  1412  00FF8C  2E                 	db	46
  1413  00FF8D  2E                 	db	46
  1414  00FF8E  2E                 	db	46
  1415  00FF8F  00                 	db	0
  1416  00FF90                     STR_108:
  1417  00FF90  50                 	db	80	;'P'
  1418  00FF91  55                 	db	85	;'U'
  1419  00FF92  53                 	db	83	;'S'
  1420  00FF93  48                 	db	72	;'H'
  1421  00FF94  20                 	db	32
  1422  00FF95  44                 	db	68	;'D'
  1423  00FF96  4F                 	db	79	;'O'
  1424  00FF97  4E                 	db	78	;'N'
  1425  00FF98  45                 	db	69	;'E'
  1426  00FF99  00                 	db	0
  1427  00FF9A                     STR_83:
  1428  00FF9A  41                 	db	65	;'A'
  1429  00FF9B  43                 	db	67	;'C'
  1430  00FF9C  54                 	db	84	;'T'
  1431  00FF9D  55                 	db	85	;'U'
  1432  00FF9E  41                 	db	65	;'A'
  1433  00FF9F  54                 	db	84	;'T'
  1434  00FFA0  4F                 	db	79	;'O'
  1435  00FFA1  52                 	db	82	;'R'
  1436  00FFA2  53                 	db	83	;'S'
  1437  00FFA3  00                 	db	0
  1438  00FFA4                     STR_22:
  1439  00FFA4  44                 	db	68	;'D'
  1440  00FFA5  55                 	db	85	;'U'
  1441  00FFA6  52                 	db	82	;'R'
  1442  00FFA7  41                 	db	65	;'A'
  1443  00FFA8  54                 	db	84	;'T'
  1444  00FFA9  49                 	db	73	;'I'
  1445  00FFAA  4F                 	db	79	;'O'
  1446  00FFAB  4E                 	db	78	;'N'
  1447  00FFAC  3A                 	db	58	;':'
  1448  00FFAD  00                 	db	0
  1449  00FFAE                     STR_77:
  1450  00FFAE  53                 	db	83	;'S'
  1451  00FFAF  45                 	db	69	;'E'
  1452  00FFB0  4E                 	db	78	;'N'
  1453  00FFB1  53                 	db	83	;'S'
  1454  00FFB2  4F                 	db	79	;'O'
  1455  00FFB3  52                 	db	82	;'R'
  1456  00FFB4  53                 	db	83	;'S'
  1457  00FFB5  00                 	db	0
  1458  00FFB6                     STR_111:
  1459  00FFB6  28                 	db	40
  1460  00FFB7  6E                 	db	110	;'n'
  1461  00FFB8  75                 	db	117	;'u'
  1462  00FFB9  6C                 	db	108	;'l'
  1463  00FFBA  6C                 	db	108	;'l'
  1464  00FFBB  29                 	db	41
  1465  00FFBC  00                 	db	0
  1466  00FFBD                     STR_67:
  1467  00FFBD  46                 	db	70	;'F'
  1468  00FFBE  41                 	db	65	;'A'
  1469  00FFBF  49                 	db	73	;'I'
  1470  00FFC0  4C                 	db	76	;'L'
  1471  00FFC1  45                 	db	69	;'E'
  1472  00FFC2  44                 	db	68	;'D'
  1473  00FFC3  00                 	db	0
  1474  00FFC4                     STR_7:
  1475  00FFC4  53                 	db	83	;'S'
  1476  00FFC5  54                 	db	84	;'T'
  1477  00FFC6  41                 	db	65	;'A'
  1478  00FFC7  52                 	db	82	;'R'
  1479  00FFC8  54                 	db	84	;'T'
  1480  00FFC9  3A                 	db	58	;':'
  1481  00FFCA  00                 	db	0
  1482  00FFCB                     STR_9:
  1483  00FFCB  46                 	db	70	;'F'
  1484  00FFCC  45                 	db	69	;'E'
  1485  00FFCD  42                 	db	66	;'B'
  1486  00FFCE  00                 	db	0
  1487  00FFCF                     STR_19:
  1488  00FFCF  44                 	db	68	;'D'
  1489  00FFD0  45                 	db	69	;'E'
  1490  00FFD1  43                 	db	67	;'C'
  1491  00FFD2  00                 	db	0
  1492  00FFD3                     STR_15:
  1493  00FFD3  41                 	db	65	;'A'
  1494  00FFD4  55                 	db	85	;'U'
  1495  00FFD5  47                 	db	71	;'G'
  1496  00FFD6  00                 	db	0
  1497  00FFD7                     STR_14:
  1498  00FFD7  4A                 	db	74	;'J'
  1499  00FFD8  55                 	db	85	;'U'
  1500  00FFD9  4C                 	db	76	;'L'
  1501  00FFDA  00                 	db	0
  1502  00FFDB                     STR_8:
  1503  00FFDB  4A                 	db	74	;'J'
  1504  00FFDC  41                 	db	65	;'A'
  1505  00FFDD  4E                 	db	78	;'N'
  1506  00FFDE  00                 	db	0
  1507  00FFDF                     STR_13:
  1508  00FFDF  4A                 	db	74	;'J'
  1509  00FFE0  55                 	db	85	;'U'
  1510  00FFE1  4E                 	db	78	;'N'
  1511  00FFE2  00                 	db	0
  1512  00FFE3                     STR_16:
  1513  00FFE3  53                 	db	83	;'S'
  1514  00FFE4  45                 	db	69	;'E'
  1515  00FFE5  50                 	db	80	;'P'
  1516  00FFE6  00                 	db	0
  1517  00FFE7                     STR_10:
  1518  00FFE7  4D                 	db	77	;'M'
  1519  00FFE8  41                 	db	65	;'A'
  1520  00FFE9  52                 	db	82	;'R'
  1521  00FFEA  00                 	db	0
  1522  00FFEB                     STR_11:
  1523  00FFEB  41                 	db	65	;'A'
  1524  00FFEC  50                 	db	80	;'P'
  1525  00FFED  52                 	db	82	;'R'
  1526  00FFEE  00                 	db	0
  1527  00FFEF                     STR_20:
  1528  00FFEF  45                 	db	69	;'E'
  1529  00FFF0  52                 	db	82	;'R'
  1530  00FFF1  52                 	db	82	;'R'
  1531  00FFF2  00                 	db	0
  1532  00FFF3                     STR_17:
  1533  00FFF3  4F                 	db	79	;'O'
  1534  00FFF4  43                 	db	67	;'C'
  1535  00FFF5  54                 	db	84	;'T'
  1536  00FFF6  00                 	db	0
  1537  00FFF7                     STR_18:
  1538  00FFF7  4E                 	db	78	;'N'
  1539  00FFF8  4F                 	db	79	;'O'
  1540  00FFF9  56                 	db	86	;'V'
  1541  00FFFA  00                 	db	0
  1542  00FFFB                     STR_12:
  1543  00FFFB  4D                 	db	77	;'M'
  1544  00FFFC  41                 	db	65	;'A'
  1545  00FFFD  59                 	db	89	;'Y'
  1546  00FFFE  00                 	db	0
  1547  0000                     
  1548                           ; #config settings
  1549  00FFFF  00                 	db	0	; dummy byte at the end
  1550  0000                     
  1551                           	psect	cinit
  1552  003DF2                     __pcinit:
  1553                           	opt stack 0
  1554  003DF2                     start_initialization:
  1555                           	opt stack 0
  1556  003DF2                     __initialization:
  1557                           	opt stack 0
  1558                           
  1559                           ; Initialize objects allocated to BANK1 (8 bytes)
  1560                           ; load TBLPTR registers with __pidataBANK1
  1561  003DF2  0E46               	movlw	low __pidataBANK1
  1562  003DF4  6EF6               	movwf	tblptrl,c
  1563  003DF6  0E45               	movlw	high __pidataBANK1
  1564  003DF8  6EF7               	movwf	tblptrh,c
  1565  003DFA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1566  003DFC  6EF8               	movwf	tblptru,c
  1567  003DFE  EE01  F02D         	lfsr	0,__pdataBANK1
  1568  003E02  EE10 F008          	lfsr	1,8
  1569  003E06                     copy_data0:
  1570  003E06  0009               	tblrd		*+
  1571  003E08  CFF5 FFEE          	movff	tablat,postinc0
  1572  003E0C  50E5               	movf	postdec1,w,c
  1573  003E0E  50E1               	movf	fsr1l,w,c
  1574  003E10  E1FA               	bnz	copy_data0
  1575                           
  1576                           ; Clear objects allocated to BANK1 (45 bytes)
  1577  003E12  EE01  F000         	lfsr	0,__pbssBANK1
  1578  003E16  0E2D               	movlw	45
  1579  003E18                     clear_0:
  1580  003E18  6AEE               	clrf	postinc0,c
  1581  003E1A  06E8               	decf	wreg,f,c
  1582  003E1C  E1FD               	bnz	clear_0
  1583                           
  1584                           ; Clear objects allocated to BANK0 (38 bytes)
  1585  003E1E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1586  003E22  0E26               	movlw	38
  1587  003E24                     clear_1:
  1588  003E24  6AEE               	clrf	postinc0,c
  1589  003E26  06E8               	decf	wreg,f,c
  1590  003E28  E1FD               	bnz	clear_1
  1591                           
  1592                           ; Clear objects allocated to COMRAM (35 bytes)
  1593  003E2A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1594  003E2E  0E23               	movlw	35
  1595  003E30                     clear_2:
  1596  003E30  6AEE               	clrf	postinc0,c
  1597  003E32  06E8               	decf	wreg,f,c
  1598  003E34  E1FD               	bnz	clear_2
  1599  003E36                     end_of_initialization:
  1600                           	opt stack 0
  1601  003E36                     __end_of__initialization:
  1602                           	opt stack 0
  1603  003E36  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1604  003E38  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1605  003E3A  0100               	movlb	0
  1606  003E3C  EF49  F01B         	goto	_main	;jump to C main() function
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           	psect	bssCOMRAM
  1617  00005B                     __pbssCOMRAM:
  1618                           	opt stack 0
  1619  00005B                     _back:
  1620                           	opt stack 0
  1621  00005B                     	ds	2
  1622  00005D                     _count_can_no_lab:
  1623                           	opt stack 0
  1624  00005D                     	ds	2
  1625  00005F                     _count_can_w_lab:
  1626                           	opt stack 0
  1627  00005F                     	ds	2
  1628  000061                     _count_pop_no_tab:
  1629                           	opt stack 0
  1630  000061                     	ds	2
  1631  000063                     _count_pop_w_tab:
  1632                           	opt stack 0
  1633  000063                     	ds	2
  1634  000065                     _cur_can:
  1635                           	opt stack 0
  1636  000065                     	ds	2
  1637  000067                     _down:
  1638                           	opt stack 0
  1639  000067                     	ds	2
  1640  000069                     _enter:
  1641                           	opt stack 0
  1642  000069                     	ds	2
  1643  00006B                     _f_ID_receive:
  1644                           	opt stack 0
  1645  00006B                     	ds	2
  1646  00006D                     _f_can_coming_to_ID:
  1647                           	opt stack 0
  1648  00006D                     	ds	2
  1649  00006F                     _f_can_coming_to_distribution:
  1650                           	opt stack 0
  1651  00006F                     	ds	2
  1652  000071                     _f_can_distributed:
  1653                           	opt stack 0
  1654  000071                     	ds	2
  1655  000073                     _f_lastCan:
  1656                           	opt stack 0
  1657  000073                     	ds	2
  1658  000075                     _firstboot:
  1659                           	opt stack 0
  1660  000075                     	ds	2
  1661  000077                     _up:
  1662                           	opt stack 0
  1663  000077                     	ds	2
  1664  000079                     _was_low_1:
  1665                           	opt stack 0
  1666  000079                     	ds	2
  1667  00007B                     _was_low_3:
  1668                           	opt stack 0
  1669  00007B                     	ds	2
  1670  00007D                     _input:
  1671                           	opt stack 0
  1672  00007D                     	ds	1
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           postdec1	equ	0xFE5
  1680                           fsr1l	equ	0xFE1
  1681                           
  1682                           	psect	bssBANK0
  1683  0000DA                     __pbssBANK0:
  1684                           	opt stack 0
  1685  0000DA                     _IR_signal:
  1686                           	opt stack 0
  1687  0000DA                     	ds	2
  1688  0000DC                     _MAG_signal:
  1689                           	opt stack 0
  1690  0000DC                     	ds	2
  1691  0000DE                     _cur_state:
  1692                           	opt stack 0
  1693  0000DE                     	ds	2
  1694  0000E0                     _debug:
  1695                           	opt stack 0
  1696  0000E0                     	ds	2
  1697  0000E2                     _f_loadingNewCan:
  1698                           	opt stack 0
  1699  0000E2                     	ds	2
  1700  0000E4                     _first:
  1701                           	opt stack 0
  1702  0000E4                     	ds	2
  1703  0000E6                     _log:
  1704                           	opt stack 0
  1705  0000E6                     	ds	2
  1706  0000E8                     _log_completion:
  1707                           	opt stack 0
  1708  0000E8                     	ds	2
  1709  0000EA                     _log_count_can_no_lab:
  1710                           	opt stack 0
  1711  0000EA                     	ds	2
  1712  0000EC                     _log_count_can_w_lab:
  1713                           	opt stack 0
  1714  0000EC                     	ds	2
  1715  0000EE                     _log_count_pop_no_tab:
  1716                           	opt stack 0
  1717  0000EE                     	ds	2
  1718  0000F0                     _log_count_pop_w_tab:
  1719                           	opt stack 0
  1720  0000F0                     	ds	2
  1721  0000F2                     _log_count_total:
  1722                           	opt stack 0
  1723  0000F2                     	ds	2
  1724  0000F4                     _log_total_time:
  1725                           	opt stack 0
  1726  0000F4                     	ds	2
  1727  0000F6                     _logstate:
  1728                           	opt stack 0
  1729  0000F6                     	ds	2
  1730  0000F8                     _total_time:
  1731                           	opt stack 0
  1732  0000F8                     	ds	2
  1733  0000FA                     _var:
  1734                           	opt stack 0
  1735  0000FA                     	ds	2
  1736  0000FC                     _machine_state:
  1737                           	opt stack 0
  1738  0000FC                     	ds	1
  1739  0000FD                     _sel:
  1740                           	opt stack 0
  1741  0000FD                     	ds	1
  1742  0000FE                     _count_total:
  1743                           	opt stack 0
  1744  0000FE                     	ds	2
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1l	equ	0xFE1
  1753                           
  1754                           	psect	bssBANK1
  1755  000100                     __pbssBANK1:
  1756                           	opt stack 0
  1757  000100                     _log_startTime:
  1758                           	opt stack 0
  1759  000100                     	ds	14
  1760  00010E                     _startTime:
  1761                           	opt stack 0
  1762  00010E                     	ds	14
  1763  00011C                     _servoTimes:
  1764                           	opt stack 0
  1765  00011C                     	ds	8
  1766  000124                     _time:
  1767                           	opt stack 0
  1768  000124                     	ds	7
  1769  00012B                     _i:
  1770                           	opt stack 0
  1771  00012B                     	ds	2
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           
  1781                           	psect	dataBANK1
  1782  00012D                     __pdataBANK1:
  1783                           	opt stack 0
  1784  00012D                     UI@F3222:
  1785                           	opt stack 0
  1786  00012D                     	ds	4
  1787  000131                     printRTC@F3213:
  1788                           	opt stack 0
  1789  000131                     	ds	4
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           postdec1	equ	0xFE5
  1797                           fsr1l	equ	0xFE1
  1798                           
  1799                           	psect	cstackBANK0
  1800  000080                     __pcstackBANK0:
  1801                           	opt stack 0
  1802  000080                     ??_delay_ms:
  1803  000080                     ??_PortTests:
  1804  000080                     ??_isdigit:
  1805  000080                     ??_readADC:
  1806  000080                     ??_I2C_Master_Wait:
  1807  000080                     ?___wmul:
  1808                           	opt stack 0
  1809  000080                     ?___awmod:
  1810                           	opt stack 0
  1811  000080                     ?___lwdiv:
  1812                           	opt stack 0
  1813  000080                     ?___lldiv:
  1814                           	opt stack 0
  1815  000080                     lcdNibble@temp:
  1816                           	opt stack 0
  1817  000080                     initTime@m:
  1818                           	opt stack 0
  1819  000080                     updateServoPosition@time_us:
  1820                           	opt stack 0
  1821  000080                     EEPROM_read@address:
  1822                           	opt stack 0
  1823  000080                     ___wmul@multiplier:
  1824                           	opt stack 0
  1825  000080                     ___awmod@dividend:
  1826                           	opt stack 0
  1827  000080                     ___lwdiv@dividend:
  1828                           	opt stack 0
  1829  000080                     strcpy@to:
  1830                           	opt stack 0
  1831  000080                     ___lldiv@dividend:
  1832                           	opt stack 0
  1833                           
  1834                           ; 4 bytes @ 0x0
  1835  000080                     	ds	1
  1836  000081                     readADC@channel:
  1837                           	opt stack 0
  1838  000081                     I2C_Master_Read@a:
  1839                           	opt stack 0
  1840  000081                     lcdNibble@data:
  1841                           	opt stack 0
  1842  000081                     initTime@h:
  1843                           	opt stack 0
  1844  000081                     delay_ms@milliseconds:
  1845                           	opt stack 0
  1846  000081                     _isdigit$1881:
  1847                           	opt stack 0
  1848  000081                     I2C_Master_Write@d:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x1
  1852  000081                     	ds	1
  1853  000082                     ??_readIR:
  1854  000082                     ??_readMAG:
  1855  000082                     I2C_Master_Read@temp:
  1856                           	opt stack 0
  1857  000082                     lcdInst@data:
  1858                           	opt stack 0
  1859  000082                     putch@data:
  1860                           	opt stack 0
  1861  000082                     initTime@w:
  1862                           	opt stack 0
  1863  000082                     isdigit@c:
  1864                           	opt stack 0
  1865  000082                     updateServoPosition@timer:
  1866                           	opt stack 0
  1867  000082                     ___wmul@multiplicand:
  1868                           	opt stack 0
  1869  000082                     ___awmod@divisor:
  1870                           	opt stack 0
  1871  000082                     ___lwdiv@divisor:
  1872                           	opt stack 0
  1873  000082                     strcpy@from:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x2
  1877  000082                     	ds	1
  1878  000083                     ??_initLCD:
  1879  000083                     initTime@DD:
  1880                           	opt stack 0
  1881  000083                     getRTC@i:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x3
  1885  000083                     	ds	1
  1886  000084                     ??_updateServoPosition:
  1887  000084                     initTime@MM:
  1888                           	opt stack 0
  1889  000084                     ___awmod@counter:
  1890                           	opt stack 0
  1891  000084                     readIR@res:
  1892                           	opt stack 0
  1893  000084                     readMAG@res:
  1894                           	opt stack 0
  1895  000084                     ___wmul@product:
  1896                           	opt stack 0
  1897  000084                     ___lwdiv@quotient:
  1898                           	opt stack 0
  1899  000084                     strcpy@cp:
  1900                           	opt stack 0
  1901  000084                     ___lldiv@divisor:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x4
  1905  000084                     	ds	1
  1906  000085                     ??_initSortTimer:
  1907  000085                     initTime@YY:
  1908                           	opt stack 0
  1909  000085                     ___awmod@sign:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x5
  1913  000085                     	ds	1
  1914  000086                     ??_ID:
  1915  000086                     ??_getIR:
  1916  000086                     ?___awdiv:
  1917                           	opt stack 0
  1918  000086                     initTime@s:
  1919                           	opt stack 0
  1920  000086                     ___lwdiv@counter:
  1921                           	opt stack 0
  1922  000086                     updateServoPosition@my_time:
  1923                           	opt stack 0
  1924  000086                     ___awdiv@dividend:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x6
  1928  000086                     	ds	1
  1929  000087                     ?___lwmod:
  1930                           	opt stack 0
  1931  000087                     ___lwmod@dividend:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x7
  1935  000087                     	ds	1
  1936  000088                     ??_Distribution:
  1937  000088                     ??_initServos:
  1938  000088                     initSortTimer@i:
  1939                           	opt stack 0
  1940  000088                     ___awdiv@divisor:
  1941                           	opt stack 0
  1942  000088                     ___lldiv@quotient:
  1943                           	opt stack 0
  1944  000088                     ID@sensor_outputs:
  1945                           	opt stack 0
  1946                           
  1947                           ; 6 bytes @ 0x8
  1948  000088                     	ds	1
  1949  000089                     ___lwmod@divisor:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x9
  1953  000089                     	ds	1
  1954  00008A                     ___awdiv@counter:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0xA
  1958  00008A                     	ds	1
  1959  00008B                     ___awdiv@sign:
  1960                           	opt stack 0
  1961  00008B                     ___lwmod@counter:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0xB
  1965  00008B                     	ds	1
  1966  00008C                     ___lldiv@counter:
  1967                           	opt stack 0
  1968  00008C                     ___awdiv@quotient:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0xC
  1972  00008C                     	ds	1
  1973  00008D                     I2C_Master_Init@c:
  1974                           	opt stack 0
  1975                           
  1976                           ; 4 bytes @ 0xD
  1977  00008D                     	ds	1
  1978  00008E                     ?_printf:
  1979                           	opt stack 0
  1980  00008E                     printf@f:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0xE
  1984  00008E                     	ds	3
  1985  000091                     ??_I2C_Master_Init:
  1986                           
  1987                           ; 1 bytes @ 0x11
  1988  000091                     	ds	4
  1989  000095                     ??_loadRTC:
  1990                           
  1991                           ; 1 bytes @ 0x15
  1992  000095                     	ds	1
  1993  000096                     loadRTC@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x16
  1997  000096                     	ds	4
  1998  00009A                     ??_printf:
  1999                           
  2000                           ; 1 bytes @ 0x1A
  2001  00009A                     	ds	4
  2002  00009E                     printf@prec:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0x1E
  2006  00009E                     	ds	1
  2007  00009F                     printf@cp:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x1F
  2011  00009F                     	ds	2
  2012  0000A1                     printf@ap:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x21
  2016  0000A1                     	ds	2
  2017  0000A3                     printf@len:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x23
  2021  0000A3                     	ds	2
  2022  0000A5                     printf@val:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x25
  2026  0000A5                     	ds	2
  2027  0000A7                     printf@flag:
  2028                           	opt stack 0
  2029                           
  2030                           ; 1 bytes @ 0x27
  2031  0000A7                     	ds	1
  2032  0000A8                     printf@c:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x28
  2036  0000A8                     	ds	1
  2037  0000A9                     printf@width:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x29
  2041  0000A9                     	ds	2
  2042  0000AB                     ??_printRTC:
  2043  0000AB                     ??_algorithmTest:
  2044  0000AB                     ??_sensorTest:
  2045  0000AB                     ??_actuatorTest:
  2046  0000AB                     ??_PortTestA5:
  2047  0000AB                     ??_ToggleTestA5:
  2048  0000AB                     ??_SolenoidTestA5:
  2049  0000AB                     EEPROM_write@address:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x2B
  2053  0000AB                     	ds	1
  2054  0000AC                     ToggleTestA5@on:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x2C
  2058  0000AC                     	ds	1
  2059  0000AD                     EEPROM_write@data:
  2060                           	opt stack 0
  2061  0000AD                     actuatorTest@i_1574:
  2062                           	opt stack 0
  2063  0000AD                     sensorTest@on:
  2064                           	opt stack 0
  2065  0000AD                     SolenoidTestA5@i:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x2D
  2069  0000AD                     	ds	1
  2070  0000AE                     ??_EEPROM_write:
  2071  0000AE                     actuatorTest@i_1581:
  2072                           	opt stack 0
  2073  0000AE                     printRTC@INT_time:
  2074                           	opt stack 0
  2075                           
  2076                           ; 14 bytes @ 0x2E
  2077  0000AE                     	ds	1
  2078  0000AF                     EEPROM_write@i:
  2079                           	opt stack 0
  2080  0000AF                     actuatorTest@i_1582:
  2081                           	opt stack 0
  2082  0000AF                     SolenoidTestA5@i_1625:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x2F
  2086  0000AF                     	ds	1
  2087  0000B0                     EEPROM_write@i_1319:
  2088                           	opt stack 0
  2089  0000B0                     actuatorTest@i_1584:
  2090                           	opt stack 0
  2091  0000B0                     SolenoidTestA5@i_1627:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x30
  2095  0000B0                     	ds	1
  2096  0000B1                     ??_Loading:
  2097  0000B1                     logRun@num:
  2098                           	opt stack 0
  2099  0000B1                     actuatorTest@i_1585:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x31
  2103  0000B1                     	ds	1
  2104  0000B2                     logRun@byte1:
  2105                           	opt stack 0
  2106  0000B2                     actuatorTest@i_1587:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x32
  2110  0000B2                     	ds	1
  2111  0000B3                     logRun@byte2:
  2112                           	opt stack 0
  2113  0000B3                     actuatorTest@i_1588:
  2114                           	opt stack 0
  2115  0000B3                     Loading@addr:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x33
  2119  0000B3                     	ds	1
  2120  0000B4                     logRun@byte3:
  2121                           	opt stack 0
  2122  0000B4                     actuatorTest@i_1590:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x34
  2126  0000B4                     	ds	1
  2127  0000B5                     Loading@byte1:
  2128                           	opt stack 0
  2129  0000B5                     logRun@byte_i:
  2130                           	opt stack 0
  2131  0000B5                     actuatorTest@i_1591:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x35
  2135  0000B5                     	ds	1
  2136  0000B6                     logRun@byte11:
  2137                           	opt stack 0
  2138  0000B6                     actuatorTest@i_1593:
  2139                           	opt stack 0
  2140  0000B6                     Loading@i:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x36
  2144  0000B6                     	ds	1
  2145  0000B7                     actuatorTest@i_1594:
  2146                           	opt stack 0
  2147  0000B7                     logRun@i:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x37
  2151  0000B7                     	ds	1
  2152  0000B8                     actuatorTest@i_1596:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x38
  2156  0000B8                     	ds	1
  2157  0000B9                     actuatorTest@i_1597:
  2158                           	opt stack 0
  2159  0000B9                     logRun@addr:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x39
  2163  0000B9                     	ds	1
  2164  0000BA                     actuatorTest@i_1600:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x3A
  2168  0000BA                     	ds	1
  2169  0000BB                     actuatorTest@i_1601:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x3B
  2173  0000BB                     	ds	1
  2174  0000BC                     actuatorTest@i_1603:
  2175                           	opt stack 0
  2176  0000BC                     printRTC@RTC_month:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x3C
  2180  0000BC                     	ds	1
  2181  0000BD                     actuatorTest@i_1604:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x3D
  2185  0000BD                     	ds	1
  2186  0000BE                     actuatorTest@i_1606:
  2187                           	opt stack 0
  2188  0000BE                     printRTC@month:
  2189                           	opt stack 0
  2190                           
  2191                           ; 4 bytes @ 0x3E
  2192  0000BE                     	ds	1
  2193  0000BF                     actuatorTest@i_1607:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x3F
  2197  0000BF                     	ds	1
  2198  0000C0                     actuatorTest@i_1610:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x40
  2202  0000C0                     	ds	1
  2203  0000C1                     actuatorTest@i_1611:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0x41
  2207  0000C1                     	ds	1
  2208  0000C2                     actuatorTest@i_1613:
  2209                           	opt stack 0
  2210  0000C2                     printRTC@i:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x42
  2214  0000C2                     	ds	1
  2215  0000C3                     actuatorTest@i_1614:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x43
  2219  0000C3                     	ds	1
  2220  0000C4                     ??_UI:
  2221  0000C4                     actuatorTest@i:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x44
  2225  0000C4                     	ds	2
  2226  0000C6                     ??_Test:
  2227  0000C6                     _UI$2234:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x46
  2231  0000C6                     	ds	2
  2232  0000C8                     UI@i:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x48
  2236  0000C8                     	ds	1
  2237  0000C9                     UI@i_408:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x49
  2241  0000C9                     	ds	1
  2242  0000CA                     UI@i_411:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x4A
  2246  0000CA                     	ds	1
  2247  0000CB                     UI@i_412:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x4B
  2251  0000CB                     	ds	1
  2252  0000CC                     UI@i_430:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x4C
  2256  0000CC                     	ds	1
  2257  0000CD                     UI@i_431:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x4D
  2261  0000CD                     	ds	1
  2262  0000CE                     UI@i_434:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x4E
  2266  0000CE                     	ds	1
  2267  0000CF                     UI@i_435:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4F
  2271  0000CF                     	ds	1
  2272  0000D0                     UI@i_438:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x50
  2276  0000D0                     	ds	1
  2277  0000D1                     UI@i_439:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x51
  2281  0000D1                     	ds	1
  2282  0000D2                     UI@i_442:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x52
  2286  0000D2                     	ds	1
  2287  0000D3                     UI@i_443:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x53
  2291  0000D3                     	ds	1
  2292  0000D4                     UI@i_446:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x54
  2296  0000D4                     	ds	1
  2297  0000D5                     UI@i_447:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x55
  2301  0000D5                     	ds	1
  2302  0000D6                     UI@month:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x56
  2306  0000D6                     	ds	4
  2307  0000DA                     tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           
  2316                           ; 1 bytes @ 0x5A
  2317                           
  2318                           	psect	cstackCOMRAM
  2319  000001                     __pcstackCOMRAM:
  2320                           	opt stack 0
  2321  000001                     ??i2_I2C_Master_Wait:
  2322  000001                     ??i2_isdigit:
  2323  000001                     ?i2___wmul:
  2324                           	opt stack 0
  2325  000001                     ?i2___lwmod:
  2326                           	opt stack 0
  2327  000001                     i2lcdNibble@temp:
  2328                           	opt stack 0
  2329  000001                     i2EEPROM_read@address:
  2330                           	opt stack 0
  2331  000001                     i2___wmul@multiplier:
  2332                           	opt stack 0
  2333  000001                     i2___lwmod@dividend:
  2334                           	opt stack 0
  2335  000001                     i2strcpy@to:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x0
  2339  000001                     	ds	1
  2340  000002                     i2I2C_Master_Read@a:
  2341                           	opt stack 0
  2342  000002                     i2lcdNibble@data:
  2343                           	opt stack 0
  2344  000002                     i2_isdigit$1881:
  2345                           	opt stack 0
  2346  000002                     i2I2C_Master_Write@d:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x1
  2350  000002                     	ds	1
  2351  000003                     i2I2C_Master_Read@temp:
  2352                           	opt stack 0
  2353  000003                     i2lcdInst@data:
  2354                           	opt stack 0
  2355  000003                     i2putch@data:
  2356                           	opt stack 0
  2357  000003                     i2isdigit@c:
  2358                           	opt stack 0
  2359  000003                     i2___wmul@multiplicand:
  2360                           	opt stack 0
  2361  000003                     i2___lwmod@divisor:
  2362                           	opt stack 0
  2363  000003                     i2strcpy@from:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x2
  2367  000003                     	ds	1
  2368  000004                     i2getRTC@i:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x3
  2372  000004                     	ds	1
  2373  000005                     i2___lwmod@counter:
  2374                           	opt stack 0
  2375  000005                     i2___wmul@product:
  2376                           	opt stack 0
  2377  000005                     i2strcpy@cp:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x4
  2381  000005                     	ds	1
  2382  000006                     ?i2___lwdiv:
  2383                           	opt stack 0
  2384  000006                     i2___lwdiv@dividend:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x5
  2388  000006                     	ds	1
  2389  000007                     retrieveLog@logNum:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x6
  2393  000007                     	ds	1
  2394  000008                     i2___lwdiv@divisor:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x7
  2398  000008                     	ds	1
  2399  000009                     ??_retrieveLog:
  2400                           
  2401                           ; 1 bytes @ 0x8
  2402  000009                     	ds	1
  2403  00000A                     i2___lwdiv@quotient:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x9
  2407  00000A                     	ds	1
  2408  00000B                     retrieveLog@byte1:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0xA
  2412  00000B                     	ds	1
  2413  00000C                     retrieveLog@byte2:
  2414                           	opt stack 0
  2415  00000C                     i2___lwdiv@counter:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0xB
  2419  00000C                     	ds	1
  2420  00000D                     ?i2_printf:
  2421                           	opt stack 0
  2422  00000D                     retrieveLog@byte3:
  2423                           	opt stack 0
  2424  00000D                     i2printf@f:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0xC
  2428  00000D                     	ds	1
  2429  00000E                     retrieveLog@i:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0xD
  2433  00000E                     	ds	2
  2434  000010                     retrieveLog@addr:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0xF
  2438  000010                     	ds	2
  2439  000012                     dispLogs@myLog:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x11
  2443  000012                     	ds	2
  2444  000014                     
  2445                           ; 1 bytes @ 0x13
  2446  000014                     	ds	5
  2447  000019                     ??i2_printf:
  2448                           
  2449                           ; 1 bytes @ 0x18
  2450  000019                     	ds	4
  2451  00001D                     i2printf@prec:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x1C
  2455  00001D                     	ds	1
  2456  00001E                     i2printf@cp:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x1D
  2460  00001E                     	ds	2
  2461  000020                     i2printf@ap:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x1F
  2465  000020                     	ds	2
  2466  000022                     i2printf@len:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x21
  2470  000022                     	ds	2
  2471  000024                     i2printf@val:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x23
  2475  000024                     	ds	2
  2476  000026                     i2printf@flag:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x25
  2480  000026                     	ds	1
  2481  000027                     i2printf@c:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x26
  2485  000027                     	ds	1
  2486  000028                     i2printf@width:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x27
  2490  000028                     	ds	2
  2491  00002A                     ??_printSortTimer:
  2492  00002A                     ??i2_printRTC:
  2493  00002A                     ?_inputHandler:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x29
  2497  00002A                     	ds	2
  2498  00002C                     ??_inputHandler:
  2499                           
  2500                           ; 1 bytes @ 0x2B
  2501  00002C                     	ds	1
  2502  00002D                     printSortTimer@hour:
  2503                           	opt stack 0
  2504  00002D                     i2printRTC@INT_time:
  2505                           	opt stack 0
  2506                           
  2507                           ; 14 bytes @ 0x2C
  2508  00002D                     	ds	2
  2509  00002F                     printSortTimer@curTime:
  2510                           	opt stack 0
  2511                           
  2512                           ; 14 bytes @ 0x2E
  2513  00002F                     	ds	12
  2514  00003B                     i2printRTC@RTC_month:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x3A
  2518  00003B                     	ds	2
  2519  00003D                     printSortTimer@start_sec:
  2520                           	opt stack 0
  2521  00003D                     i2printRTC@month:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x3C
  2525  00003D                     	ds	2
  2526  00003F                     printSortTimer@cur_sec:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3E
  2530  00003F                     	ds	2
  2531  000041                     printSortTimer@min:
  2532                           	opt stack 0
  2533  000041                     i2printRTC@i:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x40
  2537  000041                     	ds	2
  2538  000043                     ??_updateMenu:
  2539  000043                     printSortTimer@sec:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x42
  2543  000043                     	ds	2
  2544  000045                     _printSortTimer$2354:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x44
  2548  000045                     	ds	2
  2549  000047                     printSortTimer@timeDiff:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x46
  2553  000047                     	ds	2
  2554  000049                     printSortTimer@i:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x48
  2558  000049                     	ds	2
  2559  00004B                     ??_handler:
  2560                           
  2561                           ; 1 bytes @ 0x4A
  2562  00004B                     	ds	16
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postdec1	equ	0xFE5
  2570                           fsr1l	equ	0xFE1
  2571                           
  2572 ;;
  2573 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2574 ;;
  2575 ;; *************** function _main *****************
  2576 ;; Defined at:
  2577 ;;		line 18 in file "main.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels required when called:   13
  2597 ;; This function calls:
  2598 ;;		_Test
  2599 ;;		_UI
  2600 ;;		_initLCD
  2601 ;;		_initTime
  2602 ;;		_initUI
  2603 ;;		_logRun
  2604 ;;		_machineConfig
  2605 ;;		_sort
  2606 ;;		_stopSignals
  2607 ;; This function is called by:
  2608 ;;		Startup code after reset
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text0
  2613  003692                     __ptext0:
  2614                           	opt stack 0
  2615  003692                     _main:
  2616                           	opt stack 18
  2617                           
  2618                           ;main.c: 19: machineConfig();
  2619                           
  2620                           ;incstack = 0
  2621  003692  EC1C  F01E         	call	_machineConfig	;wreg free
  2622                           
  2623                           ;main.c: 20: initLCD();
  2624  003696  EC93  F01F         	call	_initLCD	;wreg free
  2625                           
  2626                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2627  00369A  0E20               	movlw	32
  2628  00369C  0100               	movlb	0	; () banked
  2629  00369E  6F80               	movwf	initTime@m& (0+255),b
  2630  0036A0  0E13               	movlw	19
  2631  0036A2  0100               	movlb	0	; () banked
  2632  0036A4  6F81               	movwf	initTime@h& (0+255),b
  2633  0036A6  0E04               	movlw	4
  2634  0036A8  0100               	movlb	0	; () banked
  2635  0036AA  6F82               	movwf	initTime@w& (0+255),b
  2636  0036AC  0E01               	movlw	1
  2637  0036AE  0100               	movlb	0	; () banked
  2638  0036B0  6F83               	movwf	initTime@DD& (0+255),b
  2639  0036B2  0E03               	movlw	3
  2640  0036B4  0100               	movlb	0	; () banked
  2641  0036B6  6F84               	movwf	initTime@MM& (0+255),b
  2642  0036B8  0E17               	movlw	23
  2643  0036BA  0100               	movlb	0	; () banked
  2644  0036BC  6F85               	movwf	initTime@YY& (0+255),b
  2645  0036BE  0E42               	movlw	66
  2646  0036C0  EC28  F022         	call	_initTime
  2647                           
  2648                           ;main.c: 22: initUI();
  2649  0036C4  ECF3  F021         	call	_initUI	;wreg free
  2650                           
  2651                           ;main.c: 23: first = 1;
  2652  0036C8  0E00               	movlw	0
  2653  0036CA  0100               	movlb	0	; () banked
  2654  0036CC  6FE5               	movwf	(_first+1)& (0+255),b
  2655  0036CE  0E01               	movlw	1
  2656  0036D0  6FE4               	movwf	_first& (0+255),b
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 34: switch(machine_state){
  2660                           
  2661                           ;main.c: 33: while(1){
  2662  0036D2  D018               	goto	l7864
  2663  0036D4                     l7846:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 36: UI();
  2667  0036D4  EC09  F000         	call	_UI	;wreg free
  2668                           
  2669                           ;main.c: 37: break;
  2670  0036D8  D015               	goto	l7864
  2671  0036DA                     l7848:
  2672                           
  2673                           ;main.c: 39: sort();
  2674  0036DA  EC17  F022         	call	_sort	;wreg free
  2675                           
  2676                           ;main.c: 40: break;
  2677  0036DE  D012               	goto	l7864
  2678  0036E0                     l7850:
  2679                           
  2680                           ;main.c: 42: stopSignals();
  2681  0036E0  EC54  F022         	call	_stopSignals	;wreg free
  2682                           
  2683                           ;main.c: 43: logRun();
  2684  0036E4  EC4E  F016         	call	_logRun	;wreg free
  2685                           
  2686                           ;main.c: 44: first = 1;
  2687  0036E8  0E00               	movlw	0
  2688  0036EA  0100               	movlb	0	; () banked
  2689  0036EC  6FE5               	movwf	(_first+1)& (0+255),b
  2690  0036EE  0E01               	movlw	1
  2691  0036F0  6FE4               	movwf	_first& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 45: UI();
  2695  0036F2  EC09  F000         	call	_UI	;wreg free
  2696                           
  2697                           ;main.c: 46: break;
  2698  0036F6  D006               	goto	l7864
  2699  0036F8                     l7858:
  2700                           
  2701                           ;main.c: 48: Test();
  2702  0036F8  EC89  F018         	call	_Test	;wreg free
  2703                           
  2704                           ;main.c: 49: break;
  2705  0036FC  D003               	goto	l7864
  2706  0036FE                     l7860:
  2707                           
  2708                           ;main.c: 51: stopSignals();
  2709  0036FE  EC54  F022         	call	_stopSignals	;wreg free
  2710  003702                     l478:
  2711  003702  D7FF               	goto	l478
  2712  003704                     l7864:
  2713  003704  0100               	movlb	0	; () banked
  2714  003706  51FC               	movf	_machine_state& (0+255),w,b
  2715                           
  2716                           ; Switch size 1, requested type "space"
  2717                           ; Number of cases is 5, Range of values is 0 to 4
  2718                           ; switch strategies available:
  2719                           ; Name         Instructions Cycles
  2720                           ; simple_byte           16     9 (average)
  2721                           ;	Chosen strategy is simple_byte
  2722  003708  0A00               	xorlw	0	; case 0
  2723  00370A  B4D8               	btfsc	status,2,c
  2724  00370C  D7E3               	goto	l7846
  2725  00370E  0A01               	xorlw	1	; case 1
  2726  003710  B4D8               	btfsc	status,2,c
  2727  003712  D7E3               	goto	l7848
  2728  003714  0A03               	xorlw	3	; case 2
  2729  003716  B4D8               	btfsc	status,2,c
  2730  003718  D7E3               	goto	l7850
  2731  00371A  0A01               	xorlw	1	; case 3
  2732  00371C  B4D8               	btfsc	status,2,c
  2733  00371E  D7EC               	goto	l7858
  2734  003720  0A07               	xorlw	7	; case 4
  2735  003722  B4D8               	btfsc	status,2,c
  2736  003724  D7EC               	goto	l7860
  2737                           
  2738                           ; BSR set to: 0
  2739                           
  2740                           ; BSR set to: 0
  2741  003726  D7EE               	goto	l7864
  2742  003728                     __end_of_main:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           postinc0	equ	0xFEE
  2749                           wreg	equ	0xFE8
  2750                           postdec1	equ	0xFE5
  2751                           fsr1l	equ	0xFE1
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _stopSignals *****************
  2755 ;; Defined at:
  2756 ;;		line 60 in file "main.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    7
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text1
  2785  0044A8                     __ptext1:
  2786                           	opt stack 0
  2787  0044A8                     _stopSignals:
  2788                           	opt stack 23
  2789                           
  2790                           ;main.c: 61: LATA = 0x00;
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;incstack = 0
  2794  0044A8  0E00               	movlw	0
  2795  0044AA  6E89               	movwf	3977,c	;volatile
  2796                           
  2797                           ;main.c: 62: LATB = 0x00;
  2798  0044AC  0E00               	movlw	0
  2799  0044AE  6E8A               	movwf	3978,c	;volatile
  2800                           
  2801                           ;main.c: 63: LATC = 0x00;
  2802  0044B0  0E00               	movlw	0
  2803  0044B2  6E8B               	movwf	3979,c	;volatile
  2804                           
  2805                           ;main.c: 64: LATD = 0x00;
  2806  0044B4  0E00               	movlw	0
  2807  0044B6  6E8C               	movwf	3980,c	;volatile
  2808                           
  2809                           ;main.c: 65: LATE = 0x00;
  2810  0044B8  0E00               	movlw	0
  2811  0044BA  6E8D               	movwf	3981,c	;volatile
  2812  0044BC  0012               	return		;funcret
  2813  0044BE                     __end_of_stopSignals:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           postinc0	equ	0xFEE
  2820                           wreg	equ	0xFE8
  2821                           postdec1	equ	0xFE5
  2822                           fsr1l	equ	0xFE1
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _sort *****************
  2826 ;; Defined at:
  2827 ;;		line 55 in file "sort.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:   12
  2848 ;; This function calls:
  2849 ;;		_Distribution
  2850 ;;		_ID
  2851 ;;		_Loading
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text2
  2858  00442E                     __ptext2:
  2859                           	opt stack 0
  2860  00442E                     _sort:
  2861                           	opt stack 18
  2862                           
  2863                           ;sort.c: 56: if(machine_state == Sorting_state){
  2864                           
  2865                           ;incstack = 0
  2866  00442E  0100               	movlb	0	; () banked
  2867  004430  05FC               	decf	_machine_state& (0+255),w,b
  2868  004432  B4D8               	btfsc	status,2,c
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;sort.c: 57: Loading();
  2872  004434  ECB8  F00A         	call	_Loading	;wreg free
  2873                           
  2874                           ;sort.c: 58: }
  2875                           ;sort.c: 59: if(machine_state == Sorting_state){
  2876  004438  0100               	movlb	0	; () banked
  2877  00443A  05FC               	decf	_machine_state& (0+255),w,b
  2878  00443C  B4D8               	btfsc	status,2,c
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;sort.c: 60: ID();
  2882  00443E  ECEC  F016         	call	_ID	;wreg free
  2883                           
  2884                           ;sort.c: 61: }
  2885                           ;sort.c: 62: if(machine_state == Sorting_state){
  2886  004442  0100               	movlb	0	; () banked
  2887  004444  05FC               	decf	_machine_state& (0+255),w,b
  2888  004446  A4D8               	btfss	status,2,c
  2889  004448  0012               	return	
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;sort.c: 63: Distribution();
  2893  00444A  ECAE  F015         	call	_Distribution	;wreg free
  2894  00444E  0012               	return	
  2895  004450                     __end_of_sort:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _Loading *****************
  2908 ;; Defined at:
  2909 ;;		line 67 in file "sort.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  i               2   54[BANK0 ] int 
  2914 ;;  addr            2   51[BANK0 ] unsigned short 
  2915 ;;  byte1           1   53[BANK0 ] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        7 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:   11
  2932 ;; This function calls:
  2933 ;;		_EEPROM_read
  2934 ;;		_EEPROM_write
  2935 ;;		_delay_ms
  2936 ;;		_getIR
  2937 ;;		_initGlobalVars
  2938 ;;		_initServos
  2939 ;;		_initSortTimer
  2940 ;;		_lcdInst
  2941 ;;		_updateServoPosition
  2942 ;; This function is called by:
  2943 ;;		_sort
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text3
  2948  001570                     __ptext3:
  2949                           	opt stack 0
  2950  001570                     _Loading:
  2951                           	opt stack 18
  2952                           
  2953                           ;sort.c: 68: if(first){
  2954                           
  2955                           ;incstack = 0
  2956  001570  0100               	movlb	0	; () banked
  2957  001572  51E4               	movf	_first& (0+255),w,b
  2958  001574  0100               	movlb	0	; () banked
  2959  001576  11E5               	iorwf	(_first+1)& (0+255),w,b
  2960  001578  B4D8               	btfsc	status,2,c
  2961  00157A  D1B3               	goto	l6290
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;sort.c: 69: initGlobalVars();
  2965  00157C  EC53  F01D         	call	_initGlobalVars	;wreg free
  2966                           
  2967                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2968  001580  0E01               	movlw	1
  2969  001582  EC85  F022         	call	_lcdInst
  2970  001586  0E68               	movlw	104
  2971  001588  0100               	movlb	0	; () banked
  2972  00158A  6FB1               	movwf	??_Loading& (0+255),b
  2973  00158C  0EE4               	movlw	228
  2974  00158E                     u6857:
  2975  00158E  2EE8               	decfsz	wreg,f,c
  2976  001590  D7FE               	bra	u6857
  2977  001592  2FB1               	decfsz	??_Loading& (0+255),f,b
  2978  001594  D7FC               	bra	u6857
  2979  001596  F000               	nop	
  2980                           
  2981                           ;sort.c: 71: initSortTimer();
  2982  001598  ECA3  F01A         	call	_initSortTimer	;wreg free
  2983                           
  2984                           ;sort.c: 76: sel = EEPROM_read(0);
  2985  00159C  0E00               	movlw	0
  2986  00159E  0100               	movlb	0	; () banked
  2987  0015A0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2988  0015A2  0E00               	movlw	0
  2989  0015A4  6F80               	movwf	EEPROM_read@address& (0+255),b
  2990  0015A6  EC48  F022         	call	_EEPROM_read	;wreg free
  2991  0015AA  0100               	movlb	0	; () banked
  2992  0015AC  6FFD               	movwf	_sel& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2996  0015AE  0100               	movlb	0	; () banked
  2997  0015B0  51FD               	movf	_sel& (0+255),w,b
  2998  0015B2  0D0B               	mullw	11
  2999  0015B4  0E01               	movlw	1
  3000  0015B6  24F3               	addwf	prodl,w,c
  3001  0015B8  0100               	movlb	0	; () banked
  3002  0015BA  6FB3               	movwf	Loading@addr& (0+255),b
  3003  0015BC  0E00               	movlw	0
  3004  0015BE  20F4               	addwfc	prodh,w,c
  3005  0015C0  0100               	movlb	0	; () banked
  3006  0015C2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  3010  0015C4  0E7F               	movlw	127
  3011  0015C6  0100               	movlb	0	; () banked
  3012  0015C8  6FB5               	movwf	Loading@byte1& (0+255),b
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;sort.c: 79: EEPROM_write(addr, byte1);
  3016  0015CA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3017  0015CE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3018  0015D2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3019  0015D6  EC07  F019         	call	_EEPROM_write	;wreg free
  3020                           
  3021                           ;sort.c: 82: LATAbits.LATA5 = 0;
  3022  0015DA  9A89               	bcf	3977,5,c	;volatile
  3023                           
  3024                           ;sort.c: 83: for(int i=0; i<46; i++){
  3025  0015DC  0E00               	movlw	0
  3026  0015DE  0100               	movlb	0	; () banked
  3027  0015E0  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3028  0015E2  0E00               	movlw	0
  3029  0015E4  6FB6               	movwf	Loading@i& (0+255),b
  3030                           
  3031                           ; BSR set to: 0
  3032  0015E6  0100               	movlb	0	; () banked
  3033  0015E8  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3034  0015EA  D008               	goto	l6238
  3035  0015EC  0100               	movlb	0	; () banked
  3036  0015EE  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3037  0015F0  E126               	bnz	l719
  3038  0015F2  0E2E               	movlw	46
  3039  0015F4  0100               	movlb	0	; () banked
  3040  0015F6  5DB6               	subwf	Loading@i& (0+255),w,b
  3041  0015F8  B0D8               	btfsc	status,0,c
  3042  0015FA  D021               	goto	l719
  3043  0015FC                     l6238:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;sort.c: 84: LATAbits.LATA5 = !LATAbits.LATA5;
  3047  0015FC  BA89               	btfsc	3977,5,c	;volatile
  3048  0015FE  D004               	goto	u4710
  3049  001600  0100               	movlb	0	; () banked
  3050  001602  6BB1               	clrf	??_Loading& (0+255),b
  3051  001604  2BB1               	incf	??_Loading& (0+255),f,b
  3052  001606  D002               	goto	u4728
  3053  001608                     u4710:
  3054  001608  0100               	movlb	0	; () banked
  3055  00160A  6BB1               	clrf	??_Loading& (0+255),b
  3056  00160C                     u4728:
  3057  00160C  0100               	movlb	0	; () banked
  3058  00160E  3BB1               	swapf	??_Loading& (0+255),f,b
  3059  001610  47B1               	rlncf	??_Loading& (0+255),f,b
  3060  001612  5089               	movf	3977,w,c	;volatile
  3061  001614  0100               	movlb	0	; () banked
  3062  001616  19B1               	xorwf	??_Loading& (0+255),w,b
  3063  001618  0BDF               	andlw	-33
  3064  00161A  19B1               	xorwf	??_Loading& (0+255),w,b
  3065  00161C  6E89               	movwf	3977,c	;volatile
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 85: delay_ms(45-i);
  3069  00161E  0100               	movlb	0	; () banked
  3070  001620  51B6               	movf	Loading@i& (0+255),w,b
  3071  001622  0800               	sublw	0
  3072  001624  0F2D               	addlw	45
  3073  001626  ECA5  F021         	call	_delay_ms
  3074  00162A  0100               	movlb	0	; () banked
  3075  00162C  4BB6               	infsnz	Loading@i& (0+255),f,b
  3076  00162E  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3077                           
  3078                           ; BSR set to: 0
  3079  001630  0100               	movlb	0	; () banked
  3080  001632  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3081  001634  D7E3               	goto	l6238
  3082  001636  0100               	movlb	0	; () banked
  3083  001638  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3084  00163A  E101               	bnz	u4730
  3085  00163C  D7DA               	goto	L1
  3086  00163E                     u4730:
  3087  00163E                     l719:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;sort.c: 86: }
  3091                           ;sort.c: 87: LATAbits.LATA5 = 1;
  3092  00163E  8A89               	bsf	3977,5,c	;volatile
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;sort.c: 90: initServos();
  3096  001640  EC78  F01E         	call	_initServos	;wreg free
  3097                           
  3098                           ;sort.c: 91: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3099  001644  0E3D               	movlw	61
  3100  001646  0100               	movlb	0	; () banked
  3101  001648  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3102  00164A  0EE1               	movlw	225
  3103  00164C  0100               	movlb	0	; () banked
  3104  00164E  6FB1               	movwf	??_Loading& (0+255),b
  3105  001650  0E3F               	movlw	63
  3106  001652                     u6867:
  3107  001652  2EE8               	decfsz	wreg,f,c
  3108  001654  D7FE               	bra	u6867
  3109  001656  2FB1               	decfsz	??_Loading& (0+255),f,b
  3110  001658  D7FC               	bra	u6867
  3111  00165A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3112  00165C  D7FA               	bra	u6867
  3113  00165E  D000               	nop2	
  3114                           
  3115                           ;sort.c: 93: updateServoPosition(500, 1);
  3116  001660  0E01               	movlw	1
  3117  001662  0100               	movlb	0	; () banked
  3118  001664  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3119  001666  0EF4               	movlw	244
  3120  001668  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3121  00166A  0E00               	movlw	0
  3122  00166C  0100               	movlb	0	; () banked
  3123  00166E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3124  001670  0E01               	movlw	1
  3125  001672  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3126  001674  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3127                           
  3128                           ;sort.c: 94: updateServoPosition(1350, 3);
  3129  001678  0E05               	movlw	5
  3130  00167A  0100               	movlb	0	; () banked
  3131  00167C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3132  00167E  0E46               	movlw	70
  3133  001680  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3134  001682  0E00               	movlw	0
  3135  001684  0100               	movlb	0	; () banked
  3136  001686  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3137  001688  0E03               	movlw	3
  3138  00168A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3139  00168C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3140                           
  3141                           ;sort.c: 95: _delay((unsigned long)((750)*(32000000/4000.0)));
  3142  001690  0E1F               	movlw	31
  3143  001692  0100               	movlb	0	; () banked
  3144  001694  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3145  001696  0E71               	movlw	113
  3146  001698  0100               	movlb	0	; () banked
  3147  00169A  6FB1               	movwf	??_Loading& (0+255),b
  3148  00169C  0E1E               	movlw	30
  3149  00169E                     u6877:
  3150  00169E  2EE8               	decfsz	wreg,f,c
  3151  0016A0  D7FE               	bra	u6877
  3152  0016A2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3153  0016A4  D7FC               	bra	u6877
  3154  0016A6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3155  0016A8  D7FA               	bra	u6877
  3156  0016AA  F000               	nop	
  3157                           
  3158                           ;sort.c: 96: updateServoPosition(1150, 3);
  3159  0016AC  0E04               	movlw	4
  3160  0016AE  0100               	movlb	0	; () banked
  3161  0016B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3162  0016B2  0E7E               	movlw	126
  3163  0016B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3164  0016B6  0E00               	movlw	0
  3165  0016B8  0100               	movlb	0	; () banked
  3166  0016BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3167  0016BC  0E03               	movlw	3
  3168  0016BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3169  0016C0  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3170                           
  3171                           ;sort.c: 97: _delay((unsigned long)((750)*(32000000/4000.0)));
  3172  0016C4  0E1F               	movlw	31
  3173  0016C6  0100               	movlb	0	; () banked
  3174  0016C8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3175  0016CA  0E71               	movlw	113
  3176  0016CC  0100               	movlb	0	; () banked
  3177  0016CE  6FB1               	movwf	??_Loading& (0+255),b
  3178  0016D0  0E1E               	movlw	30
  3179  0016D2                     u6887:
  3180  0016D2  2EE8               	decfsz	wreg,f,c
  3181  0016D4  D7FE               	bra	u6887
  3182  0016D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3183  0016D8  D7FC               	bra	u6887
  3184  0016DA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3185  0016DC  D7FA               	bra	u6887
  3186  0016DE  F000               	nop	
  3187                           
  3188                           ;sort.c: 99: updateServoPosition(700, 1);
  3189  0016E0  0E02               	movlw	2
  3190  0016E2  0100               	movlb	0	; () banked
  3191  0016E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3192  0016E6  0EBC               	movlw	188
  3193  0016E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3194  0016EA  0E00               	movlw	0
  3195  0016EC  0100               	movlb	0	; () banked
  3196  0016EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3197  0016F0  0E01               	movlw	1
  3198  0016F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3199  0016F4  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3200                           
  3201                           ;sort.c: 100: updateServoPosition(1350, 3);
  3202  0016F8  0E05               	movlw	5
  3203  0016FA  0100               	movlb	0	; () banked
  3204  0016FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3205  0016FE  0E46               	movlw	70
  3206  001700  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3207  001702  0E00               	movlw	0
  3208  001704  0100               	movlb	0	; () banked
  3209  001706  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3210  001708  0E03               	movlw	3
  3211  00170A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3212  00170C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3213                           
  3214                           ;sort.c: 101: _delay((unsigned long)((750)*(32000000/4000.0)));
  3215  001710  0E1F               	movlw	31
  3216  001712  0100               	movlb	0	; () banked
  3217  001714  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3218  001716  0E71               	movlw	113
  3219  001718  0100               	movlb	0	; () banked
  3220  00171A  6FB1               	movwf	??_Loading& (0+255),b
  3221  00171C  0E1E               	movlw	30
  3222  00171E                     u6897:
  3223  00171E  2EE8               	decfsz	wreg,f,c
  3224  001720  D7FE               	bra	u6897
  3225  001722  2FB1               	decfsz	??_Loading& (0+255),f,b
  3226  001724  D7FC               	bra	u6897
  3227  001726  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3228  001728  D7FA               	bra	u6897
  3229  00172A  F000               	nop	
  3230                           
  3231                           ;sort.c: 102: updateServoPosition(1150, 3);
  3232  00172C  0E04               	movlw	4
  3233  00172E  0100               	movlb	0	; () banked
  3234  001730  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3235  001732  0E7E               	movlw	126
  3236  001734  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3237  001736  0E00               	movlw	0
  3238  001738  0100               	movlb	0	; () banked
  3239  00173A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3240  00173C  0E03               	movlw	3
  3241  00173E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3242  001740  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3243                           
  3244                           ;sort.c: 103: _delay((unsigned long)((750)*(32000000/4000.0)));
  3245  001744  0E1F               	movlw	31
  3246  001746  0100               	movlb	0	; () banked
  3247  001748  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3248  00174A  0E71               	movlw	113
  3249  00174C  0100               	movlb	0	; () banked
  3250  00174E  6FB1               	movwf	??_Loading& (0+255),b
  3251  001750  0E1E               	movlw	30
  3252  001752                     u6907:
  3253  001752  2EE8               	decfsz	wreg,f,c
  3254  001754  D7FE               	bra	u6907
  3255  001756  2FB1               	decfsz	??_Loading& (0+255),f,b
  3256  001758  D7FC               	bra	u6907
  3257  00175A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3258  00175C  D7FA               	bra	u6907
  3259  00175E  F000               	nop	
  3260                           
  3261                           ;sort.c: 105: updateServoPosition(1250, 1);
  3262  001760  0E04               	movlw	4
  3263  001762  0100               	movlb	0	; () banked
  3264  001764  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3265  001766  0EE2               	movlw	226
  3266  001768  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3267  00176A  0E00               	movlw	0
  3268  00176C  0100               	movlb	0	; () banked
  3269  00176E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3270  001770  0E01               	movlw	1
  3271  001772  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3272  001774  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3273                           
  3274                           ;sort.c: 106: updateServoPosition(1350, 3);
  3275  001778  0E05               	movlw	5
  3276  00177A  0100               	movlb	0	; () banked
  3277  00177C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3278  00177E  0E46               	movlw	70
  3279  001780  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3280  001782  0E00               	movlw	0
  3281  001784  0100               	movlb	0	; () banked
  3282  001786  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3283  001788  0E03               	movlw	3
  3284  00178A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3285  00178C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3286                           
  3287                           ;sort.c: 107: _delay((unsigned long)((750)*(32000000/4000.0)));
  3288  001790  0E1F               	movlw	31
  3289  001792  0100               	movlb	0	; () banked
  3290  001794  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3291  001796  0E71               	movlw	113
  3292  001798  0100               	movlb	0	; () banked
  3293  00179A  6FB1               	movwf	??_Loading& (0+255),b
  3294  00179C  0E1E               	movlw	30
  3295  00179E                     u6917:
  3296  00179E  2EE8               	decfsz	wreg,f,c
  3297  0017A0  D7FE               	bra	u6917
  3298  0017A2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3299  0017A4  D7FC               	bra	u6917
  3300  0017A6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3301  0017A8  D7FA               	bra	u6917
  3302  0017AA  F000               	nop	
  3303                           
  3304                           ;sort.c: 108: updateServoPosition(1150, 3);
  3305  0017AC  0E04               	movlw	4
  3306  0017AE  0100               	movlb	0	; () banked
  3307  0017B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3308  0017B2  0E7E               	movlw	126
  3309  0017B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3310  0017B6  0E00               	movlw	0
  3311  0017B8  0100               	movlb	0	; () banked
  3312  0017BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3313  0017BC  0E03               	movlw	3
  3314  0017BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3315  0017C0  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3316                           
  3317                           ;sort.c: 109: _delay((unsigned long)((750)*(32000000/4000.0)));
  3318  0017C4  0E1F               	movlw	31
  3319  0017C6  0100               	movlb	0	; () banked
  3320  0017C8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3321  0017CA  0E71               	movlw	113
  3322  0017CC  0100               	movlb	0	; () banked
  3323  0017CE  6FB1               	movwf	??_Loading& (0+255),b
  3324  0017D0  0E1E               	movlw	30
  3325  0017D2                     u6927:
  3326  0017D2  2EE8               	decfsz	wreg,f,c
  3327  0017D4  D7FE               	bra	u6927
  3328  0017D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3329  0017D8  D7FC               	bra	u6927
  3330  0017DA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3331  0017DC  D7FA               	bra	u6927
  3332  0017DE  F000               	nop	
  3333                           
  3334                           ;sort.c: 111: updateServoPosition(1650, 1);
  3335  0017E0  0E06               	movlw	6
  3336  0017E2  0100               	movlb	0	; () banked
  3337  0017E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3338  0017E6  0E72               	movlw	114
  3339  0017E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3340  0017EA  0E00               	movlw	0
  3341  0017EC  0100               	movlb	0	; () banked
  3342  0017EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3343  0017F0  0E01               	movlw	1
  3344  0017F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3345  0017F4  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3346                           
  3347                           ;sort.c: 112: updateServoPosition(1350, 3);
  3348  0017F8  0E05               	movlw	5
  3349  0017FA  0100               	movlb	0	; () banked
  3350  0017FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3351  0017FE  0E46               	movlw	70
  3352  001800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3353  001802  0E00               	movlw	0
  3354  001804  0100               	movlb	0	; () banked
  3355  001806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3356  001808  0E03               	movlw	3
  3357  00180A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3358  00180C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3359                           
  3360                           ;sort.c: 113: _delay((unsigned long)((750)*(32000000/4000.0)));
  3361  001810  0E1F               	movlw	31
  3362  001812  0100               	movlb	0	; () banked
  3363  001814  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3364  001816  0E71               	movlw	113
  3365  001818  0100               	movlb	0	; () banked
  3366  00181A  6FB1               	movwf	??_Loading& (0+255),b
  3367  00181C  0E1E               	movlw	30
  3368  00181E                     u6937:
  3369  00181E  2EE8               	decfsz	wreg,f,c
  3370  001820  D7FE               	bra	u6937
  3371  001822  2FB1               	decfsz	??_Loading& (0+255),f,b
  3372  001824  D7FC               	bra	u6937
  3373  001826  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3374  001828  D7FA               	bra	u6937
  3375  00182A  F000               	nop	
  3376                           
  3377                           ;sort.c: 114: updateServoPosition(1150, 3);
  3378  00182C  0E04               	movlw	4
  3379  00182E  0100               	movlb	0	; () banked
  3380  001830  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3381  001832  0E7E               	movlw	126
  3382  001834  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3383  001836  0E00               	movlw	0
  3384  001838  0100               	movlb	0	; () banked
  3385  00183A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3386  00183C  0E03               	movlw	3
  3387  00183E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3388  001840  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3389                           
  3390                           ;sort.c: 115: _delay((unsigned long)((750)*(32000000/4000.0)));
  3391  001844  0E1F               	movlw	31
  3392  001846  0100               	movlb	0	; () banked
  3393  001848  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3394  00184A  0E71               	movlw	113
  3395  00184C  0100               	movlb	0	; () banked
  3396  00184E  6FB1               	movwf	??_Loading& (0+255),b
  3397  001850  0E1E               	movlw	30
  3398  001852                     u6947:
  3399  001852  2EE8               	decfsz	wreg,f,c
  3400  001854  D7FE               	bra	u6947
  3401  001856  2FB1               	decfsz	??_Loading& (0+255),f,b
  3402  001858  D7FC               	bra	u6947
  3403  00185A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3404  00185C  D7FA               	bra	u6947
  3405  00185E  F000               	nop	
  3406                           
  3407                           ;sort.c: 117: updateServoPosition(2000, 1);
  3408  001860  0E07               	movlw	7
  3409  001862  0100               	movlb	0	; () banked
  3410  001864  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3411  001866  0ED0               	movlw	208
  3412  001868  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3413  00186A  0E00               	movlw	0
  3414  00186C  0100               	movlb	0	; () banked
  3415  00186E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3416  001870  0E01               	movlw	1
  3417  001872  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3418  001874  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3419                           
  3420                           ;sort.c: 118: updateServoPosition(1350, 3);
  3421  001878  0E05               	movlw	5
  3422  00187A  0100               	movlb	0	; () banked
  3423  00187C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3424  00187E  0E46               	movlw	70
  3425  001880  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3426  001882  0E00               	movlw	0
  3427  001884  0100               	movlb	0	; () banked
  3428  001886  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3429  001888  0E03               	movlw	3
  3430  00188A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3431  00188C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3432                           
  3433                           ;sort.c: 119: _delay((unsigned long)((750)*(32000000/4000.0)));
  3434  001890  0E1F               	movlw	31
  3435  001892  0100               	movlb	0	; () banked
  3436  001894  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3437  001896  0E71               	movlw	113
  3438  001898  0100               	movlb	0	; () banked
  3439  00189A  6FB1               	movwf	??_Loading& (0+255),b
  3440  00189C  0E1E               	movlw	30
  3441  00189E                     u6957:
  3442  00189E  2EE8               	decfsz	wreg,f,c
  3443  0018A0  D7FE               	bra	u6957
  3444  0018A2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3445  0018A4  D7FC               	bra	u6957
  3446  0018A6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3447  0018A8  D7FA               	bra	u6957
  3448  0018AA  F000               	nop	
  3449                           
  3450                           ;sort.c: 120: updateServoPosition(1150, 3);
  3451  0018AC  0E04               	movlw	4
  3452  0018AE  0100               	movlb	0	; () banked
  3453  0018B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3454  0018B2  0E7E               	movlw	126
  3455  0018B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3456  0018B6  0E00               	movlw	0
  3457  0018B8  0100               	movlb	0	; () banked
  3458  0018BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3459  0018BC  0E03               	movlw	3
  3460  0018BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3461  0018C0  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3462                           
  3463                           ;sort.c: 121: _delay((unsigned long)((750)*(32000000/4000.0)));
  3464  0018C4  0E1F               	movlw	31
  3465  0018C6  0100               	movlb	0	; () banked
  3466  0018C8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3467  0018CA  0E71               	movlw	113
  3468  0018CC  0100               	movlb	0	; () banked
  3469  0018CE  6FB1               	movwf	??_Loading& (0+255),b
  3470  0018D0  0E1E               	movlw	30
  3471  0018D2                     u6967:
  3472  0018D2  2EE8               	decfsz	wreg,f,c
  3473  0018D4  D7FE               	bra	u6967
  3474  0018D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3475  0018D8  D7FC               	bra	u6967
  3476  0018DA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3477  0018DC  D7FA               	bra	u6967
  3478  0018DE  F000               	nop	
  3479                           
  3480                           ;sort.c: 122: }
  3481  0018E0  0012               	return	
  3482  0018E2                     l6290:
  3483                           
  3484                           ;sort.c: 123: else{
  3485                           ;sort.c: 126: if(!f_loadingNewCan){
  3486  0018E2  0100               	movlb	0	; () banked
  3487  0018E4  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3488  0018E6  0100               	movlb	0	; () banked
  3489  0018E8  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3490  0018EA  A4D8               	btfss	status,2,c
  3491  0018EC  D017               	goto	l6306
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;sort.c: 128: getIR();
  3495  0018EE  EC20  F01F         	call	_getIR	;wreg free
  3496                           
  3497                           ;sort.c: 130: if(!f_loadingNewCan){
  3498  0018F2  0100               	movlb	0	; () banked
  3499  0018F4  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3500  0018F6  0100               	movlb	0	; () banked
  3501  0018F8  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3502  0018FA  B4D8               	btfsc	status,2,c
  3503  0018FC  0012               	return	
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;sort.c: 134: else{
  3507                           ;sort.c: 135: count_total++;
  3508                           
  3509                           ; BSR set to: 0
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;sort.c: 132: }
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;sort.c: 131: return;
  3516  0018FE  0100               	movlb	0	; () banked
  3517  001900  4BFE               	infsnz	_count_total& (0+255),f,b
  3518  001902  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;sort.c: 136: if(count_total == 12){
  3522  001904  0E0C               	movlw	12
  3523  001906  0100               	movlb	0	; () banked
  3524  001908  19FE               	xorwf	_count_total& (0+255),w,b
  3525  00190A  0100               	movlb	0	; () banked
  3526  00190C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3527  00190E  A4D8               	btfss	status,2,c
  3528  001910  0012               	return	
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 137: f_lastCan = 1;
  3532  001912  0E00               	movlw	0
  3533  001914  6E74               	movwf	_f_lastCan+1,c
  3534  001916  0E01               	movlw	1
  3535  001918  6E73               	movwf	_f_lastCan,c
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;sort.c: 138: }
  3539                           ;sort.c: 139: }
  3540                           ;sort.c: 140: }
  3541                           
  3542                           ; BSR set to: 0
  3543  00191A  0012               	return	
  3544  00191C                     l6306:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;sort.c: 143: else if(f_ID_receive){
  3548  00191C  506B               	movf	_f_ID_receive,w,c
  3549  00191E  106C               	iorwf	_f_ID_receive+1,w,c
  3550  001920  B4D8               	btfsc	status,2,c
  3551  001922  0012               	return	
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;sort.c: 144: f_loadingNewCan = 0;
  3555  001924  0E00               	movlw	0
  3556  001926  0100               	movlb	0	; () banked
  3557  001928  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3558  00192A  0E00               	movlw	0
  3559  00192C  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;sort.c: 145: LATAbits.LATA4 = 1;
  3563  00192E  8889               	bsf	3977,4,c	;volatile
  3564                           
  3565                           ;sort.c: 146: f_can_coming_to_ID = 1;
  3566  001930  0E00               	movlw	0
  3567  001932  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3568  001934  0E01               	movlw	1
  3569  001936  6E6D               	movwf	_f_can_coming_to_ID,c
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;sort.c: 147: _delay((unsigned long)((300)*(32000000/4000.0)));
  3573  001938  0E0D               	movlw	13
  3574  00193A  0100               	movlb	0	; () banked
  3575  00193C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3576  00193E  0E2D               	movlw	45
  3577  001940  0100               	movlb	0	; () banked
  3578  001942  6FB1               	movwf	??_Loading& (0+255),b
  3579  001944  0ED7               	movlw	215
  3580  001946                     u6977:
  3581  001946  2EE8               	decfsz	wreg,f,c
  3582  001948  D7FE               	bra	u6977
  3583  00194A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3584  00194C  D7FC               	bra	u6977
  3585  00194E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3586  001950  D7FA               	bra	u6977
  3587  001952  D000               	nop2	
  3588                           
  3589                           ;sort.c: 148: LATAbits.LATA4 = 0;
  3590  001954  9889               	bcf	3977,4,c	;volatile
  3591  001956  0012               	return	
  3592  001958                     __end_of_Loading:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1l	equ	0xFE1
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _initSortTimer *****************
  3607 ;; Defined at:
  3608 ;;		line 264 in file "sort.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  i               2    8[BANK0 ] int 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;Total ram usage:        5 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:   10
  3629 ;; This function calls:
  3630 ;;		_getRTC
  3631 ;; This function is called by:
  3632 ;;		_Loading
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text4
  3637  003546                     __ptext4:
  3638                           	opt stack 0
  3639  003546                     _initSortTimer:
  3640                           	opt stack 18
  3641                           
  3642                           ;sort.c: 266: getRTC();
  3643                           
  3644                           ;incstack = 0
  3645  003546  EC1E  F01C         	call	_getRTC	;wreg free
  3646                           
  3647                           ;sort.c: 267: for(int i = 0; i < 7; i++){
  3648  00354A  0E00               	movlw	0
  3649  00354C  0100               	movlb	0	; () banked
  3650  00354E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3651  003550  0E00               	movlw	0
  3652  003552  6F88               	movwf	initSortTimer@i& (0+255),b
  3653  003554                     l5846:
  3654                           
  3655                           ; BSR set to: 0
  3656  003554  0100               	movlb	0	; () banked
  3657  003556  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3658  003558  D008               	goto	l5850
  3659  00355A  0100               	movlb	0	; () banked
  3660  00355C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3661  00355E  E140               	bnz	l5856
  3662  003560  0E07               	movlw	7
  3663  003562  0100               	movlb	0	; () banked
  3664  003564  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3665  003566  B0D8               	btfsc	status,0,c
  3666  003568  D03B               	goto	l5856
  3667  00356A                     l5850:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;sort.c: 268: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3671  00356A  0E24               	movlw	low _time
  3672  00356C  0100               	movlb	0	; () banked
  3673  00356E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3674  003570  6ED9               	movwf	fsr2l,c
  3675  003572  0E01               	movlw	high _time
  3676  003574  0100               	movlb	0	; () banked
  3677  003576  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3678  003578  6EDA               	movwf	fsr2h,c
  3679  00357A  50DF               	movf	indf2,w,c
  3680  00357C  0100               	movlb	0	; () banked
  3681  00357E  6F85               	movwf	??_initSortTimer& (0+255),b
  3682  003580  0100               	movlb	0	; () banked
  3683  003582  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3684  003584  0E0F               	movlw	15
  3685  003586  1785               	andwf	??_initSortTimer& (0+255),f,b
  3686  003588  0E0F               	movlw	15
  3687  00358A  0100               	movlb	0	; () banked
  3688  00358C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3689  00358E  0100               	movlb	0	; () banked
  3690  003590  5185               	movf	??_initSortTimer& (0+255),w,b
  3691  003592  0D0A               	mullw	10
  3692  003594  0E24               	movlw	low _time
  3693  003596  0100               	movlb	0	; () banked
  3694  003598  2588               	addwf	initSortTimer@i& (0+255),w,b
  3695  00359A  6ED9               	movwf	fsr2l,c
  3696  00359C  0E01               	movlw	high _time
  3697  00359E  0100               	movlb	0	; () banked
  3698  0035A0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3699  0035A2  6EDA               	movwf	fsr2h,c
  3700  0035A4  50DF               	movf	indf2,w,c
  3701  0035A6  0B0F               	andlw	15
  3702  0035A8  0100               	movlb	0	; () banked
  3703  0035AA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3704  0035AC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3705  0035AE  50F3               	movf	prodl,w,c
  3706  0035B0  0100               	movlb	0	; () banked
  3707  0035B2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3708  0035B4  50F4               	movf	prodh,w,c
  3709  0035B6  0100               	movlb	0	; () banked
  3710  0035B8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3711  0035BA  90D8               	bcf	status,0,c
  3712  0035BC  0100               	movlb	0	; () banked
  3713  0035BE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3714  0035C0  6ED9               	movwf	fsr2l,c
  3715  0035C2  0100               	movlb	0	; () banked
  3716  0035C4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3717  0035C6  6EDA               	movwf	fsr2h,c
  3718  0035C8  0E0E               	movlw	low _startTime
  3719  0035CA  26D9               	addwf	fsr2l,f,c
  3720  0035CC  0E01               	movlw	high _startTime
  3721  0035CE  22DA               	addwfc	fsr2h,f,c
  3722  0035D0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3723  0035D4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3724                           
  3725                           ; BSR set to: 0
  3726  0035D8  0100               	movlb	0	; () banked
  3727  0035DA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3728  0035DC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3729  0035DE  D7BA               	goto	l5846
  3730  0035E0                     l5856:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;sort.c: 269: }
  3734                           ;sort.c: 271: T0CON = 0b00010111;
  3735  0035E0  0E17               	movlw	23
  3736  0035E2  6ED5               	movwf	4053,c	;volatile
  3737                           
  3738                           ;sort.c: 280: TMR0H = 0b10000101;
  3739  0035E4  0E85               	movlw	133
  3740  0035E6  6ED7               	movwf	4055,c	;volatile
  3741                           
  3742                           ;sort.c: 281: TMR0L = 0b11101110;
  3743  0035E8  0EEE               	movlw	238
  3744  0035EA  6ED6               	movwf	4054,c	;volatile
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;sort.c: 282: TMR0ON = 1;
  3748  0035EC  8ED5               	bsf	4053,7,c	;volatile
  3749                           
  3750                           ; BSR set to: 0
  3751  0035EE  0012               	return		;funcret
  3752  0035F0                     __end_of_initSortTimer:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           postdec1	equ	0xFE5
  3763                           fsr1l	equ	0xFE1
  3764                           indf2	equ	0xFDF
  3765                           postinc2	equ	0xFDE
  3766                           postdec2	equ	0xFDD
  3767                           fsr2h	equ	0xFDA
  3768                           fsr2l	equ	0xFD9
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _initServos *****************
  3772 ;; Defined at:
  3773 ;;		line 284 in file "sort.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;Total ram usage:        1 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    8
  3794 ;; This function calls:
  3795 ;;		_updateServoPosition
  3796 ;; This function is called by:
  3797 ;;		_Loading
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text5
  3802  003CF0                     __ptext5:
  3803                           	opt stack 0
  3804  003CF0                     _initServos:
  3805                           	opt stack 20
  3806                           
  3807                           ;sort.c: 285: updateServoPosition(1250, 1);
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;incstack = 0
  3811  003CF0  0E04               	movlw	4
  3812  003CF2  0100               	movlb	0	; () banked
  3813  003CF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3814  003CF6  0EE2               	movlw	226
  3815  003CF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3816  003CFA  0E00               	movlw	0
  3817  003CFC  0100               	movlb	0	; () banked
  3818  003CFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3819  003D00  0E01               	movlw	1
  3820  003D02  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3821  003D04  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3822                           
  3823                           ;sort.c: 286: updateServoPosition(1150, 3);
  3824  003D08  0E04               	movlw	4
  3825  003D0A  0100               	movlb	0	; () banked
  3826  003D0C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3827  003D0E  0E7E               	movlw	126
  3828  003D10  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3829  003D12  0E00               	movlw	0
  3830  003D14  0100               	movlb	0	; () banked
  3831  003D16  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3832  003D18  0E03               	movlw	3
  3833  003D1A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3834  003D1C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  3835                           
  3836                           ;sort.c: 287: TMR1ON = 1;
  3837  003D20  80CD               	bsf	4045,0,c	;volatile
  3838                           
  3839                           ;sort.c: 288: was_low_1 = 0;
  3840  003D22  0E00               	movlw	0
  3841  003D24  6E7A               	movwf	_was_low_1+1,c	;volatile
  3842  003D26  0E00               	movlw	0
  3843  003D28  6E79               	movwf	_was_low_1,c	;volatile
  3844                           
  3845                           ;sort.c: 289: _delay((unsigned long)((5)*(32000000/4000.0)));
  3846  003D2A  0E34               	movlw	52
  3847  003D2C  0100               	movlb	0	; () banked
  3848  003D2E  6F88               	movwf	??_initServos& (0+255),b
  3849  003D30  0EF1               	movlw	241
  3850  003D32                     u6987:
  3851  003D32  2EE8               	decfsz	wreg,f,c
  3852  003D34  D7FE               	bra	u6987
  3853  003D36  2F88               	decfsz	??_initServos& (0+255),f,b
  3854  003D38  D7FC               	bra	u6987
  3855  003D3A  D000               	nop2	
  3856                           
  3857                           ;sort.c: 290: TMR3ON = 1;
  3858  003D3C  80B1               	bsf	4017,0,c	;volatile
  3859                           
  3860                           ;sort.c: 291: was_low_3 = 0;
  3861  003D3E  0E00               	movlw	0
  3862  003D40  6E7C               	movwf	_was_low_3+1,c	;volatile
  3863  003D42  0E00               	movlw	0
  3864  003D44  6E7B               	movwf	_was_low_3,c	;volatile
  3865                           
  3866                           ;sort.c: 292: LATCbits.LATC0 = 0;
  3867  003D46  908B               	bcf	3979,0,c	;volatile
  3868  003D48  0012               	return		;funcret
  3869  003D4A                     __end_of_initServos:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _initGlobalVars *****************
  3889 ;; Defined at:
  3890 ;;		line 245 in file "sort.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    7
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_Loading
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text6
  3919  003AA6                     __ptext6:
  3920                           	opt stack 0
  3921  003AA6                     _initGlobalVars:
  3922                           	opt stack 21
  3923                           
  3924                           ;sort.c: 247: first = 0;
  3925                           
  3926                           ;incstack = 0
  3927  003AA6  0E00               	movlw	0
  3928  003AA8  0100               	movlb	0	; () banked
  3929  003AAA  6FE5               	movwf	(_first+1)& (0+255),b
  3930  003AAC  0E00               	movlw	0
  3931  003AAE  6FE4               	movwf	_first& (0+255),b
  3932                           
  3933                           ;sort.c: 250: f_loadingNewCan = 0;
  3934  003AB0  0E00               	movlw	0
  3935  003AB2  0100               	movlb	0	; () banked
  3936  003AB4  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3937  003AB6  0E00               	movlw	0
  3938  003AB8  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3939                           
  3940                           ;sort.c: 251: f_lastCan = 0;
  3941  003ABA  0E00               	movlw	0
  3942  003ABC  6E74               	movwf	_f_lastCan+1,c
  3943  003ABE  0E00               	movlw	0
  3944  003AC0  6E73               	movwf	_f_lastCan,c
  3945                           
  3946                           ;sort.c: 252: f_ID_receive = 1;
  3947  003AC2  0E00               	movlw	0
  3948  003AC4  6E6C               	movwf	_f_ID_receive+1,c
  3949  003AC6  0E01               	movlw	1
  3950  003AC8  6E6B               	movwf	_f_ID_receive,c
  3951                           
  3952                           ;sort.c: 253: f_can_coming_to_ID = 0;
  3953  003ACA  0E00               	movlw	0
  3954  003ACC  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3955  003ACE  0E00               	movlw	0
  3956  003AD0  6E6D               	movwf	_f_can_coming_to_ID,c
  3957                           
  3958                           ;sort.c: 254: f_can_coming_to_distribution = 0;
  3959  003AD2  0E00               	movlw	0
  3960  003AD4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3961  003AD6  0E00               	movlw	0
  3962  003AD8  6E6F               	movwf	_f_can_coming_to_distribution,c
  3963                           
  3964                           ;sort.c: 255: f_can_distributed = 0;
  3965  003ADA  0E00               	movlw	0
  3966  003ADC  6E72               	movwf	_f_can_distributed+1,c
  3967  003ADE  0E00               	movlw	0
  3968  003AE0  6E71               	movwf	_f_can_distributed,c
  3969                           
  3970                           ;sort.c: 258: count_total = 0;
  3971  003AE2  0E00               	movlw	0
  3972  003AE4  0100               	movlb	0	; () banked
  3973  003AE6  6FFF               	movwf	(_count_total+1)& (0+255),b
  3974  003AE8  0E00               	movlw	0
  3975  003AEA  6FFE               	movwf	_count_total& (0+255),b
  3976                           
  3977                           ;sort.c: 259: count_pop_no_tab = 0;
  3978  003AEC  0E00               	movlw	0
  3979  003AEE  6E62               	movwf	_count_pop_no_tab+1,c
  3980  003AF0  0E00               	movlw	0
  3981  003AF2  6E61               	movwf	_count_pop_no_tab,c
  3982                           
  3983                           ;sort.c: 260: count_pop_w_tab = 0;
  3984  003AF4  0E00               	movlw	0
  3985  003AF6  6E64               	movwf	_count_pop_w_tab+1,c
  3986  003AF8  0E00               	movlw	0
  3987  003AFA  6E63               	movwf	_count_pop_w_tab,c
  3988                           
  3989                           ;sort.c: 261: count_can_w_lab = 0;
  3990  003AFC  0E00               	movlw	0
  3991  003AFE  6E60               	movwf	_count_can_w_lab+1,c
  3992  003B00  0E00               	movlw	0
  3993  003B02  6E5F               	movwf	_count_can_w_lab,c
  3994                           
  3995                           ;sort.c: 262: count_can_no_lab = 0;
  3996  003B04  0E00               	movlw	0
  3997  003B06  6E5E               	movwf	_count_can_no_lab+1,c
  3998  003B08  0E00               	movlw	0
  3999  003B0A  6E5D               	movwf	_count_can_no_lab,c
  4000                           
  4001                           ; BSR set to: 0
  4002  003B0C  0012               	return		;funcret
  4003  003B0E                     __end_of_initGlobalVars:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           postinc0	equ	0xFEE
  4012                           wreg	equ	0xFE8
  4013                           postdec1	equ	0xFE5
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _getIR *****************
  4023 ;; Defined at:
  4024 ;;		line 321 in file "sort.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;Total ram usage:        2 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    9
  4045 ;; This function calls:
  4046 ;;		_readIR
  4047 ;; This function is called by:
  4048 ;;		_Loading
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text7
  4053  003E40                     __ptext7:
  4054                           	opt stack 0
  4055  003E40                     _getIR:
  4056                           	opt stack 19
  4057                           
  4058                           ;sort.c: 322: readIR();
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;incstack = 0
  4062  003E40  EC6D  F01F         	call	_readIR	;wreg free
  4063                           
  4064                           ;sort.c: 323: if(IR_signal==1){
  4065  003E44  0100               	movlb	0	; () banked
  4066  003E46  05DA               	decf	_IR_signal& (0+255),w,b
  4067  003E48  0100               	movlb	0	; () banked
  4068  003E4A  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  4069  003E4C  A4D8               	btfss	status,2,c
  4070  003E4E  0012               	return	
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 324: _delay((unsigned long)((100)*(32000000/4000.0)));
  4074  003E50  0E05               	movlw	5
  4075  003E52  0100               	movlb	0	; () banked
  4076  003E54  6F87               	movwf	(??_getIR+1)& (0+255),b
  4077  003E56  0E0F               	movlw	15
  4078  003E58  0100               	movlb	0	; () banked
  4079  003E5A  6F86               	movwf	??_getIR& (0+255),b
  4080  003E5C  0EF1               	movlw	241
  4081  003E5E                     u6997:
  4082  003E5E  2EE8               	decfsz	wreg,f,c
  4083  003E60  D7FE               	bra	u6997
  4084  003E62  2F86               	decfsz	??_getIR& (0+255),f,b
  4085  003E64  D7FC               	bra	u6997
  4086  003E66  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  4087  003E68  D7FA               	bra	u6997
  4088                           
  4089                           ;sort.c: 325: if(IR_signal==1){
  4090  003E6A  0100               	movlb	0	; () banked
  4091  003E6C  05DA               	decf	_IR_signal& (0+255),w,b
  4092  003E6E  0100               	movlb	0	; () banked
  4093  003E70  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  4094  003E72  A4D8               	btfss	status,2,c
  4095  003E74  D006               	goto	l5944
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;sort.c: 326: f_loadingNewCan = 1;
  4099  003E76  0E00               	movlw	0
  4100  003E78  0100               	movlb	0	; () banked
  4101  003E7A  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4102  003E7C  0E01               	movlw	1
  4103  003E7E  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  4104                           
  4105                           ;sort.c: 327: }
  4106  003E80  0012               	return	
  4107  003E82                     l5944:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 328: else{
  4111                           ;sort.c: 329: f_loadingNewCan = 0;
  4112  003E82  0E00               	movlw	0
  4113  003E84  0100               	movlb	0	; () banked
  4114  003E86  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4115  003E88  0E00               	movlw	0
  4116  003E8A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  4117                           
  4118                           ; BSR set to: 0
  4119  003E8C  0012               	return	
  4120  003E8E                     __end_of_getIR:
  4121                           	opt stack 0
  4122                           tblptru	equ	0xFF8
  4123                           tblptrh	equ	0xFF7
  4124                           tblptrl	equ	0xFF6
  4125                           tablat	equ	0xFF5
  4126                           prodh	equ	0xFF4
  4127                           prodl	equ	0xFF3
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           postdec1	equ	0xFE5
  4131                           fsr1l	equ	0xFE1
  4132                           indf2	equ	0xFDF
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _delay_ms *****************
  4140 ;; Defined at:
  4141 ;;		line 346 in file "sort.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  milliseconds    1    wreg     unsigned char 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;Total ram usage:        2 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    7
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_Loading
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text8
  4170  00434A                     __ptext8:
  4171                           	opt stack 0
  4172  00434A                     _delay_ms:
  4173                           	opt stack 21
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;incstack = 0
  4177                           ;delay_ms@milliseconds stored from wreg
  4178  00434A  0100               	movlb	0	; () banked
  4179  00434C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4180                           
  4181                           ;sort.c: 347: while(milliseconds > 0)
  4182  00434E  D00B               	goto	l5918
  4183  004350                     l5914:
  4184                           
  4185                           ;sort.c: 348: {
  4186                           ;sort.c: 349: milliseconds--;
  4187  004350  0100               	movlb	0	; () banked
  4188  004352  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;sort.c: 350: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4192  004354  0E0B               	movlw	11
  4193  004356  0100               	movlb	0	; () banked
  4194  004358  6F80               	movwf	??_delay_ms& (0+255),b
  4195  00435A  0E47               	movlw	71
  4196  00435C                     u7007:
  4197  00435C  2EE8               	decfsz	wreg,f,c
  4198  00435E  D7FE               	bra	u7007
  4199  004360  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4200  004362  D7FC               	bra	u7007
  4201  004364  D000               	nop2	
  4202  004366                     l5918:
  4203  004366  0100               	movlb	0	; () banked
  4204  004368  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4205  00436A  0100               	movlb	0	; () banked
  4206  00436C  B4D8               	btfsc	status,2,c
  4207  00436E  0012               	return	
  4208  004370  D7EF               	goto	l5914
  4209  004372                     __end_of_delay_ms:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           postdec1	equ	0xFE5
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _ID *****************
  4229 ;; Defined at:
  4230 ;;		line 152 in file "sort.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;Total ram usage:        8 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    9
  4251 ;; This function calls:
  4252 ;;		_readMAG
  4253 ;; This function is called by:
  4254 ;;		_sort
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text9
  4259  002DD8                     __ptext9:
  4260                           	opt stack 0
  4261  002DD8                     _ID:
  4262                           	opt stack 20
  4263                           
  4264                           ;sort.c: 153: if(f_can_coming_to_ID){
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;incstack = 0
  4268  002DD8  506D               	movf	_f_can_coming_to_ID,w,c
  4269  002DDA  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  4270  002DDC  B4D8               	btfsc	status,2,c
  4271  002DDE  0012               	return	
  4272                           
  4273                           ;sort.c: 155: _delay((unsigned long)((500)*(32000000/4000.0)));
  4274  002DE0  0E15               	movlw	21
  4275  002DE2  0100               	movlb	0	; () banked
  4276  002DE4  6F87               	movwf	(??_ID+1)& (0+255),b
  4277  002DE6  0E4B               	movlw	75
  4278  002DE8  0100               	movlb	0	; () banked
  4279  002DEA  6F86               	movwf	??_ID& (0+255),b
  4280  002DEC  0EBE               	movlw	190
  4281  002DEE                     u7017:
  4282  002DEE  2EE8               	decfsz	wreg,f,c
  4283  002DF0  D7FE               	bra	u7017
  4284  002DF2  2F86               	decfsz	??_ID& (0+255),f,b
  4285  002DF4  D7FC               	bra	u7017
  4286  002DF6  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4287  002DF8  D7FA               	bra	u7017
  4288  002DFA  F000               	nop	
  4289                           
  4290                           ;sort.c: 160: int sensor_outputs[3];
  4291                           ;sort.c: 164: sensor_outputs[0] = PORTAbits.RA2;
  4292  002DFC  A480               	btfss	3968,2,c	;volatile
  4293  002DFE  D004               	goto	u4790
  4294  002E00  0100               	movlb	0	; () banked
  4295  002E02  6B86               	clrf	??_ID& (0+255),b
  4296  002E04  2B86               	incf	??_ID& (0+255),f,b
  4297  002E06  D002               	goto	u4798
  4298  002E08                     u4790:
  4299  002E08  0100               	movlb	0	; () banked
  4300  002E0A  6B86               	clrf	??_ID& (0+255),b
  4301  002E0C                     u4798:
  4302  002E0C  0100               	movlb	0	; () banked
  4303  002E0E  5186               	movf	??_ID& (0+255),w,b
  4304  002E10  0100               	movlb	0	; () banked
  4305  002E12  6F88               	movwf	ID@sensor_outputs& (0+255),b
  4306  002E14  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;sort.c: 166: if(!sensor_outputs[0]){
  4310  002E16  0100               	movlb	0	; () banked
  4311  002E18  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4312  002E1A  0100               	movlb	0	; () banked
  4313  002E1C  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4314  002E1E  A4D8               	btfss	status,2,c
  4315  002E20  D029               	goto	l6338
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;sort.c: 167: readMAG();
  4319  002E22  EC47  F01F         	call	_readMAG	;wreg free
  4320                           
  4321                           ;sort.c: 168: sensor_outputs[1] = MAG_signal;
  4322  002E26  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  4323  002E2A  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4324                           
  4325                           ;sort.c: 169: if(!sensor_outputs[1]){
  4326  002E2E  0100               	movlb	0	; () banked
  4327  002E30  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4328  002E32  0100               	movlb	0	; () banked
  4329  002E34  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4330  002E36  A4D8               	btfss	status,2,c
  4331  002E38  D01D               	goto	l6338
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;sort.c: 170: LATAbits.LATA3 = 1;
  4335  002E3A  8689               	bsf	3977,3,c	;volatile
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;sort.c: 172: _delay((unsigned long)((300)*(32000000/4000.0)));
  4339  002E3C  0E0D               	movlw	13
  4340  002E3E  0100               	movlb	0	; () banked
  4341  002E40  6F87               	movwf	(??_ID+1)& (0+255),b
  4342  002E42  0E2D               	movlw	45
  4343  002E44  0100               	movlb	0	; () banked
  4344  002E46  6F86               	movwf	??_ID& (0+255),b
  4345  002E48  0ED7               	movlw	215
  4346  002E4A                     u7027:
  4347  002E4A  2EE8               	decfsz	wreg,f,c
  4348  002E4C  D7FE               	bra	u7027
  4349  002E4E  2F86               	decfsz	??_ID& (0+255),f,b
  4350  002E50  D7FC               	bra	u7027
  4351  002E52  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4352  002E54  D7FA               	bra	u7027
  4353  002E56  D000               	nop2	
  4354                           
  4355                           ;sort.c: 173: sensor_outputs[2] = PORTAbits.RA2;
  4356  002E58  A480               	btfss	3968,2,c	;volatile
  4357  002E5A  D004               	goto	u4820
  4358  002E5C  0100               	movlb	0	; () banked
  4359  002E5E  6B86               	clrf	??_ID& (0+255),b
  4360  002E60  2B86               	incf	??_ID& (0+255),f,b
  4361  002E62  D002               	goto	u4828
  4362  002E64                     u4820:
  4363  002E64  0100               	movlb	0	; () banked
  4364  002E66  6B86               	clrf	??_ID& (0+255),b
  4365  002E68                     u4828:
  4366  002E68  0100               	movlb	0	; () banked
  4367  002E6A  5186               	movf	??_ID& (0+255),w,b
  4368  002E6C  0100               	movlb	0	; () banked
  4369  002E6E  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4370  002E70  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;sort.c: 174: LATAbits.LATA3 = 0;
  4374  002E72  9689               	bcf	3977,3,c	;volatile
  4375  002E74                     l6338:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;sort.c: 175: }
  4379                           ;sort.c: 176: }
  4380                           ;sort.c: 179: if(!sensor_outputs[0]){
  4381  002E74  0100               	movlb	0	; () banked
  4382  002E76  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4383  002E78  0100               	movlb	0	; () banked
  4384  002E7A  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4385  002E7C  A4D8               	btfss	status,2,c
  4386  002E7E  D01E               	goto	l6356
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;sort.c: 180: if(!sensor_outputs[1]){
  4390  002E80  0100               	movlb	0	; () banked
  4391  002E82  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4392  002E84  0100               	movlb	0	; () banked
  4393  002E86  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4394  002E88  A4D8               	btfss	status,2,c
  4395  002E8A  D012               	goto	l6352
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;sort.c: 181: if(!sensor_outputs[2]){
  4399  002E8C  0100               	movlb	0	; () banked
  4400  002E8E  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4401  002E90  0100               	movlb	0	; () banked
  4402  002E92  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4403  002E94  A4D8               	btfss	status,2,c
  4404  002E96  D006               	goto	l6348
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;sort.c: 182: count_pop_no_tab++;
  4408  002E98  4A61               	infsnz	_count_pop_no_tab,f,c
  4409  002E9A  2A62               	incf	_count_pop_no_tab+1,f,c
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;sort.c: 183: cur_can = 0;
  4413  002E9C  0E00               	movlw	0
  4414  002E9E  6E66               	movwf	_cur_can+1,c
  4415  002EA0  0E00               	movlw	0
  4416  002EA2  D011               	goto	L4
  4417  002EA4                     l6348:
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;sort.c: 185: else{
  4421                           ;sort.c: 186: count_pop_w_tab++;
  4422  002EA4  4A63               	infsnz	_count_pop_w_tab,f,c
  4423  002EA6  2A64               	incf	_count_pop_w_tab+1,f,c
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;sort.c: 187: cur_can = 1;
  4427  002EA8  0E00               	movlw	0
  4428  002EAA  6E66               	movwf	_cur_can+1,c
  4429  002EAC  0E01               	movlw	1
  4430  002EAE  D00B               	goto	L4
  4431  002EB0                     l6352:
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;sort.c: 190: else{
  4435                           ;sort.c: 191: count_can_w_lab++;
  4436  002EB0  4A5F               	infsnz	_count_can_w_lab,f,c
  4437  002EB2  2A60               	incf	_count_can_w_lab+1,f,c
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;sort.c: 192: cur_can = 2;
  4441  002EB4  0E00               	movlw	0
  4442  002EB6  6E66               	movwf	_cur_can+1,c
  4443  002EB8  0E02               	movlw	2
  4444  002EBA  D005               	goto	L4
  4445  002EBC                     l6356:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;sort.c: 195: else{
  4449                           ;sort.c: 196: count_can_no_lab++;
  4450  002EBC  4A5D               	infsnz	_count_can_no_lab,f,c
  4451  002EBE  2A5E               	incf	_count_can_no_lab+1,f,c
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;sort.c: 197: cur_can = 3;
  4455  002EC0  0E00               	movlw	0
  4456  002EC2  6E66               	movwf	_cur_can+1,c
  4457  002EC4  0E03               	movlw	3
  4458  002EC6                     L4:
  4459  002EC6  6E65               	movwf	_cur_can,c
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;sort.c: 198: }
  4463                           ;sort.c: 200: LATCbits.LATC0 = 1;
  4464                           
  4465                           ; BSR set to: 0
  4466  002EC8  808B               	bsf	3979,0,c	;volatile
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;sort.c: 201: f_can_coming_to_distribution = 1;
  4470  002ECA  0E00               	movlw	0
  4471  002ECC  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4472  002ECE  0E01               	movlw	1
  4473  002ED0  6E6F               	movwf	_f_can_coming_to_distribution,c
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;sort.c: 202: _delay((unsigned long)((500)*(32000000/4000.0)));
  4477  002ED2  0E15               	movlw	21
  4478  002ED4  0100               	movlb	0	; () banked
  4479  002ED6  6F87               	movwf	(??_ID+1)& (0+255),b
  4480  002ED8  0E4B               	movlw	75
  4481  002EDA  0100               	movlb	0	; () banked
  4482  002EDC  6F86               	movwf	??_ID& (0+255),b
  4483  002EDE  0EBE               	movlw	190
  4484  002EE0                     u7037:
  4485  002EE0  2EE8               	decfsz	wreg,f,c
  4486  002EE2  D7FE               	bra	u7037
  4487  002EE4  2F86               	decfsz	??_ID& (0+255),f,b
  4488  002EE6  D7FC               	bra	u7037
  4489  002EE8  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4490  002EEA  D7FA               	bra	u7037
  4491  002EEC  F000               	nop	
  4492                           
  4493                           ;sort.c: 203: LATCbits.LATC0 = 0;
  4494  002EEE  908B               	bcf	3979,0,c	;volatile
  4495                           
  4496                           ;sort.c: 205: f_can_coming_to_ID = 0;
  4497  002EF0  0E00               	movlw	0
  4498  002EF2  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4499  002EF4  0E00               	movlw	0
  4500  002EF6  6E6D               	movwf	_f_can_coming_to_ID,c
  4501  002EF8  0012               	return	
  4502  002EFA                     __end_of_ID:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           postdec1	equ	0xFE5
  4513                           fsr1l	equ	0xFE1
  4514                           indf2	equ	0xFDF
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _Distribution *****************
  4522 ;; Defined at:
  4523 ;;		line 208 in file "sort.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;		None
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;		None
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;Total ram usage:        2 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    8
  4544 ;; This function calls:
  4545 ;;		_updateServoPosition
  4546 ;; This function is called by:
  4547 ;;		_sort
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text10
  4552  002B5C                     __ptext10:
  4553                           	opt stack 0
  4554  002B5C                     _Distribution:
  4555                           	opt stack 21
  4556                           
  4557                           ;sort.c: 209: if(f_can_coming_to_distribution){
  4558                           
  4559                           ;incstack = 0
  4560  002B5C  506F               	movf	_f_can_coming_to_distribution,w,c
  4561  002B5E  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4562  002B60  B4D8               	btfsc	status,2,c
  4563  002B62  0012               	return	
  4564  002B64  D034               	goto	l6384
  4565  002B66                     l6374:
  4566                           
  4567                           ;sort.c: 214: updateServoPosition(500, 1);
  4568  002B66  0E01               	movlw	1
  4569  002B68  0100               	movlb	0	; () banked
  4570  002B6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4571  002B6C  0EF4               	movlw	244
  4572  002B6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4573  002B70  0E00               	movlw	0
  4574  002B72  0100               	movlb	0	; () banked
  4575  002B74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4576  002B76  0E01               	movlw	1
  4577  002B78  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4578  002B7A  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4579                           
  4580                           ;sort.c: 215: break;
  4581  002B7E  D03E               	goto	l6386
  4582  002B80                     l6376:
  4583                           
  4584                           ;sort.c: 217: updateServoPosition(700, 1);
  4585  002B80  0E02               	movlw	2
  4586  002B82  0100               	movlb	0	; () banked
  4587  002B84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4588  002B86  0EBC               	movlw	188
  4589  002B88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4590  002B8A  0E00               	movlw	0
  4591  002B8C  0100               	movlb	0	; () banked
  4592  002B8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4593  002B90  0E01               	movlw	1
  4594  002B92  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4595  002B94  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4596                           
  4597                           ;sort.c: 218: break;
  4598  002B98  D031               	goto	l6386
  4599  002B9A                     l6378:
  4600                           
  4601                           ;sort.c: 220: updateServoPosition(1650, 1);
  4602  002B9A  0E06               	movlw	6
  4603  002B9C  0100               	movlb	0	; () banked
  4604  002B9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4605  002BA0  0E72               	movlw	114
  4606  002BA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4607  002BA4  0E00               	movlw	0
  4608  002BA6  0100               	movlb	0	; () banked
  4609  002BA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4610  002BAA  0E01               	movlw	1
  4611  002BAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4612  002BAE  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4613                           
  4614                           ;sort.c: 221: break;
  4615  002BB2  D024               	goto	l6386
  4616  002BB4                     l6380:
  4617                           
  4618                           ;sort.c: 223: updateServoPosition(2000, 1);
  4619  002BB4  0E07               	movlw	7
  4620  002BB6  0100               	movlb	0	; () banked
  4621  002BB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4622  002BBA  0ED0               	movlw	208
  4623  002BBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4624  002BBE  0E00               	movlw	0
  4625  002BC0  0100               	movlb	0	; () banked
  4626  002BC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4627  002BC4  0E01               	movlw	1
  4628  002BC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4629  002BC8  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4630                           
  4631                           ;sort.c: 227: }
  4632                           
  4633                           ;sort.c: 226: break;
  4634                           
  4635                           ;sort.c: 225: default:
  4636                           
  4637                           ;sort.c: 224: break;
  4638  002BCC  D017               	goto	l6386
  4639  002BCE                     l6384:
  4640  002BCE  C065  F088         	movff	_cur_can,??_Distribution
  4641  002BD2  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4642                           
  4643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4644                           ; Switch size 1, requested type "space"
  4645                           ; Number of cases is 1, Range of values is 0 to 0
  4646                           ; switch strategies available:
  4647                           ; Name         Instructions Cycles
  4648                           ; simple_byte            4     3 (average)
  4649                           ;	Chosen strategy is simple_byte
  4650  002BD6  0100               	movlb	0	; () banked
  4651  002BD8  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4652  002BDA  0A00               	xorlw	0	; case 0
  4653  002BDC  A4D8               	btfss	status,2,c
  4654  002BDE  D00E               	goto	l6386
  4655                           
  4656                           ; BSR set to: 0
  4657                           ; Switch size 1, requested type "space"
  4658                           ; Number of cases is 4, Range of values is 0 to 3
  4659                           ; switch strategies available:
  4660                           ; Name         Instructions Cycles
  4661                           ; simple_byte           13     7 (average)
  4662                           ;	Chosen strategy is simple_byte
  4663  002BE0  0100               	movlb	0	; () banked
  4664  002BE2  5188               	movf	??_Distribution& (0+255),w,b
  4665  002BE4  0A00               	xorlw	0	; case 0
  4666  002BE6  B4D8               	btfsc	status,2,c
  4667  002BE8  D7BE               	goto	l6374
  4668  002BEA  0A01               	xorlw	1	; case 1
  4669  002BEC  B4D8               	btfsc	status,2,c
  4670  002BEE  D7C8               	goto	l6376
  4671  002BF0  0A03               	xorlw	3	; case 2
  4672  002BF2  B4D8               	btfsc	status,2,c
  4673  002BF4  D7D2               	goto	l6378
  4674  002BF6  0A01               	xorlw	1	; case 3
  4675  002BF8  B4D8               	btfsc	status,2,c
  4676  002BFA  D7DC               	goto	l6380
  4677  002BFC                     l6386:
  4678                           
  4679                           ;sort.c: 228: _delay((unsigned long)((500)*(32000000/4000.0)));
  4680  002BFC  0E15               	movlw	21
  4681  002BFE  0100               	movlb	0	; () banked
  4682  002C00  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4683  002C02  0E4B               	movlw	75
  4684  002C04  0100               	movlb	0	; () banked
  4685  002C06  6F88               	movwf	??_Distribution& (0+255),b
  4686  002C08  0EBE               	movlw	190
  4687  002C0A                     u7047:
  4688  002C0A  2EE8               	decfsz	wreg,f,c
  4689  002C0C  D7FE               	bra	u7047
  4690  002C0E  2F88               	decfsz	??_Distribution& (0+255),f,b
  4691  002C10  D7FC               	bra	u7047
  4692  002C12  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4693  002C14  D7FA               	bra	u7047
  4694  002C16  F000               	nop	
  4695                           
  4696                           ;sort.c: 231: updateServoPosition(1350, 3);
  4697  002C18  0E05               	movlw	5
  4698  002C1A  0100               	movlb	0	; () banked
  4699  002C1C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4700  002C1E  0E46               	movlw	70
  4701  002C20  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4702  002C22  0E00               	movlw	0
  4703  002C24  0100               	movlb	0	; () banked
  4704  002C26  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4705  002C28  0E03               	movlw	3
  4706  002C2A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4707  002C2C  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4708                           
  4709                           ;sort.c: 232: _delay((unsigned long)((500)*(32000000/4000.0)));
  4710  002C30  0E15               	movlw	21
  4711  002C32  0100               	movlb	0	; () banked
  4712  002C34  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4713  002C36  0E4B               	movlw	75
  4714  002C38  0100               	movlb	0	; () banked
  4715  002C3A  6F88               	movwf	??_Distribution& (0+255),b
  4716  002C3C  0EBE               	movlw	190
  4717  002C3E                     u7057:
  4718  002C3E  2EE8               	decfsz	wreg,f,c
  4719  002C40  D7FE               	bra	u7057
  4720  002C42  2F88               	decfsz	??_Distribution& (0+255),f,b
  4721  002C44  D7FC               	bra	u7057
  4722  002C46  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4723  002C48  D7FA               	bra	u7057
  4724  002C4A  F000               	nop	
  4725                           
  4726                           ;sort.c: 235: updateServoPosition(1250, 1);
  4727  002C4C  0E04               	movlw	4
  4728  002C4E  0100               	movlb	0	; () banked
  4729  002C50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4730  002C52  0EE2               	movlw	226
  4731  002C54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4732  002C56  0E00               	movlw	0
  4733  002C58  0100               	movlb	0	; () banked
  4734  002C5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4735  002C5C  0E01               	movlw	1
  4736  002C5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4737  002C60  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4738                           
  4739                           ;sort.c: 236: updateServoPosition(1150, 3);
  4740  002C64  0E04               	movlw	4
  4741  002C66  0100               	movlb	0	; () banked
  4742  002C68  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4743  002C6A  0E7E               	movlw	126
  4744  002C6C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4745  002C6E  0E00               	movlw	0
  4746  002C70  0100               	movlb	0	; () banked
  4747  002C72  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4748  002C74  0E03               	movlw	3
  4749  002C76  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4750  002C78  ECDF  F01C         	call	_updateServoPosition	;wreg free
  4751                           
  4752                           ;sort.c: 237: f_can_coming_to_distribution = 0;
  4753  002C7C  0E00               	movlw	0
  4754  002C7E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4755  002C80  0E00               	movlw	0
  4756  002C82  6E6F               	movwf	_f_can_coming_to_distribution,c
  4757                           
  4758                           ;sort.c: 238: f_can_distributed = 1;
  4759  002C84  0E00               	movlw	0
  4760  002C86  6E72               	movwf	_f_can_distributed+1,c
  4761  002C88  0E01               	movlw	1
  4762  002C8A  6E71               	movwf	_f_can_distributed,c
  4763                           
  4764                           ;sort.c: 239: if(f_lastCan == 1){
  4765  002C8C  0473               	decf	_f_lastCan,w,c
  4766  002C8E  1074               	iorwf	_f_lastCan+1,w,c
  4767  002C90  A4D8               	btfss	status,2,c
  4768  002C92  0012               	return	
  4769                           
  4770                           ;sort.c: 240: machine_state = DoneSorting_state;
  4771  002C94  0E02               	movlw	2
  4772  002C96  0100               	movlb	0	; () banked
  4773  002C98  6FFC               	movwf	_machine_state& (0+255),b
  4774                           
  4775                           ; BSR set to: 0
  4776  002C9A  0012               	return	
  4777  002C9C                     __end_of_Distribution:
  4778                           	opt stack 0
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           postdec1	equ	0xFE5
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           postdec2	equ	0xFDD
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function _machineConfig *****************
  4797 ;; Defined at:
  4798 ;;		line 15 in file "MachineConfig.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;		None
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;Total ram usage:        0 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    7
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_main
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text11
  4827  003C38                     __ptext11:
  4828                           	opt stack 0
  4829  003C38                     _machineConfig:
  4830                           	opt stack 23
  4831                           
  4832                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4833                           
  4834                           ;incstack = 0
  4835  003C38  0EF0               	movlw	240
  4836  003C3A  6ED3               	movwf	4051,c	;volatile
  4837                           
  4838                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4839  003C3C  8C9B               	bsf	3995,6,c	;volatile
  4840                           
  4841                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4842  003C3E  0E47               	movlw	71
  4843  003C40  6E92               	movwf	3986,c	;volatile
  4844                           
  4845                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4846  003C42  0EF2               	movlw	242
  4847  003C44  6E93               	movwf	3987,c	;volatile
  4848                           
  4849                           ;MachineConfig.c: 27: TRISC = 0x00;
  4850  003C46  0E00               	movlw	0
  4851  003C48  6E94               	movwf	3988,c	;volatile
  4852                           
  4853                           ;MachineConfig.c: 31: TRISD = 0x00;
  4854  003C4A  0E00               	movlw	0
  4855  003C4C  6E95               	movwf	3989,c	;volatile
  4856                           
  4857                           ;MachineConfig.c: 34: TRISE = 0x00;
  4858  003C4E  0E00               	movlw	0
  4859  003C50  6E96               	movwf	3990,c	;volatile
  4860                           
  4861                           ;MachineConfig.c: 37: LATA = 0x00;
  4862  003C52  0E00               	movlw	0
  4863  003C54  6E89               	movwf	3977,c	;volatile
  4864                           
  4865                           ;MachineConfig.c: 38: LATB = 0x00;
  4866  003C56  0E00               	movlw	0
  4867  003C58  6E8A               	movwf	3978,c	;volatile
  4868                           
  4869                           ;MachineConfig.c: 39: LATC = 0x00;
  4870  003C5A  0E00               	movlw	0
  4871  003C5C  6E8B               	movwf	3979,c	;volatile
  4872                           
  4873                           ;MachineConfig.c: 40: LATD = 0x00;
  4874  003C5E  0E00               	movlw	0
  4875  003C60  6E8C               	movwf	3980,c	;volatile
  4876                           
  4877                           ;MachineConfig.c: 41: LATE = 0x00;
  4878  003C62  0E00               	movlw	0
  4879  003C64  6E8D               	movwf	3981,c	;volatile
  4880                           
  4881                           ;MachineConfig.c: 43: nRBPU = 0;
  4882  003C66  9EF1               	bcf	intcon2,7,c	;volatile
  4883                           
  4884                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4885  003C68  0E00               	movlw	0
  4886  003C6A  6EC2               	movwf	4034,c	;volatile
  4887                           
  4888                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4889  003C6C  0E0D               	movlw	13
  4890  003C6E  6EC1               	movwf	4033,c	;volatile
  4891                           
  4892                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4893  003C70  0E00               	movlw	0
  4894  003C72  6EB5               	movwf	4021,c	;volatile
  4895                           
  4896                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4897  003C74  96B4               	bcf	4020,3,c	;volatile
  4898                           
  4899                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4900  003C76  0EB1               	movlw	177
  4901  003C78  6EC0               	movwf	4032,c	;volatile
  4902                           
  4903                           ;MachineConfig.c: 55: INT1IE = 1;
  4904  003C7A  86F0               	bsf	intcon3,3,c	;volatile
  4905                           
  4906                           ;MachineConfig.c: 57: TMR0IE = 1;
  4907  003C7C  8AF2               	bsf	intcon,5,c	;volatile
  4908                           
  4909                           ;MachineConfig.c: 58: TMR1IE = 1;
  4910  003C7E  809D               	bsf	3997,0,c	;volatile
  4911                           
  4912                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4913  003C80  0EB0               	movlw	176
  4914  003C82  6ECD               	movwf	4045,c	;volatile
  4915                           
  4916                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4917  003C84  0EB0               	movlw	176
  4918  003C86  6EB1               	movwf	4017,c	;volatile
  4919                           
  4920                           ;MachineConfig.c: 61: TMR2IE = 1;
  4921  003C88  829D               	bsf	3997,1,c	;volatile
  4922                           
  4923                           ;MachineConfig.c: 62: TMR3IE = 1;
  4924  003C8A  82A0               	bsf	4000,1,c	;volatile
  4925                           
  4926                           ;MachineConfig.c: 63: PEIE = 1;
  4927  003C8C  8CF2               	bsf	intcon,6,c	;volatile
  4928                           
  4929                           ;MachineConfig.c: 64: ADIE = 0;
  4930  003C8E  9C9D               	bcf	3997,6,c	;volatile
  4931                           
  4932                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4933  003C90  9EF2               	bcf	intcon,7,c	;volatile
  4934  003C92  0012               	return		;funcret
  4935  003C94                     __end_of_machineConfig:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           intcon	equ	0xFF2
  4944                           intcon2	equ	0xFF1
  4945                           intcon3	equ	0xFF0
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           postdec1	equ	0xFE5
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function _logRun *****************
  4958 ;; Defined at:
  4959 ;;		line 84 in file "EEPROM.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4964 ;;  i               2   55[BANK0 ] int 
  4965 ;;  num             1   49[BANK0 ] unsigned char 
  4966 ;;  addr            2   57[BANK0 ] unsigned short 
  4967 ;;  byte11          1   54[BANK0 ] unsigned char 
  4968 ;;  byte3           1   52[BANK0 ] unsigned char 
  4969 ;;  byte2           1   51[BANK0 ] unsigned char 
  4970 ;;  byte1           1   50[BANK0 ] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:       10 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:   11
  4987 ;; This function calls:
  4988 ;;		_EEPROM_read
  4989 ;;		_EEPROM_write
  4990 ;; This function is called by:
  4991 ;;		_main
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text12
  4996  002C9C                     __ptext12:
  4997                           	opt stack 0
  4998  002C9C                     _logRun:
  4999                           	opt stack 19
  5000                           
  5001                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5002                           
  5003                           ;incstack = 0
  5004  002C9C  0E00               	movlw	0
  5005  002C9E  0100               	movlb	0	; () banked
  5006  002CA0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5007  002CA2  0E00               	movlw	0
  5008  002CA4  6F80               	movwf	EEPROM_read@address& (0+255),b
  5009  002CA6  EC48  F022         	call	_EEPROM_read	;wreg free
  5010  002CAA  0100               	movlb	0	; () banked
  5011  002CAC  6FFD               	movwf	_sel& (0+255),b
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5015  002CAE  0100               	movlb	0	; () banked
  5016  002CB0  51FD               	movf	_sel& (0+255),w,b
  5017  002CB2  0D0B               	mullw	11
  5018  002CB4  0E01               	movlw	1
  5019  002CB6  24F3               	addwf	prodl,w,c
  5020  002CB8  0100               	movlb	0	; () banked
  5021  002CBA  6FB9               	movwf	logRun@addr& (0+255),b
  5022  002CBC  0E00               	movlw	0
  5023  002CBE  20F4               	addwfc	prodh,w,c
  5024  002CC0  0100               	movlb	0	; () banked
  5025  002CC2  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;EEPROM.c: 101: if (sel < 3){
  5029  002CC4  0E03               	movlw	3
  5030  002CC6  0100               	movlb	0	; () banked
  5031  002CC8  61FD               	cpfslt	_sel& (0+255),b
  5032  002CCA  D00E               	goto	l7712
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5036  002CCC  0100               	movlb	0	; () banked
  5037  002CCE  29FD               	incf	_sel& (0+255),w,b
  5038  002CD0  0100               	movlb	0	; () banked
  5039  002CD2  6FB1               	movwf	logRun@num& (0+255),b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5043  002CD4  0E00               	movlw	0
  5044  002CD6  0100               	movlb	0	; () banked
  5045  002CD8  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5046  002CDA  0E00               	movlw	0
  5047  002CDC  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5048  002CDE  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5049  002CE2  EC07  F019         	call	_EEPROM_write	;wreg free
  5050                           
  5051                           ;EEPROM.c: 104: }
  5052  002CE6  D00A               	goto	l7714
  5053  002CE8                     l7712:
  5054                           
  5055                           ;EEPROM.c: 105: else{
  5056                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5057  002CE8  0E00               	movlw	0
  5058  002CEA  0100               	movlb	0	; () banked
  5059  002CEC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5060  002CEE  0E00               	movlw	0
  5061  002CF0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5062  002CF2  0E00               	movlw	0
  5063  002CF4  0100               	movlb	0	; () banked
  5064  002CF6  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5065  002CF8  EC07  F019         	call	_EEPROM_write	;wreg free
  5066  002CFC                     l7714:
  5067                           
  5068                           ;EEPROM.c: 107: }
  5069                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5070  002CFC  0100               	movlb	0	; () banked
  5071  002CFE  51FE               	movf	_count_total& (0+255),w,b
  5072  002D00  0980               	iorlw	128
  5073  002D02  0100               	movlb	0	; () banked
  5074  002D04  6FB2               	movwf	logRun@byte1& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5078  002D06  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5079  002D0A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5080  002D0E  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5081  002D12  EC07  F019         	call	_EEPROM_write	;wreg free
  5082                           
  5083                           ;EEPROM.c: 112: addr++;
  5084  002D16  0100               	movlb	0	; () banked
  5085  002D18  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5086  002D1A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5090  002D1C  3861               	swapf	_count_pop_no_tab,w,c
  5091  002D1E  0BF0               	andlw	240
  5092  002D20  1063               	iorwf	_count_pop_w_tab,w,c
  5093  002D22  0100               	movlb	0	; () banked
  5094  002D24  6FB3               	movwf	logRun@byte2& (0+255),b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5098  002D26  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5099  002D2A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5100  002D2E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5101  002D32  EC07  F019         	call	_EEPROM_write	;wreg free
  5102                           
  5103                           ;EEPROM.c: 117: addr++;
  5104  002D36  0100               	movlb	0	; () banked
  5105  002D38  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5106  002D3A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5110  002D3C  385F               	swapf	_count_can_w_lab,w,c
  5111  002D3E  0BF0               	andlw	240
  5112  002D40  105D               	iorwf	_count_can_no_lab,w,c
  5113  002D42  0100               	movlb	0	; () banked
  5114  002D44  6FB4               	movwf	logRun@byte3& (0+255),b
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5118  002D46  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5119  002D4A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5120  002D4E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5121  002D52  EC07  F019         	call	_EEPROM_write	;wreg free
  5122                           
  5123                           ;EEPROM.c: 120: addr++;
  5124  002D56  0100               	movlb	0	; () banked
  5125  002D58  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5126  002D5A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5130  002D5C  0E00               	movlw	0
  5131  002D5E  0100               	movlb	0	; () banked
  5132  002D60  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5133  002D62  0E00               	movlw	0
  5134  002D64  6FB7               	movwf	logRun@i& (0+255),b
  5135                           
  5136                           ; BSR set to: 0
  5137  002D66  0100               	movlb	0	; () banked
  5138  002D68  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5139  002D6A  D008               	goto	l7738
  5140  002D6C  0100               	movlb	0	; () banked
  5141  002D6E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5142  002D70  E128               	bnz	l935
  5143  002D72  0E07               	movlw	7
  5144  002D74  0100               	movlb	0	; () banked
  5145  002D76  5DB7               	subwf	logRun@i& (0+255),w,b
  5146  002D78  B0D8               	btfsc	status,0,c
  5147  002D7A  D023               	goto	l935
  5148  002D7C                     l7738:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5152  002D7C  90D8               	bcf	status,0,c
  5153  002D7E  0100               	movlb	0	; () banked
  5154  002D80  35B7               	rlcf	logRun@i& (0+255),w,b
  5155  002D82  6ED9               	movwf	fsr2l,c
  5156  002D84  0100               	movlb	0	; () banked
  5157  002D86  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5158  002D88  6EDA               	movwf	fsr2h,c
  5159  002D8A  0E0E               	movlw	low _startTime
  5160  002D8C  26D9               	addwf	fsr2l,f,c
  5161  002D8E  0E01               	movlw	high _startTime
  5162  002D90  22DA               	addwfc	fsr2h,f,c
  5163  002D92  50DF               	movf	indf2,w,c
  5164  002D94  0100               	movlb	0	; () banked
  5165  002D96  6FB5               	movwf	logRun@byte_i& (0+255),b
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5169  002D98  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5170  002D9C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5171  002DA0  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5172  002DA4  EC07  F019         	call	_EEPROM_write	;wreg free
  5173                           
  5174                           ;EEPROM.c: 126: addr++;
  5175  002DA8  0100               	movlb	0	; () banked
  5176  002DAA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5177  002DAC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  002DAE  0100               	movlb	0	; () banked
  5181  002DB0  4BB7               	infsnz	logRun@i& (0+255),f,b
  5182  002DB2  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5183                           
  5184                           ; BSR set to: 0
  5185  002DB4  0100               	movlb	0	; () banked
  5186  002DB6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5187  002DB8  D7E1               	goto	l7738
  5188  002DBA  0100               	movlb	0	; () banked
  5189  002DBC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5190  002DBE  E101               	bnz	u6680
  5191  002DC0  D7D8               	goto	L5
  5192  002DC2                     u6680:
  5193  002DC2                     l935:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;EEPROM.c: 127: }
  5197                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5198  002DC2  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5202  002DC6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5203  002DCA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5204  002DCE  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5205  002DD2  EC07  F019         	call	_EEPROM_write	;wreg free
  5206  002DD6  0012               	return		;funcret
  5207  002DD8                     __end_of_logRun:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           intcon3	equ	0xFF0
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           postdec1	equ	0xFE5
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _EEPROM_write *****************
  5230 ;; Defined at:
  5231 ;;		line 32 in file "EEPROM.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  address         2   43[BANK0 ] unsigned short 
  5234 ;;  data            1   45[BANK0 ] unsigned char 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  i               1   48[BANK0 ] unsigned char 
  5237 ;;  i               1   47[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5247 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;Total ram usage:        6 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:   10
  5254 ;; This function calls:
  5255 ;;		_EEPROM_read
  5256 ;;		_lcdInst
  5257 ;;		_printf
  5258 ;; This function is called by:
  5259 ;;		_Loading
  5260 ;;		_logRun
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text13
  5265  00320E                     __ptext13:
  5266                           	opt stack 0
  5267  00320E                     _EEPROM_write:
  5268                           	opt stack 18
  5269                           
  5270                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5271                           
  5272                           ;incstack = 0
  5273  00320E  84A6               	bsf	4006,2,c	;volatile
  5274                           
  5275                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5276  003210  0100               	movlb	0	; () banked
  5277  003212  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5278  003214  6EAA               	movwf	4010,c	;volatile
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5282  003216  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;EEPROM.c: 39: EEDATA = data;
  5286  00321A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5290  00321E  9EA6               	bcf	4006,7,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5294  003220  9CA6               	bcf	4006,6,c	;volatile
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5298  003222  9EF2               	bcf	intcon,7,c	;volatile
  5299                           
  5300                           ;EEPROM.c: 45: EECON2 = 0x55;
  5301  003224  0E55               	movlw	85
  5302  003226  6EA7               	movwf	4007,c	;volatile
  5303                           
  5304                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5305  003228  0EAA               	movlw	170
  5306  00322A  6EA7               	movwf	4007,c	;volatile
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5310  00322C  82A6               	bsf	4006,1,c	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5314  00322E  8EF2               	bsf	intcon,7,c	;volatile
  5315  003230                     l913:
  5316  003230  A8A1               	btfss	4001,4,c	;volatile
  5317  003232  D7FE               	goto	l913
  5318                           
  5319                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5320  003234  98A1               	bcf	4001,4,c	;volatile
  5321                           
  5322                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5323  003236  94A6               	bcf	4006,2,c	;volatile
  5324                           
  5325                           ;EEPROM.c: 57: if(debug){
  5326  003238  0100               	movlb	0	; () banked
  5327  00323A  51E0               	movf	_debug& (0+255),w,b
  5328  00323C  0100               	movlb	0	; () banked
  5329  00323E  11E1               	iorwf	(_debug+1)& (0+255),w,b
  5330  003240  B4D8               	btfsc	status,2,c
  5331  003242  0012               	return	
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5335  003244  0E01               	movlw	1
  5336  003246  EC85  F022         	call	_lcdInst
  5337  00324A  0E68               	movlw	104
  5338  00324C  0100               	movlb	0	; () banked
  5339  00324E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5340  003250  0EE4               	movlw	228
  5341  003252                     u7067:
  5342  003252  2EE8               	decfsz	wreg,f,c
  5343  003254  D7FE               	bra	u7067
  5344  003256  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5345  003258  D7FC               	bra	u7067
  5346  00325A  F000               	nop	
  5347                           
  5348                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5349  00325C  0E80               	movlw	128
  5350  00325E  EC85  F022         	call	_lcdInst
  5351                           
  5352                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5353  003262  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5354  003266  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5355  00326A  EC48  F022         	call	_EEPROM_read	;wreg free
  5356  00326E  0100               	movlb	0	; () banked
  5357  003270  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5358  003272  A4D8               	btfss	status,2,c
  5359  003274  D024               	goto	l5900
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5363  003276  0E6C               	movlw	low STR_66
  5364  003278  0100               	movlb	0	; () banked
  5365  00327A  6F8E               	movwf	printf@f& (0+255),b
  5366  00327C  0EFB               	movlw	high STR_66
  5367  00327E  0100               	movlb	0	; () banked
  5368  003280  6F8F               	movwf	(printf@f+1)& (0+255),b
  5369  003282  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5370  003286  0100               	movlb	0	; () banked
  5371  003288  6B91               	clrf	(?_printf+3)& (0+255),b
  5372  00328A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5373  00328E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5374  003292  EC9C  F008         	call	_printf	;wreg free
  5375                           
  5376                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5377  003296  0E00               	movlw	0
  5378  003298  0100               	movlb	0	; () banked
  5379  00329A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5380  00329C                     l5892:
  5381                           
  5382                           ; BSR set to: 0
  5383  00329C  0E63               	movlw	99
  5384  00329E  0100               	movlb	0	; () banked
  5385  0032A0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5386  0032A2  D001               	goto	l5896
  5387  0032A4  0012               	return	
  5388  0032A6                     l5896:
  5389                           
  5390                           ; BSR set to: 0
  5391  0032A6  0E68               	movlw	104
  5392  0032A8  0100               	movlb	0	; () banked
  5393  0032AA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5394  0032AC  0EE4               	movlw	228
  5395  0032AE                     u7077:
  5396  0032AE  2EE8               	decfsz	wreg,f,c
  5397  0032B0  D7FE               	bra	u7077
  5398  0032B2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5399  0032B4  D7FC               	bra	u7077
  5400  0032B6  F000               	nop	
  5401  0032B8  0100               	movlb	0	; () banked
  5402  0032BA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5403  0032BC  D7EF               	goto	l5892
  5404  0032BE                     l5900:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5408  0032BE  0EBD               	movlw	low STR_67
  5409  0032C0  0100               	movlb	0	; () banked
  5410  0032C2  6F8E               	movwf	printf@f& (0+255),b
  5411  0032C4  0EFF               	movlw	high STR_67
  5412  0032C6  0100               	movlb	0	; () banked
  5413  0032C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5414  0032CA  EC9C  F008         	call	_printf	;wreg free
  5415  0032CE  0E00               	movlw	0
  5416  0032D0  0100               	movlb	0	; () banked
  5417  0032D2  6FB0               	movwf	EEPROM_write@i_1319& (0+255),b
  5418  0032D4                     l5904:
  5419                           
  5420                           ; BSR set to: 0
  5421  0032D4  0E63               	movlw	99
  5422  0032D6  0100               	movlb	0	; () banked
  5423  0032D8  65B0               	cpfsgt	EEPROM_write@i_1319& (0+255),b
  5424  0032DA  D001               	goto	l5908
  5425  0032DC  0012               	return	
  5426  0032DE                     l5908:
  5427                           
  5428                           ; BSR set to: 0
  5429  0032DE  0E68               	movlw	104
  5430  0032E0  0100               	movlb	0	; () banked
  5431  0032E2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5432  0032E4  0EE4               	movlw	228
  5433  0032E6                     u7087:
  5434  0032E6  2EE8               	decfsz	wreg,f,c
  5435  0032E8  D7FE               	bra	u7087
  5436  0032EA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5437  0032EC  D7FC               	bra	u7087
  5438  0032EE  F000               	nop	
  5439  0032F0  0100               	movlb	0	; () banked
  5440  0032F2  2BB0               	incf	EEPROM_write@i_1319& (0+255),f,b
  5441  0032F4  D7EF               	goto	l5904
  5442  0032F6                     __end_of_EEPROM_write:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           intcon2	equ	0xFF1
  5452                           intcon3	equ	0xFF0
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec1	equ	0xFE5
  5456                           fsr1l	equ	0xFE1
  5457                           indf2	equ	0xFDF
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function _EEPROM_read *****************
  5465 ;; Defined at:
  5466 ;;		line 68 in file "EEPROM.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  address         2    0[BANK0 ] unsigned short 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      unsigned char 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    7
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_Loading
  5491 ;;		_EEPROM_write
  5492 ;;		_logRun
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text14
  5497  004490                     __ptext14:
  5498                           	opt stack 0
  5499  004490                     _EEPROM_read:
  5500                           	opt stack 20
  5501                           
  5502                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;incstack = 0
  5506  004490  0100               	movlb	0	; () banked
  5507  004492  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5508  004494  6EAA               	movwf	4010,c	;volatile
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5512  004496  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5516  00449A  9EA6               	bcf	4006,7,c	;volatile
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5520  00449C  9CA6               	bcf	4006,6,c	;volatile
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5524  00449E  80A6               	bsf	4006,0,c	;volatile
  5525  0044A0                     l926:
  5526  0044A0  B0A6               	btfsc	4006,0,c	;volatile
  5527  0044A2  D7FE               	goto	l926
  5528                           
  5529                           ;EEPROM.c: 81: return EEDATA;
  5530  0044A4  50A8               	movf	4008,w,c	;volatile
  5531  0044A6  0012               	return	
  5532  0044A8                     __end_of_EEPROM_read:
  5533                           	opt stack 0
  5534                           tblptru	equ	0xFF8
  5535                           tblptrh	equ	0xFF7
  5536                           tblptrl	equ	0xFF6
  5537                           tablat	equ	0xFF5
  5538                           prodh	equ	0xFF4
  5539                           prodl	equ	0xFF3
  5540                           intcon	equ	0xFF2
  5541                           intcon2	equ	0xFF1
  5542                           intcon3	equ	0xFF0
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           postdec1	equ	0xFE5
  5546                           fsr1l	equ	0xFE1
  5547                           indf2	equ	0xFDF
  5548                           postinc2	equ	0xFDE
  5549                           postdec2	equ	0xFDD
  5550                           fsr2h	equ	0xFDA
  5551                           fsr2l	equ	0xFD9
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _initUI *****************
  5555 ;; Defined at:
  5556 ;;		line 62 in file "UI.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:   12
  5577 ;; This function calls:
  5578 ;;		_change_state_to_menu_start
  5579 ;;		_loadRTC
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text15
  5586  0043E6                     __ptext15:
  5587                           	opt stack 0
  5588  0043E6                     _initUI:
  5589                           	opt stack 18
  5590                           
  5591                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5592                           
  5593                           ;incstack = 0
  5594  0043E6  8EF2               	bsf	intcon,7,c	;volatile
  5595                           
  5596                           ;UI.c: 64: machine_state = UI_state;
  5597  0043E8  0E00               	movlw	0
  5598  0043EA  0100               	movlb	0	; () banked
  5599  0043EC  6FFC               	movwf	_machine_state& (0+255),b
  5600                           
  5601                           ;UI.c: 65: logstate = 0;
  5602  0043EE  0E00               	movlw	0
  5603  0043F0  0100               	movlb	0	; () banked
  5604  0043F2  6FF7               	movwf	(_logstate+1)& (0+255),b
  5605  0043F4  0E00               	movlw	0
  5606  0043F6  6FF6               	movwf	_logstate& (0+255),b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;UI.c: 67: loadRTC();
  5610  0043F8  EC94  F01B         	call	_loadRTC	;wreg free
  5611                           
  5612                           ;UI.c: 69: change_state_to_menu_start();
  5613  0043FC  EC64  F021         	call	_change_state_to_menu_start	;wreg free
  5614                           
  5615                           ;UI.c: 70: firstboot = 1;
  5616  004400  0E00               	movlw	0
  5617  004402  6E76               	movwf	_firstboot+1,c
  5618  004404  0E01               	movlw	1
  5619  004406  6E75               	movwf	_firstboot,c
  5620  004408  0012               	return		;funcret
  5621  00440A                     __end_of_initUI:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           intcon2	equ	0xFF1
  5631                           intcon3	equ	0xFF0
  5632                           postinc0	equ	0xFEE
  5633                           wreg	equ	0xFE8
  5634                           postdec1	equ	0xFE5
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           postinc2	equ	0xFDE
  5638                           postdec2	equ	0xFDD
  5639                           fsr2h	equ	0xFDA
  5640                           fsr2l	equ	0xFD9
  5641                           status	equ	0xFD8
  5642                           
  5643 ;; *************** function _loadRTC *****************
  5644 ;; Defined at:
  5645 ;;		line 28 in file "RTC.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;		None
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  i               2   22[BANK0 ] int 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      void 
  5652 ;; Registers used:
  5653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;Total ram usage:        3 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    9
  5666 ;; This function calls:
  5667 ;;		_I2C_Master_Init
  5668 ;;		_I2C_Master_Start
  5669 ;;		_I2C_Master_Stop
  5670 ;;		_I2C_Master_Write
  5671 ;; This function is called by:
  5672 ;;		_initUI
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text16
  5677  003728                     __ptext16:
  5678                           	opt stack 0
  5679  003728                     _loadRTC:
  5680                           	opt stack 20
  5681                           
  5682                           ;RTC.c: 30: I2C_Master_Init(10000);
  5683                           
  5684                           ;incstack = 0
  5685  003728  0E10               	movlw	16
  5686  00372A  0100               	movlb	0	; () banked
  5687  00372C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5688  00372E  0E27               	movlw	39
  5689  003730  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5690  003732  0E00               	movlw	0
  5691  003734  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5692  003736  0E00               	movlw	0
  5693  003738  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5694  00373A  ECEC  F01D         	call	_I2C_Master_Init	;wreg free
  5695                           
  5696                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5697  00373E  9EF2               	bcf	intcon,7,c	;volatile
  5698                           
  5699                           ;RTC.c: 34: I2C_Master_Start();
  5700  003740  ECAB  F022         	call	_I2C_Master_Start	;wreg free
  5701                           
  5702                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5703  003744  0E00               	movlw	0
  5704  003746  0100               	movlb	0	; () banked
  5705  003748  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5706  00374A  0ED0               	movlw	208
  5707  00374C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5708  00374E  EC99  F022         	call	_I2C_Master_Write	;wreg free
  5709                           
  5710                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5711  003752  0E00               	movlw	0
  5712  003754  0100               	movlb	0	; () banked
  5713  003756  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5714  003758  0E00               	movlw	0
  5715  00375A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5716  00375C  EC99  F022         	call	_I2C_Master_Write	;wreg free
  5717                           
  5718                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5719  003760  0E00               	movlw	0
  5720  003762  0100               	movlb	0	; () banked
  5721  003764  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5722  003766  0E00               	movlw	0
  5723  003768  6F96               	movwf	loadRTC@i& (0+255),b
  5724  00376A                     l6024:
  5725                           
  5726                           ; BSR set to: 0
  5727  00376A  0100               	movlb	0	; () banked
  5728  00376C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5729  00376E  D008               	goto	l6028
  5730  003770  0100               	movlb	0	; () banked
  5731  003772  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5732  003774  E11B               	bnz	l6034
  5733  003776  0E07               	movlw	7
  5734  003778  0100               	movlb	0	; () banked
  5735  00377A  5D96               	subwf	loadRTC@i& (0+255),w,b
  5736  00377C  B0D8               	btfsc	status,0,c
  5737  00377E  D016               	goto	l6034
  5738  003780                     l6028:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5742  003780  0E24               	movlw	low _time
  5743  003782  0100               	movlb	0	; () banked
  5744  003784  2596               	addwf	loadRTC@i& (0+255),w,b
  5745  003786  6ED9               	movwf	fsr2l,c
  5746  003788  0E01               	movlw	high _time
  5747  00378A  0100               	movlb	0	; () banked
  5748  00378C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5749  00378E  6EDA               	movwf	fsr2h,c
  5750  003790  50DF               	movf	indf2,w,c
  5751  003792  0100               	movlb	0	; () banked
  5752  003794  6F95               	movwf	??_loadRTC& (0+255),b
  5753  003796  0100               	movlb	0	; () banked
  5754  003798  5195               	movf	??_loadRTC& (0+255),w,b
  5755  00379A  0100               	movlb	0	; () banked
  5756  00379C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5757  00379E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5758  0037A0  EC99  F022         	call	_I2C_Master_Write	;wreg free
  5759  0037A4  0100               	movlb	0	; () banked
  5760  0037A6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5761  0037A8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5762  0037AA  D7DF               	goto	l6024
  5763  0037AC                     l6034:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;RTC.c: 39: }
  5767                           ;RTC.c: 40: I2C_Master_Stop();
  5768  0037AC  ECA7  F022         	call	_I2C_Master_Stop	;wreg free
  5769                           
  5770                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5771  0037B0  8EF2               	bsf	intcon,7,c	;volatile
  5772  0037B2  0012               	return		;funcret
  5773  0037B4                     __end_of_loadRTC:
  5774                           	opt stack 0
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           intcon	equ	0xFF2
  5782                           intcon2	equ	0xFF1
  5783                           intcon3	equ	0xFF0
  5784                           postinc0	equ	0xFEE
  5785                           wreg	equ	0xFE8
  5786                           postdec1	equ	0xFE5
  5787                           fsr1l	equ	0xFE1
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function _I2C_Master_Init *****************
  5796 ;; Defined at:
  5797 ;;		line 15 in file "I2C.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  c               4   13[BANK0 ] const unsigned long 
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2, status,0, cstack
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;Total ram usage:        8 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    8
  5818 ;; This function calls:
  5819 ;;		___lldiv
  5820 ;; This function is called by:
  5821 ;;		_loadRTC
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           	psect	text17
  5826  003BD8                     __ptext17:
  5827                           	opt stack 0
  5828  003BD8                     _I2C_Master_Init:
  5829                           	opt stack 20
  5830                           
  5831                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5832                           
  5833                           ;incstack = 0
  5834  003BD8  0E00               	movlw	0
  5835  003BDA  6EC7               	movwf	4039,c	;volatile
  5836                           
  5837                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5838  003BDC  0E28               	movlw	40
  5839  003BDE  6EC6               	movwf	4038,c	;volatile
  5840                           
  5841                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5842  003BE0  0E00               	movlw	0
  5843  003BE2  6EC5               	movwf	4037,c	;volatile
  5844                           
  5845                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5846  003BE4  0E00               	movlw	0
  5847  003BE6  0100               	movlb	0	; () banked
  5848  003BE8  6F80               	movwf	___lldiv@dividend& (0+255),b
  5849  003BEA  0E48               	movlw	72
  5850  003BEC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5851  003BEE  0EE8               	movlw	232
  5852  003BF0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5853  003BF2  0E01               	movlw	1
  5854  003BF4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5855  003BF6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5856  003BFA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5857  003BFE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5858  003C02  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5859  003C06  0E02               	movlw	2
  5860  003C08                     u4375:
  5861  003C08  90D8               	bcf	status,0,c
  5862  003C0A  0100               	movlb	0	; () banked
  5863  003C0C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5864  003C0E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5865  003C10  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5866  003C12  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5867  003C14  2EE8               	decfsz	wreg,f,c
  5868  003C16  D7F8               	goto	u4375
  5869  003C18  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5870  003C1C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5871  003C20  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5872  003C24  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5873  003C28  EC45  F01A         	call	___lldiv	;wreg free
  5874  003C2C  0100               	movlb	0	; () banked
  5875  003C2E  0580               	decf	?___lldiv& (0+255),w,b
  5876  003C30  6EC8               	movwf	4040,c	;volatile
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;I2C.c: 22: TRISC3 = 1;
  5880  003C32  8694               	bsf	3988,3,c	;volatile
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;I2C.c: 23: TRISC4 = 1;
  5884  003C34  8894               	bsf	3988,4,c	;volatile
  5885                           
  5886                           ; BSR set to: 0
  5887  003C36  0012               	return		;funcret
  5888  003C38                     __end_of_I2C_Master_Init:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           intcon2	equ	0xFF1
  5898                           intcon3	equ	0xFF0
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           postdec1	equ	0xFE5
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           postinc2	equ	0xFDE
  5905                           postdec2	equ	0xFDD
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function ___lldiv *****************
  5911 ;; Defined at:
  5912 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  dividend        4    0[BANK0 ] unsigned long 
  5915 ;;  divisor         4    4[BANK0 ] unsigned long 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  quotient        4    8[BANK0 ] unsigned long 
  5918 ;;  counter         1   12[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  4    0[BANK0 ] unsigned long 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5928 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:       13 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    7
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_I2C_Master_Init
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text18
  5943  00348A                     __ptext18:
  5944                           	opt stack 0
  5945  00348A                     ___lldiv:
  5946                           	opt stack 20
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;incstack = 0
  5950  00348A  0E00               	movlw	0
  5951  00348C  0100               	movlb	0	; () banked
  5952  00348E  6F88               	movwf	___lldiv@quotient& (0+255),b
  5953  003490  0E00               	movlw	0
  5954  003492  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5955  003494  0E00               	movlw	0
  5956  003496  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5957  003498  0E00               	movlw	0
  5958  00349A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5959                           
  5960                           ; BSR set to: 0
  5961  00349C  0100               	movlb	0	; () banked
  5962  00349E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5963  0034A0  0100               	movlb	0	; () banked
  5964  0034A2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5965  0034A4  0100               	movlb	0	; () banked
  5966  0034A6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5967  0034A8  0100               	movlb	0	; () banked
  5968  0034AA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5969  0034AC  B4D8               	btfsc	status,2,c
  5970  0034AE  D042               	goto	l1618
  5971                           
  5972                           ; BSR set to: 0
  5973  0034B0  0E01               	movlw	1
  5974  0034B2  0100               	movlb	0	; () banked
  5975  0034B4  6F8C               	movwf	___lldiv@counter& (0+255),b
  5976  0034B6  D008               	goto	l5464
  5977  0034B8                     l5462:
  5978                           
  5979                           ; BSR set to: 0
  5980  0034B8  0100               	movlb	0	; () banked
  5981  0034BA  90D8               	bcf	status,0,c
  5982  0034BC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5983  0034BE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5984  0034C0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5985  0034C2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5986  0034C4  0100               	movlb	0	; () banked
  5987  0034C6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5988  0034C8                     l5464:
  5989                           
  5990                           ; BSR set to: 0
  5991  0034C8  0100               	movlb	0	; () banked
  5992  0034CA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5993  0034CC  D7F5               	goto	l5462
  5994  0034CE                     l5466:
  5995                           
  5996                           ; BSR set to: 0
  5997  0034CE  0100               	movlb	0	; () banked
  5998  0034D0  90D8               	bcf	status,0,c
  5999  0034D2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6000  0034D4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6001  0034D6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6002  0034D8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6003                           
  6004                           ; BSR set to: 0
  6005  0034DA  0100               	movlb	0	; () banked
  6006  0034DC  5184               	movf	___lldiv@divisor& (0+255),w,b
  6007  0034DE  0100               	movlb	0	; () banked
  6008  0034E0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6009  0034E2  0100               	movlb	0	; () banked
  6010  0034E4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6011  0034E6  0100               	movlb	0	; () banked
  6012  0034E8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6013  0034EA  0100               	movlb	0	; () banked
  6014  0034EC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6015  0034EE  0100               	movlb	0	; () banked
  6016  0034F0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6017  0034F2  0100               	movlb	0	; () banked
  6018  0034F4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6019  0034F6  0100               	movlb	0	; () banked
  6020  0034F8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6021  0034FA  A0D8               	btfss	status,0,c
  6022  0034FC  D012               	goto	l5474
  6023                           
  6024                           ; BSR set to: 0
  6025  0034FE  0100               	movlb	0	; () banked
  6026  003500  5184               	movf	___lldiv@divisor& (0+255),w,b
  6027  003502  0100               	movlb	0	; () banked
  6028  003504  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6029  003506  0100               	movlb	0	; () banked
  6030  003508  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6031  00350A  0100               	movlb	0	; () banked
  6032  00350C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6033  00350E  0100               	movlb	0	; () banked
  6034  003510  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6035  003512  0100               	movlb	0	; () banked
  6036  003514  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6037  003516  0100               	movlb	0	; () banked
  6038  003518  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6039  00351A  0100               	movlb	0	; () banked
  6040  00351C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6041                           
  6042                           ; BSR set to: 0
  6043  00351E  0100               	movlb	0	; () banked
  6044  003520  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6045  003522                     l5474:
  6046                           
  6047                           ; BSR set to: 0
  6048  003522  0100               	movlb	0	; () banked
  6049  003524  90D8               	bcf	status,0,c
  6050  003526  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6051  003528  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6052  00352A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6053  00352C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6054                           
  6055                           ; BSR set to: 0
  6056  00352E  0100               	movlb	0	; () banked
  6057  003530  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6058  003532  D7CD               	goto	l5466
  6059  003534                     l1618:
  6060                           
  6061                           ; BSR set to: 0
  6062  003534  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6063  003538  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6064  00353C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6065  003540  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6066                           
  6067                           ; BSR set to: 0
  6068  003544  0012               	return		;funcret
  6069  003546                     __end_of___lldiv:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           intcon3	equ	0xFF0
  6080                           postinc0	equ	0xFEE
  6081                           wreg	equ	0xFE8
  6082                           postdec1	equ	0xFE5
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _change_state_to_menu_start *****************
  6092 ;; Defined at:
  6093 ;;		line 472 in file "UI.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:   11
  6114 ;; This function calls:
  6115 ;;		_lcdInst
  6116 ;;		_printRTC
  6117 ;;		_printf
  6118 ;; This function is called by:
  6119 ;;		_initUI
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text19
  6124  0042C8                     __ptext19:
  6125                           	opt stack 0
  6126  0042C8                     _change_state_to_menu_start:
  6127                           	opt stack 18
  6128                           
  6129                           ;UI.c: 473: cur_state = 0;
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;incstack = 0
  6133  0042C8  0E00               	movlw	0
  6134  0042CA  0100               	movlb	0	; () banked
  6135  0042CC  6FDF               	movwf	(_cur_state+1)& (0+255),b
  6136  0042CE  0E00               	movlw	0
  6137  0042D0  6FDE               	movwf	_cur_state& (0+255),b
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;UI.c: 475: lcdInst(0b10000000);;
  6141  0042D2  0E80               	movlw	128
  6142  0042D4  EC85  F022         	call	_lcdInst
  6143                           
  6144                           ;UI.c: 476: printRTC();
  6145  0042D8  EC63  F00E         	call	_printRTC	;wreg free
  6146                           
  6147                           ;UI.c: 477: lcdInst(0b11000000);;
  6148  0042DC  0EC0               	movlw	192
  6149  0042DE  EC85  F022         	call	_lcdInst
  6150                           
  6151                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  6152  0042E2  0E20               	movlw	low STR_30
  6153  0042E4  0100               	movlb	0	; () banked
  6154  0042E6  6F8E               	movwf	printf@f& (0+255),b
  6155  0042E8  0EFE               	movlw	high STR_30
  6156  0042EA  0100               	movlb	0	; () banked
  6157  0042EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6158  0042EE  EC9C  F008         	call	_printf	;wreg free
  6159  0042F2  0012               	return		;funcret
  6160  0042F4                     __end_of_change_state_to_menu_start:
  6161                           	opt stack 0
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           intcon2	equ	0xFF1
  6170                           intcon3	equ	0xFF0
  6171                           postinc0	equ	0xFEE
  6172                           wreg	equ	0xFE8
  6173                           postdec1	equ	0xFE5
  6174                           fsr1l	equ	0xFE1
  6175                           indf2	equ	0xFDF
  6176                           postinc2	equ	0xFDE
  6177                           postdec2	equ	0xFDD
  6178                           fsr2h	equ	0xFDA
  6179                           fsr2l	equ	0xFD9
  6180                           status	equ	0xFD8
  6181                           
  6182 ;; *************** function _initTime *****************
  6183 ;; Defined at:
  6184 ;;		line 17 in file "RTC.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;  s               1    wreg     unsigned char 
  6187 ;;  m               1    0[BANK0 ] unsigned char 
  6188 ;;  h               1    1[BANK0 ] unsigned char 
  6189 ;;  w               1    2[BANK0 ] unsigned char 
  6190 ;;  DD              1    3[BANK0 ] unsigned char 
  6191 ;;  MM              1    4[BANK0 ] unsigned char 
  6192 ;;  YY              1    5[BANK0 ] unsigned char 
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;  s               1    6[BANK0 ] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      void 
  6197 ;; Registers used:
  6198 ;;		wreg
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;Total ram usage:        7 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    7
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text20
  6219  004450                     __ptext20:
  6220                           	opt stack 0
  6221  004450                     _initTime:
  6222                           	opt stack 23
  6223                           
  6224                           ;incstack = 0
  6225                           ;initTime@s stored from wreg
  6226  004450  0100               	movlb	0	; () banked
  6227  004452  6F86               	movwf	initTime@s& (0+255),b
  6228                           
  6229                           ;RTC.c: 19: time[0] = s;
  6230  004454  C086  F124         	movff	initTime@s,_time
  6231                           
  6232                           ;RTC.c: 20: time[1] = m;
  6233  004458  C080  F125         	movff	initTime@m,_time+1
  6234                           
  6235                           ;RTC.c: 21: time[2] = h;
  6236  00445C  C081  F126         	movff	initTime@h,_time+2
  6237                           
  6238                           ;RTC.c: 22: time[3] = w;
  6239  004460  C082  F127         	movff	initTime@w,_time+3
  6240                           
  6241                           ;RTC.c: 23: time[4] = DD;
  6242  004464  C083  F128         	movff	initTime@DD,_time+4
  6243                           
  6244                           ;RTC.c: 24: time[5] = MM;
  6245  004468  C084  F129         	movff	initTime@MM,_time+5
  6246                           
  6247                           ;RTC.c: 25: time[6] = YY;
  6248  00446C  C085  F12A         	movff	initTime@YY,_time+6
  6249  004470  0012               	return		;funcret
  6250  004472                     __end_of_initTime:
  6251                           	opt stack 0
  6252                           tblptru	equ	0xFF8
  6253                           tblptrh	equ	0xFF7
  6254                           tblptrl	equ	0xFF6
  6255                           tablat	equ	0xFF5
  6256                           prodh	equ	0xFF4
  6257                           prodl	equ	0xFF3
  6258                           intcon	equ	0xFF2
  6259                           intcon2	equ	0xFF1
  6260                           intcon3	equ	0xFF0
  6261                           postinc0	equ	0xFEE
  6262                           wreg	equ	0xFE8
  6263                           postdec1	equ	0xFE5
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _initLCD *****************
  6273 ;; Defined at:
  6274 ;;		line 48 in file "lcd.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;		None
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;		None
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  1    wreg      void 
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;Total ram usage:        1 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    9
  6295 ;; This function calls:
  6296 ;;		_lcdInst
  6297 ;; This function is called by:
  6298 ;;		_main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text21
  6303  003F26                     __ptext21:
  6304                           	opt stack 0
  6305  003F26                     _initLCD:
  6306                           	opt stack 21
  6307                           
  6308                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6309                           
  6310                           ;incstack = 0
  6311  003F26  0E9C               	movlw	156
  6312  003F28  0100               	movlb	0	; () banked
  6313  003F2A  6F83               	movwf	??_initLCD& (0+255),b
  6314  003F2C  0ED7               	movlw	215
  6315  003F2E                     u7097:
  6316  003F2E  2EE8               	decfsz	wreg,f,c
  6317  003F30  D7FE               	bra	u7097
  6318  003F32  2F83               	decfsz	??_initLCD& (0+255),f,b
  6319  003F34  D7FC               	bra	u7097
  6320                           
  6321                           ;lcd.c: 50: lcdInst(0b00110011);
  6322  003F36  0E33               	movlw	51
  6323  003F38  EC85  F022         	call	_lcdInst
  6324                           
  6325                           ;lcd.c: 51: lcdInst(0b00110010);
  6326  003F3C  0E32               	movlw	50
  6327  003F3E  EC85  F022         	call	_lcdInst
  6328                           
  6329                           ;lcd.c: 53: lcdInst(0b00101000);
  6330  003F42  0E28               	movlw	40
  6331  003F44  EC85  F022         	call	_lcdInst
  6332                           
  6333                           ;lcd.c: 54: lcdInst(0b00001100);
  6334  003F48  0E0C               	movlw	12
  6335  003F4A  EC85  F022         	call	_lcdInst
  6336                           
  6337                           ;lcd.c: 55: lcdInst(0b00000110);
  6338  003F4E  0E06               	movlw	6
  6339  003F50  EC85  F022         	call	_lcdInst
  6340                           
  6341                           ;lcd.c: 56: lcdInst(0b00000001);
  6342  003F54  0E01               	movlw	1
  6343  003F56  EC85  F022         	call	_lcdInst
  6344                           
  6345                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6346  003F5A  0E9C               	movlw	156
  6347  003F5C  0100               	movlb	0	; () banked
  6348  003F5E  6F83               	movwf	??_initLCD& (0+255),b
  6349  003F60  0ED7               	movlw	215
  6350  003F62                     u7107:
  6351  003F62  2EE8               	decfsz	wreg,f,c
  6352  003F64  D7FE               	bra	u7107
  6353  003F66  2F83               	decfsz	??_initLCD& (0+255),f,b
  6354  003F68  D7FC               	bra	u7107
  6355  003F6A  0012               	return		;funcret
  6356  003F6C                     __end_of_initLCD:
  6357                           	opt stack 0
  6358                           tblptru	equ	0xFF8
  6359                           tblptrh	equ	0xFF7
  6360                           tblptrl	equ	0xFF6
  6361                           tablat	equ	0xFF5
  6362                           prodh	equ	0xFF4
  6363                           prodl	equ	0xFF3
  6364                           intcon	equ	0xFF2
  6365                           intcon2	equ	0xFF1
  6366                           intcon3	equ	0xFF0
  6367                           postinc0	equ	0xFEE
  6368                           wreg	equ	0xFE8
  6369                           postdec1	equ	0xFE5
  6370                           fsr1l	equ	0xFE1
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _UI *****************
  6379 ;; Defined at:
  6380 ;;		line 74 in file "UI.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  i               1   73[BANK0 ] unsigned char 
  6385 ;;  i               1   85[BANK0 ] unsigned char 
  6386 ;;  i               1   84[BANK0 ] unsigned char 
  6387 ;;  i               1   83[BANK0 ] unsigned char 
  6388 ;;  i               1   82[BANK0 ] unsigned char 
  6389 ;;  i               1   81[BANK0 ] unsigned char 
  6390 ;;  i               1   80[BANK0 ] unsigned char 
  6391 ;;  i               1   79[BANK0 ] unsigned char 
  6392 ;;  i               1   78[BANK0 ] unsigned char 
  6393 ;;  i               1   77[BANK0 ] unsigned char 
  6394 ;;  i               1   76[BANK0 ] unsigned char 
  6395 ;;  i               1   75[BANK0 ] unsigned char 
  6396 ;;  i               1   74[BANK0 ] unsigned char 
  6397 ;;  month           4   86[BANK0 ] unsigned char [4]
  6398 ;;  i               1   72[BANK0 ] unsigned char 
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  1    wreg      void 
  6401 ;; Registers used:
  6402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:       22 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:   11
  6415 ;; This function calls:
  6416 ;;		___awdiv
  6417 ;;		___awmod
  6418 ;;		_change_state_to_menu_12
  6419 ;;		_change_state_to_menu_22
  6420 ;;		_lcdInst
  6421 ;;		_printRTC
  6422 ;;		_printf
  6423 ;;		_strcpy
  6424 ;; This function is called by:
  6425 ;;		_main
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text22
  6430  000012                     __ptext22:
  6431                           	opt stack 0
  6432  000012                     _UI:
  6433                           	opt stack 19
  6434                           
  6435                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6436                           
  6437                           ;incstack = 0
  6438  000012  0E02               	movlw	2
  6439  000014  0100               	movlb	0	; () banked
  6440  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  6441  000018  A4D8               	btfss	status,2,c
  6442  00001A  D075               	goto	l7140
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6446  00001C  0E01               	movlw	1
  6447  00001E  EC85  F022         	call	_lcdInst
  6448  000022  0E68               	movlw	104
  6449  000024  0100               	movlb	0	; () banked
  6450  000026  6FC4               	movwf	??_UI& (0+255),b
  6451  000028  0EE4               	movlw	228
  6452  00002A                     u7117:
  6453  00002A  2EE8               	decfsz	wreg,f,c
  6454  00002C  D7FE               	bra	u7117
  6455  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  6456  000030  D7FC               	bra	u7117
  6457  000032  F000               	nop	
  6458                           
  6459                           ;UI.c: 77: lcdInst(0b10000000);;
  6460  000034  0E80               	movlw	128
  6461  000036  EC85  F022         	call	_lcdInst
  6462                           
  6463                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6464  00003A  0EDD               	movlw	low STR_1
  6465  00003C  0100               	movlb	0	; () banked
  6466  00003E  6F8E               	movwf	printf@f& (0+255),b
  6467  000040  0EFB               	movlw	high STR_1
  6468  000042  0100               	movlb	0	; () banked
  6469  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  6470  000046  0E01               	movlw	1
  6471  000048  0100               	movlb	0	; () banked
  6472  00004A  25FD               	addwf	_sel& (0+255),w,b
  6473  00004C  0100               	movlb	0	; () banked
  6474  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  6475  000050  0100               	movlb	0	; () banked
  6476  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  6477  000054  0E00               	movlw	0
  6478  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6479  000058  EC9C  F008         	call	_printf	;wreg free
  6480                           
  6481                           ;UI.c: 79: lcdInst(0b11000000);;
  6482  00005C  0EC0               	movlw	192
  6483  00005E  EC85  F022         	call	_lcdInst
  6484                           
  6485                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6486  000062  0E0E               	movlw	14
  6487  000064  0100               	movlb	0	; () banked
  6488  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6489  000068  0E10               	movlw	16
  6490  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6491  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6492  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6493  000074  ECF8  F01A         	call	___awmod	;wreg free
  6494  000078  C080  F0C6         	movff	?___awmod,_UI$2234
  6495  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2234+1
  6496                           
  6497                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6498  000080  0E2E               	movlw	low STR_2
  6499  000082  0100               	movlb	0	; () banked
  6500  000084  6F8E               	movwf	printf@f& (0+255),b
  6501  000086  0EFF               	movlw	high STR_2
  6502  000088  0100               	movlb	0	; () banked
  6503  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6504  00008C  0E0E               	movlw	14
  6505  00008E  0100               	movlb	0	; () banked
  6506  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6507  000092  0E10               	movlw	16
  6508  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6509  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6510  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6511  00009E  ECF8  F01A         	call	___awmod	;wreg free
  6512  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6513  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6514  0000AA  0E00               	movlw	0
  6515  0000AC  0100               	movlb	0	; () banked
  6516  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6517  0000B0  0E3C               	movlw	60
  6518  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6519  0000B4  ECE6  F019         	call	___awdiv	;wreg free
  6520  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6521  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6522  0000C0  C0C6  F080         	movff	_UI$2234,___awmod@dividend
  6523  0000C4  C0C7  F081         	movff	_UI$2234+1,___awmod@dividend+1
  6524  0000C8  0E00               	movlw	0
  6525  0000CA  0100               	movlb	0	; () banked
  6526  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6527  0000CE  0E3C               	movlw	60
  6528  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6529  0000D2  ECF8  F01A         	call	___awmod	;wreg free
  6530  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6531  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6532  0000DE  EC9C  F008         	call	_printf	;wreg free
  6533                           
  6534                           ;UI.c: 81: machine_state = UI_state;
  6535  0000E2  0E00               	movlw	0
  6536  0000E4  0100               	movlb	0	; () banked
  6537  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6538  0000E8                     l177:
  6539  0000E8  A281               	btfss	3969,1,c	;volatile
  6540  0000EA  D7FE               	goto	l177
  6541                           
  6542                           ;UI.c: 84: }
  6543                           ;UI.c: 85: if(cur_state==12){
  6544  0000EC  0E0C               	movlw	12
  6545  0000EE  0100               	movlb	0	; () banked
  6546  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6547  0000F2  0100               	movlb	0	; () banked
  6548  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6549  0000F6  A4D8               	btfss	status,2,c
  6550  0000F8  D003               	goto	l7138
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;UI.c: 86: change_state_to_menu_12();
  6554  0000FA  ECF3  F01F         	call	_change_state_to_menu_12	;wreg free
  6555                           
  6556                           ;UI.c: 87: }
  6557  0000FE  D3D5               	goto	l7460
  6558  000100                     l7138:
  6559                           
  6560                           ;UI.c: 88: else{
  6561                           ;UI.c: 89: change_state_to_menu_22();
  6562  000100  ECD7  F01F         	call	_change_state_to_menu_22	;wreg free
  6563                           
  6564                           ;UI.c: 90: }
  6565                           ;UI.c: 91: }
  6566  000104  D3D2               	goto	l7460
  6567  000106                     l7140:
  6568                           
  6569                           ;UI.c: 92: else if(cur_state == 0){
  6570  000106  0100               	movlb	0	; () banked
  6571  000108  51DE               	movf	_cur_state& (0+255),w,b
  6572  00010A  0100               	movlb	0	; () banked
  6573  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6574  00010E  A4D8               	btfss	status,2,c
  6575  000110  D3CC               	goto	l7460
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6579  000112  0E00               	movlw	0
  6580  000114  0100               	movlb	0	; () banked
  6581  000116  6FC8               	movwf	UI@i& (0+255),b
  6582  000118                     l7144:
  6583                           
  6584                           ; BSR set to: 0
  6585  000118  0E63               	movlw	99
  6586  00011A  0100               	movlb	0	; () banked
  6587  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6588  00011E  D001               	goto	l7148
  6589  000120  D00C               	goto	l7152
  6590  000122                     l7148:
  6591                           
  6592                           ; BSR set to: 0
  6593  000122  0E68               	movlw	104
  6594  000124  0100               	movlb	0	; () banked
  6595  000126  6FC4               	movwf	??_UI& (0+255),b
  6596  000128  0EE4               	movlw	228
  6597  00012A                     u7127:
  6598  00012A  2EE8               	decfsz	wreg,f,c
  6599  00012C  D7FE               	bra	u7127
  6600  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6601  000130  D7FC               	bra	u7127
  6602  000132  F000               	nop	
  6603  000134  0100               	movlb	0	; () banked
  6604  000136  2BC8               	incf	UI@i& (0+255),f,b
  6605  000138  D7EF               	goto	l7144
  6606  00013A                     l7152:
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;UI.c: 94: if(cur_state == 0){
  6610  00013A  0100               	movlb	0	; () banked
  6611  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6612  00013E  0100               	movlb	0	; () banked
  6613  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6614  000142  A4D8               	btfss	status,2,c
  6615  000144  D3B2               	goto	l7460
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;UI.c: 95: printRTC();
  6619  000146  EC63  F00E         	call	_printRTC	;wreg free
  6620                           
  6621                           ;UI.c: 96: }
  6622                           ;UI.c: 97: }
  6623                           ;UI.c: 98: while(logstate){
  6624  00014A  D3AF               	goto	l7460
  6625  00014C                     l7156:
  6626                           
  6627                           ;UI.c: 100: if(!log_completion){
  6628  00014C  0100               	movlb	0	; () banked
  6629  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6630  000150  0100               	movlb	0	; () banked
  6631  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6632  000154  A4D8               	btfss	status,2,c
  6633  000156  D041               	goto	l7186
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6637  000158  0E01               	movlw	1
  6638  00015A  EC85  F022         	call	_lcdInst
  6639  00015E  0E68               	movlw	104
  6640  000160  0100               	movlb	0	; () banked
  6641  000162  6FC4               	movwf	??_UI& (0+255),b
  6642  000164  0EE4               	movlw	228
  6643  000166                     u7137:
  6644  000166  2EE8               	decfsz	wreg,f,c
  6645  000168  D7FE               	bra	u7137
  6646  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6647  00016C  D7FC               	bra	u7137
  6648  00016E  F000               	nop	
  6649                           
  6650                           ;UI.c: 102: lcdInst(0b10000000);;
  6651  000170  0E80               	movlw	128
  6652  000172  EC85  F022         	call	_lcdInst
  6653                           
  6654                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6655  000176  0ECB               	movlw	low STR_3
  6656  000178  0100               	movlb	0	; () banked
  6657  00017A  6F8E               	movwf	printf@f& (0+255),b
  6658  00017C  0EFB               	movlw	high STR_3
  6659  00017E  0100               	movlb	0	; () banked
  6660  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6661  000182  C0E6  F090         	movff	_log,?_printf+2
  6662  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6663  00018A  EC9C  F008         	call	_printf	;wreg free
  6664                           
  6665                           ;UI.c: 104: lcdInst(0b11000000);;
  6666  00018E  0EC0               	movlw	192
  6667  000190  EC85  F022         	call	_lcdInst
  6668                           
  6669                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6670  000194  0E51               	movlw	low STR_4
  6671  000196  0100               	movlb	0	; () banked
  6672  000198  6F8E               	movwf	printf@f& (0+255),b
  6673  00019A  0EFE               	movlw	high STR_4
  6674  00019C  0100               	movlb	0	; () banked
  6675  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6676  0001A0  EC9C  F008         	call	_printf	;wreg free
  6677  0001A4                     l7170:
  6678  0001A4  0E00               	movlw	0
  6679  0001A6  0100               	movlb	0	; () banked
  6680  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6681  0001AA                     l7172:
  6682                           
  6683                           ; BSR set to: 0
  6684  0001AA  0E63               	movlw	99
  6685  0001AC  0100               	movlb	0	; () banked
  6686  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6687  0001B0  D001               	goto	l7176
  6688  0001B2  D00C               	goto	l7180
  6689  0001B4                     l7176:
  6690                           
  6691                           ; BSR set to: 0
  6692  0001B4  0E68               	movlw	104
  6693  0001B6  0100               	movlb	0	; () banked
  6694  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6695  0001BA  0EE4               	movlw	228
  6696  0001BC                     u7147:
  6697  0001BC  2EE8               	decfsz	wreg,f,c
  6698  0001BE  D7FE               	bra	u7147
  6699  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6700  0001C2  D7FC               	bra	u7147
  6701  0001C4  F000               	nop	
  6702  0001C6  0100               	movlb	0	; () banked
  6703  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6704  0001CA  D7EF               	goto	l7172
  6705  0001CC                     l7180:
  6706                           
  6707                           ; BSR set to: 0
  6708  0001CC  0100               	movlb	0	; () banked
  6709  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6710  0001D0  0100               	movlb	0	; () banked
  6711  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6712  0001D4  B4D8               	btfsc	status,2,c
  6713  0001D6  0012               	return	
  6714  0001D8  D7E5               	goto	l7170
  6715  0001DA                     l7186:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;UI.c: 109: else{
  6719                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6720  0001DA  0E01               	movlw	1
  6721  0001DC  EC85  F022         	call	_lcdInst
  6722  0001E0  0E68               	movlw	104
  6723  0001E2  0100               	movlb	0	; () banked
  6724  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6725  0001E6  0EE4               	movlw	228
  6726  0001E8                     u7157:
  6727  0001E8  2EE8               	decfsz	wreg,f,c
  6728  0001EA  D7FE               	bra	u7157
  6729  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6730  0001EE  D7FC               	bra	u7157
  6731  0001F0  F000               	nop	
  6732                           
  6733                           ;UI.c: 111: lcdInst(0b10000000);;
  6734  0001F2  0E80               	movlw	128
  6735  0001F4  EC85  F022         	call	_lcdInst
  6736                           
  6737                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6738  0001F8  0ECB               	movlw	low STR_3
  6739  0001FA  0100               	movlb	0	; () banked
  6740  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6741  0001FE  0EFB               	movlw	high STR_3
  6742  000200  0100               	movlb	0	; () banked
  6743  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6744  000204  C0E6  F090         	movff	_log,?_printf+2
  6745  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6746  00020C  EC9C  F008         	call	_printf	;wreg free
  6747                           
  6748                           ;UI.c: 113: lcdInst(0b11000000);;
  6749  000210  0EC0               	movlw	192
  6750  000212  EC85  F022         	call	_lcdInst
  6751                           
  6752                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6753  000216  0E0F               	movlw	low STR_6
  6754  000218  0100               	movlb	0	; () banked
  6755  00021A  6F8E               	movwf	printf@f& (0+255),b
  6756  00021C  0EFE               	movlw	high STR_6
  6757  00021E  0100               	movlb	0	; () banked
  6758  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6759  000222  EC9C  F008         	call	_printf	;wreg free
  6760                           
  6761                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6762  000226  0E00               	movlw	0
  6763  000228  0100               	movlb	0	; () banked
  6764  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6765  00022C                     l7200:
  6766                           
  6767                           ; BSR set to: 0
  6768  00022C  0E63               	movlw	99
  6769  00022E  0100               	movlb	0	; () banked
  6770  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6771  000232  D001               	goto	l7204
  6772  000234  D00C               	goto	l7208
  6773  000236                     l7204:
  6774                           
  6775                           ; BSR set to: 0
  6776  000236  0E68               	movlw	104
  6777  000238  0100               	movlb	0	; () banked
  6778  00023A  6FC4               	movwf	??_UI& (0+255),b
  6779  00023C  0EE4               	movlw	228
  6780  00023E                     u7167:
  6781  00023E  2EE8               	decfsz	wreg,f,c
  6782  000240  D7FE               	bra	u7167
  6783  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6784  000244  D7FC               	bra	u7167
  6785  000246  F000               	nop	
  6786  000248  0100               	movlb	0	; () banked
  6787  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6788  00024C  D7EF               	goto	l7200
  6789  00024E                     l7208:
  6790                           
  6791                           ; BSR set to: 0
  6792  00024E  0100               	movlb	0	; () banked
  6793  000250  51F6               	movf	_logstate& (0+255),w,b
  6794  000252  0100               	movlb	0	; () banked
  6795  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6796  000256  B4D8               	btfsc	status,2,c
  6797  000258  0012               	return	
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6801                           
  6802                           ; BSR set to: 0
  6803                           
  6804                           ; BSR set to: 0
  6805  00025A  0E00               	movlw	0
  6806  00025C  0100               	movlb	0	; () banked
  6807  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6808  000260                     l7214:
  6809                           
  6810                           ; BSR set to: 0
  6811  000260  0E63               	movlw	99
  6812  000262  0100               	movlb	0	; () banked
  6813  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6814  000266  D001               	goto	l7218
  6815  000268  D00C               	goto	l7222
  6816  00026A                     l7218:
  6817                           
  6818                           ; BSR set to: 0
  6819  00026A  0E68               	movlw	104
  6820  00026C  0100               	movlb	0	; () banked
  6821  00026E  6FC4               	movwf	??_UI& (0+255),b
  6822  000270  0EE4               	movlw	228
  6823  000272                     u7177:
  6824  000272  2EE8               	decfsz	wreg,f,c
  6825  000274  D7FE               	bra	u7177
  6826  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6827  000278  D7FC               	bra	u7177
  6828  00027A  F000               	nop	
  6829  00027C  0100               	movlb	0	; () banked
  6830  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6831  000280  D7EF               	goto	l7214
  6832  000282                     l7222:
  6833                           
  6834                           ; BSR set to: 0
  6835  000282  0100               	movlb	0	; () banked
  6836  000284  51F6               	movf	_logstate& (0+255),w,b
  6837  000286  0100               	movlb	0	; () banked
  6838  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6839  00028A  B4D8               	btfsc	status,2,c
  6840  00028C  0012               	return	
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6844                           
  6845                           ; BSR set to: 0
  6846                           
  6847                           ; BSR set to: 0
  6848  00028E  0E01               	movlw	1
  6849  000290  EC85  F022         	call	_lcdInst
  6850  000294  0E68               	movlw	104
  6851  000296  0100               	movlb	0	; () banked
  6852  000298  6FC4               	movwf	??_UI& (0+255),b
  6853  00029A  0EE4               	movlw	228
  6854  00029C                     u7187:
  6855  00029C  2EE8               	decfsz	wreg,f,c
  6856  00029E  D7FE               	bra	u7187
  6857  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6858  0002A2  D7FC               	bra	u7187
  6859  0002A4  F000               	nop	
  6860                           
  6861                           ;UI.c: 120: lcdInst(0b10000000);;
  6862  0002A6  0E80               	movlw	128
  6863  0002A8  EC85  F022         	call	_lcdInst
  6864                           
  6865                           ;UI.c: 121: printf("START:");
  6866  0002AC  0EC4               	movlw	low STR_7
  6867  0002AE  0100               	movlb	0	; () banked
  6868  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6869  0002B2  0EFF               	movlw	high STR_7
  6870  0002B4  0100               	movlb	0	; () banked
  6871  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6872  0002B8  EC9C  F008         	call	_printf	;wreg free
  6873                           
  6874                           ;UI.c: 122: lcdInst(0b11000000);;
  6875  0002BC  0EC0               	movlw	192
  6876  0002BE  EC85  F022         	call	_lcdInst
  6877                           
  6878                           ;UI.c: 123: char month[] = "MMM";
  6879  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6880  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6881  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6882  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6883                           
  6884                           ;UI.c: 124: switch(log_startTime[5]){
  6885  0002D2  D0C3               	goto	l7266
  6886  0002D4                     l7238:
  6887                           
  6888                           ;UI.c: 126: strcpy(month, "JAN");
  6889  0002D4  0ED6               	movlw	low UI@month
  6890  0002D6  0100               	movlb	0	; () banked
  6891  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6892  0002DA  0E00               	movlw	high UI@month
  6893  0002DC  0100               	movlb	0	; () banked
  6894  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6895  0002E0  0EDB               	movlw	low STR_8
  6896  0002E2  0100               	movlb	0	; () banked
  6897  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6898  0002E6  0EFF               	movlw	high STR_8
  6899  0002E8  0100               	movlb	0	; () banked
  6900  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6901  0002EC  EC0F  F020         	call	_strcpy	;wreg free
  6902                           
  6903                           ;UI.c: 127: break;
  6904  0002F0  D0E6               	goto	l7268
  6905  0002F2                     l7240:
  6906                           
  6907                           ;UI.c: 129: strcpy(month, "FEB");
  6908  0002F2  0ED6               	movlw	low UI@month
  6909  0002F4  0100               	movlb	0	; () banked
  6910  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6911  0002F8  0E00               	movlw	high UI@month
  6912  0002FA  0100               	movlb	0	; () banked
  6913  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6914  0002FE  0ECB               	movlw	low STR_9
  6915  000300  0100               	movlb	0	; () banked
  6916  000302  6F82               	movwf	strcpy@from& (0+255),b
  6917  000304  0EFF               	movlw	high STR_9
  6918  000306  0100               	movlb	0	; () banked
  6919  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6920  00030A  EC0F  F020         	call	_strcpy	;wreg free
  6921                           
  6922                           ;UI.c: 130: break;
  6923  00030E  D0D7               	goto	l7268
  6924  000310                     l7242:
  6925                           
  6926                           ;UI.c: 132: strcpy(month, "MAR");
  6927  000310  0ED6               	movlw	low UI@month
  6928  000312  0100               	movlb	0	; () banked
  6929  000314  6F80               	movwf	strcpy@to& (0+255),b
  6930  000316  0E00               	movlw	high UI@month
  6931  000318  0100               	movlb	0	; () banked
  6932  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6933  00031C  0EE7               	movlw	low STR_10
  6934  00031E  0100               	movlb	0	; () banked
  6935  000320  6F82               	movwf	strcpy@from& (0+255),b
  6936  000322  0EFF               	movlw	high STR_10
  6937  000324  0100               	movlb	0	; () banked
  6938  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6939  000328  EC0F  F020         	call	_strcpy	;wreg free
  6940                           
  6941                           ;UI.c: 133: break;
  6942  00032C  D0C8               	goto	l7268
  6943  00032E                     l7244:
  6944                           
  6945                           ;UI.c: 135: strcpy(month, "APR");
  6946  00032E  0ED6               	movlw	low UI@month
  6947  000330  0100               	movlb	0	; () banked
  6948  000332  6F80               	movwf	strcpy@to& (0+255),b
  6949  000334  0E00               	movlw	high UI@month
  6950  000336  0100               	movlb	0	; () banked
  6951  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6952  00033A  0EEB               	movlw	low STR_11
  6953  00033C  0100               	movlb	0	; () banked
  6954  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6955  000340  0EFF               	movlw	high STR_11
  6956  000342  0100               	movlb	0	; () banked
  6957  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6958  000346  EC0F  F020         	call	_strcpy	;wreg free
  6959                           
  6960                           ;UI.c: 136: break;
  6961  00034A  D0B9               	goto	l7268
  6962  00034C                     l7246:
  6963                           
  6964                           ;UI.c: 138: strcpy(month, "MAY");
  6965  00034C  0ED6               	movlw	low UI@month
  6966  00034E  0100               	movlb	0	; () banked
  6967  000350  6F80               	movwf	strcpy@to& (0+255),b
  6968  000352  0E00               	movlw	high UI@month
  6969  000354  0100               	movlb	0	; () banked
  6970  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6971  000358  0EFB               	movlw	low STR_12
  6972  00035A  0100               	movlb	0	; () banked
  6973  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6974  00035E  0EFF               	movlw	high STR_12
  6975  000360  0100               	movlb	0	; () banked
  6976  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6977  000364  EC0F  F020         	call	_strcpy	;wreg free
  6978                           
  6979                           ;UI.c: 139: break;
  6980  000368  D0AA               	goto	l7268
  6981  00036A                     l7248:
  6982                           
  6983                           ;UI.c: 141: strcpy(month, "JUN");
  6984  00036A  0ED6               	movlw	low UI@month
  6985  00036C  0100               	movlb	0	; () banked
  6986  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6987  000370  0E00               	movlw	high UI@month
  6988  000372  0100               	movlb	0	; () banked
  6989  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6990  000376  0EDF               	movlw	low STR_13
  6991  000378  0100               	movlb	0	; () banked
  6992  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6993  00037C  0EFF               	movlw	high STR_13
  6994  00037E  0100               	movlb	0	; () banked
  6995  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6996  000382  EC0F  F020         	call	_strcpy	;wreg free
  6997                           
  6998                           ;UI.c: 142: break;
  6999  000386  D09B               	goto	l7268
  7000  000388                     l7250:
  7001                           
  7002                           ;UI.c: 144: strcpy(month, "JUL");
  7003  000388  0ED6               	movlw	low UI@month
  7004  00038A  0100               	movlb	0	; () banked
  7005  00038C  6F80               	movwf	strcpy@to& (0+255),b
  7006  00038E  0E00               	movlw	high UI@month
  7007  000390  0100               	movlb	0	; () banked
  7008  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7009  000394  0ED7               	movlw	low STR_14
  7010  000396  0100               	movlb	0	; () banked
  7011  000398  6F82               	movwf	strcpy@from& (0+255),b
  7012  00039A  0EFF               	movlw	high STR_14
  7013  00039C  0100               	movlb	0	; () banked
  7014  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7015  0003A0  EC0F  F020         	call	_strcpy	;wreg free
  7016                           
  7017                           ;UI.c: 145: break;
  7018  0003A4  D08C               	goto	l7268
  7019  0003A6                     l7252:
  7020                           
  7021                           ;UI.c: 147: strcpy(month, "AUG");
  7022  0003A6  0ED6               	movlw	low UI@month
  7023  0003A8  0100               	movlb	0	; () banked
  7024  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  7025  0003AC  0E00               	movlw	high UI@month
  7026  0003AE  0100               	movlb	0	; () banked
  7027  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7028  0003B2  0ED3               	movlw	low STR_15
  7029  0003B4  0100               	movlb	0	; () banked
  7030  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  7031  0003B8  0EFF               	movlw	high STR_15
  7032  0003BA  0100               	movlb	0	; () banked
  7033  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7034  0003BE  EC0F  F020         	call	_strcpy	;wreg free
  7035                           
  7036                           ;UI.c: 148: break;
  7037  0003C2  D07D               	goto	l7268
  7038  0003C4                     l7254:
  7039                           
  7040                           ;UI.c: 150: strcpy(month, "SEP");
  7041  0003C4  0ED6               	movlw	low UI@month
  7042  0003C6  0100               	movlb	0	; () banked
  7043  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  7044  0003CA  0E00               	movlw	high UI@month
  7045  0003CC  0100               	movlb	0	; () banked
  7046  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7047  0003D0  0EE3               	movlw	low STR_16
  7048  0003D2  0100               	movlb	0	; () banked
  7049  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  7050  0003D6  0EFF               	movlw	high STR_16
  7051  0003D8  0100               	movlb	0	; () banked
  7052  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7053  0003DC  EC0F  F020         	call	_strcpy	;wreg free
  7054                           
  7055                           ;UI.c: 151: break;
  7056  0003E0  D06E               	goto	l7268
  7057  0003E2                     l7256:
  7058                           
  7059                           ;UI.c: 153: strcpy(month, "OCT");
  7060  0003E2  0ED6               	movlw	low UI@month
  7061  0003E4  0100               	movlb	0	; () banked
  7062  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  7063  0003E8  0E00               	movlw	high UI@month
  7064  0003EA  0100               	movlb	0	; () banked
  7065  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7066  0003EE  0EF3               	movlw	low STR_17
  7067  0003F0  0100               	movlb	0	; () banked
  7068  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  7069  0003F4  0EFF               	movlw	high STR_17
  7070  0003F6  0100               	movlb	0	; () banked
  7071  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7072  0003FA  EC0F  F020         	call	_strcpy	;wreg free
  7073                           
  7074                           ;UI.c: 154: break;
  7075  0003FE  D05F               	goto	l7268
  7076  000400                     l7258:
  7077                           
  7078                           ;UI.c: 156: strcpy(month, "NOV");
  7079  000400  0ED6               	movlw	low UI@month
  7080  000402  0100               	movlb	0	; () banked
  7081  000404  6F80               	movwf	strcpy@to& (0+255),b
  7082  000406  0E00               	movlw	high UI@month
  7083  000408  0100               	movlb	0	; () banked
  7084  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7085  00040C  0EF7               	movlw	low STR_18
  7086  00040E  0100               	movlb	0	; () banked
  7087  000410  6F82               	movwf	strcpy@from& (0+255),b
  7088  000412  0EFF               	movlw	high STR_18
  7089  000414  0100               	movlb	0	; () banked
  7090  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7091  000418  EC0F  F020         	call	_strcpy	;wreg free
  7092                           
  7093                           ;UI.c: 157: break;
  7094  00041C  D050               	goto	l7268
  7095  00041E                     l7260:
  7096                           
  7097                           ;UI.c: 159: strcpy(month, "DEC");
  7098  00041E  0ED6               	movlw	low UI@month
  7099  000420  0100               	movlb	0	; () banked
  7100  000422  6F80               	movwf	strcpy@to& (0+255),b
  7101  000424  0E00               	movlw	high UI@month
  7102  000426  0100               	movlb	0	; () banked
  7103  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7104  00042A  0ECF               	movlw	low STR_19
  7105  00042C  0100               	movlb	0	; () banked
  7106  00042E  6F82               	movwf	strcpy@from& (0+255),b
  7107  000430  0EFF               	movlw	high STR_19
  7108  000432  0100               	movlb	0	; () banked
  7109  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7110  000436  EC0F  F020         	call	_strcpy	;wreg free
  7111                           
  7112                           ;UI.c: 160: break;
  7113  00043A  D041               	goto	l7268
  7114  00043C                     l7262:
  7115                           
  7116                           ;UI.c: 162: strcpy(month, "ERR");
  7117  00043C  0ED6               	movlw	low UI@month
  7118  00043E  0100               	movlb	0	; () banked
  7119  000440  6F80               	movwf	strcpy@to& (0+255),b
  7120  000442  0E00               	movlw	high UI@month
  7121  000444  0100               	movlb	0	; () banked
  7122  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7123  000448  0EEF               	movlw	low STR_20
  7124  00044A  0100               	movlb	0	; () banked
  7125  00044C  6F82               	movwf	strcpy@from& (0+255),b
  7126  00044E  0EFF               	movlw	high STR_20
  7127  000450  0100               	movlb	0	; () banked
  7128  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7129  000454  EC0F  F020         	call	_strcpy	;wreg free
  7130                           
  7131                           ;UI.c: 164: }
  7132                           
  7133                           ;UI.c: 163: break;
  7134  000458  D032               	goto	l7268
  7135  00045A                     l7266:
  7136  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  7137  00045E  CFDE F0C4          	movff	postinc2,??_UI
  7138  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  7139                           
  7140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7141                           ; Switch size 1, requested type "space"
  7142                           ; Number of cases is 1, Range of values is 0 to 0
  7143                           ; switch strategies available:
  7144                           ; Name         Instructions Cycles
  7145                           ; simple_byte            4     3 (average)
  7146                           ;	Chosen strategy is simple_byte
  7147  000466  0100               	movlb	0	; () banked
  7148  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  7149  00046A  0A00               	xorlw	0	; case 0
  7150  00046C  A4D8               	btfss	status,2,c
  7151  00046E  D7E6               	goto	l7262
  7152                           
  7153                           ; BSR set to: 0
  7154                           ; Switch size 1, requested type "space"
  7155                           ; Number of cases is 12, Range of values is 1 to 12
  7156                           ; switch strategies available:
  7157                           ; Name         Instructions Cycles
  7158                           ; simple_byte           37    19 (average)
  7159                           ;	Chosen strategy is simple_byte
  7160  000470  0100               	movlb	0	; () banked
  7161  000472  51C4               	movf	??_UI& (0+255),w,b
  7162  000474  0A01               	xorlw	1	; case 1
  7163  000476  B4D8               	btfsc	status,2,c
  7164  000478  D72D               	goto	l7238
  7165  00047A  0A03               	xorlw	3	; case 2
  7166  00047C  B4D8               	btfsc	status,2,c
  7167  00047E  D739               	goto	l7240
  7168  000480  0A01               	xorlw	1	; case 3
  7169  000482  B4D8               	btfsc	status,2,c
  7170  000484  D745               	goto	l7242
  7171  000486  0A07               	xorlw	7	; case 4
  7172  000488  B4D8               	btfsc	status,2,c
  7173  00048A  D751               	goto	l7244
  7174  00048C  0A01               	xorlw	1	; case 5
  7175  00048E  B4D8               	btfsc	status,2,c
  7176  000490  D75D               	goto	l7246
  7177  000492  0A03               	xorlw	3	; case 6
  7178  000494  B4D8               	btfsc	status,2,c
  7179  000496  D769               	goto	l7248
  7180  000498  0A01               	xorlw	1	; case 7
  7181  00049A  B4D8               	btfsc	status,2,c
  7182  00049C  D775               	goto	l7250
  7183  00049E  0A0F               	xorlw	15	; case 8
  7184  0004A0  B4D8               	btfsc	status,2,c
  7185  0004A2  D781               	goto	l7252
  7186  0004A4  0A01               	xorlw	1	; case 9
  7187  0004A6  B4D8               	btfsc	status,2,c
  7188  0004A8  D78D               	goto	l7254
  7189  0004AA  0A03               	xorlw	3	; case 10
  7190  0004AC  B4D8               	btfsc	status,2,c
  7191  0004AE  D799               	goto	l7256
  7192  0004B0  0A01               	xorlw	1	; case 11
  7193  0004B2  B4D8               	btfsc	status,2,c
  7194  0004B4  D7A5               	goto	l7258
  7195  0004B6  0A07               	xorlw	7	; case 12
  7196  0004B8  B4D8               	btfsc	status,2,c
  7197  0004BA  D7B1               	goto	l7260
  7198  0004BC  D7BF               	goto	l7262
  7199  0004BE                     l7268:
  7200                           
  7201                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7202  0004BE  0E54               	movlw	low STR_21
  7203  0004C0  0100               	movlb	0	; () banked
  7204  0004C2  6F8E               	movwf	printf@f& (0+255),b
  7205  0004C4  0EFB               	movlw	high STR_21
  7206  0004C6  0100               	movlb	0	; () banked
  7207  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7208  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  7209  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  7210  0004D2  0ED6               	movlw	low UI@month
  7211  0004D4  0100               	movlb	0	; () banked
  7212  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  7213  0004D8  0E00               	movlw	high UI@month
  7214  0004DA  0100               	movlb	0	; () banked
  7215  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  7216  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  7217  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  7218  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  7219  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  7220  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  7221  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  7222  0004F6  EC9C  F008         	call	_printf	;wreg free
  7223                           
  7224                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7225  0004FA  0E00               	movlw	0
  7226  0004FC  0100               	movlb	0	; () banked
  7227  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  7228  000500                     l7272:
  7229                           
  7230                           ; BSR set to: 0
  7231  000500  0E63               	movlw	99
  7232  000502  0100               	movlb	0	; () banked
  7233  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  7234  000506  D001               	goto	l7276
  7235  000508  D00C               	goto	l7280
  7236  00050A                     l7276:
  7237                           
  7238                           ; BSR set to: 0
  7239  00050A  0E68               	movlw	104
  7240  00050C  0100               	movlb	0	; () banked
  7241  00050E  6FC4               	movwf	??_UI& (0+255),b
  7242  000510  0EE4               	movlw	228
  7243  000512                     u7197:
  7244  000512  2EE8               	decfsz	wreg,f,c
  7245  000514  D7FE               	bra	u7197
  7246  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  7247  000518  D7FC               	bra	u7197
  7248  00051A  F000               	nop	
  7249  00051C  0100               	movlb	0	; () banked
  7250  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  7251  000520  D7EF               	goto	l7272
  7252  000522                     l7280:
  7253                           
  7254                           ; BSR set to: 0
  7255  000522  0100               	movlb	0	; () banked
  7256  000524  51F6               	movf	_logstate& (0+255),w,b
  7257  000526  0100               	movlb	0	; () banked
  7258  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7259  00052A  B4D8               	btfsc	status,2,c
  7260  00052C  0012               	return	
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7264                           
  7265                           ; BSR set to: 0
  7266                           
  7267                           ; BSR set to: 0
  7268  00052E  0E00               	movlw	0
  7269  000530  0100               	movlb	0	; () banked
  7270  000532  6FCD               	movwf	UI@i_431& (0+255),b
  7271  000534                     l7286:
  7272                           
  7273                           ; BSR set to: 0
  7274  000534  0E63               	movlw	99
  7275  000536  0100               	movlb	0	; () banked
  7276  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  7277  00053A  D001               	goto	l7290
  7278  00053C  D00C               	goto	l7294
  7279  00053E                     l7290:
  7280                           
  7281                           ; BSR set to: 0
  7282  00053E  0E68               	movlw	104
  7283  000540  0100               	movlb	0	; () banked
  7284  000542  6FC4               	movwf	??_UI& (0+255),b
  7285  000544  0EE4               	movlw	228
  7286  000546                     u7207:
  7287  000546  2EE8               	decfsz	wreg,f,c
  7288  000548  D7FE               	bra	u7207
  7289  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  7290  00054C  D7FC               	bra	u7207
  7291  00054E  F000               	nop	
  7292  000550  0100               	movlb	0	; () banked
  7293  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  7294  000554  D7EF               	goto	l7286
  7295  000556                     l7294:
  7296                           
  7297                           ; BSR set to: 0
  7298  000556  0100               	movlb	0	; () banked
  7299  000558  51F6               	movf	_logstate& (0+255),w,b
  7300  00055A  0100               	movlb	0	; () banked
  7301  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7302  00055E  B4D8               	btfsc	status,2,c
  7303  000560  0012               	return	
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7307                           
  7308                           ; BSR set to: 0
  7309                           
  7310                           ; BSR set to: 0
  7311  000562  0E01               	movlw	1
  7312  000564  EC85  F022         	call	_lcdInst
  7313  000568  0E68               	movlw	104
  7314  00056A  0100               	movlb	0	; () banked
  7315  00056C  6FC4               	movwf	??_UI& (0+255),b
  7316  00056E  0EE4               	movlw	228
  7317  000570                     u7217:
  7318  000570  2EE8               	decfsz	wreg,f,c
  7319  000572  D7FE               	bra	u7217
  7320  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  7321  000576  D7FC               	bra	u7217
  7322  000578  F000               	nop	
  7323                           
  7324                           ;UI.c: 171: lcdInst(0b10000000);;
  7325  00057A  0E80               	movlw	128
  7326  00057C  EC85  F022         	call	_lcdInst
  7327                           
  7328                           ;UI.c: 172: printf("DURATION:");
  7329  000580  0EA4               	movlw	low STR_22
  7330  000582  0100               	movlb	0	; () banked
  7331  000584  6F8E               	movwf	printf@f& (0+255),b
  7332  000586  0EFF               	movlw	high STR_22
  7333  000588  0100               	movlb	0	; () banked
  7334  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7335  00058C  EC9C  F008         	call	_printf	;wreg free
  7336                           
  7337                           ;UI.c: 173: lcdInst(0b11000000);;
  7338  000590  0EC0               	movlw	192
  7339  000592  EC85  F022         	call	_lcdInst
  7340                           
  7341                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7342  000596  0E0E               	movlw	14
  7343  000598  0100               	movlb	0	; () banked
  7344  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7345  00059C  0E10               	movlw	16
  7346  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  7347  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7348  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7349  0005A8  ECF8  F01A         	call	___awmod	;wreg free
  7350  0005AC  C080  F0C6         	movff	?___awmod,_UI$2234
  7351  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2234+1
  7352                           
  7353                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7354  0005B4  0E20               	movlw	low STR_23
  7355  0005B6  0100               	movlb	0	; () banked
  7356  0005B8  6F8E               	movwf	printf@f& (0+255),b
  7357  0005BA  0EFF               	movlw	high STR_23
  7358  0005BC  0100               	movlb	0	; () banked
  7359  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  7360  0005C0  0E0E               	movlw	14
  7361  0005C2  0100               	movlb	0	; () banked
  7362  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7363  0005C6  0E10               	movlw	16
  7364  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  7365  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7366  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7367  0005D2  ECF8  F01A         	call	___awmod	;wreg free
  7368  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  7369  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7370  0005DE  0E00               	movlw	0
  7371  0005E0  0100               	movlb	0	; () banked
  7372  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7373  0005E4  0E3C               	movlw	60
  7374  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7375  0005E8  ECE6  F019         	call	___awdiv	;wreg free
  7376  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  7377  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  7378  0005F4  C0C6  F080         	movff	_UI$2234,___awmod@dividend
  7379  0005F8  C0C7  F081         	movff	_UI$2234+1,___awmod@dividend+1
  7380  0005FC  0E00               	movlw	0
  7381  0005FE  0100               	movlb	0	; () banked
  7382  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7383  000602  0E3C               	movlw	60
  7384  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  7385  000606  ECF8  F01A         	call	___awmod	;wreg free
  7386  00060A  C080  F092         	movff	?___awmod,?_printf+4
  7387  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  7388  000612  EC9C  F008         	call	_printf	;wreg free
  7389                           
  7390                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7391  000616  0E00               	movlw	0
  7392  000618  0100               	movlb	0	; () banked
  7393  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  7394  00061C                     l7314:
  7395                           
  7396                           ; BSR set to: 0
  7397  00061C  0E63               	movlw	99
  7398  00061E  0100               	movlb	0	; () banked
  7399  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  7400  000622  D001               	goto	l7318
  7401  000624  D00C               	goto	l7322
  7402  000626                     l7318:
  7403                           
  7404                           ; BSR set to: 0
  7405  000626  0E68               	movlw	104
  7406  000628  0100               	movlb	0	; () banked
  7407  00062A  6FC4               	movwf	??_UI& (0+255),b
  7408  00062C  0EE4               	movlw	228
  7409  00062E                     u7227:
  7410  00062E  2EE8               	decfsz	wreg,f,c
  7411  000630  D7FE               	bra	u7227
  7412  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  7413  000634  D7FC               	bra	u7227
  7414  000636  F000               	nop	
  7415  000638  0100               	movlb	0	; () banked
  7416  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  7417  00063C  D7EF               	goto	l7314
  7418  00063E                     l7322:
  7419                           
  7420                           ; BSR set to: 0
  7421  00063E  0100               	movlb	0	; () banked
  7422  000640  51F6               	movf	_logstate& (0+255),w,b
  7423  000642  0100               	movlb	0	; () banked
  7424  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7425  000646  B4D8               	btfsc	status,2,c
  7426  000648  0012               	return	
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434  00064A  0E00               	movlw	0
  7435  00064C  0100               	movlb	0	; () banked
  7436  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  7437  000650                     l7328:
  7438                           
  7439                           ; BSR set to: 0
  7440  000650  0E63               	movlw	99
  7441  000652  0100               	movlb	0	; () banked
  7442  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  7443  000656  D001               	goto	l7332
  7444  000658  D00C               	goto	l7336
  7445  00065A                     l7332:
  7446                           
  7447                           ; BSR set to: 0
  7448  00065A  0E68               	movlw	104
  7449  00065C  0100               	movlb	0	; () banked
  7450  00065E  6FC4               	movwf	??_UI& (0+255),b
  7451  000660  0EE4               	movlw	228
  7452  000662                     u7237:
  7453  000662  2EE8               	decfsz	wreg,f,c
  7454  000664  D7FE               	bra	u7237
  7455  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  7456  000668  D7FC               	bra	u7237
  7457  00066A  F000               	nop	
  7458  00066C  0100               	movlb	0	; () banked
  7459  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  7460  000670  D7EF               	goto	l7328
  7461  000672                     l7336:
  7462                           
  7463                           ; BSR set to: 0
  7464  000672  0100               	movlb	0	; () banked
  7465  000674  51F6               	movf	_logstate& (0+255),w,b
  7466  000676  0100               	movlb	0	; () banked
  7467  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7468  00067A  B4D8               	btfsc	status,2,c
  7469  00067C  0012               	return	
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7473                           
  7474                           ; BSR set to: 0
  7475                           
  7476                           ; BSR set to: 0
  7477  00067E  0E01               	movlw	1
  7478  000680  EC85  F022         	call	_lcdInst
  7479  000684  0E68               	movlw	104
  7480  000686  0100               	movlb	0	; () banked
  7481  000688  6FC4               	movwf	??_UI& (0+255),b
  7482  00068A  0EE4               	movlw	228
  7483  00068C                     u7247:
  7484  00068C  2EE8               	decfsz	wreg,f,c
  7485  00068E  D7FE               	bra	u7247
  7486  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7487  000692  D7FC               	bra	u7247
  7488  000694  F000               	nop	
  7489                           
  7490                           ;UI.c: 180: lcdInst(0b10000000);;
  7491  000696  0E80               	movlw	128
  7492  000698  EC85  F022         	call	_lcdInst
  7493                           
  7494                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7495  00069C  0E65               	movlw	low STR_24
  7496  00069E  0100               	movlb	0	; () banked
  7497  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7498  0006A2  0EFD               	movlw	high STR_24
  7499  0006A4  0100               	movlb	0	; () banked
  7500  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7501  0006A8  EC9C  F008         	call	_printf	;wreg free
  7502                           
  7503                           ;UI.c: 182: lcdInst(0b11000000);;
  7504  0006AC  0EC0               	movlw	192
  7505  0006AE  EC85  F022         	call	_lcdInst
  7506                           
  7507                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7508  0006B2  0E94               	movlw	low STR_25
  7509  0006B4  0100               	movlb	0	; () banked
  7510  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7511  0006B8  0EFB               	movlw	high STR_25
  7512  0006BA  0100               	movlb	0	; () banked
  7513  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7514  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7515  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7516  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7517  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7518  0006CE  EC9C  F008         	call	_printf	;wreg free
  7519                           
  7520                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7521  0006D2  0E00               	movlw	0
  7522  0006D4  0100               	movlb	0	; () banked
  7523  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7524  0006D8                     l7354:
  7525                           
  7526                           ; BSR set to: 0
  7527  0006D8  0E63               	movlw	99
  7528  0006DA  0100               	movlb	0	; () banked
  7529  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7530  0006DE  D001               	goto	l7358
  7531  0006E0  D00C               	goto	l7362
  7532  0006E2                     l7358:
  7533                           
  7534                           ; BSR set to: 0
  7535  0006E2  0E68               	movlw	104
  7536  0006E4  0100               	movlb	0	; () banked
  7537  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7538  0006E8  0EE4               	movlw	228
  7539  0006EA                     u7257:
  7540  0006EA  2EE8               	decfsz	wreg,f,c
  7541  0006EC  D7FE               	bra	u7257
  7542  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7543  0006F0  D7FC               	bra	u7257
  7544  0006F2  F000               	nop	
  7545  0006F4  0100               	movlb	0	; () banked
  7546  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7547  0006F8  D7EF               	goto	l7354
  7548  0006FA                     l7362:
  7549                           
  7550                           ; BSR set to: 0
  7551  0006FA  0100               	movlb	0	; () banked
  7552  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7553  0006FE  0100               	movlb	0	; () banked
  7554  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7555  000702  B4D8               	btfsc	status,2,c
  7556  000704  0012               	return	
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7560                           
  7561                           ; BSR set to: 0
  7562                           
  7563                           ; BSR set to: 0
  7564  000706  0E00               	movlw	0
  7565  000708  0100               	movlb	0	; () banked
  7566  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7567  00070C                     l7368:
  7568                           
  7569                           ; BSR set to: 0
  7570  00070C  0E63               	movlw	99
  7571  00070E  0100               	movlb	0	; () banked
  7572  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7573  000712  D001               	goto	l7372
  7574  000714  D00C               	goto	l7376
  7575  000716                     l7372:
  7576                           
  7577                           ; BSR set to: 0
  7578  000716  0E68               	movlw	104
  7579  000718  0100               	movlb	0	; () banked
  7580  00071A  6FC4               	movwf	??_UI& (0+255),b
  7581  00071C  0EE4               	movlw	228
  7582  00071E                     u7267:
  7583  00071E  2EE8               	decfsz	wreg,f,c
  7584  000720  D7FE               	bra	u7267
  7585  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7586  000724  D7FC               	bra	u7267
  7587  000726  F000               	nop	
  7588  000728  0100               	movlb	0	; () banked
  7589  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7590  00072C  D7EF               	goto	l7368
  7591  00072E                     l7376:
  7592                           
  7593                           ; BSR set to: 0
  7594  00072E  0100               	movlb	0	; () banked
  7595  000730  51F6               	movf	_logstate& (0+255),w,b
  7596  000732  0100               	movlb	0	; () banked
  7597  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7598  000736  B4D8               	btfsc	status,2,c
  7599  000738  0012               	return	
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7603                           
  7604                           ; BSR set to: 0
  7605                           
  7606                           ; BSR set to: 0
  7607  00073A  0E01               	movlw	1
  7608  00073C  EC85  F022         	call	_lcdInst
  7609  000740  0E68               	movlw	104
  7610  000742  0100               	movlb	0	; () banked
  7611  000744  6FC4               	movwf	??_UI& (0+255),b
  7612  000746  0EE4               	movlw	228
  7613  000748                     u7277:
  7614  000748  2EE8               	decfsz	wreg,f,c
  7615  00074A  D7FE               	bra	u7277
  7616  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7617  00074E  D7FC               	bra	u7277
  7618  000750  F000               	nop	
  7619                           
  7620                           ;UI.c: 189: lcdInst(0b10000000);;
  7621  000752  0E80               	movlw	128
  7622  000754  EC85  F022         	call	_lcdInst
  7623                           
  7624                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7625  000758  0E76               	movlw	low STR_26
  7626  00075A  0100               	movlb	0	; () banked
  7627  00075C  6F8E               	movwf	printf@f& (0+255),b
  7628  00075E  0EFD               	movlw	high STR_26
  7629  000760  0100               	movlb	0	; () banked
  7630  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7631  000764  EC9C  F008         	call	_printf	;wreg free
  7632                           
  7633                           ;UI.c: 191: lcdInst(0b11000000);;
  7634  000768  0EC0               	movlw	192
  7635  00076A  EC85  F022         	call	_lcdInst
  7636                           
  7637                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7638  00076E  0E81               	movlw	low STR_27
  7639  000770  0100               	movlb	0	; () banked
  7640  000772  6F8E               	movwf	printf@f& (0+255),b
  7641  000774  0EFB               	movlw	high STR_27
  7642  000776  0100               	movlb	0	; () banked
  7643  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7644  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7645  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7646  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7647  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7648  00078A  EC9C  F008         	call	_printf	;wreg free
  7649                           
  7650                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7651  00078E  0E00               	movlw	0
  7652  000790  0100               	movlb	0	; () banked
  7653  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7654  000794                     l7394:
  7655                           
  7656                           ; BSR set to: 0
  7657  000794  0E63               	movlw	99
  7658  000796  0100               	movlb	0	; () banked
  7659  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7660  00079A  D001               	goto	l7398
  7661  00079C  D00C               	goto	l7402
  7662  00079E                     l7398:
  7663                           
  7664                           ; BSR set to: 0
  7665  00079E  0E68               	movlw	104
  7666  0007A0  0100               	movlb	0	; () banked
  7667  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7668  0007A4  0EE4               	movlw	228
  7669  0007A6                     u7287:
  7670  0007A6  2EE8               	decfsz	wreg,f,c
  7671  0007A8  D7FE               	bra	u7287
  7672  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7673  0007AC  D7FC               	bra	u7287
  7674  0007AE  F000               	nop	
  7675  0007B0  0100               	movlb	0	; () banked
  7676  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7677  0007B4  D7EF               	goto	l7394
  7678  0007B6                     l7402:
  7679                           
  7680                           ; BSR set to: 0
  7681  0007B6  0100               	movlb	0	; () banked
  7682  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7683  0007BA  0100               	movlb	0	; () banked
  7684  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7685  0007BE  B4D8               	btfsc	status,2,c
  7686  0007C0  0012               	return	
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7690                           
  7691                           ; BSR set to: 0
  7692                           
  7693                           ; BSR set to: 0
  7694  0007C2  0E00               	movlw	0
  7695  0007C4  0100               	movlb	0	; () banked
  7696  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7697  0007C8                     l7408:
  7698                           
  7699                           ; BSR set to: 0
  7700  0007C8  0E63               	movlw	99
  7701  0007CA  0100               	movlb	0	; () banked
  7702  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7703  0007CE  D001               	goto	l7412
  7704  0007D0  D00C               	goto	l7416
  7705  0007D2                     l7412:
  7706                           
  7707                           ; BSR set to: 0
  7708  0007D2  0E68               	movlw	104
  7709  0007D4  0100               	movlb	0	; () banked
  7710  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7711  0007D8  0EE4               	movlw	228
  7712  0007DA                     u7297:
  7713  0007DA  2EE8               	decfsz	wreg,f,c
  7714  0007DC  D7FE               	bra	u7297
  7715  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7716  0007E0  D7FC               	bra	u7297
  7717  0007E2  F000               	nop	
  7718  0007E4  0100               	movlb	0	; () banked
  7719  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7720  0007E8  D7EF               	goto	l7408
  7721  0007EA                     l7416:
  7722                           
  7723                           ; BSR set to: 0
  7724  0007EA  0100               	movlb	0	; () banked
  7725  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7726  0007EE  0100               	movlb	0	; () banked
  7727  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7728  0007F2  B4D8               	btfsc	status,2,c
  7729  0007F4  0012               	return	
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7733                           
  7734                           ; BSR set to: 0
  7735                           
  7736                           ; BSR set to: 0
  7737  0007F6  0E01               	movlw	1
  7738  0007F8  EC85  F022         	call	_lcdInst
  7739  0007FC  0E68               	movlw	104
  7740  0007FE  0100               	movlb	0	; () banked
  7741  000800  6FC4               	movwf	??_UI& (0+255),b
  7742  000802  0EE4               	movlw	228
  7743  000804                     u7307:
  7744  000804  2EE8               	decfsz	wreg,f,c
  7745  000806  D7FE               	bra	u7307
  7746  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7747  00080A  D7FC               	bra	u7307
  7748  00080C  F000               	nop	
  7749                           
  7750                           ;UI.c: 198: lcdInst(0b10000000);;
  7751  00080E  0E80               	movlw	128
  7752  000810  EC85  F022         	call	_lcdInst
  7753                           
  7754                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7755  000814  0E87               	movlw	low STR_28
  7756  000816  0100               	movlb	0	; () banked
  7757  000818  6F8E               	movwf	printf@f& (0+255),b
  7758  00081A  0EFD               	movlw	high STR_28
  7759  00081C  0100               	movlb	0	; () banked
  7760  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7761  000820  EC9C  F008         	call	_printf	;wreg free
  7762                           
  7763                           ;UI.c: 200: lcdInst(0b11000000);;
  7764  000824  0EC0               	movlw	192
  7765  000826  EC85  F022         	call	_lcdInst
  7766                           
  7767                           ;UI.c: 201: printf("%d", log_count_total);
  7768  00082A  0E91               	movlw	low (STR_27+16)
  7769  00082C  0100               	movlb	0	; () banked
  7770  00082E  6F8E               	movwf	printf@f& (0+255),b
  7771  000830  0EFB               	movlw	high (STR_27+16)
  7772  000832  0100               	movlb	0	; () banked
  7773  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7774  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7775  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7776  00083E  EC9C  F008         	call	_printf	;wreg free
  7777                           
  7778                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7779  000842  0E00               	movlw	0
  7780  000844  0100               	movlb	0	; () banked
  7781  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7782  000848                     l7434:
  7783                           
  7784                           ; BSR set to: 0
  7785  000848  0E63               	movlw	99
  7786  00084A  0100               	movlb	0	; () banked
  7787  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7788  00084E  D001               	goto	l7438
  7789  000850  D00C               	goto	l7442
  7790  000852                     l7438:
  7791                           
  7792                           ; BSR set to: 0
  7793  000852  0E68               	movlw	104
  7794  000854  0100               	movlb	0	; () banked
  7795  000856  6FC4               	movwf	??_UI& (0+255),b
  7796  000858  0EE4               	movlw	228
  7797  00085A                     u7317:
  7798  00085A  2EE8               	decfsz	wreg,f,c
  7799  00085C  D7FE               	bra	u7317
  7800  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7801  000860  D7FC               	bra	u7317
  7802  000862  F000               	nop	
  7803  000864  0100               	movlb	0	; () banked
  7804  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7805  000868  D7EF               	goto	l7434
  7806  00086A                     l7442:
  7807                           
  7808                           ; BSR set to: 0
  7809  00086A  0100               	movlb	0	; () banked
  7810  00086C  51F6               	movf	_logstate& (0+255),w,b
  7811  00086E  0100               	movlb	0	; () banked
  7812  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7813  000872  B4D8               	btfsc	status,2,c
  7814  000874  0012               	return	
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7818                           
  7819                           ; BSR set to: 0
  7820                           
  7821                           ; BSR set to: 0
  7822  000876  0E00               	movlw	0
  7823  000878  0100               	movlb	0	; () banked
  7824  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7825  00087C                     l7448:
  7826                           
  7827                           ; BSR set to: 0
  7828  00087C  0E63               	movlw	99
  7829  00087E  0100               	movlb	0	; () banked
  7830  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7831  000882  D001               	goto	l7452
  7832  000884  D00C               	goto	l7456
  7833  000886                     l7452:
  7834                           
  7835                           ; BSR set to: 0
  7836  000886  0E68               	movlw	104
  7837  000888  0100               	movlb	0	; () banked
  7838  00088A  6FC4               	movwf	??_UI& (0+255),b
  7839  00088C  0EE4               	movlw	228
  7840  00088E                     u7327:
  7841  00088E  2EE8               	decfsz	wreg,f,c
  7842  000890  D7FE               	bra	u7327
  7843  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7844  000894  D7FC               	bra	u7327
  7845  000896  F000               	nop	
  7846  000898  0100               	movlb	0	; () banked
  7847  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7848  00089C  D7EF               	goto	l7448
  7849  00089E                     l7456:
  7850                           
  7851                           ; BSR set to: 0
  7852  00089E  0100               	movlb	0	; () banked
  7853  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7854  0008A2  0100               	movlb	0	; () banked
  7855  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7856  0008A6  B4D8               	btfsc	status,2,c
  7857  0008A8  0012               	return	
  7858  0008AA                     l7460:
  7859  0008AA  0100               	movlb	0	; () banked
  7860  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7861  0008AE  0100               	movlb	0	; () banked
  7862  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7863  0008B2  B4D8               	btfsc	status,2,c
  7864  0008B4  0012               	return	
  7865  0008B6  D44A               	goto	l7156
  7866  0008B8                     __end_of_UI:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon2	equ	0xFF1
  7876                           intcon3	equ	0xFF0
  7877                           postinc0	equ	0xFEE
  7878                           wreg	equ	0xFE8
  7879                           postdec1	equ	0xFE5
  7880                           fsr1l	equ	0xFE1
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function _printRTC *****************
  7889 ;; Defined at:
  7890 ;;		line 63 in file "RTC.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;		None
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  i               2   66[BANK0 ] int 
  7895 ;;  INT_time       14   46[BANK0 ] int [7]
  7896 ;;  month           4   62[BANK0 ] unsigned char [4]
  7897 ;;  RTC_month       2   60[BANK0 ] int 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;Total ram usage:       25 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:   10
  7914 ;; This function calls:
  7915 ;;		_getRTC
  7916 ;;		_lcdInst
  7917 ;;		_printf
  7918 ;;		_strcpy
  7919 ;; This function is called by:
  7920 ;;		_UI
  7921 ;;		_change_state_to_menu_start
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           	psect	text23
  7926  001CC6                     __ptext23:
  7927                           	opt stack 0
  7928  001CC6                     _printRTC:
  7929                           	opt stack 18
  7930                           
  7931                           ;RTC.c: 64: getRTC();
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;incstack = 0
  7935  001CC6  EC1E  F01C         	call	_getRTC	;wreg free
  7936                           
  7937                           ;RTC.c: 65: char month[] = "MMM";
  7938  001CCA  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7939  001CCE  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7940  001CD2  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7941  001CD6  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7942                           
  7943                           ;RTC.c: 66: int INT_time[7];
  7944                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7945  001CDA  0E00               	movlw	0
  7946  001CDC  0100               	movlb	0	; () banked
  7947  001CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7948  001CE0  0E00               	movlw	0
  7949  001CE2  6FC2               	movwf	printRTC@i& (0+255),b
  7950                           
  7951                           ; BSR set to: 0
  7952  001CE4  0100               	movlb	0	; () banked
  7953  001CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7954  001CE8  D008               	goto	l5676
  7955  001CEA  0100               	movlb	0	; () banked
  7956  001CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7957  001CEE  E146               	bnz	l593
  7958  001CF0  0E07               	movlw	7
  7959  001CF2  0100               	movlb	0	; () banked
  7960  001CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  7961  001CF6  B0D8               	btfsc	status,0,c
  7962  001CF8  D041               	goto	l593
  7963  001CFA                     l5676:
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7967  001CFA  0E24               	movlw	low _time
  7968  001CFC  0100               	movlb	0	; () banked
  7969  001CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  7970  001D00  6ED9               	movwf	fsr2l,c
  7971  001D02  0E01               	movlw	high _time
  7972  001D04  0100               	movlb	0	; () banked
  7973  001D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7974  001D08  6EDA               	movwf	fsr2h,c
  7975  001D0A  50DF               	movf	indf2,w,c
  7976  001D0C  0100               	movlb	0	; () banked
  7977  001D0E  6FAB               	movwf	??_printRTC& (0+255),b
  7978  001D10  0100               	movlb	0	; () banked
  7979  001D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  7980  001D14  0E0F               	movlw	15
  7981  001D16  17AB               	andwf	??_printRTC& (0+255),f,b
  7982  001D18  0E0F               	movlw	15
  7983  001D1A  0100               	movlb	0	; () banked
  7984  001D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  7985  001D1E  0100               	movlb	0	; () banked
  7986  001D20  51AB               	movf	??_printRTC& (0+255),w,b
  7987  001D22  0D0A               	mullw	10
  7988  001D24  0E24               	movlw	low _time
  7989  001D26  0100               	movlb	0	; () banked
  7990  001D28  25C2               	addwf	printRTC@i& (0+255),w,b
  7991  001D2A  6ED9               	movwf	fsr2l,c
  7992  001D2C  0E01               	movlw	high _time
  7993  001D2E  0100               	movlb	0	; () banked
  7994  001D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7995  001D32  6EDA               	movwf	fsr2h,c
  7996  001D34  50DF               	movf	indf2,w,c
  7997  001D36  0B0F               	andlw	15
  7998  001D38  0100               	movlb	0	; () banked
  7999  001D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8000  001D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8001  001D3E  50F3               	movf	prodl,w,c
  8002  001D40  0100               	movlb	0	; () banked
  8003  001D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8004  001D44  50F4               	movf	prodh,w,c
  8005  001D46  0100               	movlb	0	; () banked
  8006  001D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8007  001D4A  90D8               	bcf	status,0,c
  8008  001D4C  0100               	movlb	0	; () banked
  8009  001D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  8010  001D50  6ED9               	movwf	fsr2l,c
  8011  001D52  0100               	movlb	0	; () banked
  8012  001D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8013  001D56  6EDA               	movwf	fsr2h,c
  8014  001D58  0EAE               	movlw	low printRTC@INT_time
  8015  001D5A  26D9               	addwf	fsr2l,f,c
  8016  001D5C  0E00               	movlw	high printRTC@INT_time
  8017  001D5E  22DA               	addwfc	fsr2h,f,c
  8018  001D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8019  001D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8020                           
  8021                           ; BSR set to: 0
  8022  001D68  0100               	movlb	0	; () banked
  8023  001D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8024  001D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8025                           
  8026                           ; BSR set to: 0
  8027  001D6E  0100               	movlb	0	; () banked
  8028  001D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8029  001D72  D7C3               	goto	l5676
  8030  001D74  0100               	movlb	0	; () banked
  8031  001D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8032  001D78  E101               	bnz	u4390
  8033  001D7A  D7BA               	goto	L6
  8034  001D7C                     u4390:
  8035  001D7C                     l593:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;RTC.c: 69: }
  8039                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8040  001D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8041  001D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8042                           
  8043                           ;RTC.c: 71: switch(RTC_month){
  8044  001D84  D0B4               	goto	l5708
  8045  001D86                     l5682:
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;RTC.c: 73: strcpy(month, "JAN");
  8049  001D86  0EBE               	movlw	low printRTC@month
  8050  001D88  0100               	movlb	0	; () banked
  8051  001D8A  6F80               	movwf	strcpy@to& (0+255),b
  8052  001D8C  0E00               	movlw	high printRTC@month
  8053  001D8E  0100               	movlb	0	; () banked
  8054  001D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8055  001D92  0EDB               	movlw	low STR_8
  8056  001D94  0100               	movlb	0	; () banked
  8057  001D96  6F82               	movwf	strcpy@from& (0+255),b
  8058  001D98  0EFF               	movlw	high STR_8
  8059  001D9A  0100               	movlb	0	; () banked
  8060  001D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8061  001D9E  EC0F  F020         	call	_strcpy	;wreg free
  8062                           
  8063                           ;RTC.c: 74: break;
  8064  001DA2  D0D4               	goto	l5710
  8065  001DA4                     l5684:
  8066                           
  8067                           ;RTC.c: 76: strcpy(month, "FEB");
  8068  001DA4  0EBE               	movlw	low printRTC@month
  8069  001DA6  0100               	movlb	0	; () banked
  8070  001DA8  6F80               	movwf	strcpy@to& (0+255),b
  8071  001DAA  0E00               	movlw	high printRTC@month
  8072  001DAC  0100               	movlb	0	; () banked
  8073  001DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8074  001DB0  0ECB               	movlw	low STR_9
  8075  001DB2  0100               	movlb	0	; () banked
  8076  001DB4  6F82               	movwf	strcpy@from& (0+255),b
  8077  001DB6  0EFF               	movlw	high STR_9
  8078  001DB8  0100               	movlb	0	; () banked
  8079  001DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8080  001DBC  EC0F  F020         	call	_strcpy	;wreg free
  8081                           
  8082                           ;RTC.c: 77: break;
  8083  001DC0  D0C5               	goto	l5710
  8084  001DC2                     l5686:
  8085                           
  8086                           ;RTC.c: 79: strcpy(month, "MAR");
  8087  001DC2  0EBE               	movlw	low printRTC@month
  8088  001DC4  0100               	movlb	0	; () banked
  8089  001DC6  6F80               	movwf	strcpy@to& (0+255),b
  8090  001DC8  0E00               	movlw	high printRTC@month
  8091  001DCA  0100               	movlb	0	; () banked
  8092  001DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8093  001DCE  0EE7               	movlw	low STR_10
  8094  001DD0  0100               	movlb	0	; () banked
  8095  001DD2  6F82               	movwf	strcpy@from& (0+255),b
  8096  001DD4  0EFF               	movlw	high STR_10
  8097  001DD6  0100               	movlb	0	; () banked
  8098  001DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8099  001DDA  EC0F  F020         	call	_strcpy	;wreg free
  8100                           
  8101                           ;RTC.c: 80: break;
  8102  001DDE  D0B6               	goto	l5710
  8103  001DE0                     l5688:
  8104                           
  8105                           ;RTC.c: 82: strcpy(month, "APR");
  8106  001DE0  0EBE               	movlw	low printRTC@month
  8107  001DE2  0100               	movlb	0	; () banked
  8108  001DE4  6F80               	movwf	strcpy@to& (0+255),b
  8109  001DE6  0E00               	movlw	high printRTC@month
  8110  001DE8  0100               	movlb	0	; () banked
  8111  001DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8112  001DEC  0EEB               	movlw	low STR_11
  8113  001DEE  0100               	movlb	0	; () banked
  8114  001DF0  6F82               	movwf	strcpy@from& (0+255),b
  8115  001DF2  0EFF               	movlw	high STR_11
  8116  001DF4  0100               	movlb	0	; () banked
  8117  001DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8118  001DF8  EC0F  F020         	call	_strcpy	;wreg free
  8119                           
  8120                           ;RTC.c: 83: break;
  8121  001DFC  D0A7               	goto	l5710
  8122  001DFE                     l5690:
  8123                           
  8124                           ;RTC.c: 85: strcpy(month, "MAY");
  8125  001DFE  0EBE               	movlw	low printRTC@month
  8126  001E00  0100               	movlb	0	; () banked
  8127  001E02  6F80               	movwf	strcpy@to& (0+255),b
  8128  001E04  0E00               	movlw	high printRTC@month
  8129  001E06  0100               	movlb	0	; () banked
  8130  001E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8131  001E0A  0EFB               	movlw	low STR_12
  8132  001E0C  0100               	movlb	0	; () banked
  8133  001E0E  6F82               	movwf	strcpy@from& (0+255),b
  8134  001E10  0EFF               	movlw	high STR_12
  8135  001E12  0100               	movlb	0	; () banked
  8136  001E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8137  001E16  EC0F  F020         	call	_strcpy	;wreg free
  8138                           
  8139                           ;RTC.c: 86: break;
  8140  001E1A  D098               	goto	l5710
  8141  001E1C                     l5692:
  8142                           
  8143                           ;RTC.c: 88: strcpy(month, "JUN");
  8144  001E1C  0EBE               	movlw	low printRTC@month
  8145  001E1E  0100               	movlb	0	; () banked
  8146  001E20  6F80               	movwf	strcpy@to& (0+255),b
  8147  001E22  0E00               	movlw	high printRTC@month
  8148  001E24  0100               	movlb	0	; () banked
  8149  001E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8150  001E28  0EDF               	movlw	low STR_13
  8151  001E2A  0100               	movlb	0	; () banked
  8152  001E2C  6F82               	movwf	strcpy@from& (0+255),b
  8153  001E2E  0EFF               	movlw	high STR_13
  8154  001E30  0100               	movlb	0	; () banked
  8155  001E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8156  001E34  EC0F  F020         	call	_strcpy	;wreg free
  8157                           
  8158                           ;RTC.c: 89: break;
  8159  001E38  D089               	goto	l5710
  8160  001E3A                     l5694:
  8161                           
  8162                           ;RTC.c: 91: strcpy(month, "JUL");
  8163  001E3A  0EBE               	movlw	low printRTC@month
  8164  001E3C  0100               	movlb	0	; () banked
  8165  001E3E  6F80               	movwf	strcpy@to& (0+255),b
  8166  001E40  0E00               	movlw	high printRTC@month
  8167  001E42  0100               	movlb	0	; () banked
  8168  001E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8169  001E46  0ED7               	movlw	low STR_14
  8170  001E48  0100               	movlb	0	; () banked
  8171  001E4A  6F82               	movwf	strcpy@from& (0+255),b
  8172  001E4C  0EFF               	movlw	high STR_14
  8173  001E4E  0100               	movlb	0	; () banked
  8174  001E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8175  001E52  EC0F  F020         	call	_strcpy	;wreg free
  8176                           
  8177                           ;RTC.c: 92: break;
  8178  001E56  D07A               	goto	l5710
  8179  001E58                     l5696:
  8180                           
  8181                           ;RTC.c: 94: strcpy(month, "AUG");
  8182  001E58  0EBE               	movlw	low printRTC@month
  8183  001E5A  0100               	movlb	0	; () banked
  8184  001E5C  6F80               	movwf	strcpy@to& (0+255),b
  8185  001E5E  0E00               	movlw	high printRTC@month
  8186  001E60  0100               	movlb	0	; () banked
  8187  001E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8188  001E64  0ED3               	movlw	low STR_15
  8189  001E66  0100               	movlb	0	; () banked
  8190  001E68  6F82               	movwf	strcpy@from& (0+255),b
  8191  001E6A  0EFF               	movlw	high STR_15
  8192  001E6C  0100               	movlb	0	; () banked
  8193  001E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8194  001E70  EC0F  F020         	call	_strcpy	;wreg free
  8195                           
  8196                           ;RTC.c: 95: break;
  8197  001E74  D06B               	goto	l5710
  8198  001E76                     l5698:
  8199                           
  8200                           ;RTC.c: 97: strcpy(month, "SEP");
  8201  001E76  0EBE               	movlw	low printRTC@month
  8202  001E78  0100               	movlb	0	; () banked
  8203  001E7A  6F80               	movwf	strcpy@to& (0+255),b
  8204  001E7C  0E00               	movlw	high printRTC@month
  8205  001E7E  0100               	movlb	0	; () banked
  8206  001E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8207  001E82  0EE3               	movlw	low STR_16
  8208  001E84  0100               	movlb	0	; () banked
  8209  001E86  6F82               	movwf	strcpy@from& (0+255),b
  8210  001E88  0EFF               	movlw	high STR_16
  8211  001E8A  0100               	movlb	0	; () banked
  8212  001E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8213  001E8E  EC0F  F020         	call	_strcpy	;wreg free
  8214                           
  8215                           ;RTC.c: 98: break;
  8216  001E92  D05C               	goto	l5710
  8217  001E94                     l5700:
  8218                           
  8219                           ;RTC.c: 100: strcpy(month, "OCT");
  8220  001E94  0EBE               	movlw	low printRTC@month
  8221  001E96  0100               	movlb	0	; () banked
  8222  001E98  6F80               	movwf	strcpy@to& (0+255),b
  8223  001E9A  0E00               	movlw	high printRTC@month
  8224  001E9C  0100               	movlb	0	; () banked
  8225  001E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8226  001EA0  0EF3               	movlw	low STR_17
  8227  001EA2  0100               	movlb	0	; () banked
  8228  001EA4  6F82               	movwf	strcpy@from& (0+255),b
  8229  001EA6  0EFF               	movlw	high STR_17
  8230  001EA8  0100               	movlb	0	; () banked
  8231  001EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8232  001EAC  EC0F  F020         	call	_strcpy	;wreg free
  8233                           
  8234                           ;RTC.c: 101: break;
  8235  001EB0  D04D               	goto	l5710
  8236  001EB2                     l5702:
  8237                           
  8238                           ;RTC.c: 103: strcpy(month, "NOV");
  8239  001EB2  0EBE               	movlw	low printRTC@month
  8240  001EB4  0100               	movlb	0	; () banked
  8241  001EB6  6F80               	movwf	strcpy@to& (0+255),b
  8242  001EB8  0E00               	movlw	high printRTC@month
  8243  001EBA  0100               	movlb	0	; () banked
  8244  001EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8245  001EBE  0EF7               	movlw	low STR_18
  8246  001EC0  0100               	movlb	0	; () banked
  8247  001EC2  6F82               	movwf	strcpy@from& (0+255),b
  8248  001EC4  0EFF               	movlw	high STR_18
  8249  001EC6  0100               	movlb	0	; () banked
  8250  001EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8251  001ECA  EC0F  F020         	call	_strcpy	;wreg free
  8252                           
  8253                           ;RTC.c: 104: break;
  8254  001ECE  D03E               	goto	l5710
  8255  001ED0                     l5704:
  8256                           
  8257                           ;RTC.c: 106: strcpy(month, "DEC");
  8258  001ED0  0EBE               	movlw	low printRTC@month
  8259  001ED2  0100               	movlb	0	; () banked
  8260  001ED4  6F80               	movwf	strcpy@to& (0+255),b
  8261  001ED6  0E00               	movlw	high printRTC@month
  8262  001ED8  0100               	movlb	0	; () banked
  8263  001EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8264  001EDC  0ECF               	movlw	low STR_19
  8265  001EDE  0100               	movlb	0	; () banked
  8266  001EE0  6F82               	movwf	strcpy@from& (0+255),b
  8267  001EE2  0EFF               	movlw	high STR_19
  8268  001EE4  0100               	movlb	0	; () banked
  8269  001EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8270  001EE8  EC0F  F020         	call	_strcpy	;wreg free
  8271                           
  8272                           ;RTC.c: 108: }
  8273                           
  8274                           ;RTC.c: 107: break;
  8275  001EEC  D02F               	goto	l5710
  8276  001EEE                     l5708:
  8277  001EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8278  001EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8279                           
  8280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8281                           ; Switch size 1, requested type "space"
  8282                           ; Number of cases is 1, Range of values is 0 to 0
  8283                           ; switch strategies available:
  8284                           ; Name         Instructions Cycles
  8285                           ; simple_byte            4     3 (average)
  8286                           ;	Chosen strategy is simple_byte
  8287  001EF6  0100               	movlb	0	; () banked
  8288  001EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8289  001EFA  0A00               	xorlw	0	; case 0
  8290  001EFC  A4D8               	btfss	status,2,c
  8291  001EFE  D026               	goto	l5710
  8292                           
  8293                           ; BSR set to: 0
  8294                           ; Switch size 1, requested type "space"
  8295                           ; Number of cases is 12, Range of values is 1 to 12
  8296                           ; switch strategies available:
  8297                           ; Name         Instructions Cycles
  8298                           ; simple_byte           37    19 (average)
  8299                           ;	Chosen strategy is simple_byte
  8300  001F00  0100               	movlb	0	; () banked
  8301  001F02  51AB               	movf	??_printRTC& (0+255),w,b
  8302  001F04  0A01               	xorlw	1	; case 1
  8303  001F06  B4D8               	btfsc	status,2,c
  8304  001F08  D73E               	goto	l5682
  8305  001F0A  0A03               	xorlw	3	; case 2
  8306  001F0C  B4D8               	btfsc	status,2,c
  8307  001F0E  D74A               	goto	l5684
  8308  001F10  0A01               	xorlw	1	; case 3
  8309  001F12  B4D8               	btfsc	status,2,c
  8310  001F14  D756               	goto	l5686
  8311  001F16  0A07               	xorlw	7	; case 4
  8312  001F18  B4D8               	btfsc	status,2,c
  8313  001F1A  D762               	goto	l5688
  8314  001F1C  0A01               	xorlw	1	; case 5
  8315  001F1E  B4D8               	btfsc	status,2,c
  8316  001F20  D76E               	goto	l5690
  8317  001F22  0A03               	xorlw	3	; case 6
  8318  001F24  B4D8               	btfsc	status,2,c
  8319  001F26  D77A               	goto	l5692
  8320  001F28  0A01               	xorlw	1	; case 7
  8321  001F2A  B4D8               	btfsc	status,2,c
  8322  001F2C  D786               	goto	l5694
  8323  001F2E  0A0F               	xorlw	15	; case 8
  8324  001F30  B4D8               	btfsc	status,2,c
  8325  001F32  D792               	goto	l5696
  8326  001F34  0A01               	xorlw	1	; case 9
  8327  001F36  B4D8               	btfsc	status,2,c
  8328  001F38  D79E               	goto	l5698
  8329  001F3A  0A03               	xorlw	3	; case 10
  8330  001F3C  B4D8               	btfsc	status,2,c
  8331  001F3E  D7AA               	goto	l5700
  8332  001F40  0A01               	xorlw	1	; case 11
  8333  001F42  B4D8               	btfsc	status,2,c
  8334  001F44  D7B6               	goto	l5702
  8335  001F46  0A07               	xorlw	7	; case 12
  8336  001F48  B4D8               	btfsc	status,2,c
  8337  001F4A  D7C2               	goto	l5704
  8338  001F4C                     l5710:
  8339                           
  8340                           ;RTC.c: 109: lcdInst(0b10000000);;
  8341  001F4C  0E80               	movlw	128
  8342  001F4E  EC85  F022         	call	_lcdInst
  8343                           
  8344                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8345  001F52  0E54               	movlw	low STR_21
  8346  001F54  0100               	movlb	0	; () banked
  8347  001F56  6F8E               	movwf	printf@f& (0+255),b
  8348  001F58  0EFB               	movlw	high STR_21
  8349  001F5A  0100               	movlb	0	; () banked
  8350  001F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8351  001F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8352  001F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8353  001F66  0EBE               	movlw	low printRTC@month
  8354  001F68  0100               	movlb	0	; () banked
  8355  001F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  8356  001F6C  0E00               	movlw	high printRTC@month
  8357  001F6E  0100               	movlb	0	; () banked
  8358  001F70  6F93               	movwf	(?_printf+5)& (0+255),b
  8359  001F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8360  001F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8361  001F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8362  001F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8363  001F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8364  001F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8365  001F8A  EC9C  F008         	call	_printf	;wreg free
  8366  001F8E  0012               	return		;funcret
  8367  001F90                     __end_of_printRTC:
  8368                           	opt stack 0
  8369                           tblptru	equ	0xFF8
  8370                           tblptrh	equ	0xFF7
  8371                           tblptrl	equ	0xFF6
  8372                           tablat	equ	0xFF5
  8373                           prodh	equ	0xFF4
  8374                           prodl	equ	0xFF3
  8375                           intcon	equ	0xFF2
  8376                           intcon2	equ	0xFF1
  8377                           intcon3	equ	0xFF0
  8378                           postinc0	equ	0xFEE
  8379                           wreg	equ	0xFE8
  8380                           postdec1	equ	0xFE5
  8381                           fsr1l	equ	0xFE1
  8382                           indf2	equ	0xFDF
  8383                           postinc2	equ	0xFDE
  8384                           postdec2	equ	0xFDD
  8385                           fsr2h	equ	0xFDA
  8386                           fsr2l	equ	0xFD9
  8387                           status	equ	0xFD8
  8388                           
  8389 ;; *************** function _strcpy *****************
  8390 ;; Defined at:
  8391 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8394 ;;		 -> printRTC@month(4), UI@month(4), 
  8395 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8396 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8397 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8398 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8399 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8400 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8401 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8402 ;;		 -> STR_8(4), 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8405 ;;		 -> printRTC@month(4), UI@month(4), 
  8406 ;; Return value:  Size  Location     Type
  8407 ;;                  2    0[BANK0 ] PTR unsigned char 
  8408 ;; Registers used:
  8409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8410 ;; Tracked objects:
  8411 ;;		On entry : 0/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8415 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;Total ram usage:        6 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:    7
  8422 ;; This function calls:
  8423 ;;		Nothing
  8424 ;; This function is called by:
  8425 ;;		_UI
  8426 ;;		_printRTC
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text24
  8431  00401E                     __ptext24:
  8432                           	opt stack 0
  8433  00401E                     _strcpy:
  8434                           	opt stack 20
  8435                           
  8436                           ;incstack = 0
  8437  00401E  C080  F084         	movff	strcpy@to,strcpy@cp
  8438  004022  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8439  004026  D006               	goto	l5414
  8440  004028                     l5412:
  8441  004028  0100               	movlb	0	; () banked
  8442  00402A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8443  00402C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8444  00402E  0100               	movlb	0	; () banked
  8445  004030  4B82               	infsnz	strcpy@from& (0+255),f,b
  8446  004032  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8447  004034                     l5414:
  8448  004034  C082  FFF6         	movff	strcpy@from,tblptrl
  8449  004038  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8450  00403C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8451  00403C  6AF8               	clrf	tblptru,c
  8452  00403E                     	endif
  8453  00403E                     	if	0	;tblptru may be non-zero
  8454  00403E                     	endif
  8455  00403E  C084  FFD9         	movff	strcpy@cp,fsr2l
  8456  004042  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8457  004046  0008               	tblrd		*
  8458  004048  CFF5 FFDF          	movff	tablat,indf2
  8459  00404C  50DF               	movf	indf2,w,c
  8460  00404E  B4D8               	btfsc	status,2,c
  8461  004050  0012               	return	
  8462  004052  D7EA               	goto	l5412
  8463  004054                     __end_of_strcpy:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodh	equ	0xFF4
  8470                           prodl	equ	0xFF3
  8471                           intcon	equ	0xFF2
  8472                           intcon2	equ	0xFF1
  8473                           intcon3	equ	0xFF0
  8474                           postinc0	equ	0xFEE
  8475                           wreg	equ	0xFE8
  8476                           postdec1	equ	0xFE5
  8477                           fsr1l	equ	0xFE1
  8478                           indf2	equ	0xFDF
  8479                           postinc2	equ	0xFDE
  8480                           postdec2	equ	0xFDD
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function _getRTC *****************
  8486 ;; Defined at:
  8487 ;;		line 44 in file "RTC.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  i               2    3[BANK0 ] int 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;Total ram usage:        2 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    9
  8508 ;; This function calls:
  8509 ;;		_I2C_Master_Read
  8510 ;;		_I2C_Master_Start
  8511 ;;		_I2C_Master_Stop
  8512 ;;		_I2C_Master_Write
  8513 ;; This function is called by:
  8514 ;;		_printRTC
  8515 ;;		_initSortTimer
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text25
  8520  00383C                     __ptext25:
  8521                           	opt stack 0
  8522  00383C                     _getRTC:
  8523                           	opt stack 18
  8524                           
  8525                           ;RTC.c: 48: I2C_Master_Start();
  8526                           
  8527                           ;incstack = 0
  8528  00383C  ECAB  F022         	call	_I2C_Master_Start	;wreg free
  8529                           
  8530                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8531  003840  0E00               	movlw	0
  8532  003842  0100               	movlb	0	; () banked
  8533  003844  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8534  003846  0ED0               	movlw	208
  8535  003848  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8536  00384A  EC99  F022         	call	_I2C_Master_Write	;wreg free
  8537                           
  8538                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8539  00384E  0E00               	movlw	0
  8540  003850  0100               	movlb	0	; () banked
  8541  003852  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8542  003854  0E00               	movlw	0
  8543  003856  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8544  003858  EC99  F022         	call	_I2C_Master_Write	;wreg free
  8545                           
  8546                           ;RTC.c: 51: I2C_Master_Stop();
  8547  00385C  ECA7  F022         	call	_I2C_Master_Stop	;wreg free
  8548                           
  8549                           ;RTC.c: 54: I2C_Master_Start();
  8550  003860  ECAB  F022         	call	_I2C_Master_Start	;wreg free
  8551                           
  8552                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8553  003864  0E00               	movlw	0
  8554  003866  0100               	movlb	0	; () banked
  8555  003868  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8556  00386A  0ED1               	movlw	209
  8557  00386C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8558  00386E  EC99  F022         	call	_I2C_Master_Write	;wreg free
  8559                           
  8560                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8561  003872  0E00               	movlw	0
  8562  003874  0100               	movlb	0	; () banked
  8563  003876  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8564  003878  0E00               	movlw	0
  8565  00387A  6F83               	movwf	getRTC@i& (0+255),b
  8566  00387C                     l5420:
  8567                           
  8568                           ; BSR set to: 0
  8569  00387C  0100               	movlb	0	; () banked
  8570  00387E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8571  003880  D008               	goto	l5424
  8572  003882  0100               	movlb	0	; () banked
  8573  003884  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8574  003886  E115               	bnz	l5430
  8575  003888  0E06               	movlw	6
  8576  00388A  0100               	movlb	0	; () banked
  8577  00388C  5D83               	subwf	getRTC@i& (0+255),w,b
  8578  00388E  B0D8               	btfsc	status,0,c
  8579  003890  D010               	goto	l5430
  8580  003892                     l5424:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8584  003892  0E24               	movlw	low _time
  8585  003894  0100               	movlb	0	; () banked
  8586  003896  2583               	addwf	getRTC@i& (0+255),w,b
  8587  003898  6ED9               	movwf	fsr2l,c
  8588  00389A  0E01               	movlw	high _time
  8589  00389C  0100               	movlb	0	; () banked
  8590  00389E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8591  0038A0  6EDA               	movwf	fsr2h,c
  8592  0038A2  0E01               	movlw	1
  8593  0038A4  EC36  F021         	call	_I2C_Master_Read
  8594  0038A8  6EDF               	movwf	indf2,c
  8595  0038AA  0100               	movlb	0	; () banked
  8596  0038AC  4B83               	infsnz	getRTC@i& (0+255),f,b
  8597  0038AE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8598  0038B0  D7E5               	goto	l5420
  8599  0038B2                     l5430:
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;RTC.c: 58: }
  8603                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8604  0038B2  0E00               	movlw	0
  8605  0038B4  EC36  F021         	call	_I2C_Master_Read
  8606  0038B8  0101               	movlb	1	; () banked
  8607  0038BA  6F2A               	movwf	(_time+6)& (0+255),b
  8608                           
  8609                           ;RTC.c: 60: I2C_Master_Stop();
  8610  0038BC  ECA7  F022         	call	_I2C_Master_Stop	;wreg free
  8611  0038C0  0012               	return		;funcret
  8612  0038C2                     __end_of_getRTC:
  8613                           	opt stack 0
  8614                           tblptru	equ	0xFF8
  8615                           tblptrh	equ	0xFF7
  8616                           tblptrl	equ	0xFF6
  8617                           tablat	equ	0xFF5
  8618                           prodh	equ	0xFF4
  8619                           prodl	equ	0xFF3
  8620                           intcon	equ	0xFF2
  8621                           intcon2	equ	0xFF1
  8622                           intcon3	equ	0xFF0
  8623                           postinc0	equ	0xFEE
  8624                           wreg	equ	0xFE8
  8625                           postdec1	equ	0xFE5
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           fsr2h	equ	0xFDA
  8631                           fsr2l	equ	0xFD9
  8632                           status	equ	0xFD8
  8633                           
  8634 ;; *************** function _I2C_Master_Write *****************
  8635 ;; Defined at:
  8636 ;;		line 49 in file "I2C.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;  d               2    1[BANK0 ] unsigned int 
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      void 
  8643 ;; Registers used:
  8644 ;;		wreg, status,2, status,0, cstack
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8650 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;Total ram usage:        2 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    8
  8657 ;; This function calls:
  8658 ;;		_I2C_Master_Wait
  8659 ;; This function is called by:
  8660 ;;		_loadRTC
  8661 ;;		_getRTC
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text26
  8666  004532                     __ptext26:
  8667                           	opt stack 0
  8668  004532                     _I2C_Master_Write:
  8669                           	opt stack 18
  8670                           
  8671                           ;I2C.c: 51: I2C_Master_Wait();
  8672                           
  8673                           ;incstack = 0
  8674  004532  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8675                           
  8676                           ;I2C.c: 52: SSPBUF = d;
  8677  004536  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8678  00453A  0012               	return		;funcret
  8679  00453C                     __end_of_I2C_Master_Write:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           intcon2	equ	0xFF1
  8689                           intcon3	equ	0xFF0
  8690                           postinc0	equ	0xFEE
  8691                           wreg	equ	0xFE8
  8692                           postdec1	equ	0xFE5
  8693                           fsr1l	equ	0xFE1
  8694                           indf2	equ	0xFDF
  8695                           postinc2	equ	0xFDE
  8696                           postdec2	equ	0xFDD
  8697                           fsr2h	equ	0xFDA
  8698                           fsr2l	equ	0xFD9
  8699                           status	equ	0xFD8
  8700                           
  8701 ;; *************** function _I2C_Master_Stop *****************
  8702 ;; Defined at:
  8703 ;;		line 43 in file "I2C.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;		None
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      void 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;Total ram usage:        0 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    8
  8724 ;; This function calls:
  8725 ;;		_I2C_Master_Wait
  8726 ;; This function is called by:
  8727 ;;		_loadRTC
  8728 ;;		_getRTC
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text27
  8733  00454E                     __ptext27:
  8734                           	opt stack 0
  8735  00454E                     _I2C_Master_Stop:
  8736                           	opt stack 18
  8737                           
  8738                           ;I2C.c: 45: I2C_Master_Wait();
  8739                           
  8740                           ;incstack = 0
  8741  00454E  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8742                           
  8743                           ;I2C.c: 46: PEN = 1;
  8744  004552  84C5               	bsf	4037,2,c	;volatile
  8745  004554  0012               	return		;funcret
  8746  004556                     __end_of_I2C_Master_Stop:
  8747                           	opt stack 0
  8748                           tblptru	equ	0xFF8
  8749                           tblptrh	equ	0xFF7
  8750                           tblptrl	equ	0xFF6
  8751                           tablat	equ	0xFF5
  8752                           prodh	equ	0xFF4
  8753                           prodl	equ	0xFF3
  8754                           intcon	equ	0xFF2
  8755                           intcon2	equ	0xFF1
  8756                           intcon3	equ	0xFF0
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           postdec1	equ	0xFE5
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _I2C_Master_Start *****************
  8769 ;; Defined at:
  8770 ;;		line 31 in file "I2C.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;		None
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;		None
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  1    wreg      void 
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;Total ram usage:        0 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    8
  8791 ;; This function calls:
  8792 ;;		_I2C_Master_Wait
  8793 ;; This function is called by:
  8794 ;;		_loadRTC
  8795 ;;		_getRTC
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text28
  8800  004556                     __ptext28:
  8801                           	opt stack 0
  8802  004556                     _I2C_Master_Start:
  8803                           	opt stack 18
  8804                           
  8805                           ;I2C.c: 33: I2C_Master_Wait();
  8806                           
  8807                           ;incstack = 0
  8808  004556  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8809                           
  8810                           ;I2C.c: 34: SEN = 1;
  8811  00455A  80C5               	bsf	4037,0,c	;volatile
  8812  00455C  0012               	return		;funcret
  8813  00455E                     __end_of_I2C_Master_Start:
  8814                           	opt stack 0
  8815                           tblptru	equ	0xFF8
  8816                           tblptrh	equ	0xFF7
  8817                           tblptrl	equ	0xFF6
  8818                           tablat	equ	0xFF5
  8819                           prodh	equ	0xFF4
  8820                           prodl	equ	0xFF3
  8821                           intcon	equ	0xFF2
  8822                           intcon2	equ	0xFF1
  8823                           intcon3	equ	0xFF0
  8824                           postinc0	equ	0xFEE
  8825                           wreg	equ	0xFE8
  8826                           postdec1	equ	0xFE5
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _I2C_Master_Read *****************
  8836 ;; Defined at:
  8837 ;;		line 55 in file "I2C.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  a               1    wreg     unsigned char 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  a               1    1[BANK0 ] unsigned char 
  8842 ;;  temp            1    2[BANK0 ] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      unsigned char 
  8845 ;; Registers used:
  8846 ;;		wreg, status,2, status,0, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;Total ram usage:        2 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    8
  8859 ;; This function calls:
  8860 ;;		_I2C_Master_Wait
  8861 ;; This function is called by:
  8862 ;;		_getRTC
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text29
  8867  00426C                     __ptext29:
  8868                           	opt stack 0
  8869  00426C                     _I2C_Master_Read:
  8870                           	opt stack 18
  8871                           
  8872                           ;incstack = 0
  8873                           ;I2C_Master_Read@a stored from wreg
  8874  00426C  0100               	movlb	0	; () banked
  8875  00426E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8876                           
  8877                           ;I2C.c: 57: unsigned char temp;
  8878                           ;I2C.c: 58: I2C_Master_Wait();
  8879  004270  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8880                           
  8881                           ;I2C.c: 59: RCEN = 1;
  8882  004274  86C5               	bsf	4037,3,c	;volatile
  8883                           
  8884                           ;I2C.c: 60: I2C_Master_Wait();
  8885  004276  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8886                           
  8887                           ;I2C.c: 61: temp = SSPBUF;
  8888  00427A  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8889                           
  8890                           ;I2C.c: 62: I2C_Master_Wait();
  8891  00427E  EC6A  F022         	call	_I2C_Master_Wait	;wreg free
  8892                           
  8893                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8894  004282  0100               	movlb	0	; () banked
  8895  004284  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8896  004286  0100               	movlb	0	; () banked
  8897  004288  A4D8               	btfss	status,2,c
  8898  00428A  D002               	goto	u3480
  8899  00428C  8AC5               	bsf	4037,5,c	;volatile
  8900  00428E  D001               	goto	l5114
  8901  004290                     u3480:
  8902  004290  9AC5               	bcf	4037,5,c	;volatile
  8903  004292                     l5114:
  8904                           
  8905                           ;I2C.c: 64: ACKEN = 1;
  8906  004292  88C5               	bsf	4037,4,c	;volatile
  8907                           
  8908                           ;I2C.c: 65: return temp;
  8909  004294  0100               	movlb	0	; () banked
  8910  004296  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8911  004298  0012               	return	
  8912  00429A                     __end_of_I2C_Master_Read:
  8913                           	opt stack 0
  8914                           tblptru	equ	0xFF8
  8915                           tblptrh	equ	0xFF7
  8916                           tblptrl	equ	0xFF6
  8917                           tablat	equ	0xFF5
  8918                           prodh	equ	0xFF4
  8919                           prodl	equ	0xFF3
  8920                           intcon	equ	0xFF2
  8921                           intcon2	equ	0xFF1
  8922                           intcon3	equ	0xFF0
  8923                           postinc0	equ	0xFEE
  8924                           wreg	equ	0xFE8
  8925                           postdec1	equ	0xFE5
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _I2C_Master_Wait *****************
  8935 ;; Defined at:
  8936 ;;		line 26 in file "I2C.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8954 ;;Total ram usage:        1 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    7
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_I2C_Master_Start
  8961 ;;		_I2C_Master_Stop
  8962 ;;		_I2C_Master_Write
  8963 ;;		_I2C_Master_Read
  8964 ;;		_I2C_Master_RepeatedStart
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           	psect	text30
  8969  0044D4                     __ptext30:
  8970                           	opt stack 0
  8971  0044D4                     _I2C_Master_Wait:
  8972                           	opt stack 18
  8973  0044D4                     l66:
  8974  0044D4  B4C7               	btfsc	4039,2,c	;volatile
  8975  0044D6  D7FE               	goto	l66
  8976  0044D8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8977  0044DC  0E1F               	movlw	31
  8978  0044DE  0100               	movlb	0	; () banked
  8979  0044E0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8980  0044E2  B4D8               	btfsc	status,2,c
  8981  0044E4  0012               	return	
  8982  0044E6  D7F6               	goto	l66
  8983  0044E8                     __end_of_I2C_Master_Wait:
  8984                           	opt stack 0
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           intcon	equ	0xFF2
  8992                           intcon2	equ	0xFF1
  8993                           intcon3	equ	0xFF0
  8994                           postinc0	equ	0xFEE
  8995                           wreg	equ	0xFE8
  8996                           postdec1	equ	0xFE5
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function _change_state_to_menu_22 *****************
  9006 ;; Defined at:
  9007 ;;		line 496 in file "UI.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        0 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:   10
  9028 ;; This function calls:
  9029 ;;		_lcdInst
  9030 ;;		_printf
  9031 ;; This function is called by:
  9032 ;;		_UI
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text31
  9037  003FAE                     __ptext31:
  9038                           	opt stack 0
  9039  003FAE                     _change_state_to_menu_22:
  9040                           	opt stack 19
  9041                           
  9042                           ;UI.c: 497: cur_state = 22;
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;incstack = 0
  9046  003FAE  0E00               	movlw	0
  9047  003FB0  0100               	movlb	0	; () banked
  9048  003FB2  6FDF               	movwf	(_cur_state+1)& (0+255),b
  9049  003FB4  0E16               	movlw	22
  9050  003FB6  6FDE               	movwf	_cur_state& (0+255),b
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;UI.c: 499: lcdInst(0b10000000);;
  9054  003FB8  0E80               	movlw	128
  9055  003FBA  EC85  F022         	call	_lcdInst
  9056                           
  9057                           ;UI.c: 500: printf("2. SORT        <");
  9058  003FBE  0EED               	movlw	low STR_34
  9059  003FC0  0100               	movlb	0	; () banked
  9060  003FC2  6F8E               	movwf	printf@f& (0+255),b
  9061  003FC4  0EFD               	movlw	high STR_34
  9062  003FC6  0100               	movlb	0	; () banked
  9063  003FC8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9064  003FCA  EC9C  F008         	call	_printf	;wreg free
  9065                           
  9066                           ;UI.c: 501: lcdInst(0b11000000);;
  9067  003FCE  0EC0               	movlw	192
  9068  003FD0  EC85  F022         	call	_lcdInst
  9069                           
  9070                           ;UI.c: 502: printf("3. LOGS         ");
  9071  003FD4  0E32               	movlw	low STR_36
  9072  003FD6  0100               	movlb	0	; () banked
  9073  003FD8  6F8E               	movwf	printf@f& (0+255),b
  9074  003FDA  0EFD               	movlw	high STR_36
  9075  003FDC  0100               	movlb	0	; () banked
  9076  003FDE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9077  003FE0  EC9C  F008         	call	_printf	;wreg free
  9078  003FE4  0012               	return		;funcret
  9079  003FE6                     __end_of_change_state_to_menu_22:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           intcon3	equ	0xFF0
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           postdec1	equ	0xFE5
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _change_state_to_menu_12 *****************
  9102 ;; Defined at:
  9103 ;;		line 488 in file "UI.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;		None
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;		None
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  1    wreg      void 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;Total ram usage:        0 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:   10
  9124 ;; This function calls:
  9125 ;;		_lcdInst
  9126 ;;		_printf
  9127 ;; This function is called by:
  9128 ;;		_UI
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           	psect	text32
  9133  003FE6                     __ptext32:
  9134                           	opt stack 0
  9135  003FE6                     _change_state_to_menu_12:
  9136                           	opt stack 19
  9137                           
  9138                           ;UI.c: 489: cur_state = 12;
  9139                           
  9140                           ;incstack = 0
  9141  003FE6  0E00               	movlw	0
  9142  003FE8  0100               	movlb	0	; () banked
  9143  003FEA  6FDF               	movwf	(_cur_state+1)& (0+255),b
  9144  003FEC  0E0C               	movlw	12
  9145  003FEE  6FDE               	movwf	_cur_state& (0+255),b
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;UI.c: 491: lcdInst(0b10000000);;
  9149  003FF0  0E80               	movlw	128
  9150  003FF2  EC85  F022         	call	_lcdInst
  9151                           
  9152                           ;UI.c: 492: printf("1. DATE/TIME    ");
  9153  003FF6  0E54               	movlw	low STR_33
  9154  003FF8  0100               	movlb	0	; () banked
  9155  003FFA  6F8E               	movwf	printf@f& (0+255),b
  9156  003FFC  0EFD               	movlw	high STR_33
  9157  003FFE  0100               	movlb	0	; () banked
  9158  004000  6F8F               	movwf	(printf@f+1)& (0+255),b
  9159  004002  EC9C  F008         	call	_printf	;wreg free
  9160                           
  9161                           ;UI.c: 493: lcdInst(0b11000000);;
  9162  004006  0EC0               	movlw	192
  9163  004008  EC85  F022         	call	_lcdInst
  9164                           
  9165                           ;UI.c: 494: printf("2. SORT        <");
  9166  00400C  0EED               	movlw	low STR_34
  9167  00400E  0100               	movlb	0	; () banked
  9168  004010  6F8E               	movwf	printf@f& (0+255),b
  9169  004012  0EFD               	movlw	high STR_34
  9170  004014  0100               	movlb	0	; () banked
  9171  004016  6F8F               	movwf	(printf@f+1)& (0+255),b
  9172  004018  EC9C  F008         	call	_printf	;wreg free
  9173  00401C  0012               	return		;funcret
  9174  00401E                     __end_of_change_state_to_menu_12:
  9175                           	opt stack 0
  9176                           tblptru	equ	0xFF8
  9177                           tblptrh	equ	0xFF7
  9178                           tblptrl	equ	0xFF6
  9179                           tablat	equ	0xFF5
  9180                           prodh	equ	0xFF4
  9181                           prodl	equ	0xFF3
  9182                           intcon	equ	0xFF2
  9183                           intcon2	equ	0xFF1
  9184                           intcon3	equ	0xFF0
  9185                           postinc0	equ	0xFEE
  9186                           wreg	equ	0xFE8
  9187                           postdec1	equ	0xFE5
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           fsr2h	equ	0xFDA
  9193                           fsr2l	equ	0xFD9
  9194                           status	equ	0xFD8
  9195                           
  9196 ;; *************** function ___awmod *****************
  9197 ;; Defined at:
  9198 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  dividend        2    0[BANK0 ] int 
  9201 ;;  divisor         2    2[BANK0 ] int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  sign            1    5[BANK0 ] unsigned char 
  9204 ;;  counter         1    4[BANK0 ] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  2    0[BANK0 ] int 
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9214 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;Total ram usage:        6 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    7
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_UI
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text33
  9229  0035F0                     __ptext33:
  9230                           	opt stack 0
  9231  0035F0                     ___awmod:
  9232                           	opt stack 22
  9233                           
  9234                           ;incstack = 0
  9235  0035F0  0E00               	movlw	0
  9236  0035F2  0100               	movlb	0	; () banked
  9237  0035F4  6F85               	movwf	___awmod@sign& (0+255),b
  9238                           
  9239                           ; BSR set to: 0
  9240  0035F6  0100               	movlb	0	; () banked
  9241  0035F8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9242  0035FA  D008               	goto	l7068
  9243                           
  9244                           ; BSR set to: 0
  9245  0035FC  0100               	movlb	0	; () banked
  9246  0035FE  6D80               	negf	___awmod@dividend& (0+255),b
  9247  003600  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9248  003602  B0D8               	btfsc	status,0,c
  9249  003604  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9250                           
  9251                           ; BSR set to: 0
  9252  003606  0E01               	movlw	1
  9253  003608  0100               	movlb	0	; () banked
  9254  00360A  6F85               	movwf	___awmod@sign& (0+255),b
  9255  00360C                     l7068:
  9256                           
  9257                           ; BSR set to: 0
  9258  00360C  0100               	movlb	0	; () banked
  9259  00360E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9260  003610  D005               	goto	l7072
  9261                           
  9262                           ; BSR set to: 0
  9263  003612  0100               	movlb	0	; () banked
  9264  003614  6D82               	negf	___awmod@divisor& (0+255),b
  9265  003616  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9266  003618  B0D8               	btfsc	status,0,c
  9267  00361A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9268  00361C                     l7072:
  9269                           
  9270                           ; BSR set to: 0
  9271  00361C  0100               	movlb	0	; () banked
  9272  00361E  5182               	movf	___awmod@divisor& (0+255),w,b
  9273  003620  0100               	movlb	0	; () banked
  9274  003622  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9275  003624  B4D8               	btfsc	status,2,c
  9276  003626  D026               	goto	l7088
  9277                           
  9278                           ; BSR set to: 0
  9279  003628  0E01               	movlw	1
  9280  00362A  0100               	movlb	0	; () banked
  9281  00362C  6F84               	movwf	___awmod@counter& (0+255),b
  9282  00362E  D006               	goto	l7078
  9283  003630                     l7076:
  9284                           
  9285                           ; BSR set to: 0
  9286  003630  0100               	movlb	0	; () banked
  9287  003632  90D8               	bcf	status,0,c
  9288  003634  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9289  003636  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9290  003638  0100               	movlb	0	; () banked
  9291  00363A  2B84               	incf	___awmod@counter& (0+255),f,b
  9292  00363C                     l7078:
  9293                           
  9294                           ; BSR set to: 0
  9295  00363C  0100               	movlb	0	; () banked
  9296  00363E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9297  003640  D7F7               	goto	l7076
  9298  003642                     l7080:
  9299                           
  9300                           ; BSR set to: 0
  9301  003642  0100               	movlb	0	; () banked
  9302  003644  5182               	movf	___awmod@divisor& (0+255),w,b
  9303  003646  0100               	movlb	0	; () banked
  9304  003648  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9305  00364A  0100               	movlb	0	; () banked
  9306  00364C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9307  00364E  0100               	movlb	0	; () banked
  9308  003650  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9309  003652  A0D8               	btfss	status,0,c
  9310  003654  D008               	goto	l7084
  9311                           
  9312                           ; BSR set to: 0
  9313  003656  0100               	movlb	0	; () banked
  9314  003658  5182               	movf	___awmod@divisor& (0+255),w,b
  9315  00365A  0100               	movlb	0	; () banked
  9316  00365C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9317  00365E  0100               	movlb	0	; () banked
  9318  003660  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9319  003662  0100               	movlb	0	; () banked
  9320  003664  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9321  003666                     l7084:
  9322                           
  9323                           ; BSR set to: 0
  9324  003666  0100               	movlb	0	; () banked
  9325  003668  90D8               	bcf	status,0,c
  9326  00366A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9327  00366C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9328                           
  9329                           ; BSR set to: 0
  9330  00366E  0100               	movlb	0	; () banked
  9331  003670  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9332  003672  D7E7               	goto	l7080
  9333  003674                     l7088:
  9334                           
  9335                           ; BSR set to: 0
  9336  003674  0100               	movlb	0	; () banked
  9337  003676  5185               	movf	___awmod@sign& (0+255),w,b
  9338  003678  0100               	movlb	0	; () banked
  9339  00367A  B4D8               	btfsc	status,2,c
  9340  00367C  D005               	goto	l7092
  9341                           
  9342                           ; BSR set to: 0
  9343  00367E  0100               	movlb	0	; () banked
  9344  003680  6D80               	negf	___awmod@dividend& (0+255),b
  9345  003682  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9346  003684  B0D8               	btfsc	status,0,c
  9347  003686  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9348  003688                     l7092:
  9349                           
  9350                           ; BSR set to: 0
  9351  003688  C080  F080         	movff	___awmod@dividend,?___awmod
  9352  00368C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9353  003690  0012               	return	
  9354  003692                     __end_of___awmod:
  9355                           	opt stack 0
  9356                           tblptru	equ	0xFF8
  9357                           tblptrh	equ	0xFF7
  9358                           tblptrl	equ	0xFF6
  9359                           tablat	equ	0xFF5
  9360                           prodh	equ	0xFF4
  9361                           prodl	equ	0xFF3
  9362                           intcon	equ	0xFF2
  9363                           intcon2	equ	0xFF1
  9364                           intcon3	equ	0xFF0
  9365                           postinc0	equ	0xFEE
  9366                           wreg	equ	0xFE8
  9367                           postdec1	equ	0xFE5
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           
  9376 ;; *************** function ___awdiv *****************
  9377 ;; Defined at:
  9378 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;  dividend        2    6[BANK0 ] int 
  9381 ;;  divisor         2    8[BANK0 ] int 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  quotient        2   12[BANK0 ] int 
  9384 ;;  sign            1   11[BANK0 ] unsigned char 
  9385 ;;  counter         1   10[BANK0 ] unsigned char 
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  2    6[BANK0 ] int 
  9388 ;; Registers used:
  9389 ;;		wreg, status,2, status,0
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;Total ram usage:        8 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    7
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_UI
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text34
  9410  0033CC                     __ptext34:
  9411                           	opt stack 0
  9412  0033CC                     ___awdiv:
  9413                           	opt stack 22
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;incstack = 0
  9417  0033CC  0E00               	movlw	0
  9418  0033CE  0100               	movlb	0	; () banked
  9419  0033D0  6F8B               	movwf	___awdiv@sign& (0+255),b
  9420                           
  9421                           ; BSR set to: 0
  9422  0033D2  0100               	movlb	0	; () banked
  9423  0033D4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9424  0033D6  D008               	goto	l7024
  9425                           
  9426                           ; BSR set to: 0
  9427  0033D8  0100               	movlb	0	; () banked
  9428  0033DA  6D88               	negf	___awdiv@divisor& (0+255),b
  9429  0033DC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9430  0033DE  B0D8               	btfsc	status,0,c
  9431  0033E0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9432                           
  9433                           ; BSR set to: 0
  9434  0033E2  0E01               	movlw	1
  9435  0033E4  0100               	movlb	0	; () banked
  9436  0033E6  6F8B               	movwf	___awdiv@sign& (0+255),b
  9437  0033E8                     l7024:
  9438                           
  9439                           ; BSR set to: 0
  9440  0033E8  0100               	movlb	0	; () banked
  9441  0033EA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9442  0033EC  D008               	goto	l7030
  9443                           
  9444                           ; BSR set to: 0
  9445  0033EE  0100               	movlb	0	; () banked
  9446  0033F0  6D86               	negf	___awdiv@dividend& (0+255),b
  9447  0033F2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9448  0033F4  B0D8               	btfsc	status,0,c
  9449  0033F6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9450                           
  9451                           ; BSR set to: 0
  9452  0033F8  0E01               	movlw	1
  9453  0033FA  0100               	movlb	0	; () banked
  9454  0033FC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9455  0033FE                     l7030:
  9456                           
  9457                           ; BSR set to: 0
  9458  0033FE  0E00               	movlw	0
  9459  003400  0100               	movlb	0	; () banked
  9460  003402  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9461  003404  0E00               	movlw	0
  9462  003406  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9463                           
  9464                           ; BSR set to: 0
  9465  003408  0100               	movlb	0	; () banked
  9466  00340A  5188               	movf	___awdiv@divisor& (0+255),w,b
  9467  00340C  0100               	movlb	0	; () banked
  9468  00340E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9469  003410  B4D8               	btfsc	status,2,c
  9470  003412  D02C               	goto	l7052
  9471                           
  9472                           ; BSR set to: 0
  9473  003414  0E01               	movlw	1
  9474  003416  0100               	movlb	0	; () banked
  9475  003418  6F8A               	movwf	___awdiv@counter& (0+255),b
  9476  00341A  D006               	goto	l7038
  9477  00341C                     l7036:
  9478                           
  9479                           ; BSR set to: 0
  9480  00341C  0100               	movlb	0	; () banked
  9481  00341E  90D8               	bcf	status,0,c
  9482  003420  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9483  003422  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9484  003424  0100               	movlb	0	; () banked
  9485  003426  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9486  003428                     l7038:
  9487                           
  9488                           ; BSR set to: 0
  9489  003428  0100               	movlb	0	; () banked
  9490  00342A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9491  00342C  D7F7               	goto	l7036
  9492  00342E                     l7040:
  9493                           
  9494                           ; BSR set to: 0
  9495  00342E  0100               	movlb	0	; () banked
  9496  003430  90D8               	bcf	status,0,c
  9497  003432  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9498  003434  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9499                           
  9500                           ; BSR set to: 0
  9501  003436  0100               	movlb	0	; () banked
  9502  003438  5188               	movf	___awdiv@divisor& (0+255),w,b
  9503  00343A  0100               	movlb	0	; () banked
  9504  00343C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9505  00343E  0100               	movlb	0	; () banked
  9506  003440  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9507  003442  0100               	movlb	0	; () banked
  9508  003444  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9509  003446  A0D8               	btfss	status,0,c
  9510  003448  D00A               	goto	l7048
  9511                           
  9512                           ; BSR set to: 0
  9513  00344A  0100               	movlb	0	; () banked
  9514  00344C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9515  00344E  0100               	movlb	0	; () banked
  9516  003450  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9517  003452  0100               	movlb	0	; () banked
  9518  003454  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9519  003456  0100               	movlb	0	; () banked
  9520  003458  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9521                           
  9522                           ; BSR set to: 0
  9523  00345A  0100               	movlb	0	; () banked
  9524  00345C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9525  00345E                     l7048:
  9526                           
  9527                           ; BSR set to: 0
  9528  00345E  0100               	movlb	0	; () banked
  9529  003460  90D8               	bcf	status,0,c
  9530  003462  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9531  003464  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9532                           
  9533                           ; BSR set to: 0
  9534  003466  0100               	movlb	0	; () banked
  9535  003468  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9536  00346A  D7E1               	goto	l7040
  9537  00346C                     l7052:
  9538                           
  9539                           ; BSR set to: 0
  9540  00346C  0100               	movlb	0	; () banked
  9541  00346E  518B               	movf	___awdiv@sign& (0+255),w,b
  9542  003470  0100               	movlb	0	; () banked
  9543  003472  B4D8               	btfsc	status,2,c
  9544  003474  D005               	goto	l7056
  9545                           
  9546                           ; BSR set to: 0
  9547  003476  0100               	movlb	0	; () banked
  9548  003478  6D8C               	negf	___awdiv@quotient& (0+255),b
  9549  00347A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9550  00347C  B0D8               	btfsc	status,0,c
  9551  00347E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9552  003480                     l7056:
  9553                           
  9554                           ; BSR set to: 0
  9555  003480  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9556  003484  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9557  003488  0012               	return	
  9558  00348A                     __end_of___awdiv:
  9559                           	opt stack 0
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           intcon	equ	0xFF2
  9567                           intcon2	equ	0xFF1
  9568                           intcon3	equ	0xFF0
  9569                           postinc0	equ	0xFEE
  9570                           wreg	equ	0xFE8
  9571                           postdec1	equ	0xFE5
  9572                           fsr1l	equ	0xFE1
  9573                           indf2	equ	0xFDF
  9574                           postinc2	equ	0xFDE
  9575                           postdec2	equ	0xFDD
  9576                           fsr2h	equ	0xFDA
  9577                           fsr2l	equ	0xFD9
  9578                           status	equ	0xFD8
  9579                           
  9580 ;; *************** function _Test *****************
  9581 ;; Defined at:
  9582 ;;		line 27 in file "Test.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;		None
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      void 
  9589 ;; Registers used:
  9590 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;Total ram usage:        2 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:   11
  9603 ;; This function calls:
  9604 ;;		_EEPROMTest
  9605 ;;		_PortTestA5
  9606 ;;		_PortTests
  9607 ;;		_SolenoidTestA5
  9608 ;;		_ToggleTestA5
  9609 ;;		_actuatorTest
  9610 ;;		_algorithmTest
  9611 ;;		_lcdInst
  9612 ;;		_printf
  9613 ;;		_sensorTest
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text35
  9620  003112                     __ptext35:
  9621                           	opt stack 0
  9622  003112                     _Test:
  9623                           	opt stack 19
  9624  003112                     
  9625                           ;Test.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9626  003112  0E01               	movlw	1
  9627  003114  EC85  F022         	call	_lcdInst
  9628  003118  0E68               	movlw	104
  9629  00311A  0100               	movlb	0	; () banked
  9630  00311C  6FC6               	movwf	??_Test& (0+255),b
  9631  00311E  0EE4               	movlw	228
  9632  003120                     u7337:
  9633  003120  2EE8               	decfsz	wreg,f,c
  9634  003122  D7FE               	bra	u7337
  9635  003124  2FC6               	decfsz	??_Test& (0+255),f,b
  9636  003126  D7FC               	bra	u7337
  9637  003128  F000               	nop	
  9638  00312A  0E80               	movlw	128
  9639  00312C  EC85  F022         	call	_lcdInst
  9640                           
  9641                           ;Test.c: 31: printf("1.ALG|2.SNR|3.AC");
  9642  003130  0EAA               	movlw	low STR_68
  9643  003132  0100               	movlb	0	; () banked
  9644  003134  6F8E               	movwf	printf@f& (0+255),b
  9645  003136  0EFC               	movlw	high STR_68
  9646  003138  0100               	movlb	0	; () banked
  9647  00313A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9648  00313C  EC9C  F008         	call	_printf	;wreg free
  9649                           
  9650                           ;Test.c: 32: lcdInst(0b11000000);;
  9651  003140  0EC0               	movlw	192
  9652  003142  EC85  F022         	call	_lcdInst
  9653                           
  9654                           ;Test.c: 33: printf("4.HI|5.TOG|6.EEP");
  9655  003146  0EDD               	movlw	low STR_69
  9656  003148  0100               	movlb	0	; () banked
  9657  00314A  6F8E               	movwf	printf@f& (0+255),b
  9658  00314C  0EFC               	movlw	high STR_69
  9659  00314E  0100               	movlb	0	; () banked
  9660  003150  6F8F               	movwf	(printf@f+1)& (0+255),b
  9661  003152  EC9C  F008         	call	_printf	;wreg free
  9662                           
  9663                           ;Test.c: 34: _delay((unsigned long)((100)*(32000000/4000.0)));
  9664  003156  0E05               	movlw	5
  9665  003158  0100               	movlb	0	; () banked
  9666  00315A  6FC7               	movwf	(??_Test+1)& (0+255),b
  9667  00315C  0E0F               	movlw	15
  9668  00315E  0100               	movlb	0	; () banked
  9669  003160  6FC6               	movwf	??_Test& (0+255),b
  9670  003162  0EF1               	movlw	241
  9671  003164                     u7347:
  9672  003164  2EE8               	decfsz	wreg,f,c
  9673  003166  D7FE               	bra	u7347
  9674  003168  2FC6               	decfsz	??_Test& (0+255),f,b
  9675  00316A  D7FC               	bra	u7347
  9676  00316C  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9677  00316E  D7FA               	bra	u7347
  9678  003170                     l1013:
  9679  003170  A281               	btfss	3969,1,c	;volatile
  9680  003172  D7FE               	goto	l1013
  9681                           
  9682                           ;Test.c: 36: var = PORTB >> 4;
  9683  003174  CF81 F0C6          	movff	3969,??_Test	;volatile
  9684  003178  0100               	movlb	0	; () banked
  9685  00317A  3BC6               	swapf	??_Test& (0+255),f,b
  9686  00317C  0E0F               	movlw	15
  9687  00317E  17C6               	andwf	??_Test& (0+255),f,b
  9688  003180  0100               	movlb	0	; () banked
  9689  003182  51C6               	movf	??_Test& (0+255),w,b
  9690  003184  0100               	movlb	0	; () banked
  9691  003186  6FFA               	movwf	_var& (0+255),b
  9692  003188  6BFB               	clrf	(_var+1)& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;Test.c: 37: var++;
  9696  00318A  0100               	movlb	0	; () banked
  9697  00318C  4BFA               	infsnz	_var& (0+255),f,b
  9698  00318E  2BFB               	incf	(_var+1)& (0+255),f,b
  9699  003190                     l1016:
  9700  003190  A281               	btfss	3969,1,c	;volatile
  9701  003192  D019               	goto	l7786
  9702  003194  D7FD               	goto	l1016
  9703  003196                     l7768:
  9704                           
  9705                           ;Test.c: 41: algorithmTest();
  9706  003196  EC7B  F019         	call	_algorithmTest	;wreg free
  9707                           
  9708                           ;Test.c: 42: break;
  9709  00319A  D7BB               	goto	l7750
  9710  00319C                     l7770:
  9711                           
  9712                           ;Test.c: 44: sensorTest();
  9713  00319C  EC2F  F014         	call	_sensorTest	;wreg free
  9714                           
  9715                           ;Test.c: 45: break;
  9716  0031A0  D7B8               	goto	l7750
  9717  0031A2                     l7772:
  9718                           
  9719                           ;Test.c: 47: actuatorTest();
  9720  0031A2  EC5C  F004         	call	_actuatorTest	;wreg free
  9721                           
  9722                           ;Test.c: 48: break;
  9723  0031A6  D7B5               	goto	l7750
  9724  0031A8                     l7774:
  9725                           
  9726                           ;Test.c: 50: PortTestA5();
  9727  0031A8  EC4A  F01E         	call	_PortTestA5	;wreg free
  9728                           
  9729                           ;Test.c: 51: break;
  9730  0031AC  D7B2               	goto	l7750
  9731  0031AE                     l7776:
  9732                           
  9733                           ;Test.c: 53: ToggleTestA5();
  9734  0031AE  ECDA  F01B         	call	_ToggleTestA5	;wreg free
  9735                           
  9736                           ;Test.c: 54: break;
  9737  0031B2  D7AF               	goto	l7750
  9738  0031B4                     l7778:
  9739                           
  9740                           ;Test.c: 56: EEPROMTest();
  9741  0031B4  ECB7  F022         	call	_EEPROMTest	;wreg free
  9742                           
  9743                           ;Test.c: 57: break;
  9744  0031B8  D7AC               	goto	l7750
  9745  0031BA                     l7780:
  9746                           
  9747                           ;Test.c: 59: SolenoidTestA5();
  9748  0031BA  EC0A  F018         	call	_SolenoidTestA5	;wreg free
  9749                           
  9750                           ;Test.c: 60: break;
  9751  0031BE  D7A9               	goto	l7750
  9752  0031C0                     l7782:
  9753                           
  9754                           ;Test.c: 62: PortTests();
  9755  0031C0  EC61  F01C         	call	_PortTests	;wreg free
  9756                           
  9757                           ;Test.c: 66: }
  9758                           
  9759                           ;Test.c: 65: break;
  9760                           
  9761                           ;Test.c: 64: default:
  9762                           
  9763                           ;Test.c: 63: break;
  9764  0031C4  D7A6               	goto	l7750
  9765  0031C6                     l7786:
  9766  0031C6  C0FA  F0C6         	movff	_var,??_Test
  9767  0031CA  C0FB  F0C7         	movff	_var+1,??_Test+1
  9768                           
  9769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9770                           ; Switch size 1, requested type "space"
  9771                           ; Number of cases is 1, Range of values is 0 to 0
  9772                           ; switch strategies available:
  9773                           ; Name         Instructions Cycles
  9774                           ; simple_byte            4     3 (average)
  9775                           ;	Chosen strategy is simple_byte
  9776  0031CE  0100               	movlb	0	; () banked
  9777  0031D0  51C7               	movf	(??_Test+1)& (0+255),w,b
  9778  0031D2  0A00               	xorlw	0	; case 0
  9779  0031D4  A4D8               	btfss	status,2,c
  9780  0031D6  D79D               	goto	l7750
  9781                           
  9782                           ; BSR set to: 0
  9783                           ; Switch size 1, requested type "space"
  9784                           ; Number of cases is 8, Range of values is 1 to 9
  9785                           ; switch strategies available:
  9786                           ; Name         Instructions Cycles
  9787                           ; simple_byte           25    13 (average)
  9788                           ;	Chosen strategy is simple_byte
  9789  0031D8  0100               	movlb	0	; () banked
  9790  0031DA  51C6               	movf	??_Test& (0+255),w,b
  9791  0031DC  0A01               	xorlw	1	; case 1
  9792  0031DE  B4D8               	btfsc	status,2,c
  9793  0031E0  D7DA               	goto	l7768
  9794  0031E2  0A03               	xorlw	3	; case 2
  9795  0031E4  B4D8               	btfsc	status,2,c
  9796  0031E6  D7DA               	goto	l7770
  9797  0031E8  0A01               	xorlw	1	; case 3
  9798  0031EA  B4D8               	btfsc	status,2,c
  9799  0031EC  D7DA               	goto	l7772
  9800  0031EE  0A06               	xorlw	6	; case 5
  9801  0031F0  B4D8               	btfsc	status,2,c
  9802  0031F2  D7DA               	goto	l7774
  9803  0031F4  0A03               	xorlw	3	; case 6
  9804  0031F6  B4D8               	btfsc	status,2,c
  9805  0031F8  D7DA               	goto	l7776
  9806  0031FA  0A01               	xorlw	1	; case 7
  9807  0031FC  B4D8               	btfsc	status,2,c
  9808  0031FE  D7DA               	goto	l7778
  9809  003200  0A0F               	xorlw	15	; case 8
  9810  003202  B4D8               	btfsc	status,2,c
  9811  003204  D7DA               	goto	l7780
  9812  003206  0A01               	xorlw	1	; case 9
  9813  003208  B4D8               	btfsc	status,2,c
  9814  00320A  D7DA               	goto	l7782
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819  00320C  D782               	goto	l7750
  9820  00320E                     __end_of_Test:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           intcon	equ	0xFF2
  9829                           intcon2	equ	0xFF1
  9830                           intcon3	equ	0xFF0
  9831                           postinc0	equ	0xFEE
  9832                           wreg	equ	0xFE8
  9833                           postdec1	equ	0xFE5
  9834                           fsr1l	equ	0xFE1
  9835                           indf2	equ	0xFDF
  9836                           postinc2	equ	0xFDE
  9837                           postdec2	equ	0xFDD
  9838                           fsr2h	equ	0xFDA
  9839                           fsr2l	equ	0xFD9
  9840                           status	equ	0xFD8
  9841                           
  9842 ;; *************** function _sensorTest *****************
  9843 ;; Defined at:
  9844 ;;		line 114 in file "Test.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;		None
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;  on              2   45[BANK0 ] int 
  9849 ;; Return value:  Size  Location     Type
  9850 ;;                  1    wreg      void 
  9851 ;; Registers used:
  9852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;Total ram usage:        4 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:   10
  9865 ;; This function calls:
  9866 ;;		_lcdInst
  9867 ;;		_printf
  9868 ;;		_readIR
  9869 ;;		_readMAG
  9870 ;; This function is called by:
  9871 ;;		_Test
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875                           	psect	text36
  9876  00285E                     __ptext36:
  9877                           	opt stack 0
  9878  00285E                     _sensorTest:
  9879                           	opt stack 19
  9880                           
  9881                           ;Test.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;incstack = 0
  9885  00285E  0E01               	movlw	1
  9886  002860  EC85  F022         	call	_lcdInst
  9887  002864  0E68               	movlw	104
  9888  002866  0100               	movlb	0	; () banked
  9889  002868  6FAB               	movwf	??_sensorTest& (0+255),b
  9890  00286A  0EE4               	movlw	228
  9891  00286C                     u7357:
  9892  00286C  2EE8               	decfsz	wreg,f,c
  9893  00286E  D7FE               	bra	u7357
  9894  002870  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9895  002872  D7FC               	bra	u7357
  9896  002874  F000               	nop	
  9897  002876  0E80               	movlw	128
  9898  002878  EC85  F022         	call	_lcdInst
  9899                           
  9900                           ;Test.c: 117: printf("SENSORS");
  9901  00287C  0EAE               	movlw	low STR_77
  9902  00287E  0100               	movlb	0	; () banked
  9903  002880  6F8E               	movwf	printf@f& (0+255),b
  9904  002882  0EFF               	movlw	high STR_77
  9905  002884  0100               	movlb	0	; () banked
  9906  002886  6F8F               	movwf	(printf@f+1)& (0+255),b
  9907  002888  EC9C  F008         	call	_printf	;wreg free
  9908                           
  9909                           ;Test.c: 118: lcdInst(0b11000000);;
  9910  00288C  0EC0               	movlw	192
  9911  00288E  EC85  F022         	call	_lcdInst
  9912                           
  9913                           ;Test.c: 119: printf("PUSH TO START");
  9914  002892  0E12               	movlw	low STR_71
  9915  002894  0100               	movlb	0	; () banked
  9916  002896  6F8E               	movwf	printf@f& (0+255),b
  9917  002898  0EFF               	movlw	high STR_71
  9918  00289A  0100               	movlb	0	; () banked
  9919  00289C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9920  00289E  EC9C  F008         	call	_printf	;wreg free
  9921                           
  9922                           ;Test.c: 120: _delay((unsigned long)((100)*(32000000/4000.0)));
  9923  0028A2  0E05               	movlw	5
  9924  0028A4  0100               	movlb	0	; () banked
  9925  0028A6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9926  0028A8  0E0F               	movlw	15
  9927  0028AA  0100               	movlb	0	; () banked
  9928  0028AC  6FAB               	movwf	??_sensorTest& (0+255),b
  9929  0028AE  0EF1               	movlw	241
  9930  0028B0                     u7367:
  9931  0028B0  2EE8               	decfsz	wreg,f,c
  9932  0028B2  D7FE               	bra	u7367
  9933  0028B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9934  0028B6  D7FC               	bra	u7367
  9935  0028B8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9936  0028BA  D7FA               	bra	u7367
  9937  0028BC                     l1044:
  9938  0028BC  A281               	btfss	3969,1,c	;volatile
  9939  0028BE  D7FE               	goto	l1044
  9940  0028C0                     l1047:
  9941  0028C0  B281               	btfsc	3969,1,c	;volatile
  9942  0028C2  D7FE               	goto	l1047
  9943                           
  9944                           ;Test.c: 123: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9945  0028C4  0E01               	movlw	1
  9946  0028C6  EC85  F022         	call	_lcdInst
  9947  0028CA  0E68               	movlw	104
  9948  0028CC  0100               	movlb	0	; () banked
  9949  0028CE  6FAB               	movwf	??_sensorTest& (0+255),b
  9950  0028D0  0EE4               	movlw	228
  9951  0028D2                     u7377:
  9952  0028D2  2EE8               	decfsz	wreg,f,c
  9953  0028D4  D7FE               	bra	u7377
  9954  0028D6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9955  0028D8  D7FC               	bra	u7377
  9956  0028DA  F000               	nop	
  9957  0028DC  0E80               	movlw	128
  9958  0028DE  EC85  F022         	call	_lcdInst
  9959                           
  9960                           ;Test.c: 128: printf("TST: IR SNSR");
  9961  0028E2  0E3C               	movlw	low STR_79
  9962  0028E4  0100               	movlb	0	; () banked
  9963  0028E6  6F8E               	movwf	printf@f& (0+255),b
  9964  0028E8  0EFF               	movlw	high STR_79
  9965  0028EA  0100               	movlb	0	; () banked
  9966  0028EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9967  0028EE  EC9C  F008         	call	_printf	;wreg free
  9968                           
  9969                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  9970  0028F2  0E05               	movlw	5
  9971  0028F4  0100               	movlb	0	; () banked
  9972  0028F6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9973  0028F8  0E0F               	movlw	15
  9974  0028FA  0100               	movlb	0	; () banked
  9975  0028FC  6FAB               	movwf	??_sensorTest& (0+255),b
  9976  0028FE  0EF1               	movlw	241
  9977  002900                     u7387:
  9978  002900  2EE8               	decfsz	wreg,f,c
  9979  002902  D7FE               	bra	u7387
  9980  002904  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9981  002906  D7FC               	bra	u7387
  9982  002908  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9983  00290A  D7FA               	bra	u7387
  9984                           
  9985                           ;Test.c: 130: int on = 0;
  9986  00290C  0E00               	movlw	0
  9987  00290E  0100               	movlb	0	; () banked
  9988  002910  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9989  002912  0E00               	movlw	0
  9990  002914  6FAD               	movwf	sensorTest@on& (0+255),b
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;Test.c: 132: while(PORTBbits.RB1 == 0){
  9994                           
  9995                           ;Test.c: 131: while(1){
  9996  002916  D021               	goto	l6466
  9997  002918                     l6460:
  9998                           
  9999                           ;Test.c: 133: readIR();
 10000  002918  EC6D  F01F         	call	_readIR	;wreg free
 10001                           
 10002                           ;Test.c: 134: lcdInst(0b10000000);;
 10003  00291C  0E80               	movlw	128
 10004  00291E  EC85  F022         	call	_lcdInst
 10005                           
 10006                           ;Test.c: 135: lcdInst(0b11000000);;
 10007  002922  0EC0               	movlw	192
 10008  002924  EC85  F022         	call	_lcdInst
 10009                           
 10010                           ;Test.c: 136: printf("IR_signal: %d ", IR_signal);
 10011  002928  0E61               	movlw	low STR_80
 10012  00292A  0100               	movlb	0	; () banked
 10013  00292C  6F8E               	movwf	printf@f& (0+255),b
 10014  00292E  0EFE               	movlw	high STR_80
 10015  002930  0100               	movlb	0	; () banked
 10016  002932  6F8F               	movwf	(printf@f+1)& (0+255),b
 10017  002934  C0DA  F090         	movff	_IR_signal,?_printf+2
 10018  002938  C0DB  F091         	movff	_IR_signal+1,?_printf+3
 10019  00293C  EC9C  F008         	call	_printf	;wreg free
 10020                           
 10021                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
 10022  002940  0E05               	movlw	5
 10023  002942  0100               	movlb	0	; () banked
 10024  002944  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10025  002946  0E0F               	movlw	15
 10026  002948  0100               	movlb	0	; () banked
 10027  00294A  6FAB               	movwf	??_sensorTest& (0+255),b
 10028  00294C  0EF1               	movlw	241
 10029  00294E                     u7397:
 10030  00294E  2EE8               	decfsz	wreg,f,c
 10031  002950  D7FE               	bra	u7397
 10032  002952  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10033  002954  D7FC               	bra	u7397
 10034  002956  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10035  002958  D7FA               	bra	u7397
 10036  00295A                     l6466:
 10037  00295A  A281               	btfss	3969,1,c	;volatile
 10038  00295C  D7DD               	goto	l6460
 10039                           
 10040                           ;Test.c: 138: }
 10041                           ;Test.c: 139: if(on == 0){
 10042  00295E  0100               	movlb	0	; () banked
 10043  002960  51AD               	movf	sensorTest@on& (0+255),w,b
 10044  002962  0100               	movlb	0	; () banked
 10045  002964  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
 10046  002966  A4D8               	btfss	status,2,c
 10047  002968  D007               	goto	l6474
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;Test.c: 140: on = 1;
 10051  00296A  0E00               	movlw	0
 10052  00296C  0100               	movlb	0	; () banked
 10053  00296E  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
 10054  002970  0E01               	movlw	1
 10055  002972  6FAD               	movwf	sensorTest@on& (0+255),b
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;Test.c: 141: LATAbits.LATA5 = 1;
 10059  002974  8A89               	bsf	3977,5,c	;volatile
 10060                           
 10061                           ;Test.c: 142: }
 10062  002976  D006               	goto	l1056
 10063  002978                     l6474:
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;Test.c: 143: else{
 10067                           ;Test.c: 144: on = 0;
 10068  002978  0E00               	movlw	0
 10069  00297A  0100               	movlb	0	; () banked
 10070  00297C  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
 10071  00297E  0E00               	movlw	0
 10072  002980  6FAD               	movwf	sensorTest@on& (0+255),b
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;Test.c: 145: LATAbits.LATA5 = 0;
 10076  002982  9A89               	bcf	3977,5,c	;volatile
 10077  002984                     l1056:
 10078  002984  A281               	btfss	3969,1,c	;volatile
 10079  002986  D7E9               	goto	l6466
 10080  002988  D7FD               	goto	l1056
 10081                           
 10082                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
 10083                           
 10084                           ;Test.c: 148: }
 10085                           ;Test.c: 154: printf("TST: MAGNETISM");
 10086  00298A  0E05               	movlw	5
 10087  00298C  0100               	movlb	0	; () banked
 10088  00298E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10089  002990  0E0F               	movlw	15
 10090  002992  0100               	movlb	0	; () banked
 10091  002994  6FAB               	movwf	??_sensorTest& (0+255),b
 10092  002996  0EF1               	movlw	241
 10093  002998                     u7407:
 10094  002998  2EE8               	decfsz	wreg,f,c
 10095  00299A  D7FE               	bra	u7407
 10096  00299C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10097  00299E  D7FC               	bra	u7407
 10098  0029A0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10099  0029A2  D7FA               	bra	u7407
 10100                           
 10101                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
 10102  0029A4  D021               	goto	l6488
 10103  0029A6                     l6482:
 10104                           
 10105                           ;Test.c: 157: readMAG();
 10106  0029A6  EC47  F01F         	call	_readMAG	;wreg free
 10107                           
 10108                           ;Test.c: 158: lcdInst(0b10000000);;
 10109  0029AA  0E80               	movlw	128
 10110  0029AC  EC85  F022         	call	_lcdInst
 10111                           
 10112                           ;Test.c: 159: lcdInst(0b11000000);;
 10113  0029B0  0EC0               	movlw	192
 10114  0029B2  EC85  F022         	call	_lcdInst
 10115                           
 10116                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
 10117  0029B6  0E31               	movlw	low STR_82
 10118  0029B8  0100               	movlb	0	; () banked
 10119  0029BA  6F8E               	movwf	printf@f& (0+255),b
 10120  0029BC  0EFE               	movlw	high STR_82
 10121  0029BE  0100               	movlb	0	; () banked
 10122  0029C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10123  0029C2  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10124  0029C6  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10125  0029CA  EC9C  F008         	call	_printf	;wreg free
 10126                           
 10127                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10128  0029CE  0E05               	movlw	5
 10129  0029D0  0100               	movlb	0	; () banked
 10130  0029D2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10131  0029D4  0E0F               	movlw	15
 10132  0029D6  0100               	movlb	0	; () banked
 10133  0029D8  6FAB               	movwf	??_sensorTest& (0+255),b
 10134  0029DA  0EF1               	movlw	241
 10135  0029DC                     u7417:
 10136  0029DC  2EE8               	decfsz	wreg,f,c
 10137  0029DE  D7FE               	bra	u7417
 10138  0029E0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10139  0029E2  D7FC               	bra	u7417
 10140  0029E4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10141  0029E6  D7FA               	bra	u7417
 10142  0029E8                     l6488:
 10143  0029E8  B281               	btfsc	3969,1,c	;volatile
 10144  0029EA  0012               	return	
 10145  0029EC  D7DC               	goto	l6482
 10146  0029EE                     __end_of_sensorTest:
 10147                           	opt stack 0
 10148                           tblptru	equ	0xFF8
 10149                           tblptrh	equ	0xFF7
 10150                           tblptrl	equ	0xFF6
 10151                           tablat	equ	0xFF5
 10152                           prodh	equ	0xFF4
 10153                           prodl	equ	0xFF3
 10154                           intcon	equ	0xFF2
 10155                           intcon2	equ	0xFF1
 10156                           intcon3	equ	0xFF0
 10157                           postinc0	equ	0xFEE
 10158                           wreg	equ	0xFE8
 10159                           postdec1	equ	0xFE5
 10160                           fsr1l	equ	0xFE1
 10161                           indf2	equ	0xFDF
 10162                           postinc2	equ	0xFDE
 10163                           postdec2	equ	0xFDD
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _readMAG *****************
 10169 ;; Defined at:
 10170 ;;		line 29 in file "ADCFunctionality.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;  res             2    4[BANK0 ] int 
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      void 
 10177 ;; Registers used:
 10178 ;;		wreg, status,2, status,0, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;Total ram usage:        4 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    8
 10191 ;; This function calls:
 10192 ;;		_readADC
 10193 ;; This function is called by:
 10194 ;;		_ID
 10195 ;;		_sensorTest
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           	psect	text37
 10200  003E8E                     __ptext37:
 10201                           	opt stack 0
 10202  003E8E                     _readMAG:
 10203                           	opt stack 20
 10204                           
 10205                           ;ADCFunctionality.c: 30: readADC(1);
 10206                           
 10207                           ;incstack = 0
 10208  003E8E  0E01               	movlw	1
 10209  003E90  EC7A  F021         	call	_readADC
 10210                           
 10211                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10212  003E94  50C3               	movf	4035,w,c	;volatile
 10213  003E96  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10214  003E9A  0100               	movlb	0	; () banked
 10215  003E9C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10216  003E9E  C082  F083         	movff	??_readMAG,??_readMAG+1
 10217  003EA2  0100               	movlb	0	; () banked
 10218  003EA4  6B82               	clrf	??_readMAG& (0+255),b
 10219  003EA6  0100               	movlb	0	; () banked
 10220  003EA8  1182               	iorwf	??_readMAG& (0+255),w,b
 10221  003EAA  0100               	movlb	0	; () banked
 10222  003EAC  6F84               	movwf	readMAG@res& (0+255),b
 10223  003EAE  0100               	movlb	0	; () banked
 10224  003EB0  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10225  003EB2  0100               	movlb	0	; () banked
 10226  003EB4  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10230  003EB6  0100               	movlb	0	; () banked
 10231  003EB8  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10232  003EBA  D008               	goto	u4351
 10233  003EBC  0100               	movlb	0	; () banked
 10234  003EBE  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10235  003EC0  E107               	bnz	u4350
 10236  003EC2  0E96               	movlw	150
 10237  003EC4  0100               	movlb	0	; () banked
 10238  003EC6  5D84               	subwf	readMAG@res& (0+255),w,b
 10239  003EC8  B0D8               	btfsc	status,0,c
 10240  003ECA  D002               	goto	u4350
 10241  003ECC                     u4351:
 10242  003ECC  0E01               	movlw	1
 10243  003ECE  D001               	goto	u4360
 10244  003ED0                     u4350:
 10245  003ED0  0E00               	movlw	0
 10246  003ED2                     u4360:
 10247  003ED2  0100               	movlb	0	; () banked
 10248  003ED4  6FDC               	movwf	_MAG_signal& (0+255),b
 10249  003ED6  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10250                           
 10251                           ; BSR set to: 0
 10252  003ED8  0012               	return		;funcret
 10253  003EDA                     __end_of_readMAG:
 10254                           	opt stack 0
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           intcon	equ	0xFF2
 10262                           intcon2	equ	0xFF1
 10263                           intcon3	equ	0xFF0
 10264                           postinc0	equ	0xFEE
 10265                           wreg	equ	0xFE8
 10266                           postdec1	equ	0xFE5
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           fsr2h	equ	0xFDA
 10272                           fsr2l	equ	0xFD9
 10273                           status	equ	0xFD8
 10274                           
 10275 ;; *************** function _readIR *****************
 10276 ;; Defined at:
 10277 ;;		line 23 in file "ADCFunctionality.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  res             2    4[BANK0 ] int 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, status,2, status,0, cstack
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;Total ram usage:        4 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    8
 10298 ;; This function calls:
 10299 ;;		_readADC
 10300 ;; This function is called by:
 10301 ;;		_getIR
 10302 ;;		_sensorTest
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text38
 10307  003EDA                     __ptext38:
 10308                           	opt stack 0
 10309  003EDA                     _readIR:
 10310                           	opt stack 19
 10311                           
 10312                           ;ADCFunctionality.c: 24: readADC(0);
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;incstack = 0
 10316  003EDA  0E00               	movlw	0
 10317  003EDC  EC7A  F021         	call	_readADC
 10318                           
 10319                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
 10320  003EE0  50C3               	movf	4035,w,c	;volatile
 10321  003EE2  CFC4 F082          	movff	4036,??_readIR	;volatile
 10322  003EE6  0100               	movlb	0	; () banked
 10323  003EE8  6B83               	clrf	(??_readIR+1)& (0+255),b
 10324  003EEA  C082  F083         	movff	??_readIR,??_readIR+1
 10325  003EEE  0100               	movlb	0	; () banked
 10326  003EF0  6B82               	clrf	??_readIR& (0+255),b
 10327  003EF2  0100               	movlb	0	; () banked
 10328  003EF4  1182               	iorwf	??_readIR& (0+255),w,b
 10329  003EF6  0100               	movlb	0	; () banked
 10330  003EF8  6F84               	movwf	readIR@res& (0+255),b
 10331  003EFA  0100               	movlb	0	; () banked
 10332  003EFC  5183               	movf	(??_readIR+1)& (0+255),w,b
 10333  003EFE  0100               	movlb	0	; () banked
 10334  003F00  6F85               	movwf	(readIR@res+1)& (0+255),b
 10335                           
 10336                           ; BSR set to: 0
 10337                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
 10338  003F02  0100               	movlb	0	; () banked
 10339  003F04  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
 10340  003F06  D00A               	goto	u3680
 10341  003F08  0E85               	movlw	133
 10342  003F0A  0100               	movlb	0	; () banked
 10343  003F0C  5D84               	subwf	readIR@res& (0+255),w,b
 10344  003F0E  0E03               	movlw	3
 10345  003F10  0100               	movlb	0	; () banked
 10346  003F12  5985               	subwfb	(readIR@res+1)& (0+255),w,b
 10347  003F14  A0D8               	btfss	status,0,c
 10348  003F16  D002               	goto	u3680
 10349  003F18  0E01               	movlw	1
 10350  003F1A  D001               	goto	u3690
 10351  003F1C                     u3680:
 10352  003F1C  0E00               	movlw	0
 10353  003F1E                     u3690:
 10354  003F1E  0100               	movlb	0	; () banked
 10355  003F20  6FDA               	movwf	_IR_signal& (0+255),b
 10356  003F22  6BDB               	clrf	(_IR_signal+1)& (0+255),b
 10357                           
 10358                           ; BSR set to: 0
 10359  003F24  0012               	return		;funcret
 10360  003F26                     __end_of_readIR:
 10361                           	opt stack 0
 10362                           tblptru	equ	0xFF8
 10363                           tblptrh	equ	0xFF7
 10364                           tblptrl	equ	0xFF6
 10365                           tablat	equ	0xFF5
 10366                           prodh	equ	0xFF4
 10367                           prodl	equ	0xFF3
 10368                           intcon	equ	0xFF2
 10369                           intcon2	equ	0xFF1
 10370                           intcon3	equ	0xFF0
 10371                           postinc0	equ	0xFEE
 10372                           wreg	equ	0xFE8
 10373                           postdec1	equ	0xFE5
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function _readADC *****************
 10383 ;; Defined at:
 10384 ;;		line 15 in file "ADCFunctionality.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  channel         1    wreg     unsigned char 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;  channel         1    1[BANK0 ] unsigned char 
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:        2 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    7
 10405 ;; This function calls:
 10406 ;;		Nothing
 10407 ;; This function is called by:
 10408 ;;		_readIR
 10409 ;;		_readMAG
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           	psect	text39
 10414  0042F4                     __ptext39:
 10415                           	opt stack 0
 10416  0042F4                     _readADC:
 10417                           	opt stack 19
 10418                           
 10419                           ; BSR set to: 0
 10420                           ;incstack = 0
 10421                           ;readADC@channel stored from wreg
 10422  0042F4  0100               	movlb	0	; () banked
 10423  0042F6  6F81               	movwf	readADC@channel& (0+255),b
 10424                           
 10425                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10426  0042F8  0100               	movlb	0	; () banked
 10427  0042FA  4581               	rlncf	readADC@channel& (0+255),w,b
 10428  0042FC  46E8               	rlncf	wreg,f,c
 10429  0042FE  0BFC               	andlw	252
 10430  004300  6EC2               	movwf	4034,c	;volatile
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10434  004302  80C2               	bsf	4034,0,c	;volatile
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10438  004304  82C2               	bsf	4034,1,c	;volatile
 10439                           
 10440                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10441  004306  D009               	goto	l5092
 10442  004308                     l5090:
 10443  004308  0E34               	movlw	52
 10444  00430A  0100               	movlb	0	; () banked
 10445  00430C  6F80               	movwf	??_readADC& (0+255),b
 10446  00430E  0EF1               	movlw	241
 10447  004310                     u7427:
 10448  004310  2EE8               	decfsz	wreg,f,c
 10449  004312  D7FE               	bra	u7427
 10450  004314  2F80               	decfsz	??_readADC& (0+255),f,b
 10451  004316  D7FC               	bra	u7427
 10452  004318  D000               	nop2	
 10453  00431A                     l5092:
 10454  00431A  A2C2               	btfss	4034,1,c	;volatile
 10455  00431C  0012               	return	
 10456  00431E  D7F4               	goto	l5090
 10457  004320                     __end_of_readADC:
 10458                           	opt stack 0
 10459                           tblptru	equ	0xFF8
 10460                           tblptrh	equ	0xFF7
 10461                           tblptrl	equ	0xFF6
 10462                           tablat	equ	0xFF5
 10463                           prodh	equ	0xFF4
 10464                           prodl	equ	0xFF3
 10465                           intcon	equ	0xFF2
 10466                           intcon2	equ	0xFF1
 10467                           intcon3	equ	0xFF0
 10468                           postinc0	equ	0xFEE
 10469                           wreg	equ	0xFE8
 10470                           postdec1	equ	0xFE5
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _algorithmTest *****************
 10480 ;; Defined at:
 10481 ;;		line 70 in file "Test.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      void 
 10488 ;; Registers used:
 10489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        2 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:   10
 10502 ;; This function calls:
 10503 ;;		_lcdInst
 10504 ;;		_printf
 10505 ;; This function is called by:
 10506 ;;		_Test
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text40
 10511  0032F6                     __ptext40:
 10512                           	opt stack 0
 10513  0032F6                     _algorithmTest:
 10514                           	opt stack 19
 10515                           
 10516                           ;Test.c: 72: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10517                           
 10518                           ;incstack = 0
 10519  0032F6  0E01               	movlw	1
 10520  0032F8  EC85  F022         	call	_lcdInst
 10521  0032FC  0E68               	movlw	104
 10522  0032FE  0100               	movlb	0	; () banked
 10523  003300  6FAB               	movwf	??_algorithmTest& (0+255),b
 10524  003302  0EE4               	movlw	228
 10525  003304                     u7437:
 10526  003304  2EE8               	decfsz	wreg,f,c
 10527  003306  D7FE               	bra	u7437
 10528  003308  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10529  00330A  D7FC               	bra	u7437
 10530  00330C  F000               	nop	
 10531  00330E  0E80               	movlw	128
 10532  003310  EC85  F022         	call	_lcdInst
 10533                           
 10534                           ;Test.c: 73: printf("ALGORITHM TEST");
 10535  003314  0ED9               	movlw	low STR_70
 10536  003316  0100               	movlb	0	; () banked
 10537  003318  6F8E               	movwf	printf@f& (0+255),b
 10538  00331A  0EFE               	movlw	high STR_70
 10539  00331C  0100               	movlb	0	; () banked
 10540  00331E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10541  003320  EC9C  F008         	call	_printf	;wreg free
 10542                           
 10543                           ;Test.c: 74: lcdInst(0b11000000);;
 10544  003324  0EC0               	movlw	192
 10545  003326  EC85  F022         	call	_lcdInst
 10546                           
 10547                           ;Test.c: 75: printf("PUSH TO START");
 10548  00332A  0E12               	movlw	low STR_71
 10549  00332C  0100               	movlb	0	; () banked
 10550  00332E  6F8E               	movwf	printf@f& (0+255),b
 10551  003330  0EFF               	movlw	high STR_71
 10552  003332  0100               	movlb	0	; () banked
 10553  003334  6F8F               	movwf	(printf@f+1)& (0+255),b
 10554  003336  EC9C  F008         	call	_printf	;wreg free
 10555                           
 10556                           ;Test.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
 10557  00333A  0E05               	movlw	5
 10558  00333C  0100               	movlb	0	; () banked
 10559  00333E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10560  003340  0E0F               	movlw	15
 10561  003342  0100               	movlb	0	; () banked
 10562  003344  6FAB               	movwf	??_algorithmTest& (0+255),b
 10563  003346  0EF1               	movlw	241
 10564  003348                     u7447:
 10565  003348  2EE8               	decfsz	wreg,f,c
 10566  00334A  D7FE               	bra	u7447
 10567  00334C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10568  00334E  D7FC               	bra	u7447
 10569  003350  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10570  003352  D7FA               	bra	u7447
 10571  003354                     l1035:
 10572  003354  A281               	btfss	3969,1,c	;volatile
 10573  003356  D7FE               	goto	l1035
 10574  003358                     l1038:
 10575  003358  B281               	btfsc	3969,1,c	;volatile
 10576  00335A  D7FE               	goto	l1038
 10577                           
 10578                           ;Test.c: 79: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10579  00335C  0E01               	movlw	1
 10580  00335E  EC85  F022         	call	_lcdInst
 10581  003362  0E68               	movlw	104
 10582  003364  0100               	movlb	0	; () banked
 10583  003366  6FAB               	movwf	??_algorithmTest& (0+255),b
 10584  003368  0EE4               	movlw	228
 10585  00336A                     u7457:
 10586  00336A  2EE8               	decfsz	wreg,f,c
 10587  00336C  D7FE               	bra	u7457
 10588  00336E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10589  003370  D7FC               	bra	u7457
 10590  003372  F000               	nop	
 10591  003374  0E80               	movlw	128
 10592  003376  EC85  F022         	call	_lcdInst
 10593                           
 10594                           ;Test.c: 84: printf("ALG1: 9 POPNOTAB");
 10595  00337A  0E99               	movlw	low STR_72
 10596  00337C  0100               	movlb	0	; () banked
 10597  00337E  6F8E               	movwf	printf@f& (0+255),b
 10598  003380  0EFC               	movlw	high STR_72
 10599  003382  0100               	movlb	0	; () banked
 10600  003384  6F8F               	movwf	(printf@f+1)& (0+255),b
 10601  003386  EC9C  F008         	call	_printf	;wreg free
 10602                           
 10603                           ;Test.c: 91: printf("ALG2: 12 CANS");
 10604  00338A  0EF6               	movlw	low STR_73
 10605  00338C  0100               	movlb	0	; () banked
 10606  00338E  6F8E               	movwf	printf@f& (0+255),b
 10607  003390  0EFE               	movlw	high STR_73
 10608  003392  0100               	movlb	0	; () banked
 10609  003394  6F8F               	movwf	(printf@f+1)& (0+255),b
 10610  003396  EC9C  F008         	call	_printf	;wreg free
 10611                           
 10612                           ;Test.c: 100: printf("ALG3: 1 CAN");
 10613  00339A  0E63               	movlw	low STR_74
 10614  00339C  0100               	movlb	0	; () banked
 10615  00339E  6F8E               	movwf	printf@f& (0+255),b
 10616  0033A0  0EFF               	movlw	high STR_74
 10617  0033A2  0100               	movlb	0	; () banked
 10618  0033A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10619  0033A6  EC9C  F008         	call	_printf	;wreg free
 10620                           
 10621                           ;Test.c: 106: printf("ALG4: ALL CANS");
 10622  0033AA  0EBB               	movlw	low STR_75
 10623  0033AC  0100               	movlb	0	; () banked
 10624  0033AE  6F8E               	movwf	printf@f& (0+255),b
 10625  0033B0  0EFE               	movlw	high STR_75
 10626  0033B2  0100               	movlb	0	; () banked
 10627  0033B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10628  0033B6  EC9C  F008         	call	_printf	;wreg free
 10629                           
 10630                           ;Test.c: 111: printf("ALG5: NO CANS");
 10631  0033BA  0E04               	movlw	low STR_76
 10632  0033BC  0100               	movlb	0	; () banked
 10633  0033BE  6F8E               	movwf	printf@f& (0+255),b
 10634  0033C0  0EFF               	movlw	high STR_76
 10635  0033C2  0100               	movlb	0	; () banked
 10636  0033C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10637  0033C6  EC9C  F008         	call	_printf	;wreg free
 10638  0033CA  0012               	return		;funcret
 10639  0033CC                     __end_of_algorithmTest:
 10640                           	opt stack 0
 10641                           tblptru	equ	0xFF8
 10642                           tblptrh	equ	0xFF7
 10643                           tblptrl	equ	0xFF6
 10644                           tablat	equ	0xFF5
 10645                           prodh	equ	0xFF4
 10646                           prodl	equ	0xFF3
 10647                           intcon	equ	0xFF2
 10648                           intcon2	equ	0xFF1
 10649                           intcon3	equ	0xFF0
 10650                           postinc0	equ	0xFEE
 10651                           wreg	equ	0xFE8
 10652                           postdec1	equ	0xFE5
 10653                           fsr1l	equ	0xFE1
 10654                           indf2	equ	0xFDF
 10655                           postinc2	equ	0xFDE
 10656                           postdec2	equ	0xFDD
 10657                           fsr2h	equ	0xFDA
 10658                           fsr2l	equ	0xFD9
 10659                           status	equ	0xFD8
 10660                           
 10661 ;; *************** function _actuatorTest *****************
 10662 ;; Defined at:
 10663 ;;		line 165 in file "Test.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  i               1   45[BANK0 ] unsigned char 
 10668 ;;  i               1   67[BANK0 ] unsigned char 
 10669 ;;  i               1   66[BANK0 ] unsigned char 
 10670 ;;  i               1   65[BANK0 ] unsigned char 
 10671 ;;  i               1   64[BANK0 ] unsigned char 
 10672 ;;  i               1   63[BANK0 ] unsigned char 
 10673 ;;  i               1   62[BANK0 ] unsigned char 
 10674 ;;  i               1   61[BANK0 ] unsigned char 
 10675 ;;  i               1   60[BANK0 ] unsigned char 
 10676 ;;  i               1   59[BANK0 ] unsigned char 
 10677 ;;  i               1   58[BANK0 ] unsigned char 
 10678 ;;  i               1   57[BANK0 ] unsigned char 
 10679 ;;  i               1   56[BANK0 ] unsigned char 
 10680 ;;  i               1   55[BANK0 ] unsigned char 
 10681 ;;  i               1   54[BANK0 ] unsigned char 
 10682 ;;  i               1   53[BANK0 ] unsigned char 
 10683 ;;  i               1   52[BANK0 ] unsigned char 
 10684 ;;  i               1   51[BANK0 ] unsigned char 
 10685 ;;  i               1   50[BANK0 ] unsigned char 
 10686 ;;  i               1   49[BANK0 ] unsigned char 
 10687 ;;  i               1   48[BANK0 ] unsigned char 
 10688 ;;  i               1   47[BANK0 ] unsigned char 
 10689 ;;  i               1   46[BANK0 ] unsigned char 
 10690 ;;  i               2   68[BANK0 ] int 
 10691 ;; Return value:  Size  Location     Type
 10692 ;;                  1    wreg      void 
 10693 ;; Registers used:
 10694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10695 ;; Tracked objects:
 10696 ;;		On entry : 0/0
 10697 ;;		On exit  : 0/0
 10698 ;;		Unchanged: 0/0
 10699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;Total ram usage:       27 bytes
 10705 ;; Hardware stack levels used:    1
 10706 ;; Hardware stack levels required when called:   10
 10707 ;; This function calls:
 10708 ;;		_lcdInst
 10709 ;;		_printf
 10710 ;;		_updateServoPosition
 10711 ;; This function is called by:
 10712 ;;		_Test
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           	psect	text41
 10717  0008B8                     __ptext41:
 10718                           	opt stack 0
 10719  0008B8                     _actuatorTest:
 10720                           	opt stack 19
 10721                           
 10722                           ;Test.c: 167: int i = 0;
 10723                           
 10724                           ;incstack = 0
 10725  0008B8  0E00               	movlw	0
 10726  0008BA  0100               	movlb	0	; () banked
 10727  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10728  0008BE  0E00               	movlw	0
 10729  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;Test.c: 169: (INTCONbits.GIE = 1);
 10733  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;Test.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10737  0008C4  0E01               	movlw	1
 10738  0008C6  EC85  F022         	call	_lcdInst
 10739  0008CA  0E68               	movlw	104
 10740  0008CC  0100               	movlb	0	; () banked
 10741  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10742  0008D0  0EE4               	movlw	228
 10743  0008D2                     u7467:
 10744  0008D2  2EE8               	decfsz	wreg,f,c
 10745  0008D4  D7FE               	bra	u7467
 10746  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10747  0008D8  D7FC               	bra	u7467
 10748  0008DA  F000               	nop	
 10749  0008DC  0E80               	movlw	128
 10750  0008DE  EC85  F022         	call	_lcdInst
 10751                           
 10752                           ;Test.c: 171: printf("ACTUATORS");
 10753  0008E2  0E9A               	movlw	low STR_83
 10754  0008E4  0100               	movlb	0	; () banked
 10755  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10756  0008E8  0EFF               	movlw	high STR_83
 10757  0008EA  0100               	movlb	0	; () banked
 10758  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10759  0008EE  EC9C  F008         	call	_printf	;wreg free
 10760                           
 10761                           ;Test.c: 172: lcdInst(0b11000000);;
 10762  0008F2  0EC0               	movlw	192
 10763  0008F4  EC85  F022         	call	_lcdInst
 10764                           
 10765                           ;Test.c: 173: printf("PUSH TO START");
 10766  0008F8  0E12               	movlw	low STR_71
 10767  0008FA  0100               	movlb	0	; () banked
 10768  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10769  0008FE  0EFF               	movlw	high STR_71
 10770  000900  0100               	movlb	0	; () banked
 10771  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10772  000904  EC9C  F008         	call	_printf	;wreg free
 10773                           
 10774                           ;Test.c: 174: _delay((unsigned long)((100)*(32000000/4000.0)));
 10775  000908  0E05               	movlw	5
 10776  00090A  0100               	movlb	0	; () banked
 10777  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10778  00090E  0E0F               	movlw	15
 10779  000910  0100               	movlb	0	; () banked
 10780  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10781  000914  0EF1               	movlw	241
 10782  000916                     u7477:
 10783  000916  2EE8               	decfsz	wreg,f,c
 10784  000918  D7FE               	bra	u7477
 10785  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10786  00091C  D7FC               	bra	u7477
 10787  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10788  000920  D7FA               	bra	u7477
 10789  000922                     l1067:
 10790  000922  A281               	btfss	3969,1,c	;volatile
 10791  000924  D7FE               	goto	l1067
 10792  000926                     l1070:
 10793  000926  B281               	btfsc	3969,1,c	;volatile
 10794  000928  D7FE               	goto	l1070
 10795                           
 10796                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10797  00092A  0E01               	movlw	1
 10798  00092C  EC85  F022         	call	_lcdInst
 10799  000930  0E68               	movlw	104
 10800  000932  0100               	movlb	0	; () banked
 10801  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10802  000936  0EE4               	movlw	228
 10803  000938                     u7487:
 10804  000938  2EE8               	decfsz	wreg,f,c
 10805  00093A  D7FE               	bra	u7487
 10806  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10807  00093E  D7FC               	bra	u7487
 10808  000940  F000               	nop	
 10809  000942  0E80               	movlw	128
 10810  000944  EC85  F022         	call	_lcdInst
 10811                           
 10812                           ;Test.c: 182: printf("TST: DC MOTORS");
 10813  000948  0ECA               	movlw	low STR_85
 10814  00094A  0100               	movlb	0	; () banked
 10815  00094C  6F8E               	movwf	printf@f& (0+255),b
 10816  00094E  0EFE               	movlw	high STR_85
 10817  000950  0100               	movlb	0	; () banked
 10818  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10819  000954  EC9C  F008         	call	_printf	;wreg free
 10820                           
 10821                           ;Test.c: 183: lcdInst(0b11000000);;
 10822  000958  0EC0               	movlw	192
 10823  00095A  EC85  F022         	call	_lcdInst
 10824                           
 10825                           ;Test.c: 184: printf("PIN RA5 HIGH.");
 10826  00095E  0EE8               	movlw	low STR_86
 10827  000960  0100               	movlb	0	; () banked
 10828  000962  6F8E               	movwf	printf@f& (0+255),b
 10829  000964  0EFE               	movlw	high STR_86
 10830  000966  0100               	movlb	0	; () banked
 10831  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10832  00096A  EC9C  F008         	call	_printf	;wreg free
 10833                           
 10834                           ;Test.c: 185: LATAbits.LATA5 = 1;
 10835  00096E  8A89               	bsf	3977,5,c	;volatile
 10836                           
 10837                           ;Test.c: 186: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10838  000970  0E00               	movlw	0
 10839  000972  0100               	movlb	0	; () banked
 10840  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10841  000976  0E00               	movlw	0
 10842  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845  00097A  0100               	movlb	0	; () banked
 10846  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10847  00097E  D008               	goto	l6528
 10848  000980  0100               	movlb	0	; () banked
 10849  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10850  000984  E123               	bnz	l1074
 10851  000986  0E05               	movlw	5
 10852  000988  0100               	movlb	0	; () banked
 10853  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10854  00098C  B0D8               	btfsc	status,0,c
 10855  00098E  D01E               	goto	l1074
 10856  000990                     l6528:
 10857                           
 10858                           ; BSR set to: 0
 10859  000990  0E00               	movlw	0
 10860  000992  0100               	movlb	0	; () banked
 10861  000994  6FAD               	movwf	actuatorTest@i_1574& (0+255),b
 10862  000996                     l6530:
 10863                           
 10864                           ; BSR set to: 0
 10865  000996  0E63               	movlw	99
 10866  000998  0100               	movlb	0	; () banked
 10867  00099A  65AD               	cpfsgt	actuatorTest@i_1574& (0+255),b
 10868  00099C  D001               	goto	l6534
 10869  00099E  D00C               	goto	l6538
 10870  0009A0                     l6534:
 10871                           
 10872                           ; BSR set to: 0
 10873  0009A0  0E68               	movlw	104
 10874  0009A2  0100               	movlb	0	; () banked
 10875  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10876  0009A6  0EE4               	movlw	228
 10877  0009A8                     u7497:
 10878  0009A8  2EE8               	decfsz	wreg,f,c
 10879  0009AA  D7FE               	bra	u7497
 10880  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10881  0009AE  D7FC               	bra	u7497
 10882  0009B0  F000               	nop	
 10883  0009B2  0100               	movlb	0	; () banked
 10884  0009B4  2BAD               	incf	actuatorTest@i_1574& (0+255),f,b
 10885  0009B6  D7EF               	goto	l6530
 10886  0009B8                     l6538:
 10887                           
 10888                           ; BSR set to: 0
 10889  0009B8  0100               	movlb	0	; () banked
 10890  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10891  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10892                           
 10893                           ; BSR set to: 0
 10894  0009BE  0100               	movlb	0	; () banked
 10895  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10896  0009C2  D7E6               	goto	l6528
 10897  0009C4  0100               	movlb	0	; () banked
 10898  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10899  0009C8  E101               	bnz	u5010
 10900  0009CA  D7DD               	goto	L7
 10901  0009CC                     u5010:
 10902  0009CC                     l1074:
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;Test.c: 187: LATAbits.LATA5 = 0;
 10906  0009CC  9A89               	bcf	3977,5,c	;volatile
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;Test.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10910  0009CE  0E01               	movlw	1
 10911  0009D0  EC85  F022         	call	_lcdInst
 10912  0009D4  0E68               	movlw	104
 10913  0009D6  0100               	movlb	0	; () banked
 10914  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10915  0009DA  0EE4               	movlw	228
 10916  0009DC                     u7507:
 10917  0009DC  2EE8               	decfsz	wreg,f,c
 10918  0009DE  D7FE               	bra	u7507
 10919  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10920  0009E2  D7FC               	bra	u7507
 10921  0009E4  F000               	nop	
 10922  0009E6  0E80               	movlw	128
 10923  0009E8  EC85  F022         	call	_lcdInst
 10924                           
 10925                           ;Test.c: 194: printf("TST: COND SOLN'D");
 10926  0009EC  0EBB               	movlw	low STR_87
 10927  0009EE  0100               	movlb	0	; () banked
 10928  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10929  0009F2  0EFC               	movlw	high STR_87
 10930  0009F4  0100               	movlb	0	; () banked
 10931  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10932  0009F8  EC9C  F008         	call	_printf	;wreg free
 10933                           
 10934                           ;Test.c: 195: lcdInst(0b11000000);;
 10935  0009FC  0EC0               	movlw	192
 10936  0009FE  EC85  F022         	call	_lcdInst
 10937                           
 10938                           ;Test.c: 196: printf("PIN RA3...");
 10939  000A02  0E6F               	movlw	low STR_88
 10940  000A04  0100               	movlb	0	; () banked
 10941  000A06  6F8E               	movwf	printf@f& (0+255),b
 10942  000A08  0EFF               	movlw	high STR_88
 10943  000A0A  0100               	movlb	0	; () banked
 10944  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10945  000A0E  EC9C  F008         	call	_printf	;wreg free
 10946                           
 10947                           ;Test.c: 197: for(i=0;i<5;i++){
 10948  000A12  0E00               	movlw	0
 10949  000A14  0100               	movlb	0	; () banked
 10950  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10951  000A18  0E00               	movlw	0
 10952  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10953                           
 10954                           ; BSR set to: 0
 10955  000A1C  0100               	movlb	0	; () banked
 10956  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10957  000A20  D008               	goto	l1077
 10958  000A22  0100               	movlb	0	; () banked
 10959  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10960  000A26  E12C               	bnz	l1078
 10961  000A28  0E05               	movlw	5
 10962  000A2A  0100               	movlb	0	; () banked
 10963  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10964  000A2E  B0D8               	btfsc	status,0,c
 10965  000A30  D027               	goto	l1078
 10966  000A32                     l1077:
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;Test.c: 198: LATAbits.LATA3 = 1;
 10970  000A32  8689               	bsf	3977,3,c	;volatile
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;Test.c: 199: _delay((unsigned long)((300)*(32000000/4000.0)));
 10974  000A34  0E0D               	movlw	13
 10975  000A36  0100               	movlb	0	; () banked
 10976  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10977  000A3A  0E2D               	movlw	45
 10978  000A3C  0100               	movlb	0	; () banked
 10979  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10980  000A40  0ED7               	movlw	215
 10981  000A42                     u7517:
 10982  000A42  2EE8               	decfsz	wreg,f,c
 10983  000A44  D7FE               	bra	u7517
 10984  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10985  000A48  D7FC               	bra	u7517
 10986  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10987  000A4C  D7FA               	bra	u7517
 10988  000A4E  D000               	nop2	
 10989                           
 10990                           ;Test.c: 200: LATAbits.LATA3 = ~1;
 10991  000A50  9689               	bcf	3977,3,c	;volatile
 10992                           
 10993                           ;Test.c: 201: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10994  000A52  0E1D               	movlw	29
 10995  000A54  0100               	movlb	0	; () banked
 10996  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10997  000A58  0E69               	movlw	105
 10998  000A5A  0100               	movlb	0	; () banked
 10999  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11000  000A5E  0EA5               	movlw	165
 11001  000A60                     u7527:
 11002  000A60  2EE8               	decfsz	wreg,f,c
 11003  000A62  D7FE               	bra	u7527
 11004  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11005  000A66  D7FC               	bra	u7527
 11006  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11007  000A6A  D7FA               	bra	u7527
 11008  000A6C  0100               	movlb	0	; () banked
 11009  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11010  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11011  000A72  0100               	movlb	0	; () banked
 11012  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11013  000A76  D7DD               	goto	l1077
 11014  000A78  0100               	movlb	0	; () banked
 11015  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11016  000A7C  E101               	bnz	u5030
 11017  000A7E  D7D4               	goto	L8
 11018  000A80                     u5030:
 11019  000A80                     l1078:
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;Test.c: 202: }
 11023                           ;Test.c: 203: LATAbits.LATA3 = ~1;
 11024  000A80  9689               	bcf	3977,3,c	;volatile
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;Test.c: 204: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11028  000A82  0E01               	movlw	1
 11029  000A84  EC85  F022         	call	_lcdInst
 11030  000A88  0E68               	movlw	104
 11031  000A8A  0100               	movlb	0	; () banked
 11032  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11033  000A8E  0EE4               	movlw	228
 11034  000A90                     u7537:
 11035  000A90  2EE8               	decfsz	wreg,f,c
 11036  000A92  D7FE               	bra	u7537
 11037  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11038  000A96  D7FC               	bra	u7537
 11039  000A98  F000               	nop	
 11040  000A9A  0E80               	movlw	128
 11041  000A9C  EC85  F022         	call	_lcdInst
 11042                           
 11043                           ;Test.c: 210: printf("TST: PUSH SOLN'D");
 11044  000AA0  0ECC               	movlw	low STR_89
 11045  000AA2  0100               	movlb	0	; () banked
 11046  000AA4  6F8E               	movwf	printf@f& (0+255),b
 11047  000AA6  0EFC               	movlw	high STR_89
 11048  000AA8  0100               	movlb	0	; () banked
 11049  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11050  000AAC  EC9C  F008         	call	_printf	;wreg free
 11051                           
 11052                           ;Test.c: 211: lcdInst(0b11000000);;
 11053  000AB0  0EC0               	movlw	192
 11054  000AB2  EC85  F022         	call	_lcdInst
 11055                           
 11056                           ;Test.c: 212: printf("PIN RA4...");
 11057  000AB6  0E7A               	movlw	low STR_90
 11058  000AB8  0100               	movlb	0	; () banked
 11059  000ABA  6F8E               	movwf	printf@f& (0+255),b
 11060  000ABC  0EFF               	movlw	high STR_90
 11061  000ABE  0100               	movlb	0	; () banked
 11062  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11063  000AC2  EC9C  F008         	call	_printf	;wreg free
 11064                           
 11065                           ;Test.c: 213: for(i=0;i<5;i++){
 11066  000AC6  0E00               	movlw	0
 11067  000AC8  0100               	movlb	0	; () banked
 11068  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11069  000ACC  0E00               	movlw	0
 11070  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 11071                           
 11072                           ; BSR set to: 0
 11073  000AD0  0100               	movlb	0	; () banked
 11074  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11075  000AD4  D008               	goto	l1079
 11076  000AD6  0100               	movlb	0	; () banked
 11077  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11078  000ADA  E12C               	bnz	l1080
 11079  000ADC  0E05               	movlw	5
 11080  000ADE  0100               	movlb	0	; () banked
 11081  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11082  000AE2  B0D8               	btfsc	status,0,c
 11083  000AE4  D027               	goto	l1080
 11084  000AE6                     l1079:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;Test.c: 214: LATAbits.LATA4 = 1;
 11088  000AE6  8889               	bsf	3977,4,c	;volatile
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;Test.c: 215: _delay((unsigned long)((300)*(32000000/4000.0)));
 11092  000AE8  0E0D               	movlw	13
 11093  000AEA  0100               	movlb	0	; () banked
 11094  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11095  000AEE  0E2D               	movlw	45
 11096  000AF0  0100               	movlb	0	; () banked
 11097  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11098  000AF4  0ED7               	movlw	215
 11099  000AF6                     u7547:
 11100  000AF6  2EE8               	decfsz	wreg,f,c
 11101  000AF8  D7FE               	bra	u7547
 11102  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11103  000AFC  D7FC               	bra	u7547
 11104  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11105  000B00  D7FA               	bra	u7547
 11106  000B02  D000               	nop2	
 11107                           
 11108                           ;Test.c: 216: LATAbits.LATA4 = ~1;
 11109  000B04  9889               	bcf	3977,4,c	;volatile
 11110                           
 11111                           ;Test.c: 217: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11112  000B06  0E1D               	movlw	29
 11113  000B08  0100               	movlb	0	; () banked
 11114  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11115  000B0C  0E69               	movlw	105
 11116  000B0E  0100               	movlb	0	; () banked
 11117  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 11118  000B12  0EA5               	movlw	165
 11119  000B14                     u7557:
 11120  000B14  2EE8               	decfsz	wreg,f,c
 11121  000B16  D7FE               	bra	u7557
 11122  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11123  000B1A  D7FC               	bra	u7557
 11124  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11125  000B1E  D7FA               	bra	u7557
 11126  000B20  0100               	movlb	0	; () banked
 11127  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11128  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11129  000B26  0100               	movlb	0	; () banked
 11130  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11131  000B2A  D7DD               	goto	l1079
 11132  000B2C  0100               	movlb	0	; () banked
 11133  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11134  000B30  E101               	bnz	u5050
 11135  000B32  D7D4               	goto	L9
 11136  000B34                     u5050:
 11137  000B34                     l1080:
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;Test.c: 218: }
 11141                           ;Test.c: 219: LATAbits.LATA4 = ~1;
 11142  000B34  9889               	bcf	3977,4,c	;volatile
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;Test.c: 220: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11146  000B36  0E01               	movlw	1
 11147  000B38  EC85  F022         	call	_lcdInst
 11148  000B3C  0E68               	movlw	104
 11149  000B3E  0100               	movlb	0	; () banked
 11150  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 11151  000B42  0EE4               	movlw	228
 11152  000B44                     u7567:
 11153  000B44  2EE8               	decfsz	wreg,f,c
 11154  000B46  D7FE               	bra	u7567
 11155  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11156  000B4A  D7FC               	bra	u7567
 11157  000B4C  F000               	nop	
 11158  000B4E  0E80               	movlw	128
 11159  000B50  EC85  F022         	call	_lcdInst
 11160                           
 11161                           ;Test.c: 223: machine_state = Sorting_state;
 11162  000B54  0E01               	movlw	1
 11163  000B56  0100               	movlb	0	; () banked
 11164  000B58  6FFC               	movwf	_machine_state& (0+255),b
 11165                           
 11166                           ; BSR set to: 0
 11167                           ;Test.c: 224: was_low_1 = 0;
 11168  000B5A  0E00               	movlw	0
 11169  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 11170  000B5E  0E00               	movlw	0
 11171  000B60  6E79               	movwf	_was_low_1,c	;volatile
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;Test.c: 225: was_low_1 = 0;
 11175  000B62  0E00               	movlw	0
 11176  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 11177  000B66  0E00               	movlw	0
 11178  000B68  6E79               	movwf	_was_low_1,c	;volatile
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;Test.c: 232: printf("TST: PAN SERVO");
 11182  000B6A  0EAC               	movlw	low STR_91
 11183  000B6C  0100               	movlb	0	; () banked
 11184  000B6E  6F8E               	movwf	printf@f& (0+255),b
 11185  000B70  0EFE               	movlw	high STR_91
 11186  000B72  0100               	movlb	0	; () banked
 11187  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 11188  000B76  EC9C  F008         	call	_printf	;wreg free
 11189                           
 11190                           ;Test.c: 233: lcdInst(0b11000000);;
 11191  000B7A  0EC0               	movlw	192
 11192  000B7C  EC85  F022         	call	_lcdInst
 11193                           
 11194                           ;Test.c: 234: printf("MIDDLE -- 2s    ");
 11195  000B80  0E44               	movlw	low STR_92
 11196  000B82  0100               	movlb	0	; () banked
 11197  000B84  6F8E               	movwf	printf@f& (0+255),b
 11198  000B86  0EFC               	movlw	high STR_92
 11199  000B88  0100               	movlb	0	; () banked
 11200  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11201  000B8C  EC9C  F008         	call	_printf	;wreg free
 11202                           
 11203                           ;Test.c: 235: updateServoPosition(1250, 1);
 11204  000B90  0E04               	movlw	4
 11205  000B92  0100               	movlb	0	; () banked
 11206  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11207  000B96  0EE2               	movlw	226
 11208  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11209  000B9A  0E00               	movlw	0
 11210  000B9C  0100               	movlb	0	; () banked
 11211  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11212  000BA0  0E01               	movlw	1
 11213  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11214  000BA4  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11215                           
 11216                           ;Test.c: 236: TMR1ON = 1;
 11217  000BA8  80CD               	bsf	4045,0,c	;volatile
 11218                           
 11219                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11220  000BAA  0E00               	movlw	0
 11221  000BAC  0100               	movlb	0	; () banked
 11222  000BAE  6FAE               	movwf	actuatorTest@i_1581& (0+255),b
 11223  000BB0                     l6614:
 11224                           
 11225                           ; BSR set to: 0
 11226  000BB0  0E63               	movlw	99
 11227  000BB2  0100               	movlb	0	; () banked
 11228  000BB4  65AE               	cpfsgt	actuatorTest@i_1581& (0+255),b
 11229  000BB6  D001               	goto	l6618
 11230  000BB8  D00C               	goto	l6622
 11231  000BBA                     l6618:
 11232                           
 11233                           ; BSR set to: 0
 11234  000BBA  0E68               	movlw	104
 11235  000BBC  0100               	movlb	0	; () banked
 11236  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11237  000BC0  0EE4               	movlw	228
 11238  000BC2                     u7577:
 11239  000BC2  2EE8               	decfsz	wreg,f,c
 11240  000BC4  D7FE               	bra	u7577
 11241  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11242  000BC8  D7FC               	bra	u7577
 11243  000BCA  F000               	nop	
 11244  000BCC  0100               	movlb	0	; () banked
 11245  000BCE  2BAE               	incf	actuatorTest@i_1581& (0+255),f,b
 11246  000BD0  D7EF               	goto	l6614
 11247  000BD2                     l6622:
 11248                           
 11249                           ; BSR set to: 0
 11250  000BD2  0E00               	movlw	0
 11251  000BD4  0100               	movlb	0	; () banked
 11252  000BD6  6FAF               	movwf	actuatorTest@i_1582& (0+255),b
 11253  000BD8                     l6624:
 11254                           
 11255                           ; BSR set to: 0
 11256  000BD8  0E63               	movlw	99
 11257  000BDA  0100               	movlb	0	; () banked
 11258  000BDC  65AF               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11259  000BDE  D001               	goto	l6628
 11260  000BE0  D00C               	goto	l6632
 11261  000BE2                     l6628:
 11262                           
 11263                           ; BSR set to: 0
 11264  000BE2  0E68               	movlw	104
 11265  000BE4  0100               	movlb	0	; () banked
 11266  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11267  000BE8  0EE4               	movlw	228
 11268  000BEA                     u7587:
 11269  000BEA  2EE8               	decfsz	wreg,f,c
 11270  000BEC  D7FE               	bra	u7587
 11271  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11272  000BF0  D7FC               	bra	u7587
 11273  000BF2  F000               	nop	
 11274  000BF4  0100               	movlb	0	; () banked
 11275  000BF6  2BAF               	incf	actuatorTest@i_1582& (0+255),f,b
 11276  000BF8  D7EF               	goto	l6624
 11277  000BFA                     l6632:
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11281  000BFA  0E80               	movlw	128
 11282  000BFC  EC85  F022         	call	_lcdInst
 11283  000C00  0EC0               	movlw	192
 11284  000C02  EC85  F022         	call	_lcdInst
 11285                           
 11286                           ;Test.c: 240: printf("RIGHT -- 2s     ");
 11287  000C06  0E33               	movlw	low STR_93
 11288  000C08  0100               	movlb	0	; () banked
 11289  000C0A  6F8E               	movwf	printf@f& (0+255),b
 11290  000C0C  0EFC               	movlw	high STR_93
 11291  000C0E  0100               	movlb	0	; () banked
 11292  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 11293  000C12  EC9C  F008         	call	_printf	;wreg free
 11294                           
 11295                           ;Test.c: 241: updateServoPosition(500, 1);
 11296  000C16  0E01               	movlw	1
 11297  000C18  0100               	movlb	0	; () banked
 11298  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11299  000C1C  0EF4               	movlw	244
 11300  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11301  000C20  0E00               	movlw	0
 11302  000C22  0100               	movlb	0	; () banked
 11303  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11304  000C26  0E01               	movlw	1
 11305  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11306  000C2A  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11307                           
 11308                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11309  000C2E  0E00               	movlw	0
 11310  000C30  0100               	movlb	0	; () banked
 11311  000C32  6FB0               	movwf	actuatorTest@i_1584& (0+255),b
 11312  000C34                     l6640:
 11313                           
 11314                           ; BSR set to: 0
 11315  000C34  0E63               	movlw	99
 11316  000C36  0100               	movlb	0	; () banked
 11317  000C38  65B0               	cpfsgt	actuatorTest@i_1584& (0+255),b
 11318  000C3A  D001               	goto	l6644
 11319  000C3C  D00C               	goto	l6648
 11320  000C3E                     l6644:
 11321                           
 11322                           ; BSR set to: 0
 11323  000C3E  0E68               	movlw	104
 11324  000C40  0100               	movlb	0	; () banked
 11325  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 11326  000C44  0EE4               	movlw	228
 11327  000C46                     u7597:
 11328  000C46  2EE8               	decfsz	wreg,f,c
 11329  000C48  D7FE               	bra	u7597
 11330  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11331  000C4C  D7FC               	bra	u7597
 11332  000C4E  F000               	nop	
 11333  000C50  0100               	movlb	0	; () banked
 11334  000C52  2BB0               	incf	actuatorTest@i_1584& (0+255),f,b
 11335  000C54  D7EF               	goto	l6640
 11336  000C56                     l6648:
 11337                           
 11338                           ; BSR set to: 0
 11339  000C56  0E00               	movlw	0
 11340  000C58  0100               	movlb	0	; () banked
 11341  000C5A  6FB1               	movwf	actuatorTest@i_1585& (0+255),b
 11342  000C5C                     l6650:
 11343                           
 11344                           ; BSR set to: 0
 11345  000C5C  0E63               	movlw	99
 11346  000C5E  0100               	movlb	0	; () banked
 11347  000C60  65B1               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11348  000C62  D001               	goto	l6654
 11349  000C64  D00C               	goto	l6658
 11350  000C66                     l6654:
 11351                           
 11352                           ; BSR set to: 0
 11353  000C66  0E68               	movlw	104
 11354  000C68  0100               	movlb	0	; () banked
 11355  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11356  000C6C  0EE4               	movlw	228
 11357  000C6E                     u7607:
 11358  000C6E  2EE8               	decfsz	wreg,f,c
 11359  000C70  D7FE               	bra	u7607
 11360  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11361  000C74  D7FC               	bra	u7607
 11362  000C76  F000               	nop	
 11363  000C78  0100               	movlb	0	; () banked
 11364  000C7A  2BB1               	incf	actuatorTest@i_1585& (0+255),f,b
 11365  000C7C  D7EF               	goto	l6650
 11366  000C7E                     l6658:
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11370  000C7E  0E80               	movlw	128
 11371  000C80  EC85  F022         	call	_lcdInst
 11372  000C84  0EC0               	movlw	192
 11373  000C86  EC85  F022         	call	_lcdInst
 11374                           
 11375                           ;Test.c: 245: printf("LEFT -- 2s      ");
 11376  000C8A  0E11               	movlw	low STR_94
 11377  000C8C  0100               	movlb	0	; () banked
 11378  000C8E  6F8E               	movwf	printf@f& (0+255),b
 11379  000C90  0EFC               	movlw	high STR_94
 11380  000C92  0100               	movlb	0	; () banked
 11381  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 11382  000C96  EC9C  F008         	call	_printf	;wreg free
 11383                           
 11384                           ;Test.c: 246: updateServoPosition(2000, 1);
 11385  000C9A  0E07               	movlw	7
 11386  000C9C  0100               	movlb	0	; () banked
 11387  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11388  000CA0  0ED0               	movlw	208
 11389  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11390  000CA4  0E00               	movlw	0
 11391  000CA6  0100               	movlb	0	; () banked
 11392  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11393  000CAA  0E01               	movlw	1
 11394  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11395  000CAE  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11396                           
 11397                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11398  000CB2  0E00               	movlw	0
 11399  000CB4  0100               	movlb	0	; () banked
 11400  000CB6  6FB2               	movwf	actuatorTest@i_1587& (0+255),b
 11401  000CB8                     l6666:
 11402                           
 11403                           ; BSR set to: 0
 11404  000CB8  0E63               	movlw	99
 11405  000CBA  0100               	movlb	0	; () banked
 11406  000CBC  65B2               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11407  000CBE  D001               	goto	l6670
 11408  000CC0  D00C               	goto	l6674
 11409  000CC2                     l6670:
 11410                           
 11411                           ; BSR set to: 0
 11412  000CC2  0E68               	movlw	104
 11413  000CC4  0100               	movlb	0	; () banked
 11414  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11415  000CC8  0EE4               	movlw	228
 11416  000CCA                     u7617:
 11417  000CCA  2EE8               	decfsz	wreg,f,c
 11418  000CCC  D7FE               	bra	u7617
 11419  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11420  000CD0  D7FC               	bra	u7617
 11421  000CD2  F000               	nop	
 11422  000CD4  0100               	movlb	0	; () banked
 11423  000CD6  2BB2               	incf	actuatorTest@i_1587& (0+255),f,b
 11424  000CD8  D7EF               	goto	l6666
 11425  000CDA                     l6674:
 11426                           
 11427                           ; BSR set to: 0
 11428  000CDA  0E00               	movlw	0
 11429  000CDC  0100               	movlb	0	; () banked
 11430  000CDE  6FB3               	movwf	actuatorTest@i_1588& (0+255),b
 11431  000CE0                     l6676:
 11432                           
 11433                           ; BSR set to: 0
 11434  000CE0  0E63               	movlw	99
 11435  000CE2  0100               	movlb	0	; () banked
 11436  000CE4  65B3               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11437  000CE6  D001               	goto	l6680
 11438  000CE8  D00C               	goto	l6684
 11439  000CEA                     l6680:
 11440                           
 11441                           ; BSR set to: 0
 11442  000CEA  0E68               	movlw	104
 11443  000CEC  0100               	movlb	0	; () banked
 11444  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11445  000CF0  0EE4               	movlw	228
 11446  000CF2                     u7627:
 11447  000CF2  2EE8               	decfsz	wreg,f,c
 11448  000CF4  D7FE               	bra	u7627
 11449  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11450  000CF8  D7FC               	bra	u7627
 11451  000CFA  F000               	nop	
 11452  000CFC  0100               	movlb	0	; () banked
 11453  000CFE  2BB3               	incf	actuatorTest@i_1588& (0+255),f,b
 11454  000D00  D7EF               	goto	l6676
 11455  000D02                     l6684:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11459  000D02  0E80               	movlw	128
 11460  000D04  EC85  F022         	call	_lcdInst
 11461  000D08  0EC0               	movlw	192
 11462  000D0A  EC85  F022         	call	_lcdInst
 11463                           
 11464                           ;Test.c: 250: printf("MID-LEFT -- 2s  ");
 11465  000D0E  0E66               	movlw	low STR_95
 11466  000D10  0100               	movlb	0	; () banked
 11467  000D12  6F8E               	movwf	printf@f& (0+255),b
 11468  000D14  0EFC               	movlw	high STR_95
 11469  000D16  0100               	movlb	0	; () banked
 11470  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 11471  000D1A  EC9C  F008         	call	_printf	;wreg free
 11472                           
 11473                           ;Test.c: 251: updateServoPosition(1650, 1);
 11474  000D1E  0E06               	movlw	6
 11475  000D20  0100               	movlb	0	; () banked
 11476  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11477  000D24  0E72               	movlw	114
 11478  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11479  000D28  0E00               	movlw	0
 11480  000D2A  0100               	movlb	0	; () banked
 11481  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11482  000D2E  0E01               	movlw	1
 11483  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11484  000D32  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11485                           
 11486                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11487  000D36  0E00               	movlw	0
 11488  000D38  0100               	movlb	0	; () banked
 11489  000D3A  6FB4               	movwf	actuatorTest@i_1590& (0+255),b
 11490  000D3C                     l6692:
 11491                           
 11492                           ; BSR set to: 0
 11493  000D3C  0E63               	movlw	99
 11494  000D3E  0100               	movlb	0	; () banked
 11495  000D40  65B4               	cpfsgt	actuatorTest@i_1590& (0+255),b
 11496  000D42  D001               	goto	l6696
 11497  000D44  D00C               	goto	l6700
 11498  000D46                     l6696:
 11499                           
 11500                           ; BSR set to: 0
 11501  000D46  0E68               	movlw	104
 11502  000D48  0100               	movlb	0	; () banked
 11503  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11504  000D4C  0EE4               	movlw	228
 11505  000D4E                     u7637:
 11506  000D4E  2EE8               	decfsz	wreg,f,c
 11507  000D50  D7FE               	bra	u7637
 11508  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11509  000D54  D7FC               	bra	u7637
 11510  000D56  F000               	nop	
 11511  000D58  0100               	movlb	0	; () banked
 11512  000D5A  2BB4               	incf	actuatorTest@i_1590& (0+255),f,b
 11513  000D5C  D7EF               	goto	l6692
 11514  000D5E                     l6700:
 11515                           
 11516                           ; BSR set to: 0
 11517  000D5E  0E00               	movlw	0
 11518  000D60  0100               	movlb	0	; () banked
 11519  000D62  6FB5               	movwf	actuatorTest@i_1591& (0+255),b
 11520  000D64                     l6702:
 11521                           
 11522                           ; BSR set to: 0
 11523  000D64  0E63               	movlw	99
 11524  000D66  0100               	movlb	0	; () banked
 11525  000D68  65B5               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11526  000D6A  D001               	goto	l6706
 11527  000D6C  D00C               	goto	l6710
 11528  000D6E                     l6706:
 11529                           
 11530                           ; BSR set to: 0
 11531  000D6E  0E68               	movlw	104
 11532  000D70  0100               	movlb	0	; () banked
 11533  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11534  000D74  0EE4               	movlw	228
 11535  000D76                     u7647:
 11536  000D76  2EE8               	decfsz	wreg,f,c
 11537  000D78  D7FE               	bra	u7647
 11538  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11539  000D7C  D7FC               	bra	u7647
 11540  000D7E  F000               	nop	
 11541  000D80  0100               	movlb	0	; () banked
 11542  000D82  2BB5               	incf	actuatorTest@i_1591& (0+255),f,b
 11543  000D84  D7EF               	goto	l6702
 11544  000D86                     l6710:
 11545                           
 11546                           ; BSR set to: 0
 11547                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11548  000D86  0E80               	movlw	128
 11549  000D88  EC85  F022         	call	_lcdInst
 11550  000D8C  0EC0               	movlw	192
 11551  000D8E  EC85  F022         	call	_lcdInst
 11552                           
 11553                           ;Test.c: 255: printf("MID-RIGHT -- 2s ");
 11554  000D92  0E77               	movlw	low STR_96
 11555  000D94  0100               	movlb	0	; () banked
 11556  000D96  6F8E               	movwf	printf@f& (0+255),b
 11557  000D98  0EFC               	movlw	high STR_96
 11558  000D9A  0100               	movlb	0	; () banked
 11559  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11560  000D9E  EC9C  F008         	call	_printf	;wreg free
 11561                           
 11562                           ;Test.c: 256: updateServoPosition(700, 1);
 11563  000DA2  0E02               	movlw	2
 11564  000DA4  0100               	movlb	0	; () banked
 11565  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11566  000DA8  0EBC               	movlw	188
 11567  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11568  000DAC  0E00               	movlw	0
 11569  000DAE  0100               	movlb	0	; () banked
 11570  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11571  000DB2  0E01               	movlw	1
 11572  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11573  000DB6  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11574                           
 11575                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11576  000DBA  0E00               	movlw	0
 11577  000DBC  0100               	movlb	0	; () banked
 11578  000DBE  6FB6               	movwf	actuatorTest@i_1593& (0+255),b
 11579  000DC0                     l6718:
 11580                           
 11581                           ; BSR set to: 0
 11582  000DC0  0E63               	movlw	99
 11583  000DC2  0100               	movlb	0	; () banked
 11584  000DC4  65B6               	cpfsgt	actuatorTest@i_1593& (0+255),b
 11585  000DC6  D001               	goto	l6722
 11586  000DC8  D00C               	goto	l6726
 11587  000DCA                     l6722:
 11588                           
 11589                           ; BSR set to: 0
 11590  000DCA  0E68               	movlw	104
 11591  000DCC  0100               	movlb	0	; () banked
 11592  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11593  000DD0  0EE4               	movlw	228
 11594  000DD2                     u7657:
 11595  000DD2  2EE8               	decfsz	wreg,f,c
 11596  000DD4  D7FE               	bra	u7657
 11597  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11598  000DD8  D7FC               	bra	u7657
 11599  000DDA  F000               	nop	
 11600  000DDC  0100               	movlb	0	; () banked
 11601  000DDE  2BB6               	incf	actuatorTest@i_1593& (0+255),f,b
 11602  000DE0  D7EF               	goto	l6718
 11603  000DE2                     l6726:
 11604                           
 11605                           ; BSR set to: 0
 11606  000DE2  0E00               	movlw	0
 11607  000DE4  0100               	movlb	0	; () banked
 11608  000DE6  6FB7               	movwf	actuatorTest@i_1594& (0+255),b
 11609  000DE8                     l6728:
 11610                           
 11611                           ; BSR set to: 0
 11612  000DE8  0E63               	movlw	99
 11613  000DEA  0100               	movlb	0	; () banked
 11614  000DEC  65B7               	cpfsgt	actuatorTest@i_1594& (0+255),b
 11615  000DEE  D001               	goto	l6732
 11616  000DF0  D00C               	goto	l6736
 11617  000DF2                     l6732:
 11618                           
 11619                           ; BSR set to: 0
 11620  000DF2  0E68               	movlw	104
 11621  000DF4  0100               	movlb	0	; () banked
 11622  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11623  000DF8  0EE4               	movlw	228
 11624  000DFA                     u7667:
 11625  000DFA  2EE8               	decfsz	wreg,f,c
 11626  000DFC  D7FE               	bra	u7667
 11627  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11628  000E00  D7FC               	bra	u7667
 11629  000E02  F000               	nop	
 11630  000E04  0100               	movlb	0	; () banked
 11631  000E06  2BB7               	incf	actuatorTest@i_1594& (0+255),f,b
 11632  000E08  D7EF               	goto	l6728
 11633  000E0A                     l6736:
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;Test.c: 259: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11637  000E0A  0E80               	movlw	128
 11638  000E0C  EC85  F022         	call	_lcdInst
 11639  000E10  0EC0               	movlw	192
 11640  000E12  EC85  F022         	call	_lcdInst
 11641                           
 11642                           ;Test.c: 260: printf("MID -- 2s       ");
 11643  000E16  0EEF               	movlw	low STR_97
 11644  000E18  0100               	movlb	0	; () banked
 11645  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11646  000E1C  0EFB               	movlw	high STR_97
 11647  000E1E  0100               	movlb	0	; () banked
 11648  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11649  000E22  EC9C  F008         	call	_printf	;wreg free
 11650                           
 11651                           ;Test.c: 261: updateServoPosition(1250, 1);
 11652  000E26  0E04               	movlw	4
 11653  000E28  0100               	movlb	0	; () banked
 11654  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11655  000E2C  0EE2               	movlw	226
 11656  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11657  000E30  0E00               	movlw	0
 11658  000E32  0100               	movlb	0	; () banked
 11659  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11660  000E36  0E01               	movlw	1
 11661  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11662  000E3A  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11663                           
 11664                           ;Test.c: 262: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11665  000E3E  0E00               	movlw	0
 11666  000E40  0100               	movlb	0	; () banked
 11667  000E42  6FB8               	movwf	actuatorTest@i_1596& (0+255),b
 11668  000E44                     l6744:
 11669                           
 11670                           ; BSR set to: 0
 11671  000E44  0E63               	movlw	99
 11672  000E46  0100               	movlb	0	; () banked
 11673  000E48  65B8               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11674  000E4A  D001               	goto	l6748
 11675  000E4C  D00C               	goto	l6752
 11676  000E4E                     l6748:
 11677                           
 11678                           ; BSR set to: 0
 11679  000E4E  0E68               	movlw	104
 11680  000E50  0100               	movlb	0	; () banked
 11681  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11682  000E54  0EE4               	movlw	228
 11683  000E56                     u7677:
 11684  000E56  2EE8               	decfsz	wreg,f,c
 11685  000E58  D7FE               	bra	u7677
 11686  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11687  000E5C  D7FC               	bra	u7677
 11688  000E5E  F000               	nop	
 11689  000E60  0100               	movlb	0	; () banked
 11690  000E62  2BB8               	incf	actuatorTest@i_1596& (0+255),f,b
 11691  000E64  D7EF               	goto	l6744
 11692  000E66                     l6752:
 11693                           
 11694                           ; BSR set to: 0
 11695  000E66  0E00               	movlw	0
 11696  000E68  0100               	movlb	0	; () banked
 11697  000E6A  6FB9               	movwf	actuatorTest@i_1597& (0+255),b
 11698  000E6C                     l6754:
 11699                           
 11700                           ; BSR set to: 0
 11701  000E6C  0E63               	movlw	99
 11702  000E6E  0100               	movlb	0	; () banked
 11703  000E70  65B9               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11704  000E72  D001               	goto	l6758
 11705  000E74  D00C               	goto	l1104
 11706  000E76                     l6758:
 11707                           
 11708                           ; BSR set to: 0
 11709  000E76  0E68               	movlw	104
 11710  000E78  0100               	movlb	0	; () banked
 11711  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11712  000E7C  0EE4               	movlw	228
 11713  000E7E                     u7687:
 11714  000E7E  2EE8               	decfsz	wreg,f,c
 11715  000E80  D7FE               	bra	u7687
 11716  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11717  000E84  D7FC               	bra	u7687
 11718  000E86  F000               	nop	
 11719  000E88  0100               	movlb	0	; () banked
 11720  000E8A  2BB9               	incf	actuatorTest@i_1597& (0+255),f,b
 11721  000E8C  D7EF               	goto	l6754
 11722  000E8E                     l1104:
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;Test.c: 263: TMR1ON = 0;
 11726  000E8E  90CD               	bcf	4045,0,c	;volatile
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;Test.c: 270: printf("TST: TILT SERVO");
 11730  000E90  0E41               	movlw	low STR_98
 11731  000E92  0100               	movlb	0	; () banked
 11732  000E94  6F8E               	movwf	printf@f& (0+255),b
 11733  000E96  0EFE               	movlw	high STR_98
 11734  000E98  0100               	movlb	0	; () banked
 11735  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11736  000E9C  EC9C  F008         	call	_printf	;wreg free
 11737                           
 11738                           ;Test.c: 271: lcdInst(0b11000000);;
 11739  000EA0  0EC0               	movlw	192
 11740  000EA2  EC85  F022         	call	_lcdInst
 11741                           
 11742                           ;Test.c: 272: printf("LEVEL -- 2s     ");
 11743  000EA6  0E22               	movlw	low STR_99
 11744  000EA8  0100               	movlb	0	; () banked
 11745  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11746  000EAC  0EFC               	movlw	high STR_99
 11747  000EAE  0100               	movlb	0	; () banked
 11748  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11749  000EB2  EC9C  F008         	call	_printf	;wreg free
 11750                           
 11751                           ;Test.c: 273: updateServoPosition(1150, 3);
 11752  000EB6  0E04               	movlw	4
 11753  000EB8  0100               	movlb	0	; () banked
 11754  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11755  000EBC  0E7E               	movlw	126
 11756  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11757  000EC0  0E00               	movlw	0
 11758  000EC2  0100               	movlb	0	; () banked
 11759  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11760  000EC6  0E03               	movlw	3
 11761  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11762  000ECA  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11763                           
 11764                           ;Test.c: 274: TMR3ON = 1;
 11765  000ECE  80B1               	bsf	4017,0,c	;volatile
 11766                           
 11767                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11768  000ED0  0E00               	movlw	0
 11769  000ED2  0100               	movlb	0	; () banked
 11770  000ED4  6FBA               	movwf	actuatorTest@i_1600& (0+255),b
 11771  000ED6                     l6772:
 11772                           
 11773                           ; BSR set to: 0
 11774  000ED6  0E63               	movlw	99
 11775  000ED8  0100               	movlb	0	; () banked
 11776  000EDA  65BA               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11777  000EDC  D001               	goto	l6776
 11778  000EDE  D00C               	goto	l6780
 11779  000EE0                     l6776:
 11780                           
 11781                           ; BSR set to: 0
 11782  000EE0  0E68               	movlw	104
 11783  000EE2  0100               	movlb	0	; () banked
 11784  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11785  000EE6  0EE4               	movlw	228
 11786  000EE8                     u7697:
 11787  000EE8  2EE8               	decfsz	wreg,f,c
 11788  000EEA  D7FE               	bra	u7697
 11789  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11790  000EEE  D7FC               	bra	u7697
 11791  000EF0  F000               	nop	
 11792  000EF2  0100               	movlb	0	; () banked
 11793  000EF4  2BBA               	incf	actuatorTest@i_1600& (0+255),f,b
 11794  000EF6  D7EF               	goto	l6772
 11795  000EF8                     l6780:
 11796                           
 11797                           ; BSR set to: 0
 11798  000EF8  0E00               	movlw	0
 11799  000EFA  0100               	movlb	0	; () banked
 11800  000EFC  6FBB               	movwf	actuatorTest@i_1601& (0+255),b
 11801  000EFE                     l6782:
 11802                           
 11803                           ; BSR set to: 0
 11804  000EFE  0E63               	movlw	99
 11805  000F00  0100               	movlb	0	; () banked
 11806  000F02  65BB               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11807  000F04  D001               	goto	l6786
 11808  000F06  D00C               	goto	l6790
 11809  000F08                     l6786:
 11810                           
 11811                           ; BSR set to: 0
 11812  000F08  0E68               	movlw	104
 11813  000F0A  0100               	movlb	0	; () banked
 11814  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11815  000F0E  0EE4               	movlw	228
 11816  000F10                     u7707:
 11817  000F10  2EE8               	decfsz	wreg,f,c
 11818  000F12  D7FE               	bra	u7707
 11819  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11820  000F16  D7FC               	bra	u7707
 11821  000F18  F000               	nop	
 11822  000F1A  0100               	movlb	0	; () banked
 11823  000F1C  2BBB               	incf	actuatorTest@i_1601& (0+255),f,b
 11824  000F1E  D7EF               	goto	l6782
 11825  000F20                     l6790:
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11829  000F20  0E80               	movlw	128
 11830  000F22  EC85  F022         	call	_lcdInst
 11831  000F26  0EC0               	movlw	192
 11832  000F28  EC85  F022         	call	_lcdInst
 11833                           
 11834                           ;Test.c: 278: printf("DROP -- 2s      ");
 11835  000F2C  0E00               	movlw	low STR_100
 11836  000F2E  0100               	movlb	0	; () banked
 11837  000F30  6F8E               	movwf	printf@f& (0+255),b
 11838  000F32  0EFC               	movlw	high STR_100
 11839  000F34  0100               	movlb	0	; () banked
 11840  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11841  000F38  EC9C  F008         	call	_printf	;wreg free
 11842                           
 11843                           ;Test.c: 279: updateServoPosition(1350, 3);
 11844  000F3C  0E05               	movlw	5
 11845  000F3E  0100               	movlb	0	; () banked
 11846  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11847  000F42  0E46               	movlw	70
 11848  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11849  000F46  0E00               	movlw	0
 11850  000F48  0100               	movlb	0	; () banked
 11851  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11852  000F4C  0E03               	movlw	3
 11853  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11854  000F50  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11855                           
 11856                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11857  000F54  0E00               	movlw	0
 11858  000F56  0100               	movlb	0	; () banked
 11859  000F58  6FBC               	movwf	actuatorTest@i_1603& (0+255),b
 11860  000F5A                     l6798:
 11861                           
 11862                           ; BSR set to: 0
 11863  000F5A  0E63               	movlw	99
 11864  000F5C  0100               	movlb	0	; () banked
 11865  000F5E  65BC               	cpfsgt	actuatorTest@i_1603& (0+255),b
 11866  000F60  D001               	goto	l6802
 11867  000F62  D00C               	goto	l6806
 11868  000F64                     l6802:
 11869                           
 11870                           ; BSR set to: 0
 11871  000F64  0E68               	movlw	104
 11872  000F66  0100               	movlb	0	; () banked
 11873  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11874  000F6A  0EE4               	movlw	228
 11875  000F6C                     u7717:
 11876  000F6C  2EE8               	decfsz	wreg,f,c
 11877  000F6E  D7FE               	bra	u7717
 11878  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11879  000F72  D7FC               	bra	u7717
 11880  000F74  F000               	nop	
 11881  000F76  0100               	movlb	0	; () banked
 11882  000F78  2BBC               	incf	actuatorTest@i_1603& (0+255),f,b
 11883  000F7A  D7EF               	goto	l6798
 11884  000F7C                     l6806:
 11885                           
 11886                           ; BSR set to: 0
 11887  000F7C  0E00               	movlw	0
 11888  000F7E  0100               	movlb	0	; () banked
 11889  000F80  6FBD               	movwf	actuatorTest@i_1604& (0+255),b
 11890  000F82                     l6808:
 11891                           
 11892                           ; BSR set to: 0
 11893  000F82  0E63               	movlw	99
 11894  000F84  0100               	movlb	0	; () banked
 11895  000F86  65BD               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11896  000F88  D001               	goto	l6812
 11897  000F8A  D00C               	goto	l6816
 11898  000F8C                     l6812:
 11899                           
 11900                           ; BSR set to: 0
 11901  000F8C  0E68               	movlw	104
 11902  000F8E  0100               	movlb	0	; () banked
 11903  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11904  000F92  0EE4               	movlw	228
 11905  000F94                     u7727:
 11906  000F94  2EE8               	decfsz	wreg,f,c
 11907  000F96  D7FE               	bra	u7727
 11908  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11909  000F9A  D7FC               	bra	u7727
 11910  000F9C  F000               	nop	
 11911  000F9E  0100               	movlb	0	; () banked
 11912  000FA0  2BBD               	incf	actuatorTest@i_1604& (0+255),f,b
 11913  000FA2  D7EF               	goto	l6808
 11914  000FA4                     l6816:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11918  000FA4  0E80               	movlw	128
 11919  000FA6  EC85  F022         	call	_lcdInst
 11920  000FAA  0EC0               	movlw	192
 11921  000FAC  EC85  F022         	call	_lcdInst
 11922                           
 11923                           ;Test.c: 283: printf("LEVEL -- 2s     ");
 11924  000FB0  0E22               	movlw	low STR_99
 11925  000FB2  0100               	movlb	0	; () banked
 11926  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11927  000FB6  0EFC               	movlw	high STR_99
 11928  000FB8  0100               	movlb	0	; () banked
 11929  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11930  000FBC  EC9C  F008         	call	_printf	;wreg free
 11931                           
 11932                           ;Test.c: 284: updateServoPosition(1150, 3);
 11933  000FC0  0E04               	movlw	4
 11934  000FC2  0100               	movlb	0	; () banked
 11935  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11936  000FC6  0E7E               	movlw	126
 11937  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11938  000FCA  0E00               	movlw	0
 11939  000FCC  0100               	movlb	0	; () banked
 11940  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11941  000FD0  0E03               	movlw	3
 11942  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11943  000FD4  ECDF  F01C         	call	_updateServoPosition	;wreg free
 11944                           
 11945                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11946  000FD8  0E00               	movlw	0
 11947  000FDA  0100               	movlb	0	; () banked
 11948  000FDC  6FBE               	movwf	actuatorTest@i_1606& (0+255),b
 11949  000FDE                     l6824:
 11950                           
 11951                           ; BSR set to: 0
 11952  000FDE  0E63               	movlw	99
 11953  000FE0  0100               	movlb	0	; () banked
 11954  000FE2  65BE               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11955  000FE4  D001               	goto	l6828
 11956  000FE6  D00C               	goto	l6832
 11957  000FE8                     l6828:
 11958                           
 11959                           ; BSR set to: 0
 11960  000FE8  0E68               	movlw	104
 11961  000FEA  0100               	movlb	0	; () banked
 11962  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11963  000FEE  0EE4               	movlw	228
 11964  000FF0                     u7737:
 11965  000FF0  2EE8               	decfsz	wreg,f,c
 11966  000FF2  D7FE               	bra	u7737
 11967  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11968  000FF6  D7FC               	bra	u7737
 11969  000FF8  F000               	nop	
 11970  000FFA  0100               	movlb	0	; () banked
 11971  000FFC  2BBE               	incf	actuatorTest@i_1606& (0+255),f,b
 11972  000FFE  D7EF               	goto	l6824
 11973  001000                     l6832:
 11974                           
 11975                           ; BSR set to: 0
 11976  001000  0E00               	movlw	0
 11977  001002  0100               	movlb	0	; () banked
 11978  001004  6FBF               	movwf	actuatorTest@i_1607& (0+255),b
 11979  001006                     l6834:
 11980                           
 11981                           ; BSR set to: 0
 11982  001006  0E63               	movlw	99
 11983  001008  0100               	movlb	0	; () banked
 11984  00100A  65BF               	cpfsgt	actuatorTest@i_1607& (0+255),b
 11985  00100C  D001               	goto	l6838
 11986  00100E  D00C               	goto	l1116
 11987  001010                     l6838:
 11988                           
 11989                           ; BSR set to: 0
 11990  001010  0E68               	movlw	104
 11991  001012  0100               	movlb	0	; () banked
 11992  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11993  001016  0EE4               	movlw	228
 11994  001018                     u7747:
 11995  001018  2EE8               	decfsz	wreg,f,c
 11996  00101A  D7FE               	bra	u7747
 11997  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11998  00101E  D7FC               	bra	u7747
 11999  001020  F000               	nop	
 12000  001022  0100               	movlb	0	; () banked
 12001  001024  2BBF               	incf	actuatorTest@i_1607& (0+255),f,b
 12002  001026  D7EF               	goto	l6834
 12003  001028                     l1116:
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;Test.c: 287: TMR3ON = 0;
 12007  001028  90B1               	bcf	4017,0,c	;volatile
 12008                           
 12009                           ;Test.c: 288: (INTCONbits.GIE = 0);
 12010  00102A  9EF2               	bcf	intcon,7,c	;volatile
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;Test.c: 293: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12014  00102C  0E01               	movlw	1
 12015  00102E  EC85  F022         	call	_lcdInst
 12016  001032  0E68               	movlw	104
 12017  001034  0100               	movlb	0	; () banked
 12018  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 12019  001038  0EE4               	movlw	228
 12020  00103A                     u7757:
 12021  00103A  2EE8               	decfsz	wreg,f,c
 12022  00103C  D7FE               	bra	u7757
 12023  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12024  001040  D7FC               	bra	u7757
 12025  001042  F000               	nop	
 12026  001044  0E80               	movlw	128
 12027  001046  EC85  F022         	call	_lcdInst
 12028                           
 12029                           ;Test.c: 294: printf("TST: CAM SERVO");
 12030  00104A  0E9D               	movlw	low STR_102
 12031  00104C  0100               	movlb	0	; () banked
 12032  00104E  6F8E               	movwf	printf@f& (0+255),b
 12033  001050  0EFE               	movlw	high STR_102
 12034  001052  0100               	movlb	0	; () banked
 12035  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 12036  001056  EC9C  F008         	call	_printf	;wreg free
 12037                           
 12038                           ;Test.c: 295: lcdInst(0b11000000);;
 12039  00105A  0EC0               	movlw	192
 12040  00105C  EC85  F022         	call	_lcdInst
 12041                           
 12042                           ;Test.c: 296: printf("CAM UP  |RC0=1");
 12043  001060  0E7F               	movlw	low STR_103
 12044  001062  0100               	movlb	0	; () banked
 12045  001064  6F8E               	movwf	printf@f& (0+255),b
 12046  001066  0EFE               	movlw	high STR_103
 12047  001068  0100               	movlb	0	; () banked
 12048  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12049  00106C  EC9C  F008         	call	_printf	;wreg free
 12050                           
 12051                           ;Test.c: 297: LATCbits.LATC0 = 0;
 12052  001070  908B               	bcf	3979,0,c	;volatile
 12053                           
 12054                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12055  001072  0E00               	movlw	0
 12056  001074  0100               	movlb	0	; () banked
 12057  001076  6FC0               	movwf	actuatorTest@i_1610& (0+255),b
 12058  001078                     l6858:
 12059                           
 12060                           ; BSR set to: 0
 12061  001078  0E63               	movlw	99
 12062  00107A  0100               	movlb	0	; () banked
 12063  00107C  65C0               	cpfsgt	actuatorTest@i_1610& (0+255),b
 12064  00107E  D001               	goto	l6862
 12065  001080  D00C               	goto	l6866
 12066  001082                     l6862:
 12067                           
 12068                           ; BSR set to: 0
 12069  001082  0E68               	movlw	104
 12070  001084  0100               	movlb	0	; () banked
 12071  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 12072  001088  0EE4               	movlw	228
 12073  00108A                     u7767:
 12074  00108A  2EE8               	decfsz	wreg,f,c
 12075  00108C  D7FE               	bra	u7767
 12076  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12077  001090  D7FC               	bra	u7767
 12078  001092  F000               	nop	
 12079  001094  0100               	movlb	0	; () banked
 12080  001096  2BC0               	incf	actuatorTest@i_1610& (0+255),f,b
 12081  001098  D7EF               	goto	l6858
 12082  00109A                     l6866:
 12083                           
 12084                           ; BSR set to: 0
 12085  00109A  0E00               	movlw	0
 12086  00109C  0100               	movlb	0	; () banked
 12087  00109E  6FC1               	movwf	actuatorTest@i_1611& (0+255),b
 12088  0010A0                     l6868:
 12089                           
 12090                           ; BSR set to: 0
 12091  0010A0  0E63               	movlw	99
 12092  0010A2  0100               	movlb	0	; () banked
 12093  0010A4  65C1               	cpfsgt	actuatorTest@i_1611& (0+255),b
 12094  0010A6  D001               	goto	l6872
 12095  0010A8  D00C               	goto	l6876
 12096  0010AA                     l6872:
 12097                           
 12098                           ; BSR set to: 0
 12099  0010AA  0E68               	movlw	104
 12100  0010AC  0100               	movlb	0	; () banked
 12101  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12102  0010B0  0EE4               	movlw	228
 12103  0010B2                     u7777:
 12104  0010B2  2EE8               	decfsz	wreg,f,c
 12105  0010B4  D7FE               	bra	u7777
 12106  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12107  0010B8  D7FC               	bra	u7777
 12108  0010BA  F000               	nop	
 12109  0010BC  0100               	movlb	0	; () banked
 12110  0010BE  2BC1               	incf	actuatorTest@i_1611& (0+255),f,b
 12111  0010C0  D7EF               	goto	l6868
 12112  0010C2                     l6876:
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;Test.c: 299: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12116  0010C2  0E80               	movlw	128
 12117  0010C4  EC85  F022         	call	_lcdInst
 12118  0010C8  0EC0               	movlw	192
 12119  0010CA  EC85  F022         	call	_lcdInst
 12120                           
 12121                           ;Test.c: 300: LATCbits.LATC0 = 1;
 12122  0010CE  808B               	bsf	3979,0,c	;volatile
 12123                           
 12124                           ;Test.c: 301: printf("CAM DWN |RC0=0");
 12125  0010D0  0E70               	movlw	low STR_104
 12126  0010D2  0100               	movlb	0	; () banked
 12127  0010D4  6F8E               	movwf	printf@f& (0+255),b
 12128  0010D6  0EFE               	movlw	high STR_104
 12129  0010D8  0100               	movlb	0	; () banked
 12130  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12131  0010DC  EC9C  F008         	call	_printf	;wreg free
 12132                           
 12133                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12134  0010E0  0E00               	movlw	0
 12135  0010E2  0100               	movlb	0	; () banked
 12136  0010E4  6FC2               	movwf	actuatorTest@i_1613& (0+255),b
 12137  0010E6                     l6884:
 12138                           
 12139                           ; BSR set to: 0
 12140  0010E6  0E63               	movlw	99
 12141  0010E8  0100               	movlb	0	; () banked
 12142  0010EA  65C2               	cpfsgt	actuatorTest@i_1613& (0+255),b
 12143  0010EC  D001               	goto	l6888
 12144  0010EE  D00C               	goto	l6892
 12145  0010F0                     l6888:
 12146                           
 12147                           ; BSR set to: 0
 12148  0010F0  0E68               	movlw	104
 12149  0010F2  0100               	movlb	0	; () banked
 12150  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12151  0010F6  0EE4               	movlw	228
 12152  0010F8                     u7787:
 12153  0010F8  2EE8               	decfsz	wreg,f,c
 12154  0010FA  D7FE               	bra	u7787
 12155  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12156  0010FE  D7FC               	bra	u7787
 12157  001100  F000               	nop	
 12158  001102  0100               	movlb	0	; () banked
 12159  001104  2BC2               	incf	actuatorTest@i_1613& (0+255),f,b
 12160  001106  D7EF               	goto	l6884
 12161  001108                     l6892:
 12162                           
 12163                           ; BSR set to: 0
 12164  001108  0E00               	movlw	0
 12165  00110A  0100               	movlb	0	; () banked
 12166  00110C  6FC3               	movwf	actuatorTest@i_1614& (0+255),b
 12167  00110E                     l6894:
 12168                           
 12169                           ; BSR set to: 0
 12170  00110E  0E63               	movlw	99
 12171  001110  0100               	movlb	0	; () banked
 12172  001112  65C3               	cpfsgt	actuatorTest@i_1614& (0+255),b
 12173  001114  D001               	goto	l6898
 12174  001116  D00C               	goto	l6902
 12175  001118                     l6898:
 12176                           
 12177                           ; BSR set to: 0
 12178  001118  0E68               	movlw	104
 12179  00111A  0100               	movlb	0	; () banked
 12180  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12181  00111E  0EE4               	movlw	228
 12182  001120                     u7797:
 12183  001120  2EE8               	decfsz	wreg,f,c
 12184  001122  D7FE               	bra	u7797
 12185  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12186  001126  D7FC               	bra	u7797
 12187  001128  F000               	nop	
 12188  00112A  0100               	movlb	0	; () banked
 12189  00112C  2BC3               	incf	actuatorTest@i_1614& (0+255),f,b
 12190  00112E  D7EF               	goto	l6894
 12191  001130                     l6902:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;Test.c: 303: machine_state = Testing_state;
 12195  001130  0E03               	movlw	3
 12196  001132  0100               	movlb	0	; () banked
 12197  001134  6FFC               	movwf	_machine_state& (0+255),b
 12198                           
 12199                           ; BSR set to: 0
 12200  001136  0012               	return		;funcret
 12201  001138                     __end_of_actuatorTest:
 12202                           	opt stack 0
 12203                           tblptru	equ	0xFF8
 12204                           tblptrh	equ	0xFF7
 12205                           tblptrl	equ	0xFF6
 12206                           tablat	equ	0xFF5
 12207                           prodh	equ	0xFF4
 12208                           prodl	equ	0xFF3
 12209                           intcon	equ	0xFF2
 12210                           intcon2	equ	0xFF1
 12211                           intcon3	equ	0xFF0
 12212                           postinc0	equ	0xFEE
 12213                           wreg	equ	0xFE8
 12214                           postdec1	equ	0xFE5
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           fsr2h	equ	0xFDA
 12220                           fsr2l	equ	0xFD9
 12221                           status	equ	0xFD8
 12222                           
 12223 ;; *************** function _updateServoPosition *****************
 12224 ;; Defined at:
 12225 ;;		line 334 in file "sort.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  time_us         2    0[BANK0 ] int 
 12228 ;;  timer           2    2[BANK0 ] int 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  my_time         2    6[BANK0 ] unsigned int 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  1    wreg      void 
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, status,0
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12243 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;Total ram usage:        8 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    7
 12247 ;; This function calls:
 12248 ;;		Nothing
 12249 ;; This function is called by:
 12250 ;;		_Loading
 12251 ;;		_Distribution
 12252 ;;		_initServos
 12253 ;;		_actuatorTest
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           	psect	text42
 12258  0039BE                     __ptext42:
 12259                           	opt stack 0
 12260  0039BE                     _updateServoPosition:
 12261                           	opt stack 21
 12262                           
 12263                           ;sort.c: 335: unsigned int my_time = 65535 - time_us;
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;incstack = 0
 12267  0039BE  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 12268  0039C2  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 12269  0039C6  0100               	movlb	0	; () banked
 12270  0039C8  1F84               	comf	??_updateServoPosition& (0+255),f,b
 12271  0039CA  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 12272  0039CC  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 12273  0039CE  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 12274  0039D0  0EFF               	movlw	255
 12275  0039D2  0100               	movlb	0	; () banked
 12276  0039D4  2584               	addwf	??_updateServoPosition& (0+255),w,b
 12277  0039D6  0100               	movlb	0	; () banked
 12278  0039D8  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 12279  0039DA  0EFF               	movlw	255
 12280  0039DC  0100               	movlb	0	; () banked
 12281  0039DE  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 12282  0039E0  0100               	movlb	0	; () banked
 12283  0039E2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 12284                           
 12285                           ;sort.c: 336: switch(timer){
 12286  0039E4  D015               	goto	l5450
 12287  0039E6                     l5448:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;sort.c: 338: servoTimes[0] = my_time >> 8;
 12291  0039E6  0100               	movlb	0	; () banked
 12292  0039E8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 12293  0039EA  0101               	movlb	1	; () banked
 12294  0039EC  6F1C               	movwf	_servoTimes& (0+255),b
 12295  0039EE  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 12296                           
 12297                           ;sort.c: 339: servoTimes[1] = my_time & 0xFF;
 12298  0039F0  0100               	movlb	0	; () banked
 12299  0039F2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 12300  0039F4  0101               	movlb	1	; () banked
 12301  0039F6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 12302  0039F8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 12303  0039FA                     l779:
 12304                           
 12305                           ;sort.c: 341: servoTimes[2] = my_time >> 8;
 12306  0039FA  0100               	movlb	0	; () banked
 12307  0039FC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 12308  0039FE  0101               	movlb	1	; () banked
 12309  003A00  6F20               	movwf	(_servoTimes+4)& (0+255),b
 12310  003A02  6B21               	clrf	(_servoTimes+5)& (0+255),b
 12311                           
 12312                           ;sort.c: 342: servoTimes[3] = my_time & 0xFF;
 12313  003A04  0100               	movlb	0	; () banked
 12314  003A06  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 12315  003A08  0101               	movlb	1	; () banked
 12316  003A0A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 12317  003A0C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 12318                           
 12319                           ;sort.c: 343: }
 12320  003A0E  0012               	return	
 12321  003A10                     l5450:
 12322  003A10  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 12323  003A14  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 12324                           
 12325                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12326                           ; Switch size 1, requested type "space"
 12327                           ; Number of cases is 1, Range of values is 0 to 0
 12328                           ; switch strategies available:
 12329                           ; Name         Instructions Cycles
 12330                           ; simple_byte            4     3 (average)
 12331                           ;	Chosen strategy is simple_byte
 12332  003A18  0100               	movlb	0	; () banked
 12333  003A1A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 12334  003A1C  0A00               	xorlw	0	; case 0
 12335  003A1E  A4D8               	btfss	status,2,c
 12336  003A20  0012               	return	
 12337                           
 12338                           ; BSR set to: 0
 12339                           ; Switch size 1, requested type "space"
 12340                           ; Number of cases is 2, Range of values is 1 to 3
 12341                           ; switch strategies available:
 12342                           ; Name         Instructions Cycles
 12343                           ; simple_byte            7     4 (average)
 12344                           ;	Chosen strategy is simple_byte
 12345  003A22  0100               	movlb	0	; () banked
 12346  003A24  5184               	movf	??_updateServoPosition& (0+255),w,b
 12347  003A26  0A01               	xorlw	1	; case 1
 12348  003A28  B4D8               	btfsc	status,2,c
 12349  003A2A  D7DD               	goto	l5448
 12350  003A2C  0A02               	xorlw	2	; case 3
 12351  003A2E  A4D8               	btfss	status,2,c
 12352  003A30  0012               	return	
 12353  003A32  D7E3               	goto	l779
 12354  003A34                     __end_of_updateServoPosition:
 12355                           	opt stack 0
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           intcon2	equ	0xFF1
 12364                           intcon3	equ	0xFF0
 12365                           postinc0	equ	0xFEE
 12366                           wreg	equ	0xFE8
 12367                           postdec1	equ	0xFE5
 12368                           fsr1l	equ	0xFE1
 12369                           indf2	equ	0xFDF
 12370                           postinc2	equ	0xFDE
 12371                           postdec2	equ	0xFDD
 12372                           fsr2h	equ	0xFDA
 12373                           fsr2l	equ	0xFD9
 12374                           status	equ	0xFD8
 12375                           
 12376 ;; *************** function _ToggleTestA5 *****************
 12377 ;; Defined at:
 12378 ;;		line 399 in file "Test.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;		None
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;  on              2   44[BANK0 ] int 
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;Total ram usage:        3 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:   10
 12399 ;; This function calls:
 12400 ;;		_lcdInst
 12401 ;;		_printf
 12402 ;; This function is called by:
 12403 ;;		_Test
 12404 ;; This function uses a non-reentrant model
 12405 ;;
 12406                           
 12407                           	psect	text43
 12408  0037B4                     __ptext43:
 12409                           	opt stack 0
 12410  0037B4                     _ToggleTestA5:
 12411                           	opt stack 19
 12412                           
 12413                           ;Test.c: 400: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12414                           
 12415                           ;incstack = 0
 12416  0037B4  0E01               	movlw	1
 12417  0037B6  EC85  F022         	call	_lcdInst
 12418  0037BA  0E68               	movlw	104
 12419  0037BC  0100               	movlb	0	; () banked
 12420  0037BE  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12421  0037C0  0EE4               	movlw	228
 12422  0037C2                     u7807:
 12423  0037C2  2EE8               	decfsz	wreg,f,c
 12424  0037C4  D7FE               	bra	u7807
 12425  0037C6  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12426  0037C8  D7FC               	bra	u7807
 12427  0037CA  F000               	nop	
 12428  0037CC  0E80               	movlw	128
 12429  0037CE  EC85  F022         	call	_lcdInst
 12430                           
 12431                           ;Test.c: 401: printf("D WILL RETURN   ");
 12432  0037D2  0E55               	movlw	low STR_109
 12433  0037D4  0100               	movlb	0	; () banked
 12434  0037D6  6F8E               	movwf	printf@f& (0+255),b
 12435  0037D8  0EFC               	movlw	high STR_109
 12436  0037DA  0100               	movlb	0	; () banked
 12437  0037DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12438  0037DE  EC9C  F008         	call	_printf	;wreg free
 12439                           
 12440                           ;Test.c: 402: lcdInst(0b11000000);;
 12441  0037E2  0EC0               	movlw	192
 12442  0037E4  EC85  F022         	call	_lcdInst
 12443                           
 12444                           ;Test.c: 403: printf("ELSE TOGGLES RA5");
 12445  0037E8  0E88               	movlw	low STR_110
 12446  0037EA  0100               	movlb	0	; () banked
 12447  0037EC  6F8E               	movwf	printf@f& (0+255),b
 12448  0037EE  0EFC               	movlw	high STR_110
 12449  0037F0  0100               	movlb	0	; () banked
 12450  0037F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12451  0037F4  EC9C  F008         	call	_printf	;wreg free
 12452                           
 12453                           ;Test.c: 404: int on = 0;
 12454  0037F8  0E00               	movlw	0
 12455  0037FA  0100               	movlb	0	; () banked
 12456  0037FC  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12457  0037FE  0E00               	movlw	0
 12458  003800  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12459  003802                     l1179:
 12460  003802  A281               	btfss	3969,1,c	;volatile
 12461  003804  D7FE               	goto	l1179
 12462                           
 12463                           ;Test.c: 409: }
 12464                           ;Test.c: 410: if(PORTB >> 4 == 0b1111){
 12465  003806  3881               	swapf	3969,w,c	;volatile
 12466  003808  0B0F               	andlw	15
 12467  00380A  0A0F               	xorlw	15
 12468  00380C  B4D8               	btfsc	status,2,c
 12469  00380E  0012               	return	
 12470                           
 12471                           ;Test.c: 413: else{
 12472                           ;Test.c: 414: if(on == 0){
 12473                           
 12474                           ;Test.c: 412: }
 12475                           
 12476                           ;Test.c: 411: break;
 12477  003810  0100               	movlb	0	; () banked
 12478  003812  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12479  003814  0100               	movlb	0	; () banked
 12480  003816  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12481  003818  A4D8               	btfss	status,2,c
 12482  00381A  D007               	goto	l6948
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;Test.c: 415: on = 1;
 12486  00381C  0E00               	movlw	0
 12487  00381E  0100               	movlb	0	; () banked
 12488  003820  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12489  003822  0E01               	movlw	1
 12490  003824  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12491                           
 12492                           ; BSR set to: 0
 12493                           ;Test.c: 416: LATAbits.LATA5 = 1;
 12494  003826  8A89               	bsf	3977,5,c	;volatile
 12495                           
 12496                           ;Test.c: 417: }
 12497  003828  D006               	goto	l1187
 12498  00382A                     l6948:
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;Test.c: 418: else{
 12502                           ;Test.c: 419: on = 0;
 12503  00382A  0E00               	movlw	0
 12504  00382C  0100               	movlb	0	; () banked
 12505  00382E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12506  003830  0E00               	movlw	0
 12507  003832  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;Test.c: 420: LATAbits.LATA5 = 0;
 12511  003834  9A89               	bcf	3977,5,c	;volatile
 12512  003836                     l1187:
 12513  003836  A281               	btfss	3969,1,c	;volatile
 12514  003838  D7E4               	goto	l1179
 12515  00383A  D7FD               	goto	l1187
 12516  00383C                     __end_of_ToggleTestA5:
 12517                           	opt stack 0
 12518                           tblptru	equ	0xFF8
 12519                           tblptrh	equ	0xFF7
 12520                           tblptrl	equ	0xFF6
 12521                           tablat	equ	0xFF5
 12522                           prodh	equ	0xFF4
 12523                           prodl	equ	0xFF3
 12524                           intcon	equ	0xFF2
 12525                           intcon2	equ	0xFF1
 12526                           intcon3	equ	0xFF0
 12527                           postinc0	equ	0xFEE
 12528                           wreg	equ	0xFE8
 12529                           postdec1	equ	0xFE5
 12530                           fsr1l	equ	0xFE1
 12531                           indf2	equ	0xFDF
 12532                           postinc2	equ	0xFDE
 12533                           postdec2	equ	0xFDD
 12534                           fsr2h	equ	0xFDA
 12535                           fsr2l	equ	0xFD9
 12536                           status	equ	0xFD8
 12537                           
 12538 ;; *************** function _SolenoidTestA5 *****************
 12539 ;; Defined at:
 12540 ;;		line 375 in file "Test.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  i               1   47[BANK0 ] unsigned char 
 12545 ;;  i               1   48[BANK0 ] unsigned char 
 12546 ;;  i               2   45[BANK0 ] int 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  1    wreg      void 
 12549 ;; Registers used:
 12550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12557 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12559 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;Total ram usage:        6 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:   10
 12563 ;; This function calls:
 12564 ;;		_lcdInst
 12565 ;;		_printf
 12566 ;; This function is called by:
 12567 ;;		_Test
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           	psect	text44
 12572  003014                     __ptext44:
 12573                           	opt stack 0
 12574  003014                     _SolenoidTestA5:
 12575                           	opt stack 19
 12576  003014                     
 12577                           ;Test.c: 377: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12578  003014  0E01               	movlw	1
 12579  003016  EC85  F022         	call	_lcdInst
 12580  00301A  0E68               	movlw	104
 12581  00301C  0100               	movlb	0	; () banked
 12582  00301E  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12583  003020  0EE4               	movlw	228
 12584  003022                     u7817:
 12585  003022  2EE8               	decfsz	wreg,f,c
 12586  003024  D7FE               	bra	u7817
 12587  003026  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12588  003028  D7FC               	bra	u7817
 12589  00302A  F000               	nop	
 12590  00302C  0E80               	movlw	128
 12591  00302E  EC85  F022         	call	_lcdInst
 12592                           
 12593                           ;Test.c: 378: printf("SOLENOID TST");
 12594  003032  0E49               	movlw	low STR_107
 12595  003034  0100               	movlb	0	; () banked
 12596  003036  6F8E               	movwf	printf@f& (0+255),b
 12597  003038  0EFF               	movlw	high STR_107
 12598  00303A  0100               	movlb	0	; () banked
 12599  00303C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12600  00303E  EC9C  F008         	call	_printf	;wreg free
 12601                           
 12602                           ;Test.c: 379: lcdInst(0b11000000);;
 12603  003042  0EC0               	movlw	192
 12604  003044  EC85  F022         	call	_lcdInst
 12605  003048                     l1164:
 12606  003048  A281               	btfss	3969,1,c	;volatile
 12607  00304A  D7FE               	goto	l1164
 12608                           
 12609                           ;Test.c: 384: }
 12610                           ;Test.c: 386: for(int i = 0; i < 3; i++){
 12611  00304C  0E00               	movlw	0
 12612  00304E  0100               	movlb	0	; () banked
 12613  003050  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12614  003052  0E00               	movlw	0
 12615  003054  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12616  003056                     l6964:
 12617                           
 12618                           ; BSR set to: 0
 12619  003056  0100               	movlb	0	; () banked
 12620  003058  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12621  00305A  D008               	goto	l6968
 12622  00305C  0100               	movlb	0	; () banked
 12623  00305E  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12624  003060  E12D               	bnz	l6984
 12625  003062  0E03               	movlw	3
 12626  003064  0100               	movlb	0	; () banked
 12627  003066  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12628  003068  B0D8               	btfsc	status,0,c
 12629  00306A  D028               	goto	l6984
 12630  00306C                     l6968:
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;Test.c: 387: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12634  00306C  0E00               	movlw	0
 12635  00306E  0100               	movlb	0	; () banked
 12636  003070  6FAF               	movwf	SolenoidTestA5@i_1625& (0+255),b
 12637  003072                     l6970:
 12638                           
 12639                           ; BSR set to: 0
 12640  003072  0E63               	movlw	99
 12641  003074  0100               	movlb	0	; () banked
 12642  003076  65AF               	cpfsgt	SolenoidTestA5@i_1625& (0+255),b
 12643  003078  D001               	goto	l6974
 12644  00307A  D00C               	goto	l1170
 12645  00307C                     l6974:
 12646                           
 12647                           ; BSR set to: 0
 12648  00307C  0E68               	movlw	104
 12649  00307E  0100               	movlb	0	; () banked
 12650  003080  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12651  003082  0EE4               	movlw	228
 12652  003084                     u7827:
 12653  003084  2EE8               	decfsz	wreg,f,c
 12654  003086  D7FE               	bra	u7827
 12655  003088  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12656  00308A  D7FC               	bra	u7827
 12657  00308C  F000               	nop	
 12658  00308E  0100               	movlb	0	; () banked
 12659  003090  2BAF               	incf	SolenoidTestA5@i_1625& (0+255),f,b
 12660  003092  D7EF               	goto	l6970
 12661  003094                     l1170:
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;Test.c: 388: LATAbits.LATA5 = 1;
 12665  003094  8A89               	bsf	3977,5,c	;volatile
 12666                           
 12667                           ; BSR set to: 0
 12668                           ;Test.c: 389: _delay((unsigned long)((150)*(32000000/4000.0)));
 12669  003096  0E07               	movlw	7
 12670  003098  0100               	movlb	0	; () banked
 12671  00309A  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12672  00309C  0E17               	movlw	23
 12673  00309E  0100               	movlb	0	; () banked
 12674  0030A0  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12675  0030A2  0E6A               	movlw	106
 12676  0030A4                     u7837:
 12677  0030A4  2EE8               	decfsz	wreg,f,c
 12678  0030A6  D7FE               	bra	u7837
 12679  0030A8  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12680  0030AA  D7FC               	bra	u7837
 12681  0030AC  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12682  0030AE  D7FA               	bra	u7837
 12683  0030B0  F000               	nop	
 12684                           
 12685                           ;Test.c: 390: LATAbits.LATA5 = 0;
 12686  0030B2  9A89               	bcf	3977,5,c	;volatile
 12687  0030B4  0100               	movlb	0	; () banked
 12688  0030B6  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12689  0030B8  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12690  0030BA  D7CD               	goto	l6964
 12691  0030BC                     l6984:
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;Test.c: 391: }
 12695                           ;Test.c: 393: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12696  0030BC  0E01               	movlw	1
 12697  0030BE  EC85  F022         	call	_lcdInst
 12698  0030C2  0E68               	movlw	104
 12699  0030C4  0100               	movlb	0	; () banked
 12700  0030C6  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12701  0030C8  0EE4               	movlw	228
 12702  0030CA                     u7847:
 12703  0030CA  2EE8               	decfsz	wreg,f,c
 12704  0030CC  D7FE               	bra	u7847
 12705  0030CE  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12706  0030D0  D7FC               	bra	u7847
 12707  0030D2  F000               	nop	
 12708  0030D4  0E80               	movlw	128
 12709  0030D6  EC85  F022         	call	_lcdInst
 12710                           
 12711                           ;Test.c: 394: printf("PUSH DONE");
 12712  0030DA  0E90               	movlw	low STR_108
 12713  0030DC  0100               	movlb	0	; () banked
 12714  0030DE  6F8E               	movwf	printf@f& (0+255),b
 12715  0030E0  0EFF               	movlw	high STR_108
 12716  0030E2  0100               	movlb	0	; () banked
 12717  0030E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12718  0030E6  EC9C  F008         	call	_printf	;wreg free
 12719                           
 12720                           ;Test.c: 395: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12721  0030EA  0E00               	movlw	0
 12722  0030EC  0100               	movlb	0	; () banked
 12723  0030EE  6FB0               	movwf	SolenoidTestA5@i_1627& (0+255),b
 12724  0030F0                     l6994:
 12725                           
 12726                           ; BSR set to: 0
 12727  0030F0  0E63               	movlw	99
 12728  0030F2  0100               	movlb	0	; () banked
 12729  0030F4  65B0               	cpfsgt	SolenoidTestA5@i_1627& (0+255),b
 12730  0030F6  D001               	goto	l6998
 12731  0030F8  D78D               	goto	l6952
 12732  0030FA                     l6998:
 12733                           
 12734                           ; BSR set to: 0
 12735  0030FA  0E68               	movlw	104
 12736  0030FC  0100               	movlb	0	; () banked
 12737  0030FE  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12738  003100  0EE4               	movlw	228
 12739  003102                     u7857:
 12740  003102  2EE8               	decfsz	wreg,f,c
 12741  003104  D7FE               	bra	u7857
 12742  003106  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12743  003108  D7FC               	bra	u7857
 12744  00310A  F000               	nop	
 12745  00310C  0100               	movlb	0	; () banked
 12746  00310E  2BB0               	incf	SolenoidTestA5@i_1627& (0+255),f,b
 12747  003110  D7EF               	goto	l6994
 12748  003112                     __end_of_SolenoidTestA5:
 12749                           	opt stack 0
 12750                           tblptru	equ	0xFF8
 12751                           tblptrh	equ	0xFF7
 12752                           tblptrl	equ	0xFF6
 12753                           tablat	equ	0xFF5
 12754                           prodh	equ	0xFF4
 12755                           prodl	equ	0xFF3
 12756                           intcon	equ	0xFF2
 12757                           intcon2	equ	0xFF1
 12758                           intcon3	equ	0xFF0
 12759                           postinc0	equ	0xFEE
 12760                           wreg	equ	0xFE8
 12761                           postdec1	equ	0xFE5
 12762                           fsr1l	equ	0xFE1
 12763                           indf2	equ	0xFDF
 12764                           postinc2	equ	0xFDE
 12765                           postdec2	equ	0xFDD
 12766                           fsr2h	equ	0xFDA
 12767                           fsr2l	equ	0xFD9
 12768                           status	equ	0xFD8
 12769                           
 12770 ;; *************** function _PortTests *****************
 12771 ;; Defined at:
 12772 ;;		line 306 in file "Test.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;		None
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;		None
 12777 ;; Return value:  Size  Location     Type
 12778 ;;                  1    wreg      void 
 12779 ;; Registers used:
 12780 ;;		wreg, status,2, status,0
 12781 ;; Tracked objects:
 12782 ;;		On entry : 0/0
 12783 ;;		On exit  : 0/0
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12788 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12790 ;;Total ram usage:        2 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    7
 12793 ;; This function calls:
 12794 ;;		Nothing
 12795 ;; This function is called by:
 12796 ;;		_Test
 12797 ;; This function uses a non-reentrant model
 12798 ;;
 12799                           
 12800                           	psect	text45
 12801  0038C2                     __ptext45:
 12802                           	opt stack 0
 12803  0038C2                     _PortTests:
 12804                           	opt stack 22
 12805  0038C2                     l1129:
 12806  0038C2  A281               	btfss	3969,1,c	;volatile
 12807  0038C4  D7FE               	goto	l1129
 12808                           
 12809                           ;Test.c: 310: var = PORTB >> 4;
 12810  0038C6  CF81 F080          	movff	3969,??_PortTests	;volatile
 12811  0038CA  0100               	movlb	0	; () banked
 12812  0038CC  3B80               	swapf	??_PortTests& (0+255),f,b
 12813  0038CE  0E0F               	movlw	15
 12814  0038D0  1780               	andwf	??_PortTests& (0+255),f,b
 12815  0038D2  0100               	movlb	0	; () banked
 12816  0038D4  5180               	movf	??_PortTests& (0+255),w,b
 12817  0038D6  0100               	movlb	0	; () banked
 12818  0038D8  6FFA               	movwf	_var& (0+255),b
 12819  0038DA  6BFB               	clrf	(_var+1)& (0+255),b
 12820                           
 12821                           ;Test.c: 311: switch(var){
 12822  0038DC  D00C               	goto	l7006
 12823  0038DE                     l1133:
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;Test.c: 313: LATEbits.LATE0 = 1;
 12827  0038DE  808D               	bsf	3981,0,c	;volatile
 12828                           
 12829                           ;Test.c: 314: break;
 12830  0038E0  D027               	goto	l1141
 12831  0038E2                     l1135:
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;Test.c: 316: LATEbits.LATE1 = 1;
 12835  0038E2  828D               	bsf	3981,1,c	;volatile
 12836                           
 12837                           ;Test.c: 317: break;
 12838  0038E4  D025               	goto	l1141
 12839  0038E6                     l1136:
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;Test.c: 319: LATDbits.LATD0 = 1;
 12843  0038E6  808C               	bsf	3980,0,c	;volatile
 12844                           
 12845                           ;Test.c: 320: break;
 12846  0038E8  D023               	goto	l1141
 12847  0038EA                     l1137:
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;Test.c: 322: LATAbits.LATA3 = 1;
 12851  0038EA  8689               	bsf	3977,3,c	;volatile
 12852                           
 12853                           ;Test.c: 323: break;
 12854  0038EC  D021               	goto	l1141
 12855  0038EE                     l1138:
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;Test.c: 325: LATAbits.LATA4 = 1;
 12859  0038EE  8889               	bsf	3977,4,c	;volatile
 12860                           
 12861                           ;Test.c: 326: break;
 12862  0038F0  D01F               	goto	l1141
 12863  0038F2                     l1139:
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;Test.c: 328: LATAbits.LATA5 = 1;
 12867  0038F2  8A89               	bsf	3977,5,c	;volatile
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 332: }
 12871                           
 12872                           ; BSR set to: 0
 12873                           ;Test.c: 331: break;
 12874                           
 12875                           ;Test.c: 330: default:
 12876                           
 12877                           ;Test.c: 329: break;
 12878  0038F4  D01D               	goto	l1141
 12879  0038F6                     l7006:
 12880                           
 12881                           ; BSR set to: 0
 12882  0038F6  C0FA  F080         	movff	_var,??_PortTests
 12883  0038FA  C0FB  F081         	movff	_var+1,??_PortTests+1
 12884                           
 12885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12886                           ; Switch size 1, requested type "space"
 12887                           ; Number of cases is 1, Range of values is 0 to 0
 12888                           ; switch strategies available:
 12889                           ; Name         Instructions Cycles
 12890                           ; simple_byte            4     3 (average)
 12891                           ;	Chosen strategy is simple_byte
 12892  0038FE  0100               	movlb	0	; () banked
 12893  003900  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12894  003902  0A00               	xorlw	0	; case 0
 12895  003904  A4D8               	btfss	status,2,c
 12896  003906  D014               	goto	l1141
 12897                           
 12898                           ; BSR set to: 0
 12899                           ; Switch size 1, requested type "space"
 12900                           ; Number of cases is 6, Range of values is 0 to 5
 12901                           ; switch strategies available:
 12902                           ; Name         Instructions Cycles
 12903                           ; simple_byte           19    10 (average)
 12904                           ;	Chosen strategy is simple_byte
 12905  003908  0100               	movlb	0	; () banked
 12906  00390A  5180               	movf	??_PortTests& (0+255),w,b
 12907  00390C  0A00               	xorlw	0	; case 0
 12908  00390E  B4D8               	btfsc	status,2,c
 12909  003910  D7E6               	goto	l1133
 12910  003912  0A01               	xorlw	1	; case 1
 12911  003914  B4D8               	btfsc	status,2,c
 12912  003916  D7E5               	goto	l1135
 12913  003918  0A03               	xorlw	3	; case 2
 12914  00391A  B4D8               	btfsc	status,2,c
 12915  00391C  D7E4               	goto	l1136
 12916  00391E  0A01               	xorlw	1	; case 3
 12917  003920  B4D8               	btfsc	status,2,c
 12918  003922  D7E3               	goto	l1137
 12919  003924  0A07               	xorlw	7	; case 4
 12920  003926  B4D8               	btfsc	status,2,c
 12921  003928  D7E2               	goto	l1138
 12922  00392A  0A01               	xorlw	1	; case 5
 12923  00392C  B4D8               	btfsc	status,2,c
 12924  00392E  D7E1               	goto	l1139
 12925  003930                     l1141:
 12926  003930  B281               	btfsc	3969,1,c	;volatile
 12927  003932  D7FE               	goto	l1141
 12928                           
 12929                           ;Test.c: 334: __nop();
 12930  003934  F000               	nop	
 12931                           
 12932                           ;Test.c: 335: __nop();
 12933  003936  F000               	nop	
 12934                           
 12935                           ;Test.c: 336: LATA = 0x00;
 12936  003938  0E00               	movlw	0
 12937  00393A  6E89               	movwf	3977,c	;volatile
 12938                           
 12939                           ;Test.c: 337: LATE = 0x00;
 12940  00393C  0E00               	movlw	0
 12941  00393E  6E8D               	movwf	3981,c	;volatile
 12942                           
 12943                           ;Test.c: 338: LATD = 0x00; }
 12944  003940  0E00               	movlw	0
 12945  003942  6E8C               	movwf	3980,c	;volatile
 12946  003944  D7BE               	goto	l1129
 12947  003946                     __end_of_PortTests:
 12948                           	opt stack 0
 12949                           tblptru	equ	0xFF8
 12950                           tblptrh	equ	0xFF7
 12951                           tblptrl	equ	0xFF6
 12952                           tablat	equ	0xFF5
 12953                           prodh	equ	0xFF4
 12954                           prodl	equ	0xFF3
 12955                           intcon	equ	0xFF2
 12956                           intcon2	equ	0xFF1
 12957                           intcon3	equ	0xFF0
 12958                           postinc0	equ	0xFEE
 12959                           wreg	equ	0xFE8
 12960                           postdec1	equ	0xFE5
 12961                           fsr1l	equ	0xFE1
 12962                           indf2	equ	0xFDF
 12963                           postinc2	equ	0xFDE
 12964                           postdec2	equ	0xFDD
 12965                           fsr2h	equ	0xFDA
 12966                           fsr2l	equ	0xFD9
 12967                           status	equ	0xFD8
 12968                           
 12969 ;; *************** function _PortTestA5 *****************
 12970 ;; Defined at:
 12971 ;;		line 341 in file "Test.c"
 12972 ;; Parameters:    Size  Location     Type
 12973 ;;		None
 12974 ;; Auto vars:     Size  Location     Type
 12975 ;;		None
 12976 ;; Return value:  Size  Location     Type
 12977 ;;                  1    wreg      void 
 12978 ;; Registers used:
 12979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12980 ;; Tracked objects:
 12981 ;;		On entry : 0/0
 12982 ;;		On exit  : 0/0
 12983 ;;		Unchanged: 0/0
 12984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12989 ;;Total ram usage:        1 bytes
 12990 ;; Hardware stack levels used:    1
 12991 ;; Hardware stack levels required when called:   10
 12992 ;; This function calls:
 12993 ;;		_lcdInst
 12994 ;;		_printf
 12995 ;; This function is called by:
 12996 ;;		_Test
 12997 ;; This function uses a non-reentrant model
 12998 ;;
 12999                           
 13000                           	psect	text46
 13001  003C94                     __ptext46:
 13002                           	opt stack 0
 13003  003C94                     _PortTestA5:
 13004                           	opt stack 19
 13005                           
 13006                           ;Test.c: 342: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13007                           
 13008                           ;incstack = 0
 13009  003C94  0E01               	movlw	1
 13010  003C96  EC85  F022         	call	_lcdInst
 13011  003C9A  0E68               	movlw	104
 13012  003C9C  0100               	movlb	0	; () banked
 13013  003C9E  6FAB               	movwf	??_PortTestA5& (0+255),b
 13014  003CA0  0EE4               	movlw	228
 13015  003CA2                     u7867:
 13016  003CA2  2EE8               	decfsz	wreg,f,c
 13017  003CA4  D7FE               	bra	u7867
 13018  003CA6  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13019  003CA8  D7FC               	bra	u7867
 13020  003CAA  F000               	nop	
 13021  003CAC  0E80               	movlw	128
 13022  003CAE  EC85  F022         	call	_lcdInst
 13023                           
 13024                           ;Test.c: 343: printf("D WILL RETURN    ");
 13025  003CB2  0EA7               	movlw	low STR_105
 13026  003CB4  0100               	movlb	0	; () banked
 13027  003CB6  6F8E               	movwf	printf@f& (0+255),b
 13028  003CB8  0EFB               	movlw	high STR_105
 13029  003CBA  0100               	movlb	0	; () banked
 13030  003CBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13031  003CBE  EC9C  F008         	call	_printf	;wreg free
 13032                           
 13033                           ;Test.c: 344: lcdInst(0b11000000);;
 13034  003CC2  0EC0               	movlw	192
 13035  003CC4  EC85  F022         	call	_lcdInst
 13036                           
 13037                           ;Test.c: 345: printf("OTHER SETS RA5   ");
 13038  003CC8  0EB9               	movlw	low STR_106
 13039  003CCA  0100               	movlb	0	; () banked
 13040  003CCC  6F8E               	movwf	printf@f& (0+255),b
 13041  003CCE  0EFB               	movlw	high STR_106
 13042  003CD0  0100               	movlb	0	; () banked
 13043  003CD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13044  003CD4  EC9C  F008         	call	_printf	;wreg free
 13045  003CD8                     l1150:
 13046  003CD8  A281               	btfss	3969,1,c	;volatile
 13047  003CDA  D7FE               	goto	l1150
 13048                           
 13049                           ;Test.c: 350: }
 13050                           ;Test.c: 351: if(PORTB >> 4 == 0b1111){
 13051  003CDC  3881               	swapf	3969,w,c	;volatile
 13052  003CDE  0B0F               	andlw	15
 13053  003CE0  0A0F               	xorlw	15
 13054  003CE2  B4D8               	btfsc	status,2,c
 13055  003CE4  0012               	return	
 13056                           
 13057                           ;Test.c: 354: else{
 13058                           ;Test.c: 355: LATAbits.LATA5 = 1;
 13059                           
 13060                           ;Test.c: 353: }
 13061                           
 13062                           ;Test.c: 352: break;
 13063  003CE6  8A89               	bsf	3977,5,c	;volatile
 13064  003CE8                     l1156:
 13065  003CE8  B281               	btfsc	3969,1,c	;volatile
 13066  003CEA  D7FE               	goto	l1156
 13067                           
 13068                           ;Test.c: 358: }
 13069                           ;Test.c: 370: LATAbits.LATA5 = 0;
 13070  003CEC  9A89               	bcf	3977,5,c	;volatile
 13071  003CEE  D7F4               	goto	l1150
 13072  003CF0                     __end_of_PortTestA5:
 13073                           	opt stack 0
 13074                           tblptru	equ	0xFF8
 13075                           tblptrh	equ	0xFF7
 13076                           tblptrl	equ	0xFF6
 13077                           tablat	equ	0xFF5
 13078                           prodh	equ	0xFF4
 13079                           prodl	equ	0xFF3
 13080                           intcon	equ	0xFF2
 13081                           intcon2	equ	0xFF1
 13082                           intcon3	equ	0xFF0
 13083                           postinc0	equ	0xFEE
 13084                           wreg	equ	0xFE8
 13085                           postdec1	equ	0xFE5
 13086                           fsr1l	equ	0xFE1
 13087                           indf2	equ	0xFDF
 13088                           postinc2	equ	0xFDE
 13089                           postdec2	equ	0xFDD
 13090                           fsr2h	equ	0xFDA
 13091                           fsr2l	equ	0xFD9
 13092                           status	equ	0xFD8
 13093                           
 13094 ;; *************** function _printf *****************
 13095 ;; Defined at:
 13096 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13099 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 13100 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 13101 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 13102 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 13103 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 13104 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 13105 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 13106 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 13107 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 13108 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 13109 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 13110 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 13111 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 13112 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 13113 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 13114 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 13115 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 13116 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 13117 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 13118 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 13119 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 13120 ;;		 -> STR_1(18), 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;  tmpval          4    0        struct .
 13123 ;;  width           2   41[BANK0 ] int 
 13124 ;;  val             2   37[BANK0 ] unsigned int 
 13125 ;;  len             2   35[BANK0 ] unsigned int 
 13126 ;;  ap              2   33[BANK0 ] PTR void [1]
 13127 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13128 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13129 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 13130 ;;  c               1   40[BANK0 ] char 
 13131 ;;  flag            1   39[BANK0 ] unsigned char 
 13132 ;;  prec            1   30[BANK0 ] char 
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  2   14[BANK0 ] int 
 13135 ;; Registers used:
 13136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13142 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;Total ram usage:       29 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    9
 13149 ;; This function calls:
 13150 ;;		___lwdiv
 13151 ;;		___lwmod
 13152 ;;		___wmul
 13153 ;;		_isdigit
 13154 ;;		_putch
 13155 ;; This function is called by:
 13156 ;;		_UI
 13157 ;;		_change_state_to_menu_start
 13158 ;;		_change_state_to_menu_12
 13159 ;;		_change_state_to_menu_22
 13160 ;;		_printRTC
 13161 ;;		_EEPROM_write
 13162 ;;		_Test
 13163 ;;		_algorithmTest
 13164 ;;		_sensorTest
 13165 ;;		_actuatorTest
 13166 ;;		_PortTestA5
 13167 ;;		_SolenoidTestA5
 13168 ;;		_ToggleTestA5
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           	psect	text47
 13173  001138                     __ptext47:
 13174                           	opt stack 0
 13175  001138                     _printf:
 13176                           	opt stack 18
 13177                           
 13178                           ;doprnt.c: 466: va_list ap;
 13179                           ;doprnt.c: 499: signed char c;
 13180                           ;doprnt.c: 501: int width;
 13181                           ;doprnt.c: 506: signed char prec;
 13182                           ;doprnt.c: 508: unsigned char flag;
 13183                           ;doprnt.c: 523: union {
 13184                           ;doprnt.c: 524: unsigned long vd;
 13185                           ;doprnt.c: 525: double integ;
 13186                           ;doprnt.c: 526: } tmpval;
 13187                           ;doprnt.c: 528: unsigned int val;
 13188                           ;doprnt.c: 529: unsigned len;
 13189                           ;doprnt.c: 530: const char * cp;
 13190                           ;doprnt.c: 533: *ap = __va_start();
 13191                           
 13192                           ;incstack = 0
 13193  001138  0E90               	movlw	low (?_printf+2)
 13194  00113A  0100               	movlb	0	; () banked
 13195  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13196  00113E  0E00               	movlw	high (?_printf+2)
 13197  001140  0100               	movlb	0	; () banked
 13198  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13199                           
 13200                           ;doprnt.c: 536: while(c = *f++) {
 13201  001144  D205               	goto	l5408
 13202  001146                     l5278:
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;doprnt.c: 538: if(c != '%')
 13206  001146  0E25               	movlw	37
 13207  001148  0100               	movlb	0	; () banked
 13208  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13209  00114C  B4D8               	btfsc	status,2,c
 13210  00114E  D005               	goto	l5282
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;doprnt.c: 540: {
 13214                           ;doprnt.c: 541: (putch(c) );
 13215  001150  0100               	movlb	0	; () banked
 13216  001152  51A8               	movf	printf@c& (0+255),w,b
 13217  001154  EC7D  F022         	call	_putch
 13218                           
 13219                           ;doprnt.c: 542: continue;
 13220  001158  D1FB               	goto	l5408
 13221  00115A                     l5282:
 13222                           
 13223                           ;doprnt.c: 543: }
 13224                           ;doprnt.c: 546: width = 0;
 13225  00115A  0E00               	movlw	0
 13226  00115C  0100               	movlb	0	; () banked
 13227  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13228  001160  0E00               	movlw	0
 13229  001162  6FA9               	movwf	printf@width& (0+255),b
 13230                           
 13231                           ;doprnt.c: 548: flag = 0;
 13232  001164  0E00               	movlw	0
 13233  001166  0100               	movlb	0	; () banked
 13234  001168  6FA7               	movwf	printf@flag& (0+255),b
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;doprnt.c: 551: switch(*f) {
 13238                           
 13239                           ;doprnt.c: 550: for(;;) {
 13240  00116A  D005               	goto	l5288
 13241  00116C                     l5284:
 13242                           
 13243                           ;doprnt.c: 580: flag |= 0x04;
 13244  00116C  0100               	movlb	0	; () banked
 13245  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13246                           
 13247                           ;doprnt.c: 581: f++;
 13248  001170  0100               	movlb	0	; () banked
 13249  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13250  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13251  001176                     l5288:
 13252  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13253  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13254  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13255  00117E  6AF8               	clrf	tblptru,c
 13256  001180                     	endif
 13257  001180                     	if	0	;tblptru may be non-zero
 13258  001180                     	endif
 13259  001180  0008               	tblrd		*
 13260  001182  50F5               	movf	tablat,w,c
 13261                           
 13262                           ; Switch size 1, requested type "space"
 13263                           ; Number of cases is 1, Range of values is 48 to 48
 13264                           ; switch strategies available:
 13265                           ; Name         Instructions Cycles
 13266                           ; simple_byte            4     3 (average)
 13267                           ;	Chosen strategy is simple_byte
 13268  001184  0A30               	xorlw	48	; case 48
 13269  001186  B4D8               	btfsc	status,2,c
 13270  001188  D7F1               	goto	l5284
 13271                           
 13272                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13273                           
 13274                           ;doprnt.c: 586: }
 13275                           
 13276                           ;doprnt.c: 585: break;
 13277  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13278  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13279  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13280  001192  6AF8               	clrf	tblptru,c
 13281  001194                     	endif
 13282  001194                     	if	0	;tblptru may be non-zero
 13283  001194                     	endif
 13284  001194  0008               	tblrd		*
 13285  001196  50F5               	movf	tablat,w,c
 13286  001198  EC90  F021         	call	_isdigit
 13287  00119C  A0D8               	btfss	status,0,c
 13288  00119E  D0D2               	goto	l5336
 13289                           
 13290                           ;doprnt.c: 598: width = 0;
 13291  0011A0  0E00               	movlw	0
 13292  0011A2  0100               	movlb	0	; () banked
 13293  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13294  0011A6  0E00               	movlw	0
 13295  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13296  0011AA                     l5294:
 13297                           
 13298                           ;doprnt.c: 600: width *= 10;
 13299  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13300  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13301  0011B2  0E00               	movlw	0
 13302  0011B4  0100               	movlb	0	; () banked
 13303  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13304  0011B8  0E0A               	movlw	10
 13305  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13306  0011BC  EC2A  F020         	call	___wmul	;wreg free
 13307  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13308  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13309                           
 13310                           ;doprnt.c: 601: width += *f++ - '0';
 13311  0011C8  0ED0               	movlw	208
 13312  0011CA  0100               	movlb	0	; () banked
 13313  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13314  0011CE  0EFF               	movlw	255
 13315  0011D0  0100               	movlb	0	; () banked
 13316  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13317  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13318  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13319  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13320  0011DC  6AF8               	clrf	tblptru,c
 13321  0011DE                     	endif
 13322  0011DE                     	if	0	;tblptru may be non-zero
 13323  0011DE                     	endif
 13324  0011DE  0008               	tblrd		*
 13325  0011E0  50F5               	movf	tablat,w,c
 13326  0011E2  0100               	movlb	0	; () banked
 13327  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13328  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13329  0011E8  0100               	movlb	0	; () banked
 13330  0011EA  519A               	movf	??_printf& (0+255),w,b
 13331  0011EC  0100               	movlb	0	; () banked
 13332  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13333  0011F0  0100               	movlb	0	; () banked
 13334  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13335  0011F4  0100               	movlb	0	; () banked
 13336  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13337  0011F8  0100               	movlb	0	; () banked
 13338  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13339  0011FC  0100               	movlb	0	; () banked
 13340  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13341  001200  0100               	movlb	0	; () banked
 13342  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13343  001204  0100               	movlb	0	; () banked
 13344  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13345                           
 13346                           ; BSR set to: 0
 13347  001208  0100               	movlb	0	; () banked
 13348  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13349  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13350                           
 13351                           ; BSR set to: 0
 13352                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13353  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13354  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13355  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13356  001216  6AF8               	clrf	tblptru,c
 13357  001218                     	endif
 13358  001218                     	if	0	;tblptru may be non-zero
 13359  001218                     	endif
 13360  001218  0008               	tblrd		*
 13361  00121A  50F5               	movf	tablat,w,c
 13362  00121C  EC90  F021         	call	_isdigit
 13363  001220  A0D8               	btfss	status,0,c
 13364  001222  D090               	goto	l5336
 13365  001224  D7C2               	goto	l5294
 13366  001226                     l5302:
 13367                           
 13368                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13369  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13370  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13371  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13372  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13373  001236  0E02               	movlw	2
 13374  001238  0100               	movlb	0	; () banked
 13375  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13376  00123C  0E00               	movlw	0
 13377  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;doprnt.c: 740: if(!cp)
 13381  001240  0100               	movlb	0	; () banked
 13382  001242  519F               	movf	printf@cp& (0+255),w,b
 13383  001244  0100               	movlb	0	; () banked
 13384  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13385  001248  A4D8               	btfss	status,2,c
 13386  00124A  D006               	goto	l5310
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;doprnt.c: 741: cp = "(null)";
 13390  00124C  0EB6               	movlw	low STR_111
 13391  00124E  0100               	movlb	0	; () banked
 13392  001250  6F9F               	movwf	printf@cp& (0+255),b
 13393  001252  0EFF               	movlw	high STR_111
 13394  001254  0100               	movlb	0	; () banked
 13395  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13396  001258                     l5310:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;doprnt.c: 745: len = 0;
 13400  001258  0E00               	movlw	0
 13401  00125A  0100               	movlb	0	; () banked
 13402  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13403  00125E  0E00               	movlw	0
 13404  001260  6FA3               	movwf	printf@len& (0+255),b
 13405                           
 13406                           ;doprnt.c: 746: while(cp[len])
 13407  001262  D003               	goto	l5314
 13408  001264                     l5312:
 13409                           
 13410                           ;doprnt.c: 747: len++;
 13411  001264  0100               	movlb	0	; () banked
 13412  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13413  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13414  00126A                     l5314:
 13415                           
 13416                           ; BSR set to: 0
 13417  00126A  0100               	movlb	0	; () banked
 13418  00126C  51A3               	movf	printf@len& (0+255),w,b
 13419  00126E  0100               	movlb	0	; () banked
 13420  001270  259F               	addwf	printf@cp& (0+255),w,b
 13421  001272  0100               	movlb	0	; () banked
 13422  001274  6F9A               	movwf	??_printf& (0+255),b
 13423  001276  0100               	movlb	0	; () banked
 13424  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13425  00127A  0100               	movlb	0	; () banked
 13426  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13427  00127E  0100               	movlb	0	; () banked
 13428  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13429  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13430  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13431  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13432  00128C  6EF8               	movwf	tblptru,c
 13433  00128E  0E0F               	movlw	(high __ramtop+-1)
 13434  001290  64F7               	cpfsgt	tblptrh,c
 13435  001292  D003               	bra	u3747
 13436  001294  0008               	tblrd		*
 13437  001296  50F5               	movf	tablat,w,c
 13438  001298  D005               	bra	u3740
 13439  00129A                     u3747:
 13440  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13441  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13442  0012A2  50EF               	movf	indf0,w,c
 13443  0012A4                     u3740:
 13444  0012A4  0900               	iorlw	0
 13445  0012A6  A4D8               	btfss	status,2,c
 13446  0012A8  D7DD               	goto	l5312
 13447                           
 13448                           ;doprnt.c: 757: if(width > len)
 13449  0012AA  0100               	movlb	0	; () banked
 13450  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13451  0012AE  0100               	movlb	0	; () banked
 13452  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13453  0012B2  0100               	movlb	0	; () banked
 13454  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13455  0012B6  0100               	movlb	0	; () banked
 13456  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13457  0012BA  B0D8               	btfsc	status,0,c
 13458  0012BC  D009               	goto	l5320
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;doprnt.c: 758: width -= len;
 13462  0012BE  0100               	movlb	0	; () banked
 13463  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13464  0012C2  0100               	movlb	0	; () banked
 13465  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13466  0012C6  0100               	movlb	0	; () banked
 13467  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13468  0012CA  0100               	movlb	0	; () banked
 13469  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13470  0012CE  D009               	goto	l5324
 13471  0012D0                     l5320:
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;doprnt.c: 759: else
 13475                           ;doprnt.c: 760: width = 0;
 13476  0012D0  0E00               	movlw	0
 13477  0012D2  0100               	movlb	0	; () banked
 13478  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13479  0012D6  0E00               	movlw	0
 13480  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;doprnt.c: 764: while(width--)
 13484  0012DA  D003               	goto	l5324
 13485  0012DC                     l5322:
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;doprnt.c: 765: (putch(' ') );
 13489  0012DC  0E20               	movlw	32
 13490  0012DE  EC7D  F022         	call	_putch
 13491  0012E2                     l5324:
 13492  0012E2  0100               	movlb	0	; () banked
 13493  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13494  0012E6  A0D8               	btfss	status,0,c
 13495  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13496  0012EA  0100               	movlb	0	; () banked
 13497  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13498  0012EE  E1F6               	bnz	l5322
 13499  0012F0  0100               	movlb	0	; () banked
 13500  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13501  0012F4  B4D8               	btfsc	status,2,c
 13502  0012F6  D017               	goto	l5330
 13503  0012F8  D7F1               	goto	l5322
 13504  0012FA                     l5326:
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;doprnt.c: 768: (putch(*cp++) );
 13508  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13509  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13510  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13511  001304  6EF8               	movwf	tblptru,c
 13512  001306  0E0F               	movlw	(high __ramtop+-1)
 13513  001308  64F7               	cpfsgt	tblptrh,c
 13514  00130A  D003               	bra	u3787
 13515  00130C  0008               	tblrd		*
 13516  00130E  50F5               	movf	tablat,w,c
 13517  001310  D005               	bra	u3780
 13518  001312                     u3787:
 13519  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13520  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13521  00131A  50EF               	movf	indf0,w,c
 13522  00131C                     u3780:
 13523  00131C  EC7D  F022         	call	_putch
 13524  001320  0100               	movlb	0	; () banked
 13525  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13526  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13527  001326                     l5330:
 13528                           
 13529                           ; BSR set to: 0
 13530  001326  0100               	movlb	0	; () banked
 13531  001328  07A3               	decf	printf@len& (0+255),f,b
 13532  00132A  A0D8               	btfss	status,0,c
 13533  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13534  00132E  0100               	movlb	0	; () banked
 13535  001330  29A3               	incf	printf@len& (0+255),w,b
 13536  001332  E1E3               	bnz	l5326
 13537  001334  0100               	movlb	0	; () banked
 13538  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13539  001338  B4D8               	btfsc	status,2,c
 13540  00133A  D10A               	goto	l5408
 13541  00133C  D7DE               	goto	l5326
 13542  00133E                     l5332:
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;doprnt.c: 818: flag |= 0x40;
 13546  00133E  0100               	movlb	0	; () banked
 13547  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;doprnt.c: 822: }
 13551                           
 13552                           ;doprnt.c: 819: break;
 13553  001342  D01D               	goto	l1224
 13554  001344                     l5336:
 13555  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13556  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13557  00134C  0100               	movlb	0	; () banked
 13558  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13559  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13560  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13561  001352  6AF8               	clrf	tblptru,c
 13562  001354                     	endif
 13563  001354                     	if	0	;tblptru may be non-zero
 13564  001354                     	endif
 13565  001354  0008               	tblrd		*
 13566  001356  CFF5 F0A8          	movff	tablat,printf@c
 13567  00135A  0100               	movlb	0	; () banked
 13568  00135C  51A8               	movf	printf@c& (0+255),w,b
 13569                           
 13570                           ; Switch size 1, requested type "space"
 13571                           ; Number of cases is 5, Range of values is 0 to 117
 13572                           ; switch strategies available:
 13573                           ; Name         Instructions Cycles
 13574                           ; simple_byte           16     9 (average)
 13575                           ;	Chosen strategy is simple_byte
 13576  00135E  0A00               	xorlw	0	; case 0
 13577  001360  B4D8               	btfsc	status,2,c
 13578  001362  0012               	return	
 13579  001364  0A64               	xorlw	100	; case 100
 13580  001366  B4D8               	btfsc	status,2,c
 13581  001368  D00A               	goto	l1224
 13582  00136A  0A0D               	xorlw	13	; case 105
 13583  00136C  B4D8               	btfsc	status,2,c
 13584  00136E  D007               	goto	l1224
 13585  001370  0A1A               	xorlw	26	; case 115
 13586  001372  B4D8               	btfsc	status,2,c
 13587  001374  D758               	goto	l5302
 13588  001376  0A06               	xorlw	6	; case 117
 13589  001378  B4D8               	btfsc	status,2,c
 13590  00137A  D7E1               	goto	l5332
 13591  00137C  D0E9               	goto	l5408
 13592  00137E                     l1224:
 13593                           
 13594                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13595  00137E  0100               	movlb	0	; () banked
 13596  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13597  001382  D019               	goto	l5348
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;doprnt.c: 1253: {
 13601                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13602  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13603  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13604  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13605  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13606                           
 13607                           ; BSR set to: 0
 13608  001394  0E02               	movlw	2
 13609  001396  0100               	movlb	0	; () banked
 13610  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13611  00139A  0E00               	movlw	0
 13612  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;doprnt.c: 1261: if((int)val < 0) {
 13616  00139E  0100               	movlb	0	; () banked
 13617  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13618  0013A2  D016               	goto	l5352
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;doprnt.c: 1262: flag |= 0x03;
 13622  0013A4  0E03               	movlw	3
 13623  0013A6  0100               	movlb	0	; () banked
 13624  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;doprnt.c: 1263: val = -val;
 13628  0013AA  0100               	movlb	0	; () banked
 13629  0013AC  6DA5               	negf	printf@val& (0+255),b
 13630  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13631  0013B0  B0D8               	btfsc	status,0,c
 13632  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13633                           
 13634                           ; BSR set to: 0
 13635                           ;doprnt.c: 1264: }
 13636                           ;doprnt.c: 1266: }
 13637  0013B4  D00D               	goto	l5352
 13638  0013B6                     l5348:
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;doprnt.c: 1268: else
 13642                           ;doprnt.c: 1273: {
 13643                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13644  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13645  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13646  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13647  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13648                           
 13649                           ; BSR set to: 0
 13650  0013C6  0E02               	movlw	2
 13651  0013C8  0100               	movlb	0	; () banked
 13652  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13653  0013CC  0E00               	movlw	0
 13654  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13655  0013D0                     l5352:
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;doprnt.c: 1287: }
 13659                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13660  0013D0  0E01               	movlw	1
 13661  0013D2  0100               	movlb	0	; () banked
 13662  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13663  0013D6                     l5354:
 13664                           
 13665                           ; BSR set to: 0
 13666  0013D6  0E05               	movlw	5
 13667  0013D8  0100               	movlb	0	; () banked
 13668  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13669  0013DC  B4D8               	btfsc	status,2,c
 13670  0013DE  D019               	goto	l5366
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;doprnt.c: 1306: if(val < dpowers[c])
 13674                           
 13675                           ; BSR set to: 0
 13676                           
 13677                           ; BSR set to: 0
 13678  0013E0  0100               	movlb	0	; () banked
 13679  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13680  0013E4  0D02               	mullw	2
 13681  0013E6  0E4A               	movlw	low _dpowers
 13682  0013E8  24F3               	addwf	prodl,w,c
 13683  0013EA  6EF6               	movwf	tblptrl,c
 13684  0013EC  0EFB               	movlw	high _dpowers
 13685  0013EE  20F4               	addwfc	prodh,w,c
 13686  0013F0  6EF7               	movwf	tblptrh,c
 13687  0013F2                     	if	1	;There are 3 active tblptr bytes
 13688  0013F2  6AF8               	clrf	tblptru,c
 13689  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13690  0013F6  22F8               	addwfc	tblptru,f,c
 13691  0013F8                     	endif
 13692  0013F8  0009               	tblrd		*+
 13693  0013FA  50F5               	movf	tablat,w,c
 13694  0013FC  0100               	movlb	0	; () banked
 13695  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13696  001400  0009               	tblrd		*+
 13697  001402  50F5               	movf	tablat,w,c
 13698  001404  0100               	movlb	0	; () banked
 13699  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13700  001408  A0D8               	btfss	status,0,c
 13701  00140A  D003               	goto	l5366
 13702                           
 13703                           ; BSR set to: 0
 13704                           
 13705                           ; BSR set to: 0
 13706                           
 13707                           ; BSR set to: 0
 13708                           ;doprnt.c: 1307: break;
 13709  00140C  0100               	movlb	0	; () banked
 13710  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13711  001410  D7E2               	goto	l5354
 13712  001412                     l5366:
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13716  001412  0100               	movlb	0	; () banked
 13717  001414  51A9               	movf	printf@width& (0+255),w,b
 13718  001416  0100               	movlb	0	; () banked
 13719  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13720  00141A  B4D8               	btfsc	status,2,c
 13721  00141C  D00B               	goto	l5372
 13722                           
 13723                           ; BSR set to: 0
 13724  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13725  001422  0E03               	movlw	3
 13726  001424  0100               	movlb	0	; () banked
 13727  001426  179A               	andwf	??_printf& (0+255),f,b
 13728  001428  B4D8               	btfsc	status,2,c
 13729  00142A  D004               	goto	l5372
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;doprnt.c: 1346: width--;
 13733  00142C  0100               	movlb	0	; () banked
 13734  00142E  07A9               	decf	printf@width& (0+255),f,b
 13735  001430  A0D8               	btfss	status,0,c
 13736  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13737  001434                     l5372:
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;doprnt.c: 1381: if(width > c)
 13741  001434  0E80               	movlw	128
 13742  001436  0100               	movlb	0	; () banked
 13743  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13744  00143A  0E7F               	movlw	127
 13745  00143C  0100               	movlb	0	; () banked
 13746  00143E  6F9A               	movwf	??_printf& (0+255),b
 13747  001440  0100               	movlb	0	; () banked
 13748  001442  51A9               	movf	printf@width& (0+255),w,b
 13749  001444  0100               	movlb	0	; () banked
 13750  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13751  001448  0100               	movlb	0	; () banked
 13752  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13753  00144C  0A80               	xorlw	128
 13754  00144E  0100               	movlb	0	; () banked
 13755  001450  599A               	subwfb	??_printf& (0+255),w,b
 13756  001452  B0D8               	btfsc	status,0,c
 13757  001454  D00B               	goto	l5376
 13758                           
 13759                           ; BSR set to: 0
 13760                           ;doprnt.c: 1382: width -= c;
 13761  001456  0100               	movlb	0	; () banked
 13762  001458  51A8               	movf	printf@c& (0+255),w,b
 13763  00145A  0100               	movlb	0	; () banked
 13764  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13765  00145E  0E00               	movlw	0
 13766  001460  0100               	movlb	0	; () banked
 13767  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13768  001464  0EFF               	movlw	255
 13769  001466  0100               	movlb	0	; () banked
 13770  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13771  00146A  D005               	goto	l5378
 13772  00146C                     l5376:
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;doprnt.c: 1383: else
 13776                           ;doprnt.c: 1384: width = 0;
 13777  00146C  0E00               	movlw	0
 13778  00146E  0100               	movlb	0	; () banked
 13779  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13780  001472  0E00               	movlw	0
 13781  001474  6FA9               	movwf	printf@width& (0+255),b
 13782  001476                     l5378:
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;doprnt.c: 1387: if(flag & 0x04) {
 13786  001476  0100               	movlb	0	; () banked
 13787  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13788  00147A  D018               	goto	l5390
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;doprnt.c: 1392: if(flag & 0x03)
 13792  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13793  001480  0E03               	movlw	3
 13794  001482  0100               	movlb	0	; () banked
 13795  001484  179A               	andwf	??_printf& (0+255),f,b
 13796  001486  B4D8               	btfsc	status,2,c
 13797  001488  D003               	goto	l5384
 13798                           
 13799                           ; BSR set to: 0
 13800                           ;doprnt.c: 1393: (putch('-') );
 13801  00148A  0E2D               	movlw	45
 13802  00148C  EC7D  F022         	call	_putch
 13803  001490                     l5384:
 13804                           
 13805                           ;doprnt.c: 1415: if(width)
 13806  001490  0100               	movlb	0	; () banked
 13807  001492  51A9               	movf	printf@width& (0+255),w,b
 13808  001494  0100               	movlb	0	; () banked
 13809  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13810  001498  B4D8               	btfsc	status,2,c
 13811  00149A  D025               	goto	l5400
 13812                           
 13813                           ; BSR set to: 0
 13814                           ;doprnt.c: 1417: (putch('0') );
 13815                           
 13816                           ; BSR set to: 0
 13817                           
 13818                           ;doprnt.c: 1416: do
 13819  00149C  0E30               	movlw	48
 13820  00149E  EC7D  F022         	call	_putch
 13821                           
 13822                           ;doprnt.c: 1418: while(--width);
 13823  0014A2  0100               	movlb	0	; () banked
 13824  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13825  0014A6  A0D8               	btfss	status,0,c
 13826  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13827  0014AA  D7F2               	goto	l5384
 13828  0014AC                     l5390:
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;doprnt.c: 1422: {
 13832                           ;doprnt.c: 1424: if(width
 13833                           ;doprnt.c: 1428: )
 13834  0014AC  0100               	movlb	0	; () banked
 13835  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13836  0014B0  0100               	movlb	0	; () banked
 13837  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13838  0014B4  B4D8               	btfsc	status,2,c
 13839  0014B6  D00D               	goto	l5396
 13840  0014B8                     l5392:
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;doprnt.c: 1430: (putch(' ') );
 13844  0014B8  0E20               	movlw	32
 13845  0014BA  EC7D  F022         	call	_putch
 13846                           
 13847                           ;doprnt.c: 1431: while(--width);
 13848  0014BE  0100               	movlb	0	; () banked
 13849  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13850  0014C2  A0D8               	btfss	status,0,c
 13851  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13852  0014C6  0100               	movlb	0	; () banked
 13853  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13854  0014CA  0100               	movlb	0	; () banked
 13855  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13856  0014CE  A4D8               	btfss	status,2,c
 13857  0014D0  D7F3               	goto	l5392
 13858  0014D2                     l5396:
 13859                           
 13860                           ; BSR set to: 0
 13861                           ;doprnt.c: 1438: if(flag & 0x03)
 13862  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13863  0014D6  0E03               	movlw	3
 13864  0014D8  0100               	movlb	0	; () banked
 13865  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13866  0014DC  B4D8               	btfsc	status,2,c
 13867  0014DE  D003               	goto	l5400
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;doprnt.c: 1439: (putch('-') );
 13871  0014E0  0E2D               	movlw	45
 13872  0014E2  EC7D  F022         	call	_putch
 13873  0014E6                     l5400:
 13874                           
 13875                           ;doprnt.c: 1469: }
 13876                           ;doprnt.c: 1472: prec = c;
 13877  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13878                           
 13879                           ;doprnt.c: 1474: while(prec--) {
 13880  0014EA  D02C               	goto	l5406
 13881  0014EC                     l5402:
 13882                           
 13883                           ;doprnt.c: 1478: {
 13884                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13885  0014EC  0100               	movlb	0	; () banked
 13886  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13887  0014F0  0D02               	mullw	2
 13888  0014F2  0E4A               	movlw	low _dpowers
 13889  0014F4  24F3               	addwf	prodl,w,c
 13890  0014F6  6EF6               	movwf	tblptrl,c
 13891  0014F8  0EFB               	movlw	high _dpowers
 13892  0014FA  20F4               	addwfc	prodh,w,c
 13893  0014FC  6EF7               	movwf	tblptrh,c
 13894  0014FE                     	if	1	;There are 3 active tblptr bytes
 13895  0014FE  6AF8               	clrf	tblptru,c
 13896  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13897  001502  22F8               	addwfc	tblptru,f,c
 13898  001504                     	endif
 13899  001504  0009               	tblrd		*+
 13900  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13901  00150A  000A               	tblrd		*-
 13902  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13903  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13904  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13905  001518  ECA3  F01C         	call	___lwdiv	;wreg free
 13906  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13907  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13908  001524  0E00               	movlw	0
 13909  001526  0100               	movlb	0	; () banked
 13910  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13911  00152A  0E0A               	movlw	10
 13912  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13913  00152E  ECBB  F01D         	call	___lwmod	;wreg free
 13914  001532  0100               	movlb	0	; () banked
 13915  001534  5187               	movf	?___lwmod& (0+255),w,b
 13916  001536  0F30               	addlw	48
 13917  001538  0100               	movlb	0	; () banked
 13918  00153A  6FA8               	movwf	printf@c& (0+255),b
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;doprnt.c: 1523: }
 13922                           ;doprnt.c: 1524: (putch(c) );
 13923  00153C  0100               	movlb	0	; () banked
 13924  00153E  51A8               	movf	printf@c& (0+255),w,b
 13925  001540  EC7D  F022         	call	_putch
 13926  001544                     l5406:
 13927  001544  0100               	movlb	0	; () banked
 13928  001546  079E               	decf	printf@prec& (0+255),f,b
 13929  001548  0100               	movlb	0	; () banked
 13930  00154A  299E               	incf	printf@prec& (0+255),w,b
 13931  00154C  A4D8               	btfss	status,2,c
 13932  00154E  D7CE               	goto	l5402
 13933  001550                     l5408:
 13934  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13935  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13936  001558  0100               	movlb	0	; () banked
 13937  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13938  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13939  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13940  00155E  6AF8               	clrf	tblptru,c
 13941  001560                     	endif
 13942  001560                     	if	0	;tblptru may be non-zero
 13943  001560                     	endif
 13944  001560  0008               	tblrd		*
 13945  001562  CFF5 F0A8          	movff	tablat,printf@c
 13946  001566  0100               	movlb	0	; () banked
 13947  001568  51A8               	movf	printf@c& (0+255),w,b
 13948  00156A  B4D8               	btfsc	status,2,c
 13949  00156C  0012               	return	
 13950  00156E  D5EB               	goto	l5278
 13951  001570                     __end_of_printf:
 13952                           	opt stack 0
 13953                           tblptru	equ	0xFF8
 13954                           tblptrh	equ	0xFF7
 13955                           tblptrl	equ	0xFF6
 13956                           tablat	equ	0xFF5
 13957                           prodh	equ	0xFF4
 13958                           prodl	equ	0xFF3
 13959                           intcon	equ	0xFF2
 13960                           intcon2	equ	0xFF1
 13961                           intcon3	equ	0xFF0
 13962                           indf0	equ	0xFEF
 13963                           postinc0	equ	0xFEE
 13964                           fsr0h	equ	0xFEA
 13965                           fsr0l	equ	0xFE9
 13966                           wreg	equ	0xFE8
 13967                           postdec1	equ	0xFE5
 13968                           fsr1l	equ	0xFE1
 13969                           indf2	equ	0xFDF
 13970                           postinc2	equ	0xFDE
 13971                           postdec2	equ	0xFDD
 13972                           fsr2h	equ	0xFDA
 13973                           fsr2l	equ	0xFD9
 13974                           status	equ	0xFD8
 13975                           
 13976 ;; *************** function _putch *****************
 13977 ;; Defined at:
 13978 ;;		line 20 in file "lcd.c"
 13979 ;; Parameters:    Size  Location     Type
 13980 ;;  data            1    wreg     unsigned char 
 13981 ;; Auto vars:     Size  Location     Type
 13982 ;;  data            1    2[BANK0 ] unsigned char 
 13983 ;; Return value:  Size  Location     Type
 13984 ;;                  1    wreg      void 
 13985 ;; Registers used:
 13986 ;;		wreg, status,2, status,0, cstack
 13987 ;; Tracked objects:
 13988 ;;		On entry : 0/0
 13989 ;;		On exit  : 0/0
 13990 ;;		Unchanged: 0/0
 13991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13995 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;Total ram usage:        1 bytes
 13997 ;; Hardware stack levels used:    1
 13998 ;; Hardware stack levels required when called:    8
 13999 ;; This function calls:
 14000 ;;		_lcdNibble
 14001 ;; This function is called by:
 14002 ;;		_printf
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006                           	psect	text48
 14007  0044FA                     __ptext48:
 14008                           	opt stack 0
 14009  0044FA                     _putch:
 14010                           	opt stack 18
 14011                           
 14012                           ;incstack = 0
 14013                           ;putch@data stored from wreg
 14014  0044FA  0100               	movlb	0	; () banked
 14015  0044FC  6F82               	movwf	putch@data& (0+255),b
 14016                           
 14017                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14018  0044FE  848C               	bsf	3980,2,c	;volatile
 14019                           
 14020                           ;lcd.c: 22: lcdNibble(data);
 14021  004500  0100               	movlb	0	; () banked
 14022  004502  5182               	movf	putch@data& (0+255),w,b
 14023  004504  EC87  F01D         	call	_lcdNibble
 14024  004508  0012               	return		;funcret
 14025  00450A                     __end_of_putch:
 14026                           	opt stack 0
 14027                           tblptru	equ	0xFF8
 14028                           tblptrh	equ	0xFF7
 14029                           tblptrl	equ	0xFF6
 14030                           tablat	equ	0xFF5
 14031                           prodh	equ	0xFF4
 14032                           prodl	equ	0xFF3
 14033                           intcon	equ	0xFF2
 14034                           intcon2	equ	0xFF1
 14035                           intcon3	equ	0xFF0
 14036                           indf0	equ	0xFEF
 14037                           postinc0	equ	0xFEE
 14038                           fsr0h	equ	0xFEA
 14039                           fsr0l	equ	0xFE9
 14040                           wreg	equ	0xFE8
 14041                           postdec1	equ	0xFE5
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           fsr2h	equ	0xFDA
 14047                           fsr2l	equ	0xFD9
 14048                           status	equ	0xFD8
 14049                           
 14050 ;; *************** function _isdigit *****************
 14051 ;; Defined at:
 14052 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  c               1    wreg     unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  c               1    2[BANK0 ] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, status,2, status,0
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14069 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;Total ram usage:        3 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    7
 14073 ;; This function calls:
 14074 ;;		Nothing
 14075 ;; This function is called by:
 14076 ;;		_printf
 14077 ;; This function uses a non-reentrant model
 14078 ;;
 14079                           
 14080                           	psect	text49
 14081  004320                     __ptext49:
 14082                           	opt stack 0
 14083  004320                     _isdigit:
 14084                           	opt stack 19
 14085                           
 14086                           ;incstack = 0
 14087                           ;isdigit@c stored from wreg
 14088  004320  0100               	movlb	0	; () banked
 14089  004322  6F82               	movwf	isdigit@c& (0+255),b
 14090  004324  0E00               	movlw	0
 14091  004326  0100               	movlb	0	; () banked
 14092  004328  6F81               	movwf	_isdigit$1881& (0+255),b
 14093                           
 14094                           ; BSR set to: 0
 14095  00432A  0E3A               	movlw	58
 14096  00432C  0100               	movlb	0	; () banked
 14097  00432E  6182               	cpfslt	isdigit@c& (0+255),b
 14098  004330  D007               	goto	l5132
 14099                           
 14100                           ; BSR set to: 0
 14101  004332  0E2F               	movlw	47
 14102  004334  0100               	movlb	0	; () banked
 14103  004336  6582               	cpfsgt	isdigit@c& (0+255),b
 14104  004338  D003               	goto	l5132
 14105                           
 14106                           ; BSR set to: 0
 14107  00433A  0E01               	movlw	1
 14108  00433C  0100               	movlb	0	; () banked
 14109  00433E  6F81               	movwf	_isdigit$1881& (0+255),b
 14110  004340                     l5132:
 14111                           
 14112                           ; BSR set to: 0
 14113  004340  C081  F080         	movff	_isdigit$1881,??_isdigit
 14114  004344  0100               	movlb	0	; () banked
 14115  004346  3180               	rrcf	??_isdigit& (0+255),w,b
 14116  004348  0012               	return	
 14117  00434A                     __end_of_isdigit:
 14118                           	opt stack 0
 14119                           tblptru	equ	0xFF8
 14120                           tblptrh	equ	0xFF7
 14121                           tblptrl	equ	0xFF6
 14122                           tablat	equ	0xFF5
 14123                           prodh	equ	0xFF4
 14124                           prodl	equ	0xFF3
 14125                           intcon	equ	0xFF2
 14126                           intcon2	equ	0xFF1
 14127                           intcon3	equ	0xFF0
 14128                           indf0	equ	0xFEF
 14129                           postinc0	equ	0xFEE
 14130                           fsr0h	equ	0xFEA
 14131                           fsr0l	equ	0xFE9
 14132                           wreg	equ	0xFE8
 14133                           postdec1	equ	0xFE5
 14134                           fsr1l	equ	0xFE1
 14135                           indf2	equ	0xFDF
 14136                           postinc2	equ	0xFDE
 14137                           postdec2	equ	0xFDD
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function ___wmul *****************
 14143 ;; Defined at:
 14144 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14147 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14148 ;; Auto vars:     Size  Location     Type
 14149 ;;  product         2    4[BANK0 ] unsigned int 
 14150 ;; Return value:  Size  Location     Type
 14151 ;;                  2    0[BANK0 ] unsigned int 
 14152 ;; Registers used:
 14153 ;;		wreg, status,2, status,0, prodl, prodh
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;Total ram usage:        6 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; Hardware stack levels required when called:    7
 14166 ;; This function calls:
 14167 ;;		Nothing
 14168 ;; This function is called by:
 14169 ;;		_printf
 14170 ;; This function uses a non-reentrant model
 14171 ;;
 14172                           
 14173                           	psect	text50
 14174  004054                     __ptext50:
 14175                           	opt stack 0
 14176  004054                     ___wmul:
 14177                           	opt stack 19
 14178                           
 14179                           ; BSR set to: 0
 14180                           ;incstack = 0
 14181  004054  0100               	movlb	0	; () banked
 14182  004056  5180               	movf	___wmul@multiplier& (0+255),w,b
 14183  004058  0100               	movlb	0	; () banked
 14184  00405A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14185  00405C  CFF3 F084          	movff	prodl,___wmul@product
 14186  004060  CFF4 F085          	movff	prodh,___wmul@product+1
 14187  004064  0100               	movlb	0	; () banked
 14188  004066  5180               	movf	___wmul@multiplier& (0+255),w,b
 14189  004068  0100               	movlb	0	; () banked
 14190  00406A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14191  00406C  50F3               	movf	prodl,w,c
 14192  00406E  0100               	movlb	0	; () banked
 14193  004070  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14194  004072  0100               	movlb	0	; () banked
 14195  004074  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14196  004076  0100               	movlb	0	; () banked
 14197  004078  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14198  00407A  50F3               	movf	prodl,w,c
 14199  00407C  0100               	movlb	0	; () banked
 14200  00407E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14201                           
 14202                           ; BSR set to: 0
 14203  004080  C084  F080         	movff	___wmul@product,?___wmul
 14204  004084  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14205  004088  0012               	return	
 14206  00408A                     __end_of___wmul:
 14207                           	opt stack 0
 14208                           tblptru	equ	0xFF8
 14209                           tblptrh	equ	0xFF7
 14210                           tblptrl	equ	0xFF6
 14211                           tablat	equ	0xFF5
 14212                           prodh	equ	0xFF4
 14213                           prodl	equ	0xFF3
 14214                           intcon	equ	0xFF2
 14215                           intcon2	equ	0xFF1
 14216                           intcon3	equ	0xFF0
 14217                           indf0	equ	0xFEF
 14218                           postinc0	equ	0xFEE
 14219                           fsr0h	equ	0xFEA
 14220                           fsr0l	equ	0xFE9
 14221                           wreg	equ	0xFE8
 14222                           postdec1	equ	0xFE5
 14223                           fsr1l	equ	0xFE1
 14224                           indf2	equ	0xFDF
 14225                           postinc2	equ	0xFDE
 14226                           postdec2	equ	0xFDD
 14227                           fsr2h	equ	0xFDA
 14228                           fsr2l	equ	0xFD9
 14229                           status	equ	0xFD8
 14230                           
 14231 ;; *************** function ___lwmod *****************
 14232 ;; Defined at:
 14233 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14234 ;; Parameters:    Size  Location     Type
 14235 ;;  dividend        2    7[BANK0 ] unsigned int 
 14236 ;;  divisor         2    9[BANK0 ] unsigned int 
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  counter         1   11[BANK0 ] unsigned char 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  2    7[BANK0 ] unsigned int 
 14241 ;; Registers used:
 14242 ;;		wreg, status,2, status,0
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14248 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14251 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;Total ram usage:        5 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    7
 14255 ;; This function calls:
 14256 ;;		Nothing
 14257 ;; This function is called by:
 14258 ;;		_printf
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           	psect	text51
 14263  003B76                     __ptext51:
 14264                           	opt stack 0
 14265  003B76                     ___lwmod:
 14266                           	opt stack 19
 14267                           
 14268                           ; BSR set to: 0
 14269                           ;incstack = 0
 14270  003B76  0100               	movlb	0	; () banked
 14271  003B78  5189               	movf	___lwmod@divisor& (0+255),w,b
 14272  003B7A  0100               	movlb	0	; () banked
 14273  003B7C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14274  003B7E  B4D8               	btfsc	status,2,c
 14275  003B80  D026               	goto	l1681
 14276                           
 14277                           ; BSR set to: 0
 14278  003B82  0E01               	movlw	1
 14279  003B84  0100               	movlb	0	; () banked
 14280  003B86  6F8B               	movwf	___lwmod@counter& (0+255),b
 14281  003B88  D006               	goto	l5170
 14282  003B8A                     l5168:
 14283                           
 14284                           ; BSR set to: 0
 14285  003B8A  0100               	movlb	0	; () banked
 14286  003B8C  90D8               	bcf	status,0,c
 14287  003B8E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14288  003B90  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14289  003B92  0100               	movlb	0	; () banked
 14290  003B94  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14291  003B96                     l5170:
 14292                           
 14293                           ; BSR set to: 0
 14294  003B96  0100               	movlb	0	; () banked
 14295  003B98  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14296  003B9A  D7F7               	goto	l5168
 14297  003B9C                     l5172:
 14298                           
 14299                           ; BSR set to: 0
 14300  003B9C  0100               	movlb	0	; () banked
 14301  003B9E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14302  003BA0  0100               	movlb	0	; () banked
 14303  003BA2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14304  003BA4  0100               	movlb	0	; () banked
 14305  003BA6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14306  003BA8  0100               	movlb	0	; () banked
 14307  003BAA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14308  003BAC  A0D8               	btfss	status,0,c
 14309  003BAE  D008               	goto	l5176
 14310                           
 14311                           ; BSR set to: 0
 14312  003BB0  0100               	movlb	0	; () banked
 14313  003BB2  5189               	movf	___lwmod@divisor& (0+255),w,b
 14314  003BB4  0100               	movlb	0	; () banked
 14315  003BB6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14316  003BB8  0100               	movlb	0	; () banked
 14317  003BBA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14318  003BBC  0100               	movlb	0	; () banked
 14319  003BBE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14320  003BC0                     l5176:
 14321                           
 14322                           ; BSR set to: 0
 14323  003BC0  0100               	movlb	0	; () banked
 14324  003BC2  90D8               	bcf	status,0,c
 14325  003BC4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14326  003BC6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14327                           
 14328                           ; BSR set to: 0
 14329  003BC8  0100               	movlb	0	; () banked
 14330  003BCA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14331  003BCC  D7E7               	goto	l5172
 14332  003BCE                     l1681:
 14333                           
 14334                           ; BSR set to: 0
 14335  003BCE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14336  003BD2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14337                           
 14338                           ; BSR set to: 0
 14339  003BD6  0012               	return		;funcret
 14340  003BD8                     __end_of___lwmod:
 14341                           	opt stack 0
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           intcon2	equ	0xFF1
 14350                           intcon3	equ	0xFF0
 14351                           indf0	equ	0xFEF
 14352                           postinc0	equ	0xFEE
 14353                           fsr0h	equ	0xFEA
 14354                           fsr0l	equ	0xFE9
 14355                           wreg	equ	0xFE8
 14356                           postdec1	equ	0xFE5
 14357                           fsr1l	equ	0xFE1
 14358                           indf2	equ	0xFDF
 14359                           postinc2	equ	0xFDE
 14360                           postdec2	equ	0xFDD
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function ___lwdiv *****************
 14366 ;; Defined at:
 14367 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  dividend        2    0[BANK0 ] unsigned int 
 14370 ;;  divisor         2    2[BANK0 ] unsigned int 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  quotient        2    4[BANK0 ] unsigned int 
 14373 ;;  counter         1    6[BANK0 ] unsigned char 
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  2    0[BANK0 ] unsigned int 
 14376 ;; Registers used:
 14377 ;;		wreg, status,2, status,0
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14383 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;Total ram usage:        7 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; Hardware stack levels required when called:    7
 14390 ;; This function calls:
 14391 ;;		Nothing
 14392 ;; This function is called by:
 14393 ;;		_printf
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           	psect	text52
 14398  003946                     __ptext52:
 14399                           	opt stack 0
 14400  003946                     ___lwdiv:
 14401                           	opt stack 19
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;incstack = 0
 14405  003946  0E00               	movlw	0
 14406  003948  0100               	movlb	0	; () banked
 14407  00394A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14408  00394C  0E00               	movlw	0
 14409  00394E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14410                           
 14411                           ; BSR set to: 0
 14412  003950  0100               	movlb	0	; () banked
 14413  003952  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14414  003954  0100               	movlb	0	; () banked
 14415  003956  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14416  003958  B4D8               	btfsc	status,2,c
 14417  00395A  D02C               	goto	l1671
 14418                           
 14419                           ; BSR set to: 0
 14420  00395C  0E01               	movlw	1
 14421  00395E  0100               	movlb	0	; () banked
 14422  003960  6F86               	movwf	___lwdiv@counter& (0+255),b
 14423  003962  D006               	goto	l5150
 14424  003964                     l5148:
 14425                           
 14426                           ; BSR set to: 0
 14427  003964  0100               	movlb	0	; () banked
 14428  003966  90D8               	bcf	status,0,c
 14429  003968  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14430  00396A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14431  00396C  0100               	movlb	0	; () banked
 14432  00396E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14433  003970                     l5150:
 14434                           
 14435                           ; BSR set to: 0
 14436  003970  0100               	movlb	0	; () banked
 14437  003972  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14438  003974  D7F7               	goto	l5148
 14439  003976                     l5152:
 14440                           
 14441                           ; BSR set to: 0
 14442  003976  0100               	movlb	0	; () banked
 14443  003978  90D8               	bcf	status,0,c
 14444  00397A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14445  00397C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14446                           
 14447                           ; BSR set to: 0
 14448  00397E  0100               	movlb	0	; () banked
 14449  003980  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14450  003982  0100               	movlb	0	; () banked
 14451  003984  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14452  003986  0100               	movlb	0	; () banked
 14453  003988  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14454  00398A  0100               	movlb	0	; () banked
 14455  00398C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14456  00398E  A0D8               	btfss	status,0,c
 14457  003990  D00A               	goto	l5160
 14458                           
 14459                           ; BSR set to: 0
 14460  003992  0100               	movlb	0	; () banked
 14461  003994  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14462  003996  0100               	movlb	0	; () banked
 14463  003998  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14464  00399A  0100               	movlb	0	; () banked
 14465  00399C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14466  00399E  0100               	movlb	0	; () banked
 14467  0039A0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14468                           
 14469                           ; BSR set to: 0
 14470  0039A2  0100               	movlb	0	; () banked
 14471  0039A4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14472  0039A6                     l5160:
 14473                           
 14474                           ; BSR set to: 0
 14475  0039A6  0100               	movlb	0	; () banked
 14476  0039A8  90D8               	bcf	status,0,c
 14477  0039AA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14478  0039AC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14479                           
 14480                           ; BSR set to: 0
 14481  0039AE  0100               	movlb	0	; () banked
 14482  0039B0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14483  0039B2  D7E1               	goto	l5152
 14484  0039B4                     l1671:
 14485                           
 14486                           ; BSR set to: 0
 14487  0039B4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14488  0039B8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14489                           
 14490                           ; BSR set to: 0
 14491  0039BC  0012               	return		;funcret
 14492  0039BE                     __end_of___lwdiv:
 14493                           	opt stack 0
 14494                           tblptru	equ	0xFF8
 14495                           tblptrh	equ	0xFF7
 14496                           tblptrl	equ	0xFF6
 14497                           tablat	equ	0xFF5
 14498                           prodh	equ	0xFF4
 14499                           prodl	equ	0xFF3
 14500                           intcon	equ	0xFF2
 14501                           intcon2	equ	0xFF1
 14502                           intcon3	equ	0xFF0
 14503                           indf0	equ	0xFEF
 14504                           postinc0	equ	0xFEE
 14505                           fsr0h	equ	0xFEA
 14506                           fsr0l	equ	0xFE9
 14507                           wreg	equ	0xFE8
 14508                           postdec1	equ	0xFE5
 14509                           fsr1l	equ	0xFE1
 14510                           indf2	equ	0xFDF
 14511                           postinc2	equ	0xFDE
 14512                           postdec2	equ	0xFDD
 14513                           fsr2h	equ	0xFDA
 14514                           fsr2l	equ	0xFD9
 14515                           status	equ	0xFD8
 14516                           
 14517 ;; *************** function _lcdInst *****************
 14518 ;; Defined at:
 14519 ;;		line 15 in file "lcd.c"
 14520 ;; Parameters:    Size  Location     Type
 14521 ;;  data            1    wreg     unsigned char 
 14522 ;; Auto vars:     Size  Location     Type
 14523 ;;  data            1    2[BANK0 ] unsigned char 
 14524 ;; Return value:  Size  Location     Type
 14525 ;;                  1    wreg      void 
 14526 ;; Registers used:
 14527 ;;		wreg, status,2, status,0, cstack
 14528 ;; Tracked objects:
 14529 ;;		On entry : 0/0
 14530 ;;		On exit  : 0/0
 14531 ;;		Unchanged: 0/0
 14532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14537 ;;Total ram usage:        1 bytes
 14538 ;; Hardware stack levels used:    1
 14539 ;; Hardware stack levels required when called:    8
 14540 ;; This function calls:
 14541 ;;		_lcdNibble
 14542 ;; This function is called by:
 14543 ;;		_UI
 14544 ;;		_change_state_to_menu_start
 14545 ;;		_change_state_to_menu_12
 14546 ;;		_change_state_to_menu_22
 14547 ;;		_initLCD
 14548 ;;		_printRTC
 14549 ;;		_Loading
 14550 ;;		_EEPROM_write
 14551 ;;		_Test
 14552 ;;		_algorithmTest
 14553 ;;		_sensorTest
 14554 ;;		_actuatorTest
 14555 ;;		_PortTestA5
 14556 ;;		_SolenoidTestA5
 14557 ;;		_ToggleTestA5
 14558 ;; This function uses a non-reentrant model
 14559 ;;
 14560                           
 14561                           	psect	text53
 14562  00450A                     __ptext53:
 14563                           	opt stack 0
 14564  00450A                     _lcdInst:
 14565                           	opt stack 20
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;incstack = 0
 14569                           ;lcdInst@data stored from wreg
 14570  00450A  0100               	movlb	0	; () banked
 14571  00450C  6F82               	movwf	lcdInst@data& (0+255),b
 14572                           
 14573                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14574  00450E  948C               	bcf	3980,2,c	;volatile
 14575                           
 14576                           ;lcd.c: 17: lcdNibble(data);
 14577  004510  0100               	movlb	0	; () banked
 14578  004512  5182               	movf	lcdInst@data& (0+255),w,b
 14579  004514  EC87  F01D         	call	_lcdNibble
 14580  004518  0012               	return		;funcret
 14581  00451A                     __end_of_lcdInst:
 14582                           	opt stack 0
 14583                           tblptru	equ	0xFF8
 14584                           tblptrh	equ	0xFF7
 14585                           tblptrl	equ	0xFF6
 14586                           tablat	equ	0xFF5
 14587                           prodh	equ	0xFF4
 14588                           prodl	equ	0xFF3
 14589                           intcon	equ	0xFF2
 14590                           intcon2	equ	0xFF1
 14591                           intcon3	equ	0xFF0
 14592                           indf0	equ	0xFEF
 14593                           postinc0	equ	0xFEE
 14594                           fsr0h	equ	0xFEA
 14595                           fsr0l	equ	0xFE9
 14596                           wreg	equ	0xFE8
 14597                           postdec1	equ	0xFE5
 14598                           fsr1l	equ	0xFE1
 14599                           indf2	equ	0xFDF
 14600                           postinc2	equ	0xFDE
 14601                           postdec2	equ	0xFDD
 14602                           fsr2h	equ	0xFDA
 14603                           fsr2l	equ	0xFD9
 14604                           status	equ	0xFD8
 14605                           
 14606 ;; *************** function _lcdNibble *****************
 14607 ;; Defined at:
 14608 ;;		line 25 in file "lcd.c"
 14609 ;; Parameters:    Size  Location     Type
 14610 ;;  data            1    wreg     unsigned char 
 14611 ;; Auto vars:     Size  Location     Type
 14612 ;;  data            1    1[BANK0 ] unsigned char 
 14613 ;;  temp            1    0[BANK0 ] unsigned char 
 14614 ;; Return value:  Size  Location     Type
 14615 ;;                  1    wreg      void 
 14616 ;; Registers used:
 14617 ;;		wreg, status,2, status,0
 14618 ;; Tracked objects:
 14619 ;;		On entry : 0/0
 14620 ;;		On exit  : 0/0
 14621 ;;		Unchanged: 0/0
 14622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14627 ;;Total ram usage:        2 bytes
 14628 ;; Hardware stack levels used:    1
 14629 ;; Hardware stack levels required when called:    7
 14630 ;; This function calls:
 14631 ;;		Nothing
 14632 ;; This function is called by:
 14633 ;;		_lcdInst
 14634 ;;		_putch
 14635 ;; This function uses a non-reentrant model
 14636 ;;
 14637                           
 14638                           	psect	text54
 14639  003B0E                     __ptext54:
 14640                           	opt stack 0
 14641  003B0E                     _lcdNibble:
 14642                           	opt stack 20
 14643                           
 14644                           ;incstack = 0
 14645                           ;lcdNibble@data stored from wreg
 14646  003B0E  0100               	movlb	0	; () banked
 14647  003B10  6F81               	movwf	lcdNibble@data& (0+255),b
 14648                           
 14649                           ;lcd.c: 27: char temp = data & 0xF0;
 14650  003B12  0100               	movlb	0	; () banked
 14651  003B14  5181               	movf	lcdNibble@data& (0+255),w,b
 14652  003B16  0BF0               	andlw	240
 14653  003B18  0100               	movlb	0	; () banked
 14654  003B1A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14655                           
 14656                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14657  003B1C  508C               	movf	3980,w,c	;volatile
 14658  003B1E  0B0F               	andlw	15
 14659  003B20  6E8C               	movwf	3980,c	;volatile
 14660                           
 14661                           ;lcd.c: 29: LATD = temp | LATD;
 14662  003B22  0100               	movlb	0	; () banked
 14663  003B24  5180               	movf	lcdNibble@temp& (0+255),w,b
 14664  003B26  108C               	iorwf	3980,w,c	;volatile
 14665  003B28  6E8C               	movwf	3980,c	;volatile
 14666                           
 14667                           ; BSR set to: 0
 14668                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14669  003B2A  868C               	bsf	3980,3,c	;volatile
 14670                           
 14671                           ; BSR set to: 0
 14672                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14673  003B2C  0E42               	movlw	66
 14674  003B2E                     u7877:
 14675  003B2E  2EE8               	decfsz	wreg,f,c
 14676  003B30  D7FE               	bra	u7877
 14677  003B32  D000               	nop2	
 14678                           
 14679                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14680  003B34  968C               	bcf	3980,3,c	;volatile
 14681                           
 14682                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14683  003B36  0E42               	movlw	66
 14684  003B38                     u7887:
 14685  003B38  2EE8               	decfsz	wreg,f,c
 14686  003B3A  D7FE               	bra	u7887
 14687  003B3C  D000               	nop2	
 14688                           
 14689                           ;lcd.c: 36: data = data << 4;
 14690  003B3E  0100               	movlb	0	; () banked
 14691  003B40  3981               	swapf	lcdNibble@data& (0+255),w,b
 14692  003B42  0BF0               	andlw	240
 14693  003B44  0100               	movlb	0	; () banked
 14694  003B46  6F81               	movwf	lcdNibble@data& (0+255),b
 14695                           
 14696                           ;lcd.c: 38: temp = data & 0xF0;
 14697  003B48  0100               	movlb	0	; () banked
 14698  003B4A  5181               	movf	lcdNibble@data& (0+255),w,b
 14699  003B4C  0BF0               	andlw	240
 14700  003B4E  0100               	movlb	0	; () banked
 14701  003B50  6F80               	movwf	lcdNibble@temp& (0+255),b
 14702                           
 14703                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14704  003B52  508C               	movf	3980,w,c	;volatile
 14705  003B54  0B0F               	andlw	15
 14706  003B56  6E8C               	movwf	3980,c	;volatile
 14707                           
 14708                           ;lcd.c: 40: LATD = temp | LATD;
 14709  003B58  0100               	movlb	0	; () banked
 14710  003B5A  5180               	movf	lcdNibble@temp& (0+255),w,b
 14711  003B5C  108C               	iorwf	3980,w,c	;volatile
 14712  003B5E  6E8C               	movwf	3980,c	;volatile
 14713                           
 14714                           ; BSR set to: 0
 14715                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14716  003B60  868C               	bsf	3980,3,c	;volatile
 14717                           
 14718                           ; BSR set to: 0
 14719                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14720  003B62  0E42               	movlw	66
 14721  003B64                     u7897:
 14722  003B64  2EE8               	decfsz	wreg,f,c
 14723  003B66  D7FE               	bra	u7897
 14724  003B68  D000               	nop2	
 14725                           
 14726                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14727  003B6A  968C               	bcf	3980,3,c	;volatile
 14728                           
 14729                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14730  003B6C  0E42               	movlw	66
 14731  003B6E                     u7907:
 14732  003B6E  2EE8               	decfsz	wreg,f,c
 14733  003B70  D7FE               	bra	u7907
 14734  003B72  D000               	nop2	
 14735  003B74  0012               	return		;funcret
 14736  003B76                     __end_of_lcdNibble:
 14737                           	opt stack 0
 14738                           tblptru	equ	0xFF8
 14739                           tblptrh	equ	0xFF7
 14740                           tblptrl	equ	0xFF6
 14741                           tablat	equ	0xFF5
 14742                           prodh	equ	0xFF4
 14743                           prodl	equ	0xFF3
 14744                           intcon	equ	0xFF2
 14745                           intcon2	equ	0xFF1
 14746                           intcon3	equ	0xFF0
 14747                           indf0	equ	0xFEF
 14748                           postinc0	equ	0xFEE
 14749                           fsr0h	equ	0xFEA
 14750                           fsr0l	equ	0xFE9
 14751                           wreg	equ	0xFE8
 14752                           postdec1	equ	0xFE5
 14753                           fsr1l	equ	0xFE1
 14754                           indf2	equ	0xFDF
 14755                           postinc2	equ	0xFDE
 14756                           postdec2	equ	0xFDD
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function _EEPROMTest *****************
 14762 ;; Defined at:
 14763 ;;		line 427 in file "Test.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;		None
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;		None
 14768 ;; Return value:  Size  Location     Type
 14769 ;;                  1    wreg      void 
 14770 ;; Registers used:
 14771 ;;		None
 14772 ;; Tracked objects:
 14773 ;;		On entry : 0/0
 14774 ;;		On exit  : 0/0
 14775 ;;		Unchanged: 0/0
 14776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;Total ram usage:        0 bytes
 14782 ;; Hardware stack levels used:    1
 14783 ;; Hardware stack levels required when called:    7
 14784 ;; This function calls:
 14785 ;;		Nothing
 14786 ;; This function is called by:
 14787 ;;		_Test
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           	psect	text55
 14792  00456E                     __ptext55:
 14793                           	opt stack 0
 14794  00456E                     _EEPROMTest:
 14795                           	opt stack 22
 14796                           
 14797                           ;incstack = 0
 14798  00456E  0012               	return		;funcret
 14799  004570                     __end_of_EEPROMTest:
 14800                           	opt stack 0
 14801                           tblptru	equ	0xFF8
 14802                           tblptrh	equ	0xFF7
 14803                           tblptrl	equ	0xFF6
 14804                           tablat	equ	0xFF5
 14805                           prodh	equ	0xFF4
 14806                           prodl	equ	0xFF3
 14807                           intcon	equ	0xFF2
 14808                           intcon2	equ	0xFF1
 14809                           intcon3	equ	0xFF0
 14810                           indf0	equ	0xFEF
 14811                           postinc0	equ	0xFEE
 14812                           fsr0h	equ	0xFEA
 14813                           fsr0l	equ	0xFE9
 14814                           wreg	equ	0xFE8
 14815                           postdec1	equ	0xFE5
 14816                           fsr1l	equ	0xFE1
 14817                           indf2	equ	0xFDF
 14818                           postinc2	equ	0xFDE
 14819                           postdec2	equ	0xFDD
 14820                           fsr2h	equ	0xFDA
 14821                           fsr2l	equ	0xFD9
 14822                           status	equ	0xFD8
 14823                           
 14824 ;; *************** function _handler *****************
 14825 ;; Defined at:
 14826 ;;		line 16 in file "interruptHandler.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;		None
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;		None
 14831 ;; Return value:  Size  Location     Type
 14832 ;;                  1    wreg      void 
 14833 ;; Registers used:
 14834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14835 ;; Tracked objects:
 14836 ;;		On entry : 0/0
 14837 ;;		On exit  : 0/0
 14838 ;;		Unchanged: 0/0
 14839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14842 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14843 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14844 ;;Total ram usage:       16 bytes
 14845 ;; Hardware stack levels used:    1
 14846 ;; Hardware stack levels required when called:    6
 14847 ;; This function calls:
 14848 ;;		_printSortTimer
 14849 ;;		_updateMenu
 14850 ;; This function is called by:
 14851 ;;		Interrupt level 2
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           	psect	intcode
 14856  000008                     __pintcode:
 14857                           	opt stack 0
 14858  000008                     _handler:
 14859                           	opt stack 18
 14860                           
 14861                           ;incstack = 0
 14862  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14863  00000A  EDF7  F014         	call	int_func,f	;refresh shadow registers
 14864                           tblptru	equ	0xFF8
 14865                           tblptrh	equ	0xFF7
 14866                           tblptrl	equ	0xFF6
 14867                           tablat	equ	0xFF5
 14868                           prodh	equ	0xFF4
 14869                           prodl	equ	0xFF3
 14870                           intcon	equ	0xFF2
 14871                           intcon2	equ	0xFF1
 14872                           intcon3	equ	0xFF0
 14873                           indf0	equ	0xFEF
 14874                           postinc0	equ	0xFEE
 14875                           fsr0h	equ	0xFEA
 14876                           fsr0l	equ	0xFE9
 14877                           wreg	equ	0xFE8
 14878                           postdec1	equ	0xFE5
 14879                           fsr1l	equ	0xFE1
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887                           	psect	intcode_body
 14888  0029EE                     __pintcode_body:
 14889                           	opt stack 18
 14890  0029EE                     int_func:
 14891                           	opt stack 18
 14892  0029EE  0006               	pop		; remove dummy address from shadow register refresh
 14893  0029F0  CFFA F04D          	movff	pclath,??_handler+2
 14894  0029F4  CFFB F04E          	movff	pclatu,??_handler+3
 14895  0029F8  CFE9 F04F          	movff	fsr0l,??_handler+4
 14896  0029FC  CFEA F050          	movff	fsr0h,??_handler+5
 14897  002A00  CFE1 F051          	movff	fsr1l,??_handler+6
 14898  002A04  CFE2 F052          	movff	fsr1h,??_handler+7
 14899  002A08  CFD9 F053          	movff	fsr2l,??_handler+8
 14900  002A0C  CFDA F054          	movff	fsr2h,??_handler+9
 14901  002A10  CFF3 F055          	movff	prodl,??_handler+10
 14902  002A14  CFF4 F056          	movff	prodh,??_handler+11
 14903  002A18  CFF6 F057          	movff	tblptrl,??_handler+12
 14904  002A1C  CFF7 F058          	movff	tblptrh,??_handler+13
 14905  002A20  CFF8 F059          	movff	tblptru,??_handler+14
 14906  002A24  CFF5 F05A          	movff	tablat,??_handler+15
 14907                           
 14908                           ;interruptHandler.c: 18: if(INT1IF){
 14909  002A28  A0F0               	btfss	intcon3,0,c	;volatile
 14910  002A2A  D020               	goto	i2l7880
 14911                           
 14912                           ;interruptHandler.c: 19: INT1IF = 0;
 14913  002A2C  90F0               	bcf	intcon3,0,c	;volatile
 14914                           
 14915                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14916  002A2E  0100               	movlb	0	; () banked
 14917  002A30  51FC               	movf	_machine_state& (0+255),w,b
 14918  002A32  A4D8               	btfss	status,2,c
 14919  002A34  D01B               	goto	i2l7880
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14923  002A36  3881               	swapf	3969,w,c	;volatile
 14924  002A38  0B0F               	andlw	15
 14925  002A3A  0B0F               	andlw	15
 14926  002A3C  6E4B               	movwf	??_handler& (0+255),c
 14927  002A3E  6A4C               	clrf	(??_handler+1)& (0+255),c
 14928  002A40  0E39               	movlw	low _keys
 14929  002A42  244B               	addwf	??_handler,w,c
 14930  002A44  6EF6               	movwf	tblptrl,c
 14931  002A46  0EFB               	movlw	high _keys
 14932  002A48  204C               	addwfc	??_handler+1,w,c
 14933  002A4A  6EF7               	movwf	tblptrh,c
 14934  002A4C                     	if	1	;There are 3 active tblptr bytes
 14935  002A4C  6AF8               	clrf	tblptru,c
 14936  002A4E  0E00               	movlw	low (__mediumconst shr (0+16))
 14937  002A50  22F8               	addwfc	tblptru,f,c
 14938  002A52                     	endif
 14939  002A52  0008               	tblrd		*
 14940  002A54  CFF5 F07D          	movff	tablat,_input	;volatile
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;interruptHandler.c: 23: if(input == '*'){
 14944  002A58  0E2A               	movlw	42
 14945  002A5A  187D               	xorwf	_input,w,c	;volatile
 14946  002A5C  A4D8               	btfss	status,2,c
 14947  002A5E  D004               	goto	i2l7878
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14951  002A60  0E03               	movlw	3
 14952  002A62  0100               	movlb	0	; () banked
 14953  002A64  6FFC               	movwf	_machine_state& (0+255),b
 14954                           
 14955                           ;interruptHandler.c: 25: }
 14956  002A66  D002               	goto	i2l7880
 14957  002A68                     i2l7878:
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;interruptHandler.c: 26: else{
 14961                           ;interruptHandler.c: 27: updateMenu();
 14962  002A68  ECC8  F00F         	call	_updateMenu	;wreg free
 14963  002A6C                     i2l7880:
 14964                           
 14965                           ;interruptHandler.c: 28: }
 14966                           ;interruptHandler.c: 29: }
 14967                           ;interruptHandler.c: 30: }
 14968                           ;interruptHandler.c: 33: if(TMR0IF){
 14969  002A6C  A4F2               	btfss	intcon,2,c	;volatile
 14970  002A6E  D00C               	goto	i2l7894
 14971                           
 14972                           ;interruptHandler.c: 34: TMR0IF = 0;
 14973  002A70  94F2               	bcf	intcon,2,c	;volatile
 14974                           
 14975                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14976  002A72  0100               	movlb	0	; () banked
 14977  002A74  05FC               	decf	_machine_state& (0+255),w,b
 14978  002A76  A4D8               	btfss	status,2,c
 14979  002A78  D007               	goto	i2l7894
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;interruptHandler.c: 36: printSortTimer();
 14983  002A7A  EC43  F012         	call	_printSortTimer	;wreg free
 14984                           
 14985                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14986  002A7E  0E85               	movlw	133
 14987  002A80  6ED7               	movwf	4055,c	;volatile
 14988                           
 14989                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14990  002A82  0EEE               	movlw	238
 14991  002A84  6ED6               	movwf	4054,c	;volatile
 14992                           
 14993                           ;interruptHandler.c: 40: TMR0ON = 1;
 14994  002A86  8ED5               	bsf	4053,7,c	;volatile
 14995  002A88                     i2l7894:
 14996                           
 14997                           ;interruptHandler.c: 41: }
 14998                           ;interruptHandler.c: 42: }
 14999                           ;interruptHandler.c: 45: if(TMR1IF){
 15000  002A88  A09E               	btfss	3998,0,c	;volatile
 15001  002A8A  D024               	goto	i2l7918
 15002                           
 15003                           ;interruptHandler.c: 46: TMR1IF = 0;
 15004  002A8C  909E               	bcf	3998,0,c	;volatile
 15005                           
 15006                           ;interruptHandler.c: 47: TMR1ON = 0;
 15007  002A8E  90CD               	bcf	4045,0,c	;volatile
 15008                           
 15009                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15010  002A90  0100               	movlb	0	; () banked
 15011  002A92  05FC               	decf	_machine_state& (0+255),w,b
 15012  002A94  A4D8               	btfss	status,2,c
 15013  002A96  D01E               	goto	i2l7918
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;interruptHandler.c: 49: if(was_low_1){
 15017  002A98  5079               	movf	_was_low_1,w,c	;volatile
 15018  002A9A  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15019  002A9C  B4D8               	btfsc	status,2,c
 15020  002A9E  D00A               	goto	i2l844
 15021                           
 15022                           ; BSR set to: 0
 15023                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15024  002AA0  828B               	bsf	3979,1,c	;volatile
 15025                           
 15026                           ; BSR set to: 0
 15027                           ;interruptHandler.c: 51: was_low_1 = 0;
 15028  002AA2  0E00               	movlw	0
 15029  002AA4  6E7A               	movwf	_was_low_1+1,c	;volatile
 15030  002AA6  0E00               	movlw	0
 15031  002AA8  6E79               	movwf	_was_low_1,c	;volatile
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15035  002AAA  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15036                           
 15037                           ; BSR set to: 0
 15038                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15039  002AAE  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15040                           
 15041                           ;interruptHandler.c: 54: }
 15042  002AB2  D00F               	goto	i2l7916
 15043  002AB4                     i2l844:
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;interruptHandler.c: 55: else{
 15047                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15048  002AB4  928B               	bcf	3979,1,c	;volatile
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;interruptHandler.c: 57: was_low_1 = 1;
 15052  002AB6  0E00               	movlw	0
 15053  002AB8  6E7A               	movwf	_was_low_1+1,c	;volatile
 15054  002ABA  0E01               	movlw	1
 15055  002ABC  6E79               	movwf	_was_low_1,c	;volatile
 15056                           
 15057                           ; BSR set to: 0
 15058                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15059  002ABE  0101               	movlb	1	; () banked
 15060  002AC0  511C               	movf	_servoTimes& (0+255),w,b
 15061  002AC2  0800               	sublw	0
 15062  002AC4  0F20               	addlw	32
 15063  002AC6  6ECF               	movwf	4047,c	;volatile
 15064                           
 15065                           ; BSR set to: 1
 15066                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15067  002AC8  0101               	movlb	1	; () banked
 15068  002ACA  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15069  002ACC  0800               	sublw	0
 15070  002ACE  0F20               	addlw	32
 15071  002AD0  6ECE               	movwf	4046,c	;volatile
 15072  002AD2                     i2l7916:
 15073                           
 15074                           ;interruptHandler.c: 60: }
 15075                           ;interruptHandler.c: 61: TMR1ON = 1;
 15076  002AD2  80CD               	bsf	4045,0,c	;volatile
 15077  002AD4                     i2l7918:
 15078                           
 15079                           ;interruptHandler.c: 62: }
 15080                           ;interruptHandler.c: 63: }
 15081                           ;interruptHandler.c: 65: if(TMR3IF){
 15082  002AD4  A2A1               	btfss	4001,1,c	;volatile
 15083  002AD6  D024               	goto	i2l850
 15084                           
 15085                           ;interruptHandler.c: 66: TMR3IF = 0;
 15086  002AD8  92A1               	bcf	4001,1,c	;volatile
 15087                           
 15088                           ;interruptHandler.c: 67: TMR3ON = 0;
 15089  002ADA  90B1               	bcf	4017,0,c	;volatile
 15090                           
 15091                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15092  002ADC  0100               	movlb	0	; () banked
 15093  002ADE  05FC               	decf	_machine_state& (0+255),w,b
 15094  002AE0  A4D8               	btfss	status,2,c
 15095  002AE2  D01E               	goto	i2l850
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;interruptHandler.c: 69: if(was_low_3){
 15099  002AE4  507B               	movf	_was_low_3,w,c	;volatile
 15100  002AE6  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15101  002AE8  B4D8               	btfsc	status,2,c
 15102  002AEA  D00A               	goto	i2l848
 15103                           
 15104                           ; BSR set to: 0
 15105                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15106  002AEC  848B               	bsf	3979,2,c	;volatile
 15107                           
 15108                           ; BSR set to: 0
 15109                           ;interruptHandler.c: 71: was_low_3 = 0;
 15110  002AEE  0E00               	movlw	0
 15111  002AF0  6E7C               	movwf	_was_low_3+1,c	;volatile
 15112  002AF2  0E00               	movlw	0
 15113  002AF4  6E7B               	movwf	_was_low_3,c	;volatile
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15117  002AF6  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15121  002AFA  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15122                           
 15123                           ;interruptHandler.c: 74: }
 15124  002AFE  D00F               	goto	i2l7940
 15125  002B00                     i2l848:
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;interruptHandler.c: 75: else{
 15129                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15130  002B00  948B               	bcf	3979,2,c	;volatile
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;interruptHandler.c: 77: was_low_3 = 1;
 15134  002B02  0E00               	movlw	0
 15135  002B04  6E7C               	movwf	_was_low_3+1,c	;volatile
 15136  002B06  0E01               	movlw	1
 15137  002B08  6E7B               	movwf	_was_low_3,c	;volatile
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15141  002B0A  0101               	movlb	1	; () banked
 15142  002B0C  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15143  002B0E  0800               	sublw	0
 15144  002B10  0F20               	addlw	32
 15145  002B12  6EB3               	movwf	4019,c	;volatile
 15146                           
 15147                           ; BSR set to: 1
 15148                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15149  002B14  0101               	movlb	1	; () banked
 15150  002B16  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15151  002B18  0800               	sublw	0
 15152  002B1A  0F20               	addlw	32
 15153  002B1C  6EB2               	movwf	4018,c	;volatile
 15154  002B1E                     i2l7940:
 15155                           
 15156                           ;interruptHandler.c: 80: }
 15157                           ;interruptHandler.c: 81: TMR3ON = 1;
 15158  002B1E  80B1               	bsf	4017,0,c	;volatile
 15159  002B20                     i2l850:
 15160  002B20  C05A  FFF5         	movff	??_handler+15,tablat
 15161  002B24  C059  FFF8         	movff	??_handler+14,tblptru
 15162  002B28  C058  FFF7         	movff	??_handler+13,tblptrh
 15163  002B2C  C057  FFF6         	movff	??_handler+12,tblptrl
 15164  002B30  C056  FFF4         	movff	??_handler+11,prodh
 15165  002B34  C055  FFF3         	movff	??_handler+10,prodl
 15166  002B38  C054  FFDA         	movff	??_handler+9,fsr2h
 15167  002B3C  C053  FFD9         	movff	??_handler+8,fsr2l
 15168  002B40  C052  FFE2         	movff	??_handler+7,fsr1h
 15169  002B44  C051  FFE1         	movff	??_handler+6,fsr1l
 15170  002B48  C050  FFEA         	movff	??_handler+5,fsr0h
 15171  002B4C  C04F  FFE9         	movff	??_handler+4,fsr0l
 15172  002B50  C04E  FFFB         	movff	??_handler+3,pclatu
 15173  002B54  C04D  FFFA         	movff	??_handler+2,pclath
 15174  002B58  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15175  002B5A  0011               	retfie		f
 15176  002B5C                     __end_of_handler:
 15177                           	opt stack 0
 15178                           pclatu	equ	0xFFB
 15179                           pclath	equ	0xFFA
 15180                           tblptru	equ	0xFF8
 15181                           tblptrh	equ	0xFF7
 15182                           tblptrl	equ	0xFF6
 15183                           tablat	equ	0xFF5
 15184                           prodh	equ	0xFF4
 15185                           prodl	equ	0xFF3
 15186                           intcon	equ	0xFF2
 15187                           intcon2	equ	0xFF1
 15188                           intcon3	equ	0xFF0
 15189                           indf0	equ	0xFEF
 15190                           postinc0	equ	0xFEE
 15191                           fsr0h	equ	0xFEA
 15192                           fsr0l	equ	0xFE9
 15193                           wreg	equ	0xFE8
 15194                           postdec1	equ	0xFE5
 15195                           fsr1h	equ	0xFE2
 15196                           fsr1l	equ	0xFE1
 15197                           indf2	equ	0xFDF
 15198                           postinc2	equ	0xFDE
 15199                           postdec2	equ	0xFDD
 15200                           fsr2h	equ	0xFDA
 15201                           fsr2l	equ	0xFD9
 15202                           status	equ	0xFD8
 15203                           
 15204 ;; *************** function _updateMenu *****************
 15205 ;; Defined at:
 15206 ;;		line 211 in file "UI.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;		None
 15209 ;; Auto vars:     Size  Location     Type
 15210 ;;		None
 15211 ;; Return value:  Size  Location     Type
 15212 ;;                  1    wreg      void 
 15213 ;; Registers used:
 15214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15215 ;; Tracked objects:
 15216 ;;		On entry : 0/0
 15217 ;;		On exit  : 0/0
 15218 ;;		Unchanged: 0/0
 15219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15223 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15224 ;;Total ram usage:        2 bytes
 15225 ;; Hardware stack levels used:    1
 15226 ;; Hardware stack levels required when called:    5
 15227 ;; This function calls:
 15228 ;;		_change_state_to_logs_11
 15229 ;;		_change_state_to_logs_12
 15230 ;;		_change_state_to_logs_22
 15231 ;;		_change_state_to_logs_23
 15232 ;;		_change_state_to_logs_33
 15233 ;;		_change_state_to_logs_34
 15234 ;;		_change_state_to_menu_11
 15235 ;;		_change_state_to_menu_23
 15236 ;;		_dispLogs
 15237 ;;		_inputHandler
 15238 ;;		i2_change_state_to_menu_12
 15239 ;;		i2_change_state_to_menu_22
 15240 ;;		i2_change_state_to_menu_start
 15241 ;; This function is called by:
 15242 ;;		_handler
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           	psect	text57
 15247  001F90                     __ptext57:
 15248                           	opt stack 0
 15249  001F90                     _updateMenu:
 15250                           	opt stack 18
 15251                           
 15252                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15253                           
 15254                           ;incstack = 0
 15255  001F90  0E00               	movlw	0
 15256  001F92  6E78               	movwf	_up+1,c
 15257  001F94  0E00               	movlw	0
 15258  001F96  6E77               	movwf	_up,c
 15259  001F98  0E00               	movlw	0
 15260  001F9A  6E68               	movwf	_down+1,c
 15261  001F9C  0E00               	movlw	0
 15262  001F9E  6E67               	movwf	_down,c
 15263  001FA0  0E00               	movlw	0
 15264  001FA2  6E6A               	movwf	_enter+1,c
 15265  001FA4  0E00               	movlw	0
 15266  001FA6  6E69               	movwf	_enter,c
 15267  001FA8  0E00               	movlw	0
 15268  001FAA  6E5C               	movwf	_back+1,c
 15269  001FAC  0E00               	movlw	0
 15270  001FAE  6E5B               	movwf	_back,c
 15271                           
 15272                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15273  001FB0  9EF2               	bcf	intcon,7,c	;volatile
 15274                           
 15275                           ;UI.c: 215: if (inputHandler()
 15276                           ;UI.c: 218: ){
 15277  001FB2  EC3C  F013         	call	_inputHandler	;wreg free
 15278  001FB6  502A               	movf	?_inputHandler,w,c
 15279  001FB8  102B               	iorwf	?_inputHandler+1,w,c
 15280  001FBA  A4D8               	btfss	status,2,c
 15281  001FBC  D112               	goto	i2l7622
 15282  001FBE  D146               	goto	i2l254
 15283  001FC0                     i2l7474:
 15284                           
 15285                           ;UI.c: 222: change_state_to_menu_11();
 15286  001FC0  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 15287                           
 15288                           ;UI.c: 223: break;
 15289  001FC4  D143               	goto	i2l254
 15290  001FC6                     i2l7476:
 15291                           
 15292                           ;UI.c: 226: if(up){
 15293  001FC6  5077               	movf	_up,w,c
 15294  001FC8  1078               	iorwf	_up+1,w,c
 15295  001FCA  B4D8               	btfsc	status,2,c
 15296  001FCC  D003               	goto	i2l7480
 15297                           
 15298                           ;UI.c: 227: change_state_to_menu_23();
 15299  001FCE  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15300                           
 15301                           ;UI.c: 228: }
 15302  001FD2  D13C               	goto	i2l254
 15303  001FD4                     i2l7480:
 15304                           
 15305                           ;UI.c: 229: else if(down){
 15306  001FD4  5067               	movf	_down,w,c
 15307  001FD6  1068               	iorwf	_down+1,w,c
 15308  001FD8  B4D8               	btfsc	status,2,c
 15309  001FDA  D003               	goto	i2l7484
 15310                           
 15311                           ;UI.c: 230: change_state_to_menu_12();
 15312  001FDC  EC76  F020         	call	i2_change_state_to_menu_12	;wreg free
 15313                           
 15314                           ;UI.c: 231: }
 15315  001FE0  D135               	goto	i2l254
 15316  001FE2                     i2l7484:
 15317                           
 15318                           ;UI.c: 232: else if(enter){
 15319  001FE2  5069               	movf	_enter,w,c
 15320  001FE4  106A               	iorwf	_enter+1,w,c
 15321  001FE6  B4D8               	btfsc	status,2,c
 15322  001FE8  D131               	goto	i2l254
 15323                           
 15324                           ;UI.c: 233: change_state_to_menu_start();
 15325  001FEA  ECB9  F021         	call	i2_change_state_to_menu_start	;wreg free
 15326                           
 15327                           ;UI.c: 234: }
 15328                           ;UI.c: 235: break;
 15329  001FEE  D12E               	goto	i2l254
 15330  001FF0                     i2l7488:
 15331                           
 15332                           ;UI.c: 238: if(up){
 15333  001FF0  5077               	movf	_up,w,c
 15334  001FF2  1078               	iorwf	_up+1,w,c
 15335  001FF4  B4D8               	btfsc	status,2,c
 15336  001FF6  D003               	goto	i2l7492
 15337                           
 15338                           ;UI.c: 239: change_state_to_menu_11();
 15339  001FF8  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 15340                           
 15341                           ;UI.c: 240: }
 15342  001FFC  D127               	goto	i2l254
 15343  001FFE                     i2l7492:
 15344                           
 15345                           ;UI.c: 241: else if(down){
 15346  001FFE  5067               	movf	_down,w,c
 15347  002000  1068               	iorwf	_down+1,w,c
 15348  002002  B4D8               	btfsc	status,2,c
 15349  002004  D011               	goto	i2l7508
 15350                           
 15351                           ;UI.c: 242: change_state_to_menu_23();
 15352  002006  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15353                           
 15354                           ;UI.c: 243: }
 15355  00200A  D120               	goto	i2l254
 15356  00200C                     i2l7500:
 15357                           
 15358                           ;UI.c: 250: if(up){
 15359  00200C  5077               	movf	_up,w,c
 15360  00200E  1078               	iorwf	_up+1,w,c
 15361  002010  B4D8               	btfsc	status,2,c
 15362  002012  D003               	goto	i2l7504
 15363                           
 15364                           ;UI.c: 251: change_state_to_menu_11();
 15365  002014  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 15366                           
 15367                           ;UI.c: 252: }
 15368  002018  D119               	goto	i2l254
 15369  00201A                     i2l7504:
 15370                           
 15371                           ;UI.c: 253: else if(down){
 15372  00201A  5067               	movf	_down,w,c
 15373  00201C  1068               	iorwf	_down+1,w,c
 15374  00201E  B4D8               	btfsc	status,2,c
 15375  002020  D003               	goto	i2l7508
 15376                           
 15377                           ;UI.c: 254: change_state_to_menu_23();
 15378  002022  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15379                           
 15380                           ;UI.c: 255: }
 15381  002026  D112               	goto	i2l254
 15382  002028                     i2l7508:
 15383                           
 15384                           ;UI.c: 256: else if(enter){
 15385  002028  5069               	movf	_enter,w,c
 15386  00202A  106A               	iorwf	_enter+1,w,c
 15387  00202C  B4D8               	btfsc	status,2,c
 15388  00202E  D10E               	goto	i2l254
 15389                           
 15390                           ;UI.c: 257: machine_state = Sorting_state;
 15391  002030  0E01               	movlw	1
 15392  002032  0100               	movlb	0	; () banked
 15393  002034  6FFC               	movwf	_machine_state& (0+255),b
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;UI.c: 258: }
 15397                           ;UI.c: 259: break;
 15398                           
 15399                           ; BSR set to: 0
 15400                           
 15401                           ; BSR set to: 0
 15402  002036  D10A               	goto	i2l254
 15403  002038                     i2l7512:
 15404                           
 15405                           ;UI.c: 262: if(up){
 15406  002038  5077               	movf	_up,w,c
 15407  00203A  1078               	iorwf	_up+1,w,c
 15408  00203C  B4D8               	btfsc	status,2,c
 15409  00203E  D003               	goto	i2l7516
 15410                           
 15411                           ;UI.c: 263: change_state_to_menu_22();
 15412  002040  EC5E  F020         	call	i2_change_state_to_menu_22	;wreg free
 15413                           
 15414                           ;UI.c: 264: }
 15415  002044  D103               	goto	i2l254
 15416  002046                     i2l7516:
 15417                           
 15418                           ;UI.c: 265: else if(down){
 15419  002046  5067               	movf	_down,w,c
 15420  002048  1068               	iorwf	_down+1,w,c
 15421  00204A  B4D8               	btfsc	status,2,c
 15422  00204C  D003               	goto	i2l7520
 15423                           
 15424                           ;UI.c: 266: change_state_to_menu_11();
 15425  00204E  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 15426                           
 15427                           ;UI.c: 267: }
 15428  002052  D0FC               	goto	i2l254
 15429  002054                     i2l7520:
 15430                           
 15431                           ;UI.c: 268: else if(enter){
 15432  002054  5069               	movf	_enter,w,c
 15433  002056  106A               	iorwf	_enter+1,w,c
 15434  002058  B4D8               	btfsc	status,2,c
 15435  00205A  D0F8               	goto	i2l254
 15436                           
 15437                           ;UI.c: 269: change_state_to_logs_11();
 15438  00205C  EC1E  F021         	call	_change_state_to_logs_11	;wreg free
 15439                           
 15440                           ;UI.c: 270: }
 15441                           ;UI.c: 271: break;
 15442  002060  D0F5               	goto	i2l254
 15443  002062                     i2l7524:
 15444                           
 15445                           ;UI.c: 274: if(up){
 15446  002062  5077               	movf	_up,w,c
 15447  002064  1078               	iorwf	_up+1,w,c
 15448  002066  B4D8               	btfsc	status,2,c
 15449  002068  D003               	goto	i2l7528
 15450                           
 15451                           ;UI.c: 275: change_state_to_logs_34();
 15452  00206A  ECBE  F020         	call	_change_state_to_logs_34	;wreg free
 15453                           
 15454                           ;UI.c: 276: }
 15455  00206E  D0EE               	goto	i2l254
 15456  002070                     i2l7528:
 15457                           
 15458                           ;UI.c: 277: else if(down){
 15459  002070  5067               	movf	_down,w,c
 15460  002072  1068               	iorwf	_down+1,w,c
 15461  002074  B4D8               	btfsc	status,2,c
 15462  002076  D003               	goto	i2l7532
 15463                           
 15464                           ;UI.c: 278: change_state_to_logs_12();
 15465  002078  EC06  F021         	call	_change_state_to_logs_12	;wreg free
 15466                           
 15467                           ;UI.c: 279: }
 15468  00207C  D0E7               	goto	i2l254
 15469  00207E                     i2l7532:
 15470                           
 15471                           ;UI.c: 280: else if(enter){
 15472  00207E  5069               	movf	_enter,w,c
 15473  002080  106A               	iorwf	_enter+1,w,c
 15474  002082  B4D8               	btfsc	status,2,c
 15475  002084  D007               	goto	i2l7536
 15476                           
 15477                           ;UI.c: 281: dispLogs(1);
 15478  002086  0E00               	movlw	0
 15479  002088  6E13               	movwf	dispLogs@myLog+1,c
 15480  00208A  0E01               	movlw	1
 15481  00208C  6E12               	movwf	dispLogs@myLog,c
 15482  00208E  EC05  F022         	call	_dispLogs	;wreg free
 15483                           
 15484                           ;UI.c: 282: }
 15485  002092  D0DC               	goto	i2l254
 15486  002094                     i2l7536:
 15487                           
 15488                           ;UI.c: 283: else if(back){
 15489  002094  505B               	movf	_back,w,c
 15490  002096  105C               	iorwf	_back+1,w,c
 15491  002098  B4D8               	btfsc	status,2,c
 15492  00209A  D0D8               	goto	i2l254
 15493                           
 15494                           ;UI.c: 284: change_state_to_menu_23();
 15495  00209C  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15496                           
 15497                           ;UI.c: 285: }
 15498                           ;UI.c: 286: break;
 15499  0020A0  D0D5               	goto	i2l254
 15500  0020A2                     i2l7540:
 15501                           
 15502                           ;UI.c: 289: if(up){
 15503  0020A2  5077               	movf	_up,w,c
 15504  0020A4  1078               	iorwf	_up+1,w,c
 15505  0020A6  B4D8               	btfsc	status,2,c
 15506  0020A8  D003               	goto	i2l7544
 15507                           
 15508                           ;UI.c: 290: change_state_to_logs_11();
 15509  0020AA  EC1E  F021         	call	_change_state_to_logs_11	;wreg free
 15510                           
 15511                           ;UI.c: 291: }
 15512  0020AE  D0CE               	goto	i2l254
 15513  0020B0                     i2l7544:
 15514                           
 15515                           ;UI.c: 292: else if(down){
 15516  0020B0  5067               	movf	_down,w,c
 15517  0020B2  1068               	iorwf	_down+1,w,c
 15518  0020B4  B4D8               	btfsc	status,2,c
 15519  0020B6  D003               	goto	i2l7548
 15520                           
 15521                           ;UI.c: 293: change_state_to_logs_23();
 15522  0020B8  EC4D  F021         	call	_change_state_to_logs_23	;wreg free
 15523                           
 15524                           ;UI.c: 294: }
 15525  0020BC  D0C7               	goto	i2l254
 15526  0020BE                     i2l7548:
 15527                           
 15528                           ;UI.c: 295: else if(enter){
 15529  0020BE  5069               	movf	_enter,w,c
 15530  0020C0  106A               	iorwf	_enter+1,w,c
 15531  0020C2  B4D8               	btfsc	status,2,c
 15532  0020C4  D007               	goto	i2l7552
 15533                           
 15534                           ;UI.c: 296: dispLogs(2);
 15535  0020C6  0E00               	movlw	0
 15536  0020C8  6E13               	movwf	dispLogs@myLog+1,c
 15537  0020CA  0E02               	movlw	2
 15538  0020CC  6E12               	movwf	dispLogs@myLog,c
 15539  0020CE  EC05  F022         	call	_dispLogs	;wreg free
 15540                           
 15541                           ;UI.c: 297: }
 15542  0020D2  D0BC               	goto	i2l254
 15543  0020D4                     i2l7552:
 15544                           
 15545                           ;UI.c: 298: else if(back){
 15546  0020D4  505B               	movf	_back,w,c
 15547  0020D6  105C               	iorwf	_back+1,w,c
 15548  0020D8  B4D8               	btfsc	status,2,c
 15549  0020DA  D0B8               	goto	i2l254
 15550                           
 15551                           ;UI.c: 299: change_state_to_menu_23();
 15552  0020DC  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15553                           
 15554                           ;UI.c: 300: }
 15555                           ;UI.c: 301: break;
 15556  0020E0  D0B5               	goto	i2l254
 15557  0020E2                     i2l7556:
 15558                           
 15559                           ;UI.c: 304: if(up){
 15560  0020E2  5077               	movf	_up,w,c
 15561  0020E4  1078               	iorwf	_up+1,w,c
 15562  0020E6  B4D8               	btfsc	status,2,c
 15563  0020E8  D003               	goto	i2l7560
 15564                           
 15565                           ;UI.c: 305: change_state_to_logs_11();
 15566  0020EA  EC1E  F021         	call	_change_state_to_logs_11	;wreg free
 15567                           
 15568                           ;UI.c: 306: }
 15569  0020EE  D0AE               	goto	i2l254
 15570  0020F0                     i2l7560:
 15571                           
 15572                           ;UI.c: 307: else if(down){
 15573  0020F0  5067               	movf	_down,w,c
 15574  0020F2  1068               	iorwf	_down+1,w,c
 15575  0020F4  B4D8               	btfsc	status,2,c
 15576  0020F6  D003               	goto	i2l7564
 15577                           
 15578                           ;UI.c: 308: change_state_to_logs_23();
 15579  0020F8  EC4D  F021         	call	_change_state_to_logs_23	;wreg free
 15580                           
 15581                           ;UI.c: 309: }
 15582  0020FC  D0A7               	goto	i2l254
 15583  0020FE                     i2l7564:
 15584                           
 15585                           ;UI.c: 310: else if(enter){
 15586  0020FE  5069               	movf	_enter,w,c
 15587  002100  106A               	iorwf	_enter+1,w,c
 15588  002102  B4D8               	btfsc	status,2,c
 15589  002104  D007               	goto	i2l7568
 15590                           
 15591                           ;UI.c: 311: dispLogs(2);
 15592  002106  0E00               	movlw	0
 15593  002108  6E13               	movwf	dispLogs@myLog+1,c
 15594  00210A  0E02               	movlw	2
 15595  00210C  6E12               	movwf	dispLogs@myLog,c
 15596  00210E  EC05  F022         	call	_dispLogs	;wreg free
 15597                           
 15598                           ;UI.c: 312: }
 15599  002112  D09C               	goto	i2l254
 15600  002114                     i2l7568:
 15601                           
 15602                           ;UI.c: 313: else if(back){
 15603  002114  505B               	movf	_back,w,c
 15604  002116  105C               	iorwf	_back+1,w,c
 15605  002118  B4D8               	btfsc	status,2,c
 15606  00211A  D098               	goto	i2l254
 15607                           
 15608                           ;UI.c: 314: change_state_to_menu_23();
 15609  00211C  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15610                           
 15611                           ;UI.c: 315: }
 15612                           ;UI.c: 316: break;
 15613  002120  D095               	goto	i2l254
 15614  002122                     i2l7572:
 15615                           
 15616                           ;UI.c: 319: if(up){
 15617  002122  5077               	movf	_up,w,c
 15618  002124  1078               	iorwf	_up+1,w,c
 15619  002126  B4D8               	btfsc	status,2,c
 15620  002128  D003               	goto	i2l7576
 15621                           
 15622                           ;UI.c: 320: change_state_to_logs_22();
 15623  00212A  ECEE  F020         	call	_change_state_to_logs_22	;wreg free
 15624                           
 15625                           ;UI.c: 321: }
 15626  00212E  D08E               	goto	i2l254
 15627  002130                     i2l7576:
 15628                           
 15629                           ;UI.c: 322: else if(down){
 15630  002130  5067               	movf	_down,w,c
 15631  002132  1068               	iorwf	_down+1,w,c
 15632  002134  B4D8               	btfsc	status,2,c
 15633  002136  D003               	goto	i2l7580
 15634                           
 15635                           ;UI.c: 323: change_state_to_logs_34();
 15636  002138  ECBE  F020         	call	_change_state_to_logs_34	;wreg free
 15637                           
 15638                           ;UI.c: 324: }
 15639  00213C  D087               	goto	i2l254
 15640  00213E                     i2l7580:
 15641                           
 15642                           ;UI.c: 325: else if(enter){
 15643  00213E  5069               	movf	_enter,w,c
 15644  002140  106A               	iorwf	_enter+1,w,c
 15645  002142  B4D8               	btfsc	status,2,c
 15646  002144  D007               	goto	i2l7584
 15647                           
 15648                           ;UI.c: 326: dispLogs(3);
 15649  002146  0E00               	movlw	0
 15650  002148  6E13               	movwf	dispLogs@myLog+1,c
 15651  00214A  0E03               	movlw	3
 15652  00214C  6E12               	movwf	dispLogs@myLog,c
 15653  00214E  EC05  F022         	call	_dispLogs	;wreg free
 15654                           
 15655                           ;UI.c: 327: }
 15656  002152  D07C               	goto	i2l254
 15657  002154                     i2l7584:
 15658                           
 15659                           ;UI.c: 328: else if(back){
 15660  002154  505B               	movf	_back,w,c
 15661  002156  105C               	iorwf	_back+1,w,c
 15662  002158  B4D8               	btfsc	status,2,c
 15663  00215A  D078               	goto	i2l254
 15664                           
 15665                           ;UI.c: 329: change_state_to_menu_23();
 15666  00215C  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15667                           
 15668                           ;UI.c: 330: }
 15669                           ;UI.c: 331: break;
 15670  002160  D075               	goto	i2l254
 15671  002162                     i2l7588:
 15672                           
 15673                           ;UI.c: 334: if(up){
 15674  002162  5077               	movf	_up,w,c
 15675  002164  1078               	iorwf	_up+1,w,c
 15676  002166  B4D8               	btfsc	status,2,c
 15677  002168  D003               	goto	i2l7592
 15678                           
 15679                           ;UI.c: 335: change_state_to_logs_22();
 15680  00216A  ECEE  F020         	call	_change_state_to_logs_22	;wreg free
 15681                           
 15682                           ;UI.c: 336: }
 15683  00216E  D06E               	goto	i2l254
 15684  002170                     i2l7592:
 15685                           
 15686                           ;UI.c: 337: else if(down){
 15687  002170  5067               	movf	_down,w,c
 15688  002172  1068               	iorwf	_down+1,w,c
 15689  002174  B4D8               	btfsc	status,2,c
 15690  002176  D003               	goto	i2l7596
 15691                           
 15692                           ;UI.c: 338: change_state_to_logs_34();
 15693  002178  ECBE  F020         	call	_change_state_to_logs_34	;wreg free
 15694                           
 15695                           ;UI.c: 339: }
 15696  00217C  D067               	goto	i2l254
 15697  00217E                     i2l7596:
 15698                           
 15699                           ;UI.c: 340: else if(enter){
 15700  00217E  5069               	movf	_enter,w,c
 15701  002180  106A               	iorwf	_enter+1,w,c
 15702  002182  B4D8               	btfsc	status,2,c
 15703  002184  D007               	goto	i2l7600
 15704                           
 15705                           ;UI.c: 341: dispLogs(3);
 15706  002186  0E00               	movlw	0
 15707  002188  6E13               	movwf	dispLogs@myLog+1,c
 15708  00218A  0E03               	movlw	3
 15709  00218C  6E12               	movwf	dispLogs@myLog,c
 15710  00218E  EC05  F022         	call	_dispLogs	;wreg free
 15711                           
 15712                           ;UI.c: 342: }
 15713  002192  D05C               	goto	i2l254
 15714  002194                     i2l7600:
 15715                           
 15716                           ;UI.c: 343: else if(back){
 15717  002194  505B               	movf	_back,w,c
 15718  002196  105C               	iorwf	_back+1,w,c
 15719  002198  B4D8               	btfsc	status,2,c
 15720  00219A  D058               	goto	i2l254
 15721                           
 15722                           ;UI.c: 344: change_state_to_menu_23();
 15723  00219C  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15724                           
 15725                           ;UI.c: 345: }
 15726                           ;UI.c: 346: break;
 15727  0021A0  D055               	goto	i2l254
 15728  0021A2                     i2l7604:
 15729                           
 15730                           ;UI.c: 349: if(up){
 15731  0021A2  5077               	movf	_up,w,c
 15732  0021A4  1078               	iorwf	_up+1,w,c
 15733  0021A6  B4D8               	btfsc	status,2,c
 15734  0021A8  D003               	goto	i2l7608
 15735                           
 15736                           ;UI.c: 350: change_state_to_logs_33();
 15737  0021AA  ECD6  F020         	call	_change_state_to_logs_33	;wreg free
 15738                           
 15739                           ;UI.c: 351: }
 15740  0021AE  D04E               	goto	i2l254
 15741  0021B0                     i2l7608:
 15742                           
 15743                           ;UI.c: 352: else if(down){
 15744  0021B0  5067               	movf	_down,w,c
 15745  0021B2  1068               	iorwf	_down+1,w,c
 15746  0021B4  B4D8               	btfsc	status,2,c
 15747  0021B6  D003               	goto	i2l7612
 15748                           
 15749                           ;UI.c: 353: change_state_to_logs_11();
 15750  0021B8  EC1E  F021         	call	_change_state_to_logs_11	;wreg free
 15751                           
 15752                           ;UI.c: 354: }
 15753  0021BC  D047               	goto	i2l254
 15754  0021BE                     i2l7612:
 15755                           
 15756                           ;UI.c: 355: else if(enter){
 15757  0021BE  5069               	movf	_enter,w,c
 15758  0021C0  106A               	iorwf	_enter+1,w,c
 15759  0021C2  B4D8               	btfsc	status,2,c
 15760  0021C4  D007               	goto	i2l7616
 15761                           
 15762                           ;UI.c: 356: dispLogs(4);
 15763  0021C6  0E00               	movlw	0
 15764  0021C8  6E13               	movwf	dispLogs@myLog+1,c
 15765  0021CA  0E04               	movlw	4
 15766  0021CC  6E12               	movwf	dispLogs@myLog,c
 15767  0021CE  EC05  F022         	call	_dispLogs	;wreg free
 15768                           
 15769                           ;UI.c: 357: }
 15770  0021D2  D03C               	goto	i2l254
 15771  0021D4                     i2l7616:
 15772                           
 15773                           ;UI.c: 358: else if(back){
 15774  0021D4  505B               	movf	_back,w,c
 15775  0021D6  105C               	iorwf	_back+1,w,c
 15776  0021D8  B4D8               	btfsc	status,2,c
 15777  0021DA  D038               	goto	i2l254
 15778                           
 15779                           ;UI.c: 359: change_state_to_menu_23();
 15780  0021DC  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 15781                           
 15782                           ;UI.c: 365: }
 15783                           
 15784                           ;UI.c: 364: break;
 15785                           
 15786                           ;UI.c: 363: default:
 15787                           
 15788                           ;UI.c: 360: }
 15789                           ;UI.c: 361: break;
 15790  0021E0  D035               	goto	i2l254
 15791  0021E2                     i2l7622:
 15792  0021E2  C0DE  F043         	movff	_cur_state,??_updateMenu
 15793  0021E6  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15794                           
 15795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15796                           ; Switch size 1, requested type "space"
 15797                           ; Number of cases is 3, Range of values is 0 to 4
 15798                           ; switch strategies available:
 15799                           ; Name         Instructions Cycles
 15800                           ; simple_byte           10     6 (average)
 15801                           ;	Chosen strategy is simple_byte
 15802  0021EA  5044               	movf	??_updateMenu+1,w,c
 15803  0021EC  0A00               	xorlw	0	; case 0
 15804  0021EE  B4D8               	btfsc	status,2,c
 15805  0021F0  D007               	goto	i2l8204
 15806  0021F2  0A03               	xorlw	3	; case 3
 15807  0021F4  B4D8               	btfsc	status,2,c
 15808  0021F6  D015               	goto	i2l8206
 15809  0021F8  0A07               	xorlw	7	; case 4
 15810  0021FA  B4D8               	btfsc	status,2,c
 15811  0021FC  D020               	goto	i2l8208
 15812  0021FE  D026               	goto	i2l254
 15813  002200                     i2l8204:
 15814                           
 15815                           ; Switch size 1, requested type "space"
 15816                           ; Number of cases is 5, Range of values is 0 to 23
 15817                           ; switch strategies available:
 15818                           ; Name         Instructions Cycles
 15819                           ; simple_byte           16     9 (average)
 15820                           ;	Chosen strategy is simple_byte
 15821  002200  5043               	movf	??_updateMenu,w,c
 15822  002202  0A00               	xorlw	0	; case 0
 15823  002204  B4D8               	btfsc	status,2,c
 15824  002206  D6DC               	goto	i2l7474
 15825  002208  0A0B               	xorlw	11	; case 11
 15826  00220A  B4D8               	btfsc	status,2,c
 15827  00220C  D6DC               	goto	i2l7476
 15828  00220E  0A07               	xorlw	7	; case 12
 15829  002210  B4D8               	btfsc	status,2,c
 15830  002212  D6EE               	goto	i2l7488
 15831  002214  0A1A               	xorlw	26	; case 22
 15832  002216  B4D8               	btfsc	status,2,c
 15833  002218  D6F9               	goto	i2l7500
 15834  00221A  0A01               	xorlw	1	; case 23
 15835  00221C  B4D8               	btfsc	status,2,c
 15836  00221E  D70C               	goto	i2l7512
 15837  002220  D015               	goto	i2l254
 15838  002222                     i2l8206:
 15839                           
 15840                           ; Switch size 1, requested type "space"
 15841                           ; Number of cases is 4, Range of values is 243 to 255
 15842                           ; switch strategies available:
 15843                           ; Name         Instructions Cycles
 15844                           ; simple_byte           13     7 (average)
 15845                           ;	Chosen strategy is simple_byte
 15846  002222  5043               	movf	??_updateMenu,w,c
 15847  002224  0AF3               	xorlw	243	; case 243
 15848  002226  B4D8               	btfsc	status,2,c
 15849  002228  D71C               	goto	i2l7524
 15850  00222A  0A07               	xorlw	7	; case 244
 15851  00222C  B4D8               	btfsc	status,2,c
 15852  00222E  D739               	goto	i2l7540
 15853  002230  0A0A               	xorlw	10	; case 254
 15854  002232  B4D8               	btfsc	status,2,c
 15855  002234  D756               	goto	i2l7556
 15856  002236  0A01               	xorlw	1	; case 255
 15857  002238  B4D8               	btfsc	status,2,c
 15858  00223A  D773               	goto	i2l7572
 15859  00223C  D007               	goto	i2l254
 15860  00223E                     i2l8208:
 15861                           
 15862                           ; Switch size 1, requested type "space"
 15863                           ; Number of cases is 2, Range of values is 9 to 10
 15864                           ; switch strategies available:
 15865                           ; Name         Instructions Cycles
 15866                           ; simple_byte            7     4 (average)
 15867                           ;	Chosen strategy is simple_byte
 15868  00223E  5043               	movf	??_updateMenu,w,c
 15869  002240  0A09               	xorlw	9	; case 9
 15870  002242  B4D8               	btfsc	status,2,c
 15871  002244  D78E               	goto	i2l7588
 15872  002246  0A03               	xorlw	3	; case 10
 15873  002248  B4D8               	btfsc	status,2,c
 15874  00224A  D7AB               	goto	i2l7604
 15875  00224C                     i2l254:
 15876                           
 15877                           ;UI.c: 366: }
 15878                           ;UI.c: 367: (INTCONbits.GIE = 1);
 15879  00224C  8EF2               	bsf	intcon,7,c	;volatile
 15880  00224E  0012               	return		;funcret
 15881  002250                     __end_of_updateMenu:
 15882                           	opt stack 0
 15883                           pclatu	equ	0xFFB
 15884                           pclath	equ	0xFFA
 15885                           tblptru	equ	0xFF8
 15886                           tblptrh	equ	0xFF7
 15887                           tblptrl	equ	0xFF6
 15888                           tablat	equ	0xFF5
 15889                           prodh	equ	0xFF4
 15890                           prodl	equ	0xFF3
 15891                           intcon	equ	0xFF2
 15892                           intcon2	equ	0xFF1
 15893                           intcon3	equ	0xFF0
 15894                           indf0	equ	0xFEF
 15895                           postinc0	equ	0xFEE
 15896                           fsr0h	equ	0xFEA
 15897                           fsr0l	equ	0xFE9
 15898                           wreg	equ	0xFE8
 15899                           postdec1	equ	0xFE5
 15900                           fsr1h	equ	0xFE2
 15901                           fsr1l	equ	0xFE1
 15902                           indf2	equ	0xFDF
 15903                           postinc2	equ	0xFDE
 15904                           postdec2	equ	0xFDD
 15905                           fsr2h	equ	0xFDA
 15906                           fsr2l	equ	0xFD9
 15907                           status	equ	0xFD8
 15908                           
 15909 ;; *************** function i2_change_state_to_menu_start *****************
 15910 ;; Defined at:
 15911 ;;		line 472 in file "UI.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;		None
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;		None
 15916 ;; Return value:  Size  Location     Type
 15917 ;;                  1    wreg      void 
 15918 ;; Registers used:
 15919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15929 ;;Total ram usage:        0 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; Hardware stack levels required when called:    4
 15932 ;; This function calls:
 15933 ;;		i2_lcdInst
 15934 ;;		i2_printRTC
 15935 ;;		i2_printf
 15936 ;; This function is called by:
 15937 ;;		_updateMenu
 15938 ;; This function uses a non-reentrant model
 15939 ;;
 15940                           
 15941                           	psect	text58
 15942  004372                     __ptext58:
 15943                           	opt stack 0
 15944  004372                     i2_change_state_to_menu_start:
 15945                           	opt stack 18
 15946                           
 15947                           ;UI.c: 473: cur_state = 0;
 15948                           
 15949                           ;incstack = 0
 15950  004372  0E00               	movlw	0
 15951  004374  0100               	movlb	0	; () banked
 15952  004376  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15953  004378  0E00               	movlw	0
 15954  00437A  6FDE               	movwf	_cur_state& (0+255),b
 15955                           
 15956                           ; BSR set to: 0
 15957                           ;UI.c: 475: lcdInst(0b10000000);;
 15958  00437C  0E80               	movlw	128
 15959  00437E  EC93  F022         	call	i2_lcdInst
 15960                           
 15961                           ;UI.c: 476: printRTC();
 15962  004382  EC28  F011         	call	i2_printRTC	;wreg free
 15963                           
 15964                           ;UI.c: 477: lcdInst(0b11000000);;
 15965  004386  0EC0               	movlw	192
 15966  004388  EC93  F022         	call	i2_lcdInst
 15967                           
 15968                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15969  00438C  0E20               	movlw	low STR_30
 15970  00438E  6E0D               	movwf	i2printf@f,c
 15971  004390  0EFE               	movlw	high STR_30
 15972  004392  6E0E               	movwf	i2printf@f+1,c
 15973  004394  ECAC  F00C         	call	i2_printf	;wreg free
 15974  004398  0012               	return		;funcret
 15975  00439A                     __end_ofi2_change_state_to_menu_start:
 15976                           	opt stack 0
 15977                           pclatu	equ	0xFFB
 15978                           pclath	equ	0xFFA
 15979                           tblptru	equ	0xFF8
 15980                           tblptrh	equ	0xFF7
 15981                           tblptrl	equ	0xFF6
 15982                           tablat	equ	0xFF5
 15983                           prodh	equ	0xFF4
 15984                           prodl	equ	0xFF3
 15985                           intcon	equ	0xFF2
 15986                           intcon2	equ	0xFF1
 15987                           intcon3	equ	0xFF0
 15988                           indf0	equ	0xFEF
 15989                           postinc0	equ	0xFEE
 15990                           fsr0h	equ	0xFEA
 15991                           fsr0l	equ	0xFE9
 15992                           wreg	equ	0xFE8
 15993                           postdec1	equ	0xFE5
 15994                           fsr1h	equ	0xFE2
 15995                           fsr1l	equ	0xFE1
 15996                           indf2	equ	0xFDF
 15997                           postinc2	equ	0xFDE
 15998                           postdec2	equ	0xFDD
 15999                           fsr2h	equ	0xFDA
 16000                           fsr2l	equ	0xFD9
 16001                           status	equ	0xFD8
 16002                           
 16003 ;; *************** function i2_printRTC *****************
 16004 ;; Defined at:
 16005 ;;		line 63 in file "RTC.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;		None
 16008 ;; Auto vars:     Size  Location     Type
 16009 ;;  printRTC       14   44[COMRAM] int [7]
 16010 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16011 ;;  printRTC        2   64[COMRAM] int 
 16012 ;;  printRTC        2   58[COMRAM] int 
 16013 ;; Return value:  Size  Location     Type
 16014 ;;                  1    wreg      void 
 16015 ;; Registers used:
 16016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16023 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16024 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16025 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16026 ;;Total ram usage:       25 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; Hardware stack levels required when called:    3
 16029 ;; This function calls:
 16030 ;;		i2_getRTC
 16031 ;;		i2_lcdInst
 16032 ;;		i2_printf
 16033 ;;		i2_strcpy
 16034 ;; This function is called by:
 16035 ;;		i2_change_state_to_menu_start
 16036 ;; This function uses a non-reentrant model
 16037 ;;
 16038                           
 16039                           	psect	text59
 16040  002250                     __ptext59:
 16041                           	opt stack 0
 16042  002250                     i2_printRTC:
 16043                           	opt stack 18
 16044                           
 16045                           ;RTC.c: 64: getRTC();
 16046                           
 16047                           ;incstack = 0
 16048  002250  EC1A  F01D         	call	i2_getRTC	;wreg free
 16049                           
 16050                           ;RTC.c: 65: char month[] = "MMM";
 16051  002254  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 16052  002258  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 16053  00225C  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 16054  002260  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 16055                           
 16056                           ;RTC.c: 66: int INT_time[7];
 16057                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16058  002264  0E00               	movlw	0
 16059  002266  6E42               	movwf	i2printRTC@i+1,c
 16060  002268  0E00               	movlw	0
 16061  00226A  6E41               	movwf	i2printRTC@i,c
 16062  00226C  BE42               	btfsc	i2printRTC@i+1,7,c
 16063  00226E  D006               	goto	i2l5976
 16064  002270  5042               	movf	i2printRTC@i+1,w,c
 16065  002272  E135               	bnz	i2l593
 16066  002274  0E07               	movlw	7
 16067  002276  5C41               	subwf	i2printRTC@i,w,c
 16068  002278  B0D8               	btfsc	status,0,c
 16069  00227A  D031               	goto	i2l593
 16070  00227C                     i2l5976:
 16071                           
 16072                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16073  00227C  0E24               	movlw	low _time
 16074  00227E  2441               	addwf	i2printRTC@i,w,c
 16075  002280  6ED9               	movwf	fsr2l,c
 16076  002282  0E01               	movlw	high _time
 16077  002284  2042               	addwfc	i2printRTC@i+1,w,c
 16078  002286  6EDA               	movwf	fsr2h,c
 16079  002288  50DF               	movf	indf2,w,c
 16080  00228A  6E2A               	movwf	??i2_printRTC& (0+255),c
 16081  00228C  3A2A               	swapf	??i2_printRTC,f,c
 16082  00228E  0E0F               	movlw	15
 16083  002290  162A               	andwf	??i2_printRTC,f,c
 16084  002292  0E0F               	movlw	15
 16085  002294  162A               	andwf	??i2_printRTC,f,c
 16086  002296  502A               	movf	??i2_printRTC,w,c
 16087  002298  0D0A               	mullw	10
 16088  00229A  0E24               	movlw	low _time
 16089  00229C  2441               	addwf	i2printRTC@i,w,c
 16090  00229E  6ED9               	movwf	fsr2l,c
 16091  0022A0  0E01               	movlw	high _time
 16092  0022A2  2042               	addwfc	i2printRTC@i+1,w,c
 16093  0022A4  6EDA               	movwf	fsr2h,c
 16094  0022A6  50DF               	movf	indf2,w,c
 16095  0022A8  0B0F               	andlw	15
 16096  0022AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16097  0022AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16098  0022AE  50F3               	movf	prodl,w,c
 16099  0022B0  262B               	addwf	??i2_printRTC+1,f,c
 16100  0022B2  50F4               	movf	prodh,w,c
 16101  0022B4  222C               	addwfc	??i2_printRTC+2,f,c
 16102  0022B6  90D8               	bcf	status,0,c
 16103  0022B8  3441               	rlcf	i2printRTC@i,w,c
 16104  0022BA  6ED9               	movwf	fsr2l,c
 16105  0022BC  3442               	rlcf	i2printRTC@i+1,w,c
 16106  0022BE  6EDA               	movwf	fsr2h,c
 16107  0022C0  0E2D               	movlw	low i2printRTC@INT_time
 16108  0022C2  26D9               	addwf	fsr2l,f,c
 16109  0022C4  0E00               	movlw	high i2printRTC@INT_time
 16110  0022C6  22DA               	addwfc	fsr2h,f,c
 16111  0022C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16112  0022CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16113  0022D0  4A41               	infsnz	i2printRTC@i,f,c
 16114  0022D2  2A42               	incf	i2printRTC@i+1,f,c
 16115  0022D4  BE42               	btfsc	i2printRTC@i+1,7,c
 16116  0022D6  D7D2               	goto	i2l5976
 16117  0022D8  5042               	movf	i2printRTC@i+1,w,c
 16118  0022DA  E101               	bnz	i2u455_40
 16119  0022DC  D7CB               	goto	L10
 16120  0022DE                     i2u455_40:
 16121  0022DE                     i2l593:
 16122                           
 16123                           ;RTC.c: 69: }
 16124                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16125  0022DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16126  0022E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16127                           
 16128                           ;RTC.c: 71: switch(RTC_month){
 16129  0022E6  D084               	goto	i2l6008
 16130  0022E8                     i2l5982:
 16131                           
 16132                           ;RTC.c: 73: strcpy(month, "JAN");
 16133  0022E8  0E3D               	movlw	low i2printRTC@month
 16134  0022EA  6E01               	movwf	i2strcpy@to,c
 16135  0022EC  0E00               	movlw	high i2printRTC@month
 16136  0022EE  6E02               	movwf	i2strcpy@to+1,c
 16137  0022F0  0EDB               	movlw	low STR_8
 16138  0022F2  6E03               	movwf	i2strcpy@from,c
 16139  0022F4  0EFF               	movlw	high STR_8
 16140  0022F6  6E04               	movwf	i2strcpy@from+1,c
 16141  0022F8  EC45  F020         	call	i2_strcpy	;wreg free
 16142                           
 16143                           ;RTC.c: 74: break;
 16144  0022FC  D0A6               	goto	i2l6010
 16145  0022FE                     i2l5984:
 16146                           
 16147                           ;RTC.c: 76: strcpy(month, "FEB");
 16148  0022FE  0E3D               	movlw	low i2printRTC@month
 16149  002300  6E01               	movwf	i2strcpy@to,c
 16150  002302  0E00               	movlw	high i2printRTC@month
 16151  002304  6E02               	movwf	i2strcpy@to+1,c
 16152  002306  0ECB               	movlw	low STR_9
 16153  002308  6E03               	movwf	i2strcpy@from,c
 16154  00230A  0EFF               	movlw	high STR_9
 16155  00230C  6E04               	movwf	i2strcpy@from+1,c
 16156  00230E  EC45  F020         	call	i2_strcpy	;wreg free
 16157                           
 16158                           ;RTC.c: 77: break;
 16159  002312  D09B               	goto	i2l6010
 16160  002314                     i2l5986:
 16161                           
 16162                           ;RTC.c: 79: strcpy(month, "MAR");
 16163  002314  0E3D               	movlw	low i2printRTC@month
 16164  002316  6E01               	movwf	i2strcpy@to,c
 16165  002318  0E00               	movlw	high i2printRTC@month
 16166  00231A  6E02               	movwf	i2strcpy@to+1,c
 16167  00231C  0EE7               	movlw	low STR_10
 16168  00231E  6E03               	movwf	i2strcpy@from,c
 16169  002320  0EFF               	movlw	high STR_10
 16170  002322  6E04               	movwf	i2strcpy@from+1,c
 16171  002324  EC45  F020         	call	i2_strcpy	;wreg free
 16172                           
 16173                           ;RTC.c: 80: break;
 16174  002328  D090               	goto	i2l6010
 16175  00232A                     i2l5988:
 16176                           
 16177                           ;RTC.c: 82: strcpy(month, "APR");
 16178  00232A  0E3D               	movlw	low i2printRTC@month
 16179  00232C  6E01               	movwf	i2strcpy@to,c
 16180  00232E  0E00               	movlw	high i2printRTC@month
 16181  002330  6E02               	movwf	i2strcpy@to+1,c
 16182  002332  0EEB               	movlw	low STR_11
 16183  002334  6E03               	movwf	i2strcpy@from,c
 16184  002336  0EFF               	movlw	high STR_11
 16185  002338  6E04               	movwf	i2strcpy@from+1,c
 16186  00233A  EC45  F020         	call	i2_strcpy	;wreg free
 16187                           
 16188                           ;RTC.c: 83: break;
 16189  00233E  D085               	goto	i2l6010
 16190  002340                     i2l5990:
 16191                           
 16192                           ;RTC.c: 85: strcpy(month, "MAY");
 16193  002340  0E3D               	movlw	low i2printRTC@month
 16194  002342  6E01               	movwf	i2strcpy@to,c
 16195  002344  0E00               	movlw	high i2printRTC@month
 16196  002346  6E02               	movwf	i2strcpy@to+1,c
 16197  002348  0EFB               	movlw	low STR_12
 16198  00234A  6E03               	movwf	i2strcpy@from,c
 16199  00234C  0EFF               	movlw	high STR_12
 16200  00234E  6E04               	movwf	i2strcpy@from+1,c
 16201  002350  EC45  F020         	call	i2_strcpy	;wreg free
 16202                           
 16203                           ;RTC.c: 86: break;
 16204  002354  D07A               	goto	i2l6010
 16205  002356                     i2l5992:
 16206                           
 16207                           ;RTC.c: 88: strcpy(month, "JUN");
 16208  002356  0E3D               	movlw	low i2printRTC@month
 16209  002358  6E01               	movwf	i2strcpy@to,c
 16210  00235A  0E00               	movlw	high i2printRTC@month
 16211  00235C  6E02               	movwf	i2strcpy@to+1,c
 16212  00235E  0EDF               	movlw	low STR_13
 16213  002360  6E03               	movwf	i2strcpy@from,c
 16214  002362  0EFF               	movlw	high STR_13
 16215  002364  6E04               	movwf	i2strcpy@from+1,c
 16216  002366  EC45  F020         	call	i2_strcpy	;wreg free
 16217                           
 16218                           ;RTC.c: 89: break;
 16219  00236A  D06F               	goto	i2l6010
 16220  00236C                     i2l5994:
 16221                           
 16222                           ;RTC.c: 91: strcpy(month, "JUL");
 16223  00236C  0E3D               	movlw	low i2printRTC@month
 16224  00236E  6E01               	movwf	i2strcpy@to,c
 16225  002370  0E00               	movlw	high i2printRTC@month
 16226  002372  6E02               	movwf	i2strcpy@to+1,c
 16227  002374  0ED7               	movlw	low STR_14
 16228  002376  6E03               	movwf	i2strcpy@from,c
 16229  002378  0EFF               	movlw	high STR_14
 16230  00237A  6E04               	movwf	i2strcpy@from+1,c
 16231  00237C  EC45  F020         	call	i2_strcpy	;wreg free
 16232                           
 16233                           ;RTC.c: 92: break;
 16234  002380  D064               	goto	i2l6010
 16235  002382                     i2l5996:
 16236                           
 16237                           ;RTC.c: 94: strcpy(month, "AUG");
 16238  002382  0E3D               	movlw	low i2printRTC@month
 16239  002384  6E01               	movwf	i2strcpy@to,c
 16240  002386  0E00               	movlw	high i2printRTC@month
 16241  002388  6E02               	movwf	i2strcpy@to+1,c
 16242  00238A  0ED3               	movlw	low STR_15
 16243  00238C  6E03               	movwf	i2strcpy@from,c
 16244  00238E  0EFF               	movlw	high STR_15
 16245  002390  6E04               	movwf	i2strcpy@from+1,c
 16246  002392  EC45  F020         	call	i2_strcpy	;wreg free
 16247                           
 16248                           ;RTC.c: 95: break;
 16249  002396  D059               	goto	i2l6010
 16250  002398                     i2l5998:
 16251                           
 16252                           ;RTC.c: 97: strcpy(month, "SEP");
 16253  002398  0E3D               	movlw	low i2printRTC@month
 16254  00239A  6E01               	movwf	i2strcpy@to,c
 16255  00239C  0E00               	movlw	high i2printRTC@month
 16256  00239E  6E02               	movwf	i2strcpy@to+1,c
 16257  0023A0  0EE3               	movlw	low STR_16
 16258  0023A2  6E03               	movwf	i2strcpy@from,c
 16259  0023A4  0EFF               	movlw	high STR_16
 16260  0023A6  6E04               	movwf	i2strcpy@from+1,c
 16261  0023A8  EC45  F020         	call	i2_strcpy	;wreg free
 16262                           
 16263                           ;RTC.c: 98: break;
 16264  0023AC  D04E               	goto	i2l6010
 16265  0023AE                     i2l6000:
 16266                           
 16267                           ;RTC.c: 100: strcpy(month, "OCT");
 16268  0023AE  0E3D               	movlw	low i2printRTC@month
 16269  0023B0  6E01               	movwf	i2strcpy@to,c
 16270  0023B2  0E00               	movlw	high i2printRTC@month
 16271  0023B4  6E02               	movwf	i2strcpy@to+1,c
 16272  0023B6  0EF3               	movlw	low STR_17
 16273  0023B8  6E03               	movwf	i2strcpy@from,c
 16274  0023BA  0EFF               	movlw	high STR_17
 16275  0023BC  6E04               	movwf	i2strcpy@from+1,c
 16276  0023BE  EC45  F020         	call	i2_strcpy	;wreg free
 16277                           
 16278                           ;RTC.c: 101: break;
 16279  0023C2  D043               	goto	i2l6010
 16280  0023C4                     i2l6002:
 16281                           
 16282                           ;RTC.c: 103: strcpy(month, "NOV");
 16283  0023C4  0E3D               	movlw	low i2printRTC@month
 16284  0023C6  6E01               	movwf	i2strcpy@to,c
 16285  0023C8  0E00               	movlw	high i2printRTC@month
 16286  0023CA  6E02               	movwf	i2strcpy@to+1,c
 16287  0023CC  0EF7               	movlw	low STR_18
 16288  0023CE  6E03               	movwf	i2strcpy@from,c
 16289  0023D0  0EFF               	movlw	high STR_18
 16290  0023D2  6E04               	movwf	i2strcpy@from+1,c
 16291  0023D4  EC45  F020         	call	i2_strcpy	;wreg free
 16292                           
 16293                           ;RTC.c: 104: break;
 16294  0023D8  D038               	goto	i2l6010
 16295  0023DA                     i2l6004:
 16296                           
 16297                           ;RTC.c: 106: strcpy(month, "DEC");
 16298  0023DA  0E3D               	movlw	low i2printRTC@month
 16299  0023DC  6E01               	movwf	i2strcpy@to,c
 16300  0023DE  0E00               	movlw	high i2printRTC@month
 16301  0023E0  6E02               	movwf	i2strcpy@to+1,c
 16302  0023E2  0ECF               	movlw	low STR_19
 16303  0023E4  6E03               	movwf	i2strcpy@from,c
 16304  0023E6  0EFF               	movlw	high STR_19
 16305  0023E8  6E04               	movwf	i2strcpy@from+1,c
 16306  0023EA  EC45  F020         	call	i2_strcpy	;wreg free
 16307                           
 16308                           ;RTC.c: 108: }
 16309                           
 16310                           ;RTC.c: 107: break;
 16311  0023EE  D02D               	goto	i2l6010
 16312  0023F0                     i2l6008:
 16313  0023F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16314  0023F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16315                           
 16316                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16317                           ; Switch size 1, requested type "space"
 16318                           ; Number of cases is 1, Range of values is 0 to 0
 16319                           ; switch strategies available:
 16320                           ; Name         Instructions Cycles
 16321                           ; simple_byte            4     3 (average)
 16322                           ;	Chosen strategy is simple_byte
 16323  0023F8  502B               	movf	??i2_printRTC+1,w,c
 16324  0023FA  0A00               	xorlw	0	; case 0
 16325  0023FC  A4D8               	btfss	status,2,c
 16326  0023FE  D025               	goto	i2l6010
 16327                           
 16328                           ; Switch size 1, requested type "space"
 16329                           ; Number of cases is 12, Range of values is 1 to 12
 16330                           ; switch strategies available:
 16331                           ; Name         Instructions Cycles
 16332                           ; simple_byte           37    19 (average)
 16333                           ;	Chosen strategy is simple_byte
 16334  002400  502A               	movf	??i2_printRTC,w,c
 16335  002402  0A01               	xorlw	1	; case 1
 16336  002404  B4D8               	btfsc	status,2,c
 16337  002406  D770               	goto	i2l5982
 16338  002408  0A03               	xorlw	3	; case 2
 16339  00240A  B4D8               	btfsc	status,2,c
 16340  00240C  D778               	goto	i2l5984
 16341  00240E  0A01               	xorlw	1	; case 3
 16342  002410  B4D8               	btfsc	status,2,c
 16343  002412  D780               	goto	i2l5986
 16344  002414  0A07               	xorlw	7	; case 4
 16345  002416  B4D8               	btfsc	status,2,c
 16346  002418  D788               	goto	i2l5988
 16347  00241A  0A01               	xorlw	1	; case 5
 16348  00241C  B4D8               	btfsc	status,2,c
 16349  00241E  D790               	goto	i2l5990
 16350  002420  0A03               	xorlw	3	; case 6
 16351  002422  B4D8               	btfsc	status,2,c
 16352  002424  D798               	goto	i2l5992
 16353  002426  0A01               	xorlw	1	; case 7
 16354  002428  B4D8               	btfsc	status,2,c
 16355  00242A  D7A0               	goto	i2l5994
 16356  00242C  0A0F               	xorlw	15	; case 8
 16357  00242E  B4D8               	btfsc	status,2,c
 16358  002430  D7A8               	goto	i2l5996
 16359  002432  0A01               	xorlw	1	; case 9
 16360  002434  B4D8               	btfsc	status,2,c
 16361  002436  D7B0               	goto	i2l5998
 16362  002438  0A03               	xorlw	3	; case 10
 16363  00243A  B4D8               	btfsc	status,2,c
 16364  00243C  D7B8               	goto	i2l6000
 16365  00243E  0A01               	xorlw	1	; case 11
 16366  002440  B4D8               	btfsc	status,2,c
 16367  002442  D7C0               	goto	i2l6002
 16368  002444  0A07               	xorlw	7	; case 12
 16369  002446  B4D8               	btfsc	status,2,c
 16370  002448  D7C8               	goto	i2l6004
 16371  00244A                     i2l6010:
 16372                           
 16373                           ;RTC.c: 109: lcdInst(0b10000000);;
 16374  00244A  0E80               	movlw	128
 16375  00244C  EC93  F022         	call	i2_lcdInst
 16376                           
 16377                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16378  002450  0E54               	movlw	low STR_21
 16379  002452  6E0D               	movwf	i2printf@f,c
 16380  002454  0EFB               	movlw	high STR_21
 16381  002456  6E0E               	movwf	i2printf@f+1,c
 16382  002458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16383  00245C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16384  002460  0E3D               	movlw	low i2printRTC@month
 16385  002462  6E11               	movwf	?i2_printf+4,c
 16386  002464  0E00               	movlw	high i2printRTC@month
 16387  002466  6E12               	movwf	?i2_printf+5,c
 16388  002468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16389  00246C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16390  002470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16391  002474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16392  002478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16393  00247C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16394  002480  ECAC  F00C         	call	i2_printf	;wreg free
 16395  002484  0012               	return		;funcret
 16396  002486                     __end_ofi2_printRTC:
 16397                           	opt stack 0
 16398                           pclatu	equ	0xFFB
 16399                           pclath	equ	0xFFA
 16400                           tblptru	equ	0xFF8
 16401                           tblptrh	equ	0xFF7
 16402                           tblptrl	equ	0xFF6
 16403                           tablat	equ	0xFF5
 16404                           prodh	equ	0xFF4
 16405                           prodl	equ	0xFF3
 16406                           intcon	equ	0xFF2
 16407                           intcon2	equ	0xFF1
 16408                           intcon3	equ	0xFF0
 16409                           indf0	equ	0xFEF
 16410                           postinc0	equ	0xFEE
 16411                           fsr0h	equ	0xFEA
 16412                           fsr0l	equ	0xFE9
 16413                           wreg	equ	0xFE8
 16414                           postdec1	equ	0xFE5
 16415                           fsr1h	equ	0xFE2
 16416                           fsr1l	equ	0xFE1
 16417                           indf2	equ	0xFDF
 16418                           postinc2	equ	0xFDE
 16419                           postdec2	equ	0xFDD
 16420                           fsr2h	equ	0xFDA
 16421                           fsr2l	equ	0xFD9
 16422                           status	equ	0xFD8
 16423                           
 16424 ;; *************** function i2_strcpy *****************
 16425 ;; Defined at:
 16426 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16427 ;; Parameters:    Size  Location     Type
 16428 ;;  to              2    0[COMRAM] PTR unsigned char 
 16429 ;;		 -> printRTC@month(4), UI@month(4), 
 16430 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16431 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16432 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16433 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16434 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16435 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16436 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16437 ;;		 -> STR_8(4), 
 16438 ;; Auto vars:     Size  Location     Type
 16439 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16440 ;;		 -> printRTC@month(4), UI@month(4), 
 16441 ;; Return value:  Size  Location     Type
 16442 ;;                  2    0[COMRAM] PTR unsigned char 
 16443 ;; Registers used:
 16444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16445 ;; Tracked objects:
 16446 ;;		On entry : 0/0
 16447 ;;		On exit  : 0/0
 16448 ;;		Unchanged: 0/0
 16449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16453 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16454 ;;Total ram usage:        6 bytes
 16455 ;; Hardware stack levels used:    1
 16456 ;; This function calls:
 16457 ;;		Nothing
 16458 ;; This function is called by:
 16459 ;;		i2_printRTC
 16460 ;; This function uses a non-reentrant model
 16461 ;;
 16462                           
 16463                           	psect	text60
 16464  00408A                     __ptext60:
 16465                           	opt stack 0
 16466  00408A                     i2_strcpy:
 16467                           	opt stack 20
 16468                           
 16469                           ;incstack = 0
 16470  00408A  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16471  00408E  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16472  004092  D004               	goto	i2l5650
 16473  004094                     i2l5648:
 16474  004094  4A05               	infsnz	i2strcpy@cp,f,c
 16475  004096  2A06               	incf	i2strcpy@cp+1,f,c
 16476  004098  4A03               	infsnz	i2strcpy@from,f,c
 16477  00409A  2A04               	incf	i2strcpy@from+1,f,c
 16478  00409C                     i2l5650:
 16479  00409C  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16480  0040A0  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16481  0040A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16482  0040A4  6AF8               	clrf	tblptru,c
 16483  0040A6                     	endif
 16484  0040A6                     	if	0	;tblptru may be non-zero
 16485  0040A6                     	endif
 16486  0040A6  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16487  0040AA  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16488  0040AE  0008               	tblrd		*
 16489  0040B0  CFF5 FFDF          	movff	tablat,indf2
 16490  0040B4  50DF               	movf	indf2,w,c
 16491  0040B6  B4D8               	btfsc	status,2,c
 16492  0040B8  0012               	return	
 16493  0040BA  D7EC               	goto	i2l5648
 16494  0040BC                     __end_ofi2_strcpy:
 16495                           	opt stack 0
 16496                           pclatu	equ	0xFFB
 16497                           pclath	equ	0xFFA
 16498                           tblptru	equ	0xFF8
 16499                           tblptrh	equ	0xFF7
 16500                           tblptrl	equ	0xFF6
 16501                           tablat	equ	0xFF5
 16502                           prodh	equ	0xFF4
 16503                           prodl	equ	0xFF3
 16504                           intcon	equ	0xFF2
 16505                           intcon2	equ	0xFF1
 16506                           intcon3	equ	0xFF0
 16507                           indf0	equ	0xFEF
 16508                           postinc0	equ	0xFEE
 16509                           fsr0h	equ	0xFEA
 16510                           fsr0l	equ	0xFE9
 16511                           wreg	equ	0xFE8
 16512                           postdec1	equ	0xFE5
 16513                           fsr1h	equ	0xFE2
 16514                           fsr1l	equ	0xFE1
 16515                           indf2	equ	0xFDF
 16516                           postinc2	equ	0xFDE
 16517                           postdec2	equ	0xFDD
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           
 16522 ;; *************** function _inputHandler *****************
 16523 ;; Defined at:
 16524 ;;		line 370 in file "UI.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;		None
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;		None
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  2   41[COMRAM] int 
 16531 ;; Registers used:
 16532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        4 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; Hardware stack levels required when called:    4
 16545 ;; This function calls:
 16546 ;;		_change_state_to_logs_11
 16547 ;;		_change_state_to_logs_12
 16548 ;;		_change_state_to_logs_22
 16549 ;;		_change_state_to_logs_23
 16550 ;;		_change_state_to_logs_33
 16551 ;;		_change_state_to_logs_34
 16552 ;;		_change_state_to_menu_11
 16553 ;;		_change_state_to_menu_23
 16554 ;;		i2_change_state_to_menu_12
 16555 ;;		i2_change_state_to_menu_22
 16556 ;; This function is called by:
 16557 ;;		_updateMenu
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           	psect	text61
 16562  002678                     __ptext61:
 16563                           	opt stack 0
 16564  002678                     _inputHandler:
 16565                           	opt stack 18
 16566                           
 16567                           ;UI.c: 375: if(firstboot){
 16568                           
 16569                           ;incstack = 0
 16570  002678  5075               	movf	_firstboot,w,c
 16571  00267A  1076               	iorwf	_firstboot+1,w,c
 16572  00267C  B4D8               	btfsc	status,2,c
 16573  00267E  D00B               	goto	i2l6078
 16574                           
 16575                           ;UI.c: 376: change_state_to_menu_11();
 16576  002680  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 16577                           
 16578                           ;UI.c: 377: firstboot = 0;
 16579  002684  0E00               	movlw	0
 16580  002686  6E76               	movwf	_firstboot+1,c
 16581  002688  0E00               	movlw	0
 16582  00268A  6E75               	movwf	_firstboot,c
 16583                           
 16584                           ;UI.c: 378: return 0;
 16585  00268C  0E00               	movlw	0
 16586  00268E  6E2B               	movwf	?_inputHandler+1,c
 16587  002690  0E00               	movlw	0
 16588  002692  6E2A               	movwf	?_inputHandler,c
 16589  002694  0012               	return	
 16590  002696                     i2l6078:
 16591                           
 16592                           ;UI.c: 379: }
 16593                           ;UI.c: 380: if (logstate){
 16594  002696  0100               	movlb	0	; () banked
 16595  002698  51F6               	movf	_logstate& (0+255),w,b
 16596  00269A  0100               	movlb	0	; () banked
 16597  00269C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16598  00269E  B4D8               	btfsc	status,2,c
 16599  0026A0  D0C7               	goto	i2l6196
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16603  0026A2  0E43               	movlw	67
 16604  0026A4  187D               	xorwf	_input,w,c	;volatile
 16605  0026A6  A4D8               	btfss	status,2,c
 16606  0026A8  D012               	goto	i2l6096
 16607                           
 16608                           ; BSR set to: 0
 16609  0026AA  B281               	btfsc	3969,1,c	;volatile
 16610  0026AC  D009               	goto	i2l6088
 16611  0026AE  D00F               	goto	i2l6096
 16612  0026B0                     i2l6086:
 16613                           
 16614                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16615  0026B0  0E68               	movlw	104
 16616  0026B2  6E2C               	movwf	??_inputHandler& (0+255),c
 16617  0026B4  0EE4               	movlw	228
 16618  0026B6                     i2u791_47:
 16619  0026B6  2EE8               	decfsz	wreg,f,c
 16620  0026B8  D7FE               	bra	i2u791_47
 16621  0026BA  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16622  0026BC  D7FC               	bra	i2u791_47
 16623  0026BE  D000               	nop2	
 16624  0026C0                     i2l6088:
 16625  0026C0  B281               	btfsc	3969,1,c	;volatile
 16626  0026C2  D7F6               	goto	i2l6086
 16627  0026C4                     i2l6090:
 16628                           
 16629                           ;UI.c: 385: }
 16630                           ;UI.c: 386: return 0;
 16631  0026C4  0E00               	movlw	0
 16632  0026C6  6E2B               	movwf	?_inputHandler+1,c
 16633  0026C8  0E00               	movlw	0
 16634  0026CA  6E2A               	movwf	?_inputHandler,c
 16635  0026CC  0012               	return	
 16636  0026CE                     i2l6096:
 16637                           
 16638                           ;UI.c: 388: else if (input == 'D'){
 16639  0026CE  0E44               	movlw	68
 16640  0026D0  187D               	xorwf	_input,w,c	;volatile
 16641  0026D2  A4D8               	btfss	status,2,c
 16642  0026D4  D7F7               	goto	i2l6090
 16643                           
 16644                           ;UI.c: 390: logstate = 0;
 16645  0026D6  0E00               	movlw	0
 16646  0026D8  0100               	movlb	0	; () banked
 16647  0026DA  6FF7               	movwf	(_logstate+1)& (0+255),b
 16648  0026DC  0E00               	movlw	0
 16649  0026DE  6FF6               	movwf	_logstate& (0+255),b
 16650                           
 16651                           ;UI.c: 391: switch(cur_state){
 16652  0026E0  D012               	goto	i2l6114
 16653  0026E2                     i2l6100:
 16654                           
 16655                           ;UI.c: 393: change_state_to_logs_11();
 16656  0026E2  EC1E  F021         	call	_change_state_to_logs_11	;wreg free
 16657                           
 16658                           ;UI.c: 394: break;
 16659  0026E6  D7EE               	goto	i2l6090
 16660  0026E8                     i2l6102:
 16661                           
 16662                           ;UI.c: 396: change_state_to_logs_12();
 16663  0026E8  EC06  F021         	call	_change_state_to_logs_12	;wreg free
 16664                           
 16665                           ;UI.c: 397: break;
 16666  0026EC  D7EB               	goto	i2l6090
 16667  0026EE                     i2l6104:
 16668                           
 16669                           ;UI.c: 399: change_state_to_logs_22();
 16670  0026EE  ECEE  F020         	call	_change_state_to_logs_22	;wreg free
 16671                           
 16672                           ;UI.c: 400: break;
 16673  0026F2  D7E8               	goto	i2l6090
 16674  0026F4                     i2l6106:
 16675                           
 16676                           ;UI.c: 402: change_state_to_logs_23();
 16677  0026F4  EC4D  F021         	call	_change_state_to_logs_23	;wreg free
 16678                           
 16679                           ;UI.c: 403: break;
 16680  0026F8  D7E5               	goto	i2l6090
 16681  0026FA                     i2l6108:
 16682                           
 16683                           ;UI.c: 405: change_state_to_logs_33();
 16684  0026FA  ECD6  F020         	call	_change_state_to_logs_33	;wreg free
 16685                           
 16686                           ;UI.c: 406: break;
 16687  0026FE  D7E2               	goto	i2l6090
 16688  002700                     i2l6110:
 16689                           
 16690                           ;UI.c: 408: change_state_to_logs_34();
 16691  002700  ECBE  F020         	call	_change_state_to_logs_34	;wreg free
 16692                           
 16693                           ;UI.c: 410: }
 16694                           
 16695                           ;UI.c: 409: break;
 16696  002704  D7DF               	goto	i2l6090
 16697  002706                     i2l6114:
 16698  002706  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16699  00270A  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16700                           
 16701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16702                           ; Switch size 1, requested type "space"
 16703                           ; Number of cases is 2, Range of values is 3 to 4
 16704                           ; switch strategies available:
 16705                           ; Name         Instructions Cycles
 16706                           ; simple_byte            7     4 (average)
 16707                           ;	Chosen strategy is simple_byte
 16708  00270E  502D               	movf	??_inputHandler+1,w,c
 16709  002710  0A03               	xorlw	3	; case 3
 16710  002712  B4D8               	btfsc	status,2,c
 16711  002714  D004               	goto	i2l8212
 16712  002716  0A07               	xorlw	7	; case 4
 16713  002718  B4D8               	btfsc	status,2,c
 16714  00271A  D00F               	goto	i2l8214
 16715  00271C  D7D3               	goto	i2l6090
 16716  00271E                     i2l8212:
 16717                           
 16718                           ; Switch size 1, requested type "space"
 16719                           ; Number of cases is 4, Range of values is 243 to 255
 16720                           ; switch strategies available:
 16721                           ; Name         Instructions Cycles
 16722                           ; simple_byte           13     7 (average)
 16723                           ;	Chosen strategy is simple_byte
 16724  00271E  502C               	movf	??_inputHandler,w,c
 16725  002720  0AF3               	xorlw	243	; case 243
 16726  002722  B4D8               	btfsc	status,2,c
 16727  002724  D7DE               	goto	i2l6100
 16728  002726  0A07               	xorlw	7	; case 244
 16729  002728  B4D8               	btfsc	status,2,c
 16730  00272A  D7DE               	goto	i2l6102
 16731  00272C  0A0A               	xorlw	10	; case 254
 16732  00272E  B4D8               	btfsc	status,2,c
 16733  002730  D7DE               	goto	i2l6104
 16734  002732  0A01               	xorlw	1	; case 255
 16735  002734  B4D8               	btfsc	status,2,c
 16736  002736  D7DE               	goto	i2l6106
 16737  002738  D7C5               	goto	i2l6090
 16738  00273A                     i2l8214:
 16739                           
 16740                           ; Switch size 1, requested type "space"
 16741                           ; Number of cases is 2, Range of values is 9 to 10
 16742                           ; switch strategies available:
 16743                           ; Name         Instructions Cycles
 16744                           ; simple_byte            7     4 (average)
 16745                           ;	Chosen strategy is simple_byte
 16746  00273A  502C               	movf	??_inputHandler,w,c
 16747  00273C  0A09               	xorlw	9	; case 9
 16748  00273E  B4D8               	btfsc	status,2,c
 16749  002740  D7DC               	goto	i2l6108
 16750  002742  0A03               	xorlw	3	; case 10
 16751  002744  B4D8               	btfsc	status,2,c
 16752  002746  D7DC               	goto	i2l6110
 16753  002748  D7BD               	goto	i2l6090
 16754  00274A                     i2l6126:
 16755                           
 16756                           ;UI.c: 420: if(cur_state == 11){
 16757  00274A  0E0B               	movlw	11
 16758  00274C  0100               	movlb	0	; () banked
 16759  00274E  19DE               	xorwf	_cur_state& (0+255),w,b
 16760  002750  0100               	movlb	0	; () banked
 16761  002752  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16762  002754  A4D8               	btfss	status,2,c
 16763  002756  D005               	goto	i2l6134
 16764                           
 16765                           ; BSR set to: 0
 16766                           ;UI.c: 421: return 0;
 16767  002758  0E00               	movlw	0
 16768  00275A  6E2B               	movwf	?_inputHandler+1,c
 16769  00275C  0E00               	movlw	0
 16770  00275E  6E2A               	movwf	?_inputHandler,c
 16771                           
 16772                           ; BSR set to: 0
 16773  002760  0012               	return	
 16774  002762                     i2l6134:
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;UI.c: 423: else{
 16778                           ;UI.c: 424: change_state_to_menu_11();
 16779  002762  ECA6  F020         	call	_change_state_to_menu_11	;wreg free
 16780                           
 16781                           ;UI.c: 425: }
 16782                           ;UI.c: 426: return 0;
 16783  002766  0E00               	movlw	0
 16784  002768  6E2B               	movwf	?_inputHandler+1,c
 16785  00276A  0E00               	movlw	0
 16786  00276C  6E2A               	movwf	?_inputHandler,c
 16787  00276E  0012               	return	
 16788  002770                     i2l6140:
 16789                           
 16790                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16791  002770  0E16               	movlw	22
 16792  002772  0100               	movlb	0	; () banked
 16793  002774  19DE               	xorwf	_cur_state& (0+255),w,b
 16794  002776  0100               	movlb	0	; () banked
 16795  002778  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16796  00277A  B4D8               	btfsc	status,2,c
 16797  00277C  D007               	goto	i2l6144
 16798                           
 16799                           ; BSR set to: 0
 16800  00277E  0E0C               	movlw	12
 16801  002780  0100               	movlb	0	; () banked
 16802  002782  19DE               	xorwf	_cur_state& (0+255),w,b
 16803  002784  0100               	movlb	0	; () banked
 16804  002786  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16805  002788  A4D8               	btfss	status,2,c
 16806  00278A  D005               	goto	i2l6150
 16807  00278C                     i2l6144:
 16808                           
 16809                           ; BSR set to: 0
 16810                           ;UI.c: 429: return 0;
 16811  00278C  0E00               	movlw	0
 16812  00278E  6E2B               	movwf	?_inputHandler+1,c
 16813  002790  0E00               	movlw	0
 16814  002792  6E2A               	movwf	?_inputHandler,c
 16815                           
 16816                           ; BSR set to: 0
 16817  002794  0012               	return	
 16818  002796                     i2l6150:
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;UI.c: 431: else if(cur_state == 23){
 16822  002796  0E17               	movlw	23
 16823  002798  0100               	movlb	0	; () banked
 16824  00279A  19DE               	xorwf	_cur_state& (0+255),w,b
 16825  00279C  0100               	movlb	0	; () banked
 16826  00279E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16827  0027A0  A4D8               	btfss	status,2,c
 16828  0027A2  D003               	goto	i2l6154
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;UI.c: 432: change_state_to_menu_22();
 16832  0027A4  EC5E  F020         	call	i2_change_state_to_menu_22	;wreg free
 16833                           
 16834                           ;UI.c: 433: }
 16835  0027A8  D002               	goto	i2l6156
 16836  0027AA                     i2l6154:
 16837                           
 16838                           ;UI.c: 434: else{
 16839                           ;UI.c: 435: change_state_to_menu_12();
 16840  0027AA  EC76  F020         	call	i2_change_state_to_menu_12	;wreg free
 16841  0027AE                     i2l6156:
 16842                           
 16843                           ;UI.c: 436: }
 16844                           ;UI.c: 437: return 0;
 16845  0027AE  0E00               	movlw	0
 16846  0027B0  6E2B               	movwf	?_inputHandler+1,c
 16847  0027B2  0E00               	movlw	0
 16848  0027B4  6E2A               	movwf	?_inputHandler,c
 16849  0027B6  0012               	return	
 16850  0027B8                     i2l6160:
 16851                           
 16852                           ;UI.c: 439: if(cur_state == 23){
 16853  0027B8  0E17               	movlw	23
 16854  0027BA  0100               	movlb	0	; () banked
 16855  0027BC  19DE               	xorwf	_cur_state& (0+255),w,b
 16856  0027BE  0100               	movlb	0	; () banked
 16857  0027C0  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16858  0027C2  A4D8               	btfss	status,2,c
 16859  0027C4  D005               	goto	i2l6168
 16860                           
 16861                           ; BSR set to: 0
 16862                           ;UI.c: 440: return 0;
 16863  0027C6  0E00               	movlw	0
 16864  0027C8  6E2B               	movwf	?_inputHandler+1,c
 16865  0027CA  0E00               	movlw	0
 16866  0027CC  6E2A               	movwf	?_inputHandler,c
 16867                           
 16868                           ; BSR set to: 0
 16869  0027CE  0012               	return	
 16870  0027D0                     i2l6168:
 16871                           
 16872                           ; BSR set to: 0
 16873                           ;UI.c: 442: else{
 16874                           ;UI.c: 443: change_state_to_menu_23();
 16875  0027D0  EC8E  F020         	call	_change_state_to_menu_23	;wreg free
 16876                           
 16877                           ;UI.c: 444: }
 16878                           ;UI.c: 445: return 0;
 16879  0027D4  0E00               	movlw	0
 16880  0027D6  6E2B               	movwf	?_inputHandler+1,c
 16881  0027D8  0E00               	movlw	0
 16882  0027DA  6E2A               	movwf	?_inputHandler,c
 16883  0027DC  0012               	return	
 16884  0027DE                     i2l6174:
 16885                           
 16886                           ;UI.c: 448: up = 1;
 16887  0027DE  0E00               	movlw	0
 16888  0027E0  6E78               	movwf	_up+1,c
 16889  0027E2  0E01               	movlw	1
 16890  0027E4  6E77               	movwf	_up,c
 16891                           
 16892                           ;UI.c: 449: return 1;
 16893  0027E6  0E00               	movlw	0
 16894  0027E8  6E2B               	movwf	?_inputHandler+1,c
 16895  0027EA  0E01               	movlw	1
 16896  0027EC  6E2A               	movwf	?_inputHandler,c
 16897  0027EE  0012               	return	
 16898  0027F0                     i2l6178:
 16899                           
 16900                           ;UI.c: 451: down = 1;
 16901  0027F0  0E00               	movlw	0
 16902  0027F2  6E68               	movwf	_down+1,c
 16903  0027F4  0E01               	movlw	1
 16904  0027F6  6E67               	movwf	_down,c
 16905                           
 16906                           ;UI.c: 452: return 1;
 16907  0027F8  0E00               	movlw	0
 16908  0027FA  6E2B               	movwf	?_inputHandler+1,c
 16909  0027FC  0E01               	movlw	1
 16910  0027FE  6E2A               	movwf	?_inputHandler,c
 16911  002800  0012               	return	
 16912  002802                     i2l6182:
 16913                           
 16914                           ;UI.c: 454: enter = 1;
 16915  002802  0E00               	movlw	0
 16916  002804  6E6A               	movwf	_enter+1,c
 16917  002806  0E01               	movlw	1
 16918  002808  6E69               	movwf	_enter,c
 16919                           
 16920                           ;UI.c: 455: return 1;
 16921  00280A  0E00               	movlw	0
 16922  00280C  6E2B               	movwf	?_inputHandler+1,c
 16923  00280E  0E01               	movlw	1
 16924  002810  6E2A               	movwf	?_inputHandler,c
 16925  002812  0012               	return	
 16926  002814                     i2l6186:
 16927                           
 16928                           ;UI.c: 457: back = 1;
 16929  002814  0E00               	movlw	0
 16930  002816  6E5C               	movwf	_back+1,c
 16931  002818  0E01               	movlw	1
 16932  00281A  6E5B               	movwf	_back,c
 16933                           
 16934                           ;UI.c: 458: return 1;
 16935  00281C  0E00               	movlw	0
 16936  00281E  6E2B               	movwf	?_inputHandler+1,c
 16937  002820  0E01               	movlw	1
 16938  002822  6E2A               	movwf	?_inputHandler,c
 16939  002824  0012               	return	
 16940  002826                     i2l6190:
 16941                           
 16942                           ;UI.c: 461: return 1;
 16943  002826  0E00               	movlw	0
 16944  002828  6E2B               	movwf	?_inputHandler+1,c
 16945  00282A  0E01               	movlw	1
 16946  00282C  6E2A               	movwf	?_inputHandler,c
 16947                           
 16948                           ;UI.c: 462: }
 16949  00282E  0012               	return	
 16950  002830                     i2l6196:
 16951  002830  507D               	movf	_input,w,c	;volatile
 16952                           
 16953                           ; Switch size 1, requested type "space"
 16954                           ; Number of cases is 7, Range of values is 49 to 68
 16955                           ; switch strategies available:
 16956                           ; Name         Instructions Cycles
 16957                           ; simple_byte           22    12 (average)
 16958                           ;	Chosen strategy is simple_byte
 16959  002832  0A31               	xorlw	49	; case 49
 16960  002834  B4D8               	btfsc	status,2,c
 16961  002836  D789               	goto	i2l6126
 16962  002838  0A03               	xorlw	3	; case 50
 16963  00283A  B4D8               	btfsc	status,2,c
 16964  00283C  D799               	goto	i2l6140
 16965  00283E  0A01               	xorlw	1	; case 51
 16966  002840  B4D8               	btfsc	status,2,c
 16967  002842  D7BA               	goto	i2l6160
 16968  002844  0A72               	xorlw	114	; case 65
 16969  002846  B4D8               	btfsc	status,2,c
 16970  002848  D7CA               	goto	i2l6174
 16971  00284A  0A03               	xorlw	3	; case 66
 16972  00284C  B4D8               	btfsc	status,2,c
 16973  00284E  D7D0               	goto	i2l6178
 16974  002850  0A01               	xorlw	1	; case 67
 16975  002852  B4D8               	btfsc	status,2,c
 16976  002854  D7D6               	goto	i2l6182
 16977  002856  0A07               	xorlw	7	; case 68
 16978  002858  B4D8               	btfsc	status,2,c
 16979  00285A  D7DC               	goto	i2l6186
 16980  00285C  D7E4               	goto	i2l6190
 16981  00285E                     __end_of_inputHandler:
 16982                           	opt stack 0
 16983                           pclatu	equ	0xFFB
 16984                           pclath	equ	0xFFA
 16985                           tblptru	equ	0xFF8
 16986                           tblptrh	equ	0xFF7
 16987                           tblptrl	equ	0xFF6
 16988                           tablat	equ	0xFF5
 16989                           prodh	equ	0xFF4
 16990                           prodl	equ	0xFF3
 16991                           intcon	equ	0xFF2
 16992                           intcon2	equ	0xFF1
 16993                           intcon3	equ	0xFF0
 16994                           indf0	equ	0xFEF
 16995                           postinc0	equ	0xFEE
 16996                           fsr0h	equ	0xFEA
 16997                           fsr0l	equ	0xFE9
 16998                           wreg	equ	0xFE8
 16999                           postdec1	equ	0xFE5
 17000                           fsr1h	equ	0xFE2
 17001                           fsr1l	equ	0xFE1
 17002                           indf2	equ	0xFDF
 17003                           postinc2	equ	0xFDE
 17004                           postdec2	equ	0xFDD
 17005                           fsr2h	equ	0xFDA
 17006                           fsr2l	equ	0xFD9
 17007                           status	equ	0xFD8
 17008                           
 17009 ;; *************** function i2_change_state_to_menu_22 *****************
 17010 ;; Defined at:
 17011 ;;		line 496 in file "UI.c"
 17012 ;; Parameters:    Size  Location     Type
 17013 ;;		None
 17014 ;; Auto vars:     Size  Location     Type
 17015 ;;		None
 17016 ;; Return value:  Size  Location     Type
 17017 ;;                  1    wreg      void 
 17018 ;; Registers used:
 17019 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17020 ;; Tracked objects:
 17021 ;;		On entry : 0/0
 17022 ;;		On exit  : 0/0
 17023 ;;		Unchanged: 0/0
 17024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17029 ;;Total ram usage:        0 bytes
 17030 ;; Hardware stack levels used:    1
 17031 ;; Hardware stack levels required when called:    3
 17032 ;; This function calls:
 17033 ;;		i2_lcdInst
 17034 ;;		i2_printf
 17035 ;; This function is called by:
 17036 ;;		_updateMenu
 17037 ;;		_inputHandler
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           	psect	text62
 17042  0040BC                     __ptext62:
 17043                           	opt stack 0
 17044  0040BC                     i2_change_state_to_menu_22:
 17045                           	opt stack 19
 17046                           
 17047                           ;UI.c: 497: cur_state = 22;
 17048                           
 17049                           ;incstack = 0
 17050  0040BC  0E00               	movlw	0
 17051  0040BE  0100               	movlb	0	; () banked
 17052  0040C0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17053  0040C2  0E16               	movlw	22
 17054  0040C4  6FDE               	movwf	_cur_state& (0+255),b
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;UI.c: 499: lcdInst(0b10000000);;
 17058  0040C6  0E80               	movlw	128
 17059  0040C8  EC93  F022         	call	i2_lcdInst
 17060                           
 17061                           ;UI.c: 500: printf("2. SORT        <");
 17062  0040CC  0EED               	movlw	low STR_34
 17063  0040CE  6E0D               	movwf	i2printf@f,c
 17064  0040D0  0EFD               	movlw	high STR_34
 17065  0040D2  6E0E               	movwf	i2printf@f+1,c
 17066  0040D4  ECAC  F00C         	call	i2_printf	;wreg free
 17067                           
 17068                           ;UI.c: 501: lcdInst(0b11000000);;
 17069  0040D8  0EC0               	movlw	192
 17070  0040DA  EC93  F022         	call	i2_lcdInst
 17071                           
 17072                           ;UI.c: 502: printf("3. LOGS         ");
 17073  0040DE  0E32               	movlw	low STR_36
 17074  0040E0  6E0D               	movwf	i2printf@f,c
 17075  0040E2  0EFD               	movlw	high STR_36
 17076  0040E4  6E0E               	movwf	i2printf@f+1,c
 17077  0040E6  ECAC  F00C         	call	i2_printf	;wreg free
 17078  0040EA  0012               	return		;funcret
 17079  0040EC                     __end_ofi2_change_state_to_menu_22:
 17080                           	opt stack 0
 17081                           pclatu	equ	0xFFB
 17082                           pclath	equ	0xFFA
 17083                           tblptru	equ	0xFF8
 17084                           tblptrh	equ	0xFF7
 17085                           tblptrl	equ	0xFF6
 17086                           tablat	equ	0xFF5
 17087                           prodh	equ	0xFF4
 17088                           prodl	equ	0xFF3
 17089                           intcon	equ	0xFF2
 17090                           intcon2	equ	0xFF1
 17091                           intcon3	equ	0xFF0
 17092                           indf0	equ	0xFEF
 17093                           postinc0	equ	0xFEE
 17094                           fsr0h	equ	0xFEA
 17095                           fsr0l	equ	0xFE9
 17096                           wreg	equ	0xFE8
 17097                           postdec1	equ	0xFE5
 17098                           fsr1h	equ	0xFE2
 17099                           fsr1l	equ	0xFE1
 17100                           indf2	equ	0xFDF
 17101                           postinc2	equ	0xFDE
 17102                           postdec2	equ	0xFDD
 17103                           fsr2h	equ	0xFDA
 17104                           fsr2l	equ	0xFD9
 17105                           status	equ	0xFD8
 17106                           
 17107 ;; *************** function i2_change_state_to_menu_12 *****************
 17108 ;; Defined at:
 17109 ;;		line 488 in file "UI.c"
 17110 ;; Parameters:    Size  Location     Type
 17111 ;;		None
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;		None
 17114 ;; Return value:  Size  Location     Type
 17115 ;;                  1    wreg      void 
 17116 ;; Registers used:
 17117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : 0/0
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17127 ;;Total ram usage:        0 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    3
 17130 ;; This function calls:
 17131 ;;		i2_lcdInst
 17132 ;;		i2_printf
 17133 ;; This function is called by:
 17134 ;;		_updateMenu
 17135 ;;		_inputHandler
 17136 ;; This function uses a non-reentrant model
 17137 ;;
 17138                           
 17139                           	psect	text63
 17140  0040EC                     __ptext63:
 17141                           	opt stack 0
 17142  0040EC                     i2_change_state_to_menu_12:
 17143                           	opt stack 19
 17144                           
 17145                           ;UI.c: 489: cur_state = 12;
 17146                           
 17147                           ;incstack = 0
 17148  0040EC  0E00               	movlw	0
 17149  0040EE  0100               	movlb	0	; () banked
 17150  0040F0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17151  0040F2  0E0C               	movlw	12
 17152  0040F4  6FDE               	movwf	_cur_state& (0+255),b
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;UI.c: 491: lcdInst(0b10000000);;
 17156  0040F6  0E80               	movlw	128
 17157  0040F8  EC93  F022         	call	i2_lcdInst
 17158                           
 17159                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17160  0040FC  0E54               	movlw	low STR_33
 17161  0040FE  6E0D               	movwf	i2printf@f,c
 17162  004100  0EFD               	movlw	high STR_33
 17163  004102  6E0E               	movwf	i2printf@f+1,c
 17164  004104  ECAC  F00C         	call	i2_printf	;wreg free
 17165                           
 17166                           ;UI.c: 493: lcdInst(0b11000000);;
 17167  004108  0EC0               	movlw	192
 17168  00410A  EC93  F022         	call	i2_lcdInst
 17169                           
 17170                           ;UI.c: 494: printf("2. SORT        <");
 17171  00410E  0EED               	movlw	low STR_34
 17172  004110  6E0D               	movwf	i2printf@f,c
 17173  004112  0EFD               	movlw	high STR_34
 17174  004114  6E0E               	movwf	i2printf@f+1,c
 17175  004116  ECAC  F00C         	call	i2_printf	;wreg free
 17176  00411A  0012               	return		;funcret
 17177  00411C                     __end_ofi2_change_state_to_menu_12:
 17178                           	opt stack 0
 17179                           pclatu	equ	0xFFB
 17180                           pclath	equ	0xFFA
 17181                           tblptru	equ	0xFF8
 17182                           tblptrh	equ	0xFF7
 17183                           tblptrl	equ	0xFF6
 17184                           tablat	equ	0xFF5
 17185                           prodh	equ	0xFF4
 17186                           prodl	equ	0xFF3
 17187                           intcon	equ	0xFF2
 17188                           intcon2	equ	0xFF1
 17189                           intcon3	equ	0xFF0
 17190                           indf0	equ	0xFEF
 17191                           postinc0	equ	0xFEE
 17192                           fsr0h	equ	0xFEA
 17193                           fsr0l	equ	0xFE9
 17194                           wreg	equ	0xFE8
 17195                           postdec1	equ	0xFE5
 17196                           fsr1h	equ	0xFE2
 17197                           fsr1l	equ	0xFE1
 17198                           indf2	equ	0xFDF
 17199                           postinc2	equ	0xFDE
 17200                           postdec2	equ	0xFDD
 17201                           fsr2h	equ	0xFDA
 17202                           fsr2l	equ	0xFD9
 17203                           status	equ	0xFD8
 17204                           
 17205 ;; *************** function _change_state_to_menu_23 *****************
 17206 ;; Defined at:
 17207 ;;		line 504 in file "UI.c"
 17208 ;; Parameters:    Size  Location     Type
 17209 ;;		None
 17210 ;; Auto vars:     Size  Location     Type
 17211 ;;		None
 17212 ;; Return value:  Size  Location     Type
 17213 ;;                  1    wreg      void 
 17214 ;; Registers used:
 17215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17216 ;; Tracked objects:
 17217 ;;		On entry : 0/0
 17218 ;;		On exit  : 0/0
 17219 ;;		Unchanged: 0/0
 17220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17225 ;;Total ram usage:        0 bytes
 17226 ;; Hardware stack levels used:    1
 17227 ;; Hardware stack levels required when called:    3
 17228 ;; This function calls:
 17229 ;;		i2_lcdInst
 17230 ;;		i2_printf
 17231 ;; This function is called by:
 17232 ;;		_updateMenu
 17233 ;;		_inputHandler
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           	psect	text64
 17238  00411C                     __ptext64:
 17239                           	opt stack 0
 17240  00411C                     _change_state_to_menu_23:
 17241                           	opt stack 18
 17242                           
 17243                           ;UI.c: 505: cur_state = 23;
 17244                           
 17245                           ;incstack = 0
 17246  00411C  0E00               	movlw	0
 17247  00411E  0100               	movlb	0	; () banked
 17248  004120  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17249  004122  0E17               	movlw	23
 17250  004124  6FDE               	movwf	_cur_state& (0+255),b
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;UI.c: 507: lcdInst(0b10000000);;
 17254  004126  0E80               	movlw	128
 17255  004128  EC93  F022         	call	i2_lcdInst
 17256                           
 17257                           ;UI.c: 508: printf("2. SORT         ");
 17258  00412C  0E43               	movlw	low STR_32
 17259  00412E  6E0D               	movwf	i2printf@f,c
 17260  004130  0EFD               	movlw	high STR_32
 17261  004132  6E0E               	movwf	i2printf@f+1,c
 17262  004134  ECAC  F00C         	call	i2_printf	;wreg free
 17263                           
 17264                           ;UI.c: 509: lcdInst(0b11000000);;
 17265  004138  0EC0               	movlw	192
 17266  00413A  EC93  F022         	call	i2_lcdInst
 17267                           
 17268                           ;UI.c: 510: printf("3. LOGS        <");
 17269  00413E  0EDC               	movlw	low STR_38
 17270  004140  6E0D               	movwf	i2printf@f,c
 17271  004142  0EFD               	movlw	high STR_38
 17272  004144  6E0E               	movwf	i2printf@f+1,c
 17273  004146  ECAC  F00C         	call	i2_printf	;wreg free
 17274  00414A  0012               	return		;funcret
 17275  00414C                     __end_of_change_state_to_menu_23:
 17276                           	opt stack 0
 17277                           pclatu	equ	0xFFB
 17278                           pclath	equ	0xFFA
 17279                           tblptru	equ	0xFF8
 17280                           tblptrh	equ	0xFF7
 17281                           tblptrl	equ	0xFF6
 17282                           tablat	equ	0xFF5
 17283                           prodh	equ	0xFF4
 17284                           prodl	equ	0xFF3
 17285                           intcon	equ	0xFF2
 17286                           intcon2	equ	0xFF1
 17287                           intcon3	equ	0xFF0
 17288                           indf0	equ	0xFEF
 17289                           postinc0	equ	0xFEE
 17290                           fsr0h	equ	0xFEA
 17291                           fsr0l	equ	0xFE9
 17292                           wreg	equ	0xFE8
 17293                           postdec1	equ	0xFE5
 17294                           fsr1h	equ	0xFE2
 17295                           fsr1l	equ	0xFE1
 17296                           indf2	equ	0xFDF
 17297                           postinc2	equ	0xFDE
 17298                           postdec2	equ	0xFDD
 17299                           fsr2h	equ	0xFDA
 17300                           fsr2l	equ	0xFD9
 17301                           status	equ	0xFD8
 17302                           
 17303 ;; *************** function _change_state_to_menu_11 *****************
 17304 ;; Defined at:
 17305 ;;		line 480 in file "UI.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;		None
 17308 ;; Auto vars:     Size  Location     Type
 17309 ;;		None
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      void 
 17312 ;; Registers used:
 17313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17314 ;; Tracked objects:
 17315 ;;		On entry : 0/0
 17316 ;;		On exit  : 0/0
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17323 ;;Total ram usage:        0 bytes
 17324 ;; Hardware stack levels used:    1
 17325 ;; Hardware stack levels required when called:    3
 17326 ;; This function calls:
 17327 ;;		i2_lcdInst
 17328 ;;		i2_printf
 17329 ;; This function is called by:
 17330 ;;		_updateMenu
 17331 ;;		_inputHandler
 17332 ;; This function uses a non-reentrant model
 17333 ;;
 17334                           
 17335                           	psect	text65
 17336  00414C                     __ptext65:
 17337                           	opt stack 0
 17338  00414C                     _change_state_to_menu_11:
 17339                           	opt stack 18
 17340                           
 17341                           ;UI.c: 481: cur_state = 11;
 17342                           
 17343                           ;incstack = 0
 17344  00414C  0E00               	movlw	0
 17345  00414E  0100               	movlb	0	; () banked
 17346  004150  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17347  004152  0E0B               	movlw	11
 17348  004154  6FDE               	movwf	_cur_state& (0+255),b
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;UI.c: 483: lcdInst(0b10000000);;
 17352  004156  0E80               	movlw	128
 17353  004158  EC93  F022         	call	i2_lcdInst
 17354                           
 17355                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17356  00415C  0EFE               	movlw	low STR_31
 17357  00415E  6E0D               	movwf	i2printf@f,c
 17358  004160  0EFD               	movlw	high STR_31
 17359  004162  6E0E               	movwf	i2printf@f+1,c
 17360  004164  ECAC  F00C         	call	i2_printf	;wreg free
 17361                           
 17362                           ;UI.c: 485: lcdInst(0b11000000);;
 17363  004168  0EC0               	movlw	192
 17364  00416A  EC93  F022         	call	i2_lcdInst
 17365                           
 17366                           ;UI.c: 486: printf("2. SORT         ");
 17367  00416E  0E43               	movlw	low STR_32
 17368  004170  6E0D               	movwf	i2printf@f,c
 17369  004172  0EFD               	movlw	high STR_32
 17370  004174  6E0E               	movwf	i2printf@f+1,c
 17371  004176  ECAC  F00C         	call	i2_printf	;wreg free
 17372  00417A  0012               	return		;funcret
 17373  00417C                     __end_of_change_state_to_menu_11:
 17374                           	opt stack 0
 17375                           pclatu	equ	0xFFB
 17376                           pclath	equ	0xFFA
 17377                           tblptru	equ	0xFF8
 17378                           tblptrh	equ	0xFF7
 17379                           tblptrl	equ	0xFF6
 17380                           tablat	equ	0xFF5
 17381                           prodh	equ	0xFF4
 17382                           prodl	equ	0xFF3
 17383                           intcon	equ	0xFF2
 17384                           intcon2	equ	0xFF1
 17385                           intcon3	equ	0xFF0
 17386                           indf0	equ	0xFEF
 17387                           postinc0	equ	0xFEE
 17388                           fsr0h	equ	0xFEA
 17389                           fsr0l	equ	0xFE9
 17390                           wreg	equ	0xFE8
 17391                           postdec1	equ	0xFE5
 17392                           fsr1h	equ	0xFE2
 17393                           fsr1l	equ	0xFE1
 17394                           indf2	equ	0xFDF
 17395                           postinc2	equ	0xFDE
 17396                           postdec2	equ	0xFDD
 17397                           fsr2h	equ	0xFDA
 17398                           fsr2l	equ	0xFD9
 17399                           status	equ	0xFD8
 17400                           
 17401 ;; *************** function _change_state_to_logs_34 *****************
 17402 ;; Defined at:
 17403 ;;		line 547 in file "UI.c"
 17404 ;; Parameters:    Size  Location     Type
 17405 ;;		None
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;		None
 17408 ;; Return value:  Size  Location     Type
 17409 ;;                  1    wreg      void 
 17410 ;; Registers used:
 17411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17412 ;; Tracked objects:
 17413 ;;		On entry : 0/0
 17414 ;;		On exit  : 0/0
 17415 ;;		Unchanged: 0/0
 17416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17421 ;;Total ram usage:        0 bytes
 17422 ;; Hardware stack levels used:    1
 17423 ;; Hardware stack levels required when called:    3
 17424 ;; This function calls:
 17425 ;;		i2_lcdInst
 17426 ;;		i2_printf
 17427 ;; This function is called by:
 17428 ;;		_updateMenu
 17429 ;;		_inputHandler
 17430 ;; This function uses a non-reentrant model
 17431 ;;
 17432                           
 17433                           	psect	text66
 17434  00417C                     __ptext66:
 17435                           	opt stack 0
 17436  00417C                     _change_state_to_logs_34:
 17437                           	opt stack 18
 17438                           
 17439                           ;UI.c: 548: cur_state = 1034;
 17440                           
 17441                           ;incstack = 0
 17442  00417C  0E04               	movlw	4
 17443  00417E  0100               	movlb	0	; () banked
 17444  004180  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17445  004182  0E0A               	movlw	10
 17446  004184  6FDE               	movwf	_cur_state& (0+255),b
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;UI.c: 549: lcdInst(0b10000000);;
 17450  004186  0E80               	movlw	128
 17451  004188  EC93  F022         	call	i2_lcdInst
 17452                           
 17453                           ;UI.c: 550: printf("LOG 3           ");
 17454  00418C  0E10               	movlw	low STR_44
 17455  00418E  6E0D               	movwf	i2printf@f,c
 17456  004190  0EFD               	movlw	high STR_44
 17457  004192  6E0E               	movwf	i2printf@f+1,c
 17458  004194  ECAC  F00C         	call	i2_printf	;wreg free
 17459                           
 17460                           ;UI.c: 551: lcdInst(0b11000000);;
 17461  004198  0EC0               	movlw	192
 17462  00419A  EC93  F022         	call	i2_lcdInst
 17463                           
 17464                           ;UI.c: 552: printf("LOG 4          <");
 17465  00419E  0ECB               	movlw	low STR_50
 17466  0041A0  6E0D               	movwf	i2printf@f,c
 17467  0041A2  0EFD               	movlw	high STR_50
 17468  0041A4  6E0E               	movwf	i2printf@f+1,c
 17469  0041A6  ECAC  F00C         	call	i2_printf	;wreg free
 17470  0041AA  0012               	return		;funcret
 17471  0041AC                     __end_of_change_state_to_logs_34:
 17472                           	opt stack 0
 17473                           pclatu	equ	0xFFB
 17474                           pclath	equ	0xFFA
 17475                           tblptru	equ	0xFF8
 17476                           tblptrh	equ	0xFF7
 17477                           tblptrl	equ	0xFF6
 17478                           tablat	equ	0xFF5
 17479                           prodh	equ	0xFF4
 17480                           prodl	equ	0xFF3
 17481                           intcon	equ	0xFF2
 17482                           intcon2	equ	0xFF1
 17483                           intcon3	equ	0xFF0
 17484                           indf0	equ	0xFEF
 17485                           postinc0	equ	0xFEE
 17486                           fsr0h	equ	0xFEA
 17487                           fsr0l	equ	0xFE9
 17488                           wreg	equ	0xFE8
 17489                           postdec1	equ	0xFE5
 17490                           fsr1h	equ	0xFE2
 17491                           fsr1l	equ	0xFE1
 17492                           indf2	equ	0xFDF
 17493                           postinc2	equ	0xFDE
 17494                           postdec2	equ	0xFDD
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           
 17499 ;; *************** function _change_state_to_logs_33 *****************
 17500 ;; Defined at:
 17501 ;;		line 540 in file "UI.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;		None
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;		None
 17506 ;; Return value:  Size  Location     Type
 17507 ;;                  1    wreg      void 
 17508 ;; Registers used:
 17509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17510 ;; Tracked objects:
 17511 ;;		On entry : 0/0
 17512 ;;		On exit  : 0/0
 17513 ;;		Unchanged: 0/0
 17514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17519 ;;Total ram usage:        0 bytes
 17520 ;; Hardware stack levels used:    1
 17521 ;; Hardware stack levels required when called:    3
 17522 ;; This function calls:
 17523 ;;		i2_lcdInst
 17524 ;;		i2_printf
 17525 ;; This function is called by:
 17526 ;;		_updateMenu
 17527 ;;		_inputHandler
 17528 ;; This function uses a non-reentrant model
 17529 ;;
 17530                           
 17531                           	psect	text67
 17532  0041AC                     __ptext67:
 17533                           	opt stack 0
 17534  0041AC                     _change_state_to_logs_33:
 17535                           	opt stack 18
 17536                           
 17537                           ;UI.c: 541: cur_state = 1033;
 17538                           
 17539                           ;incstack = 0
 17540  0041AC  0E04               	movlw	4
 17541  0041AE  0100               	movlb	0	; () banked
 17542  0041B0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17543  0041B2  0E09               	movlw	9
 17544  0041B4  6FDE               	movwf	_cur_state& (0+255),b
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;UI.c: 542: lcdInst(0b10000000);;
 17548  0041B6  0E80               	movlw	128
 17549  0041B8  EC93  F022         	call	i2_lcdInst
 17550                           
 17551                           ;UI.c: 543: printf("LOG 3          <");
 17552  0041BC  0EBA               	movlw	low STR_46
 17553  0041BE  6E0D               	movwf	i2printf@f,c
 17554  0041C0  0EFD               	movlw	high STR_46
 17555  0041C2  6E0E               	movwf	i2printf@f+1,c
 17556  0041C4  ECAC  F00C         	call	i2_printf	;wreg free
 17557                           
 17558                           ;UI.c: 544: lcdInst(0b11000000);;
 17559  0041C8  0EC0               	movlw	192
 17560  0041CA  EC93  F022         	call	i2_lcdInst
 17561                           
 17562                           ;UI.c: 545: printf("LOG 4           ");
 17563  0041CE  0E21               	movlw	low STR_48
 17564  0041D0  6E0D               	movwf	i2printf@f,c
 17565  0041D2  0EFD               	movlw	high STR_48
 17566  0041D4  6E0E               	movwf	i2printf@f+1,c
 17567  0041D6  ECAC  F00C         	call	i2_printf	;wreg free
 17568  0041DA  0012               	return		;funcret
 17569  0041DC                     __end_of_change_state_to_logs_33:
 17570                           	opt stack 0
 17571                           pclatu	equ	0xFFB
 17572                           pclath	equ	0xFFA
 17573                           tblptru	equ	0xFF8
 17574                           tblptrh	equ	0xFF7
 17575                           tblptrl	equ	0xFF6
 17576                           tablat	equ	0xFF5
 17577                           prodh	equ	0xFF4
 17578                           prodl	equ	0xFF3
 17579                           intcon	equ	0xFF2
 17580                           intcon2	equ	0xFF1
 17581                           intcon3	equ	0xFF0
 17582                           indf0	equ	0xFEF
 17583                           postinc0	equ	0xFEE
 17584                           fsr0h	equ	0xFEA
 17585                           fsr0l	equ	0xFE9
 17586                           wreg	equ	0xFE8
 17587                           postdec1	equ	0xFE5
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           indf2	equ	0xFDF
 17591                           postinc2	equ	0xFDE
 17592                           postdec2	equ	0xFDD
 17593                           fsr2h	equ	0xFDA
 17594                           fsr2l	equ	0xFD9
 17595                           status	equ	0xFD8
 17596                           
 17597 ;; *************** function _change_state_to_logs_23 *****************
 17598 ;; Defined at:
 17599 ;;		line 533 in file "UI.c"
 17600 ;; Parameters:    Size  Location     Type
 17601 ;;		None
 17602 ;; Auto vars:     Size  Location     Type
 17603 ;;		None
 17604 ;; Return value:  Size  Location     Type
 17605 ;;                  1    wreg      void 
 17606 ;; Registers used:
 17607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17608 ;; Tracked objects:
 17609 ;;		On entry : 0/0
 17610 ;;		On exit  : 0/0
 17611 ;;		Unchanged: 0/0
 17612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;Total ram usage:        0 bytes
 17618 ;; Hardware stack levels used:    1
 17619 ;; Hardware stack levels required when called:    3
 17620 ;; This function calls:
 17621 ;;		i2_lcdInst
 17622 ;;		i2_printf
 17623 ;; This function is called by:
 17624 ;;		_updateMenu
 17625 ;;		_inputHandler
 17626 ;; This function uses a non-reentrant model
 17627 ;;
 17628                           
 17629                           	psect	text68
 17630  00429A                     __ptext68:
 17631                           	opt stack 0
 17632  00429A                     _change_state_to_logs_23:
 17633                           	opt stack 18
 17634                           
 17635                           ;UI.c: 534: cur_state = 1023;
 17636                           
 17637                           ;incstack = 0
 17638  00429A  0E03               	movlw	3
 17639  00429C  0100               	movlb	0	; () banked
 17640  00429E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17641  0042A0  69DE               	setf	_cur_state& (0+255),b
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;UI.c: 535: lcdInst(0b10000000);;
 17645  0042A2  0E80               	movlw	128
 17646  0042A4  EC93  F022         	call	i2_lcdInst
 17647                           
 17648                           ;UI.c: 536: printf("LOG 2           ");
 17649  0042A8  0EFF               	movlw	low STR_40
 17650  0042AA  6E0D               	movwf	i2printf@f,c
 17651  0042AC  0EFC               	movlw	high STR_40
 17652  0042AE  6E0E               	movwf	i2printf@f+1,c
 17653  0042B0  ECAC  F00C         	call	i2_printf	;wreg free
 17654                           
 17655                           ;UI.c: 537: lcdInst(0b11000000);;
 17656  0042B4  0EC0               	movlw	192
 17657  0042B6  EC93  F022         	call	i2_lcdInst
 17658                           
 17659                           ;UI.c: 538: printf("LOG 3          <");
 17660  0042BA  0EBA               	movlw	low STR_46
 17661  0042BC  6E0D               	movwf	i2printf@f,c
 17662  0042BE  0EFD               	movlw	high STR_46
 17663  0042C0  6E0E               	movwf	i2printf@f+1,c
 17664  0042C2  ECAC  F00C         	call	i2_printf	;wreg free
 17665  0042C6  0012               	return		;funcret
 17666  0042C8                     __end_of_change_state_to_logs_23:
 17667                           	opt stack 0
 17668                           pclatu	equ	0xFFB
 17669                           pclath	equ	0xFFA
 17670                           tblptru	equ	0xFF8
 17671                           tblptrh	equ	0xFF7
 17672                           tblptrl	equ	0xFF6
 17673                           tablat	equ	0xFF5
 17674                           prodh	equ	0xFF4
 17675                           prodl	equ	0xFF3
 17676                           intcon	equ	0xFF2
 17677                           intcon2	equ	0xFF1
 17678                           intcon3	equ	0xFF0
 17679                           indf0	equ	0xFEF
 17680                           postinc0	equ	0xFEE
 17681                           fsr0h	equ	0xFEA
 17682                           fsr0l	equ	0xFE9
 17683                           wreg	equ	0xFE8
 17684                           postdec1	equ	0xFE5
 17685                           fsr1h	equ	0xFE2
 17686                           fsr1l	equ	0xFE1
 17687                           indf2	equ	0xFDF
 17688                           postinc2	equ	0xFDE
 17689                           postdec2	equ	0xFDD
 17690                           fsr2h	equ	0xFDA
 17691                           fsr2l	equ	0xFD9
 17692                           status	equ	0xFD8
 17693                           
 17694 ;; *************** function _change_state_to_logs_22 *****************
 17695 ;; Defined at:
 17696 ;;		line 526 in file "UI.c"
 17697 ;; Parameters:    Size  Location     Type
 17698 ;;		None
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;		None
 17701 ;; Return value:  Size  Location     Type
 17702 ;;                  1    wreg      void 
 17703 ;; Registers used:
 17704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;Total ram usage:        0 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    3
 17717 ;; This function calls:
 17718 ;;		i2_lcdInst
 17719 ;;		i2_printf
 17720 ;; This function is called by:
 17721 ;;		_updateMenu
 17722 ;;		_inputHandler
 17723 ;; This function uses a non-reentrant model
 17724 ;;
 17725                           
 17726                           	psect	text69
 17727  0041DC                     __ptext69:
 17728                           	opt stack 0
 17729  0041DC                     _change_state_to_logs_22:
 17730                           	opt stack 18
 17731                           
 17732                           ;UI.c: 527: cur_state = 1022;
 17733                           
 17734                           ;incstack = 0
 17735  0041DC  0E03               	movlw	3
 17736  0041DE  0100               	movlb	0	; () banked
 17737  0041E0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17738  0041E2  0EFE               	movlw	254
 17739  0041E4  6FDE               	movwf	_cur_state& (0+255),b
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;UI.c: 528: lcdInst(0b10000000);;
 17743  0041E6  0E80               	movlw	128
 17744  0041E8  EC93  F022         	call	i2_lcdInst
 17745                           
 17746                           ;UI.c: 529: printf("LOG 2          <");
 17747  0041EC  0EA9               	movlw	low STR_42
 17748  0041EE  6E0D               	movwf	i2printf@f,c
 17749  0041F0  0EFD               	movlw	high STR_42
 17750  0041F2  6E0E               	movwf	i2printf@f+1,c
 17751  0041F4  ECAC  F00C         	call	i2_printf	;wreg free
 17752                           
 17753                           ;UI.c: 530: lcdInst(0b11000000);;
 17754  0041F8  0EC0               	movlw	192
 17755  0041FA  EC93  F022         	call	i2_lcdInst
 17756                           
 17757                           ;UI.c: 531: printf("LOG 3           ");
 17758  0041FE  0E10               	movlw	low STR_44
 17759  004200  6E0D               	movwf	i2printf@f,c
 17760  004202  0EFD               	movlw	high STR_44
 17761  004204  6E0E               	movwf	i2printf@f+1,c
 17762  004206  ECAC  F00C         	call	i2_printf	;wreg free
 17763  00420A  0012               	return		;funcret
 17764  00420C                     __end_of_change_state_to_logs_22:
 17765                           	opt stack 0
 17766                           pclatu	equ	0xFFB
 17767                           pclath	equ	0xFFA
 17768                           tblptru	equ	0xFF8
 17769                           tblptrh	equ	0xFF7
 17770                           tblptrl	equ	0xFF6
 17771                           tablat	equ	0xFF5
 17772                           prodh	equ	0xFF4
 17773                           prodl	equ	0xFF3
 17774                           intcon	equ	0xFF2
 17775                           intcon2	equ	0xFF1
 17776                           intcon3	equ	0xFF0
 17777                           indf0	equ	0xFEF
 17778                           postinc0	equ	0xFEE
 17779                           fsr0h	equ	0xFEA
 17780                           fsr0l	equ	0xFE9
 17781                           wreg	equ	0xFE8
 17782                           postdec1	equ	0xFE5
 17783                           fsr1h	equ	0xFE2
 17784                           fsr1l	equ	0xFE1
 17785                           indf2	equ	0xFDF
 17786                           postinc2	equ	0xFDE
 17787                           postdec2	equ	0xFDD
 17788                           fsr2h	equ	0xFDA
 17789                           fsr2l	equ	0xFD9
 17790                           status	equ	0xFD8
 17791                           
 17792 ;; *************** function _change_state_to_logs_12 *****************
 17793 ;; Defined at:
 17794 ;;		line 519 in file "UI.c"
 17795 ;; Parameters:    Size  Location     Type
 17796 ;;		None
 17797 ;; Auto vars:     Size  Location     Type
 17798 ;;		None
 17799 ;; Return value:  Size  Location     Type
 17800 ;;                  1    wreg      void 
 17801 ;; Registers used:
 17802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17803 ;; Tracked objects:
 17804 ;;		On entry : 0/0
 17805 ;;		On exit  : 0/0
 17806 ;;		Unchanged: 0/0
 17807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17812 ;;Total ram usage:        0 bytes
 17813 ;; Hardware stack levels used:    1
 17814 ;; Hardware stack levels required when called:    3
 17815 ;; This function calls:
 17816 ;;		i2_lcdInst
 17817 ;;		i2_printf
 17818 ;; This function is called by:
 17819 ;;		_updateMenu
 17820 ;;		_inputHandler
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824                           	psect	text70
 17825  00420C                     __ptext70:
 17826                           	opt stack 0
 17827  00420C                     _change_state_to_logs_12:
 17828                           	opt stack 18
 17829                           
 17830                           ;UI.c: 520: cur_state = 1012;
 17831                           
 17832                           ;incstack = 0
 17833  00420C  0E03               	movlw	3
 17834  00420E  0100               	movlb	0	; () banked
 17835  004210  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17836  004212  0EF4               	movlw	244
 17837  004214  6FDE               	movwf	_cur_state& (0+255),b
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;UI.c: 521: lcdInst(0b10000000);;
 17841  004216  0E80               	movlw	128
 17842  004218  EC93  F022         	call	i2_lcdInst
 17843                           
 17844                           ;UI.c: 522: printf("LOG 1           ");
 17845  00421C  0EEE               	movlw	low STR_41
 17846  00421E  6E0D               	movwf	i2printf@f,c
 17847  004220  0EFC               	movlw	high STR_41
 17848  004222  6E0E               	movwf	i2printf@f+1,c
 17849  004224  ECAC  F00C         	call	i2_printf	;wreg free
 17850                           
 17851                           ;UI.c: 523: lcdInst(0b11000000);;
 17852  004228  0EC0               	movlw	192
 17853  00422A  EC93  F022         	call	i2_lcdInst
 17854                           
 17855                           ;UI.c: 524: printf("LOG 2          <");
 17856  00422E  0EA9               	movlw	low STR_42
 17857  004230  6E0D               	movwf	i2printf@f,c
 17858  004232  0EFD               	movlw	high STR_42
 17859  004234  6E0E               	movwf	i2printf@f+1,c
 17860  004236  ECAC  F00C         	call	i2_printf	;wreg free
 17861  00423A  0012               	return		;funcret
 17862  00423C                     __end_of_change_state_to_logs_12:
 17863                           	opt stack 0
 17864                           pclatu	equ	0xFFB
 17865                           pclath	equ	0xFFA
 17866                           tblptru	equ	0xFF8
 17867                           tblptrh	equ	0xFF7
 17868                           tblptrl	equ	0xFF6
 17869                           tablat	equ	0xFF5
 17870                           prodh	equ	0xFF4
 17871                           prodl	equ	0xFF3
 17872                           intcon	equ	0xFF2
 17873                           intcon2	equ	0xFF1
 17874                           intcon3	equ	0xFF0
 17875                           indf0	equ	0xFEF
 17876                           postinc0	equ	0xFEE
 17877                           fsr0h	equ	0xFEA
 17878                           fsr0l	equ	0xFE9
 17879                           wreg	equ	0xFE8
 17880                           postdec1	equ	0xFE5
 17881                           fsr1h	equ	0xFE2
 17882                           fsr1l	equ	0xFE1
 17883                           indf2	equ	0xFDF
 17884                           postinc2	equ	0xFDE
 17885                           postdec2	equ	0xFDD
 17886                           fsr2h	equ	0xFDA
 17887                           fsr2l	equ	0xFD9
 17888                           status	equ	0xFD8
 17889                           
 17890 ;; *************** function _change_state_to_logs_11 *****************
 17891 ;; Defined at:
 17892 ;;		line 512 in file "UI.c"
 17893 ;; Parameters:    Size  Location     Type
 17894 ;;		None
 17895 ;; Auto vars:     Size  Location     Type
 17896 ;;		None
 17897 ;; Return value:  Size  Location     Type
 17898 ;;                  1    wreg      void 
 17899 ;; Registers used:
 17900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17901 ;; Tracked objects:
 17902 ;;		On entry : 0/0
 17903 ;;		On exit  : 0/0
 17904 ;;		Unchanged: 0/0
 17905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;Total ram usage:        0 bytes
 17911 ;; Hardware stack levels used:    1
 17912 ;; Hardware stack levels required when called:    3
 17913 ;; This function calls:
 17914 ;;		i2_lcdInst
 17915 ;;		i2_printf
 17916 ;; This function is called by:
 17917 ;;		_updateMenu
 17918 ;;		_inputHandler
 17919 ;; This function uses a non-reentrant model
 17920 ;;
 17921                           
 17922                           	psect	text71
 17923  00423C                     __ptext71:
 17924                           	opt stack 0
 17925  00423C                     _change_state_to_logs_11:
 17926                           	opt stack 18
 17927                           
 17928                           ;UI.c: 513: cur_state = 1011;
 17929                           
 17930                           ;incstack = 0
 17931  00423C  0E03               	movlw	3
 17932  00423E  0100               	movlb	0	; () banked
 17933  004240  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17934  004242  0EF3               	movlw	243
 17935  004244  6FDE               	movwf	_cur_state& (0+255),b
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;UI.c: 514: lcdInst(0b10000000);;
 17939  004246  0E80               	movlw	128
 17940  004248  EC93  F022         	call	i2_lcdInst
 17941                           
 17942                           ;UI.c: 515: printf("LOG 1          <");
 17943  00424C  0E98               	movlw	low STR_39
 17944  00424E  6E0D               	movwf	i2printf@f,c
 17945  004250  0EFD               	movlw	high STR_39
 17946  004252  6E0E               	movwf	i2printf@f+1,c
 17947  004254  ECAC  F00C         	call	i2_printf	;wreg free
 17948                           
 17949                           ;UI.c: 516: lcdInst(0b11000000);;
 17950  004258  0EC0               	movlw	192
 17951  00425A  EC93  F022         	call	i2_lcdInst
 17952                           
 17953                           ;UI.c: 517: printf("LOG 2           ");
 17954  00425E  0EFF               	movlw	low STR_40
 17955  004260  6E0D               	movwf	i2printf@f,c
 17956  004262  0EFC               	movlw	high STR_40
 17957  004264  6E0E               	movwf	i2printf@f+1,c
 17958  004266  ECAC  F00C         	call	i2_printf	;wreg free
 17959  00426A  0012               	return		;funcret
 17960  00426C                     __end_of_change_state_to_logs_11:
 17961                           	opt stack 0
 17962                           pclatu	equ	0xFFB
 17963                           pclath	equ	0xFFA
 17964                           tblptru	equ	0xFF8
 17965                           tblptrh	equ	0xFF7
 17966                           tblptrl	equ	0xFF6
 17967                           tablat	equ	0xFF5
 17968                           prodh	equ	0xFF4
 17969                           prodl	equ	0xFF3
 17970                           intcon	equ	0xFF2
 17971                           intcon2	equ	0xFF1
 17972                           intcon3	equ	0xFF0
 17973                           indf0	equ	0xFEF
 17974                           postinc0	equ	0xFEE
 17975                           fsr0h	equ	0xFEA
 17976                           fsr0l	equ	0xFE9
 17977                           wreg	equ	0xFE8
 17978                           postdec1	equ	0xFE5
 17979                           fsr1h	equ	0xFE2
 17980                           fsr1l	equ	0xFE1
 17981                           indf2	equ	0xFDF
 17982                           postinc2	equ	0xFDE
 17983                           postdec2	equ	0xFDD
 17984                           fsr2h	equ	0xFDA
 17985                           fsr2l	equ	0xFD9
 17986                           status	equ	0xFD8
 17987                           
 17988 ;; *************** function _dispLogs *****************
 17989 ;; Defined at:
 17990 ;;		line 465 in file "UI.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;  myLog           2   17[COMRAM] int 
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;		None
 17995 ;; Return value:  Size  Location     Type
 17996 ;;                  1    wreg      void 
 17997 ;; Registers used:
 17998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18008 ;;Total ram usage:        2 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:    2
 18011 ;; This function calls:
 18012 ;;		_retrieveLog
 18013 ;; This function is called by:
 18014 ;;		_updateMenu
 18015 ;; This function uses a non-reentrant model
 18016 ;;
 18017                           
 18018                           	psect	text72
 18019  00440A                     __ptext72:
 18020                           	opt stack 0
 18021  00440A                     _dispLogs:
 18022                           	opt stack 20
 18023                           
 18024                           ;UI.c: 466: logstate = 1;
 18025                           
 18026                           ;incstack = 0
 18027  00440A  0E00               	movlw	0
 18028  00440C  0100               	movlb	0	; () banked
 18029  00440E  6FF7               	movwf	(_logstate+1)& (0+255),b
 18030  004410  0E01               	movlw	1
 18031  004412  6FF6               	movwf	_logstate& (0+255),b
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;UI.c: 467: log = myLog;
 18035  004414  C012  F0E6         	movff	dispLogs@myLog,_log
 18036  004418  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;UI.c: 468: retrieveLog(myLog - 1);
 18040  00441C  0EFF               	movlw	255
 18041  00441E  2412               	addwf	dispLogs@myLog,w,c
 18042  004420  6E07               	movwf	retrieveLog@logNum,c
 18043  004422  0EFF               	movlw	255
 18044  004424  2013               	addwfc	dispLogs@myLog+1,w,c
 18045  004426  6E08               	movwf	retrieveLog@logNum+1,c
 18046  004428  EC7D  F017         	call	_retrieveLog	;wreg free
 18047  00442C  0012               	return		;funcret
 18048  00442E                     __end_of_dispLogs:
 18049                           	opt stack 0
 18050                           pclatu	equ	0xFFB
 18051                           pclath	equ	0xFFA
 18052                           tblptru	equ	0xFF8
 18053                           tblptrh	equ	0xFF7
 18054                           tblptrl	equ	0xFF6
 18055                           tablat	equ	0xFF5
 18056                           prodh	equ	0xFF4
 18057                           prodl	equ	0xFF3
 18058                           intcon	equ	0xFF2
 18059                           intcon2	equ	0xFF1
 18060                           intcon3	equ	0xFF0
 18061                           indf0	equ	0xFEF
 18062                           postinc0	equ	0xFEE
 18063                           fsr0h	equ	0xFEA
 18064                           fsr0l	equ	0xFE9
 18065                           wreg	equ	0xFE8
 18066                           postdec1	equ	0xFE5
 18067                           fsr1h	equ	0xFE2
 18068                           fsr1l	equ	0xFE1
 18069                           indf2	equ	0xFDF
 18070                           postinc2	equ	0xFDE
 18071                           postdec2	equ	0xFDD
 18072                           fsr2h	equ	0xFDA
 18073                           fsr2l	equ	0xFD9
 18074                           status	equ	0xFD8
 18075                           
 18076 ;; *************** function _retrieveLog *****************
 18077 ;; Defined at:
 18078 ;;		line 134 in file "EEPROM.c"
 18079 ;; Parameters:    Size  Location     Type
 18080 ;;  logNum          2    6[COMRAM] int 
 18081 ;; Auto vars:     Size  Location     Type
 18082 ;;  i               2   13[COMRAM] int 
 18083 ;;  addr            2   15[COMRAM] unsigned short 
 18084 ;;  byte3           1   12[COMRAM] unsigned char 
 18085 ;;  byte2           1   11[COMRAM] unsigned char 
 18086 ;;  byte1           1   10[COMRAM] unsigned char 
 18087 ;; Return value:  Size  Location     Type
 18088 ;;                  1    wreg      void 
 18089 ;; Registers used:
 18090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18091 ;; Tracked objects:
 18092 ;;		On entry : 0/0
 18093 ;;		On exit  : 0/0
 18094 ;;		Unchanged: 0/0
 18095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18099 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18100 ;;Total ram usage:       11 bytes
 18101 ;; Hardware stack levels used:    1
 18102 ;; Hardware stack levels required when called:    1
 18103 ;; This function calls:
 18104 ;;		i2_EEPROM_read
 18105 ;;		i2___wmul
 18106 ;; This function is called by:
 18107 ;;		_dispLogs
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           	psect	text73
 18112  002EFA                     __ptext73:
 18113                           	opt stack 0
 18114  002EFA                     _retrieveLog:
 18115                           	opt stack 20
 18116                           
 18117                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18118                           
 18119                           ;incstack = 0
 18120  002EFA  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18121  002EFE  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18122  002F02  0E00               	movlw	0
 18123  002F04  6E04               	movwf	i2___wmul@multiplicand+1,c
 18124  002F06  0E0B               	movlw	11
 18125  002F08  6E03               	movwf	i2___wmul@multiplicand,c
 18126  002F0A  ECCD  F021         	call	i2___wmul	;wreg free
 18127  002F0E  0E01               	movlw	1
 18128  002F10  2401               	addwf	?i2___wmul,w,c
 18129  002F12  6E10               	movwf	retrieveLog@addr,c
 18130  002F14  0E00               	movlw	0
 18131  002F16  2002               	addwfc	?i2___wmul+1,w,c
 18132  002F18  6E11               	movwf	retrieveLog@addr+1,c
 18133                           
 18134                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18135  002F1A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18136  002F1E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18137  002F22  EC5F  F022         	call	i2_EEPROM_read	;wreg free
 18138  002F26  6E0B               	movwf	retrieveLog@byte1,c
 18139                           
 18140                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18141  002F28  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18142  002F2C  0E80               	movlw	128
 18143  002F2E  1609               	andwf	??_retrieveLog,f,c
 18144  002F30  5009               	movf	??_retrieveLog,w,c
 18145  002F32  0100               	movlb	0	; () banked
 18146  002F34  6FE8               	movwf	_log_completion& (0+255),b
 18147  002F36  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18148                           
 18149                           ; BSR set to: 0
 18150                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18151  002F38  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18152  002F3C  0E0F               	movlw	15
 18153  002F3E  1609               	andwf	??_retrieveLog,f,c
 18154  002F40  5009               	movf	??_retrieveLog,w,c
 18155  002F42  0100               	movlb	0	; () banked
 18156  002F44  6FF2               	movwf	_log_count_total& (0+255),b
 18157  002F46  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18158                           
 18159                           ; BSR set to: 0
 18160                           ;EEPROM.c: 146: addr++;
 18161  002F48  4A10               	infsnz	retrieveLog@addr,f,c
 18162  002F4A  2A11               	incf	retrieveLog@addr+1,f,c
 18163                           
 18164                           ; BSR set to: 0
 18165                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18166  002F4C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18167  002F50  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18168  002F54  EC5F  F022         	call	i2_EEPROM_read	;wreg free
 18169  002F58  6E0C               	movwf	retrieveLog@byte2,c
 18170                           
 18171                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18172  002F5A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18173  002F5E  0EF0               	movlw	240
 18174  002F60  1609               	andwf	??_retrieveLog,f,c
 18175  002F62  5009               	movf	??_retrieveLog,w,c
 18176  002F64  0100               	movlb	0	; () banked
 18177  002F66  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18178  002F68  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18182  002F6A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18183  002F6E  0E0F               	movlw	15
 18184  002F70  1609               	andwf	??_retrieveLog,f,c
 18185  002F72  5009               	movf	??_retrieveLog,w,c
 18186  002F74  0100               	movlb	0	; () banked
 18187  002F76  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18188  002F78  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;EEPROM.c: 152: addr++;
 18192  002F7A  4A10               	infsnz	retrieveLog@addr,f,c
 18193  002F7C  2A11               	incf	retrieveLog@addr+1,f,c
 18194                           
 18195                           ; BSR set to: 0
 18196                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18197  002F7E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18198  002F82  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18199  002F86  EC5F  F022         	call	i2_EEPROM_read	;wreg free
 18200  002F8A  6E0D               	movwf	retrieveLog@byte3,c
 18201                           
 18202                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18203  002F8C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18204  002F90  0EF0               	movlw	240
 18205  002F92  1609               	andwf	??_retrieveLog,f,c
 18206  002F94  5009               	movf	??_retrieveLog,w,c
 18207  002F96  0100               	movlb	0	; () banked
 18208  002F98  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18209  002F9A  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18213  002F9C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18214  002FA0  0E0F               	movlw	15
 18215  002FA2  1609               	andwf	??_retrieveLog,f,c
 18216  002FA4  5009               	movf	??_retrieveLog,w,c
 18217  002FA6  0100               	movlb	0	; () banked
 18218  002FA8  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18219  002FAA  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;EEPROM.c: 156: addr++;
 18223  002FAC  4A10               	infsnz	retrieveLog@addr,f,c
 18224  002FAE  2A11               	incf	retrieveLog@addr+1,f,c
 18225                           
 18226                           ; BSR set to: 0
 18227                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18228  002FB0  0E00               	movlw	0
 18229  002FB2  6E0F               	movwf	retrieveLog@i+1,c
 18230  002FB4  0E00               	movlw	0
 18231  002FB6  6E0E               	movwf	retrieveLog@i,c
 18232  002FB8                     i2l5826:
 18233                           
 18234                           ; BSR set to: 0
 18235  002FB8  BE0F               	btfsc	retrieveLog@i+1,7,c
 18236  002FBA  D006               	goto	i2l5830
 18237  002FBC  500F               	movf	retrieveLog@i+1,w,c
 18238  002FBE  E11E               	bnz	i2l5838
 18239  002FC0  0E07               	movlw	7
 18240  002FC2  5C0E               	subwf	retrieveLog@i,w,c
 18241  002FC4  B0D8               	btfsc	status,0,c
 18242  002FC6  D01A               	goto	i2l5838
 18243  002FC8                     i2l5830:
 18244                           
 18245                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18246  002FC8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18247  002FCC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18248  002FD0  EC5F  F022         	call	i2_EEPROM_read	;wreg free
 18249  002FD4  6E09               	movwf	??_retrieveLog& (0+255),c
 18250  002FD6  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18251  002FD8  90D8               	bcf	status,0,c
 18252  002FDA  340E               	rlcf	retrieveLog@i,w,c
 18253  002FDC  6ED9               	movwf	fsr2l,c
 18254  002FDE  340F               	rlcf	retrieveLog@i+1,w,c
 18255  002FE0  6EDA               	movwf	fsr2h,c
 18256  002FE2  0E00               	movlw	low _log_startTime
 18257  002FE4  26D9               	addwf	fsr2l,f,c
 18258  002FE6  0E01               	movlw	high _log_startTime
 18259  002FE8  22DA               	addwfc	fsr2h,f,c
 18260  002FEA  C009  FFDE         	movff	??_retrieveLog,postinc2
 18261  002FEE  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18262                           
 18263                           ;EEPROM.c: 161: addr++;
 18264  002FF2  4A10               	infsnz	retrieveLog@addr,f,c
 18265  002FF4  2A11               	incf	retrieveLog@addr+1,f,c
 18266  002FF6  4A0E               	infsnz	retrieveLog@i,f,c
 18267  002FF8  2A0F               	incf	retrieveLog@i+1,f,c
 18268  002FFA  D7DE               	goto	i2l5826
 18269  002FFC                     i2l5838:
 18270                           
 18271                           ;EEPROM.c: 162: }
 18272                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18273  002FFC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18274  003000  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18275  003004  EC5F  F022         	call	i2_EEPROM_read	;wreg free
 18276  003008  6E09               	movwf	??_retrieveLog& (0+255),c
 18277  00300A  5009               	movf	??_retrieveLog,w,c
 18278  00300C  0100               	movlb	0	; () banked
 18279  00300E  6FF4               	movwf	_log_total_time& (0+255),b
 18280  003010  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18281                           
 18282                           ; BSR set to: 0
 18283  003012  0012               	return		;funcret
 18284  003014                     __end_of_retrieveLog:
 18285                           	opt stack 0
 18286                           pclatu	equ	0xFFB
 18287                           pclath	equ	0xFFA
 18288                           tblptru	equ	0xFF8
 18289                           tblptrh	equ	0xFF7
 18290                           tblptrl	equ	0xFF6
 18291                           tablat	equ	0xFF5
 18292                           prodh	equ	0xFF4
 18293                           prodl	equ	0xFF3
 18294                           intcon	equ	0xFF2
 18295                           intcon2	equ	0xFF1
 18296                           intcon3	equ	0xFF0
 18297                           indf0	equ	0xFEF
 18298                           postinc0	equ	0xFEE
 18299                           fsr0h	equ	0xFEA
 18300                           fsr0l	equ	0xFE9
 18301                           wreg	equ	0xFE8
 18302                           postdec1	equ	0xFE5
 18303                           fsr1h	equ	0xFE2
 18304                           fsr1l	equ	0xFE1
 18305                           indf2	equ	0xFDF
 18306                           postinc2	equ	0xFDE
 18307                           postdec2	equ	0xFDD
 18308                           fsr2h	equ	0xFDA
 18309                           fsr2l	equ	0xFD9
 18310                           status	equ	0xFD8
 18311                           
 18312 ;; *************** function i2_EEPROM_read *****************
 18313 ;; Defined at:
 18314 ;;		line 68 in file "EEPROM.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;  address         2    0[COMRAM] unsigned short 
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;		None
 18319 ;; Return value:  Size  Location     Type
 18320 ;;                  1    wreg      unsigned char 
 18321 ;; Registers used:
 18322 ;;		wreg, status,2
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18332 ;;Total ram usage:        2 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; This function calls:
 18335 ;;		Nothing
 18336 ;; This function is called by:
 18337 ;;		_retrieveLog
 18338 ;; This function uses a non-reentrant model
 18339 ;;
 18340                           
 18341                           	psect	text74
 18342  0044BE                     __ptext74:
 18343                           	opt stack 0
 18344  0044BE                     i2_EEPROM_read:
 18345                           	opt stack 20
 18346                           
 18347                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;incstack = 0
 18351  0044BE  5002               	movf	i2EEPROM_read@address+1,w,c
 18352  0044C0  6EAA               	movwf	4010,c	;volatile
 18353                           
 18354                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18355  0044C2  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18356                           
 18357                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18358  0044C6  9EA6               	bcf	4006,7,c	;volatile
 18359                           
 18360                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18361  0044C8  9CA6               	bcf	4006,6,c	;volatile
 18362                           
 18363                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18364  0044CA  80A6               	bsf	4006,0,c	;volatile
 18365  0044CC                     i2l926:
 18366  0044CC  B0A6               	btfsc	4006,0,c	;volatile
 18367  0044CE  D7FE               	goto	i2l926
 18368                           
 18369                           ;EEPROM.c: 81: return EEDATA;
 18370  0044D0  50A8               	movf	4008,w,c	;volatile
 18371  0044D2  0012               	return	
 18372  0044D4                     __end_ofi2_EEPROM_read:
 18373                           	opt stack 0
 18374                           pclatu	equ	0xFFB
 18375                           pclath	equ	0xFFA
 18376                           tblptru	equ	0xFF8
 18377                           tblptrh	equ	0xFF7
 18378                           tblptrl	equ	0xFF6
 18379                           tablat	equ	0xFF5
 18380                           prodh	equ	0xFF4
 18381                           prodl	equ	0xFF3
 18382                           intcon	equ	0xFF2
 18383                           intcon2	equ	0xFF1
 18384                           intcon3	equ	0xFF0
 18385                           indf0	equ	0xFEF
 18386                           postinc0	equ	0xFEE
 18387                           fsr0h	equ	0xFEA
 18388                           fsr0l	equ	0xFE9
 18389                           wreg	equ	0xFE8
 18390                           postdec1	equ	0xFE5
 18391                           fsr1h	equ	0xFE2
 18392                           fsr1l	equ	0xFE1
 18393                           indf2	equ	0xFDF
 18394                           postinc2	equ	0xFDE
 18395                           postdec2	equ	0xFDD
 18396                           fsr2h	equ	0xFDA
 18397                           fsr2l	equ	0xFD9
 18398                           status	equ	0xFD8
 18399                           
 18400 ;; *************** function _printSortTimer *****************
 18401 ;; Defined at:
 18402 ;;		line 294 in file "sort.c"
 18403 ;; Parameters:    Size  Location     Type
 18404 ;;		None
 18405 ;; Auto vars:     Size  Location     Type
 18406 ;;  i               2   72[COMRAM] int 
 18407 ;;  curTime        14   46[COMRAM] int [7]
 18408 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18409 ;;  sec             2   66[COMRAM] int 
 18410 ;;  min             2   64[COMRAM] int 
 18411 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18412 ;;  start_sec       2   60[COMRAM] unsigned int 
 18413 ;;  hour            2   44[COMRAM] int 
 18414 ;; Return value:  Size  Location     Type
 18415 ;;                  1    wreg      void 
 18416 ;; Registers used:
 18417 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18418 ;; Tracked objects:
 18419 ;;		On entry : 0/0
 18420 ;;		On exit  : 0/0
 18421 ;;		Unchanged: 0/0
 18422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18424 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18425 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18426 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18427 ;;Total ram usage:       33 bytes
 18428 ;; Hardware stack levels used:    1
 18429 ;; Hardware stack levels required when called:    3
 18430 ;; This function calls:
 18431 ;;		i2___lwdiv
 18432 ;;		i2___lwmod
 18433 ;;		i2___wmul
 18434 ;;		i2_getRTC
 18435 ;;		i2_lcdInst
 18436 ;;		i2_printf
 18437 ;; This function is called by:
 18438 ;;		_handler
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           	psect	text75
 18443  002486                     __ptext75:
 18444                           	opt stack 0
 18445  002486                     _printSortTimer:
 18446                           	opt stack 20
 18447                           
 18448                           ;sort.c: 295: getRTC();
 18449                           
 18450                           ;incstack = 0
 18451  002486  EC1A  F01D         	call	i2_getRTC	;wreg free
 18452                           
 18453                           ;sort.c: 296: int curTime[7];
 18454                           ;sort.c: 297: for(int i = 0; i < 7; i++){
 18455  00248A  0E00               	movlw	0
 18456  00248C  6E4A               	movwf	printSortTimer@i+1,c
 18457  00248E  0E00               	movlw	0
 18458  002490  6E49               	movwf	printSortTimer@i,c
 18459  002492                     i2l7796:
 18460  002492  BE4A               	btfsc	printSortTimer@i+1,7,c
 18461  002494  D006               	goto	i2l7800
 18462  002496  504A               	movf	printSortTimer@i+1,w,c
 18463  002498  E131               	bnz	i2l7806
 18464  00249A  0E07               	movlw	7
 18465  00249C  5C49               	subwf	printSortTimer@i,w,c
 18466  00249E  B0D8               	btfsc	status,0,c
 18467  0024A0  D02D               	goto	i2l7806
 18468  0024A2                     i2l7800:
 18469                           
 18470                           ;sort.c: 298: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18471  0024A2  0E24               	movlw	low _time
 18472  0024A4  2449               	addwf	printSortTimer@i,w,c
 18473  0024A6  6ED9               	movwf	fsr2l,c
 18474  0024A8  0E01               	movlw	high _time
 18475  0024AA  204A               	addwfc	printSortTimer@i+1,w,c
 18476  0024AC  6EDA               	movwf	fsr2h,c
 18477  0024AE  50DF               	movf	indf2,w,c
 18478  0024B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 18479  0024B2  3A2A               	swapf	??_printSortTimer,f,c
 18480  0024B4  0E0F               	movlw	15
 18481  0024B6  162A               	andwf	??_printSortTimer,f,c
 18482  0024B8  0E0F               	movlw	15
 18483  0024BA  162A               	andwf	??_printSortTimer,f,c
 18484  0024BC  502A               	movf	??_printSortTimer,w,c
 18485  0024BE  0D0A               	mullw	10
 18486  0024C0  0E24               	movlw	low _time
 18487  0024C2  2449               	addwf	printSortTimer@i,w,c
 18488  0024C4  6ED9               	movwf	fsr2l,c
 18489  0024C6  0E01               	movlw	high _time
 18490  0024C8  204A               	addwfc	printSortTimer@i+1,w,c
 18491  0024CA  6EDA               	movwf	fsr2h,c
 18492  0024CC  50DF               	movf	indf2,w,c
 18493  0024CE  0B0F               	andlw	15
 18494  0024D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18495  0024D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18496  0024D4  50F3               	movf	prodl,w,c
 18497  0024D6  262B               	addwf	??_printSortTimer+1,f,c
 18498  0024D8  50F4               	movf	prodh,w,c
 18499  0024DA  222C               	addwfc	??_printSortTimer+2,f,c
 18500  0024DC  90D8               	bcf	status,0,c
 18501  0024DE  3449               	rlcf	printSortTimer@i,w,c
 18502  0024E0  6ED9               	movwf	fsr2l,c
 18503  0024E2  344A               	rlcf	printSortTimer@i+1,w,c
 18504  0024E4  6EDA               	movwf	fsr2h,c
 18505  0024E6  0E2F               	movlw	low printSortTimer@curTime
 18506  0024E8  26D9               	addwf	fsr2l,f,c
 18507  0024EA  0E00               	movlw	high printSortTimer@curTime
 18508  0024EC  22DA               	addwfc	fsr2h,f,c
 18509  0024EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18510  0024F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18511  0024F6  4A49               	infsnz	printSortTimer@i,f,c
 18512  0024F8  2A4A               	incf	printSortTimer@i+1,f,c
 18513  0024FA  D7CB               	goto	i2l7796
 18514  0024FC                     i2l7806:
 18515                           
 18516                           ;sort.c: 299: }
 18517                           ;sort.c: 300: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18518  0024FC  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18519  002500  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18520  002504  0E00               	movlw	0
 18521  002506  6E04               	movwf	i2___wmul@multiplicand+1,c
 18522  002508  0E3C               	movlw	60
 18523  00250A  6E03               	movwf	i2___wmul@multiplicand,c
 18524  00250C  ECCD  F021         	call	i2___wmul	;wreg free
 18525  002510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18526  002514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18527  002518  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18528  00251C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18529  002520  0E0E               	movlw	14
 18530  002522  6E04               	movwf	i2___wmul@multiplicand+1,c
 18531  002524  0E10               	movlw	16
 18532  002526  6E03               	movwf	i2___wmul@multiplicand,c
 18533  002528  ECCD  F021         	call	i2___wmul	;wreg free
 18534  00252C  5001               	movf	?i2___wmul,w,c
 18535  00252E  262A               	addwf	??_printSortTimer,f,c
 18536  002530  5002               	movf	?i2___wmul+1,w,c
 18537  002532  222B               	addwfc	??_printSortTimer+1,f,c
 18538  002534  0101               	movlb	1	; () banked
 18539  002536  510E               	movf	_startTime& (0+255),w,b
 18540  002538  242A               	addwf	??_printSortTimer,w,c
 18541  00253A  6E3D               	movwf	printSortTimer@start_sec,c
 18542  00253C  0101               	movlb	1	; () banked
 18543  00253E  510F               	movf	(_startTime+1)& (0+255),w,b
 18544  002540  202B               	addwfc	??_printSortTimer+1,w,c
 18545  002542  6E3E               	movwf	printSortTimer@start_sec+1,c
 18546                           
 18547                           ;sort.c: 301: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18548  002544  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18549  002548  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18550  00254C  0E00               	movlw	0
 18551  00254E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18552  002550  0E3C               	movlw	60
 18553  002552  6E03               	movwf	i2___wmul@multiplicand,c
 18554  002554  ECCD  F021         	call	i2___wmul	;wreg free
 18555  002558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18556  00255C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18557  002560  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18558  002564  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18559  002568  0E0E               	movlw	14
 18560  00256A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18561  00256C  0E10               	movlw	16
 18562  00256E  6E03               	movwf	i2___wmul@multiplicand,c
 18563  002570  ECCD  F021         	call	i2___wmul	;wreg free
 18564  002574  5001               	movf	?i2___wmul,w,c
 18565  002576  262A               	addwf	??_printSortTimer,f,c
 18566  002578  5002               	movf	?i2___wmul+1,w,c
 18567  00257A  222B               	addwfc	??_printSortTimer+1,f,c
 18568  00257C  502F               	movf	printSortTimer@curTime,w,c
 18569  00257E  242A               	addwf	??_printSortTimer,w,c
 18570  002580  6E3F               	movwf	printSortTimer@cur_sec,c
 18571  002582  5030               	movf	printSortTimer@curTime+1,w,c
 18572  002584  202B               	addwfc	??_printSortTimer+1,w,c
 18573  002586  6E40               	movwf	printSortTimer@cur_sec+1,c
 18574                           
 18575                           ;sort.c: 302: unsigned int timeDiff = cur_sec - start_sec;
 18576  002588  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18577  00258C  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18578  002590  1E2A               	comf	??_printSortTimer,f,c
 18579  002592  1E2B               	comf	??_printSortTimer+1,f,c
 18580  002594  4A2A               	infsnz	??_printSortTimer,f,c
 18581  002596  2A2B               	incf	??_printSortTimer+1,f,c
 18582  002598  503F               	movf	printSortTimer@cur_sec,w,c
 18583  00259A  242A               	addwf	??_printSortTimer,w,c
 18584  00259C  6E47               	movwf	printSortTimer@timeDiff,c
 18585  00259E  5040               	movf	printSortTimer@cur_sec+1,w,c
 18586  0025A0  202B               	addwfc	??_printSortTimer+1,w,c
 18587  0025A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 18588                           
 18589                           ;sort.c: 304: total_time = timeDiff;
 18590  0025A4  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18591  0025A8  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18592                           
 18593                           ;sort.c: 306: if(timeDiff >= 10){
 18594  0025AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 18595  0025AE  E104               	bnz	i2u673_40
 18596  0025B0  0E0A               	movlw	10
 18597  0025B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 18598  0025B4  A0D8               	btfss	status,0,c
 18599  0025B6  D003               	goto	i2l7816
 18600  0025B8                     i2u673_40:
 18601                           
 18602                           ;sort.c: 307: machine_state = DoneSorting_state;
 18603  0025B8  0E02               	movlw	2
 18604  0025BA  0100               	movlb	0	; () banked
 18605  0025BC  6FFC               	movwf	_machine_state& (0+255),b
 18606  0025BE                     i2l7816:
 18607                           
 18608                           ;sort.c: 309: }
 18609                           ;sort.c: 311: int hour = timeDiff / 3600;
 18610  0025BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18611  0025C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18612  0025C6  0E0E               	movlw	14
 18613  0025C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 18614  0025CA  0E10               	movlw	16
 18615  0025CC  6E08               	movwf	i2___lwdiv@divisor,c
 18616  0025CE  ECD0  F01E         	call	i2___lwdiv	;wreg free
 18617  0025D2  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18618  0025D6  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18619                           
 18620                           ;sort.c: 312: int min = (timeDiff % 3600) / 60;
 18621  0025DA  0E0E               	movlw	14
 18622  0025DC  6E04               	movwf	i2___lwmod@divisor+1,c
 18623  0025DE  0E10               	movlw	16
 18624  0025E0  6E03               	movwf	i2___lwmod@divisor,c
 18625  0025E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18626  0025E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18627  0025EA  ECB6  F01F         	call	i2___lwmod	;wreg free
 18628  0025EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18629  0025F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18630  0025F6  0E00               	movlw	0
 18631  0025F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 18632  0025FA  0E3C               	movlw	60
 18633  0025FC  6E08               	movwf	i2___lwdiv@divisor,c
 18634  0025FE  ECD0  F01E         	call	i2___lwdiv	;wreg free
 18635  002602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18636  002606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18637                           
 18638                           ;sort.c: 313: int sec = (timeDiff % 3600) % 60;
 18639  00260A  0E0E               	movlw	14
 18640  00260C  6E04               	movwf	i2___lwmod@divisor+1,c
 18641  00260E  0E10               	movlw	16
 18642  002610  6E03               	movwf	i2___lwmod@divisor,c
 18643  002612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18644  002616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18645  00261A  ECB6  F01F         	call	i2___lwmod	;wreg free
 18646  00261E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2354
 18647  002622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2354+1
 18648                           
 18649                           ;sort.c: 313: int sec = (timeDiff % 3600) % 60;
 18650  002626  C045  F001         	movff	_printSortTimer$2354,i2___lwmod@dividend
 18651  00262A  C046  F002         	movff	_printSortTimer$2354+1,i2___lwmod@dividend+1
 18652  00262E  0E00               	movlw	0
 18653  002630  6E04               	movwf	i2___lwmod@divisor+1,c
 18654  002632  0E3C               	movlw	60
 18655  002634  6E03               	movwf	i2___lwmod@divisor,c
 18656  002636  ECB6  F01F         	call	i2___lwmod	;wreg free
 18657  00263A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18658  00263E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18659                           
 18660                           ;sort.c: 315: lcdInst(0b10000000);;
 18661  002642  0E80               	movlw	128
 18662  002644  EC93  F022         	call	i2_lcdInst
 18663                           
 18664                           ;sort.c: 316: printf("SORTING...");
 18665  002648  0E85               	movlw	low STR_64
 18666  00264A  6E0D               	movwf	i2printf@f,c
 18667  00264C  0EFF               	movlw	high STR_64
 18668  00264E  6E0E               	movwf	i2printf@f+1,c
 18669  002650  ECAC  F00C         	call	i2_printf	;wreg free
 18670                           
 18671                           ;sort.c: 317: lcdInst(0b11000000);;
 18672  002654  0EC0               	movlw	192
 18673  002656  EC93  F022         	call	i2_lcdInst
 18674                           
 18675                           ;sort.c: 318: printf("TIME %d:%02d", min, sec);
 18676  00265A  0E56               	movlw	low STR_65
 18677  00265C  6E0D               	movwf	i2printf@f,c
 18678  00265E  0EFF               	movlw	high STR_65
 18679  002660  6E0E               	movwf	i2printf@f+1,c
 18680  002662  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18681  002666  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18682  00266A  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18683  00266E  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18684  002672  ECAC  F00C         	call	i2_printf	;wreg free
 18685  002676  0012               	return		;funcret
 18686  002678                     __end_of_printSortTimer:
 18687                           	opt stack 0
 18688                           pclatu	equ	0xFFB
 18689                           pclath	equ	0xFFA
 18690                           tblptru	equ	0xFF8
 18691                           tblptrh	equ	0xFF7
 18692                           tblptrl	equ	0xFF6
 18693                           tablat	equ	0xFF5
 18694                           prodh	equ	0xFF4
 18695                           prodl	equ	0xFF3
 18696                           intcon	equ	0xFF2
 18697                           intcon2	equ	0xFF1
 18698                           intcon3	equ	0xFF0
 18699                           indf0	equ	0xFEF
 18700                           postinc0	equ	0xFEE
 18701                           fsr0h	equ	0xFEA
 18702                           fsr0l	equ	0xFE9
 18703                           wreg	equ	0xFE8
 18704                           postdec1	equ	0xFE5
 18705                           fsr1h	equ	0xFE2
 18706                           fsr1l	equ	0xFE1
 18707                           indf2	equ	0xFDF
 18708                           postinc2	equ	0xFDE
 18709                           postdec2	equ	0xFDD
 18710                           fsr2h	equ	0xFDA
 18711                           fsr2l	equ	0xFD9
 18712                           status	equ	0xFD8
 18713                           
 18714 ;; *************** function i2_printf *****************
 18715 ;; Defined at:
 18716 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18717 ;; Parameters:    Size  Location     Type
 18718 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18719 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 18720 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 18721 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 18722 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 18723 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 18724 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 18725 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 18726 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 18727 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 18728 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 18729 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 18730 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 18731 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 18732 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 18733 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 18734 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 18735 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 18736 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 18737 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 18738 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 18739 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 18740 ;;		 -> STR_1(18), 
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;  printf          4    0        struct .
 18743 ;;  printf          2   39[COMRAM] int 
 18744 ;;  printf          2   35[COMRAM] unsigned int 
 18745 ;;  printf          2   33[COMRAM] unsigned int 
 18746 ;;  printf          2   31[COMRAM] PTR void [1]
 18747 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18748 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18749 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 18750 ;;  printf          1   38[COMRAM] char 
 18751 ;;  printf          1   37[COMRAM] unsigned char 
 18752 ;;  printf          1   28[COMRAM] char 
 18753 ;; Return value:  Size  Location     Type
 18754 ;;                  2   12[COMRAM] int 
 18755 ;; Registers used:
 18756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18757 ;; Tracked objects:
 18758 ;;		On entry : 0/0
 18759 ;;		On exit  : 0/0
 18760 ;;		Unchanged: 0/0
 18761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18762 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18763 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18764 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18765 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18766 ;;Total ram usage:       29 bytes
 18767 ;; Hardware stack levels used:    1
 18768 ;; Hardware stack levels required when called:    2
 18769 ;; This function calls:
 18770 ;;		i2___lwdiv
 18771 ;;		i2___lwmod
 18772 ;;		i2___wmul
 18773 ;;		i2_isdigit
 18774 ;;		i2_putch
 18775 ;; This function is called by:
 18776 ;;		_change_state_to_menu_11
 18777 ;;		_change_state_to_menu_23
 18778 ;;		_change_state_to_logs_11
 18779 ;;		_change_state_to_logs_12
 18780 ;;		_change_state_to_logs_22
 18781 ;;		_change_state_to_logs_23
 18782 ;;		_change_state_to_logs_33
 18783 ;;		_change_state_to_logs_34
 18784 ;;		_printSortTimer
 18785 ;;		i2_change_state_to_menu_start
 18786 ;;		i2_change_state_to_menu_12
 18787 ;;		i2_change_state_to_menu_22
 18788 ;;		i2_printRTC
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           	psect	text76
 18793  001958                     __ptext76:
 18794                           	opt stack 0
 18795  001958                     i2_printf:
 18796                           	opt stack 19
 18797                           
 18798                           ;doprnt.c: 466: va_list ap;
 18799                           ;doprnt.c: 499: signed char c;
 18800                           ;doprnt.c: 501: int width;
 18801                           ;doprnt.c: 506: signed char prec;
 18802                           ;doprnt.c: 508: unsigned char flag;
 18803                           ;doprnt.c: 523: union {
 18804                           ;doprnt.c: 524: unsigned long vd;
 18805                           ;doprnt.c: 525: double integ;
 18806                           ;doprnt.c: 526: } tmpval;
 18807                           ;doprnt.c: 528: unsigned int val;
 18808                           ;doprnt.c: 529: unsigned len;
 18809                           ;doprnt.c: 530: const char * cp;
 18810                           ;doprnt.c: 533: *ap = __va_start();
 18811                           
 18812                           ;incstack = 0
 18813  001958  0E0F               	movlw	low (?i2_printf+2)
 18814  00195A  6E20               	movwf	i2printf@ap,c
 18815  00195C  0E00               	movlw	high (?i2_printf+2)
 18816  00195E  6E21               	movwf	i2printf@ap+1,c
 18817                           
 18818                           ;doprnt.c: 536: while(c = *f++) {
 18819  001960  D1A4               	goto	i2l5644
 18820  001962                     i2l5514:
 18821                           
 18822                           ;doprnt.c: 538: if(c != '%')
 18823  001962  0E25               	movlw	37
 18824  001964  1827               	xorwf	i2printf@c,w,c
 18825  001966  B4D8               	btfsc	status,2,c
 18826  001968  D004               	goto	i2l5518
 18827                           
 18828                           ;doprnt.c: 540: {
 18829                           ;doprnt.c: 541: (putch(c) );
 18830  00196A  5027               	movf	i2printf@c,w,c
 18831  00196C  EC8D  F022         	call	i2_putch
 18832                           
 18833                           ;doprnt.c: 542: continue;
 18834  001970  D19C               	goto	i2l5644
 18835  001972                     i2l5518:
 18836                           
 18837                           ;doprnt.c: 543: }
 18838                           ;doprnt.c: 546: width = 0;
 18839  001972  0E00               	movlw	0
 18840  001974  6E29               	movwf	i2printf@width+1,c
 18841  001976  0E00               	movlw	0
 18842  001978  6E28               	movwf	i2printf@width,c
 18843                           
 18844                           ;doprnt.c: 548: flag = 0;
 18845  00197A  0E00               	movlw	0
 18846  00197C  6E26               	movwf	i2printf@flag,c
 18847                           
 18848                           ;doprnt.c: 551: switch(*f) {
 18849                           
 18850                           ;doprnt.c: 550: for(;;) {
 18851  00197E  D003               	goto	i2l5524
 18852  001980                     i2l5520:
 18853                           
 18854                           ;doprnt.c: 580: flag |= 0x04;
 18855  001980  8426               	bsf	i2printf@flag,2,c
 18856                           
 18857                           ;doprnt.c: 581: f++;
 18858  001982  4A0D               	infsnz	i2printf@f,f,c
 18859  001984  2A0E               	incf	i2printf@f+1,f,c
 18860  001986                     i2l5524:
 18861  001986  C00D  FFF6         	movff	i2printf@f,tblptrl
 18862  00198A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18863  00198E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18864  00198E  6AF8               	clrf	tblptru,c
 18865  001990                     	endif
 18866  001990                     	if	0	;tblptru may be non-zero
 18867  001990                     	endif
 18868  001990  0008               	tblrd		*
 18869  001992  50F5               	movf	tablat,w,c
 18870                           
 18871                           ; Switch size 1, requested type "space"
 18872                           ; Number of cases is 1, Range of values is 48 to 48
 18873                           ; switch strategies available:
 18874                           ; Name         Instructions Cycles
 18875                           ; simple_byte            4     3 (average)
 18876                           ;	Chosen strategy is simple_byte
 18877  001994  0A30               	xorlw	48	; case 48
 18878  001996  B4D8               	btfsc	status,2,c
 18879  001998  D7F3               	goto	i2l5520
 18880                           
 18881                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18882                           
 18883                           ;doprnt.c: 586: }
 18884                           
 18885                           ;doprnt.c: 585: break;
 18886  00199A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18887  00199E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18888  0019A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18889  0019A2  6AF8               	clrf	tblptru,c
 18890  0019A4                     	endif
 18891  0019A4                     	if	0	;tblptru may be non-zero
 18892  0019A4                     	endif
 18893  0019A4  0008               	tblrd		*
 18894  0019A6  50F5               	movf	tablat,w,c
 18895  0019A8  EC39  F022         	call	i2_isdigit
 18896  0019AC  A0D8               	btfss	status,0,c
 18897  0019AE  D0A6               	goto	i2l5572
 18898                           
 18899                           ;doprnt.c: 598: width = 0;
 18900  0019B0  0E00               	movlw	0
 18901  0019B2  6E29               	movwf	i2printf@width+1,c
 18902  0019B4  0E00               	movlw	0
 18903  0019B6  6E28               	movwf	i2printf@width,c
 18904  0019B8                     i2l5530:
 18905                           
 18906                           ;doprnt.c: 600: width *= 10;
 18907  0019B8  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18908  0019BC  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18909  0019C0  0E00               	movlw	0
 18910  0019C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 18911  0019C4  0E0A               	movlw	10
 18912  0019C6  6E03               	movwf	i2___wmul@multiplicand,c
 18913  0019C8  ECCD  F021         	call	i2___wmul	;wreg free
 18914  0019CC  C001  F028         	movff	?i2___wmul,i2printf@width
 18915  0019D0  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18916                           
 18917                           ;doprnt.c: 601: width += *f++ - '0';
 18918  0019D4  0ED0               	movlw	208
 18919  0019D6  6E19               	movwf	??i2_printf& (0+255),c
 18920  0019D8  0EFF               	movlw	255
 18921  0019DA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18922  0019DC  C00D  FFF6         	movff	i2printf@f,tblptrl
 18923  0019E0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18924  0019E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18925  0019E4  6AF8               	clrf	tblptru,c
 18926  0019E6                     	endif
 18927  0019E6                     	if	0	;tblptru may be non-zero
 18928  0019E6                     	endif
 18929  0019E6  0008               	tblrd		*
 18930  0019E8  50F5               	movf	tablat,w,c
 18931  0019EA  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18932  0019EC  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18933  0019EE  5019               	movf	??i2_printf,w,c
 18934  0019F0  261B               	addwf	??i2_printf+2,f,c
 18935  0019F2  501A               	movf	??i2_printf+1,w,c
 18936  0019F4  221C               	addwfc	??i2_printf+3,f,c
 18937  0019F6  501B               	movf	??i2_printf+2,w,c
 18938  0019F8  2628               	addwf	i2printf@width,f,c
 18939  0019FA  501C               	movf	??i2_printf+3,w,c
 18940  0019FC  2229               	addwfc	i2printf@width+1,f,c
 18941  0019FE  4A0D               	infsnz	i2printf@f,f,c
 18942  001A00  2A0E               	incf	i2printf@f+1,f,c
 18943                           
 18944                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18945  001A02  C00D  FFF6         	movff	i2printf@f,tblptrl
 18946  001A06  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18947  001A0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18948  001A0A  6AF8               	clrf	tblptru,c
 18949  001A0C                     	endif
 18950  001A0C                     	if	0	;tblptru may be non-zero
 18951  001A0C                     	endif
 18952  001A0C  0008               	tblrd		*
 18953  001A0E  50F5               	movf	tablat,w,c
 18954  001A10  EC39  F022         	call	i2_isdigit
 18955  001A14  A0D8               	btfss	status,0,c
 18956  001A16  D072               	goto	i2l5572
 18957  001A18  D7CF               	goto	i2l5530
 18958  001A1A                     i2l5538:
 18959                           
 18960                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18961  001A1A  C020  FFD9         	movff	i2printf@ap,fsr2l
 18962  001A1E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18963  001A22  CFDE F01E          	movff	postinc2,i2printf@cp
 18964  001A26  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18965  001A2A  0E02               	movlw	2
 18966  001A2C  2620               	addwf	i2printf@ap,f,c
 18967  001A2E  0E00               	movlw	0
 18968  001A30  2221               	addwfc	i2printf@ap+1,f,c
 18969                           
 18970                           ;doprnt.c: 740: if(!cp)
 18971  001A32  501E               	movf	i2printf@cp,w,c
 18972  001A34  101F               	iorwf	i2printf@cp+1,w,c
 18973  001A36  A4D8               	btfss	status,2,c
 18974  001A38  D004               	goto	i2l5546
 18975                           
 18976                           ;doprnt.c: 741: cp = "(null)";
 18977  001A3A  0EB6               	movlw	low STR_111
 18978  001A3C  6E1E               	movwf	i2printf@cp,c
 18979  001A3E  0EFF               	movlw	high STR_111
 18980  001A40  6E1F               	movwf	i2printf@cp+1,c
 18981  001A42                     i2l5546:
 18982                           
 18983                           ;doprnt.c: 745: len = 0;
 18984  001A42  0E00               	movlw	0
 18985  001A44  6E23               	movwf	i2printf@len+1,c
 18986  001A46  0E00               	movlw	0
 18987  001A48  6E22               	movwf	i2printf@len,c
 18988                           
 18989                           ;doprnt.c: 746: while(cp[len])
 18990  001A4A  D002               	goto	i2l5550
 18991  001A4C                     i2l5548:
 18992                           
 18993                           ;doprnt.c: 747: len++;
 18994  001A4C  4A22               	infsnz	i2printf@len,f,c
 18995  001A4E  2A23               	incf	i2printf@len+1,f,c
 18996  001A50                     i2l5550:
 18997  001A50  5022               	movf	i2printf@len,w,c
 18998  001A52  241E               	addwf	i2printf@cp,w,c
 18999  001A54  6E19               	movwf	??i2_printf& (0+255),c
 19000  001A56  5023               	movf	i2printf@len+1,w,c
 19001  001A58  201F               	addwfc	i2printf@cp+1,w,c
 19002  001A5A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19003  001A5C  C019  FFF6         	movff	??i2_printf,tblptrl
 19004  001A60  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19005  001A64  0E00               	movlw	low (__mediumconst shr (0+16))
 19006  001A66  6EF8               	movwf	tblptru,c
 19007  001A68  0E0F               	movlw	(high __ramtop+-1)
 19008  001A6A  64F7               	cpfsgt	tblptrh,c
 19009  001A6C  D003               	bra	i2u411_47
 19010  001A6E  0008               	tblrd		*
 19011  001A70  50F5               	movf	tablat,w,c
 19012  001A72  D005               	bra	i2u411_40
 19013  001A74                     i2u411_47:
 19014  001A74  CFF6 FFE9          	movff	tblptrl,fsr0l
 19015  001A78  CFF7 FFEA          	movff	tblptrh,fsr0h
 19016  001A7C  50EF               	movf	indf0,w,c
 19017  001A7E                     i2u411_40:
 19018  001A7E  0900               	iorlw	0
 19019  001A80  A4D8               	btfss	status,2,c
 19020  001A82  D7E4               	goto	i2l5548
 19021                           
 19022                           ;doprnt.c: 757: if(width > len)
 19023  001A84  5028               	movf	i2printf@width,w,c
 19024  001A86  5C22               	subwf	i2printf@len,w,c
 19025  001A88  5029               	movf	i2printf@width+1,w,c
 19026  001A8A  5823               	subwfb	i2printf@len+1,w,c
 19027  001A8C  B0D8               	btfsc	status,0,c
 19028  001A8E  D005               	goto	i2l5556
 19029                           
 19030                           ;doprnt.c: 758: width -= len;
 19031  001A90  5022               	movf	i2printf@len,w,c
 19032  001A92  5E28               	subwf	i2printf@width,f,c
 19033  001A94  5023               	movf	i2printf@len+1,w,c
 19034  001A96  5A29               	subwfb	i2printf@width+1,f,c
 19035  001A98  D008               	goto	i2l5560
 19036  001A9A                     i2l5556:
 19037                           
 19038                           ;doprnt.c: 759: else
 19039                           ;doprnt.c: 760: width = 0;
 19040  001A9A  0E00               	movlw	0
 19041  001A9C  6E29               	movwf	i2printf@width+1,c
 19042  001A9E  0E00               	movlw	0
 19043  001AA0  6E28               	movwf	i2printf@width,c
 19044                           
 19045                           ;doprnt.c: 764: while(width--)
 19046  001AA2  D003               	goto	i2l5560
 19047  001AA4                     i2l5558:
 19048                           
 19049                           ;doprnt.c: 765: (putch(' ') );
 19050  001AA4  0E20               	movlw	32
 19051  001AA6  EC8D  F022         	call	i2_putch
 19052  001AAA                     i2l5560:
 19053  001AAA  0628               	decf	i2printf@width,f,c
 19054  001AAC  A0D8               	btfss	status,0,c
 19055  001AAE  0629               	decf	i2printf@width+1,f,c
 19056  001AB0  2828               	incf	i2printf@width,w,c
 19057  001AB2  E1F8               	bnz	i2l5558
 19058  001AB4  2829               	incf	i2printf@width+1,w,c
 19059  001AB6  B4D8               	btfsc	status,2,c
 19060  001AB8  D016               	goto	i2l5566
 19061  001ABA  D7F4               	goto	i2l5558
 19062  001ABC                     i2l5562:
 19063                           
 19064                           ;doprnt.c: 768: (putch(*cp++) );
 19065  001ABC  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19066  001AC0  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19067  001AC4  0E00               	movlw	low (__mediumconst shr (0+16))
 19068  001AC6  6EF8               	movwf	tblptru,c
 19069  001AC8  0E0F               	movlw	(high __ramtop+-1)
 19070  001ACA  64F7               	cpfsgt	tblptrh,c
 19071  001ACC  D003               	bra	i2u415_47
 19072  001ACE  0008               	tblrd		*
 19073  001AD0  50F5               	movf	tablat,w,c
 19074  001AD2  D005               	bra	i2u415_40
 19075  001AD4                     i2u415_47:
 19076  001AD4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19077  001AD8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19078  001ADC  50EF               	movf	indf0,w,c
 19079  001ADE                     i2u415_40:
 19080  001ADE  EC8D  F022         	call	i2_putch
 19081  001AE2  4A1E               	infsnz	i2printf@cp,f,c
 19082  001AE4  2A1F               	incf	i2printf@cp+1,f,c
 19083  001AE6                     i2l5566:
 19084  001AE6  0622               	decf	i2printf@len,f,c
 19085  001AE8  A0D8               	btfss	status,0,c
 19086  001AEA  0623               	decf	i2printf@len+1,f,c
 19087  001AEC  2822               	incf	i2printf@len,w,c
 19088  001AEE  E1E6               	bnz	i2l5562
 19089  001AF0  2823               	incf	i2printf@len+1,w,c
 19090  001AF2  B4D8               	btfsc	status,2,c
 19091  001AF4  D0DA               	goto	i2l5644
 19092  001AF6  D7E2               	goto	i2l5562
 19093  001AF8                     i2l5568:
 19094                           
 19095                           ;doprnt.c: 818: flag |= 0x40;
 19096  001AF8  8C26               	bsf	i2printf@flag,6,c
 19097                           
 19098                           ;doprnt.c: 822: }
 19099                           
 19100                           ;doprnt.c: 819: break;
 19101  001AFA  D01B               	goto	i2l1224
 19102  001AFC                     i2l5572:
 19103  001AFC  C00D  FFF6         	movff	i2printf@f,tblptrl
 19104  001B00  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19105  001B04  4A0D               	infsnz	i2printf@f,f,c
 19106  001B06  2A0E               	incf	i2printf@f+1,f,c
 19107  001B08                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19108  001B08  6AF8               	clrf	tblptru,c
 19109  001B0A                     	endif
 19110  001B0A                     	if	0	;tblptru may be non-zero
 19111  001B0A                     	endif
 19112  001B0A  0008               	tblrd		*
 19113  001B0C  CFF5 F027          	movff	tablat,i2printf@c
 19114  001B10  5027               	movf	i2printf@c,w,c
 19115                           
 19116                           ; Switch size 1, requested type "space"
 19117                           ; Number of cases is 5, Range of values is 0 to 117
 19118                           ; switch strategies available:
 19119                           ; Name         Instructions Cycles
 19120                           ; simple_byte           16     9 (average)
 19121                           ;	Chosen strategy is simple_byte
 19122  001B12  0A00               	xorlw	0	; case 0
 19123  001B14  B4D8               	btfsc	status,2,c
 19124  001B16  0012               	return	
 19125  001B18  0A64               	xorlw	100	; case 100
 19126  001B1A  B4D8               	btfsc	status,2,c
 19127  001B1C  D00A               	goto	i2l1224
 19128  001B1E  0A0D               	xorlw	13	; case 105
 19129  001B20  B4D8               	btfsc	status,2,c
 19130  001B22  D007               	goto	i2l1224
 19131  001B24  0A1A               	xorlw	26	; case 115
 19132  001B26  B4D8               	btfsc	status,2,c
 19133  001B28  D778               	goto	i2l5538
 19134  001B2A  0A06               	xorlw	6	; case 117
 19135  001B2C  B4D8               	btfsc	status,2,c
 19136  001B2E  D7E4               	goto	i2l5568
 19137  001B30  D0BC               	goto	i2l5644
 19138  001B32                     i2l1224:
 19139                           
 19140                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19141  001B32  BC26               	btfsc	i2printf@flag,6,c
 19142  001B34  D015               	goto	i2l5584
 19143                           
 19144                           ;doprnt.c: 1253: {
 19145                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19146  001B36  C020  FFD9         	movff	i2printf@ap,fsr2l
 19147  001B3A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19148  001B3E  CFDE F024          	movff	postinc2,i2printf@val
 19149  001B42  CFDD F025          	movff	postdec2,i2printf@val+1
 19150  001B46  0E02               	movlw	2
 19151  001B48  2620               	addwf	i2printf@ap,f,c
 19152  001B4A  0E00               	movlw	0
 19153  001B4C  2221               	addwfc	i2printf@ap+1,f,c
 19154                           
 19155                           ;doprnt.c: 1261: if((int)val < 0) {
 19156  001B4E  AE25               	btfss	i2printf@val+1,7,c
 19157  001B50  D013               	goto	i2l5588
 19158                           
 19159                           ;doprnt.c: 1262: flag |= 0x03;
 19160  001B52  0E03               	movlw	3
 19161  001B54  1226               	iorwf	i2printf@flag,f,c
 19162                           
 19163                           ;doprnt.c: 1263: val = -val;
 19164  001B56  6C24               	negf	i2printf@val,c
 19165  001B58  1E25               	comf	i2printf@val+1,f,c
 19166  001B5A  B0D8               	btfsc	status,0,c
 19167  001B5C  2A25               	incf	i2printf@val+1,f,c
 19168                           
 19169                           ;doprnt.c: 1264: }
 19170                           ;doprnt.c: 1266: }
 19171  001B5E  D00C               	goto	i2l5588
 19172  001B60                     i2l5584:
 19173                           
 19174                           ;doprnt.c: 1268: else
 19175                           ;doprnt.c: 1273: {
 19176                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19177  001B60  C020  FFD9         	movff	i2printf@ap,fsr2l
 19178  001B64  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19179  001B68  CFDE F024          	movff	postinc2,i2printf@val
 19180  001B6C  CFDD F025          	movff	postdec2,i2printf@val+1
 19181  001B70  0E02               	movlw	2
 19182  001B72  2620               	addwf	i2printf@ap,f,c
 19183  001B74  0E00               	movlw	0
 19184  001B76  2221               	addwfc	i2printf@ap+1,f,c
 19185  001B78                     i2l5588:
 19186                           
 19187                           ;doprnt.c: 1287: }
 19188                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19189  001B78  0E01               	movlw	1
 19190  001B7A  6E27               	movwf	i2printf@c,c
 19191  001B7C                     i2l5590:
 19192  001B7C  0E05               	movlw	5
 19193  001B7E  1827               	xorwf	i2printf@c,w,c
 19194  001B80  B4D8               	btfsc	status,2,c
 19195  001B82  D015               	goto	i2l5602
 19196                           
 19197                           ;doprnt.c: 1306: if(val < dpowers[c])
 19198  001B84  5027               	movf	i2printf@c,w,c
 19199  001B86  0D02               	mullw	2
 19200  001B88  0E4A               	movlw	low _dpowers
 19201  001B8A  24F3               	addwf	prodl,w,c
 19202  001B8C  6EF6               	movwf	tblptrl,c
 19203  001B8E  0EFB               	movlw	high _dpowers
 19204  001B90  20F4               	addwfc	prodh,w,c
 19205  001B92  6EF7               	movwf	tblptrh,c
 19206  001B94                     	if	1	;There are 3 active tblptr bytes
 19207  001B94  6AF8               	clrf	tblptru,c
 19208  001B96  0E00               	movlw	low (__mediumconst shr (0+16))
 19209  001B98  22F8               	addwfc	tblptru,f,c
 19210  001B9A                     	endif
 19211  001B9A  0009               	tblrd		*+
 19212  001B9C  50F5               	movf	tablat,w,c
 19213  001B9E  5C24               	subwf	i2printf@val,w,c
 19214  001BA0  0009               	tblrd		*+
 19215  001BA2  50F5               	movf	tablat,w,c
 19216  001BA4  5825               	subwfb	i2printf@val+1,w,c
 19217  001BA6  A0D8               	btfss	status,0,c
 19218  001BA8  D002               	goto	i2l5602
 19219                           
 19220                           ;doprnt.c: 1307: break;
 19221  001BAA  2A27               	incf	i2printf@c,f,c
 19222  001BAC  D7E7               	goto	i2l5590
 19223  001BAE                     i2l5602:
 19224                           
 19225                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19226  001BAE  5028               	movf	i2printf@width,w,c
 19227  001BB0  1029               	iorwf	i2printf@width+1,w,c
 19228  001BB2  B4D8               	btfsc	status,2,c
 19229  001BB4  D009               	goto	i2l5608
 19230  001BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 19231  001BBA  0E03               	movlw	3
 19232  001BBC  1619               	andwf	??i2_printf,f,c
 19233  001BBE  B4D8               	btfsc	status,2,c
 19234  001BC0  D003               	goto	i2l5608
 19235                           
 19236                           ;doprnt.c: 1346: width--;
 19237  001BC2  0628               	decf	i2printf@width,f,c
 19238  001BC4  A0D8               	btfss	status,0,c
 19239  001BC6  0629               	decf	i2printf@width+1,f,c
 19240  001BC8                     i2l5608:
 19241                           
 19242                           ;doprnt.c: 1381: if(width > c)
 19243  001BC8  0E80               	movlw	128
 19244  001BCA  BE27               	btfsc	i2printf@c,7,c
 19245  001BCC  0E7F               	movlw	127
 19246  001BCE  6E19               	movwf	??i2_printf& (0+255),c
 19247  001BD0  5028               	movf	i2printf@width,w,c
 19248  001BD2  5C27               	subwf	i2printf@c,w,c
 19249  001BD4  5029               	movf	i2printf@width+1,w,c
 19250  001BD6  0A80               	xorlw	128
 19251  001BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 19252  001BDA  B0D8               	btfsc	status,0,c
 19253  001BDC  D007               	goto	i2l5612
 19254                           
 19255                           ;doprnt.c: 1382: width -= c;
 19256  001BDE  5027               	movf	i2printf@c,w,c
 19257  001BE0  5E28               	subwf	i2printf@width,f,c
 19258  001BE2  0E00               	movlw	0
 19259  001BE4  BE27               	btfsc	i2printf@c,7,c
 19260  001BE6  0EFF               	movlw	255
 19261  001BE8  5A29               	subwfb	i2printf@width+1,f,c
 19262  001BEA  D004               	goto	i2l5614
 19263  001BEC                     i2l5612:
 19264                           
 19265                           ;doprnt.c: 1383: else
 19266                           ;doprnt.c: 1384: width = 0;
 19267  001BEC  0E00               	movlw	0
 19268  001BEE  6E29               	movwf	i2printf@width+1,c
 19269  001BF0  0E00               	movlw	0
 19270  001BF2  6E28               	movwf	i2printf@width,c
 19271  001BF4                     i2l5614:
 19272                           
 19273                           ;doprnt.c: 1387: if(flag & 0x04) {
 19274  001BF4  A426               	btfss	i2printf@flag,2,c
 19275  001BF6  D014               	goto	i2l5626
 19276                           
 19277                           ;doprnt.c: 1392: if(flag & 0x03)
 19278  001BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 19279  001BFC  0E03               	movlw	3
 19280  001BFE  1619               	andwf	??i2_printf,f,c
 19281  001C00  B4D8               	btfsc	status,2,c
 19282  001C02  D003               	goto	i2l5620
 19283                           
 19284                           ;doprnt.c: 1393: (putch('-') );
 19285  001C04  0E2D               	movlw	45
 19286  001C06  EC8D  F022         	call	i2_putch
 19287  001C0A                     i2l5620:
 19288                           
 19289                           ;doprnt.c: 1415: if(width)
 19290  001C0A  5028               	movf	i2printf@width,w,c
 19291  001C0C  1029               	iorwf	i2printf@width+1,w,c
 19292  001C0E  B4D8               	btfsc	status,2,c
 19293  001C10  D01E               	goto	i2l5636
 19294                           
 19295                           ;doprnt.c: 1417: (putch('0') );
 19296                           
 19297                           ;doprnt.c: 1416: do
 19298  001C12  0E30               	movlw	48
 19299  001C14  EC8D  F022         	call	i2_putch
 19300                           
 19301                           ;doprnt.c: 1418: while(--width);
 19302  001C18  0628               	decf	i2printf@width,f,c
 19303  001C1A  A0D8               	btfss	status,0,c
 19304  001C1C  0629               	decf	i2printf@width+1,f,c
 19305  001C1E  D7F5               	goto	i2l5620
 19306  001C20                     i2l5626:
 19307                           
 19308                           ;doprnt.c: 1422: {
 19309                           ;doprnt.c: 1424: if(width
 19310                           ;doprnt.c: 1428: )
 19311  001C20  5028               	movf	i2printf@width,w,c
 19312  001C22  1029               	iorwf	i2printf@width+1,w,c
 19313  001C24  B4D8               	btfsc	status,2,c
 19314  001C26  D00A               	goto	i2l5632
 19315  001C28                     i2l5628:
 19316                           
 19317                           ;doprnt.c: 1430: (putch(' ') );
 19318  001C28  0E20               	movlw	32
 19319  001C2A  EC8D  F022         	call	i2_putch
 19320                           
 19321                           ;doprnt.c: 1431: while(--width);
 19322  001C2E  0628               	decf	i2printf@width,f,c
 19323  001C30  A0D8               	btfss	status,0,c
 19324  001C32  0629               	decf	i2printf@width+1,f,c
 19325  001C34  5028               	movf	i2printf@width,w,c
 19326  001C36  1029               	iorwf	i2printf@width+1,w,c
 19327  001C38  A4D8               	btfss	status,2,c
 19328  001C3A  D7F6               	goto	i2l5628
 19329  001C3C                     i2l5632:
 19330                           
 19331                           ;doprnt.c: 1438: if(flag & 0x03)
 19332  001C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 19333  001C40  0E03               	movlw	3
 19334  001C42  1619               	andwf	??i2_printf,f,c
 19335  001C44  B4D8               	btfsc	status,2,c
 19336  001C46  D003               	goto	i2l5636
 19337                           
 19338                           ;doprnt.c: 1439: (putch('-') );
 19339  001C48  0E2D               	movlw	45
 19340  001C4A  EC8D  F022         	call	i2_putch
 19341  001C4E                     i2l5636:
 19342                           
 19343                           ;doprnt.c: 1469: }
 19344                           ;doprnt.c: 1472: prec = c;
 19345  001C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19346                           
 19347                           ;doprnt.c: 1474: while(prec--) {
 19348  001C52  D027               	goto	i2l5642
 19349  001C54                     i2l5638:
 19350                           
 19351                           ;doprnt.c: 1478: {
 19352                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19353  001C54  501D               	movf	i2printf@prec,w,c
 19354  001C56  0D02               	mullw	2
 19355  001C58  0E4A               	movlw	low _dpowers
 19356  001C5A  24F3               	addwf	prodl,w,c
 19357  001C5C  6EF6               	movwf	tblptrl,c
 19358  001C5E  0EFB               	movlw	high _dpowers
 19359  001C60  20F4               	addwfc	prodh,w,c
 19360  001C62  6EF7               	movwf	tblptrh,c
 19361  001C64                     	if	1	;There are 3 active tblptr bytes
 19362  001C64  6AF8               	clrf	tblptru,c
 19363  001C66  0E00               	movlw	low (__mediumconst shr (0+16))
 19364  001C68  22F8               	addwfc	tblptru,f,c
 19365  001C6A                     	endif
 19366  001C6A  0009               	tblrd		*+
 19367  001C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19368  001C70  000A               	tblrd		*-
 19369  001C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19370  001C76  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19371  001C7A  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19372  001C7E  ECD0  F01E         	call	i2___lwdiv	;wreg free
 19373  001C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19374  001C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19375  001C8A  0E00               	movlw	0
 19376  001C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 19377  001C8E  0E0A               	movlw	10
 19378  001C90  6E03               	movwf	i2___lwmod@divisor,c
 19379  001C92  ECB6  F01F         	call	i2___lwmod	;wreg free
 19380  001C96  5001               	movf	?i2___lwmod,w,c
 19381  001C98  0F30               	addlw	48
 19382  001C9A  6E27               	movwf	i2printf@c,c
 19383                           
 19384                           ;doprnt.c: 1523: }
 19385                           ;doprnt.c: 1524: (putch(c) );
 19386  001C9C  5027               	movf	i2printf@c,w,c
 19387  001C9E  EC8D  F022         	call	i2_putch
 19388  001CA2                     i2l5642:
 19389  001CA2  061D               	decf	i2printf@prec,f,c
 19390  001CA4  281D               	incf	i2printf@prec,w,c
 19391  001CA6  A4D8               	btfss	status,2,c
 19392  001CA8  D7D5               	goto	i2l5638
 19393  001CAA                     i2l5644:
 19394  001CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19395  001CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19396  001CB2  4A0D               	infsnz	i2printf@f,f,c
 19397  001CB4  2A0E               	incf	i2printf@f+1,f,c
 19398  001CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19399  001CB6  6AF8               	clrf	tblptru,c
 19400  001CB8                     	endif
 19401  001CB8                     	if	0	;tblptru may be non-zero
 19402  001CB8                     	endif
 19403  001CB8  0008               	tblrd		*
 19404  001CBA  CFF5 F027          	movff	tablat,i2printf@c
 19405  001CBE  5027               	movf	i2printf@c,w,c
 19406  001CC0  B4D8               	btfsc	status,2,c
 19407  001CC2  0012               	return	
 19408  001CC4  D64E               	goto	i2l5514
 19409  001CC6                     __end_ofi2_printf:
 19410                           	opt stack 0
 19411                           pclatu	equ	0xFFB
 19412                           pclath	equ	0xFFA
 19413                           tblptru	equ	0xFF8
 19414                           tblptrh	equ	0xFF7
 19415                           tblptrl	equ	0xFF6
 19416                           tablat	equ	0xFF5
 19417                           prodh	equ	0xFF4
 19418                           prodl	equ	0xFF3
 19419                           intcon	equ	0xFF2
 19420                           intcon2	equ	0xFF1
 19421                           intcon3	equ	0xFF0
 19422                           indf0	equ	0xFEF
 19423                           postinc0	equ	0xFEE
 19424                           fsr0h	equ	0xFEA
 19425                           fsr0l	equ	0xFE9
 19426                           wreg	equ	0xFE8
 19427                           postdec1	equ	0xFE5
 19428                           fsr1h	equ	0xFE2
 19429                           fsr1l	equ	0xFE1
 19430                           indf2	equ	0xFDF
 19431                           postinc2	equ	0xFDE
 19432                           postdec2	equ	0xFDD
 19433                           fsr2h	equ	0xFDA
 19434                           fsr2l	equ	0xFD9
 19435                           status	equ	0xFD8
 19436                           
 19437 ;; *************** function i2_putch *****************
 19438 ;; Defined at:
 19439 ;;		line 20 in file "lcd.c"
 19440 ;; Parameters:    Size  Location     Type
 19441 ;;  data            1    wreg     unsigned char 
 19442 ;; Auto vars:     Size  Location     Type
 19443 ;;  data            1    2[COMRAM] unsigned char 
 19444 ;; Return value:  Size  Location     Type
 19445 ;;                  1    wreg      void 
 19446 ;; Registers used:
 19447 ;;		wreg, status,2, status,0, cstack
 19448 ;; Tracked objects:
 19449 ;;		On entry : 0/0
 19450 ;;		On exit  : 0/0
 19451 ;;		Unchanged: 0/0
 19452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19456 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19457 ;;Total ram usage:        1 bytes
 19458 ;; Hardware stack levels used:    1
 19459 ;; Hardware stack levels required when called:    1
 19460 ;; This function calls:
 19461 ;;		i2_lcdNibble
 19462 ;; This function is called by:
 19463 ;;		i2_printf
 19464 ;; This function uses a non-reentrant model
 19465 ;;
 19466                           
 19467                           	psect	text77
 19468  00451A                     __ptext77:
 19469                           	opt stack 0
 19470  00451A                     i2_putch:
 19471                           	opt stack 19
 19472                           
 19473                           ;incstack = 0
 19474                           ;i2putch@data stored from wreg
 19475  00451A  6E03               	movwf	i2putch@data,c
 19476                           
 19477                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19478  00451C  848C               	bsf	3980,2,c	;volatile
 19479                           
 19480                           ;lcd.c: 22: lcdNibble(data);
 19481  00451E  5003               	movf	i2putch@data,w,c
 19482  004520  ECA5  F01E         	call	i2_lcdNibble
 19483  004524  0012               	return		;funcret
 19484  004526                     __end_ofi2_putch:
 19485                           	opt stack 0
 19486                           pclatu	equ	0xFFB
 19487                           pclath	equ	0xFFA
 19488                           tblptru	equ	0xFF8
 19489                           tblptrh	equ	0xFF7
 19490                           tblptrl	equ	0xFF6
 19491                           tablat	equ	0xFF5
 19492                           prodh	equ	0xFF4
 19493                           prodl	equ	0xFF3
 19494                           intcon	equ	0xFF2
 19495                           intcon2	equ	0xFF1
 19496                           intcon3	equ	0xFF0
 19497                           indf0	equ	0xFEF
 19498                           postinc0	equ	0xFEE
 19499                           fsr0h	equ	0xFEA
 19500                           fsr0l	equ	0xFE9
 19501                           wreg	equ	0xFE8
 19502                           postdec1	equ	0xFE5
 19503                           fsr1h	equ	0xFE2
 19504                           fsr1l	equ	0xFE1
 19505                           indf2	equ	0xFDF
 19506                           postinc2	equ	0xFDE
 19507                           postdec2	equ	0xFDD
 19508                           fsr2h	equ	0xFDA
 19509                           fsr2l	equ	0xFD9
 19510                           status	equ	0xFD8
 19511                           
 19512 ;; *************** function i2_isdigit *****************
 19513 ;; Defined at:
 19514 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19515 ;; Parameters:    Size  Location     Type
 19516 ;;  c               1    wreg     unsigned char 
 19517 ;; Auto vars:     Size  Location     Type
 19518 ;;  c               1    2[COMRAM] unsigned char 
 19519 ;; Return value:  Size  Location     Type
 19520 ;;		None               void
 19521 ;; Registers used:
 19522 ;;		wreg, status,2, status,0
 19523 ;; Tracked objects:
 19524 ;;		On entry : 0/0
 19525 ;;		On exit  : 0/0
 19526 ;;		Unchanged: 0/0
 19527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19532 ;;Total ram usage:        3 bytes
 19533 ;; Hardware stack levels used:    1
 19534 ;; This function calls:
 19535 ;;		Nothing
 19536 ;; This function is called by:
 19537 ;;		i2_printf
 19538 ;; This function uses a non-reentrant model
 19539 ;;
 19540                           
 19541                           	psect	text78
 19542  004472                     __ptext78:
 19543                           	opt stack 0
 19544  004472                     i2_isdigit:
 19545                           	opt stack 20
 19546                           
 19547                           ;incstack = 0
 19548                           ;i2isdigit@c stored from wreg
 19549  004472  6E03               	movwf	i2isdigit@c,c
 19550  004474  0E00               	movlw	0
 19551  004476  6E02               	movwf	i2_isdigit$1881,c
 19552  004478  0E3A               	movlw	58
 19553  00447A  6003               	cpfslt	i2isdigit@c,c
 19554  00447C  D005               	goto	i2l5224
 19555  00447E  0E2F               	movlw	47
 19556  004480  6403               	cpfsgt	i2isdigit@c,c
 19557  004482  D002               	goto	i2l5224
 19558  004484  0E01               	movlw	1
 19559  004486  6E02               	movwf	i2_isdigit$1881,c
 19560  004488                     i2l5224:
 19561  004488  C002  F001         	movff	i2_isdigit$1881,??i2_isdigit
 19562  00448C  3001               	rrcf	??i2_isdigit,w,c
 19563  00448E  0012               	return	
 19564  004490                     __end_ofi2_isdigit:
 19565                           	opt stack 0
 19566                           pclatu	equ	0xFFB
 19567                           pclath	equ	0xFFA
 19568                           tblptru	equ	0xFF8
 19569                           tblptrh	equ	0xFF7
 19570                           tblptrl	equ	0xFF6
 19571                           tablat	equ	0xFF5
 19572                           prodh	equ	0xFF4
 19573                           prodl	equ	0xFF3
 19574                           intcon	equ	0xFF2
 19575                           intcon2	equ	0xFF1
 19576                           intcon3	equ	0xFF0
 19577                           indf0	equ	0xFEF
 19578                           postinc0	equ	0xFEE
 19579                           fsr0h	equ	0xFEA
 19580                           fsr0l	equ	0xFE9
 19581                           wreg	equ	0xFE8
 19582                           postdec1	equ	0xFE5
 19583                           fsr1h	equ	0xFE2
 19584                           fsr1l	equ	0xFE1
 19585                           indf2	equ	0xFDF
 19586                           postinc2	equ	0xFDE
 19587                           postdec2	equ	0xFDD
 19588                           fsr2h	equ	0xFDA
 19589                           fsr2l	equ	0xFD9
 19590                           status	equ	0xFD8
 19591                           
 19592 ;; *************** function i2___wmul *****************
 19593 ;; Defined at:
 19594 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19595 ;; Parameters:    Size  Location     Type
 19596 ;;  multiplier      2    0[COMRAM] unsigned int 
 19597 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19598 ;; Auto vars:     Size  Location     Type
 19599 ;;  __wmul          2    4[COMRAM] unsigned int 
 19600 ;; Return value:  Size  Location     Type
 19601 ;;                  2    0[COMRAM] unsigned int 
 19602 ;; Registers used:
 19603 ;;		wreg, status,2, status,0, prodl, prodh
 19604 ;; Tracked objects:
 19605 ;;		On entry : 0/0
 19606 ;;		On exit  : 0/0
 19607 ;;		Unchanged: 0/0
 19608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;Total ram usage:        6 bytes
 19614 ;; Hardware stack levels used:    1
 19615 ;; This function calls:
 19616 ;;		Nothing
 19617 ;; This function is called by:
 19618 ;;		_printSortTimer
 19619 ;;		_retrieveLog
 19620 ;;		i2_printf
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           	psect	text79
 19625  00439A                     __ptext79:
 19626                           	opt stack 0
 19627  00439A                     i2___wmul:
 19628                           	opt stack 20
 19629                           
 19630                           ;incstack = 0
 19631  00439A  5001               	movf	i2___wmul@multiplier,w,c
 19632  00439C  0203               	mulwf	i2___wmul@multiplicand,c
 19633  00439E  CFF3 F005          	movff	prodl,i2___wmul@product
 19634  0043A2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19635  0043A6  5001               	movf	i2___wmul@multiplier,w,c
 19636  0043A8  0204               	mulwf	i2___wmul@multiplicand+1,c
 19637  0043AA  50F3               	movf	prodl,w,c
 19638  0043AC  2606               	addwf	i2___wmul@product+1,f,c
 19639  0043AE  5002               	movf	i2___wmul@multiplier+1,w,c
 19640  0043B0  0203               	mulwf	i2___wmul@multiplicand,c
 19641  0043B2  50F3               	movf	prodl,w,c
 19642  0043B4  2606               	addwf	i2___wmul@product+1,f,c
 19643  0043B6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19644  0043BA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19645  0043BE  0012               	return	
 19646  0043C0                     __end_ofi2___wmul:
 19647                           	opt stack 0
 19648                           pclatu	equ	0xFFB
 19649                           pclath	equ	0xFFA
 19650                           tblptru	equ	0xFF8
 19651                           tblptrh	equ	0xFF7
 19652                           tblptrl	equ	0xFF6
 19653                           tablat	equ	0xFF5
 19654                           prodh	equ	0xFF4
 19655                           prodl	equ	0xFF3
 19656                           intcon	equ	0xFF2
 19657                           intcon2	equ	0xFF1
 19658                           intcon3	equ	0xFF0
 19659                           indf0	equ	0xFEF
 19660                           postinc0	equ	0xFEE
 19661                           fsr0h	equ	0xFEA
 19662                           fsr0l	equ	0xFE9
 19663                           wreg	equ	0xFE8
 19664                           postdec1	equ	0xFE5
 19665                           fsr1h	equ	0xFE2
 19666                           fsr1l	equ	0xFE1
 19667                           indf2	equ	0xFDF
 19668                           postinc2	equ	0xFDE
 19669                           postdec2	equ	0xFDD
 19670                           fsr2h	equ	0xFDA
 19671                           fsr2l	equ	0xFD9
 19672                           status	equ	0xFD8
 19673                           
 19674 ;; *************** function i2___lwmod *****************
 19675 ;; Defined at:
 19676 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19677 ;; Parameters:    Size  Location     Type
 19678 ;;  dividend        2    0[COMRAM] unsigned int 
 19679 ;;  divisor         2    2[COMRAM] unsigned int 
 19680 ;; Auto vars:     Size  Location     Type
 19681 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19682 ;; Return value:  Size  Location     Type
 19683 ;;                  2    0[COMRAM] unsigned int 
 19684 ;; Registers used:
 19685 ;;		wreg, status,2, status,0
 19686 ;; Tracked objects:
 19687 ;;		On entry : 0/0
 19688 ;;		On exit  : 0/0
 19689 ;;		Unchanged: 0/0
 19690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19695 ;;Total ram usage:        5 bytes
 19696 ;; Hardware stack levels used:    1
 19697 ;; This function calls:
 19698 ;;		Nothing
 19699 ;; This function is called by:
 19700 ;;		_printSortTimer
 19701 ;;		i2_printf
 19702 ;; This function uses a non-reentrant model
 19703 ;;
 19704                           
 19705                           	psect	text80
 19706  003F6C                     __ptext80:
 19707                           	opt stack 0
 19708  003F6C                     i2___lwmod:
 19709                           	opt stack 20
 19710                           
 19711                           ;incstack = 0
 19712  003F6C  5003               	movf	i2___lwmod@divisor,w,c
 19713  003F6E  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19714  003F70  B4D8               	btfsc	status,2,c
 19715  003F72  D018               	goto	i2l1681
 19716  003F74  0E01               	movlw	1
 19717  003F76  6E05               	movwf	i2___lwmod@counter,c
 19718  003F78  D004               	goto	i2l5256
 19719  003F7A                     i2l5254:
 19720  003F7A  90D8               	bcf	status,0,c
 19721  003F7C  3603               	rlcf	i2___lwmod@divisor,f,c
 19722  003F7E  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19723  003F80  2A05               	incf	i2___lwmod@counter,f,c
 19724  003F82                     i2l5256:
 19725  003F82  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19726  003F84  D7FA               	goto	i2l5254
 19727  003F86                     i2l5258:
 19728  003F86  5003               	movf	i2___lwmod@divisor,w,c
 19729  003F88  5C01               	subwf	i2___lwmod@dividend,w,c
 19730  003F8A  5004               	movf	i2___lwmod@divisor+1,w,c
 19731  003F8C  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19732  003F8E  A0D8               	btfss	status,0,c
 19733  003F90  D004               	goto	i2l5262
 19734  003F92  5003               	movf	i2___lwmod@divisor,w,c
 19735  003F94  5E01               	subwf	i2___lwmod@dividend,f,c
 19736  003F96  5004               	movf	i2___lwmod@divisor+1,w,c
 19737  003F98  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19738  003F9A                     i2l5262:
 19739  003F9A  90D8               	bcf	status,0,c
 19740  003F9C  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19741  003F9E  3203               	rrcf	i2___lwmod@divisor,f,c
 19742  003FA0  2E05               	decfsz	i2___lwmod@counter,f,c
 19743  003FA2  D7F1               	goto	i2l5258
 19744  003FA4                     i2l1681:
 19745  003FA4  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19746  003FA8  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19747  003FAC  0012               	return		;funcret
 19748  003FAE                     __end_ofi2___lwmod:
 19749                           	opt stack 0
 19750                           pclatu	equ	0xFFB
 19751                           pclath	equ	0xFFA
 19752                           tblptru	equ	0xFF8
 19753                           tblptrh	equ	0xFF7
 19754                           tblptrl	equ	0xFF6
 19755                           tablat	equ	0xFF5
 19756                           prodh	equ	0xFF4
 19757                           prodl	equ	0xFF3
 19758                           intcon	equ	0xFF2
 19759                           intcon2	equ	0xFF1
 19760                           intcon3	equ	0xFF0
 19761                           indf0	equ	0xFEF
 19762                           postinc0	equ	0xFEE
 19763                           fsr0h	equ	0xFEA
 19764                           fsr0l	equ	0xFE9
 19765                           wreg	equ	0xFE8
 19766                           postdec1	equ	0xFE5
 19767                           fsr1h	equ	0xFE2
 19768                           fsr1l	equ	0xFE1
 19769                           indf2	equ	0xFDF
 19770                           postinc2	equ	0xFDE
 19771                           postdec2	equ	0xFDD
 19772                           fsr2h	equ	0xFDA
 19773                           fsr2l	equ	0xFD9
 19774                           status	equ	0xFD8
 19775                           
 19776 ;; *************** function i2___lwdiv *****************
 19777 ;; Defined at:
 19778 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19779 ;; Parameters:    Size  Location     Type
 19780 ;;  dividend        2    5[COMRAM] unsigned int 
 19781 ;;  divisor         2    7[COMRAM] unsigned int 
 19782 ;; Auto vars:     Size  Location     Type
 19783 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19784 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19785 ;; Return value:  Size  Location     Type
 19786 ;;                  2    5[COMRAM] unsigned int 
 19787 ;; Registers used:
 19788 ;;		wreg, status,2, status,0
 19789 ;; Tracked objects:
 19790 ;;		On entry : 0/0
 19791 ;;		On exit  : 0/0
 19792 ;;		Unchanged: 0/0
 19793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19795 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19798 ;;Total ram usage:        7 bytes
 19799 ;; Hardware stack levels used:    1
 19800 ;; This function calls:
 19801 ;;		Nothing
 19802 ;; This function is called by:
 19803 ;;		_printSortTimer
 19804 ;;		i2_printf
 19805 ;; This function uses a non-reentrant model
 19806 ;;
 19807                           
 19808                           	psect	text81
 19809  003DA0                     __ptext81:
 19810                           	opt stack 0
 19811  003DA0                     i2___lwdiv:
 19812                           	opt stack 20
 19813                           
 19814                           ;incstack = 0
 19815  003DA0  0E00               	movlw	0
 19816  003DA2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19817  003DA4  0E00               	movlw	0
 19818  003DA6  6E0A               	movwf	i2___lwdiv@quotient,c
 19819  003DA8  5008               	movf	i2___lwdiv@divisor,w,c
 19820  003DAA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19821  003DAC  B4D8               	btfsc	status,2,c
 19822  003DAE  D01C               	goto	i2l1671
 19823  003DB0  0E01               	movlw	1
 19824  003DB2  6E0C               	movwf	i2___lwdiv@counter,c
 19825  003DB4  D004               	goto	i2l5236
 19826  003DB6                     i2l5234:
 19827  003DB6  90D8               	bcf	status,0,c
 19828  003DB8  3608               	rlcf	i2___lwdiv@divisor,f,c
 19829  003DBA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19830  003DBC  2A0C               	incf	i2___lwdiv@counter,f,c
 19831  003DBE                     i2l5236:
 19832  003DBE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19833  003DC0  D7FA               	goto	i2l5234
 19834  003DC2                     i2l5238:
 19835  003DC2  90D8               	bcf	status,0,c
 19836  003DC4  360A               	rlcf	i2___lwdiv@quotient,f,c
 19837  003DC6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 19838  003DC8  5008               	movf	i2___lwdiv@divisor,w,c
 19839  003DCA  5C06               	subwf	i2___lwdiv@dividend,w,c
 19840  003DCC  5009               	movf	i2___lwdiv@divisor+1,w,c
 19841  003DCE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 19842  003DD0  A0D8               	btfss	status,0,c
 19843  003DD2  D005               	goto	i2l5246
 19844  003DD4  5008               	movf	i2___lwdiv@divisor,w,c
 19845  003DD6  5E06               	subwf	i2___lwdiv@dividend,f,c
 19846  003DD8  5009               	movf	i2___lwdiv@divisor+1,w,c
 19847  003DDA  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 19848  003DDC  800A               	bsf	i2___lwdiv@quotient,0,c
 19849  003DDE                     i2l5246:
 19850  003DDE  90D8               	bcf	status,0,c
 19851  003DE0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 19852  003DE2  3208               	rrcf	i2___lwdiv@divisor,f,c
 19853  003DE4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 19854  003DE6  D7ED               	goto	i2l5238
 19855  003DE8                     i2l1671:
 19856  003DE8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 19857  003DEC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 19858  003DF0  0012               	return		;funcret
 19859  003DF2                     __end_ofi2___lwdiv:
 19860                           	opt stack 0
 19861                           pclatu	equ	0xFFB
 19862                           pclath	equ	0xFFA
 19863                           tblptru	equ	0xFF8
 19864                           tblptrh	equ	0xFF7
 19865                           tblptrl	equ	0xFF6
 19866                           tablat	equ	0xFF5
 19867                           prodh	equ	0xFF4
 19868                           prodl	equ	0xFF3
 19869                           intcon	equ	0xFF2
 19870                           intcon2	equ	0xFF1
 19871                           intcon3	equ	0xFF0
 19872                           indf0	equ	0xFEF
 19873                           postinc0	equ	0xFEE
 19874                           fsr0h	equ	0xFEA
 19875                           fsr0l	equ	0xFE9
 19876                           wreg	equ	0xFE8
 19877                           postdec1	equ	0xFE5
 19878                           fsr1h	equ	0xFE2
 19879                           fsr1l	equ	0xFE1
 19880                           indf2	equ	0xFDF
 19881                           postinc2	equ	0xFDE
 19882                           postdec2	equ	0xFDD
 19883                           fsr2h	equ	0xFDA
 19884                           fsr2l	equ	0xFD9
 19885                           status	equ	0xFD8
 19886                           
 19887 ;; *************** function i2_lcdInst *****************
 19888 ;; Defined at:
 19889 ;;		line 15 in file "lcd.c"
 19890 ;; Parameters:    Size  Location     Type
 19891 ;;  data            1    wreg     unsigned char 
 19892 ;; Auto vars:     Size  Location     Type
 19893 ;;  data            1    2[COMRAM] unsigned char 
 19894 ;; Return value:  Size  Location     Type
 19895 ;;                  1    wreg      void 
 19896 ;; Registers used:
 19897 ;;		wreg, status,2, status,0, cstack
 19898 ;; Tracked objects:
 19899 ;;		On entry : 0/0
 19900 ;;		On exit  : 0/0
 19901 ;;		Unchanged: 0/0
 19902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19906 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;Total ram usage:        1 bytes
 19908 ;; Hardware stack levels used:    1
 19909 ;; Hardware stack levels required when called:    1
 19910 ;; This function calls:
 19911 ;;		i2_lcdNibble
 19912 ;; This function is called by:
 19913 ;;		_change_state_to_menu_11
 19914 ;;		_change_state_to_menu_23
 19915 ;;		_change_state_to_logs_11
 19916 ;;		_change_state_to_logs_12
 19917 ;;		_change_state_to_logs_22
 19918 ;;		_change_state_to_logs_23
 19919 ;;		_change_state_to_logs_33
 19920 ;;		_change_state_to_logs_34
 19921 ;;		_printSortTimer
 19922 ;;		i2_change_state_to_menu_start
 19923 ;;		i2_change_state_to_menu_12
 19924 ;;		i2_change_state_to_menu_22
 19925 ;;		i2_printRTC
 19926 ;; This function uses a non-reentrant model
 19927 ;;
 19928                           
 19929                           	psect	text82
 19930  004526                     __ptext82:
 19931                           	opt stack 0
 19932  004526                     i2_lcdInst:
 19933                           	opt stack 19
 19934                           
 19935                           ;incstack = 0
 19936                           ;i2lcdInst@data stored from wreg
 19937  004526  6E03               	movwf	i2lcdInst@data,c
 19938                           
 19939                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19940  004528  948C               	bcf	3980,2,c	;volatile
 19941                           
 19942                           ;lcd.c: 17: lcdNibble(data);
 19943  00452A  5003               	movf	i2lcdInst@data,w,c
 19944  00452C  ECA5  F01E         	call	i2_lcdNibble
 19945  004530  0012               	return		;funcret
 19946  004532                     __end_ofi2_lcdInst:
 19947                           	opt stack 0
 19948                           pclatu	equ	0xFFB
 19949                           pclath	equ	0xFFA
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           intcon2	equ	0xFF1
 19958                           intcon3	equ	0xFF0
 19959                           indf0	equ	0xFEF
 19960                           postinc0	equ	0xFEE
 19961                           fsr0h	equ	0xFEA
 19962                           fsr0l	equ	0xFE9
 19963                           wreg	equ	0xFE8
 19964                           postdec1	equ	0xFE5
 19965                           fsr1h	equ	0xFE2
 19966                           fsr1l	equ	0xFE1
 19967                           indf2	equ	0xFDF
 19968                           postinc2	equ	0xFDE
 19969                           postdec2	equ	0xFDD
 19970                           fsr2h	equ	0xFDA
 19971                           fsr2l	equ	0xFD9
 19972                           status	equ	0xFD8
 19973                           
 19974 ;; *************** function i2_lcdNibble *****************
 19975 ;; Defined at:
 19976 ;;		line 25 in file "lcd.c"
 19977 ;; Parameters:    Size  Location     Type
 19978 ;;  data            1    wreg     unsigned char 
 19979 ;; Auto vars:     Size  Location     Type
 19980 ;;  data            1    1[COMRAM] unsigned char 
 19981 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19982 ;; Return value:  Size  Location     Type
 19983 ;;                  1    wreg      void 
 19984 ;; Registers used:
 19985 ;;		wreg, status,2, status,0
 19986 ;; Tracked objects:
 19987 ;;		On entry : 0/0
 19988 ;;		On exit  : 0/0
 19989 ;;		Unchanged: 0/0
 19990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19995 ;;Total ram usage:        2 bytes
 19996 ;; Hardware stack levels used:    1
 19997 ;; This function calls:
 19998 ;;		Nothing
 19999 ;; This function is called by:
 20000 ;;		i2_lcdInst
 20001 ;;		i2_putch
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           	psect	text83
 20006  003D4A                     __ptext83:
 20007                           	opt stack 0
 20008  003D4A                     i2_lcdNibble:
 20009                           	opt stack 19
 20010                           
 20011                           ;incstack = 0
 20012                           ;i2lcdNibble@data stored from wreg
 20013  003D4A  6E02               	movwf	i2lcdNibble@data,c
 20014                           
 20015                           ;lcd.c: 27: char temp = data & 0xF0;
 20016  003D4C  5002               	movf	i2lcdNibble@data,w,c
 20017  003D4E  0BF0               	andlw	240
 20018  003D50  6E01               	movwf	i2lcdNibble@temp,c
 20019                           
 20020                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20021  003D52  508C               	movf	3980,w,c	;volatile
 20022  003D54  0B0F               	andlw	15
 20023  003D56  6E8C               	movwf	3980,c	;volatile
 20024                           
 20025                           ;lcd.c: 29: LATD = temp | LATD;
 20026  003D58  5001               	movf	i2lcdNibble@temp,w,c
 20027  003D5A  108C               	iorwf	3980,w,c	;volatile
 20028  003D5C  6E8C               	movwf	3980,c	;volatile
 20029                           
 20030                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20031  003D5E  868C               	bsf	3980,3,c	;volatile
 20032                           
 20033                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20034  003D60  0E42               	movlw	66
 20035  003D62                     i2u792_47:
 20036  003D62  2EE8               	decfsz	wreg,f,c
 20037  003D64  D7FE               	bra	i2u792_47
 20038  003D66  D000               	nop2	
 20039                           
 20040                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20041  003D68  968C               	bcf	3980,3,c	;volatile
 20042                           
 20043                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20044  003D6A  0E42               	movlw	66
 20045  003D6C                     i2u793_47:
 20046  003D6C  2EE8               	decfsz	wreg,f,c
 20047  003D6E  D7FE               	bra	i2u793_47
 20048  003D70  D000               	nop2	
 20049                           
 20050                           ;lcd.c: 36: data = data << 4;
 20051  003D72  3802               	swapf	i2lcdNibble@data,w,c
 20052  003D74  0BF0               	andlw	240
 20053  003D76  6E02               	movwf	i2lcdNibble@data,c
 20054                           
 20055                           ;lcd.c: 38: temp = data & 0xF0;
 20056  003D78  5002               	movf	i2lcdNibble@data,w,c
 20057  003D7A  0BF0               	andlw	240
 20058  003D7C  6E01               	movwf	i2lcdNibble@temp,c
 20059                           
 20060                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20061  003D7E  508C               	movf	3980,w,c	;volatile
 20062  003D80  0B0F               	andlw	15
 20063  003D82  6E8C               	movwf	3980,c	;volatile
 20064                           
 20065                           ;lcd.c: 40: LATD = temp | LATD;
 20066  003D84  5001               	movf	i2lcdNibble@temp,w,c
 20067  003D86  108C               	iorwf	3980,w,c	;volatile
 20068  003D88  6E8C               	movwf	3980,c	;volatile
 20069                           
 20070                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20071  003D8A  868C               	bsf	3980,3,c	;volatile
 20072                           
 20073                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20074  003D8C  0E42               	movlw	66
 20075  003D8E                     i2u794_47:
 20076  003D8E  2EE8               	decfsz	wreg,f,c
 20077  003D90  D7FE               	bra	i2u794_47
 20078  003D92  D000               	nop2	
 20079                           
 20080                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20081  003D94  968C               	bcf	3980,3,c	;volatile
 20082                           
 20083                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20084  003D96  0E42               	movlw	66
 20085  003D98                     i2u795_47:
 20086  003D98  2EE8               	decfsz	wreg,f,c
 20087  003D9A  D7FE               	bra	i2u795_47
 20088  003D9C  D000               	nop2	
 20089  003D9E  0012               	return		;funcret
 20090  003DA0                     __end_ofi2_lcdNibble:
 20091                           	opt stack 0
 20092                           pclatu	equ	0xFFB
 20093                           pclath	equ	0xFFA
 20094                           tblptru	equ	0xFF8
 20095                           tblptrh	equ	0xFF7
 20096                           tblptrl	equ	0xFF6
 20097                           tablat	equ	0xFF5
 20098                           prodh	equ	0xFF4
 20099                           prodl	equ	0xFF3
 20100                           intcon	equ	0xFF2
 20101                           intcon2	equ	0xFF1
 20102                           intcon3	equ	0xFF0
 20103                           indf0	equ	0xFEF
 20104                           postinc0	equ	0xFEE
 20105                           fsr0h	equ	0xFEA
 20106                           fsr0l	equ	0xFE9
 20107                           wreg	equ	0xFE8
 20108                           postdec1	equ	0xFE5
 20109                           fsr1h	equ	0xFE2
 20110                           fsr1l	equ	0xFE1
 20111                           indf2	equ	0xFDF
 20112                           postinc2	equ	0xFDE
 20113                           postdec2	equ	0xFDD
 20114                           fsr2h	equ	0xFDA
 20115                           fsr2l	equ	0xFD9
 20116                           status	equ	0xFD8
 20117                           
 20118 ;; *************** function i2_getRTC *****************
 20119 ;; Defined at:
 20120 ;;		line 44 in file "RTC.c"
 20121 ;; Parameters:    Size  Location     Type
 20122 ;;		None
 20123 ;; Auto vars:     Size  Location     Type
 20124 ;;  getRTC          2    3[COMRAM] int 
 20125 ;; Return value:  Size  Location     Type
 20126 ;;                  1    wreg      void 
 20127 ;; Registers used:
 20128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20129 ;; Tracked objects:
 20130 ;;		On entry : 0/0
 20131 ;;		On exit  : 0/0
 20132 ;;		Unchanged: 0/0
 20133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20138 ;;Total ram usage:        2 bytes
 20139 ;; Hardware stack levels used:    1
 20140 ;; Hardware stack levels required when called:    2
 20141 ;; This function calls:
 20142 ;;		i2_I2C_Master_Read
 20143 ;;		i2_I2C_Master_Start
 20144 ;;		i2_I2C_Master_Stop
 20145 ;;		i2_I2C_Master_Write
 20146 ;; This function is called by:
 20147 ;;		_printSortTimer
 20148 ;;		i2_printRTC
 20149 ;; This function uses a non-reentrant model
 20150 ;;
 20151                           
 20152                           	psect	text84
 20153  003A34                     __ptext84:
 20154                           	opt stack 0
 20155  003A34                     i2_getRTC:
 20156                           	opt stack 18
 20157                           
 20158                           ;RTC.c: 48: I2C_Master_Start();
 20159                           
 20160                           ;incstack = 0
 20161  003A34  ECB3  F022         	call	i2_I2C_Master_Start	;wreg free
 20162                           
 20163                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20164  003A38  0E00               	movlw	0
 20165  003A3A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20166  003A3C  0ED0               	movlw	208
 20167  003A3E  6E02               	movwf	i2I2C_Master_Write@d,c
 20168  003A40  EC9E  F022         	call	i2_I2C_Master_Write	;wreg free
 20169                           
 20170                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20171  003A44  0E00               	movlw	0
 20172  003A46  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20173  003A48  0E00               	movlw	0
 20174  003A4A  6E02               	movwf	i2I2C_Master_Write@d,c
 20175  003A4C  EC9E  F022         	call	i2_I2C_Master_Write	;wreg free
 20176                           
 20177                           ;RTC.c: 51: I2C_Master_Stop();
 20178  003A50  ECAF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20179                           
 20180                           ;RTC.c: 54: I2C_Master_Start();
 20181  003A54  ECB3  F022         	call	i2_I2C_Master_Start	;wreg free
 20182                           
 20183                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20184  003A58  0E00               	movlw	0
 20185  003A5A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20186  003A5C  0ED1               	movlw	209
 20187  003A5E  6E02               	movwf	i2I2C_Master_Write@d,c
 20188  003A60  EC9E  F022         	call	i2_I2C_Master_Write	;wreg free
 20189                           
 20190                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20191  003A64  0E00               	movlw	0
 20192  003A66  6E05               	movwf	i2getRTC@i+1,c
 20193  003A68  0E00               	movlw	0
 20194  003A6A  6E04               	movwf	i2getRTC@i,c
 20195  003A6C                     i2l5486:
 20196  003A6C  BE05               	btfsc	i2getRTC@i+1,7,c
 20197  003A6E  D006               	goto	i2l5490
 20198  003A70  5005               	movf	i2getRTC@i+1,w,c
 20199  003A72  E111               	bnz	i2l5496
 20200  003A74  0E06               	movlw	6
 20201  003A76  5C04               	subwf	i2getRTC@i,w,c
 20202  003A78  B0D8               	btfsc	status,0,c
 20203  003A7A  D00D               	goto	i2l5496
 20204  003A7C                     i2l5490:
 20205                           
 20206                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20207  003A7C  0E24               	movlw	low _time
 20208  003A7E  2404               	addwf	i2getRTC@i,w,c
 20209  003A80  6ED9               	movwf	fsr2l,c
 20210  003A82  0E01               	movlw	high _time
 20211  003A84  2005               	addwfc	i2getRTC@i+1,w,c
 20212  003A86  6EDA               	movwf	fsr2h,c
 20213  003A88  0E01               	movlw	1
 20214  003A8A  ECE0  F021         	call	i2_I2C_Master_Read
 20215  003A8E  6EDF               	movwf	indf2,c
 20216  003A90  4A04               	infsnz	i2getRTC@i,f,c
 20217  003A92  2A05               	incf	i2getRTC@i+1,f,c
 20218  003A94  D7EB               	goto	i2l5486
 20219  003A96                     i2l5496:
 20220                           
 20221                           ;RTC.c: 58: }
 20222                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20223  003A96  0E00               	movlw	0
 20224  003A98  ECE0  F021         	call	i2_I2C_Master_Read
 20225  003A9C  0101               	movlb	1	; () banked
 20226  003A9E  6F2A               	movwf	(_time+6)& (0+255),b
 20227                           
 20228                           ;RTC.c: 60: I2C_Master_Stop();
 20229  003AA0  ECAF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20230  003AA4  0012               	return		;funcret
 20231  003AA6                     __end_ofi2_getRTC:
 20232                           	opt stack 0
 20233                           pclatu	equ	0xFFB
 20234                           pclath	equ	0xFFA
 20235                           tblptru	equ	0xFF8
 20236                           tblptrh	equ	0xFF7
 20237                           tblptrl	equ	0xFF6
 20238                           tablat	equ	0xFF5
 20239                           prodh	equ	0xFF4
 20240                           prodl	equ	0xFF3
 20241                           intcon	equ	0xFF2
 20242                           intcon2	equ	0xFF1
 20243                           intcon3	equ	0xFF0
 20244                           indf0	equ	0xFEF
 20245                           postinc0	equ	0xFEE
 20246                           fsr0h	equ	0xFEA
 20247                           fsr0l	equ	0xFE9
 20248                           wreg	equ	0xFE8
 20249                           postdec1	equ	0xFE5
 20250                           fsr1h	equ	0xFE2
 20251                           fsr1l	equ	0xFE1
 20252                           indf2	equ	0xFDF
 20253                           postinc2	equ	0xFDE
 20254                           postdec2	equ	0xFDD
 20255                           fsr2h	equ	0xFDA
 20256                           fsr2l	equ	0xFD9
 20257                           status	equ	0xFD8
 20258                           
 20259 ;; *************** function i2_I2C_Master_Write *****************
 20260 ;; Defined at:
 20261 ;;		line 49 in file "I2C.c"
 20262 ;; Parameters:    Size  Location     Type
 20263 ;;  d               2    1[COMRAM] unsigned int 
 20264 ;; Auto vars:     Size  Location     Type
 20265 ;;		None
 20266 ;; Return value:  Size  Location     Type
 20267 ;;                  1    wreg      void 
 20268 ;; Registers used:
 20269 ;;		wreg, status,2, status,0, cstack
 20270 ;; Tracked objects:
 20271 ;;		On entry : 0/0
 20272 ;;		On exit  : 0/0
 20273 ;;		Unchanged: 0/0
 20274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20278 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20279 ;;Total ram usage:        2 bytes
 20280 ;; Hardware stack levels used:    1
 20281 ;; Hardware stack levels required when called:    1
 20282 ;; This function calls:
 20283 ;;		i2_I2C_Master_Wait
 20284 ;; This function is called by:
 20285 ;;		i2_getRTC
 20286 ;; This function uses a non-reentrant model
 20287 ;;
 20288                           
 20289                           	psect	text85
 20290  00453C                     __ptext85:
 20291                           	opt stack 0
 20292  00453C                     i2_I2C_Master_Write:
 20293                           	opt stack 18
 20294                           
 20295                           ;I2C.c: 51: I2C_Master_Wait();
 20296                           
 20297                           ;incstack = 0
 20298  00453C  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20299                           
 20300                           ;I2C.c: 52: SSPBUF = d;
 20301  004540  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20302  004544  0012               	return		;funcret
 20303  004546                     __end_ofi2_I2C_Master_Write:
 20304                           	opt stack 0
 20305                           pclatu	equ	0xFFB
 20306                           pclath	equ	0xFFA
 20307                           tblptru	equ	0xFF8
 20308                           tblptrh	equ	0xFF7
 20309                           tblptrl	equ	0xFF6
 20310                           tablat	equ	0xFF5
 20311                           prodh	equ	0xFF4
 20312                           prodl	equ	0xFF3
 20313                           intcon	equ	0xFF2
 20314                           intcon2	equ	0xFF1
 20315                           intcon3	equ	0xFF0
 20316                           indf0	equ	0xFEF
 20317                           postinc0	equ	0xFEE
 20318                           fsr0h	equ	0xFEA
 20319                           fsr0l	equ	0xFE9
 20320                           wreg	equ	0xFE8
 20321                           postdec1	equ	0xFE5
 20322                           fsr1h	equ	0xFE2
 20323                           fsr1l	equ	0xFE1
 20324                           indf2	equ	0xFDF
 20325                           postinc2	equ	0xFDE
 20326                           postdec2	equ	0xFDD
 20327                           fsr2h	equ	0xFDA
 20328                           fsr2l	equ	0xFD9
 20329                           status	equ	0xFD8
 20330                           
 20331 ;; *************** function i2_I2C_Master_Stop *****************
 20332 ;; Defined at:
 20333 ;;		line 43 in file "I2C.c"
 20334 ;; Parameters:    Size  Location     Type
 20335 ;;		None
 20336 ;; Auto vars:     Size  Location     Type
 20337 ;;		None
 20338 ;; Return value:  Size  Location     Type
 20339 ;;                  1    wreg      void 
 20340 ;; Registers used:
 20341 ;;		wreg, status,2, status,0, cstack
 20342 ;; Tracked objects:
 20343 ;;		On entry : 0/0
 20344 ;;		On exit  : 0/0
 20345 ;;		Unchanged: 0/0
 20346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20351 ;;Total ram usage:        0 bytes
 20352 ;; Hardware stack levels used:    1
 20353 ;; Hardware stack levels required when called:    1
 20354 ;; This function calls:
 20355 ;;		i2_I2C_Master_Wait
 20356 ;; This function is called by:
 20357 ;;		i2_getRTC
 20358 ;; This function uses a non-reentrant model
 20359 ;;
 20360                           
 20361                           	psect	text86
 20362  00455E                     __ptext86:
 20363                           	opt stack 0
 20364  00455E                     i2_I2C_Master_Stop:
 20365                           	opt stack 18
 20366                           
 20367                           ;I2C.c: 45: I2C_Master_Wait();
 20368                           
 20369                           ;incstack = 0
 20370  00455E  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20371                           
 20372                           ;I2C.c: 46: PEN = 1;
 20373  004562  84C5               	bsf	4037,2,c	;volatile
 20374  004564  0012               	return		;funcret
 20375  004566                     __end_ofi2_I2C_Master_Stop:
 20376                           	opt stack 0
 20377                           pclatu	equ	0xFFB
 20378                           pclath	equ	0xFFA
 20379                           tblptru	equ	0xFF8
 20380                           tblptrh	equ	0xFF7
 20381                           tblptrl	equ	0xFF6
 20382                           tablat	equ	0xFF5
 20383                           prodh	equ	0xFF4
 20384                           prodl	equ	0xFF3
 20385                           intcon	equ	0xFF2
 20386                           intcon2	equ	0xFF1
 20387                           intcon3	equ	0xFF0
 20388                           indf0	equ	0xFEF
 20389                           postinc0	equ	0xFEE
 20390                           fsr0h	equ	0xFEA
 20391                           fsr0l	equ	0xFE9
 20392                           wreg	equ	0xFE8
 20393                           postdec1	equ	0xFE5
 20394                           fsr1h	equ	0xFE2
 20395                           fsr1l	equ	0xFE1
 20396                           indf2	equ	0xFDF
 20397                           postinc2	equ	0xFDE
 20398                           postdec2	equ	0xFDD
 20399                           fsr2h	equ	0xFDA
 20400                           fsr2l	equ	0xFD9
 20401                           status	equ	0xFD8
 20402                           
 20403 ;; *************** function i2_I2C_Master_Start *****************
 20404 ;; Defined at:
 20405 ;;		line 31 in file "I2C.c"
 20406 ;; Parameters:    Size  Location     Type
 20407 ;;		None
 20408 ;; Auto vars:     Size  Location     Type
 20409 ;;		None
 20410 ;; Return value:  Size  Location     Type
 20411 ;;                  1    wreg      void 
 20412 ;; Registers used:
 20413 ;;		wreg, status,2, status,0, cstack
 20414 ;; Tracked objects:
 20415 ;;		On entry : 0/0
 20416 ;;		On exit  : 0/0
 20417 ;;		Unchanged: 0/0
 20418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;Total ram usage:        0 bytes
 20424 ;; Hardware stack levels used:    1
 20425 ;; Hardware stack levels required when called:    1
 20426 ;; This function calls:
 20427 ;;		i2_I2C_Master_Wait
 20428 ;; This function is called by:
 20429 ;;		i2_getRTC
 20430 ;; This function uses a non-reentrant model
 20431 ;;
 20432                           
 20433                           	psect	text87
 20434  004566                     __ptext87:
 20435                           	opt stack 0
 20436  004566                     i2_I2C_Master_Start:
 20437                           	opt stack 18
 20438                           
 20439                           ;I2C.c: 33: I2C_Master_Wait();
 20440                           
 20441                           ;incstack = 0
 20442  004566  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20443                           
 20444                           ;I2C.c: 34: SEN = 1;
 20445  00456A  80C5               	bsf	4037,0,c	;volatile
 20446  00456C  0012               	return		;funcret
 20447  00456E                     __end_ofi2_I2C_Master_Start:
 20448                           	opt stack 0
 20449                           pclatu	equ	0xFFB
 20450                           pclath	equ	0xFFA
 20451                           tblptru	equ	0xFF8
 20452                           tblptrh	equ	0xFF7
 20453                           tblptrl	equ	0xFF6
 20454                           tablat	equ	0xFF5
 20455                           prodh	equ	0xFF4
 20456                           prodl	equ	0xFF3
 20457                           intcon	equ	0xFF2
 20458                           intcon2	equ	0xFF1
 20459                           intcon3	equ	0xFF0
 20460                           indf0	equ	0xFEF
 20461                           postinc0	equ	0xFEE
 20462                           fsr0h	equ	0xFEA
 20463                           fsr0l	equ	0xFE9
 20464                           wreg	equ	0xFE8
 20465                           postdec1	equ	0xFE5
 20466                           fsr1h	equ	0xFE2
 20467                           fsr1l	equ	0xFE1
 20468                           indf2	equ	0xFDF
 20469                           postinc2	equ	0xFDE
 20470                           postdec2	equ	0xFDD
 20471                           fsr2h	equ	0xFDA
 20472                           fsr2l	equ	0xFD9
 20473                           status	equ	0xFD8
 20474                           
 20475 ;; *************** function i2_I2C_Master_Read *****************
 20476 ;; Defined at:
 20477 ;;		line 55 in file "I2C.c"
 20478 ;; Parameters:    Size  Location     Type
 20479 ;;  a               1    wreg     unsigned char 
 20480 ;; Auto vars:     Size  Location     Type
 20481 ;;  a               1    1[COMRAM] unsigned char 
 20482 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20483 ;; Return value:  Size  Location     Type
 20484 ;;                  1    wreg      unsigned char 
 20485 ;; Registers used:
 20486 ;;		wreg, status,2, status,0, cstack
 20487 ;; Tracked objects:
 20488 ;;		On entry : 0/0
 20489 ;;		On exit  : 0/0
 20490 ;;		Unchanged: 0/0
 20491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20496 ;;Total ram usage:        2 bytes
 20497 ;; Hardware stack levels used:    1
 20498 ;; Hardware stack levels required when called:    1
 20499 ;; This function calls:
 20500 ;;		i2_I2C_Master_Wait
 20501 ;; This function is called by:
 20502 ;;		i2_getRTC
 20503 ;; This function uses a non-reentrant model
 20504 ;;
 20505                           
 20506                           	psect	text88
 20507  0043C0                     __ptext88:
 20508                           	opt stack 0
 20509  0043C0                     i2_I2C_Master_Read:
 20510                           	opt stack 18
 20511                           
 20512                           ;incstack = 0
 20513                           ;i2I2C_Master_Read@a stored from wreg
 20514  0043C0  6E02               	movwf	i2I2C_Master_Read@a,c
 20515                           
 20516                           ;I2C.c: 57: unsigned char temp;
 20517                           ;I2C.c: 58: I2C_Master_Wait();
 20518  0043C2  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20519                           
 20520                           ;I2C.c: 59: RCEN = 1;
 20521  0043C6  86C5               	bsf	4037,3,c	;volatile
 20522                           
 20523                           ;I2C.c: 60: I2C_Master_Wait();
 20524  0043C8  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20525                           
 20526                           ;I2C.c: 61: temp = SSPBUF;
 20527  0043CC  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20528                           
 20529                           ;I2C.c: 62: I2C_Master_Wait();
 20530  0043D0  EC74  F022         	call	i2_I2C_Master_Wait	;wreg free
 20531                           
 20532                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20533  0043D4  5002               	movf	i2I2C_Master_Read@a,w,c
 20534  0043D6  A4D8               	btfss	status,2,c
 20535  0043D8  D002               	goto	i2u358_40
 20536  0043DA  8AC5               	bsf	4037,5,c	;volatile
 20537  0043DC  D001               	goto	i2l5200
 20538  0043DE                     i2u358_40:
 20539  0043DE  9AC5               	bcf	4037,5,c	;volatile
 20540  0043E0                     i2l5200:
 20541                           
 20542                           ;I2C.c: 64: ACKEN = 1;
 20543  0043E0  88C5               	bsf	4037,4,c	;volatile
 20544                           
 20545                           ;I2C.c: 65: return temp;
 20546  0043E2  5003               	movf	i2I2C_Master_Read@temp,w,c
 20547  0043E4  0012               	return	
 20548  0043E6                     __end_ofi2_I2C_Master_Read:
 20549                           	opt stack 0
 20550                           pclatu	equ	0xFFB
 20551                           pclath	equ	0xFFA
 20552                           tblptru	equ	0xFF8
 20553                           tblptrh	equ	0xFF7
 20554                           tblptrl	equ	0xFF6
 20555                           tablat	equ	0xFF5
 20556                           prodh	equ	0xFF4
 20557                           prodl	equ	0xFF3
 20558                           intcon	equ	0xFF2
 20559                           intcon2	equ	0xFF1
 20560                           intcon3	equ	0xFF0
 20561                           indf0	equ	0xFEF
 20562                           postinc0	equ	0xFEE
 20563                           fsr0h	equ	0xFEA
 20564                           fsr0l	equ	0xFE9
 20565                           wreg	equ	0xFE8
 20566                           postdec1	equ	0xFE5
 20567                           fsr1h	equ	0xFE2
 20568                           fsr1l	equ	0xFE1
 20569                           indf2	equ	0xFDF
 20570                           postinc2	equ	0xFDE
 20571                           postdec2	equ	0xFDD
 20572                           fsr2h	equ	0xFDA
 20573                           fsr2l	equ	0xFD9
 20574                           status	equ	0xFD8
 20575                           
 20576 ;; *************** function i2_I2C_Master_Wait *****************
 20577 ;; Defined at:
 20578 ;;		line 26 in file "I2C.c"
 20579 ;; Parameters:    Size  Location     Type
 20580 ;;		None
 20581 ;; Auto vars:     Size  Location     Type
 20582 ;;		None
 20583 ;; Return value:  Size  Location     Type
 20584 ;;                  1    wreg      void 
 20585 ;; Registers used:
 20586 ;;		wreg, status,2, status,0
 20587 ;; Tracked objects:
 20588 ;;		On entry : 0/0
 20589 ;;		On exit  : 0/0
 20590 ;;		Unchanged: 0/0
 20591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20596 ;;Total ram usage:        1 bytes
 20597 ;; Hardware stack levels used:    1
 20598 ;; This function calls:
 20599 ;;		Nothing
 20600 ;; This function is called by:
 20601 ;;		i2_I2C_Master_Start
 20602 ;;		i2_I2C_Master_Stop
 20603 ;;		i2_I2C_Master_Write
 20604 ;;		i2_I2C_Master_Read
 20605 ;; This function uses a non-reentrant model
 20606 ;;
 20607                           
 20608                           	psect	text89
 20609  0044E8                     __ptext89:
 20610                           	opt stack 0
 20611  0044E8                     i2_I2C_Master_Wait:
 20612                           	opt stack 18
 20613  0044E8                     i2l66:
 20614  0044E8  B4C7               	btfsc	4039,2,c	;volatile
 20615  0044EA  D7FE               	goto	i2l66
 20616  0044EC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20617  0044F0  0E1F               	movlw	31
 20618  0044F2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20619  0044F4  B4D8               	btfsc	status,2,c
 20620  0044F6  0012               	return	
 20621  0044F8  D7F7               	goto	i2l66
 20622  0044FA                     __end_ofi2_I2C_Master_Wait:
 20623                           	opt stack 0
 20624                           pclatu	equ	0xFFB
 20625                           pclath	equ	0xFFA
 20626                           tblptru	equ	0xFF8
 20627                           tblptrh	equ	0xFF7
 20628                           tblptrl	equ	0xFF6
 20629                           tablat	equ	0xFF5
 20630                           prodh	equ	0xFF4
 20631                           prodl	equ	0xFF3
 20632                           intcon	equ	0xFF2
 20633                           intcon2	equ	0xFF1
 20634                           intcon3	equ	0xFF0
 20635                           indf0	equ	0xFEF
 20636                           postinc0	equ	0xFEE
 20637                           fsr0h	equ	0xFEA
 20638                           fsr0l	equ	0xFE9
 20639                           wreg	equ	0xFE8
 20640                           postdec1	equ	0xFE5
 20641                           fsr1h	equ	0xFE2
 20642                           fsr1l	equ	0xFE1
 20643                           indf2	equ	0xFDF
 20644                           postinc2	equ	0xFDE
 20645                           postdec2	equ	0xFDD
 20646                           fsr2h	equ	0xFDA
 20647                           fsr2l	equ	0xFD9
 20648                           status	equ	0xFD8
 20649                           pclatu	equ	0xFFB
 20650                           pclath	equ	0xFFA
 20651                           tblptru	equ	0xFF8
 20652                           tblptrh	equ	0xFF7
 20653                           tblptrl	equ	0xFF6
 20654                           tablat	equ	0xFF5
 20655                           prodh	equ	0xFF4
 20656                           prodl	equ	0xFF3
 20657                           intcon	equ	0xFF2
 20658                           intcon2	equ	0xFF1
 20659                           intcon3	equ	0xFF0
 20660                           indf0	equ	0xFEF
 20661                           postinc0	equ	0xFEE
 20662                           fsr0h	equ	0xFEA
 20663                           fsr0l	equ	0xFE9
 20664                           wreg	equ	0xFE8
 20665                           postdec1	equ	0xFE5
 20666                           fsr1h	equ	0xFE2
 20667                           fsr1l	equ	0xFE1
 20668                           indf2	equ	0xFDF
 20669                           postinc2	equ	0xFDE
 20670                           postdec2	equ	0xFDD
 20671                           fsr2h	equ	0xFDA
 20672                           fsr2l	equ	0xFD9
 20673                           status	equ	0xFD8
 20674                           
 20675                           	psect	rparam
 20676  0000                     pclatu	equ	0xFFB
 20677                           pclath	equ	0xFFA
 20678                           tblptru	equ	0xFF8
 20679                           tblptrh	equ	0xFF7
 20680                           tblptrl	equ	0xFF6
 20681                           tablat	equ	0xFF5
 20682                           prodh	equ	0xFF4
 20683                           prodl	equ	0xFF3
 20684                           intcon	equ	0xFF2
 20685                           intcon2	equ	0xFF1
 20686                           intcon3	equ	0xFF0
 20687                           indf0	equ	0xFEF
 20688                           postinc0	equ	0xFEE
 20689                           fsr0h	equ	0xFEA
 20690                           fsr0l	equ	0xFE9
 20691                           wreg	equ	0xFE8
 20692                           postdec1	equ	0xFE5
 20693                           fsr1h	equ	0xFE2
 20694                           fsr1l	equ	0xFE1
 20695                           indf2	equ	0xFDF
 20696                           postinc2	equ	0xFDE
 20697                           postdec2	equ	0xFDD
 20698                           fsr2h	equ	0xFDA
 20699                           fsr2l	equ	0xFD9
 20700                           status	equ	0xFD8
 20701                           
 20702                           	psect	temp
 20703  00007E                     btemp:
 20704                           	opt stack 0
 20705  00007E                     	ds	1
 20706  0000                     int$flags	set	btemp
 20707                           pclatu	equ	0xFFB
 20708                           pclath	equ	0xFFA
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           intcon2	equ	0xFF1
 20717                           intcon3	equ	0xFF0
 20718                           indf0	equ	0xFEF
 20719                           postinc0	equ	0xFEE
 20720                           fsr0h	equ	0xFEA
 20721                           fsr0l	equ	0xFE9
 20722                           wreg	equ	0xFE8
 20723                           postdec1	equ	0xFE5
 20724                           fsr1h	equ	0xFE2
 20725                           fsr1l	equ	0xFE1
 20726                           indf2	equ	0xFDF
 20727                           postinc2	equ	0xFDE
 20728                           postdec2	equ	0xFDD
 20729                           fsr2h	equ	0xFDA
 20730                           fsr2l	equ	0xFD9
 20731                           status	equ	0xFD8


Data Sizes:
    Strings     1195
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_111(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_108(CODE[10]), STR_107(CODE[13]), 
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  160215
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   24307
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   19743
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10402
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9655
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21136
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20286
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42152
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12327
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   61545
                                             70 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8074
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7959
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13513
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7984
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8097
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7959
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7824
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _updateServoPosition
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 22:13:37 2017

                                    _i 012B                     i2_I2C_Master_Start 4566  
                   i2_I2C_Master_Write 453C                                     l66 44D4  
                                   _ID 2DD8                            __CFG_CPD$ON 000000  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l177 00E8                                    l478 3702  
                                  l719 163E                                    l593 1D7C  
                                  l913 3230                                    l926 44A0  
                                  l935 2DC2                                    l779 39FA  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 417C  
      __end_of_change_state_to_menu_12 401E        __end_of_change_state_to_menu_22 3FE6  
      __end_of_change_state_to_menu_23 414C           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 426C  
      __end_of_change_state_to_logs_12 423C        __end_of_change_state_to_logs_22 420C  
      __end_of_change_state_to_logs_23 42C8        __end_of_change_state_to_logs_33 41DC  
      __end_of_change_state_to_logs_34 41AC                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1013 3170  
                                 l1104 0E8E                                   l1016 3190  
                                 l1035 3354                                   l1116 1028  
                                 l1044 28BC                                   l1141 3930  
                                 l1133 38DE                                   l1150 3CD8  
                                 l1070 0926                                   l1038 3358  
                                 l1135 38E2                                   l1047 28C0  
                                 l1224 137E                                   l1136 38E6  
                                 l1080 0B34                                   l1056 2984  
                                 l1137 38EA                                   l1129 38C2  
                                 l1138 38EE                                   l1170 3094  
                                 l1074 09CC                                   l1139 38F2  
                                 l1067 0922                                   l1156 3CE8  
                                 l1164 3048                                   l1077 0A32  
                                 l1078 0A80                                   l1079 0AE6  
                                 l1187 3836                                   l1179 3802  
                                 l1618 3534                                   l1671 39B4  
                                 l1681 3BCE                                   l5114 4292  
                                 l5132 4340                                   l5150 3970  
                                 l5310 1258                                   l5302 1226  
                                 l5160 39A6                                   l5152 3976  
                                 l5400 14E6                                   l5320 12D0  
                                 l5312 1264                                   l6024 376A  
                                 l5170 3B96                                   l5402 14EC  
                                 l5330 1326                                   l5322 12DC  
                                 l5314 126A                                   l5090 4308  
                                 l6034 37AC                                   l5148 3964  
                                 l5172 3B9C                                   l5332 133E  
                                 l5324 12E2                                   l5092 431A  
                                 l5420 387C                                   l5412 4028  
                                 l6028 3780                                   l5406 1544  
                                 l5326 12FA                                   l7006 38F6  
                                 l7030 33FE                                   l5430 38B2  
                                 l5414 4034                                   l5176 3BC0  
                                 l5168 3B8A                                   l5352 13D0  
                                 l5336 1344                                   l5408 1550  
                                 l7040 342E                                   l7024 33E8  
                                 l5424 3892                                   l7200 022C  
                                 l5354 13D6                                   l5282 115A  
                                 l5450 3A10                                   l6306 191C  
                                 l5372 1434                                   l5348 13B6  
                                 l5284 116C                                   l7036 341C  
                                 l7052 346C                                   l5700 1E94  
                                 l7204 0236                                   l7140 0106  
                                 l5390 14AC                                   l5366 1412  
                                 l5294 11AA                                   l5278 1146  
                                 l7038 3428                                   l5702 1EB2  
                                 l5710 1F4C                                   l7222 0282  
                                 l7214 0260                                   l5462 34B8  
                                 l6238 15FC                                   l5392 14B8  
                                 l5384 1490                                   l5376 146C  
                                 l5288 1176                                   l5448 39E6  
                                 l7056 3480                                   l7048 345E  
                                 l7080 3642                                   l7072 361C  
                                 l5704 1ED0                                   l7240 02F2  
                                 l7208 024E                                   l7152 013A  
                                 l7144 0118                                   l5464 34C8  
                                 l6352 2EB0                                   l5378 1476  
                                 l6530 0996                                   l7402 07B6  
                                 l7322 063E                                   l7314 061C  
                                 l7250 0388                                   l7242 0310  
                                 l7218 026A                                   l7170 01A4  
                                 l7138 0100                                   l5474 3522  
                                 l5466 34CE                                   l6338 2E74  
                                 l6290 18E2                                   l5396 14D2  
                                 l6700 0D5E                                   l6460 2918  
                                 l7092 3688                                   l7084 3666  
                                 l7076 3630                                   l7068 360C  
                                 l5708 1EEE                                   l7412 07D2  
                                 l7332 065A                                   l7260 041E  
                                 l7252 03A6                                   l7244 032E  
                                 l7180 01CC                                   l7172 01AA  
                                 l7156 014C                                   l7148 0122  
                                 l5900 32BE                                   l6380 2BB4  
                                 l6348 2EA4                                   l6356 2EBC  
                                 l6710 0D86                                   l6702 0D64  
                                 l6622 0BD2                                   l6614 0BB0  
                                 l6534 09A0                                   l7078 363C  
                                 l7318 0626                                   l7262 043C  
                                 l7254 03C4                                   l7246 034C  
                                 l7238 02D4                                   l6374 2B66  
                                 _ADIE 007CEE                                   l6640 0C34  
                                 l6632 0BFA                                   l6624 0BD8  
                                 l6528 0990                                   l7088 3674  
                                 l7416 07EA                                   l7408 07C8  
                                 l7336 0672                                   l7328 0650  
                                 l7280 0522                                   l7272 0500  
                                 l7256 03E2                                   l7248 036A  
                                 l7176 01B4                                   l5904 32D4  
                                 l6376 2B80                                   l6384 2BCE  
                                 l6802 0F64                                   l6722 0DCA  
                                 l6706 0D6E                                   l6650 0C5C  
                                 l6618 0BBA                                   l6538 09B8  
                                 l6482 29A6                                   l6474 2978  
                                 l6466 295A                                   l5690 1DFE  
                                 l5682 1D86                                   l7442 086A  
                                 l7434 0848                                   l7362 06FA  
                                 l7354 06D8                                   l7290 053E  
                                 l7258 0400                                   l7266 045A  
                                 l7186 01DA                                   l6378 2B9A  
                                 l6386 2BFC                                   l5914 4350  
                                 l5850 356A                                   l6812 0F8C  
                                 l6732 0DF2                                   l6644 0C3E  
                                 l6628 0BE2                                   l5692 1E1C  
                                 l5684 1DA4                                   l5676 1CFA  
                                 l7452 0886                                   l7372 0716  
                                 l7276 050A                                   l7268 04BE  
                                 l7460 08AA                                   l5908 32DE  
                                 l6902 1130                                   l6806 0F7C  
                                 l6726 0DE2                                   l6718 0DC0  
                                 l6670 0CC2                                   l6654 0C66  
                                 l5694 1E3A                                   l5686 1DC2  
                                 l7438 0852                                   l7358 06E2  
                                 l7294 0556                                   l7286 0534  
                                 l5918 4366                                   l5846 3554  
                                 l6832 1000                                   l6824 0FDE  
                                 l6816 0FA4                                   l6808 0F82  
                                 l6752 0E66                                   l6744 0E44  
                                 l6736 0E0A                                   l6728 0DE8  
                                 l6680 0CEA                                   l6648 0C56  
                                 l6488 29E8                                   l5696 1E58  
                                 l5688 1DE0                                   l7456 089E  
                                 l7448 087C                                   l7376 072E  
                                 l7368 070C                                   l7712 2CE8  
                                 l5944 3E82                                   l5856 35E0  
                                 l6834 1006                                   l6754 0E6C  
                                 l6674 0CDA                                   l6666 0CB8  
                                 l6658 0C7E                                   l5698 1E76  
                                 l7394 0794                                   l7714 2CFC  
                                 l6828 0FE8                                   l6780 0EF8  
                                 l6772 0ED6                                   l6748 0E4E  
                                 l6692 0D3C                                   l6684 0D02  
                                 l6676 0CE0                                   l5892 329C  
                                 l6862 1082                                   l6838 1010  
                                 l6790 0F20                                   l6782 0EFE  
                                 l6758 0E76                                   l7750 3112  
                                 l7398 079E                                   l6952 3014  
                                 l6872 10AA                                   l6776 0EE0  
                                 l6696 0D46                                   l5896 32A6  
                                 l6970 3072                                   l6866 109A  
                                 l6858 1078                                   l6786 0F08  
                                 l7770 319C                                   l7738 2D7C  
                                 l7850 36E0                                   l6964 3056  
                                 l6948 382A                                   l6892 1108  
                                 l6884 10E6                                   l6876 10C2  
                                 l6868 10A0                                   l7780 31BA  
                                 l7772 31A2                                   l7860 36FE  
                                 l6974 307C                                   l6894 110E  
                                 l6798 0F5A                                   l7782 31C0  
                                 l7774 31A8                                   l7846 36D4  
                                 l6984 30BC                                   l6968 306C  
                                 l6888 10F0                                   l7776 31AE  
                                 l7768 3196                                   l7848 36DA  
                                 l7864 3704                                   l6994 30F0  
                                 l6898 1118                                   l7778 31B4  
                                 l7786 31C6                                   l7858 36F8  
                                 l6998 30FA                                   STR_1 FBDD  
                                 STR_2 FF2E                                   STR_3 FBCB  
                                 STR_4 FE51                                   STR_5 FBCB  
                                 STR_6 FE0F                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5010 09CC  
                                 u5030 0A80                                   u5050 0B34  
                                 u4350 3ED0                                   u4351 3ECC  
                                 u4360 3ED2                                   u3480 4290  
                                 _PEIE 007F96                                   u3740 12A4  
                                 u4390 1D7C                                   u4710 1608  
                                 u4375 3C08                                   u7007 435C  
                                 u3680 3F1C                                   u7017 2DEE  
                                 u3690 3F1E                                   u4730 163E  
                                 u3747 129A                                   u7107 3F62  
                                 u7027 2E4A                                   u3780 131C  
                                 u4820 2E64                                   _RCEN 007E2B  
                                 u7117 002A                                   u7037 2EE0  
                                 u7207 0546                                   u7127 012A  
                                 u7047 2C0A                                   u4728 160C  
                                 u7217 0570                                   u7137 0166  
                                 u7057 2C3E                                   u3787 1312  
                                 u7307 0804                                   u7227 062E  
                                 u7147 01BC                                   u7067 3252  
                                 u4828 2E68                                   u7317 085A  
                                 u7237 0662                                   u7157 01E8  
                                 u7077 32AE                                   u4790 2E08  
                                 u7407 2998                                   u7327 088E  
                                 u7247 068C                                   u7167 023E  
                                 u7087 32E6                                   u7417 29DC  
                                 u7337 3120                                   u7257 06EA  
                                 u7177 0272                                   u7097 3F2E  
                                 i2l66 44E8                                   u7507 09DC  
                                 u7427 4310                                   u7347 3164  
                                 u7267 071E                                   u7187 029C  
                                 u7517 0A42                                   u7437 3304  
                                 u7357 286C                                   u7277 0748  
                                 u7197 0512                                   u4798 2E0C  
                                 u7607 0C6E                                   u7527 0A60  
                                 u7447 3348                                   u7367 28B0  
                                 u7287 07A6                                   u6680 2DC2  
                                 u7617 0CCA                                   u7537 0A90  
                                 u7457 336A                                   u7377 28D2  
                                 u7297 07DA                                   u7707 0F10  
                                 u7627 0CF2                                   u7547 0AF6  
                                 u7467 08D2                                   u7387 2900  
                                 u6907 1752                                   u7717 0F6C  
                                 u7637 0D4E                                   u7557 0B14  
                                 u7477 0916                                   u7397 294E  
                                 u6917 179E                                   u7807 37C2  
                                 u7727 0F94                                   u7647 0D76  
                                 u7567 0B44                                   u7487 0938  
                                 u6927 17D2                                   u7817 3022  
                                 u7737 0FF0                                   u7657 0DD2  
                                 u7577 0BC2                                   u7497 09A8  
                                 u6937 181E                                   u6857 158E  
                                 u7907 3B6E                                   u7827 3084  
                                 u7747 1018                                   u7667 0DFA  
                                 u7587 0BEA                                   u6947 1852  
                                 u6867 1652                                   u7837 30A4  
                                 u7757 103A                                   u7677 0E56  
                                 u7597 0C46                                   u6957 189E  
                                 u6877 169E                                   u7847 30CA  
                                 u7767 108A                                   u7687 0E7E  
                                 u6967 18D2                                   u6887 16D2  
                                 u7857 3102                                   u7777 10B2  
                                 u7697 0EE8                                   u6977 1946  
                                 u6897 171E                                   u7867 3CA2  
                                 u7787 10F8                                   u6987 3D32  
                                 u7877 3B2E                                   u7797 1120  
                                 u6997 3E5E                                   u7887 3B38  
                                 u7897 3B64                                   _RSEN 007E29  
                          _stopSignals 44A8                                   _Test 3112  
                                 _back 005B                                   _main 3692  
                                 _down 0067                                   _keys FB39  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 442E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 4526                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2250                            i2_lcdNibble 3D4A  
                      __end_of_Loading 1958                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 32F6  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 348A  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB54                                  STR_14 FFD7  
                                STR_22 FFA4                                  STR_30 FE20  
                                STR_15 FFD3                                  STR_23 FF20  
                                STR_31 FDFE                                  STR_16 FFE3  
                                STR_24 FD65                                  STR_32 FD43  
                                STR_40 FCFF                                  STR_17 FFF3  
                                STR_33 FD54                                  STR_41 FCEE  
                                STR_25 FB94                                  STR_18 FFF7  
                                STR_34 FDED                                  STR_50 FDCB  
                                STR_42 FDA9                                  STR_26 FD76  
                                STR_43 FDA9                                  STR_35 FDED  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FB81                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD87  
                                STR_36 FD32                                  STR_44 FD10  
                      __end_of___awmod 3692                                  STR_45 FCFF  
                                STR_37 FD43                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FB91  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED9                                  STR_38 FDDC  
                                STR_46 FDBA                                  STR_47 FDBA  
                                STR_55 FFFB                                  STR_63 FB54  
                                STR_71 FF12                                  STR_39 FD98  
                                STR_56 FFDF                                  STR_64 FF85  
                                STR_80 FE61                                  STR_48 FD21  
                                STR_72 FC99                                  STR_49 FD10  
                                STR_57 FFD7                                  STR_65 FF56  
                                STR_73 FEF6                                  STR_81 FE8E  
                                STR_58 FFD3                                  STR_90 FF7A  
                                STR_74 FF63                                  STR_82 FE31  
                                STR_66 FB6C                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_83 FF9A  
                                STR_75 FEBB                                  STR_91 FEAC  
                                STR_84 FF12                                  STR_76 FF04  
                                STR_68 FCAA                                  STR_92 FC44  
                                STR_77 FFAE                                  STR_85 FECA  
                                STR_69 FCDD                                  STR_93 FC33  
                                STR_78 FF12                                  STR_86 FEE8  
                                STR_94 FC11                                  STR_79 FF3C  
                                STR_87 FCBB                                  STR_95 FC66  
                                STR_88 FF6F                                  STR_96 FC77  
                                STR_89 FCCC                                  STR_97 FBEF  
                                STR_98 FE41                                  STR_99 FC22  
                                ?_sort 0001                        __end_of___lldiv 3546  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 39BE                        __end_of___lwmod 3BD8  
                                i2l254 224C                                  i2l593 22DE  
                                i2l850 2B20                                  i2l844 2AB4  
                                i2l926 44CC                                  i2l848 2B00  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 451A                        __end_of_handler 2B5C  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4320  
                      __end_of_initLCD 3F6C                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                                _getIR 3E40                        __end_of_loadRTC 37B4  
                      __end_of_readMAG 3EDA                        __end_of_dpowers FB54  
                                _first 00E4                                  _enter 0069  
                      __end_of_isdigit 434A                                  _input 007D  
                                _putch 44FA                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 43C0  
                     __end_ofi2_getRTC 3AA6                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 40BC                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3DF2                           __end_of_Test 320E  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3728  
                         __end_of_keys FB4A                           __end_of_sort 4450  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC00  
                               STR_101 FC22                                 STR_102 FE9D  
                               STR_110 FC88                                 STR_111 FFB6  
                               STR_103 FE7F                                 STR_104 FE70  
                               STR_105 FBA7                                 STR_106 FBB9  
                               _ADRESH 000FC4                                 STR_107 FF49  
                               STR_108 FF90                                 _EEADRH 000FAA  
                               STR_109 FC55                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 40EC  
            i2_change_state_to_menu_22 40BC                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1224 1B32                                 i2l1671 3DE8  
                               i2l5200 43E0                                 i2l6000 23AE  
                               i2l1681 3FA4                                 i2l6002 23C4  
                               i2l6010 244A                                 i2l6100 26E2  
                               i2l6004 23DA                                 i2l6110 2700  
                               i2l6102 26E8                                 i2l5224 4488  
                               i2l6104 26EE                                 i2l6008 23F0  
                               i2l5234 3DB6                                 i2l6106 26F4  
                               i2l6114 2706                                 i2l5236 3DBE  
                               i2l6140 2770                                 i2l6108 26FA  
                               i2l5246 3DDE                                 i2l5238 3DC2  
                               i2l5262 3F9A                                 i2l5254 3F7A  
                               i2l6150 2796                                 i2l6134 2762  
                               i2l6126 274A                                 i2l5256 3F82  
                               i2l5520 1980                                 i2l6160 27B8  
                               i2l6144 278C                                 i2l5258 3F86  
                               i2l5602 1BAE                                 i2l5530 19B8  
                               i2l5514 1962                                 i2l6154 27AA  
                               i2l6090 26C4                                 i2l5620 1C0A  
                               i2l5612 1BEC                                 i2l5524 1986  
                               i2l6156 27AE                                 i2l5614 1BF4  
                               i2l5550 1A50                                 i2l5518 1972  
                               i2l6190 2826                                 i2l6182 2802  
                               i2l6174 27DE                                 i2l6086 26B0  
                               i2l6078 2696                                 i2l5632 1C3C  
                               i2l5608 1BC8                                 i2l5560 1AAA  
                               i2l6168 27D0                                 i2l6088 26C0  
                               i2l6096 26CE                                 i2l5490 3A7C  
                               i2l5642 1CA2                                 i2l5626 1C20  
                               i2l5562 1ABC                                 i2l5546 1A42  
                               i2l5538 1A1A                                 i2l6186 2814  
                               i2l6178 27F0                                 i2l5650 409C  
                               i2l5628 1C28                                 i2l5636 1C4E  
                               i2l5556 1A9A                                 i2l5548 1A4C  
                               i2l5572 1AFC                                 i2l5644 1CAA  
                               i2l8212 271E                                 i2l6196 2830  
                               i2l8204 2200                                 i2l7500 200C  
                               i2l5486 3A6C                                 i2l5638 1C54  
                               i2l5590 1B7C                                 i2l5566 1AE6  
                               i2l5558 1AA4                                 i2l5830 2FC8  
                               i2l8214 273A                                 i2l8206 2222  
                               i2l5496 3A96                                 i2l5584 1B60  
                               i2l5568 1AF8                                 i2l5648 4094  
                               i2l8208 223E                                 i2l7600 2194  
                               i2l7520 2054                                 i2l7512 2038  
                               i2l7504 201A                                 i2l5826 2FB8  
                               i2l5588 1B78                                 i2l7612 21BE  
                               i2l7604 21A2                                 i2l7540 20A2  
                               i2l7532 207E                                 i2l7524 2062  
                               i2l7516 2046                                 i2l7508 2028  
                               i2l5838 2FFC                                 i2l7622 21E2  
                               i2l7800 24A2                                 i2l7616 21D4  
                               i2l7608 21B0                                 i2l7560 20F0  
                               i2l7552 20D4                                 i2l7544 20B0  
                               i2l7536 2094                                 i2l7528 2070  
                               i2l7480 1FD4                                 i2l7474 1FC0  
                               i2l7580 213E                                 i2l7572 2122  
                               i2l7564 20FE                                 i2l7556 20E2  
                               i2l7548 20BE                                 i2l7492 1FFE  
                               i2l7484 1FE2                                 i2l7476 1FC6  
                               i2l7806 24FC                                 i2l5990 2340  
                               i2l5982 22E8                                 i2l7816 25BE  
                               i2l5992 2356                                 i2l5984 22FE  
                               i2l5976 227C                                 i2l7592 2170  
                               i2l7584 2154                                 i2l7576 2130  
                               i2l7568 2114                                 i2l7488 1FF0  
                               i2l5994 236C                                 i2l5986 2314  
                               i2l5996 2382                                 i2l5988 232A  
                               i2l7596 217E                                 i2l7588 2162  
                               i2l7940 2B1E                                 i2l7916 2AD2  
                               i2l5998 2398                                 i2l7918 2AD4  
                               i2l7880 2A6C                                 i2l7796 2492  
                               i2l7894 2A88                                 i2l7878 2A68  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4372  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 442E  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2C9C                                 ___wmul 4054  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 383C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4472  
                               _initUI 43E6                                 _readIR 3EDA  
                               _logRun 2C9C                                 clear_0 3E18  
                               clear_1 3E24                                 clear_2 3E30  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3C94                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 401E  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 439A  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4372                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3DF2                       __end_of_printRTC 1F90  
                         __mediumconst FB38                      __end_ofi2___lwmod 3FAE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 33CC                      __end_ofi2_lcdInst 4532  
                    __end_ofi2_isdigit 4490                             __accesstop 0080  
              __end_of__initialization 3E36                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 44BE  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4570                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 4546  
                        __end_of_getIR 3E8E                            i2printRTC@i 0041  
                        _initSortTimer 3546            __end_of_updateServoPosition 3A34  
                        __end_of_putch 450A                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2EFA  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 42F4  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 42C8  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 320E                                UI@F3222 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 3946  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2234 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 451A                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3B76                                _Loading 1570  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 33CC  
                              ___awmod 35F0                             _initServos 3CF0  
                              ___lldiv 348A                        __size_of___wmul 0036  
                              ___lwdiv 3946                                ___lwmod 3B76  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3DF2  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3AA6                                _lcdInst 450A  
                              _handler 0008                                __ptext0 3692  
                              __ptext1 44A8                                __ptext2 442E  
                              __ptext3 1570                                __ptext4 3546  
                              __ptext5 3CF0                                __ptext6 3AA6  
                              __ptext7 3E40                                __ptext8 434A  
                              __ptext9 2DD8                        __size_of_printf 0438  
                              _readADC 42F4                        __size_of_strcpy 0036  
                              _initLCD 3F26                                _cur_can 0065  
                              _loadRTC 3728                                _readMAG 3E8E  
                              _dpowers FB4A                     actuatorTest@i_1600 00BA  
                   actuatorTest@i_1601 00BB                     actuatorTest@i_1610 00C0  
                   actuatorTest@i_1611 00C1                     actuatorTest@i_1603 00BC  
                   actuatorTest@i_1604 00BD                     actuatorTest@i_1613 00C2  
                   actuatorTest@i_1614 00C3                     actuatorTest@i_1606 00BE  
                   actuatorTest@i_1607 00BF                     actuatorTest@i_1581 00AE  
                   actuatorTest@i_1590 00B4                     actuatorTest@i_1582 00AF  
                   actuatorTest@i_1574 00AD                     actuatorTest@i_1591 00B5  
                   actuatorTest@i_1584 00B0                     actuatorTest@i_1593 00B6  
                   actuatorTest@i_1585 00B1                     actuatorTest@i_1594 00B7  
                   actuatorTest@i_1587 00B2                     actuatorTest@i_1596 00B8  
                   actuatorTest@i_1588 00B3                     actuatorTest@i_1597 00B9  
                              _isdigit 4320                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2B5C                         __pintcode_body 29EE  
                 end_of_initialization 3E36                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1625 00AF                   SolenoidTestA5@i_1627 00B0  
                              int_func 29EE                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3B0E  
                           _sensorTest 285E                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 285E  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3C94  
                           _updateMenu 1F90                      i2_I2C_Master_Read 43C0  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 44E8  
                    i2_I2C_Master_Stop 455E                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3DA0  
                            i2___lwmod 3F6C                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2486                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4526                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4472  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 44A8  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 408A                         __end_of_getRTC 38C2  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 440A  
                       __end_of_readIR 3F26                         __end_of_logRun 2DD8  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 4054  
            __end_ofi2_I2C_Master_Read 43E6              __end_ofi2_I2C_Master_Wait 44FA  
                         i2printf@prec 001D                    start_initialization 3DF2  
            __end_ofi2_I2C_Master_Stop 4566                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1319 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 38C2  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2354 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1881 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4490  
                   __end_of_PortTestA5 3CF0                       _I2C_Master_Start 4556  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4532  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 383C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB38  
                            _lcdNibble 3B0E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 3014                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 32F6                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0122                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 0190  
           __end_ofi2_I2C_Master_Start 456E             __end_ofi2_I2C_Master_Write 4546  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2678                            ??i2_isdigit 0001  
                             i2u411_40 1A7E                               i2u411_47 1A74  
                             i2u415_40 1ADE                               i2u415_47 1AD4  
                             _PIR2bits 000FA1                               i2u358_40 43DE  
                             i2u455_40 22DE                               i2u673_40 25B8  
                             i2u791_47 26B6                               i2u792_47 3D62  
                             i2u793_47 3D6C                               i2u794_47 3D8E  
                             i2u795_47 3D98                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 3112                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 439A                          lcdNibble@data 0081  
                             i2_getRTC 3A34                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 1958  
                             i2_strcpy 408A                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3E06  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 44D4  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 03E8                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 35F0  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 414C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3FE6             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3FAE                _change_state_to_menu_23 411C  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 423C  
              _change_state_to_logs_12 420C                _change_state_to_logs_22 41DC  
              _change_state_to_logs_23 429A                _change_state_to_logs_33 41AC  
              _change_state_to_logs_34 417C                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2B54  
                           _EEPROMTest 456E                        _I2C_Master_Init 3BD8  
                     __size_of_readADC 002C                        _I2C_Master_Read 426C  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 44D4                        _I2C_Master_Stop 454E  
                     __size_of_isdigit 002A                               _delay_ms 434A  
                       _printSortTimer 2486                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3014  
                             __ptext10 2B5C                               __ptext11 3C38  
                             __ptext20 4450                               __ptext12 2C9C  
                             __ptext21 3F26                               __ptext13 320E  
                             __ptext30 44D4                               __ptext22 0012  
                             __ptext14 4490                               __ptext31 3FAE  
                             __ptext23 1CC6                               __ptext15 43E6  
                             __ptext40 32F6                               __ptext32 3FE6  
                             __ptext24 401E                               __ptext16 3728  
                             __ptext41 08B8                               __ptext33 35F0  
                             __ptext25 383C                               __ptext17 3BD8  
                             __ptext50 4054                               __ptext42 39BE  
                             __ptext34 33CC                               __ptext26 4532  
                             __ptext18 348A                               __ptext51 3B76  
                             __ptext43 37B4                               __ptext35 3112  
                             __ptext27 454E                               __ptext19 42C8  
                             __ptext60 408A                               __ptext52 3946  
                             __ptext44 3014                               __ptext36 285E  
                             __ptext28 4556                               __ptext61 2678  
                             __ptext53 450A                               __ptext45 38C2  
                             __ptext37 3E8E                               __ptext29 426C  
                             __ptext70 420C                               __ptext62 40BC  
                             __ptext54 3B0E                               __ptext46 3C94  
                             __ptext38 3EDA                               __ptext71 423C  
                             __ptext63 40EC                               __ptext55 456E  
                             __ptext47 1138                               __ptext39 42F4  
                             __ptext80 3F6C                               __ptext72 440A  
                             __ptext64 411C                               __ptext48 44FA  
                             __ptext81 3DA0                               __ptext73 2EFA  
                             __ptext65 414C                               __ptext57 1F90  
                             __ptext49 4320                               __ptext82 4526  
                             __ptext74 44BE                               __ptext66 417C  
                             __ptext58 4372                               __ptext83 3D4A  
                             __ptext75 2486                               __ptext67 41AC  
                             __ptext59 2250                               __ptext84 3A34  
                             __ptext76 1958                               __ptext68 429A  
                             __ptext85 453C                               __ptext77 451A  
                             __ptext69 41DC                               __ptext86 455E  
                             __ptext78 4472                               __ptext87 4566  
                             __ptext79 439A                               __ptext88 43C0  
                             __ptext89 44E8                               _dispLogs 440A  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1881 0002                     __end_of_initServos 3D4A  
                        __size_of_Test 00FC                          ?_EEPROM_write 00AB  
                             _initTime 4450                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 39BE  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 411C  
    __end_ofi2_change_state_to_menu_22 40EC                               loadRTC@i 0096  
               __end_of_printSortTimer 2678                              putch@data 0082  
             __end_of_I2C_Master_Start 455E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 453C                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 37B4  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 29EE  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 44BE  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2250                __end_of_I2C_Master_Init 3C38  
              __end_of_I2C_Master_Read 429A                __end_of_I2C_Master_Wait 44E8  
              __end_of_I2C_Master_Stop 4556                          printRTC@F3213 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                         sensorTest@on 00AD                            _retrieveLog 2EFA  
                  __end_ofi2_lcdNibble 3DA0                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3C38                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
