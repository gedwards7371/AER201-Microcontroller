

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 04:49:01 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004C84                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  004C84  4D                 	db	77
   153  004C85  4D                 	db	77
   154  004C86  4D                 	db	77
   155  004C87  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  004C88  4D                 	db	77
   159  004C89  4D                 	db	77
   160  004C8A  4D                 	db	77
   161  004C8B  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB0A                     STR_21:
   268  00FB0A  25                 	db	37
   269  00FB0B  30                 	db	48	;'0'
   270  00FB0C  32                 	db	50	;'2'
   271  00FB0D  64                 	db	100	;'d'
   272  00FB0E  25                 	db	37
   273  00FB0F  73                 	db	115	;'s'
   274  00FB10  20                 	db	32
   275  00FB11  7C                 	db	124
   276  00FB12  20                 	db	32
   277  00FB13  25                 	db	37
   278  00FB14  30                 	db	48	;'0'
   279  00FB15  32                 	db	50	;'2'
   280  00FB16  64                 	db	100	;'d'
   281  00FB17  3A                 	db	58	;':'
   282  00FB18  25                 	db	37
   283  00FB19  30                 	db	48	;'0'
   284  00FB1A  32                 	db	50	;'2'
   285  00FB1B  64                 	db	100	;'d'
   286  00FB1C  3A                 	db	58	;':'
   287  00FB1D  25                 	db	37
   288  00FB1E  30                 	db	48	;'0'
   289  00FB1F  32                 	db	50	;'2'
   290  00FB20  64                 	db	100	;'d'
   291  00FB21  00                 	db	0
   292  00FB22                     STR_66:
   293  00FB22  28                 	db	40
   294  00FB23  64                 	db	100	;'d'
   295  00FB24  61                 	db	97	;'a'
   296  00FB25  74                 	db	116	;'t'
   297  00FB26  61                 	db	97	;'a'
   298  00FB27  3A                 	db	58	;':'
   299  00FB28  20                 	db	32
   300  00FB29  25                 	db	37
   301  00FB2A  75                 	db	117	;'u'
   302  00FB2B  2C                 	db	44
   303  00FB2C  20                 	db	32
   304  00FB2D  61                 	db	97	;'a'
   305  00FB2E  64                 	db	100	;'d'
   306  00FB2F  64                 	db	100	;'d'
   307  00FB30  72                 	db	114	;'r'
   308  00FB31  3A                 	db	58	;':'
   309  00FB32  20                 	db	32
   310  00FB33  25                 	db	37
   311  00FB34  75                 	db	117	;'u'
   312  00FB35  29                 	db	41
   313  00FB36  00                 	db	0
   314  00FB37                     STR_111:
   315  00FB37  44                 	db	68	;'D'
   316  00FB38  20                 	db	32
   317  00FB39  57                 	db	87	;'W'
   318  00FB3A  49                 	db	73	;'I'
   319  00FB3B  4C                 	db	76	;'L'
   320  00FB3C  4C                 	db	76	;'L'
   321  00FB3D  20                 	db	32
   322  00FB3E  52                 	db	82	;'R'
   323  00FB3F  45                 	db	69	;'E'
   324  00FB40  54                 	db	84	;'T'
   325  00FB41  55                 	db	85	;'U'
   326  00FB42  52                 	db	82	;'R'
   327  00FB43  4E                 	db	78	;'N'
   328  00FB44  20                 	db	32
   329  00FB45  20                 	db	32
   330  00FB46  20                 	db	32
   331  00FB47  20                 	db	32
   332  00FB48  00                 	db	0
   333  00FB49                     STR_112:
   334  00FB49  4F                 	db	79	;'O'
   335  00FB4A  54                 	db	84	;'T'
   336  00FB4B  48                 	db	72	;'H'
   337  00FB4C  45                 	db	69	;'E'
   338  00FB4D  52                 	db	82	;'R'
   339  00FB4E  20                 	db	32
   340  00FB4F  53                 	db	83	;'S'
   341  00FB50  45                 	db	69	;'E'
   342  00FB51  54                 	db	84	;'T'
   343  00FB52  53                 	db	83	;'S'
   344  00FB53  20                 	db	32
   345  00FB54  52                 	db	82	;'R'
   346  00FB55  41                 	db	65	;'A'
   347  00FB56  35                 	db	53	;'5'
   348  00FB57  20                 	db	32
   349  00FB58  20                 	db	32
   350  00FB59  20                 	db	32
   351  00FB5A  00                 	db	0
   352  00FB5B                     STR_116:
   353  00FB5B  53                 	db	83	;'S'
   354  00FB5C  3A                 	db	58	;':'
   355  00FB5D  20                 	db	32
   356  00FB5E  44                 	db	68	;'D'
   357  00FB5F  20                 	db	32
   358  00FB60  57                 	db	87	;'W'
   359  00FB61  49                 	db	73	;'I'
   360  00FB62  4C                 	db	76	;'L'
   361  00FB63  4C                 	db	76	;'L'
   362  00FB64  20                 	db	32
   363  00FB65  52                 	db	82	;'R'
   364  00FB66  45                 	db	69	;'E'
   365  00FB67  54                 	db	84	;'T'
   366  00FB68  55                 	db	85	;'U'
   367  00FB69  52                 	db	82	;'R'
   368  00FB6A  4E                 	db	78	;'N'
   369  00FB6B  20                 	db	32
   370  00FB6C  00                 	db	0
   371  00FB6D                     STR_119:
   372  00FB6D  4F                 	db	79	;'O'
   373  00FB6E  54                 	db	84	;'T'
   374  00FB6F  48                 	db	72	;'H'
   375  00FB70  45                 	db	69	;'E'
   376  00FB71  52                 	db	82	;'R'
   377  00FB72  3A                 	db	58	;':'
   378  00FB73  20                 	db	32
   379  00FB74  43                 	db	67	;'C'
   380  00FB75  41                 	db	65	;'A'
   381  00FB76  4D                 	db	77	;'M'
   382  00FB77  20                 	db	32
   383  00FB78  54                 	db	84	;'T'
   384  00FB79  4F                 	db	79	;'O'
   385  00FB7A  47                 	db	71	;'G'
   386  00FB7B  47                 	db	71	;'G'
   387  00FB7C  4C                 	db	76	;'L'
   388  00FB7D  45                 	db	69	;'E'
   389  00FB7E  00                 	db	0
   390  00FB7F                     STR_118:
   391  00FB7F  44                 	db	68	;'D'
   392  00FB80  3A                 	db	58	;':'
   393  00FB81  20                 	db	32
   394  00FB82  52                 	db	82	;'R'
   395  00FB83  45                 	db	69	;'E'
   396  00FB84  54                 	db	84	;'T'
   397  00FB85  7C                 	db	124
   398  00FB86  32                 	db	50	;'2'
   399  00FB87  3A                 	db	58	;':'
   400  00FB88  20                 	db	32
   401  00FB89  43                 	db	67	;'C'
   402  00FB8A  4F                 	db	79	;'O'
   403  00FB8B  4E                 	db	78	;'N'
   404  00FB8C  44                 	db	68	;'D'
   405  00FB8D  20                 	db	32
   406  00FB8E  25                 	db	37
   407  00FB8F  64                 	db	100	;'d'
   408  00FB90  00                 	db	0
   409  00FB91                     STR_3:
   410  00FB91  2D                 	db	45
   411  00FB92  2D                 	db	45
   412  00FB93  20                 	db	32
   413  00FB94  4C                 	db	76	;'L'
   414  00FB95  4F                 	db	79	;'O'
   415  00FB96  47                 	db	71	;'G'
   416  00FB97  20                 	db	32
   417  00FB98  25                 	db	37
   418  00FB99  32                 	db	50	;'2'
   419  00FB9A  64                 	db	100	;'d'
   420  00FB9B  20                 	db	32
   421  00FB9C  48                 	db	72	;'H'
   422  00FB9D  45                 	db	69	;'E'
   423  00FB9E  52                 	db	82	;'R'
   424  00FB9F  45                 	db	69	;'E'
   425  00FBA0  2D                 	db	45
   426  00FBA1  2D                 	db	45
   427  00FBA2  00                 	db	0
   428  00FBA3                     STR_1:
   429  00FBA3  52                 	db	82	;'R'
   430  00FBA4  45                 	db	69	;'E'
   431  00FBA5  53                 	db	83	;'S'
   432  00FBA6  55                 	db	85	;'U'
   433  00FBA7  4C                 	db	76	;'L'
   434  00FBA8  54                 	db	84	;'T'
   435  00FBA9  53                 	db	83	;'S'
   436  00FBAA  20                 	db	32
   437  00FBAB  49                 	db	73	;'I'
   438  00FBAC  4E                 	db	78	;'N'
   439  00FBAD  20                 	db	32
   440  00FBAE  4C                 	db	76	;'L'
   441  00FBAF  4F                 	db	79	;'O'
   442  00FBB0  47                 	db	71	;'G'
   443  00FBB1  20                 	db	32
   444  00FBB2  25                 	db	37
   445  00FBB3  64                 	db	100	;'d'
   446  00FBB4  00                 	db	0
   447  00FBB5                     STR_102:
   448  00FBB5  4D                 	db	77	;'M'
   449  00FBB6  49                 	db	73	;'I'
   450  00FBB7  44                 	db	68	;'D'
   451  00FBB8  20                 	db	32
   452  00FBB9  2D                 	db	45
   453  00FBBA  2D                 	db	45
   454  00FBBB  20                 	db	32
   455  00FBBC  32                 	db	50	;'2'
   456  00FBBD  73                 	db	115	;'s'
   457  00FBBE  20                 	db	32
   458  00FBBF  20                 	db	32
   459  00FBC0  20                 	db	32
   460  00FBC1  20                 	db	32
   461  00FBC2  20                 	db	32
   462  00FBC3  20                 	db	32
   463  00FBC4  20                 	db	32
   464  00FBC5  00                 	db	0
   465  00FBC6                     STR_105:
   466  00FBC6  44                 	db	68	;'D'
   467  00FBC7  52                 	db	82	;'R'
   468  00FBC8  4F                 	db	79	;'O'
   469  00FBC9  50                 	db	80	;'P'
   470  00FBCA  20                 	db	32
   471  00FBCB  2D                 	db	45
   472  00FBCC  2D                 	db	45
   473  00FBCD  20                 	db	32
   474  00FBCE  32                 	db	50	;'2'
   475  00FBCF  73                 	db	115	;'s'
   476  00FBD0  20                 	db	32
   477  00FBD1  20                 	db	32
   478  00FBD2  20                 	db	32
   479  00FBD3  20                 	db	32
   480  00FBD4  20                 	db	32
   481  00FBD5  20                 	db	32
   482  00FBD6  00                 	db	0
   483  00FBD7                     STR_99:
   484  00FBD7  4C                 	db	76	;'L'
   485  00FBD8  45                 	db	69	;'E'
   486  00FBD9  46                 	db	70	;'F'
   487  00FBDA  54                 	db	84	;'T'
   488  00FBDB  20                 	db	32
   489  00FBDC  2D                 	db	45
   490  00FBDD  2D                 	db	45
   491  00FBDE  20                 	db	32
   492  00FBDF  32                 	db	50	;'2'
   493  00FBE0  73                 	db	115	;'s'
   494  00FBE1  20                 	db	32
   495  00FBE2  20                 	db	32
   496  00FBE3  20                 	db	32
   497  00FBE4  20                 	db	32
   498  00FBE5  20                 	db	32
   499  00FBE6  20                 	db	32
   500  00FBE7  00                 	db	0
   501  00FBE8                     STR_104:
   502  00FBE8  4C                 	db	76	;'L'
   503  00FBE9  45                 	db	69	;'E'
   504  00FBEA  56                 	db	86	;'V'
   505  00FBEB  45                 	db	69	;'E'
   506  00FBEC  4C                 	db	76	;'L'
   507  00FBED  20                 	db	32
   508  00FBEE  2D                 	db	45
   509  00FBEF  2D                 	db	45
   510  00FBF0  20                 	db	32
   511  00FBF1  32                 	db	50	;'2'
   512  00FBF2  73                 	db	115	;'s'
   513  00FBF3  20                 	db	32
   514  00FBF4  20                 	db	32
   515  00FBF5  20                 	db	32
   516  00FBF6  20                 	db	32
   517  00FBF7  20                 	db	32
   518  00FBF8  00                 	db	0
   519  00FBF9                     STR_98:
   520  00FBF9  52                 	db	82	;'R'
   521  00FBFA  49                 	db	73	;'I'
   522  00FBFB  47                 	db	71	;'G'
   523  00FBFC  48                 	db	72	;'H'
   524  00FBFD  54                 	db	84	;'T'
   525  00FBFE  20                 	db	32
   526  00FBFF  2D                 	db	45
   527  00FC00  2D                 	db	45
   528  00FC01  20                 	db	32
   529  00FC02  32                 	db	50	;'2'
   530  00FC03  73                 	db	115	;'s'
   531  00FC04  20                 	db	32
   532  00FC05  20                 	db	32
   533  00FC06  20                 	db	32
   534  00FC07  20                 	db	32
   535  00FC08  20                 	db	32
   536  00FC09  00                 	db	0
   537  00FC0A                     STR_97:
   538  00FC0A  4D                 	db	77	;'M'
   539  00FC0B  49                 	db	73	;'I'
   540  00FC0C  44                 	db	68	;'D'
   541  00FC0D  44                 	db	68	;'D'
   542  00FC0E  4C                 	db	76	;'L'
   543  00FC0F  45                 	db	69	;'E'
   544  00FC10  20                 	db	32
   545  00FC11  2D                 	db	45
   546  00FC12  2D                 	db	45
   547  00FC13  20                 	db	32
   548  00FC14  32                 	db	50	;'2'
   549  00FC15  73                 	db	115	;'s'
   550  00FC16  20                 	db	32
   551  00FC17  20                 	db	32
   552  00FC18  20                 	db	32
   553  00FC19  20                 	db	32
   554  00FC1A  00                 	db	0
   555  00FC1B  44                 	db	68	;'D'
   556  00FC1C  20                 	db	32
   557  00FC1D  57                 	db	87	;'W'
   558  00FC1E  49                 	db	73	;'I'
   559  00FC1F  4C                 	db	76	;'L'
   560  00FC20  4C                 	db	76	;'L'
   561  00FC21  20                 	db	32
   562  00FC22  52                 	db	82	;'R'
   563  00FC23  45                 	db	69	;'E'
   564  00FC24  54                 	db	84	;'T'
   565  00FC25  55                 	db	85	;'U'
   566  00FC26  52                 	db	82	;'R'
   567  00FC27  4E                 	db	78	;'N'
   568  00FC28  20                 	db	32
   569  00FC29  20                 	db	32
   570  00FC2A  20                 	db	32
   571  00FC2B  00                 	db	0
   572  00FC2C                     STR_100:
   573  00FC2C  4D                 	db	77	;'M'
   574  00FC2D  49                 	db	73	;'I'
   575  00FC2E  44                 	db	68	;'D'
   576  00FC2F  2D                 	db	45
   577  00FC30  4C                 	db	76	;'L'
   578  00FC31  45                 	db	69	;'E'
   579  00FC32  46                 	db	70	;'F'
   580  00FC33  54                 	db	84	;'T'
   581  00FC34  20                 	db	32
   582  00FC35  2D                 	db	45
   583  00FC36  2D                 	db	45
   584  00FC37  20                 	db	32
   585  00FC38  32                 	db	50	;'2'
   586  00FC39  73                 	db	115	;'s'
   587  00FC3A  20                 	db	32
   588  00FC3B  20                 	db	32
   589  00FC3C  00                 	db	0
   590  00FC3D                     STR_101:
   591  00FC3D  4D                 	db	77	;'M'
   592  00FC3E  49                 	db	73	;'I'
   593  00FC3F  44                 	db	68	;'D'
   594  00FC40  2D                 	db	45
   595  00FC41  52                 	db	82	;'R'
   596  00FC42  49                 	db	73	;'I'
   597  00FC43  47                 	db	71	;'G'
   598  00FC44  48                 	db	72	;'H'
   599  00FC45  54                 	db	84	;'T'
   600  00FC46  20                 	db	32
   601  00FC47  2D                 	db	45
   602  00FC48  2D                 	db	45
   603  00FC49  20                 	db	32
   604  00FC4A  32                 	db	50	;'2'
   605  00FC4B  73                 	db	115	;'s'
   606  00FC4C  20                 	db	32
   607  00FC4D  00                 	db	0
   608  00FC4E  45                 	db	69	;'E'
   609  00FC4F  4C                 	db	76	;'L'
   610  00FC50  53                 	db	83	;'S'
   611  00FC51  45                 	db	69	;'E'
   612  00FC52  20                 	db	32
   613  00FC53  54                 	db	84	;'T'
   614  00FC54  4F                 	db	79	;'O'
   615  00FC55  47                 	db	71	;'G'
   616  00FC56  47                 	db	71	;'G'
   617  00FC57  4C                 	db	76	;'L'
   618  00FC58  45                 	db	69	;'E'
   619  00FC59  53                 	db	83	;'S'
   620  00FC5A  20                 	db	32
   621  00FC5B  52                 	db	82	;'R'
   622  00FC5C  41                 	db	65	;'A'
   623  00FC5D  35                 	db	53	;'5'
   624  00FC5E  00                 	db	0
   625  00FC5F                     STR_72:
   626  00FC5F  41                 	db	65	;'A'
   627  00FC60  4C                 	db	76	;'L'
   628  00FC61  47                 	db	71	;'G'
   629  00FC62  31                 	db	49	;'1'
   630  00FC63  3A                 	db	58	;':'
   631  00FC64  20                 	db	32
   632  00FC65  39                 	db	57	;'9'
   633  00FC66  20                 	db	32
   634  00FC67  50                 	db	80	;'P'
   635  00FC68  4F                 	db	79	;'O'
   636  00FC69  50                 	db	80	;'P'
   637  00FC6A  4E                 	db	78	;'N'
   638  00FC6B  4F                 	db	79	;'O'
   639  00FC6C  54                 	db	84	;'T'
   640  00FC6D  41                 	db	65	;'A'
   641  00FC6E  42                 	db	66	;'B'
   642  00FC6F  00                 	db	0
   643  00FC70                     STR_92:
   644  00FC70  54                 	db	84	;'T'
   645  00FC71  53                 	db	83	;'S'
   646  00FC72  54                 	db	84	;'T'
   647  00FC73  3A                 	db	58	;':'
   648  00FC74  20                 	db	32
   649  00FC75  43                 	db	67	;'C'
   650  00FC76  4F                 	db	79	;'O'
   651  00FC77  4E                 	db	78	;'N'
   652  00FC78  44                 	db	68	;'D'
   653  00FC79  20                 	db	32
   654  00FC7A  53                 	db	83	;'S'
   655  00FC7B  4F                 	db	79	;'O'
   656  00FC7C  4C                 	db	76	;'L'
   657  00FC7D  4E                 	db	78	;'N'
   658  00FC7E  27                 	db	39
   659  00FC7F  44                 	db	68	;'D'
   660  00FC80  00                 	db	0
   661  00FC81                     STR_94:
   662  00FC81  54                 	db	84	;'T'
   663  00FC82  53                 	db	83	;'S'
   664  00FC83  54                 	db	84	;'T'
   665  00FC84  3A                 	db	58	;':'
   666  00FC85  20                 	db	32
   667  00FC86  50                 	db	80	;'P'
   668  00FC87  55                 	db	85	;'U'
   669  00FC88  53                 	db	83	;'S'
   670  00FC89  48                 	db	72	;'H'
   671  00FC8A  20                 	db	32
   672  00FC8B  53                 	db	83	;'S'
   673  00FC8C  4F                 	db	79	;'O'
   674  00FC8D  4C                 	db	76	;'L'
   675  00FC8E  4E                 	db	78	;'N'
   676  00FC8F  27                 	db	39
   677  00FC90  44                 	db	68	;'D'
   678  00FC91  00                 	db	0
   679  00FC92                     STR_68:
   680  00FC92  32                 	db	50	;'2'
   681  00FC93  2E                 	db	46
   682  00FC94  53                 	db	83	;'S'
   683  00FC95  4E                 	db	78	;'N'
   684  00FC96  52                 	db	82	;'R'
   685  00FC97  7C                 	db	124
   686  00FC98  34                 	db	52	;'4'
   687  00FC99  2E                 	db	46
   688  00FC9A  48                 	db	72	;'H'
   689  00FC9B  49                 	db	73	;'I'
   690  00FC9C  7C                 	db	124
   691  00FC9D  35                 	db	53	;'5'
   692  00FC9E  2E                 	db	46
   693  00FC9F  4D                 	db	77	;'M'
   694  00FCA0  45                 	db	69	;'E'
   695  00FCA1  44                 	db	68	;'D'
   696  00FCA2  00                 	db	0
   697  00FCA3                     STR_69:
   698  00FCA3  42                 	db	66	;'B'
   699  00FCA4  2E                 	db	46
   700  00FCA5  50                 	db	80	;'P'
   701  00FCA6  53                 	db	83	;'S'
   702  00FCA7  48                 	db	72	;'H'
   703  00FCA8  7C                 	db	124
   704  00FCA9  38                 	db	56	;'8'
   705  00FCAA  2E                 	db	46
   706  00FCAB  53                 	db	83	;'S'
   707  00FCAC  56                 	db	86	;'V'
   708  00FCAD  7C                 	db	124
   709  00FCAE  39                 	db	57	;'9'
   710  00FCAF  2E                 	db	46
   711  00FCB0  42                 	db	66	;'B'
   712  00FCB1  4C                 	db	76	;'L'
   713  00FCB2  4B                 	db	75	;'K'
   714  00FCB3  00                 	db	0
   715  00FCB4                     STR_110:
   716  00FCB4  54                 	db	84	;'T'
   717  00FCB5  53                 	db	83	;'S'
   718  00FCB6  54                 	db	84	;'T'
   719  00FCB7  3A                 	db	58	;':'
   720  00FCB8  20                 	db	32
   721  00FCB9  42                 	db	66	;'B'
   722  00FCBA  4F                 	db	79	;'O'
   723  00FCBB  54                 	db	84	;'T'
   724  00FCBC  48                 	db	72	;'H'
   725  00FCBD  20                 	db	32
   726  00FCBE  53                 	db	83	;'S'
   727  00FCBF  45                 	db	69	;'E'
   728  00FCC0  52                 	db	82	;'R'
   729  00FCC1  56                 	db	86	;'V'
   730  00FCC2  4F                 	db	79	;'O'
   731  00FCC3  53                 	db	83	;'S'
   732  00FCC4  00                 	db	0
   733  00FCC5                     STR_41:
   734  00FCC5  4C                 	db	76	;'L'
   735  00FCC6  4F                 	db	79	;'O'
   736  00FCC7  47                 	db	71	;'G'
   737  00FCC8  20                 	db	32
   738  00FCC9  31                 	db	49	;'1'
   739  00FCCA  20                 	db	32
   740  00FCCB  20                 	db	32
   741  00FCCC  20                 	db	32
   742  00FCCD  20                 	db	32
   743  00FCCE  20                 	db	32
   744  00FCCF  20                 	db	32
   745  00FCD0  20                 	db	32
   746  00FCD1  20                 	db	32
   747  00FCD2  20                 	db	32
   748  00FCD3  20                 	db	32
   749  00FCD4  20                 	db	32
   750  00FCD5  00                 	db	0
   751  00FCD6                     STR_40:
   752  00FCD6  4C                 	db	76	;'L'
   753  00FCD7  4F                 	db	79	;'O'
   754  00FCD8  47                 	db	71	;'G'
   755  00FCD9  20                 	db	32
   756  00FCDA  32                 	db	50	;'2'
   757  00FCDB  20                 	db	32
   758  00FCDC  20                 	db	32
   759  00FCDD  20                 	db	32
   760  00FCDE  20                 	db	32
   761  00FCDF  20                 	db	32
   762  00FCE0  20                 	db	32
   763  00FCE1  20                 	db	32
   764  00FCE2  20                 	db	32
   765  00FCE3  20                 	db	32
   766  00FCE4  20                 	db	32
   767  00FCE5  20                 	db	32
   768  00FCE6  00                 	db	0
   769  00FCE7                     STR_44:
   770  00FCE7  4C                 	db	76	;'L'
   771  00FCE8  4F                 	db	79	;'O'
   772  00FCE9  47                 	db	71	;'G'
   773  00FCEA  20                 	db	32
   774  00FCEB  33                 	db	51	;'3'
   775  00FCEC  20                 	db	32
   776  00FCED  20                 	db	32
   777  00FCEE  20                 	db	32
   778  00FCEF  20                 	db	32
   779  00FCF0  20                 	db	32
   780  00FCF1  20                 	db	32
   781  00FCF2  20                 	db	32
   782  00FCF3  20                 	db	32
   783  00FCF4  20                 	db	32
   784  00FCF5  20                 	db	32
   785  00FCF6  20                 	db	32
   786  00FCF7  00                 	db	0
   787  00FCF8                     STR_48:
   788  00FCF8  4C                 	db	76	;'L'
   789  00FCF9  4F                 	db	79	;'O'
   790  00FCFA  47                 	db	71	;'G'
   791  00FCFB  20                 	db	32
   792  00FCFC  34                 	db	52	;'4'
   793  00FCFD  20                 	db	32
   794  00FCFE  20                 	db	32
   795  00FCFF  20                 	db	32
   796  00FD00  20                 	db	32
   797  00FD01  20                 	db	32
   798  00FD02  20                 	db	32
   799  00FD03  20                 	db	32
   800  00FD04  20                 	db	32
   801  00FD05  20                 	db	32
   802  00FD06  20                 	db	32
   803  00FD07  20                 	db	32
   804  00FD08  00                 	db	0
   805  00FD09                     STR_36:
   806  00FD09  33                 	db	51	;'3'
   807  00FD0A  2E                 	db	46
   808  00FD0B  20                 	db	32
   809  00FD0C  4C                 	db	76	;'L'
   810  00FD0D  4F                 	db	79	;'O'
   811  00FD0E  47                 	db	71	;'G'
   812  00FD0F  53                 	db	83	;'S'
   813  00FD10  20                 	db	32
   814  00FD11  20                 	db	32
   815  00FD12  20                 	db	32
   816  00FD13  20                 	db	32
   817  00FD14  20                 	db	32
   818  00FD15  20                 	db	32
   819  00FD16  20                 	db	32
   820  00FD17  20                 	db	32
   821  00FD18  20                 	db	32
   822  00FD19  00                 	db	0
   823  00FD1A                     STR_32:
   824  00FD1A  32                 	db	50	;'2'
   825  00FD1B  2E                 	db	46
   826  00FD1C  20                 	db	32
   827  00FD1D  53                 	db	83	;'S'
   828  00FD1E  4F                 	db	79	;'O'
   829  00FD1F  52                 	db	82	;'R'
   830  00FD20  54                 	db	84	;'T'
   831  00FD21  20                 	db	32
   832  00FD22  20                 	db	32
   833  00FD23  20                 	db	32
   834  00FD24  20                 	db	32
   835  00FD25  20                 	db	32
   836  00FD26  20                 	db	32
   837  00FD27  20                 	db	32
   838  00FD28  20                 	db	32
   839  00FD29  20                 	db	32
   840  00FD2A  00                 	db	0
   841  00FD2B                     STR_33:
   842  00FD2B  31                 	db	49	;'1'
   843  00FD2C  2E                 	db	46
   844  00FD2D  20                 	db	32
   845  00FD2E  44                 	db	68	;'D'
   846  00FD2F  41                 	db	65	;'A'
   847  00FD30  54                 	db	84	;'T'
   848  00FD31  45                 	db	69	;'E'
   849  00FD32  2F                 	db	47
   850  00FD33  54                 	db	84	;'T'
   851  00FD34  49                 	db	73	;'I'
   852  00FD35  4D                 	db	77	;'M'
   853  00FD36  45                 	db	69	;'E'
   854  00FD37  20                 	db	32
   855  00FD38  20                 	db	32
   856  00FD39  20                 	db	32
   857  00FD3A  20                 	db	32
   858  00FD3B  00                 	db	0
   859  00FD3C                     STR_24:
   860  00FD3C  20                 	db	32
   861  00FD3D  2D                 	db	45
   862  00FD3E  2D                 	db	45
   863  00FD3F  20                 	db	32
   864  00FD40  50                 	db	80	;'P'
   865  00FD41  4F                 	db	79	;'O'
   866  00FD42  50                 	db	80	;'P'
   867  00FD43  20                 	db	32
   868  00FD44  20                 	db	32
   869  00FD45  43                 	db	67	;'C'
   870  00FD46  41                 	db	65	;'A'
   871  00FD47  4E                 	db	78	;'N'
   872  00FD48  20                 	db	32
   873  00FD49  2D                 	db	45
   874  00FD4A  2D                 	db	45
   875  00FD4B  20                 	db	32
   876  00FD4C  00                 	db	0
   877  00FD4D                     STR_26:
   878  00FD4D  20                 	db	32
   879  00FD4E  2D                 	db	45
   880  00FD4F  2D                 	db	45
   881  00FD50  20                 	db	32
   882  00FD51  53                 	db	83	;'S'
   883  00FD52  4F                 	db	79	;'O'
   884  00FD53  55                 	db	85	;'U'
   885  00FD54  50                 	db	80	;'P'
   886  00FD55  20                 	db	32
   887  00FD56  43                 	db	67	;'C'
   888  00FD57  41                 	db	65	;'A'
   889  00FD58  4E                 	db	78	;'N'
   890  00FD59  20                 	db	32
   891  00FD5A  2D                 	db	45
   892  00FD5B  2D                 	db	45
   893  00FD5C  20                 	db	32
   894  00FD5D  00                 	db	0
   895  00FD5E                     STR_28:
   896  00FD5E  2D                 	db	45
   897  00FD5F  2D                 	db	45
   898  00FD60  20                 	db	32
   899  00FD61  54                 	db	84	;'T'
   900  00FD62  4F                 	db	79	;'O'
   901  00FD63  54                 	db	84	;'T'
   902  00FD64  41                 	db	65	;'A'
   903  00FD65  4C                 	db	76	;'L'
   904  00FD66  20                 	db	32
   905  00FD67  43                 	db	67	;'C'
   906  00FD68  41                 	db	65	;'A'
   907  00FD69  4E                 	db	78	;'N'
   908  00FD6A  53                 	db	83	;'S'
   909  00FD6B  20                 	db	32
   910  00FD6C  2D                 	db	45
   911  00FD6D  2D                 	db	45
   912  00FD6E  00                 	db	0
   913  00FD6F                     STR_39:
   914  00FD6F  4C                 	db	76	;'L'
   915  00FD70  4F                 	db	79	;'O'
   916  00FD71  47                 	db	71	;'G'
   917  00FD72  20                 	db	32
   918  00FD73  31                 	db	49	;'1'
   919  00FD74  20                 	db	32
   920  00FD75  20                 	db	32
   921  00FD76  20                 	db	32
   922  00FD77  20                 	db	32
   923  00FD78  20                 	db	32
   924  00FD79  20                 	db	32
   925  00FD7A  20                 	db	32
   926  00FD7B  20                 	db	32
   927  00FD7C  20                 	db	32
   928  00FD7D  20                 	db	32
   929  00FD7E  3C                 	db	60	;'<'
   930  00FD7F  00                 	db	0
   931  00FD80                     STR_42:
   932  00FD80  4C                 	db	76	;'L'
   933  00FD81  4F                 	db	79	;'O'
   934  00FD82  47                 	db	71	;'G'
   935  00FD83  20                 	db	32
   936  00FD84  32                 	db	50	;'2'
   937  00FD85  20                 	db	32
   938  00FD86  20                 	db	32
   939  00FD87  20                 	db	32
   940  00FD88  20                 	db	32
   941  00FD89  20                 	db	32
   942  00FD8A  20                 	db	32
   943  00FD8B  20                 	db	32
   944  00FD8C  20                 	db	32
   945  00FD8D  20                 	db	32
   946  00FD8E  20                 	db	32
   947  00FD8F  3C                 	db	60	;'<'
   948  00FD90  00                 	db	0
   949  00FD91                     STR_46:
   950  00FD91  4C                 	db	76	;'L'
   951  00FD92  4F                 	db	79	;'O'
   952  00FD93  47                 	db	71	;'G'
   953  00FD94  20                 	db	32
   954  00FD95  33                 	db	51	;'3'
   955  00FD96  20                 	db	32
   956  00FD97  20                 	db	32
   957  00FD98  20                 	db	32
   958  00FD99  20                 	db	32
   959  00FD9A  20                 	db	32
   960  00FD9B  20                 	db	32
   961  00FD9C  20                 	db	32
   962  00FD9D  20                 	db	32
   963  00FD9E  20                 	db	32
   964  00FD9F  20                 	db	32
   965  00FDA0  3C                 	db	60	;'<'
   966  00FDA1  00                 	db	0
   967  00FDA2                     STR_50:
   968  00FDA2  4C                 	db	76	;'L'
   969  00FDA3  4F                 	db	79	;'O'
   970  00FDA4  47                 	db	71	;'G'
   971  00FDA5  20                 	db	32
   972  00FDA6  34                 	db	52	;'4'
   973  00FDA7  20                 	db	32
   974  00FDA8  20                 	db	32
   975  00FDA9  20                 	db	32
   976  00FDAA  20                 	db	32
   977  00FDAB  20                 	db	32
   978  00FDAC  20                 	db	32
   979  00FDAD  20                 	db	32
   980  00FDAE  20                 	db	32
   981  00FDAF  20                 	db	32
   982  00FDB0  20                 	db	32
   983  00FDB1  3C                 	db	60	;'<'
   984  00FDB2  00                 	db	0
   985  00FDB3                     STR_38:
   986  00FDB3  33                 	db	51	;'3'
   987  00FDB4  2E                 	db	46
   988  00FDB5  20                 	db	32
   989  00FDB6  4C                 	db	76	;'L'
   990  00FDB7  4F                 	db	79	;'O'
   991  00FDB8  47                 	db	71	;'G'
   992  00FDB9  53                 	db	83	;'S'
   993  00FDBA  20                 	db	32
   994  00FDBB  20                 	db	32
   995  00FDBC  20                 	db	32
   996  00FDBD  20                 	db	32
   997  00FDBE  20                 	db	32
   998  00FDBF  20                 	db	32
   999  00FDC0  20                 	db	32
  1000  00FDC1  20                 	db	32
  1001  00FDC2  3C                 	db	60	;'<'
  1002  00FDC3  00                 	db	0
  1003  00FDC4                     STR_34:
  1004  00FDC4  32                 	db	50	;'2'
  1005  00FDC5  2E                 	db	46
  1006  00FDC6  20                 	db	32
  1007  00FDC7  53                 	db	83	;'S'
  1008  00FDC8  4F                 	db	79	;'O'
  1009  00FDC9  52                 	db	82	;'R'
  1010  00FDCA  54                 	db	84	;'T'
  1011  00FDCB  20                 	db	32
  1012  00FDCC  20                 	db	32
  1013  00FDCD  20                 	db	32
  1014  00FDCE  20                 	db	32
  1015  00FDCF  20                 	db	32
  1016  00FDD0  20                 	db	32
  1017  00FDD1  20                 	db	32
  1018  00FDD2  20                 	db	32
  1019  00FDD3  3C                 	db	60	;'<'
  1020  00FDD4  00                 	db	0
  1021  00FDD5                     STR_31:
  1022  00FDD5  31                 	db	49	;'1'
  1023  00FDD6  2E                 	db	46
  1024  00FDD7  20                 	db	32
  1025  00FDD8  44                 	db	68	;'D'
  1026  00FDD9  41                 	db	65	;'A'
  1027  00FDDA  54                 	db	84	;'T'
  1028  00FDDB  45                 	db	69	;'E'
  1029  00FDDC  2F                 	db	47
  1030  00FDDD  54                 	db	84	;'T'
  1031  00FDDE  49                 	db	73	;'I'
  1032  00FDDF  4D                 	db	77	;'M'
  1033  00FDE0  45                 	db	69	;'E'
  1034  00FDE1  20                 	db	32
  1035  00FDE2  20                 	db	32
  1036  00FDE3  20                 	db	32
  1037  00FDE4  3C                 	db	60	;'<'
  1038  00FDE5  00                 	db	0
  1039  00FDE6                     STR_6:
  1040  00FDE6  50                 	db	80	;'P'
  1041  00FDE7  41                 	db	65	;'A'
  1042  00FDE8  55                 	db	85	;'U'
  1043  00FDE9  53                 	db	83	;'S'
  1044  00FDEA  45                 	db	69	;'E'
  1045  00FDEB  20                 	db	32
  1046  00FDEC  3C                 	db	60	;'<'
  1047  00FDED  20                 	db	32
  1048  00FDEE  7C                 	db	124
  1049  00FDEF  20                 	db	32
  1050  00FDF0  42                 	db	66	;'B'
  1051  00FDF1  41                 	db	65	;'A'
  1052  00FDF2  43                 	db	67	;'C'
  1053  00FDF3  4B                 	db	75	;'K'
  1054  00FDF4  20                 	db	32
  1055  00FDF5  3E                 	db	62	;'>'
  1056  00FDF6  00                 	db	0
  1057  00FDF7                     STR_30:
  1058  00FDF7  50                 	db	80	;'P'
  1059  00FDF8  55                 	db	85	;'U'
  1060  00FDF9  53                 	db	83	;'S'
  1061  00FDFA  48                 	db	72	;'H'
  1062  00FDFB  20                 	db	32
  1063  00FDFC  54                 	db	84	;'T'
  1064  00FDFD  4F                 	db	79	;'O'
  1065  00FDFE  20                 	db	32
  1066  00FDFF  43                 	db	67	;'C'
  1067  00FE00  4F                 	db	79	;'O'
  1068  00FE01  4E                 	db	78	;'N'
  1069  00FE02  54                 	db	84	;'T'
  1070  00FE03  49                 	db	73	;'I'
  1071  00FE04  4E                 	db	78	;'N'
  1072  00FE05  55                 	db	85	;'U'
  1073  00FE06  45                 	db	69	;'E'
  1074  00FE07  00                 	db	0
  1075  00FE08                     STR_27:
  1076  00FE08  4E                 	db	78	;'N'
  1077  00FE09  4C                 	db	76	;'L'
  1078  00FE0A  41                 	db	65	;'A'
  1079  00FE0B  42                 	db	66	;'B'
  1080  00FE0C  3A                 	db	58	;':'
  1081  00FE0D  20                 	db	32
  1082  00FE0E  25                 	db	37
  1083  00FE0F  64                 	db	100	;'d'
  1084  00FE10  7C                 	db	124
  1085  00FE11  4C                 	db	76	;'L'
  1086  00FE12  41                 	db	65	;'A'
  1087  00FE13  42                 	db	66	;'B'
  1088  00FE14  3A                 	db	58	;':'
  1089  00FE15  20                 	db	32
  1090  00FE16  25                 	db	37
  1091  00FE17  64                 	db	100	;'d'
  1092  00FE18  00                 	db	0
  1093  00FE19                     STR_25:
  1094  00FE19  4E                 	db	78	;'N'
  1095  00FE1A  54                 	db	84	;'T'
  1096  00FE1B  41                 	db	65	;'A'
  1097  00FE1C  42                 	db	66	;'B'
  1098  00FE1D  3A                 	db	58	;':'
  1099  00FE1E  20                 	db	32
  1100  00FE1F  25                 	db	37
  1101  00FE20  64                 	db	100	;'d'
  1102  00FE21  7C                 	db	124
  1103  00FE22  54                 	db	84	;'T'
  1104  00FE23  41                 	db	65	;'A'
  1105  00FE24  42                 	db	66	;'B'
  1106  00FE25  3A                 	db	58	;':'
  1107  00FE26  20                 	db	32
  1108  00FE27  25                 	db	37
  1109  00FE28  64                 	db	100	;'d'
  1110  00FE29  00                 	db	0
  1111  00FE2A                     STR_83:
  1112  00FE2A  4D                 	db	77	;'M'
  1113  00FE2B  41                 	db	65	;'A'
  1114  00FE2C  47                 	db	71	;'G'
  1115  00FE2D  5F                 	db	95	;'_'
  1116  00FE2E  73                 	db	115	;'s'
  1117  00FE2F  69                 	db	105	;'i'
  1118  00FE30  67                 	db	103	;'g'
  1119  00FE31  6E                 	db	110	;'n'
  1120  00FE32  61                 	db	97	;'a'
  1121  00FE33  6C                 	db	108	;'l'
  1122  00FE34  3A                 	db	58	;':'
  1123  00FE35  20                 	db	32
  1124  00FE36  25                 	db	37
  1125  00FE37  64                 	db	100	;'d'
  1126  00FE38  20                 	db	32
  1127  00FE39  00                 	db	0
  1128  00FE3A                     STR_103:
  1129  00FE3A  54                 	db	84	;'T'
  1130  00FE3B  53                 	db	83	;'S'
  1131  00FE3C  54                 	db	84	;'T'
  1132  00FE3D  3A                 	db	58	;':'
  1133  00FE3E  20                 	db	32
  1134  00FE3F  54                 	db	84	;'T'
  1135  00FE40  49                 	db	73	;'I'
  1136  00FE41  4C                 	db	76	;'L'
  1137  00FE42  54                 	db	84	;'T'
  1138  00FE43  20                 	db	32
  1139  00FE44  53                 	db	83	;'S'
  1140  00FE45  45                 	db	69	;'E'
  1141  00FE46  52                 	db	82	;'R'
  1142  00FE47  56                 	db	86	;'V'
  1143  00FE48  4F                 	db	79	;'O'
  1144  00FE49  00                 	db	0
  1145  00FE4A                     STR_4:
  1146  00FE4A  44                 	db	68	;'D'
  1147  00FE4B  49                 	db	73	;'I'
  1148  00FE4C  44                 	db	68	;'D'
  1149  00FE4D  4E                 	db	78	;'N'
  1150  00FE4E  27                 	db	39
  1151  00FE4F  54                 	db	84	;'T'
  1152  00FE50  20                 	db	32
  1153  00FE51  43                 	db	67	;'C'
  1154  00FE52  4F                 	db	79	;'O'
  1155  00FE53  4D                 	db	77	;'M'
  1156  00FE54  50                 	db	80	;'P'
  1157  00FE55  4C                 	db	76	;'L'
  1158  00FE56  45                 	db	69	;'E'
  1159  00FE57  54                 	db	84	;'T'
  1160  00FE58  45                 	db	69	;'E'
  1161  00FE59  00                 	db	0
  1162  00FE5A                     STR_80:
  1163  00FE5A  49                 	db	73	;'I'
  1164  00FE5B  52                 	db	82	;'R'
  1165  00FE5C  5F                 	db	95	;'_'
  1166  00FE5D  73                 	db	115	;'s'
  1167  00FE5E  69                 	db	105	;'i'
  1168  00FE5F  67                 	db	103	;'g'
  1169  00FE60  6E                 	db	110	;'n'
  1170  00FE61  61                 	db	97	;'a'
  1171  00FE62  6C                 	db	108	;'l'
  1172  00FE63  3A                 	db	58	;':'
  1173  00FE64  20                 	db	32
  1174  00FE65  25                 	db	37
  1175  00FE66  64                 	db	100	;'d'
  1176  00FE67  20                 	db	32
  1177  00FE68  00                 	db	0
  1178  00FE69                     STR_109:
  1179  00FE69  43                 	db	67	;'C'
  1180  00FE6A  41                 	db	65	;'A'
  1181  00FE6B  4D                 	db	77	;'M'
  1182  00FE6C  20                 	db	32
  1183  00FE6D  44                 	db	68	;'D'
  1184  00FE6E  57                 	db	87	;'W'
  1185  00FE6F  4E                 	db	78	;'N'
  1186  00FE70  20                 	db	32
  1187  00FE71  7C                 	db	124
  1188  00FE72  52                 	db	82	;'R'
  1189  00FE73  43                 	db	67	;'C'
  1190  00FE74  30                 	db	48	;'0'
  1191  00FE75  3D                 	db	61	;'='
  1192  00FE76  30                 	db	48	;'0'
  1193  00FE77  00                 	db	0
  1194  00FE78                     STR_108:
  1195  00FE78  43                 	db	67	;'C'
  1196  00FE79  41                 	db	65	;'A'
  1197  00FE7A  4D                 	db	77	;'M'
  1198  00FE7B  20                 	db	32
  1199  00FE7C  55                 	db	85	;'U'
  1200  00FE7D  50                 	db	80	;'P'
  1201  00FE7E  20                 	db	32
  1202  00FE7F  20                 	db	32
  1203  00FE80  7C                 	db	124
  1204  00FE81  52                 	db	82	;'R'
  1205  00FE82  43                 	db	67	;'C'
  1206  00FE83  30                 	db	48	;'0'
  1207  00FE84  3D                 	db	61	;'='
  1208  00FE85  31                 	db	49	;'1'
  1209  00FE86  00                 	db	0
  1210  00FE87                     STR_82:
  1211  00FE87  54                 	db	84	;'T'
  1212  00FE88  53                 	db	83	;'S'
  1213  00FE89  54                 	db	84	;'T'
  1214  00FE8A  3A                 	db	58	;':'
  1215  00FE8B  20                 	db	32
  1216  00FE8C  4D                 	db	77	;'M'
  1217  00FE8D  41                 	db	65	;'A'
  1218  00FE8E  47                 	db	71	;'G'
  1219  00FE8F  4E                 	db	78	;'N'
  1220  00FE90  45                 	db	69	;'E'
  1221  00FE91  54                 	db	84	;'T'
  1222  00FE92  49                 	db	73	;'I'
  1223  00FE93  53                 	db	83	;'S'
  1224  00FE94  4D                 	db	77	;'M'
  1225  00FE95  00                 	db	0
  1226  00FE96                     STR_107:
  1227  00FE96  54                 	db	84	;'T'
  1228  00FE97  53                 	db	83	;'S'
  1229  00FE98  54                 	db	84	;'T'
  1230  00FE99  3A                 	db	58	;':'
  1231  00FE9A  20                 	db	32
  1232  00FE9B  43                 	db	67	;'C'
  1233  00FE9C  41                 	db	65	;'A'
  1234  00FE9D  4D                 	db	77	;'M'
  1235  00FE9E  20                 	db	32
  1236  00FE9F  53                 	db	83	;'S'
  1237  00FEA0  45                 	db	69	;'E'
  1238  00FEA1  52                 	db	82	;'R'
  1239  00FEA2  56                 	db	86	;'V'
  1240  00FEA3  4F                 	db	79	;'O'
  1241  00FEA4  00                 	db	0
  1242  00FEA5                     STR_96:
  1243  00FEA5  54                 	db	84	;'T'
  1244  00FEA6  53                 	db	83	;'S'
  1245  00FEA7  54                 	db	84	;'T'
  1246  00FEA8  3A                 	db	58	;':'
  1247  00FEA9  20                 	db	32
  1248  00FEAA  50                 	db	80	;'P'
  1249  00FEAB  41                 	db	65	;'A'
  1250  00FEAC  4E                 	db	78	;'N'
  1251  00FEAD  20                 	db	32
  1252  00FEAE  53                 	db	83	;'S'
  1253  00FEAF  45                 	db	69	;'E'
  1254  00FEB0  52                 	db	82	;'R'
  1255  00FEB1  56                 	db	86	;'V'
  1256  00FEB2  4F                 	db	79	;'O'
  1257  00FEB3  00                 	db	0
  1258  00FEB4                     STR_75:
  1259  00FEB4  41                 	db	65	;'A'
  1260  00FEB5  4C                 	db	76	;'L'
  1261  00FEB6  47                 	db	71	;'G'
  1262  00FEB7  34                 	db	52	;'4'
  1263  00FEB8  3A                 	db	58	;':'
  1264  00FEB9  20                 	db	32
  1265  00FEBA  41                 	db	65	;'A'
  1266  00FEBB  4C                 	db	76	;'L'
  1267  00FEBC  4C                 	db	76	;'L'
  1268  00FEBD  20                 	db	32
  1269  00FEBE  43                 	db	67	;'C'
  1270  00FEBF  41                 	db	65	;'A'
  1271  00FEC0  4E                 	db	78	;'N'
  1272  00FEC1  53                 	db	83	;'S'
  1273  00FEC2  00                 	db	0
  1274  00FEC3                     STR_90:
  1275  00FEC3  54                 	db	84	;'T'
  1276  00FEC4  53                 	db	83	;'S'
  1277  00FEC5  54                 	db	84	;'T'
  1278  00FEC6  3A                 	db	58	;':'
  1279  00FEC7  20                 	db	32
  1280  00FEC8  44                 	db	68	;'D'
  1281  00FEC9  43                 	db	67	;'C'
  1282  00FECA  20                 	db	32
  1283  00FECB  4D                 	db	77	;'M'
  1284  00FECC  4F                 	db	79	;'O'
  1285  00FECD  54                 	db	84	;'T'
  1286  00FECE  4F                 	db	79	;'O'
  1287  00FECF  52                 	db	82	;'R'
  1288  00FED0  53                 	db	83	;'S'
  1289  00FED1  00                 	db	0
  1290  00FED2                     STR_70:
  1291  00FED2  41                 	db	65	;'A'
  1292  00FED3  4C                 	db	76	;'L'
  1293  00FED4  47                 	db	71	;'G'
  1294  00FED5  4F                 	db	79	;'O'
  1295  00FED6  52                 	db	82	;'R'
  1296  00FED7  49                 	db	73	;'I'
  1297  00FED8  54                 	db	84	;'T'
  1298  00FED9  48                 	db	72	;'H'
  1299  00FEDA  4D                 	db	77	;'M'
  1300  00FEDB  20                 	db	32
  1301  00FEDC  54                 	db	84	;'T'
  1302  00FEDD  45                 	db	69	;'E'
  1303  00FEDE  53                 	db	83	;'S'
  1304  00FEDF  54                 	db	84	;'T'
  1305  00FEE0  00                 	db	0
  1306  00FEE1                     STR_91:
  1307  00FEE1  50                 	db	80	;'P'
  1308  00FEE2  49                 	db	73	;'I'
  1309  00FEE3  4E                 	db	78	;'N'
  1310  00FEE4  20                 	db	32
  1311  00FEE5  52                 	db	82	;'R'
  1312  00FEE6  41                 	db	65	;'A'
  1313  00FEE7  35                 	db	53	;'5'
  1314  00FEE8  20                 	db	32
  1315  00FEE9  48                 	db	72	;'H'
  1316  00FEEA  49                 	db	73	;'I'
  1317  00FEEB  47                 	db	71	;'G'
  1318  00FEEC  48                 	db	72	;'H'
  1319  00FEED  2E                 	db	46
  1320  00FEEE  00                 	db	0
  1321  00FEEF                     STR_73:
  1322  00FEEF  41                 	db	65	;'A'
  1323  00FEF0  4C                 	db	76	;'L'
  1324  00FEF1  47                 	db	71	;'G'
  1325  00FEF2  32                 	db	50	;'2'
  1326  00FEF3  3A                 	db	58	;':'
  1327  00FEF4  20                 	db	32
  1328  00FEF5  31                 	db	49	;'1'
  1329  00FEF6  32                 	db	50	;'2'
  1330  00FEF7  20                 	db	32
  1331  00FEF8  43                 	db	67	;'C'
  1332  00FEF9  41                 	db	65	;'A'
  1333  00FEFA  4E                 	db	78	;'N'
  1334  00FEFB  53                 	db	83	;'S'
  1335  00FEFC  00                 	db	0
  1336  00FEFD                     STR_76:
  1337  00FEFD  41                 	db	65	;'A'
  1338  00FEFE  4C                 	db	76	;'L'
  1339  00FEFF  47                 	db	71	;'G'
  1340  00FF00  35                 	db	53	;'5'
  1341  00FF01  3A                 	db	58	;':'
  1342  00FF02  20                 	db	32
  1343  00FF03  4E                 	db	78	;'N'
  1344  00FF04  4F                 	db	79	;'O'
  1345  00FF05  20                 	db	32
  1346  00FF06  43                 	db	67	;'C'
  1347  00FF07  41                 	db	65	;'A'
  1348  00FF08  4E                 	db	78	;'N'
  1349  00FF09  53                 	db	83	;'S'
  1350  00FF0A  00                 	db	0
  1351  00FF0B                     STR_71:
  1352  00FF0B  50                 	db	80	;'P'
  1353  00FF0C  55                 	db	85	;'U'
  1354  00FF0D  53                 	db	83	;'S'
  1355  00FF0E  48                 	db	72	;'H'
  1356  00FF0F  20                 	db	32
  1357  00FF10  54                 	db	84	;'T'
  1358  00FF11  4F                 	db	79	;'O'
  1359  00FF12  20                 	db	32
  1360  00FF13  53                 	db	83	;'S'
  1361  00FF14  54                 	db	84	;'T'
  1362  00FF15  41                 	db	65	;'A'
  1363  00FF16  52                 	db	82	;'R'
  1364  00FF17  54                 	db	84	;'T'
  1365  00FF18  00                 	db	0
  1366  00FF19                     STR_23:
  1367  00FF19  25                 	db	37
  1368  00FF1A  64                 	db	100	;'d'
  1369  00FF1B  20                 	db	32
  1370  00FF1C  4D                 	db	77	;'M'
  1371  00FF1D  49                 	db	73	;'I'
  1372  00FF1E  4E                 	db	78	;'N'
  1373  00FF1F  20                 	db	32
  1374  00FF20  25                 	db	37
  1375  00FF21  64                 	db	100	;'d'
  1376  00FF22  20                 	db	32
  1377  00FF23  53                 	db	83	;'S'
  1378  00FF24  45                 	db	69	;'E'
  1379  00FF25  43                 	db	67	;'C'
  1380  00FF26  00                 	db	0
  1381  00FF27                     STR_2:
  1382  00FF27  54                 	db	84	;'T'
  1383  00FF28  49                 	db	73	;'I'
  1384  00FF29  4D                 	db	77	;'M'
  1385  00FF2A  45                 	db	69	;'E'
  1386  00FF2B  3A                 	db	58	;':'
  1387  00FF2C  20                 	db	32
  1388  00FF2D  25                 	db	37
  1389  00FF2E  64                 	db	100	;'d'
  1390  00FF2F  3A                 	db	58	;':'
  1391  00FF30  25                 	db	37
  1392  00FF31  30                 	db	48	;'0'
  1393  00FF32  32                 	db	50	;'2'
  1394  00FF33  64                 	db	100	;'d'
  1395  00FF34  00                 	db	0
  1396  00FF35                     STR_79:
  1397  00FF35  54                 	db	84	;'T'
  1398  00FF36  53                 	db	83	;'S'
  1399  00FF37  54                 	db	84	;'T'
  1400  00FF38  3A                 	db	58	;':'
  1401  00FF39  20                 	db	32
  1402  00FF3A  49                 	db	73	;'I'
  1403  00FF3B  52                 	db	82	;'R'
  1404  00FF3C  20                 	db	32
  1405  00FF3D  53                 	db	83	;'S'
  1406  00FF3E  4E                 	db	78	;'N'
  1407  00FF3F  53                 	db	83	;'S'
  1408  00FF40  52                 	db	82	;'R'
  1409  00FF41  00                 	db	0
  1410  00FF42                     STR_65:
  1411  00FF42  54                 	db	84	;'T'
  1412  00FF43  49                 	db	73	;'I'
  1413  00FF44  4D                 	db	77	;'M'
  1414  00FF45  45                 	db	69	;'E'
  1415  00FF46  20                 	db	32
  1416  00FF47  25                 	db	37
  1417  00FF48  64                 	db	100	;'d'
  1418  00FF49  3A                 	db	58	;':'
  1419  00FF4A  25                 	db	37
  1420  00FF4B  30                 	db	48	;'0'
  1421  00FF4C  32                 	db	50	;'2'
  1422  00FF4D  64                 	db	100	;'d'
  1423  00FF4E  00                 	db	0
  1424  00FF4F                     STR_74:
  1425  00FF4F  41                 	db	65	;'A'
  1426  00FF50  4C                 	db	76	;'L'
  1427  00FF51  47                 	db	71	;'G'
  1428  00FF52  33                 	db	51	;'3'
  1429  00FF53  3A                 	db	58	;':'
  1430  00FF54  20                 	db	32
  1431  00FF55  31                 	db	49	;'1'
  1432  00FF56  20                 	db	32
  1433  00FF57  43                 	db	67	;'C'
  1434  00FF58  41                 	db	65	;'A'
  1435  00FF59  4E                 	db	78	;'N'
  1436  00FF5A  00                 	db	0
  1437  00FF5B                     STR_93:
  1438  00FF5B  50                 	db	80	;'P'
  1439  00FF5C  49                 	db	73	;'I'
  1440  00FF5D  4E                 	db	78	;'N'
  1441  00FF5E  20                 	db	32
  1442  00FF5F  52                 	db	82	;'R'
  1443  00FF60  41                 	db	65	;'A'
  1444  00FF61  33                 	db	51	;'3'
  1445  00FF62  2E                 	db	46
  1446  00FF63  2E                 	db	46
  1447  00FF64  2E                 	db	46
  1448  00FF65  00                 	db	0
  1449  00FF66                     STR_95:
  1450  00FF66  50                 	db	80	;'P'
  1451  00FF67  49                 	db	73	;'I'
  1452  00FF68  4E                 	db	78	;'N'
  1453  00FF69  20                 	db	32
  1454  00FF6A  52                 	db	82	;'R'
  1455  00FF6B  41                 	db	65	;'A'
  1456  00FF6C  34                 	db	52	;'4'
  1457  00FF6D  2E                 	db	46
  1458  00FF6E  2E                 	db	46
  1459  00FF6F  2E                 	db	46
  1460  00FF70  00                 	db	0
  1461  00FF71                     STR_113:
  1462  00FF71  50                 	db	80	;'P'
  1463  00FF72  55                 	db	85	;'U'
  1464  00FF73  53                 	db	83	;'S'
  1465  00FF74  48                 	db	72	;'H'
  1466  00FF75  45                 	db	69	;'E'
  1467  00FF76  52                 	db	82	;'R'
  1468  00FF77  20                 	db	32
  1469  00FF78  54                 	db	84	;'T'
  1470  00FF79  53                 	db	83	;'S'
  1471  00FF7A  54                 	db	84	;'T'
  1472  00FF7B  00                 	db	0
  1473  00FF7C                     STR_64:
  1474  00FF7C  53                 	db	83	;'S'
  1475  00FF7D  4F                 	db	79	;'O'
  1476  00FF7E  52                 	db	82	;'R'
  1477  00FF7F  54                 	db	84	;'T'
  1478  00FF80  49                 	db	73	;'I'
  1479  00FF81  4E                 	db	78	;'N'
  1480  00FF82  47                 	db	71	;'G'
  1481  00FF83  2E                 	db	46
  1482  00FF84  2E                 	db	46
  1483  00FF85  2E                 	db	46
  1484  00FF86  00                 	db	0
  1485  00FF87                     STR_84:
  1486  00FF87  54                 	db	84	;'T'
  1487  00FF88  53                 	db	83	;'S'
  1488  00FF89  54                 	db	84	;'T'
  1489  00FF8A  3A                 	db	58	;':'
  1490  00FF8B  20                 	db	32
  1491  00FF8C  43                 	db	67	;'C'
  1492  00FF8D  4F                 	db	79	;'O'
  1493  00FF8E  4E                 	db	78	;'N'
  1494  00FF8F  44                 	db	68	;'D'
  1495  00FF90  00                 	db	0
  1496  00FF91                     STR_88:
  1497  00FF91  41                 	db	65	;'A'
  1498  00FF92  43                 	db	67	;'C'
  1499  00FF93  54                 	db	84	;'T'
  1500  00FF94  55                 	db	85	;'U'
  1501  00FF95  41                 	db	65	;'A'
  1502  00FF96  54                 	db	84	;'T'
  1503  00FF97  4F                 	db	79	;'O'
  1504  00FF98  52                 	db	82	;'R'
  1505  00FF99  53                 	db	83	;'S'
  1506  00FF9A  00                 	db	0
  1507  00FF9B                     STR_22:
  1508  00FF9B  44                 	db	68	;'D'
  1509  00FF9C  55                 	db	85	;'U'
  1510  00FF9D  52                 	db	82	;'R'
  1511  00FF9E  41                 	db	65	;'A'
  1512  00FF9F  54                 	db	84	;'T'
  1513  00FFA0  49                 	db	73	;'I'
  1514  00FFA1  4F                 	db	79	;'O'
  1515  00FFA2  4E                 	db	78	;'N'
  1516  00FFA3  3A                 	db	58	;':'
  1517  00FFA4  00                 	db	0
  1518  00FFA5                     STR_86:
  1519  00FFA5  43                 	db	67	;'C'
  1520  00FFA6  4F                 	db	79	;'O'
  1521  00FFA7  4E                 	db	78	;'N'
  1522  00FFA8  44                 	db	68	;'D'
  1523  00FFA9  3A                 	db	58	;':'
  1524  00FFAA  20                 	db	32
  1525  00FFAB  25                 	db	37
  1526  00FFAC  64                 	db	100	;'d'
  1527  00FFAD  00                 	db	0
  1528  00FFAE                     STR_77:
  1529  00FFAE  53                 	db	83	;'S'
  1530  00FFAF  45                 	db	69	;'E'
  1531  00FFB0  4E                 	db	78	;'N'
  1532  00FFB1  53                 	db	83	;'S'
  1533  00FFB2  4F                 	db	79	;'O'
  1534  00FFB3  52                 	db	82	;'R'
  1535  00FFB4  53                 	db	83	;'S'
  1536  00FFB5  00                 	db	0
  1537  00FFB6                     STR_122:
  1538  00FFB6  28                 	db	40
  1539  00FFB7  6E                 	db	110	;'n'
  1540  00FFB8  75                 	db	117	;'u'
  1541  00FFB9  6C                 	db	108	;'l'
  1542  00FFBA  6C                 	db	108	;'l'
  1543  00FFBB  29                 	db	41
  1544  00FFBC  00                 	db	0
  1545  00FFBD                     STR_67:
  1546  00FFBD  46                 	db	70	;'F'
  1547  00FFBE  41                 	db	65	;'A'
  1548  00FFBF  49                 	db	73	;'I'
  1549  00FFC0  4C                 	db	76	;'L'
  1550  00FFC1  45                 	db	69	;'E'
  1551  00FFC2  44                 	db	68	;'D'
  1552  00FFC3  00                 	db	0
  1553  00FFC4                     STR_7:
  1554  00FFC4  53                 	db	83	;'S'
  1555  00FFC5  54                 	db	84	;'T'
  1556  00FFC6  41                 	db	65	;'A'
  1557  00FFC7  52                 	db	82	;'R'
  1558  00FFC8  54                 	db	84	;'T'
  1559  00FFC9  3A                 	db	58	;':'
  1560  00FFCA  00                 	db	0
  1561  00FFCB                     STR_9:
  1562  00FFCB  46                 	db	70	;'F'
  1563  00FFCC  45                 	db	69	;'E'
  1564  00FFCD  42                 	db	66	;'B'
  1565  00FFCE  00                 	db	0
  1566  00FFCF                     STR_19:
  1567  00FFCF  44                 	db	68	;'D'
  1568  00FFD0  45                 	db	69	;'E'
  1569  00FFD1  43                 	db	67	;'C'
  1570  00FFD2  00                 	db	0
  1571  00FFD3                     STR_15:
  1572  00FFD3  41                 	db	65	;'A'
  1573  00FFD4  55                 	db	85	;'U'
  1574  00FFD5  47                 	db	71	;'G'
  1575  00FFD6  00                 	db	0
  1576  00FFD7                     STR_14:
  1577  00FFD7  4A                 	db	74	;'J'
  1578  00FFD8  55                 	db	85	;'U'
  1579  00FFD9  4C                 	db	76	;'L'
  1580  00FFDA  00                 	db	0
  1581  00FFDB                     STR_8:
  1582  00FFDB  4A                 	db	74	;'J'
  1583  00FFDC  41                 	db	65	;'A'
  1584  00FFDD  4E                 	db	78	;'N'
  1585  00FFDE  00                 	db	0
  1586  00FFDF                     STR_13:
  1587  00FFDF  4A                 	db	74	;'J'
  1588  00FFE0  55                 	db	85	;'U'
  1589  00FFE1  4E                 	db	78	;'N'
  1590  00FFE2  00                 	db	0
  1591  00FFE3                     STR_16:
  1592  00FFE3  53                 	db	83	;'S'
  1593  00FFE4  45                 	db	69	;'E'
  1594  00FFE5  50                 	db	80	;'P'
  1595  00FFE6  00                 	db	0
  1596  00FFE7                     STR_10:
  1597  00FFE7  4D                 	db	77	;'M'
  1598  00FFE8  41                 	db	65	;'A'
  1599  00FFE9  52                 	db	82	;'R'
  1600  00FFEA  00                 	db	0
  1601  00FFEB                     STR_11:
  1602  00FFEB  41                 	db	65	;'A'
  1603  00FFEC  50                 	db	80	;'P'
  1604  00FFED  52                 	db	82	;'R'
  1605  00FFEE  00                 	db	0
  1606  00FFEF                     STR_20:
  1607  00FFEF  45                 	db	69	;'E'
  1608  00FFF0  52                 	db	82	;'R'
  1609  00FFF1  52                 	db	82	;'R'
  1610  00FFF2  00                 	db	0
  1611  00FFF3                     STR_17:
  1612  00FFF3  4F                 	db	79	;'O'
  1613  00FFF4  43                 	db	67	;'C'
  1614  00FFF5  54                 	db	84	;'T'
  1615  00FFF6  00                 	db	0
  1616  00FFF7                     STR_18:
  1617  00FFF7  4E                 	db	78	;'N'
  1618  00FFF8  4F                 	db	79	;'O'
  1619  00FFF9  56                 	db	86	;'V'
  1620  00FFFA  00                 	db	0
  1621  00FFFB                     STR_12:
  1622  00FFFB  4D                 	db	77	;'M'
  1623  00FFFC  41                 	db	65	;'A'
  1624  00FFFD  59                 	db	89	;'Y'
  1625  00FFFE  00                 	db	0
  1626  0000                     
  1627                           ; #config settings
  1628  00FFFF  00                 	db	0	; dummy byte at the end
  1629  0000                     
  1630                           	psect	cinit
  1631  004542                     __pcinit:
  1632                           	opt stack 0
  1633  004542                     start_initialization:
  1634                           	opt stack 0
  1635  004542                     __initialization:
  1636                           	opt stack 0
  1637                           
  1638                           ; Initialize objects allocated to BANK1 (8 bytes)
  1639                           ; load TBLPTR registers with __pidataBANK1
  1640  004542  0E84               	movlw	low __pidataBANK1
  1641  004544  6EF6               	movwf	tblptrl,c
  1642  004546  0E4C               	movlw	high __pidataBANK1
  1643  004548  6EF7               	movwf	tblptrh,c
  1644  00454A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1645  00454C  6EF8               	movwf	tblptru,c
  1646  00454E  EE01  F035         	lfsr	0,__pdataBANK1
  1647  004552  EE10 F008          	lfsr	1,8
  1648  004556                     copy_data0:
  1649  004556  0009               	tblrd		*+
  1650  004558  CFF5 FFEE          	movff	tablat,postinc0
  1651  00455C  50E5               	movf	postdec1,w,c
  1652  00455E  50E1               	movf	fsr1l,w,c
  1653  004560  E1FA               	bnz	copy_data0
  1654                           
  1655                           ; Clear objects allocated to BANK1 (53 bytes)
  1656  004562  EE01  F000         	lfsr	0,__pbssBANK1
  1657  004566  0E35               	movlw	53
  1658  004568                     clear_0:
  1659  004568  6AEE               	clrf	postinc0,c
  1660  00456A  06E8               	decf	wreg,f,c
  1661  00456C  E1FD               	bnz	clear_0
  1662                           
  1663                           ; Clear objects allocated to BANK0 (38 bytes)
  1664  00456E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1665  004572  0E26               	movlw	38
  1666  004574                     clear_1:
  1667  004574  6AEE               	clrf	postinc0,c
  1668  004576  06E8               	decf	wreg,f,c
  1669  004578  E1FD               	bnz	clear_1
  1670                           
  1671                           ; Clear objects allocated to COMRAM (37 bytes)
  1672  00457A  EE00  F059         	lfsr	0,__pbssCOMRAM
  1673  00457E  0E25               	movlw	37
  1674  004580                     clear_2:
  1675  004580  6AEE               	clrf	postinc0,c
  1676  004582  06E8               	decf	wreg,f,c
  1677  004584  E1FD               	bnz	clear_2
  1678  004586                     end_of_initialization:
  1679                           	opt stack 0
  1680  004586                     __end_of__initialization:
  1681                           	opt stack 0
  1682  004586  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1683  004588  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1684  00458A  0100               	movlb	0
  1685  00458C  EF36  F01D         	goto	_main	;jump to C main() function
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           postdec1	equ	0xFE5
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	bssCOMRAM
  1696  000059                     __pbssCOMRAM:
  1697                           	opt stack 0
  1698  000059                     _back:
  1699                           	opt stack 0
  1700  000059                     	ds	2
  1701  00005B                     _count_pop_no_tab:
  1702                           	opt stack 0
  1703  00005B                     	ds	2
  1704  00005D                     _count_pop_w_tab:
  1705                           	opt stack 0
  1706  00005D                     	ds	2
  1707  00005F                     _debug:
  1708                           	opt stack 0
  1709  00005F                     	ds	2
  1710  000061                     _down:
  1711                           	opt stack 0
  1712  000061                     	ds	2
  1713  000063                     _enter:
  1714                           	opt stack 0
  1715  000063                     	ds	2
  1716  000065                     _f_ID_receive:
  1717                           	opt stack 0
  1718  000065                     	ds	2
  1719  000067                     _f_can_coming_to_ID:
  1720                           	opt stack 0
  1721  000067                     	ds	2
  1722  000069                     _f_can_coming_to_distribution:
  1723                           	opt stack 0
  1724  000069                     	ds	2
  1725  00006B                     _f_most_recent_sort_time:
  1726                           	opt stack 0
  1727  00006B                     	ds	2
  1728  00006D                     _first:
  1729                           	opt stack 0
  1730  00006D                     	ds	2
  1731  00006F                     _firstboot:
  1732                           	opt stack 0
  1733  00006F                     	ds	2
  1734  000071                     _log_count_can_no_lab:
  1735                           	opt stack 0
  1736  000071                     	ds	2
  1737  000073                     _log_count_can_w_lab:
  1738                           	opt stack 0
  1739  000073                     	ds	2
  1740  000075                     _log_count_total:
  1741                           	opt stack 0
  1742  000075                     	ds	2
  1743  000077                     _up:
  1744                           	opt stack 0
  1745  000077                     	ds	2
  1746  000079                     _was_low_1:
  1747                           	opt stack 0
  1748  000079                     	ds	2
  1749  00007B                     _was_low_3:
  1750                           	opt stack 0
  1751  00007B                     	ds	2
  1752  00007D                     _input:
  1753                           	opt stack 0
  1754  00007D                     	ds	1
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           
  1764                           	psect	bssBANK0
  1765  0000DA                     __pbssBANK0:
  1766                           	opt stack 0
  1767  0000DA                     _sensor_outputs:
  1768                           	opt stack 0
  1769  0000DA                     	ds	4
  1770  0000DE                     _IR_signal:
  1771                           	opt stack 0
  1772  0000DE                     	ds	2
  1773  0000E0                     _MAG_signal:
  1774                           	opt stack 0
  1775  0000E0                     	ds	2
  1776  0000E2                     _RTCflag:
  1777                           	opt stack 0
  1778  0000E2                     	ds	2
  1779  0000E4                     _cur_can:
  1780                           	opt stack 0
  1781  0000E4                     	ds	2
  1782  0000E6                     _cur_state:
  1783                           	opt stack 0
  1784  0000E6                     	ds	2
  1785  0000E8                     _f_lastCan:
  1786                           	opt stack 0
  1787  0000E8                     	ds	2
  1788  0000EA                     _f_loadingNewCan:
  1789                           	opt stack 0
  1790  0000EA                     	ds	2
  1791  0000EC                     _log:
  1792                           	opt stack 0
  1793  0000EC                     	ds	2
  1794  0000EE                     _log_completion:
  1795                           	opt stack 0
  1796  0000EE                     	ds	2
  1797  0000F0                     _log_count_pop_no_tab:
  1798                           	opt stack 0
  1799  0000F0                     	ds	2
  1800  0000F2                     _log_count_pop_w_tab:
  1801                           	opt stack 0
  1802  0000F2                     	ds	2
  1803  0000F4                     _log_total_time:
  1804                           	opt stack 0
  1805  0000F4                     	ds	2
  1806  0000F6                     _logstate:
  1807                           	opt stack 0
  1808  0000F6                     	ds	2
  1809  0000F8                     _total_time:
  1810                           	opt stack 0
  1811  0000F8                     	ds	2
  1812  0000FA                     _var:
  1813                           	opt stack 0
  1814  0000FA                     	ds	2
  1815  0000FC                     _machine_state:
  1816                           	opt stack 0
  1817  0000FC                     	ds	1
  1818  0000FD                     _sel:
  1819                           	opt stack 0
  1820  0000FD                     	ds	1
  1821  0000FE                     _count_total:
  1822                           	opt stack 0
  1823  0000FE                     	ds	2
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           postdec1	equ	0xFE5
  1831                           fsr1l	equ	0xFE1
  1832                           
  1833                           	psect	bssBANK1
  1834  000100                     __pbssBANK1:
  1835                           	opt stack 0
  1836  000100                     _log_startTime:
  1837                           	opt stack 0
  1838  000100                     	ds	14
  1839  00010E                     _startTime:
  1840                           	opt stack 0
  1841  00010E                     	ds	14
  1842  00011C                     _servoTimes:
  1843                           	opt stack 0
  1844  00011C                     	ds	8
  1845  000124                     _time:
  1846                           	opt stack 0
  1847  000124                     	ds	7
  1848  00012B                     _count_can_no_lab:
  1849                           	opt stack 0
  1850  00012B                     	ds	2
  1851  00012D                     _count_can_w_lab:
  1852                           	opt stack 0
  1853  00012D                     	ds	2
  1854  00012F                     _f_can_distributed:
  1855                           	opt stack 0
  1856  00012F                     	ds	2
  1857  000131                     _i:
  1858                           	opt stack 0
  1859  000131                     	ds	2
  1860  000133                     _most_recent_sort_time:
  1861                           	opt stack 0
  1862  000133                     	ds	2
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872                           	psect	dataBANK1
  1873  000135                     __pdataBANK1:
  1874                           	opt stack 0
  1875  000135                     UI@F3228:
  1876                           	opt stack 0
  1877  000135                     	ds	4
  1878  000139                     printRTC@F3219:
  1879                           	opt stack 0
  1880  000139                     	ds	4
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           
  1890                           	psect	cstackBANK0
  1891  000080                     __pcstackBANK0:
  1892                           	opt stack 0
  1893  000080                     ??_delay_ms:
  1894  000080                     ??_PortTests:
  1895  000080                     ??_isdigit:
  1896  000080                     ??_readADC:
  1897  000080                     ??_I2C_Master_Wait:
  1898  000080                     ?___wmul:
  1899                           	opt stack 0
  1900  000080                     ?___awmod:
  1901                           	opt stack 0
  1902  000080                     ?___lwdiv:
  1903                           	opt stack 0
  1904  000080                     ?___lldiv:
  1905                           	opt stack 0
  1906  000080                     lcdNibble@temp:
  1907                           	opt stack 0
  1908  000080                     initTime@m:
  1909                           	opt stack 0
  1910  000080                     updateServoPosition@time_us:
  1911                           	opt stack 0
  1912  000080                     EEPROM_read@address:
  1913                           	opt stack 0
  1914  000080                     ___wmul@multiplier:
  1915                           	opt stack 0
  1916  000080                     ___awmod@dividend:
  1917                           	opt stack 0
  1918  000080                     ___lwdiv@dividend:
  1919                           	opt stack 0
  1920  000080                     strcpy@to:
  1921                           	opt stack 0
  1922  000080                     ___lldiv@dividend:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x0
  1926  000080                     	ds	1
  1927  000081                     readADC@channel:
  1928                           	opt stack 0
  1929  000081                     I2C_Master_Read@a:
  1930                           	opt stack 0
  1931  000081                     lcdNibble@data:
  1932                           	opt stack 0
  1933  000081                     initTime@h:
  1934                           	opt stack 0
  1935  000081                     delay_ms@milliseconds:
  1936                           	opt stack 0
  1937  000081                     _isdigit$1963:
  1938                           	opt stack 0
  1939  000081                     I2C_Master_Write@d:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x1
  1943  000081                     	ds	1
  1944  000082                     ??_ID:
  1945  000082                     ??_readIR:
  1946  000082                     ??_readMAG:
  1947  000082                     I2C_Master_Read@temp:
  1948                           	opt stack 0
  1949  000082                     lcdInst@data:
  1950                           	opt stack 0
  1951  000082                     putch@data:
  1952                           	opt stack 0
  1953  000082                     initTime@w:
  1954                           	opt stack 0
  1955  000082                     isdigit@c:
  1956                           	opt stack 0
  1957  000082                     updateServoPosition@timer:
  1958                           	opt stack 0
  1959  000082                     ___wmul@multiplicand:
  1960                           	opt stack 0
  1961  000082                     ___awmod@divisor:
  1962                           	opt stack 0
  1963  000082                     ___lwdiv@divisor:
  1964                           	opt stack 0
  1965  000082                     strcpy@from:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0x2
  1969  000082                     	ds	1
  1970  000083                     ??_initLCD:
  1971  000083                     initTime@DD:
  1972                           	opt stack 0
  1973  000083                     getRTC@i:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x3
  1977  000083                     	ds	1
  1978  000084                     ??_updateServoPosition:
  1979  000084                     initTime@MM:
  1980                           	opt stack 0
  1981  000084                     ___awmod@counter:
  1982                           	opt stack 0
  1983  000084                     readIR@res:
  1984                           	opt stack 0
  1985  000084                     readMAG@res:
  1986                           	opt stack 0
  1987  000084                     ID@i:
  1988                           	opt stack 0
  1989  000084                     ___wmul@product:
  1990                           	opt stack 0
  1991  000084                     ___lwdiv@quotient:
  1992                           	opt stack 0
  1993  000084                     strcpy@cp:
  1994                           	opt stack 0
  1995  000084                     ___lldiv@divisor:
  1996                           	opt stack 0
  1997                           
  1998                           ; 4 bytes @ 0x4
  1999  000084                     	ds	1
  2000  000085                     ??_initSortTimer:
  2001  000085                     initTime@YY:
  2002                           	opt stack 0
  2003  000085                     ___awmod@sign:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x5
  2007  000085                     	ds	1
  2008  000086                     ??_getIR:
  2009  000086                     ??_getMAG:
  2010  000086                     ?___awdiv:
  2011                           	opt stack 0
  2012  000086                     initTime@s:
  2013                           	opt stack 0
  2014  000086                     ___lwdiv@counter:
  2015                           	opt stack 0
  2016  000086                     ID@i_1112:
  2017                           	opt stack 0
  2018  000086                     updateServoPosition@my_time:
  2019                           	opt stack 0
  2020  000086                     ___awdiv@dividend:
  2021                           	opt stack 0
  2022                           
  2023                           ; 2 bytes @ 0x6
  2024  000086                     	ds	1
  2025  000087                     ?___lwmod:
  2026                           	opt stack 0
  2027  000087                     getIR@i:
  2028                           	opt stack 0
  2029  000087                     ___lwmod@dividend:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x7
  2033  000087                     	ds	1
  2034  000088                     ??_Distribution:
  2035  000088                     ??_initServos:
  2036  000088                     initSortTimer@i:
  2037                           	opt stack 0
  2038  000088                     ___awdiv@divisor:
  2039                           	opt stack 0
  2040  000088                     ___lldiv@quotient:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x8
  2044  000088                     	ds	1
  2045  000089                     ___lwmod@divisor:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x9
  2049  000089                     	ds	1
  2050  00008A                     ___awdiv@counter:
  2051                           	opt stack 0
  2052                           
  2053                           ; 1 bytes @ 0xA
  2054  00008A                     	ds	1
  2055  00008B                     ___awdiv@sign:
  2056                           	opt stack 0
  2057  00008B                     ___lwmod@counter:
  2058                           	opt stack 0
  2059                           
  2060                           ; 1 bytes @ 0xB
  2061  00008B                     	ds	1
  2062  00008C                     ___lldiv@counter:
  2063                           	opt stack 0
  2064  00008C                     ___awdiv@quotient:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0xC
  2068  00008C                     	ds	1
  2069  00008D                     I2C_Master_Init@c:
  2070                           	opt stack 0
  2071                           
  2072                           ; 4 bytes @ 0xD
  2073  00008D                     	ds	1
  2074  00008E                     ?_printf:
  2075                           	opt stack 0
  2076  00008E                     printf@f:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0xE
  2080  00008E                     	ds	3
  2081  000091                     ??_I2C_Master_Init:
  2082                           
  2083                           ; 1 bytes @ 0x11
  2084  000091                     	ds	4
  2085  000095                     ??_loadRTC:
  2086                           
  2087                           ; 1 bytes @ 0x15
  2088  000095                     	ds	1
  2089  000096                     loadRTC@i:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x16
  2093  000096                     	ds	4
  2094  00009A                     ??_printf:
  2095                           
  2096                           ; 1 bytes @ 0x1A
  2097  00009A                     	ds	4
  2098  00009E                     printf@prec:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x1E
  2102  00009E                     	ds	1
  2103  00009F                     printf@cp:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x1F
  2107  00009F                     	ds	2
  2108  0000A1                     printf@ap:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x21
  2112  0000A1                     	ds	2
  2113  0000A3                     printf@len:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x23
  2117  0000A3                     	ds	2
  2118  0000A5                     printf@val:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x25
  2122  0000A5                     	ds	2
  2123  0000A7                     printf@flag:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x27
  2127  0000A7                     	ds	1
  2128  0000A8                     printf@c:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x28
  2132  0000A8                     	ds	1
  2133  0000A9                     printf@width:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x29
  2137  0000A9                     	ds	2
  2138  0000AB                     ??_printRTC:
  2139  0000AB                     ??_algorithmTest:
  2140  0000AB                     ??_sensorTest:
  2141  0000AB                     ??_actuatorTest:
  2142  0000AB                     ??_PortTestA5:
  2143  0000AB                     ??_SpeedTest:
  2144  0000AB                     ??_PusherTest:
  2145  0000AB                     ??_BothServos:
  2146  0000AB                     ??_BlockerTest:
  2147  0000AB                     EEPROM_write@address:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x2B
  2151  0000AB                     	ds	1
  2152  0000AC                     PusherTest@i:
  2153                           	opt stack 0
  2154  0000AC                     BlockerTest@i:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x2C
  2158  0000AC                     	ds	1
  2159  0000AD                     EEPROM_write@data:
  2160                           	opt stack 0
  2161  0000AD                     actuatorTest@i_1645:
  2162                           	opt stack 0
  2163  0000AD                     sensorTest@res:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x2D
  2167  0000AD                     	ds	1
  2168  0000AE                     ??_EEPROM_write:
  2169  0000AE                     actuatorTest@i_1652:
  2170                           	opt stack 0
  2171  0000AE                     PusherTest@i_1698:
  2172                           	opt stack 0
  2173  0000AE                     BlockerTest@cam_flag:
  2174                           	opt stack 0
  2175  0000AE                     printRTC@INT_time:
  2176                           	opt stack 0
  2177                           
  2178                           ; 14 bytes @ 0x2E
  2179  0000AE                     	ds	1
  2180  0000AF                     EEPROM_write@i:
  2181                           	opt stack 0
  2182  0000AF                     actuatorTest@i_1653:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x2F
  2186  0000AF                     	ds	1
  2187  0000B0                     EEPROM_write@i_1331:
  2188                           	opt stack 0
  2189  0000B0                     actuatorTest@i_1655:
  2190                           	opt stack 0
  2191  0000B0                     BlockerTest@cond_flag:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x30
  2195  0000B0                     	ds	1
  2196  0000B1                     ??_Loading:
  2197  0000B1                     logRun@num:
  2198                           	opt stack 0
  2199  0000B1                     actuatorTest@i_1656:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x31
  2203  0000B1                     	ds	1
  2204  0000B2                     logRun@byte1:
  2205                           	opt stack 0
  2206  0000B2                     actuatorTest@i_1658:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x32
  2210  0000B2                     	ds	1
  2211  0000B3                     logRun@byte2:
  2212                           	opt stack 0
  2213  0000B3                     actuatorTest@i_1659:
  2214                           	opt stack 0
  2215  0000B3                     Loading@addr:
  2216                           	opt stack 0
  2217                           
  2218                           ; 2 bytes @ 0x33
  2219  0000B3                     	ds	1
  2220  0000B4                     logRun@byte3:
  2221                           	opt stack 0
  2222  0000B4                     actuatorTest@i_1661:
  2223                           	opt stack 0
  2224                           
  2225                           ; 1 bytes @ 0x34
  2226  0000B4                     	ds	1
  2227  0000B5                     Loading@byte1:
  2228                           	opt stack 0
  2229  0000B5                     logRun@byte_i:
  2230                           	opt stack 0
  2231  0000B5                     actuatorTest@i_1662:
  2232                           	opt stack 0
  2233                           
  2234                           ; 1 bytes @ 0x35
  2235  0000B5                     	ds	1
  2236  0000B6                     logRun@byte11:
  2237                           	opt stack 0
  2238  0000B6                     actuatorTest@i_1664:
  2239                           	opt stack 0
  2240  0000B6                     Loading@i_1099:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x36
  2244  0000B6                     	ds	1
  2245  0000B7                     actuatorTest@i_1665:
  2246                           	opt stack 0
  2247  0000B7                     logRun@i:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x37
  2251  0000B7                     	ds	1
  2252  0000B8                     actuatorTest@i_1667:
  2253                           	opt stack 0
  2254  0000B8                     Loading@i_1100:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x38
  2258  0000B8                     	ds	1
  2259  0000B9                     actuatorTest@i_1668:
  2260                           	opt stack 0
  2261  0000B9                     logRun@addr:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x39
  2265  0000B9                     	ds	1
  2266  0000BA                     actuatorTest@i_1671:
  2267                           	opt stack 0
  2268  0000BA                     Loading@i:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x3A
  2272  0000BA                     	ds	1
  2273  0000BB                     actuatorTest@i_1672:
  2274                           	opt stack 0
  2275                           
  2276                           ; 1 bytes @ 0x3B
  2277  0000BB                     	ds	1
  2278  0000BC                     actuatorTest@i_1674:
  2279                           	opt stack 0
  2280  0000BC                     printRTC@RTC_month:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x3C
  2284  0000BC                     	ds	1
  2285  0000BD                     actuatorTest@i_1675:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x3D
  2289  0000BD                     	ds	1
  2290  0000BE                     actuatorTest@i_1677:
  2291                           	opt stack 0
  2292  0000BE                     printRTC@month:
  2293                           	opt stack 0
  2294                           
  2295                           ; 4 bytes @ 0x3E
  2296  0000BE                     	ds	1
  2297  0000BF                     actuatorTest@i_1678:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x3F
  2301  0000BF                     	ds	1
  2302  0000C0                     actuatorTest@i_1681:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x40
  2306  0000C0                     	ds	1
  2307  0000C1                     actuatorTest@i_1682:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x41
  2311  0000C1                     	ds	1
  2312  0000C2                     actuatorTest@i_1684:
  2313                           	opt stack 0
  2314  0000C2                     printRTC@i:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x42
  2318  0000C2                     	ds	1
  2319  0000C3                     actuatorTest@i_1685:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x43
  2323  0000C3                     	ds	1
  2324  0000C4                     ??_UI:
  2325  0000C4                     actuatorTest@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x44
  2329  0000C4                     	ds	2
  2330  0000C6                     ??_Test:
  2331  0000C6                     _UI$2316:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x46
  2335  0000C6                     	ds	2
  2336  0000C8                     UI@i:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x48
  2340  0000C8                     	ds	1
  2341  0000C9                     UI@i_407:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x49
  2345  0000C9                     	ds	1
  2346  0000CA                     UI@i_410:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x4A
  2350  0000CA                     	ds	1
  2351  0000CB                     UI@i_411:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x4B
  2355  0000CB                     	ds	1
  2356  0000CC                     UI@i_429:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x4C
  2360  0000CC                     	ds	1
  2361  0000CD                     UI@i_430:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x4D
  2365  0000CD                     	ds	1
  2366  0000CE                     UI@i_433:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0x4E
  2370  0000CE                     	ds	1
  2371  0000CF                     UI@i_434:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x4F
  2375  0000CF                     	ds	1
  2376  0000D0                     UI@i_437:
  2377                           	opt stack 0
  2378                           
  2379                           ; 1 bytes @ 0x50
  2380  0000D0                     	ds	1
  2381  0000D1                     UI@i_438:
  2382                           	opt stack 0
  2383                           
  2384                           ; 1 bytes @ 0x51
  2385  0000D1                     	ds	1
  2386  0000D2                     UI@i_441:
  2387                           	opt stack 0
  2388                           
  2389                           ; 1 bytes @ 0x52
  2390  0000D2                     	ds	1
  2391  0000D3                     UI@i_442:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x53
  2395  0000D3                     	ds	1
  2396  0000D4                     UI@i_445:
  2397                           	opt stack 0
  2398                           
  2399                           ; 1 bytes @ 0x54
  2400  0000D4                     	ds	1
  2401  0000D5                     UI@i_446:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0x55
  2405  0000D5                     	ds	1
  2406  0000D6                     UI@month:
  2407                           	opt stack 0
  2408                           
  2409                           ; 4 bytes @ 0x56
  2410  0000D6                     	ds	4
  2411  0000DA                     tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           postinc0	equ	0xFEE
  2416                           wreg	equ	0xFE8
  2417                           postdec1	equ	0xFE5
  2418                           fsr1l	equ	0xFE1
  2419                           
  2420                           ; 1 bytes @ 0x5A
  2421                           
  2422                           	psect	cstackCOMRAM
  2423  000001                     __pcstackCOMRAM:
  2424                           	opt stack 0
  2425  000001                     ??i2_I2C_Master_Wait:
  2426  000001                     ??i2_isdigit:
  2427  000001                     ?i2___wmul:
  2428                           	opt stack 0
  2429  000001                     ?i2___lwmod:
  2430                           	opt stack 0
  2431  000001                     i2lcdNibble@temp:
  2432                           	opt stack 0
  2433  000001                     i2EEPROM_read@address:
  2434                           	opt stack 0
  2435  000001                     i2___wmul@multiplier:
  2436                           	opt stack 0
  2437  000001                     i2___lwmod@dividend:
  2438                           	opt stack 0
  2439  000001                     i2strcpy@to:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x0
  2443  000001                     	ds	1
  2444  000002                     i2I2C_Master_Read@a:
  2445                           	opt stack 0
  2446  000002                     i2lcdNibble@data:
  2447                           	opt stack 0
  2448  000002                     i2_isdigit$1963:
  2449                           	opt stack 0
  2450  000002                     i2I2C_Master_Write@d:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x1
  2454  000002                     	ds	1
  2455  000003                     i2I2C_Master_Read@temp:
  2456                           	opt stack 0
  2457  000003                     i2lcdInst@data:
  2458                           	opt stack 0
  2459  000003                     i2putch@data:
  2460                           	opt stack 0
  2461  000003                     i2isdigit@c:
  2462                           	opt stack 0
  2463  000003                     i2___wmul@multiplicand:
  2464                           	opt stack 0
  2465  000003                     i2___lwmod@divisor:
  2466                           	opt stack 0
  2467  000003                     i2strcpy@from:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x2
  2471  000003                     	ds	1
  2472  000004                     i2getRTC@i:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x3
  2476  000004                     	ds	1
  2477  000005                     i2___lwmod@counter:
  2478                           	opt stack 0
  2479  000005                     i2___wmul@product:
  2480                           	opt stack 0
  2481  000005                     i2strcpy@cp:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x4
  2485  000005                     	ds	1
  2486  000006                     ?i2___lwdiv:
  2487                           	opt stack 0
  2488  000006                     i2___lwdiv@dividend:
  2489                           	opt stack 0
  2490                           
  2491                           ; 2 bytes @ 0x5
  2492  000006                     	ds	1
  2493  000007                     retrieveLog@logNum:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x6
  2497  000007                     	ds	1
  2498  000008                     i2___lwdiv@divisor:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x7
  2502  000008                     	ds	1
  2503  000009                     ??_retrieveLog:
  2504                           
  2505                           ; 1 bytes @ 0x8
  2506  000009                     	ds	1
  2507  00000A                     i2___lwdiv@quotient:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x9
  2511  00000A                     	ds	1
  2512  00000B                     retrieveLog@byte1:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0xA
  2516  00000B                     	ds	1
  2517  00000C                     retrieveLog@byte2:
  2518                           	opt stack 0
  2519  00000C                     i2___lwdiv@counter:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0xB
  2523  00000C                     	ds	1
  2524  00000D                     ?i2_printf:
  2525                           	opt stack 0
  2526  00000D                     retrieveLog@byte3:
  2527                           	opt stack 0
  2528  00000D                     i2printf@f:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0xC
  2532  00000D                     	ds	1
  2533  00000E                     retrieveLog@i:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0xD
  2537  00000E                     	ds	2
  2538  000010                     retrieveLog@addr:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0xF
  2542  000010                     	ds	2
  2543  000012                     dispLogs@myLog:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x11
  2547  000012                     	ds	2
  2548  000014                     
  2549                           ; 1 bytes @ 0x13
  2550  000014                     	ds	5
  2551  000019                     ??i2_printf:
  2552                           
  2553                           ; 1 bytes @ 0x18
  2554  000019                     	ds	4
  2555  00001D                     i2printf@prec:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x1C
  2559  00001D                     	ds	1
  2560  00001E                     i2printf@cp:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x1D
  2564  00001E                     	ds	2
  2565  000020                     i2printf@ap:
  2566                           	opt stack 0
  2567                           
  2568                           ; 2 bytes @ 0x1F
  2569  000020                     	ds	2
  2570  000022                     i2printf@len:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x21
  2574  000022                     	ds	2
  2575  000024                     i2printf@val:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x23
  2579  000024                     	ds	2
  2580  000026                     i2printf@flag:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x25
  2584  000026                     	ds	1
  2585  000027                     i2printf@c:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x26
  2589  000027                     	ds	1
  2590  000028                     i2printf@width:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x27
  2594  000028                     	ds	2
  2595  00002A                     ??_printSortTimer:
  2596  00002A                     ??i2_printRTC:
  2597  00002A                     ?_inputHandler:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x29
  2601  00002A                     	ds	2
  2602  00002C                     ??_inputHandler:
  2603                           
  2604                           ; 1 bytes @ 0x2B
  2605  00002C                     	ds	1
  2606  00002D                     printSortTimer@curTime:
  2607                           	opt stack 0
  2608  00002D                     i2printRTC@INT_time:
  2609                           	opt stack 0
  2610                           
  2611                           ; 14 bytes @ 0x2C
  2612  00002D                     	ds	14
  2613  00003B                     printSortTimer@start_sec:
  2614                           	opt stack 0
  2615  00003B                     i2printRTC@RTC_month:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x3A
  2619  00003B                     	ds	2
  2620  00003D                     printSortTimer@cur_sec:
  2621                           	opt stack 0
  2622  00003D                     i2printRTC@month:
  2623                           	opt stack 0
  2624                           
  2625                           ; 4 bytes @ 0x3C
  2626  00003D                     	ds	2
  2627  00003F                     printSortTimer@min:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x3E
  2631  00003F                     	ds	2
  2632  000041                     printSortTimer@sec:
  2633                           	opt stack 0
  2634  000041                     i2printRTC@i:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x40
  2638  000041                     	ds	2
  2639  000043                     ??_updateMenu:
  2640  000043                     _printSortTimer$2436:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x42
  2644  000043                     	ds	2
  2645  000045                     printSortTimer@i:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x44
  2649  000045                     	ds	2
  2650  000047                     printSortTimer@timeDiff:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x46
  2654  000047                     	ds	2
  2655  000049                     ??_handler:
  2656                           
  2657                           ; 1 bytes @ 0x48
  2658  000049                     	ds	16
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           postdec1	equ	0xFE5
  2666                           fsr1l	equ	0xFE1
  2667                           
  2668 ;;
  2669 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2670 ;;
  2671 ;; *************** function _main *****************
  2672 ;; Defined at:
  2673 ;;		line 19 in file "main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        0 bytes
  2692 ;; Hardware stack levels required when called:   13
  2693 ;; This function calls:
  2694 ;;		_I2C_Master_Init
  2695 ;;		_Test
  2696 ;;		_UI
  2697 ;;		_initLCD
  2698 ;;		_initTime
  2699 ;;		_initUI
  2700 ;;		_logRun
  2701 ;;		_machineConfig
  2702 ;;		_sort
  2703 ;;		_stopSignals
  2704 ;; This function is called by:
  2705 ;;		Startup code after reset
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text0
  2710  003A6C                     __ptext0:
  2711                           	opt stack 0
  2712  003A6C                     _main:
  2713                           	opt stack 18
  2714                           
  2715                           ;main.c: 20: machineConfig();
  2716                           
  2717                           ;incstack = 0
  2718  003A6C  ECC4  F021         	call	_machineConfig	;wreg free
  2719                           
  2720                           ;main.c: 21: initLCD();
  2721  003A70  EC14  F023         	call	_initLCD	;wreg free
  2722                           
  2723                           ;main.c: 24: RTCflag = 0;
  2724  003A74  0E00               	movlw	0
  2725  003A76  0100               	movlb	0	; () banked
  2726  003A78  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2727  003A7A  0E00               	movlw	0
  2728  003A7C  6FE2               	movwf	_RTCflag& (0+255),b
  2729                           
  2730                           ;main.c: 25: if(RTCflag){
  2731  003A7E  0100               	movlb	0	; () banked
  2732  003A80  51E2               	movf	_RTCflag& (0+255),w,b
  2733  003A82  0100               	movlb	0	; () banked
  2734  003A84  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2735  003A86  B4D8               	btfsc	status,2,c
  2736  003A88  D016               	goto	l8539
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2740  003A8A  0E20               	movlw	32
  2741  003A8C  0100               	movlb	0	; () banked
  2742  003A8E  6F80               	movwf	initTime@m& (0+255),b
  2743  003A90  0E15               	movlw	21
  2744  003A92  0100               	movlb	0	; () banked
  2745  003A94  6F81               	movwf	initTime@h& (0+255),b
  2746  003A96  0E04               	movlw	4
  2747  003A98  0100               	movlb	0	; () banked
  2748  003A9A  6F82               	movwf	initTime@w& (0+255),b
  2749  003A9C  0E15               	movlw	21
  2750  003A9E  0100               	movlb	0	; () banked
  2751  003AA0  6F83               	movwf	initTime@DD& (0+255),b
  2752  003AA2  0E03               	movlw	3
  2753  003AA4  0100               	movlb	0	; () banked
  2754  003AA6  6F84               	movwf	initTime@MM& (0+255),b
  2755  003AA8  0E17               	movlw	23
  2756  003AAA  0100               	movlb	0	; () banked
  2757  003AAC  6F85               	movwf	initTime@YY& (0+255),b
  2758  003AAE  0E42               	movlw	66
  2759  003AB0  ECC7  F025         	call	_initTime
  2760                           
  2761                           ;main.c: 27: }
  2762  003AB4  D00B               	goto	l8541
  2763  003AB6                     l8539:
  2764                           
  2765                           ;main.c: 28: else{
  2766                           ;main.c: 29: I2C_Master_Init(10000);
  2767  003AB6  0E10               	movlw	16
  2768  003AB8  0100               	movlb	0	; () banked
  2769  003ABA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2770  003ABC  0E27               	movlw	39
  2771  003ABE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2772  003AC0  0E00               	movlw	0
  2773  003AC2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2774  003AC4  0E00               	movlw	0
  2775  003AC6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2776  003AC8  EC94  F021         	call	_I2C_Master_Init	;wreg free
  2777  003ACC                     l8541:
  2778                           
  2779                           ;main.c: 30: }
  2780                           ;main.c: 32: initUI();
  2781  003ACC  ECD0  F024         	call	_initUI	;wreg free
  2782                           
  2783                           ;main.c: 33: first = 1;
  2784  003AD0  0E00               	movlw	0
  2785  003AD2  6E6E               	movwf	_first+1,c
  2786  003AD4  0E01               	movlw	1
  2787  003AD6  6E6D               	movwf	_first,c
  2788                           
  2789                           ;main.c: 44: switch(machine_state){
  2790                           
  2791                           ;main.c: 43: while(1){
  2792  003AD8  D017               	goto	l8563
  2793  003ADA                     l8545:
  2794                           
  2795                           ;main.c: 46: UI();
  2796  003ADA  EC65  F004         	call	_UI	;wreg free
  2797                           
  2798                           ;main.c: 47: break;
  2799  003ADE  D014               	goto	l8563
  2800  003AE0                     l8547:
  2801                           
  2802                           ;main.c: 49: sort();
  2803  003AE0  ECB6  F025         	call	_sort	;wreg free
  2804                           
  2805                           ;main.c: 50: break;
  2806  003AE4  D011               	goto	l8563
  2807  003AE6                     l8549:
  2808                           
  2809                           ;main.c: 52: stopSignals();
  2810  003AE6  ECF3  F025         	call	_stopSignals	;wreg free
  2811                           
  2812                           ;main.c: 53: logRun();
  2813  003AEA  EC3A  F01A         	call	_logRun	;wreg free
  2814                           
  2815                           ;main.c: 54: first = 1;
  2816  003AEE  0E00               	movlw	0
  2817  003AF0  6E6E               	movwf	_first+1,c
  2818  003AF2  0E01               	movlw	1
  2819  003AF4  6E6D               	movwf	_first,c
  2820                           
  2821                           ;main.c: 55: UI();
  2822  003AF6  EC65  F004         	call	_UI	;wreg free
  2823                           
  2824                           ;main.c: 56: break;
  2825  003AFA  D006               	goto	l8563
  2826  003AFC                     l8557:
  2827                           
  2828                           ;main.c: 58: Test();
  2829  003AFC  EC6A  F01B         	call	_Test	;wreg free
  2830                           
  2831                           ;main.c: 59: break;
  2832  003B00  D003               	goto	l8563
  2833  003B02                     l8559:
  2834                           
  2835                           ;main.c: 61: stopSignals();
  2836  003B02  ECF3  F025         	call	_stopSignals	;wreg free
  2837  003B06                     l482:
  2838  003B06  D7FF               	goto	l482
  2839  003B08                     l8563:
  2840  003B08  0100               	movlb	0	; () banked
  2841  003B0A  51FC               	movf	_machine_state& (0+255),w,b
  2842                           
  2843                           ; Switch size 1, requested type "space"
  2844                           ; Number of cases is 5, Range of values is 0 to 4
  2845                           ; switch strategies available:
  2846                           ; Name         Instructions Cycles
  2847                           ; simple_byte           16     9 (average)
  2848                           ;	Chosen strategy is simple_byte
  2849  003B0C  0A00               	xorlw	0	; case 0
  2850  003B0E  B4D8               	btfsc	status,2,c
  2851  003B10  D7E4               	goto	l8545
  2852  003B12  0A01               	xorlw	1	; case 1
  2853  003B14  B4D8               	btfsc	status,2,c
  2854  003B16  D7E4               	goto	l8547
  2855  003B18  0A03               	xorlw	3	; case 2
  2856  003B1A  B4D8               	btfsc	status,2,c
  2857  003B1C  D7E4               	goto	l8549
  2858  003B1E  0A01               	xorlw	1	; case 3
  2859  003B20  B4D8               	btfsc	status,2,c
  2860  003B22  D7EC               	goto	l8557
  2861  003B24  0A07               	xorlw	7	; case 4
  2862  003B26  B4D8               	btfsc	status,2,c
  2863  003B28  D7EC               	goto	l8559
  2864                           
  2865                           ; BSR set to: 0
  2866                           
  2867                           ; BSR set to: 0
  2868  003B2A  D7EE               	goto	l8563
  2869  003B2C                     __end_of_main:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1l	equ	0xFE1
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _stopSignals *****************
  2882 ;; Defined at:
  2883 ;;		line 70 in file "main.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        0 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text1
  2912  004BE6                     __ptext1:
  2913                           	opt stack 0
  2914  004BE6                     _stopSignals:
  2915                           	opt stack 23
  2916                           
  2917                           ;main.c: 71: LATA = 0x00;
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;incstack = 0
  2921  004BE6  0E00               	movlw	0
  2922  004BE8  6E89               	movwf	3977,c	;volatile
  2923                           
  2924                           ;main.c: 72: LATB = 0x00;
  2925  004BEA  0E00               	movlw	0
  2926  004BEC  6E8A               	movwf	3978,c	;volatile
  2927                           
  2928                           ;main.c: 73: LATC = 0x00;
  2929  004BEE  0E00               	movlw	0
  2930  004BF0  6E8B               	movwf	3979,c	;volatile
  2931                           
  2932                           ;main.c: 74: LATD = 0x00;
  2933  004BF2  0E00               	movlw	0
  2934  004BF4  6E8C               	movwf	3980,c	;volatile
  2935                           
  2936                           ;main.c: 75: LATE = 0x00;
  2937  004BF6  0E00               	movlw	0
  2938  004BF8  6E8D               	movwf	3981,c	;volatile
  2939  004BFA  0012               	return		;funcret
  2940  004BFC                     __end_of_stopSignals:
  2941                           	opt stack 0
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _sort *****************
  2953 ;; Defined at:
  2954 ;;		line 58 in file "sort.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:   12
  2975 ;; This function calls:
  2976 ;;		_Distribution
  2977 ;;		_ID
  2978 ;;		_Loading
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text2
  2985  004B6C                     __ptext2:
  2986                           	opt stack 0
  2987  004B6C                     _sort:
  2988                           	opt stack 18
  2989                           
  2990                           ;sort.c: 59: if(machine_state == Sorting_state){
  2991                           
  2992                           ;incstack = 0
  2993  004B6C  0100               	movlb	0	; () banked
  2994  004B6E  05FC               	decf	_machine_state& (0+255),w,b
  2995  004B70  B4D8               	btfsc	status,2,c
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;sort.c: 60: Loading();
  2999  004B72  EC91  F012         	call	_Loading	;wreg free
  3000                           
  3001                           ;sort.c: 61: }
  3002                           ;sort.c: 62: if(machine_state == Sorting_state){
  3003  004B76  0100               	movlb	0	; () banked
  3004  004B78  05FC               	decf	_machine_state& (0+255),w,b
  3005  004B7A  B4D8               	btfsc	status,2,c
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;sort.c: 63: ID();
  3009  004B7C  ECDE  F017         	call	_ID	;wreg free
  3010                           
  3011                           ;sort.c: 64: }
  3012                           ;sort.c: 65: if(machine_state == Sorting_state){
  3013  004B80  0100               	movlb	0	; () banked
  3014  004B82  05FC               	decf	_machine_state& (0+255),w,b
  3015  004B84  A4D8               	btfss	status,2,c
  3016  004B86  0012               	return	
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;sort.c: 66: Distribution();
  3020  004B88  ECDA  F014         	call	_Distribution	;wreg free
  3021  004B8C  0012               	return	
  3022  004B8E                     __end_of_sort:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1l	equ	0xFE1
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _Loading *****************
  3035 ;; Defined at:
  3036 ;;		line 70 in file "sort.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  i               2   56[BANK0 ] int 
  3041 ;;  i               2   54[BANK0 ] int 
  3042 ;;  i               2   58[BANK0 ] int 
  3043 ;;  addr            2   51[BANK0 ] unsigned short 
  3044 ;;  byte1           1   53[BANK0 ] unsigned char 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;Total ram usage:       11 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:   11
  3061 ;; This function calls:
  3062 ;;		_EEPROM_read
  3063 ;;		_EEPROM_write
  3064 ;;		_delay_ms
  3065 ;;		_getIR
  3066 ;;		_getMAG
  3067 ;;		_initGlobalVars
  3068 ;;		_initServos
  3069 ;;		_initSortTimer
  3070 ;;		_lcdInst
  3071 ;;		_readIR
  3072 ;; This function is called by:
  3073 ;;		_sort
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text3
  3078  002522                     __ptext3:
  3079                           	opt stack 0
  3080  002522                     _Loading:
  3081                           	opt stack 18
  3082                           
  3083                           ;sort.c: 71: if(first){
  3084                           
  3085                           ;incstack = 0
  3086  002522  506D               	movf	_first,w,c
  3087  002524  106E               	iorwf	_first+1,w,c
  3088  002526  B4D8               	btfsc	status,2,c
  3089  002528  D074               	goto	l6697
  3090                           
  3091                           ;sort.c: 72: initGlobalVars();
  3092  00252A  EC06  F020         	call	_initGlobalVars	;wreg free
  3093                           
  3094                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3095  00252E  0E01               	movlw	1
  3096  002530  EC24  F026         	call	_lcdInst
  3097  002534  0E68               	movlw	104
  3098  002536  0100               	movlb	0	; () banked
  3099  002538  6FB1               	movwf	??_Loading& (0+255),b
  3100  00253A  0EE4               	movlw	228
  3101  00253C                     u7817:
  3102  00253C  2EE8               	decfsz	wreg,f,c
  3103  00253E  D7FE               	bra	u7817
  3104  002540  2FB1               	decfsz	??_Loading& (0+255),f,b
  3105  002542  D7FC               	bra	u7817
  3106  002544  F000               	nop	
  3107                           
  3108                           ;sort.c: 74: initSortTimer();
  3109  002546  EC53  F01E         	call	_initSortTimer	;wreg free
  3110                           
  3111                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3112  00254A  8A8B               	bsf	3979,5,c	;volatile
  3113                           
  3114                           ;sort.c: 80: sel = EEPROM_read(0);
  3115  00254C  0E00               	movlw	0
  3116  00254E  0100               	movlb	0	; () banked
  3117  002550  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3118  002552  0E00               	movlw	0
  3119  002554  6F80               	movwf	EEPROM_read@address& (0+255),b
  3120  002556  ECE7  F025         	call	_EEPROM_read	;wreg free
  3121  00255A  0100               	movlb	0	; () banked
  3122  00255C  6FFD               	movwf	_sel& (0+255),b
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3126  00255E  0100               	movlb	0	; () banked
  3127  002560  51FD               	movf	_sel& (0+255),w,b
  3128  002562  0D0B               	mullw	11
  3129  002564  0E01               	movlw	1
  3130  002566  24F3               	addwf	prodl,w,c
  3131  002568  0100               	movlb	0	; () banked
  3132  00256A  6FB3               	movwf	Loading@addr& (0+255),b
  3133  00256C  0E00               	movlw	0
  3134  00256E  20F4               	addwfc	prodh,w,c
  3135  002570  0100               	movlb	0	; () banked
  3136  002572  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3140  002574  0E7F               	movlw	127
  3141  002576  0100               	movlb	0	; () banked
  3142  002578  6FB5               	movwf	Loading@byte1& (0+255),b
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3146  00257A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3147  00257E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3148  002582  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3149  002586  ECF4  F01B         	call	_EEPROM_write	;wreg free
  3150                           
  3151                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3152  00258A  9A89               	bcf	3977,5,c	;volatile
  3153                           
  3154                           ;sort.c: 88: for(int i=0; i<46; i++){
  3155  00258C  0E00               	movlw	0
  3156  00258E  0100               	movlb	0	; () banked
  3157  002590  6FBB               	movwf	(Loading@i+1)& (0+255),b
  3158  002592  0E00               	movlw	0
  3159  002594  6FBA               	movwf	Loading@i& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162  002596  0100               	movlb	0	; () banked
  3163  002598  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3164  00259A  D008               	goto	l6685
  3165  00259C  0100               	movlb	0	; () banked
  3166  00259E  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3167  0025A0  E126               	bnz	l731
  3168  0025A2  0E2E               	movlw	46
  3169  0025A4  0100               	movlb	0	; () banked
  3170  0025A6  5DBA               	subwf	Loading@i& (0+255),w,b
  3171  0025A8  B0D8               	btfsc	status,0,c
  3172  0025AA  D021               	goto	l731
  3173  0025AC                     l6685:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3177  0025AC  BA89               	btfsc	3977,5,c	;volatile
  3178  0025AE  D004               	goto	u5220
  3179  0025B0  0100               	movlb	0	; () banked
  3180  0025B2  6BB1               	clrf	??_Loading& (0+255),b
  3181  0025B4  2BB1               	incf	??_Loading& (0+255),f,b
  3182  0025B6  D002               	goto	u5238
  3183  0025B8                     u5220:
  3184  0025B8  0100               	movlb	0	; () banked
  3185  0025BA  6BB1               	clrf	??_Loading& (0+255),b
  3186  0025BC                     u5238:
  3187  0025BC  0100               	movlb	0	; () banked
  3188  0025BE  3BB1               	swapf	??_Loading& (0+255),f,b
  3189  0025C0  47B1               	rlncf	??_Loading& (0+255),f,b
  3190  0025C2  5089               	movf	3977,w,c	;volatile
  3191  0025C4  0100               	movlb	0	; () banked
  3192  0025C6  19B1               	xorwf	??_Loading& (0+255),w,b
  3193  0025C8  0BDF               	andlw	-33
  3194  0025CA  19B1               	xorwf	??_Loading& (0+255),w,b
  3195  0025CC  6E89               	movwf	3977,c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;sort.c: 90: delay_ms(45-i);
  3199  0025CE  0100               	movlb	0	; () banked
  3200  0025D0  51BA               	movf	Loading@i& (0+255),w,b
  3201  0025D2  0800               	sublw	0
  3202  0025D4  0F2D               	addlw	45
  3203  0025D6  EC56  F025         	call	_delay_ms
  3204  0025DA  0100               	movlb	0	; () banked
  3205  0025DC  4BBA               	infsnz	Loading@i& (0+255),f,b
  3206  0025DE  2BBB               	incf	(Loading@i+1)& (0+255),f,b
  3207                           
  3208                           ; BSR set to: 0
  3209  0025E0  0100               	movlb	0	; () banked
  3210  0025E2  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3211  0025E4  D7E3               	goto	l6685
  3212  0025E6  0100               	movlb	0	; () banked
  3213  0025E8  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3214  0025EA  E101               	bnz	u5240
  3215  0025EC  D7DA               	goto	L1
  3216  0025EE                     u5240:
  3217  0025EE                     l731:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;sort.c: 91: }
  3221                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3222  0025EE  8A89               	bsf	3977,5,c	;volatile
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;sort.c: 95: initServos();
  3226  0025F0  EC20  F022         	call	_initServos	;wreg free
  3227                           
  3228                           ;sort.c: 96: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3229  0025F4  0ECB               	movlw	203
  3230  0025F6  0100               	movlb	0	; () banked
  3231  0025F8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3232  0025FA  0EEC               	movlw	236
  3233  0025FC  0100               	movlb	0	; () banked
  3234  0025FE  6FB1               	movwf	??_Loading& (0+255),b
  3235  002600  0E84               	movlw	132
  3236  002602                     u7827:
  3237  002602  2EE8               	decfsz	wreg,f,c
  3238  002604  D7FE               	bra	u7827
  3239  002606  2FB1               	decfsz	??_Loading& (0+255),f,b
  3240  002608  D7FC               	bra	u7827
  3241  00260A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3242  00260C  D7FA               	bra	u7827
  3243  00260E  F000               	nop	
  3244                           
  3245                           ;sort.c: 97: }
  3246  002610  0012               	return	
  3247  002612                     l6697:
  3248                           
  3249                           ;sort.c: 98: else{
  3250                           ;sort.c: 101: if(!f_loadingNewCan){
  3251  002612  0100               	movlb	0	; () banked
  3252  002614  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3253  002616  0100               	movlb	0	; () banked
  3254  002618  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3255  00261A  A4D8               	btfss	status,2,c
  3256  00261C  D018               	goto	l6713
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;sort.c: 103: getIR();
  3260  00261E  ECBD  F020         	call	_getIR	;wreg free
  3261                           
  3262                           ;sort.c: 105: if(!f_loadingNewCan){
  3263  002622  0100               	movlb	0	; () banked
  3264  002624  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3265  002626  0100               	movlb	0	; () banked
  3266  002628  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3267  00262A  B4D8               	btfsc	status,2,c
  3268  00262C  0012               	return	
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;sort.c: 109: else{
  3272                           ;sort.c: 110: count_total++;
  3273                           
  3274                           ; BSR set to: 0
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;sort.c: 107: }
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;sort.c: 106: return;
  3281  00262E  0100               	movlb	0	; () banked
  3282  002630  4BFE               	infsnz	_count_total& (0+255),f,b
  3283  002632  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 111: if(count_total == 12){
  3287  002634  0E0C               	movlw	12
  3288  002636  0100               	movlb	0	; () banked
  3289  002638  19FE               	xorwf	_count_total& (0+255),w,b
  3290  00263A  0100               	movlb	0	; () banked
  3291  00263C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3292  00263E  A4D8               	btfss	status,2,c
  3293  002640  0012               	return	
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;sort.c: 112: f_lastCan = 1;
  3297  002642  0E00               	movlw	0
  3298  002644  0100               	movlb	0	; () banked
  3299  002646  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3300  002648  0E01               	movlw	1
  3301  00264A  6FE8               	movwf	_f_lastCan& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 113: }
  3305                           ;sort.c: 114: }
  3306                           ;sort.c: 115: }
  3307                           
  3308                           ; BSR set to: 0
  3309  00264C  0012               	return	
  3310  00264E                     l6713:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;sort.c: 118: else if(f_ID_receive){
  3314  00264E  5065               	movf	_f_ID_receive,w,c
  3315  002650  1066               	iorwf	_f_ID_receive+1,w,c
  3316  002652  B4D8               	btfsc	status,2,c
  3317  002654  0012               	return	
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;sort.c: 119: f_loadingNewCan = 0;
  3321  002656  0E00               	movlw	0
  3322  002658  0100               	movlb	0	; () banked
  3323  00265A  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3324  00265C  0E00               	movlw	0
  3325  00265E  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;sort.c: 120: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3329  002660  0E3D               	movlw	61
  3330  002662  0100               	movlb	0	; () banked
  3331  002664  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3332  002666  0EE1               	movlw	225
  3333  002668  0100               	movlb	0	; () banked
  3334  00266A  6FB1               	movwf	??_Loading& (0+255),b
  3335  00266C  0E3F               	movlw	63
  3336  00266E                     u7837:
  3337  00266E  2EE8               	decfsz	wreg,f,c
  3338  002670  D7FE               	bra	u7837
  3339  002672  2FB1               	decfsz	??_Loading& (0+255),f,b
  3340  002674  D7FC               	bra	u7837
  3341  002676  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3342  002678  D7FA               	bra	u7837
  3343  00267A  D000               	nop2	
  3344                           
  3345                           ;sort.c: 121: LATAbits.LATA5 = 0;
  3346  00267C  9A89               	bcf	3977,5,c	;volatile
  3347                           
  3348                           ;sort.c: 125: getMAG();
  3349  00267E  ECC6  F023         	call	_getMAG	;wreg free
  3350                           
  3351                           ;sort.c: 126: sensor_outputs[0] = MAG_signal;
  3352  002682  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3353  002686  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3354                           
  3355                           ;sort.c: 128: if(sensor_outputs[0]){
  3356  00268A  0100               	movlb	0	; () banked
  3357  00268C  51DA               	movf	_sensor_outputs& (0+255),w,b
  3358  00268E  0100               	movlb	0	; () banked
  3359  002690  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3360  002692  B4D8               	btfsc	status,2,c
  3361  002694  D01D               	goto	l6739
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;sort.c: 129: for(int i = 0; i<2500; i++){
  3365  002696  0E00               	movlw	0
  3366  002698  0100               	movlb	0	; () banked
  3367  00269A  6FB7               	movwf	(Loading@i_1099+1)& (0+255),b
  3368  00269C  0E00               	movlw	0
  3369  00269E  6FB6               	movwf	Loading@i_1099& (0+255),b
  3370  0026A0                     l6729:
  3371                           
  3372                           ; BSR set to: 0
  3373  0026A0  0100               	movlb	0	; () banked
  3374  0026A2  BFB7               	btfsc	(Loading@i_1099+1)& (0+255),7,b
  3375  0026A4  D008               	goto	l741
  3376  0026A6  0EC4               	movlw	196
  3377  0026A8  0100               	movlb	0	; () banked
  3378  0026AA  5DB6               	subwf	Loading@i_1099& (0+255),w,b
  3379  0026AC  0E09               	movlw	9
  3380  0026AE  0100               	movlb	0	; () banked
  3381  0026B0  59B7               	subwfb	(Loading@i_1099+1)& (0+255),w,b
  3382  0026B2  B0D8               	btfsc	status,0,c
  3383  0026B4  D02A               	goto	l6751
  3384  0026B6                     l741:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 130: LATAbits.LATA4 = 1;
  3388  0026B6  8889               	bsf	3977,4,c	;volatile
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;sort.c: 131: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3392  0026B8  0EC8               	movlw	200
  3393  0026BA                     u7847:
  3394  0026BA  2EE8               	decfsz	wreg,f,c
  3395  0026BC  D7FE               	bra	u7847
  3396                           
  3397                           ;sort.c: 132: LATAbits.LATA4 = 0;
  3398  0026BE  9889               	bcf	3977,4,c	;volatile
  3399                           
  3400                           ;sort.c: 133: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3401  0026C0  0E42               	movlw	66
  3402  0026C2                     u7857:
  3403  0026C2  2EE8               	decfsz	wreg,f,c
  3404  0026C4  D7FE               	bra	u7857
  3405  0026C6  D000               	nop2	
  3406  0026C8  0100               	movlb	0	; () banked
  3407  0026CA  4BB6               	infsnz	Loading@i_1099& (0+255),f,b
  3408  0026CC  2BB7               	incf	(Loading@i_1099+1)& (0+255),f,b
  3409  0026CE  D7E8               	goto	l6729
  3410  0026D0                     l6739:
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;sort.c: 136: else{
  3414                           ;sort.c: 137: for(int i = 0; i<2500; i++){
  3415  0026D0  0E00               	movlw	0
  3416  0026D2  0100               	movlb	0	; () banked
  3417  0026D4  6FB9               	movwf	(Loading@i_1100+1)& (0+255),b
  3418  0026D6  0E00               	movlw	0
  3419  0026D8  6FB8               	movwf	Loading@i_1100& (0+255),b
  3420  0026DA                     l6741:
  3421                           
  3422                           ; BSR set to: 0
  3423  0026DA  0100               	movlb	0	; () banked
  3424  0026DC  BFB9               	btfsc	(Loading@i_1100+1)& (0+255),7,b
  3425  0026DE  D008               	goto	l744
  3426  0026E0  0EC4               	movlw	196
  3427  0026E2  0100               	movlb	0	; () banked
  3428  0026E4  5DB8               	subwf	Loading@i_1100& (0+255),w,b
  3429  0026E6  0E09               	movlw	9
  3430  0026E8  0100               	movlb	0	; () banked
  3431  0026EA  59B9               	subwfb	(Loading@i_1100+1)& (0+255),w,b
  3432  0026EC  B0D8               	btfsc	status,0,c
  3433  0026EE  D00D               	goto	l6751
  3434  0026F0                     l744:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;sort.c: 138: LATAbits.LATA4 = 1;
  3438  0026F0  8889               	bsf	3977,4,c	;volatile
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;sort.c: 139: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3442  0026F2  0E9A               	movlw	154
  3443  0026F4                     u7867:
  3444  0026F4  2EE8               	decfsz	wreg,f,c
  3445  0026F6  D7FE               	bra	u7867
  3446  0026F8  D000               	nop2	
  3447                           
  3448                           ;sort.c: 140: LATAbits.LATA4 = 0;
  3449  0026FA  9889               	bcf	3977,4,c	;volatile
  3450                           
  3451                           ;sort.c: 141: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3452  0026FC  0E70               	movlw	112
  3453  0026FE                     u7877:
  3454  0026FE  2EE8               	decfsz	wreg,f,c
  3455  002700  D7FE               	bra	u7877
  3456  002702  0100               	movlb	0	; () banked
  3457  002704  4BB8               	infsnz	Loading@i_1100& (0+255),f,b
  3458  002706  2BB9               	incf	(Loading@i_1100+1)& (0+255),f,b
  3459  002708  D7E8               	goto	l6741
  3460  00270A                     l6751:
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 142: }
  3464                           ;sort.c: 143: }
  3465                           ;sort.c: 145: _delay((unsigned long)((100)*(32000000/4000.0)));
  3466  00270A  0E05               	movlw	5
  3467  00270C  0100               	movlb	0	; () banked
  3468  00270E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3469  002710  0E0F               	movlw	15
  3470  002712  0100               	movlb	0	; () banked
  3471  002714  6FB1               	movwf	??_Loading& (0+255),b
  3472  002716  0EF1               	movlw	241
  3473  002718                     u7887:
  3474  002718  2EE8               	decfsz	wreg,f,c
  3475  00271A  D7FE               	bra	u7887
  3476  00271C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3477  00271E  D7FC               	bra	u7887
  3478  002720  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3479  002722  D7FA               	bra	u7887
  3480                           
  3481                           ;sort.c: 147: readIR();
  3482  002724  ECC8  F022         	call	_readIR	;wreg free
  3483                           
  3484                           ;sort.c: 148: if(IR_signal==1){
  3485  002728  0100               	movlb	0	; () banked
  3486  00272A  05DE               	decf	_IR_signal& (0+255),w,b
  3487  00272C  0100               	movlb	0	; () banked
  3488  00272E  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3489  002730  A4D8               	btfss	status,2,c
  3490  002732  D020               	goto	l6769
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;sort.c: 149: _delay((unsigned long)((100)*(32000000/4000.0)));
  3494  002734  0E05               	movlw	5
  3495  002736  0100               	movlb	0	; () banked
  3496  002738  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3497  00273A  0E0F               	movlw	15
  3498  00273C  0100               	movlb	0	; () banked
  3499  00273E  6FB1               	movwf	??_Loading& (0+255),b
  3500  002740  0EF1               	movlw	241
  3501  002742                     u7897:
  3502  002742  2EE8               	decfsz	wreg,f,c
  3503  002744  D7FE               	bra	u7897
  3504  002746  2FB1               	decfsz	??_Loading& (0+255),f,b
  3505  002748  D7FC               	bra	u7897
  3506  00274A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3507  00274C  D7FA               	bra	u7897
  3508                           
  3509                           ;sort.c: 150: readIR();
  3510  00274E  ECC8  F022         	call	_readIR	;wreg free
  3511                           
  3512                           ;sort.c: 151: if(IR_signal==1){
  3513  002752  0100               	movlb	0	; () banked
  3514  002754  05DE               	decf	_IR_signal& (0+255),w,b
  3515  002756  0100               	movlb	0	; () banked
  3516  002758  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3517  00275A  A4D8               	btfss	status,2,c
  3518  00275C  D00B               	goto	l6769
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;sort.c: 152: LATAbits.LATA4 = 1;
  3522  00275E  8889               	bsf	3977,4,c	;volatile
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;sort.c: 153: _delay((unsigned long)((250)*(32000000/4000000.0)));
  3526  002760  0E03               	movlw	3
  3527  002762  0100               	movlb	0	; () banked
  3528  002764  6FB1               	movwf	??_Loading& (0+255),b
  3529  002766  0E97               	movlw	151
  3530  002768                     u7907:
  3531  002768  2EE8               	decfsz	wreg,f,c
  3532  00276A  D7FE               	bra	u7907
  3533  00276C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3534  00276E  D7FC               	bra	u7907
  3535  002770  D000               	nop2	
  3536                           
  3537                           ;sort.c: 154: LATAbits.LATA4 = 0;
  3538  002772  9889               	bcf	3977,4,c	;volatile
  3539  002774                     l6769:
  3540                           
  3541                           ;sort.c: 155: }
  3542                           ;sort.c: 156: }
  3543                           ;sort.c: 157: f_can_coming_to_ID = 1;
  3544  002774  0E00               	movlw	0
  3545  002776  6E68               	movwf	_f_can_coming_to_ID+1,c
  3546  002778  0E01               	movlw	1
  3547  00277A  6E67               	movwf	_f_can_coming_to_ID,c
  3548  00277C  0012               	return	
  3549  00277E                     __end_of_Loading:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           postdec1	equ	0xFE5
  3560                           fsr1l	equ	0xFE1
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _initSortTimer *****************
  3564 ;; Defined at:
  3565 ;;		line 320 in file "sort.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  i               2    8[BANK0 ] int 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;Total ram usage:        5 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:   10
  3586 ;; This function calls:
  3587 ;;		_getRTC
  3588 ;; This function is called by:
  3589 ;;		_Loading
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text4
  3594  003CA6                     __ptext4:
  3595                           	opt stack 0
  3596  003CA6                     _initSortTimer:
  3597                           	opt stack 18
  3598                           
  3599                           ;sort.c: 322: getRTC();
  3600                           
  3601                           ;incstack = 0
  3602  003CA6  EC3F  F01F         	call	_getRTC	;wreg free
  3603                           
  3604                           ;sort.c: 323: for(int i = 0; i < 7; i++){
  3605  003CAA  0E00               	movlw	0
  3606  003CAC  0100               	movlb	0	; () banked
  3607  003CAE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3608  003CB0  0E00               	movlw	0
  3609  003CB2  6F88               	movwf	initSortTimer@i& (0+255),b
  3610  003CB4                     l6269:
  3611                           
  3612                           ; BSR set to: 0
  3613  003CB4  0100               	movlb	0	; () banked
  3614  003CB6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3615  003CB8  D008               	goto	l6273
  3616  003CBA  0100               	movlb	0	; () banked
  3617  003CBC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3618  003CBE  E140               	bnz	l6279
  3619  003CC0  0E07               	movlw	7
  3620  003CC2  0100               	movlb	0	; () banked
  3621  003CC4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3622  003CC6  B0D8               	btfsc	status,0,c
  3623  003CC8  D03B               	goto	l6279
  3624  003CCA                     l6273:
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;sort.c: 324: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3628  003CCA  0E24               	movlw	low _time
  3629  003CCC  0100               	movlb	0	; () banked
  3630  003CCE  2588               	addwf	initSortTimer@i& (0+255),w,b
  3631  003CD0  6ED9               	movwf	fsr2l,c
  3632  003CD2  0E01               	movlw	high _time
  3633  003CD4  0100               	movlb	0	; () banked
  3634  003CD6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3635  003CD8  6EDA               	movwf	fsr2h,c
  3636  003CDA  50DF               	movf	indf2,w,c
  3637  003CDC  0100               	movlb	0	; () banked
  3638  003CDE  6F85               	movwf	??_initSortTimer& (0+255),b
  3639  003CE0  0100               	movlb	0	; () banked
  3640  003CE2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3641  003CE4  0E0F               	movlw	15
  3642  003CE6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3643  003CE8  0E0F               	movlw	15
  3644  003CEA  0100               	movlb	0	; () banked
  3645  003CEC  1785               	andwf	??_initSortTimer& (0+255),f,b
  3646  003CEE  0100               	movlb	0	; () banked
  3647  003CF0  5185               	movf	??_initSortTimer& (0+255),w,b
  3648  003CF2  0D0A               	mullw	10
  3649  003CF4  0E24               	movlw	low _time
  3650  003CF6  0100               	movlb	0	; () banked
  3651  003CF8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3652  003CFA  6ED9               	movwf	fsr2l,c
  3653  003CFC  0E01               	movlw	high _time
  3654  003CFE  0100               	movlb	0	; () banked
  3655  003D00  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3656  003D02  6EDA               	movwf	fsr2h,c
  3657  003D04  50DF               	movf	indf2,w,c
  3658  003D06  0B0F               	andlw	15
  3659  003D08  0100               	movlb	0	; () banked
  3660  003D0A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3661  003D0C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3662  003D0E  50F3               	movf	prodl,w,c
  3663  003D10  0100               	movlb	0	; () banked
  3664  003D12  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3665  003D14  50F4               	movf	prodh,w,c
  3666  003D16  0100               	movlb	0	; () banked
  3667  003D18  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3668  003D1A  90D8               	bcf	status,0,c
  3669  003D1C  0100               	movlb	0	; () banked
  3670  003D1E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3671  003D20  6ED9               	movwf	fsr2l,c
  3672  003D22  0100               	movlb	0	; () banked
  3673  003D24  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3674  003D26  6EDA               	movwf	fsr2h,c
  3675  003D28  0E0E               	movlw	low _startTime
  3676  003D2A  26D9               	addwf	fsr2l,f,c
  3677  003D2C  0E01               	movlw	high _startTime
  3678  003D2E  22DA               	addwfc	fsr2h,f,c
  3679  003D30  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3680  003D34  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3681                           
  3682                           ; BSR set to: 0
  3683  003D38  0100               	movlb	0	; () banked
  3684  003D3A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3685  003D3C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3686  003D3E  D7BA               	goto	l6269
  3687  003D40                     l6279:
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;sort.c: 325: }
  3691                           ;sort.c: 327: T0CON = 0b00010111;
  3692  003D40  0E17               	movlw	23
  3693  003D42  6ED5               	movwf	4053,c	;volatile
  3694                           
  3695                           ;sort.c: 336: TMR0H = 0b10000101;
  3696  003D44  0E85               	movlw	133
  3697  003D46  6ED7               	movwf	4055,c	;volatile
  3698                           
  3699                           ;sort.c: 337: TMR0L = 0b11101110;
  3700  003D48  0EEE               	movlw	238
  3701  003D4A  6ED6               	movwf	4054,c	;volatile
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;sort.c: 338: TMR0ON = 1;
  3705  003D4C  8ED5               	bsf	4053,7,c	;volatile
  3706                           
  3707                           ; BSR set to: 0
  3708  003D4E  0012               	return		;funcret
  3709  003D50                     __end_of_initSortTimer:
  3710                           	opt stack 0
  3711                           tblptru	equ	0xFF8
  3712                           tblptrh	equ	0xFF7
  3713                           tblptrl	equ	0xFF6
  3714                           tablat	equ	0xFF5
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           fsr1l	equ	0xFE1
  3721                           indf2	equ	0xFDF
  3722                           postinc2	equ	0xFDE
  3723                           postdec2	equ	0xFDD
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _initGlobalVars *****************
  3729 ;; Defined at:
  3730 ;;		line 297 in file "sort.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    7
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_Loading
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text5
  3759  00400C                     __ptext5:
  3760                           	opt stack 0
  3761  00400C                     _initGlobalVars:
  3762                           	opt stack 21
  3763                           
  3764                           ;sort.c: 299: first = 0;
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;incstack = 0
  3768  00400C  0E00               	movlw	0
  3769  00400E  6E6E               	movwf	_first+1,c
  3770  004010  0E00               	movlw	0
  3771  004012  6E6D               	movwf	_first,c
  3772                           
  3773                           ;sort.c: 302: f_loadingNewCan = 0;
  3774  004014  0E00               	movlw	0
  3775  004016  0100               	movlb	0	; () banked
  3776  004018  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3777  00401A  0E00               	movlw	0
  3778  00401C  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3779                           
  3780                           ;sort.c: 303: f_lastCan = 0;
  3781  00401E  0E00               	movlw	0
  3782  004020  0100               	movlb	0	; () banked
  3783  004022  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3784  004024  0E00               	movlw	0
  3785  004026  6FE8               	movwf	_f_lastCan& (0+255),b
  3786                           
  3787                           ;sort.c: 304: f_ID_receive = 1;
  3788  004028  0E00               	movlw	0
  3789  00402A  6E66               	movwf	_f_ID_receive+1,c
  3790  00402C  0E01               	movlw	1
  3791  00402E  6E65               	movwf	_f_ID_receive,c
  3792                           
  3793                           ;sort.c: 305: f_can_coming_to_ID = 0;
  3794  004030  0E00               	movlw	0
  3795  004032  6E68               	movwf	_f_can_coming_to_ID+1,c
  3796  004034  0E00               	movlw	0
  3797  004036  6E67               	movwf	_f_can_coming_to_ID,c
  3798                           
  3799                           ;sort.c: 306: f_can_coming_to_distribution = 0;
  3800  004038  0E00               	movlw	0
  3801  00403A  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  3802  00403C  0E00               	movlw	0
  3803  00403E  6E69               	movwf	_f_can_coming_to_distribution,c
  3804                           
  3805                           ;sort.c: 307: f_can_distributed = 0;
  3806  004040  0E00               	movlw	0
  3807  004042  0101               	movlb	1	; () banked
  3808  004044  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  3809  004046  0E00               	movlw	0
  3810  004048  6F2F               	movwf	_f_can_distributed& (0+255),b
  3811                           
  3812                           ;sort.c: 308: f_most_recent_sort_time = 0;
  3813  00404A  0E00               	movlw	0
  3814  00404C  6E6C               	movwf	_f_most_recent_sort_time+1,c
  3815  00404E  0E00               	movlw	0
  3816  004050  6E6B               	movwf	_f_most_recent_sort_time,c
  3817                           
  3818                           ;sort.c: 311: count_total = 0;
  3819  004052  0E00               	movlw	0
  3820  004054  0100               	movlb	0	; () banked
  3821  004056  6FFF               	movwf	(_count_total+1)& (0+255),b
  3822  004058  0E00               	movlw	0
  3823  00405A  6FFE               	movwf	_count_total& (0+255),b
  3824                           
  3825                           ;sort.c: 312: count_pop_no_tab = 0;
  3826  00405C  0E00               	movlw	0
  3827  00405E  6E5C               	movwf	_count_pop_no_tab+1,c
  3828  004060  0E00               	movlw	0
  3829  004062  6E5B               	movwf	_count_pop_no_tab,c
  3830                           
  3831                           ;sort.c: 313: count_pop_w_tab = 0;
  3832  004064  0E00               	movlw	0
  3833  004066  6E5E               	movwf	_count_pop_w_tab+1,c
  3834  004068  0E00               	movlw	0
  3835  00406A  6E5D               	movwf	_count_pop_w_tab,c
  3836                           
  3837                           ;sort.c: 314: count_can_w_lab = 0;
  3838  00406C  0E00               	movlw	0
  3839  00406E  0101               	movlb	1	; () banked
  3840  004070  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  3841  004072  0E00               	movlw	0
  3842  004074  6F2D               	movwf	_count_can_w_lab& (0+255),b
  3843                           
  3844                           ;sort.c: 315: count_can_no_lab = 0;
  3845  004076  0E00               	movlw	0
  3846  004078  0101               	movlb	1	; () banked
  3847  00407A  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  3848  00407C  0E00               	movlw	0
  3849  00407E  6F2B               	movwf	_count_can_no_lab& (0+255),b
  3850                           
  3851                           ;sort.c: 318: most_recent_sort_time = 0;
  3852  004080  0E00               	movlw	0
  3853  004082  0101               	movlb	1	; () banked
  3854  004084  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  3855  004086  0E00               	movlw	0
  3856  004088  6F33               	movwf	_most_recent_sort_time& (0+255),b
  3857                           
  3858                           ; BSR set to: 1
  3859  00408A  0012               	return		;funcret
  3860  00408C                     __end_of_initGlobalVars:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           postinc0	equ	0xFEE
  3869                           wreg	equ	0xFE8
  3870                           postdec1	equ	0xFE5
  3871                           fsr1l	equ	0xFE1
  3872                           indf2	equ	0xFDF
  3873                           postinc2	equ	0xFDE
  3874                           postdec2	equ	0xFDD
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _getMAG *****************
  3880 ;; Defined at:
  3881 ;;		line 399 in file "sort.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      void 
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, status,0, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;Total ram usage:        2 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    9
  3902 ;; This function calls:
  3903 ;;		_readMAG
  3904 ;; This function is called by:
  3905 ;;		_Loading
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text6
  3910  00478C                     __ptext6:
  3911                           	opt stack 0
  3912  00478C                     _getMAG:
  3913                           	opt stack 19
  3914                           
  3915                           ;sort.c: 400: readMAG();
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;incstack = 0
  3919  00478C  ECEE  F022         	call	_readMAG	;wreg free
  3920                           
  3921                           ;sort.c: 402: if(MAG_signal==1){
  3922  004790  0100               	movlb	0	; () banked
  3923  004792  05E0               	decf	_MAG_signal& (0+255),w,b
  3924  004794  0100               	movlb	0	; () banked
  3925  004796  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3926  004798  A4D8               	btfss	status,2,c
  3927  00479A  0012               	return	
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;sort.c: 403: _delay((unsigned long)((500)*(32000000/4000.0)));
  3931  00479C  0E15               	movlw	21
  3932  00479E  0100               	movlb	0	; () banked
  3933  0047A0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  3934  0047A2  0E4B               	movlw	75
  3935  0047A4  0100               	movlb	0	; () banked
  3936  0047A6  6F86               	movwf	??_getMAG& (0+255),b
  3937  0047A8  0EBE               	movlw	190
  3938  0047AA                     u7917:
  3939  0047AA  2EE8               	decfsz	wreg,f,c
  3940  0047AC  D7FE               	bra	u7917
  3941  0047AE  2F86               	decfsz	??_getMAG& (0+255),f,b
  3942  0047B0  D7FC               	bra	u7917
  3943  0047B2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  3944  0047B4  D7FA               	bra	u7917
  3945  0047B6  F000               	nop	
  3946                           
  3947                           ;sort.c: 404: readMAG();
  3948  0047B8  ECEE  F022         	call	_readMAG	;wreg free
  3949  0047BC  0012               	return	
  3950  0047BE                     __end_of_getMAG:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           fsr1l	equ	0xFE1
  3962                           indf2	equ	0xFDF
  3963                           postinc2	equ	0xFDE
  3964                           postdec2	equ	0xFDD
  3965                           fsr2h	equ	0xFDA
  3966                           fsr2l	equ	0xFD9
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _getIR *****************
  3970 ;; Defined at:
  3971 ;;		line 383 in file "sort.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  i               2    7[BANK0 ] int 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:        3 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    9
  3992 ;; This function calls:
  3993 ;;		_readIR
  3994 ;; This function is called by:
  3995 ;;		_Loading
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text7
  4000  00417A                     __ptext7:
  4001                           	opt stack 0
  4002  00417A                     _getIR:
  4003                           	opt stack 19
  4004                           
  4005                           ;sort.c: 384: readIR();
  4006                           
  4007                           ;incstack = 0
  4008  00417A  ECC8  F022         	call	_readIR	;wreg free
  4009                           
  4010                           ;sort.c: 385: for(int i = 0; i < 150; i++){
  4011  00417E  0E00               	movlw	0
  4012  004180  0100               	movlb	0	; () banked
  4013  004182  6F88               	movwf	(getIR@i+1)& (0+255),b
  4014  004184  0E00               	movlw	0
  4015  004186  6F87               	movwf	getIR@i& (0+255),b
  4016  004188                     l6361:
  4017                           
  4018                           ; BSR set to: 0
  4019  004188  0100               	movlb	0	; () banked
  4020  00418A  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4021  00418C  D008               	goto	l6365
  4022  00418E  0100               	movlb	0	; () banked
  4023  004190  5188               	movf	(getIR@i+1)& (0+255),w,b
  4024  004192  E11A               	bnz	l6377
  4025  004194  0E96               	movlw	150
  4026  004196  0100               	movlb	0	; () banked
  4027  004198  5D87               	subwf	getIR@i& (0+255),w,b
  4028  00419A  B0D8               	btfsc	status,0,c
  4029  00419C  D015               	goto	l6377
  4030  00419E                     l6365:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;sort.c: 386: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4034  00419E  0E06               	movlw	6
  4035  0041A0  0100               	movlb	0	; () banked
  4036  0041A2  6F86               	movwf	??_getIR& (0+255),b
  4037  0041A4  0E30               	movlw	48
  4038  0041A6                     u7927:
  4039  0041A6  2EE8               	decfsz	wreg,f,c
  4040  0041A8  D7FE               	bra	u7927
  4041  0041AA  2F86               	decfsz	??_getIR& (0+255),f,b
  4042  0041AC  D7FC               	bra	u7927
  4043  0041AE  F000               	nop	
  4044                           
  4045                           ;sort.c: 387: readIR();
  4046  0041B0  ECC8  F022         	call	_readIR	;wreg free
  4047                           
  4048                           ;sort.c: 388: if(!IR_signal){
  4049  0041B4  0100               	movlb	0	; () banked
  4050  0041B6  51DE               	movf	_IR_signal& (0+255),w,b
  4051  0041B8  0100               	movlb	0	; () banked
  4052  0041BA  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4053  0041BC  B4D8               	btfsc	status,2,c
  4054  0041BE  D004               	goto	l6377
  4055                           
  4056                           ; BSR set to: 0
  4057                           
  4058                           ; BSR set to: 0
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;sort.c: 389: break;
  4062  0041C0  0100               	movlb	0	; () banked
  4063  0041C2  4B87               	infsnz	getIR@i& (0+255),f,b
  4064  0041C4  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4065  0041C6  D7E0               	goto	l6361
  4066  0041C8                     l6377:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 390: }
  4070                           ;sort.c: 391: }
  4071                           ;sort.c: 392: if(IR_signal==1){
  4072  0041C8  0100               	movlb	0	; () banked
  4073  0041CA  05DE               	decf	_IR_signal& (0+255),w,b
  4074  0041CC  0100               	movlb	0	; () banked
  4075  0041CE  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4076  0041D0  A4D8               	btfss	status,2,c
  4077  0041D2  D006               	goto	l6381
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;sort.c: 393: f_loadingNewCan = 1;
  4081  0041D4  0E00               	movlw	0
  4082  0041D6  0100               	movlb	0	; () banked
  4083  0041D8  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4084  0041DA  0E01               	movlw	1
  4085  0041DC  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4086                           
  4087                           ;sort.c: 394: }
  4088  0041DE  0012               	return	
  4089  0041E0                     l6381:
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;sort.c: 395: else{
  4093                           ;sort.c: 396: f_loadingNewCan = 0;
  4094  0041E0  0E00               	movlw	0
  4095  0041E2  0100               	movlb	0	; () banked
  4096  0041E4  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4097  0041E6  0E00               	movlw	0
  4098  0041E8  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4099  0041EA  0012               	return	
  4100  0041EC                     __end_of_getIR:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           postdec1	equ	0xFE5
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _readIR *****************
  4120 ;; Defined at:
  4121 ;;		line 23 in file "ADCFunctionality.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  res             2    4[BANK0 ] int 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    8
  4142 ;; This function calls:
  4143 ;;		_readADC
  4144 ;; This function is called by:
  4145 ;;		_Loading
  4146 ;;		_getIR
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text8
  4151  004590                     __ptext8:
  4152                           	opt stack 0
  4153  004590                     _readIR:
  4154                           	opt stack 20
  4155                           
  4156                           ;ADCFunctionality.c: 24: readADC(0);
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;incstack = 0
  4160  004590  0E00               	movlw	0
  4161  004592  EC2B  F025         	call	_readADC
  4162                           
  4163                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4164  004596  50C3               	movf	4035,w,c	;volatile
  4165  004598  CFC4 F082          	movff	4036,??_readIR	;volatile
  4166  00459C  0100               	movlb	0	; () banked
  4167  00459E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4168  0045A0  C082  F083         	movff	??_readIR,??_readIR+1
  4169  0045A4  0100               	movlb	0	; () banked
  4170  0045A6  6B82               	clrf	??_readIR& (0+255),b
  4171  0045A8  0100               	movlb	0	; () banked
  4172  0045AA  1182               	iorwf	??_readIR& (0+255),w,b
  4173  0045AC  0100               	movlb	0	; () banked
  4174  0045AE  6F84               	movwf	readIR@res& (0+255),b
  4175  0045B0  0100               	movlb	0	; () banked
  4176  0045B2  5183               	movf	(??_readIR+1)& (0+255),w,b
  4177  0045B4  0100               	movlb	0	; () banked
  4178  0045B6  6F85               	movwf	(readIR@res+1)& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  4182  0045B8  0100               	movlb	0	; () banked
  4183  0045BA  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4184  0045BC  D00A               	goto	u4160
  4185  0045BE  0EE9               	movlw	233
  4186  0045C0  0100               	movlb	0	; () banked
  4187  0045C2  5D84               	subwf	readIR@res& (0+255),w,b
  4188  0045C4  0E03               	movlw	3
  4189  0045C6  0100               	movlb	0	; () banked
  4190  0045C8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4191  0045CA  A0D8               	btfss	status,0,c
  4192  0045CC  D002               	goto	u4160
  4193  0045CE  0E01               	movlw	1
  4194  0045D0  D001               	goto	u4170
  4195  0045D2                     u4160:
  4196  0045D2  0E00               	movlw	0
  4197  0045D4                     u4170:
  4198  0045D4  0100               	movlb	0	; () banked
  4199  0045D6  6FDE               	movwf	_IR_signal& (0+255),b
  4200  0045D8  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4201                           
  4202                           ; BSR set to: 0
  4203  0045DA  0012               	return		;funcret
  4204  0045DC                     __end_of_readIR:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           fsr2h	equ	0xFDA
  4220                           fsr2l	equ	0xFD9
  4221                           status	equ	0xFD8
  4222                           
  4223 ;; *************** function _ID *****************
  4224 ;; Defined at:
  4225 ;;		line 161 in file "sort.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  i               2    6[BANK0 ] int 
  4230 ;;  i               2    4[BANK0 ] int 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;Total ram usage:        6 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    8
  4247 ;; This function calls:
  4248 ;;		_delay_ms
  4249 ;; This function is called by:
  4250 ;;		_sort
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text9
  4255  002FBC                     __ptext9:
  4256                           	opt stack 0
  4257  002FBC                     _ID:
  4258                           	opt stack 21
  4259                           
  4260                           ;sort.c: 162: if(f_can_coming_to_ID){
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;incstack = 0
  4264  002FBC  5067               	movf	_f_can_coming_to_ID,w,c
  4265  002FBE  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4266  002FC0  B4D8               	btfsc	status,2,c
  4267  002FC2  0012               	return	
  4268                           
  4269                           ;sort.c: 164: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4270  002FC4  0E3D               	movlw	61
  4271  002FC6  0100               	movlb	0	; () banked
  4272  002FC8  6F83               	movwf	(??_ID+1)& (0+255),b
  4273  002FCA  0EE1               	movlw	225
  4274  002FCC  0100               	movlb	0	; () banked
  4275  002FCE  6F82               	movwf	??_ID& (0+255),b
  4276  002FD0  0E3F               	movlw	63
  4277  002FD2                     u7937:
  4278  002FD2  2EE8               	decfsz	wreg,f,c
  4279  002FD4  D7FE               	bra	u7937
  4280  002FD6  2F82               	decfsz	??_ID& (0+255),f,b
  4281  002FD8  D7FC               	bra	u7937
  4282  002FDA  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4283  002FDC  D7FA               	bra	u7937
  4284  002FDE  D000               	nop2	
  4285                           
  4286                           ;sort.c: 166: LATAbits.LATA3 = 1;
  4287  002FE0  8689               	bsf	3977,3,c	;volatile
  4288                           
  4289                           ;sort.c: 167: _delay((unsigned long)((600)*(32000000/4000.0)));
  4290  002FE2  0E19               	movlw	25
  4291  002FE4  0100               	movlb	0	; () banked
  4292  002FE6  6F83               	movwf	(??_ID+1)& (0+255),b
  4293  002FE8  0E5A               	movlw	90
  4294  002FEA  0100               	movlb	0	; () banked
  4295  002FEC  6F82               	movwf	??_ID& (0+255),b
  4296  002FEE  0EB1               	movlw	177
  4297  002FF0                     u7947:
  4298  002FF0  2EE8               	decfsz	wreg,f,c
  4299  002FF2  D7FE               	bra	u7947
  4300  002FF4  2F82               	decfsz	??_ID& (0+255),f,b
  4301  002FF6  D7FC               	bra	u7947
  4302  002FF8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4303  002FFA  D7FA               	bra	u7947
  4304  002FFC  D000               	nop2	
  4305                           
  4306                           ;sort.c: 168: sensor_outputs[1] = PORTAbits.RA2;
  4307  002FFE  A480               	btfss	3968,2,c	;volatile
  4308  003000  D004               	goto	u5370
  4309  003002  0100               	movlb	0	; () banked
  4310  003004  6B82               	clrf	??_ID& (0+255),b
  4311  003006  2B82               	incf	??_ID& (0+255),f,b
  4312  003008  D002               	goto	u5378
  4313  00300A                     u5370:
  4314  00300A  0100               	movlb	0	; () banked
  4315  00300C  6B82               	clrf	??_ID& (0+255),b
  4316  00300E                     u5378:
  4317  00300E  0100               	movlb	0	; () banked
  4318  003010  5182               	movf	??_ID& (0+255),w,b
  4319  003012  0100               	movlb	0	; () banked
  4320  003014  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4321  003016  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;sort.c: 176: if(!sensor_outputs[0]){
  4325  003018  0100               	movlb	0	; () banked
  4326  00301A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4327  00301C  0100               	movlb	0	; () banked
  4328  00301E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4329  003020  A4D8               	btfss	status,2,c
  4330  003022  D014               	goto	l6791
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;sort.c: 177: if(!sensor_outputs[1]){
  4334  003024  0100               	movlb	0	; () banked
  4335  003026  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4336  003028  0100               	movlb	0	; () banked
  4337  00302A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4338  00302C  A4D8               	btfss	status,2,c
  4339  00302E  D007               	goto	l6787
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 178: count_pop_no_tab++;
  4343  003030  4A5B               	infsnz	_count_pop_no_tab,f,c
  4344  003032  2A5C               	incf	_count_pop_no_tab+1,f,c
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;sort.c: 179: cur_can = 0;
  4348  003034  0E00               	movlw	0
  4349  003036  0100               	movlb	0	; () banked
  4350  003038  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4351  00303A  0E00               	movlw	0
  4352  00303C  D006               	goto	L2
  4353  00303E                     l6787:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;sort.c: 181: else{
  4357                           ;sort.c: 182: count_pop_w_tab++;
  4358  00303E  4A5D               	infsnz	_count_pop_w_tab,f,c
  4359  003040  2A5E               	incf	_count_pop_w_tab+1,f,c
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;sort.c: 183: cur_can = 1;
  4363  003042  0E00               	movlw	0
  4364  003044  0100               	movlb	0	; () banked
  4365  003046  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4366  003048  0E01               	movlw	1
  4367  00304A                     L2:
  4368  00304A  6FE4               	movwf	_cur_can& (0+255),b
  4369  00304C                     l6791:
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;sort.c: 184: }
  4373                           ;sort.c: 185: }
  4374                           ;sort.c: 186: if(sensor_outputs[0]){
  4375  00304C  0100               	movlb	0	; () banked
  4376  00304E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4377  003050  0100               	movlb	0	; () banked
  4378  003052  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4379  003054  B4D8               	btfsc	status,2,c
  4380  003056  D016               	goto	l6803
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;sort.c: 187: if(!sensor_outputs[1]){
  4384  003058  0100               	movlb	0	; () banked
  4385  00305A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4386  00305C  0100               	movlb	0	; () banked
  4387  00305E  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4388  003060  A4D8               	btfss	status,2,c
  4389  003062  D008               	goto	l6799
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;sort.c: 188: count_can_w_lab++;
  4393  003064  0101               	movlb	1	; () banked
  4394  003066  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4395  003068  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 1
  4398                           ;sort.c: 189: cur_can = 2;
  4399  00306A  0E00               	movlw	0
  4400  00306C  0100               	movlb	0	; () banked
  4401  00306E  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4402  003070  0E02               	movlw	2
  4403  003072  D007               	goto	L3
  4404  003074                     l6799:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;sort.c: 191: else{
  4408                           ;sort.c: 192: count_can_no_lab++;
  4409  003074  0101               	movlb	1	; () banked
  4410  003076  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4411  003078  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4412                           
  4413                           ; BSR set to: 1
  4414                           ;sort.c: 193: cur_can = 3;
  4415  00307A  0E00               	movlw	0
  4416  00307C  0100               	movlb	0	; () banked
  4417  00307E  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4418  003080  0E03               	movlw	3
  4419  003082                     L3:
  4420  003082  6FE4               	movwf	_cur_can& (0+255),b
  4421  003084                     l6803:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;sort.c: 194: }
  4425                           ;sort.c: 195: }
  4426                           ;sort.c: 196: LATAbits.LATA3 = 0;
  4427  003084  9689               	bcf	3977,3,c	;volatile
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;sort.c: 197: _delay((unsigned long)((200)*(32000000/4000.0)));
  4431  003086  0E09               	movlw	9
  4432  003088  0100               	movlb	0	; () banked
  4433  00308A  6F83               	movwf	(??_ID+1)& (0+255),b
  4434  00308C  0E1E               	movlw	30
  4435  00308E  0100               	movlb	0	; () banked
  4436  003090  6F82               	movwf	??_ID& (0+255),b
  4437  003092  0EE4               	movlw	228
  4438  003094                     u7957:
  4439  003094  2EE8               	decfsz	wreg,f,c
  4440  003096  D7FE               	bra	u7957
  4441  003098  2F82               	decfsz	??_ID& (0+255),f,b
  4442  00309A  D7FC               	bra	u7957
  4443  00309C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4444  00309E  D7FA               	bra	u7957
  4445  0030A0  F000               	nop	
  4446                           
  4447                           ;sort.c: 198: LATAbits.LATA3 = 1;
  4448  0030A2  8689               	bsf	3977,3,c	;volatile
  4449                           
  4450                           ;sort.c: 201: for(int i=0;i<10000;i++)
  4451  0030A4  0E00               	movlw	0
  4452  0030A6  0100               	movlb	0	; () banked
  4453  0030A8  6F85               	movwf	(ID@i+1)& (0+255),b
  4454  0030AA  0E00               	movlw	0
  4455  0030AC  6F84               	movwf	ID@i& (0+255),b
  4456  0030AE  0100               	movlb	0	; () banked
  4457  0030B0  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4458  0030B2  D008               	goto	l757
  4459  0030B4  0E10               	movlw	16
  4460  0030B6  0100               	movlb	0	; () banked
  4461  0030B8  5D84               	subwf	ID@i& (0+255),w,b
  4462  0030BA  0E27               	movlw	39
  4463  0030BC  0100               	movlb	0	; () banked
  4464  0030BE  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4465  0030C0  B0D8               	btfsc	status,0,c
  4466  0030C2  D00D               	goto	l758
  4467  0030C4                     l757:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;sort.c: 202: {
  4471                           ;sort.c: 203: LATCbits.LATC0 = 1;
  4472  0030C4  808B               	bsf	3979,0,c	;volatile
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;sort.c: 204: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4476  0030C6  0E1A               	movlw	26
  4477  0030C8                     u7967:
  4478  0030C8  2EE8               	decfsz	wreg,f,c
  4479  0030CA  D7FE               	bra	u7967
  4480  0030CC  D000               	nop2	
  4481                           
  4482                           ;sort.c: 205: LATCbits.LATC0 = 0;
  4483  0030CE  908B               	bcf	3979,0,c	;volatile
  4484                           
  4485                           ;sort.c: 206: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4486  0030D0  0EF0               	movlw	240
  4487  0030D2                     u7977:
  4488  0030D2  2EE8               	decfsz	wreg,f,c
  4489  0030D4  D7FE               	bra	u7977
  4490  0030D6  0100               	movlb	0	; () banked
  4491  0030D8  4B84               	infsnz	ID@i& (0+255),f,b
  4492  0030DA  2B85               	incf	(ID@i+1)& (0+255),f,b
  4493  0030DC  D7E8               	goto	L4
  4494  0030DE                     l758:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;sort.c: 207: }
  4498                           ;sort.c: 208: LATCbits.LATC0 = 0;
  4499  0030DE  908B               	bcf	3979,0,c	;volatile
  4500                           
  4501                           ;sort.c: 210: LATAbits.LATA3 = 0;
  4502  0030E0  9689               	bcf	3977,3,c	;volatile
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;sort.c: 214: f_can_coming_to_distribution = 1;
  4506  0030E2  0E00               	movlw	0
  4507  0030E4  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4508  0030E6  0E01               	movlw	1
  4509  0030E8  6E69               	movwf	_f_can_coming_to_distribution,c
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;sort.c: 215: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4513  0030EA  0E3D               	movlw	61
  4514  0030EC  0100               	movlb	0	; () banked
  4515  0030EE  6F83               	movwf	(??_ID+1)& (0+255),b
  4516  0030F0  0EE1               	movlw	225
  4517  0030F2  0100               	movlb	0	; () banked
  4518  0030F4  6F82               	movwf	??_ID& (0+255),b
  4519  0030F6  0E3F               	movlw	63
  4520  0030F8                     u7987:
  4521  0030F8  2EE8               	decfsz	wreg,f,c
  4522  0030FA  D7FE               	bra	u7987
  4523  0030FC  2F82               	decfsz	??_ID& (0+255),f,b
  4524  0030FE  D7FC               	bra	u7987
  4525  003100  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4526  003102  D7FA               	bra	u7987
  4527  003104  D000               	nop2	
  4528                           
  4529                           ;sort.c: 216: LATCbits.LATC0 = 1;
  4530  003106  808B               	bsf	3979,0,c	;volatile
  4531                           
  4532                           ;sort.c: 219: if(!f_lastCan){
  4533  003108  0100               	movlb	0	; () banked
  4534  00310A  51E8               	movf	_f_lastCan& (0+255),w,b
  4535  00310C  0100               	movlb	0	; () banked
  4536  00310E  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  4537  003110  A4D8               	btfss	status,2,c
  4538  003112  D032               	goto	l6841
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;sort.c: 220: for(int i=0; i<46; i++){
  4542  003114  0E00               	movlw	0
  4543  003116  0100               	movlb	0	; () banked
  4544  003118  6F87               	movwf	(ID@i_1112+1)& (0+255),b
  4545  00311A  0E00               	movlw	0
  4546  00311C  6F86               	movwf	ID@i_1112& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549  00311E  0100               	movlb	0	; () banked
  4550  003120  BF87               	btfsc	(ID@i_1112+1)& (0+255),7,b
  4551  003122  D008               	goto	l6833
  4552  003124  0100               	movlb	0	; () banked
  4553  003126  5187               	movf	(ID@i_1112+1)& (0+255),w,b
  4554  003128  E126               	bnz	l761
  4555  00312A  0E2E               	movlw	46
  4556  00312C  0100               	movlb	0	; () banked
  4557  00312E  5D86               	subwf	ID@i_1112& (0+255),w,b
  4558  003130  B0D8               	btfsc	status,0,c
  4559  003132  D021               	goto	l761
  4560  003134                     l6833:
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;sort.c: 221: LATAbits.LATA5 = !LATAbits.LATA5;
  4564  003134  BA89               	btfsc	3977,5,c	;volatile
  4565  003136  D004               	goto	u5460
  4566  003138  0100               	movlb	0	; () banked
  4567  00313A  6B82               	clrf	??_ID& (0+255),b
  4568  00313C  2B82               	incf	??_ID& (0+255),f,b
  4569  00313E  D002               	goto	u5478
  4570  003140                     u5460:
  4571  003140  0100               	movlb	0	; () banked
  4572  003142  6B82               	clrf	??_ID& (0+255),b
  4573  003144                     u5478:
  4574  003144  0100               	movlb	0	; () banked
  4575  003146  3B82               	swapf	??_ID& (0+255),f,b
  4576  003148  4782               	rlncf	??_ID& (0+255),f,b
  4577  00314A  5089               	movf	3977,w,c	;volatile
  4578  00314C  0100               	movlb	0	; () banked
  4579  00314E  1982               	xorwf	??_ID& (0+255),w,b
  4580  003150  0BDF               	andlw	-33
  4581  003152  1982               	xorwf	??_ID& (0+255),w,b
  4582  003154  6E89               	movwf	3977,c	;volatile
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;sort.c: 222: delay_ms(45-i);
  4586  003156  0100               	movlb	0	; () banked
  4587  003158  5186               	movf	ID@i_1112& (0+255),w,b
  4588  00315A  0800               	sublw	0
  4589  00315C  0F2D               	addlw	45
  4590  00315E  EC56  F025         	call	_delay_ms
  4591  003162  0100               	movlb	0	; () banked
  4592  003164  4B86               	infsnz	ID@i_1112& (0+255),f,b
  4593  003166  2B87               	incf	(ID@i_1112+1)& (0+255),f,b
  4594                           
  4595                           ; BSR set to: 0
  4596  003168  0100               	movlb	0	; () banked
  4597  00316A  BF87               	btfsc	(ID@i_1112+1)& (0+255),7,b
  4598  00316C  D7E3               	goto	l6833
  4599  00316E  0100               	movlb	0	; () banked
  4600  003170  5187               	movf	(ID@i_1112+1)& (0+255),w,b
  4601  003172  E101               	bnz	u5480
  4602  003174  D7DA               	goto	L5
  4603  003176                     u5480:
  4604  003176                     l761:
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;sort.c: 223: }
  4608                           ;sort.c: 224: LATAbits.LATA5 = 1;
  4609  003176  8A89               	bsf	3977,5,c	;volatile
  4610  003178                     l6841:
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;sort.c: 225: }
  4614                           ;sort.c: 227: f_can_coming_to_ID = 0;
  4615  003178  0E00               	movlw	0
  4616  00317A  6E68               	movwf	_f_can_coming_to_ID+1,c
  4617  00317C  0E00               	movlw	0
  4618  00317E  6E67               	movwf	_f_can_coming_to_ID,c
  4619  003180  0012               	return	
  4620  003182                     __end_of_ID:
  4621                           	opt stack 0
  4622                           tblptru	equ	0xFF8
  4623                           tblptrh	equ	0xFF7
  4624                           tblptrl	equ	0xFF6
  4625                           tablat	equ	0xFF5
  4626                           prodh	equ	0xFF4
  4627                           prodl	equ	0xFF3
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           indf2	equ	0xFDF
  4633                           postinc2	equ	0xFDE
  4634                           postdec2	equ	0xFDD
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function _delay_ms *****************
  4640 ;; Defined at:
  4641 ;;		line 420 in file "sort.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  milliseconds    1    wreg     unsigned char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;Total ram usage:        2 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    7
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_Loading
  4666 ;;		_ID
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text10
  4671  004AAC                     __ptext10:
  4672                           	opt stack 0
  4673  004AAC                     _delay_ms:
  4674                           	opt stack 21
  4675                           
  4676                           ;incstack = 0
  4677                           ;delay_ms@milliseconds stored from wreg
  4678  004AAC  0100               	movlb	0	; () banked
  4679  004AAE  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4680                           
  4681                           ;sort.c: 421: while(milliseconds > 0)
  4682  004AB0  D00B               	goto	l6341
  4683  004AB2                     l6337:
  4684                           
  4685                           ;sort.c: 422: {
  4686                           ;sort.c: 423: milliseconds--;
  4687  004AB2  0100               	movlb	0	; () banked
  4688  004AB4  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;sort.c: 424: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4692  004AB6  0E0B               	movlw	11
  4693  004AB8  0100               	movlb	0	; () banked
  4694  004ABA  6F80               	movwf	??_delay_ms& (0+255),b
  4695  004ABC  0E47               	movlw	71
  4696  004ABE                     u7997:
  4697  004ABE  2EE8               	decfsz	wreg,f,c
  4698  004AC0  D7FE               	bra	u7997
  4699  004AC2  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4700  004AC4  D7FC               	bra	u7997
  4701  004AC6  D000               	nop2	
  4702  004AC8                     l6341:
  4703  004AC8  0100               	movlb	0	; () banked
  4704  004ACA  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4705  004ACC  0100               	movlb	0	; () banked
  4706  004ACE  B4D8               	btfsc	status,2,c
  4707  004AD0  0012               	return	
  4708  004AD2  D7EF               	goto	l6337
  4709  004AD4                     __end_of_delay_ms:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           postinc0	equ	0xFEE
  4718                           wreg	equ	0xFE8
  4719                           postdec1	equ	0xFE5
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _Distribution *****************
  4729 ;; Defined at:
  4730 ;;		line 230 in file "sort.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;Total ram usage:        2 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    8
  4751 ;; This function calls:
  4752 ;;		_updateServoPosition
  4753 ;; This function is called by:
  4754 ;;		_sort
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text11
  4759  0029B4                     __ptext11:
  4760                           	opt stack 0
  4761  0029B4                     _Distribution:
  4762                           	opt stack 21
  4763                           
  4764                           ;sort.c: 231: if(f_can_coming_to_distribution){
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;incstack = 0
  4768  0029B4  5069               	movf	_f_can_coming_to_distribution,w,c
  4769  0029B6  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  4770  0029B8  B4D8               	btfsc	status,2,c
  4771  0029BA  0012               	return	
  4772  0029BC  D034               	goto	l6857
  4773  0029BE                     l6847:
  4774                           
  4775                           ;sort.c: 241: updateServoPosition(500, 1);
  4776  0029BE  0E01               	movlw	1
  4777  0029C0  0100               	movlb	0	; () banked
  4778  0029C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4779  0029C4  0EF4               	movlw	244
  4780  0029C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4781  0029C8  0E00               	movlw	0
  4782  0029CA  0100               	movlb	0	; () banked
  4783  0029CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4784  0029CE  0E01               	movlw	1
  4785  0029D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4786  0029D2  EC82  F020         	call	_updateServoPosition	;wreg free
  4787                           
  4788                           ;sort.c: 242: break;
  4789  0029D6  D03E               	goto	l6859
  4790  0029D8                     l6849:
  4791                           
  4792                           ;sort.c: 244: updateServoPosition(850, 1);
  4793  0029D8  0E03               	movlw	3
  4794  0029DA  0100               	movlb	0	; () banked
  4795  0029DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4796  0029DE  0E52               	movlw	82
  4797  0029E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4798  0029E2  0E00               	movlw	0
  4799  0029E4  0100               	movlb	0	; () banked
  4800  0029E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4801  0029E8  0E01               	movlw	1
  4802  0029EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4803  0029EC  EC82  F020         	call	_updateServoPosition	;wreg free
  4804                           
  4805                           ;sort.c: 245: break;
  4806  0029F0  D031               	goto	l6859
  4807  0029F2                     l6851:
  4808                           
  4809                           ;sort.c: 247: updateServoPosition(1670, 1);
  4810  0029F2  0E06               	movlw	6
  4811  0029F4  0100               	movlb	0	; () banked
  4812  0029F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4813  0029F8  0E86               	movlw	134
  4814  0029FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4815  0029FC  0E00               	movlw	0
  4816  0029FE  0100               	movlb	0	; () banked
  4817  002A00  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4818  002A02  0E01               	movlw	1
  4819  002A04  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4820  002A06  EC82  F020         	call	_updateServoPosition	;wreg free
  4821                           
  4822                           ;sort.c: 248: break;
  4823  002A0A  D024               	goto	l6859
  4824  002A0C                     l6853:
  4825                           
  4826                           ;sort.c: 250: updateServoPosition(2200, 1);
  4827  002A0C  0E08               	movlw	8
  4828  002A0E  0100               	movlb	0	; () banked
  4829  002A10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4830  002A12  0E98               	movlw	152
  4831  002A14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4832  002A16  0E00               	movlw	0
  4833  002A18  0100               	movlb	0	; () banked
  4834  002A1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4835  002A1C  0E01               	movlw	1
  4836  002A1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4837  002A20  EC82  F020         	call	_updateServoPosition	;wreg free
  4838                           
  4839                           ;sort.c: 254: }
  4840                           
  4841                           ;sort.c: 253: break;
  4842                           
  4843                           ;sort.c: 252: default:
  4844                           
  4845                           ;sort.c: 251: break;
  4846  002A24  D017               	goto	l6859
  4847  002A26                     l6857:
  4848  002A26  C0E4  F088         	movff	_cur_can,??_Distribution
  4849  002A2A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4850                           
  4851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4852                           ; Switch size 1, requested type "space"
  4853                           ; Number of cases is 1, Range of values is 0 to 0
  4854                           ; switch strategies available:
  4855                           ; Name         Instructions Cycles
  4856                           ; simple_byte            4     3 (average)
  4857                           ;	Chosen strategy is simple_byte
  4858  002A2E  0100               	movlb	0	; () banked
  4859  002A30  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4860  002A32  0A00               	xorlw	0	; case 0
  4861  002A34  A4D8               	btfss	status,2,c
  4862  002A36  D00E               	goto	l6859
  4863                           
  4864                           ; BSR set to: 0
  4865                           ; Switch size 1, requested type "space"
  4866                           ; Number of cases is 4, Range of values is 0 to 3
  4867                           ; switch strategies available:
  4868                           ; Name         Instructions Cycles
  4869                           ; simple_byte           13     7 (average)
  4870                           ;	Chosen strategy is simple_byte
  4871  002A38  0100               	movlb	0	; () banked
  4872  002A3A  5188               	movf	??_Distribution& (0+255),w,b
  4873  002A3C  0A00               	xorlw	0	; case 0
  4874  002A3E  B4D8               	btfsc	status,2,c
  4875  002A40  D7BE               	goto	l6847
  4876  002A42  0A01               	xorlw	1	; case 1
  4877  002A44  B4D8               	btfsc	status,2,c
  4878  002A46  D7C8               	goto	l6849
  4879  002A48  0A03               	xorlw	3	; case 2
  4880  002A4A  B4D8               	btfsc	status,2,c
  4881  002A4C  D7D2               	goto	l6851
  4882  002A4E  0A01               	xorlw	1	; case 3
  4883  002A50  B4D8               	btfsc	status,2,c
  4884  002A52  D7DC               	goto	l6853
  4885  002A54                     l6859:
  4886                           
  4887                           ;sort.c: 255: updateServoPosition(1050, 3);
  4888  002A54  0E04               	movlw	4
  4889  002A56  0100               	movlb	0	; () banked
  4890  002A58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4891  002A5A  0E1A               	movlw	26
  4892  002A5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4893  002A5E  0E00               	movlw	0
  4894  002A60  0100               	movlb	0	; () banked
  4895  002A62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4896  002A64  0E03               	movlw	3
  4897  002A66  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4898  002A68  EC82  F020         	call	_updateServoPosition	;wreg free
  4899                           
  4900                           ;sort.c: 256: _delay((unsigned long)((750)*(32000000/4000.0)));
  4901  002A6C  0E1F               	movlw	31
  4902  002A6E  0100               	movlb	0	; () banked
  4903  002A70  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4904  002A72  0E71               	movlw	113
  4905  002A74  0100               	movlb	0	; () banked
  4906  002A76  6F88               	movwf	??_Distribution& (0+255),b
  4907  002A78  0E1E               	movlw	30
  4908  002A7A                     u8007:
  4909  002A7A  2EE8               	decfsz	wreg,f,c
  4910  002A7C  D7FE               	bra	u8007
  4911  002A7E  2F88               	decfsz	??_Distribution& (0+255),f,b
  4912  002A80  D7FC               	bra	u8007
  4913  002A82  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4914  002A84  D7FA               	bra	u8007
  4915  002A86  F000               	nop	
  4916                           
  4917                           ;sort.c: 264: switch(cur_can){
  4918  002A88  D034               	goto	l6873
  4919  002A8A                     l6863:
  4920                           
  4921                           ;sort.c: 266: updateServoPosition(1260, 3);
  4922  002A8A  0E04               	movlw	4
  4923  002A8C  0100               	movlb	0	; () banked
  4924  002A8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4925  002A90  0EEC               	movlw	236
  4926  002A92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4927  002A94  0E00               	movlw	0
  4928  002A96  0100               	movlb	0	; () banked
  4929  002A98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4930  002A9A  0E03               	movlw	3
  4931  002A9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4932  002A9E  EC82  F020         	call	_updateServoPosition	;wreg free
  4933                           
  4934                           ;sort.c: 267: break;
  4935  002AA2  D03E               	goto	l6875
  4936  002AA4                     l6865:
  4937                           
  4938                           ;sort.c: 269: updateServoPosition(1260, 3);
  4939  002AA4  0E04               	movlw	4
  4940  002AA6  0100               	movlb	0	; () banked
  4941  002AA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4942  002AAA  0EEC               	movlw	236
  4943  002AAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4944  002AAE  0E00               	movlw	0
  4945  002AB0  0100               	movlb	0	; () banked
  4946  002AB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4947  002AB4  0E03               	movlw	3
  4948  002AB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4949  002AB8  EC82  F020         	call	_updateServoPosition	;wreg free
  4950                           
  4951                           ;sort.c: 270: break;
  4952  002ABC  D031               	goto	l6875
  4953  002ABE                     l6867:
  4954                           
  4955                           ;sort.c: 272: updateServoPosition(1500, 3);
  4956  002ABE  0E05               	movlw	5
  4957  002AC0  0100               	movlb	0	; () banked
  4958  002AC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4959  002AC4  0EDC               	movlw	220
  4960  002AC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4961  002AC8  0E00               	movlw	0
  4962  002ACA  0100               	movlb	0	; () banked
  4963  002ACC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4964  002ACE  0E03               	movlw	3
  4965  002AD0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4966  002AD2  EC82  F020         	call	_updateServoPosition	;wreg free
  4967                           
  4968                           ;sort.c: 273: break;
  4969  002AD6  D024               	goto	l6875
  4970  002AD8                     l6869:
  4971                           
  4972                           ;sort.c: 275: updateServoPosition(1500, 3);
  4973  002AD8  0E05               	movlw	5
  4974  002ADA  0100               	movlb	0	; () banked
  4975  002ADC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4976  002ADE  0EDC               	movlw	220
  4977  002AE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4978  002AE2  0E00               	movlw	0
  4979  002AE4  0100               	movlb	0	; () banked
  4980  002AE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4981  002AE8  0E03               	movlw	3
  4982  002AEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4983  002AEC  EC82  F020         	call	_updateServoPosition	;wreg free
  4984                           
  4985                           ;sort.c: 279: }
  4986                           
  4987                           ;sort.c: 278: break;
  4988                           
  4989                           ;sort.c: 277: default:
  4990                           
  4991                           ;sort.c: 276: break;
  4992  002AF0  D017               	goto	l6875
  4993  002AF2                     l6873:
  4994  002AF2  C0E4  F088         	movff	_cur_can,??_Distribution
  4995  002AF6  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4996                           
  4997                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4998                           ; Switch size 1, requested type "space"
  4999                           ; Number of cases is 1, Range of values is 0 to 0
  5000                           ; switch strategies available:
  5001                           ; Name         Instructions Cycles
  5002                           ; simple_byte            4     3 (average)
  5003                           ;	Chosen strategy is simple_byte
  5004  002AFA  0100               	movlb	0	; () banked
  5005  002AFC  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5006  002AFE  0A00               	xorlw	0	; case 0
  5007  002B00  A4D8               	btfss	status,2,c
  5008  002B02  D00E               	goto	l6875
  5009                           
  5010                           ; BSR set to: 0
  5011                           ; Switch size 1, requested type "space"
  5012                           ; Number of cases is 4, Range of values is 0 to 3
  5013                           ; switch strategies available:
  5014                           ; Name         Instructions Cycles
  5015                           ; simple_byte           13     7 (average)
  5016                           ;	Chosen strategy is simple_byte
  5017  002B04  0100               	movlb	0	; () banked
  5018  002B06  5188               	movf	??_Distribution& (0+255),w,b
  5019  002B08  0A00               	xorlw	0	; case 0
  5020  002B0A  B4D8               	btfsc	status,2,c
  5021  002B0C  D7BE               	goto	l6863
  5022  002B0E  0A01               	xorlw	1	; case 1
  5023  002B10  B4D8               	btfsc	status,2,c
  5024  002B12  D7C8               	goto	l6865
  5025  002B14  0A03               	xorlw	3	; case 2
  5026  002B16  B4D8               	btfsc	status,2,c
  5027  002B18  D7D2               	goto	l6867
  5028  002B1A  0A01               	xorlw	1	; case 3
  5029  002B1C  B4D8               	btfsc	status,2,c
  5030  002B1E  D7DC               	goto	l6869
  5031  002B20                     l6875:
  5032                           
  5033                           ;sort.c: 280: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5034  002B20  0E66               	movlw	102
  5035  002B22  0100               	movlb	0	; () banked
  5036  002B24  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5037  002B26  0E76               	movlw	118
  5038  002B28  0100               	movlb	0	; () banked
  5039  002B2A  6F88               	movwf	??_Distribution& (0+255),b
  5040  002B2C  0EC1               	movlw	193
  5041  002B2E                     u8017:
  5042  002B2E  2EE8               	decfsz	wreg,f,c
  5043  002B30  D7FE               	bra	u8017
  5044  002B32  2F88               	decfsz	??_Distribution& (0+255),f,b
  5045  002B34  D7FC               	bra	u8017
  5046  002B36  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5047  002B38  D7FA               	bra	u8017
  5048                           
  5049                           ;sort.c: 283: updateServoPosition(1050, 3);
  5050  002B3A  0E04               	movlw	4
  5051  002B3C  0100               	movlb	0	; () banked
  5052  002B3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5053  002B40  0E1A               	movlw	26
  5054  002B42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5055  002B44  0E00               	movlw	0
  5056  002B46  0100               	movlb	0	; () banked
  5057  002B48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5058  002B4A  0E03               	movlw	3
  5059  002B4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5060  002B4E  EC82  F020         	call	_updateServoPosition	;wreg free
  5061                           
  5062                           ;sort.c: 284: _delay((unsigned long)((750)*(32000000/4000.0)));
  5063  002B52  0E1F               	movlw	31
  5064  002B54  0100               	movlb	0	; () banked
  5065  002B56  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5066  002B58  0E71               	movlw	113
  5067  002B5A  0100               	movlb	0	; () banked
  5068  002B5C  6F88               	movwf	??_Distribution& (0+255),b
  5069  002B5E  0E1E               	movlw	30
  5070  002B60                     u8027:
  5071  002B60  2EE8               	decfsz	wreg,f,c
  5072  002B62  D7FE               	bra	u8027
  5073  002B64  2F88               	decfsz	??_Distribution& (0+255),f,b
  5074  002B66  D7FC               	bra	u8027
  5075  002B68  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5076  002B6A  D7FA               	bra	u8027
  5077  002B6C  F000               	nop	
  5078                           
  5079                           ;sort.c: 285: updateServoPosition(1200, 1);
  5080  002B6E  0E04               	movlw	4
  5081  002B70  0100               	movlb	0	; () banked
  5082  002B72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5083  002B74  0EB0               	movlw	176
  5084  002B76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5085  002B78  0E00               	movlw	0
  5086  002B7A  0100               	movlb	0	; () banked
  5087  002B7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5088  002B7E  0E01               	movlw	1
  5089  002B80  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5090  002B82  EC82  F020         	call	_updateServoPosition	;wreg free
  5091                           
  5092                           ;sort.c: 286: updateServoPosition(1050, 3);
  5093  002B86  0E04               	movlw	4
  5094  002B88  0100               	movlb	0	; () banked
  5095  002B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5096  002B8C  0E1A               	movlw	26
  5097  002B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5098  002B90  0E00               	movlw	0
  5099  002B92  0100               	movlb	0	; () banked
  5100  002B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5101  002B96  0E03               	movlw	3
  5102  002B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5103  002B9A  EC82  F020         	call	_updateServoPosition	;wreg free
  5104                           
  5105                           ;sort.c: 288: f_can_coming_to_distribution = 0;
  5106  002B9E  0E00               	movlw	0
  5107  002BA0  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5108  002BA2  0E00               	movlw	0
  5109  002BA4  6E69               	movwf	_f_can_coming_to_distribution,c
  5110                           
  5111                           ;sort.c: 289: f_can_distributed = 1;
  5112  002BA6  0E00               	movlw	0
  5113  002BA8  0101               	movlb	1	; () banked
  5114  002BAA  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5115  002BAC  0E01               	movlw	1
  5116  002BAE  6F2F               	movwf	_f_can_distributed& (0+255),b
  5117                           
  5118                           ; BSR set to: 1
  5119                           ;sort.c: 290: f_most_recent_sort_time = 1;
  5120  002BB0  0E00               	movlw	0
  5121  002BB2  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5122  002BB4  0E01               	movlw	1
  5123  002BB6  6E6B               	movwf	_f_most_recent_sort_time,c
  5124                           
  5125                           ; BSR set to: 1
  5126                           ;sort.c: 291: if(f_lastCan == 1){
  5127  002BB8  0100               	movlb	0	; () banked
  5128  002BBA  05E8               	decf	_f_lastCan& (0+255),w,b
  5129  002BBC  0100               	movlb	0	; () banked
  5130  002BBE  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5131  002BC0  A4D8               	btfss	status,2,c
  5132  002BC2  0012               	return	
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;sort.c: 292: machine_state = DoneSorting_state;
  5136  002BC4  0E02               	movlw	2
  5137  002BC6  0100               	movlb	0	; () banked
  5138  002BC8  6FFC               	movwf	_machine_state& (0+255),b
  5139                           
  5140                           ; BSR set to: 0
  5141  002BCA  0012               	return	
  5142  002BCC                     __end_of_Distribution:
  5143                           	opt stack 0
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1l	equ	0xFE1
  5154                           indf2	equ	0xFDF
  5155                           postinc2	equ	0xFDE
  5156                           postdec2	equ	0xFDD
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _machineConfig *****************
  5162 ;; Defined at:
  5163 ;;		line 15 in file "MachineConfig.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:        0 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    7
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_main
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text12
  5192  004388                     __ptext12:
  5193                           	opt stack 0
  5194  004388                     _machineConfig:
  5195                           	opt stack 23
  5196                           
  5197                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5198                           
  5199                           ;incstack = 0
  5200  004388  0EF0               	movlw	240
  5201  00438A  6ED3               	movwf	4051,c	;volatile
  5202                           
  5203                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5204  00438C  8C9B               	bsf	3995,6,c	;volatile
  5205                           
  5206                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5207  00438E  0E07               	movlw	7
  5208  004390  6E92               	movwf	3986,c	;volatile
  5209                           
  5210                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5211  004392  0EF2               	movlw	242
  5212  004394  6E93               	movwf	3987,c	;volatile
  5213                           
  5214                           ;MachineConfig.c: 27: TRISC = 0x00;
  5215  004396  0E00               	movlw	0
  5216  004398  6E94               	movwf	3988,c	;volatile
  5217                           
  5218                           ;MachineConfig.c: 31: TRISD = 0x00;
  5219  00439A  0E00               	movlw	0
  5220  00439C  6E95               	movwf	3989,c	;volatile
  5221                           
  5222                           ;MachineConfig.c: 34: TRISE = 0x00;
  5223  00439E  0E00               	movlw	0
  5224  0043A0  6E96               	movwf	3990,c	;volatile
  5225                           
  5226                           ;MachineConfig.c: 37: LATA = 0x00;
  5227  0043A2  0E00               	movlw	0
  5228  0043A4  6E89               	movwf	3977,c	;volatile
  5229                           
  5230                           ;MachineConfig.c: 38: LATB = 0x00;
  5231  0043A6  0E00               	movlw	0
  5232  0043A8  6E8A               	movwf	3978,c	;volatile
  5233                           
  5234                           ;MachineConfig.c: 39: LATC = 0x00;
  5235  0043AA  0E00               	movlw	0
  5236  0043AC  6E8B               	movwf	3979,c	;volatile
  5237                           
  5238                           ;MachineConfig.c: 40: LATD = 0x00;
  5239  0043AE  0E00               	movlw	0
  5240  0043B0  6E8C               	movwf	3980,c	;volatile
  5241                           
  5242                           ;MachineConfig.c: 41: LATE = 0x00;
  5243  0043B2  0E00               	movlw	0
  5244  0043B4  6E8D               	movwf	3981,c	;volatile
  5245                           
  5246                           ;MachineConfig.c: 43: nRBPU = 0;
  5247  0043B6  9EF1               	bcf	intcon2,7,c	;volatile
  5248                           
  5249                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5250  0043B8  0E00               	movlw	0
  5251  0043BA  6EC2               	movwf	4034,c	;volatile
  5252                           
  5253                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5254  0043BC  0E0D               	movlw	13
  5255  0043BE  6EC1               	movwf	4033,c	;volatile
  5256                           
  5257                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5258  0043C0  0E00               	movlw	0
  5259  0043C2  6EB5               	movwf	4021,c	;volatile
  5260                           
  5261                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5262  0043C4  96B4               	bcf	4020,3,c	;volatile
  5263                           
  5264                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5265  0043C6  0EB1               	movlw	177
  5266  0043C8  6EC0               	movwf	4032,c	;volatile
  5267                           
  5268                           ;MachineConfig.c: 55: INT1IE = 1;
  5269  0043CA  86F0               	bsf	intcon3,3,c	;volatile
  5270                           
  5271                           ;MachineConfig.c: 57: TMR0IE = 1;
  5272  0043CC  8AF2               	bsf	intcon,5,c	;volatile
  5273                           
  5274                           ;MachineConfig.c: 58: TMR1IE = 1;
  5275  0043CE  809D               	bsf	3997,0,c	;volatile
  5276                           
  5277                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5278  0043D0  0EB0               	movlw	176
  5279  0043D2  6ECD               	movwf	4045,c	;volatile
  5280                           
  5281                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5282  0043D4  0EB0               	movlw	176
  5283  0043D6  6EB1               	movwf	4017,c	;volatile
  5284                           
  5285                           ;MachineConfig.c: 61: TMR2IE = 1;
  5286  0043D8  829D               	bsf	3997,1,c	;volatile
  5287                           
  5288                           ;MachineConfig.c: 62: TMR3IE = 1;
  5289  0043DA  82A0               	bsf	4000,1,c	;volatile
  5290                           
  5291                           ;MachineConfig.c: 63: PEIE = 1;
  5292  0043DC  8CF2               	bsf	intcon,6,c	;volatile
  5293                           
  5294                           ;MachineConfig.c: 64: ADIE = 0;
  5295  0043DE  9C9D               	bcf	3997,6,c	;volatile
  5296                           
  5297                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5298  0043E0  9EF2               	bcf	intcon,7,c	;volatile
  5299  0043E2  0012               	return		;funcret
  5300  0043E4                     __end_of_machineConfig:
  5301                           	opt stack 0
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           intcon	equ	0xFF2
  5309                           intcon2	equ	0xFF1
  5310                           intcon3	equ	0xFF0
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _logRun *****************
  5323 ;; Defined at:
  5324 ;;		line 84 in file "EEPROM.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5329 ;;  i               2   55[BANK0 ] int 
  5330 ;;  num             1   49[BANK0 ] unsigned char 
  5331 ;;  addr            2   57[BANK0 ] unsigned short 
  5332 ;;  byte11          1   54[BANK0 ] unsigned char 
  5333 ;;  byte3           1   52[BANK0 ] unsigned char 
  5334 ;;  byte2           1   51[BANK0 ] unsigned char 
  5335 ;;  byte1           1   50[BANK0 ] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;Total ram usage:       10 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:   11
  5352 ;; This function calls:
  5353 ;;		_EEPROM_read
  5354 ;;		_EEPROM_write
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text13
  5361  003474                     __ptext13:
  5362                           	opt stack 0
  5363  003474                     _logRun:
  5364                           	opt stack 19
  5365                           
  5366                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5367                           
  5368                           ;incstack = 0
  5369  003474  0E00               	movlw	0
  5370  003476  0100               	movlb	0	; () banked
  5371  003478  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5372  00347A  0E00               	movlw	0
  5373  00347C  6F80               	movwf	EEPROM_read@address& (0+255),b
  5374  00347E  ECE7  F025         	call	_EEPROM_read	;wreg free
  5375  003482  0100               	movlb	0	; () banked
  5376  003484  6FFD               	movwf	_sel& (0+255),b
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5380  003486  0100               	movlb	0	; () banked
  5381  003488  51FD               	movf	_sel& (0+255),w,b
  5382  00348A  0D0B               	mullw	11
  5383  00348C  0E01               	movlw	1
  5384  00348E  24F3               	addwf	prodl,w,c
  5385  003490  0100               	movlb	0	; () banked
  5386  003492  6FB9               	movwf	logRun@addr& (0+255),b
  5387  003494  0E00               	movlw	0
  5388  003496  20F4               	addwfc	prodh,w,c
  5389  003498  0100               	movlb	0	; () banked
  5390  00349A  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;EEPROM.c: 101: if (sel < 3){
  5394  00349C  0E03               	movlw	3
  5395  00349E  0100               	movlb	0	; () banked
  5396  0034A0  61FD               	cpfslt	_sel& (0+255),b
  5397  0034A2  D00E               	goto	l8403
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5401  0034A4  0100               	movlb	0	; () banked
  5402  0034A6  29FD               	incf	_sel& (0+255),w,b
  5403  0034A8  0100               	movlb	0	; () banked
  5404  0034AA  6FB1               	movwf	logRun@num& (0+255),b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5408  0034AC  0E00               	movlw	0
  5409  0034AE  0100               	movlb	0	; () banked
  5410  0034B0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5411  0034B2  0E00               	movlw	0
  5412  0034B4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5413  0034B6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5414  0034BA  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5415                           
  5416                           ;EEPROM.c: 104: }
  5417  0034BE  D00A               	goto	l8405
  5418  0034C0                     l8403:
  5419                           
  5420                           ;EEPROM.c: 105: else{
  5421                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5422  0034C0  0E00               	movlw	0
  5423  0034C2  0100               	movlb	0	; () banked
  5424  0034C4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5425  0034C6  0E00               	movlw	0
  5426  0034C8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5427  0034CA  0E00               	movlw	0
  5428  0034CC  0100               	movlb	0	; () banked
  5429  0034CE  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5430  0034D0  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5431  0034D4                     l8405:
  5432                           
  5433                           ;EEPROM.c: 107: }
  5434                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5435  0034D4  0100               	movlb	0	; () banked
  5436  0034D6  51FE               	movf	_count_total& (0+255),w,b
  5437  0034D8  0980               	iorlw	128
  5438  0034DA  0100               	movlb	0	; () banked
  5439  0034DC  6FB2               	movwf	logRun@byte1& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5443  0034DE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5444  0034E2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5445  0034E6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5446  0034EA  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5447                           
  5448                           ;EEPROM.c: 112: addr++;
  5449  0034EE  0100               	movlb	0	; () banked
  5450  0034F0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5451  0034F2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5455  0034F4  385B               	swapf	_count_pop_no_tab,w,c
  5456  0034F6  0BF0               	andlw	240
  5457  0034F8  105D               	iorwf	_count_pop_w_tab,w,c
  5458  0034FA  0100               	movlb	0	; () banked
  5459  0034FC  6FB3               	movwf	logRun@byte2& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5463  0034FE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5464  003502  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5465  003506  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5466  00350A  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5467                           
  5468                           ;EEPROM.c: 117: addr++;
  5469  00350E  0100               	movlb	0	; () banked
  5470  003510  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5471  003512  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5475  003514  0101               	movlb	1	; () banked
  5476  003516  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5477  003518  0BF0               	andlw	240
  5478  00351A  0101               	movlb	1	; () banked
  5479  00351C  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5480  00351E  0100               	movlb	0	; () banked
  5481  003520  6FB4               	movwf	logRun@byte3& (0+255),b
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5485  003522  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5486  003526  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5487  00352A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5488  00352E  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5489                           
  5490                           ;EEPROM.c: 120: addr++;
  5491  003532  0100               	movlb	0	; () banked
  5492  003534  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5493  003536  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5497  003538  0E00               	movlw	0
  5498  00353A  0100               	movlb	0	; () banked
  5499  00353C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5500  00353E  0E00               	movlw	0
  5501  003540  6FB7               	movwf	logRun@i& (0+255),b
  5502                           
  5503                           ; BSR set to: 0
  5504  003542  0100               	movlb	0	; () banked
  5505  003544  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5506  003546  D008               	goto	l8429
  5507  003548  0100               	movlb	0	; () banked
  5508  00354A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5509  00354C  E128               	bnz	l974
  5510  00354E  0E07               	movlw	7
  5511  003550  0100               	movlb	0	; () banked
  5512  003552  5DB7               	subwf	logRun@i& (0+255),w,b
  5513  003554  B0D8               	btfsc	status,0,c
  5514  003556  D023               	goto	l974
  5515  003558                     l8429:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5519  003558  90D8               	bcf	status,0,c
  5520  00355A  0100               	movlb	0	; () banked
  5521  00355C  35B7               	rlcf	logRun@i& (0+255),w,b
  5522  00355E  6ED9               	movwf	fsr2l,c
  5523  003560  0100               	movlb	0	; () banked
  5524  003562  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5525  003564  6EDA               	movwf	fsr2h,c
  5526  003566  0E0E               	movlw	low _startTime
  5527  003568  26D9               	addwf	fsr2l,f,c
  5528  00356A  0E01               	movlw	high _startTime
  5529  00356C  22DA               	addwfc	fsr2h,f,c
  5530  00356E  50DF               	movf	indf2,w,c
  5531  003570  0100               	movlb	0	; () banked
  5532  003572  6FB5               	movwf	logRun@byte_i& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5536  003574  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5537  003578  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5538  00357C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5539  003580  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5540                           
  5541                           ;EEPROM.c: 126: addr++;
  5542  003584  0100               	movlb	0	; () banked
  5543  003586  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5544  003588  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5545                           
  5546                           ; BSR set to: 0
  5547  00358A  0100               	movlb	0	; () banked
  5548  00358C  4BB7               	infsnz	logRun@i& (0+255),f,b
  5549  00358E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5550                           
  5551                           ; BSR set to: 0
  5552  003590  0100               	movlb	0	; () banked
  5553  003592  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5554  003594  D7E1               	goto	l8429
  5555  003596  0100               	movlb	0	; () banked
  5556  003598  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5557  00359A  E101               	bnz	u7590
  5558  00359C  D7D8               	goto	L6
  5559  00359E                     u7590:
  5560  00359E                     l974:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;EEPROM.c: 127: }
  5564                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5565  00359E  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5569  0035A2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5570  0035A6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5571  0035AA  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5572  0035AE  ECF4  F01B         	call	_EEPROM_write	;wreg free
  5573  0035B2  0012               	return		;funcret
  5574  0035B4                     __end_of_logRun:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon2	equ	0xFF1
  5584                           intcon3	equ	0xFF0
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _EEPROM_write *****************
  5597 ;; Defined at:
  5598 ;;		line 32 in file "EEPROM.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  address         2   43[BANK0 ] unsigned short 
  5601 ;;  data            1   45[BANK0 ] unsigned char 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;  i               1   48[BANK0 ] unsigned char 
  5604 ;;  i               1   47[BANK0 ] unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5614 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;Total ram usage:        6 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:   10
  5621 ;; This function calls:
  5622 ;;		_EEPROM_read
  5623 ;;		_lcdInst
  5624 ;;		_printf
  5625 ;; This function is called by:
  5626 ;;		_Loading
  5627 ;;		_logRun
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text14
  5632  0037E8                     __ptext14:
  5633                           	opt stack 0
  5634  0037E8                     _EEPROM_write:
  5635                           	opt stack 18
  5636                           
  5637                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5638                           
  5639                           ;incstack = 0
  5640  0037E8  84A6               	bsf	4006,2,c	;volatile
  5641                           
  5642                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5643  0037EA  0100               	movlb	0	; () banked
  5644  0037EC  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5645  0037EE  6EAA               	movwf	4010,c	;volatile
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5649  0037F0  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;EEPROM.c: 39: EEDATA = data;
  5653  0037F4  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5657  0037F8  9EA6               	bcf	4006,7,c	;volatile
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5661  0037FA  9CA6               	bcf	4006,6,c	;volatile
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5665  0037FC  9EF2               	bcf	intcon,7,c	;volatile
  5666                           
  5667                           ;EEPROM.c: 45: EECON2 = 0x55;
  5668  0037FE  0E55               	movlw	85
  5669  003800  6EA7               	movwf	4007,c	;volatile
  5670                           
  5671                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5672  003802  0EAA               	movlw	170
  5673  003804  6EA7               	movwf	4007,c	;volatile
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5677  003806  82A6               	bsf	4006,1,c	;volatile
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5681  003808  8EF2               	bsf	intcon,7,c	;volatile
  5682  00380A                     l952:
  5683  00380A  A8A1               	btfss	4001,4,c	;volatile
  5684  00380C  D7FE               	goto	l952
  5685                           
  5686                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5687  00380E  98A1               	bcf	4001,4,c	;volatile
  5688                           
  5689                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5690  003810  94A6               	bcf	4006,2,c	;volatile
  5691                           
  5692                           ;EEPROM.c: 57: if(debug){
  5693  003812  505F               	movf	_debug,w,c
  5694  003814  1060               	iorwf	_debug+1,w,c
  5695  003816  B4D8               	btfsc	status,2,c
  5696  003818  0012               	return	
  5697                           
  5698                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5699  00381A  0E01               	movlw	1
  5700  00381C  EC24  F026         	call	_lcdInst
  5701  003820  0E68               	movlw	104
  5702  003822  0100               	movlb	0	; () banked
  5703  003824  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5704  003826  0EE4               	movlw	228
  5705  003828                     u8037:
  5706  003828  2EE8               	decfsz	wreg,f,c
  5707  00382A  D7FE               	bra	u8037
  5708  00382C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5709  00382E  D7FC               	bra	u8037
  5710  003830  F000               	nop	
  5711                           
  5712                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5713  003832  0E80               	movlw	128
  5714  003834  EC24  F026         	call	_lcdInst
  5715                           
  5716                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5717  003838  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5718  00383C  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5719  003840  ECE7  F025         	call	_EEPROM_read	;wreg free
  5720  003844  0100               	movlb	0	; () banked
  5721  003846  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5722  003848  A4D8               	btfss	status,2,c
  5723  00384A  D024               	goto	l6323
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5727  00384C  0E22               	movlw	low STR_66
  5728  00384E  0100               	movlb	0	; () banked
  5729  003850  6F8E               	movwf	printf@f& (0+255),b
  5730  003852  0EFB               	movlw	high STR_66
  5731  003854  0100               	movlb	0	; () banked
  5732  003856  6F8F               	movwf	(printf@f+1)& (0+255),b
  5733  003858  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5734  00385C  0100               	movlb	0	; () banked
  5735  00385E  6B91               	clrf	(?_printf+3)& (0+255),b
  5736  003860  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5737  003864  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5738  003868  ECB8  F008         	call	_printf	;wreg free
  5739                           
  5740                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5741  00386C  0E00               	movlw	0
  5742  00386E  0100               	movlb	0	; () banked
  5743  003870  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5744  003872                     l6315:
  5745                           
  5746                           ; BSR set to: 0
  5747  003872  0E63               	movlw	99
  5748  003874  0100               	movlb	0	; () banked
  5749  003876  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5750  003878  D001               	goto	l6319
  5751  00387A  0012               	return	
  5752  00387C                     l6319:
  5753                           
  5754                           ; BSR set to: 0
  5755  00387C  0E68               	movlw	104
  5756  00387E  0100               	movlb	0	; () banked
  5757  003880  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5758  003882  0EE4               	movlw	228
  5759  003884                     u8047:
  5760  003884  2EE8               	decfsz	wreg,f,c
  5761  003886  D7FE               	bra	u8047
  5762  003888  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5763  00388A  D7FC               	bra	u8047
  5764  00388C  F000               	nop	
  5765  00388E  0100               	movlb	0	; () banked
  5766  003890  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5767  003892  D7EF               	goto	l6315
  5768  003894                     l6323:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5772  003894  0EBD               	movlw	low STR_67
  5773  003896  0100               	movlb	0	; () banked
  5774  003898  6F8E               	movwf	printf@f& (0+255),b
  5775  00389A  0EFF               	movlw	high STR_67
  5776  00389C  0100               	movlb	0	; () banked
  5777  00389E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5778  0038A0  ECB8  F008         	call	_printf	;wreg free
  5779  0038A4  0E00               	movlw	0
  5780  0038A6  0100               	movlb	0	; () banked
  5781  0038A8  6FB0               	movwf	EEPROM_write@i_1331& (0+255),b
  5782  0038AA                     l6327:
  5783                           
  5784                           ; BSR set to: 0
  5785  0038AA  0E63               	movlw	99
  5786  0038AC  0100               	movlb	0	; () banked
  5787  0038AE  65B0               	cpfsgt	EEPROM_write@i_1331& (0+255),b
  5788  0038B0  D001               	goto	l6331
  5789  0038B2  0012               	return	
  5790  0038B4                     l6331:
  5791                           
  5792                           ; BSR set to: 0
  5793  0038B4  0E68               	movlw	104
  5794  0038B6  0100               	movlb	0	; () banked
  5795  0038B8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5796  0038BA  0EE4               	movlw	228
  5797  0038BC                     u8057:
  5798  0038BC  2EE8               	decfsz	wreg,f,c
  5799  0038BE  D7FE               	bra	u8057
  5800  0038C0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5801  0038C2  D7FC               	bra	u8057
  5802  0038C4  F000               	nop	
  5803  0038C6  0100               	movlb	0	; () banked
  5804  0038C8  2BB0               	incf	EEPROM_write@i_1331& (0+255),f,b
  5805  0038CA  D7EF               	goto	l6327
  5806  0038CC                     __end_of_EEPROM_write:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           intcon	equ	0xFF2
  5815                           intcon2	equ	0xFF1
  5816                           intcon3	equ	0xFF0
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           postdec1	equ	0xFE5
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function _EEPROM_read *****************
  5829 ;; Defined at:
  5830 ;;		line 68 in file "EEPROM.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  address         2    0[BANK0 ] unsigned short 
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      unsigned char 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5844 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;Total ram usage:        2 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    7
  5851 ;; This function calls:
  5852 ;;		Nothing
  5853 ;; This function is called by:
  5854 ;;		_Loading
  5855 ;;		_EEPROM_write
  5856 ;;		_logRun
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text15
  5861  004BCE                     __ptext15:
  5862                           	opt stack 0
  5863  004BCE                     _EEPROM_read:
  5864                           	opt stack 20
  5865                           
  5866                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5867                           
  5868                           ;incstack = 0
  5869  004BCE  0100               	movlb	0	; () banked
  5870  004BD0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5871  004BD2  6EAA               	movwf	4010,c	;volatile
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5875  004BD4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5879  004BD8  9EA6               	bcf	4006,7,c	;volatile
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5883  004BDA  9CA6               	bcf	4006,6,c	;volatile
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5887  004BDC  80A6               	bsf	4006,0,c	;volatile
  5888  004BDE                     l965:
  5889  004BDE  B0A6               	btfsc	4006,0,c	;volatile
  5890  004BE0  D7FE               	goto	l965
  5891                           
  5892                           ;EEPROM.c: 81: return EEDATA;
  5893  004BE2  50A8               	movf	4008,w,c	;volatile
  5894  004BE4  0012               	return	
  5895  004BE6                     __end_of_EEPROM_read:
  5896                           	opt stack 0
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           intcon2	equ	0xFF1
  5905                           intcon3	equ	0xFF0
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _initUI *****************
  5918 ;; Defined at:
  5919 ;;		line 62 in file "UI.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;Total ram usage:        0 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:   12
  5940 ;; This function calls:
  5941 ;;		_change_state_to_menu_start
  5942 ;;		_loadRTC
  5943 ;; This function is called by:
  5944 ;;		_main
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text16
  5949  0049A0                     __ptext16:
  5950                           	opt stack 0
  5951  0049A0                     _initUI:
  5952                           	opt stack 18
  5953                           
  5954                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5955                           
  5956                           ;incstack = 0
  5957  0049A0  8EF2               	bsf	intcon,7,c	;volatile
  5958                           
  5959                           ;UI.c: 64: machine_state = UI_state;
  5960  0049A2  0E00               	movlw	0
  5961  0049A4  0100               	movlb	0	; () banked
  5962  0049A6  6FFC               	movwf	_machine_state& (0+255),b
  5963                           
  5964                           ;UI.c: 65: logstate = 0;
  5965  0049A8  0E00               	movlw	0
  5966  0049AA  0100               	movlb	0	; () banked
  5967  0049AC  6FF7               	movwf	(_logstate+1)& (0+255),b
  5968  0049AE  0E00               	movlw	0
  5969  0049B0  6FF6               	movwf	_logstate& (0+255),b
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;UI.c: 67: if(RTCflag){
  5973  0049B2  0100               	movlb	0	; () banked
  5974  0049B4  51E2               	movf	_RTCflag& (0+255),w,b
  5975  0049B6  0100               	movlb	0	; () banked
  5976  0049B8  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  5977  0049BA  A4D8               	btfss	status,2,c
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;UI.c: 68: loadRTC();
  5981  0049BC  ECF9  F01E         	call	_loadRTC	;wreg free
  5982                           
  5983                           ;UI.c: 69: }
  5984                           ;UI.c: 71: change_state_to_menu_start();
  5985  0049C0  EC15  F025         	call	_change_state_to_menu_start	;wreg free
  5986                           
  5987                           ;UI.c: 72: firstboot = 1;
  5988  0049C4  0E00               	movlw	0
  5989  0049C6  6E70               	movwf	_firstboot+1,c
  5990  0049C8  0E01               	movlw	1
  5991  0049CA  6E6F               	movwf	_firstboot,c
  5992  0049CC  0012               	return		;funcret
  5993  0049CE                     __end_of_initUI:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           intcon3	equ	0xFF0
  6004                           postinc0	equ	0xFEE
  6005                           wreg	equ	0xFE8
  6006                           postdec1	equ	0xFE5
  6007                           fsr1l	equ	0xFE1
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           fsr2h	equ	0xFDA
  6012                           fsr2l	equ	0xFD9
  6013                           status	equ	0xFD8
  6014                           
  6015 ;; *************** function _loadRTC *****************
  6016 ;; Defined at:
  6017 ;;		line 28 in file "RTC.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  i               2   22[BANK0 ] int 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:        3 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    9
  6038 ;; This function calls:
  6039 ;;		_I2C_Master_Init
  6040 ;;		_I2C_Master_Start
  6041 ;;		_I2C_Master_Stop
  6042 ;;		_I2C_Master_Write
  6043 ;; This function is called by:
  6044 ;;		_initUI
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text17
  6049  003DF2                     __ptext17:
  6050                           	opt stack 0
  6051  003DF2                     _loadRTC:
  6052                           	opt stack 20
  6053                           
  6054                           ;RTC.c: 30: I2C_Master_Init(10000);
  6055                           
  6056                           ;incstack = 0
  6057  003DF2  0E10               	movlw	16
  6058  003DF4  0100               	movlb	0	; () banked
  6059  003DF6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6060  003DF8  0E27               	movlw	39
  6061  003DFA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6062  003DFC  0E00               	movlw	0
  6063  003DFE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6064  003E00  0E00               	movlw	0
  6065  003E02  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6066  003E04  EC94  F021         	call	_I2C_Master_Init	;wreg free
  6067                           
  6068                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6069  003E08  9EF2               	bcf	intcon,7,c	;volatile
  6070                           
  6071                           ;RTC.c: 34: I2C_Master_Start();
  6072  003E0A  EC4A  F026         	call	_I2C_Master_Start	;wreg free
  6073                           
  6074                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6075  003E0E  0E00               	movlw	0
  6076  003E10  0100               	movlb	0	; () banked
  6077  003E12  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6078  003E14  0ED0               	movlw	208
  6079  003E16  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6080  003E18  EC38  F026         	call	_I2C_Master_Write	;wreg free
  6081                           
  6082                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6083  003E1C  0E00               	movlw	0
  6084  003E1E  0100               	movlb	0	; () banked
  6085  003E20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6086  003E22  0E00               	movlw	0
  6087  003E24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6088  003E26  EC38  F026         	call	_I2C_Master_Write	;wreg free
  6089                           
  6090                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6091  003E2A  0E00               	movlw	0
  6092  003E2C  0100               	movlb	0	; () banked
  6093  003E2E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6094  003E30  0E00               	movlw	0
  6095  003E32  6F96               	movwf	loadRTC@i& (0+255),b
  6096  003E34                     l6469:
  6097                           
  6098                           ; BSR set to: 0
  6099  003E34  0100               	movlb	0	; () banked
  6100  003E36  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6101  003E38  D008               	goto	l6473
  6102  003E3A  0100               	movlb	0	; () banked
  6103  003E3C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6104  003E3E  E11B               	bnz	l6479
  6105  003E40  0E07               	movlw	7
  6106  003E42  0100               	movlb	0	; () banked
  6107  003E44  5D96               	subwf	loadRTC@i& (0+255),w,b
  6108  003E46  B0D8               	btfsc	status,0,c
  6109  003E48  D016               	goto	l6479
  6110  003E4A                     l6473:
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6114  003E4A  0E24               	movlw	low _time
  6115  003E4C  0100               	movlb	0	; () banked
  6116  003E4E  2596               	addwf	loadRTC@i& (0+255),w,b
  6117  003E50  6ED9               	movwf	fsr2l,c
  6118  003E52  0E01               	movlw	high _time
  6119  003E54  0100               	movlb	0	; () banked
  6120  003E56  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6121  003E58  6EDA               	movwf	fsr2h,c
  6122  003E5A  50DF               	movf	indf2,w,c
  6123  003E5C  0100               	movlb	0	; () banked
  6124  003E5E  6F95               	movwf	??_loadRTC& (0+255),b
  6125  003E60  0100               	movlb	0	; () banked
  6126  003E62  5195               	movf	??_loadRTC& (0+255),w,b
  6127  003E64  0100               	movlb	0	; () banked
  6128  003E66  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6129  003E68  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6130  003E6A  EC38  F026         	call	_I2C_Master_Write	;wreg free
  6131  003E6E  0100               	movlb	0	; () banked
  6132  003E70  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6133  003E72  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6134  003E74  D7DF               	goto	l6469
  6135  003E76                     l6479:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;RTC.c: 39: }
  6139                           ;RTC.c: 40: I2C_Master_Stop();
  6140  003E76  EC46  F026         	call	_I2C_Master_Stop	;wreg free
  6141                           
  6142                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6143  003E7A  8EF2               	bsf	intcon,7,c	;volatile
  6144  003E7C  0012               	return		;funcret
  6145  003E7E                     __end_of_loadRTC:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           intcon3	equ	0xFF0
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _I2C_Master_Init *****************
  6168 ;; Defined at:
  6169 ;;		line 15 in file "I2C.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  c               4   13[BANK0 ] const unsigned long 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;		None
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6183 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;Total ram usage:        8 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    8
  6190 ;; This function calls:
  6191 ;;		___lldiv
  6192 ;; This function is called by:
  6193 ;;		_main
  6194 ;;		_loadRTC
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text18
  6199  004328                     __ptext18:
  6200                           	opt stack 0
  6201  004328                     _I2C_Master_Init:
  6202                           	opt stack 20
  6203                           
  6204                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6205                           
  6206                           ;incstack = 0
  6207  004328  0E00               	movlw	0
  6208  00432A  6EC7               	movwf	4039,c	;volatile
  6209                           
  6210                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6211  00432C  0E28               	movlw	40
  6212  00432E  6EC6               	movwf	4038,c	;volatile
  6213                           
  6214                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6215  004330  0E00               	movlw	0
  6216  004332  6EC5               	movwf	4037,c	;volatile
  6217                           
  6218                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6219  004334  0E00               	movlw	0
  6220  004336  0100               	movlb	0	; () banked
  6221  004338  6F80               	movwf	___lldiv@dividend& (0+255),b
  6222  00433A  0E48               	movlw	72
  6223  00433C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6224  00433E  0EE8               	movlw	232
  6225  004340  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6226  004342  0E01               	movlw	1
  6227  004344  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6228  004346  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6229  00434A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6230  00434E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6231  004352  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6232  004356  0E02               	movlw	2
  6233  004358                     u4855:
  6234  004358  90D8               	bcf	status,0,c
  6235  00435A  0100               	movlb	0	; () banked
  6236  00435C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6237  00435E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6238  004360  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6239  004362  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6240  004364  2EE8               	decfsz	wreg,f,c
  6241  004366  D7F8               	goto	u4855
  6242  004368  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6243  00436C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6244  004370  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6245  004374  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6246  004378  ECF5  F01D         	call	___lldiv	;wreg free
  6247  00437C  0100               	movlb	0	; () banked
  6248  00437E  0580               	decf	?___lldiv& (0+255),w,b
  6249  004380  6EC8               	movwf	4040,c	;volatile
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;I2C.c: 22: TRISC3 = 1;
  6253  004382  8694               	bsf	3988,3,c	;volatile
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;I2C.c: 23: TRISC4 = 1;
  6257  004384  8894               	bsf	3988,4,c	;volatile
  6258                           
  6259                           ; BSR set to: 0
  6260  004386  0012               	return		;funcret
  6261  004388                     __end_of_I2C_Master_Init:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon2	equ	0xFF1
  6271                           intcon3	equ	0xFF0
  6272                           postinc0	equ	0xFEE
  6273                           wreg	equ	0xFE8
  6274                           postdec1	equ	0xFE5
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8
  6282                           
  6283 ;; *************** function ___lldiv *****************
  6284 ;; Defined at:
  6285 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;  dividend        4    0[BANK0 ] unsigned long 
  6288 ;;  divisor         4    4[BANK0 ] unsigned long 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  quotient        4    8[BANK0 ] unsigned long 
  6291 ;;  counter         1   12[BANK0 ] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  4    0[BANK0 ] unsigned long 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6301 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;Total ram usage:       13 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    7
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_I2C_Master_Init
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text19
  6316  003BEA                     __ptext19:
  6317                           	opt stack 0
  6318  003BEA                     ___lldiv:
  6319                           	opt stack 20
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;incstack = 0
  6323  003BEA  0E00               	movlw	0
  6324  003BEC  0100               	movlb	0	; () banked
  6325  003BEE  6F88               	movwf	___lldiv@quotient& (0+255),b
  6326  003BF0  0E00               	movlw	0
  6327  003BF2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6328  003BF4  0E00               	movlw	0
  6329  003BF6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6330  003BF8  0E00               	movlw	0
  6331  003BFA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6332                           
  6333                           ; BSR set to: 0
  6334  003BFC  0100               	movlb	0	; () banked
  6335  003BFE  5184               	movf	___lldiv@divisor& (0+255),w,b
  6336  003C00  0100               	movlb	0	; () banked
  6337  003C02  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6338  003C04  0100               	movlb	0	; () banked
  6339  003C06  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6340  003C08  0100               	movlb	0	; () banked
  6341  003C0A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6342  003C0C  B4D8               	btfsc	status,2,c
  6343  003C0E  D042               	goto	l1721
  6344                           
  6345                           ; BSR set to: 0
  6346  003C10  0E01               	movlw	1
  6347  003C12  0100               	movlb	0	; () banked
  6348  003C14  6F8C               	movwf	___lldiv@counter& (0+255),b
  6349  003C16  D008               	goto	l5893
  6350  003C18                     l5891:
  6351                           
  6352                           ; BSR set to: 0
  6353  003C18  0100               	movlb	0	; () banked
  6354  003C1A  90D8               	bcf	status,0,c
  6355  003C1C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6356  003C1E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6357  003C20  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6358  003C22  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6359  003C24  0100               	movlb	0	; () banked
  6360  003C26  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6361  003C28                     l5893:
  6362                           
  6363                           ; BSR set to: 0
  6364  003C28  0100               	movlb	0	; () banked
  6365  003C2A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6366  003C2C  D7F5               	goto	l5891
  6367  003C2E                     l5895:
  6368                           
  6369                           ; BSR set to: 0
  6370  003C2E  0100               	movlb	0	; () banked
  6371  003C30  90D8               	bcf	status,0,c
  6372  003C32  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6373  003C34  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6374  003C36  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6375  003C38  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6376                           
  6377                           ; BSR set to: 0
  6378  003C3A  0100               	movlb	0	; () banked
  6379  003C3C  5184               	movf	___lldiv@divisor& (0+255),w,b
  6380  003C3E  0100               	movlb	0	; () banked
  6381  003C40  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6382  003C42  0100               	movlb	0	; () banked
  6383  003C44  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6384  003C46  0100               	movlb	0	; () banked
  6385  003C48  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6386  003C4A  0100               	movlb	0	; () banked
  6387  003C4C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6388  003C4E  0100               	movlb	0	; () banked
  6389  003C50  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6390  003C52  0100               	movlb	0	; () banked
  6391  003C54  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6392  003C56  0100               	movlb	0	; () banked
  6393  003C58  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6394  003C5A  A0D8               	btfss	status,0,c
  6395  003C5C  D012               	goto	l5903
  6396                           
  6397                           ; BSR set to: 0
  6398  003C5E  0100               	movlb	0	; () banked
  6399  003C60  5184               	movf	___lldiv@divisor& (0+255),w,b
  6400  003C62  0100               	movlb	0	; () banked
  6401  003C64  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6402  003C66  0100               	movlb	0	; () banked
  6403  003C68  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6404  003C6A  0100               	movlb	0	; () banked
  6405  003C6C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6406  003C6E  0100               	movlb	0	; () banked
  6407  003C70  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6408  003C72  0100               	movlb	0	; () banked
  6409  003C74  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6410  003C76  0100               	movlb	0	; () banked
  6411  003C78  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6412  003C7A  0100               	movlb	0	; () banked
  6413  003C7C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6414                           
  6415                           ; BSR set to: 0
  6416  003C7E  0100               	movlb	0	; () banked
  6417  003C80  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6418  003C82                     l5903:
  6419                           
  6420                           ; BSR set to: 0
  6421  003C82  0100               	movlb	0	; () banked
  6422  003C84  90D8               	bcf	status,0,c
  6423  003C86  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6424  003C88  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6425  003C8A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6426  003C8C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6427                           
  6428                           ; BSR set to: 0
  6429  003C8E  0100               	movlb	0	; () banked
  6430  003C90  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6431  003C92  D7CD               	goto	l5895
  6432  003C94                     l1721:
  6433                           
  6434                           ; BSR set to: 0
  6435  003C94  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6436  003C98  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6437  003C9C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6438  003CA0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6439                           
  6440                           ; BSR set to: 0
  6441  003CA4  0012               	return		;funcret
  6442  003CA6                     __end_of___lldiv:
  6443                           	opt stack 0
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           intcon2	equ	0xFF1
  6452                           intcon3	equ	0xFF0
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _change_state_to_menu_start *****************
  6465 ;; Defined at:
  6466 ;;		line 474 in file "UI.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:   11
  6487 ;; This function calls:
  6488 ;;		_lcdInst
  6489 ;;		_printRTC
  6490 ;;		_printf
  6491 ;; This function is called by:
  6492 ;;		_initUI
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text20
  6497  004A2A                     __ptext20:
  6498                           	opt stack 0
  6499  004A2A                     _change_state_to_menu_start:
  6500                           	opt stack 18
  6501                           
  6502                           ;UI.c: 475: cur_state = 0;
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;incstack = 0
  6506  004A2A  0E00               	movlw	0
  6507  004A2C  0100               	movlb	0	; () banked
  6508  004A2E  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6509  004A30  0E00               	movlw	0
  6510  004A32  6FE6               	movwf	_cur_state& (0+255),b
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;UI.c: 477: lcdInst(0b10000000);;
  6514  004A34  0E80               	movlw	128
  6515  004A36  EC24  F026         	call	_lcdInst
  6516                           
  6517                           ;UI.c: 478: printRTC();
  6518  004A3A  ECCC  F00F         	call	_printRTC	;wreg free
  6519                           
  6520                           ;UI.c: 479: lcdInst(0b11000000);;
  6521  004A3E  0EC0               	movlw	192
  6522  004A40  EC24  F026         	call	_lcdInst
  6523                           
  6524                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6525  004A44  0EF7               	movlw	low STR_30
  6526  004A46  0100               	movlb	0	; () banked
  6527  004A48  6F8E               	movwf	printf@f& (0+255),b
  6528  004A4A  0EFD               	movlw	high STR_30
  6529  004A4C  0100               	movlb	0	; () banked
  6530  004A4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6531  004A50  ECB8  F008         	call	_printf	;wreg free
  6532  004A54  0012               	return		;funcret
  6533  004A56                     __end_of_change_state_to_menu_start:
  6534                           	opt stack 0
  6535                           tblptru	equ	0xFF8
  6536                           tblptrh	equ	0xFF7
  6537                           tblptrl	equ	0xFF6
  6538                           tablat	equ	0xFF5
  6539                           prodh	equ	0xFF4
  6540                           prodl	equ	0xFF3
  6541                           intcon	equ	0xFF2
  6542                           intcon2	equ	0xFF1
  6543                           intcon3	equ	0xFF0
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           postdec1	equ	0xFE5
  6547                           fsr1l	equ	0xFE1
  6548                           indf2	equ	0xFDF
  6549                           postinc2	equ	0xFDE
  6550                           postdec2	equ	0xFDD
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function _initTime *****************
  6556 ;; Defined at:
  6557 ;;		line 17 in file "RTC.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  s               1    wreg     unsigned char 
  6560 ;;  m               1    0[BANK0 ] unsigned char 
  6561 ;;  h               1    1[BANK0 ] unsigned char 
  6562 ;;  w               1    2[BANK0 ] unsigned char 
  6563 ;;  DD              1    3[BANK0 ] unsigned char 
  6564 ;;  MM              1    4[BANK0 ] unsigned char 
  6565 ;;  YY              1    5[BANK0 ] unsigned char 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  s               1    6[BANK0 ] unsigned char 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:        7 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    7
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text21
  6592  004B8E                     __ptext21:
  6593                           	opt stack 0
  6594  004B8E                     _initTime:
  6595                           	opt stack 23
  6596                           
  6597                           ;incstack = 0
  6598                           ;initTime@s stored from wreg
  6599  004B8E  0100               	movlb	0	; () banked
  6600  004B90  6F86               	movwf	initTime@s& (0+255),b
  6601                           
  6602                           ;RTC.c: 19: time[0] = s;
  6603  004B92  C086  F124         	movff	initTime@s,_time
  6604                           
  6605                           ;RTC.c: 20: time[1] = m;
  6606  004B96  C080  F125         	movff	initTime@m,_time+1
  6607                           
  6608                           ;RTC.c: 21: time[2] = h;
  6609  004B9A  C081  F126         	movff	initTime@h,_time+2
  6610                           
  6611                           ;RTC.c: 22: time[3] = w;
  6612  004B9E  C082  F127         	movff	initTime@w,_time+3
  6613                           
  6614                           ;RTC.c: 23: time[4] = DD;
  6615  004BA2  C083  F128         	movff	initTime@DD,_time+4
  6616                           
  6617                           ;RTC.c: 24: time[5] = MM;
  6618  004BA6  C084  F129         	movff	initTime@MM,_time+5
  6619                           
  6620                           ;RTC.c: 25: time[6] = YY;
  6621  004BAA  C085  F12A         	movff	initTime@YY,_time+6
  6622  004BAE  0012               	return		;funcret
  6623  004BB0                     __end_of_initTime:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           intcon2	equ	0xFF1
  6633                           intcon3	equ	0xFF0
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           postdec1	equ	0xFE5
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _initLCD *****************
  6646 ;; Defined at:
  6647 ;;		line 48 in file "lcd.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;Total ram usage:        1 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    9
  6668 ;; This function calls:
  6669 ;;		_lcdInst
  6670 ;; This function is called by:
  6671 ;;		_main
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text22
  6676  004628                     __ptext22:
  6677                           	opt stack 0
  6678  004628                     _initLCD:
  6679                           	opt stack 21
  6680                           
  6681                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6682                           
  6683                           ;incstack = 0
  6684  004628  0E9C               	movlw	156
  6685  00462A  0100               	movlb	0	; () banked
  6686  00462C  6F83               	movwf	??_initLCD& (0+255),b
  6687  00462E  0ED7               	movlw	215
  6688  004630                     u8067:
  6689  004630  2EE8               	decfsz	wreg,f,c
  6690  004632  D7FE               	bra	u8067
  6691  004634  2F83               	decfsz	??_initLCD& (0+255),f,b
  6692  004636  D7FC               	bra	u8067
  6693                           
  6694                           ;lcd.c: 50: lcdInst(0b00110011);
  6695  004638  0E33               	movlw	51
  6696  00463A  EC24  F026         	call	_lcdInst
  6697                           
  6698                           ;lcd.c: 51: lcdInst(0b00110010);
  6699  00463E  0E32               	movlw	50
  6700  004640  EC24  F026         	call	_lcdInst
  6701                           
  6702                           ;lcd.c: 53: lcdInst(0b00101000);
  6703  004644  0E28               	movlw	40
  6704  004646  EC24  F026         	call	_lcdInst
  6705                           
  6706                           ;lcd.c: 54: lcdInst(0b00001100);
  6707  00464A  0E0C               	movlw	12
  6708  00464C  EC24  F026         	call	_lcdInst
  6709                           
  6710                           ;lcd.c: 55: lcdInst(0b00000110);
  6711  004650  0E06               	movlw	6
  6712  004652  EC24  F026         	call	_lcdInst
  6713                           
  6714                           ;lcd.c: 56: lcdInst(0b00000001);
  6715  004656  0E01               	movlw	1
  6716  004658  EC24  F026         	call	_lcdInst
  6717                           
  6718                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6719  00465C  0E9C               	movlw	156
  6720  00465E  0100               	movlb	0	; () banked
  6721  004660  6F83               	movwf	??_initLCD& (0+255),b
  6722  004662  0ED7               	movlw	215
  6723  004664                     u8077:
  6724  004664  2EE8               	decfsz	wreg,f,c
  6725  004666  D7FE               	bra	u8077
  6726  004668  2F83               	decfsz	??_initLCD& (0+255),f,b
  6727  00466A  D7FC               	bra	u8077
  6728  00466C  0012               	return		;funcret
  6729  00466E                     __end_of_initLCD:
  6730                           	opt stack 0
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           intcon2	equ	0xFF1
  6739                           intcon3	equ	0xFF0
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           postdec1	equ	0xFE5
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           fsr2h	equ	0xFDA
  6748                           fsr2l	equ	0xFD9
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function _UI *****************
  6752 ;; Defined at:
  6753 ;;		line 76 in file "UI.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  i               1   73[BANK0 ] unsigned char 
  6758 ;;  i               1   85[BANK0 ] unsigned char 
  6759 ;;  i               1   84[BANK0 ] unsigned char 
  6760 ;;  i               1   83[BANK0 ] unsigned char 
  6761 ;;  i               1   82[BANK0 ] unsigned char 
  6762 ;;  i               1   81[BANK0 ] unsigned char 
  6763 ;;  i               1   80[BANK0 ] unsigned char 
  6764 ;;  i               1   79[BANK0 ] unsigned char 
  6765 ;;  i               1   78[BANK0 ] unsigned char 
  6766 ;;  i               1   77[BANK0 ] unsigned char 
  6767 ;;  i               1   76[BANK0 ] unsigned char 
  6768 ;;  i               1   75[BANK0 ] unsigned char 
  6769 ;;  i               1   74[BANK0 ] unsigned char 
  6770 ;;  month           4   86[BANK0 ] unsigned char [4]
  6771 ;;  i               1   72[BANK0 ] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;Total ram usage:       22 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:   11
  6788 ;; This function calls:
  6789 ;;		___awdiv
  6790 ;;		___awmod
  6791 ;;		_change_state_to_menu_12
  6792 ;;		_change_state_to_menu_22
  6793 ;;		_lcdInst
  6794 ;;		_printRTC
  6795 ;;		_printf
  6796 ;;		_strcpy
  6797 ;; This function is called by:
  6798 ;;		_main
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text23
  6803  0008CA                     __ptext23:
  6804                           	opt stack 0
  6805  0008CA                     _UI:
  6806                           	opt stack 19
  6807                           
  6808                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6809                           
  6810                           ;incstack = 0
  6811  0008CA  0E02               	movlw	2
  6812  0008CC  0100               	movlb	0	; () banked
  6813  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6814  0008D0  A4D8               	btfss	status,2,c
  6815  0008D2  D075               	goto	l7831
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6819  0008D4  0E01               	movlw	1
  6820  0008D6  EC24  F026         	call	_lcdInst
  6821  0008DA  0E68               	movlw	104
  6822  0008DC  0100               	movlb	0	; () banked
  6823  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6824  0008E0  0EE4               	movlw	228
  6825  0008E2                     u8087:
  6826  0008E2  2EE8               	decfsz	wreg,f,c
  6827  0008E4  D7FE               	bra	u8087
  6828  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6829  0008E8  D7FC               	bra	u8087
  6830  0008EA  F000               	nop	
  6831                           
  6832                           ;UI.c: 79: lcdInst(0b10000000);;
  6833  0008EC  0E80               	movlw	128
  6834  0008EE  EC24  F026         	call	_lcdInst
  6835                           
  6836                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6837  0008F2  0EA3               	movlw	low STR_1
  6838  0008F4  0100               	movlb	0	; () banked
  6839  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6840  0008F8  0EFB               	movlw	high STR_1
  6841  0008FA  0100               	movlb	0	; () banked
  6842  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6843  0008FE  0E01               	movlw	1
  6844  000900  0100               	movlb	0	; () banked
  6845  000902  25FD               	addwf	_sel& (0+255),w,b
  6846  000904  0100               	movlb	0	; () banked
  6847  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6848  000908  0100               	movlb	0	; () banked
  6849  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6850  00090C  0E00               	movlw	0
  6851  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6852  000910  ECB8  F008         	call	_printf	;wreg free
  6853                           
  6854                           ;UI.c: 81: lcdInst(0b11000000);;
  6855  000914  0EC0               	movlw	192
  6856  000916  EC24  F026         	call	_lcdInst
  6857                           
  6858                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6859  00091A  0E0E               	movlw	14
  6860  00091C  0100               	movlb	0	; () banked
  6861  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6862  000920  0E10               	movlw	16
  6863  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6864  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6865  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6866  00092C  ECA8  F01E         	call	___awmod	;wreg free
  6867  000930  C080  F0C6         	movff	?___awmod,_UI$2316
  6868  000934  C081  F0C7         	movff	?___awmod+1,_UI$2316+1
  6869                           
  6870                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6871  000938  0E27               	movlw	low STR_2
  6872  00093A  0100               	movlb	0	; () banked
  6873  00093C  6F8E               	movwf	printf@f& (0+255),b
  6874  00093E  0EFF               	movlw	high STR_2
  6875  000940  0100               	movlb	0	; () banked
  6876  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6877  000944  0E0E               	movlw	14
  6878  000946  0100               	movlb	0	; () banked
  6879  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6880  00094A  0E10               	movlw	16
  6881  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6882  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6883  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6884  000956  ECA8  F01E         	call	___awmod	;wreg free
  6885  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6886  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6887  000962  0E00               	movlw	0
  6888  000964  0100               	movlb	0	; () banked
  6889  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6890  000968  0E3C               	movlw	60
  6891  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6892  00096C  EC96  F01D         	call	___awdiv	;wreg free
  6893  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6894  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6895  000978  C0C6  F080         	movff	_UI$2316,___awmod@dividend
  6896  00097C  C0C7  F081         	movff	_UI$2316+1,___awmod@dividend+1
  6897  000980  0E00               	movlw	0
  6898  000982  0100               	movlb	0	; () banked
  6899  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6900  000986  0E3C               	movlw	60
  6901  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6902  00098A  ECA8  F01E         	call	___awmod	;wreg free
  6903  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6904  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6905  000996  ECB8  F008         	call	_printf	;wreg free
  6906                           
  6907                           ;UI.c: 83: machine_state = UI_state;
  6908  00099A  0E00               	movlw	0
  6909  00099C  0100               	movlb	0	; () banked
  6910  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6911  0009A0                     l175:
  6912  0009A0  A281               	btfss	3969,1,c	;volatile
  6913  0009A2  D7FE               	goto	l175
  6914                           
  6915                           ;UI.c: 86: }
  6916                           ;UI.c: 87: if(cur_state==12){
  6917  0009A4  0E0C               	movlw	12
  6918  0009A6  0100               	movlb	0	; () banked
  6919  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  6920  0009AA  0100               	movlb	0	; () banked
  6921  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6922  0009AE  A4D8               	btfss	status,2,c
  6923  0009B0  D003               	goto	l7829
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;UI.c: 88: change_state_to_menu_12();
  6927  0009B2  EC74  F023         	call	_change_state_to_menu_12	;wreg free
  6928                           
  6929                           ;UI.c: 89: }
  6930  0009B6  D3D5               	goto	l8151
  6931  0009B8                     l7829:
  6932                           
  6933                           ;UI.c: 90: else{
  6934                           ;UI.c: 91: change_state_to_menu_22();
  6935  0009B8  EC58  F023         	call	_change_state_to_menu_22	;wreg free
  6936                           
  6937                           ;UI.c: 92: }
  6938                           ;UI.c: 93: }
  6939  0009BC  D3D2               	goto	l8151
  6940  0009BE                     l7831:
  6941                           
  6942                           ;UI.c: 94: else if(cur_state == 0){
  6943  0009BE  0100               	movlb	0	; () banked
  6944  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  6945  0009C2  0100               	movlb	0	; () banked
  6946  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6947  0009C6  A4D8               	btfss	status,2,c
  6948  0009C8  D3CC               	goto	l8151
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6952  0009CA  0E00               	movlw	0
  6953  0009CC  0100               	movlb	0	; () banked
  6954  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6955  0009D0                     l7835:
  6956                           
  6957                           ; BSR set to: 0
  6958  0009D0  0E63               	movlw	99
  6959  0009D2  0100               	movlb	0	; () banked
  6960  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6961  0009D6  D001               	goto	l7839
  6962  0009D8  D00C               	goto	l7843
  6963  0009DA                     l7839:
  6964                           
  6965                           ; BSR set to: 0
  6966  0009DA  0E68               	movlw	104
  6967  0009DC  0100               	movlb	0	; () banked
  6968  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6969  0009E0  0EE4               	movlw	228
  6970  0009E2                     u8097:
  6971  0009E2  2EE8               	decfsz	wreg,f,c
  6972  0009E4  D7FE               	bra	u8097
  6973  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6974  0009E8  D7FC               	bra	u8097
  6975  0009EA  F000               	nop	
  6976  0009EC  0100               	movlb	0	; () banked
  6977  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6978  0009F0  D7EF               	goto	l7835
  6979  0009F2                     l7843:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;UI.c: 96: if(cur_state == 0){
  6983  0009F2  0100               	movlb	0	; () banked
  6984  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  6985  0009F6  0100               	movlb	0	; () banked
  6986  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6987  0009FA  A4D8               	btfss	status,2,c
  6988  0009FC  D3B2               	goto	l8151
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;UI.c: 97: printRTC();
  6992  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6993                           
  6994                           ;UI.c: 98: }
  6995                           ;UI.c: 99: }
  6996                           ;UI.c: 100: while(logstate){
  6997  000A02  D3AF               	goto	l8151
  6998  000A04                     l7847:
  6999                           
  7000                           ;UI.c: 102: if(!log_completion){
  7001  000A04  0100               	movlb	0	; () banked
  7002  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7003  000A08  0100               	movlb	0	; () banked
  7004  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7005  000A0C  A4D8               	btfss	status,2,c
  7006  000A0E  D041               	goto	l7877
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7010  000A10  0E01               	movlw	1
  7011  000A12  EC24  F026         	call	_lcdInst
  7012  000A16  0E68               	movlw	104
  7013  000A18  0100               	movlb	0	; () banked
  7014  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7015  000A1C  0EE4               	movlw	228
  7016  000A1E                     u8107:
  7017  000A1E  2EE8               	decfsz	wreg,f,c
  7018  000A20  D7FE               	bra	u8107
  7019  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7020  000A24  D7FC               	bra	u8107
  7021  000A26  F000               	nop	
  7022                           
  7023                           ;UI.c: 104: lcdInst(0b10000000);;
  7024  000A28  0E80               	movlw	128
  7025  000A2A  EC24  F026         	call	_lcdInst
  7026                           
  7027                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7028  000A2E  0E91               	movlw	low STR_3
  7029  000A30  0100               	movlb	0	; () banked
  7030  000A32  6F8E               	movwf	printf@f& (0+255),b
  7031  000A34  0EFB               	movlw	high STR_3
  7032  000A36  0100               	movlb	0	; () banked
  7033  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7034  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7035  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7036  000A42  ECB8  F008         	call	_printf	;wreg free
  7037                           
  7038                           ;UI.c: 106: lcdInst(0b11000000);;
  7039  000A46  0EC0               	movlw	192
  7040  000A48  EC24  F026         	call	_lcdInst
  7041                           
  7042                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7043  000A4C  0E4A               	movlw	low STR_4
  7044  000A4E  0100               	movlb	0	; () banked
  7045  000A50  6F8E               	movwf	printf@f& (0+255),b
  7046  000A52  0EFE               	movlw	high STR_4
  7047  000A54  0100               	movlb	0	; () banked
  7048  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7049  000A58  ECB8  F008         	call	_printf	;wreg free
  7050  000A5C                     l7861:
  7051  000A5C  0E00               	movlw	0
  7052  000A5E  0100               	movlb	0	; () banked
  7053  000A60  6FC9               	movwf	UI@i_407& (0+255),b
  7054  000A62                     l7863:
  7055                           
  7056                           ; BSR set to: 0
  7057  000A62  0E63               	movlw	99
  7058  000A64  0100               	movlb	0	; () banked
  7059  000A66  65C9               	cpfsgt	UI@i_407& (0+255),b
  7060  000A68  D001               	goto	l7867
  7061  000A6A  D00C               	goto	l7871
  7062  000A6C                     l7867:
  7063                           
  7064                           ; BSR set to: 0
  7065  000A6C  0E68               	movlw	104
  7066  000A6E  0100               	movlb	0	; () banked
  7067  000A70  6FC4               	movwf	??_UI& (0+255),b
  7068  000A72  0EE4               	movlw	228
  7069  000A74                     u8117:
  7070  000A74  2EE8               	decfsz	wreg,f,c
  7071  000A76  D7FE               	bra	u8117
  7072  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7073  000A7A  D7FC               	bra	u8117
  7074  000A7C  F000               	nop	
  7075  000A7E  0100               	movlb	0	; () banked
  7076  000A80  2BC9               	incf	UI@i_407& (0+255),f,b
  7077  000A82  D7EF               	goto	l7863
  7078  000A84                     l7871:
  7079                           
  7080                           ; BSR set to: 0
  7081  000A84  0100               	movlb	0	; () banked
  7082  000A86  51F6               	movf	_logstate& (0+255),w,b
  7083  000A88  0100               	movlb	0	; () banked
  7084  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7085  000A8C  B4D8               	btfsc	status,2,c
  7086  000A8E  0012               	return	
  7087  000A90  D7E5               	goto	l7861
  7088  000A92                     l7877:
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;UI.c: 111: else{
  7092                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7093  000A92  0E01               	movlw	1
  7094  000A94  EC24  F026         	call	_lcdInst
  7095  000A98  0E68               	movlw	104
  7096  000A9A  0100               	movlb	0	; () banked
  7097  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7098  000A9E  0EE4               	movlw	228
  7099  000AA0                     u8127:
  7100  000AA0  2EE8               	decfsz	wreg,f,c
  7101  000AA2  D7FE               	bra	u8127
  7102  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7103  000AA6  D7FC               	bra	u8127
  7104  000AA8  F000               	nop	
  7105                           
  7106                           ;UI.c: 113: lcdInst(0b10000000);;
  7107  000AAA  0E80               	movlw	128
  7108  000AAC  EC24  F026         	call	_lcdInst
  7109                           
  7110                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7111  000AB0  0E91               	movlw	low STR_3
  7112  000AB2  0100               	movlb	0	; () banked
  7113  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7114  000AB6  0EFB               	movlw	high STR_3
  7115  000AB8  0100               	movlb	0	; () banked
  7116  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7117  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7118  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7119  000AC4  ECB8  F008         	call	_printf	;wreg free
  7120                           
  7121                           ;UI.c: 115: lcdInst(0b11000000);;
  7122  000AC8  0EC0               	movlw	192
  7123  000ACA  EC24  F026         	call	_lcdInst
  7124                           
  7125                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7126  000ACE  0EE6               	movlw	low STR_6
  7127  000AD0  0100               	movlb	0	; () banked
  7128  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7129  000AD4  0EFD               	movlw	high STR_6
  7130  000AD6  0100               	movlb	0	; () banked
  7131  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7132  000ADA  ECB8  F008         	call	_printf	;wreg free
  7133                           
  7134                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7135  000ADE  0E00               	movlw	0
  7136  000AE0  0100               	movlb	0	; () banked
  7137  000AE2  6FCA               	movwf	UI@i_410& (0+255),b
  7138  000AE4                     l7891:
  7139                           
  7140                           ; BSR set to: 0
  7141  000AE4  0E63               	movlw	99
  7142  000AE6  0100               	movlb	0	; () banked
  7143  000AE8  65CA               	cpfsgt	UI@i_410& (0+255),b
  7144  000AEA  D001               	goto	l7895
  7145  000AEC  D00C               	goto	l7899
  7146  000AEE                     l7895:
  7147                           
  7148                           ; BSR set to: 0
  7149  000AEE  0E68               	movlw	104
  7150  000AF0  0100               	movlb	0	; () banked
  7151  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7152  000AF4  0EE4               	movlw	228
  7153  000AF6                     u8137:
  7154  000AF6  2EE8               	decfsz	wreg,f,c
  7155  000AF8  D7FE               	bra	u8137
  7156  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7157  000AFC  D7FC               	bra	u8137
  7158  000AFE  F000               	nop	
  7159  000B00  0100               	movlb	0	; () banked
  7160  000B02  2BCA               	incf	UI@i_410& (0+255),f,b
  7161  000B04  D7EF               	goto	l7891
  7162  000B06                     l7899:
  7163                           
  7164                           ; BSR set to: 0
  7165  000B06  0100               	movlb	0	; () banked
  7166  000B08  51F6               	movf	_logstate& (0+255),w,b
  7167  000B0A  0100               	movlb	0	; () banked
  7168  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7169  000B0E  B4D8               	btfsc	status,2,c
  7170  000B10  0012               	return	
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7174                           
  7175                           ; BSR set to: 0
  7176                           
  7177                           ; BSR set to: 0
  7178  000B12  0E00               	movlw	0
  7179  000B14  0100               	movlb	0	; () banked
  7180  000B16  6FCB               	movwf	UI@i_411& (0+255),b
  7181  000B18                     l7905:
  7182                           
  7183                           ; BSR set to: 0
  7184  000B18  0E63               	movlw	99
  7185  000B1A  0100               	movlb	0	; () banked
  7186  000B1C  65CB               	cpfsgt	UI@i_411& (0+255),b
  7187  000B1E  D001               	goto	l7909
  7188  000B20  D00C               	goto	l7913
  7189  000B22                     l7909:
  7190                           
  7191                           ; BSR set to: 0
  7192  000B22  0E68               	movlw	104
  7193  000B24  0100               	movlb	0	; () banked
  7194  000B26  6FC4               	movwf	??_UI& (0+255),b
  7195  000B28  0EE4               	movlw	228
  7196  000B2A                     u8147:
  7197  000B2A  2EE8               	decfsz	wreg,f,c
  7198  000B2C  D7FE               	bra	u8147
  7199  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7200  000B30  D7FC               	bra	u8147
  7201  000B32  F000               	nop	
  7202  000B34  0100               	movlb	0	; () banked
  7203  000B36  2BCB               	incf	UI@i_411& (0+255),f,b
  7204  000B38  D7EF               	goto	l7905
  7205  000B3A                     l7913:
  7206                           
  7207                           ; BSR set to: 0
  7208  000B3A  0100               	movlb	0	; () banked
  7209  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7210  000B3E  0100               	movlb	0	; () banked
  7211  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7212  000B42  B4D8               	btfsc	status,2,c
  7213  000B44  0012               	return	
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7217                           
  7218                           ; BSR set to: 0
  7219                           
  7220                           ; BSR set to: 0
  7221  000B46  0E01               	movlw	1
  7222  000B48  EC24  F026         	call	_lcdInst
  7223  000B4C  0E68               	movlw	104
  7224  000B4E  0100               	movlb	0	; () banked
  7225  000B50  6FC4               	movwf	??_UI& (0+255),b
  7226  000B52  0EE4               	movlw	228
  7227  000B54                     u8157:
  7228  000B54  2EE8               	decfsz	wreg,f,c
  7229  000B56  D7FE               	bra	u8157
  7230  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7231  000B5A  D7FC               	bra	u8157
  7232  000B5C  F000               	nop	
  7233                           
  7234                           ;UI.c: 122: lcdInst(0b10000000);;
  7235  000B5E  0E80               	movlw	128
  7236  000B60  EC24  F026         	call	_lcdInst
  7237                           
  7238                           ;UI.c: 123: printf("START:");
  7239  000B64  0EC4               	movlw	low STR_7
  7240  000B66  0100               	movlb	0	; () banked
  7241  000B68  6F8E               	movwf	printf@f& (0+255),b
  7242  000B6A  0EFF               	movlw	high STR_7
  7243  000B6C  0100               	movlb	0	; () banked
  7244  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7245  000B70  ECB8  F008         	call	_printf	;wreg free
  7246                           
  7247                           ;UI.c: 124: lcdInst(0b11000000);;
  7248  000B74  0EC0               	movlw	192
  7249  000B76  EC24  F026         	call	_lcdInst
  7250                           
  7251                           ;UI.c: 125: char month[] = "MMM";
  7252  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7253  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7254  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7255  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7256                           
  7257                           ;UI.c: 126: switch(log_startTime[5]){
  7258  000B8A  D0C3               	goto	l7957
  7259  000B8C                     l7929:
  7260                           
  7261                           ;UI.c: 128: strcpy(month, "JAN");
  7262  000B8C  0ED6               	movlw	low UI@month
  7263  000B8E  0100               	movlb	0	; () banked
  7264  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7265  000B92  0E00               	movlw	high UI@month
  7266  000B94  0100               	movlb	0	; () banked
  7267  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7268  000B98  0EDB               	movlw	low STR_8
  7269  000B9A  0100               	movlb	0	; () banked
  7270  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7271  000B9E  0EFF               	movlw	high STR_8
  7272  000BA0  0100               	movlb	0	; () banked
  7273  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7274  000BA4  EC90  F023         	call	_strcpy	;wreg free
  7275                           
  7276                           ;UI.c: 129: break;
  7277  000BA8  D0E6               	goto	l7959
  7278  000BAA                     l7931:
  7279                           
  7280                           ;UI.c: 131: strcpy(month, "FEB");
  7281  000BAA  0ED6               	movlw	low UI@month
  7282  000BAC  0100               	movlb	0	; () banked
  7283  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7284  000BB0  0E00               	movlw	high UI@month
  7285  000BB2  0100               	movlb	0	; () banked
  7286  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7287  000BB6  0ECB               	movlw	low STR_9
  7288  000BB8  0100               	movlb	0	; () banked
  7289  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7290  000BBC  0EFF               	movlw	high STR_9
  7291  000BBE  0100               	movlb	0	; () banked
  7292  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7293  000BC2  EC90  F023         	call	_strcpy	;wreg free
  7294                           
  7295                           ;UI.c: 132: break;
  7296  000BC6  D0D7               	goto	l7959
  7297  000BC8                     l7933:
  7298                           
  7299                           ;UI.c: 134: strcpy(month, "MAR");
  7300  000BC8  0ED6               	movlw	low UI@month
  7301  000BCA  0100               	movlb	0	; () banked
  7302  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7303  000BCE  0E00               	movlw	high UI@month
  7304  000BD0  0100               	movlb	0	; () banked
  7305  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7306  000BD4  0EE7               	movlw	low STR_10
  7307  000BD6  0100               	movlb	0	; () banked
  7308  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7309  000BDA  0EFF               	movlw	high STR_10
  7310  000BDC  0100               	movlb	0	; () banked
  7311  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7312  000BE0  EC90  F023         	call	_strcpy	;wreg free
  7313                           
  7314                           ;UI.c: 135: break;
  7315  000BE4  D0C8               	goto	l7959
  7316  000BE6                     l7935:
  7317                           
  7318                           ;UI.c: 137: strcpy(month, "APR");
  7319  000BE6  0ED6               	movlw	low UI@month
  7320  000BE8  0100               	movlb	0	; () banked
  7321  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7322  000BEC  0E00               	movlw	high UI@month
  7323  000BEE  0100               	movlb	0	; () banked
  7324  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7325  000BF2  0EEB               	movlw	low STR_11
  7326  000BF4  0100               	movlb	0	; () banked
  7327  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7328  000BF8  0EFF               	movlw	high STR_11
  7329  000BFA  0100               	movlb	0	; () banked
  7330  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7331  000BFE  EC90  F023         	call	_strcpy	;wreg free
  7332                           
  7333                           ;UI.c: 138: break;
  7334  000C02  D0B9               	goto	l7959
  7335  000C04                     l7937:
  7336                           
  7337                           ;UI.c: 140: strcpy(month, "MAY");
  7338  000C04  0ED6               	movlw	low UI@month
  7339  000C06  0100               	movlb	0	; () banked
  7340  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7341  000C0A  0E00               	movlw	high UI@month
  7342  000C0C  0100               	movlb	0	; () banked
  7343  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7344  000C10  0EFB               	movlw	low STR_12
  7345  000C12  0100               	movlb	0	; () banked
  7346  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7347  000C16  0EFF               	movlw	high STR_12
  7348  000C18  0100               	movlb	0	; () banked
  7349  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7350  000C1C  EC90  F023         	call	_strcpy	;wreg free
  7351                           
  7352                           ;UI.c: 141: break;
  7353  000C20  D0AA               	goto	l7959
  7354  000C22                     l7939:
  7355                           
  7356                           ;UI.c: 143: strcpy(month, "JUN");
  7357  000C22  0ED6               	movlw	low UI@month
  7358  000C24  0100               	movlb	0	; () banked
  7359  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7360  000C28  0E00               	movlw	high UI@month
  7361  000C2A  0100               	movlb	0	; () banked
  7362  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7363  000C2E  0EDF               	movlw	low STR_13
  7364  000C30  0100               	movlb	0	; () banked
  7365  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7366  000C34  0EFF               	movlw	high STR_13
  7367  000C36  0100               	movlb	0	; () banked
  7368  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7369  000C3A  EC90  F023         	call	_strcpy	;wreg free
  7370                           
  7371                           ;UI.c: 144: break;
  7372  000C3E  D09B               	goto	l7959
  7373  000C40                     l7941:
  7374                           
  7375                           ;UI.c: 146: strcpy(month, "JUL");
  7376  000C40  0ED6               	movlw	low UI@month
  7377  000C42  0100               	movlb	0	; () banked
  7378  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7379  000C46  0E00               	movlw	high UI@month
  7380  000C48  0100               	movlb	0	; () banked
  7381  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7382  000C4C  0ED7               	movlw	low STR_14
  7383  000C4E  0100               	movlb	0	; () banked
  7384  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7385  000C52  0EFF               	movlw	high STR_14
  7386  000C54  0100               	movlb	0	; () banked
  7387  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7388  000C58  EC90  F023         	call	_strcpy	;wreg free
  7389                           
  7390                           ;UI.c: 147: break;
  7391  000C5C  D08C               	goto	l7959
  7392  000C5E                     l7943:
  7393                           
  7394                           ;UI.c: 149: strcpy(month, "AUG");
  7395  000C5E  0ED6               	movlw	low UI@month
  7396  000C60  0100               	movlb	0	; () banked
  7397  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7398  000C64  0E00               	movlw	high UI@month
  7399  000C66  0100               	movlb	0	; () banked
  7400  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7401  000C6A  0ED3               	movlw	low STR_15
  7402  000C6C  0100               	movlb	0	; () banked
  7403  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7404  000C70  0EFF               	movlw	high STR_15
  7405  000C72  0100               	movlb	0	; () banked
  7406  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7407  000C76  EC90  F023         	call	_strcpy	;wreg free
  7408                           
  7409                           ;UI.c: 150: break;
  7410  000C7A  D07D               	goto	l7959
  7411  000C7C                     l7945:
  7412                           
  7413                           ;UI.c: 152: strcpy(month, "SEP");
  7414  000C7C  0ED6               	movlw	low UI@month
  7415  000C7E  0100               	movlb	0	; () banked
  7416  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7417  000C82  0E00               	movlw	high UI@month
  7418  000C84  0100               	movlb	0	; () banked
  7419  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7420  000C88  0EE3               	movlw	low STR_16
  7421  000C8A  0100               	movlb	0	; () banked
  7422  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7423  000C8E  0EFF               	movlw	high STR_16
  7424  000C90  0100               	movlb	0	; () banked
  7425  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7426  000C94  EC90  F023         	call	_strcpy	;wreg free
  7427                           
  7428                           ;UI.c: 153: break;
  7429  000C98  D06E               	goto	l7959
  7430  000C9A                     l7947:
  7431                           
  7432                           ;UI.c: 155: strcpy(month, "OCT");
  7433  000C9A  0ED6               	movlw	low UI@month
  7434  000C9C  0100               	movlb	0	; () banked
  7435  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7436  000CA0  0E00               	movlw	high UI@month
  7437  000CA2  0100               	movlb	0	; () banked
  7438  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7439  000CA6  0EF3               	movlw	low STR_17
  7440  000CA8  0100               	movlb	0	; () banked
  7441  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7442  000CAC  0EFF               	movlw	high STR_17
  7443  000CAE  0100               	movlb	0	; () banked
  7444  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7445  000CB2  EC90  F023         	call	_strcpy	;wreg free
  7446                           
  7447                           ;UI.c: 156: break;
  7448  000CB6  D05F               	goto	l7959
  7449  000CB8                     l7949:
  7450                           
  7451                           ;UI.c: 158: strcpy(month, "NOV");
  7452  000CB8  0ED6               	movlw	low UI@month
  7453  000CBA  0100               	movlb	0	; () banked
  7454  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7455  000CBE  0E00               	movlw	high UI@month
  7456  000CC0  0100               	movlb	0	; () banked
  7457  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7458  000CC4  0EF7               	movlw	low STR_18
  7459  000CC6  0100               	movlb	0	; () banked
  7460  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7461  000CCA  0EFF               	movlw	high STR_18
  7462  000CCC  0100               	movlb	0	; () banked
  7463  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7464  000CD0  EC90  F023         	call	_strcpy	;wreg free
  7465                           
  7466                           ;UI.c: 159: break;
  7467  000CD4  D050               	goto	l7959
  7468  000CD6                     l7951:
  7469                           
  7470                           ;UI.c: 161: strcpy(month, "DEC");
  7471  000CD6  0ED6               	movlw	low UI@month
  7472  000CD8  0100               	movlb	0	; () banked
  7473  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7474  000CDC  0E00               	movlw	high UI@month
  7475  000CDE  0100               	movlb	0	; () banked
  7476  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7477  000CE2  0ECF               	movlw	low STR_19
  7478  000CE4  0100               	movlb	0	; () banked
  7479  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7480  000CE8  0EFF               	movlw	high STR_19
  7481  000CEA  0100               	movlb	0	; () banked
  7482  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7483  000CEE  EC90  F023         	call	_strcpy	;wreg free
  7484                           
  7485                           ;UI.c: 162: break;
  7486  000CF2  D041               	goto	l7959
  7487  000CF4                     l7953:
  7488                           
  7489                           ;UI.c: 164: strcpy(month, "ERR");
  7490  000CF4  0ED6               	movlw	low UI@month
  7491  000CF6  0100               	movlb	0	; () banked
  7492  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7493  000CFA  0E00               	movlw	high UI@month
  7494  000CFC  0100               	movlb	0	; () banked
  7495  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7496  000D00  0EEF               	movlw	low STR_20
  7497  000D02  0100               	movlb	0	; () banked
  7498  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7499  000D06  0EFF               	movlw	high STR_20
  7500  000D08  0100               	movlb	0	; () banked
  7501  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7502  000D0C  EC90  F023         	call	_strcpy	;wreg free
  7503                           
  7504                           ;UI.c: 166: }
  7505                           
  7506                           ;UI.c: 165: break;
  7507  000D10  D032               	goto	l7959
  7508  000D12                     l7957:
  7509  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7510  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7511  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7512                           
  7513                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7514                           ; Switch size 1, requested type "space"
  7515                           ; Number of cases is 1, Range of values is 0 to 0
  7516                           ; switch strategies available:
  7517                           ; Name         Instructions Cycles
  7518                           ; simple_byte            4     3 (average)
  7519                           ;	Chosen strategy is simple_byte
  7520  000D1E  0100               	movlb	0	; () banked
  7521  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7522  000D22  0A00               	xorlw	0	; case 0
  7523  000D24  A4D8               	btfss	status,2,c
  7524  000D26  D7E6               	goto	l7953
  7525                           
  7526                           ; BSR set to: 0
  7527                           ; Switch size 1, requested type "space"
  7528                           ; Number of cases is 12, Range of values is 1 to 12
  7529                           ; switch strategies available:
  7530                           ; Name         Instructions Cycles
  7531                           ; simple_byte           37    19 (average)
  7532                           ;	Chosen strategy is simple_byte
  7533  000D28  0100               	movlb	0	; () banked
  7534  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7535  000D2C  0A01               	xorlw	1	; case 1
  7536  000D2E  B4D8               	btfsc	status,2,c
  7537  000D30  D72D               	goto	l7929
  7538  000D32  0A03               	xorlw	3	; case 2
  7539  000D34  B4D8               	btfsc	status,2,c
  7540  000D36  D739               	goto	l7931
  7541  000D38  0A01               	xorlw	1	; case 3
  7542  000D3A  B4D8               	btfsc	status,2,c
  7543  000D3C  D745               	goto	l7933
  7544  000D3E  0A07               	xorlw	7	; case 4
  7545  000D40  B4D8               	btfsc	status,2,c
  7546  000D42  D751               	goto	l7935
  7547  000D44  0A01               	xorlw	1	; case 5
  7548  000D46  B4D8               	btfsc	status,2,c
  7549  000D48  D75D               	goto	l7937
  7550  000D4A  0A03               	xorlw	3	; case 6
  7551  000D4C  B4D8               	btfsc	status,2,c
  7552  000D4E  D769               	goto	l7939
  7553  000D50  0A01               	xorlw	1	; case 7
  7554  000D52  B4D8               	btfsc	status,2,c
  7555  000D54  D775               	goto	l7941
  7556  000D56  0A0F               	xorlw	15	; case 8
  7557  000D58  B4D8               	btfsc	status,2,c
  7558  000D5A  D781               	goto	l7943
  7559  000D5C  0A01               	xorlw	1	; case 9
  7560  000D5E  B4D8               	btfsc	status,2,c
  7561  000D60  D78D               	goto	l7945
  7562  000D62  0A03               	xorlw	3	; case 10
  7563  000D64  B4D8               	btfsc	status,2,c
  7564  000D66  D799               	goto	l7947
  7565  000D68  0A01               	xorlw	1	; case 11
  7566  000D6A  B4D8               	btfsc	status,2,c
  7567  000D6C  D7A5               	goto	l7949
  7568  000D6E  0A07               	xorlw	7	; case 12
  7569  000D70  B4D8               	btfsc	status,2,c
  7570  000D72  D7B1               	goto	l7951
  7571  000D74  D7BF               	goto	l7953
  7572  000D76                     l7959:
  7573                           
  7574                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7575  000D76  0E0A               	movlw	low STR_21
  7576  000D78  0100               	movlb	0	; () banked
  7577  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7578  000D7C  0EFB               	movlw	high STR_21
  7579  000D7E  0100               	movlb	0	; () banked
  7580  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7581  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7582  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7583  000D8A  0ED6               	movlw	low UI@month
  7584  000D8C  0100               	movlb	0	; () banked
  7585  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7586  000D90  0E00               	movlw	high UI@month
  7587  000D92  0100               	movlb	0	; () banked
  7588  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7589  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7590  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7591  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7592  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7593  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7594  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7595  000DAE  ECB8  F008         	call	_printf	;wreg free
  7596                           
  7597                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7598  000DB2  0E00               	movlw	0
  7599  000DB4  0100               	movlb	0	; () banked
  7600  000DB6  6FCC               	movwf	UI@i_429& (0+255),b
  7601  000DB8                     l7963:
  7602                           
  7603                           ; BSR set to: 0
  7604  000DB8  0E63               	movlw	99
  7605  000DBA  0100               	movlb	0	; () banked
  7606  000DBC  65CC               	cpfsgt	UI@i_429& (0+255),b
  7607  000DBE  D001               	goto	l7967
  7608  000DC0  D00C               	goto	l7971
  7609  000DC2                     l7967:
  7610                           
  7611                           ; BSR set to: 0
  7612  000DC2  0E68               	movlw	104
  7613  000DC4  0100               	movlb	0	; () banked
  7614  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7615  000DC8  0EE4               	movlw	228
  7616  000DCA                     u8167:
  7617  000DCA  2EE8               	decfsz	wreg,f,c
  7618  000DCC  D7FE               	bra	u8167
  7619  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7620  000DD0  D7FC               	bra	u8167
  7621  000DD2  F000               	nop	
  7622  000DD4  0100               	movlb	0	; () banked
  7623  000DD6  2BCC               	incf	UI@i_429& (0+255),f,b
  7624  000DD8  D7EF               	goto	l7963
  7625  000DDA                     l7971:
  7626                           
  7627                           ; BSR set to: 0
  7628  000DDA  0100               	movlb	0	; () banked
  7629  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7630  000DDE  0100               	movlb	0	; () banked
  7631  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7632  000DE2  B4D8               	btfsc	status,2,c
  7633  000DE4  0012               	return	
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7637                           
  7638                           ; BSR set to: 0
  7639                           
  7640                           ; BSR set to: 0
  7641  000DE6  0E00               	movlw	0
  7642  000DE8  0100               	movlb	0	; () banked
  7643  000DEA  6FCD               	movwf	UI@i_430& (0+255),b
  7644  000DEC                     l7977:
  7645                           
  7646                           ; BSR set to: 0
  7647  000DEC  0E63               	movlw	99
  7648  000DEE  0100               	movlb	0	; () banked
  7649  000DF0  65CD               	cpfsgt	UI@i_430& (0+255),b
  7650  000DF2  D001               	goto	l7981
  7651  000DF4  D00C               	goto	l7985
  7652  000DF6                     l7981:
  7653                           
  7654                           ; BSR set to: 0
  7655  000DF6  0E68               	movlw	104
  7656  000DF8  0100               	movlb	0	; () banked
  7657  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7658  000DFC  0EE4               	movlw	228
  7659  000DFE                     u8177:
  7660  000DFE  2EE8               	decfsz	wreg,f,c
  7661  000E00  D7FE               	bra	u8177
  7662  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7663  000E04  D7FC               	bra	u8177
  7664  000E06  F000               	nop	
  7665  000E08  0100               	movlb	0	; () banked
  7666  000E0A  2BCD               	incf	UI@i_430& (0+255),f,b
  7667  000E0C  D7EF               	goto	l7977
  7668  000E0E                     l7985:
  7669                           
  7670                           ; BSR set to: 0
  7671  000E0E  0100               	movlb	0	; () banked
  7672  000E10  51F6               	movf	_logstate& (0+255),w,b
  7673  000E12  0100               	movlb	0	; () banked
  7674  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7675  000E16  B4D8               	btfsc	status,2,c
  7676  000E18  0012               	return	
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7680                           
  7681                           ; BSR set to: 0
  7682                           
  7683                           ; BSR set to: 0
  7684  000E1A  0E01               	movlw	1
  7685  000E1C  EC24  F026         	call	_lcdInst
  7686  000E20  0E68               	movlw	104
  7687  000E22  0100               	movlb	0	; () banked
  7688  000E24  6FC4               	movwf	??_UI& (0+255),b
  7689  000E26  0EE4               	movlw	228
  7690  000E28                     u8187:
  7691  000E28  2EE8               	decfsz	wreg,f,c
  7692  000E2A  D7FE               	bra	u8187
  7693  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7694  000E2E  D7FC               	bra	u8187
  7695  000E30  F000               	nop	
  7696                           
  7697                           ;UI.c: 173: lcdInst(0b10000000);;
  7698  000E32  0E80               	movlw	128
  7699  000E34  EC24  F026         	call	_lcdInst
  7700                           
  7701                           ;UI.c: 174: printf("DURATION:");
  7702  000E38  0E9B               	movlw	low STR_22
  7703  000E3A  0100               	movlb	0	; () banked
  7704  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7705  000E3E  0EFF               	movlw	high STR_22
  7706  000E40  0100               	movlb	0	; () banked
  7707  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7708  000E44  ECB8  F008         	call	_printf	;wreg free
  7709                           
  7710                           ;UI.c: 175: lcdInst(0b11000000);;
  7711  000E48  0EC0               	movlw	192
  7712  000E4A  EC24  F026         	call	_lcdInst
  7713                           
  7714                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7715  000E4E  0E0E               	movlw	14
  7716  000E50  0100               	movlb	0	; () banked
  7717  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7718  000E54  0E10               	movlw	16
  7719  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7720  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7721  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7722  000E60  ECA8  F01E         	call	___awmod	;wreg free
  7723  000E64  C080  F0C6         	movff	?___awmod,_UI$2316
  7724  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2316+1
  7725                           
  7726                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7727  000E6C  0E19               	movlw	low STR_23
  7728  000E6E  0100               	movlb	0	; () banked
  7729  000E70  6F8E               	movwf	printf@f& (0+255),b
  7730  000E72  0EFF               	movlw	high STR_23
  7731  000E74  0100               	movlb	0	; () banked
  7732  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7733  000E78  0E0E               	movlw	14
  7734  000E7A  0100               	movlb	0	; () banked
  7735  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7736  000E7E  0E10               	movlw	16
  7737  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7738  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7739  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7740  000E8A  ECA8  F01E         	call	___awmod	;wreg free
  7741  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7742  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7743  000E96  0E00               	movlw	0
  7744  000E98  0100               	movlb	0	; () banked
  7745  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7746  000E9C  0E3C               	movlw	60
  7747  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7748  000EA0  EC96  F01D         	call	___awdiv	;wreg free
  7749  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7750  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7751  000EAC  C0C6  F080         	movff	_UI$2316,___awmod@dividend
  7752  000EB0  C0C7  F081         	movff	_UI$2316+1,___awmod@dividend+1
  7753  000EB4  0E00               	movlw	0
  7754  000EB6  0100               	movlb	0	; () banked
  7755  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7756  000EBA  0E3C               	movlw	60
  7757  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7758  000EBE  ECA8  F01E         	call	___awmod	;wreg free
  7759  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7760  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7761  000ECA  ECB8  F008         	call	_printf	;wreg free
  7762                           
  7763                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7764  000ECE  0E00               	movlw	0
  7765  000ED0  0100               	movlb	0	; () banked
  7766  000ED2  6FCE               	movwf	UI@i_433& (0+255),b
  7767  000ED4                     l8005:
  7768                           
  7769                           ; BSR set to: 0
  7770  000ED4  0E63               	movlw	99
  7771  000ED6  0100               	movlb	0	; () banked
  7772  000ED8  65CE               	cpfsgt	UI@i_433& (0+255),b
  7773  000EDA  D001               	goto	l8009
  7774  000EDC  D00C               	goto	l8013
  7775  000EDE                     l8009:
  7776                           
  7777                           ; BSR set to: 0
  7778  000EDE  0E68               	movlw	104
  7779  000EE0  0100               	movlb	0	; () banked
  7780  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7781  000EE4  0EE4               	movlw	228
  7782  000EE6                     u8197:
  7783  000EE6  2EE8               	decfsz	wreg,f,c
  7784  000EE8  D7FE               	bra	u8197
  7785  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7786  000EEC  D7FC               	bra	u8197
  7787  000EEE  F000               	nop	
  7788  000EF0  0100               	movlb	0	; () banked
  7789  000EF2  2BCE               	incf	UI@i_433& (0+255),f,b
  7790  000EF4  D7EF               	goto	l8005
  7791  000EF6                     l8013:
  7792                           
  7793                           ; BSR set to: 0
  7794  000EF6  0100               	movlb	0	; () banked
  7795  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7796  000EFA  0100               	movlb	0	; () banked
  7797  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7798  000EFE  B4D8               	btfsc	status,2,c
  7799  000F00  0012               	return	
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7803                           
  7804                           ; BSR set to: 0
  7805                           
  7806                           ; BSR set to: 0
  7807  000F02  0E00               	movlw	0
  7808  000F04  0100               	movlb	0	; () banked
  7809  000F06  6FCF               	movwf	UI@i_434& (0+255),b
  7810  000F08                     l8019:
  7811                           
  7812                           ; BSR set to: 0
  7813  000F08  0E63               	movlw	99
  7814  000F0A  0100               	movlb	0	; () banked
  7815  000F0C  65CF               	cpfsgt	UI@i_434& (0+255),b
  7816  000F0E  D001               	goto	l8023
  7817  000F10  D00C               	goto	l8027
  7818  000F12                     l8023:
  7819                           
  7820                           ; BSR set to: 0
  7821  000F12  0E68               	movlw	104
  7822  000F14  0100               	movlb	0	; () banked
  7823  000F16  6FC4               	movwf	??_UI& (0+255),b
  7824  000F18  0EE4               	movlw	228
  7825  000F1A                     u8207:
  7826  000F1A  2EE8               	decfsz	wreg,f,c
  7827  000F1C  D7FE               	bra	u8207
  7828  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7829  000F20  D7FC               	bra	u8207
  7830  000F22  F000               	nop	
  7831  000F24  0100               	movlb	0	; () banked
  7832  000F26  2BCF               	incf	UI@i_434& (0+255),f,b
  7833  000F28  D7EF               	goto	l8019
  7834  000F2A                     l8027:
  7835                           
  7836                           ; BSR set to: 0
  7837  000F2A  0100               	movlb	0	; () banked
  7838  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7839  000F2E  0100               	movlb	0	; () banked
  7840  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7841  000F32  B4D8               	btfsc	status,2,c
  7842  000F34  0012               	return	
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7846                           
  7847                           ; BSR set to: 0
  7848                           
  7849                           ; BSR set to: 0
  7850  000F36  0E01               	movlw	1
  7851  000F38  EC24  F026         	call	_lcdInst
  7852  000F3C  0E68               	movlw	104
  7853  000F3E  0100               	movlb	0	; () banked
  7854  000F40  6FC4               	movwf	??_UI& (0+255),b
  7855  000F42  0EE4               	movlw	228
  7856  000F44                     u8217:
  7857  000F44  2EE8               	decfsz	wreg,f,c
  7858  000F46  D7FE               	bra	u8217
  7859  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7860  000F4A  D7FC               	bra	u8217
  7861  000F4C  F000               	nop	
  7862                           
  7863                           ;UI.c: 182: lcdInst(0b10000000);;
  7864  000F4E  0E80               	movlw	128
  7865  000F50  EC24  F026         	call	_lcdInst
  7866                           
  7867                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7868  000F54  0E3C               	movlw	low STR_24
  7869  000F56  0100               	movlb	0	; () banked
  7870  000F58  6F8E               	movwf	printf@f& (0+255),b
  7871  000F5A  0EFD               	movlw	high STR_24
  7872  000F5C  0100               	movlb	0	; () banked
  7873  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7874  000F60  ECB8  F008         	call	_printf	;wreg free
  7875                           
  7876                           ;UI.c: 184: lcdInst(0b11000000);;
  7877  000F64  0EC0               	movlw	192
  7878  000F66  EC24  F026         	call	_lcdInst
  7879                           
  7880                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7881  000F6A  0E19               	movlw	low STR_25
  7882  000F6C  0100               	movlb	0	; () banked
  7883  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7884  000F70  0EFE               	movlw	high STR_25
  7885  000F72  0100               	movlb	0	; () banked
  7886  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7887  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7888  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7889  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7890  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7891  000F86  ECB8  F008         	call	_printf	;wreg free
  7892                           
  7893                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7894  000F8A  0E00               	movlw	0
  7895  000F8C  0100               	movlb	0	; () banked
  7896  000F8E  6FD0               	movwf	UI@i_437& (0+255),b
  7897  000F90                     l8045:
  7898                           
  7899                           ; BSR set to: 0
  7900  000F90  0E63               	movlw	99
  7901  000F92  0100               	movlb	0	; () banked
  7902  000F94  65D0               	cpfsgt	UI@i_437& (0+255),b
  7903  000F96  D001               	goto	l8049
  7904  000F98  D00C               	goto	l8053
  7905  000F9A                     l8049:
  7906                           
  7907                           ; BSR set to: 0
  7908  000F9A  0E68               	movlw	104
  7909  000F9C  0100               	movlb	0	; () banked
  7910  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7911  000FA0  0EE4               	movlw	228
  7912  000FA2                     u8227:
  7913  000FA2  2EE8               	decfsz	wreg,f,c
  7914  000FA4  D7FE               	bra	u8227
  7915  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7916  000FA8  D7FC               	bra	u8227
  7917  000FAA  F000               	nop	
  7918  000FAC  0100               	movlb	0	; () banked
  7919  000FAE  2BD0               	incf	UI@i_437& (0+255),f,b
  7920  000FB0  D7EF               	goto	l8045
  7921  000FB2                     l8053:
  7922                           
  7923                           ; BSR set to: 0
  7924  000FB2  0100               	movlb	0	; () banked
  7925  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7926  000FB6  0100               	movlb	0	; () banked
  7927  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7928  000FBA  B4D8               	btfsc	status,2,c
  7929  000FBC  0012               	return	
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7933                           
  7934                           ; BSR set to: 0
  7935                           
  7936                           ; BSR set to: 0
  7937  000FBE  0E00               	movlw	0
  7938  000FC0  0100               	movlb	0	; () banked
  7939  000FC2  6FD1               	movwf	UI@i_438& (0+255),b
  7940  000FC4                     l8059:
  7941                           
  7942                           ; BSR set to: 0
  7943  000FC4  0E63               	movlw	99
  7944  000FC6  0100               	movlb	0	; () banked
  7945  000FC8  65D1               	cpfsgt	UI@i_438& (0+255),b
  7946  000FCA  D001               	goto	l8063
  7947  000FCC  D00C               	goto	l8067
  7948  000FCE                     l8063:
  7949                           
  7950                           ; BSR set to: 0
  7951  000FCE  0E68               	movlw	104
  7952  000FD0  0100               	movlb	0	; () banked
  7953  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7954  000FD4  0EE4               	movlw	228
  7955  000FD6                     u8237:
  7956  000FD6  2EE8               	decfsz	wreg,f,c
  7957  000FD8  D7FE               	bra	u8237
  7958  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7959  000FDC  D7FC               	bra	u8237
  7960  000FDE  F000               	nop	
  7961  000FE0  0100               	movlb	0	; () banked
  7962  000FE2  2BD1               	incf	UI@i_438& (0+255),f,b
  7963  000FE4  D7EF               	goto	l8059
  7964  000FE6                     l8067:
  7965                           
  7966                           ; BSR set to: 0
  7967  000FE6  0100               	movlb	0	; () banked
  7968  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7969  000FEA  0100               	movlb	0	; () banked
  7970  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7971  000FEE  B4D8               	btfsc	status,2,c
  7972  000FF0  0012               	return	
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7976                           
  7977                           ; BSR set to: 0
  7978                           
  7979                           ; BSR set to: 0
  7980  000FF2  0E01               	movlw	1
  7981  000FF4  EC24  F026         	call	_lcdInst
  7982  000FF8  0E68               	movlw	104
  7983  000FFA  0100               	movlb	0	; () banked
  7984  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7985  000FFE  0EE4               	movlw	228
  7986  001000                     u8247:
  7987  001000  2EE8               	decfsz	wreg,f,c
  7988  001002  D7FE               	bra	u8247
  7989  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7990  001006  D7FC               	bra	u8247
  7991  001008  F000               	nop	
  7992                           
  7993                           ;UI.c: 191: lcdInst(0b10000000);;
  7994  00100A  0E80               	movlw	128
  7995  00100C  EC24  F026         	call	_lcdInst
  7996                           
  7997                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7998  001010  0E4D               	movlw	low STR_26
  7999  001012  0100               	movlb	0	; () banked
  8000  001014  6F8E               	movwf	printf@f& (0+255),b
  8001  001016  0EFD               	movlw	high STR_26
  8002  001018  0100               	movlb	0	; () banked
  8003  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8004  00101C  ECB8  F008         	call	_printf	;wreg free
  8005                           
  8006                           ;UI.c: 193: lcdInst(0b11000000);;
  8007  001020  0EC0               	movlw	192
  8008  001022  EC24  F026         	call	_lcdInst
  8009                           
  8010                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8011  001026  0E08               	movlw	low STR_27
  8012  001028  0100               	movlb	0	; () banked
  8013  00102A  6F8E               	movwf	printf@f& (0+255),b
  8014  00102C  0EFE               	movlw	high STR_27
  8015  00102E  0100               	movlb	0	; () banked
  8016  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8017  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8018  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8019  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8020  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8021  001042  ECB8  F008         	call	_printf	;wreg free
  8022                           
  8023                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8024  001046  0E00               	movlw	0
  8025  001048  0100               	movlb	0	; () banked
  8026  00104A  6FD2               	movwf	UI@i_441& (0+255),b
  8027  00104C                     l8085:
  8028                           
  8029                           ; BSR set to: 0
  8030  00104C  0E63               	movlw	99
  8031  00104E  0100               	movlb	0	; () banked
  8032  001050  65D2               	cpfsgt	UI@i_441& (0+255),b
  8033  001052  D001               	goto	l8089
  8034  001054  D00C               	goto	l8093
  8035  001056                     l8089:
  8036                           
  8037                           ; BSR set to: 0
  8038  001056  0E68               	movlw	104
  8039  001058  0100               	movlb	0	; () banked
  8040  00105A  6FC4               	movwf	??_UI& (0+255),b
  8041  00105C  0EE4               	movlw	228
  8042  00105E                     u8257:
  8043  00105E  2EE8               	decfsz	wreg,f,c
  8044  001060  D7FE               	bra	u8257
  8045  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8046  001064  D7FC               	bra	u8257
  8047  001066  F000               	nop	
  8048  001068  0100               	movlb	0	; () banked
  8049  00106A  2BD2               	incf	UI@i_441& (0+255),f,b
  8050  00106C  D7EF               	goto	l8085
  8051  00106E                     l8093:
  8052                           
  8053                           ; BSR set to: 0
  8054  00106E  0100               	movlb	0	; () banked
  8055  001070  51F6               	movf	_logstate& (0+255),w,b
  8056  001072  0100               	movlb	0	; () banked
  8057  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8058  001076  B4D8               	btfsc	status,2,c
  8059  001078  0012               	return	
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8063                           
  8064                           ; BSR set to: 0
  8065                           
  8066                           ; BSR set to: 0
  8067  00107A  0E00               	movlw	0
  8068  00107C  0100               	movlb	0	; () banked
  8069  00107E  6FD3               	movwf	UI@i_442& (0+255),b
  8070  001080                     l8099:
  8071                           
  8072                           ; BSR set to: 0
  8073  001080  0E63               	movlw	99
  8074  001082  0100               	movlb	0	; () banked
  8075  001084  65D3               	cpfsgt	UI@i_442& (0+255),b
  8076  001086  D001               	goto	l8103
  8077  001088  D00C               	goto	l8107
  8078  00108A                     l8103:
  8079                           
  8080                           ; BSR set to: 0
  8081  00108A  0E68               	movlw	104
  8082  00108C  0100               	movlb	0	; () banked
  8083  00108E  6FC4               	movwf	??_UI& (0+255),b
  8084  001090  0EE4               	movlw	228
  8085  001092                     u8267:
  8086  001092  2EE8               	decfsz	wreg,f,c
  8087  001094  D7FE               	bra	u8267
  8088  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8089  001098  D7FC               	bra	u8267
  8090  00109A  F000               	nop	
  8091  00109C  0100               	movlb	0	; () banked
  8092  00109E  2BD3               	incf	UI@i_442& (0+255),f,b
  8093  0010A0  D7EF               	goto	l8099
  8094  0010A2                     l8107:
  8095                           
  8096                           ; BSR set to: 0
  8097  0010A2  0100               	movlb	0	; () banked
  8098  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8099  0010A6  0100               	movlb	0	; () banked
  8100  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8101  0010AA  B4D8               	btfsc	status,2,c
  8102  0010AC  0012               	return	
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8106                           
  8107                           ; BSR set to: 0
  8108                           
  8109                           ; BSR set to: 0
  8110  0010AE  0E01               	movlw	1
  8111  0010B0  EC24  F026         	call	_lcdInst
  8112  0010B4  0E68               	movlw	104
  8113  0010B6  0100               	movlb	0	; () banked
  8114  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8115  0010BA  0EE4               	movlw	228
  8116  0010BC                     u8277:
  8117  0010BC  2EE8               	decfsz	wreg,f,c
  8118  0010BE  D7FE               	bra	u8277
  8119  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8120  0010C2  D7FC               	bra	u8277
  8121  0010C4  F000               	nop	
  8122                           
  8123                           ;UI.c: 200: lcdInst(0b10000000);;
  8124  0010C6  0E80               	movlw	128
  8125  0010C8  EC24  F026         	call	_lcdInst
  8126                           
  8127                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8128  0010CC  0E5E               	movlw	low STR_28
  8129  0010CE  0100               	movlb	0	; () banked
  8130  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8131  0010D2  0EFD               	movlw	high STR_28
  8132  0010D4  0100               	movlb	0	; () banked
  8133  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8134  0010D8  ECB8  F008         	call	_printf	;wreg free
  8135                           
  8136                           ;UI.c: 202: lcdInst(0b11000000);;
  8137  0010DC  0EC0               	movlw	192
  8138  0010DE  EC24  F026         	call	_lcdInst
  8139                           
  8140                           ;UI.c: 203: printf("%d", log_count_total);
  8141  0010E2  0E16               	movlw	low (STR_27+14)
  8142  0010E4  0100               	movlb	0	; () banked
  8143  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8144  0010E8  0EFE               	movlw	high (STR_27+14)
  8145  0010EA  0100               	movlb	0	; () banked
  8146  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8147  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8148  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8149  0010F6  ECB8  F008         	call	_printf	;wreg free
  8150                           
  8151                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8152  0010FA  0E00               	movlw	0
  8153  0010FC  0100               	movlb	0	; () banked
  8154  0010FE  6FD4               	movwf	UI@i_445& (0+255),b
  8155  001100                     l8125:
  8156                           
  8157                           ; BSR set to: 0
  8158  001100  0E63               	movlw	99
  8159  001102  0100               	movlb	0	; () banked
  8160  001104  65D4               	cpfsgt	UI@i_445& (0+255),b
  8161  001106  D001               	goto	l8129
  8162  001108  D00C               	goto	l8133
  8163  00110A                     l8129:
  8164                           
  8165                           ; BSR set to: 0
  8166  00110A  0E68               	movlw	104
  8167  00110C  0100               	movlb	0	; () banked
  8168  00110E  6FC4               	movwf	??_UI& (0+255),b
  8169  001110  0EE4               	movlw	228
  8170  001112                     u8287:
  8171  001112  2EE8               	decfsz	wreg,f,c
  8172  001114  D7FE               	bra	u8287
  8173  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8174  001118  D7FC               	bra	u8287
  8175  00111A  F000               	nop	
  8176  00111C  0100               	movlb	0	; () banked
  8177  00111E  2BD4               	incf	UI@i_445& (0+255),f,b
  8178  001120  D7EF               	goto	l8125
  8179  001122                     l8133:
  8180                           
  8181                           ; BSR set to: 0
  8182  001122  0100               	movlb	0	; () banked
  8183  001124  51F6               	movf	_logstate& (0+255),w,b
  8184  001126  0100               	movlb	0	; () banked
  8185  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8186  00112A  B4D8               	btfsc	status,2,c
  8187  00112C  0012               	return	
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8191                           
  8192                           ; BSR set to: 0
  8193                           
  8194                           ; BSR set to: 0
  8195  00112E  0E00               	movlw	0
  8196  001130  0100               	movlb	0	; () banked
  8197  001132  6FD5               	movwf	UI@i_446& (0+255),b
  8198  001134                     l8139:
  8199                           
  8200                           ; BSR set to: 0
  8201  001134  0E63               	movlw	99
  8202  001136  0100               	movlb	0	; () banked
  8203  001138  65D5               	cpfsgt	UI@i_446& (0+255),b
  8204  00113A  D001               	goto	l8143
  8205  00113C  D00C               	goto	l8147
  8206  00113E                     l8143:
  8207                           
  8208                           ; BSR set to: 0
  8209  00113E  0E68               	movlw	104
  8210  001140  0100               	movlb	0	; () banked
  8211  001142  6FC4               	movwf	??_UI& (0+255),b
  8212  001144  0EE4               	movlw	228
  8213  001146                     u8297:
  8214  001146  2EE8               	decfsz	wreg,f,c
  8215  001148  D7FE               	bra	u8297
  8216  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8217  00114C  D7FC               	bra	u8297
  8218  00114E  F000               	nop	
  8219  001150  0100               	movlb	0	; () banked
  8220  001152  2BD5               	incf	UI@i_446& (0+255),f,b
  8221  001154  D7EF               	goto	l8139
  8222  001156                     l8147:
  8223                           
  8224                           ; BSR set to: 0
  8225  001156  0100               	movlb	0	; () banked
  8226  001158  51F6               	movf	_logstate& (0+255),w,b
  8227  00115A  0100               	movlb	0	; () banked
  8228  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8229  00115E  B4D8               	btfsc	status,2,c
  8230  001160  0012               	return	
  8231  001162                     l8151:
  8232  001162  0100               	movlb	0	; () banked
  8233  001164  51F6               	movf	_logstate& (0+255),w,b
  8234  001166  0100               	movlb	0	; () banked
  8235  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8236  00116A  B4D8               	btfsc	status,2,c
  8237  00116C  0012               	return	
  8238  00116E  D44A               	goto	l7847
  8239  001170                     __end_of_UI:
  8240                           	opt stack 0
  8241                           tblptru	equ	0xFF8
  8242                           tblptrh	equ	0xFF7
  8243                           tblptrl	equ	0xFF6
  8244                           tablat	equ	0xFF5
  8245                           prodh	equ	0xFF4
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           intcon2	equ	0xFF1
  8249                           intcon3	equ	0xFF0
  8250                           postinc0	equ	0xFEE
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           fsr1l	equ	0xFE1
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261 ;; *************** function _printRTC *****************
  8262 ;; Defined at:
  8263 ;;		line 63 in file "RTC.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  i               2   66[BANK0 ] int 
  8268 ;;  INT_time       14   46[BANK0 ] int [7]
  8269 ;;  month           4   62[BANK0 ] unsigned char [4]
  8270 ;;  RTC_month       2   60[BANK0 ] int 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      void 
  8273 ;; Registers used:
  8274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:       25 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:   10
  8287 ;; This function calls:
  8288 ;;		_getRTC
  8289 ;;		_lcdInst
  8290 ;;		_printf
  8291 ;;		_strcpy
  8292 ;; This function is called by:
  8293 ;;		_UI
  8294 ;;		_change_state_to_menu_start
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text24
  8299  001F98                     __ptext24:
  8300                           	opt stack 0
  8301  001F98                     _printRTC:
  8302                           	opt stack 18
  8303                           
  8304                           ;RTC.c: 64: getRTC();
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;incstack = 0
  8308  001F98  EC3F  F01F         	call	_getRTC	;wreg free
  8309                           
  8310                           ;RTC.c: 65: char month[] = "MMM";
  8311  001F9C  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8312  001FA0  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8313  001FA4  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8314  001FA8  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8315                           
  8316                           ;RTC.c: 66: int INT_time[7];
  8317                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8318  001FAC  0E00               	movlw	0
  8319  001FAE  0100               	movlb	0	; () banked
  8320  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8321  001FB2  0E00               	movlw	0
  8322  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  8323                           
  8324                           ; BSR set to: 0
  8325  001FB6  0100               	movlb	0	; () banked
  8326  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8327  001FBA  D008               	goto	l6099
  8328  001FBC  0100               	movlb	0	; () banked
  8329  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8330  001FC0  E146               	bnz	l597
  8331  001FC2  0E07               	movlw	7
  8332  001FC4  0100               	movlb	0	; () banked
  8333  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  8334  001FC8  B0D8               	btfsc	status,0,c
  8335  001FCA  D041               	goto	l597
  8336  001FCC                     l6099:
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8340  001FCC  0E24               	movlw	low _time
  8341  001FCE  0100               	movlb	0	; () banked
  8342  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  8343  001FD2  6ED9               	movwf	fsr2l,c
  8344  001FD4  0E01               	movlw	high _time
  8345  001FD6  0100               	movlb	0	; () banked
  8346  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8347  001FDA  6EDA               	movwf	fsr2h,c
  8348  001FDC  50DF               	movf	indf2,w,c
  8349  001FDE  0100               	movlb	0	; () banked
  8350  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  8351  001FE2  0100               	movlb	0	; () banked
  8352  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  8353  001FE6  0E0F               	movlw	15
  8354  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  8355  001FEA  0E0F               	movlw	15
  8356  001FEC  0100               	movlb	0	; () banked
  8357  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  8358  001FF0  0100               	movlb	0	; () banked
  8359  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  8360  001FF4  0D0A               	mullw	10
  8361  001FF6  0E24               	movlw	low _time
  8362  001FF8  0100               	movlb	0	; () banked
  8363  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  8364  001FFC  6ED9               	movwf	fsr2l,c
  8365  001FFE  0E01               	movlw	high _time
  8366  002000  0100               	movlb	0	; () banked
  8367  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8368  002004  6EDA               	movwf	fsr2h,c
  8369  002006  50DF               	movf	indf2,w,c
  8370  002008  0B0F               	andlw	15
  8371  00200A  0100               	movlb	0	; () banked
  8372  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8373  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8374  002010  50F3               	movf	prodl,w,c
  8375  002012  0100               	movlb	0	; () banked
  8376  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8377  002016  50F4               	movf	prodh,w,c
  8378  002018  0100               	movlb	0	; () banked
  8379  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8380  00201C  90D8               	bcf	status,0,c
  8381  00201E  0100               	movlb	0	; () banked
  8382  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8383  002022  6ED9               	movwf	fsr2l,c
  8384  002024  0100               	movlb	0	; () banked
  8385  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8386  002028  6EDA               	movwf	fsr2h,c
  8387  00202A  0EAE               	movlw	low printRTC@INT_time
  8388  00202C  26D9               	addwf	fsr2l,f,c
  8389  00202E  0E00               	movlw	high printRTC@INT_time
  8390  002030  22DA               	addwfc	fsr2h,f,c
  8391  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8392  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8393                           
  8394                           ; BSR set to: 0
  8395  00203A  0100               	movlb	0	; () banked
  8396  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8397  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400  002040  0100               	movlb	0	; () banked
  8401  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8402  002044  D7C3               	goto	l6099
  8403  002046  0100               	movlb	0	; () banked
  8404  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8405  00204A  E101               	bnz	u4870
  8406  00204C  D7BA               	goto	L7
  8407  00204E                     u4870:
  8408  00204E                     l597:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;RTC.c: 69: }
  8412                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8413  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8414  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8415                           
  8416                           ;RTC.c: 71: switch(RTC_month){
  8417  002056  D0B4               	goto	l6131
  8418  002058                     l6105:
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;RTC.c: 73: strcpy(month, "JAN");
  8422  002058  0EBE               	movlw	low printRTC@month
  8423  00205A  0100               	movlb	0	; () banked
  8424  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8425  00205E  0E00               	movlw	high printRTC@month
  8426  002060  0100               	movlb	0	; () banked
  8427  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8428  002064  0EDB               	movlw	low STR_8
  8429  002066  0100               	movlb	0	; () banked
  8430  002068  6F82               	movwf	strcpy@from& (0+255),b
  8431  00206A  0EFF               	movlw	high STR_8
  8432  00206C  0100               	movlb	0	; () banked
  8433  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8434  002070  EC90  F023         	call	_strcpy	;wreg free
  8435                           
  8436                           ;RTC.c: 74: break;
  8437  002074  D0D4               	goto	l6133
  8438  002076                     l6107:
  8439                           
  8440                           ;RTC.c: 76: strcpy(month, "FEB");
  8441  002076  0EBE               	movlw	low printRTC@month
  8442  002078  0100               	movlb	0	; () banked
  8443  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8444  00207C  0E00               	movlw	high printRTC@month
  8445  00207E  0100               	movlb	0	; () banked
  8446  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8447  002082  0ECB               	movlw	low STR_9
  8448  002084  0100               	movlb	0	; () banked
  8449  002086  6F82               	movwf	strcpy@from& (0+255),b
  8450  002088  0EFF               	movlw	high STR_9
  8451  00208A  0100               	movlb	0	; () banked
  8452  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8453  00208E  EC90  F023         	call	_strcpy	;wreg free
  8454                           
  8455                           ;RTC.c: 77: break;
  8456  002092  D0C5               	goto	l6133
  8457  002094                     l6109:
  8458                           
  8459                           ;RTC.c: 79: strcpy(month, "MAR");
  8460  002094  0EBE               	movlw	low printRTC@month
  8461  002096  0100               	movlb	0	; () banked
  8462  002098  6F80               	movwf	strcpy@to& (0+255),b
  8463  00209A  0E00               	movlw	high printRTC@month
  8464  00209C  0100               	movlb	0	; () banked
  8465  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8466  0020A0  0EE7               	movlw	low STR_10
  8467  0020A2  0100               	movlb	0	; () banked
  8468  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8469  0020A6  0EFF               	movlw	high STR_10
  8470  0020A8  0100               	movlb	0	; () banked
  8471  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8472  0020AC  EC90  F023         	call	_strcpy	;wreg free
  8473                           
  8474                           ;RTC.c: 80: break;
  8475  0020B0  D0B6               	goto	l6133
  8476  0020B2                     l6111:
  8477                           
  8478                           ;RTC.c: 82: strcpy(month, "APR");
  8479  0020B2  0EBE               	movlw	low printRTC@month
  8480  0020B4  0100               	movlb	0	; () banked
  8481  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8482  0020B8  0E00               	movlw	high printRTC@month
  8483  0020BA  0100               	movlb	0	; () banked
  8484  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8485  0020BE  0EEB               	movlw	low STR_11
  8486  0020C0  0100               	movlb	0	; () banked
  8487  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8488  0020C4  0EFF               	movlw	high STR_11
  8489  0020C6  0100               	movlb	0	; () banked
  8490  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8491  0020CA  EC90  F023         	call	_strcpy	;wreg free
  8492                           
  8493                           ;RTC.c: 83: break;
  8494  0020CE  D0A7               	goto	l6133
  8495  0020D0                     l6113:
  8496                           
  8497                           ;RTC.c: 85: strcpy(month, "MAY");
  8498  0020D0  0EBE               	movlw	low printRTC@month
  8499  0020D2  0100               	movlb	0	; () banked
  8500  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8501  0020D6  0E00               	movlw	high printRTC@month
  8502  0020D8  0100               	movlb	0	; () banked
  8503  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8504  0020DC  0EFB               	movlw	low STR_12
  8505  0020DE  0100               	movlb	0	; () banked
  8506  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8507  0020E2  0EFF               	movlw	high STR_12
  8508  0020E4  0100               	movlb	0	; () banked
  8509  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8510  0020E8  EC90  F023         	call	_strcpy	;wreg free
  8511                           
  8512                           ;RTC.c: 86: break;
  8513  0020EC  D098               	goto	l6133
  8514  0020EE                     l6115:
  8515                           
  8516                           ;RTC.c: 88: strcpy(month, "JUN");
  8517  0020EE  0EBE               	movlw	low printRTC@month
  8518  0020F0  0100               	movlb	0	; () banked
  8519  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8520  0020F4  0E00               	movlw	high printRTC@month
  8521  0020F6  0100               	movlb	0	; () banked
  8522  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8523  0020FA  0EDF               	movlw	low STR_13
  8524  0020FC  0100               	movlb	0	; () banked
  8525  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8526  002100  0EFF               	movlw	high STR_13
  8527  002102  0100               	movlb	0	; () banked
  8528  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8529  002106  EC90  F023         	call	_strcpy	;wreg free
  8530                           
  8531                           ;RTC.c: 89: break;
  8532  00210A  D089               	goto	l6133
  8533  00210C                     l6117:
  8534                           
  8535                           ;RTC.c: 91: strcpy(month, "JUL");
  8536  00210C  0EBE               	movlw	low printRTC@month
  8537  00210E  0100               	movlb	0	; () banked
  8538  002110  6F80               	movwf	strcpy@to& (0+255),b
  8539  002112  0E00               	movlw	high printRTC@month
  8540  002114  0100               	movlb	0	; () banked
  8541  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8542  002118  0ED7               	movlw	low STR_14
  8543  00211A  0100               	movlb	0	; () banked
  8544  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8545  00211E  0EFF               	movlw	high STR_14
  8546  002120  0100               	movlb	0	; () banked
  8547  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8548  002124  EC90  F023         	call	_strcpy	;wreg free
  8549                           
  8550                           ;RTC.c: 92: break;
  8551  002128  D07A               	goto	l6133
  8552  00212A                     l6119:
  8553                           
  8554                           ;RTC.c: 94: strcpy(month, "AUG");
  8555  00212A  0EBE               	movlw	low printRTC@month
  8556  00212C  0100               	movlb	0	; () banked
  8557  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8558  002130  0E00               	movlw	high printRTC@month
  8559  002132  0100               	movlb	0	; () banked
  8560  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8561  002136  0ED3               	movlw	low STR_15
  8562  002138  0100               	movlb	0	; () banked
  8563  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8564  00213C  0EFF               	movlw	high STR_15
  8565  00213E  0100               	movlb	0	; () banked
  8566  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8567  002142  EC90  F023         	call	_strcpy	;wreg free
  8568                           
  8569                           ;RTC.c: 95: break;
  8570  002146  D06B               	goto	l6133
  8571  002148                     l6121:
  8572                           
  8573                           ;RTC.c: 97: strcpy(month, "SEP");
  8574  002148  0EBE               	movlw	low printRTC@month
  8575  00214A  0100               	movlb	0	; () banked
  8576  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8577  00214E  0E00               	movlw	high printRTC@month
  8578  002150  0100               	movlb	0	; () banked
  8579  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8580  002154  0EE3               	movlw	low STR_16
  8581  002156  0100               	movlb	0	; () banked
  8582  002158  6F82               	movwf	strcpy@from& (0+255),b
  8583  00215A  0EFF               	movlw	high STR_16
  8584  00215C  0100               	movlb	0	; () banked
  8585  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8586  002160  EC90  F023         	call	_strcpy	;wreg free
  8587                           
  8588                           ;RTC.c: 98: break;
  8589  002164  D05C               	goto	l6133
  8590  002166                     l6123:
  8591                           
  8592                           ;RTC.c: 100: strcpy(month, "OCT");
  8593  002166  0EBE               	movlw	low printRTC@month
  8594  002168  0100               	movlb	0	; () banked
  8595  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8596  00216C  0E00               	movlw	high printRTC@month
  8597  00216E  0100               	movlb	0	; () banked
  8598  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8599  002172  0EF3               	movlw	low STR_17
  8600  002174  0100               	movlb	0	; () banked
  8601  002176  6F82               	movwf	strcpy@from& (0+255),b
  8602  002178  0EFF               	movlw	high STR_17
  8603  00217A  0100               	movlb	0	; () banked
  8604  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8605  00217E  EC90  F023         	call	_strcpy	;wreg free
  8606                           
  8607                           ;RTC.c: 101: break;
  8608  002182  D04D               	goto	l6133
  8609  002184                     l6125:
  8610                           
  8611                           ;RTC.c: 103: strcpy(month, "NOV");
  8612  002184  0EBE               	movlw	low printRTC@month
  8613  002186  0100               	movlb	0	; () banked
  8614  002188  6F80               	movwf	strcpy@to& (0+255),b
  8615  00218A  0E00               	movlw	high printRTC@month
  8616  00218C  0100               	movlb	0	; () banked
  8617  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8618  002190  0EF7               	movlw	low STR_18
  8619  002192  0100               	movlb	0	; () banked
  8620  002194  6F82               	movwf	strcpy@from& (0+255),b
  8621  002196  0EFF               	movlw	high STR_18
  8622  002198  0100               	movlb	0	; () banked
  8623  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8624  00219C  EC90  F023         	call	_strcpy	;wreg free
  8625                           
  8626                           ;RTC.c: 104: break;
  8627  0021A0  D03E               	goto	l6133
  8628  0021A2                     l6127:
  8629                           
  8630                           ;RTC.c: 106: strcpy(month, "DEC");
  8631  0021A2  0EBE               	movlw	low printRTC@month
  8632  0021A4  0100               	movlb	0	; () banked
  8633  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8634  0021A8  0E00               	movlw	high printRTC@month
  8635  0021AA  0100               	movlb	0	; () banked
  8636  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8637  0021AE  0ECF               	movlw	low STR_19
  8638  0021B0  0100               	movlb	0	; () banked
  8639  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8640  0021B4  0EFF               	movlw	high STR_19
  8641  0021B6  0100               	movlb	0	; () banked
  8642  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8643  0021BA  EC90  F023         	call	_strcpy	;wreg free
  8644                           
  8645                           ;RTC.c: 108: }
  8646                           
  8647                           ;RTC.c: 107: break;
  8648  0021BE  D02F               	goto	l6133
  8649  0021C0                     l6131:
  8650  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8651  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8652                           
  8653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8654                           ; Switch size 1, requested type "space"
  8655                           ; Number of cases is 1, Range of values is 0 to 0
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte            4     3 (average)
  8659                           ;	Chosen strategy is simple_byte
  8660  0021C8  0100               	movlb	0	; () banked
  8661  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8662  0021CC  0A00               	xorlw	0	; case 0
  8663  0021CE  A4D8               	btfss	status,2,c
  8664  0021D0  D026               	goto	l6133
  8665                           
  8666                           ; BSR set to: 0
  8667                           ; Switch size 1, requested type "space"
  8668                           ; Number of cases is 12, Range of values is 1 to 12
  8669                           ; switch strategies available:
  8670                           ; Name         Instructions Cycles
  8671                           ; simple_byte           37    19 (average)
  8672                           ;	Chosen strategy is simple_byte
  8673  0021D2  0100               	movlb	0	; () banked
  8674  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8675  0021D6  0A01               	xorlw	1	; case 1
  8676  0021D8  B4D8               	btfsc	status,2,c
  8677  0021DA  D73E               	goto	l6105
  8678  0021DC  0A03               	xorlw	3	; case 2
  8679  0021DE  B4D8               	btfsc	status,2,c
  8680  0021E0  D74A               	goto	l6107
  8681  0021E2  0A01               	xorlw	1	; case 3
  8682  0021E4  B4D8               	btfsc	status,2,c
  8683  0021E6  D756               	goto	l6109
  8684  0021E8  0A07               	xorlw	7	; case 4
  8685  0021EA  B4D8               	btfsc	status,2,c
  8686  0021EC  D762               	goto	l6111
  8687  0021EE  0A01               	xorlw	1	; case 5
  8688  0021F0  B4D8               	btfsc	status,2,c
  8689  0021F2  D76E               	goto	l6113
  8690  0021F4  0A03               	xorlw	3	; case 6
  8691  0021F6  B4D8               	btfsc	status,2,c
  8692  0021F8  D77A               	goto	l6115
  8693  0021FA  0A01               	xorlw	1	; case 7
  8694  0021FC  B4D8               	btfsc	status,2,c
  8695  0021FE  D786               	goto	l6117
  8696  002200  0A0F               	xorlw	15	; case 8
  8697  002202  B4D8               	btfsc	status,2,c
  8698  002204  D792               	goto	l6119
  8699  002206  0A01               	xorlw	1	; case 9
  8700  002208  B4D8               	btfsc	status,2,c
  8701  00220A  D79E               	goto	l6121
  8702  00220C  0A03               	xorlw	3	; case 10
  8703  00220E  B4D8               	btfsc	status,2,c
  8704  002210  D7AA               	goto	l6123
  8705  002212  0A01               	xorlw	1	; case 11
  8706  002214  B4D8               	btfsc	status,2,c
  8707  002216  D7B6               	goto	l6125
  8708  002218  0A07               	xorlw	7	; case 12
  8709  00221A  B4D8               	btfsc	status,2,c
  8710  00221C  D7C2               	goto	l6127
  8711  00221E                     l6133:
  8712                           
  8713                           ;RTC.c: 109: lcdInst(0b10000000);;
  8714  00221E  0E80               	movlw	128
  8715  002220  EC24  F026         	call	_lcdInst
  8716                           
  8717                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8718  002224  0E0A               	movlw	low STR_21
  8719  002226  0100               	movlb	0	; () banked
  8720  002228  6F8E               	movwf	printf@f& (0+255),b
  8721  00222A  0EFB               	movlw	high STR_21
  8722  00222C  0100               	movlb	0	; () banked
  8723  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8724  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8725  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8726  002238  0EBE               	movlw	low printRTC@month
  8727  00223A  0100               	movlb	0	; () banked
  8728  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8729  00223E  0E00               	movlw	high printRTC@month
  8730  002240  0100               	movlb	0	; () banked
  8731  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8732  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8733  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8734  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8735  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8736  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8737  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8738  00225C  ECB8  F008         	call	_printf	;wreg free
  8739  002260  0012               	return		;funcret
  8740  002262                     __end_of_printRTC:
  8741                           	opt stack 0
  8742                           tblptru	equ	0xFF8
  8743                           tblptrh	equ	0xFF7
  8744                           tblptrl	equ	0xFF6
  8745                           tablat	equ	0xFF5
  8746                           prodh	equ	0xFF4
  8747                           prodl	equ	0xFF3
  8748                           intcon	equ	0xFF2
  8749                           intcon2	equ	0xFF1
  8750                           intcon3	equ	0xFF0
  8751                           postinc0	equ	0xFEE
  8752                           wreg	equ	0xFE8
  8753                           postdec1	equ	0xFE5
  8754                           fsr1l	equ	0xFE1
  8755                           indf2	equ	0xFDF
  8756                           postinc2	equ	0xFDE
  8757                           postdec2	equ	0xFDD
  8758                           fsr2h	equ	0xFDA
  8759                           fsr2l	equ	0xFD9
  8760                           status	equ	0xFD8
  8761                           
  8762 ;; *************** function _strcpy *****************
  8763 ;; Defined at:
  8764 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8767 ;;		 -> printRTC@month(4), UI@month(4), 
  8768 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8769 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8770 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8771 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8772 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8773 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8774 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8775 ;;		 -> STR_8(4), 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8778 ;;		 -> printRTC@month(4), UI@month(4), 
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  2    0[BANK0 ] PTR unsigned char 
  8781 ;; Registers used:
  8782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;Total ram usage:        6 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    7
  8795 ;; This function calls:
  8796 ;;		Nothing
  8797 ;; This function is called by:
  8798 ;;		_UI
  8799 ;;		_printRTC
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text25
  8804  004720                     __ptext25:
  8805                           	opt stack 0
  8806  004720                     _strcpy:
  8807                           	opt stack 20
  8808                           
  8809                           ;incstack = 0
  8810  004720  C080  F084         	movff	strcpy@to,strcpy@cp
  8811  004724  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8812  004728  D006               	goto	l5843
  8813  00472A                     l5841:
  8814  00472A  0100               	movlb	0	; () banked
  8815  00472C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8816  00472E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8817  004730  0100               	movlb	0	; () banked
  8818  004732  4B82               	infsnz	strcpy@from& (0+255),f,b
  8819  004734  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8820  004736                     l5843:
  8821  004736  C082  FFF6         	movff	strcpy@from,tblptrl
  8822  00473A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8823  00473E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8824  00473E  6AF8               	clrf	tblptru,c
  8825  004740                     	endif
  8826  004740                     	if	0	;tblptru may be non-zero
  8827  004740                     	endif
  8828  004740  C084  FFD9         	movff	strcpy@cp,fsr2l
  8829  004744  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8830  004748  0008               	tblrd		*
  8831  00474A  CFF5 FFDF          	movff	tablat,indf2
  8832  00474E  50DF               	movf	indf2,w,c
  8833  004750  B4D8               	btfsc	status,2,c
  8834  004752  0012               	return	
  8835  004754  D7EA               	goto	l5841
  8836  004756                     __end_of_strcpy:
  8837                           	opt stack 0
  8838                           tblptru	equ	0xFF8
  8839                           tblptrh	equ	0xFF7
  8840                           tblptrl	equ	0xFF6
  8841                           tablat	equ	0xFF5
  8842                           prodh	equ	0xFF4
  8843                           prodl	equ	0xFF3
  8844                           intcon	equ	0xFF2
  8845                           intcon2	equ	0xFF1
  8846                           intcon3	equ	0xFF0
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _getRTC *****************
  8859 ;; Defined at:
  8860 ;;		line 44 in file "RTC.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;  i               2    3[BANK0 ] int 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        2 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    9
  8881 ;; This function calls:
  8882 ;;		_I2C_Master_Read
  8883 ;;		_I2C_Master_Start
  8884 ;;		_I2C_Master_Stop
  8885 ;;		_I2C_Master_Write
  8886 ;; This function is called by:
  8887 ;;		_printRTC
  8888 ;;		_initSortTimer
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           	psect	text26
  8893  003E7E                     __ptext26:
  8894                           	opt stack 0
  8895  003E7E                     _getRTC:
  8896                           	opt stack 18
  8897                           
  8898                           ;RTC.c: 48: I2C_Master_Start();
  8899                           
  8900                           ;incstack = 0
  8901  003E7E  EC4A  F026         	call	_I2C_Master_Start	;wreg free
  8902                           
  8903                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8904  003E82  0E00               	movlw	0
  8905  003E84  0100               	movlb	0	; () banked
  8906  003E86  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8907  003E88  0ED0               	movlw	208
  8908  003E8A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8909  003E8C  EC38  F026         	call	_I2C_Master_Write	;wreg free
  8910                           
  8911                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8912  003E90  0E00               	movlw	0
  8913  003E92  0100               	movlb	0	; () banked
  8914  003E94  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8915  003E96  0E00               	movlw	0
  8916  003E98  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8917  003E9A  EC38  F026         	call	_I2C_Master_Write	;wreg free
  8918                           
  8919                           ;RTC.c: 51: I2C_Master_Stop();
  8920  003E9E  EC46  F026         	call	_I2C_Master_Stop	;wreg free
  8921                           
  8922                           ;RTC.c: 54: I2C_Master_Start();
  8923  003EA2  EC4A  F026         	call	_I2C_Master_Start	;wreg free
  8924                           
  8925                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8926  003EA6  0E00               	movlw	0
  8927  003EA8  0100               	movlb	0	; () banked
  8928  003EAA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8929  003EAC  0ED1               	movlw	209
  8930  003EAE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8931  003EB0  EC38  F026         	call	_I2C_Master_Write	;wreg free
  8932                           
  8933                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8934  003EB4  0E00               	movlw	0
  8935  003EB6  0100               	movlb	0	; () banked
  8936  003EB8  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8937  003EBA  0E00               	movlw	0
  8938  003EBC  6F83               	movwf	getRTC@i& (0+255),b
  8939  003EBE                     l5849:
  8940                           
  8941                           ; BSR set to: 0
  8942  003EBE  0100               	movlb	0	; () banked
  8943  003EC0  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8944  003EC2  D008               	goto	l5853
  8945  003EC4  0100               	movlb	0	; () banked
  8946  003EC6  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8947  003EC8  E115               	bnz	l5859
  8948  003ECA  0E06               	movlw	6
  8949  003ECC  0100               	movlb	0	; () banked
  8950  003ECE  5D83               	subwf	getRTC@i& (0+255),w,b
  8951  003ED0  B0D8               	btfsc	status,0,c
  8952  003ED2  D010               	goto	l5859
  8953  003ED4                     l5853:
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8957  003ED4  0E24               	movlw	low _time
  8958  003ED6  0100               	movlb	0	; () banked
  8959  003ED8  2583               	addwf	getRTC@i& (0+255),w,b
  8960  003EDA  6ED9               	movwf	fsr2l,c
  8961  003EDC  0E01               	movlw	high _time
  8962  003EDE  0100               	movlb	0	; () banked
  8963  003EE0  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8964  003EE2  6EDA               	movwf	fsr2h,c
  8965  003EE4  0E01               	movlw	1
  8966  003EE6  ECE7  F024         	call	_I2C_Master_Read
  8967  003EEA  6EDF               	movwf	indf2,c
  8968  003EEC  0100               	movlb	0	; () banked
  8969  003EEE  4B83               	infsnz	getRTC@i& (0+255),f,b
  8970  003EF0  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8971  003EF2  D7E5               	goto	l5849
  8972  003EF4                     l5859:
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;RTC.c: 58: }
  8976                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8977  003EF4  0E00               	movlw	0
  8978  003EF6  ECE7  F024         	call	_I2C_Master_Read
  8979  003EFA  0101               	movlb	1	; () banked
  8980  003EFC  6F2A               	movwf	(_time+6)& (0+255),b
  8981                           
  8982                           ;RTC.c: 60: I2C_Master_Stop();
  8983  003EFE  EC46  F026         	call	_I2C_Master_Stop	;wreg free
  8984  003F02  0012               	return		;funcret
  8985  003F04                     __end_of_getRTC:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           intcon2	equ	0xFF1
  8995                           intcon3	equ	0xFF0
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           postdec1	equ	0xFE5
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function _I2C_Master_Write *****************
  9008 ;; Defined at:
  9009 ;;		line 43 in file "I2C.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  d               2    1[BANK0 ] unsigned int 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, status,2, status,0, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;Total ram usage:        2 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    8
  9030 ;; This function calls:
  9031 ;;		_I2C_Master_Wait
  9032 ;; This function is called by:
  9033 ;;		_loadRTC
  9034 ;;		_getRTC
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text27
  9039  004C70                     __ptext27:
  9040                           	opt stack 0
  9041  004C70                     _I2C_Master_Write:
  9042                           	opt stack 18
  9043                           
  9044                           ;I2C.c: 45: I2C_Master_Wait();
  9045                           
  9046                           ;incstack = 0
  9047  004C70  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9048                           
  9049                           ;I2C.c: 46: SSPBUF = d;
  9050  004C74  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9051  004C78  0012               	return		;funcret
  9052  004C7A                     __end_of_I2C_Master_Write:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon2	equ	0xFF1
  9062                           intcon3	equ	0xFF0
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _I2C_Master_Stop *****************
  9075 ;; Defined at:
  9076 ;;		line 37 in file "I2C.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, status,2, status,0, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        0 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    8
  9097 ;; This function calls:
  9098 ;;		_I2C_Master_Wait
  9099 ;; This function is called by:
  9100 ;;		_loadRTC
  9101 ;;		_getRTC
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text28
  9106  004C8C                     __ptext28:
  9107                           	opt stack 0
  9108  004C8C                     _I2C_Master_Stop:
  9109                           	opt stack 18
  9110                           
  9111                           ;I2C.c: 39: I2C_Master_Wait();
  9112                           
  9113                           ;incstack = 0
  9114  004C8C  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9115                           
  9116                           ;I2C.c: 40: PEN = 1;
  9117  004C90  84C5               	bsf	4037,2,c	;volatile
  9118  004C92  0012               	return		;funcret
  9119  004C94                     __end_of_I2C_Master_Stop:
  9120                           	opt stack 0
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           prodh	equ	0xFF4
  9126                           prodl	equ	0xFF3
  9127                           intcon	equ	0xFF2
  9128                           intcon2	equ	0xFF1
  9129                           intcon3	equ	0xFF0
  9130                           postinc0	equ	0xFEE
  9131                           wreg	equ	0xFE8
  9132                           postdec1	equ	0xFE5
  9133                           fsr1l	equ	0xFE1
  9134                           indf2	equ	0xFDF
  9135                           postinc2	equ	0xFDE
  9136                           postdec2	equ	0xFDD
  9137                           fsr2h	equ	0xFDA
  9138                           fsr2l	equ	0xFD9
  9139                           status	equ	0xFD8
  9140                           
  9141 ;; *************** function _I2C_Master_Start *****************
  9142 ;; Defined at:
  9143 ;;		line 31 in file "I2C.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;		None
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;		None
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      void 
  9150 ;; Registers used:
  9151 ;;		wreg, status,2, status,0, cstack
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;Total ram usage:        0 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    8
  9164 ;; This function calls:
  9165 ;;		_I2C_Master_Wait
  9166 ;; This function is called by:
  9167 ;;		_loadRTC
  9168 ;;		_getRTC
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text29
  9173  004C94                     __ptext29:
  9174                           	opt stack 0
  9175  004C94                     _I2C_Master_Start:
  9176                           	opt stack 18
  9177                           
  9178                           ;I2C.c: 33: I2C_Master_Wait();
  9179                           
  9180                           ;incstack = 0
  9181  004C94  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9182                           
  9183                           ;I2C.c: 34: SEN = 1;
  9184  004C98  80C5               	bsf	4037,0,c	;volatile
  9185  004C9A  0012               	return		;funcret
  9186  004C9C                     __end_of_I2C_Master_Start:
  9187                           	opt stack 0
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           intcon2	equ	0xFF1
  9196                           intcon3	equ	0xFF0
  9197                           postinc0	equ	0xFEE
  9198                           wreg	equ	0xFE8
  9199                           postdec1	equ	0xFE5
  9200                           fsr1l	equ	0xFE1
  9201                           indf2	equ	0xFDF
  9202                           postinc2	equ	0xFDE
  9203                           postdec2	equ	0xFDD
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function _I2C_Master_Read *****************
  9209 ;; Defined at:
  9210 ;;		line 49 in file "I2C.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  a               1    wreg     unsigned char 
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;  a               1    1[BANK0 ] unsigned char 
  9215 ;;  temp            1    2[BANK0 ] unsigned char 
  9216 ;; Return value:  Size  Location     Type
  9217 ;;                  1    wreg      unsigned char 
  9218 ;; Registers used:
  9219 ;;		wreg, status,2, status,0, cstack
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;Total ram usage:        2 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    8
  9232 ;; This function calls:
  9233 ;;		_I2C_Master_Wait
  9234 ;; This function is called by:
  9235 ;;		_getRTC
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           	psect	text30
  9240  0049CE                     __ptext30:
  9241                           	opt stack 0
  9242  0049CE                     _I2C_Master_Read:
  9243                           	opt stack 18
  9244                           
  9245                           ;incstack = 0
  9246                           ;I2C_Master_Read@a stored from wreg
  9247  0049CE  0100               	movlb	0	; () banked
  9248  0049D0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9249                           
  9250                           ;I2C.c: 51: unsigned char temp;
  9251                           ;I2C.c: 52: I2C_Master_Wait();
  9252  0049D2  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9253                           
  9254                           ;I2C.c: 53: RCEN = 1;
  9255  0049D6  86C5               	bsf	4037,3,c	;volatile
  9256                           
  9257                           ;I2C.c: 54: I2C_Master_Wait();
  9258  0049D8  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9259                           
  9260                           ;I2C.c: 55: temp = SSPBUF;
  9261  0049DC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9262                           
  9263                           ;I2C.c: 56: I2C_Master_Wait();
  9264  0049E0  EC09  F026         	call	_I2C_Master_Wait	;wreg free
  9265                           
  9266                           ;I2C.c: 57: ACKDT = (a)?0:1;
  9267  0049E4  0100               	movlb	0	; () banked
  9268  0049E6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9269  0049E8  0100               	movlb	0	; () banked
  9270  0049EA  A4D8               	btfss	status,2,c
  9271  0049EC  D002               	goto	u3960
  9272  0049EE  8AC5               	bsf	4037,5,c	;volatile
  9273  0049F0  D001               	goto	l5537
  9274  0049F2                     u3960:
  9275  0049F2  9AC5               	bcf	4037,5,c	;volatile
  9276  0049F4                     l5537:
  9277                           
  9278                           ;I2C.c: 58: ACKEN = 1;
  9279  0049F4  88C5               	bsf	4037,4,c	;volatile
  9280                           
  9281                           ;I2C.c: 59: return temp;
  9282  0049F6  0100               	movlb	0	; () banked
  9283  0049F8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9284  0049FA  0012               	return	
  9285  0049FC                     __end_of_I2C_Master_Read:
  9286                           	opt stack 0
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           intcon	equ	0xFF2
  9294                           intcon2	equ	0xFF1
  9295                           intcon3	equ	0xFF0
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _I2C_Master_Wait *****************
  9308 ;; Defined at:
  9309 ;;		line 26 in file "I2C.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      void 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;Total ram usage:        1 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    7
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_I2C_Master_Start
  9334 ;;		_I2C_Master_Stop
  9335 ;;		_I2C_Master_Write
  9336 ;;		_I2C_Master_Read
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           	psect	text31
  9341  004C12                     __ptext31:
  9342                           	opt stack 0
  9343  004C12                     _I2C_Master_Wait:
  9344                           	opt stack 18
  9345  004C12                     l64:
  9346  004C12  B4C7               	btfsc	4039,2,c	;volatile
  9347  004C14  D7FE               	goto	l64
  9348  004C16  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9349  004C1A  0E1F               	movlw	31
  9350  004C1C  0100               	movlb	0	; () banked
  9351  004C1E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9352  004C20  B4D8               	btfsc	status,2,c
  9353  004C22  0012               	return	
  9354  004C24  D7F6               	goto	l64
  9355  004C26                     __end_of_I2C_Master_Wait:
  9356                           	opt stack 0
  9357                           tblptru	equ	0xFF8
  9358                           tblptrh	equ	0xFF7
  9359                           tblptrl	equ	0xFF6
  9360                           tablat	equ	0xFF5
  9361                           prodh	equ	0xFF4
  9362                           prodl	equ	0xFF3
  9363                           intcon	equ	0xFF2
  9364                           intcon2	equ	0xFF1
  9365                           intcon3	equ	0xFF0
  9366                           postinc0	equ	0xFEE
  9367                           wreg	equ	0xFE8
  9368                           postdec1	equ	0xFE5
  9369                           fsr1l	equ	0xFE1
  9370                           indf2	equ	0xFDF
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function _change_state_to_menu_22 *****************
  9378 ;; Defined at:
  9379 ;;		line 498 in file "UI.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;Total ram usage:        0 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:   10
  9400 ;; This function calls:
  9401 ;;		_lcdInst
  9402 ;;		_printf
  9403 ;; This function is called by:
  9404 ;;		_UI
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text32
  9409  0046B0                     __ptext32:
  9410                           	opt stack 0
  9411  0046B0                     _change_state_to_menu_22:
  9412                           	opt stack 19
  9413                           
  9414                           ;UI.c: 499: cur_state = 22;
  9415                           
  9416                           ; BSR set to: 0
  9417                           ;incstack = 0
  9418  0046B0  0E00               	movlw	0
  9419  0046B2  0100               	movlb	0	; () banked
  9420  0046B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9421  0046B6  0E16               	movlw	22
  9422  0046B8  6FE6               	movwf	_cur_state& (0+255),b
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;UI.c: 501: lcdInst(0b10000000);;
  9426  0046BA  0E80               	movlw	128
  9427  0046BC  EC24  F026         	call	_lcdInst
  9428                           
  9429                           ;UI.c: 502: printf("2. SORT        <");
  9430  0046C0  0EC4               	movlw	low STR_34
  9431  0046C2  0100               	movlb	0	; () banked
  9432  0046C4  6F8E               	movwf	printf@f& (0+255),b
  9433  0046C6  0EFD               	movlw	high STR_34
  9434  0046C8  0100               	movlb	0	; () banked
  9435  0046CA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9436  0046CC  ECB8  F008         	call	_printf	;wreg free
  9437                           
  9438                           ;UI.c: 503: lcdInst(0b11000000);;
  9439  0046D0  0EC0               	movlw	192
  9440  0046D2  EC24  F026         	call	_lcdInst
  9441                           
  9442                           ;UI.c: 504: printf("3. LOGS         ");
  9443  0046D6  0E09               	movlw	low STR_36
  9444  0046D8  0100               	movlb	0	; () banked
  9445  0046DA  6F8E               	movwf	printf@f& (0+255),b
  9446  0046DC  0EFD               	movlw	high STR_36
  9447  0046DE  0100               	movlb	0	; () banked
  9448  0046E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9449  0046E2  ECB8  F008         	call	_printf	;wreg free
  9450  0046E6  0012               	return		;funcret
  9451  0046E8                     __end_of_change_state_to_menu_22:
  9452                           	opt stack 0
  9453                           tblptru	equ	0xFF8
  9454                           tblptrh	equ	0xFF7
  9455                           tblptrl	equ	0xFF6
  9456                           tablat	equ	0xFF5
  9457                           prodh	equ	0xFF4
  9458                           prodl	equ	0xFF3
  9459                           intcon	equ	0xFF2
  9460                           intcon2	equ	0xFF1
  9461                           intcon3	equ	0xFF0
  9462                           postinc0	equ	0xFEE
  9463                           wreg	equ	0xFE8
  9464                           postdec1	equ	0xFE5
  9465                           fsr1l	equ	0xFE1
  9466                           indf2	equ	0xFDF
  9467                           postinc2	equ	0xFDE
  9468                           postdec2	equ	0xFDD
  9469                           fsr2h	equ	0xFDA
  9470                           fsr2l	equ	0xFD9
  9471                           status	equ	0xFD8
  9472                           
  9473 ;; *************** function _change_state_to_menu_12 *****************
  9474 ;; Defined at:
  9475 ;;		line 490 in file "UI.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:   10
  9496 ;; This function calls:
  9497 ;;		_lcdInst
  9498 ;;		_printf
  9499 ;; This function is called by:
  9500 ;;		_UI
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text33
  9505  0046E8                     __ptext33:
  9506                           	opt stack 0
  9507  0046E8                     _change_state_to_menu_12:
  9508                           	opt stack 19
  9509                           
  9510                           ;UI.c: 491: cur_state = 12;
  9511                           
  9512                           ;incstack = 0
  9513  0046E8  0E00               	movlw	0
  9514  0046EA  0100               	movlb	0	; () banked
  9515  0046EC  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9516  0046EE  0E0C               	movlw	12
  9517  0046F0  6FE6               	movwf	_cur_state& (0+255),b
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;UI.c: 493: lcdInst(0b10000000);;
  9521  0046F2  0E80               	movlw	128
  9522  0046F4  EC24  F026         	call	_lcdInst
  9523                           
  9524                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9525  0046F8  0E2B               	movlw	low STR_33
  9526  0046FA  0100               	movlb	0	; () banked
  9527  0046FC  6F8E               	movwf	printf@f& (0+255),b
  9528  0046FE  0EFD               	movlw	high STR_33
  9529  004700  0100               	movlb	0	; () banked
  9530  004702  6F8F               	movwf	(printf@f+1)& (0+255),b
  9531  004704  ECB8  F008         	call	_printf	;wreg free
  9532                           
  9533                           ;UI.c: 495: lcdInst(0b11000000);;
  9534  004708  0EC0               	movlw	192
  9535  00470A  EC24  F026         	call	_lcdInst
  9536                           
  9537                           ;UI.c: 496: printf("2. SORT        <");
  9538  00470E  0EC4               	movlw	low STR_34
  9539  004710  0100               	movlb	0	; () banked
  9540  004712  6F8E               	movwf	printf@f& (0+255),b
  9541  004714  0EFD               	movlw	high STR_34
  9542  004716  0100               	movlb	0	; () banked
  9543  004718  6F8F               	movwf	(printf@f+1)& (0+255),b
  9544  00471A  ECB8  F008         	call	_printf	;wreg free
  9545  00471E  0012               	return		;funcret
  9546  004720                     __end_of_change_state_to_menu_12:
  9547                           	opt stack 0
  9548                           tblptru	equ	0xFF8
  9549                           tblptrh	equ	0xFF7
  9550                           tblptrl	equ	0xFF6
  9551                           tablat	equ	0xFF5
  9552                           prodh	equ	0xFF4
  9553                           prodl	equ	0xFF3
  9554                           intcon	equ	0xFF2
  9555                           intcon2	equ	0xFF1
  9556                           intcon3	equ	0xFF0
  9557                           postinc0	equ	0xFEE
  9558                           wreg	equ	0xFE8
  9559                           postdec1	equ	0xFE5
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           postdec2	equ	0xFDD
  9564                           fsr2h	equ	0xFDA
  9565                           fsr2l	equ	0xFD9
  9566                           status	equ	0xFD8
  9567                           
  9568 ;; *************** function ___awmod *****************
  9569 ;; Defined at:
  9570 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  dividend        2    0[BANK0 ] int 
  9573 ;;  divisor         2    2[BANK0 ] int 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  sign            1    5[BANK0 ] unsigned char 
  9576 ;;  counter         1    4[BANK0 ] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  2    0[BANK0 ] int 
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;Total ram usage:        6 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    7
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_UI
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text34
  9601  003D50                     __ptext34:
  9602                           	opt stack 0
  9603  003D50                     ___awmod:
  9604                           	opt stack 22
  9605                           
  9606                           ;incstack = 0
  9607  003D50  0E00               	movlw	0
  9608  003D52  0100               	movlb	0	; () banked
  9609  003D54  6F85               	movwf	___awmod@sign& (0+255),b
  9610                           
  9611                           ; BSR set to: 0
  9612  003D56  0100               	movlb	0	; () banked
  9613  003D58  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9614  003D5A  D008               	goto	l7757
  9615                           
  9616                           ; BSR set to: 0
  9617  003D5C  0100               	movlb	0	; () banked
  9618  003D5E  6D80               	negf	___awmod@dividend& (0+255),b
  9619  003D60  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9620  003D62  B0D8               	btfsc	status,0,c
  9621  003D64  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9622                           
  9623                           ; BSR set to: 0
  9624  003D66  0E01               	movlw	1
  9625  003D68  0100               	movlb	0	; () banked
  9626  003D6A  6F85               	movwf	___awmod@sign& (0+255),b
  9627  003D6C                     l7757:
  9628                           
  9629                           ; BSR set to: 0
  9630  003D6C  0100               	movlb	0	; () banked
  9631  003D6E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9632  003D70  D005               	goto	l7761
  9633                           
  9634                           ; BSR set to: 0
  9635  003D72  0100               	movlb	0	; () banked
  9636  003D74  6D82               	negf	___awmod@divisor& (0+255),b
  9637  003D76  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9638  003D78  B0D8               	btfsc	status,0,c
  9639  003D7A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9640  003D7C                     l7761:
  9641                           
  9642                           ; BSR set to: 0
  9643  003D7C  0100               	movlb	0	; () banked
  9644  003D7E  5182               	movf	___awmod@divisor& (0+255),w,b
  9645  003D80  0100               	movlb	0	; () banked
  9646  003D82  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9647  003D84  B4D8               	btfsc	status,2,c
  9648  003D86  D026               	goto	l7777
  9649                           
  9650                           ; BSR set to: 0
  9651  003D88  0E01               	movlw	1
  9652  003D8A  0100               	movlb	0	; () banked
  9653  003D8C  6F84               	movwf	___awmod@counter& (0+255),b
  9654  003D8E  D006               	goto	l7767
  9655  003D90                     l7765:
  9656                           
  9657                           ; BSR set to: 0
  9658  003D90  0100               	movlb	0	; () banked
  9659  003D92  90D8               	bcf	status,0,c
  9660  003D94  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9661  003D96  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9662  003D98  0100               	movlb	0	; () banked
  9663  003D9A  2B84               	incf	___awmod@counter& (0+255),f,b
  9664  003D9C                     l7767:
  9665                           
  9666                           ; BSR set to: 0
  9667  003D9C  0100               	movlb	0	; () banked
  9668  003D9E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9669  003DA0  D7F7               	goto	l7765
  9670  003DA2                     l7769:
  9671                           
  9672                           ; BSR set to: 0
  9673  003DA2  0100               	movlb	0	; () banked
  9674  003DA4  5182               	movf	___awmod@divisor& (0+255),w,b
  9675  003DA6  0100               	movlb	0	; () banked
  9676  003DA8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9677  003DAA  0100               	movlb	0	; () banked
  9678  003DAC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9679  003DAE  0100               	movlb	0	; () banked
  9680  003DB0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9681  003DB2  A0D8               	btfss	status,0,c
  9682  003DB4  D008               	goto	l7773
  9683                           
  9684                           ; BSR set to: 0
  9685  003DB6  0100               	movlb	0	; () banked
  9686  003DB8  5182               	movf	___awmod@divisor& (0+255),w,b
  9687  003DBA  0100               	movlb	0	; () banked
  9688  003DBC  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9689  003DBE  0100               	movlb	0	; () banked
  9690  003DC0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9691  003DC2  0100               	movlb	0	; () banked
  9692  003DC4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9693  003DC6                     l7773:
  9694                           
  9695                           ; BSR set to: 0
  9696  003DC6  0100               	movlb	0	; () banked
  9697  003DC8  90D8               	bcf	status,0,c
  9698  003DCA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9699  003DCC  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9700                           
  9701                           ; BSR set to: 0
  9702  003DCE  0100               	movlb	0	; () banked
  9703  003DD0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9704  003DD2  D7E7               	goto	l7769
  9705  003DD4                     l7777:
  9706                           
  9707                           ; BSR set to: 0
  9708  003DD4  0100               	movlb	0	; () banked
  9709  003DD6  5185               	movf	___awmod@sign& (0+255),w,b
  9710  003DD8  0100               	movlb	0	; () banked
  9711  003DDA  B4D8               	btfsc	status,2,c
  9712  003DDC  D005               	goto	l7781
  9713                           
  9714                           ; BSR set to: 0
  9715  003DDE  0100               	movlb	0	; () banked
  9716  003DE0  6D80               	negf	___awmod@dividend& (0+255),b
  9717  003DE2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9718  003DE4  B0D8               	btfsc	status,0,c
  9719  003DE6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9720  003DE8                     l7781:
  9721                           
  9722                           ; BSR set to: 0
  9723  003DE8  C080  F080         	movff	___awmod@dividend,?___awmod
  9724  003DEC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9725  003DF0  0012               	return	
  9726  003DF2                     __end_of___awmod:
  9727                           	opt stack 0
  9728                           tblptru	equ	0xFF8
  9729                           tblptrh	equ	0xFF7
  9730                           tblptrl	equ	0xFF6
  9731                           tablat	equ	0xFF5
  9732                           prodh	equ	0xFF4
  9733                           prodl	equ	0xFF3
  9734                           intcon	equ	0xFF2
  9735                           intcon2	equ	0xFF1
  9736                           intcon3	equ	0xFF0
  9737                           postinc0	equ	0xFEE
  9738                           wreg	equ	0xFE8
  9739                           postdec1	equ	0xFE5
  9740                           fsr1l	equ	0xFE1
  9741                           indf2	equ	0xFDF
  9742                           postinc2	equ	0xFDE
  9743                           postdec2	equ	0xFDD
  9744                           fsr2h	equ	0xFDA
  9745                           fsr2l	equ	0xFD9
  9746                           status	equ	0xFD8
  9747                           
  9748 ;; *************** function ___awdiv *****************
  9749 ;; Defined at:
  9750 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;  dividend        2    6[BANK0 ] int 
  9753 ;;  divisor         2    8[BANK0 ] int 
  9754 ;; Auto vars:     Size  Location     Type
  9755 ;;  quotient        2   12[BANK0 ] int 
  9756 ;;  sign            1   11[BANK0 ] unsigned char 
  9757 ;;  counter         1   10[BANK0 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  2    6[BANK0 ] int 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        8 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    7
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_UI
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text35
  9782  003B2C                     __ptext35:
  9783                           	opt stack 0
  9784  003B2C                     ___awdiv:
  9785                           	opt stack 22
  9786                           
  9787                           ; BSR set to: 0
  9788                           ;incstack = 0
  9789  003B2C  0E00               	movlw	0
  9790  003B2E  0100               	movlb	0	; () banked
  9791  003B30  6F8B               	movwf	___awdiv@sign& (0+255),b
  9792                           
  9793                           ; BSR set to: 0
  9794  003B32  0100               	movlb	0	; () banked
  9795  003B34  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9796  003B36  D008               	goto	l7713
  9797                           
  9798                           ; BSR set to: 0
  9799  003B38  0100               	movlb	0	; () banked
  9800  003B3A  6D88               	negf	___awdiv@divisor& (0+255),b
  9801  003B3C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9802  003B3E  B0D8               	btfsc	status,0,c
  9803  003B40  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9804                           
  9805                           ; BSR set to: 0
  9806  003B42  0E01               	movlw	1
  9807  003B44  0100               	movlb	0	; () banked
  9808  003B46  6F8B               	movwf	___awdiv@sign& (0+255),b
  9809  003B48                     l7713:
  9810                           
  9811                           ; BSR set to: 0
  9812  003B48  0100               	movlb	0	; () banked
  9813  003B4A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9814  003B4C  D008               	goto	l7719
  9815                           
  9816                           ; BSR set to: 0
  9817  003B4E  0100               	movlb	0	; () banked
  9818  003B50  6D86               	negf	___awdiv@dividend& (0+255),b
  9819  003B52  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9820  003B54  B0D8               	btfsc	status,0,c
  9821  003B56  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9822                           
  9823                           ; BSR set to: 0
  9824  003B58  0E01               	movlw	1
  9825  003B5A  0100               	movlb	0	; () banked
  9826  003B5C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9827  003B5E                     l7719:
  9828                           
  9829                           ; BSR set to: 0
  9830  003B5E  0E00               	movlw	0
  9831  003B60  0100               	movlb	0	; () banked
  9832  003B62  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9833  003B64  0E00               	movlw	0
  9834  003B66  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837  003B68  0100               	movlb	0	; () banked
  9838  003B6A  5188               	movf	___awdiv@divisor& (0+255),w,b
  9839  003B6C  0100               	movlb	0	; () banked
  9840  003B6E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9841  003B70  B4D8               	btfsc	status,2,c
  9842  003B72  D02C               	goto	l7741
  9843                           
  9844                           ; BSR set to: 0
  9845  003B74  0E01               	movlw	1
  9846  003B76  0100               	movlb	0	; () banked
  9847  003B78  6F8A               	movwf	___awdiv@counter& (0+255),b
  9848  003B7A  D006               	goto	l7727
  9849  003B7C                     l7725:
  9850                           
  9851                           ; BSR set to: 0
  9852  003B7C  0100               	movlb	0	; () banked
  9853  003B7E  90D8               	bcf	status,0,c
  9854  003B80  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9855  003B82  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9856  003B84  0100               	movlb	0	; () banked
  9857  003B86  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9858  003B88                     l7727:
  9859                           
  9860                           ; BSR set to: 0
  9861  003B88  0100               	movlb	0	; () banked
  9862  003B8A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9863  003B8C  D7F7               	goto	l7725
  9864  003B8E                     l7729:
  9865                           
  9866                           ; BSR set to: 0
  9867  003B8E  0100               	movlb	0	; () banked
  9868  003B90  90D8               	bcf	status,0,c
  9869  003B92  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9870  003B94  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9871                           
  9872                           ; BSR set to: 0
  9873  003B96  0100               	movlb	0	; () banked
  9874  003B98  5188               	movf	___awdiv@divisor& (0+255),w,b
  9875  003B9A  0100               	movlb	0	; () banked
  9876  003B9C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9877  003B9E  0100               	movlb	0	; () banked
  9878  003BA0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9879  003BA2  0100               	movlb	0	; () banked
  9880  003BA4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9881  003BA6  A0D8               	btfss	status,0,c
  9882  003BA8  D00A               	goto	l7737
  9883                           
  9884                           ; BSR set to: 0
  9885  003BAA  0100               	movlb	0	; () banked
  9886  003BAC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9887  003BAE  0100               	movlb	0	; () banked
  9888  003BB0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9889  003BB2  0100               	movlb	0	; () banked
  9890  003BB4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9891  003BB6  0100               	movlb	0	; () banked
  9892  003BB8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 0
  9895  003BBA  0100               	movlb	0	; () banked
  9896  003BBC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9897  003BBE                     l7737:
  9898                           
  9899                           ; BSR set to: 0
  9900  003BBE  0100               	movlb	0	; () banked
  9901  003BC0  90D8               	bcf	status,0,c
  9902  003BC2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9903  003BC4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9904                           
  9905                           ; BSR set to: 0
  9906  003BC6  0100               	movlb	0	; () banked
  9907  003BC8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9908  003BCA  D7E1               	goto	l7729
  9909  003BCC                     l7741:
  9910                           
  9911                           ; BSR set to: 0
  9912  003BCC  0100               	movlb	0	; () banked
  9913  003BCE  518B               	movf	___awdiv@sign& (0+255),w,b
  9914  003BD0  0100               	movlb	0	; () banked
  9915  003BD2  B4D8               	btfsc	status,2,c
  9916  003BD4  D005               	goto	l7745
  9917                           
  9918                           ; BSR set to: 0
  9919  003BD6  0100               	movlb	0	; () banked
  9920  003BD8  6D8C               	negf	___awdiv@quotient& (0+255),b
  9921  003BDA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9922  003BDC  B0D8               	btfsc	status,0,c
  9923  003BDE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9924  003BE0                     l7745:
  9925                           
  9926                           ; BSR set to: 0
  9927  003BE0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9928  003BE4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9929  003BE8  0012               	return	
  9930  003BEA                     __end_of___awdiv:
  9931                           	opt stack 0
  9932                           tblptru	equ	0xFF8
  9933                           tblptrh	equ	0xFF7
  9934                           tblptrl	equ	0xFF6
  9935                           tablat	equ	0xFF5
  9936                           prodh	equ	0xFF4
  9937                           prodl	equ	0xFF3
  9938                           intcon	equ	0xFF2
  9939                           intcon2	equ	0xFF1
  9940                           intcon3	equ	0xFF0
  9941                           postinc0	equ	0xFEE
  9942                           wreg	equ	0xFE8
  9943                           postdec1	equ	0xFE5
  9944                           fsr1l	equ	0xFE1
  9945                           indf2	equ	0xFDF
  9946                           postinc2	equ	0xFDE
  9947                           postdec2	equ	0xFDD
  9948                           fsr2h	equ	0xFDA
  9949                           fsr2l	equ	0xFD9
  9950                           status	equ	0xFD8
  9951                           
  9952 ;; *************** function _Test *****************
  9953 ;; Defined at:
  9954 ;;		line 30 in file "Test.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;		None
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;		None
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  1    wreg      void 
  9961 ;; Registers used:
  9962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;Total ram usage:        2 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:   11
  9975 ;; This function calls:
  9976 ;;		_BlockerTest
  9977 ;;		_BothServos
  9978 ;;		_EEPROMTest
  9979 ;;		_PortTestA5
  9980 ;;		_PortTests
  9981 ;;		_PusherTest
  9982 ;;		_SpeedTest
  9983 ;;		_actuatorTest
  9984 ;;		_algorithmTest
  9985 ;;		_lcdInst
  9986 ;;		_printf
  9987 ;;		_sensorTest
  9988 ;; This function is called by:
  9989 ;;		_main
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text36
  9994  0036D4                     __ptext36:
  9995                           	opt stack 0
  9996  0036D4                     _Test:
  9997                           	opt stack 19
  9998  0036D4                     
  9999                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10000  0036D4  0E01               	movlw	1
 10001  0036D6  EC24  F026         	call	_lcdInst
 10002  0036DA  0E68               	movlw	104
 10003  0036DC  0100               	movlb	0	; () banked
 10004  0036DE  6FC6               	movwf	??_Test& (0+255),b
 10005  0036E0  0EE4               	movlw	228
 10006  0036E2                     u8307:
 10007  0036E2  2EE8               	decfsz	wreg,f,c
 10008  0036E4  D7FE               	bra	u8307
 10009  0036E6  2FC6               	decfsz	??_Test& (0+255),f,b
 10010  0036E8  D7FC               	bra	u8307
 10011  0036EA  F000               	nop	
 10012  0036EC  0E80               	movlw	128
 10013  0036EE  EC24  F026         	call	_lcdInst
 10014                           
 10015                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10016  0036F2  0E92               	movlw	low STR_68
 10017  0036F4  0100               	movlb	0	; () banked
 10018  0036F6  6F8E               	movwf	printf@f& (0+255),b
 10019  0036F8  0EFC               	movlw	high STR_68
 10020  0036FA  0100               	movlb	0	; () banked
 10021  0036FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10022  0036FE  ECB8  F008         	call	_printf	;wreg free
 10023                           
 10024                           ;Test.c: 35: lcdInst(0b11000000);;
 10025  003702  0EC0               	movlw	192
 10026  003704  EC24  F026         	call	_lcdInst
 10027                           
 10028                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10029  003708  0EA3               	movlw	low STR_69
 10030  00370A  0100               	movlb	0	; () banked
 10031  00370C  6F8E               	movwf	printf@f& (0+255),b
 10032  00370E  0EFC               	movlw	high STR_69
 10033  003710  0100               	movlb	0	; () banked
 10034  003712  6F8F               	movwf	(printf@f+1)& (0+255),b
 10035  003714  ECB8  F008         	call	_printf	;wreg free
 10036                           
 10037                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10038  003718  0E05               	movlw	5
 10039  00371A  0100               	movlb	0	; () banked
 10040  00371C  6FC7               	movwf	(??_Test+1)& (0+255),b
 10041  00371E  0E0F               	movlw	15
 10042  003720  0100               	movlb	0	; () banked
 10043  003722  6FC6               	movwf	??_Test& (0+255),b
 10044  003724  0EF1               	movlw	241
 10045  003726                     u8317:
 10046  003726  2EE8               	decfsz	wreg,f,c
 10047  003728  D7FE               	bra	u8317
 10048  00372A  2FC6               	decfsz	??_Test& (0+255),f,b
 10049  00372C  D7FC               	bra	u8317
 10050  00372E  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10051  003730  D7FA               	bra	u8317
 10052  003732                     l1066:
 10053  003732  A281               	btfss	3969,1,c	;volatile
 10054  003734  D7FE               	goto	l1066
 10055                           
 10056                           ;Test.c: 39: var = PORTB >> 4;
 10057  003736  CF81 F0C6          	movff	3969,??_Test	;volatile
 10058  00373A  0100               	movlb	0	; () banked
 10059  00373C  3BC6               	swapf	??_Test& (0+255),f,b
 10060  00373E  0E0F               	movlw	15
 10061  003740  17C6               	andwf	??_Test& (0+255),f,b
 10062  003742  0100               	movlb	0	; () banked
 10063  003744  51C6               	movf	??_Test& (0+255),w,b
 10064  003746  0100               	movlb	0	; () banked
 10065  003748  6FFA               	movwf	_var& (0+255),b
 10066  00374A  6BFB               	clrf	(_var+1)& (0+255),b
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;Test.c: 40: var++;
 10070  00374C  0100               	movlb	0	; () banked
 10071  00374E  4BFA               	infsnz	_var& (0+255),f,b
 10072  003750  2BFB               	incf	(_var+1)& (0+255),f,b
 10073  003752                     l1069:
 10074  003752  A281               	btfss	3969,1,c	;volatile
 10075  003754  D01F               	goto	l8481
 10076  003756  D7FD               	goto	l1069
 10077  003758                     l8459:
 10078                           
 10079                           ;Test.c: 44: algorithmTest();
 10080  003758  EC66  F01C         	call	_algorithmTest	;wreg free
 10081                           
 10082                           ;Test.c: 45: break;
 10083  00375C  D7BB               	goto	l8441
 10084  00375E                     l8461:
 10085                           
 10086                           ;Test.c: 47: sensorTest();
 10087  00375E  EC4D  F00E         	call	_sensorTest	;wreg free
 10088                           
 10089                           ;Test.c: 48: break;
 10090  003762  D7B8               	goto	l8441
 10091  003764                     l8463:
 10092                           
 10093                           ;Test.c: 50: actuatorTest();
 10094  003764  EC09  F000         	call	_actuatorTest	;wreg free
 10095                           
 10096                           ;Test.c: 51: break;
 10097  003768  D7B5               	goto	l8441
 10098  00376A                     l8465:
 10099                           
 10100                           ;Test.c: 53: PortTestA5();
 10101  00376A  ECF2  F021         	call	_PortTestA5	;wreg free
 10102                           
 10103                           ;Test.c: 54: break;
 10104  00376E  D7B2               	goto	l8441
 10105  003770                     l8467:
 10106                           
 10107                           ;Test.c: 57: SpeedTest();
 10108  003770  EC82  F01F         	call	_SpeedTest	;wreg free
 10109                           
 10110                           ;Test.c: 58: break;
 10111  003774  D7AF               	goto	l8441
 10112  003776                     l8469:
 10113                           
 10114                           ;Test.c: 60: EEPROMTest();
 10115  003776  EC56  F026         	call	_EEPROMTest	;wreg free
 10116                           
 10117                           ;Test.c: 61: break;
 10118  00377A  D7AC               	goto	l8441
 10119  00377C                     l8471:
 10120                           
 10121                           ;Test.c: 63: PusherTest();
 10122  00377C  ECD1  F01C         	call	_PusherTest	;wreg free
 10123                           
 10124                           ;Test.c: 64: break;
 10125  003780  D7A9               	goto	l8441
 10126  003782                     l8473:
 10127                           
 10128                           ;Test.c: 66: PortTests();
 10129  003782  ECC4  F01F         	call	_PortTests	;wreg free
 10130                           
 10131                           ;Test.c: 67: break;
 10132  003786  D7A6               	goto	l8441
 10133  003788                     l8475:
 10134                           
 10135                           ;Test.c: 69: BothServos();
 10136  003788  ECD4  F00A         	call	_BothServos	;wreg free
 10137                           
 10138                           ;Test.c: 70: break;
 10139  00378C  D7A3               	goto	l8441
 10140  00378E                     l8477:
 10141                           
 10142                           ;Test.c: 72: BlockerTest();
 10143  00378E  ECC1  F018         	call	_BlockerTest	;wreg free
 10144                           
 10145                           ;Test.c: 76: }
 10146                           
 10147                           ;Test.c: 75: break;
 10148                           
 10149                           ;Test.c: 74: default:
 10150                           
 10151                           ;Test.c: 73: break;
 10152  003792  D7A0               	goto	l8441
 10153  003794                     l8481:
 10154  003794  C0FA  F0C6         	movff	_var,??_Test
 10155  003798  C0FB  F0C7         	movff	_var+1,??_Test+1
 10156                           
 10157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10158                           ; Switch size 1, requested type "space"
 10159                           ; Number of cases is 1, Range of values is 0 to 0
 10160                           ; switch strategies available:
 10161                           ; Name         Instructions Cycles
 10162                           ; simple_byte            4     3 (average)
 10163                           ;	Chosen strategy is simple_byte
 10164  00379C  0100               	movlb	0	; () banked
 10165  00379E  51C7               	movf	(??_Test+1)& (0+255),w,b
 10166  0037A0  0A00               	xorlw	0	; case 0
 10167  0037A2  A4D8               	btfss	status,2,c
 10168  0037A4  D797               	goto	l8441
 10169                           
 10170                           ; BSR set to: 0
 10171                           ; Switch size 1, requested type "space"
 10172                           ; Number of cases is 10, Range of values is 1 to 11
 10173                           ; switch strategies available:
 10174                           ; Name         Instructions Cycles
 10175                           ; simple_byte           31    16 (average)
 10176                           ;	Chosen strategy is simple_byte
 10177  0037A6  0100               	movlb	0	; () banked
 10178  0037A8  51C6               	movf	??_Test& (0+255),w,b
 10179  0037AA  0A01               	xorlw	1	; case 1
 10180  0037AC  B4D8               	btfsc	status,2,c
 10181  0037AE  D7D4               	goto	l8459
 10182  0037B0  0A03               	xorlw	3	; case 2
 10183  0037B2  B4D8               	btfsc	status,2,c
 10184  0037B4  D7D4               	goto	l8461
 10185  0037B6  0A01               	xorlw	1	; case 3
 10186  0037B8  B4D8               	btfsc	status,2,c
 10187  0037BA  D7D4               	goto	l8463
 10188  0037BC  0A06               	xorlw	6	; case 5
 10189  0037BE  B4D8               	btfsc	status,2,c
 10190  0037C0  D7D4               	goto	l8465
 10191  0037C2  0A03               	xorlw	3	; case 6
 10192  0037C4  B4D8               	btfsc	status,2,c
 10193  0037C6  D7D4               	goto	l8467
 10194  0037C8  0A01               	xorlw	1	; case 7
 10195  0037CA  B4D8               	btfsc	status,2,c
 10196  0037CC  D7D4               	goto	l8469
 10197  0037CE  0A0F               	xorlw	15	; case 8
 10198  0037D0  B4D8               	btfsc	status,2,c
 10199  0037D2  D7D4               	goto	l8471
 10200  0037D4  0A01               	xorlw	1	; case 9
 10201  0037D6  B4D8               	btfsc	status,2,c
 10202  0037D8  D7D4               	goto	l8473
 10203  0037DA  0A03               	xorlw	3	; case 10
 10204  0037DC  B4D8               	btfsc	status,2,c
 10205  0037DE  D7D4               	goto	l8475
 10206  0037E0  0A01               	xorlw	1	; case 11
 10207  0037E2  B4D8               	btfsc	status,2,c
 10208  0037E4  D7D4               	goto	l8477
 10209                           
 10210                           ; BSR set to: 0
 10211                           
 10212                           ; BSR set to: 0
 10213  0037E6  D776               	goto	l8441
 10214  0037E8                     __end_of_Test:
 10215                           	opt stack 0
 10216                           tblptru	equ	0xFF8
 10217                           tblptrh	equ	0xFF7
 10218                           tblptrl	equ	0xFF6
 10219                           tablat	equ	0xFF5
 10220                           prodh	equ	0xFF4
 10221                           prodl	equ	0xFF3
 10222                           intcon	equ	0xFF2
 10223                           intcon2	equ	0xFF1
 10224                           intcon3	equ	0xFF0
 10225                           postinc0	equ	0xFEE
 10226                           wreg	equ	0xFE8
 10227                           postdec1	equ	0xFE5
 10228                           fsr1l	equ	0xFE1
 10229                           indf2	equ	0xFDF
 10230                           postinc2	equ	0xFDE
 10231                           postdec2	equ	0xFDD
 10232                           fsr2h	equ	0xFDA
 10233                           fsr2l	equ	0xFD9
 10234                           status	equ	0xFD8
 10235                           
 10236 ;; *************** function _sensorTest *****************
 10237 ;; Defined at:
 10238 ;;		line 124 in file "Test.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;  res             2   45[BANK0 ] int 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  1    wreg      void 
 10245 ;; Registers used:
 10246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10254 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;Total ram usage:        4 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:   10
 10259 ;; This function calls:
 10260 ;;		_lcdInst
 10261 ;;		_printf
 10262 ;;		_readADC
 10263 ;;		_readMAG
 10264 ;; This function is called by:
 10265 ;;		_Test
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text37
 10270  001C9A                     __ptext37:
 10271                           	opt stack 0
 10272  001C9A                     _sensorTest:
 10273                           	opt stack 19
 10274                           
 10275                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;incstack = 0
 10279  001C9A  0E01               	movlw	1
 10280  001C9C  EC24  F026         	call	_lcdInst
 10281  001CA0  0E68               	movlw	104
 10282  001CA2  0100               	movlb	0	; () banked
 10283  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10284  001CA6  0EE4               	movlw	228
 10285  001CA8                     u8327:
 10286  001CA8  2EE8               	decfsz	wreg,f,c
 10287  001CAA  D7FE               	bra	u8327
 10288  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10289  001CAE  D7FC               	bra	u8327
 10290  001CB0  F000               	nop	
 10291  001CB2  0E80               	movlw	128
 10292  001CB4  EC24  F026         	call	_lcdInst
 10293                           
 10294                           ;Test.c: 127: printf("SENSORS");
 10295  001CB8  0EAE               	movlw	low STR_77
 10296  001CBA  0100               	movlb	0	; () banked
 10297  001CBC  6F8E               	movwf	printf@f& (0+255),b
 10298  001CBE  0EFF               	movlw	high STR_77
 10299  001CC0  0100               	movlb	0	; () banked
 10300  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10301  001CC4  ECB8  F008         	call	_printf	;wreg free
 10302                           
 10303                           ;Test.c: 128: lcdInst(0b11000000);;
 10304  001CC8  0EC0               	movlw	192
 10305  001CCA  EC24  F026         	call	_lcdInst
 10306                           
 10307                           ;Test.c: 129: printf("PUSH TO START");
 10308  001CCE  0E0B               	movlw	low STR_71
 10309  001CD0  0100               	movlb	0	; () banked
 10310  001CD2  6F8E               	movwf	printf@f& (0+255),b
 10311  001CD4  0EFF               	movlw	high STR_71
 10312  001CD6  0100               	movlb	0	; () banked
 10313  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10314  001CDA  ECB8  F008         	call	_printf	;wreg free
 10315                           
 10316                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10317  001CDE  0E05               	movlw	5
 10318  001CE0  0100               	movlb	0	; () banked
 10319  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10320  001CE4  0E0F               	movlw	15
 10321  001CE6  0100               	movlb	0	; () banked
 10322  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
 10323  001CEA  0EF1               	movlw	241
 10324  001CEC                     u8337:
 10325  001CEC  2EE8               	decfsz	wreg,f,c
 10326  001CEE  D7FE               	bra	u8337
 10327  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10328  001CF2  D7FC               	bra	u8337
 10329  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10330  001CF6  D7FA               	bra	u8337
 10331  001CF8                     l1099:
 10332  001CF8  A281               	btfss	3969,1,c	;volatile
 10333  001CFA  D7FE               	goto	l1099
 10334  001CFC                     l1102:
 10335  001CFC  B281               	btfsc	3969,1,c	;volatile
 10336  001CFE  D7FE               	goto	l1102
 10337                           
 10338                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10339  001D00  0E01               	movlw	1
 10340  001D02  EC24  F026         	call	_lcdInst
 10341  001D06  0E68               	movlw	104
 10342  001D08  0100               	movlb	0	; () banked
 10343  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
 10344  001D0C  0EE4               	movlw	228
 10345  001D0E                     u8347:
 10346  001D0E  2EE8               	decfsz	wreg,f,c
 10347  001D10  D7FE               	bra	u8347
 10348  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10349  001D14  D7FC               	bra	u8347
 10350  001D16  F000               	nop	
 10351  001D18  0E80               	movlw	128
 10352  001D1A  EC24  F026         	call	_lcdInst
 10353                           
 10354                           ;Test.c: 138: printf("TST: IR SNSR");
 10355  001D1E  0E35               	movlw	low STR_79
 10356  001D20  0100               	movlb	0	; () banked
 10357  001D22  6F8E               	movwf	printf@f& (0+255),b
 10358  001D24  0EFF               	movlw	high STR_79
 10359  001D26  0100               	movlb	0	; () banked
 10360  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10361  001D2A  ECB8  F008         	call	_printf	;wreg free
 10362                           
 10363                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10364  001D2E  0E05               	movlw	5
 10365  001D30  0100               	movlb	0	; () banked
 10366  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10367  001D34  0E0F               	movlw	15
 10368  001D36  0100               	movlb	0	; () banked
 10369  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10370  001D3A  0EF1               	movlw	241
 10371  001D3C                     u8357:
 10372  001D3C  2EE8               	decfsz	wreg,f,c
 10373  001D3E  D7FE               	bra	u8357
 10374  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10375  001D42  D7FC               	bra	u8357
 10376  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10377  001D46  D7FA               	bra	u8357
 10378                           
 10379                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10380  001D48  8A8B               	bsf	3979,5,c	;volatile
 10381                           
 10382                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10383  001D4A  D05C               	goto	l6973
 10384  001D4C                     l6955:
 10385                           
 10386                           ;Test.c: 143: readADC(0);
 10387  001D4C  0E00               	movlw	0
 10388  001D4E  EC2B  F025         	call	_readADC
 10389                           
 10390                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10391  001D52  50C3               	movf	4035,w,c	;volatile
 10392  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10393  001D58  0100               	movlb	0	; () banked
 10394  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10395  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10396  001D60  0100               	movlb	0	; () banked
 10397  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10398  001D64  0100               	movlb	0	; () banked
 10399  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10400  001D68  0100               	movlb	0	; () banked
 10401  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10402  001D6C  0100               	movlb	0	; () banked
 10403  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10404  001D70  0100               	movlb	0	; () banked
 10405  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;Test.c: 145: IR_signal = (res > 1000) ? 1 : 0;
 10409  001D74  0100               	movlb	0	; () banked
 10410  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10411  001D78  D00A               	goto	u5550
 10412  001D7A  0EE9               	movlw	233
 10413  001D7C  0100               	movlb	0	; () banked
 10414  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10415  001D80  0E03               	movlw	3
 10416  001D82  0100               	movlb	0	; () banked
 10417  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10418  001D86  A0D8               	btfss	status,0,c
 10419  001D88  D002               	goto	u5550
 10420  001D8A  0E01               	movlw	1
 10421  001D8C  D001               	goto	u5560
 10422  001D8E                     u5550:
 10423  001D8E  0E00               	movlw	0
 10424  001D90                     u5560:
 10425  001D90  0100               	movlb	0	; () banked
 10426  001D92  6FDE               	movwf	_IR_signal& (0+255),b
 10427  001D94  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10428                           
 10429                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10430  001D96  0E01               	movlw	1
 10431  001D98  EC24  F026         	call	_lcdInst
 10432  001D9C  0E68               	movlw	104
 10433  001D9E  0100               	movlb	0	; () banked
 10434  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10435  001DA2  0EE4               	movlw	228
 10436  001DA4                     u8367:
 10437  001DA4  2EE8               	decfsz	wreg,f,c
 10438  001DA6  D7FE               	bra	u8367
 10439  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10440  001DAA  D7FC               	bra	u8367
 10441  001DAC  F000               	nop	
 10442  001DAE  0E80               	movlw	128
 10443  001DB0  EC24  F026         	call	_lcdInst
 10444                           
 10445                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10446  001DB4  0E5A               	movlw	low STR_80
 10447  001DB6  0100               	movlb	0	; () banked
 10448  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10449  001DBA  0EFE               	movlw	high STR_80
 10450  001DBC  0100               	movlb	0	; () banked
 10451  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10452  001DC0  C0DE  F090         	movff	_IR_signal,?_printf+2
 10453  001DC4  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10454  001DC8  ECB8  F008         	call	_printf	;wreg free
 10455                           
 10456                           ;Test.c: 149: lcdInst(0b11000000);;
 10457  001DCC  0EC0               	movlw	192
 10458  001DCE  EC24  F026         	call	_lcdInst
 10459                           
 10460                           ;Test.c: 150: printf("%d", res);
 10461  001DD2  0E16               	movlw	low (STR_27+14)
 10462  001DD4  0100               	movlb	0	; () banked
 10463  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10464  001DD8  0EFE               	movlw	high (STR_27+14)
 10465  001DDA  0100               	movlb	0	; () banked
 10466  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10467  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10468  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10469  001DE6  ECB8  F008         	call	_printf	;wreg free
 10470                           
 10471                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10472  001DEA  0E05               	movlw	5
 10473  001DEC  0100               	movlb	0	; () banked
 10474  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10475  001DF0  0E0F               	movlw	15
 10476  001DF2  0100               	movlb	0	; () banked
 10477  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10478  001DF6  0EF1               	movlw	241
 10479  001DF8                     u8377:
 10480  001DF8  2EE8               	decfsz	wreg,f,c
 10481  001DFA  D7FE               	bra	u8377
 10482  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10483  001DFE  D7FC               	bra	u8377
 10484  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10485  001E02  D7FA               	bra	u8377
 10486  001E04                     l6973:
 10487  001E04  A281               	btfss	3969,1,c	;volatile
 10488  001E06  D7A2               	goto	l6955
 10489                           
 10490                           ;Test.c: 152: }
 10491                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10492  001E08  9A8B               	bcf	3979,5,c	;volatile
 10493                           
 10494                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10495  001E0A  0E01               	movlw	1
 10496  001E0C  EC24  F026         	call	_lcdInst
 10497  001E10  0E68               	movlw	104
 10498  001E12  0100               	movlb	0	; () banked
 10499  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10500  001E16  0EE4               	movlw	228
 10501  001E18                     u8387:
 10502  001E18  2EE8               	decfsz	wreg,f,c
 10503  001E1A  D7FE               	bra	u8387
 10504  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10505  001E1E  D7FC               	bra	u8387
 10506  001E20  F000               	nop	
 10507  001E22  0E80               	movlw	128
 10508  001E24  EC24  F026         	call	_lcdInst
 10509                           
 10510                           ;Test.c: 162: printf("TST: MAGNETISM");
 10511  001E28  0E87               	movlw	low STR_82
 10512  001E2A  0100               	movlb	0	; () banked
 10513  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10514  001E2E  0EFE               	movlw	high STR_82
 10515  001E30  0100               	movlb	0	; () banked
 10516  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10517  001E34  ECB8  F008         	call	_printf	;wreg free
 10518                           
 10519                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10520  001E38  0E05               	movlw	5
 10521  001E3A  0100               	movlb	0	; () banked
 10522  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10523  001E3E  0E0F               	movlw	15
 10524  001E40  0100               	movlb	0	; () banked
 10525  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10526  001E44  0EF1               	movlw	241
 10527  001E46                     u8397:
 10528  001E46  2EE8               	decfsz	wreg,f,c
 10529  001E48  D7FE               	bra	u8397
 10530  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10531  001E4C  D7FC               	bra	u8397
 10532  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10533  001E50  D7FA               	bra	u8397
 10534                           
 10535                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10536  001E52  D021               	goto	l6991
 10537  001E54                     l6985:
 10538                           
 10539                           ;Test.c: 165: readMAG();
 10540  001E54  ECEE  F022         	call	_readMAG	;wreg free
 10541                           
 10542                           ;Test.c: 166: lcdInst(0b10000000);;
 10543  001E58  0E80               	movlw	128
 10544  001E5A  EC24  F026         	call	_lcdInst
 10545                           
 10546                           ;Test.c: 167: lcdInst(0b11000000);;
 10547  001E5E  0EC0               	movlw	192
 10548  001E60  EC24  F026         	call	_lcdInst
 10549                           
 10550                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10551  001E64  0E2A               	movlw	low STR_83
 10552  001E66  0100               	movlb	0	; () banked
 10553  001E68  6F8E               	movwf	printf@f& (0+255),b
 10554  001E6A  0EFE               	movlw	high STR_83
 10555  001E6C  0100               	movlb	0	; () banked
 10556  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10557  001E70  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10558  001E74  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10559  001E78  ECB8  F008         	call	_printf	;wreg free
 10560                           
 10561                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10562  001E7C  0E05               	movlw	5
 10563  001E7E  0100               	movlb	0	; () banked
 10564  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10565  001E82  0E0F               	movlw	15
 10566  001E84  0100               	movlb	0	; () banked
 10567  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10568  001E88  0EF1               	movlw	241
 10569  001E8A                     u8407:
 10570  001E8A  2EE8               	decfsz	wreg,f,c
 10571  001E8C  D7FE               	bra	u8407
 10572  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10573  001E90  D7FC               	bra	u8407
 10574  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10575  001E94  D7FA               	bra	u8407
 10576  001E96                     l6991:
 10577  001E96  A281               	btfss	3969,1,c	;volatile
 10578  001E98  D7DD               	goto	l6985
 10579                           
 10580                           ;Test.c: 170: }
 10581                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10582  001E9A  0E01               	movlw	1
 10583  001E9C  EC24  F026         	call	_lcdInst
 10584  001EA0  0E68               	movlw	104
 10585  001EA2  0100               	movlb	0	; () banked
 10586  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10587  001EA6  0EE4               	movlw	228
 10588  001EA8                     u8417:
 10589  001EA8  2EE8               	decfsz	wreg,f,c
 10590  001EAA  D7FE               	bra	u8417
 10591  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10592  001EAE  D7FC               	bra	u8417
 10593  001EB0  F000               	nop	
 10594  001EB2  0E80               	movlw	128
 10595  001EB4  EC24  F026         	call	_lcdInst
 10596                           
 10597                           ;Test.c: 176: printf("TST: COND");
 10598  001EB8  0E87               	movlw	low STR_84
 10599  001EBA  0100               	movlb	0	; () banked
 10600  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10601  001EBE  0EFF               	movlw	high STR_84
 10602  001EC0  0100               	movlb	0	; () banked
 10603  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10604  001EC4  ECB8  F008         	call	_printf	;wreg free
 10605                           
 10606                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10607  001EC8  0E05               	movlw	5
 10608  001ECA  0100               	movlb	0	; () banked
 10609  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10610  001ECE  0E0F               	movlw	15
 10611  001ED0  0100               	movlb	0	; () banked
 10612  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10613  001ED4  0EF1               	movlw	241
 10614  001ED6                     u8427:
 10615  001ED6  2EE8               	decfsz	wreg,f,c
 10616  001ED8  D7FE               	bra	u8427
 10617  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10618  001EDC  D7FC               	bra	u8427
 10619  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10620  001EE0  D7FA               	bra	u8427
 10621  001EE2                     l7003:
 10622                           
 10623                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10624  001EE2  0E01               	movlw	1
 10625  001EE4  EC24  F026         	call	_lcdInst
 10626  001EE8  0E68               	movlw	104
 10627  001EEA  0100               	movlb	0	; () banked
 10628  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10629  001EEE  0EE4               	movlw	228
 10630  001EF0                     u8437:
 10631  001EF0  2EE8               	decfsz	wreg,f,c
 10632  001EF2  D7FE               	bra	u8437
 10633  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10634  001EF6  D7FC               	bra	u8437
 10635  001EF8  F000               	nop	
 10636  001EFA  0E80               	movlw	128
 10637  001EFC  EC24  F026         	call	_lcdInst
 10638                           
 10639                           ;Test.c: 180: printf("TST: COND");
 10640  001F00  0E87               	movlw	low STR_84
 10641  001F02  0100               	movlb	0	; () banked
 10642  001F04  6F8E               	movwf	printf@f& (0+255),b
 10643  001F06  0EFF               	movlw	high STR_84
 10644  001F08  0100               	movlb	0	; () banked
 10645  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10646  001F0C  ECB8  F008         	call	_printf	;wreg free
 10647                           
 10648                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10649  001F10  D01B               	goto	l7015
 10650  001F12                     l7011:
 10651                           
 10652                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10653  001F12  0E80               	movlw	128
 10654  001F14  EC24  F026         	call	_lcdInst
 10655  001F18  0EC0               	movlw	192
 10656  001F1A  EC24  F026         	call	_lcdInst
 10657                           
 10658                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10659  001F1E  0EA5               	movlw	low STR_86
 10660  001F20  0100               	movlb	0	; () banked
 10661  001F22  6F8E               	movwf	printf@f& (0+255),b
 10662  001F24  0EFF               	movlw	high STR_86
 10663  001F26  0100               	movlb	0	; () banked
 10664  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10665  001F2A  A480               	btfss	3968,2,c	;volatile
 10666  001F2C  D004               	goto	u5590
 10667  001F2E  0100               	movlb	0	; () banked
 10668  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10669  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10670  001F34  D002               	goto	u5598
 10671  001F36                     u5590:
 10672  001F36  0100               	movlb	0	; () banked
 10673  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10674  001F3A                     u5598:
 10675  001F3A  0100               	movlb	0	; () banked
 10676  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10677  001F3E  0100               	movlb	0	; () banked
 10678  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10679  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10680  001F44  ECB8  F008         	call	_printf	;wreg free
 10681  001F48                     l7015:
 10682  001F48  A281               	btfss	3969,1,c	;volatile
 10683  001F4A  D7E3               	goto	l7011
 10684                           
 10685                           ;Test.c: 187: }
 10686                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10687  001F4C  3881               	swapf	3969,w,c	;volatile
 10688  001F4E  0B0F               	andlw	15
 10689  001F50  0A0F               	xorlw	15
 10690  001F52  B4D8               	btfsc	status,2,c
 10691  001F54  0012               	return	
 10692                           
 10693                           ;Test.c: 191: else{
 10694                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10695                           
 10696                           ;Test.c: 190: }
 10697                           
 10698                           ;Test.c: 189: break;
 10699  001F56  8689               	bsf	3977,3,c	;volatile
 10700                           
 10701                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10702  001F58  D01B               	goto	l7027
 10703  001F5A                     l7023:
 10704                           
 10705                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10706  001F5A  0E80               	movlw	128
 10707  001F5C  EC24  F026         	call	_lcdInst
 10708  001F60  0EC0               	movlw	192
 10709  001F62  EC24  F026         	call	_lcdInst
 10710                           
 10711                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10712  001F66  0EA5               	movlw	low STR_86
 10713  001F68  0100               	movlb	0	; () banked
 10714  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10715  001F6C  0EFF               	movlw	high STR_86
 10716  001F6E  0100               	movlb	0	; () banked
 10717  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10718  001F72  A480               	btfss	3968,2,c	;volatile
 10719  001F74  D004               	goto	u5620
 10720  001F76  0100               	movlb	0	; () banked
 10721  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10722  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10723  001F7C  D002               	goto	u5628
 10724  001F7E                     u5620:
 10725  001F7E  0100               	movlb	0	; () banked
 10726  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10727  001F82                     u5628:
 10728  001F82  0100               	movlb	0	; () banked
 10729  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10730  001F86  0100               	movlb	0	; () banked
 10731  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10732  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10733  001F8C  ECB8  F008         	call	_printf	;wreg free
 10734  001F90                     l7027:
 10735  001F90  B281               	btfsc	3969,1,c	;volatile
 10736  001F92  D7E3               	goto	l7023
 10737                           
 10738                           ;Test.c: 197: }
 10739                           ;Test.c: 198: LATAbits.LATA3 = !1;
 10740  001F94  9689               	bcf	3977,3,c	;volatile
 10741  001F96  D7A5               	goto	l7003
 10742  001F98                     __end_of_sensorTest:
 10743                           	opt stack 0
 10744                           tblptru	equ	0xFF8
 10745                           tblptrh	equ	0xFF7
 10746                           tblptrl	equ	0xFF6
 10747                           tablat	equ	0xFF5
 10748                           prodh	equ	0xFF4
 10749                           prodl	equ	0xFF3
 10750                           intcon	equ	0xFF2
 10751                           intcon2	equ	0xFF1
 10752                           intcon3	equ	0xFF0
 10753                           postinc0	equ	0xFEE
 10754                           wreg	equ	0xFE8
 10755                           postdec1	equ	0xFE5
 10756                           fsr1l	equ	0xFE1
 10757                           indf2	equ	0xFDF
 10758                           postinc2	equ	0xFDE
 10759                           postdec2	equ	0xFDD
 10760                           fsr2h	equ	0xFDA
 10761                           fsr2l	equ	0xFD9
 10762                           status	equ	0xFD8
 10763                           
 10764 ;; *************** function _readMAG *****************
 10765 ;; Defined at:
 10766 ;;		line 29 in file "ADCFunctionality.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  res             2    4[BANK0 ] int 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  1    wreg      void 
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;Total ram usage:        4 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    8
 10787 ;; This function calls:
 10788 ;;		_readADC
 10789 ;; This function is called by:
 10790 ;;		_getMAG
 10791 ;;		_sensorTest
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text38
 10796  0045DC                     __ptext38:
 10797                           	opt stack 0
 10798  0045DC                     _readMAG:
 10799                           	opt stack 19
 10800                           
 10801                           ;ADCFunctionality.c: 30: readADC(1);
 10802                           
 10803                           ;incstack = 0
 10804  0045DC  0E01               	movlw	1
 10805  0045DE  EC2B  F025         	call	_readADC
 10806                           
 10807                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10808  0045E2  50C3               	movf	4035,w,c	;volatile
 10809  0045E4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10810  0045E8  0100               	movlb	0	; () banked
 10811  0045EA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10812  0045EC  C082  F083         	movff	??_readMAG,??_readMAG+1
 10813  0045F0  0100               	movlb	0	; () banked
 10814  0045F2  6B82               	clrf	??_readMAG& (0+255),b
 10815  0045F4  0100               	movlb	0	; () banked
 10816  0045F6  1182               	iorwf	??_readMAG& (0+255),w,b
 10817  0045F8  0100               	movlb	0	; () banked
 10818  0045FA  6F84               	movwf	readMAG@res& (0+255),b
 10819  0045FC  0100               	movlb	0	; () banked
 10820  0045FE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10821  004600  0100               	movlb	0	; () banked
 10822  004602  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10826  004604  0100               	movlb	0	; () banked
 10827  004606  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10828  004608  D008               	goto	u4181
 10829  00460A  0100               	movlb	0	; () banked
 10830  00460C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10831  00460E  E107               	bnz	u4180
 10832  004610  0E96               	movlw	150
 10833  004612  0100               	movlb	0	; () banked
 10834  004614  5D84               	subwf	readMAG@res& (0+255),w,b
 10835  004616  B0D8               	btfsc	status,0,c
 10836  004618  D002               	goto	u4180
 10837  00461A                     u4181:
 10838  00461A  0E01               	movlw	1
 10839  00461C  D001               	goto	u4190
 10840  00461E                     u4180:
 10841  00461E  0E00               	movlw	0
 10842  004620                     u4190:
 10843  004620  0100               	movlb	0	; () banked
 10844  004622  6FE0               	movwf	_MAG_signal& (0+255),b
 10845  004624  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 10846                           
 10847                           ; BSR set to: 0
 10848  004626  0012               	return		;funcret
 10849  004628                     __end_of_readMAG:
 10850                           	opt stack 0
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           intcon2	equ	0xFF1
 10859                           intcon3	equ	0xFF0
 10860                           postinc0	equ	0xFEE
 10861                           wreg	equ	0xFE8
 10862                           postdec1	equ	0xFE5
 10863                           fsr1l	equ	0xFE1
 10864                           indf2	equ	0xFDF
 10865                           postinc2	equ	0xFDE
 10866                           postdec2	equ	0xFDD
 10867                           fsr2h	equ	0xFDA
 10868                           fsr2l	equ	0xFD9
 10869                           status	equ	0xFD8
 10870                           
 10871 ;; *************** function _readADC *****************
 10872 ;; Defined at:
 10873 ;;		line 15 in file "ADCFunctionality.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;  channel         1    wreg     unsigned char 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  channel         1    1[BANK0 ] unsigned char 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;                  1    wreg      void 
 10880 ;; Registers used:
 10881 ;;		wreg, status,2, status,0, cstack
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10891 ;;Total ram usage:        2 bytes
 10892 ;; Hardware stack levels used:    1
 10893 ;; Hardware stack levels required when called:    7
 10894 ;; This function calls:
 10895 ;;		Nothing
 10896 ;; This function is called by:
 10897 ;;		_readIR
 10898 ;;		_readMAG
 10899 ;;		_sensorTest
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text39
 10904  004A56                     __ptext39:
 10905                           	opt stack 0
 10906  004A56                     _readADC:
 10907                           	opt stack 20
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;incstack = 0
 10911                           ;readADC@channel stored from wreg
 10912  004A56  0100               	movlb	0	; () banked
 10913  004A58  6F81               	movwf	readADC@channel& (0+255),b
 10914                           
 10915                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10916  004A5A  0100               	movlb	0	; () banked
 10917  004A5C  4581               	rlncf	readADC@channel& (0+255),w,b
 10918  004A5E  46E8               	rlncf	wreg,f,c
 10919  004A60  0BFC               	andlw	252
 10920  004A62  6EC2               	movwf	4034,c	;volatile
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10924  004A64  80C2               	bsf	4034,0,c	;volatile
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10928  004A66  82C2               	bsf	4034,1,c	;volatile
 10929                           
 10930                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10931  004A68  D009               	goto	l5515
 10932  004A6A                     l5513:
 10933  004A6A  0E34               	movlw	52
 10934  004A6C  0100               	movlb	0	; () banked
 10935  004A6E  6F80               	movwf	??_readADC& (0+255),b
 10936  004A70  0EF1               	movlw	241
 10937  004A72                     u8447:
 10938  004A72  2EE8               	decfsz	wreg,f,c
 10939  004A74  D7FE               	bra	u8447
 10940  004A76  2F80               	decfsz	??_readADC& (0+255),f,b
 10941  004A78  D7FC               	bra	u8447
 10942  004A7A  D000               	nop2	
 10943  004A7C                     l5515:
 10944  004A7C  A2C2               	btfss	4034,1,c	;volatile
 10945  004A7E  0012               	return	
 10946  004A80  D7F4               	goto	l5513
 10947  004A82                     __end_of_readADC:
 10948                           	opt stack 0
 10949                           tblptru	equ	0xFF8
 10950                           tblptrh	equ	0xFF7
 10951                           tblptrl	equ	0xFF6
 10952                           tablat	equ	0xFF5
 10953                           prodh	equ	0xFF4
 10954                           prodl	equ	0xFF3
 10955                           intcon	equ	0xFF2
 10956                           intcon2	equ	0xFF1
 10957                           intcon3	equ	0xFF0
 10958                           postinc0	equ	0xFEE
 10959                           wreg	equ	0xFE8
 10960                           postdec1	equ	0xFE5
 10961                           fsr1l	equ	0xFE1
 10962                           indf2	equ	0xFDF
 10963                           postinc2	equ	0xFDE
 10964                           postdec2	equ	0xFDD
 10965                           fsr2h	equ	0xFDA
 10966                           fsr2l	equ	0xFD9
 10967                           status	equ	0xFD8
 10968                           
 10969 ;; *************** function _algorithmTest *****************
 10970 ;; Defined at:
 10971 ;;		line 80 in file "Test.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      void 
 10978 ;; Registers used:
 10979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;Total ram usage:        2 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:   10
 10992 ;; This function calls:
 10993 ;;		_lcdInst
 10994 ;;		_printf
 10995 ;; This function is called by:
 10996 ;;		_Test
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text40
 11001  0038CC                     __ptext40:
 11002                           	opt stack 0
 11003  0038CC                     _algorithmTest:
 11004                           	opt stack 19
 11005                           
 11006                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11007                           
 11008                           ;incstack = 0
 11009  0038CC  0E01               	movlw	1
 11010  0038CE  EC24  F026         	call	_lcdInst
 11011  0038D2  0E68               	movlw	104
 11012  0038D4  0100               	movlb	0	; () banked
 11013  0038D6  6FAB               	movwf	??_algorithmTest& (0+255),b
 11014  0038D8  0EE4               	movlw	228
 11015  0038DA                     u8457:
 11016  0038DA  2EE8               	decfsz	wreg,f,c
 11017  0038DC  D7FE               	bra	u8457
 11018  0038DE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11019  0038E0  D7FC               	bra	u8457
 11020  0038E2  F000               	nop	
 11021  0038E4  0E80               	movlw	128
 11022  0038E6  EC24  F026         	call	_lcdInst
 11023                           
 11024                           ;Test.c: 83: printf("ALGORITHM TEST");
 11025  0038EA  0ED2               	movlw	low STR_70
 11026  0038EC  0100               	movlb	0	; () banked
 11027  0038EE  6F8E               	movwf	printf@f& (0+255),b
 11028  0038F0  0EFE               	movlw	high STR_70
 11029  0038F2  0100               	movlb	0	; () banked
 11030  0038F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11031  0038F6  ECB8  F008         	call	_printf	;wreg free
 11032                           
 11033                           ;Test.c: 84: lcdInst(0b11000000);;
 11034  0038FA  0EC0               	movlw	192
 11035  0038FC  EC24  F026         	call	_lcdInst
 11036                           
 11037                           ;Test.c: 85: printf("PUSH TO START");
 11038  003900  0E0B               	movlw	low STR_71
 11039  003902  0100               	movlb	0	; () banked
 11040  003904  6F8E               	movwf	printf@f& (0+255),b
 11041  003906  0EFF               	movlw	high STR_71
 11042  003908  0100               	movlb	0	; () banked
 11043  00390A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11044  00390C  ECB8  F008         	call	_printf	;wreg free
 11045                           
 11046                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11047  003910  0E05               	movlw	5
 11048  003912  0100               	movlb	0	; () banked
 11049  003914  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11050  003916  0E0F               	movlw	15
 11051  003918  0100               	movlb	0	; () banked
 11052  00391A  6FAB               	movwf	??_algorithmTest& (0+255),b
 11053  00391C  0EF1               	movlw	241
 11054  00391E                     u8467:
 11055  00391E  2EE8               	decfsz	wreg,f,c
 11056  003920  D7FE               	bra	u8467
 11057  003922  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11058  003924  D7FC               	bra	u8467
 11059  003926  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11060  003928  D7FA               	bra	u8467
 11061  00392A                     l1090:
 11062  00392A  A281               	btfss	3969,1,c	;volatile
 11063  00392C  D7FE               	goto	l1090
 11064  00392E                     l1093:
 11065  00392E  B281               	btfsc	3969,1,c	;volatile
 11066  003930  D7FE               	goto	l1093
 11067                           
 11068                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11069  003932  0E01               	movlw	1
 11070  003934  EC24  F026         	call	_lcdInst
 11071  003938  0E68               	movlw	104
 11072  00393A  0100               	movlb	0	; () banked
 11073  00393C  6FAB               	movwf	??_algorithmTest& (0+255),b
 11074  00393E  0EE4               	movlw	228
 11075  003940                     u8477:
 11076  003940  2EE8               	decfsz	wreg,f,c
 11077  003942  D7FE               	bra	u8477
 11078  003944  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11079  003946  D7FC               	bra	u8477
 11080  003948  F000               	nop	
 11081  00394A  0E80               	movlw	128
 11082  00394C  EC24  F026         	call	_lcdInst
 11083                           
 11084                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11085  003950  0E5F               	movlw	low STR_72
 11086  003952  0100               	movlb	0	; () banked
 11087  003954  6F8E               	movwf	printf@f& (0+255),b
 11088  003956  0EFC               	movlw	high STR_72
 11089  003958  0100               	movlb	0	; () banked
 11090  00395A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11091  00395C  ECB8  F008         	call	_printf	;wreg free
 11092                           
 11093                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11094  003960  0EEF               	movlw	low STR_73
 11095  003962  0100               	movlb	0	; () banked
 11096  003964  6F8E               	movwf	printf@f& (0+255),b
 11097  003966  0EFE               	movlw	high STR_73
 11098  003968  0100               	movlb	0	; () banked
 11099  00396A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11100  00396C  ECB8  F008         	call	_printf	;wreg free
 11101                           
 11102                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11103  003970  0E4F               	movlw	low STR_74
 11104  003972  0100               	movlb	0	; () banked
 11105  003974  6F8E               	movwf	printf@f& (0+255),b
 11106  003976  0EFF               	movlw	high STR_74
 11107  003978  0100               	movlb	0	; () banked
 11108  00397A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11109  00397C  ECB8  F008         	call	_printf	;wreg free
 11110                           
 11111                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11112  003980  0EB4               	movlw	low STR_75
 11113  003982  0100               	movlb	0	; () banked
 11114  003984  6F8E               	movwf	printf@f& (0+255),b
 11115  003986  0EFE               	movlw	high STR_75
 11116  003988  0100               	movlb	0	; () banked
 11117  00398A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11118  00398C  ECB8  F008         	call	_printf	;wreg free
 11119                           
 11120                           ;Test.c: 121: printf("ALG5: NO CANS");
 11121  003990  0EFD               	movlw	low STR_76
 11122  003992  0100               	movlb	0	; () banked
 11123  003994  6F8E               	movwf	printf@f& (0+255),b
 11124  003996  0EFE               	movlw	high STR_76
 11125  003998  0100               	movlb	0	; () banked
 11126  00399A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11127  00399C  ECB8  F008         	call	_printf	;wreg free
 11128  0039A0  0012               	return		;funcret
 11129  0039A2                     __end_of_algorithmTest:
 11130                           	opt stack 0
 11131                           tblptru	equ	0xFF8
 11132                           tblptrh	equ	0xFF7
 11133                           tblptrl	equ	0xFF6
 11134                           tablat	equ	0xFF5
 11135                           prodh	equ	0xFF4
 11136                           prodl	equ	0xFF3
 11137                           intcon	equ	0xFF2
 11138                           intcon2	equ	0xFF1
 11139                           intcon3	equ	0xFF0
 11140                           postinc0	equ	0xFEE
 11141                           wreg	equ	0xFE8
 11142                           postdec1	equ	0xFE5
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           fsr2h	equ	0xFDA
 11148                           fsr2l	equ	0xFD9
 11149                           status	equ	0xFD8
 11150                           
 11151 ;; *************** function _actuatorTest *****************
 11152 ;; Defined at:
 11153 ;;		line 203 in file "Test.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;		None
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  i               1   45[BANK0 ] unsigned char 
 11158 ;;  i               1   67[BANK0 ] unsigned char 
 11159 ;;  i               1   66[BANK0 ] unsigned char 
 11160 ;;  i               1   65[BANK0 ] unsigned char 
 11161 ;;  i               1   64[BANK0 ] unsigned char 
 11162 ;;  i               1   63[BANK0 ] unsigned char 
 11163 ;;  i               1   62[BANK0 ] unsigned char 
 11164 ;;  i               1   61[BANK0 ] unsigned char 
 11165 ;;  i               1   60[BANK0 ] unsigned char 
 11166 ;;  i               1   59[BANK0 ] unsigned char 
 11167 ;;  i               1   58[BANK0 ] unsigned char 
 11168 ;;  i               1   57[BANK0 ] unsigned char 
 11169 ;;  i               1   56[BANK0 ] unsigned char 
 11170 ;;  i               1   55[BANK0 ] unsigned char 
 11171 ;;  i               1   54[BANK0 ] unsigned char 
 11172 ;;  i               1   53[BANK0 ] unsigned char 
 11173 ;;  i               1   52[BANK0 ] unsigned char 
 11174 ;;  i               1   51[BANK0 ] unsigned char 
 11175 ;;  i               1   50[BANK0 ] unsigned char 
 11176 ;;  i               1   49[BANK0 ] unsigned char 
 11177 ;;  i               1   48[BANK0 ] unsigned char 
 11178 ;;  i               1   47[BANK0 ] unsigned char 
 11179 ;;  i               1   46[BANK0 ] unsigned char 
 11180 ;;  i               2   68[BANK0 ] int 
 11181 ;; Return value:  Size  Location     Type
 11182 ;;                  1    wreg      void 
 11183 ;; Registers used:
 11184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11185 ;; Tracked objects:
 11186 ;;		On entry : 0/0
 11187 ;;		On exit  : 0/0
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;Total ram usage:       27 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; Hardware stack levels required when called:   10
 11197 ;; This function calls:
 11198 ;;		_lcdInst
 11199 ;;		_printf
 11200 ;;		_updateServoPosition
 11201 ;; This function is called by:
 11202 ;;		_Test
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text41
 11207  000012                     __ptext41:
 11208                           	opt stack 0
 11209  000012                     _actuatorTest:
 11210                           	opt stack 19
 11211                           
 11212                           ;Test.c: 205: int i = 0;
 11213                           
 11214                           ;incstack = 0
 11215  000012  0E00               	movlw	0
 11216  000014  0100               	movlb	0	; () banked
 11217  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11218  000018  0E00               	movlw	0
 11219  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11223  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11227  00001E  0E01               	movlw	1
 11228  000020  EC24  F026         	call	_lcdInst
 11229  000024  0E68               	movlw	104
 11230  000026  0100               	movlb	0	; () banked
 11231  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11232  00002A  0EE4               	movlw	228
 11233  00002C                     u8487:
 11234  00002C  2EE8               	decfsz	wreg,f,c
 11235  00002E  D7FE               	bra	u8487
 11236  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11237  000032  D7FC               	bra	u8487
 11238  000034  F000               	nop	
 11239  000036  0E80               	movlw	128
 11240  000038  EC24  F026         	call	_lcdInst
 11241                           
 11242                           ;Test.c: 209: printf("ACTUATORS");
 11243  00003C  0E91               	movlw	low STR_88
 11244  00003E  0100               	movlb	0	; () banked
 11245  000040  6F8E               	movwf	printf@f& (0+255),b
 11246  000042  0EFF               	movlw	high STR_88
 11247  000044  0100               	movlb	0	; () banked
 11248  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11249  000048  ECB8  F008         	call	_printf	;wreg free
 11250                           
 11251                           ;Test.c: 210: lcdInst(0b11000000);;
 11252  00004C  0EC0               	movlw	192
 11253  00004E  EC24  F026         	call	_lcdInst
 11254                           
 11255                           ;Test.c: 211: printf("PUSH TO START");
 11256  000052  0E0B               	movlw	low STR_71
 11257  000054  0100               	movlb	0	; () banked
 11258  000056  6F8E               	movwf	printf@f& (0+255),b
 11259  000058  0EFF               	movlw	high STR_71
 11260  00005A  0100               	movlb	0	; () banked
 11261  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11262  00005E  ECB8  F008         	call	_printf	;wreg free
 11263                           
 11264                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11265  000062  0E05               	movlw	5
 11266  000064  0100               	movlb	0	; () banked
 11267  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11268  000068  0E0F               	movlw	15
 11269  00006A  0100               	movlb	0	; () banked
 11270  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11271  00006E  0EF1               	movlw	241
 11272  000070                     u8497:
 11273  000070  2EE8               	decfsz	wreg,f,c
 11274  000072  D7FE               	bra	u8497
 11275  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11276  000076  D7FC               	bra	u8497
 11277  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11278  00007A  D7FA               	bra	u8497
 11279  00007C                     l1125:
 11280  00007C  A281               	btfss	3969,1,c	;volatile
 11281  00007E  D7FE               	goto	l1125
 11282  000080                     l1128:
 11283  000080  B281               	btfsc	3969,1,c	;volatile
 11284  000082  D7FE               	goto	l1128
 11285                           
 11286                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11287  000084  0E01               	movlw	1
 11288  000086  EC24  F026         	call	_lcdInst
 11289  00008A  0E68               	movlw	104
 11290  00008C  0100               	movlb	0	; () banked
 11291  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11292  000090  0EE4               	movlw	228
 11293  000092                     u8507:
 11294  000092  2EE8               	decfsz	wreg,f,c
 11295  000094  D7FE               	bra	u8507
 11296  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11297  000098  D7FC               	bra	u8507
 11298  00009A  F000               	nop	
 11299  00009C  0E80               	movlw	128
 11300  00009E  EC24  F026         	call	_lcdInst
 11301                           
 11302                           ;Test.c: 220: printf("TST: DC MOTORS");
 11303  0000A2  0EC3               	movlw	low STR_90
 11304  0000A4  0100               	movlb	0	; () banked
 11305  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11306  0000A8  0EFE               	movlw	high STR_90
 11307  0000AA  0100               	movlb	0	; () banked
 11308  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11309  0000AE  ECB8  F008         	call	_printf	;wreg free
 11310                           
 11311                           ;Test.c: 221: lcdInst(0b11000000);;
 11312  0000B2  0EC0               	movlw	192
 11313  0000B4  EC24  F026         	call	_lcdInst
 11314                           
 11315                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11316  0000B8  0EE1               	movlw	low STR_91
 11317  0000BA  0100               	movlb	0	; () banked
 11318  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11319  0000BE  0EFE               	movlw	high STR_91
 11320  0000C0  0100               	movlb	0	; () banked
 11321  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11322  0000C4  ECB8  F008         	call	_printf	;wreg free
 11323                           
 11324                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11325  0000C8  8A89               	bsf	3977,5,c	;volatile
 11326                           
 11327                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11328  0000CA  0E00               	movlw	0
 11329  0000CC  0100               	movlb	0	; () banked
 11330  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11331  0000D0  0E00               	movlw	0
 11332  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11333                           
 11334                           ; BSR set to: 0
 11335  0000D4  0100               	movlb	0	; () banked
 11336  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11337  0000D8  D008               	goto	l7067
 11338  0000DA  0100               	movlb	0	; () banked
 11339  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11340  0000DE  E123               	bnz	l1132
 11341  0000E0  0E05               	movlw	5
 11342  0000E2  0100               	movlb	0	; () banked
 11343  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11344  0000E6  B0D8               	btfsc	status,0,c
 11345  0000E8  D01E               	goto	l1132
 11346  0000EA                     l7067:
 11347                           
 11348                           ; BSR set to: 0
 11349  0000EA  0E00               	movlw	0
 11350  0000EC  0100               	movlb	0	; () banked
 11351  0000EE  6FAD               	movwf	actuatorTest@i_1645& (0+255),b
 11352  0000F0                     l7069:
 11353                           
 11354                           ; BSR set to: 0
 11355  0000F0  0E63               	movlw	99
 11356  0000F2  0100               	movlb	0	; () banked
 11357  0000F4  65AD               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11358  0000F6  D001               	goto	l7073
 11359  0000F8  D00C               	goto	l7077
 11360  0000FA                     l7073:
 11361                           
 11362                           ; BSR set to: 0
 11363  0000FA  0E68               	movlw	104
 11364  0000FC  0100               	movlb	0	; () banked
 11365  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11366  000100  0EE4               	movlw	228
 11367  000102                     u8517:
 11368  000102  2EE8               	decfsz	wreg,f,c
 11369  000104  D7FE               	bra	u8517
 11370  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11371  000108  D7FC               	bra	u8517
 11372  00010A  F000               	nop	
 11373  00010C  0100               	movlb	0	; () banked
 11374  00010E  2BAD               	incf	actuatorTest@i_1645& (0+255),f,b
 11375  000110  D7EF               	goto	l7069
 11376  000112                     l7077:
 11377                           
 11378                           ; BSR set to: 0
 11379  000112  0100               	movlb	0	; () banked
 11380  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11381  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11382                           
 11383                           ; BSR set to: 0
 11384  000118  0100               	movlb	0	; () banked
 11385  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11386  00011C  D7E6               	goto	l7067
 11387  00011E  0100               	movlb	0	; () banked
 11388  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11389  000122  E101               	bnz	u5690
 11390  000124  D7DD               	goto	L8
 11391  000126                     u5690:
 11392  000126                     l1132:
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11396  000126  9A89               	bcf	3977,5,c	;volatile
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11400  000128  0E01               	movlw	1
 11401  00012A  EC24  F026         	call	_lcdInst
 11402  00012E  0E68               	movlw	104
 11403  000130  0100               	movlb	0	; () banked
 11404  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11405  000134  0EE4               	movlw	228
 11406  000136                     u8527:
 11407  000136  2EE8               	decfsz	wreg,f,c
 11408  000138  D7FE               	bra	u8527
 11409  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11410  00013C  D7FC               	bra	u8527
 11411  00013E  F000               	nop	
 11412  000140  0E80               	movlw	128
 11413  000142  EC24  F026         	call	_lcdInst
 11414                           
 11415                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11416  000146  0E70               	movlw	low STR_92
 11417  000148  0100               	movlb	0	; () banked
 11418  00014A  6F8E               	movwf	printf@f& (0+255),b
 11419  00014C  0EFC               	movlw	high STR_92
 11420  00014E  0100               	movlb	0	; () banked
 11421  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11422  000152  ECB8  F008         	call	_printf	;wreg free
 11423                           
 11424                           ;Test.c: 233: lcdInst(0b11000000);;
 11425  000156  0EC0               	movlw	192
 11426  000158  EC24  F026         	call	_lcdInst
 11427                           
 11428                           ;Test.c: 234: printf("PIN RA3...");
 11429  00015C  0E5B               	movlw	low STR_93
 11430  00015E  0100               	movlb	0	; () banked
 11431  000160  6F8E               	movwf	printf@f& (0+255),b
 11432  000162  0EFF               	movlw	high STR_93
 11433  000164  0100               	movlb	0	; () banked
 11434  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11435  000168  ECB8  F008         	call	_printf	;wreg free
 11436                           
 11437                           ;Test.c: 235: for(i=0;i<5;i++){
 11438  00016C  0E00               	movlw	0
 11439  00016E  0100               	movlb	0	; () banked
 11440  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11441  000172  0E00               	movlw	0
 11442  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11443                           
 11444                           ; BSR set to: 0
 11445  000176  0100               	movlb	0	; () banked
 11446  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11447  00017A  D008               	goto	l1135
 11448  00017C  0100               	movlb	0	; () banked
 11449  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11450  000180  E12C               	bnz	l1136
 11451  000182  0E05               	movlw	5
 11452  000184  0100               	movlb	0	; () banked
 11453  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11454  000188  B0D8               	btfsc	status,0,c
 11455  00018A  D027               	goto	l1136
 11456  00018C                     l1135:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11460  00018C  8689               	bsf	3977,3,c	;volatile
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11464  00018E  0E0D               	movlw	13
 11465  000190  0100               	movlb	0	; () banked
 11466  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11467  000194  0E2D               	movlw	45
 11468  000196  0100               	movlb	0	; () banked
 11469  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11470  00019A  0ED7               	movlw	215
 11471  00019C                     u8537:
 11472  00019C  2EE8               	decfsz	wreg,f,c
 11473  00019E  D7FE               	bra	u8537
 11474  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11475  0001A2  D7FC               	bra	u8537
 11476  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11477  0001A6  D7FA               	bra	u8537
 11478  0001A8  D000               	nop2	
 11479                           
 11480                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11481  0001AA  9689               	bcf	3977,3,c	;volatile
 11482                           
 11483                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11484  0001AC  0E1D               	movlw	29
 11485  0001AE  0100               	movlb	0	; () banked
 11486  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11487  0001B2  0E69               	movlw	105
 11488  0001B4  0100               	movlb	0	; () banked
 11489  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11490  0001B8  0EA5               	movlw	165
 11491  0001BA                     u8547:
 11492  0001BA  2EE8               	decfsz	wreg,f,c
 11493  0001BC  D7FE               	bra	u8547
 11494  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11495  0001C0  D7FC               	bra	u8547
 11496  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11497  0001C4  D7FA               	bra	u8547
 11498  0001C6  0100               	movlb	0	; () banked
 11499  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11500  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11501  0001CC  0100               	movlb	0	; () banked
 11502  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11503  0001D0  D7DD               	goto	l1135
 11504  0001D2  0100               	movlb	0	; () banked
 11505  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11506  0001D6  E101               	bnz	u5710
 11507  0001D8  D7D4               	goto	L9
 11508  0001DA                     u5710:
 11509  0001DA                     l1136:
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;Test.c: 240: }
 11513                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11514  0001DA  9689               	bcf	3977,3,c	;volatile
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11518  0001DC  0E01               	movlw	1
 11519  0001DE  EC24  F026         	call	_lcdInst
 11520  0001E2  0E68               	movlw	104
 11521  0001E4  0100               	movlb	0	; () banked
 11522  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11523  0001E8  0EE4               	movlw	228
 11524  0001EA                     u8557:
 11525  0001EA  2EE8               	decfsz	wreg,f,c
 11526  0001EC  D7FE               	bra	u8557
 11527  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11528  0001F0  D7FC               	bra	u8557
 11529  0001F2  F000               	nop	
 11530  0001F4  0E80               	movlw	128
 11531  0001F6  EC24  F026         	call	_lcdInst
 11532                           
 11533                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11534  0001FA  0E81               	movlw	low STR_94
 11535  0001FC  0100               	movlb	0	; () banked
 11536  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11537  000200  0EFC               	movlw	high STR_94
 11538  000202  0100               	movlb	0	; () banked
 11539  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11540  000206  ECB8  F008         	call	_printf	;wreg free
 11541                           
 11542                           ;Test.c: 249: lcdInst(0b11000000);;
 11543  00020A  0EC0               	movlw	192
 11544  00020C  EC24  F026         	call	_lcdInst
 11545                           
 11546                           ;Test.c: 250: printf("PIN RA4...");
 11547  000210  0E66               	movlw	low STR_95
 11548  000212  0100               	movlb	0	; () banked
 11549  000214  6F8E               	movwf	printf@f& (0+255),b
 11550  000216  0EFF               	movlw	high STR_95
 11551  000218  0100               	movlb	0	; () banked
 11552  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11553  00021C  ECB8  F008         	call	_printf	;wreg free
 11554                           
 11555                           ;Test.c: 251: for(i=0;i<5;i++){
 11556  000220  0E00               	movlw	0
 11557  000222  0100               	movlb	0	; () banked
 11558  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11559  000226  0E00               	movlw	0
 11560  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11561                           
 11562                           ; BSR set to: 0
 11563  00022A  0100               	movlb	0	; () banked
 11564  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11565  00022E  D008               	goto	l1137
 11566  000230  0100               	movlb	0	; () banked
 11567  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11568  000234  E12C               	bnz	l1138
 11569  000236  0E05               	movlw	5
 11570  000238  0100               	movlb	0	; () banked
 11571  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11572  00023C  B0D8               	btfsc	status,0,c
 11573  00023E  D027               	goto	l1138
 11574  000240                     l1137:
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11578  000240  8889               	bsf	3977,4,c	;volatile
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11582  000242  0E0D               	movlw	13
 11583  000244  0100               	movlb	0	; () banked
 11584  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11585  000248  0E2D               	movlw	45
 11586  00024A  0100               	movlb	0	; () banked
 11587  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11588  00024E  0ED7               	movlw	215
 11589  000250                     u8567:
 11590  000250  2EE8               	decfsz	wreg,f,c
 11591  000252  D7FE               	bra	u8567
 11592  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11593  000256  D7FC               	bra	u8567
 11594  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11595  00025A  D7FA               	bra	u8567
 11596  00025C  D000               	nop2	
 11597                           
 11598                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11599  00025E  9889               	bcf	3977,4,c	;volatile
 11600                           
 11601                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11602  000260  0E1D               	movlw	29
 11603  000262  0100               	movlb	0	; () banked
 11604  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11605  000266  0E69               	movlw	105
 11606  000268  0100               	movlb	0	; () banked
 11607  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11608  00026C  0EA5               	movlw	165
 11609  00026E                     u8577:
 11610  00026E  2EE8               	decfsz	wreg,f,c
 11611  000270  D7FE               	bra	u8577
 11612  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11613  000274  D7FC               	bra	u8577
 11614  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11615  000278  D7FA               	bra	u8577
 11616  00027A  0100               	movlb	0	; () banked
 11617  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11618  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11619  000280  0100               	movlb	0	; () banked
 11620  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11621  000284  D7DD               	goto	l1137
 11622  000286  0100               	movlb	0	; () banked
 11623  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11624  00028A  E101               	bnz	u5730
 11625  00028C  D7D4               	goto	L10
 11626  00028E                     u5730:
 11627  00028E                     l1138:
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;Test.c: 256: }
 11631                           ;Test.c: 257: LATAbits.LATA4 = !1;
 11632  00028E  9889               	bcf	3977,4,c	;volatile
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11636  000290  0E01               	movlw	1
 11637  000292  EC24  F026         	call	_lcdInst
 11638  000296  0E68               	movlw	104
 11639  000298  0100               	movlb	0	; () banked
 11640  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11641  00029C  0EE4               	movlw	228
 11642  00029E                     u8587:
 11643  00029E  2EE8               	decfsz	wreg,f,c
 11644  0002A0  D7FE               	bra	u8587
 11645  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11646  0002A4  D7FC               	bra	u8587
 11647  0002A6  F000               	nop	
 11648  0002A8  0E80               	movlw	128
 11649  0002AA  EC24  F026         	call	_lcdInst
 11650                           
 11651                           ;Test.c: 261: machine_state = Sorting_state;
 11652  0002AE  0E01               	movlw	1
 11653  0002B0  0100               	movlb	0	; () banked
 11654  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;Test.c: 262: was_low_1 = 0;
 11658  0002B4  0E00               	movlw	0
 11659  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11660  0002B8  0E00               	movlw	0
 11661  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;Test.c: 263: was_low_1 = 0;
 11665  0002BC  0E00               	movlw	0
 11666  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11667  0002C0  0E00               	movlw	0
 11668  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;Test.c: 270: printf("TST: PAN SERVO");
 11672  0002C4  0EA5               	movlw	low STR_96
 11673  0002C6  0100               	movlb	0	; () banked
 11674  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11675  0002CA  0EFE               	movlw	high STR_96
 11676  0002CC  0100               	movlb	0	; () banked
 11677  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11678  0002D0  ECB8  F008         	call	_printf	;wreg free
 11679                           
 11680                           ;Test.c: 271: lcdInst(0b11000000);;
 11681  0002D4  0EC0               	movlw	192
 11682  0002D6  EC24  F026         	call	_lcdInst
 11683                           
 11684                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11685  0002DA  0E0A               	movlw	low STR_97
 11686  0002DC  0100               	movlb	0	; () banked
 11687  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11688  0002E0  0EFC               	movlw	high STR_97
 11689  0002E2  0100               	movlb	0	; () banked
 11690  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11691  0002E6  ECB8  F008         	call	_printf	;wreg free
 11692                           
 11693                           ;Test.c: 273: updateServoPosition(1200, 1);
 11694  0002EA  0E04               	movlw	4
 11695  0002EC  0100               	movlb	0	; () banked
 11696  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11697  0002F0  0EB0               	movlw	176
 11698  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11699  0002F4  0E00               	movlw	0
 11700  0002F6  0100               	movlb	0	; () banked
 11701  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11702  0002FA  0E01               	movlw	1
 11703  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11704  0002FE  EC82  F020         	call	_updateServoPosition	;wreg free
 11705                           
 11706                           ;Test.c: 274: TMR1ON = 1;
 11707  000302  80CD               	bsf	4045,0,c	;volatile
 11708                           
 11709                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11710  000304  0E00               	movlw	0
 11711  000306  0100               	movlb	0	; () banked
 11712  000308  6FAE               	movwf	actuatorTest@i_1652& (0+255),b
 11713  00030A                     l7153:
 11714                           
 11715                           ; BSR set to: 0
 11716  00030A  0E63               	movlw	99
 11717  00030C  0100               	movlb	0	; () banked
 11718  00030E  65AE               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11719  000310  D001               	goto	l7157
 11720  000312  D00C               	goto	l7161
 11721  000314                     l7157:
 11722                           
 11723                           ; BSR set to: 0
 11724  000314  0E68               	movlw	104
 11725  000316  0100               	movlb	0	; () banked
 11726  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11727  00031A  0EE4               	movlw	228
 11728  00031C                     u8597:
 11729  00031C  2EE8               	decfsz	wreg,f,c
 11730  00031E  D7FE               	bra	u8597
 11731  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11732  000322  D7FC               	bra	u8597
 11733  000324  F000               	nop	
 11734  000326  0100               	movlb	0	; () banked
 11735  000328  2BAE               	incf	actuatorTest@i_1652& (0+255),f,b
 11736  00032A  D7EF               	goto	l7153
 11737  00032C                     l7161:
 11738                           
 11739                           ; BSR set to: 0
 11740  00032C  0E00               	movlw	0
 11741  00032E  0100               	movlb	0	; () banked
 11742  000330  6FAF               	movwf	actuatorTest@i_1653& (0+255),b
 11743  000332                     l7163:
 11744                           
 11745                           ; BSR set to: 0
 11746  000332  0E63               	movlw	99
 11747  000334  0100               	movlb	0	; () banked
 11748  000336  65AF               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11749  000338  D001               	goto	l7167
 11750  00033A  D00C               	goto	l7171
 11751  00033C                     l7167:
 11752                           
 11753                           ; BSR set to: 0
 11754  00033C  0E68               	movlw	104
 11755  00033E  0100               	movlb	0	; () banked
 11756  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11757  000342  0EE4               	movlw	228
 11758  000344                     u8607:
 11759  000344  2EE8               	decfsz	wreg,f,c
 11760  000346  D7FE               	bra	u8607
 11761  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11762  00034A  D7FC               	bra	u8607
 11763  00034C  F000               	nop	
 11764  00034E  0100               	movlb	0	; () banked
 11765  000350  2BAF               	incf	actuatorTest@i_1653& (0+255),f,b
 11766  000352  D7EF               	goto	l7163
 11767  000354                     l7171:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11771  000354  0E80               	movlw	128
 11772  000356  EC24  F026         	call	_lcdInst
 11773  00035A  0EC0               	movlw	192
 11774  00035C  EC24  F026         	call	_lcdInst
 11775                           
 11776                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11777  000360  0EF9               	movlw	low STR_98
 11778  000362  0100               	movlb	0	; () banked
 11779  000364  6F8E               	movwf	printf@f& (0+255),b
 11780  000366  0EFB               	movlw	high STR_98
 11781  000368  0100               	movlb	0	; () banked
 11782  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11783  00036C  ECB8  F008         	call	_printf	;wreg free
 11784                           
 11785                           ;Test.c: 279: updateServoPosition(500, 1);
 11786  000370  0E01               	movlw	1
 11787  000372  0100               	movlb	0	; () banked
 11788  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11789  000376  0EF4               	movlw	244
 11790  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11791  00037A  0E00               	movlw	0
 11792  00037C  0100               	movlb	0	; () banked
 11793  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11794  000380  0E01               	movlw	1
 11795  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11796  000384  EC82  F020         	call	_updateServoPosition	;wreg free
 11797                           
 11798                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11799  000388  0E00               	movlw	0
 11800  00038A  0100               	movlb	0	; () banked
 11801  00038C  6FB0               	movwf	actuatorTest@i_1655& (0+255),b
 11802  00038E                     l7179:
 11803                           
 11804                           ; BSR set to: 0
 11805  00038E  0E63               	movlw	99
 11806  000390  0100               	movlb	0	; () banked
 11807  000392  65B0               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11808  000394  D001               	goto	l7183
 11809  000396  D00C               	goto	l7187
 11810  000398                     l7183:
 11811                           
 11812                           ; BSR set to: 0
 11813  000398  0E68               	movlw	104
 11814  00039A  0100               	movlb	0	; () banked
 11815  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11816  00039E  0EE4               	movlw	228
 11817  0003A0                     u8617:
 11818  0003A0  2EE8               	decfsz	wreg,f,c
 11819  0003A2  D7FE               	bra	u8617
 11820  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11821  0003A6  D7FC               	bra	u8617
 11822  0003A8  F000               	nop	
 11823  0003AA  0100               	movlb	0	; () banked
 11824  0003AC  2BB0               	incf	actuatorTest@i_1655& (0+255),f,b
 11825  0003AE  D7EF               	goto	l7179
 11826  0003B0                     l7187:
 11827                           
 11828                           ; BSR set to: 0
 11829  0003B0  0E00               	movlw	0
 11830  0003B2  0100               	movlb	0	; () banked
 11831  0003B4  6FB1               	movwf	actuatorTest@i_1656& (0+255),b
 11832  0003B6                     l7189:
 11833                           
 11834                           ; BSR set to: 0
 11835  0003B6  0E63               	movlw	99
 11836  0003B8  0100               	movlb	0	; () banked
 11837  0003BA  65B1               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11838  0003BC  D001               	goto	l7193
 11839  0003BE  D00C               	goto	l7197
 11840  0003C0                     l7193:
 11841                           
 11842                           ; BSR set to: 0
 11843  0003C0  0E68               	movlw	104
 11844  0003C2  0100               	movlb	0	; () banked
 11845  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11846  0003C6  0EE4               	movlw	228
 11847  0003C8                     u8627:
 11848  0003C8  2EE8               	decfsz	wreg,f,c
 11849  0003CA  D7FE               	bra	u8627
 11850  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11851  0003CE  D7FC               	bra	u8627
 11852  0003D0  F000               	nop	
 11853  0003D2  0100               	movlb	0	; () banked
 11854  0003D4  2BB1               	incf	actuatorTest@i_1656& (0+255),f,b
 11855  0003D6  D7EF               	goto	l7189
 11856  0003D8                     l7197:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11860  0003D8  0E80               	movlw	128
 11861  0003DA  EC24  F026         	call	_lcdInst
 11862  0003DE  0EC0               	movlw	192
 11863  0003E0  EC24  F026         	call	_lcdInst
 11864                           
 11865                           ;Test.c: 283: printf("LEFT -- 2s      ");
 11866  0003E4  0ED7               	movlw	low STR_99
 11867  0003E6  0100               	movlb	0	; () banked
 11868  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11869  0003EA  0EFB               	movlw	high STR_99
 11870  0003EC  0100               	movlb	0	; () banked
 11871  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11872  0003F0  ECB8  F008         	call	_printf	;wreg free
 11873                           
 11874                           ;Test.c: 284: updateServoPosition(2200, 1);
 11875  0003F4  0E08               	movlw	8
 11876  0003F6  0100               	movlb	0	; () banked
 11877  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11878  0003FA  0E98               	movlw	152
 11879  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11880  0003FE  0E00               	movlw	0
 11881  000400  0100               	movlb	0	; () banked
 11882  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11883  000404  0E01               	movlw	1
 11884  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11885  000408  EC82  F020         	call	_updateServoPosition	;wreg free
 11886                           
 11887                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11888  00040C  0E00               	movlw	0
 11889  00040E  0100               	movlb	0	; () banked
 11890  000410  6FB2               	movwf	actuatorTest@i_1658& (0+255),b
 11891  000412                     l7205:
 11892                           
 11893                           ; BSR set to: 0
 11894  000412  0E63               	movlw	99
 11895  000414  0100               	movlb	0	; () banked
 11896  000416  65B2               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11897  000418  D001               	goto	l7209
 11898  00041A  D00C               	goto	l7213
 11899  00041C                     l7209:
 11900                           
 11901                           ; BSR set to: 0
 11902  00041C  0E68               	movlw	104
 11903  00041E  0100               	movlb	0	; () banked
 11904  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11905  000422  0EE4               	movlw	228
 11906  000424                     u8637:
 11907  000424  2EE8               	decfsz	wreg,f,c
 11908  000426  D7FE               	bra	u8637
 11909  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11910  00042A  D7FC               	bra	u8637
 11911  00042C  F000               	nop	
 11912  00042E  0100               	movlb	0	; () banked
 11913  000430  2BB2               	incf	actuatorTest@i_1658& (0+255),f,b
 11914  000432  D7EF               	goto	l7205
 11915  000434                     l7213:
 11916                           
 11917                           ; BSR set to: 0
 11918  000434  0E00               	movlw	0
 11919  000436  0100               	movlb	0	; () banked
 11920  000438  6FB3               	movwf	actuatorTest@i_1659& (0+255),b
 11921  00043A                     l7215:
 11922                           
 11923                           ; BSR set to: 0
 11924  00043A  0E63               	movlw	99
 11925  00043C  0100               	movlb	0	; () banked
 11926  00043E  65B3               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11927  000440  D001               	goto	l7219
 11928  000442  D00C               	goto	l7223
 11929  000444                     l7219:
 11930                           
 11931                           ; BSR set to: 0
 11932  000444  0E68               	movlw	104
 11933  000446  0100               	movlb	0	; () banked
 11934  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11935  00044A  0EE4               	movlw	228
 11936  00044C                     u8647:
 11937  00044C  2EE8               	decfsz	wreg,f,c
 11938  00044E  D7FE               	bra	u8647
 11939  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11940  000452  D7FC               	bra	u8647
 11941  000454  F000               	nop	
 11942  000456  0100               	movlb	0	; () banked
 11943  000458  2BB3               	incf	actuatorTest@i_1659& (0+255),f,b
 11944  00045A  D7EF               	goto	l7215
 11945  00045C                     l7223:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11949  00045C  0E80               	movlw	128
 11950  00045E  EC24  F026         	call	_lcdInst
 11951  000462  0EC0               	movlw	192
 11952  000464  EC24  F026         	call	_lcdInst
 11953                           
 11954                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 11955  000468  0E2C               	movlw	low STR_100
 11956  00046A  0100               	movlb	0	; () banked
 11957  00046C  6F8E               	movwf	printf@f& (0+255),b
 11958  00046E  0EFC               	movlw	high STR_100
 11959  000470  0100               	movlb	0	; () banked
 11960  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11961  000474  ECB8  F008         	call	_printf	;wreg free
 11962                           
 11963                           ;Test.c: 289: updateServoPosition(1670, 1);
 11964  000478  0E06               	movlw	6
 11965  00047A  0100               	movlb	0	; () banked
 11966  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11967  00047E  0E86               	movlw	134
 11968  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11969  000482  0E00               	movlw	0
 11970  000484  0100               	movlb	0	; () banked
 11971  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11972  000488  0E01               	movlw	1
 11973  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11974  00048C  EC82  F020         	call	_updateServoPosition	;wreg free
 11975                           
 11976                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11977  000490  0E00               	movlw	0
 11978  000492  0100               	movlb	0	; () banked
 11979  000494  6FB4               	movwf	actuatorTest@i_1661& (0+255),b
 11980  000496                     l7231:
 11981                           
 11982                           ; BSR set to: 0
 11983  000496  0E63               	movlw	99
 11984  000498  0100               	movlb	0	; () banked
 11985  00049A  65B4               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11986  00049C  D001               	goto	l7235
 11987  00049E  D00C               	goto	l7239
 11988  0004A0                     l7235:
 11989                           
 11990                           ; BSR set to: 0
 11991  0004A0  0E68               	movlw	104
 11992  0004A2  0100               	movlb	0	; () banked
 11993  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11994  0004A6  0EE4               	movlw	228
 11995  0004A8                     u8657:
 11996  0004A8  2EE8               	decfsz	wreg,f,c
 11997  0004AA  D7FE               	bra	u8657
 11998  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11999  0004AE  D7FC               	bra	u8657
 12000  0004B0  F000               	nop	
 12001  0004B2  0100               	movlb	0	; () banked
 12002  0004B4  2BB4               	incf	actuatorTest@i_1661& (0+255),f,b
 12003  0004B6  D7EF               	goto	l7231
 12004  0004B8                     l7239:
 12005                           
 12006                           ; BSR set to: 0
 12007  0004B8  0E00               	movlw	0
 12008  0004BA  0100               	movlb	0	; () banked
 12009  0004BC  6FB5               	movwf	actuatorTest@i_1662& (0+255),b
 12010  0004BE                     l7241:
 12011                           
 12012                           ; BSR set to: 0
 12013  0004BE  0E63               	movlw	99
 12014  0004C0  0100               	movlb	0	; () banked
 12015  0004C2  65B5               	cpfsgt	actuatorTest@i_1662& (0+255),b
 12016  0004C4  D001               	goto	l7245
 12017  0004C6  D00C               	goto	l7249
 12018  0004C8                     l7245:
 12019                           
 12020                           ; BSR set to: 0
 12021  0004C8  0E68               	movlw	104
 12022  0004CA  0100               	movlb	0	; () banked
 12023  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12024  0004CE  0EE4               	movlw	228
 12025  0004D0                     u8667:
 12026  0004D0  2EE8               	decfsz	wreg,f,c
 12027  0004D2  D7FE               	bra	u8667
 12028  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12029  0004D6  D7FC               	bra	u8667
 12030  0004D8  F000               	nop	
 12031  0004DA  0100               	movlb	0	; () banked
 12032  0004DC  2BB5               	incf	actuatorTest@i_1662& (0+255),f,b
 12033  0004DE  D7EF               	goto	l7241
 12034  0004E0                     l7249:
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12038  0004E0  0E80               	movlw	128
 12039  0004E2  EC24  F026         	call	_lcdInst
 12040  0004E6  0EC0               	movlw	192
 12041  0004E8  EC24  F026         	call	_lcdInst
 12042                           
 12043                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12044  0004EC  0E3D               	movlw	low STR_101
 12045  0004EE  0100               	movlb	0	; () banked
 12046  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12047  0004F2  0EFC               	movlw	high STR_101
 12048  0004F4  0100               	movlb	0	; () banked
 12049  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12050  0004F8  ECB8  F008         	call	_printf	;wreg free
 12051                           
 12052                           ;Test.c: 294: updateServoPosition(850, 1);
 12053  0004FC  0E03               	movlw	3
 12054  0004FE  0100               	movlb	0	; () banked
 12055  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12056  000502  0E52               	movlw	82
 12057  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12058  000506  0E00               	movlw	0
 12059  000508  0100               	movlb	0	; () banked
 12060  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12061  00050C  0E01               	movlw	1
 12062  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12063  000510  EC82  F020         	call	_updateServoPosition	;wreg free
 12064                           
 12065                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12066  000514  0E00               	movlw	0
 12067  000516  0100               	movlb	0	; () banked
 12068  000518  6FB6               	movwf	actuatorTest@i_1664& (0+255),b
 12069  00051A                     l7257:
 12070                           
 12071                           ; BSR set to: 0
 12072  00051A  0E63               	movlw	99
 12073  00051C  0100               	movlb	0	; () banked
 12074  00051E  65B6               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12075  000520  D001               	goto	l7261
 12076  000522  D00C               	goto	l7265
 12077  000524                     l7261:
 12078                           
 12079                           ; BSR set to: 0
 12080  000524  0E68               	movlw	104
 12081  000526  0100               	movlb	0	; () banked
 12082  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12083  00052A  0EE4               	movlw	228
 12084  00052C                     u8677:
 12085  00052C  2EE8               	decfsz	wreg,f,c
 12086  00052E  D7FE               	bra	u8677
 12087  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12088  000532  D7FC               	bra	u8677
 12089  000534  F000               	nop	
 12090  000536  0100               	movlb	0	; () banked
 12091  000538  2BB6               	incf	actuatorTest@i_1664& (0+255),f,b
 12092  00053A  D7EF               	goto	l7257
 12093  00053C                     l7265:
 12094                           
 12095                           ; BSR set to: 0
 12096  00053C  0E00               	movlw	0
 12097  00053E  0100               	movlb	0	; () banked
 12098  000540  6FB7               	movwf	actuatorTest@i_1665& (0+255),b
 12099  000542                     l7267:
 12100                           
 12101                           ; BSR set to: 0
 12102  000542  0E63               	movlw	99
 12103  000544  0100               	movlb	0	; () banked
 12104  000546  65B7               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12105  000548  D001               	goto	l7271
 12106  00054A  D00C               	goto	l7275
 12107  00054C                     l7271:
 12108                           
 12109                           ; BSR set to: 0
 12110  00054C  0E68               	movlw	104
 12111  00054E  0100               	movlb	0	; () banked
 12112  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12113  000552  0EE4               	movlw	228
 12114  000554                     u8687:
 12115  000554  2EE8               	decfsz	wreg,f,c
 12116  000556  D7FE               	bra	u8687
 12117  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12118  00055A  D7FC               	bra	u8687
 12119  00055C  F000               	nop	
 12120  00055E  0100               	movlb	0	; () banked
 12121  000560  2BB7               	incf	actuatorTest@i_1665& (0+255),f,b
 12122  000562  D7EF               	goto	l7267
 12123  000564                     l7275:
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12127  000564  0E80               	movlw	128
 12128  000566  EC24  F026         	call	_lcdInst
 12129  00056A  0EC0               	movlw	192
 12130  00056C  EC24  F026         	call	_lcdInst
 12131                           
 12132                           ;Test.c: 298: printf("MID -- 2s       ");
 12133  000570  0EB5               	movlw	low STR_102
 12134  000572  0100               	movlb	0	; () banked
 12135  000574  6F8E               	movwf	printf@f& (0+255),b
 12136  000576  0EFB               	movlw	high STR_102
 12137  000578  0100               	movlb	0	; () banked
 12138  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12139  00057C  ECB8  F008         	call	_printf	;wreg free
 12140                           
 12141                           ;Test.c: 299: updateServoPosition(1200, 1);
 12142  000580  0E04               	movlw	4
 12143  000582  0100               	movlb	0	; () banked
 12144  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12145  000586  0EB0               	movlw	176
 12146  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12147  00058A  0E00               	movlw	0
 12148  00058C  0100               	movlb	0	; () banked
 12149  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12150  000590  0E01               	movlw	1
 12151  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12152  000594  EC82  F020         	call	_updateServoPosition	;wreg free
 12153                           
 12154                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12155  000598  0E00               	movlw	0
 12156  00059A  0100               	movlb	0	; () banked
 12157  00059C  6FB8               	movwf	actuatorTest@i_1667& (0+255),b
 12158  00059E                     l7283:
 12159                           
 12160                           ; BSR set to: 0
 12161  00059E  0E63               	movlw	99
 12162  0005A0  0100               	movlb	0	; () banked
 12163  0005A2  65B8               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12164  0005A4  D001               	goto	l7287
 12165  0005A6  D00C               	goto	l7291
 12166  0005A8                     l7287:
 12167                           
 12168                           ; BSR set to: 0
 12169  0005A8  0E68               	movlw	104
 12170  0005AA  0100               	movlb	0	; () banked
 12171  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12172  0005AE  0EE4               	movlw	228
 12173  0005B0                     u8697:
 12174  0005B0  2EE8               	decfsz	wreg,f,c
 12175  0005B2  D7FE               	bra	u8697
 12176  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12177  0005B6  D7FC               	bra	u8697
 12178  0005B8  F000               	nop	
 12179  0005BA  0100               	movlb	0	; () banked
 12180  0005BC  2BB8               	incf	actuatorTest@i_1667& (0+255),f,b
 12181  0005BE  D7EF               	goto	l7283
 12182  0005C0                     l7291:
 12183                           
 12184                           ; BSR set to: 0
 12185  0005C0  0E00               	movlw	0
 12186  0005C2  0100               	movlb	0	; () banked
 12187  0005C4  6FB9               	movwf	actuatorTest@i_1668& (0+255),b
 12188  0005C6                     l7293:
 12189                           
 12190                           ; BSR set to: 0
 12191  0005C6  0E63               	movlw	99
 12192  0005C8  0100               	movlb	0	; () banked
 12193  0005CA  65B9               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12194  0005CC  D001               	goto	l7297
 12195  0005CE  D00C               	goto	l1162
 12196  0005D0                     l7297:
 12197                           
 12198                           ; BSR set to: 0
 12199  0005D0  0E68               	movlw	104
 12200  0005D2  0100               	movlb	0	; () banked
 12201  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12202  0005D6  0EE4               	movlw	228
 12203  0005D8                     u8707:
 12204  0005D8  2EE8               	decfsz	wreg,f,c
 12205  0005DA  D7FE               	bra	u8707
 12206  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12207  0005DE  D7FC               	bra	u8707
 12208  0005E0  F000               	nop	
 12209  0005E2  0100               	movlb	0	; () banked
 12210  0005E4  2BB9               	incf	actuatorTest@i_1668& (0+255),f,b
 12211  0005E6  D7EF               	goto	l7293
 12212  0005E8                     l1162:
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;Test.c: 301: TMR1ON = 0;
 12216  0005E8  90CD               	bcf	4045,0,c	;volatile
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;Test.c: 308: printf("TST: TILT SERVO");
 12220  0005EA  0E3A               	movlw	low STR_103
 12221  0005EC  0100               	movlb	0	; () banked
 12222  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12223  0005F0  0EFE               	movlw	high STR_103
 12224  0005F2  0100               	movlb	0	; () banked
 12225  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12226  0005F6  ECB8  F008         	call	_printf	;wreg free
 12227                           
 12228                           ;Test.c: 309: lcdInst(0b11000000);;
 12229  0005FA  0EC0               	movlw	192
 12230  0005FC  EC24  F026         	call	_lcdInst
 12231                           
 12232                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12233  000600  0EE8               	movlw	low STR_104
 12234  000602  0100               	movlb	0	; () banked
 12235  000604  6F8E               	movwf	printf@f& (0+255),b
 12236  000606  0EFB               	movlw	high STR_104
 12237  000608  0100               	movlb	0	; () banked
 12238  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12239  00060C  ECB8  F008         	call	_printf	;wreg free
 12240                           
 12241                           ;Test.c: 311: updateServoPosition(1050, 3);
 12242  000610  0E04               	movlw	4
 12243  000612  0100               	movlb	0	; () banked
 12244  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12245  000616  0E1A               	movlw	26
 12246  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12247  00061A  0E00               	movlw	0
 12248  00061C  0100               	movlb	0	; () banked
 12249  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12250  000620  0E03               	movlw	3
 12251  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12252  000624  EC82  F020         	call	_updateServoPosition	;wreg free
 12253                           
 12254                           ;Test.c: 312: TMR3ON = 1;
 12255  000628  80B1               	bsf	4017,0,c	;volatile
 12256                           
 12257                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12258  00062A  0E00               	movlw	0
 12259  00062C  0100               	movlb	0	; () banked
 12260  00062E  6FBA               	movwf	actuatorTest@i_1671& (0+255),b
 12261  000630                     l7311:
 12262                           
 12263                           ; BSR set to: 0
 12264  000630  0E63               	movlw	99
 12265  000632  0100               	movlb	0	; () banked
 12266  000634  65BA               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12267  000636  D001               	goto	l7315
 12268  000638  D00C               	goto	l7319
 12269  00063A                     l7315:
 12270                           
 12271                           ; BSR set to: 0
 12272  00063A  0E68               	movlw	104
 12273  00063C  0100               	movlb	0	; () banked
 12274  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12275  000640  0EE4               	movlw	228
 12276  000642                     u8717:
 12277  000642  2EE8               	decfsz	wreg,f,c
 12278  000644  D7FE               	bra	u8717
 12279  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12280  000648  D7FC               	bra	u8717
 12281  00064A  F000               	nop	
 12282  00064C  0100               	movlb	0	; () banked
 12283  00064E  2BBA               	incf	actuatorTest@i_1671& (0+255),f,b
 12284  000650  D7EF               	goto	l7311
 12285  000652                     l7319:
 12286                           
 12287                           ; BSR set to: 0
 12288  000652  0E00               	movlw	0
 12289  000654  0100               	movlb	0	; () banked
 12290  000656  6FBB               	movwf	actuatorTest@i_1672& (0+255),b
 12291  000658                     l7321:
 12292                           
 12293                           ; BSR set to: 0
 12294  000658  0E63               	movlw	99
 12295  00065A  0100               	movlb	0	; () banked
 12296  00065C  65BB               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12297  00065E  D001               	goto	l7325
 12298  000660  D00C               	goto	l7329
 12299  000662                     l7325:
 12300                           
 12301                           ; BSR set to: 0
 12302  000662  0E68               	movlw	104
 12303  000664  0100               	movlb	0	; () banked
 12304  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12305  000668  0EE4               	movlw	228
 12306  00066A                     u8727:
 12307  00066A  2EE8               	decfsz	wreg,f,c
 12308  00066C  D7FE               	bra	u8727
 12309  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12310  000670  D7FC               	bra	u8727
 12311  000672  F000               	nop	
 12312  000674  0100               	movlb	0	; () banked
 12313  000676  2BBB               	incf	actuatorTest@i_1672& (0+255),f,b
 12314  000678  D7EF               	goto	l7321
 12315  00067A                     l7329:
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12319  00067A  0E80               	movlw	128
 12320  00067C  EC24  F026         	call	_lcdInst
 12321  000680  0EC0               	movlw	192
 12322  000682  EC24  F026         	call	_lcdInst
 12323                           
 12324                           ;Test.c: 316: printf("DROP -- 2s      ");
 12325  000686  0EC6               	movlw	low STR_105
 12326  000688  0100               	movlb	0	; () banked
 12327  00068A  6F8E               	movwf	printf@f& (0+255),b
 12328  00068C  0EFB               	movlw	high STR_105
 12329  00068E  0100               	movlb	0	; () banked
 12330  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12331  000692  ECB8  F008         	call	_printf	;wreg free
 12332                           
 12333                           ;Test.c: 317: updateServoPosition(1260, 3);
 12334  000696  0E04               	movlw	4
 12335  000698  0100               	movlb	0	; () banked
 12336  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12337  00069C  0EEC               	movlw	236
 12338  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12339  0006A0  0E00               	movlw	0
 12340  0006A2  0100               	movlb	0	; () banked
 12341  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12342  0006A6  0E03               	movlw	3
 12343  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12344  0006AA  EC82  F020         	call	_updateServoPosition	;wreg free
 12345                           
 12346                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12347  0006AE  0E00               	movlw	0
 12348  0006B0  0100               	movlb	0	; () banked
 12349  0006B2  6FBC               	movwf	actuatorTest@i_1674& (0+255),b
 12350  0006B4                     l7337:
 12351                           
 12352                           ; BSR set to: 0
 12353  0006B4  0E63               	movlw	99
 12354  0006B6  0100               	movlb	0	; () banked
 12355  0006B8  65BC               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12356  0006BA  D001               	goto	l7341
 12357  0006BC  D00C               	goto	l7345
 12358  0006BE                     l7341:
 12359                           
 12360                           ; BSR set to: 0
 12361  0006BE  0E68               	movlw	104
 12362  0006C0  0100               	movlb	0	; () banked
 12363  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12364  0006C4  0EE4               	movlw	228
 12365  0006C6                     u8737:
 12366  0006C6  2EE8               	decfsz	wreg,f,c
 12367  0006C8  D7FE               	bra	u8737
 12368  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12369  0006CC  D7FC               	bra	u8737
 12370  0006CE  F000               	nop	
 12371  0006D0  0100               	movlb	0	; () banked
 12372  0006D2  2BBC               	incf	actuatorTest@i_1674& (0+255),f,b
 12373  0006D4  D7EF               	goto	l7337
 12374  0006D6                     l7345:
 12375                           
 12376                           ; BSR set to: 0
 12377  0006D6  0E00               	movlw	0
 12378  0006D8  0100               	movlb	0	; () banked
 12379  0006DA  6FBD               	movwf	actuatorTest@i_1675& (0+255),b
 12380  0006DC                     l7347:
 12381                           
 12382                           ; BSR set to: 0
 12383  0006DC  0E63               	movlw	99
 12384  0006DE  0100               	movlb	0	; () banked
 12385  0006E0  65BD               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12386  0006E2  D001               	goto	l7351
 12387  0006E4  D00C               	goto	l7355
 12388  0006E6                     l7351:
 12389                           
 12390                           ; BSR set to: 0
 12391  0006E6  0E68               	movlw	104
 12392  0006E8  0100               	movlb	0	; () banked
 12393  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12394  0006EC  0EE4               	movlw	228
 12395  0006EE                     u8747:
 12396  0006EE  2EE8               	decfsz	wreg,f,c
 12397  0006F0  D7FE               	bra	u8747
 12398  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12399  0006F4  D7FC               	bra	u8747
 12400  0006F6  F000               	nop	
 12401  0006F8  0100               	movlb	0	; () banked
 12402  0006FA  2BBD               	incf	actuatorTest@i_1675& (0+255),f,b
 12403  0006FC  D7EF               	goto	l7347
 12404  0006FE                     l7355:
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12408  0006FE  0E80               	movlw	128
 12409  000700  EC24  F026         	call	_lcdInst
 12410  000704  0EC0               	movlw	192
 12411  000706  EC24  F026         	call	_lcdInst
 12412                           
 12413                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12414  00070A  0EE8               	movlw	low STR_104
 12415  00070C  0100               	movlb	0	; () banked
 12416  00070E  6F8E               	movwf	printf@f& (0+255),b
 12417  000710  0EFB               	movlw	high STR_104
 12418  000712  0100               	movlb	0	; () banked
 12419  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12420  000716  ECB8  F008         	call	_printf	;wreg free
 12421                           
 12422                           ;Test.c: 322: updateServoPosition(1050, 3);
 12423  00071A  0E04               	movlw	4
 12424  00071C  0100               	movlb	0	; () banked
 12425  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12426  000720  0E1A               	movlw	26
 12427  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12428  000724  0E00               	movlw	0
 12429  000726  0100               	movlb	0	; () banked
 12430  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12431  00072A  0E03               	movlw	3
 12432  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12433  00072E  EC82  F020         	call	_updateServoPosition	;wreg free
 12434                           
 12435                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12436  000732  0E00               	movlw	0
 12437  000734  0100               	movlb	0	; () banked
 12438  000736  6FBE               	movwf	actuatorTest@i_1677& (0+255),b
 12439  000738                     l7363:
 12440                           
 12441                           ; BSR set to: 0
 12442  000738  0E63               	movlw	99
 12443  00073A  0100               	movlb	0	; () banked
 12444  00073C  65BE               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12445  00073E  D001               	goto	l7367
 12446  000740  D00C               	goto	l7371
 12447  000742                     l7367:
 12448                           
 12449                           ; BSR set to: 0
 12450  000742  0E68               	movlw	104
 12451  000744  0100               	movlb	0	; () banked
 12452  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12453  000748  0EE4               	movlw	228
 12454  00074A                     u8757:
 12455  00074A  2EE8               	decfsz	wreg,f,c
 12456  00074C  D7FE               	bra	u8757
 12457  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12458  000750  D7FC               	bra	u8757
 12459  000752  F000               	nop	
 12460  000754  0100               	movlb	0	; () banked
 12461  000756  2BBE               	incf	actuatorTest@i_1677& (0+255),f,b
 12462  000758  D7EF               	goto	l7363
 12463  00075A                     l7371:
 12464                           
 12465                           ; BSR set to: 0
 12466  00075A  0E00               	movlw	0
 12467  00075C  0100               	movlb	0	; () banked
 12468  00075E  6FBF               	movwf	actuatorTest@i_1678& (0+255),b
 12469  000760                     l7373:
 12470                           
 12471                           ; BSR set to: 0
 12472  000760  0E63               	movlw	99
 12473  000762  0100               	movlb	0	; () banked
 12474  000764  65BF               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12475  000766  D001               	goto	l7377
 12476  000768  D00C               	goto	l1174
 12477  00076A                     l7377:
 12478                           
 12479                           ; BSR set to: 0
 12480  00076A  0E68               	movlw	104
 12481  00076C  0100               	movlb	0	; () banked
 12482  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12483  000770  0EE4               	movlw	228
 12484  000772                     u8767:
 12485  000772  2EE8               	decfsz	wreg,f,c
 12486  000774  D7FE               	bra	u8767
 12487  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12488  000778  D7FC               	bra	u8767
 12489  00077A  F000               	nop	
 12490  00077C  0100               	movlb	0	; () banked
 12491  00077E  2BBF               	incf	actuatorTest@i_1678& (0+255),f,b
 12492  000780  D7EF               	goto	l7373
 12493  000782                     l1174:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;Test.c: 324: TMR3ON = 0;
 12497  000782  90B1               	bcf	4017,0,c	;volatile
 12498                           
 12499                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12500  000784  9EF2               	bcf	intcon,7,c	;volatile
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12504  000786  0E01               	movlw	1
 12505  000788  EC24  F026         	call	_lcdInst
 12506  00078C  0E68               	movlw	104
 12507  00078E  0100               	movlb	0	; () banked
 12508  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12509  000792  0EE4               	movlw	228
 12510  000794                     u8777:
 12511  000794  2EE8               	decfsz	wreg,f,c
 12512  000796  D7FE               	bra	u8777
 12513  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12514  00079A  D7FC               	bra	u8777
 12515  00079C  F000               	nop	
 12516  00079E  0E80               	movlw	128
 12517  0007A0  EC24  F026         	call	_lcdInst
 12518                           
 12519                           ;Test.c: 331: printf("TST: CAM SERVO");
 12520  0007A4  0E96               	movlw	low STR_107
 12521  0007A6  0100               	movlb	0	; () banked
 12522  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12523  0007AA  0EFE               	movlw	high STR_107
 12524  0007AC  0100               	movlb	0	; () banked
 12525  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12526  0007B0  ECB8  F008         	call	_printf	;wreg free
 12527                           
 12528                           ;Test.c: 332: lcdInst(0b11000000);;
 12529  0007B4  0EC0               	movlw	192
 12530  0007B6  EC24  F026         	call	_lcdInst
 12531                           
 12532                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12533  0007BA  0E78               	movlw	low STR_108
 12534  0007BC  0100               	movlb	0	; () banked
 12535  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12536  0007C0  0EFE               	movlw	high STR_108
 12537  0007C2  0100               	movlb	0	; () banked
 12538  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12539  0007C6  ECB8  F008         	call	_printf	;wreg free
 12540                           
 12541                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12542  0007CA  808B               	bsf	3979,0,c	;volatile
 12543                           
 12544                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12545  0007CC  0E00               	movlw	0
 12546  0007CE  0100               	movlb	0	; () banked
 12547  0007D0  6FC0               	movwf	actuatorTest@i_1681& (0+255),b
 12548  0007D2                     l7397:
 12549                           
 12550                           ; BSR set to: 0
 12551  0007D2  0E63               	movlw	99
 12552  0007D4  0100               	movlb	0	; () banked
 12553  0007D6  65C0               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12554  0007D8  D001               	goto	l7401
 12555  0007DA  D00C               	goto	l7405
 12556  0007DC                     l7401:
 12557                           
 12558                           ; BSR set to: 0
 12559  0007DC  0E68               	movlw	104
 12560  0007DE  0100               	movlb	0	; () banked
 12561  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12562  0007E2  0EE4               	movlw	228
 12563  0007E4                     u8787:
 12564  0007E4  2EE8               	decfsz	wreg,f,c
 12565  0007E6  D7FE               	bra	u8787
 12566  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12567  0007EA  D7FC               	bra	u8787
 12568  0007EC  F000               	nop	
 12569  0007EE  0100               	movlb	0	; () banked
 12570  0007F0  2BC0               	incf	actuatorTest@i_1681& (0+255),f,b
 12571  0007F2  D7EF               	goto	l7397
 12572  0007F4                     l7405:
 12573                           
 12574                           ; BSR set to: 0
 12575  0007F4  0E00               	movlw	0
 12576  0007F6  0100               	movlb	0	; () banked
 12577  0007F8  6FC1               	movwf	actuatorTest@i_1682& (0+255),b
 12578  0007FA                     l7407:
 12579                           
 12580                           ; BSR set to: 0
 12581  0007FA  0E63               	movlw	99
 12582  0007FC  0100               	movlb	0	; () banked
 12583  0007FE  65C1               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12584  000800  D001               	goto	l7411
 12585  000802  D00C               	goto	l7415
 12586  000804                     l7411:
 12587                           
 12588                           ; BSR set to: 0
 12589  000804  0E68               	movlw	104
 12590  000806  0100               	movlb	0	; () banked
 12591  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12592  00080A  0EE4               	movlw	228
 12593  00080C                     u8797:
 12594  00080C  2EE8               	decfsz	wreg,f,c
 12595  00080E  D7FE               	bra	u8797
 12596  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12597  000812  D7FC               	bra	u8797
 12598  000814  F000               	nop	
 12599  000816  0100               	movlb	0	; () banked
 12600  000818  2BC1               	incf	actuatorTest@i_1682& (0+255),f,b
 12601  00081A  D7EF               	goto	l7407
 12602  00081C                     l7415:
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12606  00081C  0E80               	movlw	128
 12607  00081E  EC24  F026         	call	_lcdInst
 12608  000822  0EC0               	movlw	192
 12609  000824  EC24  F026         	call	_lcdInst
 12610                           
 12611                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12612  000828  0E69               	movlw	low STR_109
 12613  00082A  0100               	movlb	0	; () banked
 12614  00082C  6F8E               	movwf	printf@f& (0+255),b
 12615  00082E  0EFE               	movlw	high STR_109
 12616  000830  0100               	movlb	0	; () banked
 12617  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12618  000834  ECB8  F008         	call	_printf	;wreg free
 12619                           
 12620                           ;Test.c: 340: for(i=0;i<10000;i++)
 12621  000838  0E00               	movlw	0
 12622  00083A  0100               	movlb	0	; () banked
 12623  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12624  00083E  0E00               	movlw	0
 12625  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12626  000842                     l7421:
 12627                           
 12628                           ; BSR set to: 0
 12629  000842  0100               	movlb	0	; () banked
 12630  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12631  000846  D008               	goto	l1179
 12632  000848  0E10               	movlw	16
 12633  00084A  0100               	movlb	0	; () banked
 12634  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12635  00084E  0E27               	movlw	39
 12636  000850  0100               	movlb	0	; () banked
 12637  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12638  000854  B0D8               	btfsc	status,0,c
 12639  000856  D00D               	goto	l7431
 12640  000858                     l1179:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;Test.c: 341: {
 12644                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12645  000858  808B               	bsf	3979,0,c	;volatile
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12649  00085A  0E1A               	movlw	26
 12650  00085C                     u8807:
 12651  00085C  2EE8               	decfsz	wreg,f,c
 12652  00085E  D7FE               	bra	u8807
 12653  000860  D000               	nop2	
 12654                           
 12655                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12656  000862  908B               	bcf	3979,0,c	;volatile
 12657                           
 12658                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12659  000864  0EF0               	movlw	240
 12660  000866                     u8817:
 12661  000866  2EE8               	decfsz	wreg,f,c
 12662  000868  D7FE               	bra	u8817
 12663  00086A  0100               	movlb	0	; () banked
 12664  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12665  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12666  000870  D7E8               	goto	l7421
 12667  000872                     l7431:
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;Test.c: 346: }
 12671                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12672  000872  0E00               	movlw	0
 12673  000874  0100               	movlb	0	; () banked
 12674  000876  6FC2               	movwf	actuatorTest@i_1684& (0+255),b
 12675  000878                     l7433:
 12676                           
 12677                           ; BSR set to: 0
 12678  000878  0E63               	movlw	99
 12679  00087A  0100               	movlb	0	; () banked
 12680  00087C  65C2               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12681  00087E  D001               	goto	l7437
 12682  000880  D00C               	goto	l7441
 12683  000882                     l7437:
 12684                           
 12685                           ; BSR set to: 0
 12686  000882  0E68               	movlw	104
 12687  000884  0100               	movlb	0	; () banked
 12688  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12689  000888  0EE4               	movlw	228
 12690  00088A                     u8827:
 12691  00088A  2EE8               	decfsz	wreg,f,c
 12692  00088C  D7FE               	bra	u8827
 12693  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12694  000890  D7FC               	bra	u8827
 12695  000892  F000               	nop	
 12696  000894  0100               	movlb	0	; () banked
 12697  000896  2BC2               	incf	actuatorTest@i_1684& (0+255),f,b
 12698  000898  D7EF               	goto	l7433
 12699  00089A                     l7441:
 12700                           
 12701                           ; BSR set to: 0
 12702  00089A  0E00               	movlw	0
 12703  00089C  0100               	movlb	0	; () banked
 12704  00089E  6FC3               	movwf	actuatorTest@i_1685& (0+255),b
 12705  0008A0                     l7443:
 12706                           
 12707                           ; BSR set to: 0
 12708  0008A0  0E63               	movlw	99
 12709  0008A2  0100               	movlb	0	; () banked
 12710  0008A4  65C3               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12711  0008A6  D001               	goto	l7447
 12712  0008A8  D00C               	goto	l7451
 12713  0008AA                     l7447:
 12714                           
 12715                           ; BSR set to: 0
 12716  0008AA  0E68               	movlw	104
 12717  0008AC  0100               	movlb	0	; () banked
 12718  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12719  0008B0  0EE4               	movlw	228
 12720  0008B2                     u8837:
 12721  0008B2  2EE8               	decfsz	wreg,f,c
 12722  0008B4  D7FE               	bra	u8837
 12723  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12724  0008B8  D7FC               	bra	u8837
 12725  0008BA  F000               	nop	
 12726  0008BC  0100               	movlb	0	; () banked
 12727  0008BE  2BC3               	incf	actuatorTest@i_1685& (0+255),f,b
 12728  0008C0  D7EF               	goto	l7443
 12729  0008C2                     l7451:
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;Test.c: 349: machine_state = Testing_state;
 12733  0008C2  0E03               	movlw	3
 12734  0008C4  0100               	movlb	0	; () banked
 12735  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12736                           
 12737                           ; BSR set to: 0
 12738  0008C8  0012               	return		;funcret
 12739  0008CA                     __end_of_actuatorTest:
 12740                           	opt stack 0
 12741                           tblptru	equ	0xFF8
 12742                           tblptrh	equ	0xFF7
 12743                           tblptrl	equ	0xFF6
 12744                           tablat	equ	0xFF5
 12745                           prodh	equ	0xFF4
 12746                           prodl	equ	0xFF3
 12747                           intcon	equ	0xFF2
 12748                           intcon2	equ	0xFF1
 12749                           intcon3	equ	0xFF0
 12750                           postinc0	equ	0xFEE
 12751                           wreg	equ	0xFE8
 12752                           postdec1	equ	0xFE5
 12753                           fsr1l	equ	0xFE1
 12754                           indf2	equ	0xFDF
 12755                           postinc2	equ	0xFDE
 12756                           postdec2	equ	0xFDD
 12757                           fsr2h	equ	0xFDA
 12758                           fsr2l	equ	0xFD9
 12759                           status	equ	0xFD8
 12760                           
 12761 ;; *************** function _SpeedTest *****************
 12762 ;; Defined at:
 12763 ;;		line 528 in file "Test.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;		None
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;		None
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;Total ram usage:        1 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:   10
 12784 ;; This function calls:
 12785 ;;		_lcdInst
 12786 ;;		_printf
 12787 ;; This function is called by:
 12788 ;;		_Test
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           	psect	text42
 12793  003F04                     __ptext42:
 12794                           	opt stack 0
 12795  003F04                     _SpeedTest:
 12796                           	opt stack 19
 12797                           
 12798                           ;Test.c: 530: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;incstack = 0
 12802  003F04  0E01               	movlw	1
 12803  003F06  EC24  F026         	call	_lcdInst
 12804  003F0A  0E68               	movlw	104
 12805  003F0C  0100               	movlb	0	; () banked
 12806  003F0E  6FAB               	movwf	??_SpeedTest& (0+255),b
 12807  003F10  0EE4               	movlw	228
 12808  003F12                     u8847:
 12809  003F12  2EE8               	decfsz	wreg,f,c
 12810  003F14  D7FE               	bra	u8847
 12811  003F16  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12812  003F18  D7FC               	bra	u8847
 12813  003F1A  F000               	nop	
 12814  003F1C  0E80               	movlw	128
 12815  003F1E  EC24  F026         	call	_lcdInst
 12816                           
 12817                           ;Test.c: 531: printf("S: D WILL RETURN ");
 12818  003F22  0E5B               	movlw	low STR_116
 12819  003F24  0100               	movlb	0	; () banked
 12820  003F26  6F8E               	movwf	printf@f& (0+255),b
 12821  003F28  0EFB               	movlw	high STR_116
 12822  003F2A  0100               	movlb	0	; () banked
 12823  003F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12824  003F2E  ECB8  F008         	call	_printf	;wreg free
 12825                           
 12826                           ;Test.c: 532: lcdInst(0b11000000);;
 12827  003F32  0EC0               	movlw	192
 12828  003F34  EC24  F026         	call	_lcdInst
 12829                           
 12830                           ;Test.c: 533: printf("OTHER SETS RA5   ");
 12831  003F38  0E49               	movlw	low STR_112
 12832  003F3A  0100               	movlb	0	; () banked
 12833  003F3C  6F8E               	movwf	printf@f& (0+255),b
 12834  003F3E  0EFB               	movlw	high STR_112
 12835  003F40  0100               	movlb	0	; () banked
 12836  003F42  6F8F               	movwf	(printf@f+1)& (0+255),b
 12837  003F44  ECB8  F008         	call	_printf	;wreg free
 12838  003F48                     l1262:
 12839  003F48  A281               	btfss	3969,1,c	;volatile
 12840  003F4A  D7FE               	goto	l1262
 12841                           
 12842                           ;Test.c: 538: }
 12843                           ;Test.c: 539: if(PORTB >> 4 == 0b1111){
 12844  003F4C  3881               	swapf	3969,w,c	;volatile
 12845  003F4E  0B0F               	andlw	15
 12846  003F50  0A0F               	xorlw	15
 12847  003F52  B4D8               	btfsc	status,2,c
 12848  003F54  0012               	return	
 12849  003F56  D014               	goto	l7493
 12850  003F58                     l1269:
 12851                           
 12852                           ;Test.c: 544: LATAbits.LATA5 = 1;
 12853  003F58  8A89               	bsf	3977,5,c	;volatile
 12854                           
 12855                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12856  003F5A  0E34               	movlw	52
 12857  003F5C  0100               	movlb	0	; () banked
 12858  003F5E  6FAB               	movwf	??_SpeedTest& (0+255),b
 12859  003F60  0EF1               	movlw	241
 12860  003F62                     u8857:
 12861  003F62  2EE8               	decfsz	wreg,f,c
 12862  003F64  D7FE               	bra	u8857
 12863  003F66  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12864  003F68  D7FC               	bra	u8857
 12865  003F6A  D000               	nop2	
 12866                           
 12867                           ;Test.c: 546: LATAbits.LATA5 = 0;
 12868  003F6C  9A89               	bcf	3977,5,c	;volatile
 12869                           
 12870                           ;Test.c: 547: _delay((unsigned long)((5)*(32000000/4000.0)));
 12871  003F6E  0E34               	movlw	52
 12872  003F70  0100               	movlb	0	; () banked
 12873  003F72  6FAB               	movwf	??_SpeedTest& (0+255),b
 12874  003F74  0EF1               	movlw	241
 12875  003F76                     u8867:
 12876  003F76  2EE8               	decfsz	wreg,f,c
 12877  003F78  D7FE               	bra	u8867
 12878  003F7A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12879  003F7C  D7FC               	bra	u8867
 12880  003F7E  D000               	nop2	
 12881  003F80                     l7493:
 12882  003F80  B281               	btfsc	3969,1,c	;volatile
 12883  003F82  D7EA               	goto	l1269
 12884                           
 12885                           ;Test.c: 550: }
 12886                           ;Test.c: 551: LATAbits.LATA5 = 0;
 12887  003F84  9A89               	bcf	3977,5,c	;volatile
 12888  003F86  D7E0               	goto	l1262
 12889  003F88                     __end_of_SpeedTest:
 12890                           	opt stack 0
 12891                           tblptru	equ	0xFF8
 12892                           tblptrh	equ	0xFF7
 12893                           tblptrl	equ	0xFF6
 12894                           tablat	equ	0xFF5
 12895                           prodh	equ	0xFF4
 12896                           prodl	equ	0xFF3
 12897                           intcon	equ	0xFF2
 12898                           intcon2	equ	0xFF1
 12899                           intcon3	equ	0xFF0
 12900                           postinc0	equ	0xFEE
 12901                           wreg	equ	0xFE8
 12902                           postdec1	equ	0xFE5
 12903                           fsr1l	equ	0xFE1
 12904                           indf2	equ	0xFDF
 12905                           postinc2	equ	0xFDE
 12906                           postdec2	equ	0xFDD
 12907                           fsr2h	equ	0xFDA
 12908                           fsr2l	equ	0xFD9
 12909                           status	equ	0xFD8
 12910                           
 12911 ;; *************** function _PusherTest *****************
 12912 ;; Defined at:
 12913 ;;		line 467 in file "Test.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;		None
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;  i               2   46[BANK0 ] int 
 12918 ;;  i               2   44[BANK0 ] int 
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      void 
 12921 ;; Registers used:
 12922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;Total ram usage:        5 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:   10
 12935 ;; This function calls:
 12936 ;;		_lcdInst
 12937 ;;		_printf
 12938 ;; This function is called by:
 12939 ;;		_Test
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text43
 12944  0039A2                     __ptext43:
 12945                           	opt stack 0
 12946  0039A2                     _PusherTest:
 12947                           	opt stack 19
 12948                           
 12949                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12950                           
 12951                           ;incstack = 0
 12952  0039A2  0E01               	movlw	1
 12953  0039A4  EC24  F026         	call	_lcdInst
 12954  0039A8  0E68               	movlw	104
 12955  0039AA  0100               	movlb	0	; () banked
 12956  0039AC  6FAB               	movwf	??_PusherTest& (0+255),b
 12957  0039AE  0EE4               	movlw	228
 12958  0039B0                     u8877:
 12959  0039B0  2EE8               	decfsz	wreg,f,c
 12960  0039B2  D7FE               	bra	u8877
 12961  0039B4  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12962  0039B6  D7FC               	bra	u8877
 12963  0039B8  F000               	nop	
 12964  0039BA  0E80               	movlw	128
 12965  0039BC  EC24  F026         	call	_lcdInst
 12966                           
 12967                           ;Test.c: 469: printf("PUSHER TST");
 12968  0039C0  0E71               	movlw	low STR_113
 12969  0039C2  0100               	movlb	0	; () banked
 12970  0039C4  6F8E               	movwf	printf@f& (0+255),b
 12971  0039C6  0EFF               	movlw	high STR_113
 12972  0039C8  0100               	movlb	0	; () banked
 12973  0039CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12974  0039CC  ECB8  F008         	call	_printf	;wreg free
 12975  0039D0                     l1227:
 12976  0039D0  A281               	btfss	3969,1,c	;volatile
 12977  0039D2  D7FE               	goto	l1227
 12978                           
 12979                           ;Test.c: 475: }
 12980                           ;Test.c: 476: if(PORTB >> 4 == 0b1111){
 12981  0039D4  3881               	swapf	3969,w,c	;volatile
 12982  0039D6  0B0F               	andlw	15
 12983  0039D8  0A0F               	xorlw	15
 12984  0039DA  B4D8               	btfsc	status,2,c
 12985  0039DC  0012               	return	
 12986                           
 12987                           ;Test.c: 481: else if(PORTB >> 4 == 0b0101){
 12988                           
 12989                           ;Test.c: 478: }
 12990                           
 12991                           ;Test.c: 477: break;
 12992  0039DE  3881               	swapf	3969,w,c	;volatile
 12993  0039E0  0B0F               	andlw	15
 12994  0039E2  0A05               	xorlw	5
 12995  0039E4  A4D8               	btfss	status,2,c
 12996  0039E6  D01D               	goto	l7523
 12997                           
 12998                           ;Test.c: 482: for(int i = 0; i<3000; i++){
 12999  0039E8  0E00               	movlw	0
 13000  0039EA  0100               	movlb	0	; () banked
 13001  0039EC  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 13002  0039EE  0E00               	movlw	0
 13003  0039F0  6FAC               	movwf	PusherTest@i& (0+255),b
 13004  0039F2                     l7513:
 13005                           
 13006                           ; BSR set to: 0
 13007  0039F2  0100               	movlb	0	; () banked
 13008  0039F4  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13009  0039F6  D008               	goto	l1234
 13010  0039F8  0EB8               	movlw	184
 13011  0039FA  0100               	movlb	0	; () banked
 13012  0039FC  5DAC               	subwf	PusherTest@i& (0+255),w,b
 13013  0039FE  0E0B               	movlw	11
 13014  003A00  0100               	movlb	0	; () banked
 13015  003A02  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13016  003A04  B0D8               	btfsc	status,0,c
 13017  003A06  D02F               	goto	l1240
 13018  003A08                     l1234:
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;Test.c: 483: LATAbits.LATA4 = 1;
 13022  003A08  8889               	bsf	3977,4,c	;volatile
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;Test.c: 484: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13026  003A0A  0EC8               	movlw	200
 13027  003A0C                     u8887:
 13028  003A0C  2EE8               	decfsz	wreg,f,c
 13029  003A0E  D7FE               	bra	u8887
 13030                           
 13031                           ;Test.c: 485: LATAbits.LATA4 = 0;
 13032  003A10  9889               	bcf	3977,4,c	;volatile
 13033                           
 13034                           ;Test.c: 486: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13035  003A12  0E42               	movlw	66
 13036  003A14                     u8897:
 13037  003A14  2EE8               	decfsz	wreg,f,c
 13038  003A16  D7FE               	bra	u8897
 13039  003A18  D000               	nop2	
 13040  003A1A  0100               	movlb	0	; () banked
 13041  003A1C  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 13042  003A1E  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 13043  003A20  D7E8               	goto	l7513
 13044  003A22                     l7523:
 13045                           
 13046                           ;Test.c: 489: else if (PORTB >> 4 == 0b110){
 13047  003A22  3881               	swapf	3969,w,c	;volatile
 13048  003A24  0B0F               	andlw	15
 13049  003A26  0A06               	xorlw	6
 13050  003A28  A4D8               	btfss	status,2,c
 13051  003A2A  D01D               	goto	l1240
 13052                           
 13053                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 13054  003A2C  0E00               	movlw	0
 13055  003A2E  0100               	movlb	0	; () banked
 13056  003A30  6FAF               	movwf	(PusherTest@i_1698+1)& (0+255),b
 13057  003A32  0E00               	movlw	0
 13058  003A34  6FAE               	movwf	PusherTest@i_1698& (0+255),b
 13059  003A36                     l7527:
 13060                           
 13061                           ; BSR set to: 0
 13062  003A36  0100               	movlb	0	; () banked
 13063  003A38  BFAF               	btfsc	(PusherTest@i_1698+1)& (0+255),7,b
 13064  003A3A  D008               	goto	l1238
 13065  003A3C  0EB8               	movlw	184
 13066  003A3E  0100               	movlb	0	; () banked
 13067  003A40  5DAE               	subwf	PusherTest@i_1698& (0+255),w,b
 13068  003A42  0E0B               	movlw	11
 13069  003A44  0100               	movlb	0	; () banked
 13070  003A46  59AF               	subwfb	(PusherTest@i_1698+1)& (0+255),w,b
 13071  003A48  B0D8               	btfsc	status,0,c
 13072  003A4A  D00D               	goto	l1240
 13073  003A4C                     l1238:
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;Test.c: 491: LATAbits.LATA4 = 1;
 13077  003A4C  8889               	bsf	3977,4,c	;volatile
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;Test.c: 492: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13081  003A4E  0E9A               	movlw	154
 13082  003A50                     u8907:
 13083  003A50  2EE8               	decfsz	wreg,f,c
 13084  003A52  D7FE               	bra	u8907
 13085  003A54  D000               	nop2	
 13086                           
 13087                           ;Test.c: 493: LATAbits.LATA4 = 0;
 13088  003A56  9889               	bcf	3977,4,c	;volatile
 13089                           
 13090                           ;Test.c: 494: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13091  003A58  0E70               	movlw	112
 13092  003A5A                     u8917:
 13093  003A5A  2EE8               	decfsz	wreg,f,c
 13094  003A5C  D7FE               	bra	u8917
 13095  003A5E  0100               	movlb	0	; () banked
 13096  003A60  4BAE               	infsnz	PusherTest@i_1698& (0+255),f,b
 13097  003A62  2BAF               	incf	(PusherTest@i_1698+1)& (0+255),f,b
 13098  003A64  D7E8               	goto	l7527
 13099  003A66                     l1240:
 13100  003A66  A281               	btfss	3969,1,c	;volatile
 13101  003A68  D7B3               	goto	l1227
 13102  003A6A  D7FD               	goto	l1240
 13103  003A6C                     __end_of_PusherTest:
 13104                           	opt stack 0
 13105                           tblptru	equ	0xFF8
 13106                           tblptrh	equ	0xFF7
 13107                           tblptrl	equ	0xFF6
 13108                           tablat	equ	0xFF5
 13109                           prodh	equ	0xFF4
 13110                           prodl	equ	0xFF3
 13111                           intcon	equ	0xFF2
 13112                           intcon2	equ	0xFF1
 13113                           intcon3	equ	0xFF0
 13114                           postinc0	equ	0xFEE
 13115                           wreg	equ	0xFE8
 13116                           postdec1	equ	0xFE5
 13117                           fsr1l	equ	0xFE1
 13118                           indf2	equ	0xFDF
 13119                           postinc2	equ	0xFDE
 13120                           postdec2	equ	0xFDD
 13121                           fsr2h	equ	0xFDA
 13122                           fsr2l	equ	0xFD9
 13123                           status	equ	0xFD8
 13124                           
 13125 ;; *************** function _PortTests *****************
 13126 ;; Defined at:
 13127 ;;		line 409 in file "Test.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;		None
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;		None
 13132 ;; Return value:  Size  Location     Type
 13133 ;;                  1    wreg      void 
 13134 ;; Registers used:
 13135 ;;		wreg, status,2, status,0
 13136 ;; Tracked objects:
 13137 ;;		On entry : 0/0
 13138 ;;		On exit  : 0/0
 13139 ;;		Unchanged: 0/0
 13140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;Total ram usage:        2 bytes
 13146 ;; Hardware stack levels used:    1
 13147 ;; Hardware stack levels required when called:    7
 13148 ;; This function calls:
 13149 ;;		Nothing
 13150 ;; This function is called by:
 13151 ;;		_Test
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155                           	psect	text44
 13156  003F88                     __ptext44:
 13157                           	opt stack 0
 13158  003F88                     _PortTests:
 13159                           	opt stack 22
 13160  003F88                     l1192:
 13161  003F88  A281               	btfss	3969,1,c	;volatile
 13162  003F8A  D7FE               	goto	l1192
 13163                           
 13164                           ;Test.c: 413: var = PORTB >> 4;
 13165  003F8C  CF81 F080          	movff	3969,??_PortTests	;volatile
 13166  003F90  0100               	movlb	0	; () banked
 13167  003F92  3B80               	swapf	??_PortTests& (0+255),f,b
 13168  003F94  0E0F               	movlw	15
 13169  003F96  1780               	andwf	??_PortTests& (0+255),f,b
 13170  003F98  0100               	movlb	0	; () banked
 13171  003F9A  5180               	movf	??_PortTests& (0+255),w,b
 13172  003F9C  0100               	movlb	0	; () banked
 13173  003F9E  6FFA               	movwf	_var& (0+255),b
 13174  003FA0  6BFB               	clrf	(_var+1)& (0+255),b
 13175                           
 13176                           ;Test.c: 414: switch(var){
 13177  003FA2  D00C               	goto	l7541
 13178  003FA4                     l1196:
 13179                           
 13180                           ; BSR set to: 0
 13181                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13182  003FA4  808D               	bsf	3981,0,c	;volatile
 13183                           
 13184                           ;Test.c: 417: break;
 13185  003FA6  D027               	goto	l1204
 13186  003FA8                     l1198:
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13190  003FA8  828D               	bsf	3981,1,c	;volatile
 13191                           
 13192                           ;Test.c: 420: break;
 13193  003FAA  D025               	goto	l1204
 13194  003FAC                     l1199:
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13198  003FAC  808C               	bsf	3980,0,c	;volatile
 13199                           
 13200                           ;Test.c: 423: break;
 13201  003FAE  D023               	goto	l1204
 13202  003FB0                     l1200:
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13206  003FB0  8689               	bsf	3977,3,c	;volatile
 13207                           
 13208                           ;Test.c: 426: break;
 13209  003FB2  D021               	goto	l1204
 13210  003FB4                     l1201:
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13214  003FB4  8889               	bsf	3977,4,c	;volatile
 13215                           
 13216                           ;Test.c: 429: break;
 13217  003FB6  D01F               	goto	l1204
 13218  003FB8                     l1202:
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13222  003FB8  8A89               	bsf	3977,5,c	;volatile
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;Test.c: 435: }
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;Test.c: 434: break;
 13229                           
 13230                           ;Test.c: 433: default:
 13231                           
 13232                           ;Test.c: 432: break;
 13233  003FBA  D01D               	goto	l1204
 13234  003FBC                     l7541:
 13235                           
 13236                           ; BSR set to: 0
 13237  003FBC  C0FA  F080         	movff	_var,??_PortTests
 13238  003FC0  C0FB  F081         	movff	_var+1,??_PortTests+1
 13239                           
 13240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13241                           ; Switch size 1, requested type "space"
 13242                           ; Number of cases is 1, Range of values is 0 to 0
 13243                           ; switch strategies available:
 13244                           ; Name         Instructions Cycles
 13245                           ; simple_byte            4     3 (average)
 13246                           ;	Chosen strategy is simple_byte
 13247  003FC4  0100               	movlb	0	; () banked
 13248  003FC6  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13249  003FC8  0A00               	xorlw	0	; case 0
 13250  003FCA  A4D8               	btfss	status,2,c
 13251  003FCC  D014               	goto	l1204
 13252                           
 13253                           ; BSR set to: 0
 13254                           ; Switch size 1, requested type "space"
 13255                           ; Number of cases is 6, Range of values is 0 to 5
 13256                           ; switch strategies available:
 13257                           ; Name         Instructions Cycles
 13258                           ; simple_byte           19    10 (average)
 13259                           ;	Chosen strategy is simple_byte
 13260  003FCE  0100               	movlb	0	; () banked
 13261  003FD0  5180               	movf	??_PortTests& (0+255),w,b
 13262  003FD2  0A00               	xorlw	0	; case 0
 13263  003FD4  B4D8               	btfsc	status,2,c
 13264  003FD6  D7E6               	goto	l1196
 13265  003FD8  0A01               	xorlw	1	; case 1
 13266  003FDA  B4D8               	btfsc	status,2,c
 13267  003FDC  D7E5               	goto	l1198
 13268  003FDE  0A03               	xorlw	3	; case 2
 13269  003FE0  B4D8               	btfsc	status,2,c
 13270  003FE2  D7E4               	goto	l1199
 13271  003FE4  0A01               	xorlw	1	; case 3
 13272  003FE6  B4D8               	btfsc	status,2,c
 13273  003FE8  D7E3               	goto	l1200
 13274  003FEA  0A07               	xorlw	7	; case 4
 13275  003FEC  B4D8               	btfsc	status,2,c
 13276  003FEE  D7E2               	goto	l1201
 13277  003FF0  0A01               	xorlw	1	; case 5
 13278  003FF2  B4D8               	btfsc	status,2,c
 13279  003FF4  D7E1               	goto	l1202
 13280  003FF6                     l1204:
 13281  003FF6  B281               	btfsc	3969,1,c	;volatile
 13282  003FF8  D7FE               	goto	l1204
 13283                           
 13284                           ;Test.c: 437: __nop();
 13285  003FFA  F000               	nop	
 13286                           
 13287                           ;Test.c: 438: __nop();
 13288  003FFC  F000               	nop	
 13289                           
 13290                           ;Test.c: 439: LATA = 0x00;
 13291  003FFE  0E00               	movlw	0
 13292  004000  6E89               	movwf	3977,c	;volatile
 13293                           
 13294                           ;Test.c: 440: LATE = 0x00;
 13295  004002  0E00               	movlw	0
 13296  004004  6E8D               	movwf	3981,c	;volatile
 13297                           
 13298                           ;Test.c: 441: LATD = 0x00; }
 13299  004006  0E00               	movlw	0
 13300  004008  6E8C               	movwf	3980,c	;volatile
 13301  00400A  D7BE               	goto	l1192
 13302  00400C                     __end_of_PortTests:
 13303                           	opt stack 0
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           intcon2	equ	0xFF1
 13312                           intcon3	equ	0xFF0
 13313                           postinc0	equ	0xFEE
 13314                           wreg	equ	0xFE8
 13315                           postdec1	equ	0xFE5
 13316                           fsr1l	equ	0xFE1
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           postdec2	equ	0xFDD
 13320                           fsr2h	equ	0xFDA
 13321                           fsr2l	equ	0xFD9
 13322                           status	equ	0xFD8
 13323                           
 13324 ;; *************** function _PortTestA5 *****************
 13325 ;; Defined at:
 13326 ;;		line 444 in file "Test.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;		None
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;		None
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  1    wreg      void 
 13333 ;; Registers used:
 13334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;Total ram usage:        1 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:   10
 13347 ;; This function calls:
 13348 ;;		_lcdInst
 13349 ;;		_printf
 13350 ;; This function is called by:
 13351 ;;		_Test
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text45
 13356  0043E4                     __ptext45:
 13357                           	opt stack 0
 13358  0043E4                     _PortTestA5:
 13359                           	opt stack 19
 13360                           
 13361                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13362                           
 13363                           ;incstack = 0
 13364  0043E4  0E01               	movlw	1
 13365  0043E6  EC24  F026         	call	_lcdInst
 13366  0043EA  0E68               	movlw	104
 13367  0043EC  0100               	movlb	0	; () banked
 13368  0043EE  6FAB               	movwf	??_PortTestA5& (0+255),b
 13369  0043F0  0EE4               	movlw	228
 13370  0043F2                     u8927:
 13371  0043F2  2EE8               	decfsz	wreg,f,c
 13372  0043F4  D7FE               	bra	u8927
 13373  0043F6  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13374  0043F8  D7FC               	bra	u8927
 13375  0043FA  F000               	nop	
 13376  0043FC  0E80               	movlw	128
 13377  0043FE  EC24  F026         	call	_lcdInst
 13378                           
 13379                           ;Test.c: 446: printf("D WILL RETURN    ");
 13380  004402  0E37               	movlw	low STR_111
 13381  004404  0100               	movlb	0	; () banked
 13382  004406  6F8E               	movwf	printf@f& (0+255),b
 13383  004408  0EFB               	movlw	high STR_111
 13384  00440A  0100               	movlb	0	; () banked
 13385  00440C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13386  00440E  ECB8  F008         	call	_printf	;wreg free
 13387                           
 13388                           ;Test.c: 447: lcdInst(0b11000000);;
 13389  004412  0EC0               	movlw	192
 13390  004414  EC24  F026         	call	_lcdInst
 13391                           
 13392                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13393  004418  0E49               	movlw	low STR_112
 13394  00441A  0100               	movlb	0	; () banked
 13395  00441C  6F8E               	movwf	printf@f& (0+255),b
 13396  00441E  0EFB               	movlw	high STR_112
 13397  004420  0100               	movlb	0	; () banked
 13398  004422  6F8F               	movwf	(printf@f+1)& (0+255),b
 13399  004424  ECB8  F008         	call	_printf	;wreg free
 13400  004428                     l1213:
 13401  004428  A281               	btfss	3969,1,c	;volatile
 13402  00442A  D7FE               	goto	l1213
 13403                           
 13404                           ;Test.c: 453: }
 13405                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13406  00442C  3881               	swapf	3969,w,c	;volatile
 13407  00442E  0B0F               	andlw	15
 13408  004430  0A0F               	xorlw	15
 13409  004432  B4D8               	btfsc	status,2,c
 13410  004434  0012               	return	
 13411                           
 13412                           ;Test.c: 457: else{
 13413                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13414                           
 13415                           ;Test.c: 456: }
 13416                           
 13417                           ;Test.c: 455: break;
 13418  004436  8A89               	bsf	3977,5,c	;volatile
 13419  004438                     l1219:
 13420  004438  B281               	btfsc	3969,1,c	;volatile
 13421  00443A  D7FE               	goto	l1219
 13422                           
 13423                           ;Test.c: 461: }
 13424                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13425  00443C  9A89               	bcf	3977,5,c	;volatile
 13426  00443E  D7F4               	goto	l1213
 13427  004440                     __end_of_PortTestA5:
 13428                           	opt stack 0
 13429                           tblptru	equ	0xFF8
 13430                           tblptrh	equ	0xFF7
 13431                           tblptrl	equ	0xFF6
 13432                           tablat	equ	0xFF5
 13433                           prodh	equ	0xFF4
 13434                           prodl	equ	0xFF3
 13435                           intcon	equ	0xFF2
 13436                           intcon2	equ	0xFF1
 13437                           intcon3	equ	0xFF0
 13438                           postinc0	equ	0xFEE
 13439                           wreg	equ	0xFE8
 13440                           postdec1	equ	0xFE5
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449 ;; *************** function _EEPROMTest *****************
 13450 ;; Defined at:
 13451 ;;		line 556 in file "Test.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;		None
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;		None
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  1    wreg      void 
 13458 ;; Registers used:
 13459 ;;		None
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;Total ram usage:        0 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    7
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		_Test
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           	psect	text46
 13480  004CAC                     __ptext46:
 13481                           	opt stack 0
 13482  004CAC                     _EEPROMTest:
 13483                           	opt stack 22
 13484                           
 13485                           ;incstack = 0
 13486  004CAC  0012               	return		;funcret
 13487  004CAE                     __end_of_EEPROMTest:
 13488                           	opt stack 0
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           intcon	equ	0xFF2
 13496                           intcon2	equ	0xFF1
 13497                           intcon3	equ	0xFF0
 13498                           postinc0	equ	0xFEE
 13499                           wreg	equ	0xFE8
 13500                           postdec1	equ	0xFE5
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           fsr2h	equ	0xFDA
 13506                           fsr2l	equ	0xFD9
 13507                           status	equ	0xFD8
 13508                           
 13509 ;; *************** function _BothServos *****************
 13510 ;; Defined at:
 13511 ;;		line 352 in file "Test.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;		None
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      void 
 13518 ;; Registers used:
 13519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;Total ram usage:        2 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:   10
 13532 ;; This function calls:
 13533 ;;		_initServos
 13534 ;;		_lcdInst
 13535 ;;		_printf
 13536 ;;		_updateServoPosition
 13537 ;; This function is called by:
 13538 ;;		_Test
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	text47
 13543  0015A8                     __ptext47:
 13544                           	opt stack 0
 13545  0015A8                     _BothServos:
 13546                           	opt stack 19
 13547                           
 13548                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13549                           
 13550                           ;incstack = 0
 13551  0015A8  0E01               	movlw	1
 13552  0015AA  EC24  F026         	call	_lcdInst
 13553  0015AE  0E68               	movlw	104
 13554  0015B0  0100               	movlb	0	; () banked
 13555  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13556  0015B4  0EE4               	movlw	228
 13557  0015B6                     u8937:
 13558  0015B6  2EE8               	decfsz	wreg,f,c
 13559  0015B8  D7FE               	bra	u8937
 13560  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13561  0015BC  D7FC               	bra	u8937
 13562  0015BE  F000               	nop	
 13563  0015C0  0E80               	movlw	128
 13564  0015C2  EC24  F026         	call	_lcdInst
 13565                           
 13566                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 13567  0015C6  0EB4               	movlw	low STR_110
 13568  0015C8  0100               	movlb	0	; () banked
 13569  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13570  0015CC  0EFC               	movlw	high STR_110
 13571  0015CE  0100               	movlb	0	; () banked
 13572  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13573  0015D2  ECB8  F008         	call	_printf	;wreg free
 13574                           
 13575                           ;Test.c: 355: TMR1ON = 1;
 13576  0015D6  80CD               	bsf	4045,0,c	;volatile
 13577                           
 13578                           ;Test.c: 356: TMR3ON = 1;
 13579  0015D8  80B1               	bsf	4017,0,c	;volatile
 13580                           
 13581                           ;Test.c: 357: machine_state = Sorting_state;
 13582  0015DA  0E01               	movlw	1
 13583  0015DC  0100               	movlb	0	; () banked
 13584  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;Test.c: 358: was_low_1 = 0;
 13588  0015E0  0E00               	movlw	0
 13589  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13590  0015E4  0E00               	movlw	0
 13591  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13592                           
 13593                           ; BSR set to: 0
 13594                           ;Test.c: 359: was_low_3 = 0;
 13595  0015E8  0E00               	movlw	0
 13596  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13597  0015EC  0E00               	movlw	0
 13598  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;Test.c: 365: initServos();
 13602  0015F0  EC20  F022         	call	_initServos	;wreg free
 13603                           
 13604                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13605  0015F4  0E3D               	movlw	61
 13606  0015F6  0100               	movlb	0	; () banked
 13607  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13608  0015FA  0EE1               	movlw	225
 13609  0015FC  0100               	movlb	0	; () banked
 13610  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13611  001600  0E3F               	movlw	63
 13612  001602                     u8947:
 13613  001602  2EE8               	decfsz	wreg,f,c
 13614  001604  D7FE               	bra	u8947
 13615  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13616  001608  D7FC               	bra	u8947
 13617  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13618  00160C  D7FA               	bra	u8947
 13619  00160E  D000               	nop2	
 13620                           
 13621                           ;Test.c: 368: updateServoPosition(500, 1);
 13622  001610  0E01               	movlw	1
 13623  001612  0100               	movlb	0	; () banked
 13624  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13625  001616  0EF4               	movlw	244
 13626  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13627  00161A  0E00               	movlw	0
 13628  00161C  0100               	movlb	0	; () banked
 13629  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13630  001620  0E01               	movlw	1
 13631  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13632  001624  EC82  F020         	call	_updateServoPosition	;wreg free
 13633                           
 13634                           ;Test.c: 369: updateServoPosition(1050, 3);
 13635  001628  0E04               	movlw	4
 13636  00162A  0100               	movlb	0	; () banked
 13637  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13638  00162E  0E1A               	movlw	26
 13639  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13640  001632  0E00               	movlw	0
 13641  001634  0100               	movlb	0	; () banked
 13642  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13643  001638  0E03               	movlw	3
 13644  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13645  00163C  EC82  F020         	call	_updateServoPosition	;wreg free
 13646                           
 13647                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 13648  001640  0E1F               	movlw	31
 13649  001642  0100               	movlb	0	; () banked
 13650  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13651  001646  0E71               	movlw	113
 13652  001648  0100               	movlb	0	; () banked
 13653  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13654  00164C  0E1E               	movlw	30
 13655  00164E                     u8957:
 13656  00164E  2EE8               	decfsz	wreg,f,c
 13657  001650  D7FE               	bra	u8957
 13658  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13659  001654  D7FC               	bra	u8957
 13660  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13661  001658  D7FA               	bra	u8957
 13662  00165A  F000               	nop	
 13663                           
 13664                           ;Test.c: 371: updateServoPosition(1260, 3);
 13665  00165C  0E04               	movlw	4
 13666  00165E  0100               	movlb	0	; () banked
 13667  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13668  001662  0EEC               	movlw	236
 13669  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13670  001666  0E00               	movlw	0
 13671  001668  0100               	movlb	0	; () banked
 13672  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13673  00166C  0E03               	movlw	3
 13674  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13675  001670  EC82  F020         	call	_updateServoPosition	;wreg free
 13676                           
 13677                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13678  001674  0E66               	movlw	102
 13679  001676  0100               	movlb	0	; () banked
 13680  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13681  00167A  0E76               	movlw	118
 13682  00167C  0100               	movlb	0	; () banked
 13683  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13684  001680  0EC1               	movlw	193
 13685  001682                     u8967:
 13686  001682  2EE8               	decfsz	wreg,f,c
 13687  001684  D7FE               	bra	u8967
 13688  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13689  001688  D7FC               	bra	u8967
 13690  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13691  00168C  D7FA               	bra	u8967
 13692                           
 13693                           ;Test.c: 373: updateServoPosition(1050, 3);
 13694  00168E  0E04               	movlw	4
 13695  001690  0100               	movlb	0	; () banked
 13696  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13697  001694  0E1A               	movlw	26
 13698  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13699  001698  0E00               	movlw	0
 13700  00169A  0100               	movlb	0	; () banked
 13701  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13702  00169E  0E03               	movlw	3
 13703  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13704  0016A2  EC82  F020         	call	_updateServoPosition	;wreg free
 13705                           
 13706                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 13707  0016A6  0E1F               	movlw	31
 13708  0016A8  0100               	movlb	0	; () banked
 13709  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13710  0016AC  0E71               	movlw	113
 13711  0016AE  0100               	movlb	0	; () banked
 13712  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13713  0016B2  0E1E               	movlw	30
 13714  0016B4                     u8977:
 13715  0016B4  2EE8               	decfsz	wreg,f,c
 13716  0016B6  D7FE               	bra	u8977
 13717  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13718  0016BA  D7FC               	bra	u8977
 13719  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13720  0016BE  D7FA               	bra	u8977
 13721  0016C0  F000               	nop	
 13722                           
 13723                           ;Test.c: 376: updateServoPosition(850, 1);
 13724  0016C2  0E03               	movlw	3
 13725  0016C4  0100               	movlb	0	; () banked
 13726  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13727  0016C8  0E52               	movlw	82
 13728  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13729  0016CC  0E00               	movlw	0
 13730  0016CE  0100               	movlb	0	; () banked
 13731  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13732  0016D2  0E01               	movlw	1
 13733  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13734  0016D6  EC82  F020         	call	_updateServoPosition	;wreg free
 13735                           
 13736                           ;Test.c: 377: updateServoPosition(1050, 3);
 13737  0016DA  0E04               	movlw	4
 13738  0016DC  0100               	movlb	0	; () banked
 13739  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13740  0016E0  0E1A               	movlw	26
 13741  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13742  0016E4  0E00               	movlw	0
 13743  0016E6  0100               	movlb	0	; () banked
 13744  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13745  0016EA  0E03               	movlw	3
 13746  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13747  0016EE  EC82  F020         	call	_updateServoPosition	;wreg free
 13748                           
 13749                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 13750  0016F2  0E1F               	movlw	31
 13751  0016F4  0100               	movlb	0	; () banked
 13752  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13753  0016F8  0E71               	movlw	113
 13754  0016FA  0100               	movlb	0	; () banked
 13755  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13756  0016FE  0E1E               	movlw	30
 13757  001700                     u8987:
 13758  001700  2EE8               	decfsz	wreg,f,c
 13759  001702  D7FE               	bra	u8987
 13760  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13761  001706  D7FC               	bra	u8987
 13762  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13763  00170A  D7FA               	bra	u8987
 13764  00170C  F000               	nop	
 13765                           
 13766                           ;Test.c: 379: updateServoPosition(1260, 3);
 13767  00170E  0E04               	movlw	4
 13768  001710  0100               	movlb	0	; () banked
 13769  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13770  001714  0EEC               	movlw	236
 13771  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13772  001718  0E00               	movlw	0
 13773  00171A  0100               	movlb	0	; () banked
 13774  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13775  00171E  0E03               	movlw	3
 13776  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13777  001722  EC82  F020         	call	_updateServoPosition	;wreg free
 13778                           
 13779                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13780  001726  0E66               	movlw	102
 13781  001728  0100               	movlb	0	; () banked
 13782  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13783  00172C  0E76               	movlw	118
 13784  00172E  0100               	movlb	0	; () banked
 13785  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13786  001732  0EC1               	movlw	193
 13787  001734                     u8997:
 13788  001734  2EE8               	decfsz	wreg,f,c
 13789  001736  D7FE               	bra	u8997
 13790  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13791  00173A  D7FC               	bra	u8997
 13792  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13793  00173E  D7FA               	bra	u8997
 13794                           
 13795                           ;Test.c: 381: updateServoPosition(1050, 3);
 13796  001740  0E04               	movlw	4
 13797  001742  0100               	movlb	0	; () banked
 13798  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13799  001746  0E1A               	movlw	26
 13800  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13801  00174A  0E00               	movlw	0
 13802  00174C  0100               	movlb	0	; () banked
 13803  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13804  001750  0E03               	movlw	3
 13805  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13806  001754  EC82  F020         	call	_updateServoPosition	;wreg free
 13807                           
 13808                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 13809  001758  0E1F               	movlw	31
 13810  00175A  0100               	movlb	0	; () banked
 13811  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13812  00175E  0E71               	movlw	113
 13813  001760  0100               	movlb	0	; () banked
 13814  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13815  001764  0E1E               	movlw	30
 13816  001766                     u9007:
 13817  001766  2EE8               	decfsz	wreg,f,c
 13818  001768  D7FE               	bra	u9007
 13819  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13820  00176C  D7FC               	bra	u9007
 13821  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13822  001770  D7FA               	bra	u9007
 13823  001772  F000               	nop	
 13824                           
 13825                           ;Test.c: 384: updateServoPosition(1200, 1);
 13826  001774  0E04               	movlw	4
 13827  001776  0100               	movlb	0	; () banked
 13828  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13829  00177A  0EB0               	movlw	176
 13830  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13831  00177E  0E00               	movlw	0
 13832  001780  0100               	movlb	0	; () banked
 13833  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13834  001784  0E01               	movlw	1
 13835  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13836  001788  EC82  F020         	call	_updateServoPosition	;wreg free
 13837                           
 13838                           ;Test.c: 385: updateServoPosition(1050, 3);
 13839  00178C  0E04               	movlw	4
 13840  00178E  0100               	movlb	0	; () banked
 13841  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13842  001792  0E1A               	movlw	26
 13843  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13844  001796  0E00               	movlw	0
 13845  001798  0100               	movlb	0	; () banked
 13846  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13847  00179C  0E03               	movlw	3
 13848  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13849  0017A0  EC82  F020         	call	_updateServoPosition	;wreg free
 13850                           
 13851                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13852  0017A4  0E3D               	movlw	61
 13853  0017A6  0100               	movlb	0	; () banked
 13854  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13855  0017AA  0EE1               	movlw	225
 13856  0017AC  0100               	movlb	0	; () banked
 13857  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13858  0017B0  0E3F               	movlw	63
 13859  0017B2                     u9017:
 13860  0017B2  2EE8               	decfsz	wreg,f,c
 13861  0017B4  D7FE               	bra	u9017
 13862  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13863  0017B8  D7FC               	bra	u9017
 13864  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13865  0017BC  D7FA               	bra	u9017
 13866  0017BE  D000               	nop2	
 13867                           
 13868                           ;Test.c: 388: updateServoPosition(1670, 1);
 13869  0017C0  0E06               	movlw	6
 13870  0017C2  0100               	movlb	0	; () banked
 13871  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13872  0017C6  0E86               	movlw	134
 13873  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13874  0017CA  0E00               	movlw	0
 13875  0017CC  0100               	movlb	0	; () banked
 13876  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13877  0017D0  0E01               	movlw	1
 13878  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13879  0017D4  EC82  F020         	call	_updateServoPosition	;wreg free
 13880                           
 13881                           ;Test.c: 389: updateServoPosition(1050, 3);
 13882  0017D8  0E04               	movlw	4
 13883  0017DA  0100               	movlb	0	; () banked
 13884  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13885  0017DE  0E1A               	movlw	26
 13886  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13887  0017E2  0E00               	movlw	0
 13888  0017E4  0100               	movlb	0	; () banked
 13889  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13890  0017E8  0E03               	movlw	3
 13891  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13892  0017EC  EC82  F020         	call	_updateServoPosition	;wreg free
 13893                           
 13894                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 13895  0017F0  0E1F               	movlw	31
 13896  0017F2  0100               	movlb	0	; () banked
 13897  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13898  0017F6  0E71               	movlw	113
 13899  0017F8  0100               	movlb	0	; () banked
 13900  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13901  0017FC  0E1E               	movlw	30
 13902  0017FE                     u9027:
 13903  0017FE  2EE8               	decfsz	wreg,f,c
 13904  001800  D7FE               	bra	u9027
 13905  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13906  001804  D7FC               	bra	u9027
 13907  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13908  001808  D7FA               	bra	u9027
 13909  00180A  F000               	nop	
 13910                           
 13911                           ;Test.c: 391: updateServoPosition(1500, 3);
 13912  00180C  0E05               	movlw	5
 13913  00180E  0100               	movlb	0	; () banked
 13914  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13915  001812  0EDC               	movlw	220
 13916  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13917  001816  0E00               	movlw	0
 13918  001818  0100               	movlb	0	; () banked
 13919  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13920  00181C  0E03               	movlw	3
 13921  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13922  001820  EC82  F020         	call	_updateServoPosition	;wreg free
 13923                           
 13924                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13925  001824  0E66               	movlw	102
 13926  001826  0100               	movlb	0	; () banked
 13927  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13928  00182A  0E76               	movlw	118
 13929  00182C  0100               	movlb	0	; () banked
 13930  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13931  001830  0EC1               	movlw	193
 13932  001832                     u9037:
 13933  001832  2EE8               	decfsz	wreg,f,c
 13934  001834  D7FE               	bra	u9037
 13935  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13936  001838  D7FC               	bra	u9037
 13937  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13938  00183C  D7FA               	bra	u9037
 13939                           
 13940                           ;Test.c: 393: updateServoPosition(1050, 3);
 13941  00183E  0E04               	movlw	4
 13942  001840  0100               	movlb	0	; () banked
 13943  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13944  001844  0E1A               	movlw	26
 13945  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13946  001848  0E00               	movlw	0
 13947  00184A  0100               	movlb	0	; () banked
 13948  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13949  00184E  0E03               	movlw	3
 13950  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13951  001852  EC82  F020         	call	_updateServoPosition	;wreg free
 13952                           
 13953                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 13954  001856  0E1F               	movlw	31
 13955  001858  0100               	movlb	0	; () banked
 13956  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13957  00185C  0E71               	movlw	113
 13958  00185E  0100               	movlb	0	; () banked
 13959  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13960  001862  0E1E               	movlw	30
 13961  001864                     u9047:
 13962  001864  2EE8               	decfsz	wreg,f,c
 13963  001866  D7FE               	bra	u9047
 13964  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13965  00186A  D7FC               	bra	u9047
 13966  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13967  00186E  D7FA               	bra	u9047
 13968  001870  F000               	nop	
 13969                           
 13970                           ;Test.c: 396: updateServoPosition(2200, 1);
 13971  001872  0E08               	movlw	8
 13972  001874  0100               	movlb	0	; () banked
 13973  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13974  001878  0E98               	movlw	152
 13975  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13976  00187C  0E00               	movlw	0
 13977  00187E  0100               	movlb	0	; () banked
 13978  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13979  001882  0E01               	movlw	1
 13980  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13981  001886  EC82  F020         	call	_updateServoPosition	;wreg free
 13982                           
 13983                           ;Test.c: 397: updateServoPosition(1050, 3);
 13984  00188A  0E04               	movlw	4
 13985  00188C  0100               	movlb	0	; () banked
 13986  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13987  001890  0E1A               	movlw	26
 13988  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13989  001894  0E00               	movlw	0
 13990  001896  0100               	movlb	0	; () banked
 13991  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13992  00189A  0E03               	movlw	3
 13993  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13994  00189E  EC82  F020         	call	_updateServoPosition	;wreg free
 13995                           
 13996                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 13997  0018A2  0E1F               	movlw	31
 13998  0018A4  0100               	movlb	0	; () banked
 13999  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14000  0018A8  0E71               	movlw	113
 14001  0018AA  0100               	movlb	0	; () banked
 14002  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 14003  0018AE  0E1E               	movlw	30
 14004  0018B0                     u9057:
 14005  0018B0  2EE8               	decfsz	wreg,f,c
 14006  0018B2  D7FE               	bra	u9057
 14007  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14008  0018B6  D7FC               	bra	u9057
 14009  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14010  0018BA  D7FA               	bra	u9057
 14011  0018BC  F000               	nop	
 14012                           
 14013                           ;Test.c: 399: updateServoPosition(1500, 3);
 14014  0018BE  0E05               	movlw	5
 14015  0018C0  0100               	movlb	0	; () banked
 14016  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14017  0018C4  0EDC               	movlw	220
 14018  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14019  0018C8  0E00               	movlw	0
 14020  0018CA  0100               	movlb	0	; () banked
 14021  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14022  0018CE  0E03               	movlw	3
 14023  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14024  0018D2  EC82  F020         	call	_updateServoPosition	;wreg free
 14025                           
 14026                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14027  0018D6  0E66               	movlw	102
 14028  0018D8  0100               	movlb	0	; () banked
 14029  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14030  0018DC  0E76               	movlw	118
 14031  0018DE  0100               	movlb	0	; () banked
 14032  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 14033  0018E2  0EC1               	movlw	193
 14034  0018E4                     u9067:
 14035  0018E4  2EE8               	decfsz	wreg,f,c
 14036  0018E6  D7FE               	bra	u9067
 14037  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14038  0018EA  D7FC               	bra	u9067
 14039  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14040  0018EE  D7FA               	bra	u9067
 14041                           
 14042                           ;Test.c: 401: updateServoPosition(1050, 3);
 14043  0018F0  0E04               	movlw	4
 14044  0018F2  0100               	movlb	0	; () banked
 14045  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14046  0018F6  0E1A               	movlw	26
 14047  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14048  0018FA  0E00               	movlw	0
 14049  0018FC  0100               	movlb	0	; () banked
 14050  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14051  001900  0E03               	movlw	3
 14052  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14053  001904  EC82  F020         	call	_updateServoPosition	;wreg free
 14054                           
 14055                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14056  001908  0E1F               	movlw	31
 14057  00190A  0100               	movlb	0	; () banked
 14058  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14059  00190E  0E71               	movlw	113
 14060  001910  0100               	movlb	0	; () banked
 14061  001912  6FAB               	movwf	??_BothServos& (0+255),b
 14062  001914  0E1E               	movlw	30
 14063  001916                     u9077:
 14064  001916  2EE8               	decfsz	wreg,f,c
 14065  001918  D7FE               	bra	u9077
 14066  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14067  00191C  D7FC               	bra	u9077
 14068  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14069  001920  D7FA               	bra	u9077
 14070  001922  F000               	nop	
 14071                           
 14072                           ;Test.c: 404: TMR1ON = 0;
 14073  001924  90CD               	bcf	4045,0,c	;volatile
 14074                           
 14075                           ;Test.c: 405: TMR3ON = 0;
 14076  001926  90B1               	bcf	4017,0,c	;volatile
 14077                           
 14078                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14079  001928  9EF2               	bcf	intcon,7,c	;volatile
 14080  00192A  0012               	return		;funcret
 14081  00192C                     __end_of_BothServos:
 14082                           	opt stack 0
 14083                           tblptru	equ	0xFF8
 14084                           tblptrh	equ	0xFF7
 14085                           tblptrl	equ	0xFF6
 14086                           tablat	equ	0xFF5
 14087                           prodh	equ	0xFF4
 14088                           prodl	equ	0xFF3
 14089                           intcon	equ	0xFF2
 14090                           intcon2	equ	0xFF1
 14091                           intcon3	equ	0xFF0
 14092                           postinc0	equ	0xFEE
 14093                           wreg	equ	0xFE8
 14094                           postdec1	equ	0xFE5
 14095                           fsr1l	equ	0xFE1
 14096                           indf2	equ	0xFDF
 14097                           postinc2	equ	0xFDE
 14098                           postdec2	equ	0xFDD
 14099                           fsr2h	equ	0xFDA
 14100                           fsr2l	equ	0xFD9
 14101                           status	equ	0xFD8
 14102                           
 14103 ;; *************** function _initServos *****************
 14104 ;; Defined at:
 14105 ;;		line 340 in file "sort.c"
 14106 ;; Parameters:    Size  Location     Type
 14107 ;;		None
 14108 ;; Auto vars:     Size  Location     Type
 14109 ;;		None
 14110 ;; Return value:  Size  Location     Type
 14111 ;;                  1    wreg      void 
 14112 ;; Registers used:
 14113 ;;		wreg, status,2, status,0, cstack
 14114 ;; Tracked objects:
 14115 ;;		On entry : 0/0
 14116 ;;		On exit  : 0/0
 14117 ;;		Unchanged: 0/0
 14118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14123 ;;Total ram usage:        1 bytes
 14124 ;; Hardware stack levels used:    1
 14125 ;; Hardware stack levels required when called:    8
 14126 ;; This function calls:
 14127 ;;		_updateServoPosition
 14128 ;; This function is called by:
 14129 ;;		_Loading
 14130 ;;		_BothServos
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text48
 14135  004440                     __ptext48:
 14136                           	opt stack 0
 14137  004440                     _initServos:
 14138                           	opt stack 20
 14139                           
 14140                           ;sort.c: 341: updateServoPosition(1200, 1);
 14141                           
 14142                           ;incstack = 0
 14143  004440  0E04               	movlw	4
 14144  004442  0100               	movlb	0	; () banked
 14145  004444  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14146  004446  0EB0               	movlw	176
 14147  004448  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14148  00444A  0E00               	movlw	0
 14149  00444C  0100               	movlb	0	; () banked
 14150  00444E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14151  004450  0E01               	movlw	1
 14152  004452  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14153  004454  EC82  F020         	call	_updateServoPosition	;wreg free
 14154                           
 14155                           ;sort.c: 342: updateServoPosition(1050, 3);
 14156  004458  0E04               	movlw	4
 14157  00445A  0100               	movlb	0	; () banked
 14158  00445C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14159  00445E  0E1A               	movlw	26
 14160  004460  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14161  004462  0E00               	movlw	0
 14162  004464  0100               	movlb	0	; () banked
 14163  004466  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14164  004468  0E03               	movlw	3
 14165  00446A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14166  00446C  EC82  F020         	call	_updateServoPosition	;wreg free
 14167                           
 14168                           ;sort.c: 343: TMR1ON = 1;
 14169  004470  80CD               	bsf	4045,0,c	;volatile
 14170                           
 14171                           ;sort.c: 344: was_low_1 = 0;
 14172  004472  0E00               	movlw	0
 14173  004474  6E7A               	movwf	_was_low_1+1,c	;volatile
 14174  004476  0E00               	movlw	0
 14175  004478  6E79               	movwf	_was_low_1,c	;volatile
 14176                           
 14177                           ;sort.c: 345: _delay((unsigned long)((5)*(32000000/4000.0)));
 14178  00447A  0E34               	movlw	52
 14179  00447C  0100               	movlb	0	; () banked
 14180  00447E  6F88               	movwf	??_initServos& (0+255),b
 14181  004480  0EF1               	movlw	241
 14182  004482                     u9087:
 14183  004482  2EE8               	decfsz	wreg,f,c
 14184  004484  D7FE               	bra	u9087
 14185  004486  2F88               	decfsz	??_initServos& (0+255),f,b
 14186  004488  D7FC               	bra	u9087
 14187  00448A  D000               	nop2	
 14188                           
 14189                           ;sort.c: 346: TMR3ON = 1;
 14190  00448C  80B1               	bsf	4017,0,c	;volatile
 14191                           
 14192                           ;sort.c: 347: was_low_3 = 0;
 14193  00448E  0E00               	movlw	0
 14194  004490  6E7C               	movwf	_was_low_3+1,c	;volatile
 14195  004492  0E00               	movlw	0
 14196  004494  6E7B               	movwf	_was_low_3,c	;volatile
 14197                           
 14198                           ;sort.c: 349: LATCbits.LATC0 = 1;
 14199  004496  808B               	bsf	3979,0,c	;volatile
 14200  004498  0012               	return		;funcret
 14201  00449A                     __end_of_initServos:
 14202                           	opt stack 0
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           intcon	equ	0xFF2
 14210                           intcon2	equ	0xFF1
 14211                           intcon3	equ	0xFF0
 14212                           postinc0	equ	0xFEE
 14213                           wreg	equ	0xFE8
 14214                           postdec1	equ	0xFE5
 14215                           fsr1l	equ	0xFE1
 14216                           indf2	equ	0xFDF
 14217                           postinc2	equ	0xFDE
 14218                           postdec2	equ	0xFDD
 14219                           fsr2h	equ	0xFDA
 14220                           fsr2l	equ	0xFD9
 14221                           status	equ	0xFD8
 14222                           
 14223 ;; *************** function _updateServoPosition *****************
 14224 ;; Defined at:
 14225 ;;		line 408 in file "sort.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;  time_us         2    0[BANK0 ] int 
 14228 ;;  timer           2    2[BANK0 ] int 
 14229 ;; Auto vars:     Size  Location     Type
 14230 ;;  my_time         2    6[BANK0 ] unsigned int 
 14231 ;; Return value:  Size  Location     Type
 14232 ;;                  1    wreg      void 
 14233 ;; Registers used:
 14234 ;;		wreg, status,2, status,0
 14235 ;; Tracked objects:
 14236 ;;		On entry : 0/0
 14237 ;;		On exit  : 0/0
 14238 ;;		Unchanged: 0/0
 14239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;Total ram usage:        8 bytes
 14245 ;; Hardware stack levels used:    1
 14246 ;; Hardware stack levels required when called:    7
 14247 ;; This function calls:
 14248 ;;		Nothing
 14249 ;; This function is called by:
 14250 ;;		_Distribution
 14251 ;;		_initServos
 14252 ;;		_actuatorTest
 14253 ;;		_BothServos
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           	psect	text49
 14258  004104                     __ptext49:
 14259                           	opt stack 0
 14260  004104                     _updateServoPosition:
 14261                           	opt stack 20
 14262                           
 14263                           ;sort.c: 409: unsigned int my_time = 65535 - time_us;
 14264                           
 14265                           ;incstack = 0
 14266  004104  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14267  004108  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14268  00410C  0100               	movlb	0	; () banked
 14269  00410E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14270  004110  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14271  004112  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14272  004114  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14273  004116  0EFF               	movlw	255
 14274  004118  0100               	movlb	0	; () banked
 14275  00411A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14276  00411C  0100               	movlb	0	; () banked
 14277  00411E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14278  004120  0EFF               	movlw	255
 14279  004122  0100               	movlb	0	; () banked
 14280  004124  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14281  004126  0100               	movlb	0	; () banked
 14282  004128  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14283                           
 14284                           ;sort.c: 410: switch(timer){
 14285  00412A  D015               	goto	l5879
 14286  00412C                     l5877:
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;sort.c: 412: servoTimes[0] = my_time >> 8;
 14290  00412C  0100               	movlb	0	; () banked
 14291  00412E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14292  004130  0101               	movlb	1	; () banked
 14293  004132  6F1C               	movwf	_servoTimes& (0+255),b
 14294  004134  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14295                           
 14296                           ;sort.c: 413: servoTimes[1] = my_time & 0xFF;
 14297  004136  0100               	movlb	0	; () banked
 14298  004138  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14299  00413A  0101               	movlb	1	; () banked
 14300  00413C  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14301  00413E  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14302  004140                     l818:
 14303                           
 14304                           ;sort.c: 415: servoTimes[2] = my_time >> 8;
 14305  004140  0100               	movlb	0	; () banked
 14306  004142  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14307  004144  0101               	movlb	1	; () banked
 14308  004146  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14309  004148  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14310                           
 14311                           ;sort.c: 416: servoTimes[3] = my_time & 0xFF;
 14312  00414A  0100               	movlb	0	; () banked
 14313  00414C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14314  00414E  0101               	movlb	1	; () banked
 14315  004150  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14316  004152  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14317                           
 14318                           ;sort.c: 417: }
 14319  004154  0012               	return	
 14320  004156                     l5879:
 14321  004156  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14322  00415A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14323                           
 14324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14325                           ; Switch size 1, requested type "space"
 14326                           ; Number of cases is 1, Range of values is 0 to 0
 14327                           ; switch strategies available:
 14328                           ; Name         Instructions Cycles
 14329                           ; simple_byte            4     3 (average)
 14330                           ;	Chosen strategy is simple_byte
 14331  00415E  0100               	movlb	0	; () banked
 14332  004160  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14333  004162  0A00               	xorlw	0	; case 0
 14334  004164  A4D8               	btfss	status,2,c
 14335  004166  0012               	return	
 14336                           
 14337                           ; BSR set to: 0
 14338                           ; Switch size 1, requested type "space"
 14339                           ; Number of cases is 2, Range of values is 1 to 3
 14340                           ; switch strategies available:
 14341                           ; Name         Instructions Cycles
 14342                           ; simple_byte            7     4 (average)
 14343                           ;	Chosen strategy is simple_byte
 14344  004168  0100               	movlb	0	; () banked
 14345  00416A  5184               	movf	??_updateServoPosition& (0+255),w,b
 14346  00416C  0A01               	xorlw	1	; case 1
 14347  00416E  B4D8               	btfsc	status,2,c
 14348  004170  D7DD               	goto	l5877
 14349  004172  0A02               	xorlw	2	; case 3
 14350  004174  A4D8               	btfss	status,2,c
 14351  004176  0012               	return	
 14352  004178  D7E3               	goto	l818
 14353  00417A                     __end_of_updateServoPosition:
 14354                           	opt stack 0
 14355                           tblptru	equ	0xFF8
 14356                           tblptrh	equ	0xFF7
 14357                           tblptrl	equ	0xFF6
 14358                           tablat	equ	0xFF5
 14359                           prodh	equ	0xFF4
 14360                           prodl	equ	0xFF3
 14361                           intcon	equ	0xFF2
 14362                           intcon2	equ	0xFF1
 14363                           intcon3	equ	0xFF0
 14364                           postinc0	equ	0xFEE
 14365                           wreg	equ	0xFE8
 14366                           postdec1	equ	0xFE5
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375 ;; *************** function _BlockerTest *****************
 14376 ;; Defined at:
 14377 ;;		line 568 in file "Test.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;		None
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;  i               2   44[BANK0 ] int 
 14382 ;;  cond_flag       2   48[BANK0 ] int 
 14383 ;;  cam_flag        2   46[BANK0 ] int 
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14394 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;Total ram usage:        7 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:   10
 14400 ;; This function calls:
 14401 ;;		_lcdInst
 14402 ;;		_printf
 14403 ;; This function is called by:
 14404 ;;		_Test
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text50
 14409  003182                     __ptext50:
 14410                           	opt stack 0
 14411  003182                     _BlockerTest:
 14412                           	opt stack 19
 14413                           
 14414                           ;Test.c: 569: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14415                           
 14416                           ;incstack = 0
 14417  003182  0E01               	movlw	1
 14418  003184  EC24  F026         	call	_lcdInst
 14419  003188  0E68               	movlw	104
 14420  00318A  0100               	movlb	0	; () banked
 14421  00318C  6FAB               	movwf	??_BlockerTest& (0+255),b
 14422  00318E  0EE4               	movlw	228
 14423  003190                     u9097:
 14424  003190  2EE8               	decfsz	wreg,f,c
 14425  003192  D7FE               	bra	u9097
 14426  003194  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14427  003196  D7FC               	bra	u9097
 14428  003198  F000               	nop	
 14429  00319A  0E80               	movlw	128
 14430  00319C  EC24  F026         	call	_lcdInst
 14431                           
 14432                           ;Test.c: 570: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14433  0031A0  0E7F               	movlw	low STR_118
 14434  0031A2  0100               	movlb	0	; () banked
 14435  0031A4  6F8E               	movwf	printf@f& (0+255),b
 14436  0031A6  0EFB               	movlw	high STR_118
 14437  0031A8  0100               	movlb	0	; () banked
 14438  0031AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14439  0031AC  A480               	btfss	3968,2,c	;volatile
 14440  0031AE  D004               	goto	u6370
 14441  0031B0  0100               	movlb	0	; () banked
 14442  0031B2  6BAB               	clrf	??_BlockerTest& (0+255),b
 14443  0031B4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14444  0031B6  D002               	goto	u6378
 14445  0031B8                     u6370:
 14446  0031B8  0100               	movlb	0	; () banked
 14447  0031BA  6BAB               	clrf	??_BlockerTest& (0+255),b
 14448  0031BC                     u6378:
 14449  0031BC  0100               	movlb	0	; () banked
 14450  0031BE  51AB               	movf	??_BlockerTest& (0+255),w,b
 14451  0031C0  0100               	movlb	0	; () banked
 14452  0031C2  6F90               	movwf	(?_printf+2)& (0+255),b
 14453  0031C4  6B91               	clrf	(?_printf+3)& (0+255),b
 14454  0031C6  ECB8  F008         	call	_printf	;wreg free
 14455                           
 14456                           ;Test.c: 571: lcdInst(0b11000000);;
 14457  0031CA  0EC0               	movlw	192
 14458  0031CC  EC24  F026         	call	_lcdInst
 14459                           
 14460                           ;Test.c: 572: printf("OTHER: CAM TOGGLE");
 14461  0031D0  0E6D               	movlw	low STR_119
 14462  0031D2  0100               	movlb	0	; () banked
 14463  0031D4  6F8E               	movwf	printf@f& (0+255),b
 14464  0031D6  0EFB               	movlw	high STR_119
 14465  0031D8  0100               	movlb	0	; () banked
 14466  0031DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14467  0031DC  ECB8  F008         	call	_printf	;wreg free
 14468                           
 14469                           ;Test.c: 573: int cam_flag = 1;
 14470  0031E0  0E00               	movlw	0
 14471  0031E2  0100               	movlb	0	; () banked
 14472  0031E4  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 14473  0031E6  0E01               	movlw	1
 14474  0031E8  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;Test.c: 574: int cond_flag = 0;
 14478  0031EA  0E00               	movlw	0
 14479  0031EC  0100               	movlb	0	; () banked
 14480  0031EE  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 14481  0031F0  0E00               	movlw	0
 14482  0031F2  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14483                           
 14484                           ; BSR set to: 0
 14485                           ;Test.c: 576: while(PORTBbits.RB1 == 0){
 14486                           
 14487                           ;Test.c: 575: while(1){
 14488  0031F4  D018               	goto	l7661
 14489  0031F6                     l7657:
 14490                           
 14491                           ;Test.c: 577: lcdInst(0b10000000);;
 14492  0031F6  0E80               	movlw	128
 14493  0031F8  EC24  F026         	call	_lcdInst
 14494                           
 14495                           ;Test.c: 578: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14496  0031FC  0E7F               	movlw	low STR_118
 14497  0031FE  0100               	movlb	0	; () banked
 14498  003200  6F8E               	movwf	printf@f& (0+255),b
 14499  003202  0EFB               	movlw	high STR_118
 14500  003204  0100               	movlb	0	; () banked
 14501  003206  6F8F               	movwf	(printf@f+1)& (0+255),b
 14502  003208  A480               	btfss	3968,2,c	;volatile
 14503  00320A  D004               	goto	u6380
 14504  00320C  0100               	movlb	0	; () banked
 14505  00320E  6BAB               	clrf	??_BlockerTest& (0+255),b
 14506  003210  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14507  003212  D002               	goto	u6388
 14508  003214                     u6380:
 14509  003214  0100               	movlb	0	; () banked
 14510  003216  6BAB               	clrf	??_BlockerTest& (0+255),b
 14511  003218                     u6388:
 14512  003218  0100               	movlb	0	; () banked
 14513  00321A  51AB               	movf	??_BlockerTest& (0+255),w,b
 14514  00321C  0100               	movlb	0	; () banked
 14515  00321E  6F90               	movwf	(?_printf+2)& (0+255),b
 14516  003220  6B91               	clrf	(?_printf+3)& (0+255),b
 14517  003222  ECB8  F008         	call	_printf	;wreg free
 14518  003226                     l7661:
 14519  003226  A281               	btfss	3969,1,c	;volatile
 14520  003228  D7E6               	goto	l7657
 14521                           
 14522                           ;Test.c: 579: }
 14523                           ;Test.c: 580: if(PORTB >> 4 == 0b1111){
 14524  00322A  3881               	swapf	3969,w,c	;volatile
 14525  00322C  0B0F               	andlw	15
 14526  00322E  0A0F               	xorlw	15
 14527  003230  B4D8               	btfsc	status,2,c
 14528  003232  0012               	return	
 14529                           
 14530                           ;Test.c: 583: else if(PORTB >> 4 == 0b0001){
 14531                           
 14532                           ;Test.c: 582: }
 14533                           
 14534                           ;Test.c: 581: break;
 14535  003234  3881               	swapf	3969,w,c	;volatile
 14536  003236  0B0F               	andlw	15
 14537  003238  06E8               	decf	wreg,f,c
 14538  00323A  A4D8               	btfss	status,2,c
 14539  00323C  D016               	goto	l7679
 14540                           
 14541                           ;Test.c: 584: if(cond_flag){
 14542  00323E  0100               	movlb	0	; () banked
 14543  003240  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 14544  003242  0100               	movlb	0	; () banked
 14545  003244  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 14546  003246  B4D8               	btfsc	status,2,c
 14547  003248  D007               	goto	l1286
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;Test.c: 585: LATAbits.LATA3 = 1;
 14551  00324A  8689               	bsf	3977,3,c	;volatile
 14552  00324C  D006               	goto	l7677
 14553  00324E                     u6431:
 14554  00324E  0E01               	movlw	1
 14555  003250                     u6440:
 14556  003250  0100               	movlb	0	; () banked
 14557  003252  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14558  003254  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 14559                           
 14560                           ;Test.c: 587: }
 14561  003256  D054               	goto	l7703
 14562  003258                     l1286:
 14563                           
 14564                           ; BSR set to: 0
 14565                           ;Test.c: 588: else{
 14566                           ;Test.c: 589: LATAbits.LATA3 = 0;
 14567  003258  9689               	bcf	3977,3,c	;volatile
 14568  00325A                     l7677:
 14569                           
 14570                           ; BSR set to: 0
 14571                           ;Test.c: 590: cond_flag = !cond_flag;
 14572  00325A  0100               	movlb	0	; () banked
 14573  00325C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 14574  00325E  0100               	movlb	0	; () banked
 14575  003260  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 14576  003262  B4D8               	btfsc	status,2,c
 14577  003264  D7F4               	goto	u6431
 14578  003266  0E00               	movlw	0
 14579  003268  D7F3               	goto	u6440
 14580  00326A                     l7679:
 14581                           
 14582                           ;Test.c: 593: else{
 14583                           ;Test.c: 594: if(cam_flag){
 14584  00326A  0100               	movlb	0	; () banked
 14585  00326C  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 14586  00326E  0100               	movlb	0	; () banked
 14587  003270  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 14588  003272  B4D8               	btfsc	status,2,c
 14589  003274  D007               	goto	l7685
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;Test.c: 595: LATCbits.LATC0 = 1;
 14593  003276  808B               	bsf	3979,0,c	;volatile
 14594  003278  D023               	goto	l7697
 14595  00327A                     u6481:
 14596  00327A  0E01               	movlw	1
 14597  00327C                     u6490:
 14598  00327C  0100               	movlb	0	; () banked
 14599  00327E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 14600  003280  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 14601                           
 14602                           ;Test.c: 597: }
 14603  003282  D03E               	goto	l7703
 14604  003284                     l7685:
 14605                           
 14606                           ; BSR set to: 0
 14607                           ;Test.c: 598: else{
 14608                           ;Test.c: 599: for(int i=0;i<5000;i++)
 14609  003284  0E00               	movlw	0
 14610  003286  0100               	movlb	0	; () banked
 14611  003288  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14612  00328A  0E00               	movlw	0
 14613  00328C  6FAC               	movwf	BlockerTest@i& (0+255),b
 14614  00328E                     l7687:
 14615                           
 14616                           ; BSR set to: 0
 14617  00328E  0100               	movlb	0	; () banked
 14618  003290  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14619  003292  D008               	goto	l1291
 14620  003294  0E88               	movlw	136
 14621  003296  0100               	movlb	0	; () banked
 14622  003298  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14623  00329A  0E13               	movlw	19
 14624  00329C  0100               	movlb	0	; () banked
 14625  00329E  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14626  0032A0  B0D8               	btfsc	status,0,c
 14627  0032A2  D00D               	goto	l1292
 14628  0032A4                     l1291:
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;Test.c: 600: {
 14632                           ;Test.c: 601: LATCbits.LATC0 = 1;
 14633  0032A4  808B               	bsf	3979,0,c	;volatile
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;Test.c: 602: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14637  0032A6  0E1A               	movlw	26
 14638  0032A8                     u9107:
 14639  0032A8  2EE8               	decfsz	wreg,f,c
 14640  0032AA  D7FE               	bra	u9107
 14641  0032AC  D000               	nop2	
 14642                           
 14643                           ;Test.c: 603: LATCbits.LATC0 = 0;
 14644  0032AE  908B               	bcf	3979,0,c	;volatile
 14645                           
 14646                           ;Test.c: 604: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14647  0032B0  0EF0               	movlw	240
 14648  0032B2                     u9117:
 14649  0032B2  2EE8               	decfsz	wreg,f,c
 14650  0032B4  D7FE               	bra	u9117
 14651  0032B6  0100               	movlb	0	; () banked
 14652  0032B8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14653  0032BA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14654  0032BC  D7E8               	goto	l7687
 14655  0032BE                     l1292:
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;Test.c: 605: }
 14659                           ;Test.c: 606: LATCbits.LATC0 = 0;
 14660  0032BE  908B               	bcf	3979,0,c	;volatile
 14661  0032C0                     l7697:
 14662                           
 14663                           ; BSR set to: 0
 14664                           ;Test.c: 607: cam_flag = !cam_flag;
 14665  0032C0  0100               	movlb	0	; () banked
 14666  0032C2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 14667  0032C4  0100               	movlb	0	; () banked
 14668  0032C6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 14669  0032C8  B4D8               	btfsc	status,2,c
 14670  0032CA  D7D7               	goto	u6481
 14671  0032CC  0E00               	movlw	0
 14672  0032CE  D7D6               	goto	u6490
 14673  0032D0                     l7699:
 14674                           
 14675                           ;Test.c: 612: lcdInst(0b10000000);;
 14676  0032D0  0E80               	movlw	128
 14677  0032D2  EC24  F026         	call	_lcdInst
 14678                           
 14679                           ;Test.c: 613: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14680  0032D6  0E7F               	movlw	low STR_118
 14681  0032D8  0100               	movlb	0	; () banked
 14682  0032DA  6F8E               	movwf	printf@f& (0+255),b
 14683  0032DC  0EFB               	movlw	high STR_118
 14684  0032DE  0100               	movlb	0	; () banked
 14685  0032E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 14686  0032E2  A480               	btfss	3968,2,c	;volatile
 14687  0032E4  D004               	goto	u6540
 14688  0032E6  0100               	movlb	0	; () banked
 14689  0032E8  6BAB               	clrf	??_BlockerTest& (0+255),b
 14690  0032EA  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14691  0032EC  D002               	goto	u6548
 14692  0032EE                     u6540:
 14693  0032EE  0100               	movlb	0	; () banked
 14694  0032F0  6BAB               	clrf	??_BlockerTest& (0+255),b
 14695  0032F2                     u6548:
 14696  0032F2  0100               	movlb	0	; () banked
 14697  0032F4  51AB               	movf	??_BlockerTest& (0+255),w,b
 14698  0032F6  0100               	movlb	0	; () banked
 14699  0032F8  6F90               	movwf	(?_printf+2)& (0+255),b
 14700  0032FA  6B91               	clrf	(?_printf+3)& (0+255),b
 14701  0032FC  ECB8  F008         	call	_printf	;wreg free
 14702  003300                     l7703:
 14703  003300  A281               	btfss	3969,1,c	;volatile
 14704  003302  D791               	goto	l7661
 14705  003304  D7E5               	goto	l7699
 14706  003306                     __end_of_BlockerTest:
 14707                           	opt stack 0
 14708                           tblptru	equ	0xFF8
 14709                           tblptrh	equ	0xFF7
 14710                           tblptrl	equ	0xFF6
 14711                           tablat	equ	0xFF5
 14712                           prodh	equ	0xFF4
 14713                           prodl	equ	0xFF3
 14714                           intcon	equ	0xFF2
 14715                           intcon2	equ	0xFF1
 14716                           intcon3	equ	0xFF0
 14717                           postinc0	equ	0xFEE
 14718                           wreg	equ	0xFE8
 14719                           postdec1	equ	0xFE5
 14720                           fsr1l	equ	0xFE1
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           postdec2	equ	0xFDD
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728 ;; *************** function _printf *****************
 14729 ;; Defined at:
 14730 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14733 ;;		 -> STR_121(18), STR_120(18), STR_119(18), STR_118(18), 
 14734 ;;		 -> STR_117(18), STR_116(18), STR_115(17), STR_114(17), 
 14735 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 14736 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 14737 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 14738 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 14739 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 14740 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 14741 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 14742 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 14743 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 14744 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 14745 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 14746 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 14747 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 14748 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 14749 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 14750 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 14751 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 14752 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 14753 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 14754 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 14755 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 14756 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 14757 ;; Auto vars:     Size  Location     Type
 14758 ;;  tmpval          4    0        struct .
 14759 ;;  width           2   41[BANK0 ] int 
 14760 ;;  val             2   37[BANK0 ] unsigned int 
 14761 ;;  len             2   35[BANK0 ] unsigned int 
 14762 ;;  ap              2   33[BANK0 ] PTR void [1]
 14763 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14764 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14765 ;;		 -> STR_122(7), count_total(2), printRTC@month(4), UI@month(4), 
 14766 ;;  c               1   40[BANK0 ] char 
 14767 ;;  flag            1   39[BANK0 ] unsigned char 
 14768 ;;  prec            1   30[BANK0 ] char 
 14769 ;; Return value:  Size  Location     Type
 14770 ;;                  2   14[BANK0 ] int 
 14771 ;; Registers used:
 14772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14773 ;; Tracked objects:
 14774 ;;		On entry : 0/0
 14775 ;;		On exit  : 0/0
 14776 ;;		Unchanged: 0/0
 14777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14778 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;Total ram usage:       29 bytes
 14783 ;; Hardware stack levels used:    1
 14784 ;; Hardware stack levels required when called:    9
 14785 ;; This function calls:
 14786 ;;		___lwdiv
 14787 ;;		___lwmod
 14788 ;;		___wmul
 14789 ;;		_isdigit
 14790 ;;		_putch
 14791 ;; This function is called by:
 14792 ;;		_UI
 14793 ;;		_change_state_to_menu_start
 14794 ;;		_change_state_to_menu_12
 14795 ;;		_change_state_to_menu_22
 14796 ;;		_printRTC
 14797 ;;		_EEPROM_write
 14798 ;;		_Test
 14799 ;;		_algorithmTest
 14800 ;;		_sensorTest
 14801 ;;		_actuatorTest
 14802 ;;		_BothServos
 14803 ;;		_PortTestA5
 14804 ;;		_PusherTest
 14805 ;;		_SpeedTest
 14806 ;;		_BlockerTest
 14807 ;;		_ToggleTestA5
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           	psect	text51
 14812  001170                     __ptext51:
 14813                           	opt stack 0
 14814  001170                     _printf:
 14815                           	opt stack 18
 14816                           
 14817                           ;doprnt.c: 466: va_list ap;
 14818                           ;doprnt.c: 499: signed char c;
 14819                           ;doprnt.c: 501: int width;
 14820                           ;doprnt.c: 506: signed char prec;
 14821                           ;doprnt.c: 508: unsigned char flag;
 14822                           ;doprnt.c: 523: union {
 14823                           ;doprnt.c: 524: unsigned long vd;
 14824                           ;doprnt.c: 525: double integ;
 14825                           ;doprnt.c: 526: } tmpval;
 14826                           ;doprnt.c: 528: unsigned int val;
 14827                           ;doprnt.c: 529: unsigned len;
 14828                           ;doprnt.c: 530: const char * cp;
 14829                           ;doprnt.c: 533: *ap = __va_start();
 14830                           
 14831                           ;incstack = 0
 14832  001170  0E90               	movlw	low (?_printf+2)
 14833  001172  0100               	movlb	0	; () banked
 14834  001174  6FA1               	movwf	printf@ap& (0+255),b
 14835  001176  0E00               	movlw	high (?_printf+2)
 14836  001178  0100               	movlb	0	; () banked
 14837  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14838                           
 14839                           ;doprnt.c: 536: while(c = *f++) {
 14840  00117C  D205               	goto	l5837
 14841  00117E                     l5707:
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;doprnt.c: 538: if(c != '%')
 14845  00117E  0E25               	movlw	37
 14846  001180  0100               	movlb	0	; () banked
 14847  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14848  001184  B4D8               	btfsc	status,2,c
 14849  001186  D005               	goto	l5711
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;doprnt.c: 540: {
 14853                           ;doprnt.c: 541: (putch(c) );
 14854  001188  0100               	movlb	0	; () banked
 14855  00118A  51A8               	movf	printf@c& (0+255),w,b
 14856  00118C  EC1C  F026         	call	_putch
 14857                           
 14858                           ;doprnt.c: 542: continue;
 14859  001190  D1FB               	goto	l5837
 14860  001192                     l5711:
 14861                           
 14862                           ;doprnt.c: 543: }
 14863                           ;doprnt.c: 546: width = 0;
 14864  001192  0E00               	movlw	0
 14865  001194  0100               	movlb	0	; () banked
 14866  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14867  001198  0E00               	movlw	0
 14868  00119A  6FA9               	movwf	printf@width& (0+255),b
 14869                           
 14870                           ;doprnt.c: 548: flag = 0;
 14871  00119C  0E00               	movlw	0
 14872  00119E  0100               	movlb	0	; () banked
 14873  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;doprnt.c: 551: switch(*f) {
 14877                           
 14878                           ;doprnt.c: 550: for(;;) {
 14879  0011A2  D005               	goto	l5717
 14880  0011A4                     l5713:
 14881                           
 14882                           ;doprnt.c: 580: flag |= 0x04;
 14883  0011A4  0100               	movlb	0	; () banked
 14884  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14885                           
 14886                           ;doprnt.c: 581: f++;
 14887  0011A8  0100               	movlb	0	; () banked
 14888  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14889  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14890  0011AE                     l5717:
 14891  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14892  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14893  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14894  0011B6  6AF8               	clrf	tblptru,c
 14895  0011B8                     	endif
 14896  0011B8                     	if	0	;tblptru may be non-zero
 14897  0011B8                     	endif
 14898  0011B8  0008               	tblrd		*
 14899  0011BA  50F5               	movf	tablat,w,c
 14900                           
 14901                           ; Switch size 1, requested type "space"
 14902                           ; Number of cases is 1, Range of values is 48 to 48
 14903                           ; switch strategies available:
 14904                           ; Name         Instructions Cycles
 14905                           ; simple_byte            4     3 (average)
 14906                           ;	Chosen strategy is simple_byte
 14907  0011BC  0A30               	xorlw	48	; case 48
 14908  0011BE  B4D8               	btfsc	status,2,c
 14909  0011C0  D7F1               	goto	l5713
 14910                           
 14911                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14912                           
 14913                           ;doprnt.c: 586: }
 14914                           
 14915                           ;doprnt.c: 585: break;
 14916  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14917  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14918  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14919  0011CA  6AF8               	clrf	tblptru,c
 14920  0011CC                     	endif
 14921  0011CC                     	if	0	;tblptru may be non-zero
 14922  0011CC                     	endif
 14923  0011CC  0008               	tblrd		*
 14924  0011CE  50F5               	movf	tablat,w,c
 14925  0011D0  EC41  F025         	call	_isdigit
 14926  0011D4  A0D8               	btfss	status,0,c
 14927  0011D6  D0D2               	goto	l5765
 14928                           
 14929                           ;doprnt.c: 598: width = 0;
 14930  0011D8  0E00               	movlw	0
 14931  0011DA  0100               	movlb	0	; () banked
 14932  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14933  0011DE  0E00               	movlw	0
 14934  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14935  0011E2                     l5723:
 14936                           
 14937                           ;doprnt.c: 600: width *= 10;
 14938  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14939  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14940  0011EA  0E00               	movlw	0
 14941  0011EC  0100               	movlb	0	; () banked
 14942  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14943  0011F0  0E0A               	movlw	10
 14944  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14945  0011F4  ECAB  F023         	call	___wmul	;wreg free
 14946  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14947  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14948                           
 14949                           ;doprnt.c: 601: width += *f++ - '0';
 14950  001200  0ED0               	movlw	208
 14951  001202  0100               	movlb	0	; () banked
 14952  001204  6F9A               	movwf	??_printf& (0+255),b
 14953  001206  0EFF               	movlw	255
 14954  001208  0100               	movlb	0	; () banked
 14955  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14956  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14957  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14958  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14959  001214  6AF8               	clrf	tblptru,c
 14960  001216                     	endif
 14961  001216                     	if	0	;tblptru may be non-zero
 14962  001216                     	endif
 14963  001216  0008               	tblrd		*
 14964  001218  50F5               	movf	tablat,w,c
 14965  00121A  0100               	movlb	0	; () banked
 14966  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14967  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14968  001220  0100               	movlb	0	; () banked
 14969  001222  519A               	movf	??_printf& (0+255),w,b
 14970  001224  0100               	movlb	0	; () banked
 14971  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14972  001228  0100               	movlb	0	; () banked
 14973  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14974  00122C  0100               	movlb	0	; () banked
 14975  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14976  001230  0100               	movlb	0	; () banked
 14977  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14978  001234  0100               	movlb	0	; () banked
 14979  001236  27A9               	addwf	printf@width& (0+255),f,b
 14980  001238  0100               	movlb	0	; () banked
 14981  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14982  00123C  0100               	movlb	0	; () banked
 14983  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14984                           
 14985                           ; BSR set to: 0
 14986  001240  0100               	movlb	0	; () banked
 14987  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14988  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14989                           
 14990                           ; BSR set to: 0
 14991                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14992  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14993  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14994  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14995  00124E  6AF8               	clrf	tblptru,c
 14996  001250                     	endif
 14997  001250                     	if	0	;tblptru may be non-zero
 14998  001250                     	endif
 14999  001250  0008               	tblrd		*
 15000  001252  50F5               	movf	tablat,w,c
 15001  001254  EC41  F025         	call	_isdigit
 15002  001258  A0D8               	btfss	status,0,c
 15003  00125A  D090               	goto	l5765
 15004  00125C  D7C2               	goto	l5723
 15005  00125E                     l5731:
 15006                           
 15007                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15008  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 15009  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15010  001266  CFDE F09F          	movff	postinc2,printf@cp
 15011  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 15012  00126E  0E02               	movlw	2
 15013  001270  0100               	movlb	0	; () banked
 15014  001272  27A1               	addwf	printf@ap& (0+255),f,b
 15015  001274  0E00               	movlw	0
 15016  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;doprnt.c: 740: if(!cp)
 15020  001278  0100               	movlb	0	; () banked
 15021  00127A  519F               	movf	printf@cp& (0+255),w,b
 15022  00127C  0100               	movlb	0	; () banked
 15023  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15024  001280  A4D8               	btfss	status,2,c
 15025  001282  D006               	goto	l5739
 15026                           
 15027                           ; BSR set to: 0
 15028                           ;doprnt.c: 741: cp = "(null)";
 15029  001284  0EB6               	movlw	low STR_122
 15030  001286  0100               	movlb	0	; () banked
 15031  001288  6F9F               	movwf	printf@cp& (0+255),b
 15032  00128A  0EFF               	movlw	high STR_122
 15033  00128C  0100               	movlb	0	; () banked
 15034  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15035  001290                     l5739:
 15036                           
 15037                           ; BSR set to: 0
 15038                           ;doprnt.c: 745: len = 0;
 15039  001290  0E00               	movlw	0
 15040  001292  0100               	movlb	0	; () banked
 15041  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 15042  001296  0E00               	movlw	0
 15043  001298  6FA3               	movwf	printf@len& (0+255),b
 15044                           
 15045                           ;doprnt.c: 746: while(cp[len])
 15046  00129A  D003               	goto	l5743
 15047  00129C                     l5741:
 15048                           
 15049                           ;doprnt.c: 747: len++;
 15050  00129C  0100               	movlb	0	; () banked
 15051  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 15052  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15053  0012A2                     l5743:
 15054                           
 15055                           ; BSR set to: 0
 15056  0012A2  0100               	movlb	0	; () banked
 15057  0012A4  51A3               	movf	printf@len& (0+255),w,b
 15058  0012A6  0100               	movlb	0	; () banked
 15059  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 15060  0012AA  0100               	movlb	0	; () banked
 15061  0012AC  6F9A               	movwf	??_printf& (0+255),b
 15062  0012AE  0100               	movlb	0	; () banked
 15063  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 15064  0012B2  0100               	movlb	0	; () banked
 15065  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15066  0012B6  0100               	movlb	0	; () banked
 15067  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 15068  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 15069  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 15070  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 15071  0012C4  6EF8               	movwf	tblptru,c
 15072  0012C6  0E0F               	movlw	(high __ramtop+-1)
 15073  0012C8  64F7               	cpfsgt	tblptrh,c
 15074  0012CA  D003               	bra	u4247
 15075  0012CC  0008               	tblrd		*
 15076  0012CE  50F5               	movf	tablat,w,c
 15077  0012D0  D005               	bra	u4240
 15078  0012D2                     u4247:
 15079  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 15080  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 15081  0012DA  50EF               	movf	indf0,w,c
 15082  0012DC                     u4240:
 15083  0012DC  0900               	iorlw	0
 15084  0012DE  A4D8               	btfss	status,2,c
 15085  0012E0  D7DD               	goto	l5741
 15086                           
 15087                           ;doprnt.c: 757: if(width > len)
 15088  0012E2  0100               	movlb	0	; () banked
 15089  0012E4  51A9               	movf	printf@width& (0+255),w,b
 15090  0012E6  0100               	movlb	0	; () banked
 15091  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 15092  0012EA  0100               	movlb	0	; () banked
 15093  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 15094  0012EE  0100               	movlb	0	; () banked
 15095  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15096  0012F2  B0D8               	btfsc	status,0,c
 15097  0012F4  D009               	goto	l5749
 15098                           
 15099                           ; BSR set to: 0
 15100                           ;doprnt.c: 758: width -= len;
 15101  0012F6  0100               	movlb	0	; () banked
 15102  0012F8  51A3               	movf	printf@len& (0+255),w,b
 15103  0012FA  0100               	movlb	0	; () banked
 15104  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 15105  0012FE  0100               	movlb	0	; () banked
 15106  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 15107  001302  0100               	movlb	0	; () banked
 15108  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15109  001306  D009               	goto	l5753
 15110  001308                     l5749:
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;doprnt.c: 759: else
 15114                           ;doprnt.c: 760: width = 0;
 15115  001308  0E00               	movlw	0
 15116  00130A  0100               	movlb	0	; () banked
 15117  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15118  00130E  0E00               	movlw	0
 15119  001310  6FA9               	movwf	printf@width& (0+255),b
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;doprnt.c: 764: while(width--)
 15123  001312  D003               	goto	l5753
 15124  001314                     l5751:
 15125                           
 15126                           ; BSR set to: 0
 15127                           ;doprnt.c: 765: (putch(' ') );
 15128  001314  0E20               	movlw	32
 15129  001316  EC1C  F026         	call	_putch
 15130  00131A                     l5753:
 15131  00131A  0100               	movlb	0	; () banked
 15132  00131C  07A9               	decf	printf@width& (0+255),f,b
 15133  00131E  A0D8               	btfss	status,0,c
 15134  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 15135  001322  0100               	movlb	0	; () banked
 15136  001324  29A9               	incf	printf@width& (0+255),w,b
 15137  001326  E1F6               	bnz	l5751
 15138  001328  0100               	movlb	0	; () banked
 15139  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 15140  00132C  B4D8               	btfsc	status,2,c
 15141  00132E  D017               	goto	l5759
 15142  001330  D7F1               	goto	l5751
 15143  001332                     l5755:
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;doprnt.c: 768: (putch(*cp++) );
 15147  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 15148  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15149  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 15150  00133C  6EF8               	movwf	tblptru,c
 15151  00133E  0E0F               	movlw	(high __ramtop+-1)
 15152  001340  64F7               	cpfsgt	tblptrh,c
 15153  001342  D003               	bra	u4287
 15154  001344  0008               	tblrd		*
 15155  001346  50F5               	movf	tablat,w,c
 15156  001348  D005               	bra	u4280
 15157  00134A                     u4287:
 15158  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15159  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15160  001352  50EF               	movf	indf0,w,c
 15161  001354                     u4280:
 15162  001354  EC1C  F026         	call	_putch
 15163  001358  0100               	movlb	0	; () banked
 15164  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 15165  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15166  00135E                     l5759:
 15167                           
 15168                           ; BSR set to: 0
 15169  00135E  0100               	movlb	0	; () banked
 15170  001360  07A3               	decf	printf@len& (0+255),f,b
 15171  001362  A0D8               	btfss	status,0,c
 15172  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 15173  001366  0100               	movlb	0	; () banked
 15174  001368  29A3               	incf	printf@len& (0+255),w,b
 15175  00136A  E1E3               	bnz	l5755
 15176  00136C  0100               	movlb	0	; () banked
 15177  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 15178  001370  B4D8               	btfsc	status,2,c
 15179  001372  D10A               	goto	l5837
 15180  001374  D7DE               	goto	l5755
 15181  001376                     l5761:
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;doprnt.c: 818: flag |= 0x40;
 15185  001376  0100               	movlb	0	; () banked
 15186  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;doprnt.c: 822: }
 15190                           
 15191                           ;doprnt.c: 819: break;
 15192  00137A  D01D               	goto	l1327
 15193  00137C                     l5765:
 15194  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 15195  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 15196  001384  0100               	movlb	0	; () banked
 15197  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 15198  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15199  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15200  00138A  6AF8               	clrf	tblptru,c
 15201  00138C                     	endif
 15202  00138C                     	if	0	;tblptru may be non-zero
 15203  00138C                     	endif
 15204  00138C  0008               	tblrd		*
 15205  00138E  CFF5 F0A8          	movff	tablat,printf@c
 15206  001392  0100               	movlb	0	; () banked
 15207  001394  51A8               	movf	printf@c& (0+255),w,b
 15208                           
 15209                           ; Switch size 1, requested type "space"
 15210                           ; Number of cases is 5, Range of values is 0 to 117
 15211                           ; switch strategies available:
 15212                           ; Name         Instructions Cycles
 15213                           ; simple_byte           16     9 (average)
 15214                           ;	Chosen strategy is simple_byte
 15215  001396  0A00               	xorlw	0	; case 0
 15216  001398  B4D8               	btfsc	status,2,c
 15217  00139A  0012               	return	
 15218  00139C  0A64               	xorlw	100	; case 100
 15219  00139E  B4D8               	btfsc	status,2,c
 15220  0013A0  D00A               	goto	l1327
 15221  0013A2  0A0D               	xorlw	13	; case 105
 15222  0013A4  B4D8               	btfsc	status,2,c
 15223  0013A6  D007               	goto	l1327
 15224  0013A8  0A1A               	xorlw	26	; case 115
 15225  0013AA  B4D8               	btfsc	status,2,c
 15226  0013AC  D758               	goto	l5731
 15227  0013AE  0A06               	xorlw	6	; case 117
 15228  0013B0  B4D8               	btfsc	status,2,c
 15229  0013B2  D7E1               	goto	l5761
 15230  0013B4  D0E9               	goto	l5837
 15231  0013B6                     l1327:
 15232                           
 15233                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15234  0013B6  0100               	movlb	0	; () banked
 15235  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 15236  0013BA  D019               	goto	l5777
 15237                           
 15238                           ; BSR set to: 0
 15239                           ;doprnt.c: 1253: {
 15240                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15241  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15242  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15243  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 15244  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 15245                           
 15246                           ; BSR set to: 0
 15247  0013CC  0E02               	movlw	2
 15248  0013CE  0100               	movlb	0	; () banked
 15249  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 15250  0013D2  0E00               	movlw	0
 15251  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;doprnt.c: 1261: if((int)val < 0) {
 15255  0013D6  0100               	movlb	0	; () banked
 15256  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15257  0013DA  D016               	goto	l5781
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;doprnt.c: 1262: flag |= 0x03;
 15261  0013DC  0E03               	movlw	3
 15262  0013DE  0100               	movlb	0	; () banked
 15263  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;doprnt.c: 1263: val = -val;
 15267  0013E2  0100               	movlb	0	; () banked
 15268  0013E4  6DA5               	negf	printf@val& (0+255),b
 15269  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15270  0013E8  B0D8               	btfsc	status,0,c
 15271  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15272                           
 15273                           ; BSR set to: 0
 15274                           ;doprnt.c: 1264: }
 15275                           ;doprnt.c: 1266: }
 15276  0013EC  D00D               	goto	l5781
 15277  0013EE                     l5777:
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;doprnt.c: 1268: else
 15281                           ;doprnt.c: 1273: {
 15282                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15283  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15284  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15285  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 15286  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 15287                           
 15288                           ; BSR set to: 0
 15289  0013FE  0E02               	movlw	2
 15290  001400  0100               	movlb	0	; () banked
 15291  001402  27A1               	addwf	printf@ap& (0+255),f,b
 15292  001404  0E00               	movlw	0
 15293  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15294  001408                     l5781:
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;doprnt.c: 1287: }
 15298                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15299  001408  0E01               	movlw	1
 15300  00140A  0100               	movlb	0	; () banked
 15301  00140C  6FA8               	movwf	printf@c& (0+255),b
 15302  00140E                     l5783:
 15303                           
 15304                           ; BSR set to: 0
 15305  00140E  0E05               	movlw	5
 15306  001410  0100               	movlb	0	; () banked
 15307  001412  19A8               	xorwf	printf@c& (0+255),w,b
 15308  001414  B4D8               	btfsc	status,2,c
 15309  001416  D019               	goto	l5795
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;doprnt.c: 1306: if(val < dpowers[c])
 15313                           
 15314                           ; BSR set to: 0
 15315                           
 15316                           ; BSR set to: 0
 15317  001418  0100               	movlb	0	; () banked
 15318  00141A  51A8               	movf	printf@c& (0+255),w,b
 15319  00141C  0D02               	mullw	2
 15320  00141E  0E00               	movlw	low _dpowers
 15321  001420  24F3               	addwf	prodl,w,c
 15322  001422  6EF6               	movwf	tblptrl,c
 15323  001424  0EFB               	movlw	high _dpowers
 15324  001426  20F4               	addwfc	prodh,w,c
 15325  001428  6EF7               	movwf	tblptrh,c
 15326  00142A                     	if	1	;There are 3 active tblptr bytes
 15327  00142A  6AF8               	clrf	tblptru,c
 15328  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 15329  00142E  22F8               	addwfc	tblptru,f,c
 15330  001430                     	endif
 15331  001430  0009               	tblrd		*+
 15332  001432  50F5               	movf	tablat,w,c
 15333  001434  0100               	movlb	0	; () banked
 15334  001436  5DA5               	subwf	printf@val& (0+255),w,b
 15335  001438  0009               	tblrd		*+
 15336  00143A  50F5               	movf	tablat,w,c
 15337  00143C  0100               	movlb	0	; () banked
 15338  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 15339  001440  A0D8               	btfss	status,0,c
 15340  001442  D003               	goto	l5795
 15341                           
 15342                           ; BSR set to: 0
 15343                           
 15344                           ; BSR set to: 0
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;doprnt.c: 1307: break;
 15348  001444  0100               	movlb	0	; () banked
 15349  001446  2BA8               	incf	printf@c& (0+255),f,b
 15350  001448  D7E2               	goto	l5783
 15351  00144A                     l5795:
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15355  00144A  0100               	movlb	0	; () banked
 15356  00144C  51A9               	movf	printf@width& (0+255),w,b
 15357  00144E  0100               	movlb	0	; () banked
 15358  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15359  001452  B4D8               	btfsc	status,2,c
 15360  001454  D00B               	goto	l5801
 15361                           
 15362                           ; BSR set to: 0
 15363  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15364  00145A  0E03               	movlw	3
 15365  00145C  0100               	movlb	0	; () banked
 15366  00145E  179A               	andwf	??_printf& (0+255),f,b
 15367  001460  B4D8               	btfsc	status,2,c
 15368  001462  D004               	goto	l5801
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;doprnt.c: 1346: width--;
 15372  001464  0100               	movlb	0	; () banked
 15373  001466  07A9               	decf	printf@width& (0+255),f,b
 15374  001468  A0D8               	btfss	status,0,c
 15375  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15376  00146C                     l5801:
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;doprnt.c: 1381: if(width > c)
 15380  00146C  0E80               	movlw	128
 15381  00146E  0100               	movlb	0	; () banked
 15382  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15383  001472  0E7F               	movlw	127
 15384  001474  0100               	movlb	0	; () banked
 15385  001476  6F9A               	movwf	??_printf& (0+255),b
 15386  001478  0100               	movlb	0	; () banked
 15387  00147A  51A9               	movf	printf@width& (0+255),w,b
 15388  00147C  0100               	movlb	0	; () banked
 15389  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15390  001480  0100               	movlb	0	; () banked
 15391  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15392  001484  0A80               	xorlw	128
 15393  001486  0100               	movlb	0	; () banked
 15394  001488  599A               	subwfb	??_printf& (0+255),w,b
 15395  00148A  B0D8               	btfsc	status,0,c
 15396  00148C  D00B               	goto	l5805
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;doprnt.c: 1382: width -= c;
 15400  00148E  0100               	movlb	0	; () banked
 15401  001490  51A8               	movf	printf@c& (0+255),w,b
 15402  001492  0100               	movlb	0	; () banked
 15403  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15404  001496  0E00               	movlw	0
 15405  001498  0100               	movlb	0	; () banked
 15406  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15407  00149C  0EFF               	movlw	255
 15408  00149E  0100               	movlb	0	; () banked
 15409  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15410  0014A2  D005               	goto	l5807
 15411  0014A4                     l5805:
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;doprnt.c: 1383: else
 15415                           ;doprnt.c: 1384: width = 0;
 15416  0014A4  0E00               	movlw	0
 15417  0014A6  0100               	movlb	0	; () banked
 15418  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15419  0014AA  0E00               	movlw	0
 15420  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15421  0014AE                     l5807:
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;doprnt.c: 1387: if(flag & 0x04) {
 15425  0014AE  0100               	movlb	0	; () banked
 15426  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15427  0014B2  D018               	goto	l5819
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;doprnt.c: 1392: if(flag & 0x03)
 15431  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15432  0014B8  0E03               	movlw	3
 15433  0014BA  0100               	movlb	0	; () banked
 15434  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15435  0014BE  B4D8               	btfsc	status,2,c
 15436  0014C0  D003               	goto	l5813
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;doprnt.c: 1393: (putch('-') );
 15440  0014C2  0E2D               	movlw	45
 15441  0014C4  EC1C  F026         	call	_putch
 15442  0014C8                     l5813:
 15443                           
 15444                           ;doprnt.c: 1415: if(width)
 15445  0014C8  0100               	movlb	0	; () banked
 15446  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15447  0014CC  0100               	movlb	0	; () banked
 15448  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15449  0014D0  B4D8               	btfsc	status,2,c
 15450  0014D2  D025               	goto	l5829
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;doprnt.c: 1417: (putch('0') );
 15454                           
 15455                           ; BSR set to: 0
 15456                           
 15457                           ;doprnt.c: 1416: do
 15458  0014D4  0E30               	movlw	48
 15459  0014D6  EC1C  F026         	call	_putch
 15460                           
 15461                           ;doprnt.c: 1418: while(--width);
 15462  0014DA  0100               	movlb	0	; () banked
 15463  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15464  0014DE  A0D8               	btfss	status,0,c
 15465  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15466  0014E2  D7F2               	goto	l5813
 15467  0014E4                     l5819:
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;doprnt.c: 1422: {
 15471                           ;doprnt.c: 1424: if(width
 15472                           ;doprnt.c: 1428: )
 15473  0014E4  0100               	movlb	0	; () banked
 15474  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15475  0014E8  0100               	movlb	0	; () banked
 15476  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15477  0014EC  B4D8               	btfsc	status,2,c
 15478  0014EE  D00D               	goto	l5825
 15479  0014F0                     l5821:
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;doprnt.c: 1430: (putch(' ') );
 15483  0014F0  0E20               	movlw	32
 15484  0014F2  EC1C  F026         	call	_putch
 15485                           
 15486                           ;doprnt.c: 1431: while(--width);
 15487  0014F6  0100               	movlb	0	; () banked
 15488  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15489  0014FA  A0D8               	btfss	status,0,c
 15490  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15491  0014FE  0100               	movlb	0	; () banked
 15492  001500  51A9               	movf	printf@width& (0+255),w,b
 15493  001502  0100               	movlb	0	; () banked
 15494  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15495  001506  A4D8               	btfss	status,2,c
 15496  001508  D7F3               	goto	l5821
 15497  00150A                     l5825:
 15498                           
 15499                           ; BSR set to: 0
 15500                           ;doprnt.c: 1438: if(flag & 0x03)
 15501  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15502  00150E  0E03               	movlw	3
 15503  001510  0100               	movlb	0	; () banked
 15504  001512  179A               	andwf	??_printf& (0+255),f,b
 15505  001514  B4D8               	btfsc	status,2,c
 15506  001516  D003               	goto	l5829
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;doprnt.c: 1439: (putch('-') );
 15510  001518  0E2D               	movlw	45
 15511  00151A  EC1C  F026         	call	_putch
 15512  00151E                     l5829:
 15513                           
 15514                           ;doprnt.c: 1469: }
 15515                           ;doprnt.c: 1472: prec = c;
 15516  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15517                           
 15518                           ;doprnt.c: 1474: while(prec--) {
 15519  001522  D02C               	goto	l5835
 15520  001524                     l5831:
 15521                           
 15522                           ;doprnt.c: 1478: {
 15523                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15524  001524  0100               	movlb	0	; () banked
 15525  001526  519E               	movf	printf@prec& (0+255),w,b
 15526  001528  0D02               	mullw	2
 15527  00152A  0E00               	movlw	low _dpowers
 15528  00152C  24F3               	addwf	prodl,w,c
 15529  00152E  6EF6               	movwf	tblptrl,c
 15530  001530  0EFB               	movlw	high _dpowers
 15531  001532  20F4               	addwfc	prodh,w,c
 15532  001534  6EF7               	movwf	tblptrh,c
 15533  001536                     	if	1	;There are 3 active tblptr bytes
 15534  001536  6AF8               	clrf	tblptru,c
 15535  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15536  00153A  22F8               	addwfc	tblptru,f,c
 15537  00153C                     	endif
 15538  00153C  0009               	tblrd		*+
 15539  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15540  001542  000A               	tblrd		*-
 15541  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15542  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15543  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15544  001550  EC46  F020         	call	___lwdiv	;wreg free
 15545  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15546  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15547  00155C  0E00               	movlw	0
 15548  00155E  0100               	movlb	0	; () banked
 15549  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15550  001562  0E0A               	movlw	10
 15551  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15552  001566  EC63  F021         	call	___lwmod	;wreg free
 15553  00156A  0100               	movlb	0	; () banked
 15554  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15555  00156E  0F30               	addlw	48
 15556  001570  0100               	movlb	0	; () banked
 15557  001572  6FA8               	movwf	printf@c& (0+255),b
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;doprnt.c: 1523: }
 15561                           ;doprnt.c: 1524: (putch(c) );
 15562  001574  0100               	movlb	0	; () banked
 15563  001576  51A8               	movf	printf@c& (0+255),w,b
 15564  001578  EC1C  F026         	call	_putch
 15565  00157C                     l5835:
 15566  00157C  0100               	movlb	0	; () banked
 15567  00157E  079E               	decf	printf@prec& (0+255),f,b
 15568  001580  0100               	movlb	0	; () banked
 15569  001582  299E               	incf	printf@prec& (0+255),w,b
 15570  001584  A4D8               	btfss	status,2,c
 15571  001586  D7CE               	goto	l5831
 15572  001588                     l5837:
 15573  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15574  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15575  001590  0100               	movlb	0	; () banked
 15576  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15577  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15578  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15579  001596  6AF8               	clrf	tblptru,c
 15580  001598                     	endif
 15581  001598                     	if	0	;tblptru may be non-zero
 15582  001598                     	endif
 15583  001598  0008               	tblrd		*
 15584  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15585  00159E  0100               	movlb	0	; () banked
 15586  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15587  0015A2  B4D8               	btfsc	status,2,c
 15588  0015A4  0012               	return	
 15589  0015A6  D5EB               	goto	l5707
 15590  0015A8                     __end_of_printf:
 15591                           	opt stack 0
 15592                           tblptru	equ	0xFF8
 15593                           tblptrh	equ	0xFF7
 15594                           tblptrl	equ	0xFF6
 15595                           tablat	equ	0xFF5
 15596                           prodh	equ	0xFF4
 15597                           prodl	equ	0xFF3
 15598                           intcon	equ	0xFF2
 15599                           intcon2	equ	0xFF1
 15600                           intcon3	equ	0xFF0
 15601                           indf0	equ	0xFEF
 15602                           postinc0	equ	0xFEE
 15603                           fsr0h	equ	0xFEA
 15604                           fsr0l	equ	0xFE9
 15605                           wreg	equ	0xFE8
 15606                           postdec1	equ	0xFE5
 15607                           fsr1l	equ	0xFE1
 15608                           indf2	equ	0xFDF
 15609                           postinc2	equ	0xFDE
 15610                           postdec2	equ	0xFDD
 15611                           fsr2h	equ	0xFDA
 15612                           fsr2l	equ	0xFD9
 15613                           status	equ	0xFD8
 15614                           
 15615 ;; *************** function _putch *****************
 15616 ;; Defined at:
 15617 ;;		line 20 in file "lcd.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;  data            1    wreg     unsigned char 
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;  data            1    2[BANK0 ] unsigned char 
 15622 ;; Return value:  Size  Location     Type
 15623 ;;                  1    wreg      void 
 15624 ;; Registers used:
 15625 ;;		wreg, status,2, status,0, cstack
 15626 ;; Tracked objects:
 15627 ;;		On entry : 0/0
 15628 ;;		On exit  : 0/0
 15629 ;;		Unchanged: 0/0
 15630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;Total ram usage:        1 bytes
 15636 ;; Hardware stack levels used:    1
 15637 ;; Hardware stack levels required when called:    8
 15638 ;; This function calls:
 15639 ;;		_lcdNibble
 15640 ;; This function is called by:
 15641 ;;		_printf
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           	psect	text52
 15646  004C38                     __ptext52:
 15647                           	opt stack 0
 15648  004C38                     _putch:
 15649                           	opt stack 18
 15650                           
 15651                           ;incstack = 0
 15652                           ;putch@data stored from wreg
 15653  004C38  0100               	movlb	0	; () banked
 15654  004C3A  6F82               	movwf	putch@data& (0+255),b
 15655                           
 15656                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15657  004C3C  848C               	bsf	3980,2,c	;volatile
 15658                           
 15659                           ;lcd.c: 22: lcdNibble(data);
 15660  004C3E  0100               	movlb	0	; () banked
 15661  004C40  5182               	movf	putch@data& (0+255),w,b
 15662  004C42  EC2F  F021         	call	_lcdNibble
 15663  004C46  0012               	return		;funcret
 15664  004C48                     __end_of_putch:
 15665                           	opt stack 0
 15666                           tblptru	equ	0xFF8
 15667                           tblptrh	equ	0xFF7
 15668                           tblptrl	equ	0xFF6
 15669                           tablat	equ	0xFF5
 15670                           prodh	equ	0xFF4
 15671                           prodl	equ	0xFF3
 15672                           intcon	equ	0xFF2
 15673                           intcon2	equ	0xFF1
 15674                           intcon3	equ	0xFF0
 15675                           indf0	equ	0xFEF
 15676                           postinc0	equ	0xFEE
 15677                           fsr0h	equ	0xFEA
 15678                           fsr0l	equ	0xFE9
 15679                           wreg	equ	0xFE8
 15680                           postdec1	equ	0xFE5
 15681                           fsr1l	equ	0xFE1
 15682                           indf2	equ	0xFDF
 15683                           postinc2	equ	0xFDE
 15684                           postdec2	equ	0xFDD
 15685                           fsr2h	equ	0xFDA
 15686                           fsr2l	equ	0xFD9
 15687                           status	equ	0xFD8
 15688                           
 15689 ;; *************** function _isdigit *****************
 15690 ;; Defined at:
 15691 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;  c               1    wreg     unsigned char 
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;  c               1    2[BANK0 ] unsigned char 
 15696 ;; Return value:  Size  Location     Type
 15697 ;;		None               void
 15698 ;; Registers used:
 15699 ;;		wreg, status,2, status,0
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15709 ;;Total ram usage:        3 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; Hardware stack levels required when called:    7
 15712 ;; This function calls:
 15713 ;;		Nothing
 15714 ;; This function is called by:
 15715 ;;		_printf
 15716 ;; This function uses a non-reentrant model
 15717 ;;
 15718                           
 15719                           	psect	text53
 15720  004A82                     __ptext53:
 15721                           	opt stack 0
 15722  004A82                     _isdigit:
 15723                           	opt stack 19
 15724                           
 15725                           ;incstack = 0
 15726                           ;isdigit@c stored from wreg
 15727  004A82  0100               	movlb	0	; () banked
 15728  004A84  6F82               	movwf	isdigit@c& (0+255),b
 15729  004A86  0E00               	movlw	0
 15730  004A88  0100               	movlb	0	; () banked
 15731  004A8A  6F81               	movwf	_isdigit$1963& (0+255),b
 15732                           
 15733                           ; BSR set to: 0
 15734  004A8C  0E3A               	movlw	58
 15735  004A8E  0100               	movlb	0	; () banked
 15736  004A90  6182               	cpfslt	isdigit@c& (0+255),b
 15737  004A92  D007               	goto	l5555
 15738                           
 15739                           ; BSR set to: 0
 15740  004A94  0E2F               	movlw	47
 15741  004A96  0100               	movlb	0	; () banked
 15742  004A98  6582               	cpfsgt	isdigit@c& (0+255),b
 15743  004A9A  D003               	goto	l5555
 15744                           
 15745                           ; BSR set to: 0
 15746  004A9C  0E01               	movlw	1
 15747  004A9E  0100               	movlb	0	; () banked
 15748  004AA0  6F81               	movwf	_isdigit$1963& (0+255),b
 15749  004AA2                     l5555:
 15750                           
 15751                           ; BSR set to: 0
 15752  004AA2  C081  F080         	movff	_isdigit$1963,??_isdigit
 15753  004AA6  0100               	movlb	0	; () banked
 15754  004AA8  3180               	rrcf	??_isdigit& (0+255),w,b
 15755  004AAA  0012               	return	
 15756  004AAC                     __end_of_isdigit:
 15757                           	opt stack 0
 15758                           tblptru	equ	0xFF8
 15759                           tblptrh	equ	0xFF7
 15760                           tblptrl	equ	0xFF6
 15761                           tablat	equ	0xFF5
 15762                           prodh	equ	0xFF4
 15763                           prodl	equ	0xFF3
 15764                           intcon	equ	0xFF2
 15765                           intcon2	equ	0xFF1
 15766                           intcon3	equ	0xFF0
 15767                           indf0	equ	0xFEF
 15768                           postinc0	equ	0xFEE
 15769                           fsr0h	equ	0xFEA
 15770                           fsr0l	equ	0xFE9
 15771                           wreg	equ	0xFE8
 15772                           postdec1	equ	0xFE5
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           fsr2h	equ	0xFDA
 15778                           fsr2l	equ	0xFD9
 15779                           status	equ	0xFD8
 15780                           
 15781 ;; *************** function ___wmul *****************
 15782 ;; Defined at:
 15783 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15786 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  product         2    4[BANK0 ] unsigned int 
 15789 ;; Return value:  Size  Location     Type
 15790 ;;                  2    0[BANK0 ] unsigned int 
 15791 ;; Registers used:
 15792 ;;		wreg, status,2, status,0, prodl, prodh
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15798 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15799 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15801 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15802 ;;Total ram usage:        6 bytes
 15803 ;; Hardware stack levels used:    1
 15804 ;; Hardware stack levels required when called:    7
 15805 ;; This function calls:
 15806 ;;		Nothing
 15807 ;; This function is called by:
 15808 ;;		_printf
 15809 ;; This function uses a non-reentrant model
 15810 ;;
 15811                           
 15812                           	psect	text54
 15813  004756                     __ptext54:
 15814                           	opt stack 0
 15815  004756                     ___wmul:
 15816                           	opt stack 19
 15817                           
 15818                           ; BSR set to: 0
 15819                           ;incstack = 0
 15820  004756  0100               	movlb	0	; () banked
 15821  004758  5180               	movf	___wmul@multiplier& (0+255),w,b
 15822  00475A  0100               	movlb	0	; () banked
 15823  00475C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15824  00475E  CFF3 F084          	movff	prodl,___wmul@product
 15825  004762  CFF4 F085          	movff	prodh,___wmul@product+1
 15826  004766  0100               	movlb	0	; () banked
 15827  004768  5180               	movf	___wmul@multiplier& (0+255),w,b
 15828  00476A  0100               	movlb	0	; () banked
 15829  00476C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15830  00476E  50F3               	movf	prodl,w,c
 15831  004770  0100               	movlb	0	; () banked
 15832  004772  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15833  004774  0100               	movlb	0	; () banked
 15834  004776  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15835  004778  0100               	movlb	0	; () banked
 15836  00477A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15837  00477C  50F3               	movf	prodl,w,c
 15838  00477E  0100               	movlb	0	; () banked
 15839  004780  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15840                           
 15841                           ; BSR set to: 0
 15842  004782  C084  F080         	movff	___wmul@product,?___wmul
 15843  004786  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15844  00478A  0012               	return	
 15845  00478C                     __end_of___wmul:
 15846                           	opt stack 0
 15847                           tblptru	equ	0xFF8
 15848                           tblptrh	equ	0xFF7
 15849                           tblptrl	equ	0xFF6
 15850                           tablat	equ	0xFF5
 15851                           prodh	equ	0xFF4
 15852                           prodl	equ	0xFF3
 15853                           intcon	equ	0xFF2
 15854                           intcon2	equ	0xFF1
 15855                           intcon3	equ	0xFF0
 15856                           indf0	equ	0xFEF
 15857                           postinc0	equ	0xFEE
 15858                           fsr0h	equ	0xFEA
 15859                           fsr0l	equ	0xFE9
 15860                           wreg	equ	0xFE8
 15861                           postdec1	equ	0xFE5
 15862                           fsr1l	equ	0xFE1
 15863                           indf2	equ	0xFDF
 15864                           postinc2	equ	0xFDE
 15865                           postdec2	equ	0xFDD
 15866                           fsr2h	equ	0xFDA
 15867                           fsr2l	equ	0xFD9
 15868                           status	equ	0xFD8
 15869                           
 15870 ;; *************** function ___lwmod *****************
 15871 ;; Defined at:
 15872 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15873 ;; Parameters:    Size  Location     Type
 15874 ;;  dividend        2    7[BANK0 ] unsigned int 
 15875 ;;  divisor         2    9[BANK0 ] unsigned int 
 15876 ;; Auto vars:     Size  Location     Type
 15877 ;;  counter         1   11[BANK0 ] unsigned char 
 15878 ;; Return value:  Size  Location     Type
 15879 ;;                  2    7[BANK0 ] unsigned int 
 15880 ;; Registers used:
 15881 ;;		wreg, status,2, status,0
 15882 ;; Tracked objects:
 15883 ;;		On entry : 0/0
 15884 ;;		On exit  : 0/0
 15885 ;;		Unchanged: 0/0
 15886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15887 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15890 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15891 ;;Total ram usage:        5 bytes
 15892 ;; Hardware stack levels used:    1
 15893 ;; Hardware stack levels required when called:    7
 15894 ;; This function calls:
 15895 ;;		Nothing
 15896 ;; This function is called by:
 15897 ;;		_printf
 15898 ;; This function uses a non-reentrant model
 15899 ;;
 15900                           
 15901                           	psect	text55
 15902  0042C6                     __ptext55:
 15903                           	opt stack 0
 15904  0042C6                     ___lwmod:
 15905                           	opt stack 19
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;incstack = 0
 15909  0042C6  0100               	movlb	0	; () banked
 15910  0042C8  5189               	movf	___lwmod@divisor& (0+255),w,b
 15911  0042CA  0100               	movlb	0	; () banked
 15912  0042CC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15913  0042CE  B4D8               	btfsc	status,2,c
 15914  0042D0  D026               	goto	l1784
 15915                           
 15916                           ; BSR set to: 0
 15917  0042D2  0E01               	movlw	1
 15918  0042D4  0100               	movlb	0	; () banked
 15919  0042D6  6F8B               	movwf	___lwmod@counter& (0+255),b
 15920  0042D8  D006               	goto	l5593
 15921  0042DA                     l5591:
 15922                           
 15923                           ; BSR set to: 0
 15924  0042DA  0100               	movlb	0	; () banked
 15925  0042DC  90D8               	bcf	status,0,c
 15926  0042DE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15927  0042E0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15928  0042E2  0100               	movlb	0	; () banked
 15929  0042E4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15930  0042E6                     l5593:
 15931                           
 15932                           ; BSR set to: 0
 15933  0042E6  0100               	movlb	0	; () banked
 15934  0042E8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15935  0042EA  D7F7               	goto	l5591
 15936  0042EC                     l5595:
 15937                           
 15938                           ; BSR set to: 0
 15939  0042EC  0100               	movlb	0	; () banked
 15940  0042EE  5189               	movf	___lwmod@divisor& (0+255),w,b
 15941  0042F0  0100               	movlb	0	; () banked
 15942  0042F2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15943  0042F4  0100               	movlb	0	; () banked
 15944  0042F6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15945  0042F8  0100               	movlb	0	; () banked
 15946  0042FA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15947  0042FC  A0D8               	btfss	status,0,c
 15948  0042FE  D008               	goto	l5599
 15949                           
 15950                           ; BSR set to: 0
 15951  004300  0100               	movlb	0	; () banked
 15952  004302  5189               	movf	___lwmod@divisor& (0+255),w,b
 15953  004304  0100               	movlb	0	; () banked
 15954  004306  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15955  004308  0100               	movlb	0	; () banked
 15956  00430A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15957  00430C  0100               	movlb	0	; () banked
 15958  00430E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15959  004310                     l5599:
 15960                           
 15961                           ; BSR set to: 0
 15962  004310  0100               	movlb	0	; () banked
 15963  004312  90D8               	bcf	status,0,c
 15964  004314  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15965  004316  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15966                           
 15967                           ; BSR set to: 0
 15968  004318  0100               	movlb	0	; () banked
 15969  00431A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15970  00431C  D7E7               	goto	l5595
 15971  00431E                     l1784:
 15972                           
 15973                           ; BSR set to: 0
 15974  00431E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15975  004322  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15976                           
 15977                           ; BSR set to: 0
 15978  004326  0012               	return		;funcret
 15979  004328                     __end_of___lwmod:
 15980                           	opt stack 0
 15981                           tblptru	equ	0xFF8
 15982                           tblptrh	equ	0xFF7
 15983                           tblptrl	equ	0xFF6
 15984                           tablat	equ	0xFF5
 15985                           prodh	equ	0xFF4
 15986                           prodl	equ	0xFF3
 15987                           intcon	equ	0xFF2
 15988                           intcon2	equ	0xFF1
 15989                           intcon3	equ	0xFF0
 15990                           indf0	equ	0xFEF
 15991                           postinc0	equ	0xFEE
 15992                           fsr0h	equ	0xFEA
 15993                           fsr0l	equ	0xFE9
 15994                           wreg	equ	0xFE8
 15995                           postdec1	equ	0xFE5
 15996                           fsr1l	equ	0xFE1
 15997                           indf2	equ	0xFDF
 15998                           postinc2	equ	0xFDE
 15999                           postdec2	equ	0xFDD
 16000                           fsr2h	equ	0xFDA
 16001                           fsr2l	equ	0xFD9
 16002                           status	equ	0xFD8
 16003                           
 16004 ;; *************** function ___lwdiv *****************
 16005 ;; Defined at:
 16006 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16007 ;; Parameters:    Size  Location     Type
 16008 ;;  dividend        2    0[BANK0 ] unsigned int 
 16009 ;;  divisor         2    2[BANK0 ] unsigned int 
 16010 ;; Auto vars:     Size  Location     Type
 16011 ;;  quotient        2    4[BANK0 ] unsigned int 
 16012 ;;  counter         1    6[BANK0 ] unsigned char 
 16013 ;; Return value:  Size  Location     Type
 16014 ;;                  2    0[BANK0 ] unsigned int 
 16015 ;; Registers used:
 16016 ;;		wreg, status,2, status,0
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16023 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16025 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16026 ;;Total ram usage:        7 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; Hardware stack levels required when called:    7
 16029 ;; This function calls:
 16030 ;;		Nothing
 16031 ;; This function is called by:
 16032 ;;		_printf
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           	psect	text56
 16037  00408C                     __ptext56:
 16038                           	opt stack 0
 16039  00408C                     ___lwdiv:
 16040                           	opt stack 19
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;incstack = 0
 16044  00408C  0E00               	movlw	0
 16045  00408E  0100               	movlb	0	; () banked
 16046  004090  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16047  004092  0E00               	movlw	0
 16048  004094  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16049                           
 16050                           ; BSR set to: 0
 16051  004096  0100               	movlb	0	; () banked
 16052  004098  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16053  00409A  0100               	movlb	0	; () banked
 16054  00409C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16055  00409E  B4D8               	btfsc	status,2,c
 16056  0040A0  D02C               	goto	l1774
 16057                           
 16058                           ; BSR set to: 0
 16059  0040A2  0E01               	movlw	1
 16060  0040A4  0100               	movlb	0	; () banked
 16061  0040A6  6F86               	movwf	___lwdiv@counter& (0+255),b
 16062  0040A8  D006               	goto	l5573
 16063  0040AA                     l5571:
 16064                           
 16065                           ; BSR set to: 0
 16066  0040AA  0100               	movlb	0	; () banked
 16067  0040AC  90D8               	bcf	status,0,c
 16068  0040AE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16069  0040B0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16070  0040B2  0100               	movlb	0	; () banked
 16071  0040B4  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16072  0040B6                     l5573:
 16073                           
 16074                           ; BSR set to: 0
 16075  0040B6  0100               	movlb	0	; () banked
 16076  0040B8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16077  0040BA  D7F7               	goto	l5571
 16078  0040BC                     l5575:
 16079                           
 16080                           ; BSR set to: 0
 16081  0040BC  0100               	movlb	0	; () banked
 16082  0040BE  90D8               	bcf	status,0,c
 16083  0040C0  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16084  0040C2  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087  0040C4  0100               	movlb	0	; () banked
 16088  0040C6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16089  0040C8  0100               	movlb	0	; () banked
 16090  0040CA  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16091  0040CC  0100               	movlb	0	; () banked
 16092  0040CE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16093  0040D0  0100               	movlb	0	; () banked
 16094  0040D2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16095  0040D4  A0D8               	btfss	status,0,c
 16096  0040D6  D00A               	goto	l5583
 16097                           
 16098                           ; BSR set to: 0
 16099  0040D8  0100               	movlb	0	; () banked
 16100  0040DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16101  0040DC  0100               	movlb	0	; () banked
 16102  0040DE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16103  0040E0  0100               	movlb	0	; () banked
 16104  0040E2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16105  0040E4  0100               	movlb	0	; () banked
 16106  0040E6  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16107                           
 16108                           ; BSR set to: 0
 16109  0040E8  0100               	movlb	0	; () banked
 16110  0040EA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16111  0040EC                     l5583:
 16112                           
 16113                           ; BSR set to: 0
 16114  0040EC  0100               	movlb	0	; () banked
 16115  0040EE  90D8               	bcf	status,0,c
 16116  0040F0  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16117  0040F2  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16118                           
 16119                           ; BSR set to: 0
 16120  0040F4  0100               	movlb	0	; () banked
 16121  0040F6  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16122  0040F8  D7E1               	goto	l5575
 16123  0040FA                     l1774:
 16124                           
 16125                           ; BSR set to: 0
 16126  0040FA  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16127  0040FE  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16128                           
 16129                           ; BSR set to: 0
 16130  004102  0012               	return		;funcret
 16131  004104                     __end_of___lwdiv:
 16132                           	opt stack 0
 16133                           tblptru	equ	0xFF8
 16134                           tblptrh	equ	0xFF7
 16135                           tblptrl	equ	0xFF6
 16136                           tablat	equ	0xFF5
 16137                           prodh	equ	0xFF4
 16138                           prodl	equ	0xFF3
 16139                           intcon	equ	0xFF2
 16140                           intcon2	equ	0xFF1
 16141                           intcon3	equ	0xFF0
 16142                           indf0	equ	0xFEF
 16143                           postinc0	equ	0xFEE
 16144                           fsr0h	equ	0xFEA
 16145                           fsr0l	equ	0xFE9
 16146                           wreg	equ	0xFE8
 16147                           postdec1	equ	0xFE5
 16148                           fsr1l	equ	0xFE1
 16149                           indf2	equ	0xFDF
 16150                           postinc2	equ	0xFDE
 16151                           postdec2	equ	0xFDD
 16152                           fsr2h	equ	0xFDA
 16153                           fsr2l	equ	0xFD9
 16154                           status	equ	0xFD8
 16155                           
 16156 ;; *************** function _lcdInst *****************
 16157 ;; Defined at:
 16158 ;;		line 15 in file "lcd.c"
 16159 ;; Parameters:    Size  Location     Type
 16160 ;;  data            1    wreg     unsigned char 
 16161 ;; Auto vars:     Size  Location     Type
 16162 ;;  data            1    2[BANK0 ] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;                  1    wreg      void 
 16165 ;; Registers used:
 16166 ;;		wreg, status,2, status,0, cstack
 16167 ;; Tracked objects:
 16168 ;;		On entry : 0/0
 16169 ;;		On exit  : 0/0
 16170 ;;		Unchanged: 0/0
 16171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16176 ;;Total ram usage:        1 bytes
 16177 ;; Hardware stack levels used:    1
 16178 ;; Hardware stack levels required when called:    8
 16179 ;; This function calls:
 16180 ;;		_lcdNibble
 16181 ;; This function is called by:
 16182 ;;		_UI
 16183 ;;		_change_state_to_menu_start
 16184 ;;		_change_state_to_menu_12
 16185 ;;		_change_state_to_menu_22
 16186 ;;		_initLCD
 16187 ;;		_printRTC
 16188 ;;		_Loading
 16189 ;;		_EEPROM_write
 16190 ;;		_Test
 16191 ;;		_algorithmTest
 16192 ;;		_sensorTest
 16193 ;;		_actuatorTest
 16194 ;;		_BothServos
 16195 ;;		_PortTestA5
 16196 ;;		_PusherTest
 16197 ;;		_SpeedTest
 16198 ;;		_BlockerTest
 16199 ;;		_ToggleTestA5
 16200 ;; This function uses a non-reentrant model
 16201 ;;
 16202                           
 16203                           	psect	text57
 16204  004C48                     __ptext57:
 16205                           	opt stack 0
 16206  004C48                     _lcdInst:
 16207                           	opt stack 20
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;incstack = 0
 16211                           ;lcdInst@data stored from wreg
 16212  004C48  0100               	movlb	0	; () banked
 16213  004C4A  6F82               	movwf	lcdInst@data& (0+255),b
 16214                           
 16215                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16216  004C4C  948C               	bcf	3980,2,c	;volatile
 16217                           
 16218                           ;lcd.c: 17: lcdNibble(data);
 16219  004C4E  0100               	movlb	0	; () banked
 16220  004C50  5182               	movf	lcdInst@data& (0+255),w,b
 16221  004C52  EC2F  F021         	call	_lcdNibble
 16222  004C56  0012               	return		;funcret
 16223  004C58                     __end_of_lcdInst:
 16224                           	opt stack 0
 16225                           tblptru	equ	0xFF8
 16226                           tblptrh	equ	0xFF7
 16227                           tblptrl	equ	0xFF6
 16228                           tablat	equ	0xFF5
 16229                           prodh	equ	0xFF4
 16230                           prodl	equ	0xFF3
 16231                           intcon	equ	0xFF2
 16232                           intcon2	equ	0xFF1
 16233                           intcon3	equ	0xFF0
 16234                           indf0	equ	0xFEF
 16235                           postinc0	equ	0xFEE
 16236                           fsr0h	equ	0xFEA
 16237                           fsr0l	equ	0xFE9
 16238                           wreg	equ	0xFE8
 16239                           postdec1	equ	0xFE5
 16240                           fsr1l	equ	0xFE1
 16241                           indf2	equ	0xFDF
 16242                           postinc2	equ	0xFDE
 16243                           postdec2	equ	0xFDD
 16244                           fsr2h	equ	0xFDA
 16245                           fsr2l	equ	0xFD9
 16246                           status	equ	0xFD8
 16247                           
 16248 ;; *************** function _lcdNibble *****************
 16249 ;; Defined at:
 16250 ;;		line 25 in file "lcd.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;  data            1    wreg     unsigned char 
 16253 ;; Auto vars:     Size  Location     Type
 16254 ;;  data            1    1[BANK0 ] unsigned char 
 16255 ;;  temp            1    0[BANK0 ] unsigned char 
 16256 ;; Return value:  Size  Location     Type
 16257 ;;                  1    wreg      void 
 16258 ;; Registers used:
 16259 ;;		wreg, status,2, status,0
 16260 ;; Tracked objects:
 16261 ;;		On entry : 0/0
 16262 ;;		On exit  : 0/0
 16263 ;;		Unchanged: 0/0
 16264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16269 ;;Total ram usage:        2 bytes
 16270 ;; Hardware stack levels used:    1
 16271 ;; Hardware stack levels required when called:    7
 16272 ;; This function calls:
 16273 ;;		Nothing
 16274 ;; This function is called by:
 16275 ;;		_lcdInst
 16276 ;;		_putch
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           	psect	text58
 16281  00425E                     __ptext58:
 16282                           	opt stack 0
 16283  00425E                     _lcdNibble:
 16284                           	opt stack 20
 16285                           
 16286                           ;incstack = 0
 16287                           ;lcdNibble@data stored from wreg
 16288  00425E  0100               	movlb	0	; () banked
 16289  004260  6F81               	movwf	lcdNibble@data& (0+255),b
 16290                           
 16291                           ;lcd.c: 27: char temp = data & 0xF0;
 16292  004262  0100               	movlb	0	; () banked
 16293  004264  5181               	movf	lcdNibble@data& (0+255),w,b
 16294  004266  0BF0               	andlw	240
 16295  004268  0100               	movlb	0	; () banked
 16296  00426A  6F80               	movwf	lcdNibble@temp& (0+255),b
 16297                           
 16298                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16299  00426C  508C               	movf	3980,w,c	;volatile
 16300  00426E  0B0F               	andlw	15
 16301  004270  6E8C               	movwf	3980,c	;volatile
 16302                           
 16303                           ;lcd.c: 29: LATD = temp | LATD;
 16304  004272  0100               	movlb	0	; () banked
 16305  004274  5180               	movf	lcdNibble@temp& (0+255),w,b
 16306  004276  108C               	iorwf	3980,w,c	;volatile
 16307  004278  6E8C               	movwf	3980,c	;volatile
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 16311  00427A  868C               	bsf	3980,3,c	;volatile
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16315  00427C  0E42               	movlw	66
 16316  00427E                     u9127:
 16317  00427E  2EE8               	decfsz	wreg,f,c
 16318  004280  D7FE               	bra	u9127
 16319  004282  D000               	nop2	
 16320                           
 16321                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 16322  004284  968C               	bcf	3980,3,c	;volatile
 16323                           
 16324                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16325  004286  0E42               	movlw	66
 16326  004288                     u9137:
 16327  004288  2EE8               	decfsz	wreg,f,c
 16328  00428A  D7FE               	bra	u9137
 16329  00428C  D000               	nop2	
 16330                           
 16331                           ;lcd.c: 36: data = data << 4;
 16332  00428E  0100               	movlb	0	; () banked
 16333  004290  3981               	swapf	lcdNibble@data& (0+255),w,b
 16334  004292  0BF0               	andlw	240
 16335  004294  0100               	movlb	0	; () banked
 16336  004296  6F81               	movwf	lcdNibble@data& (0+255),b
 16337                           
 16338                           ;lcd.c: 38: temp = data & 0xF0;
 16339  004298  0100               	movlb	0	; () banked
 16340  00429A  5181               	movf	lcdNibble@data& (0+255),w,b
 16341  00429C  0BF0               	andlw	240
 16342  00429E  0100               	movlb	0	; () banked
 16343  0042A0  6F80               	movwf	lcdNibble@temp& (0+255),b
 16344                           
 16345                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16346  0042A2  508C               	movf	3980,w,c	;volatile
 16347  0042A4  0B0F               	andlw	15
 16348  0042A6  6E8C               	movwf	3980,c	;volatile
 16349                           
 16350                           ;lcd.c: 40: LATD = temp | LATD;
 16351  0042A8  0100               	movlb	0	; () banked
 16352  0042AA  5180               	movf	lcdNibble@temp& (0+255),w,b
 16353  0042AC  108C               	iorwf	3980,w,c	;volatile
 16354  0042AE  6E8C               	movwf	3980,c	;volatile
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16358  0042B0  868C               	bsf	3980,3,c	;volatile
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16362  0042B2  0E42               	movlw	66
 16363  0042B4                     u9147:
 16364  0042B4  2EE8               	decfsz	wreg,f,c
 16365  0042B6  D7FE               	bra	u9147
 16366  0042B8  D000               	nop2	
 16367                           
 16368                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16369  0042BA  968C               	bcf	3980,3,c	;volatile
 16370                           
 16371                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16372  0042BC  0E42               	movlw	66
 16373  0042BE                     u9157:
 16374  0042BE  2EE8               	decfsz	wreg,f,c
 16375  0042C0  D7FE               	bra	u9157
 16376  0042C2  D000               	nop2	
 16377  0042C4  0012               	return		;funcret
 16378  0042C6                     __end_of_lcdNibble:
 16379                           	opt stack 0
 16380                           tblptru	equ	0xFF8
 16381                           tblptrh	equ	0xFF7
 16382                           tblptrl	equ	0xFF6
 16383                           tablat	equ	0xFF5
 16384                           prodh	equ	0xFF4
 16385                           prodl	equ	0xFF3
 16386                           intcon	equ	0xFF2
 16387                           intcon2	equ	0xFF1
 16388                           intcon3	equ	0xFF0
 16389                           indf0	equ	0xFEF
 16390                           postinc0	equ	0xFEE
 16391                           fsr0h	equ	0xFEA
 16392                           fsr0l	equ	0xFE9
 16393                           wreg	equ	0xFE8
 16394                           postdec1	equ	0xFE5
 16395                           fsr1l	equ	0xFE1
 16396                           indf2	equ	0xFDF
 16397                           postinc2	equ	0xFDE
 16398                           postdec2	equ	0xFDD
 16399                           fsr2h	equ	0xFDA
 16400                           fsr2l	equ	0xFD9
 16401                           status	equ	0xFD8
 16402                           
 16403 ;; *************** function _handler *****************
 16404 ;; Defined at:
 16405 ;;		line 16 in file "interruptHandler.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;		None
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;		None
 16410 ;; Return value:  Size  Location     Type
 16411 ;;                  1    wreg      void 
 16412 ;; Registers used:
 16413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16414 ;; Tracked objects:
 16415 ;;		On entry : 0/0
 16416 ;;		On exit  : 0/0
 16417 ;;		Unchanged: 0/0
 16418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;Total ram usage:       16 bytes
 16424 ;; Hardware stack levels used:    1
 16425 ;; Hardware stack levels required when called:    6
 16426 ;; This function calls:
 16427 ;;		_printSortTimer
 16428 ;;		_updateMenu
 16429 ;; This function is called by:
 16430 ;;		Interrupt level 2
 16431 ;; This function uses a non-reentrant model
 16432 ;;
 16433                           
 16434                           	psect	intcode
 16435  000008                     __pintcode:
 16436                           	opt stack 0
 16437  000008                     _handler:
 16438                           	opt stack 18
 16439                           
 16440                           ;incstack = 0
 16441  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16442  00000A  ED83  F019         	call	int_func,f	;refresh shadow registers
 16443                           tblptru	equ	0xFF8
 16444                           tblptrh	equ	0xFF7
 16445                           tblptrl	equ	0xFF6
 16446                           tablat	equ	0xFF5
 16447                           prodh	equ	0xFF4
 16448                           prodl	equ	0xFF3
 16449                           intcon	equ	0xFF2
 16450                           intcon2	equ	0xFF1
 16451                           intcon3	equ	0xFF0
 16452                           indf0	equ	0xFEF
 16453                           postinc0	equ	0xFEE
 16454                           fsr0h	equ	0xFEA
 16455                           fsr0l	equ	0xFE9
 16456                           wreg	equ	0xFE8
 16457                           postdec1	equ	0xFE5
 16458                           fsr1l	equ	0xFE1
 16459                           indf2	equ	0xFDF
 16460                           postinc2	equ	0xFDE
 16461                           postdec2	equ	0xFDD
 16462                           fsr2h	equ	0xFDA
 16463                           fsr2l	equ	0xFD9
 16464                           status	equ	0xFD8
 16465                           
 16466                           	psect	intcode_body
 16467  003306                     __pintcode_body:
 16468                           	opt stack 18
 16469  003306                     int_func:
 16470                           	opt stack 18
 16471  003306  0006               	pop		; remove dummy address from shadow register refresh
 16472  003308  CFFA F04B          	movff	pclath,??_handler+2
 16473  00330C  CFFB F04C          	movff	pclatu,??_handler+3
 16474  003310  CFE9 F04D          	movff	fsr0l,??_handler+4
 16475  003314  CFEA F04E          	movff	fsr0h,??_handler+5
 16476  003318  CFE1 F04F          	movff	fsr1l,??_handler+6
 16477  00331C  CFE2 F050          	movff	fsr1h,??_handler+7
 16478  003320  CFD9 F051          	movff	fsr2l,??_handler+8
 16479  003324  CFDA F052          	movff	fsr2h,??_handler+9
 16480  003328  CFF3 F053          	movff	prodl,??_handler+10
 16481  00332C  CFF4 F054          	movff	prodh,??_handler+11
 16482  003330  CFF6 F055          	movff	tblptrl,??_handler+12
 16483  003334  CFF7 F056          	movff	tblptrh,??_handler+13
 16484  003338  CFF8 F057          	movff	tblptru,??_handler+14
 16485  00333C  CFF5 F058          	movff	tablat,??_handler+15
 16486                           
 16487                           ;interruptHandler.c: 18: if(INT1IF){
 16488  003340  A0F0               	btfss	intcon3,0,c	;volatile
 16489  003342  D020               	goto	i2l8579
 16490                           
 16491                           ;interruptHandler.c: 19: INT1IF = 0;
 16492  003344  90F0               	bcf	intcon3,0,c	;volatile
 16493                           
 16494                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16495  003346  0100               	movlb	0	; () banked
 16496  003348  51FC               	movf	_machine_state& (0+255),w,b
 16497  00334A  A4D8               	btfss	status,2,c
 16498  00334C  D01B               	goto	i2l8579
 16499                           
 16500                           ; BSR set to: 0
 16501                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16502  00334E  3881               	swapf	3969,w,c	;volatile
 16503  003350  0B0F               	andlw	15
 16504  003352  0B0F               	andlw	15
 16505  003354  6E49               	movwf	??_handler& (0+255),c
 16506  003356  6A4A               	clrf	(??_handler+1)& (0+255),c
 16507  003358  0EEF               	movlw	low _keys
 16508  00335A  2449               	addwf	??_handler,w,c
 16509  00335C  6EF6               	movwf	tblptrl,c
 16510  00335E  0EFA               	movlw	high _keys
 16511  003360  204A               	addwfc	??_handler+1,w,c
 16512  003362  6EF7               	movwf	tblptrh,c
 16513  003364                     	if	1	;There are 3 active tblptr bytes
 16514  003364  6AF8               	clrf	tblptru,c
 16515  003366  0E00               	movlw	low (__mediumconst shr (0+16))
 16516  003368  22F8               	addwfc	tblptru,f,c
 16517  00336A                     	endif
 16518  00336A  0008               	tblrd		*
 16519  00336C  CFF5 F07D          	movff	tablat,_input	;volatile
 16520                           
 16521                           ; BSR set to: 0
 16522                           ;interruptHandler.c: 23: if(input == '*'){
 16523  003370  0E2A               	movlw	42
 16524  003372  187D               	xorwf	_input,w,c	;volatile
 16525  003374  A4D8               	btfss	status,2,c
 16526  003376  D004               	goto	i2l8577
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16530  003378  0E03               	movlw	3
 16531  00337A  0100               	movlb	0	; () banked
 16532  00337C  6FFC               	movwf	_machine_state& (0+255),b
 16533                           
 16534                           ;interruptHandler.c: 25: }
 16535  00337E  D002               	goto	i2l8579
 16536  003380                     i2l8577:
 16537                           
 16538                           ; BSR set to: 0
 16539                           ;interruptHandler.c: 26: else{
 16540                           ;interruptHandler.c: 27: updateMenu();
 16541  003380  EC31  F011         	call	_updateMenu	;wreg free
 16542  003384                     i2l8579:
 16543                           
 16544                           ;interruptHandler.c: 28: }
 16545                           ;interruptHandler.c: 29: }
 16546                           ;interruptHandler.c: 30: }
 16547                           ;interruptHandler.c: 33: if(TMR0IF){
 16548  003384  A4F2               	btfss	intcon,2,c	;volatile
 16549  003386  D00C               	goto	i2l8593
 16550                           
 16551                           ;interruptHandler.c: 34: TMR0IF = 0;
 16552  003388  94F2               	bcf	intcon,2,c	;volatile
 16553                           
 16554                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16555  00338A  0100               	movlb	0	; () banked
 16556  00338C  05FC               	decf	_machine_state& (0+255),w,b
 16557  00338E  A4D8               	btfss	status,2,c
 16558  003390  D007               	goto	i2l8593
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;interruptHandler.c: 36: printSortTimer();
 16562  003392  ECE6  F015         	call	_printSortTimer	;wreg free
 16563                           
 16564                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16565  003396  0E85               	movlw	133
 16566  003398  6ED7               	movwf	4055,c	;volatile
 16567                           
 16568                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16569  00339A  0EEE               	movlw	238
 16570  00339C  6ED6               	movwf	4054,c	;volatile
 16571                           
 16572                           ;interruptHandler.c: 40: TMR0ON = 1;
 16573  00339E  8ED5               	bsf	4053,7,c	;volatile
 16574  0033A0                     i2l8593:
 16575                           
 16576                           ;interruptHandler.c: 41: }
 16577                           ;interruptHandler.c: 42: }
 16578                           ;interruptHandler.c: 45: if(TMR1IF){
 16579  0033A0  A09E               	btfss	3998,0,c	;volatile
 16580  0033A2  D024               	goto	i2l8617
 16581                           
 16582                           ;interruptHandler.c: 46: TMR1IF = 0;
 16583  0033A4  909E               	bcf	3998,0,c	;volatile
 16584                           
 16585                           ;interruptHandler.c: 47: TMR1ON = 0;
 16586  0033A6  90CD               	bcf	4045,0,c	;volatile
 16587                           
 16588                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16589  0033A8  0100               	movlb	0	; () banked
 16590  0033AA  05FC               	decf	_machine_state& (0+255),w,b
 16591  0033AC  A4D8               	btfss	status,2,c
 16592  0033AE  D01E               	goto	i2l8617
 16593                           
 16594                           ; BSR set to: 0
 16595                           ;interruptHandler.c: 49: if(was_low_1){
 16596  0033B0  5079               	movf	_was_low_1,w,c	;volatile
 16597  0033B2  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16598  0033B4  B4D8               	btfsc	status,2,c
 16599  0033B6  D00A               	goto	i2l883
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16603  0033B8  828B               	bsf	3979,1,c	;volatile
 16604                           
 16605                           ; BSR set to: 0
 16606                           ;interruptHandler.c: 51: was_low_1 = 0;
 16607  0033BA  0E00               	movlw	0
 16608  0033BC  6E7A               	movwf	_was_low_1+1,c	;volatile
 16609  0033BE  0E00               	movlw	0
 16610  0033C0  6E79               	movwf	_was_low_1,c	;volatile
 16611                           
 16612                           ; BSR set to: 0
 16613                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16614  0033C2  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16615                           
 16616                           ; BSR set to: 0
 16617                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16618  0033C6  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16619                           
 16620                           ;interruptHandler.c: 54: }
 16621  0033CA  D00F               	goto	i2l8615
 16622  0033CC                     i2l883:
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;interruptHandler.c: 55: else{
 16626                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16627  0033CC  928B               	bcf	3979,1,c	;volatile
 16628                           
 16629                           ; BSR set to: 0
 16630                           ;interruptHandler.c: 57: was_low_1 = 1;
 16631  0033CE  0E00               	movlw	0
 16632  0033D0  6E7A               	movwf	_was_low_1+1,c	;volatile
 16633  0033D2  0E01               	movlw	1
 16634  0033D4  6E79               	movwf	_was_low_1,c	;volatile
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16638  0033D6  0101               	movlb	1	; () banked
 16639  0033D8  511C               	movf	_servoTimes& (0+255),w,b
 16640  0033DA  0800               	sublw	0
 16641  0033DC  0F20               	addlw	32
 16642  0033DE  6ECF               	movwf	4047,c	;volatile
 16643                           
 16644                           ; BSR set to: 1
 16645                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16646  0033E0  0101               	movlb	1	; () banked
 16647  0033E2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16648  0033E4  0800               	sublw	0
 16649  0033E6  0F20               	addlw	32
 16650  0033E8  6ECE               	movwf	4046,c	;volatile
 16651  0033EA                     i2l8615:
 16652                           
 16653                           ;interruptHandler.c: 60: }
 16654                           ;interruptHandler.c: 61: TMR1ON = 1;
 16655  0033EA  80CD               	bsf	4045,0,c	;volatile
 16656  0033EC                     i2l8617:
 16657                           
 16658                           ;interruptHandler.c: 62: }
 16659                           ;interruptHandler.c: 63: }
 16660                           ;interruptHandler.c: 65: if(TMR3IF){
 16661  0033EC  A2A1               	btfss	4001,1,c	;volatile
 16662  0033EE  D024               	goto	i2l889
 16663                           
 16664                           ;interruptHandler.c: 66: TMR3IF = 0;
 16665  0033F0  92A1               	bcf	4001,1,c	;volatile
 16666                           
 16667                           ;interruptHandler.c: 67: TMR3ON = 0;
 16668  0033F2  90B1               	bcf	4017,0,c	;volatile
 16669                           
 16670                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16671  0033F4  0100               	movlb	0	; () banked
 16672  0033F6  05FC               	decf	_machine_state& (0+255),w,b
 16673  0033F8  A4D8               	btfss	status,2,c
 16674  0033FA  D01E               	goto	i2l889
 16675                           
 16676                           ; BSR set to: 0
 16677                           ;interruptHandler.c: 69: if(was_low_3){
 16678  0033FC  507B               	movf	_was_low_3,w,c	;volatile
 16679  0033FE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16680  003400  B4D8               	btfsc	status,2,c
 16681  003402  D00A               	goto	i2l887
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16685  003404  848B               	bsf	3979,2,c	;volatile
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;interruptHandler.c: 71: was_low_3 = 0;
 16689  003406  0E00               	movlw	0
 16690  003408  6E7C               	movwf	_was_low_3+1,c	;volatile
 16691  00340A  0E00               	movlw	0
 16692  00340C  6E7B               	movwf	_was_low_3,c	;volatile
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16696  00340E  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16697                           
 16698                           ; BSR set to: 0
 16699                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16700  003412  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16701                           
 16702                           ;interruptHandler.c: 74: }
 16703  003416  D00F               	goto	i2l8639
 16704  003418                     i2l887:
 16705                           
 16706                           ; BSR set to: 0
 16707                           ;interruptHandler.c: 75: else{
 16708                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16709  003418  948B               	bcf	3979,2,c	;volatile
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;interruptHandler.c: 77: was_low_3 = 1;
 16713  00341A  0E00               	movlw	0
 16714  00341C  6E7C               	movwf	_was_low_3+1,c	;volatile
 16715  00341E  0E01               	movlw	1
 16716  003420  6E7B               	movwf	_was_low_3,c	;volatile
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16720  003422  0101               	movlb	1	; () banked
 16721  003424  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16722  003426  0800               	sublw	0
 16723  003428  0F20               	addlw	32
 16724  00342A  6EB3               	movwf	4019,c	;volatile
 16725                           
 16726                           ; BSR set to: 1
 16727                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16728  00342C  0101               	movlb	1	; () banked
 16729  00342E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16730  003430  0800               	sublw	0
 16731  003432  0F20               	addlw	32
 16732  003434  6EB2               	movwf	4018,c	;volatile
 16733  003436                     i2l8639:
 16734                           
 16735                           ;interruptHandler.c: 80: }
 16736                           ;interruptHandler.c: 81: TMR3ON = 1;
 16737  003436  80B1               	bsf	4017,0,c	;volatile
 16738  003438                     i2l889:
 16739  003438  C058  FFF5         	movff	??_handler+15,tablat
 16740  00343C  C057  FFF8         	movff	??_handler+14,tblptru
 16741  003440  C056  FFF7         	movff	??_handler+13,tblptrh
 16742  003444  C055  FFF6         	movff	??_handler+12,tblptrl
 16743  003448  C054  FFF4         	movff	??_handler+11,prodh
 16744  00344C  C053  FFF3         	movff	??_handler+10,prodl
 16745  003450  C052  FFDA         	movff	??_handler+9,fsr2h
 16746  003454  C051  FFD9         	movff	??_handler+8,fsr2l
 16747  003458  C050  FFE2         	movff	??_handler+7,fsr1h
 16748  00345C  C04F  FFE1         	movff	??_handler+6,fsr1l
 16749  003460  C04E  FFEA         	movff	??_handler+5,fsr0h
 16750  003464  C04D  FFE9         	movff	??_handler+4,fsr0l
 16751  003468  C04C  FFFB         	movff	??_handler+3,pclatu
 16752  00346C  C04B  FFFA         	movff	??_handler+2,pclath
 16753  003470  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16754  003472  0011               	retfie		f
 16755  003474                     __end_of_handler:
 16756                           	opt stack 0
 16757                           pclatu	equ	0xFFB
 16758                           pclath	equ	0xFFA
 16759                           tblptru	equ	0xFF8
 16760                           tblptrh	equ	0xFF7
 16761                           tblptrl	equ	0xFF6
 16762                           tablat	equ	0xFF5
 16763                           prodh	equ	0xFF4
 16764                           prodl	equ	0xFF3
 16765                           intcon	equ	0xFF2
 16766                           intcon2	equ	0xFF1
 16767                           intcon3	equ	0xFF0
 16768                           indf0	equ	0xFEF
 16769                           postinc0	equ	0xFEE
 16770                           fsr0h	equ	0xFEA
 16771                           fsr0l	equ	0xFE9
 16772                           wreg	equ	0xFE8
 16773                           postdec1	equ	0xFE5
 16774                           fsr1h	equ	0xFE2
 16775                           fsr1l	equ	0xFE1
 16776                           indf2	equ	0xFDF
 16777                           postinc2	equ	0xFDE
 16778                           postdec2	equ	0xFDD
 16779                           fsr2h	equ	0xFDA
 16780                           fsr2l	equ	0xFD9
 16781                           status	equ	0xFD8
 16782                           
 16783 ;; *************** function _updateMenu *****************
 16784 ;; Defined at:
 16785 ;;		line 213 in file "UI.c"
 16786 ;; Parameters:    Size  Location     Type
 16787 ;;		None
 16788 ;; Auto vars:     Size  Location     Type
 16789 ;;		None
 16790 ;; Return value:  Size  Location     Type
 16791 ;;                  1    wreg      void 
 16792 ;; Registers used:
 16793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16794 ;; Tracked objects:
 16795 ;;		On entry : 0/0
 16796 ;;		On exit  : 0/0
 16797 ;;		Unchanged: 0/0
 16798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16803 ;;Total ram usage:        2 bytes
 16804 ;; Hardware stack levels used:    1
 16805 ;; Hardware stack levels required when called:    5
 16806 ;; This function calls:
 16807 ;;		_change_state_to_logs_11
 16808 ;;		_change_state_to_logs_12
 16809 ;;		_change_state_to_logs_22
 16810 ;;		_change_state_to_logs_23
 16811 ;;		_change_state_to_logs_33
 16812 ;;		_change_state_to_logs_34
 16813 ;;		_change_state_to_menu_11
 16814 ;;		_change_state_to_menu_23
 16815 ;;		_dispLogs
 16816 ;;		_inputHandler
 16817 ;;		i2_change_state_to_menu_12
 16818 ;;		i2_change_state_to_menu_22
 16819 ;;		i2_change_state_to_menu_start
 16820 ;; This function is called by:
 16821 ;;		_handler
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           	psect	text60
 16826  002262                     __ptext60:
 16827                           	opt stack 0
 16828  002262                     _updateMenu:
 16829                           	opt stack 18
 16830                           
 16831                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16832                           
 16833                           ;incstack = 0
 16834  002262  0E00               	movlw	0
 16835  002264  6E78               	movwf	_up+1,c
 16836  002266  0E00               	movlw	0
 16837  002268  6E77               	movwf	_up,c
 16838  00226A  0E00               	movlw	0
 16839  00226C  6E62               	movwf	_down+1,c
 16840  00226E  0E00               	movlw	0
 16841  002270  6E61               	movwf	_down,c
 16842  002272  0E00               	movlw	0
 16843  002274  6E64               	movwf	_enter+1,c
 16844  002276  0E00               	movlw	0
 16845  002278  6E63               	movwf	_enter,c
 16846  00227A  0E00               	movlw	0
 16847  00227C  6E5A               	movwf	_back+1,c
 16848  00227E  0E00               	movlw	0
 16849  002280  6E59               	movwf	_back,c
 16850                           
 16851                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16852  002282  9EF2               	bcf	intcon,7,c	;volatile
 16853                           
 16854                           ;UI.c: 217: if (inputHandler()
 16855                           ;UI.c: 220: ){
 16856  002284  ECEB  F016         	call	_inputHandler	;wreg free
 16857  002288  502A               	movf	?_inputHandler,w,c
 16858  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16859  00228C  A4D8               	btfss	status,2,c
 16860  00228E  D112               	goto	i2l8313
 16861  002290  D146               	goto	i2l252
 16862  002292                     i2l8165:
 16863                           
 16864                           ;UI.c: 224: change_state_to_menu_11();
 16865  002292  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 16866                           
 16867                           ;UI.c: 225: break;
 16868  002296  D143               	goto	i2l252
 16869  002298                     i2l8167:
 16870                           
 16871                           ;UI.c: 228: if(up){
 16872  002298  5077               	movf	_up,w,c
 16873  00229A  1078               	iorwf	_up+1,w,c
 16874  00229C  B4D8               	btfsc	status,2,c
 16875  00229E  D003               	goto	i2l8171
 16876                           
 16877                           ;UI.c: 229: change_state_to_menu_23();
 16878  0022A0  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 16879                           
 16880                           ;UI.c: 230: }
 16881  0022A4  D13C               	goto	i2l252
 16882  0022A6                     i2l8171:
 16883                           
 16884                           ;UI.c: 231: else if(down){
 16885  0022A6  5061               	movf	_down,w,c
 16886  0022A8  1062               	iorwf	_down+1,w,c
 16887  0022AA  B4D8               	btfsc	status,2,c
 16888  0022AC  D003               	goto	i2l8175
 16889                           
 16890                           ;UI.c: 232: change_state_to_menu_12();
 16891  0022AE  EC10  F024         	call	i2_change_state_to_menu_12	;wreg free
 16892                           
 16893                           ;UI.c: 233: }
 16894  0022B2  D135               	goto	i2l252
 16895  0022B4                     i2l8175:
 16896                           
 16897                           ;UI.c: 234: else if(enter){
 16898  0022B4  5063               	movf	_enter,w,c
 16899  0022B6  1064               	iorwf	_enter+1,w,c
 16900  0022B8  B4D8               	btfsc	status,2,c
 16901  0022BA  D131               	goto	i2l252
 16902                           
 16903                           ;UI.c: 235: change_state_to_menu_start();
 16904  0022BC  EC6A  F025         	call	i2_change_state_to_menu_start	;wreg free
 16905                           
 16906                           ;UI.c: 236: }
 16907                           ;UI.c: 237: break;
 16908  0022C0  D12E               	goto	i2l252
 16909  0022C2                     i2l8179:
 16910                           
 16911                           ;UI.c: 240: if(up){
 16912  0022C2  5077               	movf	_up,w,c
 16913  0022C4  1078               	iorwf	_up+1,w,c
 16914  0022C6  B4D8               	btfsc	status,2,c
 16915  0022C8  D003               	goto	i2l8183
 16916                           
 16917                           ;UI.c: 241: change_state_to_menu_11();
 16918  0022CA  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 16919                           
 16920                           ;UI.c: 242: }
 16921  0022CE  D127               	goto	i2l252
 16922  0022D0                     i2l8183:
 16923                           
 16924                           ;UI.c: 243: else if(down){
 16925  0022D0  5061               	movf	_down,w,c
 16926  0022D2  1062               	iorwf	_down+1,w,c
 16927  0022D4  B4D8               	btfsc	status,2,c
 16928  0022D6  D011               	goto	i2l8199
 16929                           
 16930                           ;UI.c: 244: change_state_to_menu_23();
 16931  0022D8  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 16932                           
 16933                           ;UI.c: 245: }
 16934  0022DC  D120               	goto	i2l252
 16935  0022DE                     i2l8191:
 16936                           
 16937                           ;UI.c: 252: if(up){
 16938  0022DE  5077               	movf	_up,w,c
 16939  0022E0  1078               	iorwf	_up+1,w,c
 16940  0022E2  B4D8               	btfsc	status,2,c
 16941  0022E4  D003               	goto	i2l8195
 16942                           
 16943                           ;UI.c: 253: change_state_to_menu_11();
 16944  0022E6  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 16945                           
 16946                           ;UI.c: 254: }
 16947  0022EA  D119               	goto	i2l252
 16948  0022EC                     i2l8195:
 16949                           
 16950                           ;UI.c: 255: else if(down){
 16951  0022EC  5061               	movf	_down,w,c
 16952  0022EE  1062               	iorwf	_down+1,w,c
 16953  0022F0  B4D8               	btfsc	status,2,c
 16954  0022F2  D003               	goto	i2l8199
 16955                           
 16956                           ;UI.c: 256: change_state_to_menu_23();
 16957  0022F4  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 16958                           
 16959                           ;UI.c: 257: }
 16960  0022F8  D112               	goto	i2l252
 16961  0022FA                     i2l8199:
 16962                           
 16963                           ;UI.c: 258: else if(enter){
 16964  0022FA  5063               	movf	_enter,w,c
 16965  0022FC  1064               	iorwf	_enter+1,w,c
 16966  0022FE  B4D8               	btfsc	status,2,c
 16967  002300  D10E               	goto	i2l252
 16968                           
 16969                           ;UI.c: 259: machine_state = Sorting_state;
 16970  002302  0E01               	movlw	1
 16971  002304  0100               	movlb	0	; () banked
 16972  002306  6FFC               	movwf	_machine_state& (0+255),b
 16973                           
 16974                           ; BSR set to: 0
 16975                           ;UI.c: 260: }
 16976                           ;UI.c: 261: break;
 16977                           
 16978                           ; BSR set to: 0
 16979                           
 16980                           ; BSR set to: 0
 16981  002308  D10A               	goto	i2l252
 16982  00230A                     i2l8203:
 16983                           
 16984                           ;UI.c: 264: if(up){
 16985  00230A  5077               	movf	_up,w,c
 16986  00230C  1078               	iorwf	_up+1,w,c
 16987  00230E  B4D8               	btfsc	status,2,c
 16988  002310  D003               	goto	i2l8207
 16989                           
 16990                           ;UI.c: 265: change_state_to_menu_22();
 16991  002312  ECF8  F023         	call	i2_change_state_to_menu_22	;wreg free
 16992                           
 16993                           ;UI.c: 266: }
 16994  002316  D103               	goto	i2l252
 16995  002318                     i2l8207:
 16996                           
 16997                           ;UI.c: 267: else if(down){
 16998  002318  5061               	movf	_down,w,c
 16999  00231A  1062               	iorwf	_down+1,w,c
 17000  00231C  B4D8               	btfsc	status,2,c
 17001  00231E  D003               	goto	i2l8211
 17002                           
 17003                           ;UI.c: 268: change_state_to_menu_11();
 17004  002320  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 17005                           
 17006                           ;UI.c: 269: }
 17007  002324  D0FC               	goto	i2l252
 17008  002326                     i2l8211:
 17009                           
 17010                           ;UI.c: 270: else if(enter){
 17011  002326  5063               	movf	_enter,w,c
 17012  002328  1064               	iorwf	_enter+1,w,c
 17013  00232A  B4D8               	btfsc	status,2,c
 17014  00232C  D0F8               	goto	i2l252
 17015                           
 17016                           ;UI.c: 271: change_state_to_logs_11();
 17017  00232E  ECB8  F024         	call	_change_state_to_logs_11	;wreg free
 17018                           
 17019                           ;UI.c: 272: }
 17020                           ;UI.c: 273: break;
 17021  002332  D0F5               	goto	i2l252
 17022  002334                     i2l8215:
 17023                           
 17024                           ;UI.c: 276: if(up){
 17025  002334  5077               	movf	_up,w,c
 17026  002336  1078               	iorwf	_up+1,w,c
 17027  002338  B4D8               	btfsc	status,2,c
 17028  00233A  D003               	goto	i2l8219
 17029                           
 17030                           ;UI.c: 277: change_state_to_logs_34();
 17031  00233C  EC58  F024         	call	_change_state_to_logs_34	;wreg free
 17032                           
 17033                           ;UI.c: 278: }
 17034  002340  D0EE               	goto	i2l252
 17035  002342                     i2l8219:
 17036                           
 17037                           ;UI.c: 279: else if(down){
 17038  002342  5061               	movf	_down,w,c
 17039  002344  1062               	iorwf	_down+1,w,c
 17040  002346  B4D8               	btfsc	status,2,c
 17041  002348  D003               	goto	i2l8223
 17042                           
 17043                           ;UI.c: 280: change_state_to_logs_12();
 17044  00234A  ECA0  F024         	call	_change_state_to_logs_12	;wreg free
 17045                           
 17046                           ;UI.c: 281: }
 17047  00234E  D0E7               	goto	i2l252
 17048  002350                     i2l8223:
 17049                           
 17050                           ;UI.c: 282: else if(enter){
 17051  002350  5063               	movf	_enter,w,c
 17052  002352  1064               	iorwf	_enter+1,w,c
 17053  002354  B4D8               	btfsc	status,2,c
 17054  002356  D007               	goto	i2l8227
 17055                           
 17056                           ;UI.c: 283: dispLogs(1);
 17057  002358  0E00               	movlw	0
 17058  00235A  6E13               	movwf	dispLogs@myLog+1,c
 17059  00235C  0E01               	movlw	1
 17060  00235E  6E12               	movwf	dispLogs@myLog,c
 17061  002360  ECA4  F025         	call	_dispLogs	;wreg free
 17062                           
 17063                           ;UI.c: 284: }
 17064  002364  D0DC               	goto	i2l252
 17065  002366                     i2l8227:
 17066                           
 17067                           ;UI.c: 285: else if(back){
 17068  002366  5059               	movf	_back,w,c
 17069  002368  105A               	iorwf	_back+1,w,c
 17070  00236A  B4D8               	btfsc	status,2,c
 17071  00236C  D0D8               	goto	i2l252
 17072                           
 17073                           ;UI.c: 286: change_state_to_menu_23();
 17074  00236E  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17075                           
 17076                           ;UI.c: 287: }
 17077                           ;UI.c: 288: break;
 17078  002372  D0D5               	goto	i2l252
 17079  002374                     i2l8231:
 17080                           
 17081                           ;UI.c: 291: if(up){
 17082  002374  5077               	movf	_up,w,c
 17083  002376  1078               	iorwf	_up+1,w,c
 17084  002378  B4D8               	btfsc	status,2,c
 17085  00237A  D003               	goto	i2l8235
 17086                           
 17087                           ;UI.c: 292: change_state_to_logs_11();
 17088  00237C  ECB8  F024         	call	_change_state_to_logs_11	;wreg free
 17089                           
 17090                           ;UI.c: 293: }
 17091  002380  D0CE               	goto	i2l252
 17092  002382                     i2l8235:
 17093                           
 17094                           ;UI.c: 294: else if(down){
 17095  002382  5061               	movf	_down,w,c
 17096  002384  1062               	iorwf	_down+1,w,c
 17097  002386  B4D8               	btfsc	status,2,c
 17098  002388  D003               	goto	i2l8239
 17099                           
 17100                           ;UI.c: 295: change_state_to_logs_23();
 17101  00238A  ECFE  F024         	call	_change_state_to_logs_23	;wreg free
 17102                           
 17103                           ;UI.c: 296: }
 17104  00238E  D0C7               	goto	i2l252
 17105  002390                     i2l8239:
 17106                           
 17107                           ;UI.c: 297: else if(enter){
 17108  002390  5063               	movf	_enter,w,c
 17109  002392  1064               	iorwf	_enter+1,w,c
 17110  002394  B4D8               	btfsc	status,2,c
 17111  002396  D007               	goto	i2l8243
 17112                           
 17113                           ;UI.c: 298: dispLogs(2);
 17114  002398  0E00               	movlw	0
 17115  00239A  6E13               	movwf	dispLogs@myLog+1,c
 17116  00239C  0E02               	movlw	2
 17117  00239E  6E12               	movwf	dispLogs@myLog,c
 17118  0023A0  ECA4  F025         	call	_dispLogs	;wreg free
 17119                           
 17120                           ;UI.c: 299: }
 17121  0023A4  D0BC               	goto	i2l252
 17122  0023A6                     i2l8243:
 17123                           
 17124                           ;UI.c: 300: else if(back){
 17125  0023A6  5059               	movf	_back,w,c
 17126  0023A8  105A               	iorwf	_back+1,w,c
 17127  0023AA  B4D8               	btfsc	status,2,c
 17128  0023AC  D0B8               	goto	i2l252
 17129                           
 17130                           ;UI.c: 301: change_state_to_menu_23();
 17131  0023AE  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17132                           
 17133                           ;UI.c: 302: }
 17134                           ;UI.c: 303: break;
 17135  0023B2  D0B5               	goto	i2l252
 17136  0023B4                     i2l8247:
 17137                           
 17138                           ;UI.c: 306: if(up){
 17139  0023B4  5077               	movf	_up,w,c
 17140  0023B6  1078               	iorwf	_up+1,w,c
 17141  0023B8  B4D8               	btfsc	status,2,c
 17142  0023BA  D003               	goto	i2l8251
 17143                           
 17144                           ;UI.c: 307: change_state_to_logs_11();
 17145  0023BC  ECB8  F024         	call	_change_state_to_logs_11	;wreg free
 17146                           
 17147                           ;UI.c: 308: }
 17148  0023C0  D0AE               	goto	i2l252
 17149  0023C2                     i2l8251:
 17150                           
 17151                           ;UI.c: 309: else if(down){
 17152  0023C2  5061               	movf	_down,w,c
 17153  0023C4  1062               	iorwf	_down+1,w,c
 17154  0023C6  B4D8               	btfsc	status,2,c
 17155  0023C8  D003               	goto	i2l8255
 17156                           
 17157                           ;UI.c: 310: change_state_to_logs_23();
 17158  0023CA  ECFE  F024         	call	_change_state_to_logs_23	;wreg free
 17159                           
 17160                           ;UI.c: 311: }
 17161  0023CE  D0A7               	goto	i2l252
 17162  0023D0                     i2l8255:
 17163                           
 17164                           ;UI.c: 312: else if(enter){
 17165  0023D0  5063               	movf	_enter,w,c
 17166  0023D2  1064               	iorwf	_enter+1,w,c
 17167  0023D4  B4D8               	btfsc	status,2,c
 17168  0023D6  D007               	goto	i2l8259
 17169                           
 17170                           ;UI.c: 313: dispLogs(2);
 17171  0023D8  0E00               	movlw	0
 17172  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 17173  0023DC  0E02               	movlw	2
 17174  0023DE  6E12               	movwf	dispLogs@myLog,c
 17175  0023E0  ECA4  F025         	call	_dispLogs	;wreg free
 17176                           
 17177                           ;UI.c: 314: }
 17178  0023E4  D09C               	goto	i2l252
 17179  0023E6                     i2l8259:
 17180                           
 17181                           ;UI.c: 315: else if(back){
 17182  0023E6  5059               	movf	_back,w,c
 17183  0023E8  105A               	iorwf	_back+1,w,c
 17184  0023EA  B4D8               	btfsc	status,2,c
 17185  0023EC  D098               	goto	i2l252
 17186                           
 17187                           ;UI.c: 316: change_state_to_menu_23();
 17188  0023EE  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17189                           
 17190                           ;UI.c: 317: }
 17191                           ;UI.c: 318: break;
 17192  0023F2  D095               	goto	i2l252
 17193  0023F4                     i2l8263:
 17194                           
 17195                           ;UI.c: 321: if(up){
 17196  0023F4  5077               	movf	_up,w,c
 17197  0023F6  1078               	iorwf	_up+1,w,c
 17198  0023F8  B4D8               	btfsc	status,2,c
 17199  0023FA  D003               	goto	i2l8267
 17200                           
 17201                           ;UI.c: 322: change_state_to_logs_22();
 17202  0023FC  EC88  F024         	call	_change_state_to_logs_22	;wreg free
 17203                           
 17204                           ;UI.c: 323: }
 17205  002400  D08E               	goto	i2l252
 17206  002402                     i2l8267:
 17207                           
 17208                           ;UI.c: 324: else if(down){
 17209  002402  5061               	movf	_down,w,c
 17210  002404  1062               	iorwf	_down+1,w,c
 17211  002406  B4D8               	btfsc	status,2,c
 17212  002408  D003               	goto	i2l8271
 17213                           
 17214                           ;UI.c: 325: change_state_to_logs_34();
 17215  00240A  EC58  F024         	call	_change_state_to_logs_34	;wreg free
 17216                           
 17217                           ;UI.c: 326: }
 17218  00240E  D087               	goto	i2l252
 17219  002410                     i2l8271:
 17220                           
 17221                           ;UI.c: 327: else if(enter){
 17222  002410  5063               	movf	_enter,w,c
 17223  002412  1064               	iorwf	_enter+1,w,c
 17224  002414  B4D8               	btfsc	status,2,c
 17225  002416  D007               	goto	i2l8275
 17226                           
 17227                           ;UI.c: 328: dispLogs(3);
 17228  002418  0E00               	movlw	0
 17229  00241A  6E13               	movwf	dispLogs@myLog+1,c
 17230  00241C  0E03               	movlw	3
 17231  00241E  6E12               	movwf	dispLogs@myLog,c
 17232  002420  ECA4  F025         	call	_dispLogs	;wreg free
 17233                           
 17234                           ;UI.c: 329: }
 17235  002424  D07C               	goto	i2l252
 17236  002426                     i2l8275:
 17237                           
 17238                           ;UI.c: 330: else if(back){
 17239  002426  5059               	movf	_back,w,c
 17240  002428  105A               	iorwf	_back+1,w,c
 17241  00242A  B4D8               	btfsc	status,2,c
 17242  00242C  D078               	goto	i2l252
 17243                           
 17244                           ;UI.c: 331: change_state_to_menu_23();
 17245  00242E  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17246                           
 17247                           ;UI.c: 332: }
 17248                           ;UI.c: 333: break;
 17249  002432  D075               	goto	i2l252
 17250  002434                     i2l8279:
 17251                           
 17252                           ;UI.c: 336: if(up){
 17253  002434  5077               	movf	_up,w,c
 17254  002436  1078               	iorwf	_up+1,w,c
 17255  002438  B4D8               	btfsc	status,2,c
 17256  00243A  D003               	goto	i2l8283
 17257                           
 17258                           ;UI.c: 337: change_state_to_logs_22();
 17259  00243C  EC88  F024         	call	_change_state_to_logs_22	;wreg free
 17260                           
 17261                           ;UI.c: 338: }
 17262  002440  D06E               	goto	i2l252
 17263  002442                     i2l8283:
 17264                           
 17265                           ;UI.c: 339: else if(down){
 17266  002442  5061               	movf	_down,w,c
 17267  002444  1062               	iorwf	_down+1,w,c
 17268  002446  B4D8               	btfsc	status,2,c
 17269  002448  D003               	goto	i2l8287
 17270                           
 17271                           ;UI.c: 340: change_state_to_logs_34();
 17272  00244A  EC58  F024         	call	_change_state_to_logs_34	;wreg free
 17273                           
 17274                           ;UI.c: 341: }
 17275  00244E  D067               	goto	i2l252
 17276  002450                     i2l8287:
 17277                           
 17278                           ;UI.c: 342: else if(enter){
 17279  002450  5063               	movf	_enter,w,c
 17280  002452  1064               	iorwf	_enter+1,w,c
 17281  002454  B4D8               	btfsc	status,2,c
 17282  002456  D007               	goto	i2l8291
 17283                           
 17284                           ;UI.c: 343: dispLogs(3);
 17285  002458  0E00               	movlw	0
 17286  00245A  6E13               	movwf	dispLogs@myLog+1,c
 17287  00245C  0E03               	movlw	3
 17288  00245E  6E12               	movwf	dispLogs@myLog,c
 17289  002460  ECA4  F025         	call	_dispLogs	;wreg free
 17290                           
 17291                           ;UI.c: 344: }
 17292  002464  D05C               	goto	i2l252
 17293  002466                     i2l8291:
 17294                           
 17295                           ;UI.c: 345: else if(back){
 17296  002466  5059               	movf	_back,w,c
 17297  002468  105A               	iorwf	_back+1,w,c
 17298  00246A  B4D8               	btfsc	status,2,c
 17299  00246C  D058               	goto	i2l252
 17300                           
 17301                           ;UI.c: 346: change_state_to_menu_23();
 17302  00246E  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17303                           
 17304                           ;UI.c: 347: }
 17305                           ;UI.c: 348: break;
 17306  002472  D055               	goto	i2l252
 17307  002474                     i2l8295:
 17308                           
 17309                           ;UI.c: 351: if(up){
 17310  002474  5077               	movf	_up,w,c
 17311  002476  1078               	iorwf	_up+1,w,c
 17312  002478  B4D8               	btfsc	status,2,c
 17313  00247A  D003               	goto	i2l8299
 17314                           
 17315                           ;UI.c: 352: change_state_to_logs_33();
 17316  00247C  EC70  F024         	call	_change_state_to_logs_33	;wreg free
 17317                           
 17318                           ;UI.c: 353: }
 17319  002480  D04E               	goto	i2l252
 17320  002482                     i2l8299:
 17321                           
 17322                           ;UI.c: 354: else if(down){
 17323  002482  5061               	movf	_down,w,c
 17324  002484  1062               	iorwf	_down+1,w,c
 17325  002486  B4D8               	btfsc	status,2,c
 17326  002488  D003               	goto	i2l8303
 17327                           
 17328                           ;UI.c: 355: change_state_to_logs_11();
 17329  00248A  ECB8  F024         	call	_change_state_to_logs_11	;wreg free
 17330                           
 17331                           ;UI.c: 356: }
 17332  00248E  D047               	goto	i2l252
 17333  002490                     i2l8303:
 17334                           
 17335                           ;UI.c: 357: else if(enter){
 17336  002490  5063               	movf	_enter,w,c
 17337  002492  1064               	iorwf	_enter+1,w,c
 17338  002494  B4D8               	btfsc	status,2,c
 17339  002496  D007               	goto	i2l8307
 17340                           
 17341                           ;UI.c: 358: dispLogs(4);
 17342  002498  0E00               	movlw	0
 17343  00249A  6E13               	movwf	dispLogs@myLog+1,c
 17344  00249C  0E04               	movlw	4
 17345  00249E  6E12               	movwf	dispLogs@myLog,c
 17346  0024A0  ECA4  F025         	call	_dispLogs	;wreg free
 17347                           
 17348                           ;UI.c: 359: }
 17349  0024A4  D03C               	goto	i2l252
 17350  0024A6                     i2l8307:
 17351                           
 17352                           ;UI.c: 360: else if(back){
 17353  0024A6  5059               	movf	_back,w,c
 17354  0024A8  105A               	iorwf	_back+1,w,c
 17355  0024AA  B4D8               	btfsc	status,2,c
 17356  0024AC  D038               	goto	i2l252
 17357                           
 17358                           ;UI.c: 361: change_state_to_menu_23();
 17359  0024AE  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 17360                           
 17361                           ;UI.c: 367: }
 17362                           
 17363                           ;UI.c: 366: break;
 17364                           
 17365                           ;UI.c: 365: default:
 17366                           
 17367                           ;UI.c: 362: }
 17368                           ;UI.c: 363: break;
 17369  0024B2  D035               	goto	i2l252
 17370  0024B4                     i2l8313:
 17371  0024B4  C0E6  F043         	movff	_cur_state,??_updateMenu
 17372  0024B8  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17373                           
 17374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17375                           ; Switch size 1, requested type "space"
 17376                           ; Number of cases is 3, Range of values is 0 to 4
 17377                           ; switch strategies available:
 17378                           ; Name         Instructions Cycles
 17379                           ; simple_byte           10     6 (average)
 17380                           ;	Chosen strategy is simple_byte
 17381  0024BC  5044               	movf	??_updateMenu+1,w,c
 17382  0024BE  0A00               	xorlw	0	; case 0
 17383  0024C0  B4D8               	btfsc	status,2,c
 17384  0024C2  D007               	goto	i2l8949
 17385  0024C4  0A03               	xorlw	3	; case 3
 17386  0024C6  B4D8               	btfsc	status,2,c
 17387  0024C8  D015               	goto	i2l8951
 17388  0024CA  0A07               	xorlw	7	; case 4
 17389  0024CC  B4D8               	btfsc	status,2,c
 17390  0024CE  D020               	goto	i2l8953
 17391  0024D0  D026               	goto	i2l252
 17392  0024D2                     i2l8949:
 17393                           
 17394                           ; Switch size 1, requested type "space"
 17395                           ; Number of cases is 5, Range of values is 0 to 23
 17396                           ; switch strategies available:
 17397                           ; Name         Instructions Cycles
 17398                           ; simple_byte           16     9 (average)
 17399                           ;	Chosen strategy is simple_byte
 17400  0024D2  5043               	movf	??_updateMenu,w,c
 17401  0024D4  0A00               	xorlw	0	; case 0
 17402  0024D6  B4D8               	btfsc	status,2,c
 17403  0024D8  D6DC               	goto	i2l8165
 17404  0024DA  0A0B               	xorlw	11	; case 11
 17405  0024DC  B4D8               	btfsc	status,2,c
 17406  0024DE  D6DC               	goto	i2l8167
 17407  0024E0  0A07               	xorlw	7	; case 12
 17408  0024E2  B4D8               	btfsc	status,2,c
 17409  0024E4  D6EE               	goto	i2l8179
 17410  0024E6  0A1A               	xorlw	26	; case 22
 17411  0024E8  B4D8               	btfsc	status,2,c
 17412  0024EA  D6F9               	goto	i2l8191
 17413  0024EC  0A01               	xorlw	1	; case 23
 17414  0024EE  B4D8               	btfsc	status,2,c
 17415  0024F0  D70C               	goto	i2l8203
 17416  0024F2  D015               	goto	i2l252
 17417  0024F4                     i2l8951:
 17418                           
 17419                           ; Switch size 1, requested type "space"
 17420                           ; Number of cases is 4, Range of values is 243 to 255
 17421                           ; switch strategies available:
 17422                           ; Name         Instructions Cycles
 17423                           ; simple_byte           13     7 (average)
 17424                           ;	Chosen strategy is simple_byte
 17425  0024F4  5043               	movf	??_updateMenu,w,c
 17426  0024F6  0AF3               	xorlw	243	; case 243
 17427  0024F8  B4D8               	btfsc	status,2,c
 17428  0024FA  D71C               	goto	i2l8215
 17429  0024FC  0A07               	xorlw	7	; case 244
 17430  0024FE  B4D8               	btfsc	status,2,c
 17431  002500  D739               	goto	i2l8231
 17432  002502  0A0A               	xorlw	10	; case 254
 17433  002504  B4D8               	btfsc	status,2,c
 17434  002506  D756               	goto	i2l8247
 17435  002508  0A01               	xorlw	1	; case 255
 17436  00250A  B4D8               	btfsc	status,2,c
 17437  00250C  D773               	goto	i2l8263
 17438  00250E  D007               	goto	i2l252
 17439  002510                     i2l8953:
 17440                           
 17441                           ; Switch size 1, requested type "space"
 17442                           ; Number of cases is 2, Range of values is 9 to 10
 17443                           ; switch strategies available:
 17444                           ; Name         Instructions Cycles
 17445                           ; simple_byte            7     4 (average)
 17446                           ;	Chosen strategy is simple_byte
 17447  002510  5043               	movf	??_updateMenu,w,c
 17448  002512  0A09               	xorlw	9	; case 9
 17449  002514  B4D8               	btfsc	status,2,c
 17450  002516  D78E               	goto	i2l8279
 17451  002518  0A03               	xorlw	3	; case 10
 17452  00251A  B4D8               	btfsc	status,2,c
 17453  00251C  D7AB               	goto	i2l8295
 17454  00251E                     i2l252:
 17455                           
 17456                           ;UI.c: 368: }
 17457                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17458  00251E  8EF2               	bsf	intcon,7,c	;volatile
 17459  002520  0012               	return		;funcret
 17460  002522                     __end_of_updateMenu:
 17461                           	opt stack 0
 17462                           pclatu	equ	0xFFB
 17463                           pclath	equ	0xFFA
 17464                           tblptru	equ	0xFF8
 17465                           tblptrh	equ	0xFF7
 17466                           tblptrl	equ	0xFF6
 17467                           tablat	equ	0xFF5
 17468                           prodh	equ	0xFF4
 17469                           prodl	equ	0xFF3
 17470                           intcon	equ	0xFF2
 17471                           intcon2	equ	0xFF1
 17472                           intcon3	equ	0xFF0
 17473                           indf0	equ	0xFEF
 17474                           postinc0	equ	0xFEE
 17475                           fsr0h	equ	0xFEA
 17476                           fsr0l	equ	0xFE9
 17477                           wreg	equ	0xFE8
 17478                           postdec1	equ	0xFE5
 17479                           fsr1h	equ	0xFE2
 17480                           fsr1l	equ	0xFE1
 17481                           indf2	equ	0xFDF
 17482                           postinc2	equ	0xFDE
 17483                           postdec2	equ	0xFDD
 17484                           fsr2h	equ	0xFDA
 17485                           fsr2l	equ	0xFD9
 17486                           status	equ	0xFD8
 17487                           
 17488 ;; *************** function i2_change_state_to_menu_start *****************
 17489 ;; Defined at:
 17490 ;;		line 474 in file "UI.c"
 17491 ;; Parameters:    Size  Location     Type
 17492 ;;		None
 17493 ;; Auto vars:     Size  Location     Type
 17494 ;;		None
 17495 ;; Return value:  Size  Location     Type
 17496 ;;                  1    wreg      void 
 17497 ;; Registers used:
 17498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17499 ;; Tracked objects:
 17500 ;;		On entry : 0/0
 17501 ;;		On exit  : 0/0
 17502 ;;		Unchanged: 0/0
 17503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17508 ;;Total ram usage:        0 bytes
 17509 ;; Hardware stack levels used:    1
 17510 ;; Hardware stack levels required when called:    4
 17511 ;; This function calls:
 17512 ;;		i2_lcdInst
 17513 ;;		i2_printRTC
 17514 ;;		i2_printf
 17515 ;; This function is called by:
 17516 ;;		_updateMenu
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           	psect	text61
 17521  004AD4                     __ptext61:
 17522                           	opt stack 0
 17523  004AD4                     i2_change_state_to_menu_start:
 17524                           	opt stack 18
 17525                           
 17526                           ;UI.c: 475: cur_state = 0;
 17527                           
 17528                           ;incstack = 0
 17529  004AD4  0E00               	movlw	0
 17530  004AD6  0100               	movlb	0	; () banked
 17531  004AD8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17532  004ADA  0E00               	movlw	0
 17533  004ADC  6FE6               	movwf	_cur_state& (0+255),b
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;UI.c: 477: lcdInst(0b10000000);;
 17537  004ADE  0E80               	movlw	128
 17538  004AE0  EC32  F026         	call	i2_lcdInst
 17539                           
 17540                           ;UI.c: 478: printRTC();
 17541  004AE4  ECBF  F013         	call	i2_printRTC	;wreg free
 17542                           
 17543                           ;UI.c: 479: lcdInst(0b11000000);;
 17544  004AE8  0EC0               	movlw	192
 17545  004AEA  EC32  F026         	call	i2_lcdInst
 17546                           
 17547                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17548  004AEE  0EF7               	movlw	low STR_30
 17549  004AF0  6E0D               	movwf	i2printf@f,c
 17550  004AF2  0EFD               	movlw	high STR_30
 17551  004AF4  6E0E               	movwf	i2printf@f+1,c
 17552  004AF6  EC96  F00C         	call	i2_printf	;wreg free
 17553  004AFA  0012               	return		;funcret
 17554  004AFC                     __end_ofi2_change_state_to_menu_start:
 17555                           	opt stack 0
 17556                           pclatu	equ	0xFFB
 17557                           pclath	equ	0xFFA
 17558                           tblptru	equ	0xFF8
 17559                           tblptrh	equ	0xFF7
 17560                           tblptrl	equ	0xFF6
 17561                           tablat	equ	0xFF5
 17562                           prodh	equ	0xFF4
 17563                           prodl	equ	0xFF3
 17564                           intcon	equ	0xFF2
 17565                           intcon2	equ	0xFF1
 17566                           intcon3	equ	0xFF0
 17567                           indf0	equ	0xFEF
 17568                           postinc0	equ	0xFEE
 17569                           fsr0h	equ	0xFEA
 17570                           fsr0l	equ	0xFE9
 17571                           wreg	equ	0xFE8
 17572                           postdec1	equ	0xFE5
 17573                           fsr1h	equ	0xFE2
 17574                           fsr1l	equ	0xFE1
 17575                           indf2	equ	0xFDF
 17576                           postinc2	equ	0xFDE
 17577                           postdec2	equ	0xFDD
 17578                           fsr2h	equ	0xFDA
 17579                           fsr2l	equ	0xFD9
 17580                           status	equ	0xFD8
 17581                           
 17582 ;; *************** function i2_printRTC *****************
 17583 ;; Defined at:
 17584 ;;		line 63 in file "RTC.c"
 17585 ;; Parameters:    Size  Location     Type
 17586 ;;		None
 17587 ;; Auto vars:     Size  Location     Type
 17588 ;;  printRTC       14   44[COMRAM] int [7]
 17589 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17590 ;;  printRTC        2   64[COMRAM] int 
 17591 ;;  printRTC        2   58[COMRAM] int 
 17592 ;; Return value:  Size  Location     Type
 17593 ;;                  1    wreg      void 
 17594 ;; Registers used:
 17595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17596 ;; Tracked objects:
 17597 ;;		On entry : 0/0
 17598 ;;		On exit  : 0/0
 17599 ;;		Unchanged: 0/0
 17600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17602 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;Total ram usage:       25 bytes
 17606 ;; Hardware stack levels used:    1
 17607 ;; Hardware stack levels required when called:    3
 17608 ;; This function calls:
 17609 ;;		i2_getRTC
 17610 ;;		i2_lcdInst
 17611 ;;		i2_printf
 17612 ;;		i2_strcpy
 17613 ;; This function is called by:
 17614 ;;		i2_change_state_to_menu_start
 17615 ;; This function uses a non-reentrant model
 17616 ;;
 17617                           
 17618                           	psect	text62
 17619  00277E                     __ptext62:
 17620                           	opt stack 0
 17621  00277E                     i2_printRTC:
 17622                           	opt stack 18
 17623                           
 17624                           ;RTC.c: 64: getRTC();
 17625                           
 17626                           ;incstack = 0
 17627  00277E  ECF6  F020         	call	i2_getRTC	;wreg free
 17628                           
 17629                           ;RTC.c: 65: char month[] = "MMM";
 17630  002782  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 17631  002786  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 17632  00278A  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 17633  00278E  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 17634                           
 17635                           ;RTC.c: 66: int INT_time[7];
 17636                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17637  002792  0E00               	movlw	0
 17638  002794  6E42               	movwf	i2printRTC@i+1,c
 17639  002796  0E00               	movlw	0
 17640  002798  6E41               	movwf	i2printRTC@i,c
 17641  00279A  BE42               	btfsc	i2printRTC@i+1,7,c
 17642  00279C  D006               	goto	i2l6421
 17643  00279E  5042               	movf	i2printRTC@i+1,w,c
 17644  0027A0  E135               	bnz	i2l597
 17645  0027A2  0E07               	movlw	7
 17646  0027A4  5C41               	subwf	i2printRTC@i,w,c
 17647  0027A6  B0D8               	btfsc	status,0,c
 17648  0027A8  D031               	goto	i2l597
 17649  0027AA                     i2l6421:
 17650                           
 17651                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17652  0027AA  0E24               	movlw	low _time
 17653  0027AC  2441               	addwf	i2printRTC@i,w,c
 17654  0027AE  6ED9               	movwf	fsr2l,c
 17655  0027B0  0E01               	movlw	high _time
 17656  0027B2  2042               	addwfc	i2printRTC@i+1,w,c
 17657  0027B4  6EDA               	movwf	fsr2h,c
 17658  0027B6  50DF               	movf	indf2,w,c
 17659  0027B8  6E2A               	movwf	??i2_printRTC& (0+255),c
 17660  0027BA  3A2A               	swapf	??i2_printRTC,f,c
 17661  0027BC  0E0F               	movlw	15
 17662  0027BE  162A               	andwf	??i2_printRTC,f,c
 17663  0027C0  0E0F               	movlw	15
 17664  0027C2  162A               	andwf	??i2_printRTC,f,c
 17665  0027C4  502A               	movf	??i2_printRTC,w,c
 17666  0027C6  0D0A               	mullw	10
 17667  0027C8  0E24               	movlw	low _time
 17668  0027CA  2441               	addwf	i2printRTC@i,w,c
 17669  0027CC  6ED9               	movwf	fsr2l,c
 17670  0027CE  0E01               	movlw	high _time
 17671  0027D0  2042               	addwfc	i2printRTC@i+1,w,c
 17672  0027D2  6EDA               	movwf	fsr2h,c
 17673  0027D4  50DF               	movf	indf2,w,c
 17674  0027D6  0B0F               	andlw	15
 17675  0027D8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17676  0027DA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17677  0027DC  50F3               	movf	prodl,w,c
 17678  0027DE  262B               	addwf	??i2_printRTC+1,f,c
 17679  0027E0  50F4               	movf	prodh,w,c
 17680  0027E2  222C               	addwfc	??i2_printRTC+2,f,c
 17681  0027E4  90D8               	bcf	status,0,c
 17682  0027E6  3441               	rlcf	i2printRTC@i,w,c
 17683  0027E8  6ED9               	movwf	fsr2l,c
 17684  0027EA  3442               	rlcf	i2printRTC@i+1,w,c
 17685  0027EC  6EDA               	movwf	fsr2h,c
 17686  0027EE  0E2D               	movlw	low i2printRTC@INT_time
 17687  0027F0  26D9               	addwf	fsr2l,f,c
 17688  0027F2  0E00               	movlw	high i2printRTC@INT_time
 17689  0027F4  22DA               	addwfc	fsr2h,f,c
 17690  0027F6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17691  0027FA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17692  0027FE  4A41               	infsnz	i2printRTC@i,f,c
 17693  002800  2A42               	incf	i2printRTC@i+1,f,c
 17694  002802  BE42               	btfsc	i2printRTC@i+1,7,c
 17695  002804  D7D2               	goto	i2l6421
 17696  002806  5042               	movf	i2printRTC@i+1,w,c
 17697  002808  E101               	bnz	i2u506_40
 17698  00280A  D7CB               	goto	L11
 17699  00280C                     i2u506_40:
 17700  00280C                     i2l597:
 17701                           
 17702                           ;RTC.c: 69: }
 17703                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17704  00280C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17705  002810  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17706                           
 17707                           ;RTC.c: 71: switch(RTC_month){
 17708  002814  D084               	goto	i2l6453
 17709  002816                     i2l6427:
 17710                           
 17711                           ;RTC.c: 73: strcpy(month, "JAN");
 17712  002816  0E3D               	movlw	low i2printRTC@month
 17713  002818  6E01               	movwf	i2strcpy@to,c
 17714  00281A  0E00               	movlw	high i2printRTC@month
 17715  00281C  6E02               	movwf	i2strcpy@to+1,c
 17716  00281E  0EDB               	movlw	low STR_8
 17717  002820  6E03               	movwf	i2strcpy@from,c
 17718  002822  0EFF               	movlw	high STR_8
 17719  002824  6E04               	movwf	i2strcpy@from+1,c
 17720  002826  ECDF  F023         	call	i2_strcpy	;wreg free
 17721                           
 17722                           ;RTC.c: 74: break;
 17723  00282A  D0A6               	goto	i2l6455
 17724  00282C                     i2l6429:
 17725                           
 17726                           ;RTC.c: 76: strcpy(month, "FEB");
 17727  00282C  0E3D               	movlw	low i2printRTC@month
 17728  00282E  6E01               	movwf	i2strcpy@to,c
 17729  002830  0E00               	movlw	high i2printRTC@month
 17730  002832  6E02               	movwf	i2strcpy@to+1,c
 17731  002834  0ECB               	movlw	low STR_9
 17732  002836  6E03               	movwf	i2strcpy@from,c
 17733  002838  0EFF               	movlw	high STR_9
 17734  00283A  6E04               	movwf	i2strcpy@from+1,c
 17735  00283C  ECDF  F023         	call	i2_strcpy	;wreg free
 17736                           
 17737                           ;RTC.c: 77: break;
 17738  002840  D09B               	goto	i2l6455
 17739  002842                     i2l6431:
 17740                           
 17741                           ;RTC.c: 79: strcpy(month, "MAR");
 17742  002842  0E3D               	movlw	low i2printRTC@month
 17743  002844  6E01               	movwf	i2strcpy@to,c
 17744  002846  0E00               	movlw	high i2printRTC@month
 17745  002848  6E02               	movwf	i2strcpy@to+1,c
 17746  00284A  0EE7               	movlw	low STR_10
 17747  00284C  6E03               	movwf	i2strcpy@from,c
 17748  00284E  0EFF               	movlw	high STR_10
 17749  002850  6E04               	movwf	i2strcpy@from+1,c
 17750  002852  ECDF  F023         	call	i2_strcpy	;wreg free
 17751                           
 17752                           ;RTC.c: 80: break;
 17753  002856  D090               	goto	i2l6455
 17754  002858                     i2l6433:
 17755                           
 17756                           ;RTC.c: 82: strcpy(month, "APR");
 17757  002858  0E3D               	movlw	low i2printRTC@month
 17758  00285A  6E01               	movwf	i2strcpy@to,c
 17759  00285C  0E00               	movlw	high i2printRTC@month
 17760  00285E  6E02               	movwf	i2strcpy@to+1,c
 17761  002860  0EEB               	movlw	low STR_11
 17762  002862  6E03               	movwf	i2strcpy@from,c
 17763  002864  0EFF               	movlw	high STR_11
 17764  002866  6E04               	movwf	i2strcpy@from+1,c
 17765  002868  ECDF  F023         	call	i2_strcpy	;wreg free
 17766                           
 17767                           ;RTC.c: 83: break;
 17768  00286C  D085               	goto	i2l6455
 17769  00286E                     i2l6435:
 17770                           
 17771                           ;RTC.c: 85: strcpy(month, "MAY");
 17772  00286E  0E3D               	movlw	low i2printRTC@month
 17773  002870  6E01               	movwf	i2strcpy@to,c
 17774  002872  0E00               	movlw	high i2printRTC@month
 17775  002874  6E02               	movwf	i2strcpy@to+1,c
 17776  002876  0EFB               	movlw	low STR_12
 17777  002878  6E03               	movwf	i2strcpy@from,c
 17778  00287A  0EFF               	movlw	high STR_12
 17779  00287C  6E04               	movwf	i2strcpy@from+1,c
 17780  00287E  ECDF  F023         	call	i2_strcpy	;wreg free
 17781                           
 17782                           ;RTC.c: 86: break;
 17783  002882  D07A               	goto	i2l6455
 17784  002884                     i2l6437:
 17785                           
 17786                           ;RTC.c: 88: strcpy(month, "JUN");
 17787  002884  0E3D               	movlw	low i2printRTC@month
 17788  002886  6E01               	movwf	i2strcpy@to,c
 17789  002888  0E00               	movlw	high i2printRTC@month
 17790  00288A  6E02               	movwf	i2strcpy@to+1,c
 17791  00288C  0EDF               	movlw	low STR_13
 17792  00288E  6E03               	movwf	i2strcpy@from,c
 17793  002890  0EFF               	movlw	high STR_13
 17794  002892  6E04               	movwf	i2strcpy@from+1,c
 17795  002894  ECDF  F023         	call	i2_strcpy	;wreg free
 17796                           
 17797                           ;RTC.c: 89: break;
 17798  002898  D06F               	goto	i2l6455
 17799  00289A                     i2l6439:
 17800                           
 17801                           ;RTC.c: 91: strcpy(month, "JUL");
 17802  00289A  0E3D               	movlw	low i2printRTC@month
 17803  00289C  6E01               	movwf	i2strcpy@to,c
 17804  00289E  0E00               	movlw	high i2printRTC@month
 17805  0028A0  6E02               	movwf	i2strcpy@to+1,c
 17806  0028A2  0ED7               	movlw	low STR_14
 17807  0028A4  6E03               	movwf	i2strcpy@from,c
 17808  0028A6  0EFF               	movlw	high STR_14
 17809  0028A8  6E04               	movwf	i2strcpy@from+1,c
 17810  0028AA  ECDF  F023         	call	i2_strcpy	;wreg free
 17811                           
 17812                           ;RTC.c: 92: break;
 17813  0028AE  D064               	goto	i2l6455
 17814  0028B0                     i2l6441:
 17815                           
 17816                           ;RTC.c: 94: strcpy(month, "AUG");
 17817  0028B0  0E3D               	movlw	low i2printRTC@month
 17818  0028B2  6E01               	movwf	i2strcpy@to,c
 17819  0028B4  0E00               	movlw	high i2printRTC@month
 17820  0028B6  6E02               	movwf	i2strcpy@to+1,c
 17821  0028B8  0ED3               	movlw	low STR_15
 17822  0028BA  6E03               	movwf	i2strcpy@from,c
 17823  0028BC  0EFF               	movlw	high STR_15
 17824  0028BE  6E04               	movwf	i2strcpy@from+1,c
 17825  0028C0  ECDF  F023         	call	i2_strcpy	;wreg free
 17826                           
 17827                           ;RTC.c: 95: break;
 17828  0028C4  D059               	goto	i2l6455
 17829  0028C6                     i2l6443:
 17830                           
 17831                           ;RTC.c: 97: strcpy(month, "SEP");
 17832  0028C6  0E3D               	movlw	low i2printRTC@month
 17833  0028C8  6E01               	movwf	i2strcpy@to,c
 17834  0028CA  0E00               	movlw	high i2printRTC@month
 17835  0028CC  6E02               	movwf	i2strcpy@to+1,c
 17836  0028CE  0EE3               	movlw	low STR_16
 17837  0028D0  6E03               	movwf	i2strcpy@from,c
 17838  0028D2  0EFF               	movlw	high STR_16
 17839  0028D4  6E04               	movwf	i2strcpy@from+1,c
 17840  0028D6  ECDF  F023         	call	i2_strcpy	;wreg free
 17841                           
 17842                           ;RTC.c: 98: break;
 17843  0028DA  D04E               	goto	i2l6455
 17844  0028DC                     i2l6445:
 17845                           
 17846                           ;RTC.c: 100: strcpy(month, "OCT");
 17847  0028DC  0E3D               	movlw	low i2printRTC@month
 17848  0028DE  6E01               	movwf	i2strcpy@to,c
 17849  0028E0  0E00               	movlw	high i2printRTC@month
 17850  0028E2  6E02               	movwf	i2strcpy@to+1,c
 17851  0028E4  0EF3               	movlw	low STR_17
 17852  0028E6  6E03               	movwf	i2strcpy@from,c
 17853  0028E8  0EFF               	movlw	high STR_17
 17854  0028EA  6E04               	movwf	i2strcpy@from+1,c
 17855  0028EC  ECDF  F023         	call	i2_strcpy	;wreg free
 17856                           
 17857                           ;RTC.c: 101: break;
 17858  0028F0  D043               	goto	i2l6455
 17859  0028F2                     i2l6447:
 17860                           
 17861                           ;RTC.c: 103: strcpy(month, "NOV");
 17862  0028F2  0E3D               	movlw	low i2printRTC@month
 17863  0028F4  6E01               	movwf	i2strcpy@to,c
 17864  0028F6  0E00               	movlw	high i2printRTC@month
 17865  0028F8  6E02               	movwf	i2strcpy@to+1,c
 17866  0028FA  0EF7               	movlw	low STR_18
 17867  0028FC  6E03               	movwf	i2strcpy@from,c
 17868  0028FE  0EFF               	movlw	high STR_18
 17869  002900  6E04               	movwf	i2strcpy@from+1,c
 17870  002902  ECDF  F023         	call	i2_strcpy	;wreg free
 17871                           
 17872                           ;RTC.c: 104: break;
 17873  002906  D038               	goto	i2l6455
 17874  002908                     i2l6449:
 17875                           
 17876                           ;RTC.c: 106: strcpy(month, "DEC");
 17877  002908  0E3D               	movlw	low i2printRTC@month
 17878  00290A  6E01               	movwf	i2strcpy@to,c
 17879  00290C  0E00               	movlw	high i2printRTC@month
 17880  00290E  6E02               	movwf	i2strcpy@to+1,c
 17881  002910  0ECF               	movlw	low STR_19
 17882  002912  6E03               	movwf	i2strcpy@from,c
 17883  002914  0EFF               	movlw	high STR_19
 17884  002916  6E04               	movwf	i2strcpy@from+1,c
 17885  002918  ECDF  F023         	call	i2_strcpy	;wreg free
 17886                           
 17887                           ;RTC.c: 108: }
 17888                           
 17889                           ;RTC.c: 107: break;
 17890  00291C  D02D               	goto	i2l6455
 17891  00291E                     i2l6453:
 17892  00291E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17893  002922  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17894                           
 17895                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17896                           ; Switch size 1, requested type "space"
 17897                           ; Number of cases is 1, Range of values is 0 to 0
 17898                           ; switch strategies available:
 17899                           ; Name         Instructions Cycles
 17900                           ; simple_byte            4     3 (average)
 17901                           ;	Chosen strategy is simple_byte
 17902  002926  502B               	movf	??i2_printRTC+1,w,c
 17903  002928  0A00               	xorlw	0	; case 0
 17904  00292A  A4D8               	btfss	status,2,c
 17905  00292C  D025               	goto	i2l6455
 17906                           
 17907                           ; Switch size 1, requested type "space"
 17908                           ; Number of cases is 12, Range of values is 1 to 12
 17909                           ; switch strategies available:
 17910                           ; Name         Instructions Cycles
 17911                           ; simple_byte           37    19 (average)
 17912                           ;	Chosen strategy is simple_byte
 17913  00292E  502A               	movf	??i2_printRTC,w,c
 17914  002930  0A01               	xorlw	1	; case 1
 17915  002932  B4D8               	btfsc	status,2,c
 17916  002934  D770               	goto	i2l6427
 17917  002936  0A03               	xorlw	3	; case 2
 17918  002938  B4D8               	btfsc	status,2,c
 17919  00293A  D778               	goto	i2l6429
 17920  00293C  0A01               	xorlw	1	; case 3
 17921  00293E  B4D8               	btfsc	status,2,c
 17922  002940  D780               	goto	i2l6431
 17923  002942  0A07               	xorlw	7	; case 4
 17924  002944  B4D8               	btfsc	status,2,c
 17925  002946  D788               	goto	i2l6433
 17926  002948  0A01               	xorlw	1	; case 5
 17927  00294A  B4D8               	btfsc	status,2,c
 17928  00294C  D790               	goto	i2l6435
 17929  00294E  0A03               	xorlw	3	; case 6
 17930  002950  B4D8               	btfsc	status,2,c
 17931  002952  D798               	goto	i2l6437
 17932  002954  0A01               	xorlw	1	; case 7
 17933  002956  B4D8               	btfsc	status,2,c
 17934  002958  D7A0               	goto	i2l6439
 17935  00295A  0A0F               	xorlw	15	; case 8
 17936  00295C  B4D8               	btfsc	status,2,c
 17937  00295E  D7A8               	goto	i2l6441
 17938  002960  0A01               	xorlw	1	; case 9
 17939  002962  B4D8               	btfsc	status,2,c
 17940  002964  D7B0               	goto	i2l6443
 17941  002966  0A03               	xorlw	3	; case 10
 17942  002968  B4D8               	btfsc	status,2,c
 17943  00296A  D7B8               	goto	i2l6445
 17944  00296C  0A01               	xorlw	1	; case 11
 17945  00296E  B4D8               	btfsc	status,2,c
 17946  002970  D7C0               	goto	i2l6447
 17947  002972  0A07               	xorlw	7	; case 12
 17948  002974  B4D8               	btfsc	status,2,c
 17949  002976  D7C8               	goto	i2l6449
 17950  002978                     i2l6455:
 17951                           
 17952                           ;RTC.c: 109: lcdInst(0b10000000);;
 17953  002978  0E80               	movlw	128
 17954  00297A  EC32  F026         	call	i2_lcdInst
 17955                           
 17956                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17957  00297E  0E0A               	movlw	low STR_21
 17958  002980  6E0D               	movwf	i2printf@f,c
 17959  002982  0EFB               	movlw	high STR_21
 17960  002984  6E0E               	movwf	i2printf@f+1,c
 17961  002986  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17962  00298A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17963  00298E  0E3D               	movlw	low i2printRTC@month
 17964  002990  6E11               	movwf	?i2_printf+4,c
 17965  002992  0E00               	movlw	high i2printRTC@month
 17966  002994  6E12               	movwf	?i2_printf+5,c
 17967  002996  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17968  00299A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17969  00299E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17970  0029A2  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17971  0029A6  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17972  0029AA  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17973  0029AE  EC96  F00C         	call	i2_printf	;wreg free
 17974  0029B2  0012               	return		;funcret
 17975  0029B4                     __end_ofi2_printRTC:
 17976                           	opt stack 0
 17977                           pclatu	equ	0xFFB
 17978                           pclath	equ	0xFFA
 17979                           tblptru	equ	0xFF8
 17980                           tblptrh	equ	0xFF7
 17981                           tblptrl	equ	0xFF6
 17982                           tablat	equ	0xFF5
 17983                           prodh	equ	0xFF4
 17984                           prodl	equ	0xFF3
 17985                           intcon	equ	0xFF2
 17986                           intcon2	equ	0xFF1
 17987                           intcon3	equ	0xFF0
 17988                           indf0	equ	0xFEF
 17989                           postinc0	equ	0xFEE
 17990                           fsr0h	equ	0xFEA
 17991                           fsr0l	equ	0xFE9
 17992                           wreg	equ	0xFE8
 17993                           postdec1	equ	0xFE5
 17994                           fsr1h	equ	0xFE2
 17995                           fsr1l	equ	0xFE1
 17996                           indf2	equ	0xFDF
 17997                           postinc2	equ	0xFDE
 17998                           postdec2	equ	0xFDD
 17999                           fsr2h	equ	0xFDA
 18000                           fsr2l	equ	0xFD9
 18001                           status	equ	0xFD8
 18002                           
 18003 ;; *************** function i2_strcpy *****************
 18004 ;; Defined at:
 18005 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18006 ;; Parameters:    Size  Location     Type
 18007 ;;  to              2    0[COMRAM] PTR unsigned char 
 18008 ;;		 -> printRTC@month(4), UI@month(4), 
 18009 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18010 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18011 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18012 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18013 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18014 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18015 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18016 ;;		 -> STR_8(4), 
 18017 ;; Auto vars:     Size  Location     Type
 18018 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18019 ;;		 -> printRTC@month(4), UI@month(4), 
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  2    0[COMRAM] PTR unsigned char 
 18022 ;; Registers used:
 18023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;Total ram usage:        6 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; This function calls:
 18036 ;;		Nothing
 18037 ;; This function is called by:
 18038 ;;		i2_printRTC
 18039 ;; This function uses a non-reentrant model
 18040 ;;
 18041                           
 18042                           	psect	text63
 18043  0047BE                     __ptext63:
 18044                           	opt stack 0
 18045  0047BE                     i2_strcpy:
 18046                           	opt stack 20
 18047                           
 18048                           ;incstack = 0
 18049  0047BE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18050  0047C2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18051  0047C6  D004               	goto	i2l6079
 18052  0047C8                     i2l6077:
 18053  0047C8  4A05               	infsnz	i2strcpy@cp,f,c
 18054  0047CA  2A06               	incf	i2strcpy@cp+1,f,c
 18055  0047CC  4A03               	infsnz	i2strcpy@from,f,c
 18056  0047CE  2A04               	incf	i2strcpy@from+1,f,c
 18057  0047D0                     i2l6079:
 18058  0047D0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18059  0047D4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18060  0047D8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18061  0047D8  6AF8               	clrf	tblptru,c
 18062  0047DA                     	endif
 18063  0047DA                     	if	0	;tblptru may be non-zero
 18064  0047DA                     	endif
 18065  0047DA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18066  0047DE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18067  0047E2  0008               	tblrd		*
 18068  0047E4  CFF5 FFDF          	movff	tablat,indf2
 18069  0047E8  50DF               	movf	indf2,w,c
 18070  0047EA  B4D8               	btfsc	status,2,c
 18071  0047EC  0012               	return	
 18072  0047EE  D7EC               	goto	i2l6077
 18073  0047F0                     __end_ofi2_strcpy:
 18074                           	opt stack 0
 18075                           pclatu	equ	0xFFB
 18076                           pclath	equ	0xFFA
 18077                           tblptru	equ	0xFF8
 18078                           tblptrh	equ	0xFF7
 18079                           tblptrl	equ	0xFF6
 18080                           tablat	equ	0xFF5
 18081                           prodh	equ	0xFF4
 18082                           prodl	equ	0xFF3
 18083                           intcon	equ	0xFF2
 18084                           intcon2	equ	0xFF1
 18085                           intcon3	equ	0xFF0
 18086                           indf0	equ	0xFEF
 18087                           postinc0	equ	0xFEE
 18088                           fsr0h	equ	0xFEA
 18089                           fsr0l	equ	0xFE9
 18090                           wreg	equ	0xFE8
 18091                           postdec1	equ	0xFE5
 18092                           fsr1h	equ	0xFE2
 18093                           fsr1l	equ	0xFE1
 18094                           indf2	equ	0xFDF
 18095                           postinc2	equ	0xFDE
 18096                           postdec2	equ	0xFDD
 18097                           fsr2h	equ	0xFDA
 18098                           fsr2l	equ	0xFD9
 18099                           status	equ	0xFD8
 18100                           
 18101 ;; *************** function _inputHandler *****************
 18102 ;; Defined at:
 18103 ;;		line 372 in file "UI.c"
 18104 ;; Parameters:    Size  Location     Type
 18105 ;;		None
 18106 ;; Auto vars:     Size  Location     Type
 18107 ;;		None
 18108 ;; Return value:  Size  Location     Type
 18109 ;;                  2   41[COMRAM] int 
 18110 ;; Registers used:
 18111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18112 ;; Tracked objects:
 18113 ;;		On entry : 0/0
 18114 ;;		On exit  : 0/0
 18115 ;;		Unchanged: 0/0
 18116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18121 ;;Total ram usage:        4 bytes
 18122 ;; Hardware stack levels used:    1
 18123 ;; Hardware stack levels required when called:    4
 18124 ;; This function calls:
 18125 ;;		_change_state_to_logs_11
 18126 ;;		_change_state_to_logs_12
 18127 ;;		_change_state_to_logs_22
 18128 ;;		_change_state_to_logs_23
 18129 ;;		_change_state_to_logs_33
 18130 ;;		_change_state_to_logs_34
 18131 ;;		_change_state_to_menu_11
 18132 ;;		_change_state_to_menu_23
 18133 ;;		i2_change_state_to_menu_12
 18134 ;;		i2_change_state_to_menu_22
 18135 ;; This function is called by:
 18136 ;;		_updateMenu
 18137 ;; This function uses a non-reentrant model
 18138 ;;
 18139                           
 18140                           	psect	text64
 18141  002DD6                     __ptext64:
 18142                           	opt stack 0
 18143  002DD6                     _inputHandler:
 18144                           	opt stack 18
 18145                           
 18146                           ;UI.c: 377: if(firstboot){
 18147                           
 18148                           ;incstack = 0
 18149  002DD6  506F               	movf	_firstboot,w,c
 18150  002DD8  1070               	iorwf	_firstboot+1,w,c
 18151  002DDA  B4D8               	btfsc	status,2,c
 18152  002DDC  D00B               	goto	i2l6523
 18153                           
 18154                           ;UI.c: 378: change_state_to_menu_11();
 18155  002DDE  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 18156                           
 18157                           ;UI.c: 379: firstboot = 0;
 18158  002DE2  0E00               	movlw	0
 18159  002DE4  6E70               	movwf	_firstboot+1,c
 18160  002DE6  0E00               	movlw	0
 18161  002DE8  6E6F               	movwf	_firstboot,c
 18162                           
 18163                           ;UI.c: 380: return 0;
 18164  002DEA  0E00               	movlw	0
 18165  002DEC  6E2B               	movwf	?_inputHandler+1,c
 18166  002DEE  0E00               	movlw	0
 18167  002DF0  6E2A               	movwf	?_inputHandler,c
 18168  002DF2  0012               	return	
 18169  002DF4                     i2l6523:
 18170                           
 18171                           ;UI.c: 381: }
 18172                           ;UI.c: 382: if (logstate){
 18173  002DF4  0100               	movlb	0	; () banked
 18174  002DF6  51F6               	movf	_logstate& (0+255),w,b
 18175  002DF8  0100               	movlb	0	; () banked
 18176  002DFA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18177  002DFC  B4D8               	btfsc	status,2,c
 18178  002DFE  D0C7               	goto	i2l6641
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18182  002E00  0E43               	movlw	67
 18183  002E02  187D               	xorwf	_input,w,c	;volatile
 18184  002E04  A4D8               	btfss	status,2,c
 18185  002E06  D012               	goto	i2l6541
 18186                           
 18187                           ; BSR set to: 0
 18188  002E08  B281               	btfsc	3969,1,c	;volatile
 18189  002E0A  D009               	goto	i2l6533
 18190  002E0C  D00F               	goto	i2l6541
 18191  002E0E                     i2l6531:
 18192                           
 18193                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 18194  002E0E  0E68               	movlw	104
 18195  002E10  6E2C               	movwf	??_inputHandler& (0+255),c
 18196  002E12  0EE4               	movlw	228
 18197  002E14                     i2u916_47:
 18198  002E14  2EE8               	decfsz	wreg,f,c
 18199  002E16  D7FE               	bra	i2u916_47
 18200  002E18  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 18201  002E1A  D7FC               	bra	i2u916_47
 18202  002E1C  D000               	nop2	
 18203  002E1E                     i2l6533:
 18204  002E1E  B281               	btfsc	3969,1,c	;volatile
 18205  002E20  D7F6               	goto	i2l6531
 18206  002E22                     i2l6535:
 18207                           
 18208                           ;UI.c: 387: }
 18209                           ;UI.c: 388: return 0;
 18210  002E22  0E00               	movlw	0
 18211  002E24  6E2B               	movwf	?_inputHandler+1,c
 18212  002E26  0E00               	movlw	0
 18213  002E28  6E2A               	movwf	?_inputHandler,c
 18214  002E2A  0012               	return	
 18215  002E2C                     i2l6541:
 18216                           
 18217                           ;UI.c: 390: else if (input == 'D'){
 18218  002E2C  0E44               	movlw	68
 18219  002E2E  187D               	xorwf	_input,w,c	;volatile
 18220  002E30  A4D8               	btfss	status,2,c
 18221  002E32  D7F7               	goto	i2l6535
 18222                           
 18223                           ;UI.c: 392: logstate = 0;
 18224  002E34  0E00               	movlw	0
 18225  002E36  0100               	movlb	0	; () banked
 18226  002E38  6FF7               	movwf	(_logstate+1)& (0+255),b
 18227  002E3A  0E00               	movlw	0
 18228  002E3C  6FF6               	movwf	_logstate& (0+255),b
 18229                           
 18230                           ;UI.c: 393: switch(cur_state){
 18231  002E3E  D012               	goto	i2l6559
 18232  002E40                     i2l6545:
 18233                           
 18234                           ;UI.c: 395: change_state_to_logs_11();
 18235  002E40  ECB8  F024         	call	_change_state_to_logs_11	;wreg free
 18236                           
 18237                           ;UI.c: 396: break;
 18238  002E44  D7EE               	goto	i2l6535
 18239  002E46                     i2l6547:
 18240                           
 18241                           ;UI.c: 398: change_state_to_logs_12();
 18242  002E46  ECA0  F024         	call	_change_state_to_logs_12	;wreg free
 18243                           
 18244                           ;UI.c: 399: break;
 18245  002E4A  D7EB               	goto	i2l6535
 18246  002E4C                     i2l6549:
 18247                           
 18248                           ;UI.c: 401: change_state_to_logs_22();
 18249  002E4C  EC88  F024         	call	_change_state_to_logs_22	;wreg free
 18250                           
 18251                           ;UI.c: 402: break;
 18252  002E50  D7E8               	goto	i2l6535
 18253  002E52                     i2l6551:
 18254                           
 18255                           ;UI.c: 404: change_state_to_logs_23();
 18256  002E52  ECFE  F024         	call	_change_state_to_logs_23	;wreg free
 18257                           
 18258                           ;UI.c: 405: break;
 18259  002E56  D7E5               	goto	i2l6535
 18260  002E58                     i2l6553:
 18261                           
 18262                           ;UI.c: 407: change_state_to_logs_33();
 18263  002E58  EC70  F024         	call	_change_state_to_logs_33	;wreg free
 18264                           
 18265                           ;UI.c: 408: break;
 18266  002E5C  D7E2               	goto	i2l6535
 18267  002E5E                     i2l6555:
 18268                           
 18269                           ;UI.c: 410: change_state_to_logs_34();
 18270  002E5E  EC58  F024         	call	_change_state_to_logs_34	;wreg free
 18271                           
 18272                           ;UI.c: 412: }
 18273                           
 18274                           ;UI.c: 411: break;
 18275  002E62  D7DF               	goto	i2l6535
 18276  002E64                     i2l6559:
 18277  002E64  C0E6  F02C         	movff	_cur_state,??_inputHandler
 18278  002E68  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 18279                           
 18280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18281                           ; Switch size 1, requested type "space"
 18282                           ; Number of cases is 2, Range of values is 3 to 4
 18283                           ; switch strategies available:
 18284                           ; Name         Instructions Cycles
 18285                           ; simple_byte            7     4 (average)
 18286                           ;	Chosen strategy is simple_byte
 18287  002E6C  502D               	movf	??_inputHandler+1,w,c
 18288  002E6E  0A03               	xorlw	3	; case 3
 18289  002E70  B4D8               	btfsc	status,2,c
 18290  002E72  D004               	goto	i2l8957
 18291  002E74  0A07               	xorlw	7	; case 4
 18292  002E76  B4D8               	btfsc	status,2,c
 18293  002E78  D00F               	goto	i2l8959
 18294  002E7A  D7D3               	goto	i2l6535
 18295  002E7C                     i2l8957:
 18296                           
 18297                           ; Switch size 1, requested type "space"
 18298                           ; Number of cases is 4, Range of values is 243 to 255
 18299                           ; switch strategies available:
 18300                           ; Name         Instructions Cycles
 18301                           ; simple_byte           13     7 (average)
 18302                           ;	Chosen strategy is simple_byte
 18303  002E7C  502C               	movf	??_inputHandler,w,c
 18304  002E7E  0AF3               	xorlw	243	; case 243
 18305  002E80  B4D8               	btfsc	status,2,c
 18306  002E82  D7DE               	goto	i2l6545
 18307  002E84  0A07               	xorlw	7	; case 244
 18308  002E86  B4D8               	btfsc	status,2,c
 18309  002E88  D7DE               	goto	i2l6547
 18310  002E8A  0A0A               	xorlw	10	; case 254
 18311  002E8C  B4D8               	btfsc	status,2,c
 18312  002E8E  D7DE               	goto	i2l6549
 18313  002E90  0A01               	xorlw	1	; case 255
 18314  002E92  B4D8               	btfsc	status,2,c
 18315  002E94  D7DE               	goto	i2l6551
 18316  002E96  D7C5               	goto	i2l6535
 18317  002E98                     i2l8959:
 18318                           
 18319                           ; Switch size 1, requested type "space"
 18320                           ; Number of cases is 2, Range of values is 9 to 10
 18321                           ; switch strategies available:
 18322                           ; Name         Instructions Cycles
 18323                           ; simple_byte            7     4 (average)
 18324                           ;	Chosen strategy is simple_byte
 18325  002E98  502C               	movf	??_inputHandler,w,c
 18326  002E9A  0A09               	xorlw	9	; case 9
 18327  002E9C  B4D8               	btfsc	status,2,c
 18328  002E9E  D7DC               	goto	i2l6553
 18329  002EA0  0A03               	xorlw	3	; case 10
 18330  002EA2  B4D8               	btfsc	status,2,c
 18331  002EA4  D7DC               	goto	i2l6555
 18332  002EA6  D7BD               	goto	i2l6535
 18333  002EA8                     i2l6571:
 18334                           
 18335                           ;UI.c: 422: if(cur_state == 11){
 18336  002EA8  0E0B               	movlw	11
 18337  002EAA  0100               	movlb	0	; () banked
 18338  002EAC  19E6               	xorwf	_cur_state& (0+255),w,b
 18339  002EAE  0100               	movlb	0	; () banked
 18340  002EB0  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18341  002EB2  A4D8               	btfss	status,2,c
 18342  002EB4  D005               	goto	i2l6579
 18343                           
 18344                           ; BSR set to: 0
 18345                           ;UI.c: 423: return 0;
 18346  002EB6  0E00               	movlw	0
 18347  002EB8  6E2B               	movwf	?_inputHandler+1,c
 18348  002EBA  0E00               	movlw	0
 18349  002EBC  6E2A               	movwf	?_inputHandler,c
 18350                           
 18351                           ; BSR set to: 0
 18352  002EBE  0012               	return	
 18353  002EC0                     i2l6579:
 18354                           
 18355                           ; BSR set to: 0
 18356                           ;UI.c: 425: else{
 18357                           ;UI.c: 426: change_state_to_menu_11();
 18358  002EC0  EC40  F024         	call	_change_state_to_menu_11	;wreg free
 18359                           
 18360                           ;UI.c: 427: }
 18361                           ;UI.c: 428: return 0;
 18362  002EC4  0E00               	movlw	0
 18363  002EC6  6E2B               	movwf	?_inputHandler+1,c
 18364  002EC8  0E00               	movlw	0
 18365  002ECA  6E2A               	movwf	?_inputHandler,c
 18366  002ECC  0012               	return	
 18367  002ECE                     i2l6585:
 18368                           
 18369                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18370  002ECE  0E16               	movlw	22
 18371  002ED0  0100               	movlb	0	; () banked
 18372  002ED2  19E6               	xorwf	_cur_state& (0+255),w,b
 18373  002ED4  0100               	movlb	0	; () banked
 18374  002ED6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18375  002ED8  B4D8               	btfsc	status,2,c
 18376  002EDA  D007               	goto	i2l6589
 18377                           
 18378                           ; BSR set to: 0
 18379  002EDC  0E0C               	movlw	12
 18380  002EDE  0100               	movlb	0	; () banked
 18381  002EE0  19E6               	xorwf	_cur_state& (0+255),w,b
 18382  002EE2  0100               	movlb	0	; () banked
 18383  002EE4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18384  002EE6  A4D8               	btfss	status,2,c
 18385  002EE8  D005               	goto	i2l6595
 18386  002EEA                     i2l6589:
 18387                           
 18388                           ; BSR set to: 0
 18389                           ;UI.c: 431: return 0;
 18390  002EEA  0E00               	movlw	0
 18391  002EEC  6E2B               	movwf	?_inputHandler+1,c
 18392  002EEE  0E00               	movlw	0
 18393  002EF0  6E2A               	movwf	?_inputHandler,c
 18394                           
 18395                           ; BSR set to: 0
 18396  002EF2  0012               	return	
 18397  002EF4                     i2l6595:
 18398                           
 18399                           ; BSR set to: 0
 18400                           ;UI.c: 433: else if(cur_state == 23){
 18401  002EF4  0E17               	movlw	23
 18402  002EF6  0100               	movlb	0	; () banked
 18403  002EF8  19E6               	xorwf	_cur_state& (0+255),w,b
 18404  002EFA  0100               	movlb	0	; () banked
 18405  002EFC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18406  002EFE  A4D8               	btfss	status,2,c
 18407  002F00  D003               	goto	i2l6599
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;UI.c: 434: change_state_to_menu_22();
 18411  002F02  ECF8  F023         	call	i2_change_state_to_menu_22	;wreg free
 18412                           
 18413                           ;UI.c: 435: }
 18414  002F06  D002               	goto	i2l6601
 18415  002F08                     i2l6599:
 18416                           
 18417                           ;UI.c: 436: else{
 18418                           ;UI.c: 437: change_state_to_menu_12();
 18419  002F08  EC10  F024         	call	i2_change_state_to_menu_12	;wreg free
 18420  002F0C                     i2l6601:
 18421                           
 18422                           ;UI.c: 438: }
 18423                           ;UI.c: 439: return 0;
 18424  002F0C  0E00               	movlw	0
 18425  002F0E  6E2B               	movwf	?_inputHandler+1,c
 18426  002F10  0E00               	movlw	0
 18427  002F12  6E2A               	movwf	?_inputHandler,c
 18428  002F14  0012               	return	
 18429  002F16                     i2l6605:
 18430                           
 18431                           ;UI.c: 441: if(cur_state == 23){
 18432  002F16  0E17               	movlw	23
 18433  002F18  0100               	movlb	0	; () banked
 18434  002F1A  19E6               	xorwf	_cur_state& (0+255),w,b
 18435  002F1C  0100               	movlb	0	; () banked
 18436  002F1E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18437  002F20  A4D8               	btfss	status,2,c
 18438  002F22  D005               	goto	i2l6613
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;UI.c: 442: return 0;
 18442  002F24  0E00               	movlw	0
 18443  002F26  6E2B               	movwf	?_inputHandler+1,c
 18444  002F28  0E00               	movlw	0
 18445  002F2A  6E2A               	movwf	?_inputHandler,c
 18446                           
 18447                           ; BSR set to: 0
 18448  002F2C  0012               	return	
 18449  002F2E                     i2l6613:
 18450                           
 18451                           ; BSR set to: 0
 18452                           ;UI.c: 444: else{
 18453                           ;UI.c: 445: change_state_to_menu_23();
 18454  002F2E  EC28  F024         	call	_change_state_to_menu_23	;wreg free
 18455                           
 18456                           ;UI.c: 446: }
 18457                           ;UI.c: 447: return 0;
 18458  002F32  0E00               	movlw	0
 18459  002F34  6E2B               	movwf	?_inputHandler+1,c
 18460  002F36  0E00               	movlw	0
 18461  002F38  6E2A               	movwf	?_inputHandler,c
 18462  002F3A  0012               	return	
 18463  002F3C                     i2l6619:
 18464                           
 18465                           ;UI.c: 450: up = 1;
 18466  002F3C  0E00               	movlw	0
 18467  002F3E  6E78               	movwf	_up+1,c
 18468  002F40  0E01               	movlw	1
 18469  002F42  6E77               	movwf	_up,c
 18470                           
 18471                           ;UI.c: 451: return 1;
 18472  002F44  0E00               	movlw	0
 18473  002F46  6E2B               	movwf	?_inputHandler+1,c
 18474  002F48  0E01               	movlw	1
 18475  002F4A  6E2A               	movwf	?_inputHandler,c
 18476  002F4C  0012               	return	
 18477  002F4E                     i2l6623:
 18478                           
 18479                           ;UI.c: 453: down = 1;
 18480  002F4E  0E00               	movlw	0
 18481  002F50  6E62               	movwf	_down+1,c
 18482  002F52  0E01               	movlw	1
 18483  002F54  6E61               	movwf	_down,c
 18484                           
 18485                           ;UI.c: 454: return 1;
 18486  002F56  0E00               	movlw	0
 18487  002F58  6E2B               	movwf	?_inputHandler+1,c
 18488  002F5A  0E01               	movlw	1
 18489  002F5C  6E2A               	movwf	?_inputHandler,c
 18490  002F5E  0012               	return	
 18491  002F60                     i2l6627:
 18492                           
 18493                           ;UI.c: 456: enter = 1;
 18494  002F60  0E00               	movlw	0
 18495  002F62  6E64               	movwf	_enter+1,c
 18496  002F64  0E01               	movlw	1
 18497  002F66  6E63               	movwf	_enter,c
 18498                           
 18499                           ;UI.c: 457: return 1;
 18500  002F68  0E00               	movlw	0
 18501  002F6A  6E2B               	movwf	?_inputHandler+1,c
 18502  002F6C  0E01               	movlw	1
 18503  002F6E  6E2A               	movwf	?_inputHandler,c
 18504  002F70  0012               	return	
 18505  002F72                     i2l6631:
 18506                           
 18507                           ;UI.c: 459: back = 1;
 18508  002F72  0E00               	movlw	0
 18509  002F74  6E5A               	movwf	_back+1,c
 18510  002F76  0E01               	movlw	1
 18511  002F78  6E59               	movwf	_back,c
 18512                           
 18513                           ;UI.c: 460: return 1;
 18514  002F7A  0E00               	movlw	0
 18515  002F7C  6E2B               	movwf	?_inputHandler+1,c
 18516  002F7E  0E01               	movlw	1
 18517  002F80  6E2A               	movwf	?_inputHandler,c
 18518  002F82  0012               	return	
 18519  002F84                     i2l6635:
 18520                           
 18521                           ;UI.c: 463: return 1;
 18522  002F84  0E00               	movlw	0
 18523  002F86  6E2B               	movwf	?_inputHandler+1,c
 18524  002F88  0E01               	movlw	1
 18525  002F8A  6E2A               	movwf	?_inputHandler,c
 18526                           
 18527                           ;UI.c: 464: }
 18528  002F8C  0012               	return	
 18529  002F8E                     i2l6641:
 18530  002F8E  507D               	movf	_input,w,c	;volatile
 18531                           
 18532                           ; Switch size 1, requested type "space"
 18533                           ; Number of cases is 7, Range of values is 49 to 68
 18534                           ; switch strategies available:
 18535                           ; Name         Instructions Cycles
 18536                           ; simple_byte           22    12 (average)
 18537                           ;	Chosen strategy is simple_byte
 18538  002F90  0A31               	xorlw	49	; case 49
 18539  002F92  B4D8               	btfsc	status,2,c
 18540  002F94  D789               	goto	i2l6571
 18541  002F96  0A03               	xorlw	3	; case 50
 18542  002F98  B4D8               	btfsc	status,2,c
 18543  002F9A  D799               	goto	i2l6585
 18544  002F9C  0A01               	xorlw	1	; case 51
 18545  002F9E  B4D8               	btfsc	status,2,c
 18546  002FA0  D7BA               	goto	i2l6605
 18547  002FA2  0A72               	xorlw	114	; case 65
 18548  002FA4  B4D8               	btfsc	status,2,c
 18549  002FA6  D7CA               	goto	i2l6619
 18550  002FA8  0A03               	xorlw	3	; case 66
 18551  002FAA  B4D8               	btfsc	status,2,c
 18552  002FAC  D7D0               	goto	i2l6623
 18553  002FAE  0A01               	xorlw	1	; case 67
 18554  002FB0  B4D8               	btfsc	status,2,c
 18555  002FB2  D7D6               	goto	i2l6627
 18556  002FB4  0A07               	xorlw	7	; case 68
 18557  002FB6  B4D8               	btfsc	status,2,c
 18558  002FB8  D7DC               	goto	i2l6631
 18559  002FBA  D7E4               	goto	i2l6635
 18560  002FBC                     __end_of_inputHandler:
 18561                           	opt stack 0
 18562                           pclatu	equ	0xFFB
 18563                           pclath	equ	0xFFA
 18564                           tblptru	equ	0xFF8
 18565                           tblptrh	equ	0xFF7
 18566                           tblptrl	equ	0xFF6
 18567                           tablat	equ	0xFF5
 18568                           prodh	equ	0xFF4
 18569                           prodl	equ	0xFF3
 18570                           intcon	equ	0xFF2
 18571                           intcon2	equ	0xFF1
 18572                           intcon3	equ	0xFF0
 18573                           indf0	equ	0xFEF
 18574                           postinc0	equ	0xFEE
 18575                           fsr0h	equ	0xFEA
 18576                           fsr0l	equ	0xFE9
 18577                           wreg	equ	0xFE8
 18578                           postdec1	equ	0xFE5
 18579                           fsr1h	equ	0xFE2
 18580                           fsr1l	equ	0xFE1
 18581                           indf2	equ	0xFDF
 18582                           postinc2	equ	0xFDE
 18583                           postdec2	equ	0xFDD
 18584                           fsr2h	equ	0xFDA
 18585                           fsr2l	equ	0xFD9
 18586                           status	equ	0xFD8
 18587                           
 18588 ;; *************** function i2_change_state_to_menu_22 *****************
 18589 ;; Defined at:
 18590 ;;		line 498 in file "UI.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;		None
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;		None
 18595 ;; Return value:  Size  Location     Type
 18596 ;;                  1    wreg      void 
 18597 ;; Registers used:
 18598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18599 ;; Tracked objects:
 18600 ;;		On entry : 0/0
 18601 ;;		On exit  : 0/0
 18602 ;;		Unchanged: 0/0
 18603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18608 ;;Total ram usage:        0 bytes
 18609 ;; Hardware stack levels used:    1
 18610 ;; Hardware stack levels required when called:    3
 18611 ;; This function calls:
 18612 ;;		i2_lcdInst
 18613 ;;		i2_printf
 18614 ;; This function is called by:
 18615 ;;		_updateMenu
 18616 ;;		_inputHandler
 18617 ;; This function uses a non-reentrant model
 18618 ;;
 18619                           
 18620                           	psect	text65
 18621  0047F0                     __ptext65:
 18622                           	opt stack 0
 18623  0047F0                     i2_change_state_to_menu_22:
 18624                           	opt stack 19
 18625                           
 18626                           ;UI.c: 499: cur_state = 22;
 18627                           
 18628                           ;incstack = 0
 18629  0047F0  0E00               	movlw	0
 18630  0047F2  0100               	movlb	0	; () banked
 18631  0047F4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18632  0047F6  0E16               	movlw	22
 18633  0047F8  6FE6               	movwf	_cur_state& (0+255),b
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;UI.c: 501: lcdInst(0b10000000);;
 18637  0047FA  0E80               	movlw	128
 18638  0047FC  EC32  F026         	call	i2_lcdInst
 18639                           
 18640                           ;UI.c: 502: printf("2. SORT        <");
 18641  004800  0EC4               	movlw	low STR_34
 18642  004802  6E0D               	movwf	i2printf@f,c
 18643  004804  0EFD               	movlw	high STR_34
 18644  004806  6E0E               	movwf	i2printf@f+1,c
 18645  004808  EC96  F00C         	call	i2_printf	;wreg free
 18646                           
 18647                           ;UI.c: 503: lcdInst(0b11000000);;
 18648  00480C  0EC0               	movlw	192
 18649  00480E  EC32  F026         	call	i2_lcdInst
 18650                           
 18651                           ;UI.c: 504: printf("3. LOGS         ");
 18652  004812  0E09               	movlw	low STR_36
 18653  004814  6E0D               	movwf	i2printf@f,c
 18654  004816  0EFD               	movlw	high STR_36
 18655  004818  6E0E               	movwf	i2printf@f+1,c
 18656  00481A  EC96  F00C         	call	i2_printf	;wreg free
 18657  00481E  0012               	return		;funcret
 18658  004820                     __end_ofi2_change_state_to_menu_22:
 18659                           	opt stack 0
 18660                           pclatu	equ	0xFFB
 18661                           pclath	equ	0xFFA
 18662                           tblptru	equ	0xFF8
 18663                           tblptrh	equ	0xFF7
 18664                           tblptrl	equ	0xFF6
 18665                           tablat	equ	0xFF5
 18666                           prodh	equ	0xFF4
 18667                           prodl	equ	0xFF3
 18668                           intcon	equ	0xFF2
 18669                           intcon2	equ	0xFF1
 18670                           intcon3	equ	0xFF0
 18671                           indf0	equ	0xFEF
 18672                           postinc0	equ	0xFEE
 18673                           fsr0h	equ	0xFEA
 18674                           fsr0l	equ	0xFE9
 18675                           wreg	equ	0xFE8
 18676                           postdec1	equ	0xFE5
 18677                           fsr1h	equ	0xFE2
 18678                           fsr1l	equ	0xFE1
 18679                           indf2	equ	0xFDF
 18680                           postinc2	equ	0xFDE
 18681                           postdec2	equ	0xFDD
 18682                           fsr2h	equ	0xFDA
 18683                           fsr2l	equ	0xFD9
 18684                           status	equ	0xFD8
 18685                           
 18686 ;; *************** function i2_change_state_to_menu_12 *****************
 18687 ;; Defined at:
 18688 ;;		line 490 in file "UI.c"
 18689 ;; Parameters:    Size  Location     Type
 18690 ;;		None
 18691 ;; Auto vars:     Size  Location     Type
 18692 ;;		None
 18693 ;; Return value:  Size  Location     Type
 18694 ;;                  1    wreg      void 
 18695 ;; Registers used:
 18696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18697 ;; Tracked objects:
 18698 ;;		On entry : 0/0
 18699 ;;		On exit  : 0/0
 18700 ;;		Unchanged: 0/0
 18701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18706 ;;Total ram usage:        0 bytes
 18707 ;; Hardware stack levels used:    1
 18708 ;; Hardware stack levels required when called:    3
 18709 ;; This function calls:
 18710 ;;		i2_lcdInst
 18711 ;;		i2_printf
 18712 ;; This function is called by:
 18713 ;;		_updateMenu
 18714 ;;		_inputHandler
 18715 ;; This function uses a non-reentrant model
 18716 ;;
 18717                           
 18718                           	psect	text66
 18719  004820                     __ptext66:
 18720                           	opt stack 0
 18721  004820                     i2_change_state_to_menu_12:
 18722                           	opt stack 19
 18723                           
 18724                           ;UI.c: 491: cur_state = 12;
 18725                           
 18726                           ;incstack = 0
 18727  004820  0E00               	movlw	0
 18728  004822  0100               	movlb	0	; () banked
 18729  004824  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18730  004826  0E0C               	movlw	12
 18731  004828  6FE6               	movwf	_cur_state& (0+255),b
 18732                           
 18733                           ; BSR set to: 0
 18734                           ;UI.c: 493: lcdInst(0b10000000);;
 18735  00482A  0E80               	movlw	128
 18736  00482C  EC32  F026         	call	i2_lcdInst
 18737                           
 18738                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18739  004830  0E2B               	movlw	low STR_33
 18740  004832  6E0D               	movwf	i2printf@f,c
 18741  004834  0EFD               	movlw	high STR_33
 18742  004836  6E0E               	movwf	i2printf@f+1,c
 18743  004838  EC96  F00C         	call	i2_printf	;wreg free
 18744                           
 18745                           ;UI.c: 495: lcdInst(0b11000000);;
 18746  00483C  0EC0               	movlw	192
 18747  00483E  EC32  F026         	call	i2_lcdInst
 18748                           
 18749                           ;UI.c: 496: printf("2. SORT        <");
 18750  004842  0EC4               	movlw	low STR_34
 18751  004844  6E0D               	movwf	i2printf@f,c
 18752  004846  0EFD               	movlw	high STR_34
 18753  004848  6E0E               	movwf	i2printf@f+1,c
 18754  00484A  EC96  F00C         	call	i2_printf	;wreg free
 18755  00484E  0012               	return		;funcret
 18756  004850                     __end_ofi2_change_state_to_menu_12:
 18757                           	opt stack 0
 18758                           pclatu	equ	0xFFB
 18759                           pclath	equ	0xFFA
 18760                           tblptru	equ	0xFF8
 18761                           tblptrh	equ	0xFF7
 18762                           tblptrl	equ	0xFF6
 18763                           tablat	equ	0xFF5
 18764                           prodh	equ	0xFF4
 18765                           prodl	equ	0xFF3
 18766                           intcon	equ	0xFF2
 18767                           intcon2	equ	0xFF1
 18768                           intcon3	equ	0xFF0
 18769                           indf0	equ	0xFEF
 18770                           postinc0	equ	0xFEE
 18771                           fsr0h	equ	0xFEA
 18772                           fsr0l	equ	0xFE9
 18773                           wreg	equ	0xFE8
 18774                           postdec1	equ	0xFE5
 18775                           fsr1h	equ	0xFE2
 18776                           fsr1l	equ	0xFE1
 18777                           indf2	equ	0xFDF
 18778                           postinc2	equ	0xFDE
 18779                           postdec2	equ	0xFDD
 18780                           fsr2h	equ	0xFDA
 18781                           fsr2l	equ	0xFD9
 18782                           status	equ	0xFD8
 18783                           
 18784 ;; *************** function _change_state_to_menu_23 *****************
 18785 ;; Defined at:
 18786 ;;		line 506 in file "UI.c"
 18787 ;; Parameters:    Size  Location     Type
 18788 ;;		None
 18789 ;; Auto vars:     Size  Location     Type
 18790 ;;		None
 18791 ;; Return value:  Size  Location     Type
 18792 ;;                  1    wreg      void 
 18793 ;; Registers used:
 18794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18795 ;; Tracked objects:
 18796 ;;		On entry : 0/0
 18797 ;;		On exit  : 0/0
 18798 ;;		Unchanged: 0/0
 18799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18804 ;;Total ram usage:        0 bytes
 18805 ;; Hardware stack levels used:    1
 18806 ;; Hardware stack levels required when called:    3
 18807 ;; This function calls:
 18808 ;;		i2_lcdInst
 18809 ;;		i2_printf
 18810 ;; This function is called by:
 18811 ;;		_updateMenu
 18812 ;;		_inputHandler
 18813 ;; This function uses a non-reentrant model
 18814 ;;
 18815                           
 18816                           	psect	text67
 18817  004850                     __ptext67:
 18818                           	opt stack 0
 18819  004850                     _change_state_to_menu_23:
 18820                           	opt stack 18
 18821                           
 18822                           ;UI.c: 507: cur_state = 23;
 18823                           
 18824                           ;incstack = 0
 18825  004850  0E00               	movlw	0
 18826  004852  0100               	movlb	0	; () banked
 18827  004854  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18828  004856  0E17               	movlw	23
 18829  004858  6FE6               	movwf	_cur_state& (0+255),b
 18830                           
 18831                           ; BSR set to: 0
 18832                           ;UI.c: 509: lcdInst(0b10000000);;
 18833  00485A  0E80               	movlw	128
 18834  00485C  EC32  F026         	call	i2_lcdInst
 18835                           
 18836                           ;UI.c: 510: printf("2. SORT         ");
 18837  004860  0E1A               	movlw	low STR_32
 18838  004862  6E0D               	movwf	i2printf@f,c
 18839  004864  0EFD               	movlw	high STR_32
 18840  004866  6E0E               	movwf	i2printf@f+1,c
 18841  004868  EC96  F00C         	call	i2_printf	;wreg free
 18842                           
 18843                           ;UI.c: 511: lcdInst(0b11000000);;
 18844  00486C  0EC0               	movlw	192
 18845  00486E  EC32  F026         	call	i2_lcdInst
 18846                           
 18847                           ;UI.c: 512: printf("3. LOGS        <");
 18848  004872  0EB3               	movlw	low STR_38
 18849  004874  6E0D               	movwf	i2printf@f,c
 18850  004876  0EFD               	movlw	high STR_38
 18851  004878  6E0E               	movwf	i2printf@f+1,c
 18852  00487A  EC96  F00C         	call	i2_printf	;wreg free
 18853  00487E  0012               	return		;funcret
 18854  004880                     __end_of_change_state_to_menu_23:
 18855                           	opt stack 0
 18856                           pclatu	equ	0xFFB
 18857                           pclath	equ	0xFFA
 18858                           tblptru	equ	0xFF8
 18859                           tblptrh	equ	0xFF7
 18860                           tblptrl	equ	0xFF6
 18861                           tablat	equ	0xFF5
 18862                           prodh	equ	0xFF4
 18863                           prodl	equ	0xFF3
 18864                           intcon	equ	0xFF2
 18865                           intcon2	equ	0xFF1
 18866                           intcon3	equ	0xFF0
 18867                           indf0	equ	0xFEF
 18868                           postinc0	equ	0xFEE
 18869                           fsr0h	equ	0xFEA
 18870                           fsr0l	equ	0xFE9
 18871                           wreg	equ	0xFE8
 18872                           postdec1	equ	0xFE5
 18873                           fsr1h	equ	0xFE2
 18874                           fsr1l	equ	0xFE1
 18875                           indf2	equ	0xFDF
 18876                           postinc2	equ	0xFDE
 18877                           postdec2	equ	0xFDD
 18878                           fsr2h	equ	0xFDA
 18879                           fsr2l	equ	0xFD9
 18880                           status	equ	0xFD8
 18881                           
 18882 ;; *************** function _change_state_to_menu_11 *****************
 18883 ;; Defined at:
 18884 ;;		line 482 in file "UI.c"
 18885 ;; Parameters:    Size  Location     Type
 18886 ;;		None
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;		None
 18889 ;; Return value:  Size  Location     Type
 18890 ;;                  1    wreg      void 
 18891 ;; Registers used:
 18892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18893 ;; Tracked objects:
 18894 ;;		On entry : 0/0
 18895 ;;		On exit  : 0/0
 18896 ;;		Unchanged: 0/0
 18897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18902 ;;Total ram usage:        0 bytes
 18903 ;; Hardware stack levels used:    1
 18904 ;; Hardware stack levels required when called:    3
 18905 ;; This function calls:
 18906 ;;		i2_lcdInst
 18907 ;;		i2_printf
 18908 ;; This function is called by:
 18909 ;;		_updateMenu
 18910 ;;		_inputHandler
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           	psect	text68
 18915  004880                     __ptext68:
 18916                           	opt stack 0
 18917  004880                     _change_state_to_menu_11:
 18918                           	opt stack 18
 18919                           
 18920                           ;UI.c: 483: cur_state = 11;
 18921                           
 18922                           ;incstack = 0
 18923  004880  0E00               	movlw	0
 18924  004882  0100               	movlb	0	; () banked
 18925  004884  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18926  004886  0E0B               	movlw	11
 18927  004888  6FE6               	movwf	_cur_state& (0+255),b
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;UI.c: 485: lcdInst(0b10000000);;
 18931  00488A  0E80               	movlw	128
 18932  00488C  EC32  F026         	call	i2_lcdInst
 18933                           
 18934                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18935  004890  0ED5               	movlw	low STR_31
 18936  004892  6E0D               	movwf	i2printf@f,c
 18937  004894  0EFD               	movlw	high STR_31
 18938  004896  6E0E               	movwf	i2printf@f+1,c
 18939  004898  EC96  F00C         	call	i2_printf	;wreg free
 18940                           
 18941                           ;UI.c: 487: lcdInst(0b11000000);;
 18942  00489C  0EC0               	movlw	192
 18943  00489E  EC32  F026         	call	i2_lcdInst
 18944                           
 18945                           ;UI.c: 488: printf("2. SORT         ");
 18946  0048A2  0E1A               	movlw	low STR_32
 18947  0048A4  6E0D               	movwf	i2printf@f,c
 18948  0048A6  0EFD               	movlw	high STR_32
 18949  0048A8  6E0E               	movwf	i2printf@f+1,c
 18950  0048AA  EC96  F00C         	call	i2_printf	;wreg free
 18951  0048AE  0012               	return		;funcret
 18952  0048B0                     __end_of_change_state_to_menu_11:
 18953                           	opt stack 0
 18954                           pclatu	equ	0xFFB
 18955                           pclath	equ	0xFFA
 18956                           tblptru	equ	0xFF8
 18957                           tblptrh	equ	0xFF7
 18958                           tblptrl	equ	0xFF6
 18959                           tablat	equ	0xFF5
 18960                           prodh	equ	0xFF4
 18961                           prodl	equ	0xFF3
 18962                           intcon	equ	0xFF2
 18963                           intcon2	equ	0xFF1
 18964                           intcon3	equ	0xFF0
 18965                           indf0	equ	0xFEF
 18966                           postinc0	equ	0xFEE
 18967                           fsr0h	equ	0xFEA
 18968                           fsr0l	equ	0xFE9
 18969                           wreg	equ	0xFE8
 18970                           postdec1	equ	0xFE5
 18971                           fsr1h	equ	0xFE2
 18972                           fsr1l	equ	0xFE1
 18973                           indf2	equ	0xFDF
 18974                           postinc2	equ	0xFDE
 18975                           postdec2	equ	0xFDD
 18976                           fsr2h	equ	0xFDA
 18977                           fsr2l	equ	0xFD9
 18978                           status	equ	0xFD8
 18979                           
 18980 ;; *************** function _change_state_to_logs_34 *****************
 18981 ;; Defined at:
 18982 ;;		line 549 in file "UI.c"
 18983 ;; Parameters:    Size  Location     Type
 18984 ;;		None
 18985 ;; Auto vars:     Size  Location     Type
 18986 ;;		None
 18987 ;; Return value:  Size  Location     Type
 18988 ;;                  1    wreg      void 
 18989 ;; Registers used:
 18990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18991 ;; Tracked objects:
 18992 ;;		On entry : 0/0
 18993 ;;		On exit  : 0/0
 18994 ;;		Unchanged: 0/0
 18995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19000 ;;Total ram usage:        0 bytes
 19001 ;; Hardware stack levels used:    1
 19002 ;; Hardware stack levels required when called:    3
 19003 ;; This function calls:
 19004 ;;		i2_lcdInst
 19005 ;;		i2_printf
 19006 ;; This function is called by:
 19007 ;;		_updateMenu
 19008 ;;		_inputHandler
 19009 ;; This function uses a non-reentrant model
 19010 ;;
 19011                           
 19012                           	psect	text69
 19013  0048B0                     __ptext69:
 19014                           	opt stack 0
 19015  0048B0                     _change_state_to_logs_34:
 19016                           	opt stack 18
 19017                           
 19018                           ;UI.c: 550: cur_state = 1034;
 19019                           
 19020                           ;incstack = 0
 19021  0048B0  0E04               	movlw	4
 19022  0048B2  0100               	movlb	0	; () banked
 19023  0048B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19024  0048B6  0E0A               	movlw	10
 19025  0048B8  6FE6               	movwf	_cur_state& (0+255),b
 19026                           
 19027                           ; BSR set to: 0
 19028                           ;UI.c: 551: lcdInst(0b10000000);;
 19029  0048BA  0E80               	movlw	128
 19030  0048BC  EC32  F026         	call	i2_lcdInst
 19031                           
 19032                           ;UI.c: 552: printf("LOG 3           ");
 19033  0048C0  0EE7               	movlw	low STR_44
 19034  0048C2  6E0D               	movwf	i2printf@f,c
 19035  0048C4  0EFC               	movlw	high STR_44
 19036  0048C6  6E0E               	movwf	i2printf@f+1,c
 19037  0048C8  EC96  F00C         	call	i2_printf	;wreg free
 19038                           
 19039                           ;UI.c: 553: lcdInst(0b11000000);;
 19040  0048CC  0EC0               	movlw	192
 19041  0048CE  EC32  F026         	call	i2_lcdInst
 19042                           
 19043                           ;UI.c: 554: printf("LOG 4          <");
 19044  0048D2  0EA2               	movlw	low STR_50
 19045  0048D4  6E0D               	movwf	i2printf@f,c
 19046  0048D6  0EFD               	movlw	high STR_50
 19047  0048D8  6E0E               	movwf	i2printf@f+1,c
 19048  0048DA  EC96  F00C         	call	i2_printf	;wreg free
 19049  0048DE  0012               	return		;funcret
 19050  0048E0                     __end_of_change_state_to_logs_34:
 19051                           	opt stack 0
 19052                           pclatu	equ	0xFFB
 19053                           pclath	equ	0xFFA
 19054                           tblptru	equ	0xFF8
 19055                           tblptrh	equ	0xFF7
 19056                           tblptrl	equ	0xFF6
 19057                           tablat	equ	0xFF5
 19058                           prodh	equ	0xFF4
 19059                           prodl	equ	0xFF3
 19060                           intcon	equ	0xFF2
 19061                           intcon2	equ	0xFF1
 19062                           intcon3	equ	0xFF0
 19063                           indf0	equ	0xFEF
 19064                           postinc0	equ	0xFEE
 19065                           fsr0h	equ	0xFEA
 19066                           fsr0l	equ	0xFE9
 19067                           wreg	equ	0xFE8
 19068                           postdec1	equ	0xFE5
 19069                           fsr1h	equ	0xFE2
 19070                           fsr1l	equ	0xFE1
 19071                           indf2	equ	0xFDF
 19072                           postinc2	equ	0xFDE
 19073                           postdec2	equ	0xFDD
 19074                           fsr2h	equ	0xFDA
 19075                           fsr2l	equ	0xFD9
 19076                           status	equ	0xFD8
 19077                           
 19078 ;; *************** function _change_state_to_logs_33 *****************
 19079 ;; Defined at:
 19080 ;;		line 542 in file "UI.c"
 19081 ;; Parameters:    Size  Location     Type
 19082 ;;		None
 19083 ;; Auto vars:     Size  Location     Type
 19084 ;;		None
 19085 ;; Return value:  Size  Location     Type
 19086 ;;                  1    wreg      void 
 19087 ;; Registers used:
 19088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19089 ;; Tracked objects:
 19090 ;;		On entry : 0/0
 19091 ;;		On exit  : 0/0
 19092 ;;		Unchanged: 0/0
 19093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;Total ram usage:        0 bytes
 19099 ;; Hardware stack levels used:    1
 19100 ;; Hardware stack levels required when called:    3
 19101 ;; This function calls:
 19102 ;;		i2_lcdInst
 19103 ;;		i2_printf
 19104 ;; This function is called by:
 19105 ;;		_updateMenu
 19106 ;;		_inputHandler
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           	psect	text70
 19111  0048E0                     __ptext70:
 19112                           	opt stack 0
 19113  0048E0                     _change_state_to_logs_33:
 19114                           	opt stack 18
 19115                           
 19116                           ;UI.c: 543: cur_state = 1033;
 19117                           
 19118                           ;incstack = 0
 19119  0048E0  0E04               	movlw	4
 19120  0048E2  0100               	movlb	0	; () banked
 19121  0048E4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19122  0048E6  0E09               	movlw	9
 19123  0048E8  6FE6               	movwf	_cur_state& (0+255),b
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;UI.c: 544: lcdInst(0b10000000);;
 19127  0048EA  0E80               	movlw	128
 19128  0048EC  EC32  F026         	call	i2_lcdInst
 19129                           
 19130                           ;UI.c: 545: printf("LOG 3          <");
 19131  0048F0  0E91               	movlw	low STR_46
 19132  0048F2  6E0D               	movwf	i2printf@f,c
 19133  0048F4  0EFD               	movlw	high STR_46
 19134  0048F6  6E0E               	movwf	i2printf@f+1,c
 19135  0048F8  EC96  F00C         	call	i2_printf	;wreg free
 19136                           
 19137                           ;UI.c: 546: lcdInst(0b11000000);;
 19138  0048FC  0EC0               	movlw	192
 19139  0048FE  EC32  F026         	call	i2_lcdInst
 19140                           
 19141                           ;UI.c: 547: printf("LOG 4           ");
 19142  004902  0EF8               	movlw	low STR_48
 19143  004904  6E0D               	movwf	i2printf@f,c
 19144  004906  0EFC               	movlw	high STR_48
 19145  004908  6E0E               	movwf	i2printf@f+1,c
 19146  00490A  EC96  F00C         	call	i2_printf	;wreg free
 19147  00490E  0012               	return		;funcret
 19148  004910                     __end_of_change_state_to_logs_33:
 19149                           	opt stack 0
 19150                           pclatu	equ	0xFFB
 19151                           pclath	equ	0xFFA
 19152                           tblptru	equ	0xFF8
 19153                           tblptrh	equ	0xFF7
 19154                           tblptrl	equ	0xFF6
 19155                           tablat	equ	0xFF5
 19156                           prodh	equ	0xFF4
 19157                           prodl	equ	0xFF3
 19158                           intcon	equ	0xFF2
 19159                           intcon2	equ	0xFF1
 19160                           intcon3	equ	0xFF0
 19161                           indf0	equ	0xFEF
 19162                           postinc0	equ	0xFEE
 19163                           fsr0h	equ	0xFEA
 19164                           fsr0l	equ	0xFE9
 19165                           wreg	equ	0xFE8
 19166                           postdec1	equ	0xFE5
 19167                           fsr1h	equ	0xFE2
 19168                           fsr1l	equ	0xFE1
 19169                           indf2	equ	0xFDF
 19170                           postinc2	equ	0xFDE
 19171                           postdec2	equ	0xFDD
 19172                           fsr2h	equ	0xFDA
 19173                           fsr2l	equ	0xFD9
 19174                           status	equ	0xFD8
 19175                           
 19176 ;; *************** function _change_state_to_logs_23 *****************
 19177 ;; Defined at:
 19178 ;;		line 535 in file "UI.c"
 19179 ;; Parameters:    Size  Location     Type
 19180 ;;		None
 19181 ;; Auto vars:     Size  Location     Type
 19182 ;;		None
 19183 ;; Return value:  Size  Location     Type
 19184 ;;                  1    wreg      void 
 19185 ;; Registers used:
 19186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19187 ;; Tracked objects:
 19188 ;;		On entry : 0/0
 19189 ;;		On exit  : 0/0
 19190 ;;		Unchanged: 0/0
 19191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19196 ;;Total ram usage:        0 bytes
 19197 ;; Hardware stack levels used:    1
 19198 ;; Hardware stack levels required when called:    3
 19199 ;; This function calls:
 19200 ;;		i2_lcdInst
 19201 ;;		i2_printf
 19202 ;; This function is called by:
 19203 ;;		_updateMenu
 19204 ;;		_inputHandler
 19205 ;; This function uses a non-reentrant model
 19206 ;;
 19207                           
 19208                           	psect	text71
 19209  0049FC                     __ptext71:
 19210                           	opt stack 0
 19211  0049FC                     _change_state_to_logs_23:
 19212                           	opt stack 18
 19213                           
 19214                           ;UI.c: 536: cur_state = 1023;
 19215                           
 19216                           ;incstack = 0
 19217  0049FC  0E03               	movlw	3
 19218  0049FE  0100               	movlb	0	; () banked
 19219  004A00  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19220  004A02  69E6               	setf	_cur_state& (0+255),b
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;UI.c: 537: lcdInst(0b10000000);;
 19224  004A04  0E80               	movlw	128
 19225  004A06  EC32  F026         	call	i2_lcdInst
 19226                           
 19227                           ;UI.c: 538: printf("LOG 2           ");
 19228  004A0A  0ED6               	movlw	low STR_40
 19229  004A0C  6E0D               	movwf	i2printf@f,c
 19230  004A0E  0EFC               	movlw	high STR_40
 19231  004A10  6E0E               	movwf	i2printf@f+1,c
 19232  004A12  EC96  F00C         	call	i2_printf	;wreg free
 19233                           
 19234                           ;UI.c: 539: lcdInst(0b11000000);;
 19235  004A16  0EC0               	movlw	192
 19236  004A18  EC32  F026         	call	i2_lcdInst
 19237                           
 19238                           ;UI.c: 540: printf("LOG 3          <");
 19239  004A1C  0E91               	movlw	low STR_46
 19240  004A1E  6E0D               	movwf	i2printf@f,c
 19241  004A20  0EFD               	movlw	high STR_46
 19242  004A22  6E0E               	movwf	i2printf@f+1,c
 19243  004A24  EC96  F00C         	call	i2_printf	;wreg free
 19244  004A28  0012               	return		;funcret
 19245  004A2A                     __end_of_change_state_to_logs_23:
 19246                           	opt stack 0
 19247                           pclatu	equ	0xFFB
 19248                           pclath	equ	0xFFA
 19249                           tblptru	equ	0xFF8
 19250                           tblptrh	equ	0xFF7
 19251                           tblptrl	equ	0xFF6
 19252                           tablat	equ	0xFF5
 19253                           prodh	equ	0xFF4
 19254                           prodl	equ	0xFF3
 19255                           intcon	equ	0xFF2
 19256                           intcon2	equ	0xFF1
 19257                           intcon3	equ	0xFF0
 19258                           indf0	equ	0xFEF
 19259                           postinc0	equ	0xFEE
 19260                           fsr0h	equ	0xFEA
 19261                           fsr0l	equ	0xFE9
 19262                           wreg	equ	0xFE8
 19263                           postdec1	equ	0xFE5
 19264                           fsr1h	equ	0xFE2
 19265                           fsr1l	equ	0xFE1
 19266                           indf2	equ	0xFDF
 19267                           postinc2	equ	0xFDE
 19268                           postdec2	equ	0xFDD
 19269                           fsr2h	equ	0xFDA
 19270                           fsr2l	equ	0xFD9
 19271                           status	equ	0xFD8
 19272                           
 19273 ;; *************** function _change_state_to_logs_22 *****************
 19274 ;; Defined at:
 19275 ;;		line 528 in file "UI.c"
 19276 ;; Parameters:    Size  Location     Type
 19277 ;;		None
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;		None
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  1    wreg      void 
 19282 ;; Registers used:
 19283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19293 ;;Total ram usage:        0 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:    3
 19296 ;; This function calls:
 19297 ;;		i2_lcdInst
 19298 ;;		i2_printf
 19299 ;; This function is called by:
 19300 ;;		_updateMenu
 19301 ;;		_inputHandler
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305                           	psect	text72
 19306  004910                     __ptext72:
 19307                           	opt stack 0
 19308  004910                     _change_state_to_logs_22:
 19309                           	opt stack 18
 19310                           
 19311                           ;UI.c: 529: cur_state = 1022;
 19312                           
 19313                           ;incstack = 0
 19314  004910  0E03               	movlw	3
 19315  004912  0100               	movlb	0	; () banked
 19316  004914  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19317  004916  0EFE               	movlw	254
 19318  004918  6FE6               	movwf	_cur_state& (0+255),b
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;UI.c: 530: lcdInst(0b10000000);;
 19322  00491A  0E80               	movlw	128
 19323  00491C  EC32  F026         	call	i2_lcdInst
 19324                           
 19325                           ;UI.c: 531: printf("LOG 2          <");
 19326  004920  0E80               	movlw	low STR_42
 19327  004922  6E0D               	movwf	i2printf@f,c
 19328  004924  0EFD               	movlw	high STR_42
 19329  004926  6E0E               	movwf	i2printf@f+1,c
 19330  004928  EC96  F00C         	call	i2_printf	;wreg free
 19331                           
 19332                           ;UI.c: 532: lcdInst(0b11000000);;
 19333  00492C  0EC0               	movlw	192
 19334  00492E  EC32  F026         	call	i2_lcdInst
 19335                           
 19336                           ;UI.c: 533: printf("LOG 3           ");
 19337  004932  0EE7               	movlw	low STR_44
 19338  004934  6E0D               	movwf	i2printf@f,c
 19339  004936  0EFC               	movlw	high STR_44
 19340  004938  6E0E               	movwf	i2printf@f+1,c
 19341  00493A  EC96  F00C         	call	i2_printf	;wreg free
 19342  00493E  0012               	return		;funcret
 19343  004940                     __end_of_change_state_to_logs_22:
 19344                           	opt stack 0
 19345                           pclatu	equ	0xFFB
 19346                           pclath	equ	0xFFA
 19347                           tblptru	equ	0xFF8
 19348                           tblptrh	equ	0xFF7
 19349                           tblptrl	equ	0xFF6
 19350                           tablat	equ	0xFF5
 19351                           prodh	equ	0xFF4
 19352                           prodl	equ	0xFF3
 19353                           intcon	equ	0xFF2
 19354                           intcon2	equ	0xFF1
 19355                           intcon3	equ	0xFF0
 19356                           indf0	equ	0xFEF
 19357                           postinc0	equ	0xFEE
 19358                           fsr0h	equ	0xFEA
 19359                           fsr0l	equ	0xFE9
 19360                           wreg	equ	0xFE8
 19361                           postdec1	equ	0xFE5
 19362                           fsr1h	equ	0xFE2
 19363                           fsr1l	equ	0xFE1
 19364                           indf2	equ	0xFDF
 19365                           postinc2	equ	0xFDE
 19366                           postdec2	equ	0xFDD
 19367                           fsr2h	equ	0xFDA
 19368                           fsr2l	equ	0xFD9
 19369                           status	equ	0xFD8
 19370                           
 19371 ;; *************** function _change_state_to_logs_12 *****************
 19372 ;; Defined at:
 19373 ;;		line 521 in file "UI.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;		None
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;		None
 19378 ;; Return value:  Size  Location     Type
 19379 ;;                  1    wreg      void 
 19380 ;; Registers used:
 19381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;Total ram usage:        0 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:    3
 19394 ;; This function calls:
 19395 ;;		i2_lcdInst
 19396 ;;		i2_printf
 19397 ;; This function is called by:
 19398 ;;		_updateMenu
 19399 ;;		_inputHandler
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           	psect	text73
 19404  004940                     __ptext73:
 19405                           	opt stack 0
 19406  004940                     _change_state_to_logs_12:
 19407                           	opt stack 18
 19408                           
 19409                           ;UI.c: 522: cur_state = 1012;
 19410                           
 19411                           ;incstack = 0
 19412  004940  0E03               	movlw	3
 19413  004942  0100               	movlb	0	; () banked
 19414  004944  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19415  004946  0EF4               	movlw	244
 19416  004948  6FE6               	movwf	_cur_state& (0+255),b
 19417                           
 19418                           ; BSR set to: 0
 19419                           ;UI.c: 523: lcdInst(0b10000000);;
 19420  00494A  0E80               	movlw	128
 19421  00494C  EC32  F026         	call	i2_lcdInst
 19422                           
 19423                           ;UI.c: 524: printf("LOG 1           ");
 19424  004950  0EC5               	movlw	low STR_41
 19425  004952  6E0D               	movwf	i2printf@f,c
 19426  004954  0EFC               	movlw	high STR_41
 19427  004956  6E0E               	movwf	i2printf@f+1,c
 19428  004958  EC96  F00C         	call	i2_printf	;wreg free
 19429                           
 19430                           ;UI.c: 525: lcdInst(0b11000000);;
 19431  00495C  0EC0               	movlw	192
 19432  00495E  EC32  F026         	call	i2_lcdInst
 19433                           
 19434                           ;UI.c: 526: printf("LOG 2          <");
 19435  004962  0E80               	movlw	low STR_42
 19436  004964  6E0D               	movwf	i2printf@f,c
 19437  004966  0EFD               	movlw	high STR_42
 19438  004968  6E0E               	movwf	i2printf@f+1,c
 19439  00496A  EC96  F00C         	call	i2_printf	;wreg free
 19440  00496E  0012               	return		;funcret
 19441  004970                     __end_of_change_state_to_logs_12:
 19442                           	opt stack 0
 19443                           pclatu	equ	0xFFB
 19444                           pclath	equ	0xFFA
 19445                           tblptru	equ	0xFF8
 19446                           tblptrh	equ	0xFF7
 19447                           tblptrl	equ	0xFF6
 19448                           tablat	equ	0xFF5
 19449                           prodh	equ	0xFF4
 19450                           prodl	equ	0xFF3
 19451                           intcon	equ	0xFF2
 19452                           intcon2	equ	0xFF1
 19453                           intcon3	equ	0xFF0
 19454                           indf0	equ	0xFEF
 19455                           postinc0	equ	0xFEE
 19456                           fsr0h	equ	0xFEA
 19457                           fsr0l	equ	0xFE9
 19458                           wreg	equ	0xFE8
 19459                           postdec1	equ	0xFE5
 19460                           fsr1h	equ	0xFE2
 19461                           fsr1l	equ	0xFE1
 19462                           indf2	equ	0xFDF
 19463                           postinc2	equ	0xFDE
 19464                           postdec2	equ	0xFDD
 19465                           fsr2h	equ	0xFDA
 19466                           fsr2l	equ	0xFD9
 19467                           status	equ	0xFD8
 19468                           
 19469 ;; *************** function _change_state_to_logs_11 *****************
 19470 ;; Defined at:
 19471 ;;		line 514 in file "UI.c"
 19472 ;; Parameters:    Size  Location     Type
 19473 ;;		None
 19474 ;; Auto vars:     Size  Location     Type
 19475 ;;		None
 19476 ;; Return value:  Size  Location     Type
 19477 ;;                  1    wreg      void 
 19478 ;; Registers used:
 19479 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19480 ;; Tracked objects:
 19481 ;;		On entry : 0/0
 19482 ;;		On exit  : 0/0
 19483 ;;		Unchanged: 0/0
 19484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19489 ;;Total ram usage:        0 bytes
 19490 ;; Hardware stack levels used:    1
 19491 ;; Hardware stack levels required when called:    3
 19492 ;; This function calls:
 19493 ;;		i2_lcdInst
 19494 ;;		i2_printf
 19495 ;; This function is called by:
 19496 ;;		_updateMenu
 19497 ;;		_inputHandler
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501                           	psect	text74
 19502  004970                     __ptext74:
 19503                           	opt stack 0
 19504  004970                     _change_state_to_logs_11:
 19505                           	opt stack 18
 19506                           
 19507                           ;UI.c: 515: cur_state = 1011;
 19508                           
 19509                           ;incstack = 0
 19510  004970  0E03               	movlw	3
 19511  004972  0100               	movlb	0	; () banked
 19512  004974  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19513  004976  0EF3               	movlw	243
 19514  004978  6FE6               	movwf	_cur_state& (0+255),b
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;UI.c: 516: lcdInst(0b10000000);;
 19518  00497A  0E80               	movlw	128
 19519  00497C  EC32  F026         	call	i2_lcdInst
 19520                           
 19521                           ;UI.c: 517: printf("LOG 1          <");
 19522  004980  0E6F               	movlw	low STR_39
 19523  004982  6E0D               	movwf	i2printf@f,c
 19524  004984  0EFD               	movlw	high STR_39
 19525  004986  6E0E               	movwf	i2printf@f+1,c
 19526  004988  EC96  F00C         	call	i2_printf	;wreg free
 19527                           
 19528                           ;UI.c: 518: lcdInst(0b11000000);;
 19529  00498C  0EC0               	movlw	192
 19530  00498E  EC32  F026         	call	i2_lcdInst
 19531                           
 19532                           ;UI.c: 519: printf("LOG 2           ");
 19533  004992  0ED6               	movlw	low STR_40
 19534  004994  6E0D               	movwf	i2printf@f,c
 19535  004996  0EFC               	movlw	high STR_40
 19536  004998  6E0E               	movwf	i2printf@f+1,c
 19537  00499A  EC96  F00C         	call	i2_printf	;wreg free
 19538  00499E  0012               	return		;funcret
 19539  0049A0                     __end_of_change_state_to_logs_11:
 19540                           	opt stack 0
 19541                           pclatu	equ	0xFFB
 19542                           pclath	equ	0xFFA
 19543                           tblptru	equ	0xFF8
 19544                           tblptrh	equ	0xFF7
 19545                           tblptrl	equ	0xFF6
 19546                           tablat	equ	0xFF5
 19547                           prodh	equ	0xFF4
 19548                           prodl	equ	0xFF3
 19549                           intcon	equ	0xFF2
 19550                           intcon2	equ	0xFF1
 19551                           intcon3	equ	0xFF0
 19552                           indf0	equ	0xFEF
 19553                           postinc0	equ	0xFEE
 19554                           fsr0h	equ	0xFEA
 19555                           fsr0l	equ	0xFE9
 19556                           wreg	equ	0xFE8
 19557                           postdec1	equ	0xFE5
 19558                           fsr1h	equ	0xFE2
 19559                           fsr1l	equ	0xFE1
 19560                           indf2	equ	0xFDF
 19561                           postinc2	equ	0xFDE
 19562                           postdec2	equ	0xFDD
 19563                           fsr2h	equ	0xFDA
 19564                           fsr2l	equ	0xFD9
 19565                           status	equ	0xFD8
 19566                           
 19567 ;; *************** function _dispLogs *****************
 19568 ;; Defined at:
 19569 ;;		line 467 in file "UI.c"
 19570 ;; Parameters:    Size  Location     Type
 19571 ;;  myLog           2   17[COMRAM] int 
 19572 ;; Auto vars:     Size  Location     Type
 19573 ;;		None
 19574 ;; Return value:  Size  Location     Type
 19575 ;;                  1    wreg      void 
 19576 ;; Registers used:
 19577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19578 ;; Tracked objects:
 19579 ;;		On entry : 0/0
 19580 ;;		On exit  : 0/0
 19581 ;;		Unchanged: 0/0
 19582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19587 ;;Total ram usage:        2 bytes
 19588 ;; Hardware stack levels used:    1
 19589 ;; Hardware stack levels required when called:    2
 19590 ;; This function calls:
 19591 ;;		_retrieveLog
 19592 ;; This function is called by:
 19593 ;;		_updateMenu
 19594 ;; This function uses a non-reentrant model
 19595 ;;
 19596                           
 19597                           	psect	text75
 19598  004B48                     __ptext75:
 19599                           	opt stack 0
 19600  004B48                     _dispLogs:
 19601                           	opt stack 20
 19602                           
 19603                           ;UI.c: 468: logstate = 1;
 19604                           
 19605                           ;incstack = 0
 19606  004B48  0E00               	movlw	0
 19607  004B4A  0100               	movlb	0	; () banked
 19608  004B4C  6FF7               	movwf	(_logstate+1)& (0+255),b
 19609  004B4E  0E01               	movlw	1
 19610  004B50  6FF6               	movwf	_logstate& (0+255),b
 19611                           
 19612                           ; BSR set to: 0
 19613                           ;UI.c: 469: log = myLog;
 19614  004B52  C012  F0EC         	movff	dispLogs@myLog,_log
 19615  004B56  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 19616                           
 19617                           ; BSR set to: 0
 19618                           ;UI.c: 470: retrieveLog(myLog - 1);
 19619  004B5A  0EFF               	movlw	255
 19620  004B5C  2412               	addwf	dispLogs@myLog,w,c
 19621  004B5E  6E07               	movwf	retrieveLog@logNum,c
 19622  004B60  0EFF               	movlw	255
 19623  004B62  2013               	addwfc	dispLogs@myLog+1,w,c
 19624  004B64  6E08               	movwf	retrieveLog@logNum+1,c
 19625  004B66  ECDA  F01A         	call	_retrieveLog	;wreg free
 19626  004B6A  0012               	return		;funcret
 19627  004B6C                     __end_of_dispLogs:
 19628                           	opt stack 0
 19629                           pclatu	equ	0xFFB
 19630                           pclath	equ	0xFFA
 19631                           tblptru	equ	0xFF8
 19632                           tblptrh	equ	0xFF7
 19633                           tblptrl	equ	0xFF6
 19634                           tablat	equ	0xFF5
 19635                           prodh	equ	0xFF4
 19636                           prodl	equ	0xFF3
 19637                           intcon	equ	0xFF2
 19638                           intcon2	equ	0xFF1
 19639                           intcon3	equ	0xFF0
 19640                           indf0	equ	0xFEF
 19641                           postinc0	equ	0xFEE
 19642                           fsr0h	equ	0xFEA
 19643                           fsr0l	equ	0xFE9
 19644                           wreg	equ	0xFE8
 19645                           postdec1	equ	0xFE5
 19646                           fsr1h	equ	0xFE2
 19647                           fsr1l	equ	0xFE1
 19648                           indf2	equ	0xFDF
 19649                           postinc2	equ	0xFDE
 19650                           postdec2	equ	0xFDD
 19651                           fsr2h	equ	0xFDA
 19652                           fsr2l	equ	0xFD9
 19653                           status	equ	0xFD8
 19654                           
 19655 ;; *************** function _retrieveLog *****************
 19656 ;; Defined at:
 19657 ;;		line 134 in file "EEPROM.c"
 19658 ;; Parameters:    Size  Location     Type
 19659 ;;  logNum          2    6[COMRAM] int 
 19660 ;; Auto vars:     Size  Location     Type
 19661 ;;  i               2   13[COMRAM] int 
 19662 ;;  addr            2   15[COMRAM] unsigned short 
 19663 ;;  byte3           1   12[COMRAM] unsigned char 
 19664 ;;  byte2           1   11[COMRAM] unsigned char 
 19665 ;;  byte1           1   10[COMRAM] unsigned char 
 19666 ;; Return value:  Size  Location     Type
 19667 ;;                  1    wreg      void 
 19668 ;; Registers used:
 19669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19670 ;; Tracked objects:
 19671 ;;		On entry : 0/0
 19672 ;;		On exit  : 0/0
 19673 ;;		Unchanged: 0/0
 19674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;Total ram usage:       11 bytes
 19680 ;; Hardware stack levels used:    1
 19681 ;; Hardware stack levels required when called:    1
 19682 ;; This function calls:
 19683 ;;		i2_EEPROM_read
 19684 ;;		i2___wmul
 19685 ;; This function is called by:
 19686 ;;		_dispLogs
 19687 ;; This function uses a non-reentrant model
 19688 ;;
 19689                           
 19690                           	psect	text76
 19691  0035B4                     __ptext76:
 19692                           	opt stack 0
 19693  0035B4                     _retrieveLog:
 19694                           	opt stack 20
 19695                           
 19696                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19697                           
 19698                           ;incstack = 0
 19699  0035B4  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19700  0035B8  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19701  0035BC  0E00               	movlw	0
 19702  0035BE  6E04               	movwf	i2___wmul@multiplicand+1,c
 19703  0035C0  0E0B               	movlw	11
 19704  0035C2  6E03               	movwf	i2___wmul@multiplicand,c
 19705  0035C4  EC7E  F025         	call	i2___wmul	;wreg free
 19706  0035C8  0E01               	movlw	1
 19707  0035CA  2401               	addwf	?i2___wmul,w,c
 19708  0035CC  6E10               	movwf	retrieveLog@addr,c
 19709  0035CE  0E00               	movlw	0
 19710  0035D0  2002               	addwfc	?i2___wmul+1,w,c
 19711  0035D2  6E11               	movwf	retrieveLog@addr+1,c
 19712                           
 19713                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19714  0035D4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19715  0035D8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19716  0035DC  ECFE  F025         	call	i2_EEPROM_read	;wreg free
 19717  0035E0  6E0B               	movwf	retrieveLog@byte1,c
 19718                           
 19719                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19720  0035E2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19721  0035E6  0E80               	movlw	128
 19722  0035E8  1609               	andwf	??_retrieveLog,f,c
 19723  0035EA  5009               	movf	??_retrieveLog,w,c
 19724  0035EC  0100               	movlb	0	; () banked
 19725  0035EE  6FEE               	movwf	_log_completion& (0+255),b
 19726  0035F0  6BEF               	clrf	(_log_completion+1)& (0+255),b
 19727                           
 19728                           ; BSR set to: 0
 19729                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19730  0035F2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19731  0035F6  0E0F               	movlw	15
 19732  0035F8  1609               	andwf	??_retrieveLog,f,c
 19733  0035FA  5009               	movf	??_retrieveLog,w,c
 19734  0035FC  6E75               	movwf	_log_count_total,c
 19735  0035FE  6A76               	clrf	_log_count_total+1,c
 19736                           
 19737                           ; BSR set to: 0
 19738                           ;EEPROM.c: 146: addr++;
 19739  003600  4A10               	infsnz	retrieveLog@addr,f,c
 19740  003602  2A11               	incf	retrieveLog@addr+1,f,c
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19744  003604  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19745  003608  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19746  00360C  ECFE  F025         	call	i2_EEPROM_read	;wreg free
 19747  003610  6E0C               	movwf	retrieveLog@byte2,c
 19748                           
 19749                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19750  003612  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19751  003616  3A09               	swapf	??_retrieveLog,f,c
 19752  003618  0E0F               	movlw	15
 19753  00361A  1609               	andwf	??_retrieveLog,f,c
 19754  00361C  0E0F               	movlw	15
 19755  00361E  1609               	andwf	??_retrieveLog,f,c
 19756  003620  5009               	movf	??_retrieveLog,w,c
 19757  003622  0100               	movlb	0	; () banked
 19758  003624  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 19759  003626  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19763  003628  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19764  00362C  0E0F               	movlw	15
 19765  00362E  1609               	andwf	??_retrieveLog,f,c
 19766  003630  5009               	movf	??_retrieveLog,w,c
 19767  003632  0100               	movlb	0	; () banked
 19768  003634  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 19769  003636  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19770                           
 19771                           ; BSR set to: 0
 19772                           ;EEPROM.c: 152: addr++;
 19773  003638  4A10               	infsnz	retrieveLog@addr,f,c
 19774  00363A  2A11               	incf	retrieveLog@addr+1,f,c
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19778  00363C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19779  003640  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19780  003644  ECFE  F025         	call	i2_EEPROM_read	;wreg free
 19781  003648  6E0D               	movwf	retrieveLog@byte3,c
 19782                           
 19783                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19784  00364A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19785  00364E  3A09               	swapf	??_retrieveLog,f,c
 19786  003650  0E0F               	movlw	15
 19787  003652  1609               	andwf	??_retrieveLog,f,c
 19788  003654  0E0F               	movlw	15
 19789  003656  1609               	andwf	??_retrieveLog,f,c
 19790  003658  5009               	movf	??_retrieveLog,w,c
 19791  00365A  6E73               	movwf	_log_count_can_w_lab,c
 19792  00365C  6A74               	clrf	_log_count_can_w_lab+1,c
 19793                           
 19794                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19795  00365E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19796  003662  0E0F               	movlw	15
 19797  003664  1609               	andwf	??_retrieveLog,f,c
 19798  003666  5009               	movf	??_retrieveLog,w,c
 19799  003668  6E71               	movwf	_log_count_can_no_lab,c
 19800  00366A  6A72               	clrf	_log_count_can_no_lab+1,c
 19801                           
 19802                           ;EEPROM.c: 156: addr++;
 19803  00366C  4A10               	infsnz	retrieveLog@addr,f,c
 19804  00366E  2A11               	incf	retrieveLog@addr+1,f,c
 19805                           
 19806                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19807  003670  0E00               	movlw	0
 19808  003672  6E0F               	movwf	retrieveLog@i+1,c
 19809  003674  0E00               	movlw	0
 19810  003676  6E0E               	movwf	retrieveLog@i,c
 19811  003678                     i2l6249:
 19812  003678  BE0F               	btfsc	retrieveLog@i+1,7,c
 19813  00367A  D006               	goto	i2l6253
 19814  00367C  500F               	movf	retrieveLog@i+1,w,c
 19815  00367E  E11E               	bnz	i2l6261
 19816  003680  0E07               	movlw	7
 19817  003682  5C0E               	subwf	retrieveLog@i,w,c
 19818  003684  B0D8               	btfsc	status,0,c
 19819  003686  D01A               	goto	i2l6261
 19820  003688                     i2l6253:
 19821                           
 19822                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19823  003688  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19824  00368C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19825  003690  ECFE  F025         	call	i2_EEPROM_read	;wreg free
 19826  003694  6E09               	movwf	??_retrieveLog& (0+255),c
 19827  003696  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19828  003698  90D8               	bcf	status,0,c
 19829  00369A  340E               	rlcf	retrieveLog@i,w,c
 19830  00369C  6ED9               	movwf	fsr2l,c
 19831  00369E  340F               	rlcf	retrieveLog@i+1,w,c
 19832  0036A0  6EDA               	movwf	fsr2h,c
 19833  0036A2  0E00               	movlw	low _log_startTime
 19834  0036A4  26D9               	addwf	fsr2l,f,c
 19835  0036A6  0E01               	movlw	high _log_startTime
 19836  0036A8  22DA               	addwfc	fsr2h,f,c
 19837  0036AA  C009  FFDE         	movff	??_retrieveLog,postinc2
 19838  0036AE  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19839                           
 19840                           ;EEPROM.c: 161: addr++;
 19841  0036B2  4A10               	infsnz	retrieveLog@addr,f,c
 19842  0036B4  2A11               	incf	retrieveLog@addr+1,f,c
 19843  0036B6  4A0E               	infsnz	retrieveLog@i,f,c
 19844  0036B8  2A0F               	incf	retrieveLog@i+1,f,c
 19845  0036BA  D7DE               	goto	i2l6249
 19846  0036BC                     i2l6261:
 19847                           
 19848                           ;EEPROM.c: 162: }
 19849                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19850  0036BC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19851  0036C0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19852  0036C4  ECFE  F025         	call	i2_EEPROM_read	;wreg free
 19853  0036C8  6E09               	movwf	??_retrieveLog& (0+255),c
 19854  0036CA  5009               	movf	??_retrieveLog,w,c
 19855  0036CC  0100               	movlb	0	; () banked
 19856  0036CE  6FF4               	movwf	_log_total_time& (0+255),b
 19857  0036D0  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19858                           
 19859                           ; BSR set to: 0
 19860  0036D2  0012               	return		;funcret
 19861  0036D4                     __end_of_retrieveLog:
 19862                           	opt stack 0
 19863                           pclatu	equ	0xFFB
 19864                           pclath	equ	0xFFA
 19865                           tblptru	equ	0xFF8
 19866                           tblptrh	equ	0xFF7
 19867                           tblptrl	equ	0xFF6
 19868                           tablat	equ	0xFF5
 19869                           prodh	equ	0xFF4
 19870                           prodl	equ	0xFF3
 19871                           intcon	equ	0xFF2
 19872                           intcon2	equ	0xFF1
 19873                           intcon3	equ	0xFF0
 19874                           indf0	equ	0xFEF
 19875                           postinc0	equ	0xFEE
 19876                           fsr0h	equ	0xFEA
 19877                           fsr0l	equ	0xFE9
 19878                           wreg	equ	0xFE8
 19879                           postdec1	equ	0xFE5
 19880                           fsr1h	equ	0xFE2
 19881                           fsr1l	equ	0xFE1
 19882                           indf2	equ	0xFDF
 19883                           postinc2	equ	0xFDE
 19884                           postdec2	equ	0xFDD
 19885                           fsr2h	equ	0xFDA
 19886                           fsr2l	equ	0xFD9
 19887                           status	equ	0xFD8
 19888                           
 19889 ;; *************** function i2_EEPROM_read *****************
 19890 ;; Defined at:
 19891 ;;		line 68 in file "EEPROM.c"
 19892 ;; Parameters:    Size  Location     Type
 19893 ;;  address         2    0[COMRAM] unsigned short 
 19894 ;; Auto vars:     Size  Location     Type
 19895 ;;		None
 19896 ;; Return value:  Size  Location     Type
 19897 ;;                  1    wreg      unsigned char 
 19898 ;; Registers used:
 19899 ;;		wreg, status,2
 19900 ;; Tracked objects:
 19901 ;;		On entry : 0/0
 19902 ;;		On exit  : 0/0
 19903 ;;		Unchanged: 0/0
 19904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;Total ram usage:        2 bytes
 19910 ;; Hardware stack levels used:    1
 19911 ;; This function calls:
 19912 ;;		Nothing
 19913 ;; This function is called by:
 19914 ;;		_retrieveLog
 19915 ;; This function uses a non-reentrant model
 19916 ;;
 19917                           
 19918                           	psect	text77
 19919  004BFC                     __ptext77:
 19920                           	opt stack 0
 19921  004BFC                     i2_EEPROM_read:
 19922                           	opt stack 20
 19923                           
 19924                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19925                           
 19926                           ; BSR set to: 0
 19927                           ;incstack = 0
 19928  004BFC  5002               	movf	i2EEPROM_read@address+1,w,c
 19929  004BFE  6EAA               	movwf	4010,c	;volatile
 19930                           
 19931                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19932  004C00  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19933                           
 19934                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19935  004C04  9EA6               	bcf	4006,7,c	;volatile
 19936                           
 19937                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19938  004C06  9CA6               	bcf	4006,6,c	;volatile
 19939                           
 19940                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19941  004C08  80A6               	bsf	4006,0,c	;volatile
 19942  004C0A                     i2l965:
 19943  004C0A  B0A6               	btfsc	4006,0,c	;volatile
 19944  004C0C  D7FE               	goto	i2l965
 19945                           
 19946                           ;EEPROM.c: 81: return EEDATA;
 19947  004C0E  50A8               	movf	4008,w,c	;volatile
 19948  004C10  0012               	return	
 19949  004C12                     __end_ofi2_EEPROM_read:
 19950                           	opt stack 0
 19951                           pclatu	equ	0xFFB
 19952                           pclath	equ	0xFFA
 19953                           tblptru	equ	0xFF8
 19954                           tblptrh	equ	0xFF7
 19955                           tblptrl	equ	0xFF6
 19956                           tablat	equ	0xFF5
 19957                           prodh	equ	0xFF4
 19958                           prodl	equ	0xFF3
 19959                           intcon	equ	0xFF2
 19960                           intcon2	equ	0xFF1
 19961                           intcon3	equ	0xFF0
 19962                           indf0	equ	0xFEF
 19963                           postinc0	equ	0xFEE
 19964                           fsr0h	equ	0xFEA
 19965                           fsr0l	equ	0xFE9
 19966                           wreg	equ	0xFE8
 19967                           postdec1	equ	0xFE5
 19968                           fsr1h	equ	0xFE2
 19969                           fsr1l	equ	0xFE1
 19970                           indf2	equ	0xFDF
 19971                           postinc2	equ	0xFDE
 19972                           postdec2	equ	0xFDD
 19973                           fsr2h	equ	0xFDA
 19974                           fsr2l	equ	0xFD9
 19975                           status	equ	0xFD8
 19976                           
 19977 ;; *************** function _printSortTimer *****************
 19978 ;; Defined at:
 19979 ;;		line 351 in file "sort.c"
 19980 ;; Parameters:    Size  Location     Type
 19981 ;;		None
 19982 ;; Auto vars:     Size  Location     Type
 19983 ;;  i               2   68[COMRAM] int 
 19984 ;;  curTime        14   44[COMRAM] int [7]
 19985 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19986 ;;  sec             2   64[COMRAM] int 
 19987 ;;  min             2   62[COMRAM] int 
 19988 ;;  cur_sec         2   60[COMRAM] unsigned int 
 19989 ;;  start_sec       2   58[COMRAM] unsigned int 
 19990 ;; Return value:  Size  Location     Type
 19991 ;;                  1    wreg      void 
 19992 ;; Registers used:
 19993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19994 ;; Tracked objects:
 19995 ;;		On entry : 0/0
 19996 ;;		On exit  : 0/0
 19997 ;;		Unchanged: 0/0
 19998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20002 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20003 ;;Total ram usage:       31 bytes
 20004 ;; Hardware stack levels used:    1
 20005 ;; Hardware stack levels required when called:    3
 20006 ;; This function calls:
 20007 ;;		i2___lwdiv
 20008 ;;		i2___lwmod
 20009 ;;		i2___wmul
 20010 ;;		i2_getRTC
 20011 ;;		i2_lcdInst
 20012 ;;		i2_printf
 20013 ;; This function is called by:
 20014 ;;		_handler
 20015 ;; This function uses a non-reentrant model
 20016 ;;
 20017                           
 20018                           	psect	text78
 20019  002BCC                     __ptext78:
 20020                           	opt stack 0
 20021  002BCC                     _printSortTimer:
 20022                           	opt stack 20
 20023                           
 20024                           ;sort.c: 352: getRTC();
 20025                           
 20026                           ;incstack = 0
 20027  002BCC  ECF6  F020         	call	i2_getRTC	;wreg free
 20028                           
 20029                           ;sort.c: 353: int curTime[7];
 20030                           ;sort.c: 354: for(int i = 0; i < 7; i++){
 20031  002BD0  0E00               	movlw	0
 20032  002BD2  6E46               	movwf	printSortTimer@i+1,c
 20033  002BD4  0E00               	movlw	0
 20034  002BD6  6E45               	movwf	printSortTimer@i,c
 20035  002BD8                     i2l8491:
 20036  002BD8  BE46               	btfsc	printSortTimer@i+1,7,c
 20037  002BDA  D006               	goto	i2l8495
 20038  002BDC  5046               	movf	printSortTimer@i+1,w,c
 20039  002BDE  E131               	bnz	i2l8501
 20040  002BE0  0E07               	movlw	7
 20041  002BE2  5C45               	subwf	printSortTimer@i,w,c
 20042  002BE4  B0D8               	btfsc	status,0,c
 20043  002BE6  D02D               	goto	i2l8501
 20044  002BE8                     i2l8495:
 20045                           
 20046                           ;sort.c: 355: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20047  002BE8  0E24               	movlw	low _time
 20048  002BEA  2445               	addwf	printSortTimer@i,w,c
 20049  002BEC  6ED9               	movwf	fsr2l,c
 20050  002BEE  0E01               	movlw	high _time
 20051  002BF0  2046               	addwfc	printSortTimer@i+1,w,c
 20052  002BF2  6EDA               	movwf	fsr2h,c
 20053  002BF4  50DF               	movf	indf2,w,c
 20054  002BF6  6E2A               	movwf	??_printSortTimer& (0+255),c
 20055  002BF8  3A2A               	swapf	??_printSortTimer,f,c
 20056  002BFA  0E0F               	movlw	15
 20057  002BFC  162A               	andwf	??_printSortTimer,f,c
 20058  002BFE  0E0F               	movlw	15
 20059  002C00  162A               	andwf	??_printSortTimer,f,c
 20060  002C02  502A               	movf	??_printSortTimer,w,c
 20061  002C04  0D0A               	mullw	10
 20062  002C06  0E24               	movlw	low _time
 20063  002C08  2445               	addwf	printSortTimer@i,w,c
 20064  002C0A  6ED9               	movwf	fsr2l,c
 20065  002C0C  0E01               	movlw	high _time
 20066  002C0E  2046               	addwfc	printSortTimer@i+1,w,c
 20067  002C10  6EDA               	movwf	fsr2h,c
 20068  002C12  50DF               	movf	indf2,w,c
 20069  002C14  0B0F               	andlw	15
 20070  002C16  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20071  002C18  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20072  002C1A  50F3               	movf	prodl,w,c
 20073  002C1C  262B               	addwf	??_printSortTimer+1,f,c
 20074  002C1E  50F4               	movf	prodh,w,c
 20075  002C20  222C               	addwfc	??_printSortTimer+2,f,c
 20076  002C22  90D8               	bcf	status,0,c
 20077  002C24  3445               	rlcf	printSortTimer@i,w,c
 20078  002C26  6ED9               	movwf	fsr2l,c
 20079  002C28  3446               	rlcf	printSortTimer@i+1,w,c
 20080  002C2A  6EDA               	movwf	fsr2h,c
 20081  002C2C  0E2D               	movlw	low printSortTimer@curTime
 20082  002C2E  26D9               	addwf	fsr2l,f,c
 20083  002C30  0E00               	movlw	high printSortTimer@curTime
 20084  002C32  22DA               	addwfc	fsr2h,f,c
 20085  002C34  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20086  002C38  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20087  002C3C  4A45               	infsnz	printSortTimer@i,f,c
 20088  002C3E  2A46               	incf	printSortTimer@i+1,f,c
 20089  002C40  D7CB               	goto	i2l8491
 20090  002C42                     i2l8501:
 20091                           
 20092                           ;sort.c: 356: }
 20093                           ;sort.c: 357: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20094  002C42  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20095  002C46  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20096  002C4A  0E00               	movlw	0
 20097  002C4C  6E04               	movwf	i2___wmul@multiplicand+1,c
 20098  002C4E  0E3C               	movlw	60
 20099  002C50  6E03               	movwf	i2___wmul@multiplicand,c
 20100  002C52  EC7E  F025         	call	i2___wmul	;wreg free
 20101  002C56  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20102  002C5A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20103  002C5E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20104  002C62  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20105  002C66  0E0E               	movlw	14
 20106  002C68  6E04               	movwf	i2___wmul@multiplicand+1,c
 20107  002C6A  0E10               	movlw	16
 20108  002C6C  6E03               	movwf	i2___wmul@multiplicand,c
 20109  002C6E  EC7E  F025         	call	i2___wmul	;wreg free
 20110  002C72  5001               	movf	?i2___wmul,w,c
 20111  002C74  262A               	addwf	??_printSortTimer,f,c
 20112  002C76  5002               	movf	?i2___wmul+1,w,c
 20113  002C78  222B               	addwfc	??_printSortTimer+1,f,c
 20114  002C7A  0101               	movlb	1	; () banked
 20115  002C7C  510E               	movf	_startTime& (0+255),w,b
 20116  002C7E  242A               	addwf	??_printSortTimer,w,c
 20117  002C80  6E3B               	movwf	printSortTimer@start_sec,c
 20118  002C82  0101               	movlb	1	; () banked
 20119  002C84  510F               	movf	(_startTime+1)& (0+255),w,b
 20120  002C86  202B               	addwfc	??_printSortTimer+1,w,c
 20121  002C88  6E3C               	movwf	printSortTimer@start_sec+1,c
 20122                           
 20123                           ;sort.c: 358: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20124  002C8A  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20125  002C8E  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20126  002C92  0E00               	movlw	0
 20127  002C94  6E04               	movwf	i2___wmul@multiplicand+1,c
 20128  002C96  0E3C               	movlw	60
 20129  002C98  6E03               	movwf	i2___wmul@multiplicand,c
 20130  002C9A  EC7E  F025         	call	i2___wmul	;wreg free
 20131  002C9E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20132  002CA2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20133  002CA6  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20134  002CAA  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20135  002CAE  0E0E               	movlw	14
 20136  002CB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 20137  002CB2  0E10               	movlw	16
 20138  002CB4  6E03               	movwf	i2___wmul@multiplicand,c
 20139  002CB6  EC7E  F025         	call	i2___wmul	;wreg free
 20140  002CBA  5001               	movf	?i2___wmul,w,c
 20141  002CBC  262A               	addwf	??_printSortTimer,f,c
 20142  002CBE  5002               	movf	?i2___wmul+1,w,c
 20143  002CC0  222B               	addwfc	??_printSortTimer+1,f,c
 20144  002CC2  502D               	movf	printSortTimer@curTime,w,c
 20145  002CC4  242A               	addwf	??_printSortTimer,w,c
 20146  002CC6  6E3D               	movwf	printSortTimer@cur_sec,c
 20147  002CC8  502E               	movf	printSortTimer@curTime+1,w,c
 20148  002CCA  202B               	addwfc	??_printSortTimer+1,w,c
 20149  002CCC  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20150                           
 20151                           ;sort.c: 359: unsigned int timeDiff = cur_sec - start_sec;
 20152  002CCE  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20153  002CD2  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20154  002CD6  1E2A               	comf	??_printSortTimer,f,c
 20155  002CD8  1E2B               	comf	??_printSortTimer+1,f,c
 20156  002CDA  4A2A               	infsnz	??_printSortTimer,f,c
 20157  002CDC  2A2B               	incf	??_printSortTimer+1,f,c
 20158  002CDE  503D               	movf	printSortTimer@cur_sec,w,c
 20159  002CE0  242A               	addwf	??_printSortTimer,w,c
 20160  002CE2  6E47               	movwf	printSortTimer@timeDiff,c
 20161  002CE4  503E               	movf	printSortTimer@cur_sec+1,w,c
 20162  002CE6  202B               	addwfc	??_printSortTimer+1,w,c
 20163  002CE8  6E48               	movwf	printSortTimer@timeDiff+1,c
 20164                           
 20165                           ;sort.c: 361: total_time = timeDiff;
 20166  002CEA  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20167  002CEE  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20168                           
 20169                           ;sort.c: 363: if(f_most_recent_sort_time){
 20170  002CF2  506B               	movf	_f_most_recent_sort_time,w,c
 20171  002CF4  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20172  002CF6  B4D8               	btfsc	status,2,c
 20173  002CF8  D004               	goto	i2l8511
 20174                           
 20175                           ;sort.c: 364: most_recent_sort_time = timeDiff;
 20176  002CFA  C047  F133         	movff	printSortTimer@timeDiff,_most_recent_sort_time
 20177  002CFE  C048  F134         	movff	printSortTimer@timeDiff+1,_most_recent_sort_time+1
 20178  002D02                     i2l8511:
 20179                           
 20180                           ;sort.c: 366: }
 20181                           ;sort.c: 369: if((most_recent_sort_time - timeDiff == 15) | (timeDiff == 179)){
 20182  002D02  C047  F02A         	movff	printSortTimer@timeDiff,??_printSortTimer
 20183  002D06  C048  F02B         	movff	printSortTimer@timeDiff+1,??_printSortTimer+1
 20184  002D0A  1E2A               	comf	??_printSortTimer,f,c
 20185  002D0C  1E2B               	comf	??_printSortTimer+1,f,c
 20186  002D0E  4A2A               	infsnz	??_printSortTimer,f,c
 20187  002D10  2A2B               	incf	??_printSortTimer+1,f,c
 20188  002D12  0101               	movlb	1	; () banked
 20189  002D14  5133               	movf	_most_recent_sort_time& (0+255),w,b
 20190  002D16  262A               	addwf	??_printSortTimer,f,c
 20191  002D18  0101               	movlb	1	; () banked
 20192  002D1A  5134               	movf	(_most_recent_sort_time+1)& (0+255),w,b
 20193  002D1C  222B               	addwfc	??_printSortTimer+1,f,c
 20194  002D1E  0E0F               	movlw	15
 20195  002D20  182A               	xorwf	??_printSortTimer,w,c
 20196  002D22  102B               	iorwf	??_printSortTimer+1,w,c
 20197  002D24  B4D8               	btfsc	status,2,c
 20198  002D26  D005               	goto	i2l8515
 20199                           
 20200                           ; BSR set to: 1
 20201  002D28  0EB3               	movlw	179
 20202  002D2A  1847               	xorwf	printSortTimer@timeDiff,w,c
 20203  002D2C  1048               	iorwf	printSortTimer@timeDiff+1,w,c
 20204  002D2E  A4D8               	btfss	status,2,c
 20205  002D30  D003               	goto	i2l8517
 20206  002D32                     i2l8515:
 20207                           
 20208                           ; BSR set to: 1
 20209                           ;sort.c: 370: machine_state = DoneSorting_state;
 20210  002D32  0E02               	movlw	2
 20211  002D34  0100               	movlb	0	; () banked
 20212  002D36  6FFC               	movwf	_machine_state& (0+255),b
 20213  002D38                     i2l8517:
 20214                           
 20215                           ;sort.c: 372: }
 20216                           ;sort.c: 374: int min = (timeDiff % 3600) / 60;
 20217  002D38  0E0E               	movlw	14
 20218  002D3A  6E04               	movwf	i2___lwmod@divisor+1,c
 20219  002D3C  0E10               	movlw	16
 20220  002D3E  6E03               	movwf	i2___lwmod@divisor,c
 20221  002D40  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20222  002D44  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20223  002D48  EC37  F023         	call	i2___lwmod	;wreg free
 20224  002D4C  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20225  002D50  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20226  002D54  0E00               	movlw	0
 20227  002D56  6E09               	movwf	i2___lwdiv@divisor+1,c
 20228  002D58  0E3C               	movlw	60
 20229  002D5A  6E08               	movwf	i2___lwdiv@divisor,c
 20230  002D5C  EC78  F022         	call	i2___lwdiv	;wreg free
 20231  002D60  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 20232  002D64  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20233                           
 20234                           ;sort.c: 375: int sec = (timeDiff % 3600) % 60;
 20235  002D68  0E0E               	movlw	14
 20236  002D6A  6E04               	movwf	i2___lwmod@divisor+1,c
 20237  002D6C  0E10               	movlw	16
 20238  002D6E  6E03               	movwf	i2___lwmod@divisor,c
 20239  002D70  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20240  002D74  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20241  002D78  EC37  F023         	call	i2___lwmod	;wreg free
 20242  002D7C  C001  F043         	movff	?i2___lwmod,_printSortTimer$2436
 20243  002D80  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2436+1
 20244                           
 20245                           ;sort.c: 375: int sec = (timeDiff % 3600) % 60;
 20246  002D84  C043  F001         	movff	_printSortTimer$2436,i2___lwmod@dividend
 20247  002D88  C044  F002         	movff	_printSortTimer$2436+1,i2___lwmod@dividend+1
 20248  002D8C  0E00               	movlw	0
 20249  002D8E  6E04               	movwf	i2___lwmod@divisor+1,c
 20250  002D90  0E3C               	movlw	60
 20251  002D92  6E03               	movwf	i2___lwmod@divisor,c
 20252  002D94  EC37  F023         	call	i2___lwmod	;wreg free
 20253  002D98  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 20254  002D9C  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 20255                           
 20256                           ;sort.c: 377: lcdInst(0b10000000);;
 20257  002DA0  0E80               	movlw	128
 20258  002DA2  EC32  F026         	call	i2_lcdInst
 20259                           
 20260                           ;sort.c: 378: printf("SORTING...");
 20261  002DA6  0E7C               	movlw	low STR_64
 20262  002DA8  6E0D               	movwf	i2printf@f,c
 20263  002DAA  0EFF               	movlw	high STR_64
 20264  002DAC  6E0E               	movwf	i2printf@f+1,c
 20265  002DAE  EC96  F00C         	call	i2_printf	;wreg free
 20266                           
 20267                           ;sort.c: 379: lcdInst(0b11000000);;
 20268  002DB2  0EC0               	movlw	192
 20269  002DB4  EC32  F026         	call	i2_lcdInst
 20270                           
 20271                           ;sort.c: 380: printf("TIME %d:%02d", min, sec);
 20272  002DB8  0E42               	movlw	low STR_65
 20273  002DBA  6E0D               	movwf	i2printf@f,c
 20274  002DBC  0EFF               	movlw	high STR_65
 20275  002DBE  6E0E               	movwf	i2printf@f+1,c
 20276  002DC0  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 20277  002DC4  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 20278  002DC8  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 20279  002DCC  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 20280  002DD0  EC96  F00C         	call	i2_printf	;wreg free
 20281  002DD4  0012               	return		;funcret
 20282  002DD6                     __end_of_printSortTimer:
 20283                           	opt stack 0
 20284                           pclatu	equ	0xFFB
 20285                           pclath	equ	0xFFA
 20286                           tblptru	equ	0xFF8
 20287                           tblptrh	equ	0xFF7
 20288                           tblptrl	equ	0xFF6
 20289                           tablat	equ	0xFF5
 20290                           prodh	equ	0xFF4
 20291                           prodl	equ	0xFF3
 20292                           intcon	equ	0xFF2
 20293                           intcon2	equ	0xFF1
 20294                           intcon3	equ	0xFF0
 20295                           indf0	equ	0xFEF
 20296                           postinc0	equ	0xFEE
 20297                           fsr0h	equ	0xFEA
 20298                           fsr0l	equ	0xFE9
 20299                           wreg	equ	0xFE8
 20300                           postdec1	equ	0xFE5
 20301                           fsr1h	equ	0xFE2
 20302                           fsr1l	equ	0xFE1
 20303                           indf2	equ	0xFDF
 20304                           postinc2	equ	0xFDE
 20305                           postdec2	equ	0xFDD
 20306                           fsr2h	equ	0xFDA
 20307                           fsr2l	equ	0xFD9
 20308                           status	equ	0xFD8
 20309                           
 20310 ;; *************** function i2_printf *****************
 20311 ;; Defined at:
 20312 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 20313 ;; Parameters:    Size  Location     Type
 20314 ;;  f               2   12[COMRAM] PTR const unsigned char 
 20315 ;;		 -> STR_121(18), STR_120(18), STR_119(18), STR_118(18), 
 20316 ;;		 -> STR_117(18), STR_116(18), STR_115(17), STR_114(17), 
 20317 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 20318 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 20319 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 20320 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 20321 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 20322 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 20323 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 20324 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 20325 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 20326 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 20327 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 20328 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 20329 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 20330 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 20331 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 20332 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 20333 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 20334 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 20335 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 20336 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 20337 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 20338 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 20339 ;; Auto vars:     Size  Location     Type
 20340 ;;  printf          4    0        struct .
 20341 ;;  printf          2   39[COMRAM] int 
 20342 ;;  printf          2   35[COMRAM] unsigned int 
 20343 ;;  printf          2   33[COMRAM] unsigned int 
 20344 ;;  printf          2   31[COMRAM] PTR void [1]
 20345 ;;		 -> ?i2_printf(2), ?_printf(2), 
 20346 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 20347 ;;		 -> STR_122(7), count_total(2), printRTC@month(4), UI@month(4), 
 20348 ;;  printf          1   38[COMRAM] char 
 20349 ;;  printf          1   37[COMRAM] unsigned char 
 20350 ;;  printf          1   28[COMRAM] char 
 20351 ;; Return value:  Size  Location     Type
 20352 ;;                  2   12[COMRAM] int 
 20353 ;; Registers used:
 20354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20355 ;; Tracked objects:
 20356 ;;		On entry : 0/0
 20357 ;;		On exit  : 0/0
 20358 ;;		Unchanged: 0/0
 20359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20360 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20361 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20362 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20363 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;Total ram usage:       29 bytes
 20365 ;; Hardware stack levels used:    1
 20366 ;; Hardware stack levels required when called:    2
 20367 ;; This function calls:
 20368 ;;		i2___lwdiv
 20369 ;;		i2___lwmod
 20370 ;;		i2___wmul
 20371 ;;		i2_isdigit
 20372 ;;		i2_putch
 20373 ;; This function is called by:
 20374 ;;		_change_state_to_menu_11
 20375 ;;		_change_state_to_menu_23
 20376 ;;		_change_state_to_logs_11
 20377 ;;		_change_state_to_logs_12
 20378 ;;		_change_state_to_logs_22
 20379 ;;		_change_state_to_logs_23
 20380 ;;		_change_state_to_logs_33
 20381 ;;		_change_state_to_logs_34
 20382 ;;		_printSortTimer
 20383 ;;		i2_change_state_to_menu_start
 20384 ;;		i2_change_state_to_menu_12
 20385 ;;		i2_change_state_to_menu_22
 20386 ;;		i2_printRTC
 20387 ;; This function uses a non-reentrant model
 20388 ;;
 20389                           
 20390                           	psect	text79
 20391  00192C                     __ptext79:
 20392                           	opt stack 0
 20393  00192C                     i2_printf:
 20394                           	opt stack 19
 20395                           
 20396                           ;doprnt.c: 466: va_list ap;
 20397                           ;doprnt.c: 499: signed char c;
 20398                           ;doprnt.c: 501: int width;
 20399                           ;doprnt.c: 506: signed char prec;
 20400                           ;doprnt.c: 508: unsigned char flag;
 20401                           ;doprnt.c: 523: union {
 20402                           ;doprnt.c: 524: unsigned long vd;
 20403                           ;doprnt.c: 525: double integ;
 20404                           ;doprnt.c: 526: } tmpval;
 20405                           ;doprnt.c: 528: unsigned int val;
 20406                           ;doprnt.c: 529: unsigned len;
 20407                           ;doprnt.c: 530: const char * cp;
 20408                           ;doprnt.c: 533: *ap = __va_start();
 20409                           
 20410                           ;incstack = 0
 20411  00192C  0E0F               	movlw	low (?i2_printf+2)
 20412  00192E  6E20               	movwf	i2printf@ap,c
 20413  001930  0E00               	movlw	high (?i2_printf+2)
 20414  001932  6E21               	movwf	i2printf@ap+1,c
 20415                           
 20416                           ;doprnt.c: 536: while(c = *f++) {
 20417  001934  D1A4               	goto	i2l6073
 20418  001936                     i2l5943:
 20419                           
 20420                           ;doprnt.c: 538: if(c != '%')
 20421  001936  0E25               	movlw	37
 20422  001938  1827               	xorwf	i2printf@c,w,c
 20423  00193A  B4D8               	btfsc	status,2,c
 20424  00193C  D004               	goto	i2l5947
 20425                           
 20426                           ;doprnt.c: 540: {
 20427                           ;doprnt.c: 541: (putch(c) );
 20428  00193E  5027               	movf	i2printf@c,w,c
 20429  001940  EC2C  F026         	call	i2_putch
 20430                           
 20431                           ;doprnt.c: 542: continue;
 20432  001944  D19C               	goto	i2l6073
 20433  001946                     i2l5947:
 20434                           
 20435                           ;doprnt.c: 543: }
 20436                           ;doprnt.c: 546: width = 0;
 20437  001946  0E00               	movlw	0
 20438  001948  6E29               	movwf	i2printf@width+1,c
 20439  00194A  0E00               	movlw	0
 20440  00194C  6E28               	movwf	i2printf@width,c
 20441                           
 20442                           ;doprnt.c: 548: flag = 0;
 20443  00194E  0E00               	movlw	0
 20444  001950  6E26               	movwf	i2printf@flag,c
 20445                           
 20446                           ;doprnt.c: 551: switch(*f) {
 20447                           
 20448                           ;doprnt.c: 550: for(;;) {
 20449  001952  D003               	goto	i2l5953
 20450  001954                     i2l5949:
 20451                           
 20452                           ;doprnt.c: 580: flag |= 0x04;
 20453  001954  8426               	bsf	i2printf@flag,2,c
 20454                           
 20455                           ;doprnt.c: 581: f++;
 20456  001956  4A0D               	infsnz	i2printf@f,f,c
 20457  001958  2A0E               	incf	i2printf@f+1,f,c
 20458  00195A                     i2l5953:
 20459  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20460  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20461  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20462  001962  6AF8               	clrf	tblptru,c
 20463  001964                     	endif
 20464  001964                     	if	0	;tblptru may be non-zero
 20465  001964                     	endif
 20466  001964  0008               	tblrd		*
 20467  001966  50F5               	movf	tablat,w,c
 20468                           
 20469                           ; Switch size 1, requested type "space"
 20470                           ; Number of cases is 1, Range of values is 48 to 48
 20471                           ; switch strategies available:
 20472                           ; Name         Instructions Cycles
 20473                           ; simple_byte            4     3 (average)
 20474                           ;	Chosen strategy is simple_byte
 20475  001968  0A30               	xorlw	48	; case 48
 20476  00196A  B4D8               	btfsc	status,2,c
 20477  00196C  D7F3               	goto	i2l5949
 20478                           
 20479                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20480                           
 20481                           ;doprnt.c: 586: }
 20482                           
 20483                           ;doprnt.c: 585: break;
 20484  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20485  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20486  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20487  001976  6AF8               	clrf	tblptru,c
 20488  001978                     	endif
 20489  001978                     	if	0	;tblptru may be non-zero
 20490  001978                     	endif
 20491  001978  0008               	tblrd		*
 20492  00197A  50F5               	movf	tablat,w,c
 20493  00197C  ECD8  F025         	call	i2_isdigit
 20494  001980  A0D8               	btfss	status,0,c
 20495  001982  D0A6               	goto	i2l6001
 20496                           
 20497                           ;doprnt.c: 598: width = 0;
 20498  001984  0E00               	movlw	0
 20499  001986  6E29               	movwf	i2printf@width+1,c
 20500  001988  0E00               	movlw	0
 20501  00198A  6E28               	movwf	i2printf@width,c
 20502  00198C                     i2l5959:
 20503                           
 20504                           ;doprnt.c: 600: width *= 10;
 20505  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20506  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20507  001994  0E00               	movlw	0
 20508  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20509  001998  0E0A               	movlw	10
 20510  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20511  00199C  EC7E  F025         	call	i2___wmul	;wreg free
 20512  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20513  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20514                           
 20515                           ;doprnt.c: 601: width += *f++ - '0';
 20516  0019A8  0ED0               	movlw	208
 20517  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20518  0019AC  0EFF               	movlw	255
 20519  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20520  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20521  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20522  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20523  0019B8  6AF8               	clrf	tblptru,c
 20524  0019BA                     	endif
 20525  0019BA                     	if	0	;tblptru may be non-zero
 20526  0019BA                     	endif
 20527  0019BA  0008               	tblrd		*
 20528  0019BC  50F5               	movf	tablat,w,c
 20529  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20530  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20531  0019C2  5019               	movf	??i2_printf,w,c
 20532  0019C4  261B               	addwf	??i2_printf+2,f,c
 20533  0019C6  501A               	movf	??i2_printf+1,w,c
 20534  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20535  0019CA  501B               	movf	??i2_printf+2,w,c
 20536  0019CC  2628               	addwf	i2printf@width,f,c
 20537  0019CE  501C               	movf	??i2_printf+3,w,c
 20538  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20539  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20540  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20541                           
 20542                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20543  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20544  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20545  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20546  0019DE  6AF8               	clrf	tblptru,c
 20547  0019E0                     	endif
 20548  0019E0                     	if	0	;tblptru may be non-zero
 20549  0019E0                     	endif
 20550  0019E0  0008               	tblrd		*
 20551  0019E2  50F5               	movf	tablat,w,c
 20552  0019E4  ECD8  F025         	call	i2_isdigit
 20553  0019E8  A0D8               	btfss	status,0,c
 20554  0019EA  D072               	goto	i2l6001
 20555  0019EC  D7CF               	goto	i2l5959
 20556  0019EE                     i2l5967:
 20557                           
 20558                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20559  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20560  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20561  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20562  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20563  0019FE  0E02               	movlw	2
 20564  001A00  2620               	addwf	i2printf@ap,f,c
 20565  001A02  0E00               	movlw	0
 20566  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20567                           
 20568                           ;doprnt.c: 740: if(!cp)
 20569  001A06  501E               	movf	i2printf@cp,w,c
 20570  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20571  001A0A  A4D8               	btfss	status,2,c
 20572  001A0C  D004               	goto	i2l5975
 20573                           
 20574                           ;doprnt.c: 741: cp = "(null)";
 20575  001A0E  0EB6               	movlw	low STR_122
 20576  001A10  6E1E               	movwf	i2printf@cp,c
 20577  001A12  0EFF               	movlw	high STR_122
 20578  001A14  6E1F               	movwf	i2printf@cp+1,c
 20579  001A16                     i2l5975:
 20580                           
 20581                           ;doprnt.c: 745: len = 0;
 20582  001A16  0E00               	movlw	0
 20583  001A18  6E23               	movwf	i2printf@len+1,c
 20584  001A1A  0E00               	movlw	0
 20585  001A1C  6E22               	movwf	i2printf@len,c
 20586                           
 20587                           ;doprnt.c: 746: while(cp[len])
 20588  001A1E  D002               	goto	i2l5979
 20589  001A20                     i2l5977:
 20590                           
 20591                           ;doprnt.c: 747: len++;
 20592  001A20  4A22               	infsnz	i2printf@len,f,c
 20593  001A22  2A23               	incf	i2printf@len+1,f,c
 20594  001A24                     i2l5979:
 20595  001A24  5022               	movf	i2printf@len,w,c
 20596  001A26  241E               	addwf	i2printf@cp,w,c
 20597  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20598  001A2A  5023               	movf	i2printf@len+1,w,c
 20599  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20600  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20601  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20602  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20603  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20604  001A3A  6EF8               	movwf	tblptru,c
 20605  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20606  001A3E  64F7               	cpfsgt	tblptrh,c
 20607  001A40  D003               	bra	i2u461_47
 20608  001A42  0008               	tblrd		*
 20609  001A44  50F5               	movf	tablat,w,c
 20610  001A46  D005               	bra	i2u461_40
 20611  001A48                     i2u461_47:
 20612  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20613  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20614  001A50  50EF               	movf	indf0,w,c
 20615  001A52                     i2u461_40:
 20616  001A52  0900               	iorlw	0
 20617  001A54  A4D8               	btfss	status,2,c
 20618  001A56  D7E4               	goto	i2l5977
 20619                           
 20620                           ;doprnt.c: 757: if(width > len)
 20621  001A58  5028               	movf	i2printf@width,w,c
 20622  001A5A  5C22               	subwf	i2printf@len,w,c
 20623  001A5C  5029               	movf	i2printf@width+1,w,c
 20624  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20625  001A60  B0D8               	btfsc	status,0,c
 20626  001A62  D005               	goto	i2l5985
 20627                           
 20628                           ;doprnt.c: 758: width -= len;
 20629  001A64  5022               	movf	i2printf@len,w,c
 20630  001A66  5E28               	subwf	i2printf@width,f,c
 20631  001A68  5023               	movf	i2printf@len+1,w,c
 20632  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20633  001A6C  D008               	goto	i2l5989
 20634  001A6E                     i2l5985:
 20635                           
 20636                           ;doprnt.c: 759: else
 20637                           ;doprnt.c: 760: width = 0;
 20638  001A6E  0E00               	movlw	0
 20639  001A70  6E29               	movwf	i2printf@width+1,c
 20640  001A72  0E00               	movlw	0
 20641  001A74  6E28               	movwf	i2printf@width,c
 20642                           
 20643                           ;doprnt.c: 764: while(width--)
 20644  001A76  D003               	goto	i2l5989
 20645  001A78                     i2l5987:
 20646                           
 20647                           ;doprnt.c: 765: (putch(' ') );
 20648  001A78  0E20               	movlw	32
 20649  001A7A  EC2C  F026         	call	i2_putch
 20650  001A7E                     i2l5989:
 20651  001A7E  0628               	decf	i2printf@width,f,c
 20652  001A80  A0D8               	btfss	status,0,c
 20653  001A82  0629               	decf	i2printf@width+1,f,c
 20654  001A84  2828               	incf	i2printf@width,w,c
 20655  001A86  E1F8               	bnz	i2l5987
 20656  001A88  2829               	incf	i2printf@width+1,w,c
 20657  001A8A  B4D8               	btfsc	status,2,c
 20658  001A8C  D016               	goto	i2l5995
 20659  001A8E  D7F4               	goto	i2l5987
 20660  001A90                     i2l5991:
 20661                           
 20662                           ;doprnt.c: 768: (putch(*cp++) );
 20663  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20664  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20665  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20666  001A9A  6EF8               	movwf	tblptru,c
 20667  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20668  001A9E  64F7               	cpfsgt	tblptrh,c
 20669  001AA0  D003               	bra	i2u465_47
 20670  001AA2  0008               	tblrd		*
 20671  001AA4  50F5               	movf	tablat,w,c
 20672  001AA6  D005               	bra	i2u465_40
 20673  001AA8                     i2u465_47:
 20674  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20675  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20676  001AB0  50EF               	movf	indf0,w,c
 20677  001AB2                     i2u465_40:
 20678  001AB2  EC2C  F026         	call	i2_putch
 20679  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20680  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20681  001ABA                     i2l5995:
 20682  001ABA  0622               	decf	i2printf@len,f,c
 20683  001ABC  A0D8               	btfss	status,0,c
 20684  001ABE  0623               	decf	i2printf@len+1,f,c
 20685  001AC0  2822               	incf	i2printf@len,w,c
 20686  001AC2  E1E6               	bnz	i2l5991
 20687  001AC4  2823               	incf	i2printf@len+1,w,c
 20688  001AC6  B4D8               	btfsc	status,2,c
 20689  001AC8  D0DA               	goto	i2l6073
 20690  001ACA  D7E2               	goto	i2l5991
 20691  001ACC                     i2l5997:
 20692                           
 20693                           ;doprnt.c: 818: flag |= 0x40;
 20694  001ACC  8C26               	bsf	i2printf@flag,6,c
 20695                           
 20696                           ;doprnt.c: 822: }
 20697                           
 20698                           ;doprnt.c: 819: break;
 20699  001ACE  D01B               	goto	i2l1327
 20700  001AD0                     i2l6001:
 20701  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20702  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20703  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20704  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20705  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20706  001ADC  6AF8               	clrf	tblptru,c
 20707  001ADE                     	endif
 20708  001ADE                     	if	0	;tblptru may be non-zero
 20709  001ADE                     	endif
 20710  001ADE  0008               	tblrd		*
 20711  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20712  001AE4  5027               	movf	i2printf@c,w,c
 20713                           
 20714                           ; Switch size 1, requested type "space"
 20715                           ; Number of cases is 5, Range of values is 0 to 117
 20716                           ; switch strategies available:
 20717                           ; Name         Instructions Cycles
 20718                           ; simple_byte           16     9 (average)
 20719                           ;	Chosen strategy is simple_byte
 20720  001AE6  0A00               	xorlw	0	; case 0
 20721  001AE8  B4D8               	btfsc	status,2,c
 20722  001AEA  0012               	return	
 20723  001AEC  0A64               	xorlw	100	; case 100
 20724  001AEE  B4D8               	btfsc	status,2,c
 20725  001AF0  D00A               	goto	i2l1327
 20726  001AF2  0A0D               	xorlw	13	; case 105
 20727  001AF4  B4D8               	btfsc	status,2,c
 20728  001AF6  D007               	goto	i2l1327
 20729  001AF8  0A1A               	xorlw	26	; case 115
 20730  001AFA  B4D8               	btfsc	status,2,c
 20731  001AFC  D778               	goto	i2l5967
 20732  001AFE  0A06               	xorlw	6	; case 117
 20733  001B00  B4D8               	btfsc	status,2,c
 20734  001B02  D7E4               	goto	i2l5997
 20735  001B04  D0BC               	goto	i2l6073
 20736  001B06                     i2l1327:
 20737                           
 20738                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20739  001B06  BC26               	btfsc	i2printf@flag,6,c
 20740  001B08  D015               	goto	i2l6013
 20741                           
 20742                           ;doprnt.c: 1253: {
 20743                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20744  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20745  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20746  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20747  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20748  001B1A  0E02               	movlw	2
 20749  001B1C  2620               	addwf	i2printf@ap,f,c
 20750  001B1E  0E00               	movlw	0
 20751  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20752                           
 20753                           ;doprnt.c: 1261: if((int)val < 0) {
 20754  001B22  AE25               	btfss	i2printf@val+1,7,c
 20755  001B24  D013               	goto	i2l6017
 20756                           
 20757                           ;doprnt.c: 1262: flag |= 0x03;
 20758  001B26  0E03               	movlw	3
 20759  001B28  1226               	iorwf	i2printf@flag,f,c
 20760                           
 20761                           ;doprnt.c: 1263: val = -val;
 20762  001B2A  6C24               	negf	i2printf@val,c
 20763  001B2C  1E25               	comf	i2printf@val+1,f,c
 20764  001B2E  B0D8               	btfsc	status,0,c
 20765  001B30  2A25               	incf	i2printf@val+1,f,c
 20766                           
 20767                           ;doprnt.c: 1264: }
 20768                           ;doprnt.c: 1266: }
 20769  001B32  D00C               	goto	i2l6017
 20770  001B34                     i2l6013:
 20771                           
 20772                           ;doprnt.c: 1268: else
 20773                           ;doprnt.c: 1273: {
 20774                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20775  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20776  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20777  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20778  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20779  001B44  0E02               	movlw	2
 20780  001B46  2620               	addwf	i2printf@ap,f,c
 20781  001B48  0E00               	movlw	0
 20782  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20783  001B4C                     i2l6017:
 20784                           
 20785                           ;doprnt.c: 1287: }
 20786                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20787  001B4C  0E01               	movlw	1
 20788  001B4E  6E27               	movwf	i2printf@c,c
 20789  001B50                     i2l6019:
 20790  001B50  0E05               	movlw	5
 20791  001B52  1827               	xorwf	i2printf@c,w,c
 20792  001B54  B4D8               	btfsc	status,2,c
 20793  001B56  D015               	goto	i2l6031
 20794                           
 20795                           ;doprnt.c: 1306: if(val < dpowers[c])
 20796  001B58  5027               	movf	i2printf@c,w,c
 20797  001B5A  0D02               	mullw	2
 20798  001B5C  0E00               	movlw	low _dpowers
 20799  001B5E  24F3               	addwf	prodl,w,c
 20800  001B60  6EF6               	movwf	tblptrl,c
 20801  001B62  0EFB               	movlw	high _dpowers
 20802  001B64  20F4               	addwfc	prodh,w,c
 20803  001B66  6EF7               	movwf	tblptrh,c
 20804  001B68                     	if	1	;There are 3 active tblptr bytes
 20805  001B68  6AF8               	clrf	tblptru,c
 20806  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20807  001B6C  22F8               	addwfc	tblptru,f,c
 20808  001B6E                     	endif
 20809  001B6E  0009               	tblrd		*+
 20810  001B70  50F5               	movf	tablat,w,c
 20811  001B72  5C24               	subwf	i2printf@val,w,c
 20812  001B74  0009               	tblrd		*+
 20813  001B76  50F5               	movf	tablat,w,c
 20814  001B78  5825               	subwfb	i2printf@val+1,w,c
 20815  001B7A  A0D8               	btfss	status,0,c
 20816  001B7C  D002               	goto	i2l6031
 20817                           
 20818                           ;doprnt.c: 1307: break;
 20819  001B7E  2A27               	incf	i2printf@c,f,c
 20820  001B80  D7E7               	goto	i2l6019
 20821  001B82                     i2l6031:
 20822                           
 20823                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20824  001B82  5028               	movf	i2printf@width,w,c
 20825  001B84  1029               	iorwf	i2printf@width+1,w,c
 20826  001B86  B4D8               	btfsc	status,2,c
 20827  001B88  D009               	goto	i2l6037
 20828  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20829  001B8E  0E03               	movlw	3
 20830  001B90  1619               	andwf	??i2_printf,f,c
 20831  001B92  B4D8               	btfsc	status,2,c
 20832  001B94  D003               	goto	i2l6037
 20833                           
 20834                           ;doprnt.c: 1346: width--;
 20835  001B96  0628               	decf	i2printf@width,f,c
 20836  001B98  A0D8               	btfss	status,0,c
 20837  001B9A  0629               	decf	i2printf@width+1,f,c
 20838  001B9C                     i2l6037:
 20839                           
 20840                           ;doprnt.c: 1381: if(width > c)
 20841  001B9C  0E80               	movlw	128
 20842  001B9E  BE27               	btfsc	i2printf@c,7,c
 20843  001BA0  0E7F               	movlw	127
 20844  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20845  001BA4  5028               	movf	i2printf@width,w,c
 20846  001BA6  5C27               	subwf	i2printf@c,w,c
 20847  001BA8  5029               	movf	i2printf@width+1,w,c
 20848  001BAA  0A80               	xorlw	128
 20849  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20850  001BAE  B0D8               	btfsc	status,0,c
 20851  001BB0  D007               	goto	i2l6041
 20852                           
 20853                           ;doprnt.c: 1382: width -= c;
 20854  001BB2  5027               	movf	i2printf@c,w,c
 20855  001BB4  5E28               	subwf	i2printf@width,f,c
 20856  001BB6  0E00               	movlw	0
 20857  001BB8  BE27               	btfsc	i2printf@c,7,c
 20858  001BBA  0EFF               	movlw	255
 20859  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20860  001BBE  D004               	goto	i2l6043
 20861  001BC0                     i2l6041:
 20862                           
 20863                           ;doprnt.c: 1383: else
 20864                           ;doprnt.c: 1384: width = 0;
 20865  001BC0  0E00               	movlw	0
 20866  001BC2  6E29               	movwf	i2printf@width+1,c
 20867  001BC4  0E00               	movlw	0
 20868  001BC6  6E28               	movwf	i2printf@width,c
 20869  001BC8                     i2l6043:
 20870                           
 20871                           ;doprnt.c: 1387: if(flag & 0x04) {
 20872  001BC8  A426               	btfss	i2printf@flag,2,c
 20873  001BCA  D014               	goto	i2l6055
 20874                           
 20875                           ;doprnt.c: 1392: if(flag & 0x03)
 20876  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20877  001BD0  0E03               	movlw	3
 20878  001BD2  1619               	andwf	??i2_printf,f,c
 20879  001BD4  B4D8               	btfsc	status,2,c
 20880  001BD6  D003               	goto	i2l6049
 20881                           
 20882                           ;doprnt.c: 1393: (putch('-') );
 20883  001BD8  0E2D               	movlw	45
 20884  001BDA  EC2C  F026         	call	i2_putch
 20885  001BDE                     i2l6049:
 20886                           
 20887                           ;doprnt.c: 1415: if(width)
 20888  001BDE  5028               	movf	i2printf@width,w,c
 20889  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20890  001BE2  B4D8               	btfsc	status,2,c
 20891  001BE4  D01E               	goto	i2l6065
 20892                           
 20893                           ;doprnt.c: 1417: (putch('0') );
 20894                           
 20895                           ;doprnt.c: 1416: do
 20896  001BE6  0E30               	movlw	48
 20897  001BE8  EC2C  F026         	call	i2_putch
 20898                           
 20899                           ;doprnt.c: 1418: while(--width);
 20900  001BEC  0628               	decf	i2printf@width,f,c
 20901  001BEE  A0D8               	btfss	status,0,c
 20902  001BF0  0629               	decf	i2printf@width+1,f,c
 20903  001BF2  D7F5               	goto	i2l6049
 20904  001BF4                     i2l6055:
 20905                           
 20906                           ;doprnt.c: 1422: {
 20907                           ;doprnt.c: 1424: if(width
 20908                           ;doprnt.c: 1428: )
 20909  001BF4  5028               	movf	i2printf@width,w,c
 20910  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20911  001BF8  B4D8               	btfsc	status,2,c
 20912  001BFA  D00A               	goto	i2l6061
 20913  001BFC                     i2l6057:
 20914                           
 20915                           ;doprnt.c: 1430: (putch(' ') );
 20916  001BFC  0E20               	movlw	32
 20917  001BFE  EC2C  F026         	call	i2_putch
 20918                           
 20919                           ;doprnt.c: 1431: while(--width);
 20920  001C02  0628               	decf	i2printf@width,f,c
 20921  001C04  A0D8               	btfss	status,0,c
 20922  001C06  0629               	decf	i2printf@width+1,f,c
 20923  001C08  5028               	movf	i2printf@width,w,c
 20924  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20925  001C0C  A4D8               	btfss	status,2,c
 20926  001C0E  D7F6               	goto	i2l6057
 20927  001C10                     i2l6061:
 20928                           
 20929                           ;doprnt.c: 1438: if(flag & 0x03)
 20930  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20931  001C14  0E03               	movlw	3
 20932  001C16  1619               	andwf	??i2_printf,f,c
 20933  001C18  B4D8               	btfsc	status,2,c
 20934  001C1A  D003               	goto	i2l6065
 20935                           
 20936                           ;doprnt.c: 1439: (putch('-') );
 20937  001C1C  0E2D               	movlw	45
 20938  001C1E  EC2C  F026         	call	i2_putch
 20939  001C22                     i2l6065:
 20940                           
 20941                           ;doprnt.c: 1469: }
 20942                           ;doprnt.c: 1472: prec = c;
 20943  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20944                           
 20945                           ;doprnt.c: 1474: while(prec--) {
 20946  001C26  D027               	goto	i2l6071
 20947  001C28                     i2l6067:
 20948                           
 20949                           ;doprnt.c: 1478: {
 20950                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20951  001C28  501D               	movf	i2printf@prec,w,c
 20952  001C2A  0D02               	mullw	2
 20953  001C2C  0E00               	movlw	low _dpowers
 20954  001C2E  24F3               	addwf	prodl,w,c
 20955  001C30  6EF6               	movwf	tblptrl,c
 20956  001C32  0EFB               	movlw	high _dpowers
 20957  001C34  20F4               	addwfc	prodh,w,c
 20958  001C36  6EF7               	movwf	tblptrh,c
 20959  001C38                     	if	1	;There are 3 active tblptr bytes
 20960  001C38  6AF8               	clrf	tblptru,c
 20961  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20962  001C3C  22F8               	addwfc	tblptru,f,c
 20963  001C3E                     	endif
 20964  001C3E  0009               	tblrd		*+
 20965  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20966  001C44  000A               	tblrd		*-
 20967  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20968  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20969  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20970  001C52  EC78  F022         	call	i2___lwdiv	;wreg free
 20971  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20972  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20973  001C5E  0E00               	movlw	0
 20974  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20975  001C62  0E0A               	movlw	10
 20976  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20977  001C66  EC37  F023         	call	i2___lwmod	;wreg free
 20978  001C6A  5001               	movf	?i2___lwmod,w,c
 20979  001C6C  0F30               	addlw	48
 20980  001C6E  6E27               	movwf	i2printf@c,c
 20981                           
 20982                           ;doprnt.c: 1523: }
 20983                           ;doprnt.c: 1524: (putch(c) );
 20984  001C70  5027               	movf	i2printf@c,w,c
 20985  001C72  EC2C  F026         	call	i2_putch
 20986  001C76                     i2l6071:
 20987  001C76  061D               	decf	i2printf@prec,f,c
 20988  001C78  281D               	incf	i2printf@prec,w,c
 20989  001C7A  A4D8               	btfss	status,2,c
 20990  001C7C  D7D5               	goto	i2l6067
 20991  001C7E                     i2l6073:
 20992  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20993  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20994  001C86  4A0D               	infsnz	i2printf@f,f,c
 20995  001C88  2A0E               	incf	i2printf@f+1,f,c
 20996  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20997  001C8A  6AF8               	clrf	tblptru,c
 20998  001C8C                     	endif
 20999  001C8C                     	if	0	;tblptru may be non-zero
 21000  001C8C                     	endif
 21001  001C8C  0008               	tblrd		*
 21002  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 21003  001C92  5027               	movf	i2printf@c,w,c
 21004  001C94  B4D8               	btfsc	status,2,c
 21005  001C96  0012               	return	
 21006  001C98  D64E               	goto	i2l5943
 21007  001C9A                     __end_ofi2_printf:
 21008                           	opt stack 0
 21009                           pclatu	equ	0xFFB
 21010                           pclath	equ	0xFFA
 21011                           tblptru	equ	0xFF8
 21012                           tblptrh	equ	0xFF7
 21013                           tblptrl	equ	0xFF6
 21014                           tablat	equ	0xFF5
 21015                           prodh	equ	0xFF4
 21016                           prodl	equ	0xFF3
 21017                           intcon	equ	0xFF2
 21018                           intcon2	equ	0xFF1
 21019                           intcon3	equ	0xFF0
 21020                           indf0	equ	0xFEF
 21021                           postinc0	equ	0xFEE
 21022                           fsr0h	equ	0xFEA
 21023                           fsr0l	equ	0xFE9
 21024                           wreg	equ	0xFE8
 21025                           postdec1	equ	0xFE5
 21026                           fsr1h	equ	0xFE2
 21027                           fsr1l	equ	0xFE1
 21028                           indf2	equ	0xFDF
 21029                           postinc2	equ	0xFDE
 21030                           postdec2	equ	0xFDD
 21031                           fsr2h	equ	0xFDA
 21032                           fsr2l	equ	0xFD9
 21033                           status	equ	0xFD8
 21034                           
 21035 ;; *************** function i2_putch *****************
 21036 ;; Defined at:
 21037 ;;		line 20 in file "lcd.c"
 21038 ;; Parameters:    Size  Location     Type
 21039 ;;  data            1    wreg     unsigned char 
 21040 ;; Auto vars:     Size  Location     Type
 21041 ;;  data            1    2[COMRAM] unsigned char 
 21042 ;; Return value:  Size  Location     Type
 21043 ;;                  1    wreg      void 
 21044 ;; Registers used:
 21045 ;;		wreg, status,2, status,0, cstack
 21046 ;; Tracked objects:
 21047 ;;		On entry : 0/0
 21048 ;;		On exit  : 0/0
 21049 ;;		Unchanged: 0/0
 21050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21054 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21055 ;;Total ram usage:        1 bytes
 21056 ;; Hardware stack levels used:    1
 21057 ;; Hardware stack levels required when called:    1
 21058 ;; This function calls:
 21059 ;;		i2_lcdNibble
 21060 ;; This function is called by:
 21061 ;;		i2_printf
 21062 ;; This function uses a non-reentrant model
 21063 ;;
 21064                           
 21065                           	psect	text80
 21066  004C58                     __ptext80:
 21067                           	opt stack 0
 21068  004C58                     i2_putch:
 21069                           	opt stack 19
 21070                           
 21071                           ;incstack = 0
 21072                           ;i2putch@data stored from wreg
 21073  004C58  6E03               	movwf	i2putch@data,c
 21074                           
 21075                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21076  004C5A  848C               	bsf	3980,2,c	;volatile
 21077                           
 21078                           ;lcd.c: 22: lcdNibble(data);
 21079  004C5C  5003               	movf	i2putch@data,w,c
 21080  004C5E  EC4D  F022         	call	i2_lcdNibble
 21081  004C62  0012               	return		;funcret
 21082  004C64                     __end_ofi2_putch:
 21083                           	opt stack 0
 21084                           pclatu	equ	0xFFB
 21085                           pclath	equ	0xFFA
 21086                           tblptru	equ	0xFF8
 21087                           tblptrh	equ	0xFF7
 21088                           tblptrl	equ	0xFF6
 21089                           tablat	equ	0xFF5
 21090                           prodh	equ	0xFF4
 21091                           prodl	equ	0xFF3
 21092                           intcon	equ	0xFF2
 21093                           intcon2	equ	0xFF1
 21094                           intcon3	equ	0xFF0
 21095                           indf0	equ	0xFEF
 21096                           postinc0	equ	0xFEE
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           postdec1	equ	0xFE5
 21101                           fsr1h	equ	0xFE2
 21102                           fsr1l	equ	0xFE1
 21103                           indf2	equ	0xFDF
 21104                           postinc2	equ	0xFDE
 21105                           postdec2	equ	0xFDD
 21106                           fsr2h	equ	0xFDA
 21107                           fsr2l	equ	0xFD9
 21108                           status	equ	0xFD8
 21109                           
 21110 ;; *************** function i2_isdigit *****************
 21111 ;; Defined at:
 21112 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21113 ;; Parameters:    Size  Location     Type
 21114 ;;  c               1    wreg     unsigned char 
 21115 ;; Auto vars:     Size  Location     Type
 21116 ;;  c               1    2[COMRAM] unsigned char 
 21117 ;; Return value:  Size  Location     Type
 21118 ;;		None               void
 21119 ;; Registers used:
 21120 ;;		wreg, status,2, status,0
 21121 ;; Tracked objects:
 21122 ;;		On entry : 0/0
 21123 ;;		On exit  : 0/0
 21124 ;;		Unchanged: 0/0
 21125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21129 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21130 ;;Total ram usage:        3 bytes
 21131 ;; Hardware stack levels used:    1
 21132 ;; This function calls:
 21133 ;;		Nothing
 21134 ;; This function is called by:
 21135 ;;		i2_printf
 21136 ;; This function uses a non-reentrant model
 21137 ;;
 21138                           
 21139                           	psect	text81
 21140  004BB0                     __ptext81:
 21141                           	opt stack 0
 21142  004BB0                     i2_isdigit:
 21143                           	opt stack 20
 21144                           
 21145                           ;incstack = 0
 21146                           ;i2isdigit@c stored from wreg
 21147  004BB0  6E03               	movwf	i2isdigit@c,c
 21148  004BB2  0E00               	movlw	0
 21149  004BB4  6E02               	movwf	i2_isdigit$1963,c
 21150  004BB6  0E3A               	movlw	58
 21151  004BB8  6003               	cpfslt	i2isdigit@c,c
 21152  004BBA  D005               	goto	i2l5647
 21153  004BBC  0E2F               	movlw	47
 21154  004BBE  6403               	cpfsgt	i2isdigit@c,c
 21155  004BC0  D002               	goto	i2l5647
 21156  004BC2  0E01               	movlw	1
 21157  004BC4  6E02               	movwf	i2_isdigit$1963,c
 21158  004BC6                     i2l5647:
 21159  004BC6  C002  F001         	movff	i2_isdigit$1963,??i2_isdigit
 21160  004BCA  3001               	rrcf	??i2_isdigit,w,c
 21161  004BCC  0012               	return	
 21162  004BCE                     __end_ofi2_isdigit:
 21163                           	opt stack 0
 21164                           pclatu	equ	0xFFB
 21165                           pclath	equ	0xFFA
 21166                           tblptru	equ	0xFF8
 21167                           tblptrh	equ	0xFF7
 21168                           tblptrl	equ	0xFF6
 21169                           tablat	equ	0xFF5
 21170                           prodh	equ	0xFF4
 21171                           prodl	equ	0xFF3
 21172                           intcon	equ	0xFF2
 21173                           intcon2	equ	0xFF1
 21174                           intcon3	equ	0xFF0
 21175                           indf0	equ	0xFEF
 21176                           postinc0	equ	0xFEE
 21177                           fsr0h	equ	0xFEA
 21178                           fsr0l	equ	0xFE9
 21179                           wreg	equ	0xFE8
 21180                           postdec1	equ	0xFE5
 21181                           fsr1h	equ	0xFE2
 21182                           fsr1l	equ	0xFE1
 21183                           indf2	equ	0xFDF
 21184                           postinc2	equ	0xFDE
 21185                           postdec2	equ	0xFDD
 21186                           fsr2h	equ	0xFDA
 21187                           fsr2l	equ	0xFD9
 21188                           status	equ	0xFD8
 21189                           
 21190 ;; *************** function i2___wmul *****************
 21191 ;; Defined at:
 21192 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 21193 ;; Parameters:    Size  Location     Type
 21194 ;;  multiplier      2    0[COMRAM] unsigned int 
 21195 ;;  multiplicand    2    2[COMRAM] unsigned int 
 21196 ;; Auto vars:     Size  Location     Type
 21197 ;;  __wmul          2    4[COMRAM] unsigned int 
 21198 ;; Return value:  Size  Location     Type
 21199 ;;                  2    0[COMRAM] unsigned int 
 21200 ;; Registers used:
 21201 ;;		wreg, status,2, status,0, prodl, prodh
 21202 ;; Tracked objects:
 21203 ;;		On entry : 0/0
 21204 ;;		On exit  : 0/0
 21205 ;;		Unchanged: 0/0
 21206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21211 ;;Total ram usage:        6 bytes
 21212 ;; Hardware stack levels used:    1
 21213 ;; This function calls:
 21214 ;;		Nothing
 21215 ;; This function is called by:
 21216 ;;		_printSortTimer
 21217 ;;		_retrieveLog
 21218 ;;		i2_printf
 21219 ;; This function uses a non-reentrant model
 21220 ;;
 21221                           
 21222                           	psect	text82
 21223  004AFC                     __ptext82:
 21224                           	opt stack 0
 21225  004AFC                     i2___wmul:
 21226                           	opt stack 20
 21227                           
 21228                           ;incstack = 0
 21229  004AFC  5001               	movf	i2___wmul@multiplier,w,c
 21230  004AFE  0203               	mulwf	i2___wmul@multiplicand,c
 21231  004B00  CFF3 F005          	movff	prodl,i2___wmul@product
 21232  004B04  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21233  004B08  5001               	movf	i2___wmul@multiplier,w,c
 21234  004B0A  0204               	mulwf	i2___wmul@multiplicand+1,c
 21235  004B0C  50F3               	movf	prodl,w,c
 21236  004B0E  2606               	addwf	i2___wmul@product+1,f,c
 21237  004B10  5002               	movf	i2___wmul@multiplier+1,w,c
 21238  004B12  0203               	mulwf	i2___wmul@multiplicand,c
 21239  004B14  50F3               	movf	prodl,w,c
 21240  004B16  2606               	addwf	i2___wmul@product+1,f,c
 21241  004B18  C005  F001         	movff	i2___wmul@product,?i2___wmul
 21242  004B1C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 21243  004B20  0012               	return	
 21244  004B22                     __end_ofi2___wmul:
 21245                           	opt stack 0
 21246                           pclatu	equ	0xFFB
 21247                           pclath	equ	0xFFA
 21248                           tblptru	equ	0xFF8
 21249                           tblptrh	equ	0xFF7
 21250                           tblptrl	equ	0xFF6
 21251                           tablat	equ	0xFF5
 21252                           prodh	equ	0xFF4
 21253                           prodl	equ	0xFF3
 21254                           intcon	equ	0xFF2
 21255                           intcon2	equ	0xFF1
 21256                           intcon3	equ	0xFF0
 21257                           indf0	equ	0xFEF
 21258                           postinc0	equ	0xFEE
 21259                           fsr0h	equ	0xFEA
 21260                           fsr0l	equ	0xFE9
 21261                           wreg	equ	0xFE8
 21262                           postdec1	equ	0xFE5
 21263                           fsr1h	equ	0xFE2
 21264                           fsr1l	equ	0xFE1
 21265                           indf2	equ	0xFDF
 21266                           postinc2	equ	0xFDE
 21267                           postdec2	equ	0xFDD
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function i2___lwmod *****************
 21273 ;; Defined at:
 21274 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;  dividend        2    0[COMRAM] unsigned int 
 21277 ;;  divisor         2    2[COMRAM] unsigned int 
 21278 ;; Auto vars:     Size  Location     Type
 21279 ;;  __lwmod         1    4[COMRAM] unsigned char 
 21280 ;; Return value:  Size  Location     Type
 21281 ;;                  2    0[COMRAM] unsigned int 
 21282 ;; Registers used:
 21283 ;;		wreg, status,2, status,0
 21284 ;; Tracked objects:
 21285 ;;		On entry : 0/0
 21286 ;;		On exit  : 0/0
 21287 ;;		Unchanged: 0/0
 21288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21289 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21293 ;;Total ram usage:        5 bytes
 21294 ;; Hardware stack levels used:    1
 21295 ;; This function calls:
 21296 ;;		Nothing
 21297 ;; This function is called by:
 21298 ;;		_printSortTimer
 21299 ;;		i2_printf
 21300 ;; This function uses a non-reentrant model
 21301 ;;
 21302                           
 21303                           	psect	text83
 21304  00466E                     __ptext83:
 21305                           	opt stack 0
 21306  00466E                     i2___lwmod:
 21307                           	opt stack 20
 21308                           
 21309                           ;incstack = 0
 21310  00466E  5003               	movf	i2___lwmod@divisor,w,c
 21311  004670  1004               	iorwf	i2___lwmod@divisor+1,w,c
 21312  004672  B4D8               	btfsc	status,2,c
 21313  004674  D018               	goto	i2l1784
 21314  004676  0E01               	movlw	1
 21315  004678  6E05               	movwf	i2___lwmod@counter,c
 21316  00467A  D004               	goto	i2l5679
 21317  00467C                     i2l5677:
 21318  00467C  90D8               	bcf	status,0,c
 21319  00467E  3603               	rlcf	i2___lwmod@divisor,f,c
 21320  004680  3604               	rlcf	i2___lwmod@divisor+1,f,c
 21321  004682  2A05               	incf	i2___lwmod@counter,f,c
 21322  004684                     i2l5679:
 21323  004684  AE04               	btfss	i2___lwmod@divisor+1,7,c
 21324  004686  D7FA               	goto	i2l5677
 21325  004688                     i2l5681:
 21326  004688  5003               	movf	i2___lwmod@divisor,w,c
 21327  00468A  5C01               	subwf	i2___lwmod@dividend,w,c
 21328  00468C  5004               	movf	i2___lwmod@divisor+1,w,c
 21329  00468E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 21330  004690  A0D8               	btfss	status,0,c
 21331  004692  D004               	goto	i2l5685
 21332  004694  5003               	movf	i2___lwmod@divisor,w,c
 21333  004696  5E01               	subwf	i2___lwmod@dividend,f,c
 21334  004698  5004               	movf	i2___lwmod@divisor+1,w,c
 21335  00469A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 21336  00469C                     i2l5685:
 21337  00469C  90D8               	bcf	status,0,c
 21338  00469E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 21339  0046A0  3203               	rrcf	i2___lwmod@divisor,f,c
 21340  0046A2  2E05               	decfsz	i2___lwmod@counter,f,c
 21341  0046A4  D7F1               	goto	i2l5681
 21342  0046A6                     i2l1784:
 21343  0046A6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 21344  0046AA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 21345  0046AE  0012               	return		;funcret
 21346  0046B0                     __end_ofi2___lwmod:
 21347                           	opt stack 0
 21348                           pclatu	equ	0xFFB
 21349                           pclath	equ	0xFFA
 21350                           tblptru	equ	0xFF8
 21351                           tblptrh	equ	0xFF7
 21352                           tblptrl	equ	0xFF6
 21353                           tablat	equ	0xFF5
 21354                           prodh	equ	0xFF4
 21355                           prodl	equ	0xFF3
 21356                           intcon	equ	0xFF2
 21357                           intcon2	equ	0xFF1
 21358                           intcon3	equ	0xFF0
 21359                           indf0	equ	0xFEF
 21360                           postinc0	equ	0xFEE
 21361                           fsr0h	equ	0xFEA
 21362                           fsr0l	equ	0xFE9
 21363                           wreg	equ	0xFE8
 21364                           postdec1	equ	0xFE5
 21365                           fsr1h	equ	0xFE2
 21366                           fsr1l	equ	0xFE1
 21367                           indf2	equ	0xFDF
 21368                           postinc2	equ	0xFDE
 21369                           postdec2	equ	0xFDD
 21370                           fsr2h	equ	0xFDA
 21371                           fsr2l	equ	0xFD9
 21372                           status	equ	0xFD8
 21373                           
 21374 ;; *************** function i2___lwdiv *****************
 21375 ;; Defined at:
 21376 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21377 ;; Parameters:    Size  Location     Type
 21378 ;;  dividend        2    5[COMRAM] unsigned int 
 21379 ;;  divisor         2    7[COMRAM] unsigned int 
 21380 ;; Auto vars:     Size  Location     Type
 21381 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21382 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21383 ;; Return value:  Size  Location     Type
 21384 ;;                  2    5[COMRAM] unsigned int 
 21385 ;; Registers used:
 21386 ;;		wreg, status,2, status,0
 21387 ;; Tracked objects:
 21388 ;;		On entry : 0/0
 21389 ;;		On exit  : 0/0
 21390 ;;		Unchanged: 0/0
 21391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21393 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21395 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21396 ;;Total ram usage:        7 bytes
 21397 ;; Hardware stack levels used:    1
 21398 ;; This function calls:
 21399 ;;		Nothing
 21400 ;; This function is called by:
 21401 ;;		_printSortTimer
 21402 ;;		i2_printf
 21403 ;; This function uses a non-reentrant model
 21404 ;;
 21405                           
 21406                           	psect	text84
 21407  0044F0                     __ptext84:
 21408                           	opt stack 0
 21409  0044F0                     i2___lwdiv:
 21410                           	opt stack 20
 21411                           
 21412                           ;incstack = 0
 21413  0044F0  0E00               	movlw	0
 21414  0044F2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21415  0044F4  0E00               	movlw	0
 21416  0044F6  6E0A               	movwf	i2___lwdiv@quotient,c
 21417  0044F8  5008               	movf	i2___lwdiv@divisor,w,c
 21418  0044FA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21419  0044FC  B4D8               	btfsc	status,2,c
 21420  0044FE  D01C               	goto	i2l1774
 21421  004500  0E01               	movlw	1
 21422  004502  6E0C               	movwf	i2___lwdiv@counter,c
 21423  004504  D004               	goto	i2l5659
 21424  004506                     i2l5657:
 21425  004506  90D8               	bcf	status,0,c
 21426  004508  3608               	rlcf	i2___lwdiv@divisor,f,c
 21427  00450A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21428  00450C  2A0C               	incf	i2___lwdiv@counter,f,c
 21429  00450E                     i2l5659:
 21430  00450E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21431  004510  D7FA               	goto	i2l5657
 21432  004512                     i2l5661:
 21433  004512  90D8               	bcf	status,0,c
 21434  004514  360A               	rlcf	i2___lwdiv@quotient,f,c
 21435  004516  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21436  004518  5008               	movf	i2___lwdiv@divisor,w,c
 21437  00451A  5C06               	subwf	i2___lwdiv@dividend,w,c
 21438  00451C  5009               	movf	i2___lwdiv@divisor+1,w,c
 21439  00451E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21440  004520  A0D8               	btfss	status,0,c
 21441  004522  D005               	goto	i2l5669
 21442  004524  5008               	movf	i2___lwdiv@divisor,w,c
 21443  004526  5E06               	subwf	i2___lwdiv@dividend,f,c
 21444  004528  5009               	movf	i2___lwdiv@divisor+1,w,c
 21445  00452A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21446  00452C  800A               	bsf	i2___lwdiv@quotient,0,c
 21447  00452E                     i2l5669:
 21448  00452E  90D8               	bcf	status,0,c
 21449  004530  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21450  004532  3208               	rrcf	i2___lwdiv@divisor,f,c
 21451  004534  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21452  004536  D7ED               	goto	i2l5661
 21453  004538                     i2l1774:
 21454  004538  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21455  00453C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21456  004540  0012               	return		;funcret
 21457  004542                     __end_ofi2___lwdiv:
 21458                           	opt stack 0
 21459                           pclatu	equ	0xFFB
 21460                           pclath	equ	0xFFA
 21461                           tblptru	equ	0xFF8
 21462                           tblptrh	equ	0xFF7
 21463                           tblptrl	equ	0xFF6
 21464                           tablat	equ	0xFF5
 21465                           prodh	equ	0xFF4
 21466                           prodl	equ	0xFF3
 21467                           intcon	equ	0xFF2
 21468                           intcon2	equ	0xFF1
 21469                           intcon3	equ	0xFF0
 21470                           indf0	equ	0xFEF
 21471                           postinc0	equ	0xFEE
 21472                           fsr0h	equ	0xFEA
 21473                           fsr0l	equ	0xFE9
 21474                           wreg	equ	0xFE8
 21475                           postdec1	equ	0xFE5
 21476                           fsr1h	equ	0xFE2
 21477                           fsr1l	equ	0xFE1
 21478                           indf2	equ	0xFDF
 21479                           postinc2	equ	0xFDE
 21480                           postdec2	equ	0xFDD
 21481                           fsr2h	equ	0xFDA
 21482                           fsr2l	equ	0xFD9
 21483                           status	equ	0xFD8
 21484                           
 21485 ;; *************** function i2_lcdInst *****************
 21486 ;; Defined at:
 21487 ;;		line 15 in file "lcd.c"
 21488 ;; Parameters:    Size  Location     Type
 21489 ;;  data            1    wreg     unsigned char 
 21490 ;; Auto vars:     Size  Location     Type
 21491 ;;  data            1    2[COMRAM] unsigned char 
 21492 ;; Return value:  Size  Location     Type
 21493 ;;                  1    wreg      void 
 21494 ;; Registers used:
 21495 ;;		wreg, status,2, status,0, cstack
 21496 ;; Tracked objects:
 21497 ;;		On entry : 0/0
 21498 ;;		On exit  : 0/0
 21499 ;;		Unchanged: 0/0
 21500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;Total ram usage:        1 bytes
 21506 ;; Hardware stack levels used:    1
 21507 ;; Hardware stack levels required when called:    1
 21508 ;; This function calls:
 21509 ;;		i2_lcdNibble
 21510 ;; This function is called by:
 21511 ;;		_change_state_to_menu_11
 21512 ;;		_change_state_to_menu_23
 21513 ;;		_change_state_to_logs_11
 21514 ;;		_change_state_to_logs_12
 21515 ;;		_change_state_to_logs_22
 21516 ;;		_change_state_to_logs_23
 21517 ;;		_change_state_to_logs_33
 21518 ;;		_change_state_to_logs_34
 21519 ;;		_printSortTimer
 21520 ;;		i2_change_state_to_menu_start
 21521 ;;		i2_change_state_to_menu_12
 21522 ;;		i2_change_state_to_menu_22
 21523 ;;		i2_printRTC
 21524 ;; This function uses a non-reentrant model
 21525 ;;
 21526                           
 21527                           	psect	text85
 21528  004C64                     __ptext85:
 21529                           	opt stack 0
 21530  004C64                     i2_lcdInst:
 21531                           	opt stack 19
 21532                           
 21533                           ;incstack = 0
 21534                           ;i2lcdInst@data stored from wreg
 21535  004C64  6E03               	movwf	i2lcdInst@data,c
 21536                           
 21537                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21538  004C66  948C               	bcf	3980,2,c	;volatile
 21539                           
 21540                           ;lcd.c: 17: lcdNibble(data);
 21541  004C68  5003               	movf	i2lcdInst@data,w,c
 21542  004C6A  EC4D  F022         	call	i2_lcdNibble
 21543  004C6E  0012               	return		;funcret
 21544  004C70                     __end_ofi2_lcdInst:
 21545                           	opt stack 0
 21546                           pclatu	equ	0xFFB
 21547                           pclath	equ	0xFFA
 21548                           tblptru	equ	0xFF8
 21549                           tblptrh	equ	0xFF7
 21550                           tblptrl	equ	0xFF6
 21551                           tablat	equ	0xFF5
 21552                           prodh	equ	0xFF4
 21553                           prodl	equ	0xFF3
 21554                           intcon	equ	0xFF2
 21555                           intcon2	equ	0xFF1
 21556                           intcon3	equ	0xFF0
 21557                           indf0	equ	0xFEF
 21558                           postinc0	equ	0xFEE
 21559                           fsr0h	equ	0xFEA
 21560                           fsr0l	equ	0xFE9
 21561                           wreg	equ	0xFE8
 21562                           postdec1	equ	0xFE5
 21563                           fsr1h	equ	0xFE2
 21564                           fsr1l	equ	0xFE1
 21565                           indf2	equ	0xFDF
 21566                           postinc2	equ	0xFDE
 21567                           postdec2	equ	0xFDD
 21568                           fsr2h	equ	0xFDA
 21569                           fsr2l	equ	0xFD9
 21570                           status	equ	0xFD8
 21571                           
 21572 ;; *************** function i2_lcdNibble *****************
 21573 ;; Defined at:
 21574 ;;		line 25 in file "lcd.c"
 21575 ;; Parameters:    Size  Location     Type
 21576 ;;  data            1    wreg     unsigned char 
 21577 ;; Auto vars:     Size  Location     Type
 21578 ;;  data            1    1[COMRAM] unsigned char 
 21579 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21580 ;; Return value:  Size  Location     Type
 21581 ;;                  1    wreg      void 
 21582 ;; Registers used:
 21583 ;;		wreg, status,2, status,0
 21584 ;; Tracked objects:
 21585 ;;		On entry : 0/0
 21586 ;;		On exit  : 0/0
 21587 ;;		Unchanged: 0/0
 21588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21593 ;;Total ram usage:        2 bytes
 21594 ;; Hardware stack levels used:    1
 21595 ;; This function calls:
 21596 ;;		Nothing
 21597 ;; This function is called by:
 21598 ;;		i2_lcdInst
 21599 ;;		i2_putch
 21600 ;; This function uses a non-reentrant model
 21601 ;;
 21602                           
 21603                           	psect	text86
 21604  00449A                     __ptext86:
 21605                           	opt stack 0
 21606  00449A                     i2_lcdNibble:
 21607                           	opt stack 19
 21608                           
 21609                           ;incstack = 0
 21610                           ;i2lcdNibble@data stored from wreg
 21611  00449A  6E02               	movwf	i2lcdNibble@data,c
 21612                           
 21613                           ;lcd.c: 27: char temp = data & 0xF0;
 21614  00449C  5002               	movf	i2lcdNibble@data,w,c
 21615  00449E  0BF0               	andlw	240
 21616  0044A0  6E01               	movwf	i2lcdNibble@temp,c
 21617                           
 21618                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21619  0044A2  508C               	movf	3980,w,c	;volatile
 21620  0044A4  0B0F               	andlw	15
 21621  0044A6  6E8C               	movwf	3980,c	;volatile
 21622                           
 21623                           ;lcd.c: 29: LATD = temp | LATD;
 21624  0044A8  5001               	movf	i2lcdNibble@temp,w,c
 21625  0044AA  108C               	iorwf	3980,w,c	;volatile
 21626  0044AC  6E8C               	movwf	3980,c	;volatile
 21627                           
 21628                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21629  0044AE  868C               	bsf	3980,3,c	;volatile
 21630                           
 21631                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21632  0044B0  0E42               	movlw	66
 21633  0044B2                     i2u917_47:
 21634  0044B2  2EE8               	decfsz	wreg,f,c
 21635  0044B4  D7FE               	bra	i2u917_47
 21636  0044B6  D000               	nop2	
 21637                           
 21638                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21639  0044B8  968C               	bcf	3980,3,c	;volatile
 21640                           
 21641                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21642  0044BA  0E42               	movlw	66
 21643  0044BC                     i2u918_47:
 21644  0044BC  2EE8               	decfsz	wreg,f,c
 21645  0044BE  D7FE               	bra	i2u918_47
 21646  0044C0  D000               	nop2	
 21647                           
 21648                           ;lcd.c: 36: data = data << 4;
 21649  0044C2  3802               	swapf	i2lcdNibble@data,w,c
 21650  0044C4  0BF0               	andlw	240
 21651  0044C6  6E02               	movwf	i2lcdNibble@data,c
 21652                           
 21653                           ;lcd.c: 38: temp = data & 0xF0;
 21654  0044C8  5002               	movf	i2lcdNibble@data,w,c
 21655  0044CA  0BF0               	andlw	240
 21656  0044CC  6E01               	movwf	i2lcdNibble@temp,c
 21657                           
 21658                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21659  0044CE  508C               	movf	3980,w,c	;volatile
 21660  0044D0  0B0F               	andlw	15
 21661  0044D2  6E8C               	movwf	3980,c	;volatile
 21662                           
 21663                           ;lcd.c: 40: LATD = temp | LATD;
 21664  0044D4  5001               	movf	i2lcdNibble@temp,w,c
 21665  0044D6  108C               	iorwf	3980,w,c	;volatile
 21666  0044D8  6E8C               	movwf	3980,c	;volatile
 21667                           
 21668                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21669  0044DA  868C               	bsf	3980,3,c	;volatile
 21670                           
 21671                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21672  0044DC  0E42               	movlw	66
 21673  0044DE                     i2u919_47:
 21674  0044DE  2EE8               	decfsz	wreg,f,c
 21675  0044E0  D7FE               	bra	i2u919_47
 21676  0044E2  D000               	nop2	
 21677                           
 21678                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21679  0044E4  968C               	bcf	3980,3,c	;volatile
 21680                           
 21681                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21682  0044E6  0E42               	movlw	66
 21683  0044E8                     i2u920_47:
 21684  0044E8  2EE8               	decfsz	wreg,f,c
 21685  0044EA  D7FE               	bra	i2u920_47
 21686  0044EC  D000               	nop2	
 21687  0044EE  0012               	return		;funcret
 21688  0044F0                     __end_ofi2_lcdNibble:
 21689                           	opt stack 0
 21690                           pclatu	equ	0xFFB
 21691                           pclath	equ	0xFFA
 21692                           tblptru	equ	0xFF8
 21693                           tblptrh	equ	0xFF7
 21694                           tblptrl	equ	0xFF6
 21695                           tablat	equ	0xFF5
 21696                           prodh	equ	0xFF4
 21697                           prodl	equ	0xFF3
 21698                           intcon	equ	0xFF2
 21699                           intcon2	equ	0xFF1
 21700                           intcon3	equ	0xFF0
 21701                           indf0	equ	0xFEF
 21702                           postinc0	equ	0xFEE
 21703                           fsr0h	equ	0xFEA
 21704                           fsr0l	equ	0xFE9
 21705                           wreg	equ	0xFE8
 21706                           postdec1	equ	0xFE5
 21707                           fsr1h	equ	0xFE2
 21708                           fsr1l	equ	0xFE1
 21709                           indf2	equ	0xFDF
 21710                           postinc2	equ	0xFDE
 21711                           postdec2	equ	0xFDD
 21712                           fsr2h	equ	0xFDA
 21713                           fsr2l	equ	0xFD9
 21714                           status	equ	0xFD8
 21715                           
 21716 ;; *************** function i2_getRTC *****************
 21717 ;; Defined at:
 21718 ;;		line 44 in file "RTC.c"
 21719 ;; Parameters:    Size  Location     Type
 21720 ;;		None
 21721 ;; Auto vars:     Size  Location     Type
 21722 ;;  getRTC          2    3[COMRAM] int 
 21723 ;; Return value:  Size  Location     Type
 21724 ;;                  1    wreg      void 
 21725 ;; Registers used:
 21726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21727 ;; Tracked objects:
 21728 ;;		On entry : 0/0
 21729 ;;		On exit  : 0/0
 21730 ;;		Unchanged: 0/0
 21731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21736 ;;Total ram usage:        2 bytes
 21737 ;; Hardware stack levels used:    1
 21738 ;; Hardware stack levels required when called:    2
 21739 ;; This function calls:
 21740 ;;		i2_I2C_Master_Read
 21741 ;;		i2_I2C_Master_Start
 21742 ;;		i2_I2C_Master_Stop
 21743 ;;		i2_I2C_Master_Write
 21744 ;; This function is called by:
 21745 ;;		_printSortTimer
 21746 ;;		i2_printRTC
 21747 ;; This function uses a non-reentrant model
 21748 ;;
 21749                           
 21750                           	psect	text87
 21751  0041EC                     __ptext87:
 21752                           	opt stack 0
 21753  0041EC                     i2_getRTC:
 21754                           	opt stack 18
 21755                           
 21756                           ;RTC.c: 48: I2C_Master_Start();
 21757                           
 21758                           ;incstack = 0
 21759  0041EC  EC52  F026         	call	i2_I2C_Master_Start	;wreg free
 21760                           
 21761                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21762  0041F0  0E00               	movlw	0
 21763  0041F2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21764  0041F4  0ED0               	movlw	208
 21765  0041F6  6E02               	movwf	i2I2C_Master_Write@d,c
 21766  0041F8  EC3D  F026         	call	i2_I2C_Master_Write	;wreg free
 21767                           
 21768                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21769  0041FC  0E00               	movlw	0
 21770  0041FE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21771  004200  0E00               	movlw	0
 21772  004202  6E02               	movwf	i2I2C_Master_Write@d,c
 21773  004204  EC3D  F026         	call	i2_I2C_Master_Write	;wreg free
 21774                           
 21775                           ;RTC.c: 51: I2C_Master_Stop();
 21776  004208  EC4E  F026         	call	i2_I2C_Master_Stop	;wreg free
 21777                           
 21778                           ;RTC.c: 54: I2C_Master_Start();
 21779  00420C  EC52  F026         	call	i2_I2C_Master_Start	;wreg free
 21780                           
 21781                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21782  004210  0E00               	movlw	0
 21783  004212  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21784  004214  0ED1               	movlw	209
 21785  004216  6E02               	movwf	i2I2C_Master_Write@d,c
 21786  004218  EC3D  F026         	call	i2_I2C_Master_Write	;wreg free
 21787                           
 21788                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21789  00421C  0E00               	movlw	0
 21790  00421E  6E05               	movwf	i2getRTC@i+1,c
 21791  004220  0E00               	movlw	0
 21792  004222  6E04               	movwf	i2getRTC@i,c
 21793  004224                     i2l5915:
 21794  004224  BE05               	btfsc	i2getRTC@i+1,7,c
 21795  004226  D006               	goto	i2l5919
 21796  004228  5005               	movf	i2getRTC@i+1,w,c
 21797  00422A  E111               	bnz	i2l5925
 21798  00422C  0E06               	movlw	6
 21799  00422E  5C04               	subwf	i2getRTC@i,w,c
 21800  004230  B0D8               	btfsc	status,0,c
 21801  004232  D00D               	goto	i2l5925
 21802  004234                     i2l5919:
 21803                           
 21804                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21805  004234  0E24               	movlw	low _time
 21806  004236  2404               	addwf	i2getRTC@i,w,c
 21807  004238  6ED9               	movwf	fsr2l,c
 21808  00423A  0E01               	movlw	high _time
 21809  00423C  2005               	addwfc	i2getRTC@i+1,w,c
 21810  00423E  6EDA               	movwf	fsr2h,c
 21811  004240  0E01               	movlw	1
 21812  004242  EC91  F025         	call	i2_I2C_Master_Read
 21813  004246  6EDF               	movwf	indf2,c
 21814  004248  4A04               	infsnz	i2getRTC@i,f,c
 21815  00424A  2A05               	incf	i2getRTC@i+1,f,c
 21816  00424C  D7EB               	goto	i2l5915
 21817  00424E                     i2l5925:
 21818                           
 21819                           ;RTC.c: 58: }
 21820                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21821  00424E  0E00               	movlw	0
 21822  004250  EC91  F025         	call	i2_I2C_Master_Read
 21823  004254  0101               	movlb	1	; () banked
 21824  004256  6F2A               	movwf	(_time+6)& (0+255),b
 21825                           
 21826                           ;RTC.c: 60: I2C_Master_Stop();
 21827  004258  EC4E  F026         	call	i2_I2C_Master_Stop	;wreg free
 21828  00425C  0012               	return		;funcret
 21829  00425E                     __end_ofi2_getRTC:
 21830                           	opt stack 0
 21831                           pclatu	equ	0xFFB
 21832                           pclath	equ	0xFFA
 21833                           tblptru	equ	0xFF8
 21834                           tblptrh	equ	0xFF7
 21835                           tblptrl	equ	0xFF6
 21836                           tablat	equ	0xFF5
 21837                           prodh	equ	0xFF4
 21838                           prodl	equ	0xFF3
 21839                           intcon	equ	0xFF2
 21840                           intcon2	equ	0xFF1
 21841                           intcon3	equ	0xFF0
 21842                           indf0	equ	0xFEF
 21843                           postinc0	equ	0xFEE
 21844                           fsr0h	equ	0xFEA
 21845                           fsr0l	equ	0xFE9
 21846                           wreg	equ	0xFE8
 21847                           postdec1	equ	0xFE5
 21848                           fsr1h	equ	0xFE2
 21849                           fsr1l	equ	0xFE1
 21850                           indf2	equ	0xFDF
 21851                           postinc2	equ	0xFDE
 21852                           postdec2	equ	0xFDD
 21853                           fsr2h	equ	0xFDA
 21854                           fsr2l	equ	0xFD9
 21855                           status	equ	0xFD8
 21856                           
 21857 ;; *************** function i2_I2C_Master_Write *****************
 21858 ;; Defined at:
 21859 ;;		line 43 in file "I2C.c"
 21860 ;; Parameters:    Size  Location     Type
 21861 ;;  d               2    1[COMRAM] unsigned int 
 21862 ;; Auto vars:     Size  Location     Type
 21863 ;;		None
 21864 ;; Return value:  Size  Location     Type
 21865 ;;                  1    wreg      void 
 21866 ;; Registers used:
 21867 ;;		wreg, status,2, status,0, cstack
 21868 ;; Tracked objects:
 21869 ;;		On entry : 0/0
 21870 ;;		On exit  : 0/0
 21871 ;;		Unchanged: 0/0
 21872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21877 ;;Total ram usage:        2 bytes
 21878 ;; Hardware stack levels used:    1
 21879 ;; Hardware stack levels required when called:    1
 21880 ;; This function calls:
 21881 ;;		i2_I2C_Master_Wait
 21882 ;; This function is called by:
 21883 ;;		i2_getRTC
 21884 ;; This function uses a non-reentrant model
 21885 ;;
 21886                           
 21887                           	psect	text88
 21888  004C7A                     __ptext88:
 21889                           	opt stack 0
 21890  004C7A                     i2_I2C_Master_Write:
 21891                           	opt stack 18
 21892                           
 21893                           ;I2C.c: 45: I2C_Master_Wait();
 21894                           
 21895                           ;incstack = 0
 21896  004C7A  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 21897                           
 21898                           ;I2C.c: 46: SSPBUF = d;
 21899  004C7E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21900  004C82  0012               	return		;funcret
 21901  004C84                     __end_ofi2_I2C_Master_Write:
 21902                           	opt stack 0
 21903                           pclatu	equ	0xFFB
 21904                           pclath	equ	0xFFA
 21905                           tblptru	equ	0xFF8
 21906                           tblptrh	equ	0xFF7
 21907                           tblptrl	equ	0xFF6
 21908                           tablat	equ	0xFF5
 21909                           prodh	equ	0xFF4
 21910                           prodl	equ	0xFF3
 21911                           intcon	equ	0xFF2
 21912                           intcon2	equ	0xFF1
 21913                           intcon3	equ	0xFF0
 21914                           indf0	equ	0xFEF
 21915                           postinc0	equ	0xFEE
 21916                           fsr0h	equ	0xFEA
 21917                           fsr0l	equ	0xFE9
 21918                           wreg	equ	0xFE8
 21919                           postdec1	equ	0xFE5
 21920                           fsr1h	equ	0xFE2
 21921                           fsr1l	equ	0xFE1
 21922                           indf2	equ	0xFDF
 21923                           postinc2	equ	0xFDE
 21924                           postdec2	equ	0xFDD
 21925                           fsr2h	equ	0xFDA
 21926                           fsr2l	equ	0xFD9
 21927                           status	equ	0xFD8
 21928                           
 21929 ;; *************** function i2_I2C_Master_Stop *****************
 21930 ;; Defined at:
 21931 ;;		line 37 in file "I2C.c"
 21932 ;; Parameters:    Size  Location     Type
 21933 ;;		None
 21934 ;; Auto vars:     Size  Location     Type
 21935 ;;		None
 21936 ;; Return value:  Size  Location     Type
 21937 ;;                  1    wreg      void 
 21938 ;; Registers used:
 21939 ;;		wreg, status,2, status,0, cstack
 21940 ;; Tracked objects:
 21941 ;;		On entry : 0/0
 21942 ;;		On exit  : 0/0
 21943 ;;		Unchanged: 0/0
 21944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21949 ;;Total ram usage:        0 bytes
 21950 ;; Hardware stack levels used:    1
 21951 ;; Hardware stack levels required when called:    1
 21952 ;; This function calls:
 21953 ;;		i2_I2C_Master_Wait
 21954 ;; This function is called by:
 21955 ;;		i2_getRTC
 21956 ;; This function uses a non-reentrant model
 21957 ;;
 21958                           
 21959                           	psect	text89
 21960  004C9C                     __ptext89:
 21961                           	opt stack 0
 21962  004C9C                     i2_I2C_Master_Stop:
 21963                           	opt stack 18
 21964                           
 21965                           ;I2C.c: 39: I2C_Master_Wait();
 21966                           
 21967                           ;incstack = 0
 21968  004C9C  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 21969                           
 21970                           ;I2C.c: 40: PEN = 1;
 21971  004CA0  84C5               	bsf	4037,2,c	;volatile
 21972  004CA2  0012               	return		;funcret
 21973  004CA4                     __end_ofi2_I2C_Master_Stop:
 21974                           	opt stack 0
 21975                           pclatu	equ	0xFFB
 21976                           pclath	equ	0xFFA
 21977                           tblptru	equ	0xFF8
 21978                           tblptrh	equ	0xFF7
 21979                           tblptrl	equ	0xFF6
 21980                           tablat	equ	0xFF5
 21981                           prodh	equ	0xFF4
 21982                           prodl	equ	0xFF3
 21983                           intcon	equ	0xFF2
 21984                           intcon2	equ	0xFF1
 21985                           intcon3	equ	0xFF0
 21986                           indf0	equ	0xFEF
 21987                           postinc0	equ	0xFEE
 21988                           fsr0h	equ	0xFEA
 21989                           fsr0l	equ	0xFE9
 21990                           wreg	equ	0xFE8
 21991                           postdec1	equ	0xFE5
 21992                           fsr1h	equ	0xFE2
 21993                           fsr1l	equ	0xFE1
 21994                           indf2	equ	0xFDF
 21995                           postinc2	equ	0xFDE
 21996                           postdec2	equ	0xFDD
 21997                           fsr2h	equ	0xFDA
 21998                           fsr2l	equ	0xFD9
 21999                           status	equ	0xFD8
 22000                           
 22001 ;; *************** function i2_I2C_Master_Start *****************
 22002 ;; Defined at:
 22003 ;;		line 31 in file "I2C.c"
 22004 ;; Parameters:    Size  Location     Type
 22005 ;;		None
 22006 ;; Auto vars:     Size  Location     Type
 22007 ;;		None
 22008 ;; Return value:  Size  Location     Type
 22009 ;;                  1    wreg      void 
 22010 ;; Registers used:
 22011 ;;		wreg, status,2, status,0, cstack
 22012 ;; Tracked objects:
 22013 ;;		On entry : 0/0
 22014 ;;		On exit  : 0/0
 22015 ;;		Unchanged: 0/0
 22016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22021 ;;Total ram usage:        0 bytes
 22022 ;; Hardware stack levels used:    1
 22023 ;; Hardware stack levels required when called:    1
 22024 ;; This function calls:
 22025 ;;		i2_I2C_Master_Wait
 22026 ;; This function is called by:
 22027 ;;		i2_getRTC
 22028 ;; This function uses a non-reentrant model
 22029 ;;
 22030                           
 22031                           	psect	text90
 22032  004CA4                     __ptext90:
 22033                           	opt stack 0
 22034  004CA4                     i2_I2C_Master_Start:
 22035                           	opt stack 18
 22036                           
 22037                           ;I2C.c: 33: I2C_Master_Wait();
 22038                           
 22039                           ;incstack = 0
 22040  004CA4  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 22041                           
 22042                           ;I2C.c: 34: SEN = 1;
 22043  004CA8  80C5               	bsf	4037,0,c	;volatile
 22044  004CAA  0012               	return		;funcret
 22045  004CAC                     __end_ofi2_I2C_Master_Start:
 22046                           	opt stack 0
 22047                           pclatu	equ	0xFFB
 22048                           pclath	equ	0xFFA
 22049                           tblptru	equ	0xFF8
 22050                           tblptrh	equ	0xFF7
 22051                           tblptrl	equ	0xFF6
 22052                           tablat	equ	0xFF5
 22053                           prodh	equ	0xFF4
 22054                           prodl	equ	0xFF3
 22055                           intcon	equ	0xFF2
 22056                           intcon2	equ	0xFF1
 22057                           intcon3	equ	0xFF0
 22058                           indf0	equ	0xFEF
 22059                           postinc0	equ	0xFEE
 22060                           fsr0h	equ	0xFEA
 22061                           fsr0l	equ	0xFE9
 22062                           wreg	equ	0xFE8
 22063                           postdec1	equ	0xFE5
 22064                           fsr1h	equ	0xFE2
 22065                           fsr1l	equ	0xFE1
 22066                           indf2	equ	0xFDF
 22067                           postinc2	equ	0xFDE
 22068                           postdec2	equ	0xFDD
 22069                           fsr2h	equ	0xFDA
 22070                           fsr2l	equ	0xFD9
 22071                           status	equ	0xFD8
 22072                           
 22073 ;; *************** function i2_I2C_Master_Read *****************
 22074 ;; Defined at:
 22075 ;;		line 49 in file "I2C.c"
 22076 ;; Parameters:    Size  Location     Type
 22077 ;;  a               1    wreg     unsigned char 
 22078 ;; Auto vars:     Size  Location     Type
 22079 ;;  a               1    1[COMRAM] unsigned char 
 22080 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22081 ;; Return value:  Size  Location     Type
 22082 ;;                  1    wreg      unsigned char 
 22083 ;; Registers used:
 22084 ;;		wreg, status,2, status,0, cstack
 22085 ;; Tracked objects:
 22086 ;;		On entry : 0/0
 22087 ;;		On exit  : 0/0
 22088 ;;		Unchanged: 0/0
 22089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22094 ;;Total ram usage:        2 bytes
 22095 ;; Hardware stack levels used:    1
 22096 ;; Hardware stack levels required when called:    1
 22097 ;; This function calls:
 22098 ;;		i2_I2C_Master_Wait
 22099 ;; This function is called by:
 22100 ;;		i2_getRTC
 22101 ;; This function uses a non-reentrant model
 22102 ;;
 22103                           
 22104                           	psect	text91
 22105  004B22                     __ptext91:
 22106                           	opt stack 0
 22107  004B22                     i2_I2C_Master_Read:
 22108                           	opt stack 18
 22109                           
 22110                           ;incstack = 0
 22111                           ;i2I2C_Master_Read@a stored from wreg
 22112  004B22  6E02               	movwf	i2I2C_Master_Read@a,c
 22113                           
 22114                           ;I2C.c: 51: unsigned char temp;
 22115                           ;I2C.c: 52: I2C_Master_Wait();
 22116  004B24  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 22117                           
 22118                           ;I2C.c: 53: RCEN = 1;
 22119  004B28  86C5               	bsf	4037,3,c	;volatile
 22120                           
 22121                           ;I2C.c: 54: I2C_Master_Wait();
 22122  004B2A  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 22123                           
 22124                           ;I2C.c: 55: temp = SSPBUF;
 22125  004B2E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22126                           
 22127                           ;I2C.c: 56: I2C_Master_Wait();
 22128  004B32  EC13  F026         	call	i2_I2C_Master_Wait	;wreg free
 22129                           
 22130                           ;I2C.c: 57: ACKDT = (a)?0:1;
 22131  004B36  5002               	movf	i2I2C_Master_Read@a,w,c
 22132  004B38  A4D8               	btfss	status,2,c
 22133  004B3A  D002               	goto	i2u406_40
 22134  004B3C  8AC5               	bsf	4037,5,c	;volatile
 22135  004B3E  D001               	goto	i2l5623
 22136  004B40                     i2u406_40:
 22137  004B40  9AC5               	bcf	4037,5,c	;volatile
 22138  004B42                     i2l5623:
 22139                           
 22140                           ;I2C.c: 58: ACKEN = 1;
 22141  004B42  88C5               	bsf	4037,4,c	;volatile
 22142                           
 22143                           ;I2C.c: 59: return temp;
 22144  004B44  5003               	movf	i2I2C_Master_Read@temp,w,c
 22145  004B46  0012               	return	
 22146  004B48                     __end_ofi2_I2C_Master_Read:
 22147                           	opt stack 0
 22148                           pclatu	equ	0xFFB
 22149                           pclath	equ	0xFFA
 22150                           tblptru	equ	0xFF8
 22151                           tblptrh	equ	0xFF7
 22152                           tblptrl	equ	0xFF6
 22153                           tablat	equ	0xFF5
 22154                           prodh	equ	0xFF4
 22155                           prodl	equ	0xFF3
 22156                           intcon	equ	0xFF2
 22157                           intcon2	equ	0xFF1
 22158                           intcon3	equ	0xFF0
 22159                           indf0	equ	0xFEF
 22160                           postinc0	equ	0xFEE
 22161                           fsr0h	equ	0xFEA
 22162                           fsr0l	equ	0xFE9
 22163                           wreg	equ	0xFE8
 22164                           postdec1	equ	0xFE5
 22165                           fsr1h	equ	0xFE2
 22166                           fsr1l	equ	0xFE1
 22167                           indf2	equ	0xFDF
 22168                           postinc2	equ	0xFDE
 22169                           postdec2	equ	0xFDD
 22170                           fsr2h	equ	0xFDA
 22171                           fsr2l	equ	0xFD9
 22172                           status	equ	0xFD8
 22173                           
 22174 ;; *************** function i2_I2C_Master_Wait *****************
 22175 ;; Defined at:
 22176 ;;		line 26 in file "I2C.c"
 22177 ;; Parameters:    Size  Location     Type
 22178 ;;		None
 22179 ;; Auto vars:     Size  Location     Type
 22180 ;;		None
 22181 ;; Return value:  Size  Location     Type
 22182 ;;                  1    wreg      void 
 22183 ;; Registers used:
 22184 ;;		wreg, status,2, status,0
 22185 ;; Tracked objects:
 22186 ;;		On entry : 0/0
 22187 ;;		On exit  : 0/0
 22188 ;;		Unchanged: 0/0
 22189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22194 ;;Total ram usage:        1 bytes
 22195 ;; Hardware stack levels used:    1
 22196 ;; This function calls:
 22197 ;;		Nothing
 22198 ;; This function is called by:
 22199 ;;		i2_I2C_Master_Start
 22200 ;;		i2_I2C_Master_Stop
 22201 ;;		i2_I2C_Master_Write
 22202 ;;		i2_I2C_Master_Read
 22203 ;; This function uses a non-reentrant model
 22204 ;;
 22205                           
 22206                           	psect	text92
 22207  004C26                     __ptext92:
 22208                           	opt stack 0
 22209  004C26                     i2_I2C_Master_Wait:
 22210                           	opt stack 18
 22211  004C26                     i2l64:
 22212  004C26  B4C7               	btfsc	4039,2,c	;volatile
 22213  004C28  D7FE               	goto	i2l64
 22214  004C2A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 22215  004C2E  0E1F               	movlw	31
 22216  004C30  1601               	andwf	??i2_I2C_Master_Wait,f,c
 22217  004C32  B4D8               	btfsc	status,2,c
 22218  004C34  0012               	return	
 22219  004C36  D7F7               	goto	i2l64
 22220  004C38                     __end_ofi2_I2C_Master_Wait:
 22221                           	opt stack 0
 22222                           pclatu	equ	0xFFB
 22223                           pclath	equ	0xFFA
 22224                           tblptru	equ	0xFF8
 22225                           tblptrh	equ	0xFF7
 22226                           tblptrl	equ	0xFF6
 22227                           tablat	equ	0xFF5
 22228                           prodh	equ	0xFF4
 22229                           prodl	equ	0xFF3
 22230                           intcon	equ	0xFF2
 22231                           intcon2	equ	0xFF1
 22232                           intcon3	equ	0xFF0
 22233                           indf0	equ	0xFEF
 22234                           postinc0	equ	0xFEE
 22235                           fsr0h	equ	0xFEA
 22236                           fsr0l	equ	0xFE9
 22237                           wreg	equ	0xFE8
 22238                           postdec1	equ	0xFE5
 22239                           fsr1h	equ	0xFE2
 22240                           fsr1l	equ	0xFE1
 22241                           indf2	equ	0xFDF
 22242                           postinc2	equ	0xFDE
 22243                           postdec2	equ	0xFDD
 22244                           fsr2h	equ	0xFDA
 22245                           fsr2l	equ	0xFD9
 22246                           status	equ	0xFD8
 22247                           pclatu	equ	0xFFB
 22248                           pclath	equ	0xFFA
 22249                           tblptru	equ	0xFF8
 22250                           tblptrh	equ	0xFF7
 22251                           tblptrl	equ	0xFF6
 22252                           tablat	equ	0xFF5
 22253                           prodh	equ	0xFF4
 22254                           prodl	equ	0xFF3
 22255                           intcon	equ	0xFF2
 22256                           intcon2	equ	0xFF1
 22257                           intcon3	equ	0xFF0
 22258                           indf0	equ	0xFEF
 22259                           postinc0	equ	0xFEE
 22260                           fsr0h	equ	0xFEA
 22261                           fsr0l	equ	0xFE9
 22262                           wreg	equ	0xFE8
 22263                           postdec1	equ	0xFE5
 22264                           fsr1h	equ	0xFE2
 22265                           fsr1l	equ	0xFE1
 22266                           indf2	equ	0xFDF
 22267                           postinc2	equ	0xFDE
 22268                           postdec2	equ	0xFDD
 22269                           fsr2h	equ	0xFDA
 22270                           fsr2l	equ	0xFD9
 22271                           status	equ	0xFD8
 22272                           
 22273                           	psect	rparam
 22274  0000                     pclatu	equ	0xFFB
 22275                           pclath	equ	0xFFA
 22276                           tblptru	equ	0xFF8
 22277                           tblptrh	equ	0xFF7
 22278                           tblptrl	equ	0xFF6
 22279                           tablat	equ	0xFF5
 22280                           prodh	equ	0xFF4
 22281                           prodl	equ	0xFF3
 22282                           intcon	equ	0xFF2
 22283                           intcon2	equ	0xFF1
 22284                           intcon3	equ	0xFF0
 22285                           indf0	equ	0xFEF
 22286                           postinc0	equ	0xFEE
 22287                           fsr0h	equ	0xFEA
 22288                           fsr0l	equ	0xFE9
 22289                           wreg	equ	0xFE8
 22290                           postdec1	equ	0xFE5
 22291                           fsr1h	equ	0xFE2
 22292                           fsr1l	equ	0xFE1
 22293                           indf2	equ	0xFDF
 22294                           postinc2	equ	0xFDE
 22295                           postdec2	equ	0xFDD
 22296                           fsr2h	equ	0xFDA
 22297                           fsr2l	equ	0xFD9
 22298                           status	equ	0xFD8
 22299                           
 22300                           	psect	temp
 22301  00007E                     btemp:
 22302                           	opt stack 0
 22303  00007E                     	ds	1
 22304  0000                     int$flags	set	btemp
 22305                           pclatu	equ	0xFFB
 22306                           pclath	equ	0xFFA
 22307                           tblptru	equ	0xFF8
 22308                           tblptrh	equ	0xFF7
 22309                           tblptrl	equ	0xFF6
 22310                           tablat	equ	0xFF5
 22311                           prodh	equ	0xFF4
 22312                           prodl	equ	0xFF3
 22313                           intcon	equ	0xFF2
 22314                           intcon2	equ	0xFF1
 22315                           intcon3	equ	0xFF0
 22316                           indf0	equ	0xFEF
 22317                           postinc0	equ	0xFEE
 22318                           fsr0h	equ	0xFEA
 22319                           fsr0l	equ	0xFE9
 22320                           wreg	equ	0xFE8
 22321                           postdec1	equ	0xFE5
 22322                           fsr1h	equ	0xFE2
 22323                           fsr1l	equ	0xFE1
 22324                           indf2	equ	0xFDF
 22325                           postinc2	equ	0xFDE
 22326                           postdec2	equ	0xFDD
 22327                           fsr2h	equ	0xFDA
 22328                           fsr2l	equ	0xFD9
 22329                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_122(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[18]), 
		 -> STR_117(CODE[18]), STR_116(CODE[18]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  197104
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22784
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             11    11      0   17266
                                             49 BANK0     11    11      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11030
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10283
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22456
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21542
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44664
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12955
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8587
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8587
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   95057
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8699
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8587
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15211
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8587
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8679
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8587
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19349
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    8771
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8452
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75709
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4854
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 04:49:01 2017

                                    _i 0131                     i2_I2C_Master_Start 4CA4  
                   i2_I2C_Master_Write 4C7A                                     l64 4C12  
                                   _ID 2FBC                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l175 09A0  
                                  l482 3B06                                    l731 25EE  
                                  l741 26B6                                    l744 26F0  
                                  l761 3176                                    l818 4140  
                                  l597 204E                                    l757 30C4  
                                  l758 30DE                                    l952 380A  
                                  l965 4BDE                                    l974 359E  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3306                    _log_count_can_w_lab 0073  
      __end_of_change_state_to_menu_11 48B0        __end_of_change_state_to_menu_12 4720  
      __end_of_change_state_to_menu_22 46E8        __end_of_change_state_to_menu_23 4880  
         _f_can_coming_to_distribution 0069                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 49A0        __end_of_change_state_to_logs_12 4970  
      __end_of_change_state_to_logs_22 4940        __end_of_change_state_to_logs_23 4A2A  
      __end_of_change_state_to_logs_33 4910        __end_of_change_state_to_logs_34 48E0  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1102 1CFC                                   l1200 3FB0  
                                 l1201 3FB4                                   l1202 3FB8  
                                 l1204 3FF6                                   l1132 0126  
                                 l1213 4428                                   l1125 007C  
                                 l1135 018C                                   l1240 3A66  
                                 l1136 01DA                                   l1128 0080  
                                 l1137 0240                                   l1234 3A08  
                                 l1162 05E8                                   l1138 028E  
                                 l1090 392A                                   l1066 3732  
                                 l1219 4438                                   l1227 39D0  
                                 l1093 392E                                   l1069 3752  
                                 l1238 3A4C                                   l1262 3F48  
                                 l1174 0782                                   l1327 13B6  
                                 l1192 3F88                                   l1291 32A4  
                                 l1179 0858                                   l1099 1CF8  
                                 l1292 32BE                                   l1196 3FA4  
                                 l1269 3F58                                   l1286 3258  
                                 l1198 3FA8                                   l1199 3FAC  
                                 l1721 3C94                                   l1774 40FA  
                                 l6111 20B2                                   l1784 431E  
                                 l6121 2148                                   l6113 20D0  
                                 l6105 2058                                   l7011 1F12  
                                 l7003 1EE2                                   l6123 2166  
                                 l6115 20EE                                   l6107 2076  
                                 l6131 21C0                                   l6125 2184  
                                 l6117 210C                                   l6109 2094  
                                 l6133 221E                                   l7023 1F5A  
                                 l7015 1F48                                   l6127 21A2  
                                 l6119 212A                                   l5513 4A6A  
                                 l5515 4A7C                                   l7027 1F90  
                                 l6331 38B4                                   l6315 3872  
                                 l6323 3894                                   l7213 0434  
                                 l7205 0412                                   l8013 0EF6  
                                 l8005 0ED4                                   l6341 4AC8  
                                 l5711 1192                                   l7311 0630  
                                 l7231 0496                                   l7223 045C  
                                 l7215 043A                                   l8103 108A  
                                 l8023 0F12                                   l6327 38AA  
                                 l6319 387C                                   l5801 146C  
                                 l5713 11A4                                   l7401 07DC  
                                 l7321 0658                                   l7241 04BE  
                                 l7209 041C                                   l7161 032C  
                                 l7153 030A                                   l7073 00FA  
                                 l5537 49F4                                   l8009 0EDE  
                                 l6337 4AB2                                   l6361 4188  
                                 l6273 3CCA                                   l5571 40AA  
                                 l5555 4AA2                                   l5731 125E  
                                 l5723 11E2                                   l5707 117E  
                                 l7411 0804                                   l7315 063A  
                                 l7235 04A0                                   l7219 0444  
                                 l7171 0354                                   l7163 0332  
                                 l7067 00EA                                   l6099 1FCC  
                                 l8107 10A2                                   l8027 0F2A  
                                 l8019 0F08                                   l5573 40B6  
                                 l5821 14F0                                   l5813 14C8  
                                 l5805 14A4                                   l5741 129C  
                                 l5717 11AE                                   l7421 0842  
                                 l7405 07F4                                   l7341 06BE  
                                 l7325 0662                                   l7261 0524  
                                 l7245 04C8                                   l7157 0314  
                                 l7077 0112                                   l7069 00F0  
                                 l8133 1122                                   l8125 1100  
                                 l8053 0FB2                                   l8045 0F90  
                                 l6381 41E0                                   l6365 419E  
                                 l6269 3CB4                                   l5583 40EC  
                                 l5575 40BC                                   l5591 42DA  
                                 l5831 1524                                   l5807 14AE  
                                 l5751 1314                                   l5743 12A2  
                                 l7431 0872                                   l7415 081C  
                                 l7407 07FA                                   l7351 06E6  
                                 l7319 0652                                   l7271 054C  
                                 l7239 04B8                                   l7183 0398  
                                 l7167 033C                                   l8143 113E  
                                 l8063 0FCE                                   l8151 1162  
                                 l5903 3C82                                   l6279 3D40  
                                 _ADIE 007CEE                                   l5593 42E6  
                                 l5825 150A                                   l5761 1376  
                                 l5753 131A                                   l7513 39F2  
                                 l7441 089A                                   l7433 0878  
                                 l7345 06D6                                   l7337 06B4  
                                 l7329 067A                                   l7265 053C  
                                 l7257 051A                                   l7249 04E0  
                                 l7193 03C0                                   l5841 472A  
                                 l8129 110A                                   l8049 0F9A  
                                 l6473 3E4A                                   l6377 41C8  
                                 l6713 264E                                   l5595 42EC  
                                 l5835 157C                                   l5819 14E4  
                                 l5755 1332                                   l5739 1290  
                                 l7523 3A22                                   l7451 08C2  
                                 l7443 08A0                                   l7371 075A  
                                 l7363 0738                                   l7355 06FE  
                                 l7347 06DC                                   l7291 05C0  
                                 l7283 059E                                   l7275 0564  
                                 l7267 0542                                   l7187 03B0  
                                 l7179 038E                                   l5843 4736  
                                 l8147 1156                                   l8139 1134  
                                 l8067 0FE6                                   l8059 0FC4  
                                 l8403 34C0                                   l6803 3084  
                                 l5829 151E                                   l5781 1408  
                                 l5749 1308                                   l5765 137C  
                                 l5837 1588                                   l7541 3FBC  
                                 l7437 0882                                   l7373 0760  
                                 l7293 05C6                                   l7197 03D8  
                                 l7189 03B6                                   l5853 3ED4  
                                 l8093 106E                                   l8085 104C  
                                 l6469 3E34                                   l8405 34D4  
                                 l6741 26DA                                   l5599 4310  
                                 l5783 140E                                   l5759 135E  
                                 l7703 3300                                   l7527 3A36  
                                 l7447 08AA                                   l7367 0742  
                                 l7287 05A8                                   l6479 3E76  
                                 l6751 270A                                   l5777 13EE  
                                 l7377 076A                                   l7297 05D0  
                                 l8441 36D4                                   l7713 3B48  
                                 l5849 3EBE                                   l8089 1056  
                                 l6833 3134                                   l6841 3178  
                                 l6729 26A0                                   l5795 144A  
                                 l5859 3EF4                                   l8099 1080  
                                 l5891 3C18                                   l6851 29F2  
                                 l6739 26D0                                   l7661 3226  
                                 l5877 412C                                   l7493 3F80  
                                 l7397 07D2                                   l8461 375E  
                                 l7725 3B7C                                   l7741 3BCC  
                                 l5893 3C28                                   l8429 3558  
                                 l6853 2A0C                                   l6685 25AC  
                                 l8541 3ACC                                   l5879 4156  
                                 l8471 377C                                   l8463 3764  
                                 l7727 3B88                                   l7719 3B5E  
                                 l7831 09BE                                   l5895 3C2E  
                                 l6863 2A8A                                   l6847 29BE  
                                 l6791 304C                                   l7657 31F6  
                                 l8473 3782                                   l8465 376A  
                                 l8481 3794                                   l7745 3BE0  
                                 l7737 3BBE                                   l7729 3B8E  
                                 l7761 3D7C                                   l7913 0B3A  
                                 l7905 0B18                                   l6865 2AA4  
                                 l6873 2AF2                                   l6849 29D8  
                                 l6857 2A26                                   l6769 2774  
                                 l6697 2612                                   l8545 3ADA  
                                 l6955 1D4C                                   l8475 3788  
                                 l8467 3770                                   l8459 3758  
                                 l7931 0BAA                                   l7843 09F2  
                                 l7835 09D0                                   l6867 2ABE  
                                 l6875 2B20                                   l6859 2A54  
                                 l6787 303E                                   l8547 3AE0  
                                 l8563 3B08                                   l8539 3AB6  
                                 l7685 3284                                   l7677 325A  
                                 l6973 1E04                                   l8477 378E  
                                 l8469 3776                                   l7781 3DE8  
                                 l7773 3DC6                                   l7765 3D90  
                                 l7757 3D6C                                   l7941 0C40  
                                 l7933 0BC8                                   l7909 0B22  
                                 l7861 0A5C                                   l7829 09B8  
                                 l6869 2AD8                                   l8557 3AFC  
                                 l8549 3AE6                                   l7687 328E  
                                 l7679 326A                                   l6991 1E96  
                                 l7767 3D9C                                   l7951 0CD6  
                                 l7943 0C5E                                   l7935 0BE6  
                                 l7871 0A84                                   l7863 0A62  
                                 l7847 0A04                                   l7839 09DA  
                                 l6799 3074                                   l8559 3B02  
                                 l7697 32C0                                   l6985 1E54  
                                 l7769 3DA2                                   l7777 3DD4  
                                 l7953 0CF4                                   l7945 0C7C  
                                 l7937 0C04                                   l7929 0B8C  
                                 l7699 32D0                                   l7971 0DDA  
                                 l7963 0DB8                                   l7947 0C9A  
                                 l7939 0C22                                   l7891 0AE4  
                                 l7867 0A6C                                   l7981 0DF6  
                                 l7949 0CB8                                   l7957 0D12  
                                 l7877 0A92                                   l7967 0DC2  
                                 l7959 0D76                                   l7895 0AEE  
                                 l7985 0E0E                                   l7977 0DEC  
                                 l7899 0B06                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4240 12DC  
                                 u4160 45D2                                   u4170 45D4  
                                 u4180 461E                                   u5220 25B8  
                                 u4181 461A                                   u4190 4620  
                                 u4247 12D2                                   u4280 1354  
                                 u5240 25EE                                   _PEIE 007F96  
                                 u5238 25BC                                   u4287 134A  
                                 u5370 300A                                   u5620 1F7E  
                                 u5460 3140                                   _RCEN 007E2B  
                                 u5710 01DA                                   u5550 1D8E  
                                 u6431 324E                                   u8007 2A7A  
                                 u6440 3250                                   u5560 1D90  
                                 u3960 49F2                                   u5480 3176  
                                 u8017 2B2E                                   u6370 31B8  
                                 u5730 028E                                   u5378 300E  
                                 u8107 0A1E                                   u8027 2B60  
                                 u6540 32EE                                   u6380 3214  
                                 u5628 1F82                                   u8117 0A74  
                                 u8037 3828                                   u5590 1F36  
                                 u4870 204E                                   u5478 3144  
                                 u9007 1766                                   u8207 0F1A  
                                 u8127 0AA0                                   u4855 4358  
                                 u8047 3884                                   i2l64 4C26  
                                 u6481 327A                                   u9017 17B2  
                                 u8217 0F44                                   u8137 0AF6  
                                 u8057 38BC                                   u6490 327C  
                                 u6378 31BC                                   u5690 0126  
                                 u9107 32A8                                   u9027 17FE  
                                 u8307 36E2                                   u8227 0FA2  
                                 u8147 0B2A                                   u8067 4630  
                                 u6548 32F2                                   u6388 3218  
                                 u9117 32B2                                   u9037 1832  
                                 u8317 3726                                   u8237 0FD6  
                                 u8157 0B54                                   u8077 4664  
                                 u5598 1F3A                                   u9127 427E  
                                 u9047 1864                                   u8407 1E8A  
                                 u8327 1CA8                                   u8247 1000  
                                 u8167 0DCA                                   u8087 08E2  
                                 u9137 4288                                   u9057 18B0  
                                 u8417 1EA8                                   u8337 1CEC  
                                 u8257 105E                                   u8177 0DFE  
                                 u8097 09E2                                   u9147 42B4  
                                 u9067 18E4                                   u8507 0092  
                                 u8427 1ED6                                   u8347 1D0E  
                                 u8267 1092                                   u8187 0E28  
                                 u9157 42BE                                   u9077 1916  
                                 u8517 0102                                   u8437 1EF0  
                                 u8357 1D3C                                   u8277 10BC  
                                 u8197 0EE6                                   u7590 359E  
                                 u9087 4482                                   u8607 0344  
                                 u8527 0136                                   u8447 4A72  
                                 u8367 1DA4                                   u8287 1112  
                                 u9097 3190                                   u8617 03A0  
                                 u8537 019C                                   u8457 38DA  
                                 u8377 1DF8                                   u8297 1146  
                                 u7817 253C                                   u8707 05D8  
                                 u8627 03C8                                   u8547 01BA  
                                 u8467 391E                                   u8387 1E18  
                                 u7907 2768                                   u7827 2602  
                                 u8717 0642                                   u8637 0424  
                                 u8557 01EA                                   u8477 3940  
                                 u8397 1E46                                   u7917 47AA  
                                 u7837 266E                                   u8807 085C  
                                 u8727 066A                                   u8647 044C  
                                 u8567 0250                                   u8487 002C  
                                 u7927 41A6                                   u7847 26BA  
                                 u8817 0866                                   u8737 06C6  
                                 u8657 04A8                                   u8577 026E  
                                 u8497 0070                                   u7937 2FD2  
                                 u7857 26C2                                   u8907 3A50  
                                 u8827 088A                                   u8747 06EE  
                                 u8667 04D0                                   u8587 029E  
                                 u7947 2FF0                                   u7867 26F4  
                                 u8917 3A5A                                   u8837 08B2  
                                 u8757 074A                                   u8677 052C  
                                 u8597 031C                                   u7957 3094  
                                 u7877 26FE                                   u8927 43F2  
                                 u8847 3F12                                   u8767 0772  
                                 u8687 0554                                   u7967 30C8  
                                 u7887 2718                                   u8937 15B6  
                                 u8857 3F62                                   u8777 0794  
                                 u8697 05B0                                   u7977 30D2  
                                 u7897 2742                                   u8947 1602  
                                 u8867 3F76                                   u8787 07E4  
                                 u7987 30F8                                   u8957 164E  
                                 u8877 39B0                                   u8797 080C  
                                 u7997 4ABE                                   u8967 1682  
                                 u8887 3A0C                                   u8977 16B4  
                                 u8897 3A14                                   u8987 1700  
                                 u8997 1734                            _stopSignals 4BE6  
                                 _Test 36D4                                   _back 0059  
                                 _main 3A6C                                   _down 0061  
                                 _keys FAEF                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 4B6C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0071  
                      __end_ofi2_putch 4C64                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 277E                            i2_lcdNibble 449A  
                      __end_of_Loading 277E                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 38CC  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3BEA  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 3DF2                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 3CA6  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 4104                        __end_of___lwmod 4328  
                                i2l252 251E                                  i2l597 280C  
                                i2l883 33CC                        ___awdiv@counter 008A  
                                i2l965 4C0A                                  i2l887 3418  
                                i2l889 3438                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 15A8  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4C58  
                      __end_of_handler 3474                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4A82                        __end_of_initLCD 466E  
                       __CFG_EBTRB$OFF 000000                                  _debug 005F  
                           i2isdigit@c 0003                                  _getIR 417A  
                      __end_of_loadRTC 3E7E                        __end_of_readMAG 4628  
                      __end_of_dpowers FB0A                                  _first 006D  
                                _enter 0063                        __end_of_isdigit 4AAC  
                                _input 007D                                  _putch 4C38  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4B22                       __end_ofi2_getRTC 425E  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1C9A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 47F0  
                          Loading@addr 00B3                       _count_can_no_lab 012B  
                 __size_of_EEPROM_read 0018                        __initialization 4542  
                         __end_of_Test 37E8                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3B2C                           __end_of_keys FB00  
                         __end_of_sort 4B8E                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1698 00AE                            _BlockerTest 3182  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00BC                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_120 FB7F                                 STR_104 FBE8  
                               STR_112 FB49                                 STR_121 FB7F  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_122 FFB6  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB5B  
                               _EEADRH 000FAA                                 STR_117 FB49  
                               STR_109 FE69                                 STR_118 FB7F  
                               _ADRESL 000FC3                                 STR_119 FB6D  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4820  
            i2_change_state_to_menu_22 47F0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1327 1B06                                 i2l6001 1AD0  
                               i2l6013 1B34                                 i2l1774 4538  
                               i2l6031 1B82                                 i2l1784 46A6  
                               i2l6041 1BC0                                 i2l6017 1B4C  
                               i2l6043 1BC8                                 i2l6019 1B50  
                               i2l6061 1C10                                 i2l6037 1B9C  
                               i2l6071 1C76                                 i2l6055 1BF4  
                               i2l6057 1BFC                                 i2l6065 1C22  
                               i2l6049 1BDE                                 i2l6073 1C7E  
                               i2l6067 1C28                                 i2l6261 36BC  
                               i2l6253 3688                                 i2l6077 47C8  
                               i2l6421 27AA                                 i2l5623 4B42  
                               i2l6079 47D0                                 i2l6431 2842  
                               i2l6249 3678                                 i2l6601 2F0C  
                               i2l6441 28B0                                 i2l6433 2858  
                               i2l6531 2E0E                                 i2l6523 2DF4  
                               i2l6443 28C6                                 i2l6435 286E  
                               i2l6427 2816                                 i2l8211 2326  
                               i2l8203 230A                                 i2l5661 4512  
                               i2l6613 2F2E                                 i2l6605 2F16  
                               i2l6533 2E1E                                 i2l6541 2E2C  
                               i2l6445 28DC                                 i2l6437 2884  
                               i2l6429 282C                                 i2l6453 291E  
                               i2l5647 4BC6                                 i2l6631 2F72  
                               i2l6623 2F4E                                 i2l6551 2E52  
                               i2l6535 2E22                                 i2l6447 28F2  
                               i2l6439 289A                                 i2l6455 2978  
                               i2l8303 2490                                 i2l8231 2374  
                               i2l8223 2350                                 i2l8215 2334  
                               i2l8207 2318                                 i2l5657 4506  
                               i2l5681 4688                                 i2l6553 2E58  
                               i2l6545 2E40                                 i2l6641 2F8E  
                               i2l6449 2908                                 i2l8313 24B4  
                               i2l5915 4224                                 i2l5659 450E  
                               i2l6635 2F84                                 i2l6627 2F60  
                               i2l6619 2F3C                                 i2l6571 2EA8  
                               i2l6555 2E5E                                 i2l6547 2E46  
                               i2l8307 24A6                                 i2l8251 23C2  
                               i2l8243 23A6                                 i2l8235 2382  
                               i2l8227 2366                                 i2l8219 2342  
                               i2l8171 22A6                                 i2l5925 424E  
                               i2l5669 452E                                 i2l5685 469C  
                               i2l5677 467C                                 i2l8501 2C42  
                               i2l6549 2E4C                                 i2l8165 2292  
                               i2l5919 4234                                 i2l5679 4684  
                               i2l5943 1936                                 i2l8511 2D02  
                               i2l6559 2E64                                 i2l8271 2410  
                               i2l8263 23F4                                 i2l8255 23D0  
                               i2l8247 23B4                                 i2l8239 2390  
                               i2l8191 22DE                                 i2l8183 22D0  
                               i2l8175 22B4                                 i2l8167 2298  
                               i2l5953 195A                                 i2l6585 2ECE  
                               i2l5947 1946                                 i2l8515 2D32  
                               i2l6595 2EF4                                 i2l6579 2EC0  
                               i2l8291 2466                                 i2l8283 2442  
                               i2l8275 2426                                 i2l8267 2402  
                               i2l8259 23E6                                 i2l8195 22EC  
                               i2l8179 22C2                                 i2l5949 1954  
                               i2l8517 2D38                                 i2l6589 2EEA  
                               i2l5991 1A90                                 i2l5975 1A16  
                               i2l5967 19EE                                 i2l5959 198C  
                               i2l6599 2F08                                 i2l8295 2474  
                               i2l8287 2450                                 i2l8279 2434  
                               i2l8199 22FA                                 i2l8615 33EA  
                               i2l5985 1A6E                                 i2l5977 1A20  
                               i2l8617 33EC                                 i2l5995 1ABA  
                               i2l5987 1A78                                 i2l5979 1A24  
                               i2l8491 2BD8                                 i2l8299 2482  
                               i2l5997 1ACC                                 i2l5989 1A7E  
                               i2l8495 2BE8                                 i2l8639 3436  
                               i2l8593 33A0                                 i2l8577 3380  
                               i2l8579 3384                                 i2l8951 24F4  
                               i2l8953 2510                                 i2l8957 2E7C  
                               i2l8949 24D2                                 i2l8959 2E98  
              _f_most_recent_sort_time 006B                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4AD4                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 4B6C  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2BCC                                 ___wmul 4756  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 478C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3E7E  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4BB0                                 _initUI 49A0  
                               _readIR 4590                                 _logRun 3474  
                               getIR@i 0087                                 clear_0 4568  
                               clear_1 4574                                 clear_2 4580  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 43E4                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 0049                __size_of_initGlobalVars 0080  
                         ?_retrieveLog 0007                                 _strcpy 4720  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4AFC  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4AD4  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4542                       __end_of_printRTC 2262  
                         __mediumconst FAEE                      __end_ofi2___lwmod 46B0  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 39A2                      __end_ofi2_lcdInst 4C70  
                           _PusherTest 39A2                      __end_ofi2_isdigit 4BCE  
                           __accesstop 0080                __end_of__initialization 4586  
                        ?_inputHandler 002A                  _most_recent_sort_time 0133  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 4BFC  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4CAE                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 4C84  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 41EC  
                          i2printRTC@i 0041                          _initSortTimer 3CA6  
          __end_of_updateServoPosition 417A                          __end_of_putch 4C48  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 3182                             __end_of_UI 1170  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 4A56  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4A2A  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 005B                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 37E8               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3228 0135  
                    __end_of_SpeedTest 3F88                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 400C  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_410 00CA                                UI@i_411 00CB  
                              UI@i_430 00CD                                UI@i_407 00C9  
                              UI@i_441 00D2                                UI@i_433 00CE  
                              UI@i_442 00D3                                UI@i_434 00CF  
                              UI@i_445 00D4                                UI@i_437 00D0  
                              UI@i_429 00CC                                UI@i_446 00D5  
                              UI@i_438 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2316 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00E2                                i2_putch 4C58  
                            ?_initTime 0080                        _f_loadingNewCan 00EA  
                      i2printRTC@month 003D                  __size_of_Distribution 0218  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 42C6  
                              _Loading 2522            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 3B2C                                ___awmod 3D50  
                           _initServos 4440                                ___lldiv 3BEA  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 408C                                ___lwmod 42C6  
                      __size_of_getRTC 0086                        printSortTimer@i 0045  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 4542                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0140                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 400C  
                              _lcdInst 4C48                                _handler 0008  
                              __ptext0 3A6C                                __ptext1 4BE6  
                              __ptext2 4B6C                                __ptext3 2522  
                              __ptext4 3CA6                                __ptext5 400C  
                              __ptext6 478C                                __ptext7 417A  
                              __ptext8 4590                                __ptext9 2FBC  
                      __size_of_printf 0438                                _readADC 4A56  
                      __size_of_strcpy 0036                                _initLCD 4628  
                              _cur_can 00E4                                _loadRTC 3DF2  
                              _readMAG 45DC                                _dpowers FB00  
                   actuatorTest@i_1652 00AE                     actuatorTest@i_1661 00B4  
                   actuatorTest@i_1653 00AF                     actuatorTest@i_1645 00AD  
                   actuatorTest@i_1662 00B5                     actuatorTest@i_1671 00BA  
                   actuatorTest@i_1655 00B0                     actuatorTest@i_1672 00BB  
                   actuatorTest@i_1664 00B6                     actuatorTest@i_1656 00B1  
                   actuatorTest@i_1681 00C0                     actuatorTest@i_1665 00B7  
                   actuatorTest@i_1682 00C1                     actuatorTest@i_1674 00BC  
                   actuatorTest@i_1658 00B2                     actuatorTest@i_1675 00BD  
                   actuatorTest@i_1667 00B8                     actuatorTest@i_1659 00B3  
                   actuatorTest@i_1684 00C2                     actuatorTest@i_1668 00B9  
                   actuatorTest@i_1685 00C3                     actuatorTest@i_1677 00BE  
                   actuatorTest@i_1678 00BF                                _isdigit 4A82  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 29B4                         __pintcode_body 3306  
                 end_of_initialization 4586                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3306                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 408C  
                           _sensorTest 1C9A                    __size_of_PusherTest 00CA  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2FBC  
                         ??_BothServos 00AB                  __end_of_machineConfig 43E4  
                           _updateMenu 2262                      i2_I2C_Master_Read 4B22  
                            _IR_signal 00DE                      i2_I2C_Master_Wait 4C26  
                    i2_I2C_Master_Stop 4C9C                      i2___lwdiv@divisor 0008  
                      _log_count_total 0075                              i2___lwdiv 44F0  
                            i2___lwmod 466E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 29B4                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4C64                          Loading@i_1100 00B8  
                        Loading@i_1099 00B6                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4BB0  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 192C  
                          PusherTest@i 00AC                    __end_of_EEPROM_read 4BE6  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 478C                         __end_of_getMAG 47BE  
                       __end_of_getRTC 3F04                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 49CE                         __end_of_readIR 45DC  
                       __end_of_logRun 35B4                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 4756              __end_ofi2_I2C_Master_Read 4B48  
            __end_ofi2_I2C_Master_Wait 4C38                           i2printf@prec 001D  
                  start_initialization 4542              __end_ofi2_I2C_Master_Stop 4CA4  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1331 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3F04                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3F88  
                          ?_sensorTest 0001                            __pdataBANK1 0135  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1112 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2436 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 0059  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 020A  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1963 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 005D  
                          _EEPROM_read 4BCE                     __end_of_PortTestA5 4440  
                     _I2C_Master_Start 4C94                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4C70                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEE                              _lcdNibble 425E  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 3A6C  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 38CC                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 01C6                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4CAC  
           __end_ofi2_I2C_Master_Write 4C84                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2DD6  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u406_40 4B40                               i2u506_40 280C  
                             _PIR2bits 000FA1                               i2u461_40 1A52  
                             i2u461_47 1A48                               i2u465_40 1AB2  
                             i2u465_47 1AA8                               i2u920_47 44E8  
                             i2u916_47 2E14                               i2u917_47 44B2  
                             i2u918_47 44BC                               i2u919_47 44DE  
                  __size_of_updateMenu 02C0                         _log_completion 00EE  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4AFC                          lcdNibble@data 0081  
                             i2_getRTC 41EC                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00BA                               i2_printf 192C  
                             i2_strcpy 47BE                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4556  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4C12  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 025C  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 3D50                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4880  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 46E8  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 46B0  
              _change_state_to_menu_23 4850                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4970                _change_state_to_logs_12 4940  
              _change_state_to_logs_22 4910                _change_state_to_logs_23 49FC  
              _change_state_to_logs_33 48E0                _change_state_to_logs_34 48B0  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 346C                             _EEPROMTest 4CAC  
                      _I2C_Master_Init 4328                       __size_of_readADC 002C  
                      _I2C_Master_Read 49CE                       __size_of_initLCD 0046  
                         _f_ID_receive 0065                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4C12  
                      _I2C_Master_Stop 4C8C                       __size_of_isdigit 002A  
                             _delay_ms 4AAC                         _printSortTimer 2BCC  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 36D4                               __ptext10 4AAC  
                             __ptext11 29B4                               __ptext20 4A2A  
                             __ptext12 4388                               __ptext21 4B8E  
                             __ptext13 3474                               __ptext30 49CE  
                             __ptext22 4628                               __ptext14 37E8  
                             __ptext31 4C12                               __ptext23 08CA  
                             __ptext15 4BCE                               __ptext40 38CC  
                             __ptext32 46B0                               __ptext24 1F98  
                             __ptext16 49A0                               __ptext41 0012  
                             __ptext33 46E8                               __ptext25 4720  
                             __ptext17 3DF2                               __ptext50 3182  
                             __ptext42 3F04                               __ptext34 3D50  
                             __ptext26 3E7E                               __ptext18 4328  
                             __ptext51 1170                               __ptext43 39A2  
                             __ptext35 3B2C                               __ptext27 4C70  
                             __ptext19 3BEA                               __ptext60 2262  
                             __ptext52 4C38                               __ptext44 3F88  
                             __ptext36 36D4                               __ptext28 4C8C  
                             __ptext61 4AD4                               __ptext53 4A82  
                             __ptext45 43E4                               __ptext37 1C9A  
                             __ptext29 4C94                               __ptext70 48E0  
                             __ptext62 277E                               __ptext54 4756  
                             __ptext46 4CAC                               __ptext38 45DC  
                             __ptext71 49FC                               __ptext63 47BE  
                             __ptext55 42C6                               __ptext47 15A8  
                             __ptext39 4A56                               __ptext80 4C58  
                             __ptext72 4910                               __ptext64 2DD6  
                             __ptext56 408C                               __ptext48 4440  
                             __ptext81 4BB0                               __ptext73 4940  
                             __ptext65 47F0                               __ptext57 4C48  
                             __ptext49 4104                               __ptext90 4CA4  
                             __ptext82 4AFC                               __ptext74 4970  
                             __ptext66 4820                               __ptext58 425E  
                             __ptext91 4B22                               __ptext83 466E  
                             __ptext75 4B48                               __ptext67 4850  
                             __ptext92 4C26                               __ptext84 44F0  
                             __ptext76 35B4                               __ptext68 4880  
                             __ptext85 4C64                               __ptext77 4BFC  
                             __ptext69 48B0                               __ptext86 449A  
                             __ptext78 2BCC                               __ptext87 41EC  
                             __ptext79 192C                               __ptext88 4C7A  
                             __ptext89 4C9C                               _dispLogs 4B48  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1963 0002  
                   __end_of_initServos 449A                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 4B8E  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4104                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F98  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0067  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4850      __end_ofi2_change_state_to_menu_22 4820  
                             loadRTC@i 0096                 __end_of_printSortTimer 2DD6  
                            putch@data 0082               __end_of_I2C_Master_Start 4C9C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4C7A  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1F98                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4BFC              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2522  
              __end_of_I2C_Master_Init 4388                __end_of_I2C_Master_Read 49FC  
              __end_of_I2C_Master_Wait 4C26                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4C94                            lcdInst@data 0082  
                        printRTC@F3219 0139                           retrieveLog@i 000E  
                          _retrieveLog 35B4                    __end_ofi2_lcdNibble 44F0  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012F                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4388  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
