

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 16:18:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.40
   109                           ; Generated 01/12/2016 GMT
   110                           ; 
   111                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F4620 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143                           	psect	idataBANK1
   144  004254                     __pidataBANK1:
   145                           	opt stack 0
   146                           
   147                           ;initializer for UI@F3222
   148  004254  4D                 	db	77
   149  004255  4D                 	db	77
   150  004256  4D                 	db	77
   151  004257  00                 	db	0
   152                           
   153                           ;initializer for printRTC@F3213
   154  004258  4D                 	db	77
   155  004259  4D                 	db	77
   156  00425A  4D                 	db	77
   157  00425B  00                 	db	0
   158                           
   159                           	psect	mediumconst
   160  00FB38                     __pmediumconst:
   161                           	opt stack 0
   162  00FB38  00                 	db	0
   163  00FB39                     _keys:
   164                           	opt stack 0
   165  00FB39  31                 	db	49
   166  00FB3A  32                 	db	50
   167  00FB3B  33                 	db	51
   168  00FB3C  41                 	db	65
   169  00FB3D  34                 	db	52
   170  00FB3E  35                 	db	53
   171  00FB3F  36                 	db	54
   172  00FB40  42                 	db	66
   173  00FB41  37                 	db	55
   174  00FB42  38                 	db	56
   175  00FB43  39                 	db	57
   176  00FB44  43                 	db	67
   177  00FB45  2A                 	db	42
   178  00FB46  30                 	db	48
   179  00FB47  23                 	db	35
   180  00FB48  44                 	db	68
   181  00FB49  00                 	db	0
   182  00FB4A                     __end_of_keys:
   183                           	opt stack 0
   184  00FB4A                     _dpowers:
   185                           	opt stack 0
   186  00FB4A  0001               	dw	1
   187  00FB4C  000A               	dw	10
   188  00FB4E  0064               	dw	100
   189  00FB50  03E8               	dw	1000
   190  00FB52  2710               	dw	10000
   191  00FB54                     __end_of_dpowers:
   192                           	opt stack 0
   193  0000                     _ADCON0	set	4034
   194  0000                     _ADCON0bits	set	4034
   195  0000                     _ADCON1	set	4033
   196  0000                     _ADCON2	set	4032
   197  0000                     _ADRESH	set	4036
   198  0000                     _ADRESL	set	4035
   199  0000                     _CMCONbits	set	4020
   200  0000                     _CVRCON	set	4021
   201  0000                     _EEADR	set	4009
   202  0000                     _EEADRH	set	4010
   203  0000                     _EECON1bits	set	4006
   204  0000                     _EECON2	set	4007
   205  0000                     _EEDATA	set	4008
   206  0000                     _INTCONbits	set	4082
   207  0000                     _LATA	set	3977
   208  0000                     _LATAbits	set	3977
   209  0000                     _LATB	set	3978
   210  0000                     _LATC	set	3979
   211  0000                     _LATCbits	set	3979
   212  0000                     _LATD	set	3980
   213  0000                     _LATDbits	set	3980
   214  0000                     _LATE	set	3981
   215  0000                     _LATEbits	set	3981
   216  0000                     _OSCCON	set	4051
   217  0000                     _OSCTUNEbits	set	3995
   218  0000                     _PIR2bits	set	4001
   219  0000                     _PORTAbits	set	3968
   220  0000                     _PORTB	set	3969
   221  0000                     _PORTBbits	set	3969
   222  0000                     _SSPADD	set	4040
   223  0000                     _SSPBUF	set	4041
   224  0000                     _SSPCON1	set	4038
   225  0000                     _SSPCON2	set	4037
   226  0000                     _SSPSTAT	set	4039
   227  0000                     _T0CON	set	4053
   228  0000                     _T1CON	set	4045
   229  0000                     _TMR0H	set	4055
   230  0000                     _TMR0L	set	4054
   231  0000                     _TMR1H	set	4047
   232  0000                     _TMR1L	set	4046
   233  0000                     _TMR3H	set	4019
   234  0000                     _TMR3L	set	4018
   235  0000                     _TRISA	set	3986
   236  0000                     _TRISB	set	3987
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISD	set	3989
   239  0000                     _TRISE	set	3990
   240  0000                     _ACKDT	set	32301
   241  0000                     _ACKEN	set	32300
   242  0000                     _ADIE	set	31982
   243  0000                     _INT1IE	set	32643
   244  0000                     _INT1IF	set	32640
   245  0000                     _PEIE	set	32662
   246  0000                     _PEN	set	32298
   247  0000                     _RCEN	set	32299
   248  0000                     _RSEN	set	32297
   249  0000                     _SEN	set	32296
   250  0000                     _TMR0IE	set	32661
   251  0000                     _TMR0IF	set	32658
   252  0000                     _TMR0ON	set	32431
   253  0000                     _TMR1IE	set	31976
   254  0000                     _TMR1IF	set	31984
   255  0000                     _TMR1ON	set	32360
   256  0000                     _TMR2IE	set	31977
   257  0000                     _TMR3IE	set	32001
   258  0000                     _TMR3IF	set	32009
   259  0000                     _TMR3ON	set	32136
   260  0000                     _TRISC3	set	31907
   261  0000                     _TRISC4	set	31908
   262  0000                     _nRBPU	set	32655
   263  00FB54                     STR_21:
   264  00FB54  25                 	db	37
   265  00FB55  30                 	db	48	;'0'
   266  00FB56  32                 	db	50	;'2'
   267  00FB57  64                 	db	100	;'d'
   268  00FB58  25                 	db	37
   269  00FB59  73                 	db	115	;'s'
   270  00FB5A  20                 	db	32
   271  00FB5B  7C                 	db	124
   272  00FB5C  20                 	db	32
   273  00FB5D  25                 	db	37
   274  00FB5E  30                 	db	48	;'0'
   275  00FB5F  32                 	db	50	;'2'
   276  00FB60  64                 	db	100	;'d'
   277  00FB61  3A                 	db	58	;':'
   278  00FB62  25                 	db	37
   279  00FB63  30                 	db	48	;'0'
   280  00FB64  32                 	db	50	;'2'
   281  00FB65  64                 	db	100	;'d'
   282  00FB66  3A                 	db	58	;':'
   283  00FB67  25                 	db	37
   284  00FB68  30                 	db	48	;'0'
   285  00FB69  32                 	db	50	;'2'
   286  00FB6A  64                 	db	100	;'d'
   287  00FB6B  00                 	db	0
   288  00FB6C                     STR_66:
   289  00FB6C  28                 	db	40
   290  00FB6D  64                 	db	100	;'d'
   291  00FB6E  61                 	db	97	;'a'
   292  00FB6F  74                 	db	116	;'t'
   293  00FB70  61                 	db	97	;'a'
   294  00FB71  3A                 	db	58	;':'
   295  00FB72  20                 	db	32
   296  00FB73  25                 	db	37
   297  00FB74  75                 	db	117	;'u'
   298  00FB75  2C                 	db	44
   299  00FB76  20                 	db	32
   300  00FB77  61                 	db	97	;'a'
   301  00FB78  64                 	db	100	;'d'
   302  00FB79  64                 	db	100	;'d'
   303  00FB7A  72                 	db	114	;'r'
   304  00FB7B  3A                 	db	58	;':'
   305  00FB7C  20                 	db	32
   306  00FB7D  25                 	db	37
   307  00FB7E  75                 	db	117	;'u'
   308  00FB7F  29                 	db	41
   309  00FB80  00                 	db	0
   310  00FB81                     STR_27:
   311  00FB81  4E                 	db	78	;'N'
   312  00FB82  4F                 	db	79	;'O'
   313  00FB83  20                 	db	32
   314  00FB84  4C                 	db	76	;'L'
   315  00FB85  41                 	db	65	;'A'
   316  00FB86  42                 	db	66	;'B'
   317  00FB87  3A                 	db	58	;':'
   318  00FB88  20                 	db	32
   319  00FB89  25                 	db	37
   320  00FB8A  64                 	db	100	;'d'
   321  00FB8B  7C                 	db	124
   322  00FB8C  4C                 	db	76	;'L'
   323  00FB8D  41                 	db	65	;'A'
   324  00FB8E  42                 	db	66	;'B'
   325  00FB8F  3A                 	db	58	;':'
   326  00FB90  20                 	db	32
   327  00FB91  25                 	db	37
   328  00FB92  64                 	db	100	;'d'
   329  00FB93  00                 	db	0
   330  00FB94                     STR_25:
   331  00FB94  4E                 	db	78	;'N'
   332  00FB95  4F                 	db	79	;'O'
   333  00FB96  20                 	db	32
   334  00FB97  54                 	db	84	;'T'
   335  00FB98  41                 	db	65	;'A'
   336  00FB99  42                 	db	66	;'B'
   337  00FB9A  3A                 	db	58	;':'
   338  00FB9B  20                 	db	32
   339  00FB9C  25                 	db	37
   340  00FB9D  64                 	db	100	;'d'
   341  00FB9E  7C                 	db	124
   342  00FB9F  54                 	db	84	;'T'
   343  00FBA0  41                 	db	65	;'A'
   344  00FBA1  42                 	db	66	;'B'
   345  00FBA2  3A                 	db	58	;':'
   346  00FBA3  20                 	db	32
   347  00FBA4  25                 	db	37
   348  00FBA5  64                 	db	100	;'d'
   349  00FBA6  00                 	db	0
   350  00FBA7                     STR_105:
   351  00FBA7  44                 	db	68	;'D'
   352  00FBA8  20                 	db	32
   353  00FBA9  57                 	db	87	;'W'
   354  00FBAA  49                 	db	73	;'I'
   355  00FBAB  4C                 	db	76	;'L'
   356  00FBAC  4C                 	db	76	;'L'
   357  00FBAD  20                 	db	32
   358  00FBAE  52                 	db	82	;'R'
   359  00FBAF  45                 	db	69	;'E'
   360  00FBB0  54                 	db	84	;'T'
   361  00FBB1  55                 	db	85	;'U'
   362  00FBB2  52                 	db	82	;'R'
   363  00FBB3  4E                 	db	78	;'N'
   364  00FBB4  20                 	db	32
   365  00FBB5  20                 	db	32
   366  00FBB6  20                 	db	32
   367  00FBB7  20                 	db	32
   368  00FBB8  00                 	db	0
   369  00FBB9                     STR_106:
   370  00FBB9  4F                 	db	79	;'O'
   371  00FBBA  54                 	db	84	;'T'
   372  00FBBB  48                 	db	72	;'H'
   373  00FBBC  45                 	db	69	;'E'
   374  00FBBD  52                 	db	82	;'R'
   375  00FBBE  20                 	db	32
   376  00FBBF  53                 	db	83	;'S'
   377  00FBC0  45                 	db	69	;'E'
   378  00FBC1  54                 	db	84	;'T'
   379  00FBC2  53                 	db	83	;'S'
   380  00FBC3  20                 	db	32
   381  00FBC4  52                 	db	82	;'R'
   382  00FBC5  41                 	db	65	;'A'
   383  00FBC6  35                 	db	53	;'5'
   384  00FBC7  20                 	db	32
   385  00FBC8  20                 	db	32
   386  00FBC9  20                 	db	32
   387  00FBCA  00                 	db	0
   388  00FBCB                     STR_3:
   389  00FBCB  2D                 	db	45
   390  00FBCC  2D                 	db	45
   391  00FBCD  20                 	db	32
   392  00FBCE  4C                 	db	76	;'L'
   393  00FBCF  4F                 	db	79	;'O'
   394  00FBD0  47                 	db	71	;'G'
   395  00FBD1  20                 	db	32
   396  00FBD2  25                 	db	37
   397  00FBD3  32                 	db	50	;'2'
   398  00FBD4  64                 	db	100	;'d'
   399  00FBD5  20                 	db	32
   400  00FBD6  48                 	db	72	;'H'
   401  00FBD7  45                 	db	69	;'E'
   402  00FBD8  52                 	db	82	;'R'
   403  00FBD9  45                 	db	69	;'E'
   404  00FBDA  2D                 	db	45
   405  00FBDB  2D                 	db	45
   406  00FBDC  00                 	db	0
   407  00FBDD                     STR_1:
   408  00FBDD  52                 	db	82	;'R'
   409  00FBDE  45                 	db	69	;'E'
   410  00FBDF  53                 	db	83	;'S'
   411  00FBE0  55                 	db	85	;'U'
   412  00FBE1  4C                 	db	76	;'L'
   413  00FBE2  54                 	db	84	;'T'
   414  00FBE3  53                 	db	83	;'S'
   415  00FBE4  20                 	db	32
   416  00FBE5  49                 	db	73	;'I'
   417  00FBE6  4E                 	db	78	;'N'
   418  00FBE7  20                 	db	32
   419  00FBE8  4C                 	db	76	;'L'
   420  00FBE9  4F                 	db	79	;'O'
   421  00FBEA  47                 	db	71	;'G'
   422  00FBEB  20                 	db	32
   423  00FBEC  25                 	db	37
   424  00FBED  64                 	db	100	;'d'
   425  00FBEE  00                 	db	0
   426  00FBEF                     STR_97:
   427  00FBEF  4D                 	db	77	;'M'
   428  00FBF0  49                 	db	73	;'I'
   429  00FBF1  44                 	db	68	;'D'
   430  00FBF2  20                 	db	32
   431  00FBF3  2D                 	db	45
   432  00FBF4  2D                 	db	45
   433  00FBF5  20                 	db	32
   434  00FBF6  32                 	db	50	;'2'
   435  00FBF7  73                 	db	115	;'s'
   436  00FBF8  20                 	db	32
   437  00FBF9  20                 	db	32
   438  00FBFA  20                 	db	32
   439  00FBFB  20                 	db	32
   440  00FBFC  20                 	db	32
   441  00FBFD  20                 	db	32
   442  00FBFE  20                 	db	32
   443  00FBFF  00                 	db	0
   444  00FC00                     STR_100:
   445  00FC00  44                 	db	68	;'D'
   446  00FC01  52                 	db	82	;'R'
   447  00FC02  4F                 	db	79	;'O'
   448  00FC03  50                 	db	80	;'P'
   449  00FC04  20                 	db	32
   450  00FC05  2D                 	db	45
   451  00FC06  2D                 	db	45
   452  00FC07  20                 	db	32
   453  00FC08  32                 	db	50	;'2'
   454  00FC09  73                 	db	115	;'s'
   455  00FC0A  20                 	db	32
   456  00FC0B  20                 	db	32
   457  00FC0C  20                 	db	32
   458  00FC0D  20                 	db	32
   459  00FC0E  20                 	db	32
   460  00FC0F  20                 	db	32
   461  00FC10  00                 	db	0
   462  00FC11                     STR_94:
   463  00FC11  4C                 	db	76	;'L'
   464  00FC12  45                 	db	69	;'E'
   465  00FC13  46                 	db	70	;'F'
   466  00FC14  54                 	db	84	;'T'
   467  00FC15  20                 	db	32
   468  00FC16  2D                 	db	45
   469  00FC17  2D                 	db	45
   470  00FC18  20                 	db	32
   471  00FC19  32                 	db	50	;'2'
   472  00FC1A  73                 	db	115	;'s'
   473  00FC1B  20                 	db	32
   474  00FC1C  20                 	db	32
   475  00FC1D  20                 	db	32
   476  00FC1E  20                 	db	32
   477  00FC1F  20                 	db	32
   478  00FC20  20                 	db	32
   479  00FC21  00                 	db	0
   480  00FC22                     STR_99:
   481  00FC22  4C                 	db	76	;'L'
   482  00FC23  45                 	db	69	;'E'
   483  00FC24  56                 	db	86	;'V'
   484  00FC25  45                 	db	69	;'E'
   485  00FC26  4C                 	db	76	;'L'
   486  00FC27  20                 	db	32
   487  00FC28  2D                 	db	45
   488  00FC29  2D                 	db	45
   489  00FC2A  20                 	db	32
   490  00FC2B  32                 	db	50	;'2'
   491  00FC2C  73                 	db	115	;'s'
   492  00FC2D  20                 	db	32
   493  00FC2E  20                 	db	32
   494  00FC2F  20                 	db	32
   495  00FC30  20                 	db	32
   496  00FC31  20                 	db	32
   497  00FC32  00                 	db	0
   498  00FC33                     STR_93:
   499  00FC33  52                 	db	82	;'R'
   500  00FC34  49                 	db	73	;'I'
   501  00FC35  47                 	db	71	;'G'
   502  00FC36  48                 	db	72	;'H'
   503  00FC37  54                 	db	84	;'T'
   504  00FC38  20                 	db	32
   505  00FC39  2D                 	db	45
   506  00FC3A  2D                 	db	45
   507  00FC3B  20                 	db	32
   508  00FC3C  32                 	db	50	;'2'
   509  00FC3D  73                 	db	115	;'s'
   510  00FC3E  20                 	db	32
   511  00FC3F  20                 	db	32
   512  00FC40  20                 	db	32
   513  00FC41  20                 	db	32
   514  00FC42  20                 	db	32
   515  00FC43  00                 	db	0
   516  00FC44                     STR_92:
   517  00FC44  4D                 	db	77	;'M'
   518  00FC45  49                 	db	73	;'I'
   519  00FC46  44                 	db	68	;'D'
   520  00FC47  44                 	db	68	;'D'
   521  00FC48  4C                 	db	76	;'L'
   522  00FC49  45                 	db	69	;'E'
   523  00FC4A  20                 	db	32
   524  00FC4B  2D                 	db	45
   525  00FC4C  2D                 	db	45
   526  00FC4D  20                 	db	32
   527  00FC4E  32                 	db	50	;'2'
   528  00FC4F  73                 	db	115	;'s'
   529  00FC50  20                 	db	32
   530  00FC51  20                 	db	32
   531  00FC52  20                 	db	32
   532  00FC53  20                 	db	32
   533  00FC54  00                 	db	0
   534  00FC55                     STR_109:
   535  00FC55  44                 	db	68	;'D'
   536  00FC56  20                 	db	32
   537  00FC57  57                 	db	87	;'W'
   538  00FC58  49                 	db	73	;'I'
   539  00FC59  4C                 	db	76	;'L'
   540  00FC5A  4C                 	db	76	;'L'
   541  00FC5B  20                 	db	32
   542  00FC5C  52                 	db	82	;'R'
   543  00FC5D  45                 	db	69	;'E'
   544  00FC5E  54                 	db	84	;'T'
   545  00FC5F  55                 	db	85	;'U'
   546  00FC60  52                 	db	82	;'R'
   547  00FC61  4E                 	db	78	;'N'
   548  00FC62  20                 	db	32
   549  00FC63  20                 	db	32
   550  00FC64  20                 	db	32
   551  00FC65  00                 	db	0
   552  00FC66                     STR_95:
   553  00FC66  4D                 	db	77	;'M'
   554  00FC67  49                 	db	73	;'I'
   555  00FC68  44                 	db	68	;'D'
   556  00FC69  2D                 	db	45
   557  00FC6A  4C                 	db	76	;'L'
   558  00FC6B  45                 	db	69	;'E'
   559  00FC6C  46                 	db	70	;'F'
   560  00FC6D  54                 	db	84	;'T'
   561  00FC6E  20                 	db	32
   562  00FC6F  2D                 	db	45
   563  00FC70  2D                 	db	45
   564  00FC71  20                 	db	32
   565  00FC72  32                 	db	50	;'2'
   566  00FC73  73                 	db	115	;'s'
   567  00FC74  20                 	db	32
   568  00FC75  20                 	db	32
   569  00FC76  00                 	db	0
   570  00FC77                     STR_96:
   571  00FC77  4D                 	db	77	;'M'
   572  00FC78  49                 	db	73	;'I'
   573  00FC79  44                 	db	68	;'D'
   574  00FC7A  2D                 	db	45
   575  00FC7B  52                 	db	82	;'R'
   576  00FC7C  49                 	db	73	;'I'
   577  00FC7D  47                 	db	71	;'G'
   578  00FC7E  48                 	db	72	;'H'
   579  00FC7F  54                 	db	84	;'T'
   580  00FC80  20                 	db	32
   581  00FC81  2D                 	db	45
   582  00FC82  2D                 	db	45
   583  00FC83  20                 	db	32
   584  00FC84  32                 	db	50	;'2'
   585  00FC85  73                 	db	115	;'s'
   586  00FC86  20                 	db	32
   587  00FC87  00                 	db	0
   588  00FC88                     STR_110:
   589  00FC88  45                 	db	69	;'E'
   590  00FC89  4C                 	db	76	;'L'
   591  00FC8A  53                 	db	83	;'S'
   592  00FC8B  45                 	db	69	;'E'
   593  00FC8C  20                 	db	32
   594  00FC8D  54                 	db	84	;'T'
   595  00FC8E  4F                 	db	79	;'O'
   596  00FC8F  47                 	db	71	;'G'
   597  00FC90  47                 	db	71	;'G'
   598  00FC91  4C                 	db	76	;'L'
   599  00FC92  45                 	db	69	;'E'
   600  00FC93  53                 	db	83	;'S'
   601  00FC94  20                 	db	32
   602  00FC95  52                 	db	82	;'R'
   603  00FC96  41                 	db	65	;'A'
   604  00FC97  35                 	db	53	;'5'
   605  00FC98  00                 	db	0
   606  00FC99                     STR_72:
   607  00FC99  41                 	db	65	;'A'
   608  00FC9A  4C                 	db	76	;'L'
   609  00FC9B  47                 	db	71	;'G'
   610  00FC9C  31                 	db	49	;'1'
   611  00FC9D  3A                 	db	58	;':'
   612  00FC9E  20                 	db	32
   613  00FC9F  39                 	db	57	;'9'
   614  00FCA0  20                 	db	32
   615  00FCA1  50                 	db	80	;'P'
   616  00FCA2  4F                 	db	79	;'O'
   617  00FCA3  50                 	db	80	;'P'
   618  00FCA4  4E                 	db	78	;'N'
   619  00FCA5  4F                 	db	79	;'O'
   620  00FCA6  54                 	db	84	;'T'
   621  00FCA7  41                 	db	65	;'A'
   622  00FCA8  42                 	db	66	;'B'
   623  00FCA9  00                 	db	0
   624  00FCAA                     STR_68:
   625  00FCAA  31                 	db	49	;'1'
   626  00FCAB  2E                 	db	46
   627  00FCAC  41                 	db	65	;'A'
   628  00FCAD  4C                 	db	76	;'L'
   629  00FCAE  47                 	db	71	;'G'
   630  00FCAF  7C                 	db	124
   631  00FCB0  32                 	db	50	;'2'
   632  00FCB1  2E                 	db	46
   633  00FCB2  53                 	db	83	;'S'
   634  00FCB3  4E                 	db	78	;'N'
   635  00FCB4  52                 	db	82	;'R'
   636  00FCB5  7C                 	db	124
   637  00FCB6  33                 	db	51	;'3'
   638  00FCB7  2E                 	db	46
   639  00FCB8  41                 	db	65	;'A'
   640  00FCB9  43                 	db	67	;'C'
   641  00FCBA  00                 	db	0
   642  00FCBB                     STR_87:
   643  00FCBB  54                 	db	84	;'T'
   644  00FCBC  53                 	db	83	;'S'
   645  00FCBD  54                 	db	84	;'T'
   646  00FCBE  3A                 	db	58	;':'
   647  00FCBF  20                 	db	32
   648  00FCC0  43                 	db	67	;'C'
   649  00FCC1  4F                 	db	79	;'O'
   650  00FCC2  4E                 	db	78	;'N'
   651  00FCC3  44                 	db	68	;'D'
   652  00FCC4  20                 	db	32
   653  00FCC5  53                 	db	83	;'S'
   654  00FCC6  4F                 	db	79	;'O'
   655  00FCC7  4C                 	db	76	;'L'
   656  00FCC8  4E                 	db	78	;'N'
   657  00FCC9  27                 	db	39
   658  00FCCA  44                 	db	68	;'D'
   659  00FCCB  00                 	db	0
   660  00FCCC                     STR_89:
   661  00FCCC  54                 	db	84	;'T'
   662  00FCCD  53                 	db	83	;'S'
   663  00FCCE  54                 	db	84	;'T'
   664  00FCCF  3A                 	db	58	;':'
   665  00FCD0  20                 	db	32
   666  00FCD1  50                 	db	80	;'P'
   667  00FCD2  55                 	db	85	;'U'
   668  00FCD3  53                 	db	83	;'S'
   669  00FCD4  48                 	db	72	;'H'
   670  00FCD5  20                 	db	32
   671  00FCD6  53                 	db	83	;'S'
   672  00FCD7  4F                 	db	79	;'O'
   673  00FCD8  4C                 	db	76	;'L'
   674  00FCD9  4E                 	db	78	;'N'
   675  00FCDA  27                 	db	39
   676  00FCDB  44                 	db	68	;'D'
   677  00FCDC  00                 	db	0
   678  00FCDD                     STR_69:
   679  00FCDD  34                 	db	52	;'4'
   680  00FCDE  2E                 	db	46
   681  00FCDF  48                 	db	72	;'H'
   682  00FCE0  49                 	db	73	;'I'
   683  00FCE1  7C                 	db	124
   684  00FCE2  35                 	db	53	;'5'
   685  00FCE3  2E                 	db	46
   686  00FCE4  54                 	db	84	;'T'
   687  00FCE5  4F                 	db	79	;'O'
   688  00FCE6  47                 	db	71	;'G'
   689  00FCE7  7C                 	db	124
   690  00FCE8  36                 	db	54	;'6'
   691  00FCE9  2E                 	db	46
   692  00FCEA  45                 	db	69	;'E'
   693  00FCEB  45                 	db	69	;'E'
   694  00FCEC  50                 	db	80	;'P'
   695  00FCED  00                 	db	0
   696  00FCEE                     STR_41:
   697  00FCEE  4C                 	db	76	;'L'
   698  00FCEF  4F                 	db	79	;'O'
   699  00FCF0  47                 	db	71	;'G'
   700  00FCF1  20                 	db	32
   701  00FCF2  31                 	db	49	;'1'
   702  00FCF3  20                 	db	32
   703  00FCF4  20                 	db	32
   704  00FCF5  20                 	db	32
   705  00FCF6  20                 	db	32
   706  00FCF7  20                 	db	32
   707  00FCF8  20                 	db	32
   708  00FCF9  20                 	db	32
   709  00FCFA  20                 	db	32
   710  00FCFB  20                 	db	32
   711  00FCFC  20                 	db	32
   712  00FCFD  20                 	db	32
   713  00FCFE  00                 	db	0
   714  00FCFF                     STR_40:
   715  00FCFF  4C                 	db	76	;'L'
   716  00FD00  4F                 	db	79	;'O'
   717  00FD01  47                 	db	71	;'G'
   718  00FD02  20                 	db	32
   719  00FD03  32                 	db	50	;'2'
   720  00FD04  20                 	db	32
   721  00FD05  20                 	db	32
   722  00FD06  20                 	db	32
   723  00FD07  20                 	db	32
   724  00FD08  20                 	db	32
   725  00FD09  20                 	db	32
   726  00FD0A  20                 	db	32
   727  00FD0B  20                 	db	32
   728  00FD0C  20                 	db	32
   729  00FD0D  20                 	db	32
   730  00FD0E  20                 	db	32
   731  00FD0F  00                 	db	0
   732  00FD10                     STR_44:
   733  00FD10  4C                 	db	76	;'L'
   734  00FD11  4F                 	db	79	;'O'
   735  00FD12  47                 	db	71	;'G'
   736  00FD13  20                 	db	32
   737  00FD14  33                 	db	51	;'3'
   738  00FD15  20                 	db	32
   739  00FD16  20                 	db	32
   740  00FD17  20                 	db	32
   741  00FD18  20                 	db	32
   742  00FD19  20                 	db	32
   743  00FD1A  20                 	db	32
   744  00FD1B  20                 	db	32
   745  00FD1C  20                 	db	32
   746  00FD1D  20                 	db	32
   747  00FD1E  20                 	db	32
   748  00FD1F  20                 	db	32
   749  00FD20  00                 	db	0
   750  00FD21                     STR_48:
   751  00FD21  4C                 	db	76	;'L'
   752  00FD22  4F                 	db	79	;'O'
   753  00FD23  47                 	db	71	;'G'
   754  00FD24  20                 	db	32
   755  00FD25  34                 	db	52	;'4'
   756  00FD26  20                 	db	32
   757  00FD27  20                 	db	32
   758  00FD28  20                 	db	32
   759  00FD29  20                 	db	32
   760  00FD2A  20                 	db	32
   761  00FD2B  20                 	db	32
   762  00FD2C  20                 	db	32
   763  00FD2D  20                 	db	32
   764  00FD2E  20                 	db	32
   765  00FD2F  20                 	db	32
   766  00FD30  20                 	db	32
   767  00FD31  00                 	db	0
   768  00FD32                     STR_36:
   769  00FD32  33                 	db	51	;'3'
   770  00FD33  2E                 	db	46
   771  00FD34  20                 	db	32
   772  00FD35  4C                 	db	76	;'L'
   773  00FD36  4F                 	db	79	;'O'
   774  00FD37  47                 	db	71	;'G'
   775  00FD38  53                 	db	83	;'S'
   776  00FD39  20                 	db	32
   777  00FD3A  20                 	db	32
   778  00FD3B  20                 	db	32
   779  00FD3C  20                 	db	32
   780  00FD3D  20                 	db	32
   781  00FD3E  20                 	db	32
   782  00FD3F  20                 	db	32
   783  00FD40  20                 	db	32
   784  00FD41  20                 	db	32
   785  00FD42  00                 	db	0
   786  00FD43                     STR_32:
   787  00FD43  32                 	db	50	;'2'
   788  00FD44  2E                 	db	46
   789  00FD45  20                 	db	32
   790  00FD46  53                 	db	83	;'S'
   791  00FD47  4F                 	db	79	;'O'
   792  00FD48  52                 	db	82	;'R'
   793  00FD49  54                 	db	84	;'T'
   794  00FD4A  20                 	db	32
   795  00FD4B  20                 	db	32
   796  00FD4C  20                 	db	32
   797  00FD4D  20                 	db	32
   798  00FD4E  20                 	db	32
   799  00FD4F  20                 	db	32
   800  00FD50  20                 	db	32
   801  00FD51  20                 	db	32
   802  00FD52  20                 	db	32
   803  00FD53  00                 	db	0
   804  00FD54                     STR_33:
   805  00FD54  31                 	db	49	;'1'
   806  00FD55  2E                 	db	46
   807  00FD56  20                 	db	32
   808  00FD57  44                 	db	68	;'D'
   809  00FD58  41                 	db	65	;'A'
   810  00FD59  54                 	db	84	;'T'
   811  00FD5A  45                 	db	69	;'E'
   812  00FD5B  2F                 	db	47
   813  00FD5C  54                 	db	84	;'T'
   814  00FD5D  49                 	db	73	;'I'
   815  00FD5E  4D                 	db	77	;'M'
   816  00FD5F  45                 	db	69	;'E'
   817  00FD60  20                 	db	32
   818  00FD61  20                 	db	32
   819  00FD62  20                 	db	32
   820  00FD63  20                 	db	32
   821  00FD64  00                 	db	0
   822  00FD65                     STR_24:
   823  00FD65  20                 	db	32
   824  00FD66  2D                 	db	45
   825  00FD67  2D                 	db	45
   826  00FD68  20                 	db	32
   827  00FD69  50                 	db	80	;'P'
   828  00FD6A  4F                 	db	79	;'O'
   829  00FD6B  50                 	db	80	;'P'
   830  00FD6C  20                 	db	32
   831  00FD6D  20                 	db	32
   832  00FD6E  43                 	db	67	;'C'
   833  00FD6F  41                 	db	65	;'A'
   834  00FD70  4E                 	db	78	;'N'
   835  00FD71  20                 	db	32
   836  00FD72  2D                 	db	45
   837  00FD73  2D                 	db	45
   838  00FD74  20                 	db	32
   839  00FD75  00                 	db	0
   840  00FD76                     STR_26:
   841  00FD76  20                 	db	32
   842  00FD77  2D                 	db	45
   843  00FD78  2D                 	db	45
   844  00FD79  20                 	db	32
   845  00FD7A  53                 	db	83	;'S'
   846  00FD7B  4F                 	db	79	;'O'
   847  00FD7C  55                 	db	85	;'U'
   848  00FD7D  50                 	db	80	;'P'
   849  00FD7E  20                 	db	32
   850  00FD7F  43                 	db	67	;'C'
   851  00FD80  41                 	db	65	;'A'
   852  00FD81  4E                 	db	78	;'N'
   853  00FD82  20                 	db	32
   854  00FD83  2D                 	db	45
   855  00FD84  2D                 	db	45
   856  00FD85  20                 	db	32
   857  00FD86  00                 	db	0
   858  00FD87                     STR_28:
   859  00FD87  2D                 	db	45
   860  00FD88  2D                 	db	45
   861  00FD89  20                 	db	32
   862  00FD8A  54                 	db	84	;'T'
   863  00FD8B  4F                 	db	79	;'O'
   864  00FD8C  54                 	db	84	;'T'
   865  00FD8D  41                 	db	65	;'A'
   866  00FD8E  4C                 	db	76	;'L'
   867  00FD8F  20                 	db	32
   868  00FD90  43                 	db	67	;'C'
   869  00FD91  41                 	db	65	;'A'
   870  00FD92  4E                 	db	78	;'N'
   871  00FD93  53                 	db	83	;'S'
   872  00FD94  20                 	db	32
   873  00FD95  2D                 	db	45
   874  00FD96  2D                 	db	45
   875  00FD97  00                 	db	0
   876  00FD98                     STR_39:
   877  00FD98  4C                 	db	76	;'L'
   878  00FD99  4F                 	db	79	;'O'
   879  00FD9A  47                 	db	71	;'G'
   880  00FD9B  20                 	db	32
   881  00FD9C  31                 	db	49	;'1'
   882  00FD9D  20                 	db	32
   883  00FD9E  20                 	db	32
   884  00FD9F  20                 	db	32
   885  00FDA0  20                 	db	32
   886  00FDA1  20                 	db	32
   887  00FDA2  20                 	db	32
   888  00FDA3  20                 	db	32
   889  00FDA4  20                 	db	32
   890  00FDA5  20                 	db	32
   891  00FDA6  20                 	db	32
   892  00FDA7  3C                 	db	60	;'<'
   893  00FDA8  00                 	db	0
   894  00FDA9                     STR_42:
   895  00FDA9  4C                 	db	76	;'L'
   896  00FDAA  4F                 	db	79	;'O'
   897  00FDAB  47                 	db	71	;'G'
   898  00FDAC  20                 	db	32
   899  00FDAD  32                 	db	50	;'2'
   900  00FDAE  20                 	db	32
   901  00FDAF  20                 	db	32
   902  00FDB0  20                 	db	32
   903  00FDB1  20                 	db	32
   904  00FDB2  20                 	db	32
   905  00FDB3  20                 	db	32
   906  00FDB4  20                 	db	32
   907  00FDB5  20                 	db	32
   908  00FDB6  20                 	db	32
   909  00FDB7  20                 	db	32
   910  00FDB8  3C                 	db	60	;'<'
   911  00FDB9  00                 	db	0
   912  00FDBA                     STR_46:
   913  00FDBA  4C                 	db	76	;'L'
   914  00FDBB  4F                 	db	79	;'O'
   915  00FDBC  47                 	db	71	;'G'
   916  00FDBD  20                 	db	32
   917  00FDBE  33                 	db	51	;'3'
   918  00FDBF  20                 	db	32
   919  00FDC0  20                 	db	32
   920  00FDC1  20                 	db	32
   921  00FDC2  20                 	db	32
   922  00FDC3  20                 	db	32
   923  00FDC4  20                 	db	32
   924  00FDC5  20                 	db	32
   925  00FDC6  20                 	db	32
   926  00FDC7  20                 	db	32
   927  00FDC8  20                 	db	32
   928  00FDC9  3C                 	db	60	;'<'
   929  00FDCA  00                 	db	0
   930  00FDCB                     STR_50:
   931  00FDCB  4C                 	db	76	;'L'
   932  00FDCC  4F                 	db	79	;'O'
   933  00FDCD  47                 	db	71	;'G'
   934  00FDCE  20                 	db	32
   935  00FDCF  34                 	db	52	;'4'
   936  00FDD0  20                 	db	32
   937  00FDD1  20                 	db	32
   938  00FDD2  20                 	db	32
   939  00FDD3  20                 	db	32
   940  00FDD4  20                 	db	32
   941  00FDD5  20                 	db	32
   942  00FDD6  20                 	db	32
   943  00FDD7  20                 	db	32
   944  00FDD8  20                 	db	32
   945  00FDD9  20                 	db	32
   946  00FDDA  3C                 	db	60	;'<'
   947  00FDDB  00                 	db	0
   948  00FDDC                     STR_38:
   949  00FDDC  33                 	db	51	;'3'
   950  00FDDD  2E                 	db	46
   951  00FDDE  20                 	db	32
   952  00FDDF  4C                 	db	76	;'L'
   953  00FDE0  4F                 	db	79	;'O'
   954  00FDE1  47                 	db	71	;'G'
   955  00FDE2  53                 	db	83	;'S'
   956  00FDE3  20                 	db	32
   957  00FDE4  20                 	db	32
   958  00FDE5  20                 	db	32
   959  00FDE6  20                 	db	32
   960  00FDE7  20                 	db	32
   961  00FDE8  20                 	db	32
   962  00FDE9  20                 	db	32
   963  00FDEA  20                 	db	32
   964  00FDEB  3C                 	db	60	;'<'
   965  00FDEC  00                 	db	0
   966  00FDED                     STR_34:
   967  00FDED  32                 	db	50	;'2'
   968  00FDEE  2E                 	db	46
   969  00FDEF  20                 	db	32
   970  00FDF0  53                 	db	83	;'S'
   971  00FDF1  4F                 	db	79	;'O'
   972  00FDF2  52                 	db	82	;'R'
   973  00FDF3  54                 	db	84	;'T'
   974  00FDF4  20                 	db	32
   975  00FDF5  20                 	db	32
   976  00FDF6  20                 	db	32
   977  00FDF7  20                 	db	32
   978  00FDF8  20                 	db	32
   979  00FDF9  20                 	db	32
   980  00FDFA  20                 	db	32
   981  00FDFB  20                 	db	32
   982  00FDFC  3C                 	db	60	;'<'
   983  00FDFD  00                 	db	0
   984  00FDFE                     STR_31:
   985  00FDFE  31                 	db	49	;'1'
   986  00FDFF  2E                 	db	46
   987  00FE00  20                 	db	32
   988  00FE01  44                 	db	68	;'D'
   989  00FE02  41                 	db	65	;'A'
   990  00FE03  54                 	db	84	;'T'
   991  00FE04  45                 	db	69	;'E'
   992  00FE05  2F                 	db	47
   993  00FE06  54                 	db	84	;'T'
   994  00FE07  49                 	db	73	;'I'
   995  00FE08  4D                 	db	77	;'M'
   996  00FE09  45                 	db	69	;'E'
   997  00FE0A  20                 	db	32
   998  00FE0B  20                 	db	32
   999  00FE0C  20                 	db	32
  1000  00FE0D  3C                 	db	60	;'<'
  1001  00FE0E  00                 	db	0
  1002  00FE0F                     STR_6:
  1003  00FE0F  50                 	db	80	;'P'
  1004  00FE10  41                 	db	65	;'A'
  1005  00FE11  55                 	db	85	;'U'
  1006  00FE12  53                 	db	83	;'S'
  1007  00FE13  45                 	db	69	;'E'
  1008  00FE14  20                 	db	32
  1009  00FE15  3C                 	db	60	;'<'
  1010  00FE16  20                 	db	32
  1011  00FE17  7C                 	db	124
  1012  00FE18  20                 	db	32
  1013  00FE19  42                 	db	66	;'B'
  1014  00FE1A  41                 	db	65	;'A'
  1015  00FE1B  43                 	db	67	;'C'
  1016  00FE1C  4B                 	db	75	;'K'
  1017  00FE1D  20                 	db	32
  1018  00FE1E  3E                 	db	62	;'>'
  1019  00FE1F  00                 	db	0
  1020  00FE20                     STR_30:
  1021  00FE20  50                 	db	80	;'P'
  1022  00FE21  55                 	db	85	;'U'
  1023  00FE22  53                 	db	83	;'S'
  1024  00FE23  48                 	db	72	;'H'
  1025  00FE24  20                 	db	32
  1026  00FE25  54                 	db	84	;'T'
  1027  00FE26  4F                 	db	79	;'O'
  1028  00FE27  20                 	db	32
  1029  00FE28  43                 	db	67	;'C'
  1030  00FE29  4F                 	db	79	;'O'
  1031  00FE2A  4E                 	db	78	;'N'
  1032  00FE2B  54                 	db	84	;'T'
  1033  00FE2C  49                 	db	73	;'I'
  1034  00FE2D  4E                 	db	78	;'N'
  1035  00FE2E  55                 	db	85	;'U'
  1036  00FE2F  45                 	db	69	;'E'
  1037  00FE30  00                 	db	0
  1038  00FE31                     STR_82:
  1039  00FE31  4D                 	db	77	;'M'
  1040  00FE32  41                 	db	65	;'A'
  1041  00FE33  47                 	db	71	;'G'
  1042  00FE34  5F                 	db	95	;'_'
  1043  00FE35  73                 	db	115	;'s'
  1044  00FE36  69                 	db	105	;'i'
  1045  00FE37  67                 	db	103	;'g'
  1046  00FE38  6E                 	db	110	;'n'
  1047  00FE39  61                 	db	97	;'a'
  1048  00FE3A  6C                 	db	108	;'l'
  1049  00FE3B  3A                 	db	58	;':'
  1050  00FE3C  20                 	db	32
  1051  00FE3D  25                 	db	37
  1052  00FE3E  64                 	db	100	;'d'
  1053  00FE3F  20                 	db	32
  1054  00FE40  00                 	db	0
  1055  00FE41                     STR_98:
  1056  00FE41  54                 	db	84	;'T'
  1057  00FE42  53                 	db	83	;'S'
  1058  00FE43  54                 	db	84	;'T'
  1059  00FE44  3A                 	db	58	;':'
  1060  00FE45  20                 	db	32
  1061  00FE46  54                 	db	84	;'T'
  1062  00FE47  49                 	db	73	;'I'
  1063  00FE48  4C                 	db	76	;'L'
  1064  00FE49  54                 	db	84	;'T'
  1065  00FE4A  20                 	db	32
  1066  00FE4B  53                 	db	83	;'S'
  1067  00FE4C  45                 	db	69	;'E'
  1068  00FE4D  52                 	db	82	;'R'
  1069  00FE4E  56                 	db	86	;'V'
  1070  00FE4F  4F                 	db	79	;'O'
  1071  00FE50  00                 	db	0
  1072  00FE51                     STR_4:
  1073  00FE51  44                 	db	68	;'D'
  1074  00FE52  49                 	db	73	;'I'
  1075  00FE53  44                 	db	68	;'D'
  1076  00FE54  4E                 	db	78	;'N'
  1077  00FE55  27                 	db	39
  1078  00FE56  54                 	db	84	;'T'
  1079  00FE57  20                 	db	32
  1080  00FE58  43                 	db	67	;'C'
  1081  00FE59  4F                 	db	79	;'O'
  1082  00FE5A  4D                 	db	77	;'M'
  1083  00FE5B  50                 	db	80	;'P'
  1084  00FE5C  4C                 	db	76	;'L'
  1085  00FE5D  45                 	db	69	;'E'
  1086  00FE5E  54                 	db	84	;'T'
  1087  00FE5F  45                 	db	69	;'E'
  1088  00FE60  00                 	db	0
  1089  00FE61                     STR_80:
  1090  00FE61  49                 	db	73	;'I'
  1091  00FE62  52                 	db	82	;'R'
  1092  00FE63  5F                 	db	95	;'_'
  1093  00FE64  73                 	db	115	;'s'
  1094  00FE65  69                 	db	105	;'i'
  1095  00FE66  67                 	db	103	;'g'
  1096  00FE67  6E                 	db	110	;'n'
  1097  00FE68  61                 	db	97	;'a'
  1098  00FE69  6C                 	db	108	;'l'
  1099  00FE6A  3A                 	db	58	;':'
  1100  00FE6B  20                 	db	32
  1101  00FE6C  25                 	db	37
  1102  00FE6D  64                 	db	100	;'d'
  1103  00FE6E  20                 	db	32
  1104  00FE6F  00                 	db	0
  1105  00FE70                     STR_104:
  1106  00FE70  43                 	db	67	;'C'
  1107  00FE71  41                 	db	65	;'A'
  1108  00FE72  4D                 	db	77	;'M'
  1109  00FE73  20                 	db	32
  1110  00FE74  44                 	db	68	;'D'
  1111  00FE75  57                 	db	87	;'W'
  1112  00FE76  4E                 	db	78	;'N'
  1113  00FE77  20                 	db	32
  1114  00FE78  7C                 	db	124
  1115  00FE79  52                 	db	82	;'R'
  1116  00FE7A  43                 	db	67	;'C'
  1117  00FE7B  30                 	db	48	;'0'
  1118  00FE7C  3D                 	db	61	;'='
  1119  00FE7D  30                 	db	48	;'0'
  1120  00FE7E  00                 	db	0
  1121  00FE7F                     STR_103:
  1122  00FE7F  43                 	db	67	;'C'
  1123  00FE80  41                 	db	65	;'A'
  1124  00FE81  4D                 	db	77	;'M'
  1125  00FE82  20                 	db	32
  1126  00FE83  55                 	db	85	;'U'
  1127  00FE84  50                 	db	80	;'P'
  1128  00FE85  20                 	db	32
  1129  00FE86  20                 	db	32
  1130  00FE87  7C                 	db	124
  1131  00FE88  52                 	db	82	;'R'
  1132  00FE89  43                 	db	67	;'C'
  1133  00FE8A  30                 	db	48	;'0'
  1134  00FE8B  3D                 	db	61	;'='
  1135  00FE8C  31                 	db	49	;'1'
  1136  00FE8D  00                 	db	0
  1137  00FE8E                     STR_81:
  1138  00FE8E  54                 	db	84	;'T'
  1139  00FE8F  53                 	db	83	;'S'
  1140  00FE90  54                 	db	84	;'T'
  1141  00FE91  3A                 	db	58	;':'
  1142  00FE92  20                 	db	32
  1143  00FE93  4D                 	db	77	;'M'
  1144  00FE94  41                 	db	65	;'A'
  1145  00FE95  47                 	db	71	;'G'
  1146  00FE96  4E                 	db	78	;'N'
  1147  00FE97  45                 	db	69	;'E'
  1148  00FE98  54                 	db	84	;'T'
  1149  00FE99  49                 	db	73	;'I'
  1150  00FE9A  53                 	db	83	;'S'
  1151  00FE9B  4D                 	db	77	;'M'
  1152  00FE9C  00                 	db	0
  1153  00FE9D                     STR_102:
  1154  00FE9D  54                 	db	84	;'T'
  1155  00FE9E  53                 	db	83	;'S'
  1156  00FE9F  54                 	db	84	;'T'
  1157  00FEA0  3A                 	db	58	;':'
  1158  00FEA1  20                 	db	32
  1159  00FEA2  43                 	db	67	;'C'
  1160  00FEA3  41                 	db	65	;'A'
  1161  00FEA4  4D                 	db	77	;'M'
  1162  00FEA5  20                 	db	32
  1163  00FEA6  53                 	db	83	;'S'
  1164  00FEA7  45                 	db	69	;'E'
  1165  00FEA8  52                 	db	82	;'R'
  1166  00FEA9  56                 	db	86	;'V'
  1167  00FEAA  4F                 	db	79	;'O'
  1168  00FEAB  00                 	db	0
  1169  00FEAC                     STR_91:
  1170  00FEAC  54                 	db	84	;'T'
  1171  00FEAD  53                 	db	83	;'S'
  1172  00FEAE  54                 	db	84	;'T'
  1173  00FEAF  3A                 	db	58	;':'
  1174  00FEB0  20                 	db	32
  1175  00FEB1  50                 	db	80	;'P'
  1176  00FEB2  41                 	db	65	;'A'
  1177  00FEB3  4E                 	db	78	;'N'
  1178  00FEB4  20                 	db	32
  1179  00FEB5  53                 	db	83	;'S'
  1180  00FEB6  45                 	db	69	;'E'
  1181  00FEB7  52                 	db	82	;'R'
  1182  00FEB8  56                 	db	86	;'V'
  1183  00FEB9  4F                 	db	79	;'O'
  1184  00FEBA  00                 	db	0
  1185  00FEBB                     STR_75:
  1186  00FEBB  41                 	db	65	;'A'
  1187  00FEBC  4C                 	db	76	;'L'
  1188  00FEBD  47                 	db	71	;'G'
  1189  00FEBE  34                 	db	52	;'4'
  1190  00FEBF  3A                 	db	58	;':'
  1191  00FEC0  20                 	db	32
  1192  00FEC1  41                 	db	65	;'A'
  1193  00FEC2  4C                 	db	76	;'L'
  1194  00FEC3  4C                 	db	76	;'L'
  1195  00FEC4  20                 	db	32
  1196  00FEC5  43                 	db	67	;'C'
  1197  00FEC6  41                 	db	65	;'A'
  1198  00FEC7  4E                 	db	78	;'N'
  1199  00FEC8  53                 	db	83	;'S'
  1200  00FEC9  00                 	db	0
  1201  00FECA                     STR_85:
  1202  00FECA  54                 	db	84	;'T'
  1203  00FECB  53                 	db	83	;'S'
  1204  00FECC  54                 	db	84	;'T'
  1205  00FECD  3A                 	db	58	;':'
  1206  00FECE  20                 	db	32
  1207  00FECF  44                 	db	68	;'D'
  1208  00FED0  43                 	db	67	;'C'
  1209  00FED1  20                 	db	32
  1210  00FED2  4D                 	db	77	;'M'
  1211  00FED3  4F                 	db	79	;'O'
  1212  00FED4  54                 	db	84	;'T'
  1213  00FED5  4F                 	db	79	;'O'
  1214  00FED6  52                 	db	82	;'R'
  1215  00FED7  53                 	db	83	;'S'
  1216  00FED8  00                 	db	0
  1217  00FED9                     STR_70:
  1218  00FED9  41                 	db	65	;'A'
  1219  00FEDA  4C                 	db	76	;'L'
  1220  00FEDB  47                 	db	71	;'G'
  1221  00FEDC  4F                 	db	79	;'O'
  1222  00FEDD  52                 	db	82	;'R'
  1223  00FEDE  49                 	db	73	;'I'
  1224  00FEDF  54                 	db	84	;'T'
  1225  00FEE0  48                 	db	72	;'H'
  1226  00FEE1  4D                 	db	77	;'M'
  1227  00FEE2  20                 	db	32
  1228  00FEE3  54                 	db	84	;'T'
  1229  00FEE4  45                 	db	69	;'E'
  1230  00FEE5  53                 	db	83	;'S'
  1231  00FEE6  54                 	db	84	;'T'
  1232  00FEE7  00                 	db	0
  1233  00FEE8                     STR_86:
  1234  00FEE8  50                 	db	80	;'P'
  1235  00FEE9  49                 	db	73	;'I'
  1236  00FEEA  4E                 	db	78	;'N'
  1237  00FEEB  20                 	db	32
  1238  00FEEC  52                 	db	82	;'R'
  1239  00FEED  41                 	db	65	;'A'
  1240  00FEEE  35                 	db	53	;'5'
  1241  00FEEF  20                 	db	32
  1242  00FEF0  48                 	db	72	;'H'
  1243  00FEF1  49                 	db	73	;'I'
  1244  00FEF2  47                 	db	71	;'G'
  1245  00FEF3  48                 	db	72	;'H'
  1246  00FEF4  2E                 	db	46
  1247  00FEF5  00                 	db	0
  1248  00FEF6                     STR_73:
  1249  00FEF6  41                 	db	65	;'A'
  1250  00FEF7  4C                 	db	76	;'L'
  1251  00FEF8  47                 	db	71	;'G'
  1252  00FEF9  32                 	db	50	;'2'
  1253  00FEFA  3A                 	db	58	;':'
  1254  00FEFB  20                 	db	32
  1255  00FEFC  31                 	db	49	;'1'
  1256  00FEFD  32                 	db	50	;'2'
  1257  00FEFE  20                 	db	32
  1258  00FEFF  43                 	db	67	;'C'
  1259  00FF00  41                 	db	65	;'A'
  1260  00FF01  4E                 	db	78	;'N'
  1261  00FF02  53                 	db	83	;'S'
  1262  00FF03  00                 	db	0
  1263  00FF04                     STR_76:
  1264  00FF04  41                 	db	65	;'A'
  1265  00FF05  4C                 	db	76	;'L'
  1266  00FF06  47                 	db	71	;'G'
  1267  00FF07  35                 	db	53	;'5'
  1268  00FF08  3A                 	db	58	;':'
  1269  00FF09  20                 	db	32
  1270  00FF0A  4E                 	db	78	;'N'
  1271  00FF0B  4F                 	db	79	;'O'
  1272  00FF0C  20                 	db	32
  1273  00FF0D  43                 	db	67	;'C'
  1274  00FF0E  41                 	db	65	;'A'
  1275  00FF0F  4E                 	db	78	;'N'
  1276  00FF10  53                 	db	83	;'S'
  1277  00FF11  00                 	db	0
  1278  00FF12                     STR_71:
  1279  00FF12  50                 	db	80	;'P'
  1280  00FF13  55                 	db	85	;'U'
  1281  00FF14  53                 	db	83	;'S'
  1282  00FF15  48                 	db	72	;'H'
  1283  00FF16  20                 	db	32
  1284  00FF17  54                 	db	84	;'T'
  1285  00FF18  4F                 	db	79	;'O'
  1286  00FF19  20                 	db	32
  1287  00FF1A  53                 	db	83	;'S'
  1288  00FF1B  54                 	db	84	;'T'
  1289  00FF1C  41                 	db	65	;'A'
  1290  00FF1D  52                 	db	82	;'R'
  1291  00FF1E  54                 	db	84	;'T'
  1292  00FF1F  00                 	db	0
  1293  00FF20                     STR_23:
  1294  00FF20  25                 	db	37
  1295  00FF21  64                 	db	100	;'d'
  1296  00FF22  20                 	db	32
  1297  00FF23  4D                 	db	77	;'M'
  1298  00FF24  49                 	db	73	;'I'
  1299  00FF25  4E                 	db	78	;'N'
  1300  00FF26  20                 	db	32
  1301  00FF27  25                 	db	37
  1302  00FF28  64                 	db	100	;'d'
  1303  00FF29  20                 	db	32
  1304  00FF2A  53                 	db	83	;'S'
  1305  00FF2B  45                 	db	69	;'E'
  1306  00FF2C  43                 	db	67	;'C'
  1307  00FF2D  00                 	db	0
  1308  00FF2E                     STR_2:
  1309  00FF2E  54                 	db	84	;'T'
  1310  00FF2F  49                 	db	73	;'I'
  1311  00FF30  4D                 	db	77	;'M'
  1312  00FF31  45                 	db	69	;'E'
  1313  00FF32  3A                 	db	58	;':'
  1314  00FF33  20                 	db	32
  1315  00FF34  25                 	db	37
  1316  00FF35  64                 	db	100	;'d'
  1317  00FF36  3A                 	db	58	;':'
  1318  00FF37  25                 	db	37
  1319  00FF38  30                 	db	48	;'0'
  1320  00FF39  32                 	db	50	;'2'
  1321  00FF3A  64                 	db	100	;'d'
  1322  00FF3B  00                 	db	0
  1323  00FF3C                     STR_79:
  1324  00FF3C  54                 	db	84	;'T'
  1325  00FF3D  53                 	db	83	;'S'
  1326  00FF3E  54                 	db	84	;'T'
  1327  00FF3F  3A                 	db	58	;':'
  1328  00FF40  20                 	db	32
  1329  00FF41  49                 	db	73	;'I'
  1330  00FF42  52                 	db	82	;'R'
  1331  00FF43  20                 	db	32
  1332  00FF44  53                 	db	83	;'S'
  1333  00FF45  4E                 	db	78	;'N'
  1334  00FF46  53                 	db	83	;'S'
  1335  00FF47  52                 	db	82	;'R'
  1336  00FF48  00                 	db	0
  1337  00FF49                     STR_107:
  1338  00FF49  53                 	db	83	;'S'
  1339  00FF4A  4F                 	db	79	;'O'
  1340  00FF4B  4C                 	db	76	;'L'
  1341  00FF4C  45                 	db	69	;'E'
  1342  00FF4D  4E                 	db	78	;'N'
  1343  00FF4E  4F                 	db	79	;'O'
  1344  00FF4F  49                 	db	73	;'I'
  1345  00FF50  44                 	db	68	;'D'
  1346  00FF51  20                 	db	32
  1347  00FF52  54                 	db	84	;'T'
  1348  00FF53  53                 	db	83	;'S'
  1349  00FF54  54                 	db	84	;'T'
  1350  00FF55  00                 	db	0
  1351  00FF56                     STR_65:
  1352  00FF56  54                 	db	84	;'T'
  1353  00FF57  49                 	db	73	;'I'
  1354  00FF58  4D                 	db	77	;'M'
  1355  00FF59  45                 	db	69	;'E'
  1356  00FF5A  20                 	db	32
  1357  00FF5B  25                 	db	37
  1358  00FF5C  64                 	db	100	;'d'
  1359  00FF5D  3A                 	db	58	;':'
  1360  00FF5E  25                 	db	37
  1361  00FF5F  30                 	db	48	;'0'
  1362  00FF60  32                 	db	50	;'2'
  1363  00FF61  64                 	db	100	;'d'
  1364  00FF62  00                 	db	0
  1365  00FF63                     STR_74:
  1366  00FF63  41                 	db	65	;'A'
  1367  00FF64  4C                 	db	76	;'L'
  1368  00FF65  47                 	db	71	;'G'
  1369  00FF66  33                 	db	51	;'3'
  1370  00FF67  3A                 	db	58	;':'
  1371  00FF68  20                 	db	32
  1372  00FF69  31                 	db	49	;'1'
  1373  00FF6A  20                 	db	32
  1374  00FF6B  43                 	db	67	;'C'
  1375  00FF6C  41                 	db	65	;'A'
  1376  00FF6D  4E                 	db	78	;'N'
  1377  00FF6E  00                 	db	0
  1378  00FF6F                     STR_88:
  1379  00FF6F  50                 	db	80	;'P'
  1380  00FF70  49                 	db	73	;'I'
  1381  00FF71  4E                 	db	78	;'N'
  1382  00FF72  20                 	db	32
  1383  00FF73  52                 	db	82	;'R'
  1384  00FF74  41                 	db	65	;'A'
  1385  00FF75  33                 	db	51	;'3'
  1386  00FF76  2E                 	db	46
  1387  00FF77  2E                 	db	46
  1388  00FF78  2E                 	db	46
  1389  00FF79  00                 	db	0
  1390  00FF7A                     STR_90:
  1391  00FF7A  50                 	db	80	;'P'
  1392  00FF7B  49                 	db	73	;'I'
  1393  00FF7C  4E                 	db	78	;'N'
  1394  00FF7D  20                 	db	32
  1395  00FF7E  52                 	db	82	;'R'
  1396  00FF7F  41                 	db	65	;'A'
  1397  00FF80  34                 	db	52	;'4'
  1398  00FF81  2E                 	db	46
  1399  00FF82  2E                 	db	46
  1400  00FF83  2E                 	db	46
  1401  00FF84  00                 	db	0
  1402  00FF85                     STR_64:
  1403  00FF85  53                 	db	83	;'S'
  1404  00FF86  4F                 	db	79	;'O'
  1405  00FF87  52                 	db	82	;'R'
  1406  00FF88  54                 	db	84	;'T'
  1407  00FF89  49                 	db	73	;'I'
  1408  00FF8A  4E                 	db	78	;'N'
  1409  00FF8B  47                 	db	71	;'G'
  1410  00FF8C  2E                 	db	46
  1411  00FF8D  2E                 	db	46
  1412  00FF8E  2E                 	db	46
  1413  00FF8F  00                 	db	0
  1414  00FF90                     STR_108:
  1415  00FF90  50                 	db	80	;'P'
  1416  00FF91  55                 	db	85	;'U'
  1417  00FF92  53                 	db	83	;'S'
  1418  00FF93  48                 	db	72	;'H'
  1419  00FF94  20                 	db	32
  1420  00FF95  44                 	db	68	;'D'
  1421  00FF96  4F                 	db	79	;'O'
  1422  00FF97  4E                 	db	78	;'N'
  1423  00FF98  45                 	db	69	;'E'
  1424  00FF99  00                 	db	0
  1425  00FF9A                     STR_83:
  1426  00FF9A  41                 	db	65	;'A'
  1427  00FF9B  43                 	db	67	;'C'
  1428  00FF9C  54                 	db	84	;'T'
  1429  00FF9D  55                 	db	85	;'U'
  1430  00FF9E  41                 	db	65	;'A'
  1431  00FF9F  54                 	db	84	;'T'
  1432  00FFA0  4F                 	db	79	;'O'
  1433  00FFA1  52                 	db	82	;'R'
  1434  00FFA2  53                 	db	83	;'S'
  1435  00FFA3  00                 	db	0
  1436  00FFA4                     STR_22:
  1437  00FFA4  44                 	db	68	;'D'
  1438  00FFA5  55                 	db	85	;'U'
  1439  00FFA6  52                 	db	82	;'R'
  1440  00FFA7  41                 	db	65	;'A'
  1441  00FFA8  54                 	db	84	;'T'
  1442  00FFA9  49                 	db	73	;'I'
  1443  00FFAA  4F                 	db	79	;'O'
  1444  00FFAB  4E                 	db	78	;'N'
  1445  00FFAC  3A                 	db	58	;':'
  1446  00FFAD  00                 	db	0
  1447  00FFAE                     STR_77:
  1448  00FFAE  53                 	db	83	;'S'
  1449  00FFAF  45                 	db	69	;'E'
  1450  00FFB0  4E                 	db	78	;'N'
  1451  00FFB1  53                 	db	83	;'S'
  1452  00FFB2  4F                 	db	79	;'O'
  1453  00FFB3  52                 	db	82	;'R'
  1454  00FFB4  53                 	db	83	;'S'
  1455  00FFB5  00                 	db	0
  1456  00FFB6                     STR_111:
  1457  00FFB6  28                 	db	40
  1458  00FFB7  6E                 	db	110	;'n'
  1459  00FFB8  75                 	db	117	;'u'
  1460  00FFB9  6C                 	db	108	;'l'
  1461  00FFBA  6C                 	db	108	;'l'
  1462  00FFBB  29                 	db	41
  1463  00FFBC  00                 	db	0
  1464  00FFBD                     STR_67:
  1465  00FFBD  46                 	db	70	;'F'
  1466  00FFBE  41                 	db	65	;'A'
  1467  00FFBF  49                 	db	73	;'I'
  1468  00FFC0  4C                 	db	76	;'L'
  1469  00FFC1  45                 	db	69	;'E'
  1470  00FFC2  44                 	db	68	;'D'
  1471  00FFC3  00                 	db	0
  1472  00FFC4                     STR_7:
  1473  00FFC4  53                 	db	83	;'S'
  1474  00FFC5  54                 	db	84	;'T'
  1475  00FFC6  41                 	db	65	;'A'
  1476  00FFC7  52                 	db	82	;'R'
  1477  00FFC8  54                 	db	84	;'T'
  1478  00FFC9  3A                 	db	58	;':'
  1479  00FFCA  00                 	db	0
  1480  00FFCB                     STR_9:
  1481  00FFCB  46                 	db	70	;'F'
  1482  00FFCC  45                 	db	69	;'E'
  1483  00FFCD  42                 	db	66	;'B'
  1484  00FFCE  00                 	db	0
  1485  00FFCF                     STR_19:
  1486  00FFCF  44                 	db	68	;'D'
  1487  00FFD0  45                 	db	69	;'E'
  1488  00FFD1  43                 	db	67	;'C'
  1489  00FFD2  00                 	db	0
  1490  00FFD3                     STR_15:
  1491  00FFD3  41                 	db	65	;'A'
  1492  00FFD4  55                 	db	85	;'U'
  1493  00FFD5  47                 	db	71	;'G'
  1494  00FFD6  00                 	db	0
  1495  00FFD7                     STR_14:
  1496  00FFD7  4A                 	db	74	;'J'
  1497  00FFD8  55                 	db	85	;'U'
  1498  00FFD9  4C                 	db	76	;'L'
  1499  00FFDA  00                 	db	0
  1500  00FFDB                     STR_8:
  1501  00FFDB  4A                 	db	74	;'J'
  1502  00FFDC  41                 	db	65	;'A'
  1503  00FFDD  4E                 	db	78	;'N'
  1504  00FFDE  00                 	db	0
  1505  00FFDF                     STR_13:
  1506  00FFDF  4A                 	db	74	;'J'
  1507  00FFE0  55                 	db	85	;'U'
  1508  00FFE1  4E                 	db	78	;'N'
  1509  00FFE2  00                 	db	0
  1510  00FFE3                     STR_16:
  1511  00FFE3  53                 	db	83	;'S'
  1512  00FFE4  45                 	db	69	;'E'
  1513  00FFE5  50                 	db	80	;'P'
  1514  00FFE6  00                 	db	0
  1515  00FFE7                     STR_10:
  1516  00FFE7  4D                 	db	77	;'M'
  1517  00FFE8  41                 	db	65	;'A'
  1518  00FFE9  52                 	db	82	;'R'
  1519  00FFEA  00                 	db	0
  1520  00FFEB                     STR_11:
  1521  00FFEB  41                 	db	65	;'A'
  1522  00FFEC  50                 	db	80	;'P'
  1523  00FFED  52                 	db	82	;'R'
  1524  00FFEE  00                 	db	0
  1525  00FFEF                     STR_20:
  1526  00FFEF  45                 	db	69	;'E'
  1527  00FFF0  52                 	db	82	;'R'
  1528  00FFF1  52                 	db	82	;'R'
  1529  00FFF2  00                 	db	0
  1530  00FFF3                     STR_17:
  1531  00FFF3  4F                 	db	79	;'O'
  1532  00FFF4  43                 	db	67	;'C'
  1533  00FFF5  54                 	db	84	;'T'
  1534  00FFF6  00                 	db	0
  1535  00FFF7                     STR_18:
  1536  00FFF7  4E                 	db	78	;'N'
  1537  00FFF8  4F                 	db	79	;'O'
  1538  00FFF9  56                 	db	86	;'V'
  1539  00FFFA  00                 	db	0
  1540  00FFFB                     STR_12:
  1541  00FFFB  4D                 	db	77	;'M'
  1542  00FFFC  41                 	db	65	;'A'
  1543  00FFFD  59                 	db	89	;'Y'
  1544  00FFFE  00                 	db	0
  1545  0000                     
  1546                           ; #config settings
  1547  00FFFF  00                 	db	0	; dummy byte at the end
  1548  0000                     
  1549                           	psect	cinit
  1550  003B4E                     __pcinit:
  1551                           	opt stack 0
  1552  003B4E                     start_initialization:
  1553                           	opt stack 0
  1554  003B4E                     __initialization:
  1555                           	opt stack 0
  1556                           
  1557                           ; Initialize objects allocated to BANK1 (8 bytes)
  1558                           ; load TBLPTR registers with __pidataBANK1
  1559  003B4E  0E54               	movlw	low __pidataBANK1
  1560  003B50  6EF6               	movwf	tblptrl,c
  1561  003B52  0E42               	movlw	high __pidataBANK1
  1562  003B54  6EF7               	movwf	tblptrh,c
  1563  003B56  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1564  003B58  6EF8               	movwf	tblptru,c
  1565  003B5A  EE01  F02D         	lfsr	0,__pdataBANK1
  1566  003B5E  EE10 F008          	lfsr	1,8
  1567  003B62                     copy_data0:
  1568  003B62  0009               	tblrd		*+
  1569  003B64  CFF5 FFEE          	movff	tablat,postinc0
  1570  003B68  50E5               	movf	postdec1,w,c
  1571  003B6A  50E1               	movf	fsr1l,w,c
  1572  003B6C  E1FA               	bnz	copy_data0
  1573                           
  1574                           ; Clear objects allocated to BANK1 (45 bytes)
  1575  003B6E  EE01  F000         	lfsr	0,__pbssBANK1
  1576  003B72  0E2D               	movlw	45
  1577  003B74                     clear_0:
  1578  003B74  6AEE               	clrf	postinc0,c
  1579  003B76  06E8               	decf	wreg,f,c
  1580  003B78  E1FD               	bnz	clear_0
  1581                           
  1582                           ; Clear objects allocated to BANK0 (38 bytes)
  1583  003B7A  EE00  F0DA         	lfsr	0,__pbssBANK0
  1584  003B7E  0E26               	movlw	38
  1585  003B80                     clear_1:
  1586  003B80  6AEE               	clrf	postinc0,c
  1587  003B82  06E8               	decf	wreg,f,c
  1588  003B84  E1FD               	bnz	clear_1
  1589                           
  1590                           ; Clear objects allocated to COMRAM (35 bytes)
  1591  003B86  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1592  003B8A  0E23               	movlw	35
  1593  003B8C                     clear_2:
  1594  003B8C  6AEE               	clrf	postinc0,c
  1595  003B8E  06E8               	decf	wreg,f,c
  1596  003B90  E1FD               	bnz	clear_2
  1597  003B92                     end_of_initialization:
  1598                           	opt stack 0
  1599  003B92                     __end_of__initialization:
  1600                           	opt stack 0
  1601  003B92  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1602  003B94  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1603  003B96  0100               	movlb	0
  1604  003B98  EFF9  F019         	goto	_main	;jump to C main() function
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postdec1	equ	0xFE5
  1612                           fsr1l	equ	0xFE1
  1613                           
  1614                           	psect	bssCOMRAM
  1615  00005B                     __pbssCOMRAM:
  1616                           	opt stack 0
  1617  00005B                     _back:
  1618                           	opt stack 0
  1619  00005B                     	ds	2
  1620  00005D                     _count_can_no_lab:
  1621                           	opt stack 0
  1622  00005D                     	ds	2
  1623  00005F                     _count_can_w_lab:
  1624                           	opt stack 0
  1625  00005F                     	ds	2
  1626  000061                     _count_pop_no_tab:
  1627                           	opt stack 0
  1628  000061                     	ds	2
  1629  000063                     _count_pop_w_tab:
  1630                           	opt stack 0
  1631  000063                     	ds	2
  1632  000065                     _cur_can:
  1633                           	opt stack 0
  1634  000065                     	ds	2
  1635  000067                     _down:
  1636                           	opt stack 0
  1637  000067                     	ds	2
  1638  000069                     _enter:
  1639                           	opt stack 0
  1640  000069                     	ds	2
  1641  00006B                     _f_ID_receive:
  1642                           	opt stack 0
  1643  00006B                     	ds	2
  1644  00006D                     _f_can_coming_to_ID:
  1645                           	opt stack 0
  1646  00006D                     	ds	2
  1647  00006F                     _f_can_coming_to_distribution:
  1648                           	opt stack 0
  1649  00006F                     	ds	2
  1650  000071                     _f_can_distributed:
  1651                           	opt stack 0
  1652  000071                     	ds	2
  1653  000073                     _f_lastCan:
  1654                           	opt stack 0
  1655  000073                     	ds	2
  1656  000075                     _firstboot:
  1657                           	opt stack 0
  1658  000075                     	ds	2
  1659  000077                     _up:
  1660                           	opt stack 0
  1661  000077                     	ds	2
  1662  000079                     _was_low_1:
  1663                           	opt stack 0
  1664  000079                     	ds	2
  1665  00007B                     _was_low_3:
  1666                           	opt stack 0
  1667  00007B                     	ds	2
  1668  00007D                     _input:
  1669                           	opt stack 0
  1670  00007D                     	ds	1
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1l	equ	0xFE1
  1679                           
  1680                           	psect	bssBANK0
  1681  0000DA                     __pbssBANK0:
  1682                           	opt stack 0
  1683  0000DA                     _IR_signal:
  1684                           	opt stack 0
  1685  0000DA                     	ds	2
  1686  0000DC                     _MAG_signal:
  1687                           	opt stack 0
  1688  0000DC                     	ds	2
  1689  0000DE                     _cur_state:
  1690                           	opt stack 0
  1691  0000DE                     	ds	2
  1692  0000E0                     _debug:
  1693                           	opt stack 0
  1694  0000E0                     	ds	2
  1695  0000E2                     _f_loadingNewCan:
  1696                           	opt stack 0
  1697  0000E2                     	ds	2
  1698  0000E4                     _first:
  1699                           	opt stack 0
  1700  0000E4                     	ds	2
  1701  0000E6                     _log:
  1702                           	opt stack 0
  1703  0000E6                     	ds	2
  1704  0000E8                     _log_completion:
  1705                           	opt stack 0
  1706  0000E8                     	ds	2
  1707  0000EA                     _log_count_can_no_lab:
  1708                           	opt stack 0
  1709  0000EA                     	ds	2
  1710  0000EC                     _log_count_can_w_lab:
  1711                           	opt stack 0
  1712  0000EC                     	ds	2
  1713  0000EE                     _log_count_pop_no_tab:
  1714                           	opt stack 0
  1715  0000EE                     	ds	2
  1716  0000F0                     _log_count_pop_w_tab:
  1717                           	opt stack 0
  1718  0000F0                     	ds	2
  1719  0000F2                     _log_count_total:
  1720                           	opt stack 0
  1721  0000F2                     	ds	2
  1722  0000F4                     _log_total_time:
  1723                           	opt stack 0
  1724  0000F4                     	ds	2
  1725  0000F6                     _logstate:
  1726                           	opt stack 0
  1727  0000F6                     	ds	2
  1728  0000F8                     _total_time:
  1729                           	opt stack 0
  1730  0000F8                     	ds	2
  1731  0000FA                     _var:
  1732                           	opt stack 0
  1733  0000FA                     	ds	2
  1734  0000FC                     _machine_state:
  1735                           	opt stack 0
  1736  0000FC                     	ds	1
  1737  0000FD                     _sel:
  1738                           	opt stack 0
  1739  0000FD                     	ds	1
  1740  0000FE                     _count_total:
  1741                           	opt stack 0
  1742  0000FE                     	ds	2
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	bssBANK1
  1753  000100                     __pbssBANK1:
  1754                           	opt stack 0
  1755  000100                     _log_startTime:
  1756                           	opt stack 0
  1757  000100                     	ds	14
  1758  00010E                     _startTime:
  1759                           	opt stack 0
  1760  00010E                     	ds	14
  1761  00011C                     _servoTimes:
  1762                           	opt stack 0
  1763  00011C                     	ds	8
  1764  000124                     _time:
  1765                           	opt stack 0
  1766  000124                     	ds	7
  1767  00012B                     _i:
  1768                           	opt stack 0
  1769  00012B                     	ds	2
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           postdec1	equ	0xFE5
  1777                           fsr1l	equ	0xFE1
  1778                           
  1779                           	psect	dataBANK1
  1780  00012D                     __pdataBANK1:
  1781                           	opt stack 0
  1782  00012D                     UI@F3222:
  1783                           	opt stack 0
  1784  00012D                     	ds	4
  1785  000131                     printRTC@F3213:
  1786                           	opt stack 0
  1787  000131                     	ds	4
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1l	equ	0xFE1
  1796                           
  1797                           	psect	cstackBANK0
  1798  000080                     __pcstackBANK0:
  1799                           	opt stack 0
  1800  000080                     ??_delay_ms:
  1801  000080                     ??_PortTests:
  1802  000080                     ??_isdigit:
  1803  000080                     ??_readADC:
  1804  000080                     ??_I2C_Master_Wait:
  1805  000080                     ?___wmul:
  1806                           	opt stack 0
  1807  000080                     ?___awmod:
  1808                           	opt stack 0
  1809  000080                     ?___lwdiv:
  1810                           	opt stack 0
  1811  000080                     ?___lldiv:
  1812                           	opt stack 0
  1813  000080                     lcdNibble@temp:
  1814                           	opt stack 0
  1815  000080                     initTime@m:
  1816                           	opt stack 0
  1817  000080                     updateServoPosition@time_us:
  1818                           	opt stack 0
  1819  000080                     EEPROM_read@address:
  1820                           	opt stack 0
  1821  000080                     ___wmul@multiplier:
  1822                           	opt stack 0
  1823  000080                     ___awmod@dividend:
  1824                           	opt stack 0
  1825  000080                     ___lwdiv@dividend:
  1826                           	opt stack 0
  1827  000080                     strcpy@to:
  1828                           	opt stack 0
  1829  000080                     ___lldiv@dividend:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0x0
  1833  000080                     	ds	1
  1834  000081                     readADC@channel:
  1835                           	opt stack 0
  1836  000081                     I2C_Master_Read@a:
  1837                           	opt stack 0
  1838  000081                     lcdNibble@data:
  1839                           	opt stack 0
  1840  000081                     initTime@h:
  1841                           	opt stack 0
  1842  000081                     delay_ms@milliseconds:
  1843                           	opt stack 0
  1844  000081                     _isdigit$1876:
  1845                           	opt stack 0
  1846  000081                     I2C_Master_Write@d:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x1
  1850  000081                     	ds	1
  1851  000082                     ??_readIR:
  1852  000082                     ??_readMAG:
  1853  000082                     I2C_Master_Read@temp:
  1854                           	opt stack 0
  1855  000082                     lcdInst@data:
  1856                           	opt stack 0
  1857  000082                     putch@data:
  1858                           	opt stack 0
  1859  000082                     initTime@w:
  1860                           	opt stack 0
  1861  000082                     isdigit@c:
  1862                           	opt stack 0
  1863  000082                     updateServoPosition@timer:
  1864                           	opt stack 0
  1865  000082                     ___wmul@multiplicand:
  1866                           	opt stack 0
  1867  000082                     ___awmod@divisor:
  1868                           	opt stack 0
  1869  000082                     ___lwdiv@divisor:
  1870                           	opt stack 0
  1871  000082                     strcpy@from:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x2
  1875  000082                     	ds	1
  1876  000083                     ??_initLCD:
  1877  000083                     initTime@DD:
  1878                           	opt stack 0
  1879  000083                     getRTC@i:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x3
  1883  000083                     	ds	1
  1884  000084                     ??_updateServoPosition:
  1885  000084                     initTime@MM:
  1886                           	opt stack 0
  1887  000084                     ___awmod@counter:
  1888                           	opt stack 0
  1889  000084                     readIR@res:
  1890                           	opt stack 0
  1891  000084                     readMAG@res:
  1892                           	opt stack 0
  1893  000084                     ___wmul@product:
  1894                           	opt stack 0
  1895  000084                     ___lwdiv@quotient:
  1896                           	opt stack 0
  1897  000084                     strcpy@cp:
  1898                           	opt stack 0
  1899  000084                     ___lldiv@divisor:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x4
  1903  000084                     	ds	1
  1904  000085                     ??_initSortTimer:
  1905  000085                     initTime@YY:
  1906                           	opt stack 0
  1907  000085                     ___awmod@sign:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x5
  1911  000085                     	ds	1
  1912  000086                     ??_ID:
  1913  000086                     ?___awdiv:
  1914                           	opt stack 0
  1915  000086                     initTime@s:
  1916                           	opt stack 0
  1917  000086                     ___lwdiv@counter:
  1918                           	opt stack 0
  1919  000086                     updateServoPosition@my_time:
  1920                           	opt stack 0
  1921  000086                     ___awdiv@dividend:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x6
  1925  000086                     	ds	1
  1926  000087                     ?___lwmod:
  1927                           	opt stack 0
  1928  000087                     ___lwmod@dividend:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x7
  1932  000087                     	ds	1
  1933  000088                     ??_Distribution:
  1934  000088                     ??_initServos:
  1935  000088                     initSortTimer@i:
  1936                           	opt stack 0
  1937  000088                     ___awdiv@divisor:
  1938                           	opt stack 0
  1939  000088                     ___lldiv@quotient:
  1940                           	opt stack 0
  1941  000088                     ID@sensor_outputs:
  1942                           	opt stack 0
  1943                           
  1944                           ; 6 bytes @ 0x8
  1945  000088                     	ds	1
  1946  000089                     ___lwmod@divisor:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x9
  1950  000089                     	ds	1
  1951  00008A                     ___awdiv@counter:
  1952                           	opt stack 0
  1953                           
  1954                           ; 1 bytes @ 0xA
  1955  00008A                     	ds	1
  1956  00008B                     ___awdiv@sign:
  1957                           	opt stack 0
  1958  00008B                     ___lwmod@counter:
  1959                           	opt stack 0
  1960                           
  1961                           ; 1 bytes @ 0xB
  1962  00008B                     	ds	1
  1963  00008C                     ___lldiv@counter:
  1964                           	opt stack 0
  1965  00008C                     ___awdiv@quotient:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0xC
  1969  00008C                     	ds	1
  1970  00008D                     I2C_Master_Init@c:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0xD
  1974  00008D                     	ds	1
  1975  00008E                     ?_printf:
  1976                           	opt stack 0
  1977  00008E                     printf@f:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0xE
  1981  00008E                     	ds	3
  1982  000091                     ??_I2C_Master_Init:
  1983                           
  1984                           ; 1 bytes @ 0x11
  1985  000091                     	ds	4
  1986  000095                     ??_loadRTC:
  1987                           
  1988                           ; 1 bytes @ 0x15
  1989  000095                     	ds	1
  1990  000096                     loadRTC@i:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x16
  1994  000096                     	ds	4
  1995  00009A                     ??_printf:
  1996                           
  1997                           ; 1 bytes @ 0x1A
  1998  00009A                     	ds	4
  1999  00009E                     printf@prec:
  2000                           	opt stack 0
  2001                           
  2002                           ; 1 bytes @ 0x1E
  2003  00009E                     	ds	1
  2004  00009F                     printf@cp:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x1F
  2008  00009F                     	ds	2
  2009  0000A1                     printf@ap:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x21
  2013  0000A1                     	ds	2
  2014  0000A3                     printf@len:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x23
  2018  0000A3                     	ds	2
  2019  0000A5                     printf@val:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x25
  2023  0000A5                     	ds	2
  2024  0000A7                     printf@flag:
  2025                           	opt stack 0
  2026                           
  2027                           ; 1 bytes @ 0x27
  2028  0000A7                     	ds	1
  2029  0000A8                     printf@c:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x28
  2033  0000A8                     	ds	1
  2034  0000A9                     printf@width:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x29
  2038  0000A9                     	ds	2
  2039  0000AB                     ??_printRTC:
  2040  0000AB                     ??_algorithmTest:
  2041  0000AB                     ??_sensorTest:
  2042  0000AB                     ??_actuatorTest:
  2043  0000AB                     ??_PortTestA5:
  2044  0000AB                     ??_ToggleTestA5:
  2045  0000AB                     ??_SolenoidTestA5:
  2046  0000AB                     EEPROM_write@address:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x2B
  2050  0000AB                     	ds	1
  2051  0000AC                     ToggleTestA5@on:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x2C
  2055  0000AC                     	ds	1
  2056  0000AD                     EEPROM_write@data:
  2057                           	opt stack 0
  2058  0000AD                     actuatorTest@i_1569:
  2059                           	opt stack 0
  2060  0000AD                     sensorTest@on:
  2061                           	opt stack 0
  2062  0000AD                     SolenoidTestA5@i:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x2D
  2066  0000AD                     	ds	1
  2067  0000AE                     ??_EEPROM_write:
  2068  0000AE                     actuatorTest@i_1576:
  2069                           	opt stack 0
  2070  0000AE                     printRTC@INT_time:
  2071                           	opt stack 0
  2072                           
  2073                           ; 14 bytes @ 0x2E
  2074  0000AE                     	ds	1
  2075  0000AF                     EEPROM_write@i:
  2076                           	opt stack 0
  2077  0000AF                     actuatorTest@i_1577:
  2078                           	opt stack 0
  2079  0000AF                     SolenoidTestA5@i_1620:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x2F
  2083  0000AF                     	ds	1
  2084  0000B0                     EEPROM_write@i_1314:
  2085                           	opt stack 0
  2086  0000B0                     actuatorTest@i_1579:
  2087                           	opt stack 0
  2088  0000B0                     SolenoidTestA5@i_1622:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x30
  2092  0000B0                     	ds	1
  2093  0000B1                     ??_Loading:
  2094  0000B1                     logRun@num:
  2095                           	opt stack 0
  2096  0000B1                     actuatorTest@i_1580:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x31
  2100  0000B1                     	ds	1
  2101  0000B2                     logRun@byte1:
  2102                           	opt stack 0
  2103  0000B2                     actuatorTest@i_1582:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x32
  2107  0000B2                     	ds	1
  2108  0000B3                     logRun@byte2:
  2109                           	opt stack 0
  2110  0000B3                     actuatorTest@i_1583:
  2111                           	opt stack 0
  2112  0000B3                     Loading@addr:
  2113                           	opt stack 0
  2114                           
  2115                           ; 2 bytes @ 0x33
  2116  0000B3                     	ds	1
  2117  0000B4                     logRun@byte3:
  2118                           	opt stack 0
  2119  0000B4                     actuatorTest@i_1585:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x34
  2123  0000B4                     	ds	1
  2124  0000B5                     Loading@byte1:
  2125                           	opt stack 0
  2126  0000B5                     logRun@byte_i:
  2127                           	opt stack 0
  2128  0000B5                     actuatorTest@i_1586:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x35
  2132  0000B5                     	ds	1
  2133  0000B6                     logRun@byte11:
  2134                           	opt stack 0
  2135  0000B6                     actuatorTest@i_1588:
  2136                           	opt stack 0
  2137  0000B6                     Loading@i:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x36
  2141  0000B6                     	ds	1
  2142  0000B7                     actuatorTest@i_1589:
  2143                           	opt stack 0
  2144  0000B7                     logRun@i:
  2145                           	opt stack 0
  2146                           
  2147                           ; 2 bytes @ 0x37
  2148  0000B7                     	ds	1
  2149  0000B8                     actuatorTest@i_1591:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x38
  2153  0000B8                     	ds	1
  2154  0000B9                     actuatorTest@i_1592:
  2155                           	opt stack 0
  2156  0000B9                     logRun@addr:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x39
  2160  0000B9                     	ds	1
  2161  0000BA                     actuatorTest@i_1595:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x3A
  2165  0000BA                     	ds	1
  2166  0000BB                     actuatorTest@i_1596:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x3B
  2170  0000BB                     	ds	1
  2171  0000BC                     actuatorTest@i_1598:
  2172                           	opt stack 0
  2173  0000BC                     printRTC@RTC_month:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x3C
  2177  0000BC                     	ds	1
  2178  0000BD                     actuatorTest@i_1599:
  2179                           	opt stack 0
  2180                           
  2181                           ; 1 bytes @ 0x3D
  2182  0000BD                     	ds	1
  2183  0000BE                     actuatorTest@i_1601:
  2184                           	opt stack 0
  2185  0000BE                     printRTC@month:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0x3E
  2189  0000BE                     	ds	1
  2190  0000BF                     actuatorTest@i_1602:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x3F
  2194  0000BF                     	ds	1
  2195  0000C0                     actuatorTest@i_1605:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x40
  2199  0000C0                     	ds	1
  2200  0000C1                     actuatorTest@i_1606:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x41
  2204  0000C1                     	ds	1
  2205  0000C2                     actuatorTest@i_1608:
  2206                           	opt stack 0
  2207  0000C2                     printRTC@i:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x42
  2211  0000C2                     	ds	1
  2212  0000C3                     actuatorTest@i_1609:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x43
  2216  0000C3                     	ds	1
  2217  0000C4                     ??_UI:
  2218  0000C4                     actuatorTest@i:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x44
  2222  0000C4                     	ds	2
  2223  0000C6                     ??_Test:
  2224  0000C6                     _UI$2232:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x46
  2228  0000C6                     	ds	2
  2229  0000C8                     UI@i:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x48
  2233  0000C8                     	ds	1
  2234  0000C9                     UI@i_408:
  2235                           	opt stack 0
  2236                           
  2237                           ; 1 bytes @ 0x49
  2238  0000C9                     	ds	1
  2239  0000CA                     UI@i_411:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x4A
  2243  0000CA                     	ds	1
  2244  0000CB                     UI@i_412:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x4B
  2248  0000CB                     	ds	1
  2249  0000CC                     UI@i_430:
  2250                           	opt stack 0
  2251                           
  2252                           ; 1 bytes @ 0x4C
  2253  0000CC                     	ds	1
  2254  0000CD                     UI@i_431:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x4D
  2258  0000CD                     	ds	1
  2259  0000CE                     UI@i_434:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x4E
  2263  0000CE                     	ds	1
  2264  0000CF                     UI@i_435:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x4F
  2268  0000CF                     	ds	1
  2269  0000D0                     UI@i_438:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x50
  2273  0000D0                     	ds	1
  2274  0000D1                     UI@i_439:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x51
  2278  0000D1                     	ds	1
  2279  0000D2                     UI@i_442:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x52
  2283  0000D2                     	ds	1
  2284  0000D3                     UI@i_443:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x53
  2288  0000D3                     	ds	1
  2289  0000D4                     UI@i_446:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x54
  2293  0000D4                     	ds	1
  2294  0000D5                     UI@i_447:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x55
  2298  0000D5                     	ds	1
  2299  0000D6                     UI@month:
  2300                           	opt stack 0
  2301                           
  2302                           ; 4 bytes @ 0x56
  2303  0000D6                     	ds	4
  2304  0000DA                     tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           
  2313                           ; 1 bytes @ 0x5A
  2314                           
  2315                           	psect	cstackCOMRAM
  2316  000001                     __pcstackCOMRAM:
  2317                           	opt stack 0
  2318  000001                     ??i2_I2C_Master_Wait:
  2319  000001                     ??i2_isdigit:
  2320  000001                     ?i2___wmul:
  2321                           	opt stack 0
  2322  000001                     ?i2___lwmod:
  2323                           	opt stack 0
  2324  000001                     i2lcdNibble@temp:
  2325                           	opt stack 0
  2326  000001                     i2EEPROM_read@address:
  2327                           	opt stack 0
  2328  000001                     i2___wmul@multiplier:
  2329                           	opt stack 0
  2330  000001                     i2___lwmod@dividend:
  2331                           	opt stack 0
  2332  000001                     i2strcpy@to:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x0
  2336  000001                     	ds	1
  2337  000002                     i2I2C_Master_Read@a:
  2338                           	opt stack 0
  2339  000002                     i2lcdNibble@data:
  2340                           	opt stack 0
  2341  000002                     i2_isdigit$1876:
  2342                           	opt stack 0
  2343  000002                     i2I2C_Master_Write@d:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x1
  2347  000002                     	ds	1
  2348  000003                     i2I2C_Master_Read@temp:
  2349                           	opt stack 0
  2350  000003                     i2lcdInst@data:
  2351                           	opt stack 0
  2352  000003                     i2putch@data:
  2353                           	opt stack 0
  2354  000003                     i2isdigit@c:
  2355                           	opt stack 0
  2356  000003                     i2___wmul@multiplicand:
  2357                           	opt stack 0
  2358  000003                     i2___lwmod@divisor:
  2359                           	opt stack 0
  2360  000003                     i2strcpy@from:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2
  2364  000003                     	ds	1
  2365  000004                     i2getRTC@i:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x3
  2369  000004                     	ds	1
  2370  000005                     i2___lwmod@counter:
  2371                           	opt stack 0
  2372  000005                     i2___wmul@product:
  2373                           	opt stack 0
  2374  000005                     i2strcpy@cp:
  2375                           	opt stack 0
  2376                           
  2377                           ; 2 bytes @ 0x4
  2378  000005                     	ds	1
  2379  000006                     ?i2___lwdiv:
  2380                           	opt stack 0
  2381  000006                     i2___lwdiv@dividend:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x5
  2385  000006                     	ds	1
  2386  000007                     retrieveLog@logNum:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x6
  2390  000007                     	ds	1
  2391  000008                     i2___lwdiv@divisor:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x7
  2395  000008                     	ds	1
  2396  000009                     ??_retrieveLog:
  2397                           
  2398                           ; 1 bytes @ 0x8
  2399  000009                     	ds	1
  2400  00000A                     i2___lwdiv@quotient:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x9
  2404  00000A                     	ds	1
  2405  00000B                     retrieveLog@byte1:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0xA
  2409  00000B                     	ds	1
  2410  00000C                     retrieveLog@byte2:
  2411                           	opt stack 0
  2412  00000C                     i2___lwdiv@counter:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0xB
  2416  00000C                     	ds	1
  2417  00000D                     ?i2_printf:
  2418                           	opt stack 0
  2419  00000D                     retrieveLog@byte3:
  2420                           	opt stack 0
  2421  00000D                     i2printf@f:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0xC
  2425  00000D                     	ds	1
  2426  00000E                     retrieveLog@i:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0xD
  2430  00000E                     	ds	2
  2431  000010                     retrieveLog@addr:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0xF
  2435  000010                     	ds	2
  2436  000012                     dispLogs@myLog:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x11
  2440  000012                     	ds	2
  2441  000014                     
  2442                           ; 1 bytes @ 0x13
  2443  000014                     	ds	5
  2444  000019                     ??i2_printf:
  2445                           
  2446                           ; 1 bytes @ 0x18
  2447  000019                     	ds	4
  2448  00001D                     i2printf@prec:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0x1C
  2452  00001D                     	ds	1
  2453  00001E                     i2printf@cp:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x1D
  2457  00001E                     	ds	2
  2458  000020                     i2printf@ap:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x1F
  2462  000020                     	ds	2
  2463  000022                     i2printf@len:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x21
  2467  000022                     	ds	2
  2468  000024                     i2printf@val:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x23
  2472  000024                     	ds	2
  2473  000026                     i2printf@flag:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x25
  2477  000026                     	ds	1
  2478  000027                     i2printf@c:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x26
  2482  000027                     	ds	1
  2483  000028                     i2printf@width:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x27
  2487  000028                     	ds	2
  2488  00002A                     ??_printSortTimer:
  2489  00002A                     ??i2_printRTC:
  2490  00002A                     ?_inputHandler:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x29
  2494  00002A                     	ds	2
  2495  00002C                     ??_inputHandler:
  2496                           
  2497                           ; 1 bytes @ 0x2B
  2498  00002C                     	ds	1
  2499  00002D                     printSortTimer@hour:
  2500                           	opt stack 0
  2501  00002D                     i2printRTC@INT_time:
  2502                           	opt stack 0
  2503                           
  2504                           ; 14 bytes @ 0x2C
  2505  00002D                     	ds	2
  2506  00002F                     printSortTimer@curTime:
  2507                           	opt stack 0
  2508                           
  2509                           ; 14 bytes @ 0x2E
  2510  00002F                     	ds	12
  2511  00003B                     i2printRTC@RTC_month:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x3A
  2515  00003B                     	ds	2
  2516  00003D                     printSortTimer@start_sec:
  2517                           	opt stack 0
  2518  00003D                     i2printRTC@month:
  2519                           	opt stack 0
  2520                           
  2521                           ; 4 bytes @ 0x3C
  2522  00003D                     	ds	2
  2523  00003F                     printSortTimer@cur_sec:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x3E
  2527  00003F                     	ds	2
  2528  000041                     printSortTimer@min:
  2529                           	opt stack 0
  2530  000041                     i2printRTC@i:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x40
  2534  000041                     	ds	2
  2535  000043                     ??_updateMenu:
  2536  000043                     printSortTimer@sec:
  2537                           	opt stack 0
  2538                           
  2539                           ; 2 bytes @ 0x42
  2540  000043                     	ds	2
  2541  000045                     _printSortTimer$2352:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x44
  2545  000045                     	ds	2
  2546  000047                     printSortTimer@timeDiff:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x46
  2550  000047                     	ds	2
  2551  000049                     printSortTimer@i:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x48
  2555  000049                     	ds	2
  2556  00004B                     ??_handler:
  2557                           
  2558                           ; 1 bytes @ 0x4A
  2559  00004B                     	ds	16
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1l	equ	0xFE1
  2568                           
  2569 ;;
  2570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2571 ;;
  2572 ;; *************** function _main *****************
  2573 ;; Defined at:
  2574 ;;		line 18 in file "main.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels required when called:   13
  2594 ;; This function calls:
  2595 ;;		_Test
  2596 ;;		_UI
  2597 ;;		_initLCD
  2598 ;;		_initTime
  2599 ;;		_initUI
  2600 ;;		_logRun
  2601 ;;		_machineConfig
  2602 ;;		_sort
  2603 ;;		_stopSignals
  2604 ;; This function is called by:
  2605 ;;		Startup code after reset
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text0
  2610  0033F2                     __ptext0:
  2611                           	opt stack 0
  2612  0033F2                     _main:
  2613                           	opt stack 18
  2614                           
  2615                           ;main.c: 19: machineConfig();
  2616                           
  2617                           ;incstack = 0
  2618  0033F2  EC27  F01D         	call	_machineConfig	;wreg free
  2619                           
  2620                           ;main.c: 20: initLCD();
  2621  0033F6  EC1A  F01E         	call	_initLCD	;wreg free
  2622                           
  2623                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2624  0033FA  0E20               	movlw	32
  2625  0033FC  0100               	movlb	0	; () banked
  2626  0033FE  6F80               	movwf	initTime@m& (0+255),b
  2627  003400  0E13               	movlw	19
  2628  003402  0100               	movlb	0	; () banked
  2629  003404  6F81               	movwf	initTime@h& (0+255),b
  2630  003406  0E04               	movlw	4
  2631  003408  0100               	movlb	0	; () banked
  2632  00340A  6F82               	movwf	initTime@w& (0+255),b
  2633  00340C  0E01               	movlw	1
  2634  00340E  0100               	movlb	0	; () banked
  2635  003410  6F83               	movwf	initTime@DD& (0+255),b
  2636  003412  0E03               	movlw	3
  2637  003414  0100               	movlb	0	; () banked
  2638  003416  6F84               	movwf	initTime@MM& (0+255),b
  2639  003418  0E17               	movlw	23
  2640  00341A  0100               	movlb	0	; () banked
  2641  00341C  6F85               	movwf	initTime@YY& (0+255),b
  2642  00341E  0E42               	movlw	66
  2643  003420  ECAF  F020         	call	_initTime
  2644                           
  2645                           ;main.c: 22: initUI();
  2646  003424  EC7A  F020         	call	_initUI	;wreg free
  2647                           
  2648                           ;main.c: 23: first = 1;
  2649  003428  0E00               	movlw	0
  2650  00342A  0100               	movlb	0	; () banked
  2651  00342C  6FE5               	movwf	(_first+1)& (0+255),b
  2652  00342E  0E01               	movlw	1
  2653  003430  6FE4               	movwf	_first& (0+255),b
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;main.c: 34: switch(machine_state){
  2657                           
  2658                           ;main.c: 33: while(1){
  2659  003432  D018               	goto	l7760
  2660  003434                     l7742:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 36: UI();
  2664  003434  EC09  F000         	call	_UI	;wreg free
  2665                           
  2666                           ;main.c: 37: break;
  2667  003438  D015               	goto	l7760
  2668  00343A                     l7744:
  2669                           
  2670                           ;main.c: 39: sort();
  2671  00343A  EC9E  F020         	call	_sort	;wreg free
  2672                           
  2673                           ;main.c: 40: break;
  2674  00343E  D012               	goto	l7760
  2675  003440                     l7746:
  2676                           
  2677                           ;main.c: 42: stopSignals();
  2678  003440  ECDB  F020         	call	_stopSignals	;wreg free
  2679                           
  2680                           ;main.c: 43: logRun();
  2681  003444  ECFE  F014         	call	_logRun	;wreg free
  2682                           
  2683                           ;main.c: 44: first = 1;
  2684  003448  0E00               	movlw	0
  2685  00344A  0100               	movlb	0	; () banked
  2686  00344C  6FE5               	movwf	(_first+1)& (0+255),b
  2687  00344E  0E01               	movlw	1
  2688  003450  6FE4               	movwf	_first& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 45: UI();
  2692  003452  EC09  F000         	call	_UI	;wreg free
  2693                           
  2694                           ;main.c: 46: break;
  2695  003456  D006               	goto	l7760
  2696  003458                     l7754:
  2697                           
  2698                           ;main.c: 48: Test();
  2699  003458  EC39  F017         	call	_Test	;wreg free
  2700                           
  2701                           ;main.c: 49: break;
  2702  00345C  D003               	goto	l7760
  2703  00345E                     l7756:
  2704                           
  2705                           ;main.c: 51: stopSignals();
  2706  00345E  ECDB  F020         	call	_stopSignals	;wreg free
  2707  003462                     l478:
  2708  003462  D7FF               	goto	l478
  2709  003464                     l7760:
  2710  003464  0100               	movlb	0	; () banked
  2711  003466  51FC               	movf	_machine_state& (0+255),w,b
  2712                           
  2713                           ; Switch size 1, requested type "space"
  2714                           ; Number of cases is 5, Range of values is 0 to 4
  2715                           ; switch strategies available:
  2716                           ; Name         Instructions Cycles
  2717                           ; simple_byte           16     9 (average)
  2718                           ;	Chosen strategy is simple_byte
  2719  003468  0A00               	xorlw	0	; case 0
  2720  00346A  B4D8               	btfsc	status,2,c
  2721  00346C  D7E3               	goto	l7742
  2722  00346E  0A01               	xorlw	1	; case 1
  2723  003470  B4D8               	btfsc	status,2,c
  2724  003472  D7E3               	goto	l7744
  2725  003474  0A03               	xorlw	3	; case 2
  2726  003476  B4D8               	btfsc	status,2,c
  2727  003478  D7E3               	goto	l7746
  2728  00347A  0A01               	xorlw	1	; case 3
  2729  00347C  B4D8               	btfsc	status,2,c
  2730  00347E  D7EC               	goto	l7754
  2731  003480  0A07               	xorlw	7	; case 4
  2732  003482  B4D8               	btfsc	status,2,c
  2733  003484  D7EC               	goto	l7756
  2734                           
  2735                           ; BSR set to: 0
  2736                           
  2737                           ; BSR set to: 0
  2738  003486  D7EE               	goto	l7760
  2739  003488                     __end_of_main:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1l	equ	0xFE1
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _stopSignals *****************
  2752 ;; Defined at:
  2753 ;;		line 60 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    7
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text1
  2782  0041B6                     __ptext1:
  2783                           	opt stack 0
  2784  0041B6                     _stopSignals:
  2785                           	opt stack 23
  2786                           
  2787                           ;main.c: 61: LATA = 0x00;
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;incstack = 0
  2791  0041B6  0E00               	movlw	0
  2792  0041B8  6E89               	movwf	3977,c	;volatile
  2793                           
  2794                           ;main.c: 62: LATB = 0x00;
  2795  0041BA  0E00               	movlw	0
  2796  0041BC  6E8A               	movwf	3978,c	;volatile
  2797                           
  2798                           ;main.c: 63: LATC = 0x00;
  2799  0041BE  0E00               	movlw	0
  2800  0041C0  6E8B               	movwf	3979,c	;volatile
  2801                           
  2802                           ;main.c: 64: LATD = 0x00;
  2803  0041C2  0E00               	movlw	0
  2804  0041C4  6E8C               	movwf	3980,c	;volatile
  2805                           
  2806                           ;main.c: 65: LATE = 0x00;
  2807  0041C6  0E00               	movlw	0
  2808  0041C8  6E8D               	movwf	3981,c	;volatile
  2809  0041CA  0012               	return		;funcret
  2810  0041CC                     __end_of_stopSignals:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           postdec1	equ	0xFE5
  2819                           fsr1l	equ	0xFE1
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _sort *****************
  2823 ;; Defined at:
  2824 ;;		line 55 in file "sort.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:   12
  2845 ;; This function calls:
  2846 ;;		_Distribution
  2847 ;;		_ID
  2848 ;;		_Loading
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text2
  2855  00413C                     __ptext2:
  2856                           	opt stack 0
  2857  00413C                     _sort:
  2858                           	opt stack 18
  2859                           
  2860                           ;sort.c: 56: if(machine_state == Sorting_state){
  2861                           
  2862                           ;incstack = 0
  2863  00413C  0100               	movlb	0	; () banked
  2864  00413E  05FC               	decf	_machine_state& (0+255),w,b
  2865  004140  B4D8               	btfsc	status,2,c
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;sort.c: 57: Loading();
  2869  004142  ECBA  F013         	call	_Loading	;wreg free
  2870                           
  2871                           ;sort.c: 58: }
  2872                           ;sort.c: 59: if(machine_state == Sorting_state){
  2873  004146  0100               	movlb	0	; () banked
  2874  004148  05FC               	decf	_machine_state& (0+255),w,b
  2875  00414A  B4D8               	btfsc	status,2,c
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;sort.c: 60: ID();
  2879  00414C  EC9C  F015         	call	_ID	;wreg free
  2880                           
  2881                           ;sort.c: 61: }
  2882                           ;sort.c: 62: if(machine_state == Sorting_state){
  2883  004150  0100               	movlb	0	; () banked
  2884  004152  05FC               	decf	_machine_state& (0+255),w,b
  2885  004154  A4D8               	btfss	status,2,c
  2886  004156  0012               	return	
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;sort.c: 63: Distribution();
  2890  004158  EC5E  F014         	call	_Distribution	;wreg free
  2891  00415C  0012               	return	
  2892  00415E                     __end_of_sort:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _Loading *****************
  2905 ;; Defined at:
  2906 ;;		line 67 in file "sort.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  i               2   54[BANK0 ] int 
  2911 ;;  addr            2   51[BANK0 ] unsigned short 
  2912 ;;  byte1           1   53[BANK0 ] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:        7 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:   11
  2929 ;; This function calls:
  2930 ;;		_EEPROM_read
  2931 ;;		_EEPROM_write
  2932 ;;		_delay_ms
  2933 ;;		_initGlobalVars
  2934 ;;		_initServos
  2935 ;;		_initSortTimer
  2936 ;;		_lcdInst
  2937 ;; This function is called by:
  2938 ;;		_sort
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text3
  2943  002774                     __ptext3:
  2944                           	opt stack 0
  2945  002774                     _Loading:
  2946                           	opt stack 18
  2947                           
  2948                           ;sort.c: 68: if(first){
  2949                           
  2950                           ;incstack = 0
  2951  002774  0100               	movlb	0	; () banked
  2952  002776  51E4               	movf	_first& (0+255),w,b
  2953  002778  0100               	movlb	0	; () banked
  2954  00277A  11E5               	iorwf	(_first+1)& (0+255),w,b
  2955  00277C  B4D8               	btfsc	status,2,c
  2956  00277E  D065               	goto	l6188
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;sort.c: 69: initGlobalVars();
  2960  002780  EC03  F01C         	call	_initGlobalVars	;wreg free
  2961                           
  2962                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2963  002784  0E01               	movlw	1
  2964  002786  EC0C  F021         	call	_lcdInst
  2965  00278A  0E68               	movlw	104
  2966  00278C  0100               	movlb	0	; () banked
  2967  00278E  6FB1               	movwf	??_Loading& (0+255),b
  2968  002790  0EE4               	movlw	228
  2969  002792                     u6857:
  2970  002792  2EE8               	decfsz	wreg,f,c
  2971  002794  D7FE               	bra	u6857
  2972  002796  2FB1               	decfsz	??_Loading& (0+255),f,b
  2973  002798  D7FC               	bra	u6857
  2974  00279A  F000               	nop	
  2975                           
  2976                           ;sort.c: 71: initSortTimer();
  2977  00279C  EC53  F019         	call	_initSortTimer	;wreg free
  2978                           
  2979                           ;sort.c: 76: sel = EEPROM_read(0);
  2980  0027A0  0E00               	movlw	0
  2981  0027A2  0100               	movlb	0	; () banked
  2982  0027A4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2983  0027A6  0E00               	movlw	0
  2984  0027A8  6F80               	movwf	EEPROM_read@address& (0+255),b
  2985  0027AA  ECCF  F020         	call	_EEPROM_read	;wreg free
  2986  0027AE  0100               	movlb	0	; () banked
  2987  0027B0  6FFD               	movwf	_sel& (0+255),b
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2991  0027B2  0100               	movlb	0	; () banked
  2992  0027B4  51FD               	movf	_sel& (0+255),w,b
  2993  0027B6  0D0B               	mullw	11
  2994  0027B8  0E01               	movlw	1
  2995  0027BA  24F3               	addwf	prodl,w,c
  2996  0027BC  0100               	movlb	0	; () banked
  2997  0027BE  6FB3               	movwf	Loading@addr& (0+255),b
  2998  0027C0  0E00               	movlw	0
  2999  0027C2  20F4               	addwfc	prodh,w,c
  3000  0027C4  0100               	movlb	0	; () banked
  3001  0027C6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  3005  0027C8  0E7F               	movlw	127
  3006  0027CA  0100               	movlb	0	; () banked
  3007  0027CC  6FB5               	movwf	Loading@byte1& (0+255),b
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;sort.c: 79: EEPROM_write(addr, byte1);
  3011  0027CE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3012  0027D2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3013  0027D6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3014  0027DA  ECB7  F017         	call	_EEPROM_write	;wreg free
  3015                           
  3016                           ;sort.c: 82: LATAbits.LATA5 = 0;
  3017  0027DE  9A89               	bcf	3977,5,c	;volatile
  3018                           
  3019                           ;sort.c: 83: for(int i=0; i<46; i++){
  3020  0027E0  0E00               	movlw	0
  3021  0027E2  0100               	movlb	0	; () banked
  3022  0027E4  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3023  0027E6  0E00               	movlw	0
  3024  0027E8  6FB6               	movwf	Loading@i& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027  0027EA  0100               	movlb	0	; () banked
  3028  0027EC  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3029  0027EE  D008               	goto	l6178
  3030  0027F0  0100               	movlb	0	; () banked
  3031  0027F2  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3032  0027F4  E126               	bnz	l715
  3033  0027F6  0E2E               	movlw	46
  3034  0027F8  0100               	movlb	0	; () banked
  3035  0027FA  5DB6               	subwf	Loading@i& (0+255),w,b
  3036  0027FC  B0D8               	btfsc	status,0,c
  3037  0027FE  D021               	goto	l715
  3038  002800                     l6178:
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;sort.c: 84: LATAbits.LATA5 = !LATAbits.LATA5;
  3042  002800  BA89               	btfsc	3977,5,c	;volatile
  3043  002802  D004               	goto	u4690
  3044  002804  0100               	movlb	0	; () banked
  3045  002806  6BB1               	clrf	??_Loading& (0+255),b
  3046  002808  2BB1               	incf	??_Loading& (0+255),f,b
  3047  00280A  D002               	goto	u4708
  3048  00280C                     u4690:
  3049  00280C  0100               	movlb	0	; () banked
  3050  00280E  6BB1               	clrf	??_Loading& (0+255),b
  3051  002810                     u4708:
  3052  002810  0100               	movlb	0	; () banked
  3053  002812  3BB1               	swapf	??_Loading& (0+255),f,b
  3054  002814  47B1               	rlncf	??_Loading& (0+255),f,b
  3055  002816  5089               	movf	3977,w,c	;volatile
  3056  002818  0100               	movlb	0	; () banked
  3057  00281A  19B1               	xorwf	??_Loading& (0+255),w,b
  3058  00281C  0BDF               	andlw	-33
  3059  00281E  19B1               	xorwf	??_Loading& (0+255),w,b
  3060  002820  6E89               	movwf	3977,c	;volatile
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;sort.c: 85: delay_ms(45-i);
  3064  002822  0100               	movlb	0	; () banked
  3065  002824  51B6               	movf	Loading@i& (0+255),w,b
  3066  002826  0800               	sublw	0
  3067  002828  0F2D               	addlw	45
  3068  00282A  EC2C  F020         	call	_delay_ms
  3069  00282E  0100               	movlb	0	; () banked
  3070  002830  4BB6               	infsnz	Loading@i& (0+255),f,b
  3071  002832  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3072                           
  3073                           ; BSR set to: 0
  3074  002834  0100               	movlb	0	; () banked
  3075  002836  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3076  002838  D7E3               	goto	l6178
  3077  00283A  0100               	movlb	0	; () banked
  3078  00283C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3079  00283E  E101               	bnz	u4710
  3080  002840  D7DA               	goto	L1
  3081  002842                     u4710:
  3082  002842                     l715:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;sort.c: 86: }
  3086                           ;sort.c: 87: LATAbits.LATA5 = 1;
  3087  002842  8A89               	bsf	3977,5,c	;volatile
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;sort.c: 90: initServos();
  3091  002844  ECFA  F01C         	call	_initServos	;wreg free
  3092                           
  3093                           ;sort.c: 91: }
  3094  002848  0012               	return	
  3095  00284A                     l6188:
  3096                           
  3097                           ;sort.c: 92: else{
  3098                           ;sort.c: 95: if(!f_loadingNewCan){
  3099  00284A  0100               	movlb	0	; () banked
  3100  00284C  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3101  00284E  0100               	movlb	0	; () banked
  3102  002850  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3103  002852  A4D8               	btfss	status,2,c
  3104  002854  D015               	goto	l6202
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;sort.c: 99: if(!f_loadingNewCan){
  3108  002856  0100               	movlb	0	; () banked
  3109  002858  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3110  00285A  0100               	movlb	0	; () banked
  3111  00285C  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3112  00285E  B4D8               	btfsc	status,2,c
  3113  002860  0012               	return	
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;sort.c: 103: else{
  3117                           ;sort.c: 104: count_total++;
  3118                           
  3119                           ; BSR set to: 0
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;sort.c: 101: }
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;sort.c: 100: return;
  3126  002862  0100               	movlb	0	; () banked
  3127  002864  4BFE               	infsnz	_count_total& (0+255),f,b
  3128  002866  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;sort.c: 105: if(count_total == 12){
  3132  002868  0E0C               	movlw	12
  3133  00286A  0100               	movlb	0	; () banked
  3134  00286C  19FE               	xorwf	_count_total& (0+255),w,b
  3135  00286E  0100               	movlb	0	; () banked
  3136  002870  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3137  002872  A4D8               	btfss	status,2,c
  3138  002874  0012               	return	
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;sort.c: 106: f_lastCan = 1;
  3142  002876  0E00               	movlw	0
  3143  002878  6E74               	movwf	_f_lastCan+1,c
  3144  00287A  0E01               	movlw	1
  3145  00287C  6E73               	movwf	_f_lastCan,c
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;sort.c: 107: }
  3149                           ;sort.c: 108: }
  3150                           ;sort.c: 109: }
  3151                           
  3152                           ; BSR set to: 0
  3153  00287E  0012               	return	
  3154  002880                     l6202:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;sort.c: 112: else if(f_ID_receive){
  3158  002880  506B               	movf	_f_ID_receive,w,c
  3159  002882  106C               	iorwf	_f_ID_receive+1,w,c
  3160  002884  B4D8               	btfsc	status,2,c
  3161  002886  0012               	return	
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;sort.c: 113: f_loadingNewCan = 0;
  3165  002888  0E00               	movlw	0
  3166  00288A  0100               	movlb	0	; () banked
  3167  00288C  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3168  00288E  0E00               	movlw	0
  3169  002890  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;sort.c: 114: LATAbits.LATA4 = 1;
  3173  002892  8889               	bsf	3977,4,c	;volatile
  3174                           
  3175                           ;sort.c: 115: f_can_coming_to_ID = 1;
  3176  002894  0E00               	movlw	0
  3177  002896  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3178  002898  0E01               	movlw	1
  3179  00289A  6E6D               	movwf	_f_can_coming_to_ID,c
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;sort.c: 116: _delay((unsigned long)((300)*(32000000/4000.0)));
  3183  00289C  0E0D               	movlw	13
  3184  00289E  0100               	movlb	0	; () banked
  3185  0028A0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3186  0028A2  0E2D               	movlw	45
  3187  0028A4  0100               	movlb	0	; () banked
  3188  0028A6  6FB1               	movwf	??_Loading& (0+255),b
  3189  0028A8  0ED7               	movlw	215
  3190  0028AA                     u6867:
  3191  0028AA  2EE8               	decfsz	wreg,f,c
  3192  0028AC  D7FE               	bra	u6867
  3193  0028AE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3194  0028B0  D7FC               	bra	u6867
  3195  0028B2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3196  0028B4  D7FA               	bra	u6867
  3197  0028B6  D000               	nop2	
  3198                           
  3199                           ;sort.c: 117: LATAbits.LATA4 = 0;
  3200  0028B8  9889               	bcf	3977,4,c	;volatile
  3201  0028BA  0012               	return	
  3202  0028BC                     __end_of_Loading:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _initSortTimer *****************
  3217 ;; Defined at:
  3218 ;;		line 233 in file "sort.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  i               2    8[BANK0 ] int 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:        5 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:   10
  3239 ;; This function calls:
  3240 ;;		_getRTC
  3241 ;; This function is called by:
  3242 ;;		_Loading
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text4
  3247  0032A6                     __ptext4:
  3248                           	opt stack 0
  3249  0032A6                     _initSortTimer:
  3250                           	opt stack 18
  3251                           
  3252                           ;sort.c: 235: getRTC();
  3253                           
  3254                           ;incstack = 0
  3255  0032A6  ECCE  F01A         	call	_getRTC	;wreg free
  3256                           
  3257                           ;sort.c: 236: for(int i = 0; i < 7; i++){
  3258  0032AA  0E00               	movlw	0
  3259  0032AC  0100               	movlb	0	; () banked
  3260  0032AE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3261  0032B0  0E00               	movlw	0
  3262  0032B2  6F88               	movwf	initSortTimer@i& (0+255),b
  3263  0032B4                     l5798:
  3264                           
  3265                           ; BSR set to: 0
  3266  0032B4  0100               	movlb	0	; () banked
  3267  0032B6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3268  0032B8  D008               	goto	l5802
  3269  0032BA  0100               	movlb	0	; () banked
  3270  0032BC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3271  0032BE  E140               	bnz	l5808
  3272  0032C0  0E07               	movlw	7
  3273  0032C2  0100               	movlb	0	; () banked
  3274  0032C4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3275  0032C6  B0D8               	btfsc	status,0,c
  3276  0032C8  D03B               	goto	l5808
  3277  0032CA                     l5802:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;sort.c: 237: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3281  0032CA  0E24               	movlw	low _time
  3282  0032CC  0100               	movlb	0	; () banked
  3283  0032CE  2588               	addwf	initSortTimer@i& (0+255),w,b
  3284  0032D0  6ED9               	movwf	fsr2l,c
  3285  0032D2  0E01               	movlw	high _time
  3286  0032D4  0100               	movlb	0	; () banked
  3287  0032D6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3288  0032D8  6EDA               	movwf	fsr2h,c
  3289  0032DA  50DF               	movf	indf2,w,c
  3290  0032DC  0100               	movlb	0	; () banked
  3291  0032DE  6F85               	movwf	??_initSortTimer& (0+255),b
  3292  0032E0  0100               	movlb	0	; () banked
  3293  0032E2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3294  0032E4  0E0F               	movlw	15
  3295  0032E6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3296  0032E8  0E0F               	movlw	15
  3297  0032EA  0100               	movlb	0	; () banked
  3298  0032EC  1785               	andwf	??_initSortTimer& (0+255),f,b
  3299  0032EE  0100               	movlb	0	; () banked
  3300  0032F0  5185               	movf	??_initSortTimer& (0+255),w,b
  3301  0032F2  0D0A               	mullw	10
  3302  0032F4  0E24               	movlw	low _time
  3303  0032F6  0100               	movlb	0	; () banked
  3304  0032F8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3305  0032FA  6ED9               	movwf	fsr2l,c
  3306  0032FC  0E01               	movlw	high _time
  3307  0032FE  0100               	movlb	0	; () banked
  3308  003300  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3309  003302  6EDA               	movwf	fsr2h,c
  3310  003304  50DF               	movf	indf2,w,c
  3311  003306  0B0F               	andlw	15
  3312  003308  0100               	movlb	0	; () banked
  3313  00330A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3314  00330C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3315  00330E  50F3               	movf	prodl,w,c
  3316  003310  0100               	movlb	0	; () banked
  3317  003312  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3318  003314  50F4               	movf	prodh,w,c
  3319  003316  0100               	movlb	0	; () banked
  3320  003318  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3321  00331A  90D8               	bcf	status,0,c
  3322  00331C  0100               	movlb	0	; () banked
  3323  00331E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3324  003320  6ED9               	movwf	fsr2l,c
  3325  003322  0100               	movlb	0	; () banked
  3326  003324  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3327  003326  6EDA               	movwf	fsr2h,c
  3328  003328  0E0E               	movlw	low _startTime
  3329  00332A  26D9               	addwf	fsr2l,f,c
  3330  00332C  0E01               	movlw	high _startTime
  3331  00332E  22DA               	addwfc	fsr2h,f,c
  3332  003330  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3333  003334  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3334                           
  3335                           ; BSR set to: 0
  3336  003338  0100               	movlb	0	; () banked
  3337  00333A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3338  00333C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3339  00333E  D7BA               	goto	l5798
  3340  003340                     l5808:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 238: }
  3344                           ;sort.c: 240: T0CON = 0b00010111;
  3345  003340  0E17               	movlw	23
  3346  003342  6ED5               	movwf	4053,c	;volatile
  3347                           
  3348                           ;sort.c: 249: TMR0H = 0b10000101;
  3349  003344  0E85               	movlw	133
  3350  003346  6ED7               	movwf	4055,c	;volatile
  3351                           
  3352                           ;sort.c: 250: TMR0L = 0b11101110;
  3353  003348  0EEE               	movlw	238
  3354  00334A  6ED6               	movwf	4054,c	;volatile
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 251: TMR0ON = 1;
  3358  00334C  8ED5               	bsf	4053,7,c	;volatile
  3359                           
  3360                           ; BSR set to: 0
  3361  00334E  0012               	return		;funcret
  3362  003350                     __end_of_initSortTimer:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _initServos *****************
  3382 ;; Defined at:
  3383 ;;		line 253 in file "sort.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;		None
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      void 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;Total ram usage:        1 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    8
  3404 ;; This function calls:
  3405 ;;		_updateServoPosition
  3406 ;; This function is called by:
  3407 ;;		_Loading
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text5
  3412  0039F4                     __ptext5:
  3413                           	opt stack 0
  3414  0039F4                     _initServos:
  3415                           	opt stack 20
  3416                           
  3417                           ;sort.c: 254: updateServoPosition(1500, 1);
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;incstack = 0
  3421  0039F4  0E05               	movlw	5
  3422  0039F6  0100               	movlb	0	; () banked
  3423  0039F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3424  0039FA  0EDC               	movlw	220
  3425  0039FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3426  0039FE  0E00               	movlw	0
  3427  003A00  0100               	movlb	0	; () banked
  3428  003A02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3429  003A04  0E01               	movlw	1
  3430  003A06  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3431  003A08  EC8F  F01B         	call	_updateServoPosition	;wreg free
  3432                           
  3433                           ;sort.c: 255: updateServoPosition(1000, 3);
  3434  003A0C  0E03               	movlw	3
  3435  003A0E  0100               	movlb	0	; () banked
  3436  003A10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3437  003A12  0EE8               	movlw	232
  3438  003A14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3439  003A16  0E00               	movlw	0
  3440  003A18  0100               	movlb	0	; () banked
  3441  003A1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3442  003A1C  0E03               	movlw	3
  3443  003A1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3444  003A20  EC8F  F01B         	call	_updateServoPosition	;wreg free
  3445                           
  3446                           ;sort.c: 256: TMR1ON = 1;
  3447  003A24  80CD               	bsf	4045,0,c	;volatile
  3448                           
  3449                           ;sort.c: 257: was_low_1 = 0;
  3450  003A26  0E00               	movlw	0
  3451  003A28  6E7A               	movwf	_was_low_1+1,c	;volatile
  3452  003A2A  0E00               	movlw	0
  3453  003A2C  6E79               	movwf	_was_low_1,c	;volatile
  3454                           
  3455                           ;sort.c: 258: _delay((unsigned long)((5)*(32000000/4000.0)));
  3456  003A2E  0E34               	movlw	52
  3457  003A30  0100               	movlb	0	; () banked
  3458  003A32  6F88               	movwf	??_initServos& (0+255),b
  3459  003A34  0EF1               	movlw	241
  3460  003A36                     u6877:
  3461  003A36  2EE8               	decfsz	wreg,f,c
  3462  003A38  D7FE               	bra	u6877
  3463  003A3A  2F88               	decfsz	??_initServos& (0+255),f,b
  3464  003A3C  D7FC               	bra	u6877
  3465  003A3E  D000               	nop2	
  3466                           
  3467                           ;sort.c: 259: TMR3ON = 1;
  3468  003A40  80B1               	bsf	4017,0,c	;volatile
  3469                           
  3470                           ;sort.c: 260: was_low_3 = 0;
  3471  003A42  0E00               	movlw	0
  3472  003A44  6E7C               	movwf	_was_low_3+1,c	;volatile
  3473  003A46  0E00               	movlw	0
  3474  003A48  6E7B               	movwf	_was_low_3,c	;volatile
  3475                           
  3476                           ;sort.c: 261: LATCbits.LATC0 = 0;
  3477  003A4A  908B               	bcf	3979,0,c	;volatile
  3478  003A4C  0012               	return		;funcret
  3479  003A4E                     __end_of_initServos:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _initGlobalVars *****************
  3499 ;; Defined at:
  3500 ;;		line 214 in file "sort.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    7
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_Loading
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text6
  3529  003806                     __ptext6:
  3530                           	opt stack 0
  3531  003806                     _initGlobalVars:
  3532                           	opt stack 21
  3533                           
  3534                           ;sort.c: 216: first = 0;
  3535                           
  3536                           ;incstack = 0
  3537  003806  0E00               	movlw	0
  3538  003808  0100               	movlb	0	; () banked
  3539  00380A  6FE5               	movwf	(_first+1)& (0+255),b
  3540  00380C  0E00               	movlw	0
  3541  00380E  6FE4               	movwf	_first& (0+255),b
  3542                           
  3543                           ;sort.c: 219: f_loadingNewCan = 0;
  3544  003810  0E00               	movlw	0
  3545  003812  0100               	movlb	0	; () banked
  3546  003814  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3547  003816  0E00               	movlw	0
  3548  003818  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3549                           
  3550                           ;sort.c: 220: f_lastCan = 0;
  3551  00381A  0E00               	movlw	0
  3552  00381C  6E74               	movwf	_f_lastCan+1,c
  3553  00381E  0E00               	movlw	0
  3554  003820  6E73               	movwf	_f_lastCan,c
  3555                           
  3556                           ;sort.c: 221: f_ID_receive = 1;
  3557  003822  0E00               	movlw	0
  3558  003824  6E6C               	movwf	_f_ID_receive+1,c
  3559  003826  0E01               	movlw	1
  3560  003828  6E6B               	movwf	_f_ID_receive,c
  3561                           
  3562                           ;sort.c: 222: f_can_coming_to_ID = 0;
  3563  00382A  0E00               	movlw	0
  3564  00382C  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3565  00382E  0E00               	movlw	0
  3566  003830  6E6D               	movwf	_f_can_coming_to_ID,c
  3567                           
  3568                           ;sort.c: 223: f_can_coming_to_distribution = 0;
  3569  003832  0E00               	movlw	0
  3570  003834  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3571  003836  0E00               	movlw	0
  3572  003838  6E6F               	movwf	_f_can_coming_to_distribution,c
  3573                           
  3574                           ;sort.c: 224: f_can_distributed = 0;
  3575  00383A  0E00               	movlw	0
  3576  00383C  6E72               	movwf	_f_can_distributed+1,c
  3577  00383E  0E00               	movlw	0
  3578  003840  6E71               	movwf	_f_can_distributed,c
  3579                           
  3580                           ;sort.c: 227: count_total = 0;
  3581  003842  0E00               	movlw	0
  3582  003844  0100               	movlb	0	; () banked
  3583  003846  6FFF               	movwf	(_count_total+1)& (0+255),b
  3584  003848  0E00               	movlw	0
  3585  00384A  6FFE               	movwf	_count_total& (0+255),b
  3586                           
  3587                           ;sort.c: 228: count_pop_no_tab = 0;
  3588  00384C  0E00               	movlw	0
  3589  00384E  6E62               	movwf	_count_pop_no_tab+1,c
  3590  003850  0E00               	movlw	0
  3591  003852  6E61               	movwf	_count_pop_no_tab,c
  3592                           
  3593                           ;sort.c: 229: count_pop_w_tab = 0;
  3594  003854  0E00               	movlw	0
  3595  003856  6E64               	movwf	_count_pop_w_tab+1,c
  3596  003858  0E00               	movlw	0
  3597  00385A  6E63               	movwf	_count_pop_w_tab,c
  3598                           
  3599                           ;sort.c: 230: count_can_w_lab = 0;
  3600  00385C  0E00               	movlw	0
  3601  00385E  6E60               	movwf	_count_can_w_lab+1,c
  3602  003860  0E00               	movlw	0
  3603  003862  6E5F               	movwf	_count_can_w_lab,c
  3604                           
  3605                           ;sort.c: 231: count_can_no_lab = 0;
  3606  003864  0E00               	movlw	0
  3607  003866  6E5E               	movwf	_count_can_no_lab+1,c
  3608  003868  0E00               	movlw	0
  3609  00386A  6E5D               	movwf	_count_can_no_lab,c
  3610                           
  3611                           ; BSR set to: 0
  3612  00386C  0012               	return		;funcret
  3613  00386E                     __end_of_initGlobalVars:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           postinc0	equ	0xFEE
  3622                           wreg	equ	0xFE8
  3623                           postdec1	equ	0xFE5
  3624                           fsr1l	equ	0xFE1
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _delay_ms *****************
  3633 ;; Defined at:
  3634 ;;		line 315 in file "sort.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  milliseconds    1    wreg     unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;Total ram usage:        2 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    7
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_Loading
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text7
  3663  004058                     __ptext7:
  3664                           	opt stack 0
  3665  004058                     _delay_ms:
  3666                           	opt stack 21
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;incstack = 0
  3670                           ;delay_ms@milliseconds stored from wreg
  3671  004058  0100               	movlb	0	; () banked
  3672  00405A  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3673                           
  3674                           ;sort.c: 316: while(milliseconds > 0)
  3675  00405C  D00B               	goto	l5870
  3676  00405E                     l5866:
  3677                           
  3678                           ;sort.c: 317: {
  3679                           ;sort.c: 318: milliseconds--;
  3680  00405E  0100               	movlb	0	; () banked
  3681  004060  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;sort.c: 319: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3685  004062  0E0B               	movlw	11
  3686  004064  0100               	movlb	0	; () banked
  3687  004066  6F80               	movwf	??_delay_ms& (0+255),b
  3688  004068  0E47               	movlw	71
  3689  00406A                     u6887:
  3690  00406A  2EE8               	decfsz	wreg,f,c
  3691  00406C  D7FE               	bra	u6887
  3692  00406E  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3693  004070  D7FC               	bra	u6887
  3694  004072  D000               	nop2	
  3695  004074                     l5870:
  3696  004074  0100               	movlb	0	; () banked
  3697  004076  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3698  004078  0100               	movlb	0	; () banked
  3699  00407A  B4D8               	btfsc	status,2,c
  3700  00407C  0012               	return	
  3701  00407E  D7EF               	goto	l5866
  3702  004080                     __end_of_delay_ms:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           postinc0	equ	0xFEE
  3711                           wreg	equ	0xFE8
  3712                           postdec1	equ	0xFE5
  3713                           fsr1l	equ	0xFE1
  3714                           indf2	equ	0xFDF
  3715                           postinc2	equ	0xFDE
  3716                           postdec2	equ	0xFDD
  3717                           fsr2h	equ	0xFDA
  3718                           fsr2l	equ	0xFD9
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _ID *****************
  3722 ;; Defined at:
  3723 ;;		line 121 in file "sort.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;Total ram usage:        8 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    9
  3744 ;; This function calls:
  3745 ;;		_readMAG
  3746 ;; This function is called by:
  3747 ;;		_sort
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text8
  3752  002B38                     __ptext8:
  3753                           	opt stack 0
  3754  002B38                     _ID:
  3755                           	opt stack 20
  3756                           
  3757                           ;sort.c: 122: if(f_can_coming_to_ID){
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;incstack = 0
  3761  002B38  506D               	movf	_f_can_coming_to_ID,w,c
  3762  002B3A  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3763  002B3C  B4D8               	btfsc	status,2,c
  3764  002B3E  0012               	return	
  3765                           
  3766                           ;sort.c: 124: _delay((unsigned long)((500)*(32000000/4000.0)));
  3767  002B40  0E15               	movlw	21
  3768  002B42  0100               	movlb	0	; () banked
  3769  002B44  6F87               	movwf	(??_ID+1)& (0+255),b
  3770  002B46  0E4B               	movlw	75
  3771  002B48  0100               	movlb	0	; () banked
  3772  002B4A  6F86               	movwf	??_ID& (0+255),b
  3773  002B4C  0EBE               	movlw	190
  3774  002B4E                     u6897:
  3775  002B4E  2EE8               	decfsz	wreg,f,c
  3776  002B50  D7FE               	bra	u6897
  3777  002B52  2F86               	decfsz	??_ID& (0+255),f,b
  3778  002B54  D7FC               	bra	u6897
  3779  002B56  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3780  002B58  D7FA               	bra	u6897
  3781  002B5A  F000               	nop	
  3782                           
  3783                           ;sort.c: 129: int sensor_outputs[3];
  3784                           ;sort.c: 133: sensor_outputs[0] = PORTAbits.RA2;
  3785  002B5C  A480               	btfss	3968,2,c	;volatile
  3786  002B5E  D004               	goto	u4770
  3787  002B60  0100               	movlb	0	; () banked
  3788  002B62  6B86               	clrf	??_ID& (0+255),b
  3789  002B64  2B86               	incf	??_ID& (0+255),f,b
  3790  002B66  D002               	goto	u4778
  3791  002B68                     u4770:
  3792  002B68  0100               	movlb	0	; () banked
  3793  002B6A  6B86               	clrf	??_ID& (0+255),b
  3794  002B6C                     u4778:
  3795  002B6C  0100               	movlb	0	; () banked
  3796  002B6E  5186               	movf	??_ID& (0+255),w,b
  3797  002B70  0100               	movlb	0	; () banked
  3798  002B72  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3799  002B74  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;sort.c: 135: if(!sensor_outputs[0]){
  3803  002B76  0100               	movlb	0	; () banked
  3804  002B78  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3805  002B7A  0100               	movlb	0	; () banked
  3806  002B7C  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3807  002B7E  A4D8               	btfss	status,2,c
  3808  002B80  D029               	goto	l6234
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;sort.c: 136: readMAG();
  3812  002B82  ECCE  F01D         	call	_readMAG	;wreg free
  3813                           
  3814                           ;sort.c: 137: sensor_outputs[1] = MAG_signal;
  3815  002B86  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3816  002B8A  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3817                           
  3818                           ;sort.c: 138: if(!sensor_outputs[1]){
  3819  002B8E  0100               	movlb	0	; () banked
  3820  002B90  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3821  002B92  0100               	movlb	0	; () banked
  3822  002B94  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3823  002B96  A4D8               	btfss	status,2,c
  3824  002B98  D01D               	goto	l6234
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;sort.c: 139: LATAbits.LATA3 = 1;
  3828  002B9A  8689               	bsf	3977,3,c	;volatile
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 141: _delay((unsigned long)((300)*(32000000/4000.0)));
  3832  002B9C  0E0D               	movlw	13
  3833  002B9E  0100               	movlb	0	; () banked
  3834  002BA0  6F87               	movwf	(??_ID+1)& (0+255),b
  3835  002BA2  0E2D               	movlw	45
  3836  002BA4  0100               	movlb	0	; () banked
  3837  002BA6  6F86               	movwf	??_ID& (0+255),b
  3838  002BA8  0ED7               	movlw	215
  3839  002BAA                     u6907:
  3840  002BAA  2EE8               	decfsz	wreg,f,c
  3841  002BAC  D7FE               	bra	u6907
  3842  002BAE  2F86               	decfsz	??_ID& (0+255),f,b
  3843  002BB0  D7FC               	bra	u6907
  3844  002BB2  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3845  002BB4  D7FA               	bra	u6907
  3846  002BB6  D000               	nop2	
  3847                           
  3848                           ;sort.c: 142: sensor_outputs[2] = PORTAbits.RA2;
  3849  002BB8  A480               	btfss	3968,2,c	;volatile
  3850  002BBA  D004               	goto	u4800
  3851  002BBC  0100               	movlb	0	; () banked
  3852  002BBE  6B86               	clrf	??_ID& (0+255),b
  3853  002BC0  2B86               	incf	??_ID& (0+255),f,b
  3854  002BC2  D002               	goto	u4808
  3855  002BC4                     u4800:
  3856  002BC4  0100               	movlb	0	; () banked
  3857  002BC6  6B86               	clrf	??_ID& (0+255),b
  3858  002BC8                     u4808:
  3859  002BC8  0100               	movlb	0	; () banked
  3860  002BCA  5186               	movf	??_ID& (0+255),w,b
  3861  002BCC  0100               	movlb	0	; () banked
  3862  002BCE  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3863  002BD0  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;sort.c: 143: LATAbits.LATA3 = 0;
  3867  002BD2  9689               	bcf	3977,3,c	;volatile
  3868  002BD4                     l6234:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;sort.c: 144: }
  3872                           ;sort.c: 145: }
  3873                           ;sort.c: 148: if(!sensor_outputs[0]){
  3874  002BD4  0100               	movlb	0	; () banked
  3875  002BD6  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3876  002BD8  0100               	movlb	0	; () banked
  3877  002BDA  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3878  002BDC  A4D8               	btfss	status,2,c
  3879  002BDE  D01E               	goto	l6252
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;sort.c: 149: if(!sensor_outputs[1]){
  3883  002BE0  0100               	movlb	0	; () banked
  3884  002BE2  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3885  002BE4  0100               	movlb	0	; () banked
  3886  002BE6  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3887  002BE8  A4D8               	btfss	status,2,c
  3888  002BEA  D012               	goto	l6248
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 150: if(!sensor_outputs[2]){
  3892  002BEC  0100               	movlb	0	; () banked
  3893  002BEE  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3894  002BF0  0100               	movlb	0	; () banked
  3895  002BF2  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3896  002BF4  A4D8               	btfss	status,2,c
  3897  002BF6  D006               	goto	l6244
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;sort.c: 151: count_pop_no_tab++;
  3901  002BF8  4A61               	infsnz	_count_pop_no_tab,f,c
  3902  002BFA  2A62               	incf	_count_pop_no_tab+1,f,c
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;sort.c: 152: cur_can = 0;
  3906  002BFC  0E00               	movlw	0
  3907  002BFE  6E66               	movwf	_cur_can+1,c
  3908  002C00  0E00               	movlw	0
  3909  002C02  D011               	goto	L4
  3910  002C04                     l6244:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;sort.c: 154: else{
  3914                           ;sort.c: 155: count_pop_w_tab++;
  3915  002C04  4A63               	infsnz	_count_pop_w_tab,f,c
  3916  002C06  2A64               	incf	_count_pop_w_tab+1,f,c
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 156: cur_can = 1;
  3920  002C08  0E00               	movlw	0
  3921  002C0A  6E66               	movwf	_cur_can+1,c
  3922  002C0C  0E01               	movlw	1
  3923  002C0E  D00B               	goto	L4
  3924  002C10                     l6248:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;sort.c: 159: else{
  3928                           ;sort.c: 160: count_can_w_lab++;
  3929  002C10  4A5F               	infsnz	_count_can_w_lab,f,c
  3930  002C12  2A60               	incf	_count_can_w_lab+1,f,c
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 161: cur_can = 2;
  3934  002C14  0E00               	movlw	0
  3935  002C16  6E66               	movwf	_cur_can+1,c
  3936  002C18  0E02               	movlw	2
  3937  002C1A  D005               	goto	L4
  3938  002C1C                     l6252:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 164: else{
  3942                           ;sort.c: 165: count_can_no_lab++;
  3943  002C1C  4A5D               	infsnz	_count_can_no_lab,f,c
  3944  002C1E  2A5E               	incf	_count_can_no_lab+1,f,c
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 166: cur_can = 3;
  3948  002C20  0E00               	movlw	0
  3949  002C22  6E66               	movwf	_cur_can+1,c
  3950  002C24  0E03               	movlw	3
  3951  002C26                     L4:
  3952  002C26  6E65               	movwf	_cur_can,c
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;sort.c: 167: }
  3956                           ;sort.c: 169: LATCbits.LATC0 = 1;
  3957                           
  3958                           ; BSR set to: 0
  3959  002C28  808B               	bsf	3979,0,c	;volatile
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;sort.c: 170: f_can_coming_to_distribution = 1;
  3963  002C2A  0E00               	movlw	0
  3964  002C2C  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3965  002C2E  0E01               	movlw	1
  3966  002C30  6E6F               	movwf	_f_can_coming_to_distribution,c
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;sort.c: 171: _delay((unsigned long)((500)*(32000000/4000.0)));
  3970  002C32  0E15               	movlw	21
  3971  002C34  0100               	movlb	0	; () banked
  3972  002C36  6F87               	movwf	(??_ID+1)& (0+255),b
  3973  002C38  0E4B               	movlw	75
  3974  002C3A  0100               	movlb	0	; () banked
  3975  002C3C  6F86               	movwf	??_ID& (0+255),b
  3976  002C3E  0EBE               	movlw	190
  3977  002C40                     u6917:
  3978  002C40  2EE8               	decfsz	wreg,f,c
  3979  002C42  D7FE               	bra	u6917
  3980  002C44  2F86               	decfsz	??_ID& (0+255),f,b
  3981  002C46  D7FC               	bra	u6917
  3982  002C48  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3983  002C4A  D7FA               	bra	u6917
  3984  002C4C  F000               	nop	
  3985                           
  3986                           ;sort.c: 172: LATCbits.LATC0 = 0;
  3987  002C4E  908B               	bcf	3979,0,c	;volatile
  3988                           
  3989                           ;sort.c: 174: f_can_coming_to_ID = 0;
  3990  002C50  0E00               	movlw	0
  3991  002C52  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3992  002C54  0E00               	movlw	0
  3993  002C56  6E6D               	movwf	_f_can_coming_to_ID,c
  3994  002C58  0012               	return	
  3995  002C5A                     __end_of_ID:
  3996                           	opt stack 0
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _Distribution *****************
  4015 ;; Defined at:
  4016 ;;		line 177 in file "sort.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:        2 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    8
  4037 ;; This function calls:
  4038 ;;		_updateServoPosition
  4039 ;; This function is called by:
  4040 ;;		_sort
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text9
  4045  0028BC                     __ptext9:
  4046                           	opt stack 0
  4047  0028BC                     _Distribution:
  4048                           	opt stack 21
  4049                           
  4050                           ;sort.c: 178: if(f_can_coming_to_distribution){
  4051                           
  4052                           ;incstack = 0
  4053  0028BC  506F               	movf	_f_can_coming_to_distribution,w,c
  4054  0028BE  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4055  0028C0  B4D8               	btfsc	status,2,c
  4056  0028C2  0012               	return	
  4057  0028C4  D034               	goto	l6280
  4058  0028C6                     l6270:
  4059                           
  4060                           ;sort.c: 183: updateServoPosition(1000, 1);
  4061  0028C6  0E03               	movlw	3
  4062  0028C8  0100               	movlb	0	; () banked
  4063  0028CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4064  0028CC  0EE8               	movlw	232
  4065  0028CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4066  0028D0  0E00               	movlw	0
  4067  0028D2  0100               	movlb	0	; () banked
  4068  0028D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4069  0028D6  0E01               	movlw	1
  4070  0028D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4071  0028DA  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4072                           
  4073                           ;sort.c: 184: break;
  4074  0028DE  D03E               	goto	l6282
  4075  0028E0                     l6272:
  4076                           
  4077                           ;sort.c: 186: updateServoPosition(1333, 1);
  4078  0028E0  0E05               	movlw	5
  4079  0028E2  0100               	movlb	0	; () banked
  4080  0028E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4081  0028E6  0E35               	movlw	53
  4082  0028E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4083  0028EA  0E00               	movlw	0
  4084  0028EC  0100               	movlb	0	; () banked
  4085  0028EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4086  0028F0  0E01               	movlw	1
  4087  0028F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4088  0028F4  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4089                           
  4090                           ;sort.c: 187: break;
  4091  0028F8  D031               	goto	l6282
  4092  0028FA                     l6274:
  4093                           
  4094                           ;sort.c: 189: updateServoPosition(1666, 1);
  4095  0028FA  0E06               	movlw	6
  4096  0028FC  0100               	movlb	0	; () banked
  4097  0028FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4098  002900  0E82               	movlw	130
  4099  002902  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4100  002904  0E00               	movlw	0
  4101  002906  0100               	movlb	0	; () banked
  4102  002908  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4103  00290A  0E01               	movlw	1
  4104  00290C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4105  00290E  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4106                           
  4107                           ;sort.c: 190: break;
  4108  002912  D024               	goto	l6282
  4109  002914                     l6276:
  4110                           
  4111                           ;sort.c: 192: updateServoPosition(2000, 1);
  4112  002914  0E07               	movlw	7
  4113  002916  0100               	movlb	0	; () banked
  4114  002918  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4115  00291A  0ED0               	movlw	208
  4116  00291C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4117  00291E  0E00               	movlw	0
  4118  002920  0100               	movlb	0	; () banked
  4119  002922  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4120  002924  0E01               	movlw	1
  4121  002926  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4122  002928  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4123                           
  4124                           ;sort.c: 196: }
  4125                           
  4126                           ;sort.c: 195: break;
  4127                           
  4128                           ;sort.c: 194: default:
  4129                           
  4130                           ;sort.c: 193: break;
  4131  00292C  D017               	goto	l6282
  4132  00292E                     l6280:
  4133  00292E  C065  F088         	movff	_cur_can,??_Distribution
  4134  002932  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4135                           
  4136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4137                           ; Switch size 1, requested type "space"
  4138                           ; Number of cases is 1, Range of values is 0 to 0
  4139                           ; switch strategies available:
  4140                           ; Name         Instructions Cycles
  4141                           ; simple_byte            4     3 (average)
  4142                           ;	Chosen strategy is simple_byte
  4143  002936  0100               	movlb	0	; () banked
  4144  002938  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4145  00293A  0A00               	xorlw	0	; case 0
  4146  00293C  A4D8               	btfss	status,2,c
  4147  00293E  D00E               	goto	l6282
  4148                           
  4149                           ; BSR set to: 0
  4150                           ; Switch size 1, requested type "space"
  4151                           ; Number of cases is 4, Range of values is 0 to 3
  4152                           ; switch strategies available:
  4153                           ; Name         Instructions Cycles
  4154                           ; simple_byte           13     7 (average)
  4155                           ;	Chosen strategy is simple_byte
  4156  002940  0100               	movlb	0	; () banked
  4157  002942  5188               	movf	??_Distribution& (0+255),w,b
  4158  002944  0A00               	xorlw	0	; case 0
  4159  002946  B4D8               	btfsc	status,2,c
  4160  002948  D7BE               	goto	l6270
  4161  00294A  0A01               	xorlw	1	; case 1
  4162  00294C  B4D8               	btfsc	status,2,c
  4163  00294E  D7C8               	goto	l6272
  4164  002950  0A03               	xorlw	3	; case 2
  4165  002952  B4D8               	btfsc	status,2,c
  4166  002954  D7D2               	goto	l6274
  4167  002956  0A01               	xorlw	1	; case 3
  4168  002958  B4D8               	btfsc	status,2,c
  4169  00295A  D7DC               	goto	l6276
  4170  00295C                     l6282:
  4171                           
  4172                           ;sort.c: 197: _delay((unsigned long)((500)*(32000000/4000.0)));
  4173  00295C  0E15               	movlw	21
  4174  00295E  0100               	movlb	0	; () banked
  4175  002960  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4176  002962  0E4B               	movlw	75
  4177  002964  0100               	movlb	0	; () banked
  4178  002966  6F88               	movwf	??_Distribution& (0+255),b
  4179  002968  0EBE               	movlw	190
  4180  00296A                     u6927:
  4181  00296A  2EE8               	decfsz	wreg,f,c
  4182  00296C  D7FE               	bra	u6927
  4183  00296E  2F88               	decfsz	??_Distribution& (0+255),f,b
  4184  002970  D7FC               	bra	u6927
  4185  002972  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4186  002974  D7FA               	bra	u6927
  4187  002976  F000               	nop	
  4188                           
  4189                           ;sort.c: 200: updateServoPosition(1500, 3);
  4190  002978  0E05               	movlw	5
  4191  00297A  0100               	movlb	0	; () banked
  4192  00297C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4193  00297E  0EDC               	movlw	220
  4194  002980  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4195  002982  0E00               	movlw	0
  4196  002984  0100               	movlb	0	; () banked
  4197  002986  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4198  002988  0E03               	movlw	3
  4199  00298A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4200  00298C  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4201                           
  4202                           ;sort.c: 201: _delay((unsigned long)((500)*(32000000/4000.0)));
  4203  002990  0E15               	movlw	21
  4204  002992  0100               	movlb	0	; () banked
  4205  002994  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4206  002996  0E4B               	movlw	75
  4207  002998  0100               	movlb	0	; () banked
  4208  00299A  6F88               	movwf	??_Distribution& (0+255),b
  4209  00299C  0EBE               	movlw	190
  4210  00299E                     u6937:
  4211  00299E  2EE8               	decfsz	wreg,f,c
  4212  0029A0  D7FE               	bra	u6937
  4213  0029A2  2F88               	decfsz	??_Distribution& (0+255),f,b
  4214  0029A4  D7FC               	bra	u6937
  4215  0029A6  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4216  0029A8  D7FA               	bra	u6937
  4217  0029AA  F000               	nop	
  4218                           
  4219                           ;sort.c: 204: updateServoPosition(1500, 1);
  4220  0029AC  0E05               	movlw	5
  4221  0029AE  0100               	movlb	0	; () banked
  4222  0029B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4223  0029B2  0EDC               	movlw	220
  4224  0029B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4225  0029B6  0E00               	movlw	0
  4226  0029B8  0100               	movlb	0	; () banked
  4227  0029BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4228  0029BC  0E01               	movlw	1
  4229  0029BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4230  0029C0  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4231                           
  4232                           ;sort.c: 205: updateServoPosition(1000, 3);
  4233  0029C4  0E03               	movlw	3
  4234  0029C6  0100               	movlb	0	; () banked
  4235  0029C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4236  0029CA  0EE8               	movlw	232
  4237  0029CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4238  0029CE  0E00               	movlw	0
  4239  0029D0  0100               	movlb	0	; () banked
  4240  0029D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4241  0029D4  0E03               	movlw	3
  4242  0029D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4243  0029D8  EC8F  F01B         	call	_updateServoPosition	;wreg free
  4244                           
  4245                           ;sort.c: 206: f_can_coming_to_distribution = 0;
  4246  0029DC  0E00               	movlw	0
  4247  0029DE  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4248  0029E0  0E00               	movlw	0
  4249  0029E2  6E6F               	movwf	_f_can_coming_to_distribution,c
  4250                           
  4251                           ;sort.c: 207: f_can_distributed = 1;
  4252  0029E4  0E00               	movlw	0
  4253  0029E6  6E72               	movwf	_f_can_distributed+1,c
  4254  0029E8  0E01               	movlw	1
  4255  0029EA  6E71               	movwf	_f_can_distributed,c
  4256                           
  4257                           ;sort.c: 208: if(f_lastCan == 1){
  4258  0029EC  0473               	decf	_f_lastCan,w,c
  4259  0029EE  1074               	iorwf	_f_lastCan+1,w,c
  4260  0029F0  A4D8               	btfss	status,2,c
  4261  0029F2  0012               	return	
  4262                           
  4263                           ;sort.c: 209: machine_state = DoneSorting_state;
  4264  0029F4  0E02               	movlw	2
  4265  0029F6  0100               	movlb	0	; () banked
  4266  0029F8  6FFC               	movwf	_machine_state& (0+255),b
  4267                           
  4268                           ; BSR set to: 0
  4269  0029FA  0012               	return	
  4270  0029FC                     __end_of_Distribution:
  4271                           	opt stack 0
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           postdec1	equ	0xFE5
  4281                           fsr1l	equ	0xFE1
  4282                           indf2	equ	0xFDF
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           fsr2h	equ	0xFDA
  4286                           fsr2l	equ	0xFD9
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function _machineConfig *****************
  4290 ;; Defined at:
  4291 ;;		line 15 in file "MachineConfig.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, status,2
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;Total ram usage:        0 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    7
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_main
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text10
  4320  003A4E                     __ptext10:
  4321                           	opt stack 0
  4322  003A4E                     _machineConfig:
  4323                           	opt stack 23
  4324                           
  4325                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4326                           
  4327                           ;incstack = 0
  4328  003A4E  0EF0               	movlw	240
  4329  003A50  6ED3               	movwf	4051,c	;volatile
  4330                           
  4331                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4332  003A52  8C9B               	bsf	3995,6,c	;volatile
  4333                           
  4334                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4335  003A54  0E47               	movlw	71
  4336  003A56  6E92               	movwf	3986,c	;volatile
  4337                           
  4338                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4339  003A58  0EF2               	movlw	242
  4340  003A5A  6E93               	movwf	3987,c	;volatile
  4341                           
  4342                           ;MachineConfig.c: 27: TRISC = 0x00;
  4343  003A5C  0E00               	movlw	0
  4344  003A5E  6E94               	movwf	3988,c	;volatile
  4345                           
  4346                           ;MachineConfig.c: 31: TRISD = 0x00;
  4347  003A60  0E00               	movlw	0
  4348  003A62  6E95               	movwf	3989,c	;volatile
  4349                           
  4350                           ;MachineConfig.c: 34: TRISE = 0x00;
  4351  003A64  0E00               	movlw	0
  4352  003A66  6E96               	movwf	3990,c	;volatile
  4353                           
  4354                           ;MachineConfig.c: 37: LATA = 0x00;
  4355  003A68  0E00               	movlw	0
  4356  003A6A  6E89               	movwf	3977,c	;volatile
  4357                           
  4358                           ;MachineConfig.c: 38: LATB = 0x00;
  4359  003A6C  0E00               	movlw	0
  4360  003A6E  6E8A               	movwf	3978,c	;volatile
  4361                           
  4362                           ;MachineConfig.c: 39: LATC = 0x00;
  4363  003A70  0E00               	movlw	0
  4364  003A72  6E8B               	movwf	3979,c	;volatile
  4365                           
  4366                           ;MachineConfig.c: 40: LATD = 0x00;
  4367  003A74  0E00               	movlw	0
  4368  003A76  6E8C               	movwf	3980,c	;volatile
  4369                           
  4370                           ;MachineConfig.c: 41: LATE = 0x00;
  4371  003A78  0E00               	movlw	0
  4372  003A7A  6E8D               	movwf	3981,c	;volatile
  4373                           
  4374                           ;MachineConfig.c: 43: nRBPU = 0;
  4375  003A7C  9EF1               	bcf	intcon2,7,c	;volatile
  4376                           
  4377                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4378  003A7E  0E00               	movlw	0
  4379  003A80  6EC2               	movwf	4034,c	;volatile
  4380                           
  4381                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4382  003A82  0E0D               	movlw	13
  4383  003A84  6EC1               	movwf	4033,c	;volatile
  4384                           
  4385                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4386  003A86  0E00               	movlw	0
  4387  003A88  6EB5               	movwf	4021,c	;volatile
  4388                           
  4389                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4390  003A8A  96B4               	bcf	4020,3,c	;volatile
  4391                           
  4392                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4393  003A8C  0EB1               	movlw	177
  4394  003A8E  6EC0               	movwf	4032,c	;volatile
  4395                           
  4396                           ;MachineConfig.c: 55: INT1IE = 1;
  4397  003A90  86F0               	bsf	intcon3,3,c	;volatile
  4398                           
  4399                           ;MachineConfig.c: 57: TMR0IE = 1;
  4400  003A92  8AF2               	bsf	intcon,5,c	;volatile
  4401                           
  4402                           ;MachineConfig.c: 58: TMR1IE = 1;
  4403  003A94  809D               	bsf	3997,0,c	;volatile
  4404                           
  4405                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4406  003A96  0EB0               	movlw	176
  4407  003A98  6ECD               	movwf	4045,c	;volatile
  4408                           
  4409                           ;MachineConfig.c: 60: TMR2IE = 1;
  4410  003A9A  829D               	bsf	3997,1,c	;volatile
  4411                           
  4412                           ;MachineConfig.c: 61: TMR3IE = 1;
  4413  003A9C  82A0               	bsf	4000,1,c	;volatile
  4414                           
  4415                           ;MachineConfig.c: 62: PEIE = 1;
  4416  003A9E  8CF2               	bsf	intcon,6,c	;volatile
  4417                           
  4418                           ;MachineConfig.c: 63: ADIE = 0;
  4419  003AA0  9C9D               	bcf	3997,6,c	;volatile
  4420                           
  4421                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4422  003AA2  9EF2               	bcf	intcon,7,c	;volatile
  4423  003AA4  0012               	return		;funcret
  4424  003AA6                     __end_of_machineConfig:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           intcon	equ	0xFF2
  4433                           intcon2	equ	0xFF1
  4434                           intcon3	equ	0xFF0
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           postdec1	equ	0xFE5
  4438                           fsr1l	equ	0xFE1
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function _logRun *****************
  4447 ;; Defined at:
  4448 ;;		line 84 in file "EEPROM.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4453 ;;  i               2   55[BANK0 ] int 
  4454 ;;  num             1   49[BANK0 ] unsigned char 
  4455 ;;  addr            2   57[BANK0 ] unsigned short 
  4456 ;;  byte11          1   54[BANK0 ] unsigned char 
  4457 ;;  byte3           1   52[BANK0 ] unsigned char 
  4458 ;;  byte2           1   51[BANK0 ] unsigned char 
  4459 ;;  byte1           1   50[BANK0 ] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;Total ram usage:       10 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:   11
  4476 ;; This function calls:
  4477 ;;		_EEPROM_read
  4478 ;;		_EEPROM_write
  4479 ;; This function is called by:
  4480 ;;		_main
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           	psect	text11
  4485  0029FC                     __ptext11:
  4486                           	opt stack 0
  4487  0029FC                     _logRun:
  4488                           	opt stack 19
  4489                           
  4490                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4491                           
  4492                           ;incstack = 0
  4493  0029FC  0E00               	movlw	0
  4494  0029FE  0100               	movlb	0	; () banked
  4495  002A00  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4496  002A02  0E00               	movlw	0
  4497  002A04  6F80               	movwf	EEPROM_read@address& (0+255),b
  4498  002A06  ECCF  F020         	call	_EEPROM_read	;wreg free
  4499  002A0A  0100               	movlb	0	; () banked
  4500  002A0C  6FFD               	movwf	_sel& (0+255),b
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4504  002A0E  0100               	movlb	0	; () banked
  4505  002A10  51FD               	movf	_sel& (0+255),w,b
  4506  002A12  0D0B               	mullw	11
  4507  002A14  0E01               	movlw	1
  4508  002A16  24F3               	addwf	prodl,w,c
  4509  002A18  0100               	movlb	0	; () banked
  4510  002A1A  6FB9               	movwf	logRun@addr& (0+255),b
  4511  002A1C  0E00               	movlw	0
  4512  002A1E  20F4               	addwfc	prodh,w,c
  4513  002A20  0100               	movlb	0	; () banked
  4514  002A22  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;EEPROM.c: 101: if (sel < 3){
  4518  002A24  0E03               	movlw	3
  4519  002A26  0100               	movlb	0	; () banked
  4520  002A28  61FD               	cpfslt	_sel& (0+255),b
  4521  002A2A  D00E               	goto	l7608
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4525  002A2C  0100               	movlb	0	; () banked
  4526  002A2E  29FD               	incf	_sel& (0+255),w,b
  4527  002A30  0100               	movlb	0	; () banked
  4528  002A32  6FB1               	movwf	logRun@num& (0+255),b
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4532  002A34  0E00               	movlw	0
  4533  002A36  0100               	movlb	0	; () banked
  4534  002A38  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4535  002A3A  0E00               	movlw	0
  4536  002A3C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4537  002A3E  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4538  002A42  ECB7  F017         	call	_EEPROM_write	;wreg free
  4539                           
  4540                           ;EEPROM.c: 104: }
  4541  002A46  D00A               	goto	l7610
  4542  002A48                     l7608:
  4543                           
  4544                           ;EEPROM.c: 105: else{
  4545                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4546  002A48  0E00               	movlw	0
  4547  002A4A  0100               	movlb	0	; () banked
  4548  002A4C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4549  002A4E  0E00               	movlw	0
  4550  002A50  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4551  002A52  0E00               	movlw	0
  4552  002A54  0100               	movlb	0	; () banked
  4553  002A56  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4554  002A58  ECB7  F017         	call	_EEPROM_write	;wreg free
  4555  002A5C                     l7610:
  4556                           
  4557                           ;EEPROM.c: 107: }
  4558                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4559  002A5C  0100               	movlb	0	; () banked
  4560  002A5E  51FE               	movf	_count_total& (0+255),w,b
  4561  002A60  0980               	iorlw	128
  4562  002A62  0100               	movlb	0	; () banked
  4563  002A64  6FB2               	movwf	logRun@byte1& (0+255),b
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4567  002A66  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4568  002A6A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4569  002A6E  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4570  002A72  ECB7  F017         	call	_EEPROM_write	;wreg free
  4571                           
  4572                           ;EEPROM.c: 112: addr++;
  4573  002A76  0100               	movlb	0	; () banked
  4574  002A78  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4575  002A7A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4579  002A7C  3861               	swapf	_count_pop_no_tab,w,c
  4580  002A7E  0BF0               	andlw	240
  4581  002A80  1063               	iorwf	_count_pop_w_tab,w,c
  4582  002A82  0100               	movlb	0	; () banked
  4583  002A84  6FB3               	movwf	logRun@byte2& (0+255),b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4587  002A86  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4588  002A8A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4589  002A8E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4590  002A92  ECB7  F017         	call	_EEPROM_write	;wreg free
  4591                           
  4592                           ;EEPROM.c: 117: addr++;
  4593  002A96  0100               	movlb	0	; () banked
  4594  002A98  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4595  002A9A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4599  002A9C  385F               	swapf	_count_can_w_lab,w,c
  4600  002A9E  0BF0               	andlw	240
  4601  002AA0  105D               	iorwf	_count_can_no_lab,w,c
  4602  002AA2  0100               	movlb	0	; () banked
  4603  002AA4  6FB4               	movwf	logRun@byte3& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4607  002AA6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4608  002AAA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4609  002AAE  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4610  002AB2  ECB7  F017         	call	_EEPROM_write	;wreg free
  4611                           
  4612                           ;EEPROM.c: 120: addr++;
  4613  002AB6  0100               	movlb	0	; () banked
  4614  002AB8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4615  002ABA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4619  002ABC  0E00               	movlw	0
  4620  002ABE  0100               	movlb	0	; () banked
  4621  002AC0  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4622  002AC2  0E00               	movlw	0
  4623  002AC4  6FB7               	movwf	logRun@i& (0+255),b
  4624                           
  4625                           ; BSR set to: 0
  4626  002AC6  0100               	movlb	0	; () banked
  4627  002AC8  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4628  002ACA  D008               	goto	l7634
  4629  002ACC  0100               	movlb	0	; () banked
  4630  002ACE  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4631  002AD0  E128               	bnz	l931
  4632  002AD2  0E07               	movlw	7
  4633  002AD4  0100               	movlb	0	; () banked
  4634  002AD6  5DB7               	subwf	logRun@i& (0+255),w,b
  4635  002AD8  B0D8               	btfsc	status,0,c
  4636  002ADA  D023               	goto	l931
  4637  002ADC                     l7634:
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4641  002ADC  90D8               	bcf	status,0,c
  4642  002ADE  0100               	movlb	0	; () banked
  4643  002AE0  35B7               	rlcf	logRun@i& (0+255),w,b
  4644  002AE2  6ED9               	movwf	fsr2l,c
  4645  002AE4  0100               	movlb	0	; () banked
  4646  002AE6  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4647  002AE8  6EDA               	movwf	fsr2h,c
  4648  002AEA  0E0E               	movlw	low _startTime
  4649  002AEC  26D9               	addwf	fsr2l,f,c
  4650  002AEE  0E01               	movlw	high _startTime
  4651  002AF0  22DA               	addwfc	fsr2h,f,c
  4652  002AF2  50DF               	movf	indf2,w,c
  4653  002AF4  0100               	movlb	0	; () banked
  4654  002AF6  6FB5               	movwf	logRun@byte_i& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4658  002AF8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4659  002AFC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4660  002B00  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4661  002B04  ECB7  F017         	call	_EEPROM_write	;wreg free
  4662                           
  4663                           ;EEPROM.c: 126: addr++;
  4664  002B08  0100               	movlb	0	; () banked
  4665  002B0A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4666  002B0C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4667                           
  4668                           ; BSR set to: 0
  4669  002B0E  0100               	movlb	0	; () banked
  4670  002B10  4BB7               	infsnz	logRun@i& (0+255),f,b
  4671  002B12  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4672                           
  4673                           ; BSR set to: 0
  4674  002B14  0100               	movlb	0	; () banked
  4675  002B16  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4676  002B18  D7E1               	goto	l7634
  4677  002B1A  0100               	movlb	0	; () banked
  4678  002B1C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4679  002B1E  E101               	bnz	u6660
  4680  002B20  D7D8               	goto	L5
  4681  002B22                     u6660:
  4682  002B22                     l931:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;EEPROM.c: 127: }
  4686                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4687  002B22  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4691  002B26  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4692  002B2A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4693  002B2E  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4694  002B32  ECB7  F017         	call	_EEPROM_write	;wreg free
  4695  002B36  0012               	return		;funcret
  4696  002B38                     __end_of_logRun:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           intcon3	equ	0xFF0
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _EEPROM_write *****************
  4719 ;; Defined at:
  4720 ;;		line 32 in file "EEPROM.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  address         2   43[BANK0 ] unsigned short 
  4723 ;;  data            1   45[BANK0 ] unsigned char 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  i               1   48[BANK0 ] unsigned char 
  4726 ;;  i               1   47[BANK0 ] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4736 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;Total ram usage:        6 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:   10
  4743 ;; This function calls:
  4744 ;;		_EEPROM_read
  4745 ;;		_lcdInst
  4746 ;;		_printf
  4747 ;; This function is called by:
  4748 ;;		_Loading
  4749 ;;		_logRun
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text12
  4754  002F6E                     __ptext12:
  4755                           	opt stack 0
  4756  002F6E                     _EEPROM_write:
  4757                           	opt stack 18
  4758                           
  4759                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4760                           
  4761                           ;incstack = 0
  4762  002F6E  84A6               	bsf	4006,2,c	;volatile
  4763                           
  4764                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4765  002F70  0100               	movlb	0	; () banked
  4766  002F72  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4767  002F74  6EAA               	movwf	4010,c	;volatile
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4771  002F76  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;EEPROM.c: 39: EEDATA = data;
  4775  002F7A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4779  002F7E  9EA6               	bcf	4006,7,c	;volatile
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4783  002F80  9CA6               	bcf	4006,6,c	;volatile
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4787  002F82  9EF2               	bcf	intcon,7,c	;volatile
  4788                           
  4789                           ;EEPROM.c: 45: EECON2 = 0x55;
  4790  002F84  0E55               	movlw	85
  4791  002F86  6EA7               	movwf	4007,c	;volatile
  4792                           
  4793                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4794  002F88  0EAA               	movlw	170
  4795  002F8A  6EA7               	movwf	4007,c	;volatile
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4799  002F8C  82A6               	bsf	4006,1,c	;volatile
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4803  002F8E  8EF2               	bsf	intcon,7,c	;volatile
  4804  002F90                     l909:
  4805  002F90  A8A1               	btfss	4001,4,c	;volatile
  4806  002F92  D7FE               	goto	l909
  4807                           
  4808                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4809  002F94  98A1               	bcf	4001,4,c	;volatile
  4810                           
  4811                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4812  002F96  94A6               	bcf	4006,2,c	;volatile
  4813                           
  4814                           ;EEPROM.c: 57: if(debug){
  4815  002F98  0100               	movlb	0	; () banked
  4816  002F9A  51E0               	movf	_debug& (0+255),w,b
  4817  002F9C  0100               	movlb	0	; () banked
  4818  002F9E  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4819  002FA0  B4D8               	btfsc	status,2,c
  4820  002FA2  0012               	return	
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4824  002FA4  0E01               	movlw	1
  4825  002FA6  EC0C  F021         	call	_lcdInst
  4826  002FAA  0E68               	movlw	104
  4827  002FAC  0100               	movlb	0	; () banked
  4828  002FAE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4829  002FB0  0EE4               	movlw	228
  4830  002FB2                     u6947:
  4831  002FB2  2EE8               	decfsz	wreg,f,c
  4832  002FB4  D7FE               	bra	u6947
  4833  002FB6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4834  002FB8  D7FC               	bra	u6947
  4835  002FBA  F000               	nop	
  4836                           
  4837                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4838  002FBC  0E80               	movlw	128
  4839  002FBE  EC0C  F021         	call	_lcdInst
  4840                           
  4841                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4842  002FC2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4843  002FC6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4844  002FCA  ECCF  F020         	call	_EEPROM_read	;wreg free
  4845  002FCE  0100               	movlb	0	; () banked
  4846  002FD0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4847  002FD2  A4D8               	btfss	status,2,c
  4848  002FD4  D024               	goto	l5852
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4852  002FD6  0E6C               	movlw	low STR_66
  4853  002FD8  0100               	movlb	0	; () banked
  4854  002FDA  6F8E               	movwf	printf@f& (0+255),b
  4855  002FDC  0EFB               	movlw	high STR_66
  4856  002FDE  0100               	movlb	0	; () banked
  4857  002FE0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4858  002FE2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4859  002FE6  0100               	movlb	0	; () banked
  4860  002FE8  6B91               	clrf	(?_printf+3)& (0+255),b
  4861  002FEA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4862  002FEE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4863  002FF2  EC9C  F008         	call	_printf	;wreg free
  4864                           
  4865                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4866  002FF6  0E00               	movlw	0
  4867  002FF8  0100               	movlb	0	; () banked
  4868  002FFA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4869  002FFC                     l5844:
  4870                           
  4871                           ; BSR set to: 0
  4872  002FFC  0E63               	movlw	99
  4873  002FFE  0100               	movlb	0	; () banked
  4874  003000  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4875  003002  D001               	goto	l5848
  4876  003004  0012               	return	
  4877  003006                     l5848:
  4878                           
  4879                           ; BSR set to: 0
  4880  003006  0E68               	movlw	104
  4881  003008  0100               	movlb	0	; () banked
  4882  00300A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4883  00300C  0EE4               	movlw	228
  4884  00300E                     u6957:
  4885  00300E  2EE8               	decfsz	wreg,f,c
  4886  003010  D7FE               	bra	u6957
  4887  003012  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4888  003014  D7FC               	bra	u6957
  4889  003016  F000               	nop	
  4890  003018  0100               	movlb	0	; () banked
  4891  00301A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4892  00301C  D7EF               	goto	l5844
  4893  00301E                     l5852:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4897  00301E  0EBD               	movlw	low STR_67
  4898  003020  0100               	movlb	0	; () banked
  4899  003022  6F8E               	movwf	printf@f& (0+255),b
  4900  003024  0EFF               	movlw	high STR_67
  4901  003026  0100               	movlb	0	; () banked
  4902  003028  6F8F               	movwf	(printf@f+1)& (0+255),b
  4903  00302A  EC9C  F008         	call	_printf	;wreg free
  4904  00302E  0E00               	movlw	0
  4905  003030  0100               	movlb	0	; () banked
  4906  003032  6FB0               	movwf	EEPROM_write@i_1314& (0+255),b
  4907  003034                     l5856:
  4908                           
  4909                           ; BSR set to: 0
  4910  003034  0E63               	movlw	99
  4911  003036  0100               	movlb	0	; () banked
  4912  003038  65B0               	cpfsgt	EEPROM_write@i_1314& (0+255),b
  4913  00303A  D001               	goto	l5860
  4914  00303C  0012               	return	
  4915  00303E                     l5860:
  4916                           
  4917                           ; BSR set to: 0
  4918  00303E  0E68               	movlw	104
  4919  003040  0100               	movlb	0	; () banked
  4920  003042  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4921  003044  0EE4               	movlw	228
  4922  003046                     u6967:
  4923  003046  2EE8               	decfsz	wreg,f,c
  4924  003048  D7FE               	bra	u6967
  4925  00304A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4926  00304C  D7FC               	bra	u6967
  4927  00304E  F000               	nop	
  4928  003050  0100               	movlb	0	; () banked
  4929  003052  2BB0               	incf	EEPROM_write@i_1314& (0+255),f,b
  4930  003054  D7EF               	goto	l5856
  4931  003056                     __end_of_EEPROM_write:
  4932                           	opt stack 0
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           intcon2	equ	0xFF1
  4941                           intcon3	equ	0xFF0
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           postdec1	equ	0xFE5
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _EEPROM_read *****************
  4954 ;; Defined at:
  4955 ;;		line 68 in file "EEPROM.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  address         2    0[BANK0 ] unsigned short 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;		None
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      unsigned char 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        2 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    7
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_Loading
  4980 ;;		_EEPROM_write
  4981 ;;		_logRun
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text13
  4986  00419E                     __ptext13:
  4987                           	opt stack 0
  4988  00419E                     _EEPROM_read:
  4989                           	opt stack 20
  4990                           
  4991                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;incstack = 0
  4995  00419E  0100               	movlb	0	; () banked
  4996  0041A0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4997  0041A2  6EAA               	movwf	4010,c	;volatile
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5001  0041A4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5005  0041A8  9EA6               	bcf	4006,7,c	;volatile
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5009  0041AA  9CA6               	bcf	4006,6,c	;volatile
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5013  0041AC  80A6               	bsf	4006,0,c	;volatile
  5014  0041AE                     l922:
  5015  0041AE  B0A6               	btfsc	4006,0,c	;volatile
  5016  0041B0  D7FE               	goto	l922
  5017                           
  5018                           ;EEPROM.c: 81: return EEDATA;
  5019  0041B2  50A8               	movf	4008,w,c	;volatile
  5020  0041B4  0012               	return	
  5021  0041B6                     __end_of_EEPROM_read:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           intcon2	equ	0xFF1
  5031                           intcon3	equ	0xFF0
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           postdec1	equ	0xFE5
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _initUI *****************
  5044 ;; Defined at:
  5045 ;;		line 62 in file "UI.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      void 
  5052 ;; Registers used:
  5053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:   12
  5066 ;; This function calls:
  5067 ;;		_change_state_to_menu_start
  5068 ;;		_loadRTC
  5069 ;; This function is called by:
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	text14
  5075  0040F4                     __ptext14:
  5076                           	opt stack 0
  5077  0040F4                     _initUI:
  5078                           	opt stack 18
  5079                           
  5080                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5081                           
  5082                           ;incstack = 0
  5083  0040F4  8EF2               	bsf	intcon,7,c	;volatile
  5084                           
  5085                           ;UI.c: 64: machine_state = UI_state;
  5086  0040F6  0E00               	movlw	0
  5087  0040F8  0100               	movlb	0	; () banked
  5088  0040FA  6FFC               	movwf	_machine_state& (0+255),b
  5089                           
  5090                           ;UI.c: 65: logstate = 0;
  5091  0040FC  0E00               	movlw	0
  5092  0040FE  0100               	movlb	0	; () banked
  5093  004100  6FF7               	movwf	(_logstate+1)& (0+255),b
  5094  004102  0E00               	movlw	0
  5095  004104  6FF6               	movwf	_logstate& (0+255),b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;UI.c: 67: loadRTC();
  5099  004106  EC44  F01A         	call	_loadRTC	;wreg free
  5100                           
  5101                           ;UI.c: 69: change_state_to_menu_start();
  5102  00410A  ECEB  F01F         	call	_change_state_to_menu_start	;wreg free
  5103                           
  5104                           ;UI.c: 70: firstboot = 1;
  5105  00410E  0E00               	movlw	0
  5106  004110  6E76               	movwf	_firstboot+1,c
  5107  004112  0E01               	movlw	1
  5108  004114  6E75               	movwf	_firstboot,c
  5109  004116  0012               	return		;funcret
  5110  004118                     __end_of_initUI:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _loadRTC *****************
  5133 ;; Defined at:
  5134 ;;		line 28 in file "RTC.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  i               2   22[BANK0 ] int 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;Total ram usage:        3 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    9
  5155 ;; This function calls:
  5156 ;;		_I2C_Master_Init
  5157 ;;		_I2C_Master_Start
  5158 ;;		_I2C_Master_Stop
  5159 ;;		_I2C_Master_Write
  5160 ;; This function is called by:
  5161 ;;		_initUI
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text15
  5166  003488                     __ptext15:
  5167                           	opt stack 0
  5168  003488                     _loadRTC:
  5169                           	opt stack 20
  5170                           
  5171                           ;RTC.c: 30: I2C_Master_Init(10000);
  5172                           
  5173                           ;incstack = 0
  5174  003488  0E10               	movlw	16
  5175  00348A  0100               	movlb	0	; () banked
  5176  00348C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5177  00348E  0E27               	movlw	39
  5178  003490  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5179  003492  0E00               	movlw	0
  5180  003494  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5181  003496  0E00               	movlw	0
  5182  003498  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5183  00349A  EC9C  F01C         	call	_I2C_Master_Init	;wreg free
  5184                           
  5185                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5186  00349E  9EF2               	bcf	intcon,7,c	;volatile
  5187                           
  5188                           ;RTC.c: 34: I2C_Master_Start();
  5189  0034A0  EC32  F021         	call	_I2C_Master_Start	;wreg free
  5190                           
  5191                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5192  0034A4  0E00               	movlw	0
  5193  0034A6  0100               	movlb	0	; () banked
  5194  0034A8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5195  0034AA  0ED0               	movlw	208
  5196  0034AC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5197  0034AE  EC20  F021         	call	_I2C_Master_Write	;wreg free
  5198                           
  5199                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5200  0034B2  0E00               	movlw	0
  5201  0034B4  0100               	movlb	0	; () banked
  5202  0034B6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5203  0034B8  0E00               	movlw	0
  5204  0034BA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5205  0034BC  EC20  F021         	call	_I2C_Master_Write	;wreg free
  5206                           
  5207                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5208  0034C0  0E00               	movlw	0
  5209  0034C2  0100               	movlb	0	; () banked
  5210  0034C4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5211  0034C6  0E00               	movlw	0
  5212  0034C8  6F96               	movwf	loadRTC@i& (0+255),b
  5213  0034CA                     l5964:
  5214                           
  5215                           ; BSR set to: 0
  5216  0034CA  0100               	movlb	0	; () banked
  5217  0034CC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5218  0034CE  D008               	goto	l5968
  5219  0034D0  0100               	movlb	0	; () banked
  5220  0034D2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5221  0034D4  E11B               	bnz	l5974
  5222  0034D6  0E07               	movlw	7
  5223  0034D8  0100               	movlb	0	; () banked
  5224  0034DA  5D96               	subwf	loadRTC@i& (0+255),w,b
  5225  0034DC  B0D8               	btfsc	status,0,c
  5226  0034DE  D016               	goto	l5974
  5227  0034E0                     l5968:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5231  0034E0  0E24               	movlw	low _time
  5232  0034E2  0100               	movlb	0	; () banked
  5233  0034E4  2596               	addwf	loadRTC@i& (0+255),w,b
  5234  0034E6  6ED9               	movwf	fsr2l,c
  5235  0034E8  0E01               	movlw	high _time
  5236  0034EA  0100               	movlb	0	; () banked
  5237  0034EC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5238  0034EE  6EDA               	movwf	fsr2h,c
  5239  0034F0  50DF               	movf	indf2,w,c
  5240  0034F2  0100               	movlb	0	; () banked
  5241  0034F4  6F95               	movwf	??_loadRTC& (0+255),b
  5242  0034F6  0100               	movlb	0	; () banked
  5243  0034F8  5195               	movf	??_loadRTC& (0+255),w,b
  5244  0034FA  0100               	movlb	0	; () banked
  5245  0034FC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5246  0034FE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5247  003500  EC20  F021         	call	_I2C_Master_Write	;wreg free
  5248  003504  0100               	movlb	0	; () banked
  5249  003506  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5250  003508  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5251  00350A  D7DF               	goto	l5964
  5252  00350C                     l5974:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;RTC.c: 39: }
  5256                           ;RTC.c: 40: I2C_Master_Stop();
  5257  00350C  EC2E  F021         	call	_I2C_Master_Stop	;wreg free
  5258                           
  5259                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5260  003510  8EF2               	bsf	intcon,7,c	;volatile
  5261  003512  0012               	return		;funcret
  5262  003514                     __end_of_loadRTC:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           intcon2	equ	0xFF1
  5272                           intcon3	equ	0xFF0
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1l	equ	0xFE1
  5277                           indf2	equ	0xFDF
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function _I2C_Master_Init *****************
  5285 ;; Defined at:
  5286 ;;		line 15 in file "I2C.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  c               4   13[BANK0 ] const unsigned long 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, status,2, status,0, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;Total ram usage:        8 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    8
  5307 ;; This function calls:
  5308 ;;		___lldiv
  5309 ;; This function is called by:
  5310 ;;		_loadRTC
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text16
  5315  003938                     __ptext16:
  5316                           	opt stack 0
  5317  003938                     _I2C_Master_Init:
  5318                           	opt stack 20
  5319                           
  5320                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5321                           
  5322                           ;incstack = 0
  5323  003938  0E00               	movlw	0
  5324  00393A  6EC7               	movwf	4039,c	;volatile
  5325                           
  5326                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5327  00393C  0E28               	movlw	40
  5328  00393E  6EC6               	movwf	4038,c	;volatile
  5329                           
  5330                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5331  003940  0E00               	movlw	0
  5332  003942  6EC5               	movwf	4037,c	;volatile
  5333                           
  5334                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5335  003944  0E00               	movlw	0
  5336  003946  0100               	movlb	0	; () banked
  5337  003948  6F80               	movwf	___lldiv@dividend& (0+255),b
  5338  00394A  0E48               	movlw	72
  5339  00394C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5340  00394E  0EE8               	movlw	232
  5341  003950  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5342  003952  0E01               	movlw	1
  5343  003954  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5344  003956  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5345  00395A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5346  00395E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5347  003962  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5348  003966  0E02               	movlw	2
  5349  003968                     u4375:
  5350  003968  90D8               	bcf	status,0,c
  5351  00396A  0100               	movlb	0	; () banked
  5352  00396C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5353  00396E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5354  003970  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5355  003972  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5356  003974  2EE8               	decfsz	wreg,f,c
  5357  003976  D7F8               	goto	u4375
  5358  003978  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5359  00397C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5360  003980  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5361  003984  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5362  003988  ECF5  F018         	call	___lldiv	;wreg free
  5363  00398C  0100               	movlb	0	; () banked
  5364  00398E  0580               	decf	?___lldiv& (0+255),w,b
  5365  003990  6EC8               	movwf	4040,c	;volatile
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;I2C.c: 22: TRISC3 = 1;
  5369  003992  8694               	bsf	3988,3,c	;volatile
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;I2C.c: 23: TRISC4 = 1;
  5373  003994  8894               	bsf	3988,4,c	;volatile
  5374                           
  5375                           ; BSR set to: 0
  5376  003996  0012               	return		;funcret
  5377  003998                     __end_of_I2C_Master_Init:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon2	equ	0xFF1
  5387                           intcon3	equ	0xFF0
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function ___lldiv *****************
  5400 ;; Defined at:
  5401 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  dividend        4    0[BANK0 ] unsigned long 
  5404 ;;  divisor         4    4[BANK0 ] unsigned long 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  quotient        4    8[BANK0 ] unsigned long 
  5407 ;;  counter         1   12[BANK0 ] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  4    0[BANK0 ] unsigned long 
  5410 ;; Registers used:
  5411 ;;		wreg, status,2, status,0
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5417 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;Total ram usage:       13 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    7
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_I2C_Master_Init
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text17
  5432  0031EA                     __ptext17:
  5433                           	opt stack 0
  5434  0031EA                     ___lldiv:
  5435                           	opt stack 20
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;incstack = 0
  5439  0031EA  0E00               	movlw	0
  5440  0031EC  0100               	movlb	0	; () banked
  5441  0031EE  6F88               	movwf	___lldiv@quotient& (0+255),b
  5442  0031F0  0E00               	movlw	0
  5443  0031F2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5444  0031F4  0E00               	movlw	0
  5445  0031F6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5446  0031F8  0E00               	movlw	0
  5447  0031FA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5448                           
  5449                           ; BSR set to: 0
  5450  0031FC  0100               	movlb	0	; () banked
  5451  0031FE  5184               	movf	___lldiv@divisor& (0+255),w,b
  5452  003200  0100               	movlb	0	; () banked
  5453  003202  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5454  003204  0100               	movlb	0	; () banked
  5455  003206  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5456  003208  0100               	movlb	0	; () banked
  5457  00320A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5458  00320C  B4D8               	btfsc	status,2,c
  5459  00320E  D042               	goto	l1614
  5460                           
  5461                           ; BSR set to: 0
  5462  003210  0E01               	movlw	1
  5463  003212  0100               	movlb	0	; () banked
  5464  003214  6F8C               	movwf	___lldiv@counter& (0+255),b
  5465  003216  D008               	goto	l5410
  5466  003218                     l5408:
  5467                           
  5468                           ; BSR set to: 0
  5469  003218  0100               	movlb	0	; () banked
  5470  00321A  90D8               	bcf	status,0,c
  5471  00321C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5472  00321E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5473  003220  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5474  003222  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5475  003224  0100               	movlb	0	; () banked
  5476  003226  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5477  003228                     l5410:
  5478                           
  5479                           ; BSR set to: 0
  5480  003228  0100               	movlb	0	; () banked
  5481  00322A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5482  00322C  D7F5               	goto	l5408
  5483  00322E                     l5412:
  5484                           
  5485                           ; BSR set to: 0
  5486  00322E  0100               	movlb	0	; () banked
  5487  003230  90D8               	bcf	status,0,c
  5488  003232  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5489  003234  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5490  003236  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5491  003238  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5492                           
  5493                           ; BSR set to: 0
  5494  00323A  0100               	movlb	0	; () banked
  5495  00323C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5496  00323E  0100               	movlb	0	; () banked
  5497  003240  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5498  003242  0100               	movlb	0	; () banked
  5499  003244  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5500  003246  0100               	movlb	0	; () banked
  5501  003248  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5502  00324A  0100               	movlb	0	; () banked
  5503  00324C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5504  00324E  0100               	movlb	0	; () banked
  5505  003250  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5506  003252  0100               	movlb	0	; () banked
  5507  003254  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5508  003256  0100               	movlb	0	; () banked
  5509  003258  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5510  00325A  A0D8               	btfss	status,0,c
  5511  00325C  D012               	goto	l5420
  5512                           
  5513                           ; BSR set to: 0
  5514  00325E  0100               	movlb	0	; () banked
  5515  003260  5184               	movf	___lldiv@divisor& (0+255),w,b
  5516  003262  0100               	movlb	0	; () banked
  5517  003264  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5518  003266  0100               	movlb	0	; () banked
  5519  003268  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5520  00326A  0100               	movlb	0	; () banked
  5521  00326C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5522  00326E  0100               	movlb	0	; () banked
  5523  003270  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5524  003272  0100               	movlb	0	; () banked
  5525  003274  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5526  003276  0100               	movlb	0	; () banked
  5527  003278  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5528  00327A  0100               	movlb	0	; () banked
  5529  00327C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5530                           
  5531                           ; BSR set to: 0
  5532  00327E  0100               	movlb	0	; () banked
  5533  003280  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5534  003282                     l5420:
  5535                           
  5536                           ; BSR set to: 0
  5537  003282  0100               	movlb	0	; () banked
  5538  003284  90D8               	bcf	status,0,c
  5539  003286  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5540  003288  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5541  00328A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5542  00328C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5543                           
  5544                           ; BSR set to: 0
  5545  00328E  0100               	movlb	0	; () banked
  5546  003290  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5547  003292  D7CD               	goto	l5412
  5548  003294                     l1614:
  5549                           
  5550                           ; BSR set to: 0
  5551  003294  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5552  003298  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5553  00329C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5554  0032A0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5555                           
  5556                           ; BSR set to: 0
  5557  0032A4  0012               	return		;funcret
  5558  0032A6                     __end_of___lldiv:
  5559                           	opt stack 0
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodh	equ	0xFF4
  5565                           prodl	equ	0xFF3
  5566                           intcon	equ	0xFF2
  5567                           intcon2	equ	0xFF1
  5568                           intcon3	equ	0xFF0
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           postdec1	equ	0xFE5
  5572                           fsr1l	equ	0xFE1
  5573                           indf2	equ	0xFDF
  5574                           postinc2	equ	0xFDE
  5575                           postdec2	equ	0xFDD
  5576                           fsr2h	equ	0xFDA
  5577                           fsr2l	equ	0xFD9
  5578                           status	equ	0xFD8
  5579                           
  5580 ;; *************** function _change_state_to_menu_start *****************
  5581 ;; Defined at:
  5582 ;;		line 472 in file "UI.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;		None
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;		None
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;Total ram usage:        0 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:   11
  5603 ;; This function calls:
  5604 ;;		_lcdInst
  5605 ;;		_printRTC
  5606 ;;		_printf
  5607 ;; This function is called by:
  5608 ;;		_initUI
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text18
  5613  003FD6                     __ptext18:
  5614                           	opt stack 0
  5615  003FD6                     _change_state_to_menu_start:
  5616                           	opt stack 18
  5617                           
  5618                           ;UI.c: 473: cur_state = 0;
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;incstack = 0
  5622  003FD6  0E00               	movlw	0
  5623  003FD8  0100               	movlb	0	; () banked
  5624  003FDA  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5625  003FDC  0E00               	movlw	0
  5626  003FDE  6FDE               	movwf	_cur_state& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;UI.c: 475: lcdInst(0b10000000);;
  5630  003FE0  0E80               	movlw	128
  5631  003FE2  EC0C  F021         	call	_lcdInst
  5632                           
  5633                           ;UI.c: 476: printRTC();
  5634  003FE6  EC6F  F00C         	call	_printRTC	;wreg free
  5635                           
  5636                           ;UI.c: 477: lcdInst(0b11000000);;
  5637  003FEA  0EC0               	movlw	192
  5638  003FEC  EC0C  F021         	call	_lcdInst
  5639                           
  5640                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5641  003FF0  0E20               	movlw	low STR_30
  5642  003FF2  0100               	movlb	0	; () banked
  5643  003FF4  6F8E               	movwf	printf@f& (0+255),b
  5644  003FF6  0EFE               	movlw	high STR_30
  5645  003FF8  0100               	movlb	0	; () banked
  5646  003FFA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5647  003FFC  EC9C  F008         	call	_printf	;wreg free
  5648  004000  0012               	return		;funcret
  5649  004002                     __end_of_change_state_to_menu_start:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           intcon2	equ	0xFF1
  5659                           intcon3	equ	0xFF0
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           postdec1	equ	0xFE5
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           postdec2	equ	0xFDD
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           
  5671 ;; *************** function _initTime *****************
  5672 ;; Defined at:
  5673 ;;		line 17 in file "RTC.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  s               1    wreg     unsigned char 
  5676 ;;  m               1    0[BANK0 ] unsigned char 
  5677 ;;  h               1    1[BANK0 ] unsigned char 
  5678 ;;  w               1    2[BANK0 ] unsigned char 
  5679 ;;  DD              1    3[BANK0 ] unsigned char 
  5680 ;;  MM              1    4[BANK0 ] unsigned char 
  5681 ;;  YY              1    5[BANK0 ] unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  s               1    6[BANK0 ] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5693 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;Total ram usage:        7 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    7
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_main
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text19
  5708  00415E                     __ptext19:
  5709                           	opt stack 0
  5710  00415E                     _initTime:
  5711                           	opt stack 23
  5712                           
  5713                           ;incstack = 0
  5714                           ;initTime@s stored from wreg
  5715  00415E  0100               	movlb	0	; () banked
  5716  004160  6F86               	movwf	initTime@s& (0+255),b
  5717                           
  5718                           ;RTC.c: 19: time[0] = s;
  5719  004162  C086  F124         	movff	initTime@s,_time
  5720                           
  5721                           ;RTC.c: 20: time[1] = m;
  5722  004166  C080  F125         	movff	initTime@m,_time+1
  5723                           
  5724                           ;RTC.c: 21: time[2] = h;
  5725  00416A  C081  F126         	movff	initTime@h,_time+2
  5726                           
  5727                           ;RTC.c: 22: time[3] = w;
  5728  00416E  C082  F127         	movff	initTime@w,_time+3
  5729                           
  5730                           ;RTC.c: 23: time[4] = DD;
  5731  004172  C083  F128         	movff	initTime@DD,_time+4
  5732                           
  5733                           ;RTC.c: 24: time[5] = MM;
  5734  004176  C084  F129         	movff	initTime@MM,_time+5
  5735                           
  5736                           ;RTC.c: 25: time[6] = YY;
  5737  00417A  C085  F12A         	movff	initTime@YY,_time+6
  5738  00417E  0012               	return		;funcret
  5739  004180                     __end_of_initTime:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           intcon	equ	0xFF2
  5748                           intcon2	equ	0xFF1
  5749                           intcon3	equ	0xFF0
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _initLCD *****************
  5762 ;; Defined at:
  5763 ;;		line 48 in file "lcd.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:        1 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    9
  5784 ;; This function calls:
  5785 ;;		_lcdInst
  5786 ;; This function is called by:
  5787 ;;		_main
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text20
  5792  003C34                     __ptext20:
  5793                           	opt stack 0
  5794  003C34                     _initLCD:
  5795                           	opt stack 21
  5796                           
  5797                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5798                           
  5799                           ;incstack = 0
  5800  003C34  0E9C               	movlw	156
  5801  003C36  0100               	movlb	0	; () banked
  5802  003C38  6F83               	movwf	??_initLCD& (0+255),b
  5803  003C3A  0ED7               	movlw	215
  5804  003C3C                     u6977:
  5805  003C3C  2EE8               	decfsz	wreg,f,c
  5806  003C3E  D7FE               	bra	u6977
  5807  003C40  2F83               	decfsz	??_initLCD& (0+255),f,b
  5808  003C42  D7FC               	bra	u6977
  5809                           
  5810                           ;lcd.c: 50: lcdInst(0b00110011);
  5811  003C44  0E33               	movlw	51
  5812  003C46  EC0C  F021         	call	_lcdInst
  5813                           
  5814                           ;lcd.c: 51: lcdInst(0b00110010);
  5815  003C4A  0E32               	movlw	50
  5816  003C4C  EC0C  F021         	call	_lcdInst
  5817                           
  5818                           ;lcd.c: 53: lcdInst(0b00101000);
  5819  003C50  0E28               	movlw	40
  5820  003C52  EC0C  F021         	call	_lcdInst
  5821                           
  5822                           ;lcd.c: 54: lcdInst(0b00001100);
  5823  003C56  0E0C               	movlw	12
  5824  003C58  EC0C  F021         	call	_lcdInst
  5825                           
  5826                           ;lcd.c: 55: lcdInst(0b00000110);
  5827  003C5C  0E06               	movlw	6
  5828  003C5E  EC0C  F021         	call	_lcdInst
  5829                           
  5830                           ;lcd.c: 56: lcdInst(0b00000001);
  5831  003C62  0E01               	movlw	1
  5832  003C64  EC0C  F021         	call	_lcdInst
  5833                           
  5834                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5835  003C68  0E9C               	movlw	156
  5836  003C6A  0100               	movlb	0	; () banked
  5837  003C6C  6F83               	movwf	??_initLCD& (0+255),b
  5838  003C6E  0ED7               	movlw	215
  5839  003C70                     u6987:
  5840  003C70  2EE8               	decfsz	wreg,f,c
  5841  003C72  D7FE               	bra	u6987
  5842  003C74  2F83               	decfsz	??_initLCD& (0+255),f,b
  5843  003C76  D7FC               	bra	u6987
  5844  003C78  0012               	return		;funcret
  5845  003C7A                     __end_of_initLCD:
  5846                           	opt stack 0
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           intcon2	equ	0xFF1
  5855                           intcon3	equ	0xFF0
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           fsr1l	equ	0xFE1
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _UI *****************
  5868 ;; Defined at:
  5869 ;;		line 74 in file "UI.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  i               1   73[BANK0 ] unsigned char 
  5874 ;;  i               1   85[BANK0 ] unsigned char 
  5875 ;;  i               1   84[BANK0 ] unsigned char 
  5876 ;;  i               1   83[BANK0 ] unsigned char 
  5877 ;;  i               1   82[BANK0 ] unsigned char 
  5878 ;;  i               1   81[BANK0 ] unsigned char 
  5879 ;;  i               1   80[BANK0 ] unsigned char 
  5880 ;;  i               1   79[BANK0 ] unsigned char 
  5881 ;;  i               1   78[BANK0 ] unsigned char 
  5882 ;;  i               1   77[BANK0 ] unsigned char 
  5883 ;;  i               1   76[BANK0 ] unsigned char 
  5884 ;;  i               1   75[BANK0 ] unsigned char 
  5885 ;;  i               1   74[BANK0 ] unsigned char 
  5886 ;;  month           4   86[BANK0 ] unsigned char [4]
  5887 ;;  i               1   72[BANK0 ] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;Total ram usage:       22 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:   11
  5904 ;; This function calls:
  5905 ;;		___awdiv
  5906 ;;		___awmod
  5907 ;;		_change_state_to_menu_12
  5908 ;;		_change_state_to_menu_22
  5909 ;;		_lcdInst
  5910 ;;		_printRTC
  5911 ;;		_printf
  5912 ;;		_strcpy
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text21
  5919  000012                     __ptext21:
  5920                           	opt stack 0
  5921  000012                     _UI:
  5922                           	opt stack 19
  5923                           
  5924                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5925                           
  5926                           ;incstack = 0
  5927  000012  0E02               	movlw	2
  5928  000014  0100               	movlb	0	; () banked
  5929  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5930  000018  A4D8               	btfss	status,2,c
  5931  00001A  D075               	goto	l7036
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5935  00001C  0E01               	movlw	1
  5936  00001E  EC0C  F021         	call	_lcdInst
  5937  000022  0E68               	movlw	104
  5938  000024  0100               	movlb	0	; () banked
  5939  000026  6FC4               	movwf	??_UI& (0+255),b
  5940  000028  0EE4               	movlw	228
  5941  00002A                     u6997:
  5942  00002A  2EE8               	decfsz	wreg,f,c
  5943  00002C  D7FE               	bra	u6997
  5944  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5945  000030  D7FC               	bra	u6997
  5946  000032  F000               	nop	
  5947                           
  5948                           ;UI.c: 77: lcdInst(0b10000000);;
  5949  000034  0E80               	movlw	128
  5950  000036  EC0C  F021         	call	_lcdInst
  5951                           
  5952                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5953  00003A  0EDD               	movlw	low STR_1
  5954  00003C  0100               	movlb	0	; () banked
  5955  00003E  6F8E               	movwf	printf@f& (0+255),b
  5956  000040  0EFB               	movlw	high STR_1
  5957  000042  0100               	movlb	0	; () banked
  5958  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5959  000046  0E01               	movlw	1
  5960  000048  0100               	movlb	0	; () banked
  5961  00004A  25FD               	addwf	_sel& (0+255),w,b
  5962  00004C  0100               	movlb	0	; () banked
  5963  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5964  000050  0100               	movlb	0	; () banked
  5965  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5966  000054  0E00               	movlw	0
  5967  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5968  000058  EC9C  F008         	call	_printf	;wreg free
  5969                           
  5970                           ;UI.c: 79: lcdInst(0b11000000);;
  5971  00005C  0EC0               	movlw	192
  5972  00005E  EC0C  F021         	call	_lcdInst
  5973                           
  5974                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5975  000062  0E0E               	movlw	14
  5976  000064  0100               	movlb	0	; () banked
  5977  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5978  000068  0E10               	movlw	16
  5979  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5980  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5981  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5982  000074  ECA8  F019         	call	___awmod	;wreg free
  5983  000078  C080  F0C6         	movff	?___awmod,_UI$2232
  5984  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2232+1
  5985                           
  5986                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5987  000080  0E2E               	movlw	low STR_2
  5988  000082  0100               	movlb	0	; () banked
  5989  000084  6F8E               	movwf	printf@f& (0+255),b
  5990  000086  0EFF               	movlw	high STR_2
  5991  000088  0100               	movlb	0	; () banked
  5992  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5993  00008C  0E0E               	movlw	14
  5994  00008E  0100               	movlb	0	; () banked
  5995  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5996  000092  0E10               	movlw	16
  5997  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5998  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5999  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6000  00009E  ECA8  F019         	call	___awmod	;wreg free
  6001  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6002  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6003  0000AA  0E00               	movlw	0
  6004  0000AC  0100               	movlb	0	; () banked
  6005  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6006  0000B0  0E3C               	movlw	60
  6007  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6008  0000B4  EC96  F018         	call	___awdiv	;wreg free
  6009  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6010  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6011  0000C0  C0C6  F080         	movff	_UI$2232,___awmod@dividend
  6012  0000C4  C0C7  F081         	movff	_UI$2232+1,___awmod@dividend+1
  6013  0000C8  0E00               	movlw	0
  6014  0000CA  0100               	movlb	0	; () banked
  6015  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6016  0000CE  0E3C               	movlw	60
  6017  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6018  0000D2  ECA8  F019         	call	___awmod	;wreg free
  6019  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6020  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6021  0000DE  EC9C  F008         	call	_printf	;wreg free
  6022                           
  6023                           ;UI.c: 81: machine_state = UI_state;
  6024  0000E2  0E00               	movlw	0
  6025  0000E4  0100               	movlb	0	; () banked
  6026  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6027  0000E8                     l177:
  6028  0000E8  A281               	btfss	3969,1,c	;volatile
  6029  0000EA  D7FE               	goto	l177
  6030                           
  6031                           ;UI.c: 84: }
  6032                           ;UI.c: 85: if(cur_state==12){
  6033  0000EC  0E0C               	movlw	12
  6034  0000EE  0100               	movlb	0	; () banked
  6035  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6036  0000F2  0100               	movlb	0	; () banked
  6037  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6038  0000F6  A4D8               	btfss	status,2,c
  6039  0000F8  D003               	goto	l7034
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;UI.c: 86: change_state_to_menu_12();
  6043  0000FA  EC7A  F01E         	call	_change_state_to_menu_12	;wreg free
  6044                           
  6045                           ;UI.c: 87: }
  6046  0000FE  D3D5               	goto	l7356
  6047  000100                     l7034:
  6048                           
  6049                           ;UI.c: 88: else{
  6050                           ;UI.c: 89: change_state_to_menu_22();
  6051  000100  EC5E  F01E         	call	_change_state_to_menu_22	;wreg free
  6052                           
  6053                           ;UI.c: 90: }
  6054                           ;UI.c: 91: }
  6055  000104  D3D2               	goto	l7356
  6056  000106                     l7036:
  6057                           
  6058                           ;UI.c: 92: else if(cur_state == 0){
  6059  000106  0100               	movlb	0	; () banked
  6060  000108  51DE               	movf	_cur_state& (0+255),w,b
  6061  00010A  0100               	movlb	0	; () banked
  6062  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6063  00010E  A4D8               	btfss	status,2,c
  6064  000110  D3CC               	goto	l7356
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6068  000112  0E00               	movlw	0
  6069  000114  0100               	movlb	0	; () banked
  6070  000116  6FC8               	movwf	UI@i& (0+255),b
  6071  000118                     l7040:
  6072                           
  6073                           ; BSR set to: 0
  6074  000118  0E63               	movlw	99
  6075  00011A  0100               	movlb	0	; () banked
  6076  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6077  00011E  D001               	goto	l7044
  6078  000120  D00C               	goto	l7048
  6079  000122                     l7044:
  6080                           
  6081                           ; BSR set to: 0
  6082  000122  0E68               	movlw	104
  6083  000124  0100               	movlb	0	; () banked
  6084  000126  6FC4               	movwf	??_UI& (0+255),b
  6085  000128  0EE4               	movlw	228
  6086  00012A                     u7007:
  6087  00012A  2EE8               	decfsz	wreg,f,c
  6088  00012C  D7FE               	bra	u7007
  6089  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6090  000130  D7FC               	bra	u7007
  6091  000132  F000               	nop	
  6092  000134  0100               	movlb	0	; () banked
  6093  000136  2BC8               	incf	UI@i& (0+255),f,b
  6094  000138  D7EF               	goto	l7040
  6095  00013A                     l7048:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;UI.c: 94: if(cur_state == 0){
  6099  00013A  0100               	movlb	0	; () banked
  6100  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6101  00013E  0100               	movlb	0	; () banked
  6102  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6103  000142  A4D8               	btfss	status,2,c
  6104  000144  D3B2               	goto	l7356
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;UI.c: 95: printRTC();
  6108  000146  EC6F  F00C         	call	_printRTC	;wreg free
  6109                           
  6110                           ;UI.c: 96: }
  6111                           ;UI.c: 97: }
  6112                           ;UI.c: 98: while(logstate){
  6113  00014A  D3AF               	goto	l7356
  6114  00014C                     l7052:
  6115                           
  6116                           ;UI.c: 100: if(!log_completion){
  6117  00014C  0100               	movlb	0	; () banked
  6118  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6119  000150  0100               	movlb	0	; () banked
  6120  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6121  000154  A4D8               	btfss	status,2,c
  6122  000156  D041               	goto	l7082
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6126  000158  0E01               	movlw	1
  6127  00015A  EC0C  F021         	call	_lcdInst
  6128  00015E  0E68               	movlw	104
  6129  000160  0100               	movlb	0	; () banked
  6130  000162  6FC4               	movwf	??_UI& (0+255),b
  6131  000164  0EE4               	movlw	228
  6132  000166                     u7017:
  6133  000166  2EE8               	decfsz	wreg,f,c
  6134  000168  D7FE               	bra	u7017
  6135  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6136  00016C  D7FC               	bra	u7017
  6137  00016E  F000               	nop	
  6138                           
  6139                           ;UI.c: 102: lcdInst(0b10000000);;
  6140  000170  0E80               	movlw	128
  6141  000172  EC0C  F021         	call	_lcdInst
  6142                           
  6143                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6144  000176  0ECB               	movlw	low STR_3
  6145  000178  0100               	movlb	0	; () banked
  6146  00017A  6F8E               	movwf	printf@f& (0+255),b
  6147  00017C  0EFB               	movlw	high STR_3
  6148  00017E  0100               	movlb	0	; () banked
  6149  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6150  000182  C0E6  F090         	movff	_log,?_printf+2
  6151  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6152  00018A  EC9C  F008         	call	_printf	;wreg free
  6153                           
  6154                           ;UI.c: 104: lcdInst(0b11000000);;
  6155  00018E  0EC0               	movlw	192
  6156  000190  EC0C  F021         	call	_lcdInst
  6157                           
  6158                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6159  000194  0E51               	movlw	low STR_4
  6160  000196  0100               	movlb	0	; () banked
  6161  000198  6F8E               	movwf	printf@f& (0+255),b
  6162  00019A  0EFE               	movlw	high STR_4
  6163  00019C  0100               	movlb	0	; () banked
  6164  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6165  0001A0  EC9C  F008         	call	_printf	;wreg free
  6166  0001A4                     l7066:
  6167  0001A4  0E00               	movlw	0
  6168  0001A6  0100               	movlb	0	; () banked
  6169  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6170  0001AA                     l7068:
  6171                           
  6172                           ; BSR set to: 0
  6173  0001AA  0E63               	movlw	99
  6174  0001AC  0100               	movlb	0	; () banked
  6175  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6176  0001B0  D001               	goto	l7072
  6177  0001B2  D00C               	goto	l7076
  6178  0001B4                     l7072:
  6179                           
  6180                           ; BSR set to: 0
  6181  0001B4  0E68               	movlw	104
  6182  0001B6  0100               	movlb	0	; () banked
  6183  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6184  0001BA  0EE4               	movlw	228
  6185  0001BC                     u7027:
  6186  0001BC  2EE8               	decfsz	wreg,f,c
  6187  0001BE  D7FE               	bra	u7027
  6188  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6189  0001C2  D7FC               	bra	u7027
  6190  0001C4  F000               	nop	
  6191  0001C6  0100               	movlb	0	; () banked
  6192  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6193  0001CA  D7EF               	goto	l7068
  6194  0001CC                     l7076:
  6195                           
  6196                           ; BSR set to: 0
  6197  0001CC  0100               	movlb	0	; () banked
  6198  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6199  0001D0  0100               	movlb	0	; () banked
  6200  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6201  0001D4  B4D8               	btfsc	status,2,c
  6202  0001D6  0012               	return	
  6203  0001D8  D7E5               	goto	l7066
  6204  0001DA                     l7082:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;UI.c: 109: else{
  6208                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6209  0001DA  0E01               	movlw	1
  6210  0001DC  EC0C  F021         	call	_lcdInst
  6211  0001E0  0E68               	movlw	104
  6212  0001E2  0100               	movlb	0	; () banked
  6213  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6214  0001E6  0EE4               	movlw	228
  6215  0001E8                     u7037:
  6216  0001E8  2EE8               	decfsz	wreg,f,c
  6217  0001EA  D7FE               	bra	u7037
  6218  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6219  0001EE  D7FC               	bra	u7037
  6220  0001F0  F000               	nop	
  6221                           
  6222                           ;UI.c: 111: lcdInst(0b10000000);;
  6223  0001F2  0E80               	movlw	128
  6224  0001F4  EC0C  F021         	call	_lcdInst
  6225                           
  6226                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6227  0001F8  0ECB               	movlw	low STR_3
  6228  0001FA  0100               	movlb	0	; () banked
  6229  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6230  0001FE  0EFB               	movlw	high STR_3
  6231  000200  0100               	movlb	0	; () banked
  6232  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6233  000204  C0E6  F090         	movff	_log,?_printf+2
  6234  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6235  00020C  EC9C  F008         	call	_printf	;wreg free
  6236                           
  6237                           ;UI.c: 113: lcdInst(0b11000000);;
  6238  000210  0EC0               	movlw	192
  6239  000212  EC0C  F021         	call	_lcdInst
  6240                           
  6241                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6242  000216  0E0F               	movlw	low STR_6
  6243  000218  0100               	movlb	0	; () banked
  6244  00021A  6F8E               	movwf	printf@f& (0+255),b
  6245  00021C  0EFE               	movlw	high STR_6
  6246  00021E  0100               	movlb	0	; () banked
  6247  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6248  000222  EC9C  F008         	call	_printf	;wreg free
  6249                           
  6250                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6251  000226  0E00               	movlw	0
  6252  000228  0100               	movlb	0	; () banked
  6253  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6254  00022C                     l7096:
  6255                           
  6256                           ; BSR set to: 0
  6257  00022C  0E63               	movlw	99
  6258  00022E  0100               	movlb	0	; () banked
  6259  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6260  000232  D001               	goto	l7100
  6261  000234  D00C               	goto	l7104
  6262  000236                     l7100:
  6263                           
  6264                           ; BSR set to: 0
  6265  000236  0E68               	movlw	104
  6266  000238  0100               	movlb	0	; () banked
  6267  00023A  6FC4               	movwf	??_UI& (0+255),b
  6268  00023C  0EE4               	movlw	228
  6269  00023E                     u7047:
  6270  00023E  2EE8               	decfsz	wreg,f,c
  6271  000240  D7FE               	bra	u7047
  6272  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6273  000244  D7FC               	bra	u7047
  6274  000246  F000               	nop	
  6275  000248  0100               	movlb	0	; () banked
  6276  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6277  00024C  D7EF               	goto	l7096
  6278  00024E                     l7104:
  6279                           
  6280                           ; BSR set to: 0
  6281  00024E  0100               	movlb	0	; () banked
  6282  000250  51F6               	movf	_logstate& (0+255),w,b
  6283  000252  0100               	movlb	0	; () banked
  6284  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6285  000256  B4D8               	btfsc	status,2,c
  6286  000258  0012               	return	
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6290                           
  6291                           ; BSR set to: 0
  6292                           
  6293                           ; BSR set to: 0
  6294  00025A  0E00               	movlw	0
  6295  00025C  0100               	movlb	0	; () banked
  6296  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6297  000260                     l7110:
  6298                           
  6299                           ; BSR set to: 0
  6300  000260  0E63               	movlw	99
  6301  000262  0100               	movlb	0	; () banked
  6302  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6303  000266  D001               	goto	l7114
  6304  000268  D00C               	goto	l7118
  6305  00026A                     l7114:
  6306                           
  6307                           ; BSR set to: 0
  6308  00026A  0E68               	movlw	104
  6309  00026C  0100               	movlb	0	; () banked
  6310  00026E  6FC4               	movwf	??_UI& (0+255),b
  6311  000270  0EE4               	movlw	228
  6312  000272                     u7057:
  6313  000272  2EE8               	decfsz	wreg,f,c
  6314  000274  D7FE               	bra	u7057
  6315  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6316  000278  D7FC               	bra	u7057
  6317  00027A  F000               	nop	
  6318  00027C  0100               	movlb	0	; () banked
  6319  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6320  000280  D7EF               	goto	l7110
  6321  000282                     l7118:
  6322                           
  6323                           ; BSR set to: 0
  6324  000282  0100               	movlb	0	; () banked
  6325  000284  51F6               	movf	_logstate& (0+255),w,b
  6326  000286  0100               	movlb	0	; () banked
  6327  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6328  00028A  B4D8               	btfsc	status,2,c
  6329  00028C  0012               	return	
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6333                           
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337  00028E  0E01               	movlw	1
  6338  000290  EC0C  F021         	call	_lcdInst
  6339  000294  0E68               	movlw	104
  6340  000296  0100               	movlb	0	; () banked
  6341  000298  6FC4               	movwf	??_UI& (0+255),b
  6342  00029A  0EE4               	movlw	228
  6343  00029C                     u7067:
  6344  00029C  2EE8               	decfsz	wreg,f,c
  6345  00029E  D7FE               	bra	u7067
  6346  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6347  0002A2  D7FC               	bra	u7067
  6348  0002A4  F000               	nop	
  6349                           
  6350                           ;UI.c: 120: lcdInst(0b10000000);;
  6351  0002A6  0E80               	movlw	128
  6352  0002A8  EC0C  F021         	call	_lcdInst
  6353                           
  6354                           ;UI.c: 121: printf("START:");
  6355  0002AC  0EC4               	movlw	low STR_7
  6356  0002AE  0100               	movlb	0	; () banked
  6357  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6358  0002B2  0EFF               	movlw	high STR_7
  6359  0002B4  0100               	movlb	0	; () banked
  6360  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6361  0002B8  EC9C  F008         	call	_printf	;wreg free
  6362                           
  6363                           ;UI.c: 122: lcdInst(0b11000000);;
  6364  0002BC  0EC0               	movlw	192
  6365  0002BE  EC0C  F021         	call	_lcdInst
  6366                           
  6367                           ;UI.c: 123: char month[] = "MMM";
  6368  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6369  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6370  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6371  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6372                           
  6373                           ;UI.c: 124: switch(log_startTime[5]){
  6374  0002D2  D0C3               	goto	l7162
  6375  0002D4                     l7134:
  6376                           
  6377                           ;UI.c: 126: strcpy(month, "JAN");
  6378  0002D4  0ED6               	movlw	low UI@month
  6379  0002D6  0100               	movlb	0	; () banked
  6380  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6381  0002DA  0E00               	movlw	high UI@month
  6382  0002DC  0100               	movlb	0	; () banked
  6383  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6384  0002E0  0EDB               	movlw	low STR_8
  6385  0002E2  0100               	movlb	0	; () banked
  6386  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6387  0002E6  0EFF               	movlw	high STR_8
  6388  0002E8  0100               	movlb	0	; () banked
  6389  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6390  0002EC  EC96  F01E         	call	_strcpy	;wreg free
  6391                           
  6392                           ;UI.c: 127: break;
  6393  0002F0  D0E6               	goto	l7164
  6394  0002F2                     l7136:
  6395                           
  6396                           ;UI.c: 129: strcpy(month, "FEB");
  6397  0002F2  0ED6               	movlw	low UI@month
  6398  0002F4  0100               	movlb	0	; () banked
  6399  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6400  0002F8  0E00               	movlw	high UI@month
  6401  0002FA  0100               	movlb	0	; () banked
  6402  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6403  0002FE  0ECB               	movlw	low STR_9
  6404  000300  0100               	movlb	0	; () banked
  6405  000302  6F82               	movwf	strcpy@from& (0+255),b
  6406  000304  0EFF               	movlw	high STR_9
  6407  000306  0100               	movlb	0	; () banked
  6408  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6409  00030A  EC96  F01E         	call	_strcpy	;wreg free
  6410                           
  6411                           ;UI.c: 130: break;
  6412  00030E  D0D7               	goto	l7164
  6413  000310                     l7138:
  6414                           
  6415                           ;UI.c: 132: strcpy(month, "MAR");
  6416  000310  0ED6               	movlw	low UI@month
  6417  000312  0100               	movlb	0	; () banked
  6418  000314  6F80               	movwf	strcpy@to& (0+255),b
  6419  000316  0E00               	movlw	high UI@month
  6420  000318  0100               	movlb	0	; () banked
  6421  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6422  00031C  0EE7               	movlw	low STR_10
  6423  00031E  0100               	movlb	0	; () banked
  6424  000320  6F82               	movwf	strcpy@from& (0+255),b
  6425  000322  0EFF               	movlw	high STR_10
  6426  000324  0100               	movlb	0	; () banked
  6427  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6428  000328  EC96  F01E         	call	_strcpy	;wreg free
  6429                           
  6430                           ;UI.c: 133: break;
  6431  00032C  D0C8               	goto	l7164
  6432  00032E                     l7140:
  6433                           
  6434                           ;UI.c: 135: strcpy(month, "APR");
  6435  00032E  0ED6               	movlw	low UI@month
  6436  000330  0100               	movlb	0	; () banked
  6437  000332  6F80               	movwf	strcpy@to& (0+255),b
  6438  000334  0E00               	movlw	high UI@month
  6439  000336  0100               	movlb	0	; () banked
  6440  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6441  00033A  0EEB               	movlw	low STR_11
  6442  00033C  0100               	movlb	0	; () banked
  6443  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6444  000340  0EFF               	movlw	high STR_11
  6445  000342  0100               	movlb	0	; () banked
  6446  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6447  000346  EC96  F01E         	call	_strcpy	;wreg free
  6448                           
  6449                           ;UI.c: 136: break;
  6450  00034A  D0B9               	goto	l7164
  6451  00034C                     l7142:
  6452                           
  6453                           ;UI.c: 138: strcpy(month, "MAY");
  6454  00034C  0ED6               	movlw	low UI@month
  6455  00034E  0100               	movlb	0	; () banked
  6456  000350  6F80               	movwf	strcpy@to& (0+255),b
  6457  000352  0E00               	movlw	high UI@month
  6458  000354  0100               	movlb	0	; () banked
  6459  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6460  000358  0EFB               	movlw	low STR_12
  6461  00035A  0100               	movlb	0	; () banked
  6462  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6463  00035E  0EFF               	movlw	high STR_12
  6464  000360  0100               	movlb	0	; () banked
  6465  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6466  000364  EC96  F01E         	call	_strcpy	;wreg free
  6467                           
  6468                           ;UI.c: 139: break;
  6469  000368  D0AA               	goto	l7164
  6470  00036A                     l7144:
  6471                           
  6472                           ;UI.c: 141: strcpy(month, "JUN");
  6473  00036A  0ED6               	movlw	low UI@month
  6474  00036C  0100               	movlb	0	; () banked
  6475  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6476  000370  0E00               	movlw	high UI@month
  6477  000372  0100               	movlb	0	; () banked
  6478  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6479  000376  0EDF               	movlw	low STR_13
  6480  000378  0100               	movlb	0	; () banked
  6481  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6482  00037C  0EFF               	movlw	high STR_13
  6483  00037E  0100               	movlb	0	; () banked
  6484  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6485  000382  EC96  F01E         	call	_strcpy	;wreg free
  6486                           
  6487                           ;UI.c: 142: break;
  6488  000386  D09B               	goto	l7164
  6489  000388                     l7146:
  6490                           
  6491                           ;UI.c: 144: strcpy(month, "JUL");
  6492  000388  0ED6               	movlw	low UI@month
  6493  00038A  0100               	movlb	0	; () banked
  6494  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6495  00038E  0E00               	movlw	high UI@month
  6496  000390  0100               	movlb	0	; () banked
  6497  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6498  000394  0ED7               	movlw	low STR_14
  6499  000396  0100               	movlb	0	; () banked
  6500  000398  6F82               	movwf	strcpy@from& (0+255),b
  6501  00039A  0EFF               	movlw	high STR_14
  6502  00039C  0100               	movlb	0	; () banked
  6503  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6504  0003A0  EC96  F01E         	call	_strcpy	;wreg free
  6505                           
  6506                           ;UI.c: 145: break;
  6507  0003A4  D08C               	goto	l7164
  6508  0003A6                     l7148:
  6509                           
  6510                           ;UI.c: 147: strcpy(month, "AUG");
  6511  0003A6  0ED6               	movlw	low UI@month
  6512  0003A8  0100               	movlb	0	; () banked
  6513  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6514  0003AC  0E00               	movlw	high UI@month
  6515  0003AE  0100               	movlb	0	; () banked
  6516  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6517  0003B2  0ED3               	movlw	low STR_15
  6518  0003B4  0100               	movlb	0	; () banked
  6519  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6520  0003B8  0EFF               	movlw	high STR_15
  6521  0003BA  0100               	movlb	0	; () banked
  6522  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6523  0003BE  EC96  F01E         	call	_strcpy	;wreg free
  6524                           
  6525                           ;UI.c: 148: break;
  6526  0003C2  D07D               	goto	l7164
  6527  0003C4                     l7150:
  6528                           
  6529                           ;UI.c: 150: strcpy(month, "SEP");
  6530  0003C4  0ED6               	movlw	low UI@month
  6531  0003C6  0100               	movlb	0	; () banked
  6532  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6533  0003CA  0E00               	movlw	high UI@month
  6534  0003CC  0100               	movlb	0	; () banked
  6535  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6536  0003D0  0EE3               	movlw	low STR_16
  6537  0003D2  0100               	movlb	0	; () banked
  6538  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6539  0003D6  0EFF               	movlw	high STR_16
  6540  0003D8  0100               	movlb	0	; () banked
  6541  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6542  0003DC  EC96  F01E         	call	_strcpy	;wreg free
  6543                           
  6544                           ;UI.c: 151: break;
  6545  0003E0  D06E               	goto	l7164
  6546  0003E2                     l7152:
  6547                           
  6548                           ;UI.c: 153: strcpy(month, "OCT");
  6549  0003E2  0ED6               	movlw	low UI@month
  6550  0003E4  0100               	movlb	0	; () banked
  6551  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6552  0003E8  0E00               	movlw	high UI@month
  6553  0003EA  0100               	movlb	0	; () banked
  6554  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6555  0003EE  0EF3               	movlw	low STR_17
  6556  0003F0  0100               	movlb	0	; () banked
  6557  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6558  0003F4  0EFF               	movlw	high STR_17
  6559  0003F6  0100               	movlb	0	; () banked
  6560  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6561  0003FA  EC96  F01E         	call	_strcpy	;wreg free
  6562                           
  6563                           ;UI.c: 154: break;
  6564  0003FE  D05F               	goto	l7164
  6565  000400                     l7154:
  6566                           
  6567                           ;UI.c: 156: strcpy(month, "NOV");
  6568  000400  0ED6               	movlw	low UI@month
  6569  000402  0100               	movlb	0	; () banked
  6570  000404  6F80               	movwf	strcpy@to& (0+255),b
  6571  000406  0E00               	movlw	high UI@month
  6572  000408  0100               	movlb	0	; () banked
  6573  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6574  00040C  0EF7               	movlw	low STR_18
  6575  00040E  0100               	movlb	0	; () banked
  6576  000410  6F82               	movwf	strcpy@from& (0+255),b
  6577  000412  0EFF               	movlw	high STR_18
  6578  000414  0100               	movlb	0	; () banked
  6579  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6580  000418  EC96  F01E         	call	_strcpy	;wreg free
  6581                           
  6582                           ;UI.c: 157: break;
  6583  00041C  D050               	goto	l7164
  6584  00041E                     l7156:
  6585                           
  6586                           ;UI.c: 159: strcpy(month, "DEC");
  6587  00041E  0ED6               	movlw	low UI@month
  6588  000420  0100               	movlb	0	; () banked
  6589  000422  6F80               	movwf	strcpy@to& (0+255),b
  6590  000424  0E00               	movlw	high UI@month
  6591  000426  0100               	movlb	0	; () banked
  6592  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6593  00042A  0ECF               	movlw	low STR_19
  6594  00042C  0100               	movlb	0	; () banked
  6595  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6596  000430  0EFF               	movlw	high STR_19
  6597  000432  0100               	movlb	0	; () banked
  6598  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6599  000436  EC96  F01E         	call	_strcpy	;wreg free
  6600                           
  6601                           ;UI.c: 160: break;
  6602  00043A  D041               	goto	l7164
  6603  00043C                     l7158:
  6604                           
  6605                           ;UI.c: 162: strcpy(month, "ERR");
  6606  00043C  0ED6               	movlw	low UI@month
  6607  00043E  0100               	movlb	0	; () banked
  6608  000440  6F80               	movwf	strcpy@to& (0+255),b
  6609  000442  0E00               	movlw	high UI@month
  6610  000444  0100               	movlb	0	; () banked
  6611  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6612  000448  0EEF               	movlw	low STR_20
  6613  00044A  0100               	movlb	0	; () banked
  6614  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6615  00044E  0EFF               	movlw	high STR_20
  6616  000450  0100               	movlb	0	; () banked
  6617  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6618  000454  EC96  F01E         	call	_strcpy	;wreg free
  6619                           
  6620                           ;UI.c: 164: }
  6621                           
  6622                           ;UI.c: 163: break;
  6623  000458  D032               	goto	l7164
  6624  00045A                     l7162:
  6625  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6626  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6627  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6628                           
  6629                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6630                           ; Switch size 1, requested type "space"
  6631                           ; Number of cases is 1, Range of values is 0 to 0
  6632                           ; switch strategies available:
  6633                           ; Name         Instructions Cycles
  6634                           ; simple_byte            4     3 (average)
  6635                           ;	Chosen strategy is simple_byte
  6636  000466  0100               	movlb	0	; () banked
  6637  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6638  00046A  0A00               	xorlw	0	; case 0
  6639  00046C  A4D8               	btfss	status,2,c
  6640  00046E  D7E6               	goto	l7158
  6641                           
  6642                           ; BSR set to: 0
  6643                           ; Switch size 1, requested type "space"
  6644                           ; Number of cases is 12, Range of values is 1 to 12
  6645                           ; switch strategies available:
  6646                           ; Name         Instructions Cycles
  6647                           ; simple_byte           37    19 (average)
  6648                           ;	Chosen strategy is simple_byte
  6649  000470  0100               	movlb	0	; () banked
  6650  000472  51C4               	movf	??_UI& (0+255),w,b
  6651  000474  0A01               	xorlw	1	; case 1
  6652  000476  B4D8               	btfsc	status,2,c
  6653  000478  D72D               	goto	l7134
  6654  00047A  0A03               	xorlw	3	; case 2
  6655  00047C  B4D8               	btfsc	status,2,c
  6656  00047E  D739               	goto	l7136
  6657  000480  0A01               	xorlw	1	; case 3
  6658  000482  B4D8               	btfsc	status,2,c
  6659  000484  D745               	goto	l7138
  6660  000486  0A07               	xorlw	7	; case 4
  6661  000488  B4D8               	btfsc	status,2,c
  6662  00048A  D751               	goto	l7140
  6663  00048C  0A01               	xorlw	1	; case 5
  6664  00048E  B4D8               	btfsc	status,2,c
  6665  000490  D75D               	goto	l7142
  6666  000492  0A03               	xorlw	3	; case 6
  6667  000494  B4D8               	btfsc	status,2,c
  6668  000496  D769               	goto	l7144
  6669  000498  0A01               	xorlw	1	; case 7
  6670  00049A  B4D8               	btfsc	status,2,c
  6671  00049C  D775               	goto	l7146
  6672  00049E  0A0F               	xorlw	15	; case 8
  6673  0004A0  B4D8               	btfsc	status,2,c
  6674  0004A2  D781               	goto	l7148
  6675  0004A4  0A01               	xorlw	1	; case 9
  6676  0004A6  B4D8               	btfsc	status,2,c
  6677  0004A8  D78D               	goto	l7150
  6678  0004AA  0A03               	xorlw	3	; case 10
  6679  0004AC  B4D8               	btfsc	status,2,c
  6680  0004AE  D799               	goto	l7152
  6681  0004B0  0A01               	xorlw	1	; case 11
  6682  0004B2  B4D8               	btfsc	status,2,c
  6683  0004B4  D7A5               	goto	l7154
  6684  0004B6  0A07               	xorlw	7	; case 12
  6685  0004B8  B4D8               	btfsc	status,2,c
  6686  0004BA  D7B1               	goto	l7156
  6687  0004BC  D7BF               	goto	l7158
  6688  0004BE                     l7164:
  6689                           
  6690                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6691  0004BE  0E54               	movlw	low STR_21
  6692  0004C0  0100               	movlb	0	; () banked
  6693  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6694  0004C4  0EFB               	movlw	high STR_21
  6695  0004C6  0100               	movlb	0	; () banked
  6696  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6697  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6698  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6699  0004D2  0ED6               	movlw	low UI@month
  6700  0004D4  0100               	movlb	0	; () banked
  6701  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6702  0004D8  0E00               	movlw	high UI@month
  6703  0004DA  0100               	movlb	0	; () banked
  6704  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6705  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6706  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6707  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6708  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6709  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6710  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6711  0004F6  EC9C  F008         	call	_printf	;wreg free
  6712                           
  6713                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6714  0004FA  0E00               	movlw	0
  6715  0004FC  0100               	movlb	0	; () banked
  6716  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6717  000500                     l7168:
  6718                           
  6719                           ; BSR set to: 0
  6720  000500  0E63               	movlw	99
  6721  000502  0100               	movlb	0	; () banked
  6722  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6723  000506  D001               	goto	l7172
  6724  000508  D00C               	goto	l7176
  6725  00050A                     l7172:
  6726                           
  6727                           ; BSR set to: 0
  6728  00050A  0E68               	movlw	104
  6729  00050C  0100               	movlb	0	; () banked
  6730  00050E  6FC4               	movwf	??_UI& (0+255),b
  6731  000510  0EE4               	movlw	228
  6732  000512                     u7077:
  6733  000512  2EE8               	decfsz	wreg,f,c
  6734  000514  D7FE               	bra	u7077
  6735  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6736  000518  D7FC               	bra	u7077
  6737  00051A  F000               	nop	
  6738  00051C  0100               	movlb	0	; () banked
  6739  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6740  000520  D7EF               	goto	l7168
  6741  000522                     l7176:
  6742                           
  6743                           ; BSR set to: 0
  6744  000522  0100               	movlb	0	; () banked
  6745  000524  51F6               	movf	_logstate& (0+255),w,b
  6746  000526  0100               	movlb	0	; () banked
  6747  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6748  00052A  B4D8               	btfsc	status,2,c
  6749  00052C  0012               	return	
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6753                           
  6754                           ; BSR set to: 0
  6755                           
  6756                           ; BSR set to: 0
  6757  00052E  0E00               	movlw	0
  6758  000530  0100               	movlb	0	; () banked
  6759  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6760  000534                     l7182:
  6761                           
  6762                           ; BSR set to: 0
  6763  000534  0E63               	movlw	99
  6764  000536  0100               	movlb	0	; () banked
  6765  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6766  00053A  D001               	goto	l7186
  6767  00053C  D00C               	goto	l7190
  6768  00053E                     l7186:
  6769                           
  6770                           ; BSR set to: 0
  6771  00053E  0E68               	movlw	104
  6772  000540  0100               	movlb	0	; () banked
  6773  000542  6FC4               	movwf	??_UI& (0+255),b
  6774  000544  0EE4               	movlw	228
  6775  000546                     u7087:
  6776  000546  2EE8               	decfsz	wreg,f,c
  6777  000548  D7FE               	bra	u7087
  6778  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6779  00054C  D7FC               	bra	u7087
  6780  00054E  F000               	nop	
  6781  000550  0100               	movlb	0	; () banked
  6782  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6783  000554  D7EF               	goto	l7182
  6784  000556                     l7190:
  6785                           
  6786                           ; BSR set to: 0
  6787  000556  0100               	movlb	0	; () banked
  6788  000558  51F6               	movf	_logstate& (0+255),w,b
  6789  00055A  0100               	movlb	0	; () banked
  6790  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6791  00055E  B4D8               	btfsc	status,2,c
  6792  000560  0012               	return	
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6796                           
  6797                           ; BSR set to: 0
  6798                           
  6799                           ; BSR set to: 0
  6800  000562  0E01               	movlw	1
  6801  000564  EC0C  F021         	call	_lcdInst
  6802  000568  0E68               	movlw	104
  6803  00056A  0100               	movlb	0	; () banked
  6804  00056C  6FC4               	movwf	??_UI& (0+255),b
  6805  00056E  0EE4               	movlw	228
  6806  000570                     u7097:
  6807  000570  2EE8               	decfsz	wreg,f,c
  6808  000572  D7FE               	bra	u7097
  6809  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6810  000576  D7FC               	bra	u7097
  6811  000578  F000               	nop	
  6812                           
  6813                           ;UI.c: 171: lcdInst(0b10000000);;
  6814  00057A  0E80               	movlw	128
  6815  00057C  EC0C  F021         	call	_lcdInst
  6816                           
  6817                           ;UI.c: 172: printf("DURATION:");
  6818  000580  0EA4               	movlw	low STR_22
  6819  000582  0100               	movlb	0	; () banked
  6820  000584  6F8E               	movwf	printf@f& (0+255),b
  6821  000586  0EFF               	movlw	high STR_22
  6822  000588  0100               	movlb	0	; () banked
  6823  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6824  00058C  EC9C  F008         	call	_printf	;wreg free
  6825                           
  6826                           ;UI.c: 173: lcdInst(0b11000000);;
  6827  000590  0EC0               	movlw	192
  6828  000592  EC0C  F021         	call	_lcdInst
  6829                           
  6830                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6831  000596  0E0E               	movlw	14
  6832  000598  0100               	movlb	0	; () banked
  6833  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6834  00059C  0E10               	movlw	16
  6835  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6836  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6837  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6838  0005A8  ECA8  F019         	call	___awmod	;wreg free
  6839  0005AC  C080  F0C6         	movff	?___awmod,_UI$2232
  6840  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2232+1
  6841                           
  6842                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6843  0005B4  0E20               	movlw	low STR_23
  6844  0005B6  0100               	movlb	0	; () banked
  6845  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6846  0005BA  0EFF               	movlw	high STR_23
  6847  0005BC  0100               	movlb	0	; () banked
  6848  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6849  0005C0  0E0E               	movlw	14
  6850  0005C2  0100               	movlb	0	; () banked
  6851  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6852  0005C6  0E10               	movlw	16
  6853  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6854  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6855  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6856  0005D2  ECA8  F019         	call	___awmod	;wreg free
  6857  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6858  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6859  0005DE  0E00               	movlw	0
  6860  0005E0  0100               	movlb	0	; () banked
  6861  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6862  0005E4  0E3C               	movlw	60
  6863  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6864  0005E8  EC96  F018         	call	___awdiv	;wreg free
  6865  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6866  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6867  0005F4  C0C6  F080         	movff	_UI$2232,___awmod@dividend
  6868  0005F8  C0C7  F081         	movff	_UI$2232+1,___awmod@dividend+1
  6869  0005FC  0E00               	movlw	0
  6870  0005FE  0100               	movlb	0	; () banked
  6871  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6872  000602  0E3C               	movlw	60
  6873  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6874  000606  ECA8  F019         	call	___awmod	;wreg free
  6875  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6876  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6877  000612  EC9C  F008         	call	_printf	;wreg free
  6878                           
  6879                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6880  000616  0E00               	movlw	0
  6881  000618  0100               	movlb	0	; () banked
  6882  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6883  00061C                     l7210:
  6884                           
  6885                           ; BSR set to: 0
  6886  00061C  0E63               	movlw	99
  6887  00061E  0100               	movlb	0	; () banked
  6888  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6889  000622  D001               	goto	l7214
  6890  000624  D00C               	goto	l7218
  6891  000626                     l7214:
  6892                           
  6893                           ; BSR set to: 0
  6894  000626  0E68               	movlw	104
  6895  000628  0100               	movlb	0	; () banked
  6896  00062A  6FC4               	movwf	??_UI& (0+255),b
  6897  00062C  0EE4               	movlw	228
  6898  00062E                     u7107:
  6899  00062E  2EE8               	decfsz	wreg,f,c
  6900  000630  D7FE               	bra	u7107
  6901  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6902  000634  D7FC               	bra	u7107
  6903  000636  F000               	nop	
  6904  000638  0100               	movlb	0	; () banked
  6905  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6906  00063C  D7EF               	goto	l7210
  6907  00063E                     l7218:
  6908                           
  6909                           ; BSR set to: 0
  6910  00063E  0100               	movlb	0	; () banked
  6911  000640  51F6               	movf	_logstate& (0+255),w,b
  6912  000642  0100               	movlb	0	; () banked
  6913  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6914  000646  B4D8               	btfsc	status,2,c
  6915  000648  0012               	return	
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6919                           
  6920                           ; BSR set to: 0
  6921                           
  6922                           ; BSR set to: 0
  6923  00064A  0E00               	movlw	0
  6924  00064C  0100               	movlb	0	; () banked
  6925  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6926  000650                     l7224:
  6927                           
  6928                           ; BSR set to: 0
  6929  000650  0E63               	movlw	99
  6930  000652  0100               	movlb	0	; () banked
  6931  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6932  000656  D001               	goto	l7228
  6933  000658  D00C               	goto	l7232
  6934  00065A                     l7228:
  6935                           
  6936                           ; BSR set to: 0
  6937  00065A  0E68               	movlw	104
  6938  00065C  0100               	movlb	0	; () banked
  6939  00065E  6FC4               	movwf	??_UI& (0+255),b
  6940  000660  0EE4               	movlw	228
  6941  000662                     u7117:
  6942  000662  2EE8               	decfsz	wreg,f,c
  6943  000664  D7FE               	bra	u7117
  6944  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6945  000668  D7FC               	bra	u7117
  6946  00066A  F000               	nop	
  6947  00066C  0100               	movlb	0	; () banked
  6948  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6949  000670  D7EF               	goto	l7224
  6950  000672                     l7232:
  6951                           
  6952                           ; BSR set to: 0
  6953  000672  0100               	movlb	0	; () banked
  6954  000674  51F6               	movf	_logstate& (0+255),w,b
  6955  000676  0100               	movlb	0	; () banked
  6956  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6957  00067A  B4D8               	btfsc	status,2,c
  6958  00067C  0012               	return	
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6962                           
  6963                           ; BSR set to: 0
  6964                           
  6965                           ; BSR set to: 0
  6966  00067E  0E01               	movlw	1
  6967  000680  EC0C  F021         	call	_lcdInst
  6968  000684  0E68               	movlw	104
  6969  000686  0100               	movlb	0	; () banked
  6970  000688  6FC4               	movwf	??_UI& (0+255),b
  6971  00068A  0EE4               	movlw	228
  6972  00068C                     u7127:
  6973  00068C  2EE8               	decfsz	wreg,f,c
  6974  00068E  D7FE               	bra	u7127
  6975  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6976  000692  D7FC               	bra	u7127
  6977  000694  F000               	nop	
  6978                           
  6979                           ;UI.c: 180: lcdInst(0b10000000);;
  6980  000696  0E80               	movlw	128
  6981  000698  EC0C  F021         	call	_lcdInst
  6982                           
  6983                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6984  00069C  0E65               	movlw	low STR_24
  6985  00069E  0100               	movlb	0	; () banked
  6986  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6987  0006A2  0EFD               	movlw	high STR_24
  6988  0006A4  0100               	movlb	0	; () banked
  6989  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6990  0006A8  EC9C  F008         	call	_printf	;wreg free
  6991                           
  6992                           ;UI.c: 182: lcdInst(0b11000000);;
  6993  0006AC  0EC0               	movlw	192
  6994  0006AE  EC0C  F021         	call	_lcdInst
  6995                           
  6996                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6997  0006B2  0E94               	movlw	low STR_25
  6998  0006B4  0100               	movlb	0	; () banked
  6999  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7000  0006B8  0EFB               	movlw	high STR_25
  7001  0006BA  0100               	movlb	0	; () banked
  7002  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7003  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7004  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7005  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7006  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7007  0006CE  EC9C  F008         	call	_printf	;wreg free
  7008                           
  7009                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7010  0006D2  0E00               	movlw	0
  7011  0006D4  0100               	movlb	0	; () banked
  7012  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7013  0006D8                     l7250:
  7014                           
  7015                           ; BSR set to: 0
  7016  0006D8  0E63               	movlw	99
  7017  0006DA  0100               	movlb	0	; () banked
  7018  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7019  0006DE  D001               	goto	l7254
  7020  0006E0  D00C               	goto	l7258
  7021  0006E2                     l7254:
  7022                           
  7023                           ; BSR set to: 0
  7024  0006E2  0E68               	movlw	104
  7025  0006E4  0100               	movlb	0	; () banked
  7026  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7027  0006E8  0EE4               	movlw	228
  7028  0006EA                     u7137:
  7029  0006EA  2EE8               	decfsz	wreg,f,c
  7030  0006EC  D7FE               	bra	u7137
  7031  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7032  0006F0  D7FC               	bra	u7137
  7033  0006F2  F000               	nop	
  7034  0006F4  0100               	movlb	0	; () banked
  7035  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7036  0006F8  D7EF               	goto	l7250
  7037  0006FA                     l7258:
  7038                           
  7039                           ; BSR set to: 0
  7040  0006FA  0100               	movlb	0	; () banked
  7041  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7042  0006FE  0100               	movlb	0	; () banked
  7043  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7044  000702  B4D8               	btfsc	status,2,c
  7045  000704  0012               	return	
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7049                           
  7050                           ; BSR set to: 0
  7051                           
  7052                           ; BSR set to: 0
  7053  000706  0E00               	movlw	0
  7054  000708  0100               	movlb	0	; () banked
  7055  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7056  00070C                     l7264:
  7057                           
  7058                           ; BSR set to: 0
  7059  00070C  0E63               	movlw	99
  7060  00070E  0100               	movlb	0	; () banked
  7061  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7062  000712  D001               	goto	l7268
  7063  000714  D00C               	goto	l7272
  7064  000716                     l7268:
  7065                           
  7066                           ; BSR set to: 0
  7067  000716  0E68               	movlw	104
  7068  000718  0100               	movlb	0	; () banked
  7069  00071A  6FC4               	movwf	??_UI& (0+255),b
  7070  00071C  0EE4               	movlw	228
  7071  00071E                     u7147:
  7072  00071E  2EE8               	decfsz	wreg,f,c
  7073  000720  D7FE               	bra	u7147
  7074  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7075  000724  D7FC               	bra	u7147
  7076  000726  F000               	nop	
  7077  000728  0100               	movlb	0	; () banked
  7078  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7079  00072C  D7EF               	goto	l7264
  7080  00072E                     l7272:
  7081                           
  7082                           ; BSR set to: 0
  7083  00072E  0100               	movlb	0	; () banked
  7084  000730  51F6               	movf	_logstate& (0+255),w,b
  7085  000732  0100               	movlb	0	; () banked
  7086  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7087  000736  B4D8               	btfsc	status,2,c
  7088  000738  0012               	return	
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7092                           
  7093                           ; BSR set to: 0
  7094                           
  7095                           ; BSR set to: 0
  7096  00073A  0E01               	movlw	1
  7097  00073C  EC0C  F021         	call	_lcdInst
  7098  000740  0E68               	movlw	104
  7099  000742  0100               	movlb	0	; () banked
  7100  000744  6FC4               	movwf	??_UI& (0+255),b
  7101  000746  0EE4               	movlw	228
  7102  000748                     u7157:
  7103  000748  2EE8               	decfsz	wreg,f,c
  7104  00074A  D7FE               	bra	u7157
  7105  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7106  00074E  D7FC               	bra	u7157
  7107  000750  F000               	nop	
  7108                           
  7109                           ;UI.c: 189: lcdInst(0b10000000);;
  7110  000752  0E80               	movlw	128
  7111  000754  EC0C  F021         	call	_lcdInst
  7112                           
  7113                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7114  000758  0E76               	movlw	low STR_26
  7115  00075A  0100               	movlb	0	; () banked
  7116  00075C  6F8E               	movwf	printf@f& (0+255),b
  7117  00075E  0EFD               	movlw	high STR_26
  7118  000760  0100               	movlb	0	; () banked
  7119  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7120  000764  EC9C  F008         	call	_printf	;wreg free
  7121                           
  7122                           ;UI.c: 191: lcdInst(0b11000000);;
  7123  000768  0EC0               	movlw	192
  7124  00076A  EC0C  F021         	call	_lcdInst
  7125                           
  7126                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7127  00076E  0E81               	movlw	low STR_27
  7128  000770  0100               	movlb	0	; () banked
  7129  000772  6F8E               	movwf	printf@f& (0+255),b
  7130  000774  0EFB               	movlw	high STR_27
  7131  000776  0100               	movlb	0	; () banked
  7132  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7133  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7134  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7135  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7136  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7137  00078A  EC9C  F008         	call	_printf	;wreg free
  7138                           
  7139                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7140  00078E  0E00               	movlw	0
  7141  000790  0100               	movlb	0	; () banked
  7142  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7143  000794                     l7290:
  7144                           
  7145                           ; BSR set to: 0
  7146  000794  0E63               	movlw	99
  7147  000796  0100               	movlb	0	; () banked
  7148  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7149  00079A  D001               	goto	l7294
  7150  00079C  D00C               	goto	l7298
  7151  00079E                     l7294:
  7152                           
  7153                           ; BSR set to: 0
  7154  00079E  0E68               	movlw	104
  7155  0007A0  0100               	movlb	0	; () banked
  7156  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7157  0007A4  0EE4               	movlw	228
  7158  0007A6                     u7167:
  7159  0007A6  2EE8               	decfsz	wreg,f,c
  7160  0007A8  D7FE               	bra	u7167
  7161  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7162  0007AC  D7FC               	bra	u7167
  7163  0007AE  F000               	nop	
  7164  0007B0  0100               	movlb	0	; () banked
  7165  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7166  0007B4  D7EF               	goto	l7290
  7167  0007B6                     l7298:
  7168                           
  7169                           ; BSR set to: 0
  7170  0007B6  0100               	movlb	0	; () banked
  7171  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7172  0007BA  0100               	movlb	0	; () banked
  7173  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7174  0007BE  B4D8               	btfsc	status,2,c
  7175  0007C0  0012               	return	
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7179                           
  7180                           ; BSR set to: 0
  7181                           
  7182                           ; BSR set to: 0
  7183  0007C2  0E00               	movlw	0
  7184  0007C4  0100               	movlb	0	; () banked
  7185  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7186  0007C8                     l7304:
  7187                           
  7188                           ; BSR set to: 0
  7189  0007C8  0E63               	movlw	99
  7190  0007CA  0100               	movlb	0	; () banked
  7191  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7192  0007CE  D001               	goto	l7308
  7193  0007D0  D00C               	goto	l7312
  7194  0007D2                     l7308:
  7195                           
  7196                           ; BSR set to: 0
  7197  0007D2  0E68               	movlw	104
  7198  0007D4  0100               	movlb	0	; () banked
  7199  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7200  0007D8  0EE4               	movlw	228
  7201  0007DA                     u7177:
  7202  0007DA  2EE8               	decfsz	wreg,f,c
  7203  0007DC  D7FE               	bra	u7177
  7204  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7205  0007E0  D7FC               	bra	u7177
  7206  0007E2  F000               	nop	
  7207  0007E4  0100               	movlb	0	; () banked
  7208  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7209  0007E8  D7EF               	goto	l7304
  7210  0007EA                     l7312:
  7211                           
  7212                           ; BSR set to: 0
  7213  0007EA  0100               	movlb	0	; () banked
  7214  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7215  0007EE  0100               	movlb	0	; () banked
  7216  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7217  0007F2  B4D8               	btfsc	status,2,c
  7218  0007F4  0012               	return	
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7222                           
  7223                           ; BSR set to: 0
  7224                           
  7225                           ; BSR set to: 0
  7226  0007F6  0E01               	movlw	1
  7227  0007F8  EC0C  F021         	call	_lcdInst
  7228  0007FC  0E68               	movlw	104
  7229  0007FE  0100               	movlb	0	; () banked
  7230  000800  6FC4               	movwf	??_UI& (0+255),b
  7231  000802  0EE4               	movlw	228
  7232  000804                     u7187:
  7233  000804  2EE8               	decfsz	wreg,f,c
  7234  000806  D7FE               	bra	u7187
  7235  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7236  00080A  D7FC               	bra	u7187
  7237  00080C  F000               	nop	
  7238                           
  7239                           ;UI.c: 198: lcdInst(0b10000000);;
  7240  00080E  0E80               	movlw	128
  7241  000810  EC0C  F021         	call	_lcdInst
  7242                           
  7243                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7244  000814  0E87               	movlw	low STR_28
  7245  000816  0100               	movlb	0	; () banked
  7246  000818  6F8E               	movwf	printf@f& (0+255),b
  7247  00081A  0EFD               	movlw	high STR_28
  7248  00081C  0100               	movlb	0	; () banked
  7249  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7250  000820  EC9C  F008         	call	_printf	;wreg free
  7251                           
  7252                           ;UI.c: 200: lcdInst(0b11000000);;
  7253  000824  0EC0               	movlw	192
  7254  000826  EC0C  F021         	call	_lcdInst
  7255                           
  7256                           ;UI.c: 201: printf("%d", log_count_total);
  7257  00082A  0E91               	movlw	low (STR_27+16)
  7258  00082C  0100               	movlb	0	; () banked
  7259  00082E  6F8E               	movwf	printf@f& (0+255),b
  7260  000830  0EFB               	movlw	high (STR_27+16)
  7261  000832  0100               	movlb	0	; () banked
  7262  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7263  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7264  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7265  00083E  EC9C  F008         	call	_printf	;wreg free
  7266                           
  7267                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7268  000842  0E00               	movlw	0
  7269  000844  0100               	movlb	0	; () banked
  7270  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7271  000848                     l7330:
  7272                           
  7273                           ; BSR set to: 0
  7274  000848  0E63               	movlw	99
  7275  00084A  0100               	movlb	0	; () banked
  7276  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7277  00084E  D001               	goto	l7334
  7278  000850  D00C               	goto	l7338
  7279  000852                     l7334:
  7280                           
  7281                           ; BSR set to: 0
  7282  000852  0E68               	movlw	104
  7283  000854  0100               	movlb	0	; () banked
  7284  000856  6FC4               	movwf	??_UI& (0+255),b
  7285  000858  0EE4               	movlw	228
  7286  00085A                     u7197:
  7287  00085A  2EE8               	decfsz	wreg,f,c
  7288  00085C  D7FE               	bra	u7197
  7289  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7290  000860  D7FC               	bra	u7197
  7291  000862  F000               	nop	
  7292  000864  0100               	movlb	0	; () banked
  7293  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7294  000868  D7EF               	goto	l7330
  7295  00086A                     l7338:
  7296                           
  7297                           ; BSR set to: 0
  7298  00086A  0100               	movlb	0	; () banked
  7299  00086C  51F6               	movf	_logstate& (0+255),w,b
  7300  00086E  0100               	movlb	0	; () banked
  7301  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7302  000872  B4D8               	btfsc	status,2,c
  7303  000874  0012               	return	
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7307                           
  7308                           ; BSR set to: 0
  7309                           
  7310                           ; BSR set to: 0
  7311  000876  0E00               	movlw	0
  7312  000878  0100               	movlb	0	; () banked
  7313  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7314  00087C                     l7344:
  7315                           
  7316                           ; BSR set to: 0
  7317  00087C  0E63               	movlw	99
  7318  00087E  0100               	movlb	0	; () banked
  7319  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7320  000882  D001               	goto	l7348
  7321  000884  D00C               	goto	l7352
  7322  000886                     l7348:
  7323                           
  7324                           ; BSR set to: 0
  7325  000886  0E68               	movlw	104
  7326  000888  0100               	movlb	0	; () banked
  7327  00088A  6FC4               	movwf	??_UI& (0+255),b
  7328  00088C  0EE4               	movlw	228
  7329  00088E                     u7207:
  7330  00088E  2EE8               	decfsz	wreg,f,c
  7331  000890  D7FE               	bra	u7207
  7332  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7333  000894  D7FC               	bra	u7207
  7334  000896  F000               	nop	
  7335  000898  0100               	movlb	0	; () banked
  7336  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7337  00089C  D7EF               	goto	l7344
  7338  00089E                     l7352:
  7339                           
  7340                           ; BSR set to: 0
  7341  00089E  0100               	movlb	0	; () banked
  7342  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7343  0008A2  0100               	movlb	0	; () banked
  7344  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7345  0008A6  B4D8               	btfsc	status,2,c
  7346  0008A8  0012               	return	
  7347  0008AA                     l7356:
  7348  0008AA  0100               	movlb	0	; () banked
  7349  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7350  0008AE  0100               	movlb	0	; () banked
  7351  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7352  0008B2  B4D8               	btfsc	status,2,c
  7353  0008B4  0012               	return	
  7354  0008B6  D44A               	goto	l7052
  7355  0008B8                     __end_of_UI:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           intcon2	equ	0xFF1
  7365                           intcon3	equ	0xFF0
  7366                           postinc0	equ	0xFEE
  7367                           wreg	equ	0xFE8
  7368                           postdec1	equ	0xFE5
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _printRTC *****************
  7378 ;; Defined at:
  7379 ;;		line 63 in file "RTC.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;		None
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  i               2   66[BANK0 ] int 
  7384 ;;  INT_time       14   46[BANK0 ] int [7]
  7385 ;;  month           4   62[BANK0 ] unsigned char [4]
  7386 ;;  RTC_month       2   60[BANK0 ] int 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;Total ram usage:       25 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:   10
  7403 ;; This function calls:
  7404 ;;		_getRTC
  7405 ;;		_lcdInst
  7406 ;;		_printf
  7407 ;;		_strcpy
  7408 ;; This function is called by:
  7409 ;;		_UI
  7410 ;;		_change_state_to_menu_start
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text22
  7415  0018DE                     __ptext22:
  7416                           	opt stack 0
  7417  0018DE                     _printRTC:
  7418                           	opt stack 18
  7419                           
  7420                           ;RTC.c: 64: getRTC();
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;incstack = 0
  7424  0018DE  ECCE  F01A         	call	_getRTC	;wreg free
  7425                           
  7426                           ;RTC.c: 65: char month[] = "MMM";
  7427  0018E2  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7428  0018E6  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7429  0018EA  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7430  0018EE  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7431                           
  7432                           ;RTC.c: 66: int INT_time[7];
  7433                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7434  0018F2  0E00               	movlw	0
  7435  0018F4  0100               	movlb	0	; () banked
  7436  0018F6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7437  0018F8  0E00               	movlw	0
  7438  0018FA  6FC2               	movwf	printRTC@i& (0+255),b
  7439                           
  7440                           ; BSR set to: 0
  7441  0018FC  0100               	movlb	0	; () banked
  7442  0018FE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7443  001900  D008               	goto	l5628
  7444  001902  0100               	movlb	0	; () banked
  7445  001904  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7446  001906  E146               	bnz	l591
  7447  001908  0E07               	movlw	7
  7448  00190A  0100               	movlb	0	; () banked
  7449  00190C  5DC2               	subwf	printRTC@i& (0+255),w,b
  7450  00190E  B0D8               	btfsc	status,0,c
  7451  001910  D041               	goto	l591
  7452  001912                     l5628:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7456  001912  0E24               	movlw	low _time
  7457  001914  0100               	movlb	0	; () banked
  7458  001916  25C2               	addwf	printRTC@i& (0+255),w,b
  7459  001918  6ED9               	movwf	fsr2l,c
  7460  00191A  0E01               	movlw	high _time
  7461  00191C  0100               	movlb	0	; () banked
  7462  00191E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7463  001920  6EDA               	movwf	fsr2h,c
  7464  001922  50DF               	movf	indf2,w,c
  7465  001924  0100               	movlb	0	; () banked
  7466  001926  6FAB               	movwf	??_printRTC& (0+255),b
  7467  001928  0100               	movlb	0	; () banked
  7468  00192A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7469  00192C  0E0F               	movlw	15
  7470  00192E  17AB               	andwf	??_printRTC& (0+255),f,b
  7471  001930  0E0F               	movlw	15
  7472  001932  0100               	movlb	0	; () banked
  7473  001934  17AB               	andwf	??_printRTC& (0+255),f,b
  7474  001936  0100               	movlb	0	; () banked
  7475  001938  51AB               	movf	??_printRTC& (0+255),w,b
  7476  00193A  0D0A               	mullw	10
  7477  00193C  0E24               	movlw	low _time
  7478  00193E  0100               	movlb	0	; () banked
  7479  001940  25C2               	addwf	printRTC@i& (0+255),w,b
  7480  001942  6ED9               	movwf	fsr2l,c
  7481  001944  0E01               	movlw	high _time
  7482  001946  0100               	movlb	0	; () banked
  7483  001948  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7484  00194A  6EDA               	movwf	fsr2h,c
  7485  00194C  50DF               	movf	indf2,w,c
  7486  00194E  0B0F               	andlw	15
  7487  001950  0100               	movlb	0	; () banked
  7488  001952  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7489  001954  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7490  001956  50F3               	movf	prodl,w,c
  7491  001958  0100               	movlb	0	; () banked
  7492  00195A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7493  00195C  50F4               	movf	prodh,w,c
  7494  00195E  0100               	movlb	0	; () banked
  7495  001960  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7496  001962  90D8               	bcf	status,0,c
  7497  001964  0100               	movlb	0	; () banked
  7498  001966  35C2               	rlcf	printRTC@i& (0+255),w,b
  7499  001968  6ED9               	movwf	fsr2l,c
  7500  00196A  0100               	movlb	0	; () banked
  7501  00196C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7502  00196E  6EDA               	movwf	fsr2h,c
  7503  001970  0EAE               	movlw	low printRTC@INT_time
  7504  001972  26D9               	addwf	fsr2l,f,c
  7505  001974  0E00               	movlw	high printRTC@INT_time
  7506  001976  22DA               	addwfc	fsr2h,f,c
  7507  001978  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7508  00197C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7509                           
  7510                           ; BSR set to: 0
  7511  001980  0100               	movlb	0	; () banked
  7512  001982  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7513  001984  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7514                           
  7515                           ; BSR set to: 0
  7516  001986  0100               	movlb	0	; () banked
  7517  001988  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7518  00198A  D7C3               	goto	l5628
  7519  00198C  0100               	movlb	0	; () banked
  7520  00198E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7521  001990  E101               	bnz	u4390
  7522  001992  D7BA               	goto	L6
  7523  001994                     u4390:
  7524  001994                     l591:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;RTC.c: 69: }
  7528                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7529  001994  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7530  001998  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7531                           
  7532                           ;RTC.c: 71: switch(RTC_month){
  7533  00199C  D0B4               	goto	l5660
  7534  00199E                     l5634:
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;RTC.c: 73: strcpy(month, "JAN");
  7538  00199E  0EBE               	movlw	low printRTC@month
  7539  0019A0  0100               	movlb	0	; () banked
  7540  0019A2  6F80               	movwf	strcpy@to& (0+255),b
  7541  0019A4  0E00               	movlw	high printRTC@month
  7542  0019A6  0100               	movlb	0	; () banked
  7543  0019A8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7544  0019AA  0EDB               	movlw	low STR_8
  7545  0019AC  0100               	movlb	0	; () banked
  7546  0019AE  6F82               	movwf	strcpy@from& (0+255),b
  7547  0019B0  0EFF               	movlw	high STR_8
  7548  0019B2  0100               	movlb	0	; () banked
  7549  0019B4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7550  0019B6  EC96  F01E         	call	_strcpy	;wreg free
  7551                           
  7552                           ;RTC.c: 74: break;
  7553  0019BA  D0D4               	goto	l5662
  7554  0019BC                     l5636:
  7555                           
  7556                           ;RTC.c: 76: strcpy(month, "FEB");
  7557  0019BC  0EBE               	movlw	low printRTC@month
  7558  0019BE  0100               	movlb	0	; () banked
  7559  0019C0  6F80               	movwf	strcpy@to& (0+255),b
  7560  0019C2  0E00               	movlw	high printRTC@month
  7561  0019C4  0100               	movlb	0	; () banked
  7562  0019C6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7563  0019C8  0ECB               	movlw	low STR_9
  7564  0019CA  0100               	movlb	0	; () banked
  7565  0019CC  6F82               	movwf	strcpy@from& (0+255),b
  7566  0019CE  0EFF               	movlw	high STR_9
  7567  0019D0  0100               	movlb	0	; () banked
  7568  0019D2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7569  0019D4  EC96  F01E         	call	_strcpy	;wreg free
  7570                           
  7571                           ;RTC.c: 77: break;
  7572  0019D8  D0C5               	goto	l5662
  7573  0019DA                     l5638:
  7574                           
  7575                           ;RTC.c: 79: strcpy(month, "MAR");
  7576  0019DA  0EBE               	movlw	low printRTC@month
  7577  0019DC  0100               	movlb	0	; () banked
  7578  0019DE  6F80               	movwf	strcpy@to& (0+255),b
  7579  0019E0  0E00               	movlw	high printRTC@month
  7580  0019E2  0100               	movlb	0	; () banked
  7581  0019E4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7582  0019E6  0EE7               	movlw	low STR_10
  7583  0019E8  0100               	movlb	0	; () banked
  7584  0019EA  6F82               	movwf	strcpy@from& (0+255),b
  7585  0019EC  0EFF               	movlw	high STR_10
  7586  0019EE  0100               	movlb	0	; () banked
  7587  0019F0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7588  0019F2  EC96  F01E         	call	_strcpy	;wreg free
  7589                           
  7590                           ;RTC.c: 80: break;
  7591  0019F6  D0B6               	goto	l5662
  7592  0019F8                     l5640:
  7593                           
  7594                           ;RTC.c: 82: strcpy(month, "APR");
  7595  0019F8  0EBE               	movlw	low printRTC@month
  7596  0019FA  0100               	movlb	0	; () banked
  7597  0019FC  6F80               	movwf	strcpy@to& (0+255),b
  7598  0019FE  0E00               	movlw	high printRTC@month
  7599  001A00  0100               	movlb	0	; () banked
  7600  001A02  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7601  001A04  0EEB               	movlw	low STR_11
  7602  001A06  0100               	movlb	0	; () banked
  7603  001A08  6F82               	movwf	strcpy@from& (0+255),b
  7604  001A0A  0EFF               	movlw	high STR_11
  7605  001A0C  0100               	movlb	0	; () banked
  7606  001A0E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7607  001A10  EC96  F01E         	call	_strcpy	;wreg free
  7608                           
  7609                           ;RTC.c: 83: break;
  7610  001A14  D0A7               	goto	l5662
  7611  001A16                     l5642:
  7612                           
  7613                           ;RTC.c: 85: strcpy(month, "MAY");
  7614  001A16  0EBE               	movlw	low printRTC@month
  7615  001A18  0100               	movlb	0	; () banked
  7616  001A1A  6F80               	movwf	strcpy@to& (0+255),b
  7617  001A1C  0E00               	movlw	high printRTC@month
  7618  001A1E  0100               	movlb	0	; () banked
  7619  001A20  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7620  001A22  0EFB               	movlw	low STR_12
  7621  001A24  0100               	movlb	0	; () banked
  7622  001A26  6F82               	movwf	strcpy@from& (0+255),b
  7623  001A28  0EFF               	movlw	high STR_12
  7624  001A2A  0100               	movlb	0	; () banked
  7625  001A2C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7626  001A2E  EC96  F01E         	call	_strcpy	;wreg free
  7627                           
  7628                           ;RTC.c: 86: break;
  7629  001A32  D098               	goto	l5662
  7630  001A34                     l5644:
  7631                           
  7632                           ;RTC.c: 88: strcpy(month, "JUN");
  7633  001A34  0EBE               	movlw	low printRTC@month
  7634  001A36  0100               	movlb	0	; () banked
  7635  001A38  6F80               	movwf	strcpy@to& (0+255),b
  7636  001A3A  0E00               	movlw	high printRTC@month
  7637  001A3C  0100               	movlb	0	; () banked
  7638  001A3E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7639  001A40  0EDF               	movlw	low STR_13
  7640  001A42  0100               	movlb	0	; () banked
  7641  001A44  6F82               	movwf	strcpy@from& (0+255),b
  7642  001A46  0EFF               	movlw	high STR_13
  7643  001A48  0100               	movlb	0	; () banked
  7644  001A4A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7645  001A4C  EC96  F01E         	call	_strcpy	;wreg free
  7646                           
  7647                           ;RTC.c: 89: break;
  7648  001A50  D089               	goto	l5662
  7649  001A52                     l5646:
  7650                           
  7651                           ;RTC.c: 91: strcpy(month, "JUL");
  7652  001A52  0EBE               	movlw	low printRTC@month
  7653  001A54  0100               	movlb	0	; () banked
  7654  001A56  6F80               	movwf	strcpy@to& (0+255),b
  7655  001A58  0E00               	movlw	high printRTC@month
  7656  001A5A  0100               	movlb	0	; () banked
  7657  001A5C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7658  001A5E  0ED7               	movlw	low STR_14
  7659  001A60  0100               	movlb	0	; () banked
  7660  001A62  6F82               	movwf	strcpy@from& (0+255),b
  7661  001A64  0EFF               	movlw	high STR_14
  7662  001A66  0100               	movlb	0	; () banked
  7663  001A68  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7664  001A6A  EC96  F01E         	call	_strcpy	;wreg free
  7665                           
  7666                           ;RTC.c: 92: break;
  7667  001A6E  D07A               	goto	l5662
  7668  001A70                     l5648:
  7669                           
  7670                           ;RTC.c: 94: strcpy(month, "AUG");
  7671  001A70  0EBE               	movlw	low printRTC@month
  7672  001A72  0100               	movlb	0	; () banked
  7673  001A74  6F80               	movwf	strcpy@to& (0+255),b
  7674  001A76  0E00               	movlw	high printRTC@month
  7675  001A78  0100               	movlb	0	; () banked
  7676  001A7A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7677  001A7C  0ED3               	movlw	low STR_15
  7678  001A7E  0100               	movlb	0	; () banked
  7679  001A80  6F82               	movwf	strcpy@from& (0+255),b
  7680  001A82  0EFF               	movlw	high STR_15
  7681  001A84  0100               	movlb	0	; () banked
  7682  001A86  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7683  001A88  EC96  F01E         	call	_strcpy	;wreg free
  7684                           
  7685                           ;RTC.c: 95: break;
  7686  001A8C  D06B               	goto	l5662
  7687  001A8E                     l5650:
  7688                           
  7689                           ;RTC.c: 97: strcpy(month, "SEP");
  7690  001A8E  0EBE               	movlw	low printRTC@month
  7691  001A90  0100               	movlb	0	; () banked
  7692  001A92  6F80               	movwf	strcpy@to& (0+255),b
  7693  001A94  0E00               	movlw	high printRTC@month
  7694  001A96  0100               	movlb	0	; () banked
  7695  001A98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7696  001A9A  0EE3               	movlw	low STR_16
  7697  001A9C  0100               	movlb	0	; () banked
  7698  001A9E  6F82               	movwf	strcpy@from& (0+255),b
  7699  001AA0  0EFF               	movlw	high STR_16
  7700  001AA2  0100               	movlb	0	; () banked
  7701  001AA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7702  001AA6  EC96  F01E         	call	_strcpy	;wreg free
  7703                           
  7704                           ;RTC.c: 98: break;
  7705  001AAA  D05C               	goto	l5662
  7706  001AAC                     l5652:
  7707                           
  7708                           ;RTC.c: 100: strcpy(month, "OCT");
  7709  001AAC  0EBE               	movlw	low printRTC@month
  7710  001AAE  0100               	movlb	0	; () banked
  7711  001AB0  6F80               	movwf	strcpy@to& (0+255),b
  7712  001AB2  0E00               	movlw	high printRTC@month
  7713  001AB4  0100               	movlb	0	; () banked
  7714  001AB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7715  001AB8  0EF3               	movlw	low STR_17
  7716  001ABA  0100               	movlb	0	; () banked
  7717  001ABC  6F82               	movwf	strcpy@from& (0+255),b
  7718  001ABE  0EFF               	movlw	high STR_17
  7719  001AC0  0100               	movlb	0	; () banked
  7720  001AC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7721  001AC4  EC96  F01E         	call	_strcpy	;wreg free
  7722                           
  7723                           ;RTC.c: 101: break;
  7724  001AC8  D04D               	goto	l5662
  7725  001ACA                     l5654:
  7726                           
  7727                           ;RTC.c: 103: strcpy(month, "NOV");
  7728  001ACA  0EBE               	movlw	low printRTC@month
  7729  001ACC  0100               	movlb	0	; () banked
  7730  001ACE  6F80               	movwf	strcpy@to& (0+255),b
  7731  001AD0  0E00               	movlw	high printRTC@month
  7732  001AD2  0100               	movlb	0	; () banked
  7733  001AD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7734  001AD6  0EF7               	movlw	low STR_18
  7735  001AD8  0100               	movlb	0	; () banked
  7736  001ADA  6F82               	movwf	strcpy@from& (0+255),b
  7737  001ADC  0EFF               	movlw	high STR_18
  7738  001ADE  0100               	movlb	0	; () banked
  7739  001AE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7740  001AE2  EC96  F01E         	call	_strcpy	;wreg free
  7741                           
  7742                           ;RTC.c: 104: break;
  7743  001AE6  D03E               	goto	l5662
  7744  001AE8                     l5656:
  7745                           
  7746                           ;RTC.c: 106: strcpy(month, "DEC");
  7747  001AE8  0EBE               	movlw	low printRTC@month
  7748  001AEA  0100               	movlb	0	; () banked
  7749  001AEC  6F80               	movwf	strcpy@to& (0+255),b
  7750  001AEE  0E00               	movlw	high printRTC@month
  7751  001AF0  0100               	movlb	0	; () banked
  7752  001AF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7753  001AF4  0ECF               	movlw	low STR_19
  7754  001AF6  0100               	movlb	0	; () banked
  7755  001AF8  6F82               	movwf	strcpy@from& (0+255),b
  7756  001AFA  0EFF               	movlw	high STR_19
  7757  001AFC  0100               	movlb	0	; () banked
  7758  001AFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7759  001B00  EC96  F01E         	call	_strcpy	;wreg free
  7760                           
  7761                           ;RTC.c: 108: }
  7762                           
  7763                           ;RTC.c: 107: break;
  7764  001B04  D02F               	goto	l5662
  7765  001B06                     l5660:
  7766  001B06  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7767  001B0A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7768                           
  7769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7770                           ; Switch size 1, requested type "space"
  7771                           ; Number of cases is 1, Range of values is 0 to 0
  7772                           ; switch strategies available:
  7773                           ; Name         Instructions Cycles
  7774                           ; simple_byte            4     3 (average)
  7775                           ;	Chosen strategy is simple_byte
  7776  001B0E  0100               	movlb	0	; () banked
  7777  001B10  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7778  001B12  0A00               	xorlw	0	; case 0
  7779  001B14  A4D8               	btfss	status,2,c
  7780  001B16  D026               	goto	l5662
  7781                           
  7782                           ; BSR set to: 0
  7783                           ; Switch size 1, requested type "space"
  7784                           ; Number of cases is 12, Range of values is 1 to 12
  7785                           ; switch strategies available:
  7786                           ; Name         Instructions Cycles
  7787                           ; simple_byte           37    19 (average)
  7788                           ;	Chosen strategy is simple_byte
  7789  001B18  0100               	movlb	0	; () banked
  7790  001B1A  51AB               	movf	??_printRTC& (0+255),w,b
  7791  001B1C  0A01               	xorlw	1	; case 1
  7792  001B1E  B4D8               	btfsc	status,2,c
  7793  001B20  D73E               	goto	l5634
  7794  001B22  0A03               	xorlw	3	; case 2
  7795  001B24  B4D8               	btfsc	status,2,c
  7796  001B26  D74A               	goto	l5636
  7797  001B28  0A01               	xorlw	1	; case 3
  7798  001B2A  B4D8               	btfsc	status,2,c
  7799  001B2C  D756               	goto	l5638
  7800  001B2E  0A07               	xorlw	7	; case 4
  7801  001B30  B4D8               	btfsc	status,2,c
  7802  001B32  D762               	goto	l5640
  7803  001B34  0A01               	xorlw	1	; case 5
  7804  001B36  B4D8               	btfsc	status,2,c
  7805  001B38  D76E               	goto	l5642
  7806  001B3A  0A03               	xorlw	3	; case 6
  7807  001B3C  B4D8               	btfsc	status,2,c
  7808  001B3E  D77A               	goto	l5644
  7809  001B40  0A01               	xorlw	1	; case 7
  7810  001B42  B4D8               	btfsc	status,2,c
  7811  001B44  D786               	goto	l5646
  7812  001B46  0A0F               	xorlw	15	; case 8
  7813  001B48  B4D8               	btfsc	status,2,c
  7814  001B4A  D792               	goto	l5648
  7815  001B4C  0A01               	xorlw	1	; case 9
  7816  001B4E  B4D8               	btfsc	status,2,c
  7817  001B50  D79E               	goto	l5650
  7818  001B52  0A03               	xorlw	3	; case 10
  7819  001B54  B4D8               	btfsc	status,2,c
  7820  001B56  D7AA               	goto	l5652
  7821  001B58  0A01               	xorlw	1	; case 11
  7822  001B5A  B4D8               	btfsc	status,2,c
  7823  001B5C  D7B6               	goto	l5654
  7824  001B5E  0A07               	xorlw	7	; case 12
  7825  001B60  B4D8               	btfsc	status,2,c
  7826  001B62  D7C2               	goto	l5656
  7827  001B64                     l5662:
  7828                           
  7829                           ;RTC.c: 109: lcdInst(0b10000000);;
  7830  001B64  0E80               	movlw	128
  7831  001B66  EC0C  F021         	call	_lcdInst
  7832                           
  7833                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7834  001B6A  0E54               	movlw	low STR_21
  7835  001B6C  0100               	movlb	0	; () banked
  7836  001B6E  6F8E               	movwf	printf@f& (0+255),b
  7837  001B70  0EFB               	movlw	high STR_21
  7838  001B72  0100               	movlb	0	; () banked
  7839  001B74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7840  001B76  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7841  001B7A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7842  001B7E  0EBE               	movlw	low printRTC@month
  7843  001B80  0100               	movlb	0	; () banked
  7844  001B82  6F92               	movwf	(?_printf+4)& (0+255),b
  7845  001B84  0E00               	movlw	high printRTC@month
  7846  001B86  0100               	movlb	0	; () banked
  7847  001B88  6F93               	movwf	(?_printf+5)& (0+255),b
  7848  001B8A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7849  001B8E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7850  001B92  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7851  001B96  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7852  001B9A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7853  001B9E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7854  001BA2  EC9C  F008         	call	_printf	;wreg free
  7855  001BA6  0012               	return		;funcret
  7856  001BA8                     __end_of_printRTC:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           intcon	equ	0xFF2
  7865                           intcon2	equ	0xFF1
  7866                           intcon3	equ	0xFF0
  7867                           postinc0	equ	0xFEE
  7868                           wreg	equ	0xFE8
  7869                           postdec1	equ	0xFE5
  7870                           fsr1l	equ	0xFE1
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           fsr2h	equ	0xFDA
  7875                           fsr2l	equ	0xFD9
  7876                           status	equ	0xFD8
  7877                           
  7878 ;; *************** function _strcpy *****************
  7879 ;; Defined at:
  7880 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7883 ;;		 -> printRTC@month(4), UI@month(4), 
  7884 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7885 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7886 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7887 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7888 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7889 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7890 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7891 ;;		 -> STR_8(4), 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7894 ;;		 -> printRTC@month(4), UI@month(4), 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  2    0[BANK0 ] PTR unsigned char 
  7897 ;; Registers used:
  7898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;Total ram usage:        6 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:    7
  7911 ;; This function calls:
  7912 ;;		Nothing
  7913 ;; This function is called by:
  7914 ;;		_UI
  7915 ;;		_printRTC
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text23
  7920  003D2C                     __ptext23:
  7921                           	opt stack 0
  7922  003D2C                     _strcpy:
  7923                           	opt stack 20
  7924                           
  7925                           ;incstack = 0
  7926  003D2C  C080  F084         	movff	strcpy@to,strcpy@cp
  7927  003D30  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7928  003D34  D006               	goto	l5360
  7929  003D36                     l5358:
  7930  003D36  0100               	movlb	0	; () banked
  7931  003D38  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7932  003D3A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7933  003D3C  0100               	movlb	0	; () banked
  7934  003D3E  4B82               	infsnz	strcpy@from& (0+255),f,b
  7935  003D40  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7936  003D42                     l5360:
  7937  003D42  C082  FFF6         	movff	strcpy@from,tblptrl
  7938  003D46  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7939  003D4A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7940  003D4A  6AF8               	clrf	tblptru,c
  7941  003D4C                     	endif
  7942  003D4C                     	if	0	;tblptru may be non-zero
  7943  003D4C                     	endif
  7944  003D4C  C084  FFD9         	movff	strcpy@cp,fsr2l
  7945  003D50  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7946  003D54  0008               	tblrd		*
  7947  003D56  CFF5 FFDF          	movff	tablat,indf2
  7948  003D5A  50DF               	movf	indf2,w,c
  7949  003D5C  B4D8               	btfsc	status,2,c
  7950  003D5E  0012               	return	
  7951  003D60  D7EA               	goto	l5358
  7952  003D62                     __end_of_strcpy:
  7953                           	opt stack 0
  7954                           tblptru	equ	0xFF8
  7955                           tblptrh	equ	0xFF7
  7956                           tblptrl	equ	0xFF6
  7957                           tablat	equ	0xFF5
  7958                           prodh	equ	0xFF4
  7959                           prodl	equ	0xFF3
  7960                           intcon	equ	0xFF2
  7961                           intcon2	equ	0xFF1
  7962                           intcon3	equ	0xFF0
  7963                           postinc0	equ	0xFEE
  7964                           wreg	equ	0xFE8
  7965                           postdec1	equ	0xFE5
  7966                           fsr1l	equ	0xFE1
  7967                           indf2	equ	0xFDF
  7968                           postinc2	equ	0xFDE
  7969                           postdec2	equ	0xFDD
  7970                           fsr2h	equ	0xFDA
  7971                           fsr2l	equ	0xFD9
  7972                           status	equ	0xFD8
  7973                           
  7974 ;; *************** function _getRTC *****************
  7975 ;; Defined at:
  7976 ;;		line 44 in file "RTC.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;		None
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  i               2    3[BANK0 ] int 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      void 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;Total ram usage:        2 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    9
  7997 ;; This function calls:
  7998 ;;		_I2C_Master_Read
  7999 ;;		_I2C_Master_Start
  8000 ;;		_I2C_Master_Stop
  8001 ;;		_I2C_Master_Write
  8002 ;; This function is called by:
  8003 ;;		_printRTC
  8004 ;;		_initSortTimer
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text24
  8009  00359C                     __ptext24:
  8010                           	opt stack 0
  8011  00359C                     _getRTC:
  8012                           	opt stack 18
  8013                           
  8014                           ;RTC.c: 48: I2C_Master_Start();
  8015                           
  8016                           ;incstack = 0
  8017  00359C  EC32  F021         	call	_I2C_Master_Start	;wreg free
  8018                           
  8019                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8020  0035A0  0E00               	movlw	0
  8021  0035A2  0100               	movlb	0	; () banked
  8022  0035A4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8023  0035A6  0ED0               	movlw	208
  8024  0035A8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8025  0035AA  EC20  F021         	call	_I2C_Master_Write	;wreg free
  8026                           
  8027                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8028  0035AE  0E00               	movlw	0
  8029  0035B0  0100               	movlb	0	; () banked
  8030  0035B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8031  0035B4  0E00               	movlw	0
  8032  0035B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8033  0035B8  EC20  F021         	call	_I2C_Master_Write	;wreg free
  8034                           
  8035                           ;RTC.c: 51: I2C_Master_Stop();
  8036  0035BC  EC2E  F021         	call	_I2C_Master_Stop	;wreg free
  8037                           
  8038                           ;RTC.c: 54: I2C_Master_Start();
  8039  0035C0  EC32  F021         	call	_I2C_Master_Start	;wreg free
  8040                           
  8041                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8042  0035C4  0E00               	movlw	0
  8043  0035C6  0100               	movlb	0	; () banked
  8044  0035C8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8045  0035CA  0ED1               	movlw	209
  8046  0035CC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8047  0035CE  EC20  F021         	call	_I2C_Master_Write	;wreg free
  8048                           
  8049                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8050  0035D2  0E00               	movlw	0
  8051  0035D4  0100               	movlb	0	; () banked
  8052  0035D6  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8053  0035D8  0E00               	movlw	0
  8054  0035DA  6F83               	movwf	getRTC@i& (0+255),b
  8055  0035DC                     l5366:
  8056                           
  8057                           ; BSR set to: 0
  8058  0035DC  0100               	movlb	0	; () banked
  8059  0035DE  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8060  0035E0  D008               	goto	l5370
  8061  0035E2  0100               	movlb	0	; () banked
  8062  0035E4  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8063  0035E6  E115               	bnz	l5376
  8064  0035E8  0E06               	movlw	6
  8065  0035EA  0100               	movlb	0	; () banked
  8066  0035EC  5D83               	subwf	getRTC@i& (0+255),w,b
  8067  0035EE  B0D8               	btfsc	status,0,c
  8068  0035F0  D010               	goto	l5376
  8069  0035F2                     l5370:
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8073  0035F2  0E24               	movlw	low _time
  8074  0035F4  0100               	movlb	0	; () banked
  8075  0035F6  2583               	addwf	getRTC@i& (0+255),w,b
  8076  0035F8  6ED9               	movwf	fsr2l,c
  8077  0035FA  0E01               	movlw	high _time
  8078  0035FC  0100               	movlb	0	; () banked
  8079  0035FE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8080  003600  6EDA               	movwf	fsr2h,c
  8081  003602  0E01               	movlw	1
  8082  003604  ECBD  F01F         	call	_I2C_Master_Read
  8083  003608  6EDF               	movwf	indf2,c
  8084  00360A  0100               	movlb	0	; () banked
  8085  00360C  4B83               	infsnz	getRTC@i& (0+255),f,b
  8086  00360E  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8087  003610  D7E5               	goto	l5366
  8088  003612                     l5376:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;RTC.c: 58: }
  8092                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8093  003612  0E00               	movlw	0
  8094  003614  ECBD  F01F         	call	_I2C_Master_Read
  8095  003618  0101               	movlb	1	; () banked
  8096  00361A  6F2A               	movwf	(_time+6)& (0+255),b
  8097                           
  8098                           ;RTC.c: 60: I2C_Master_Stop();
  8099  00361C  EC2E  F021         	call	_I2C_Master_Stop	;wreg free
  8100  003620  0012               	return		;funcret
  8101  003622                     __end_of_getRTC:
  8102                           	opt stack 0
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           intcon	equ	0xFF2
  8110                           intcon2	equ	0xFF1
  8111                           intcon3	equ	0xFF0
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _I2C_Master_Write *****************
  8124 ;; Defined at:
  8125 ;;		line 49 in file "I2C.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  d               2    1[BANK0 ] unsigned int 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;Total ram usage:        2 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    8
  8146 ;; This function calls:
  8147 ;;		_I2C_Master_Wait
  8148 ;; This function is called by:
  8149 ;;		_loadRTC
  8150 ;;		_getRTC
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text25
  8155  004240                     __ptext25:
  8156                           	opt stack 0
  8157  004240                     _I2C_Master_Write:
  8158                           	opt stack 18
  8159                           
  8160                           ;I2C.c: 51: I2C_Master_Wait();
  8161                           
  8162                           ;incstack = 0
  8163  004240  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8164                           
  8165                           ;I2C.c: 52: SSPBUF = d;
  8166  004244  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8167  004248  0012               	return		;funcret
  8168  00424A                     __end_of_I2C_Master_Write:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           intcon2	equ	0xFF1
  8178                           intcon3	equ	0xFF0
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           postdec1	equ	0xFE5
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _I2C_Master_Stop *****************
  8191 ;; Defined at:
  8192 ;;		line 43 in file "I2C.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    8
  8213 ;; This function calls:
  8214 ;;		_I2C_Master_Wait
  8215 ;; This function is called by:
  8216 ;;		_loadRTC
  8217 ;;		_getRTC
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text26
  8222  00425C                     __ptext26:
  8223                           	opt stack 0
  8224  00425C                     _I2C_Master_Stop:
  8225                           	opt stack 18
  8226                           
  8227                           ;I2C.c: 45: I2C_Master_Wait();
  8228                           
  8229                           ;incstack = 0
  8230  00425C  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8231                           
  8232                           ;I2C.c: 46: PEN = 1;
  8233  004260  84C5               	bsf	4037,2,c	;volatile
  8234  004262  0012               	return		;funcret
  8235  004264                     __end_of_I2C_Master_Stop:
  8236                           	opt stack 0
  8237                           tblptru	equ	0xFF8
  8238                           tblptrh	equ	0xFF7
  8239                           tblptrl	equ	0xFF6
  8240                           tablat	equ	0xFF5
  8241                           prodh	equ	0xFF4
  8242                           prodl	equ	0xFF3
  8243                           intcon	equ	0xFF2
  8244                           intcon2	equ	0xFF1
  8245                           intcon3	equ	0xFF0
  8246                           postinc0	equ	0xFEE
  8247                           wreg	equ	0xFE8
  8248                           postdec1	equ	0xFE5
  8249                           fsr1l	equ	0xFE1
  8250                           indf2	equ	0xFDF
  8251                           postinc2	equ	0xFDE
  8252                           postdec2	equ	0xFDD
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function _I2C_Master_Start *****************
  8258 ;; Defined at:
  8259 ;;		line 31 in file "I2C.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2, status,0, cstack
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    8
  8280 ;; This function calls:
  8281 ;;		_I2C_Master_Wait
  8282 ;; This function is called by:
  8283 ;;		_loadRTC
  8284 ;;		_getRTC
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           	psect	text27
  8289  004264                     __ptext27:
  8290                           	opt stack 0
  8291  004264                     _I2C_Master_Start:
  8292                           	opt stack 18
  8293                           
  8294                           ;I2C.c: 33: I2C_Master_Wait();
  8295                           
  8296                           ;incstack = 0
  8297  004264  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8298                           
  8299                           ;I2C.c: 34: SEN = 1;
  8300  004268  80C5               	bsf	4037,0,c	;volatile
  8301  00426A  0012               	return		;funcret
  8302  00426C                     __end_of_I2C_Master_Start:
  8303                           	opt stack 0
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon2	equ	0xFF1
  8312                           intcon3	equ	0xFF0
  8313                           postinc0	equ	0xFEE
  8314                           wreg	equ	0xFE8
  8315                           postdec1	equ	0xFE5
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function _I2C_Master_Read *****************
  8325 ;; Defined at:
  8326 ;;		line 55 in file "I2C.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  a               1    wreg     unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  a               1    1[BANK0 ] unsigned char 
  8331 ;;  temp            1    2[BANK0 ] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      unsigned char 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;Total ram usage:        2 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    8
  8348 ;; This function calls:
  8349 ;;		_I2C_Master_Wait
  8350 ;; This function is called by:
  8351 ;;		_getRTC
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text28
  8356  003F7A                     __ptext28:
  8357                           	opt stack 0
  8358  003F7A                     _I2C_Master_Read:
  8359                           	opt stack 18
  8360                           
  8361                           ;incstack = 0
  8362                           ;I2C_Master_Read@a stored from wreg
  8363  003F7A  0100               	movlb	0	; () banked
  8364  003F7C  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8365                           
  8366                           ;I2C.c: 57: unsigned char temp;
  8367                           ;I2C.c: 58: I2C_Master_Wait();
  8368  003F7E  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8369                           
  8370                           ;I2C.c: 59: RCEN = 1;
  8371  003F82  86C5               	bsf	4037,3,c	;volatile
  8372                           
  8373                           ;I2C.c: 60: I2C_Master_Wait();
  8374  003F84  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8375                           
  8376                           ;I2C.c: 61: temp = SSPBUF;
  8377  003F88  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8378                           
  8379                           ;I2C.c: 62: I2C_Master_Wait();
  8380  003F8C  ECF1  F020         	call	_I2C_Master_Wait	;wreg free
  8381                           
  8382                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8383  003F90  0100               	movlb	0	; () banked
  8384  003F92  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8385  003F94  0100               	movlb	0	; () banked
  8386  003F96  A4D8               	btfss	status,2,c
  8387  003F98  D002               	goto	u3470
  8388  003F9A  8AC5               	bsf	4037,5,c	;volatile
  8389  003F9C  D001               	goto	l5056
  8390  003F9E                     u3470:
  8391  003F9E  9AC5               	bcf	4037,5,c	;volatile
  8392  003FA0                     l5056:
  8393                           
  8394                           ;I2C.c: 64: ACKEN = 1;
  8395  003FA0  88C5               	bsf	4037,4,c	;volatile
  8396                           
  8397                           ;I2C.c: 65: return temp;
  8398  003FA2  0100               	movlb	0	; () banked
  8399  003FA4  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8400  003FA6  0012               	return	
  8401  003FA8                     __end_of_I2C_Master_Read:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           intcon2	equ	0xFF1
  8411                           intcon3	equ	0xFF0
  8412                           postinc0	equ	0xFEE
  8413                           wreg	equ	0xFE8
  8414                           postdec1	equ	0xFE5
  8415                           fsr1l	equ	0xFE1
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           postdec2	equ	0xFDD
  8419                           fsr2h	equ	0xFDA
  8420                           fsr2l	equ	0xFD9
  8421                           status	equ	0xFD8
  8422                           
  8423 ;; *************** function _I2C_Master_Wait *****************
  8424 ;; Defined at:
  8425 ;;		line 26 in file "I2C.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;		None
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;		None
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  1    wreg      void 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2, status,0
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;Total ram usage:        1 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    7
  8446 ;; This function calls:
  8447 ;;		Nothing
  8448 ;; This function is called by:
  8449 ;;		_I2C_Master_Start
  8450 ;;		_I2C_Master_Stop
  8451 ;;		_I2C_Master_Write
  8452 ;;		_I2C_Master_Read
  8453 ;;		_I2C_Master_RepeatedStart
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text29
  8458  0041E2                     __ptext29:
  8459                           	opt stack 0
  8460  0041E2                     _I2C_Master_Wait:
  8461                           	opt stack 18
  8462  0041E2                     l66:
  8463  0041E2  B4C7               	btfsc	4039,2,c	;volatile
  8464  0041E4  D7FE               	goto	l66
  8465  0041E6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8466  0041EA  0E1F               	movlw	31
  8467  0041EC  0100               	movlb	0	; () banked
  8468  0041EE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8469  0041F0  B4D8               	btfsc	status,2,c
  8470  0041F2  0012               	return	
  8471  0041F4  D7F6               	goto	l66
  8472  0041F6                     __end_of_I2C_Master_Wait:
  8473                           	opt stack 0
  8474                           tblptru	equ	0xFF8
  8475                           tblptrh	equ	0xFF7
  8476                           tblptrl	equ	0xFF6
  8477                           tablat	equ	0xFF5
  8478                           prodh	equ	0xFF4
  8479                           prodl	equ	0xFF3
  8480                           intcon	equ	0xFF2
  8481                           intcon2	equ	0xFF1
  8482                           intcon3	equ	0xFF0
  8483                           postinc0	equ	0xFEE
  8484                           wreg	equ	0xFE8
  8485                           postdec1	equ	0xFE5
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function _change_state_to_menu_22 *****************
  8495 ;; Defined at:
  8496 ;;		line 496 in file "UI.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:   10
  8517 ;; This function calls:
  8518 ;;		_lcdInst
  8519 ;;		_printf
  8520 ;; This function is called by:
  8521 ;;		_UI
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text30
  8526  003CBC                     __ptext30:
  8527                           	opt stack 0
  8528  003CBC                     _change_state_to_menu_22:
  8529                           	opt stack 19
  8530                           
  8531                           ;UI.c: 497: cur_state = 22;
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;incstack = 0
  8535  003CBC  0E00               	movlw	0
  8536  003CBE  0100               	movlb	0	; () banked
  8537  003CC0  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8538  003CC2  0E16               	movlw	22
  8539  003CC4  6FDE               	movwf	_cur_state& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;UI.c: 499: lcdInst(0b10000000);;
  8543  003CC6  0E80               	movlw	128
  8544  003CC8  EC0C  F021         	call	_lcdInst
  8545                           
  8546                           ;UI.c: 500: printf("2. SORT        <");
  8547  003CCC  0EED               	movlw	low STR_34
  8548  003CCE  0100               	movlb	0	; () banked
  8549  003CD0  6F8E               	movwf	printf@f& (0+255),b
  8550  003CD2  0EFD               	movlw	high STR_34
  8551  003CD4  0100               	movlb	0	; () banked
  8552  003CD6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8553  003CD8  EC9C  F008         	call	_printf	;wreg free
  8554                           
  8555                           ;UI.c: 501: lcdInst(0b11000000);;
  8556  003CDC  0EC0               	movlw	192
  8557  003CDE  EC0C  F021         	call	_lcdInst
  8558                           
  8559                           ;UI.c: 502: printf("3. LOGS         ");
  8560  003CE2  0E32               	movlw	low STR_36
  8561  003CE4  0100               	movlb	0	; () banked
  8562  003CE6  6F8E               	movwf	printf@f& (0+255),b
  8563  003CE8  0EFD               	movlw	high STR_36
  8564  003CEA  0100               	movlb	0	; () banked
  8565  003CEC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8566  003CEE  EC9C  F008         	call	_printf	;wreg free
  8567  003CF2  0012               	return		;funcret
  8568  003CF4                     __end_of_change_state_to_menu_22:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           intcon2	equ	0xFF1
  8578                           intcon3	equ	0xFF0
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function _change_state_to_menu_12 *****************
  8591 ;; Defined at:
  8592 ;;		line 488 in file "UI.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;Total ram usage:        0 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:   10
  8613 ;; This function calls:
  8614 ;;		_lcdInst
  8615 ;;		_printf
  8616 ;; This function is called by:
  8617 ;;		_UI
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text31
  8622  003CF4                     __ptext31:
  8623                           	opt stack 0
  8624  003CF4                     _change_state_to_menu_12:
  8625                           	opt stack 19
  8626                           
  8627                           ;UI.c: 489: cur_state = 12;
  8628                           
  8629                           ;incstack = 0
  8630  003CF4  0E00               	movlw	0
  8631  003CF6  0100               	movlb	0	; () banked
  8632  003CF8  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8633  003CFA  0E0C               	movlw	12
  8634  003CFC  6FDE               	movwf	_cur_state& (0+255),b
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;UI.c: 491: lcdInst(0b10000000);;
  8638  003CFE  0E80               	movlw	128
  8639  003D00  EC0C  F021         	call	_lcdInst
  8640                           
  8641                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8642  003D04  0E54               	movlw	low STR_33
  8643  003D06  0100               	movlb	0	; () banked
  8644  003D08  6F8E               	movwf	printf@f& (0+255),b
  8645  003D0A  0EFD               	movlw	high STR_33
  8646  003D0C  0100               	movlb	0	; () banked
  8647  003D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8648  003D10  EC9C  F008         	call	_printf	;wreg free
  8649                           
  8650                           ;UI.c: 493: lcdInst(0b11000000);;
  8651  003D14  0EC0               	movlw	192
  8652  003D16  EC0C  F021         	call	_lcdInst
  8653                           
  8654                           ;UI.c: 494: printf("2. SORT        <");
  8655  003D1A  0EED               	movlw	low STR_34
  8656  003D1C  0100               	movlb	0	; () banked
  8657  003D1E  6F8E               	movwf	printf@f& (0+255),b
  8658  003D20  0EFD               	movlw	high STR_34
  8659  003D22  0100               	movlb	0	; () banked
  8660  003D24  6F8F               	movwf	(printf@f+1)& (0+255),b
  8661  003D26  EC9C  F008         	call	_printf	;wreg free
  8662  003D2A  0012               	return		;funcret
  8663  003D2C                     __end_of_change_state_to_menu_12:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           intcon	equ	0xFF2
  8672                           intcon2	equ	0xFF1
  8673                           intcon3	equ	0xFF0
  8674                           postinc0	equ	0xFEE
  8675                           wreg	equ	0xFE8
  8676                           postdec1	equ	0xFE5
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           postdec2	equ	0xFDD
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function ___awmod *****************
  8686 ;; Defined at:
  8687 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;  dividend        2    0[BANK0 ] int 
  8690 ;;  divisor         2    2[BANK0 ] int 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  sign            1    5[BANK0 ] unsigned char 
  8693 ;;  counter         1    4[BANK0 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  2    0[BANK0 ] int 
  8696 ;; Registers used:
  8697 ;;		wreg, status,2, status,0
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;Total ram usage:        6 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    7
  8710 ;; This function calls:
  8711 ;;		Nothing
  8712 ;; This function is called by:
  8713 ;;		_UI
  8714 ;; This function uses a non-reentrant model
  8715 ;;
  8716                           
  8717                           	psect	text32
  8718  003350                     __ptext32:
  8719                           	opt stack 0
  8720  003350                     ___awmod:
  8721                           	opt stack 22
  8722                           
  8723                           ;incstack = 0
  8724  003350  0E00               	movlw	0
  8725  003352  0100               	movlb	0	; () banked
  8726  003354  6F85               	movwf	___awmod@sign& (0+255),b
  8727                           
  8728                           ; BSR set to: 0
  8729  003356  0100               	movlb	0	; () banked
  8730  003358  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8731  00335A  D008               	goto	l6964
  8732                           
  8733                           ; BSR set to: 0
  8734  00335C  0100               	movlb	0	; () banked
  8735  00335E  6D80               	negf	___awmod@dividend& (0+255),b
  8736  003360  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8737  003362  B0D8               	btfsc	status,0,c
  8738  003364  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 0
  8741  003366  0E01               	movlw	1
  8742  003368  0100               	movlb	0	; () banked
  8743  00336A  6F85               	movwf	___awmod@sign& (0+255),b
  8744  00336C                     l6964:
  8745                           
  8746                           ; BSR set to: 0
  8747  00336C  0100               	movlb	0	; () banked
  8748  00336E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8749  003370  D005               	goto	l6968
  8750                           
  8751                           ; BSR set to: 0
  8752  003372  0100               	movlb	0	; () banked
  8753  003374  6D82               	negf	___awmod@divisor& (0+255),b
  8754  003376  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8755  003378  B0D8               	btfsc	status,0,c
  8756  00337A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8757  00337C                     l6968:
  8758                           
  8759                           ; BSR set to: 0
  8760  00337C  0100               	movlb	0	; () banked
  8761  00337E  5182               	movf	___awmod@divisor& (0+255),w,b
  8762  003380  0100               	movlb	0	; () banked
  8763  003382  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8764  003384  B4D8               	btfsc	status,2,c
  8765  003386  D026               	goto	l6984
  8766                           
  8767                           ; BSR set to: 0
  8768  003388  0E01               	movlw	1
  8769  00338A  0100               	movlb	0	; () banked
  8770  00338C  6F84               	movwf	___awmod@counter& (0+255),b
  8771  00338E  D006               	goto	l6974
  8772  003390                     l6972:
  8773                           
  8774                           ; BSR set to: 0
  8775  003390  0100               	movlb	0	; () banked
  8776  003392  90D8               	bcf	status,0,c
  8777  003394  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8778  003396  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8779  003398  0100               	movlb	0	; () banked
  8780  00339A  2B84               	incf	___awmod@counter& (0+255),f,b
  8781  00339C                     l6974:
  8782                           
  8783                           ; BSR set to: 0
  8784  00339C  0100               	movlb	0	; () banked
  8785  00339E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8786  0033A0  D7F7               	goto	l6972
  8787  0033A2                     l6976:
  8788                           
  8789                           ; BSR set to: 0
  8790  0033A2  0100               	movlb	0	; () banked
  8791  0033A4  5182               	movf	___awmod@divisor& (0+255),w,b
  8792  0033A6  0100               	movlb	0	; () banked
  8793  0033A8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8794  0033AA  0100               	movlb	0	; () banked
  8795  0033AC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8796  0033AE  0100               	movlb	0	; () banked
  8797  0033B0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8798  0033B2  A0D8               	btfss	status,0,c
  8799  0033B4  D008               	goto	l6980
  8800                           
  8801                           ; BSR set to: 0
  8802  0033B6  0100               	movlb	0	; () banked
  8803  0033B8  5182               	movf	___awmod@divisor& (0+255),w,b
  8804  0033BA  0100               	movlb	0	; () banked
  8805  0033BC  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8806  0033BE  0100               	movlb	0	; () banked
  8807  0033C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8808  0033C2  0100               	movlb	0	; () banked
  8809  0033C4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8810  0033C6                     l6980:
  8811                           
  8812                           ; BSR set to: 0
  8813  0033C6  0100               	movlb	0	; () banked
  8814  0033C8  90D8               	bcf	status,0,c
  8815  0033CA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8816  0033CC  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8817                           
  8818                           ; BSR set to: 0
  8819  0033CE  0100               	movlb	0	; () banked
  8820  0033D0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8821  0033D2  D7E7               	goto	l6976
  8822  0033D4                     l6984:
  8823                           
  8824                           ; BSR set to: 0
  8825  0033D4  0100               	movlb	0	; () banked
  8826  0033D6  5185               	movf	___awmod@sign& (0+255),w,b
  8827  0033D8  0100               	movlb	0	; () banked
  8828  0033DA  B4D8               	btfsc	status,2,c
  8829  0033DC  D005               	goto	l6988
  8830                           
  8831                           ; BSR set to: 0
  8832  0033DE  0100               	movlb	0	; () banked
  8833  0033E0  6D80               	negf	___awmod@dividend& (0+255),b
  8834  0033E2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8835  0033E4  B0D8               	btfsc	status,0,c
  8836  0033E6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8837  0033E8                     l6988:
  8838                           
  8839                           ; BSR set to: 0
  8840  0033E8  C080  F080         	movff	___awmod@dividend,?___awmod
  8841  0033EC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8842  0033F0  0012               	return	
  8843  0033F2                     __end_of___awmod:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           intcon2	equ	0xFF1
  8853                           intcon3	equ	0xFF0
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           fsr1l	equ	0xFE1
  8858                           indf2	equ	0xFDF
  8859                           postinc2	equ	0xFDE
  8860                           postdec2	equ	0xFDD
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function ___awdiv *****************
  8866 ;; Defined at:
  8867 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  dividend        2    6[BANK0 ] int 
  8870 ;;  divisor         2    8[BANK0 ] int 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  quotient        2   12[BANK0 ] int 
  8873 ;;  sign            1   11[BANK0 ] unsigned char 
  8874 ;;  counter         1   10[BANK0 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  2    6[BANK0 ] int 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        8 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    7
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_UI
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text33
  8899  00312C                     __ptext33:
  8900                           	opt stack 0
  8901  00312C                     ___awdiv:
  8902                           	opt stack 22
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;incstack = 0
  8906  00312C  0E00               	movlw	0
  8907  00312E  0100               	movlb	0	; () banked
  8908  003130  6F8B               	movwf	___awdiv@sign& (0+255),b
  8909                           
  8910                           ; BSR set to: 0
  8911  003132  0100               	movlb	0	; () banked
  8912  003134  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8913  003136  D008               	goto	l6920
  8914                           
  8915                           ; BSR set to: 0
  8916  003138  0100               	movlb	0	; () banked
  8917  00313A  6D88               	negf	___awdiv@divisor& (0+255),b
  8918  00313C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8919  00313E  B0D8               	btfsc	status,0,c
  8920  003140  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8921                           
  8922                           ; BSR set to: 0
  8923  003142  0E01               	movlw	1
  8924  003144  0100               	movlb	0	; () banked
  8925  003146  6F8B               	movwf	___awdiv@sign& (0+255),b
  8926  003148                     l6920:
  8927                           
  8928                           ; BSR set to: 0
  8929  003148  0100               	movlb	0	; () banked
  8930  00314A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8931  00314C  D008               	goto	l6926
  8932                           
  8933                           ; BSR set to: 0
  8934  00314E  0100               	movlb	0	; () banked
  8935  003150  6D86               	negf	___awdiv@dividend& (0+255),b
  8936  003152  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8937  003154  B0D8               	btfsc	status,0,c
  8938  003156  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941  003158  0E01               	movlw	1
  8942  00315A  0100               	movlb	0	; () banked
  8943  00315C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8944  00315E                     l6926:
  8945                           
  8946                           ; BSR set to: 0
  8947  00315E  0E00               	movlw	0
  8948  003160  0100               	movlb	0	; () banked
  8949  003162  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8950  003164  0E00               	movlw	0
  8951  003166  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954  003168  0100               	movlb	0	; () banked
  8955  00316A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8956  00316C  0100               	movlb	0	; () banked
  8957  00316E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8958  003170  B4D8               	btfsc	status,2,c
  8959  003172  D02C               	goto	l6948
  8960                           
  8961                           ; BSR set to: 0
  8962  003174  0E01               	movlw	1
  8963  003176  0100               	movlb	0	; () banked
  8964  003178  6F8A               	movwf	___awdiv@counter& (0+255),b
  8965  00317A  D006               	goto	l6934
  8966  00317C                     l6932:
  8967                           
  8968                           ; BSR set to: 0
  8969  00317C  0100               	movlb	0	; () banked
  8970  00317E  90D8               	bcf	status,0,c
  8971  003180  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8972  003182  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8973  003184  0100               	movlb	0	; () banked
  8974  003186  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8975  003188                     l6934:
  8976                           
  8977                           ; BSR set to: 0
  8978  003188  0100               	movlb	0	; () banked
  8979  00318A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8980  00318C  D7F7               	goto	l6932
  8981  00318E                     l6936:
  8982                           
  8983                           ; BSR set to: 0
  8984  00318E  0100               	movlb	0	; () banked
  8985  003190  90D8               	bcf	status,0,c
  8986  003192  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8987  003194  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8988                           
  8989                           ; BSR set to: 0
  8990  003196  0100               	movlb	0	; () banked
  8991  003198  5188               	movf	___awdiv@divisor& (0+255),w,b
  8992  00319A  0100               	movlb	0	; () banked
  8993  00319C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8994  00319E  0100               	movlb	0	; () banked
  8995  0031A0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8996  0031A2  0100               	movlb	0	; () banked
  8997  0031A4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8998  0031A6  A0D8               	btfss	status,0,c
  8999  0031A8  D00A               	goto	l6944
  9000                           
  9001                           ; BSR set to: 0
  9002  0031AA  0100               	movlb	0	; () banked
  9003  0031AC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9004  0031AE  0100               	movlb	0	; () banked
  9005  0031B0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9006  0031B2  0100               	movlb	0	; () banked
  9007  0031B4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9008  0031B6  0100               	movlb	0	; () banked
  9009  0031B8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012  0031BA  0100               	movlb	0	; () banked
  9013  0031BC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9014  0031BE                     l6944:
  9015                           
  9016                           ; BSR set to: 0
  9017  0031BE  0100               	movlb	0	; () banked
  9018  0031C0  90D8               	bcf	status,0,c
  9019  0031C2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9020  0031C4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9021                           
  9022                           ; BSR set to: 0
  9023  0031C6  0100               	movlb	0	; () banked
  9024  0031C8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9025  0031CA  D7E1               	goto	l6936
  9026  0031CC                     l6948:
  9027                           
  9028                           ; BSR set to: 0
  9029  0031CC  0100               	movlb	0	; () banked
  9030  0031CE  518B               	movf	___awdiv@sign& (0+255),w,b
  9031  0031D0  0100               	movlb	0	; () banked
  9032  0031D2  B4D8               	btfsc	status,2,c
  9033  0031D4  D005               	goto	l6952
  9034                           
  9035                           ; BSR set to: 0
  9036  0031D6  0100               	movlb	0	; () banked
  9037  0031D8  6D8C               	negf	___awdiv@quotient& (0+255),b
  9038  0031DA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9039  0031DC  B0D8               	btfsc	status,0,c
  9040  0031DE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9041  0031E0                     l6952:
  9042                           
  9043                           ; BSR set to: 0
  9044  0031E0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9045  0031E4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9046  0031E8  0012               	return	
  9047  0031EA                     __end_of___awdiv:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon2	equ	0xFF1
  9057                           intcon3	equ	0xFF0
  9058                           postinc0	equ	0xFEE
  9059                           wreg	equ	0xFE8
  9060                           postdec1	equ	0xFE5
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           postdec2	equ	0xFDD
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function _Test *****************
  9070 ;; Defined at:
  9071 ;;		line 27 in file "Test.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  1    wreg      void 
  9078 ;; Registers used:
  9079 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;Total ram usage:        2 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:   11
  9092 ;; This function calls:
  9093 ;;		_EEPROMTest
  9094 ;;		_PortTestA5
  9095 ;;		_PortTests
  9096 ;;		_SolenoidTestA5
  9097 ;;		_ToggleTestA5
  9098 ;;		_actuatorTest
  9099 ;;		_algorithmTest
  9100 ;;		_lcdInst
  9101 ;;		_printf
  9102 ;;		_sensorTest
  9103 ;; This function is called by:
  9104 ;;		_main
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text34
  9109  002E72                     __ptext34:
  9110                           	opt stack 0
  9111  002E72                     _Test:
  9112                           	opt stack 19
  9113  002E72                     
  9114                           ;Test.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9115  002E72  0E01               	movlw	1
  9116  002E74  EC0C  F021         	call	_lcdInst
  9117  002E78  0E68               	movlw	104
  9118  002E7A  0100               	movlb	0	; () banked
  9119  002E7C  6FC6               	movwf	??_Test& (0+255),b
  9120  002E7E  0EE4               	movlw	228
  9121  002E80                     u7217:
  9122  002E80  2EE8               	decfsz	wreg,f,c
  9123  002E82  D7FE               	bra	u7217
  9124  002E84  2FC6               	decfsz	??_Test& (0+255),f,b
  9125  002E86  D7FC               	bra	u7217
  9126  002E88  F000               	nop	
  9127  002E8A  0E80               	movlw	128
  9128  002E8C  EC0C  F021         	call	_lcdInst
  9129                           
  9130                           ;Test.c: 31: printf("1.ALG|2.SNR|3.AC");
  9131  002E90  0EAA               	movlw	low STR_68
  9132  002E92  0100               	movlb	0	; () banked
  9133  002E94  6F8E               	movwf	printf@f& (0+255),b
  9134  002E96  0EFC               	movlw	high STR_68
  9135  002E98  0100               	movlb	0	; () banked
  9136  002E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9137  002E9C  EC9C  F008         	call	_printf	;wreg free
  9138                           
  9139                           ;Test.c: 32: lcdInst(0b11000000);;
  9140  002EA0  0EC0               	movlw	192
  9141  002EA2  EC0C  F021         	call	_lcdInst
  9142                           
  9143                           ;Test.c: 33: printf("4.HI|5.TOG|6.EEP");
  9144  002EA6  0EDD               	movlw	low STR_69
  9145  002EA8  0100               	movlb	0	; () banked
  9146  002EAA  6F8E               	movwf	printf@f& (0+255),b
  9147  002EAC  0EFC               	movlw	high STR_69
  9148  002EAE  0100               	movlb	0	; () banked
  9149  002EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9150  002EB2  EC9C  F008         	call	_printf	;wreg free
  9151                           
  9152                           ;Test.c: 34: _delay((unsigned long)((100)*(32000000/4000.0)));
  9153  002EB6  0E05               	movlw	5
  9154  002EB8  0100               	movlb	0	; () banked
  9155  002EBA  6FC7               	movwf	(??_Test+1)& (0+255),b
  9156  002EBC  0E0F               	movlw	15
  9157  002EBE  0100               	movlb	0	; () banked
  9158  002EC0  6FC6               	movwf	??_Test& (0+255),b
  9159  002EC2  0EF1               	movlw	241
  9160  002EC4                     u7227:
  9161  002EC4  2EE8               	decfsz	wreg,f,c
  9162  002EC6  D7FE               	bra	u7227
  9163  002EC8  2FC6               	decfsz	??_Test& (0+255),f,b
  9164  002ECA  D7FC               	bra	u7227
  9165  002ECC  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9166  002ECE  D7FA               	bra	u7227
  9167  002ED0                     l1009:
  9168  002ED0  A281               	btfss	3969,1,c	;volatile
  9169  002ED2  D7FE               	goto	l1009
  9170                           
  9171                           ;Test.c: 36: var = PORTB >> 4;
  9172  002ED4  CF81 F0C6          	movff	3969,??_Test	;volatile
  9173  002ED8  0100               	movlb	0	; () banked
  9174  002EDA  3BC6               	swapf	??_Test& (0+255),f,b
  9175  002EDC  0E0F               	movlw	15
  9176  002EDE  17C6               	andwf	??_Test& (0+255),f,b
  9177  002EE0  0100               	movlb	0	; () banked
  9178  002EE2  51C6               	movf	??_Test& (0+255),w,b
  9179  002EE4  0100               	movlb	0	; () banked
  9180  002EE6  6FFA               	movwf	_var& (0+255),b
  9181  002EE8  6BFB               	clrf	(_var+1)& (0+255),b
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;Test.c: 37: var++;
  9185  002EEA  0100               	movlb	0	; () banked
  9186  002EEC  4BFA               	infsnz	_var& (0+255),f,b
  9187  002EEE  2BFB               	incf	(_var+1)& (0+255),f,b
  9188  002EF0                     l1012:
  9189  002EF0  A281               	btfss	3969,1,c	;volatile
  9190  002EF2  D019               	goto	l7682
  9191  002EF4  D7FD               	goto	l1012
  9192  002EF6                     l7664:
  9193                           
  9194                           ;Test.c: 41: algorithmTest();
  9195  002EF6  EC2B  F018         	call	_algorithmTest	;wreg free
  9196                           
  9197                           ;Test.c: 42: break;
  9198  002EFA  D7BB               	goto	l7646
  9199  002EFC                     l7666:
  9200                           
  9201                           ;Test.c: 44: sensorTest();
  9202  002EFC  EC3B  F012         	call	_sensorTest	;wreg free
  9203                           
  9204                           ;Test.c: 45: break;
  9205  002F00  D7B8               	goto	l7646
  9206  002F02                     l7668:
  9207                           
  9208                           ;Test.c: 47: actuatorTest();
  9209  002F02  EC5C  F004         	call	_actuatorTest	;wreg free
  9210                           
  9211                           ;Test.c: 48: break;
  9212  002F06  D7B5               	goto	l7646
  9213  002F08                     l7670:
  9214                           
  9215                           ;Test.c: 50: PortTestA5();
  9216  002F08  ECCC  F01C         	call	_PortTestA5	;wreg free
  9217                           
  9218                           ;Test.c: 51: break;
  9219  002F0C  D7B2               	goto	l7646
  9220  002F0E                     l7672:
  9221                           
  9222                           ;Test.c: 53: ToggleTestA5();
  9223  002F0E  EC8A  F01A         	call	_ToggleTestA5	;wreg free
  9224                           
  9225                           ;Test.c: 54: break;
  9226  002F12  D7AF               	goto	l7646
  9227  002F14                     l7674:
  9228                           
  9229                           ;Test.c: 56: EEPROMTest();
  9230  002F14  EC3E  F021         	call	_EEPROMTest	;wreg free
  9231                           
  9232                           ;Test.c: 57: break;
  9233  002F18  D7AC               	goto	l7646
  9234  002F1A                     l7676:
  9235                           
  9236                           ;Test.c: 59: SolenoidTestA5();
  9237  002F1A  ECBA  F016         	call	_SolenoidTestA5	;wreg free
  9238                           
  9239                           ;Test.c: 60: break;
  9240  002F1E  D7A9               	goto	l7646
  9241  002F20                     l7678:
  9242                           
  9243                           ;Test.c: 62: PortTests();
  9244  002F20  EC11  F01B         	call	_PortTests	;wreg free
  9245                           
  9246                           ;Test.c: 66: }
  9247                           
  9248                           ;Test.c: 65: break;
  9249                           
  9250                           ;Test.c: 64: default:
  9251                           
  9252                           ;Test.c: 63: break;
  9253  002F24  D7A6               	goto	l7646
  9254  002F26                     l7682:
  9255  002F26  C0FA  F0C6         	movff	_var,??_Test
  9256  002F2A  C0FB  F0C7         	movff	_var+1,??_Test+1
  9257                           
  9258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9259                           ; Switch size 1, requested type "space"
  9260                           ; Number of cases is 1, Range of values is 0 to 0
  9261                           ; switch strategies available:
  9262                           ; Name         Instructions Cycles
  9263                           ; simple_byte            4     3 (average)
  9264                           ;	Chosen strategy is simple_byte
  9265  002F2E  0100               	movlb	0	; () banked
  9266  002F30  51C7               	movf	(??_Test+1)& (0+255),w,b
  9267  002F32  0A00               	xorlw	0	; case 0
  9268  002F34  A4D8               	btfss	status,2,c
  9269  002F36  D79D               	goto	l7646
  9270                           
  9271                           ; BSR set to: 0
  9272                           ; Switch size 1, requested type "space"
  9273                           ; Number of cases is 8, Range of values is 1 to 9
  9274                           ; switch strategies available:
  9275                           ; Name         Instructions Cycles
  9276                           ; simple_byte           25    13 (average)
  9277                           ;	Chosen strategy is simple_byte
  9278  002F38  0100               	movlb	0	; () banked
  9279  002F3A  51C6               	movf	??_Test& (0+255),w,b
  9280  002F3C  0A01               	xorlw	1	; case 1
  9281  002F3E  B4D8               	btfsc	status,2,c
  9282  002F40  D7DA               	goto	l7664
  9283  002F42  0A03               	xorlw	3	; case 2
  9284  002F44  B4D8               	btfsc	status,2,c
  9285  002F46  D7DA               	goto	l7666
  9286  002F48  0A01               	xorlw	1	; case 3
  9287  002F4A  B4D8               	btfsc	status,2,c
  9288  002F4C  D7DA               	goto	l7668
  9289  002F4E  0A06               	xorlw	6	; case 5
  9290  002F50  B4D8               	btfsc	status,2,c
  9291  002F52  D7DA               	goto	l7670
  9292  002F54  0A03               	xorlw	3	; case 6
  9293  002F56  B4D8               	btfsc	status,2,c
  9294  002F58  D7DA               	goto	l7672
  9295  002F5A  0A01               	xorlw	1	; case 7
  9296  002F5C  B4D8               	btfsc	status,2,c
  9297  002F5E  D7DA               	goto	l7674
  9298  002F60  0A0F               	xorlw	15	; case 8
  9299  002F62  B4D8               	btfsc	status,2,c
  9300  002F64  D7DA               	goto	l7676
  9301  002F66  0A01               	xorlw	1	; case 9
  9302  002F68  B4D8               	btfsc	status,2,c
  9303  002F6A  D7DA               	goto	l7678
  9304                           
  9305                           ; BSR set to: 0
  9306                           
  9307                           ; BSR set to: 0
  9308  002F6C  D782               	goto	l7646
  9309  002F6E                     __end_of_Test:
  9310                           	opt stack 0
  9311                           tblptru	equ	0xFF8
  9312                           tblptrh	equ	0xFF7
  9313                           tblptrl	equ	0xFF6
  9314                           tablat	equ	0xFF5
  9315                           prodh	equ	0xFF4
  9316                           prodl	equ	0xFF3
  9317                           intcon	equ	0xFF2
  9318                           intcon2	equ	0xFF1
  9319                           intcon3	equ	0xFF0
  9320                           postinc0	equ	0xFEE
  9321                           wreg	equ	0xFE8
  9322                           postdec1	equ	0xFE5
  9323                           fsr1l	equ	0xFE1
  9324                           indf2	equ	0xFDF
  9325                           postinc2	equ	0xFDE
  9326                           postdec2	equ	0xFDD
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function _sensorTest *****************
  9332 ;; Defined at:
  9333 ;;		line 114 in file "Test.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;  on              2   45[BANK0 ] int 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      void 
  9340 ;; Registers used:
  9341 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;Total ram usage:        4 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:   10
  9354 ;; This function calls:
  9355 ;;		_lcdInst
  9356 ;;		_printf
  9357 ;;		_readIR
  9358 ;;		_readMAG
  9359 ;; This function is called by:
  9360 ;;		_Test
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text35
  9365  002476                     __ptext35:
  9366                           	opt stack 0
  9367  002476                     _sensorTest:
  9368                           	opt stack 19
  9369                           
  9370                           ;Test.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;incstack = 0
  9374  002476  0E01               	movlw	1
  9375  002478  EC0C  F021         	call	_lcdInst
  9376  00247C  0E68               	movlw	104
  9377  00247E  0100               	movlb	0	; () banked
  9378  002480  6FAB               	movwf	??_sensorTest& (0+255),b
  9379  002482  0EE4               	movlw	228
  9380  002484                     u7237:
  9381  002484  2EE8               	decfsz	wreg,f,c
  9382  002486  D7FE               	bra	u7237
  9383  002488  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9384  00248A  D7FC               	bra	u7237
  9385  00248C  F000               	nop	
  9386  00248E  0E80               	movlw	128
  9387  002490  EC0C  F021         	call	_lcdInst
  9388                           
  9389                           ;Test.c: 117: printf("SENSORS");
  9390  002494  0EAE               	movlw	low STR_77
  9391  002496  0100               	movlb	0	; () banked
  9392  002498  6F8E               	movwf	printf@f& (0+255),b
  9393  00249A  0EFF               	movlw	high STR_77
  9394  00249C  0100               	movlb	0	; () banked
  9395  00249E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9396  0024A0  EC9C  F008         	call	_printf	;wreg free
  9397                           
  9398                           ;Test.c: 118: lcdInst(0b11000000);;
  9399  0024A4  0EC0               	movlw	192
  9400  0024A6  EC0C  F021         	call	_lcdInst
  9401                           
  9402                           ;Test.c: 119: printf("PUSH TO START");
  9403  0024AA  0E12               	movlw	low STR_71
  9404  0024AC  0100               	movlb	0	; () banked
  9405  0024AE  6F8E               	movwf	printf@f& (0+255),b
  9406  0024B0  0EFF               	movlw	high STR_71
  9407  0024B2  0100               	movlb	0	; () banked
  9408  0024B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9409  0024B6  EC9C  F008         	call	_printf	;wreg free
  9410                           
  9411                           ;Test.c: 120: _delay((unsigned long)((100)*(32000000/4000.0)));
  9412  0024BA  0E05               	movlw	5
  9413  0024BC  0100               	movlb	0	; () banked
  9414  0024BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9415  0024C0  0E0F               	movlw	15
  9416  0024C2  0100               	movlb	0	; () banked
  9417  0024C4  6FAB               	movwf	??_sensorTest& (0+255),b
  9418  0024C6  0EF1               	movlw	241
  9419  0024C8                     u7247:
  9420  0024C8  2EE8               	decfsz	wreg,f,c
  9421  0024CA  D7FE               	bra	u7247
  9422  0024CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9423  0024CE  D7FC               	bra	u7247
  9424  0024D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9425  0024D2  D7FA               	bra	u7247
  9426  0024D4                     l1040:
  9427  0024D4  A281               	btfss	3969,1,c	;volatile
  9428  0024D6  D7FE               	goto	l1040
  9429  0024D8                     l1043:
  9430  0024D8  B281               	btfsc	3969,1,c	;volatile
  9431  0024DA  D7FE               	goto	l1043
  9432                           
  9433                           ;Test.c: 123: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9434  0024DC  0E01               	movlw	1
  9435  0024DE  EC0C  F021         	call	_lcdInst
  9436  0024E2  0E68               	movlw	104
  9437  0024E4  0100               	movlb	0	; () banked
  9438  0024E6  6FAB               	movwf	??_sensorTest& (0+255),b
  9439  0024E8  0EE4               	movlw	228
  9440  0024EA                     u7257:
  9441  0024EA  2EE8               	decfsz	wreg,f,c
  9442  0024EC  D7FE               	bra	u7257
  9443  0024EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9444  0024F0  D7FC               	bra	u7257
  9445  0024F2  F000               	nop	
  9446  0024F4  0E80               	movlw	128
  9447  0024F6  EC0C  F021         	call	_lcdInst
  9448                           
  9449                           ;Test.c: 128: printf("TST: IR SNSR");
  9450  0024FA  0E3C               	movlw	low STR_79
  9451  0024FC  0100               	movlb	0	; () banked
  9452  0024FE  6F8E               	movwf	printf@f& (0+255),b
  9453  002500  0EFF               	movlw	high STR_79
  9454  002502  0100               	movlb	0	; () banked
  9455  002504  6F8F               	movwf	(printf@f+1)& (0+255),b
  9456  002506  EC9C  F008         	call	_printf	;wreg free
  9457                           
  9458                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  9459  00250A  0E05               	movlw	5
  9460  00250C  0100               	movlb	0	; () banked
  9461  00250E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9462  002510  0E0F               	movlw	15
  9463  002512  0100               	movlb	0	; () banked
  9464  002514  6FAB               	movwf	??_sensorTest& (0+255),b
  9465  002516  0EF1               	movlw	241
  9466  002518                     u7267:
  9467  002518  2EE8               	decfsz	wreg,f,c
  9468  00251A  D7FE               	bra	u7267
  9469  00251C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9470  00251E  D7FC               	bra	u7267
  9471  002520  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9472  002522  D7FA               	bra	u7267
  9473                           
  9474                           ;Test.c: 130: int on = 0;
  9475  002524  0E00               	movlw	0
  9476  002526  0100               	movlb	0	; () banked
  9477  002528  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9478  00252A  0E00               	movlw	0
  9479  00252C  6FAD               	movwf	sensorTest@on& (0+255),b
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;Test.c: 132: while(PORTBbits.RB1 == 0){
  9483                           
  9484                           ;Test.c: 131: while(1){
  9485  00252E  D021               	goto	l6362
  9486  002530                     l6356:
  9487                           
  9488                           ;Test.c: 133: readIR();
  9489  002530  ECF4  F01D         	call	_readIR	;wreg free
  9490                           
  9491                           ;Test.c: 134: lcdInst(0b10000000);;
  9492  002534  0E80               	movlw	128
  9493  002536  EC0C  F021         	call	_lcdInst
  9494                           
  9495                           ;Test.c: 135: lcdInst(0b11000000);;
  9496  00253A  0EC0               	movlw	192
  9497  00253C  EC0C  F021         	call	_lcdInst
  9498                           
  9499                           ;Test.c: 136: printf("IR_signal: %d ", IR_signal);
  9500  002540  0E61               	movlw	low STR_80
  9501  002542  0100               	movlb	0	; () banked
  9502  002544  6F8E               	movwf	printf@f& (0+255),b
  9503  002546  0EFE               	movlw	high STR_80
  9504  002548  0100               	movlb	0	; () banked
  9505  00254A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9506  00254C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9507  002550  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9508  002554  EC9C  F008         	call	_printf	;wreg free
  9509                           
  9510                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
  9511  002558  0E05               	movlw	5
  9512  00255A  0100               	movlb	0	; () banked
  9513  00255C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9514  00255E  0E0F               	movlw	15
  9515  002560  0100               	movlb	0	; () banked
  9516  002562  6FAB               	movwf	??_sensorTest& (0+255),b
  9517  002564  0EF1               	movlw	241
  9518  002566                     u7277:
  9519  002566  2EE8               	decfsz	wreg,f,c
  9520  002568  D7FE               	bra	u7277
  9521  00256A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9522  00256C  D7FC               	bra	u7277
  9523  00256E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9524  002570  D7FA               	bra	u7277
  9525  002572                     l6362:
  9526  002572  A281               	btfss	3969,1,c	;volatile
  9527  002574  D7DD               	goto	l6356
  9528                           
  9529                           ;Test.c: 138: }
  9530                           ;Test.c: 139: if(on == 0){
  9531  002576  0100               	movlb	0	; () banked
  9532  002578  51AD               	movf	sensorTest@on& (0+255),w,b
  9533  00257A  0100               	movlb	0	; () banked
  9534  00257C  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
  9535  00257E  A4D8               	btfss	status,2,c
  9536  002580  D007               	goto	l6370
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;Test.c: 140: on = 1;
  9540  002582  0E00               	movlw	0
  9541  002584  0100               	movlb	0	; () banked
  9542  002586  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9543  002588  0E01               	movlw	1
  9544  00258A  6FAD               	movwf	sensorTest@on& (0+255),b
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;Test.c: 141: LATAbits.LATA5 = 1;
  9548  00258C  8A89               	bsf	3977,5,c	;volatile
  9549                           
  9550                           ;Test.c: 142: }
  9551  00258E  D006               	goto	l1052
  9552  002590                     l6370:
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;Test.c: 143: else{
  9556                           ;Test.c: 144: on = 0;
  9557  002590  0E00               	movlw	0
  9558  002592  0100               	movlb	0	; () banked
  9559  002594  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9560  002596  0E00               	movlw	0
  9561  002598  6FAD               	movwf	sensorTest@on& (0+255),b
  9562                           
  9563                           ; BSR set to: 0
  9564                           ;Test.c: 145: LATAbits.LATA5 = 0;
  9565  00259A  9A89               	bcf	3977,5,c	;volatile
  9566  00259C                     l1052:
  9567  00259C  A281               	btfss	3969,1,c	;volatile
  9568  00259E  D7E9               	goto	l6362
  9569  0025A0  D7FD               	goto	l1052
  9570                           
  9571                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9572                           
  9573                           ;Test.c: 148: }
  9574                           ;Test.c: 154: printf("TST: MAGNETISM");
  9575  0025A2  0E05               	movlw	5
  9576  0025A4  0100               	movlb	0	; () banked
  9577  0025A6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9578  0025A8  0E0F               	movlw	15
  9579  0025AA  0100               	movlb	0	; () banked
  9580  0025AC  6FAB               	movwf	??_sensorTest& (0+255),b
  9581  0025AE  0EF1               	movlw	241
  9582  0025B0                     u7287:
  9583  0025B0  2EE8               	decfsz	wreg,f,c
  9584  0025B2  D7FE               	bra	u7287
  9585  0025B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9586  0025B6  D7FC               	bra	u7287
  9587  0025B8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9588  0025BA  D7FA               	bra	u7287
  9589                           
  9590                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9591  0025BC  D021               	goto	l6384
  9592  0025BE                     l6378:
  9593                           
  9594                           ;Test.c: 157: readMAG();
  9595  0025BE  ECCE  F01D         	call	_readMAG	;wreg free
  9596                           
  9597                           ;Test.c: 158: lcdInst(0b10000000);;
  9598  0025C2  0E80               	movlw	128
  9599  0025C4  EC0C  F021         	call	_lcdInst
  9600                           
  9601                           ;Test.c: 159: lcdInst(0b11000000);;
  9602  0025C8  0EC0               	movlw	192
  9603  0025CA  EC0C  F021         	call	_lcdInst
  9604                           
  9605                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9606  0025CE  0E31               	movlw	low STR_82
  9607  0025D0  0100               	movlb	0	; () banked
  9608  0025D2  6F8E               	movwf	printf@f& (0+255),b
  9609  0025D4  0EFE               	movlw	high STR_82
  9610  0025D6  0100               	movlb	0	; () banked
  9611  0025D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9612  0025DA  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9613  0025DE  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9614  0025E2  EC9C  F008         	call	_printf	;wreg free
  9615                           
  9616                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9617  0025E6  0E05               	movlw	5
  9618  0025E8  0100               	movlb	0	; () banked
  9619  0025EA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9620  0025EC  0E0F               	movlw	15
  9621  0025EE  0100               	movlb	0	; () banked
  9622  0025F0  6FAB               	movwf	??_sensorTest& (0+255),b
  9623  0025F2  0EF1               	movlw	241
  9624  0025F4                     u7297:
  9625  0025F4  2EE8               	decfsz	wreg,f,c
  9626  0025F6  D7FE               	bra	u7297
  9627  0025F8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9628  0025FA  D7FC               	bra	u7297
  9629  0025FC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9630  0025FE  D7FA               	bra	u7297
  9631  002600                     l6384:
  9632  002600  B281               	btfsc	3969,1,c	;volatile
  9633  002602  0012               	return	
  9634  002604  D7DC               	goto	l6378
  9635  002606                     __end_of_sensorTest:
  9636                           	opt stack 0
  9637                           tblptru	equ	0xFF8
  9638                           tblptrh	equ	0xFF7
  9639                           tblptrl	equ	0xFF6
  9640                           tablat	equ	0xFF5
  9641                           prodh	equ	0xFF4
  9642                           prodl	equ	0xFF3
  9643                           intcon	equ	0xFF2
  9644                           intcon2	equ	0xFF1
  9645                           intcon3	equ	0xFF0
  9646                           postinc0	equ	0xFEE
  9647                           wreg	equ	0xFE8
  9648                           postdec1	equ	0xFE5
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _readMAG *****************
  9658 ;; Defined at:
  9659 ;;		line 29 in file "ADCFunctionality.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;		None
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  res             2    4[BANK0 ] int 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, status,2, status,0, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;Total ram usage:        4 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    8
  9680 ;; This function calls:
  9681 ;;		_readADC
  9682 ;; This function is called by:
  9683 ;;		_ID
  9684 ;;		_sensorTest
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text36
  9689  003B9C                     __ptext36:
  9690                           	opt stack 0
  9691  003B9C                     _readMAG:
  9692                           	opt stack 20
  9693                           
  9694                           ;ADCFunctionality.c: 30: readADC(1);
  9695                           
  9696                           ;incstack = 0
  9697  003B9C  0E01               	movlw	1
  9698  003B9E  EC01  F020         	call	_readADC
  9699                           
  9700                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9701  003BA2  50C3               	movf	4035,w,c	;volatile
  9702  003BA4  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9703  003BA8  0100               	movlb	0	; () banked
  9704  003BAA  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9705  003BAC  C082  F083         	movff	??_readMAG,??_readMAG+1
  9706  003BB0  0100               	movlb	0	; () banked
  9707  003BB2  6B82               	clrf	??_readMAG& (0+255),b
  9708  003BB4  0100               	movlb	0	; () banked
  9709  003BB6  1182               	iorwf	??_readMAG& (0+255),w,b
  9710  003BB8  0100               	movlb	0	; () banked
  9711  003BBA  6F84               	movwf	readMAG@res& (0+255),b
  9712  003BBC  0100               	movlb	0	; () banked
  9713  003BBE  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9714  003BC0  0100               	movlb	0	; () banked
  9715  003BC2  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9719  003BC4  0100               	movlb	0	; () banked
  9720  003BC6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9721  003BC8  D008               	goto	u4351
  9722  003BCA  0100               	movlb	0	; () banked
  9723  003BCC  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9724  003BCE  E107               	bnz	u4350
  9725  003BD0  0E96               	movlw	150
  9726  003BD2  0100               	movlb	0	; () banked
  9727  003BD4  5D84               	subwf	readMAG@res& (0+255),w,b
  9728  003BD6  B0D8               	btfsc	status,0,c
  9729  003BD8  D002               	goto	u4350
  9730  003BDA                     u4351:
  9731  003BDA  0E01               	movlw	1
  9732  003BDC  D001               	goto	u4360
  9733  003BDE                     u4350:
  9734  003BDE  0E00               	movlw	0
  9735  003BE0                     u4360:
  9736  003BE0  0100               	movlb	0	; () banked
  9737  003BE2  6FDC               	movwf	_MAG_signal& (0+255),b
  9738  003BE4  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9739                           
  9740                           ; BSR set to: 0
  9741  003BE6  0012               	return		;funcret
  9742  003BE8                     __end_of_readMAG:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           intcon	equ	0xFF2
  9751                           intcon2	equ	0xFF1
  9752                           intcon3	equ	0xFF0
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _readIR *****************
  9765 ;; Defined at:
  9766 ;;		line 23 in file "ADCFunctionality.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  res             2    4[BANK0 ] int 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        4 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    8
  9787 ;; This function calls:
  9788 ;;		_readADC
  9789 ;; This function is called by:
  9790 ;;		_sensorTest
  9791 ;;		_getIR
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text37
  9796  003BE8                     __ptext37:
  9797                           	opt stack 0
  9798  003BE8                     _readIR:
  9799                           	opt stack 20
  9800                           
  9801                           ;ADCFunctionality.c: 24: readADC(0);
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;incstack = 0
  9805  003BE8  0E00               	movlw	0
  9806  003BEA  EC01  F020         	call	_readADC
  9807                           
  9808                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9809  003BEE  50C3               	movf	4035,w,c	;volatile
  9810  003BF0  CFC4 F082          	movff	4036,??_readIR	;volatile
  9811  003BF4  0100               	movlb	0	; () banked
  9812  003BF6  6B83               	clrf	(??_readIR+1)& (0+255),b
  9813  003BF8  C082  F083         	movff	??_readIR,??_readIR+1
  9814  003BFC  0100               	movlb	0	; () banked
  9815  003BFE  6B82               	clrf	??_readIR& (0+255),b
  9816  003C00  0100               	movlb	0	; () banked
  9817  003C02  1182               	iorwf	??_readIR& (0+255),w,b
  9818  003C04  0100               	movlb	0	; () banked
  9819  003C06  6F84               	movwf	readIR@res& (0+255),b
  9820  003C08  0100               	movlb	0	; () banked
  9821  003C0A  5183               	movf	(??_readIR+1)& (0+255),w,b
  9822  003C0C  0100               	movlb	0	; () banked
  9823  003C0E  6F85               	movwf	(readIR@res+1)& (0+255),b
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  9827  003C10  0100               	movlb	0	; () banked
  9828  003C12  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9829  003C14  D00A               	goto	u4330
  9830  003C16  0E85               	movlw	133
  9831  003C18  0100               	movlb	0	; () banked
  9832  003C1A  5D84               	subwf	readIR@res& (0+255),w,b
  9833  003C1C  0E03               	movlw	3
  9834  003C1E  0100               	movlb	0	; () banked
  9835  003C20  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  9836  003C22  A0D8               	btfss	status,0,c
  9837  003C24  D002               	goto	u4330
  9838  003C26  0E01               	movlw	1
  9839  003C28  D001               	goto	u4340
  9840  003C2A                     u4330:
  9841  003C2A  0E00               	movlw	0
  9842  003C2C                     u4340:
  9843  003C2C  0100               	movlb	0	; () banked
  9844  003C2E  6FDA               	movwf	_IR_signal& (0+255),b
  9845  003C30  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9846                           
  9847                           ; BSR set to: 0
  9848  003C32  0012               	return		;funcret
  9849  003C34                     __end_of_readIR:
  9850                           	opt stack 0
  9851                           tblptru	equ	0xFF8
  9852                           tblptrh	equ	0xFF7
  9853                           tblptrl	equ	0xFF6
  9854                           tablat	equ	0xFF5
  9855                           prodh	equ	0xFF4
  9856                           prodl	equ	0xFF3
  9857                           intcon	equ	0xFF2
  9858                           intcon2	equ	0xFF1
  9859                           intcon3	equ	0xFF0
  9860                           postinc0	equ	0xFEE
  9861                           wreg	equ	0xFE8
  9862                           postdec1	equ	0xFE5
  9863                           fsr1l	equ	0xFE1
  9864                           indf2	equ	0xFDF
  9865                           postinc2	equ	0xFDE
  9866                           postdec2	equ	0xFDD
  9867                           fsr2h	equ	0xFDA
  9868                           fsr2l	equ	0xFD9
  9869                           status	equ	0xFD8
  9870                           
  9871 ;; *************** function _readADC *****************
  9872 ;; Defined at:
  9873 ;;		line 15 in file "ADCFunctionality.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;  channel         1    wreg     unsigned char 
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  channel         1    1[BANK0 ] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  1    wreg      void 
  9880 ;; Registers used:
  9881 ;;		wreg, status,2, status,0, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;Total ram usage:        2 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    7
  9894 ;; This function calls:
  9895 ;;		Nothing
  9896 ;; This function is called by:
  9897 ;;		_readIR
  9898 ;;		_readMAG
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           	psect	text38
  9903  004002                     __ptext38:
  9904                           	opt stack 0
  9905  004002                     _readADC:
  9906                           	opt stack 20
  9907                           
  9908                           ; BSR set to: 0
  9909                           ;incstack = 0
  9910                           ;readADC@channel stored from wreg
  9911  004002  0100               	movlb	0	; () banked
  9912  004004  6F81               	movwf	readADC@channel& (0+255),b
  9913                           
  9914                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9915  004006  0100               	movlb	0	; () banked
  9916  004008  4581               	rlncf	readADC@channel& (0+255),w,b
  9917  00400A  46E8               	rlncf	wreg,f,c
  9918  00400C  0BFC               	andlw	252
  9919  00400E  6EC2               	movwf	4034,c	;volatile
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9923  004010  80C2               	bsf	4034,0,c	;volatile
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9927  004012  82C2               	bsf	4034,1,c	;volatile
  9928                           
  9929                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9930  004014  D009               	goto	l5216
  9931  004016                     l5214:
  9932  004016  0E34               	movlw	52
  9933  004018  0100               	movlb	0	; () banked
  9934  00401A  6F80               	movwf	??_readADC& (0+255),b
  9935  00401C  0EF1               	movlw	241
  9936  00401E                     u7307:
  9937  00401E  2EE8               	decfsz	wreg,f,c
  9938  004020  D7FE               	bra	u7307
  9939  004022  2F80               	decfsz	??_readADC& (0+255),f,b
  9940  004024  D7FC               	bra	u7307
  9941  004026  D000               	nop2	
  9942  004028                     l5216:
  9943  004028  A2C2               	btfss	4034,1,c	;volatile
  9944  00402A  0012               	return	
  9945  00402C  D7F4               	goto	l5214
  9946  00402E                     __end_of_readADC:
  9947                           	opt stack 0
  9948                           tblptru	equ	0xFF8
  9949                           tblptrh	equ	0xFF7
  9950                           tblptrl	equ	0xFF6
  9951                           tablat	equ	0xFF5
  9952                           prodh	equ	0xFF4
  9953                           prodl	equ	0xFF3
  9954                           intcon	equ	0xFF2
  9955                           intcon2	equ	0xFF1
  9956                           intcon3	equ	0xFF0
  9957                           postinc0	equ	0xFEE
  9958                           wreg	equ	0xFE8
  9959                           postdec1	equ	0xFE5
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968 ;; *************** function _algorithmTest *****************
  9969 ;; Defined at:
  9970 ;;		line 70 in file "Test.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  1    wreg      void 
  9977 ;; Registers used:
  9978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;Total ram usage:        2 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:   10
  9991 ;; This function calls:
  9992 ;;		_lcdInst
  9993 ;;		_printf
  9994 ;; This function is called by:
  9995 ;;		_Test
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text39
 10000  003056                     __ptext39:
 10001                           	opt stack 0
 10002  003056                     _algorithmTest:
 10003                           	opt stack 19
 10004                           
 10005                           ;Test.c: 72: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10006                           
 10007                           ;incstack = 0
 10008  003056  0E01               	movlw	1
 10009  003058  EC0C  F021         	call	_lcdInst
 10010  00305C  0E68               	movlw	104
 10011  00305E  0100               	movlb	0	; () banked
 10012  003060  6FAB               	movwf	??_algorithmTest& (0+255),b
 10013  003062  0EE4               	movlw	228
 10014  003064                     u7317:
 10015  003064  2EE8               	decfsz	wreg,f,c
 10016  003066  D7FE               	bra	u7317
 10017  003068  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10018  00306A  D7FC               	bra	u7317
 10019  00306C  F000               	nop	
 10020  00306E  0E80               	movlw	128
 10021  003070  EC0C  F021         	call	_lcdInst
 10022                           
 10023                           ;Test.c: 73: printf("ALGORITHM TEST");
 10024  003074  0ED9               	movlw	low STR_70
 10025  003076  0100               	movlb	0	; () banked
 10026  003078  6F8E               	movwf	printf@f& (0+255),b
 10027  00307A  0EFE               	movlw	high STR_70
 10028  00307C  0100               	movlb	0	; () banked
 10029  00307E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10030  003080  EC9C  F008         	call	_printf	;wreg free
 10031                           
 10032                           ;Test.c: 74: lcdInst(0b11000000);;
 10033  003084  0EC0               	movlw	192
 10034  003086  EC0C  F021         	call	_lcdInst
 10035                           
 10036                           ;Test.c: 75: printf("PUSH TO START");
 10037  00308A  0E12               	movlw	low STR_71
 10038  00308C  0100               	movlb	0	; () banked
 10039  00308E  6F8E               	movwf	printf@f& (0+255),b
 10040  003090  0EFF               	movlw	high STR_71
 10041  003092  0100               	movlb	0	; () banked
 10042  003094  6F8F               	movwf	(printf@f+1)& (0+255),b
 10043  003096  EC9C  F008         	call	_printf	;wreg free
 10044                           
 10045                           ;Test.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
 10046  00309A  0E05               	movlw	5
 10047  00309C  0100               	movlb	0	; () banked
 10048  00309E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10049  0030A0  0E0F               	movlw	15
 10050  0030A2  0100               	movlb	0	; () banked
 10051  0030A4  6FAB               	movwf	??_algorithmTest& (0+255),b
 10052  0030A6  0EF1               	movlw	241
 10053  0030A8                     u7327:
 10054  0030A8  2EE8               	decfsz	wreg,f,c
 10055  0030AA  D7FE               	bra	u7327
 10056  0030AC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10057  0030AE  D7FC               	bra	u7327
 10058  0030B0  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10059  0030B2  D7FA               	bra	u7327
 10060  0030B4                     l1031:
 10061  0030B4  A281               	btfss	3969,1,c	;volatile
 10062  0030B6  D7FE               	goto	l1031
 10063  0030B8                     l1034:
 10064  0030B8  B281               	btfsc	3969,1,c	;volatile
 10065  0030BA  D7FE               	goto	l1034
 10066                           
 10067                           ;Test.c: 79: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10068  0030BC  0E01               	movlw	1
 10069  0030BE  EC0C  F021         	call	_lcdInst
 10070  0030C2  0E68               	movlw	104
 10071  0030C4  0100               	movlb	0	; () banked
 10072  0030C6  6FAB               	movwf	??_algorithmTest& (0+255),b
 10073  0030C8  0EE4               	movlw	228
 10074  0030CA                     u7337:
 10075  0030CA  2EE8               	decfsz	wreg,f,c
 10076  0030CC  D7FE               	bra	u7337
 10077  0030CE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10078  0030D0  D7FC               	bra	u7337
 10079  0030D2  F000               	nop	
 10080  0030D4  0E80               	movlw	128
 10081  0030D6  EC0C  F021         	call	_lcdInst
 10082                           
 10083                           ;Test.c: 84: printf("ALG1: 9 POPNOTAB");
 10084  0030DA  0E99               	movlw	low STR_72
 10085  0030DC  0100               	movlb	0	; () banked
 10086  0030DE  6F8E               	movwf	printf@f& (0+255),b
 10087  0030E0  0EFC               	movlw	high STR_72
 10088  0030E2  0100               	movlb	0	; () banked
 10089  0030E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10090  0030E6  EC9C  F008         	call	_printf	;wreg free
 10091                           
 10092                           ;Test.c: 91: printf("ALG2: 12 CANS");
 10093  0030EA  0EF6               	movlw	low STR_73
 10094  0030EC  0100               	movlb	0	; () banked
 10095  0030EE  6F8E               	movwf	printf@f& (0+255),b
 10096  0030F0  0EFE               	movlw	high STR_73
 10097  0030F2  0100               	movlb	0	; () banked
 10098  0030F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10099  0030F6  EC9C  F008         	call	_printf	;wreg free
 10100                           
 10101                           ;Test.c: 100: printf("ALG3: 1 CAN");
 10102  0030FA  0E63               	movlw	low STR_74
 10103  0030FC  0100               	movlb	0	; () banked
 10104  0030FE  6F8E               	movwf	printf@f& (0+255),b
 10105  003100  0EFF               	movlw	high STR_74
 10106  003102  0100               	movlb	0	; () banked
 10107  003104  6F8F               	movwf	(printf@f+1)& (0+255),b
 10108  003106  EC9C  F008         	call	_printf	;wreg free
 10109                           
 10110                           ;Test.c: 106: printf("ALG4: ALL CANS");
 10111  00310A  0EBB               	movlw	low STR_75
 10112  00310C  0100               	movlb	0	; () banked
 10113  00310E  6F8E               	movwf	printf@f& (0+255),b
 10114  003110  0EFE               	movlw	high STR_75
 10115  003112  0100               	movlb	0	; () banked
 10116  003114  6F8F               	movwf	(printf@f+1)& (0+255),b
 10117  003116  EC9C  F008         	call	_printf	;wreg free
 10118                           
 10119                           ;Test.c: 111: printf("ALG5: NO CANS");
 10120  00311A  0E04               	movlw	low STR_76
 10121  00311C  0100               	movlb	0	; () banked
 10122  00311E  6F8E               	movwf	printf@f& (0+255),b
 10123  003120  0EFF               	movlw	high STR_76
 10124  003122  0100               	movlb	0	; () banked
 10125  003124  6F8F               	movwf	(printf@f+1)& (0+255),b
 10126  003126  EC9C  F008         	call	_printf	;wreg free
 10127  00312A  0012               	return		;funcret
 10128  00312C                     __end_of_algorithmTest:
 10129                           	opt stack 0
 10130                           tblptru	equ	0xFF8
 10131                           tblptrh	equ	0xFF7
 10132                           tblptrl	equ	0xFF6
 10133                           tablat	equ	0xFF5
 10134                           prodh	equ	0xFF4
 10135                           prodl	equ	0xFF3
 10136                           intcon	equ	0xFF2
 10137                           intcon2	equ	0xFF1
 10138                           intcon3	equ	0xFF0
 10139                           postinc0	equ	0xFEE
 10140                           wreg	equ	0xFE8
 10141                           postdec1	equ	0xFE5
 10142                           fsr1l	equ	0xFE1
 10143                           indf2	equ	0xFDF
 10144                           postinc2	equ	0xFDE
 10145                           postdec2	equ	0xFDD
 10146                           fsr2h	equ	0xFDA
 10147                           fsr2l	equ	0xFD9
 10148                           status	equ	0xFD8
 10149                           
 10150 ;; *************** function _actuatorTest *****************
 10151 ;; Defined at:
 10152 ;;		line 165 in file "Test.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  i               1   45[BANK0 ] unsigned char 
 10157 ;;  i               1   67[BANK0 ] unsigned char 
 10158 ;;  i               1   66[BANK0 ] unsigned char 
 10159 ;;  i               1   65[BANK0 ] unsigned char 
 10160 ;;  i               1   64[BANK0 ] unsigned char 
 10161 ;;  i               1   63[BANK0 ] unsigned char 
 10162 ;;  i               1   62[BANK0 ] unsigned char 
 10163 ;;  i               1   61[BANK0 ] unsigned char 
 10164 ;;  i               1   60[BANK0 ] unsigned char 
 10165 ;;  i               1   59[BANK0 ] unsigned char 
 10166 ;;  i               1   58[BANK0 ] unsigned char 
 10167 ;;  i               1   57[BANK0 ] unsigned char 
 10168 ;;  i               1   56[BANK0 ] unsigned char 
 10169 ;;  i               1   55[BANK0 ] unsigned char 
 10170 ;;  i               1   54[BANK0 ] unsigned char 
 10171 ;;  i               1   53[BANK0 ] unsigned char 
 10172 ;;  i               1   52[BANK0 ] unsigned char 
 10173 ;;  i               1   51[BANK0 ] unsigned char 
 10174 ;;  i               1   50[BANK0 ] unsigned char 
 10175 ;;  i               1   49[BANK0 ] unsigned char 
 10176 ;;  i               1   48[BANK0 ] unsigned char 
 10177 ;;  i               1   47[BANK0 ] unsigned char 
 10178 ;;  i               1   46[BANK0 ] unsigned char 
 10179 ;;  i               2   68[BANK0 ] int 
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  1    wreg      void 
 10182 ;; Registers used:
 10183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;Total ram usage:       27 bytes
 10194 ;; Hardware stack levels used:    1
 10195 ;; Hardware stack levels required when called:   10
 10196 ;; This function calls:
 10197 ;;		_lcdInst
 10198 ;;		_printf
 10199 ;;		_updateServoPosition
 10200 ;; This function is called by:
 10201 ;;		_Test
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text40
 10206  0008B8                     __ptext40:
 10207                           	opt stack 0
 10208  0008B8                     _actuatorTest:
 10209                           	opt stack 19
 10210                           
 10211                           ;Test.c: 167: int i = 0;
 10212                           
 10213                           ;incstack = 0
 10214  0008B8  0E00               	movlw	0
 10215  0008BA  0100               	movlb	0	; () banked
 10216  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10217  0008BE  0E00               	movlw	0
 10218  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;Test.c: 169: (INTCONbits.GIE = 1);
 10222  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;Test.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10226  0008C4  0E01               	movlw	1
 10227  0008C6  EC0C  F021         	call	_lcdInst
 10228  0008CA  0E68               	movlw	104
 10229  0008CC  0100               	movlb	0	; () banked
 10230  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10231  0008D0  0EE4               	movlw	228
 10232  0008D2                     u7347:
 10233  0008D2  2EE8               	decfsz	wreg,f,c
 10234  0008D4  D7FE               	bra	u7347
 10235  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10236  0008D8  D7FC               	bra	u7347
 10237  0008DA  F000               	nop	
 10238  0008DC  0E80               	movlw	128
 10239  0008DE  EC0C  F021         	call	_lcdInst
 10240                           
 10241                           ;Test.c: 171: printf("ACTUATORS");
 10242  0008E2  0E9A               	movlw	low STR_83
 10243  0008E4  0100               	movlb	0	; () banked
 10244  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10245  0008E8  0EFF               	movlw	high STR_83
 10246  0008EA  0100               	movlb	0	; () banked
 10247  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10248  0008EE  EC9C  F008         	call	_printf	;wreg free
 10249                           
 10250                           ;Test.c: 172: lcdInst(0b11000000);;
 10251  0008F2  0EC0               	movlw	192
 10252  0008F4  EC0C  F021         	call	_lcdInst
 10253                           
 10254                           ;Test.c: 173: printf("PUSH TO START");
 10255  0008F8  0E12               	movlw	low STR_71
 10256  0008FA  0100               	movlb	0	; () banked
 10257  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10258  0008FE  0EFF               	movlw	high STR_71
 10259  000900  0100               	movlb	0	; () banked
 10260  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10261  000904  EC9C  F008         	call	_printf	;wreg free
 10262                           
 10263                           ;Test.c: 174: _delay((unsigned long)((100)*(32000000/4000.0)));
 10264  000908  0E05               	movlw	5
 10265  00090A  0100               	movlb	0	; () banked
 10266  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10267  00090E  0E0F               	movlw	15
 10268  000910  0100               	movlb	0	; () banked
 10269  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10270  000914  0EF1               	movlw	241
 10271  000916                     u7357:
 10272  000916  2EE8               	decfsz	wreg,f,c
 10273  000918  D7FE               	bra	u7357
 10274  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10275  00091C  D7FC               	bra	u7357
 10276  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10277  000920  D7FA               	bra	u7357
 10278  000922                     l1063:
 10279  000922  A281               	btfss	3969,1,c	;volatile
 10280  000924  D7FE               	goto	l1063
 10281  000926                     l1066:
 10282  000926  B281               	btfsc	3969,1,c	;volatile
 10283  000928  D7FE               	goto	l1066
 10284                           
 10285                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10286  00092A  0E01               	movlw	1
 10287  00092C  EC0C  F021         	call	_lcdInst
 10288  000930  0E68               	movlw	104
 10289  000932  0100               	movlb	0	; () banked
 10290  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10291  000936  0EE4               	movlw	228
 10292  000938                     u7367:
 10293  000938  2EE8               	decfsz	wreg,f,c
 10294  00093A  D7FE               	bra	u7367
 10295  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10296  00093E  D7FC               	bra	u7367
 10297  000940  F000               	nop	
 10298  000942  0E80               	movlw	128
 10299  000944  EC0C  F021         	call	_lcdInst
 10300                           
 10301                           ;Test.c: 182: printf("TST: DC MOTORS");
 10302  000948  0ECA               	movlw	low STR_85
 10303  00094A  0100               	movlb	0	; () banked
 10304  00094C  6F8E               	movwf	printf@f& (0+255),b
 10305  00094E  0EFE               	movlw	high STR_85
 10306  000950  0100               	movlb	0	; () banked
 10307  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10308  000954  EC9C  F008         	call	_printf	;wreg free
 10309                           
 10310                           ;Test.c: 183: lcdInst(0b11000000);;
 10311  000958  0EC0               	movlw	192
 10312  00095A  EC0C  F021         	call	_lcdInst
 10313                           
 10314                           ;Test.c: 184: printf("PIN RA5 HIGH.");
 10315  00095E  0EE8               	movlw	low STR_86
 10316  000960  0100               	movlb	0	; () banked
 10317  000962  6F8E               	movwf	printf@f& (0+255),b
 10318  000964  0EFE               	movlw	high STR_86
 10319  000966  0100               	movlb	0	; () banked
 10320  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10321  00096A  EC9C  F008         	call	_printf	;wreg free
 10322                           
 10323                           ;Test.c: 185: LATAbits.LATA5 = 1;
 10324  00096E  8A89               	bsf	3977,5,c	;volatile
 10325                           
 10326                           ;Test.c: 186: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10327  000970  0E00               	movlw	0
 10328  000972  0100               	movlb	0	; () banked
 10329  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10330  000976  0E00               	movlw	0
 10331  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10332                           
 10333                           ; BSR set to: 0
 10334  00097A  0100               	movlb	0	; () banked
 10335  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10336  00097E  D008               	goto	l6424
 10337  000980  0100               	movlb	0	; () banked
 10338  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10339  000984  E123               	bnz	l1070
 10340  000986  0E05               	movlw	5
 10341  000988  0100               	movlb	0	; () banked
 10342  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10343  00098C  B0D8               	btfsc	status,0,c
 10344  00098E  D01E               	goto	l1070
 10345  000990                     l6424:
 10346                           
 10347                           ; BSR set to: 0
 10348  000990  0E00               	movlw	0
 10349  000992  0100               	movlb	0	; () banked
 10350  000994  6FAD               	movwf	actuatorTest@i_1569& (0+255),b
 10351  000996                     l6426:
 10352                           
 10353                           ; BSR set to: 0
 10354  000996  0E63               	movlw	99
 10355  000998  0100               	movlb	0	; () banked
 10356  00099A  65AD               	cpfsgt	actuatorTest@i_1569& (0+255),b
 10357  00099C  D001               	goto	l6430
 10358  00099E  D00C               	goto	l6434
 10359  0009A0                     l6430:
 10360                           
 10361                           ; BSR set to: 0
 10362  0009A0  0E68               	movlw	104
 10363  0009A2  0100               	movlb	0	; () banked
 10364  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10365  0009A6  0EE4               	movlw	228
 10366  0009A8                     u7377:
 10367  0009A8  2EE8               	decfsz	wreg,f,c
 10368  0009AA  D7FE               	bra	u7377
 10369  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10370  0009AE  D7FC               	bra	u7377
 10371  0009B0  F000               	nop	
 10372  0009B2  0100               	movlb	0	; () banked
 10373  0009B4  2BAD               	incf	actuatorTest@i_1569& (0+255),f,b
 10374  0009B6  D7EF               	goto	l6426
 10375  0009B8                     l6434:
 10376                           
 10377                           ; BSR set to: 0
 10378  0009B8  0100               	movlb	0	; () banked
 10379  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10380  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10381                           
 10382                           ; BSR set to: 0
 10383  0009BE  0100               	movlb	0	; () banked
 10384  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10385  0009C2  D7E6               	goto	l6424
 10386  0009C4  0100               	movlb	0	; () banked
 10387  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10388  0009C8  E101               	bnz	u4990
 10389  0009CA  D7DD               	goto	L7
 10390  0009CC                     u4990:
 10391  0009CC                     l1070:
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;Test.c: 187: LATAbits.LATA5 = 0;
 10395  0009CC  9A89               	bcf	3977,5,c	;volatile
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;Test.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10399  0009CE  0E01               	movlw	1
 10400  0009D0  EC0C  F021         	call	_lcdInst
 10401  0009D4  0E68               	movlw	104
 10402  0009D6  0100               	movlb	0	; () banked
 10403  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10404  0009DA  0EE4               	movlw	228
 10405  0009DC                     u7387:
 10406  0009DC  2EE8               	decfsz	wreg,f,c
 10407  0009DE  D7FE               	bra	u7387
 10408  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10409  0009E2  D7FC               	bra	u7387
 10410  0009E4  F000               	nop	
 10411  0009E6  0E80               	movlw	128
 10412  0009E8  EC0C  F021         	call	_lcdInst
 10413                           
 10414                           ;Test.c: 194: printf("TST: COND SOLN'D");
 10415  0009EC  0EBB               	movlw	low STR_87
 10416  0009EE  0100               	movlb	0	; () banked
 10417  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10418  0009F2  0EFC               	movlw	high STR_87
 10419  0009F4  0100               	movlb	0	; () banked
 10420  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10421  0009F8  EC9C  F008         	call	_printf	;wreg free
 10422                           
 10423                           ;Test.c: 195: lcdInst(0b11000000);;
 10424  0009FC  0EC0               	movlw	192
 10425  0009FE  EC0C  F021         	call	_lcdInst
 10426                           
 10427                           ;Test.c: 196: printf("PIN RA3...");
 10428  000A02  0E6F               	movlw	low STR_88
 10429  000A04  0100               	movlb	0	; () banked
 10430  000A06  6F8E               	movwf	printf@f& (0+255),b
 10431  000A08  0EFF               	movlw	high STR_88
 10432  000A0A  0100               	movlb	0	; () banked
 10433  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10434  000A0E  EC9C  F008         	call	_printf	;wreg free
 10435                           
 10436                           ;Test.c: 197: for(i=0;i<5;i++){
 10437  000A12  0E00               	movlw	0
 10438  000A14  0100               	movlb	0	; () banked
 10439  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10440  000A18  0E00               	movlw	0
 10441  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10442                           
 10443                           ; BSR set to: 0
 10444  000A1C  0100               	movlb	0	; () banked
 10445  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10446  000A20  D008               	goto	l1073
 10447  000A22  0100               	movlb	0	; () banked
 10448  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10449  000A26  E12C               	bnz	l1074
 10450  000A28  0E05               	movlw	5
 10451  000A2A  0100               	movlb	0	; () banked
 10452  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10453  000A2E  B0D8               	btfsc	status,0,c
 10454  000A30  D027               	goto	l1074
 10455  000A32                     l1073:
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;Test.c: 198: LATAbits.LATA3 = 1;
 10459  000A32  8689               	bsf	3977,3,c	;volatile
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;Test.c: 199: _delay((unsigned long)((300)*(32000000/4000.0)));
 10463  000A34  0E0D               	movlw	13
 10464  000A36  0100               	movlb	0	; () banked
 10465  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10466  000A3A  0E2D               	movlw	45
 10467  000A3C  0100               	movlb	0	; () banked
 10468  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10469  000A40  0ED7               	movlw	215
 10470  000A42                     u7397:
 10471  000A42  2EE8               	decfsz	wreg,f,c
 10472  000A44  D7FE               	bra	u7397
 10473  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10474  000A48  D7FC               	bra	u7397
 10475  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10476  000A4C  D7FA               	bra	u7397
 10477  000A4E  D000               	nop2	
 10478                           
 10479                           ;Test.c: 200: LATAbits.LATA3 = ~1;
 10480  000A50  9689               	bcf	3977,3,c	;volatile
 10481                           
 10482                           ;Test.c: 201: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10483  000A52  0E1D               	movlw	29
 10484  000A54  0100               	movlb	0	; () banked
 10485  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10486  000A58  0E69               	movlw	105
 10487  000A5A  0100               	movlb	0	; () banked
 10488  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10489  000A5E  0EA5               	movlw	165
 10490  000A60                     u7407:
 10491  000A60  2EE8               	decfsz	wreg,f,c
 10492  000A62  D7FE               	bra	u7407
 10493  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10494  000A66  D7FC               	bra	u7407
 10495  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10496  000A6A  D7FA               	bra	u7407
 10497  000A6C  0100               	movlb	0	; () banked
 10498  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10499  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10500  000A72  0100               	movlb	0	; () banked
 10501  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10502  000A76  D7DD               	goto	l1073
 10503  000A78  0100               	movlb	0	; () banked
 10504  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10505  000A7C  E101               	bnz	u5010
 10506  000A7E  D7D4               	goto	L8
 10507  000A80                     u5010:
 10508  000A80                     l1074:
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;Test.c: 202: }
 10512                           ;Test.c: 203: LATAbits.LATA3 = ~1;
 10513  000A80  9689               	bcf	3977,3,c	;volatile
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;Test.c: 204: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10517  000A82  0E01               	movlw	1
 10518  000A84  EC0C  F021         	call	_lcdInst
 10519  000A88  0E68               	movlw	104
 10520  000A8A  0100               	movlb	0	; () banked
 10521  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10522  000A8E  0EE4               	movlw	228
 10523  000A90                     u7417:
 10524  000A90  2EE8               	decfsz	wreg,f,c
 10525  000A92  D7FE               	bra	u7417
 10526  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10527  000A96  D7FC               	bra	u7417
 10528  000A98  F000               	nop	
 10529  000A9A  0E80               	movlw	128
 10530  000A9C  EC0C  F021         	call	_lcdInst
 10531                           
 10532                           ;Test.c: 210: printf("TST: PUSH SOLN'D");
 10533  000AA0  0ECC               	movlw	low STR_89
 10534  000AA2  0100               	movlb	0	; () banked
 10535  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10536  000AA6  0EFC               	movlw	high STR_89
 10537  000AA8  0100               	movlb	0	; () banked
 10538  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10539  000AAC  EC9C  F008         	call	_printf	;wreg free
 10540                           
 10541                           ;Test.c: 211: lcdInst(0b11000000);;
 10542  000AB0  0EC0               	movlw	192
 10543  000AB2  EC0C  F021         	call	_lcdInst
 10544                           
 10545                           ;Test.c: 212: printf("PIN RA4...");
 10546  000AB6  0E7A               	movlw	low STR_90
 10547  000AB8  0100               	movlb	0	; () banked
 10548  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10549  000ABC  0EFF               	movlw	high STR_90
 10550  000ABE  0100               	movlb	0	; () banked
 10551  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10552  000AC2  EC9C  F008         	call	_printf	;wreg free
 10553                           
 10554                           ;Test.c: 213: for(i=0;i<5;i++){
 10555  000AC6  0E00               	movlw	0
 10556  000AC8  0100               	movlb	0	; () banked
 10557  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10558  000ACC  0E00               	movlw	0
 10559  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10560                           
 10561                           ; BSR set to: 0
 10562  000AD0  0100               	movlb	0	; () banked
 10563  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10564  000AD4  D008               	goto	l1075
 10565  000AD6  0100               	movlb	0	; () banked
 10566  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10567  000ADA  E12C               	bnz	l1076
 10568  000ADC  0E05               	movlw	5
 10569  000ADE  0100               	movlb	0	; () banked
 10570  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10571  000AE2  B0D8               	btfsc	status,0,c
 10572  000AE4  D027               	goto	l1076
 10573  000AE6                     l1075:
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;Test.c: 214: LATAbits.LATA4 = 1;
 10577  000AE6  8889               	bsf	3977,4,c	;volatile
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;Test.c: 215: _delay((unsigned long)((300)*(32000000/4000.0)));
 10581  000AE8  0E0D               	movlw	13
 10582  000AEA  0100               	movlb	0	; () banked
 10583  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10584  000AEE  0E2D               	movlw	45
 10585  000AF0  0100               	movlb	0	; () banked
 10586  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10587  000AF4  0ED7               	movlw	215
 10588  000AF6                     u7427:
 10589  000AF6  2EE8               	decfsz	wreg,f,c
 10590  000AF8  D7FE               	bra	u7427
 10591  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10592  000AFC  D7FC               	bra	u7427
 10593  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10594  000B00  D7FA               	bra	u7427
 10595  000B02  D000               	nop2	
 10596                           
 10597                           ;Test.c: 216: LATAbits.LATA4 = ~1;
 10598  000B04  9889               	bcf	3977,4,c	;volatile
 10599                           
 10600                           ;Test.c: 217: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10601  000B06  0E1D               	movlw	29
 10602  000B08  0100               	movlb	0	; () banked
 10603  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10604  000B0C  0E69               	movlw	105
 10605  000B0E  0100               	movlb	0	; () banked
 10606  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10607  000B12  0EA5               	movlw	165
 10608  000B14                     u7437:
 10609  000B14  2EE8               	decfsz	wreg,f,c
 10610  000B16  D7FE               	bra	u7437
 10611  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10612  000B1A  D7FC               	bra	u7437
 10613  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10614  000B1E  D7FA               	bra	u7437
 10615  000B20  0100               	movlb	0	; () banked
 10616  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10617  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10618  000B26  0100               	movlb	0	; () banked
 10619  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10620  000B2A  D7DD               	goto	l1075
 10621  000B2C  0100               	movlb	0	; () banked
 10622  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10623  000B30  E101               	bnz	u5030
 10624  000B32  D7D4               	goto	L9
 10625  000B34                     u5030:
 10626  000B34                     l1076:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;Test.c: 218: }
 10630                           ;Test.c: 219: LATAbits.LATA4 = ~1;
 10631  000B34  9889               	bcf	3977,4,c	;volatile
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;Test.c: 220: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10635  000B36  0E01               	movlw	1
 10636  000B38  EC0C  F021         	call	_lcdInst
 10637  000B3C  0E68               	movlw	104
 10638  000B3E  0100               	movlb	0	; () banked
 10639  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10640  000B42  0EE4               	movlw	228
 10641  000B44                     u7447:
 10642  000B44  2EE8               	decfsz	wreg,f,c
 10643  000B46  D7FE               	bra	u7447
 10644  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10645  000B4A  D7FC               	bra	u7447
 10646  000B4C  F000               	nop	
 10647  000B4E  0E80               	movlw	128
 10648  000B50  EC0C  F021         	call	_lcdInst
 10649                           
 10650                           ;Test.c: 223: machine_state = Sorting_state;
 10651  000B54  0E01               	movlw	1
 10652  000B56  0100               	movlb	0	; () banked
 10653  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;Test.c: 224: was_low_1 = 0;
 10657  000B5A  0E00               	movlw	0
 10658  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10659  000B5E  0E00               	movlw	0
 10660  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;Test.c: 225: was_low_1 = 0;
 10664  000B62  0E00               	movlw	0
 10665  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10666  000B66  0E00               	movlw	0
 10667  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;Test.c: 232: printf("TST: PAN SERVO");
 10671  000B6A  0EAC               	movlw	low STR_91
 10672  000B6C  0100               	movlb	0	; () banked
 10673  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10674  000B70  0EFE               	movlw	high STR_91
 10675  000B72  0100               	movlb	0	; () banked
 10676  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10677  000B76  EC9C  F008         	call	_printf	;wreg free
 10678                           
 10679                           ;Test.c: 233: lcdInst(0b11000000);;
 10680  000B7A  0EC0               	movlw	192
 10681  000B7C  EC0C  F021         	call	_lcdInst
 10682                           
 10683                           ;Test.c: 234: printf("MIDDLE -- 2s    ");
 10684  000B80  0E44               	movlw	low STR_92
 10685  000B82  0100               	movlb	0	; () banked
 10686  000B84  6F8E               	movwf	printf@f& (0+255),b
 10687  000B86  0EFC               	movlw	high STR_92
 10688  000B88  0100               	movlb	0	; () banked
 10689  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10690  000B8C  EC9C  F008         	call	_printf	;wreg free
 10691                           
 10692                           ;Test.c: 235: updateServoPosition(1500, 1);
 10693  000B90  0E05               	movlw	5
 10694  000B92  0100               	movlb	0	; () banked
 10695  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10696  000B96  0EDC               	movlw	220
 10697  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10698  000B9A  0E00               	movlw	0
 10699  000B9C  0100               	movlb	0	; () banked
 10700  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10701  000BA0  0E01               	movlw	1
 10702  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10703  000BA4  EC8F  F01B         	call	_updateServoPosition	;wreg free
 10704                           
 10705                           ;Test.c: 236: TMR1ON = 1;
 10706  000BA8  80CD               	bsf	4045,0,c	;volatile
 10707                           
 10708                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10709  000BAA  0E00               	movlw	0
 10710  000BAC  0100               	movlb	0	; () banked
 10711  000BAE  6FAE               	movwf	actuatorTest@i_1576& (0+255),b
 10712  000BB0                     l6510:
 10713                           
 10714                           ; BSR set to: 0
 10715  000BB0  0E63               	movlw	99
 10716  000BB2  0100               	movlb	0	; () banked
 10717  000BB4  65AE               	cpfsgt	actuatorTest@i_1576& (0+255),b
 10718  000BB6  D001               	goto	l6514
 10719  000BB8  D00C               	goto	l6518
 10720  000BBA                     l6514:
 10721                           
 10722                           ; BSR set to: 0
 10723  000BBA  0E68               	movlw	104
 10724  000BBC  0100               	movlb	0	; () banked
 10725  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10726  000BC0  0EE4               	movlw	228
 10727  000BC2                     u7457:
 10728  000BC2  2EE8               	decfsz	wreg,f,c
 10729  000BC4  D7FE               	bra	u7457
 10730  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10731  000BC8  D7FC               	bra	u7457
 10732  000BCA  F000               	nop	
 10733  000BCC  0100               	movlb	0	; () banked
 10734  000BCE  2BAE               	incf	actuatorTest@i_1576& (0+255),f,b
 10735  000BD0  D7EF               	goto	l6510
 10736  000BD2                     l6518:
 10737                           
 10738                           ; BSR set to: 0
 10739  000BD2  0E00               	movlw	0
 10740  000BD4  0100               	movlb	0	; () banked
 10741  000BD6  6FAF               	movwf	actuatorTest@i_1577& (0+255),b
 10742  000BD8                     l6520:
 10743                           
 10744                           ; BSR set to: 0
 10745  000BD8  0E63               	movlw	99
 10746  000BDA  0100               	movlb	0	; () banked
 10747  000BDC  65AF               	cpfsgt	actuatorTest@i_1577& (0+255),b
 10748  000BDE  D001               	goto	l6524
 10749  000BE0  D00C               	goto	l6528
 10750  000BE2                     l6524:
 10751                           
 10752                           ; BSR set to: 0
 10753  000BE2  0E68               	movlw	104
 10754  000BE4  0100               	movlb	0	; () banked
 10755  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10756  000BE8  0EE4               	movlw	228
 10757  000BEA                     u7467:
 10758  000BEA  2EE8               	decfsz	wreg,f,c
 10759  000BEC  D7FE               	bra	u7467
 10760  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10761  000BF0  D7FC               	bra	u7467
 10762  000BF2  F000               	nop	
 10763  000BF4  0100               	movlb	0	; () banked
 10764  000BF6  2BAF               	incf	actuatorTest@i_1577& (0+255),f,b
 10765  000BF8  D7EF               	goto	l6520
 10766  000BFA                     l6528:
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10770  000BFA  0E80               	movlw	128
 10771  000BFC  EC0C  F021         	call	_lcdInst
 10772  000C00  0EC0               	movlw	192
 10773  000C02  EC0C  F021         	call	_lcdInst
 10774                           
 10775                           ;Test.c: 240: printf("RIGHT -- 2s     ");
 10776  000C06  0E33               	movlw	low STR_93
 10777  000C08  0100               	movlb	0	; () banked
 10778  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10779  000C0C  0EFC               	movlw	high STR_93
 10780  000C0E  0100               	movlb	0	; () banked
 10781  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10782  000C12  EC9C  F008         	call	_printf	;wreg free
 10783                           
 10784                           ;Test.c: 241: updateServoPosition(1000, 1);
 10785  000C16  0E03               	movlw	3
 10786  000C18  0100               	movlb	0	; () banked
 10787  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10788  000C1C  0EE8               	movlw	232
 10789  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10790  000C20  0E00               	movlw	0
 10791  000C22  0100               	movlb	0	; () banked
 10792  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10793  000C26  0E01               	movlw	1
 10794  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10795  000C2A  EC8F  F01B         	call	_updateServoPosition	;wreg free
 10796                           
 10797                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10798  000C2E  0E00               	movlw	0
 10799  000C30  0100               	movlb	0	; () banked
 10800  000C32  6FB0               	movwf	actuatorTest@i_1579& (0+255),b
 10801  000C34                     l6536:
 10802                           
 10803                           ; BSR set to: 0
 10804  000C34  0E63               	movlw	99
 10805  000C36  0100               	movlb	0	; () banked
 10806  000C38  65B0               	cpfsgt	actuatorTest@i_1579& (0+255),b
 10807  000C3A  D001               	goto	l6540
 10808  000C3C  D00C               	goto	l6544
 10809  000C3E                     l6540:
 10810                           
 10811                           ; BSR set to: 0
 10812  000C3E  0E68               	movlw	104
 10813  000C40  0100               	movlb	0	; () banked
 10814  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10815  000C44  0EE4               	movlw	228
 10816  000C46                     u7477:
 10817  000C46  2EE8               	decfsz	wreg,f,c
 10818  000C48  D7FE               	bra	u7477
 10819  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10820  000C4C  D7FC               	bra	u7477
 10821  000C4E  F000               	nop	
 10822  000C50  0100               	movlb	0	; () banked
 10823  000C52  2BB0               	incf	actuatorTest@i_1579& (0+255),f,b
 10824  000C54  D7EF               	goto	l6536
 10825  000C56                     l6544:
 10826                           
 10827                           ; BSR set to: 0
 10828  000C56  0E00               	movlw	0
 10829  000C58  0100               	movlb	0	; () banked
 10830  000C5A  6FB1               	movwf	actuatorTest@i_1580& (0+255),b
 10831  000C5C                     l6546:
 10832                           
 10833                           ; BSR set to: 0
 10834  000C5C  0E63               	movlw	99
 10835  000C5E  0100               	movlb	0	; () banked
 10836  000C60  65B1               	cpfsgt	actuatorTest@i_1580& (0+255),b
 10837  000C62  D001               	goto	l6550
 10838  000C64  D00C               	goto	l6554
 10839  000C66                     l6550:
 10840                           
 10841                           ; BSR set to: 0
 10842  000C66  0E68               	movlw	104
 10843  000C68  0100               	movlb	0	; () banked
 10844  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10845  000C6C  0EE4               	movlw	228
 10846  000C6E                     u7487:
 10847  000C6E  2EE8               	decfsz	wreg,f,c
 10848  000C70  D7FE               	bra	u7487
 10849  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10850  000C74  D7FC               	bra	u7487
 10851  000C76  F000               	nop	
 10852  000C78  0100               	movlb	0	; () banked
 10853  000C7A  2BB1               	incf	actuatorTest@i_1580& (0+255),f,b
 10854  000C7C  D7EF               	goto	l6546
 10855  000C7E                     l6554:
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10859  000C7E  0E80               	movlw	128
 10860  000C80  EC0C  F021         	call	_lcdInst
 10861  000C84  0EC0               	movlw	192
 10862  000C86  EC0C  F021         	call	_lcdInst
 10863                           
 10864                           ;Test.c: 245: printf("LEFT -- 2s      ");
 10865  000C8A  0E11               	movlw	low STR_94
 10866  000C8C  0100               	movlb	0	; () banked
 10867  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10868  000C90  0EFC               	movlw	high STR_94
 10869  000C92  0100               	movlb	0	; () banked
 10870  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10871  000C96  EC9C  F008         	call	_printf	;wreg free
 10872                           
 10873                           ;Test.c: 246: updateServoPosition(2000, 1);
 10874  000C9A  0E07               	movlw	7
 10875  000C9C  0100               	movlb	0	; () banked
 10876  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10877  000CA0  0ED0               	movlw	208
 10878  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10879  000CA4  0E00               	movlw	0
 10880  000CA6  0100               	movlb	0	; () banked
 10881  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10882  000CAA  0E01               	movlw	1
 10883  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10884  000CAE  EC8F  F01B         	call	_updateServoPosition	;wreg free
 10885                           
 10886                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10887  000CB2  0E00               	movlw	0
 10888  000CB4  0100               	movlb	0	; () banked
 10889  000CB6  6FB2               	movwf	actuatorTest@i_1582& (0+255),b
 10890  000CB8                     l6562:
 10891                           
 10892                           ; BSR set to: 0
 10893  000CB8  0E63               	movlw	99
 10894  000CBA  0100               	movlb	0	; () banked
 10895  000CBC  65B2               	cpfsgt	actuatorTest@i_1582& (0+255),b
 10896  000CBE  D001               	goto	l6566
 10897  000CC0  D00C               	goto	l6570
 10898  000CC2                     l6566:
 10899                           
 10900                           ; BSR set to: 0
 10901  000CC2  0E68               	movlw	104
 10902  000CC4  0100               	movlb	0	; () banked
 10903  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10904  000CC8  0EE4               	movlw	228
 10905  000CCA                     u7497:
 10906  000CCA  2EE8               	decfsz	wreg,f,c
 10907  000CCC  D7FE               	bra	u7497
 10908  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10909  000CD0  D7FC               	bra	u7497
 10910  000CD2  F000               	nop	
 10911  000CD4  0100               	movlb	0	; () banked
 10912  000CD6  2BB2               	incf	actuatorTest@i_1582& (0+255),f,b
 10913  000CD8  D7EF               	goto	l6562
 10914  000CDA                     l6570:
 10915                           
 10916                           ; BSR set to: 0
 10917  000CDA  0E00               	movlw	0
 10918  000CDC  0100               	movlb	0	; () banked
 10919  000CDE  6FB3               	movwf	actuatorTest@i_1583& (0+255),b
 10920  000CE0                     l6572:
 10921                           
 10922                           ; BSR set to: 0
 10923  000CE0  0E63               	movlw	99
 10924  000CE2  0100               	movlb	0	; () banked
 10925  000CE4  65B3               	cpfsgt	actuatorTest@i_1583& (0+255),b
 10926  000CE6  D001               	goto	l6576
 10927  000CE8  D00C               	goto	l6580
 10928  000CEA                     l6576:
 10929                           
 10930                           ; BSR set to: 0
 10931  000CEA  0E68               	movlw	104
 10932  000CEC  0100               	movlb	0	; () banked
 10933  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10934  000CF0  0EE4               	movlw	228
 10935  000CF2                     u7507:
 10936  000CF2  2EE8               	decfsz	wreg,f,c
 10937  000CF4  D7FE               	bra	u7507
 10938  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10939  000CF8  D7FC               	bra	u7507
 10940  000CFA  F000               	nop	
 10941  000CFC  0100               	movlb	0	; () banked
 10942  000CFE  2BB3               	incf	actuatorTest@i_1583& (0+255),f,b
 10943  000D00  D7EF               	goto	l6572
 10944  000D02                     l6580:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10948  000D02  0E80               	movlw	128
 10949  000D04  EC0C  F021         	call	_lcdInst
 10950  000D08  0EC0               	movlw	192
 10951  000D0A  EC0C  F021         	call	_lcdInst
 10952                           
 10953                           ;Test.c: 250: printf("MID-LEFT -- 2s  ");
 10954  000D0E  0E66               	movlw	low STR_95
 10955  000D10  0100               	movlb	0	; () banked
 10956  000D12  6F8E               	movwf	printf@f& (0+255),b
 10957  000D14  0EFC               	movlw	high STR_95
 10958  000D16  0100               	movlb	0	; () banked
 10959  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 10960  000D1A  EC9C  F008         	call	_printf	;wreg free
 10961                           
 10962                           ;Test.c: 251: updateServoPosition(1666, 1);
 10963  000D1E  0E06               	movlw	6
 10964  000D20  0100               	movlb	0	; () banked
 10965  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10966  000D24  0E82               	movlw	130
 10967  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10968  000D28  0E00               	movlw	0
 10969  000D2A  0100               	movlb	0	; () banked
 10970  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10971  000D2E  0E01               	movlw	1
 10972  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10973  000D32  EC8F  F01B         	call	_updateServoPosition	;wreg free
 10974                           
 10975                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10976  000D36  0E00               	movlw	0
 10977  000D38  0100               	movlb	0	; () banked
 10978  000D3A  6FB4               	movwf	actuatorTest@i_1585& (0+255),b
 10979  000D3C                     l6588:
 10980                           
 10981                           ; BSR set to: 0
 10982  000D3C  0E63               	movlw	99
 10983  000D3E  0100               	movlb	0	; () banked
 10984  000D40  65B4               	cpfsgt	actuatorTest@i_1585& (0+255),b
 10985  000D42  D001               	goto	l6592
 10986  000D44  D00C               	goto	l6596
 10987  000D46                     l6592:
 10988                           
 10989                           ; BSR set to: 0
 10990  000D46  0E68               	movlw	104
 10991  000D48  0100               	movlb	0	; () banked
 10992  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10993  000D4C  0EE4               	movlw	228
 10994  000D4E                     u7517:
 10995  000D4E  2EE8               	decfsz	wreg,f,c
 10996  000D50  D7FE               	bra	u7517
 10997  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10998  000D54  D7FC               	bra	u7517
 10999  000D56  F000               	nop	
 11000  000D58  0100               	movlb	0	; () banked
 11001  000D5A  2BB4               	incf	actuatorTest@i_1585& (0+255),f,b
 11002  000D5C  D7EF               	goto	l6588
 11003  000D5E                     l6596:
 11004                           
 11005                           ; BSR set to: 0
 11006  000D5E  0E00               	movlw	0
 11007  000D60  0100               	movlb	0	; () banked
 11008  000D62  6FB5               	movwf	actuatorTest@i_1586& (0+255),b
 11009  000D64                     l6598:
 11010                           
 11011                           ; BSR set to: 0
 11012  000D64  0E63               	movlw	99
 11013  000D66  0100               	movlb	0	; () banked
 11014  000D68  65B5               	cpfsgt	actuatorTest@i_1586& (0+255),b
 11015  000D6A  D001               	goto	l6602
 11016  000D6C  D00C               	goto	l6606
 11017  000D6E                     l6602:
 11018                           
 11019                           ; BSR set to: 0
 11020  000D6E  0E68               	movlw	104
 11021  000D70  0100               	movlb	0	; () banked
 11022  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11023  000D74  0EE4               	movlw	228
 11024  000D76                     u7527:
 11025  000D76  2EE8               	decfsz	wreg,f,c
 11026  000D78  D7FE               	bra	u7527
 11027  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11028  000D7C  D7FC               	bra	u7527
 11029  000D7E  F000               	nop	
 11030  000D80  0100               	movlb	0	; () banked
 11031  000D82  2BB5               	incf	actuatorTest@i_1586& (0+255),f,b
 11032  000D84  D7EF               	goto	l6598
 11033  000D86                     l6606:
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11037  000D86  0E80               	movlw	128
 11038  000D88  EC0C  F021         	call	_lcdInst
 11039  000D8C  0EC0               	movlw	192
 11040  000D8E  EC0C  F021         	call	_lcdInst
 11041                           
 11042                           ;Test.c: 255: printf("MID-RIGHT -- 2s ");
 11043  000D92  0E77               	movlw	low STR_96
 11044  000D94  0100               	movlb	0	; () banked
 11045  000D96  6F8E               	movwf	printf@f& (0+255),b
 11046  000D98  0EFC               	movlw	high STR_96
 11047  000D9A  0100               	movlb	0	; () banked
 11048  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11049  000D9E  EC9C  F008         	call	_printf	;wreg free
 11050                           
 11051                           ;Test.c: 256: updateServoPosition(1333, 1);
 11052  000DA2  0E05               	movlw	5
 11053  000DA4  0100               	movlb	0	; () banked
 11054  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11055  000DA8  0E35               	movlw	53
 11056  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11057  000DAC  0E00               	movlw	0
 11058  000DAE  0100               	movlb	0	; () banked
 11059  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11060  000DB2  0E01               	movlw	1
 11061  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11062  000DB6  EC8F  F01B         	call	_updateServoPosition	;wreg free
 11063                           
 11064                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11065  000DBA  0E00               	movlw	0
 11066  000DBC  0100               	movlb	0	; () banked
 11067  000DBE  6FB6               	movwf	actuatorTest@i_1588& (0+255),b
 11068  000DC0                     l6614:
 11069                           
 11070                           ; BSR set to: 0
 11071  000DC0  0E63               	movlw	99
 11072  000DC2  0100               	movlb	0	; () banked
 11073  000DC4  65B6               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11074  000DC6  D001               	goto	l6618
 11075  000DC8  D00C               	goto	l6622
 11076  000DCA                     l6618:
 11077                           
 11078                           ; BSR set to: 0
 11079  000DCA  0E68               	movlw	104
 11080  000DCC  0100               	movlb	0	; () banked
 11081  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11082  000DD0  0EE4               	movlw	228
 11083  000DD2                     u7537:
 11084  000DD2  2EE8               	decfsz	wreg,f,c
 11085  000DD4  D7FE               	bra	u7537
 11086  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11087  000DD8  D7FC               	bra	u7537
 11088  000DDA  F000               	nop	
 11089  000DDC  0100               	movlb	0	; () banked
 11090  000DDE  2BB6               	incf	actuatorTest@i_1588& (0+255),f,b
 11091  000DE0  D7EF               	goto	l6614
 11092  000DE2                     l6622:
 11093                           
 11094                           ; BSR set to: 0
 11095  000DE2  0E00               	movlw	0
 11096  000DE4  0100               	movlb	0	; () banked
 11097  000DE6  6FB7               	movwf	actuatorTest@i_1589& (0+255),b
 11098  000DE8                     l6624:
 11099                           
 11100                           ; BSR set to: 0
 11101  000DE8  0E63               	movlw	99
 11102  000DEA  0100               	movlb	0	; () banked
 11103  000DEC  65B7               	cpfsgt	actuatorTest@i_1589& (0+255),b
 11104  000DEE  D001               	goto	l6628
 11105  000DF0  D00C               	goto	l6632
 11106  000DF2                     l6628:
 11107                           
 11108                           ; BSR set to: 0
 11109  000DF2  0E68               	movlw	104
 11110  000DF4  0100               	movlb	0	; () banked
 11111  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11112  000DF8  0EE4               	movlw	228
 11113  000DFA                     u7547:
 11114  000DFA  2EE8               	decfsz	wreg,f,c
 11115  000DFC  D7FE               	bra	u7547
 11116  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11117  000E00  D7FC               	bra	u7547
 11118  000E02  F000               	nop	
 11119  000E04  0100               	movlb	0	; () banked
 11120  000E06  2BB7               	incf	actuatorTest@i_1589& (0+255),f,b
 11121  000E08  D7EF               	goto	l6624
 11122  000E0A                     l6632:
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;Test.c: 259: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11126  000E0A  0E80               	movlw	128
 11127  000E0C  EC0C  F021         	call	_lcdInst
 11128  000E10  0EC0               	movlw	192
 11129  000E12  EC0C  F021         	call	_lcdInst
 11130                           
 11131                           ;Test.c: 260: printf("MID -- 2s       ");
 11132  000E16  0EEF               	movlw	low STR_97
 11133  000E18  0100               	movlb	0	; () banked
 11134  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11135  000E1C  0EFB               	movlw	high STR_97
 11136  000E1E  0100               	movlb	0	; () banked
 11137  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11138  000E22  EC9C  F008         	call	_printf	;wreg free
 11139                           
 11140                           ;Test.c: 261: updateServoPosition(1500, 1);
 11141  000E26  0E05               	movlw	5
 11142  000E28  0100               	movlb	0	; () banked
 11143  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11144  000E2C  0EDC               	movlw	220
 11145  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11146  000E30  0E00               	movlw	0
 11147  000E32  0100               	movlb	0	; () banked
 11148  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11149  000E36  0E01               	movlw	1
 11150  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11151  000E3A  EC8F  F01B         	call	_updateServoPosition	;wreg free
 11152                           
 11153                           ;Test.c: 262: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11154  000E3E  0E00               	movlw	0
 11155  000E40  0100               	movlb	0	; () banked
 11156  000E42  6FB8               	movwf	actuatorTest@i_1591& (0+255),b
 11157  000E44                     l6640:
 11158                           
 11159                           ; BSR set to: 0
 11160  000E44  0E63               	movlw	99
 11161  000E46  0100               	movlb	0	; () banked
 11162  000E48  65B8               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11163  000E4A  D001               	goto	l6644
 11164  000E4C  D00C               	goto	l6648
 11165  000E4E                     l6644:
 11166                           
 11167                           ; BSR set to: 0
 11168  000E4E  0E68               	movlw	104
 11169  000E50  0100               	movlb	0	; () banked
 11170  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11171  000E54  0EE4               	movlw	228
 11172  000E56                     u7557:
 11173  000E56  2EE8               	decfsz	wreg,f,c
 11174  000E58  D7FE               	bra	u7557
 11175  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11176  000E5C  D7FC               	bra	u7557
 11177  000E5E  F000               	nop	
 11178  000E60  0100               	movlb	0	; () banked
 11179  000E62  2BB8               	incf	actuatorTest@i_1591& (0+255),f,b
 11180  000E64  D7EF               	goto	l6640
 11181  000E66                     l6648:
 11182                           
 11183                           ; BSR set to: 0
 11184  000E66  0E00               	movlw	0
 11185  000E68  0100               	movlb	0	; () banked
 11186  000E6A  6FB9               	movwf	actuatorTest@i_1592& (0+255),b
 11187  000E6C                     l6650:
 11188                           
 11189                           ; BSR set to: 0
 11190  000E6C  0E63               	movlw	99
 11191  000E6E  0100               	movlb	0	; () banked
 11192  000E70  65B9               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11193  000E72  D001               	goto	l6654
 11194  000E74  D00C               	goto	l1100
 11195  000E76                     l6654:
 11196                           
 11197                           ; BSR set to: 0
 11198  000E76  0E68               	movlw	104
 11199  000E78  0100               	movlb	0	; () banked
 11200  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11201  000E7C  0EE4               	movlw	228
 11202  000E7E                     u7567:
 11203  000E7E  2EE8               	decfsz	wreg,f,c
 11204  000E80  D7FE               	bra	u7567
 11205  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11206  000E84  D7FC               	bra	u7567
 11207  000E86  F000               	nop	
 11208  000E88  0100               	movlb	0	; () banked
 11209  000E8A  2BB9               	incf	actuatorTest@i_1592& (0+255),f,b
 11210  000E8C  D7EF               	goto	l6650
 11211  000E8E                     l1100:
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;Test.c: 263: TMR1ON = 0;
 11215  000E8E  90CD               	bcf	4045,0,c	;volatile
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;Test.c: 270: printf("TST: TILT SERVO");
 11219  000E90  0E41               	movlw	low STR_98
 11220  000E92  0100               	movlb	0	; () banked
 11221  000E94  6F8E               	movwf	printf@f& (0+255),b
 11222  000E96  0EFE               	movlw	high STR_98
 11223  000E98  0100               	movlb	0	; () banked
 11224  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11225  000E9C  EC9C  F008         	call	_printf	;wreg free
 11226                           
 11227                           ;Test.c: 271: lcdInst(0b11000000);;
 11228  000EA0  0EC0               	movlw	192
 11229  000EA2  EC0C  F021         	call	_lcdInst
 11230                           
 11231                           ;Test.c: 272: printf("LEVEL -- 2s     ");
 11232  000EA6  0E22               	movlw	low STR_99
 11233  000EA8  0100               	movlb	0	; () banked
 11234  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11235  000EAC  0EFC               	movlw	high STR_99
 11236  000EAE  0100               	movlb	0	; () banked
 11237  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11238  000EB2  EC9C  F008         	call	_printf	;wreg free
 11239                           
 11240                           ;Test.c: 273: updateServoPosition(1000, 3);
 11241  000EB6  0E03               	movlw	3
 11242  000EB8  0100               	movlb	0	; () banked
 11243  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11244  000EBC  0EE8               	movlw	232
 11245  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11246  000EC0  0E00               	movlw	0
 11247  000EC2  0100               	movlb	0	; () banked
 11248  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11249  000EC6  0E03               	movlw	3
 11250  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11251  000ECA  EC8F  F01B         	call	_updateServoPosition	;wreg free
 11252                           
 11253                           ;Test.c: 274: TMR3ON = 1;
 11254  000ECE  80B1               	bsf	4017,0,c	;volatile
 11255                           
 11256                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11257  000ED0  0E00               	movlw	0
 11258  000ED2  0100               	movlb	0	; () banked
 11259  000ED4  6FBA               	movwf	actuatorTest@i_1595& (0+255),b
 11260  000ED6                     l6668:
 11261                           
 11262                           ; BSR set to: 0
 11263  000ED6  0E63               	movlw	99
 11264  000ED8  0100               	movlb	0	; () banked
 11265  000EDA  65BA               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11266  000EDC  D001               	goto	l6672
 11267  000EDE  D00C               	goto	l6676
 11268  000EE0                     l6672:
 11269                           
 11270                           ; BSR set to: 0
 11271  000EE0  0E68               	movlw	104
 11272  000EE2  0100               	movlb	0	; () banked
 11273  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11274  000EE6  0EE4               	movlw	228
 11275  000EE8                     u7577:
 11276  000EE8  2EE8               	decfsz	wreg,f,c
 11277  000EEA  D7FE               	bra	u7577
 11278  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11279  000EEE  D7FC               	bra	u7577
 11280  000EF0  F000               	nop	
 11281  000EF2  0100               	movlb	0	; () banked
 11282  000EF4  2BBA               	incf	actuatorTest@i_1595& (0+255),f,b
 11283  000EF6  D7EF               	goto	l6668
 11284  000EF8                     l6676:
 11285                           
 11286                           ; BSR set to: 0
 11287  000EF8  0E00               	movlw	0
 11288  000EFA  0100               	movlb	0	; () banked
 11289  000EFC  6FBB               	movwf	actuatorTest@i_1596& (0+255),b
 11290  000EFE                     l6678:
 11291                           
 11292                           ; BSR set to: 0
 11293  000EFE  0E63               	movlw	99
 11294  000F00  0100               	movlb	0	; () banked
 11295  000F02  65BB               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11296  000F04  D001               	goto	l6682
 11297  000F06  D00C               	goto	l6686
 11298  000F08                     l6682:
 11299                           
 11300                           ; BSR set to: 0
 11301  000F08  0E68               	movlw	104
 11302  000F0A  0100               	movlb	0	; () banked
 11303  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11304  000F0E  0EE4               	movlw	228
 11305  000F10                     u7587:
 11306  000F10  2EE8               	decfsz	wreg,f,c
 11307  000F12  D7FE               	bra	u7587
 11308  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11309  000F16  D7FC               	bra	u7587
 11310  000F18  F000               	nop	
 11311  000F1A  0100               	movlb	0	; () banked
 11312  000F1C  2BBB               	incf	actuatorTest@i_1596& (0+255),f,b
 11313  000F1E  D7EF               	goto	l6678
 11314  000F20                     l6686:
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11318  000F20  0E80               	movlw	128
 11319  000F22  EC0C  F021         	call	_lcdInst
 11320  000F26  0EC0               	movlw	192
 11321  000F28  EC0C  F021         	call	_lcdInst
 11322                           
 11323                           ;Test.c: 278: printf("DROP -- 2s      ");
 11324  000F2C  0E00               	movlw	low STR_100
 11325  000F2E  0100               	movlb	0	; () banked
 11326  000F30  6F8E               	movwf	printf@f& (0+255),b
 11327  000F32  0EFC               	movlw	high STR_100
 11328  000F34  0100               	movlb	0	; () banked
 11329  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11330  000F38  EC9C  F008         	call	_printf	;wreg free
 11331                           
 11332                           ;Test.c: 279: updateServoPosition(1500, 3);
 11333  000F3C  0E05               	movlw	5
 11334  000F3E  0100               	movlb	0	; () banked
 11335  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11336  000F42  0EDC               	movlw	220
 11337  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11338  000F46  0E00               	movlw	0
 11339  000F48  0100               	movlb	0	; () banked
 11340  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11341  000F4C  0E03               	movlw	3
 11342  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11343  000F50  EC8F  F01B         	call	_updateServoPosition	;wreg free
 11344                           
 11345                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11346  000F54  0E00               	movlw	0
 11347  000F56  0100               	movlb	0	; () banked
 11348  000F58  6FBC               	movwf	actuatorTest@i_1598& (0+255),b
 11349  000F5A                     l6694:
 11350                           
 11351                           ; BSR set to: 0
 11352  000F5A  0E63               	movlw	99
 11353  000F5C  0100               	movlb	0	; () banked
 11354  000F5E  65BC               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11355  000F60  D001               	goto	l6698
 11356  000F62  D00C               	goto	l6702
 11357  000F64                     l6698:
 11358                           
 11359                           ; BSR set to: 0
 11360  000F64  0E68               	movlw	104
 11361  000F66  0100               	movlb	0	; () banked
 11362  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11363  000F6A  0EE4               	movlw	228
 11364  000F6C                     u7597:
 11365  000F6C  2EE8               	decfsz	wreg,f,c
 11366  000F6E  D7FE               	bra	u7597
 11367  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11368  000F72  D7FC               	bra	u7597
 11369  000F74  F000               	nop	
 11370  000F76  0100               	movlb	0	; () banked
 11371  000F78  2BBC               	incf	actuatorTest@i_1598& (0+255),f,b
 11372  000F7A  D7EF               	goto	l6694
 11373  000F7C                     l6702:
 11374                           
 11375                           ; BSR set to: 0
 11376  000F7C  0E00               	movlw	0
 11377  000F7E  0100               	movlb	0	; () banked
 11378  000F80  6FBD               	movwf	actuatorTest@i_1599& (0+255),b
 11379  000F82                     l6704:
 11380                           
 11381                           ; BSR set to: 0
 11382  000F82  0E63               	movlw	99
 11383  000F84  0100               	movlb	0	; () banked
 11384  000F86  65BD               	cpfsgt	actuatorTest@i_1599& (0+255),b
 11385  000F88  D001               	goto	l6708
 11386  000F8A  D00C               	goto	l6712
 11387  000F8C                     l6708:
 11388                           
 11389                           ; BSR set to: 0
 11390  000F8C  0E68               	movlw	104
 11391  000F8E  0100               	movlb	0	; () banked
 11392  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11393  000F92  0EE4               	movlw	228
 11394  000F94                     u7607:
 11395  000F94  2EE8               	decfsz	wreg,f,c
 11396  000F96  D7FE               	bra	u7607
 11397  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11398  000F9A  D7FC               	bra	u7607
 11399  000F9C  F000               	nop	
 11400  000F9E  0100               	movlb	0	; () banked
 11401  000FA0  2BBD               	incf	actuatorTest@i_1599& (0+255),f,b
 11402  000FA2  D7EF               	goto	l6704
 11403  000FA4                     l6712:
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11407  000FA4  0E80               	movlw	128
 11408  000FA6  EC0C  F021         	call	_lcdInst
 11409  000FAA  0EC0               	movlw	192
 11410  000FAC  EC0C  F021         	call	_lcdInst
 11411                           
 11412                           ;Test.c: 283: printf("LEVEL -- 2s     ");
 11413  000FB0  0E22               	movlw	low STR_99
 11414  000FB2  0100               	movlb	0	; () banked
 11415  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11416  000FB6  0EFC               	movlw	high STR_99
 11417  000FB8  0100               	movlb	0	; () banked
 11418  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11419  000FBC  EC9C  F008         	call	_printf	;wreg free
 11420                           
 11421                           ;Test.c: 284: updateServoPosition(1000, 3);
 11422  000FC0  0E03               	movlw	3
 11423  000FC2  0100               	movlb	0	; () banked
 11424  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11425  000FC6  0EE8               	movlw	232
 11426  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11427  000FCA  0E00               	movlw	0
 11428  000FCC  0100               	movlb	0	; () banked
 11429  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11430  000FD0  0E03               	movlw	3
 11431  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11432  000FD4  EC8F  F01B         	call	_updateServoPosition	;wreg free
 11433                           
 11434                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11435  000FD8  0E00               	movlw	0
 11436  000FDA  0100               	movlb	0	; () banked
 11437  000FDC  6FBE               	movwf	actuatorTest@i_1601& (0+255),b
 11438  000FDE                     l6720:
 11439                           
 11440                           ; BSR set to: 0
 11441  000FDE  0E63               	movlw	99
 11442  000FE0  0100               	movlb	0	; () banked
 11443  000FE2  65BE               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11444  000FE4  D001               	goto	l6724
 11445  000FE6  D00C               	goto	l6728
 11446  000FE8                     l6724:
 11447                           
 11448                           ; BSR set to: 0
 11449  000FE8  0E68               	movlw	104
 11450  000FEA  0100               	movlb	0	; () banked
 11451  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11452  000FEE  0EE4               	movlw	228
 11453  000FF0                     u7617:
 11454  000FF0  2EE8               	decfsz	wreg,f,c
 11455  000FF2  D7FE               	bra	u7617
 11456  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11457  000FF6  D7FC               	bra	u7617
 11458  000FF8  F000               	nop	
 11459  000FFA  0100               	movlb	0	; () banked
 11460  000FFC  2BBE               	incf	actuatorTest@i_1601& (0+255),f,b
 11461  000FFE  D7EF               	goto	l6720
 11462  001000                     l6728:
 11463                           
 11464                           ; BSR set to: 0
 11465  001000  0E00               	movlw	0
 11466  001002  0100               	movlb	0	; () banked
 11467  001004  6FBF               	movwf	actuatorTest@i_1602& (0+255),b
 11468  001006                     l6730:
 11469                           
 11470                           ; BSR set to: 0
 11471  001006  0E63               	movlw	99
 11472  001008  0100               	movlb	0	; () banked
 11473  00100A  65BF               	cpfsgt	actuatorTest@i_1602& (0+255),b
 11474  00100C  D001               	goto	l6734
 11475  00100E  D00C               	goto	l1112
 11476  001010                     l6734:
 11477                           
 11478                           ; BSR set to: 0
 11479  001010  0E68               	movlw	104
 11480  001012  0100               	movlb	0	; () banked
 11481  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11482  001016  0EE4               	movlw	228
 11483  001018                     u7627:
 11484  001018  2EE8               	decfsz	wreg,f,c
 11485  00101A  D7FE               	bra	u7627
 11486  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11487  00101E  D7FC               	bra	u7627
 11488  001020  F000               	nop	
 11489  001022  0100               	movlb	0	; () banked
 11490  001024  2BBF               	incf	actuatorTest@i_1602& (0+255),f,b
 11491  001026  D7EF               	goto	l6730
 11492  001028                     l1112:
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;Test.c: 287: TMR3ON = 0;
 11496  001028  90B1               	bcf	4017,0,c	;volatile
 11497                           
 11498                           ;Test.c: 288: (INTCONbits.GIE = 0);
 11499  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;Test.c: 293: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11503  00102C  0E01               	movlw	1
 11504  00102E  EC0C  F021         	call	_lcdInst
 11505  001032  0E68               	movlw	104
 11506  001034  0100               	movlb	0	; () banked
 11507  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11508  001038  0EE4               	movlw	228
 11509  00103A                     u7637:
 11510  00103A  2EE8               	decfsz	wreg,f,c
 11511  00103C  D7FE               	bra	u7637
 11512  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11513  001040  D7FC               	bra	u7637
 11514  001042  F000               	nop	
 11515  001044  0E80               	movlw	128
 11516  001046  EC0C  F021         	call	_lcdInst
 11517                           
 11518                           ;Test.c: 294: printf("TST: CAM SERVO");
 11519  00104A  0E9D               	movlw	low STR_102
 11520  00104C  0100               	movlb	0	; () banked
 11521  00104E  6F8E               	movwf	printf@f& (0+255),b
 11522  001050  0EFE               	movlw	high STR_102
 11523  001052  0100               	movlb	0	; () banked
 11524  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11525  001056  EC9C  F008         	call	_printf	;wreg free
 11526                           
 11527                           ;Test.c: 295: lcdInst(0b11000000);;
 11528  00105A  0EC0               	movlw	192
 11529  00105C  EC0C  F021         	call	_lcdInst
 11530                           
 11531                           ;Test.c: 296: printf("CAM UP  |RC0=1");
 11532  001060  0E7F               	movlw	low STR_103
 11533  001062  0100               	movlb	0	; () banked
 11534  001064  6F8E               	movwf	printf@f& (0+255),b
 11535  001066  0EFE               	movlw	high STR_103
 11536  001068  0100               	movlb	0	; () banked
 11537  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11538  00106C  EC9C  F008         	call	_printf	;wreg free
 11539                           
 11540                           ;Test.c: 297: LATCbits.LATC0 = 0;
 11541  001070  908B               	bcf	3979,0,c	;volatile
 11542                           
 11543                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11544  001072  0E00               	movlw	0
 11545  001074  0100               	movlb	0	; () banked
 11546  001076  6FC0               	movwf	actuatorTest@i_1605& (0+255),b
 11547  001078                     l6754:
 11548                           
 11549                           ; BSR set to: 0
 11550  001078  0E63               	movlw	99
 11551  00107A  0100               	movlb	0	; () banked
 11552  00107C  65C0               	cpfsgt	actuatorTest@i_1605& (0+255),b
 11553  00107E  D001               	goto	l6758
 11554  001080  D00C               	goto	l6762
 11555  001082                     l6758:
 11556                           
 11557                           ; BSR set to: 0
 11558  001082  0E68               	movlw	104
 11559  001084  0100               	movlb	0	; () banked
 11560  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11561  001088  0EE4               	movlw	228
 11562  00108A                     u7647:
 11563  00108A  2EE8               	decfsz	wreg,f,c
 11564  00108C  D7FE               	bra	u7647
 11565  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11566  001090  D7FC               	bra	u7647
 11567  001092  F000               	nop	
 11568  001094  0100               	movlb	0	; () banked
 11569  001096  2BC0               	incf	actuatorTest@i_1605& (0+255),f,b
 11570  001098  D7EF               	goto	l6754
 11571  00109A                     l6762:
 11572                           
 11573                           ; BSR set to: 0
 11574  00109A  0E00               	movlw	0
 11575  00109C  0100               	movlb	0	; () banked
 11576  00109E  6FC1               	movwf	actuatorTest@i_1606& (0+255),b
 11577  0010A0                     l6764:
 11578                           
 11579                           ; BSR set to: 0
 11580  0010A0  0E63               	movlw	99
 11581  0010A2  0100               	movlb	0	; () banked
 11582  0010A4  65C1               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11583  0010A6  D001               	goto	l6768
 11584  0010A8  D00C               	goto	l6772
 11585  0010AA                     l6768:
 11586                           
 11587                           ; BSR set to: 0
 11588  0010AA  0E68               	movlw	104
 11589  0010AC  0100               	movlb	0	; () banked
 11590  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11591  0010B0  0EE4               	movlw	228
 11592  0010B2                     u7657:
 11593  0010B2  2EE8               	decfsz	wreg,f,c
 11594  0010B4  D7FE               	bra	u7657
 11595  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11596  0010B8  D7FC               	bra	u7657
 11597  0010BA  F000               	nop	
 11598  0010BC  0100               	movlb	0	; () banked
 11599  0010BE  2BC1               	incf	actuatorTest@i_1606& (0+255),f,b
 11600  0010C0  D7EF               	goto	l6764
 11601  0010C2                     l6772:
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;Test.c: 299: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11605  0010C2  0E80               	movlw	128
 11606  0010C4  EC0C  F021         	call	_lcdInst
 11607  0010C8  0EC0               	movlw	192
 11608  0010CA  EC0C  F021         	call	_lcdInst
 11609                           
 11610                           ;Test.c: 300: LATCbits.LATC0 = 1;
 11611  0010CE  808B               	bsf	3979,0,c	;volatile
 11612                           
 11613                           ;Test.c: 301: printf("CAM DWN |RC0=0");
 11614  0010D0  0E70               	movlw	low STR_104
 11615  0010D2  0100               	movlb	0	; () banked
 11616  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11617  0010D6  0EFE               	movlw	high STR_104
 11618  0010D8  0100               	movlb	0	; () banked
 11619  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11620  0010DC  EC9C  F008         	call	_printf	;wreg free
 11621                           
 11622                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11623  0010E0  0E00               	movlw	0
 11624  0010E2  0100               	movlb	0	; () banked
 11625  0010E4  6FC2               	movwf	actuatorTest@i_1608& (0+255),b
 11626  0010E6                     l6780:
 11627                           
 11628                           ; BSR set to: 0
 11629  0010E6  0E63               	movlw	99
 11630  0010E8  0100               	movlb	0	; () banked
 11631  0010EA  65C2               	cpfsgt	actuatorTest@i_1608& (0+255),b
 11632  0010EC  D001               	goto	l6784
 11633  0010EE  D00C               	goto	l6788
 11634  0010F0                     l6784:
 11635                           
 11636                           ; BSR set to: 0
 11637  0010F0  0E68               	movlw	104
 11638  0010F2  0100               	movlb	0	; () banked
 11639  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11640  0010F6  0EE4               	movlw	228
 11641  0010F8                     u7667:
 11642  0010F8  2EE8               	decfsz	wreg,f,c
 11643  0010FA  D7FE               	bra	u7667
 11644  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11645  0010FE  D7FC               	bra	u7667
 11646  001100  F000               	nop	
 11647  001102  0100               	movlb	0	; () banked
 11648  001104  2BC2               	incf	actuatorTest@i_1608& (0+255),f,b
 11649  001106  D7EF               	goto	l6780
 11650  001108                     l6788:
 11651                           
 11652                           ; BSR set to: 0
 11653  001108  0E00               	movlw	0
 11654  00110A  0100               	movlb	0	; () banked
 11655  00110C  6FC3               	movwf	actuatorTest@i_1609& (0+255),b
 11656  00110E                     l6790:
 11657                           
 11658                           ; BSR set to: 0
 11659  00110E  0E63               	movlw	99
 11660  001110  0100               	movlb	0	; () banked
 11661  001112  65C3               	cpfsgt	actuatorTest@i_1609& (0+255),b
 11662  001114  D001               	goto	l6794
 11663  001116  D00C               	goto	l6798
 11664  001118                     l6794:
 11665                           
 11666                           ; BSR set to: 0
 11667  001118  0E68               	movlw	104
 11668  00111A  0100               	movlb	0	; () banked
 11669  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11670  00111E  0EE4               	movlw	228
 11671  001120                     u7677:
 11672  001120  2EE8               	decfsz	wreg,f,c
 11673  001122  D7FE               	bra	u7677
 11674  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11675  001126  D7FC               	bra	u7677
 11676  001128  F000               	nop	
 11677  00112A  0100               	movlb	0	; () banked
 11678  00112C  2BC3               	incf	actuatorTest@i_1609& (0+255),f,b
 11679  00112E  D7EF               	goto	l6790
 11680  001130                     l6798:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;Test.c: 303: machine_state = Testing_state;
 11684  001130  0E03               	movlw	3
 11685  001132  0100               	movlb	0	; () banked
 11686  001134  6FFC               	movwf	_machine_state& (0+255),b
 11687                           
 11688                           ; BSR set to: 0
 11689  001136  0012               	return		;funcret
 11690  001138                     __end_of_actuatorTest:
 11691                           	opt stack 0
 11692                           tblptru	equ	0xFF8
 11693                           tblptrh	equ	0xFF7
 11694                           tblptrl	equ	0xFF6
 11695                           tablat	equ	0xFF5
 11696                           prodh	equ	0xFF4
 11697                           prodl	equ	0xFF3
 11698                           intcon	equ	0xFF2
 11699                           intcon2	equ	0xFF1
 11700                           intcon3	equ	0xFF0
 11701                           postinc0	equ	0xFEE
 11702                           wreg	equ	0xFE8
 11703                           postdec1	equ	0xFE5
 11704                           fsr1l	equ	0xFE1
 11705                           indf2	equ	0xFDF
 11706                           postinc2	equ	0xFDE
 11707                           postdec2	equ	0xFDD
 11708                           fsr2h	equ	0xFDA
 11709                           fsr2l	equ	0xFD9
 11710                           status	equ	0xFD8
 11711                           
 11712 ;; *************** function _updateServoPosition *****************
 11713 ;; Defined at:
 11714 ;;		line 303 in file "sort.c"
 11715 ;; Parameters:    Size  Location     Type
 11716 ;;  time_us         2    0[BANK0 ] int 
 11717 ;;  timer           2    2[BANK0 ] int 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  my_time         2    6[BANK0 ] unsigned int 
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      void 
 11722 ;; Registers used:
 11723 ;;		wreg, status,2, status,0
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;Total ram usage:        8 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    7
 11736 ;; This function calls:
 11737 ;;		Nothing
 11738 ;; This function is called by:
 11739 ;;		_Distribution
 11740 ;;		_initServos
 11741 ;;		_actuatorTest
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           	psect	text41
 11746  00371E                     __ptext41:
 11747                           	opt stack 0
 11748  00371E                     _updateServoPosition:
 11749                           	opt stack 20
 11750                           
 11751                           ;sort.c: 304: unsigned int my_time = 65535 - time_us;
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;incstack = 0
 11755  00371E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11756  003722  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11757  003726  0100               	movlb	0	; () banked
 11758  003728  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11759  00372A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11760  00372C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11761  00372E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11762  003730  0EFF               	movlw	255
 11763  003732  0100               	movlb	0	; () banked
 11764  003734  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11765  003736  0100               	movlb	0	; () banked
 11766  003738  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11767  00373A  0EFF               	movlw	255
 11768  00373C  0100               	movlb	0	; () banked
 11769  00373E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11770  003740  0100               	movlb	0	; () banked
 11771  003742  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11772                           
 11773                           ;sort.c: 305: switch(timer){
 11774  003744  D015               	goto	l5396
 11775  003746                     l5394:
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;sort.c: 307: servoTimes[0] = my_time >> 8;
 11779  003746  0100               	movlb	0	; () banked
 11780  003748  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11781  00374A  0101               	movlb	1	; () banked
 11782  00374C  6F1C               	movwf	_servoTimes& (0+255),b
 11783  00374E  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11784                           
 11785                           ;sort.c: 308: servoTimes[1] = my_time & 0xFF;
 11786  003750  0100               	movlb	0	; () banked
 11787  003752  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11788  003754  0101               	movlb	1	; () banked
 11789  003756  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11790  003758  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11791  00375A                     l775:
 11792                           
 11793                           ;sort.c: 310: servoTimes[2] = my_time >> 8;
 11794  00375A  0100               	movlb	0	; () banked
 11795  00375C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11796  00375E  0101               	movlb	1	; () banked
 11797  003760  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11798  003762  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11799                           
 11800                           ;sort.c: 311: servoTimes[3] = my_time & 0xFF;
 11801  003764  0100               	movlb	0	; () banked
 11802  003766  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11803  003768  0101               	movlb	1	; () banked
 11804  00376A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11805  00376C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11806                           
 11807                           ;sort.c: 312: }
 11808  00376E  0012               	return	
 11809  003770                     l5396:
 11810  003770  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11811  003774  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11812                           
 11813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11814                           ; Switch size 1, requested type "space"
 11815                           ; Number of cases is 1, Range of values is 0 to 0
 11816                           ; switch strategies available:
 11817                           ; Name         Instructions Cycles
 11818                           ; simple_byte            4     3 (average)
 11819                           ;	Chosen strategy is simple_byte
 11820  003778  0100               	movlb	0	; () banked
 11821  00377A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11822  00377C  0A00               	xorlw	0	; case 0
 11823  00377E  A4D8               	btfss	status,2,c
 11824  003780  0012               	return	
 11825                           
 11826                           ; BSR set to: 0
 11827                           ; Switch size 1, requested type "space"
 11828                           ; Number of cases is 2, Range of values is 1 to 3
 11829                           ; switch strategies available:
 11830                           ; Name         Instructions Cycles
 11831                           ; simple_byte            7     4 (average)
 11832                           ;	Chosen strategy is simple_byte
 11833  003782  0100               	movlb	0	; () banked
 11834  003784  5184               	movf	??_updateServoPosition& (0+255),w,b
 11835  003786  0A01               	xorlw	1	; case 1
 11836  003788  B4D8               	btfsc	status,2,c
 11837  00378A  D7DD               	goto	l5394
 11838  00378C  0A02               	xorlw	2	; case 3
 11839  00378E  A4D8               	btfss	status,2,c
 11840  003790  0012               	return	
 11841  003792  D7E3               	goto	l775
 11842  003794                     __end_of_updateServoPosition:
 11843                           	opt stack 0
 11844                           tblptru	equ	0xFF8
 11845                           tblptrh	equ	0xFF7
 11846                           tblptrl	equ	0xFF6
 11847                           tablat	equ	0xFF5
 11848                           prodh	equ	0xFF4
 11849                           prodl	equ	0xFF3
 11850                           intcon	equ	0xFF2
 11851                           intcon2	equ	0xFF1
 11852                           intcon3	equ	0xFF0
 11853                           postinc0	equ	0xFEE
 11854                           wreg	equ	0xFE8
 11855                           postdec1	equ	0xFE5
 11856                           fsr1l	equ	0xFE1
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _ToggleTestA5 *****************
 11865 ;; Defined at:
 11866 ;;		line 399 in file "Test.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  on              2   44[BANK0 ] int 
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      void 
 11873 ;; Registers used:
 11874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        3 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:   10
 11887 ;; This function calls:
 11888 ;;		_lcdInst
 11889 ;;		_printf
 11890 ;; This function is called by:
 11891 ;;		_Test
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           	psect	text42
 11896  003514                     __ptext42:
 11897                           	opt stack 0
 11898  003514                     _ToggleTestA5:
 11899                           	opt stack 19
 11900                           
 11901                           ;Test.c: 400: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11902                           
 11903                           ;incstack = 0
 11904  003514  0E01               	movlw	1
 11905  003516  EC0C  F021         	call	_lcdInst
 11906  00351A  0E68               	movlw	104
 11907  00351C  0100               	movlb	0	; () banked
 11908  00351E  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11909  003520  0EE4               	movlw	228
 11910  003522                     u7687:
 11911  003522  2EE8               	decfsz	wreg,f,c
 11912  003524  D7FE               	bra	u7687
 11913  003526  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11914  003528  D7FC               	bra	u7687
 11915  00352A  F000               	nop	
 11916  00352C  0E80               	movlw	128
 11917  00352E  EC0C  F021         	call	_lcdInst
 11918                           
 11919                           ;Test.c: 401: printf("D WILL RETURN   ");
 11920  003532  0E55               	movlw	low STR_109
 11921  003534  0100               	movlb	0	; () banked
 11922  003536  6F8E               	movwf	printf@f& (0+255),b
 11923  003538  0EFC               	movlw	high STR_109
 11924  00353A  0100               	movlb	0	; () banked
 11925  00353C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11926  00353E  EC9C  F008         	call	_printf	;wreg free
 11927                           
 11928                           ;Test.c: 402: lcdInst(0b11000000);;
 11929  003542  0EC0               	movlw	192
 11930  003544  EC0C  F021         	call	_lcdInst
 11931                           
 11932                           ;Test.c: 403: printf("ELSE TOGGLES RA5");
 11933  003548  0E88               	movlw	low STR_110
 11934  00354A  0100               	movlb	0	; () banked
 11935  00354C  6F8E               	movwf	printf@f& (0+255),b
 11936  00354E  0EFC               	movlw	high STR_110
 11937  003550  0100               	movlb	0	; () banked
 11938  003552  6F8F               	movwf	(printf@f+1)& (0+255),b
 11939  003554  EC9C  F008         	call	_printf	;wreg free
 11940                           
 11941                           ;Test.c: 404: int on = 0;
 11942  003558  0E00               	movlw	0
 11943  00355A  0100               	movlb	0	; () banked
 11944  00355C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11945  00355E  0E00               	movlw	0
 11946  003560  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11947  003562                     l1175:
 11948  003562  A281               	btfss	3969,1,c	;volatile
 11949  003564  D7FE               	goto	l1175
 11950                           
 11951                           ;Test.c: 409: }
 11952                           ;Test.c: 410: if(PORTB >> 4 == 0b1111){
 11953  003566  3881               	swapf	3969,w,c	;volatile
 11954  003568  0B0F               	andlw	15
 11955  00356A  0A0F               	xorlw	15
 11956  00356C  B4D8               	btfsc	status,2,c
 11957  00356E  0012               	return	
 11958                           
 11959                           ;Test.c: 413: else{
 11960                           ;Test.c: 414: if(on == 0){
 11961                           
 11962                           ;Test.c: 412: }
 11963                           
 11964                           ;Test.c: 411: break;
 11965  003570  0100               	movlb	0	; () banked
 11966  003572  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11967  003574  0100               	movlb	0	; () banked
 11968  003576  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11969  003578  A4D8               	btfss	status,2,c
 11970  00357A  D007               	goto	l6844
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;Test.c: 415: on = 1;
 11974  00357C  0E00               	movlw	0
 11975  00357E  0100               	movlb	0	; () banked
 11976  003580  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11977  003582  0E01               	movlw	1
 11978  003584  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;Test.c: 416: LATAbits.LATA5 = 1;
 11982  003586  8A89               	bsf	3977,5,c	;volatile
 11983                           
 11984                           ;Test.c: 417: }
 11985  003588  D006               	goto	l1183
 11986  00358A                     l6844:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;Test.c: 418: else{
 11990                           ;Test.c: 419: on = 0;
 11991  00358A  0E00               	movlw	0
 11992  00358C  0100               	movlb	0	; () banked
 11993  00358E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11994  003590  0E00               	movlw	0
 11995  003592  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;Test.c: 420: LATAbits.LATA5 = 0;
 11999  003594  9A89               	bcf	3977,5,c	;volatile
 12000  003596                     l1183:
 12001  003596  A281               	btfss	3969,1,c	;volatile
 12002  003598  D7E4               	goto	l1175
 12003  00359A  D7FD               	goto	l1183
 12004  00359C                     __end_of_ToggleTestA5:
 12005                           	opt stack 0
 12006                           tblptru	equ	0xFF8
 12007                           tblptrh	equ	0xFF7
 12008                           tblptrl	equ	0xFF6
 12009                           tablat	equ	0xFF5
 12010                           prodh	equ	0xFF4
 12011                           prodl	equ	0xFF3
 12012                           intcon	equ	0xFF2
 12013                           intcon2	equ	0xFF1
 12014                           intcon3	equ	0xFF0
 12015                           postinc0	equ	0xFEE
 12016                           wreg	equ	0xFE8
 12017                           postdec1	equ	0xFE5
 12018                           fsr1l	equ	0xFE1
 12019                           indf2	equ	0xFDF
 12020                           postinc2	equ	0xFDE
 12021                           postdec2	equ	0xFDD
 12022                           fsr2h	equ	0xFDA
 12023                           fsr2l	equ	0xFD9
 12024                           status	equ	0xFD8
 12025                           
 12026 ;; *************** function _SolenoidTestA5 *****************
 12027 ;; Defined at:
 12028 ;;		line 375 in file "Test.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;		None
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  i               1   47[BANK0 ] unsigned char 
 12033 ;;  i               1   48[BANK0 ] unsigned char 
 12034 ;;  i               2   45[BANK0 ] int 
 12035 ;; Return value:  Size  Location     Type
 12036 ;;                  1    wreg      void 
 12037 ;; Registers used:
 12038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12039 ;; Tracked objects:
 12040 ;;		On entry : 0/0
 12041 ;;		On exit  : 0/0
 12042 ;;		Unchanged: 0/0
 12043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;Total ram usage:        6 bytes
 12049 ;; Hardware stack levels used:    1
 12050 ;; Hardware stack levels required when called:   10
 12051 ;; This function calls:
 12052 ;;		_lcdInst
 12053 ;;		_printf
 12054 ;; This function is called by:
 12055 ;;		_Test
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           	psect	text43
 12060  002D74                     __ptext43:
 12061                           	opt stack 0
 12062  002D74                     _SolenoidTestA5:
 12063                           	opt stack 19
 12064  002D74                     
 12065                           ;Test.c: 377: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12066  002D74  0E01               	movlw	1
 12067  002D76  EC0C  F021         	call	_lcdInst
 12068  002D7A  0E68               	movlw	104
 12069  002D7C  0100               	movlb	0	; () banked
 12070  002D7E  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12071  002D80  0EE4               	movlw	228
 12072  002D82                     u7697:
 12073  002D82  2EE8               	decfsz	wreg,f,c
 12074  002D84  D7FE               	bra	u7697
 12075  002D86  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12076  002D88  D7FC               	bra	u7697
 12077  002D8A  F000               	nop	
 12078  002D8C  0E80               	movlw	128
 12079  002D8E  EC0C  F021         	call	_lcdInst
 12080                           
 12081                           ;Test.c: 378: printf("SOLENOID TST");
 12082  002D92  0E49               	movlw	low STR_107
 12083  002D94  0100               	movlb	0	; () banked
 12084  002D96  6F8E               	movwf	printf@f& (0+255),b
 12085  002D98  0EFF               	movlw	high STR_107
 12086  002D9A  0100               	movlb	0	; () banked
 12087  002D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12088  002D9E  EC9C  F008         	call	_printf	;wreg free
 12089                           
 12090                           ;Test.c: 379: lcdInst(0b11000000);;
 12091  002DA2  0EC0               	movlw	192
 12092  002DA4  EC0C  F021         	call	_lcdInst
 12093  002DA8                     l1160:
 12094  002DA8  A281               	btfss	3969,1,c	;volatile
 12095  002DAA  D7FE               	goto	l1160
 12096                           
 12097                           ;Test.c: 384: }
 12098                           ;Test.c: 386: for(int i = 0; i < 3; i++){
 12099  002DAC  0E00               	movlw	0
 12100  002DAE  0100               	movlb	0	; () banked
 12101  002DB0  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12102  002DB2  0E00               	movlw	0
 12103  002DB4  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12104  002DB6                     l6860:
 12105                           
 12106                           ; BSR set to: 0
 12107  002DB6  0100               	movlb	0	; () banked
 12108  002DB8  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12109  002DBA  D008               	goto	l6864
 12110  002DBC  0100               	movlb	0	; () banked
 12111  002DBE  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12112  002DC0  E12D               	bnz	l6880
 12113  002DC2  0E03               	movlw	3
 12114  002DC4  0100               	movlb	0	; () banked
 12115  002DC6  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12116  002DC8  B0D8               	btfsc	status,0,c
 12117  002DCA  D028               	goto	l6880
 12118  002DCC                     l6864:
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;Test.c: 387: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12122  002DCC  0E00               	movlw	0
 12123  002DCE  0100               	movlb	0	; () banked
 12124  002DD0  6FAF               	movwf	SolenoidTestA5@i_1620& (0+255),b
 12125  002DD2                     l6866:
 12126                           
 12127                           ; BSR set to: 0
 12128  002DD2  0E63               	movlw	99
 12129  002DD4  0100               	movlb	0	; () banked
 12130  002DD6  65AF               	cpfsgt	SolenoidTestA5@i_1620& (0+255),b
 12131  002DD8  D001               	goto	l6870
 12132  002DDA  D00C               	goto	l1166
 12133  002DDC                     l6870:
 12134                           
 12135                           ; BSR set to: 0
 12136  002DDC  0E68               	movlw	104
 12137  002DDE  0100               	movlb	0	; () banked
 12138  002DE0  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12139  002DE2  0EE4               	movlw	228
 12140  002DE4                     u7707:
 12141  002DE4  2EE8               	decfsz	wreg,f,c
 12142  002DE6  D7FE               	bra	u7707
 12143  002DE8  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12144  002DEA  D7FC               	bra	u7707
 12145  002DEC  F000               	nop	
 12146  002DEE  0100               	movlb	0	; () banked
 12147  002DF0  2BAF               	incf	SolenoidTestA5@i_1620& (0+255),f,b
 12148  002DF2  D7EF               	goto	l6866
 12149  002DF4                     l1166:
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;Test.c: 388: LATAbits.LATA5 = 1;
 12153  002DF4  8A89               	bsf	3977,5,c	;volatile
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Test.c: 389: _delay((unsigned long)((150)*(32000000/4000.0)));
 12157  002DF6  0E07               	movlw	7
 12158  002DF8  0100               	movlb	0	; () banked
 12159  002DFA  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12160  002DFC  0E17               	movlw	23
 12161  002DFE  0100               	movlb	0	; () banked
 12162  002E00  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12163  002E02  0E6A               	movlw	106
 12164  002E04                     u7717:
 12165  002E04  2EE8               	decfsz	wreg,f,c
 12166  002E06  D7FE               	bra	u7717
 12167  002E08  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12168  002E0A  D7FC               	bra	u7717
 12169  002E0C  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12170  002E0E  D7FA               	bra	u7717
 12171  002E10  F000               	nop	
 12172                           
 12173                           ;Test.c: 390: LATAbits.LATA5 = 0;
 12174  002E12  9A89               	bcf	3977,5,c	;volatile
 12175  002E14  0100               	movlb	0	; () banked
 12176  002E16  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12177  002E18  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12178  002E1A  D7CD               	goto	l6860
 12179  002E1C                     l6880:
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;Test.c: 391: }
 12183                           ;Test.c: 393: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12184  002E1C  0E01               	movlw	1
 12185  002E1E  EC0C  F021         	call	_lcdInst
 12186  002E22  0E68               	movlw	104
 12187  002E24  0100               	movlb	0	; () banked
 12188  002E26  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12189  002E28  0EE4               	movlw	228
 12190  002E2A                     u7727:
 12191  002E2A  2EE8               	decfsz	wreg,f,c
 12192  002E2C  D7FE               	bra	u7727
 12193  002E2E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12194  002E30  D7FC               	bra	u7727
 12195  002E32  F000               	nop	
 12196  002E34  0E80               	movlw	128
 12197  002E36  EC0C  F021         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 394: printf("PUSH DONE");
 12200  002E3A  0E90               	movlw	low STR_108
 12201  002E3C  0100               	movlb	0	; () banked
 12202  002E3E  6F8E               	movwf	printf@f& (0+255),b
 12203  002E40  0EFF               	movlw	high STR_108
 12204  002E42  0100               	movlb	0	; () banked
 12205  002E44  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  002E46  EC9C  F008         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 395: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12209  002E4A  0E00               	movlw	0
 12210  002E4C  0100               	movlb	0	; () banked
 12211  002E4E  6FB0               	movwf	SolenoidTestA5@i_1622& (0+255),b
 12212  002E50                     l6890:
 12213                           
 12214                           ; BSR set to: 0
 12215  002E50  0E63               	movlw	99
 12216  002E52  0100               	movlb	0	; () banked
 12217  002E54  65B0               	cpfsgt	SolenoidTestA5@i_1622& (0+255),b
 12218  002E56  D001               	goto	l6894
 12219  002E58  D78D               	goto	l6848
 12220  002E5A                     l6894:
 12221                           
 12222                           ; BSR set to: 0
 12223  002E5A  0E68               	movlw	104
 12224  002E5C  0100               	movlb	0	; () banked
 12225  002E5E  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12226  002E60  0EE4               	movlw	228
 12227  002E62                     u7737:
 12228  002E62  2EE8               	decfsz	wreg,f,c
 12229  002E64  D7FE               	bra	u7737
 12230  002E66  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12231  002E68  D7FC               	bra	u7737
 12232  002E6A  F000               	nop	
 12233  002E6C  0100               	movlb	0	; () banked
 12234  002E6E  2BB0               	incf	SolenoidTestA5@i_1622& (0+255),f,b
 12235  002E70  D7EF               	goto	l6890
 12236  002E72                     __end_of_SolenoidTestA5:
 12237                           	opt stack 0
 12238                           tblptru	equ	0xFF8
 12239                           tblptrh	equ	0xFF7
 12240                           tblptrl	equ	0xFF6
 12241                           tablat	equ	0xFF5
 12242                           prodh	equ	0xFF4
 12243                           prodl	equ	0xFF3
 12244                           intcon	equ	0xFF2
 12245                           intcon2	equ	0xFF1
 12246                           intcon3	equ	0xFF0
 12247                           postinc0	equ	0xFEE
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function _PortTests *****************
 12259 ;; Defined at:
 12260 ;;		line 306 in file "Test.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;		None
 12263 ;; Auto vars:     Size  Location     Type
 12264 ;;		None
 12265 ;; Return value:  Size  Location     Type
 12266 ;;                  1    wreg      void 
 12267 ;; Registers used:
 12268 ;;		wreg, status,2, status,0
 12269 ;; Tracked objects:
 12270 ;;		On entry : 0/0
 12271 ;;		On exit  : 0/0
 12272 ;;		Unchanged: 0/0
 12273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12278 ;;Total ram usage:        2 bytes
 12279 ;; Hardware stack levels used:    1
 12280 ;; Hardware stack levels required when called:    7
 12281 ;; This function calls:
 12282 ;;		Nothing
 12283 ;; This function is called by:
 12284 ;;		_Test
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           	psect	text44
 12289  003622                     __ptext44:
 12290                           	opt stack 0
 12291  003622                     _PortTests:
 12292                           	opt stack 22
 12293  003622                     l1125:
 12294  003622  A281               	btfss	3969,1,c	;volatile
 12295  003624  D7FE               	goto	l1125
 12296                           
 12297                           ;Test.c: 310: var = PORTB >> 4;
 12298  003626  CF81 F080          	movff	3969,??_PortTests	;volatile
 12299  00362A  0100               	movlb	0	; () banked
 12300  00362C  3B80               	swapf	??_PortTests& (0+255),f,b
 12301  00362E  0E0F               	movlw	15
 12302  003630  1780               	andwf	??_PortTests& (0+255),f,b
 12303  003632  0100               	movlb	0	; () banked
 12304  003634  5180               	movf	??_PortTests& (0+255),w,b
 12305  003636  0100               	movlb	0	; () banked
 12306  003638  6FFA               	movwf	_var& (0+255),b
 12307  00363A  6BFB               	clrf	(_var+1)& (0+255),b
 12308                           
 12309                           ;Test.c: 311: switch(var){
 12310  00363C  D00C               	goto	l6902
 12311  00363E                     l1129:
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;Test.c: 313: LATEbits.LATE0 = 1;
 12315  00363E  808D               	bsf	3981,0,c	;volatile
 12316                           
 12317                           ;Test.c: 314: break;
 12318  003640  D027               	goto	l1137
 12319  003642                     l1131:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Test.c: 316: LATEbits.LATE1 = 1;
 12323  003642  828D               	bsf	3981,1,c	;volatile
 12324                           
 12325                           ;Test.c: 317: break;
 12326  003644  D025               	goto	l1137
 12327  003646                     l1132:
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;Test.c: 319: LATDbits.LATD0 = 1;
 12331  003646  808C               	bsf	3980,0,c	;volatile
 12332                           
 12333                           ;Test.c: 320: break;
 12334  003648  D023               	goto	l1137
 12335  00364A                     l1133:
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;Test.c: 322: LATAbits.LATA3 = 1;
 12339  00364A  8689               	bsf	3977,3,c	;volatile
 12340                           
 12341                           ;Test.c: 323: break;
 12342  00364C  D021               	goto	l1137
 12343  00364E                     l1134:
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;Test.c: 325: LATAbits.LATA4 = 1;
 12347  00364E  8889               	bsf	3977,4,c	;volatile
 12348                           
 12349                           ;Test.c: 326: break;
 12350  003650  D01F               	goto	l1137
 12351  003652                     l1135:
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;Test.c: 328: LATAbits.LATA5 = 1;
 12355  003652  8A89               	bsf	3977,5,c	;volatile
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;Test.c: 332: }
 12359                           
 12360                           ; BSR set to: 0
 12361                           ;Test.c: 331: break;
 12362                           
 12363                           ;Test.c: 330: default:
 12364                           
 12365                           ;Test.c: 329: break;
 12366  003654  D01D               	goto	l1137
 12367  003656                     l6902:
 12368                           
 12369                           ; BSR set to: 0
 12370  003656  C0FA  F080         	movff	_var,??_PortTests
 12371  00365A  C0FB  F081         	movff	_var+1,??_PortTests+1
 12372                           
 12373                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12374                           ; Switch size 1, requested type "space"
 12375                           ; Number of cases is 1, Range of values is 0 to 0
 12376                           ; switch strategies available:
 12377                           ; Name         Instructions Cycles
 12378                           ; simple_byte            4     3 (average)
 12379                           ;	Chosen strategy is simple_byte
 12380  00365E  0100               	movlb	0	; () banked
 12381  003660  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12382  003662  0A00               	xorlw	0	; case 0
 12383  003664  A4D8               	btfss	status,2,c
 12384  003666  D014               	goto	l1137
 12385                           
 12386                           ; BSR set to: 0
 12387                           ; Switch size 1, requested type "space"
 12388                           ; Number of cases is 6, Range of values is 0 to 5
 12389                           ; switch strategies available:
 12390                           ; Name         Instructions Cycles
 12391                           ; simple_byte           19    10 (average)
 12392                           ;	Chosen strategy is simple_byte
 12393  003668  0100               	movlb	0	; () banked
 12394  00366A  5180               	movf	??_PortTests& (0+255),w,b
 12395  00366C  0A00               	xorlw	0	; case 0
 12396  00366E  B4D8               	btfsc	status,2,c
 12397  003670  D7E6               	goto	l1129
 12398  003672  0A01               	xorlw	1	; case 1
 12399  003674  B4D8               	btfsc	status,2,c
 12400  003676  D7E5               	goto	l1131
 12401  003678  0A03               	xorlw	3	; case 2
 12402  00367A  B4D8               	btfsc	status,2,c
 12403  00367C  D7E4               	goto	l1132
 12404  00367E  0A01               	xorlw	1	; case 3
 12405  003680  B4D8               	btfsc	status,2,c
 12406  003682  D7E3               	goto	l1133
 12407  003684  0A07               	xorlw	7	; case 4
 12408  003686  B4D8               	btfsc	status,2,c
 12409  003688  D7E2               	goto	l1134
 12410  00368A  0A01               	xorlw	1	; case 5
 12411  00368C  B4D8               	btfsc	status,2,c
 12412  00368E  D7E1               	goto	l1135
 12413  003690                     l1137:
 12414  003690  B281               	btfsc	3969,1,c	;volatile
 12415  003692  D7FE               	goto	l1137
 12416                           
 12417                           ;Test.c: 334: __nop();
 12418  003694  F000               	nop	
 12419                           
 12420                           ;Test.c: 335: __nop();
 12421  003696  F000               	nop	
 12422                           
 12423                           ;Test.c: 336: LATA = 0x00;
 12424  003698  0E00               	movlw	0
 12425  00369A  6E89               	movwf	3977,c	;volatile
 12426                           
 12427                           ;Test.c: 337: LATE = 0x00;
 12428  00369C  0E00               	movlw	0
 12429  00369E  6E8D               	movwf	3981,c	;volatile
 12430                           
 12431                           ;Test.c: 338: LATD = 0x00; }
 12432  0036A0  0E00               	movlw	0
 12433  0036A2  6E8C               	movwf	3980,c	;volatile
 12434  0036A4  D7BE               	goto	l1125
 12435  0036A6                     __end_of_PortTests:
 12436                           	opt stack 0
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           intcon2	equ	0xFF1
 12445                           intcon3	equ	0xFF0
 12446                           postinc0	equ	0xFEE
 12447                           wreg	equ	0xFE8
 12448                           postdec1	equ	0xFE5
 12449                           fsr1l	equ	0xFE1
 12450                           indf2	equ	0xFDF
 12451                           postinc2	equ	0xFDE
 12452                           postdec2	equ	0xFDD
 12453                           fsr2h	equ	0xFDA
 12454                           fsr2l	equ	0xFD9
 12455                           status	equ	0xFD8
 12456                           
 12457 ;; *************** function _PortTestA5 *****************
 12458 ;; Defined at:
 12459 ;;		line 341 in file "Test.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;		None
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;Total ram usage:        1 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:   10
 12480 ;; This function calls:
 12481 ;;		_lcdInst
 12482 ;;		_printf
 12483 ;; This function is called by:
 12484 ;;		_Test
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487                           
 12488                           	psect	text45
 12489  003998                     __ptext45:
 12490                           	opt stack 0
 12491  003998                     _PortTestA5:
 12492                           	opt stack 19
 12493                           
 12494                           ;Test.c: 342: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12495                           
 12496                           ;incstack = 0
 12497  003998  0E01               	movlw	1
 12498  00399A  EC0C  F021         	call	_lcdInst
 12499  00399E  0E68               	movlw	104
 12500  0039A0  0100               	movlb	0	; () banked
 12501  0039A2  6FAB               	movwf	??_PortTestA5& (0+255),b
 12502  0039A4  0EE4               	movlw	228
 12503  0039A6                     u7747:
 12504  0039A6  2EE8               	decfsz	wreg,f,c
 12505  0039A8  D7FE               	bra	u7747
 12506  0039AA  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12507  0039AC  D7FC               	bra	u7747
 12508  0039AE  F000               	nop	
 12509  0039B0  0E80               	movlw	128
 12510  0039B2  EC0C  F021         	call	_lcdInst
 12511                           
 12512                           ;Test.c: 343: printf("D WILL RETURN    ");
 12513  0039B6  0EA7               	movlw	low STR_105
 12514  0039B8  0100               	movlb	0	; () banked
 12515  0039BA  6F8E               	movwf	printf@f& (0+255),b
 12516  0039BC  0EFB               	movlw	high STR_105
 12517  0039BE  0100               	movlb	0	; () banked
 12518  0039C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12519  0039C2  EC9C  F008         	call	_printf	;wreg free
 12520                           
 12521                           ;Test.c: 344: lcdInst(0b11000000);;
 12522  0039C6  0EC0               	movlw	192
 12523  0039C8  EC0C  F021         	call	_lcdInst
 12524                           
 12525                           ;Test.c: 345: printf("OTHER SETS RA5   ");
 12526  0039CC  0EB9               	movlw	low STR_106
 12527  0039CE  0100               	movlb	0	; () banked
 12528  0039D0  6F8E               	movwf	printf@f& (0+255),b
 12529  0039D2  0EFB               	movlw	high STR_106
 12530  0039D4  0100               	movlb	0	; () banked
 12531  0039D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12532  0039D8  EC9C  F008         	call	_printf	;wreg free
 12533  0039DC                     l1146:
 12534  0039DC  A281               	btfss	3969,1,c	;volatile
 12535  0039DE  D7FE               	goto	l1146
 12536                           
 12537                           ;Test.c: 350: }
 12538                           ;Test.c: 351: if(PORTB >> 4 == 0b1111){
 12539  0039E0  3881               	swapf	3969,w,c	;volatile
 12540  0039E2  0B0F               	andlw	15
 12541  0039E4  0A0F               	xorlw	15
 12542  0039E6  B4D8               	btfsc	status,2,c
 12543  0039E8  0012               	return	
 12544                           
 12545                           ;Test.c: 354: else{
 12546                           ;Test.c: 355: LATAbits.LATA5 = 1;
 12547                           
 12548                           ;Test.c: 353: }
 12549                           
 12550                           ;Test.c: 352: break;
 12551  0039EA  8A89               	bsf	3977,5,c	;volatile
 12552  0039EC                     l1152:
 12553  0039EC  B281               	btfsc	3969,1,c	;volatile
 12554  0039EE  D7FE               	goto	l1152
 12555                           
 12556                           ;Test.c: 358: }
 12557                           ;Test.c: 370: LATAbits.LATA5 = 0;
 12558  0039F0  9A89               	bcf	3977,5,c	;volatile
 12559  0039F2  D7F4               	goto	l1146
 12560  0039F4                     __end_of_PortTestA5:
 12561                           	opt stack 0
 12562                           tblptru	equ	0xFF8
 12563                           tblptrh	equ	0xFF7
 12564                           tblptrl	equ	0xFF6
 12565                           tablat	equ	0xFF5
 12566                           prodh	equ	0xFF4
 12567                           prodl	equ	0xFF3
 12568                           intcon	equ	0xFF2
 12569                           intcon2	equ	0xFF1
 12570                           intcon3	equ	0xFF0
 12571                           postinc0	equ	0xFEE
 12572                           wreg	equ	0xFE8
 12573                           postdec1	equ	0xFE5
 12574                           fsr1l	equ	0xFE1
 12575                           indf2	equ	0xFDF
 12576                           postinc2	equ	0xFDE
 12577                           postdec2	equ	0xFDD
 12578                           fsr2h	equ	0xFDA
 12579                           fsr2l	equ	0xFD9
 12580                           status	equ	0xFD8
 12581                           
 12582 ;; *************** function _printf *****************
 12583 ;; Defined at:
 12584 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12587 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 12588 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 12589 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 12590 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 12591 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 12592 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 12593 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 12594 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 12595 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 12596 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 12597 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 12598 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 12599 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 12600 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 12601 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 12602 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 12603 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12604 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 12605 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 12606 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 12607 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 12608 ;;		 -> STR_1(18), 
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;  tmpval          4    0        struct .
 12611 ;;  width           2   41[BANK0 ] int 
 12612 ;;  val             2   37[BANK0 ] unsigned int 
 12613 ;;  len             2   35[BANK0 ] unsigned int 
 12614 ;;  ap              2   33[BANK0 ] PTR void [1]
 12615 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12616 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12617 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 12618 ;;  c               1   40[BANK0 ] char 
 12619 ;;  flag            1   39[BANK0 ] unsigned char 
 12620 ;;  prec            1   30[BANK0 ] char 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  2   14[BANK0 ] int 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12630 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;Total ram usage:       29 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    9
 12637 ;; This function calls:
 12638 ;;		___lwdiv
 12639 ;;		___lwmod
 12640 ;;		___wmul
 12641 ;;		_isdigit
 12642 ;;		_putch
 12643 ;; This function is called by:
 12644 ;;		_UI
 12645 ;;		_change_state_to_menu_start
 12646 ;;		_change_state_to_menu_12
 12647 ;;		_change_state_to_menu_22
 12648 ;;		_printRTC
 12649 ;;		_EEPROM_write
 12650 ;;		_Test
 12651 ;;		_algorithmTest
 12652 ;;		_sensorTest
 12653 ;;		_actuatorTest
 12654 ;;		_PortTestA5
 12655 ;;		_SolenoidTestA5
 12656 ;;		_ToggleTestA5
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text46
 12661  001138                     __ptext46:
 12662                           	opt stack 0
 12663  001138                     _printf:
 12664                           	opt stack 18
 12665                           
 12666                           ;doprnt.c: 466: va_list ap;
 12667                           ;doprnt.c: 499: signed char c;
 12668                           ;doprnt.c: 501: int width;
 12669                           ;doprnt.c: 506: signed char prec;
 12670                           ;doprnt.c: 508: unsigned char flag;
 12671                           ;doprnt.c: 523: union {
 12672                           ;doprnt.c: 524: unsigned long vd;
 12673                           ;doprnt.c: 525: double integ;
 12674                           ;doprnt.c: 526: } tmpval;
 12675                           ;doprnt.c: 528: unsigned int val;
 12676                           ;doprnt.c: 529: unsigned len;
 12677                           ;doprnt.c: 530: const char * cp;
 12678                           ;doprnt.c: 533: *ap = __va_start();
 12679                           
 12680                           ;incstack = 0
 12681  001138  0E90               	movlw	low (?_printf+2)
 12682  00113A  0100               	movlb	0	; () banked
 12683  00113C  6FA1               	movwf	printf@ap& (0+255),b
 12684  00113E  0E00               	movlw	high (?_printf+2)
 12685  001140  0100               	movlb	0	; () banked
 12686  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12687                           
 12688                           ;doprnt.c: 536: while(c = *f++) {
 12689  001144  D205               	goto	l5354
 12690  001146                     l5224:
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;doprnt.c: 538: if(c != '%')
 12694  001146  0E25               	movlw	37
 12695  001148  0100               	movlb	0	; () banked
 12696  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 12697  00114C  B4D8               	btfsc	status,2,c
 12698  00114E  D005               	goto	l5228
 12699                           
 12700                           ; BSR set to: 0
 12701                           ;doprnt.c: 540: {
 12702                           ;doprnt.c: 541: (putch(c) );
 12703  001150  0100               	movlb	0	; () banked
 12704  001152  51A8               	movf	printf@c& (0+255),w,b
 12705  001154  EC04  F021         	call	_putch
 12706                           
 12707                           ;doprnt.c: 542: continue;
 12708  001158  D1FB               	goto	l5354
 12709  00115A                     l5228:
 12710                           
 12711                           ;doprnt.c: 543: }
 12712                           ;doprnt.c: 546: width = 0;
 12713  00115A  0E00               	movlw	0
 12714  00115C  0100               	movlb	0	; () banked
 12715  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 12716  001160  0E00               	movlw	0
 12717  001162  6FA9               	movwf	printf@width& (0+255),b
 12718                           
 12719                           ;doprnt.c: 548: flag = 0;
 12720  001164  0E00               	movlw	0
 12721  001166  0100               	movlb	0	; () banked
 12722  001168  6FA7               	movwf	printf@flag& (0+255),b
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;doprnt.c: 551: switch(*f) {
 12726                           
 12727                           ;doprnt.c: 550: for(;;) {
 12728  00116A  D005               	goto	l5234
 12729  00116C                     l5230:
 12730                           
 12731                           ;doprnt.c: 580: flag |= 0x04;
 12732  00116C  0100               	movlb	0	; () banked
 12733  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 12734                           
 12735                           ;doprnt.c: 581: f++;
 12736  001170  0100               	movlb	0	; () banked
 12737  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 12738  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12739  001176                     l5234:
 12740  001176  C08E  FFF6         	movff	printf@f,tblptrl
 12741  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 12742  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12743  00117E  6AF8               	clrf	tblptru,c
 12744  001180                     	endif
 12745  001180                     	if	0	;tblptru may be non-zero
 12746  001180                     	endif
 12747  001180  0008               	tblrd		*
 12748  001182  50F5               	movf	tablat,w,c
 12749                           
 12750                           ; Switch size 1, requested type "space"
 12751                           ; Number of cases is 1, Range of values is 48 to 48
 12752                           ; switch strategies available:
 12753                           ; Name         Instructions Cycles
 12754                           ; simple_byte            4     3 (average)
 12755                           ;	Chosen strategy is simple_byte
 12756  001184  0A30               	xorlw	48	; case 48
 12757  001186  B4D8               	btfsc	status,2,c
 12758  001188  D7F1               	goto	l5230
 12759                           
 12760                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12761                           
 12762                           ;doprnt.c: 586: }
 12763                           
 12764                           ;doprnt.c: 585: break;
 12765  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 12766  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12767  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12768  001192  6AF8               	clrf	tblptru,c
 12769  001194                     	endif
 12770  001194                     	if	0	;tblptru may be non-zero
 12771  001194                     	endif
 12772  001194  0008               	tblrd		*
 12773  001196  50F5               	movf	tablat,w,c
 12774  001198  EC17  F020         	call	_isdigit
 12775  00119C  A0D8               	btfss	status,0,c
 12776  00119E  D0D2               	goto	l5282
 12777                           
 12778                           ;doprnt.c: 598: width = 0;
 12779  0011A0  0E00               	movlw	0
 12780  0011A2  0100               	movlb	0	; () banked
 12781  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12782  0011A6  0E00               	movlw	0
 12783  0011A8  6FA9               	movwf	printf@width& (0+255),b
 12784  0011AA                     l5240:
 12785                           
 12786                           ;doprnt.c: 600: width *= 10;
 12787  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12788  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12789  0011B2  0E00               	movlw	0
 12790  0011B4  0100               	movlb	0	; () banked
 12791  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12792  0011B8  0E0A               	movlw	10
 12793  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12794  0011BC  ECB1  F01E         	call	___wmul	;wreg free
 12795  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 12796  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12797                           
 12798                           ;doprnt.c: 601: width += *f++ - '0';
 12799  0011C8  0ED0               	movlw	208
 12800  0011CA  0100               	movlb	0	; () banked
 12801  0011CC  6F9A               	movwf	??_printf& (0+255),b
 12802  0011CE  0EFF               	movlw	255
 12803  0011D0  0100               	movlb	0	; () banked
 12804  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 12805  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 12806  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 12807  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12808  0011DC  6AF8               	clrf	tblptru,c
 12809  0011DE                     	endif
 12810  0011DE                     	if	0	;tblptru may be non-zero
 12811  0011DE                     	endif
 12812  0011DE  0008               	tblrd		*
 12813  0011E0  50F5               	movf	tablat,w,c
 12814  0011E2  0100               	movlb	0	; () banked
 12815  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 12816  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 12817  0011E8  0100               	movlb	0	; () banked
 12818  0011EA  519A               	movf	??_printf& (0+255),w,b
 12819  0011EC  0100               	movlb	0	; () banked
 12820  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 12821  0011F0  0100               	movlb	0	; () banked
 12822  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 12823  0011F4  0100               	movlb	0	; () banked
 12824  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12825  0011F8  0100               	movlb	0	; () banked
 12826  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 12827  0011FC  0100               	movlb	0	; () banked
 12828  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 12829  001200  0100               	movlb	0	; () banked
 12830  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 12831  001204  0100               	movlb	0	; () banked
 12832  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12833                           
 12834                           ; BSR set to: 0
 12835  001208  0100               	movlb	0	; () banked
 12836  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 12837  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12841  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 12842  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 12843  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12844  001216  6AF8               	clrf	tblptru,c
 12845  001218                     	endif
 12846  001218                     	if	0	;tblptru may be non-zero
 12847  001218                     	endif
 12848  001218  0008               	tblrd		*
 12849  00121A  50F5               	movf	tablat,w,c
 12850  00121C  EC17  F020         	call	_isdigit
 12851  001220  A0D8               	btfss	status,0,c
 12852  001222  D090               	goto	l5282
 12853  001224  D7C2               	goto	l5240
 12854  001226                     l5248:
 12855                           
 12856                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12857  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 12858  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12859  00122E  CFDE F09F          	movff	postinc2,printf@cp
 12860  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 12861  001236  0E02               	movlw	2
 12862  001238  0100               	movlb	0	; () banked
 12863  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 12864  00123C  0E00               	movlw	0
 12865  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;doprnt.c: 740: if(!cp)
 12869  001240  0100               	movlb	0	; () banked
 12870  001242  519F               	movf	printf@cp& (0+255),w,b
 12871  001244  0100               	movlb	0	; () banked
 12872  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12873  001248  A4D8               	btfss	status,2,c
 12874  00124A  D006               	goto	l5256
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;doprnt.c: 741: cp = "(null)";
 12878  00124C  0EB6               	movlw	low STR_111
 12879  00124E  0100               	movlb	0	; () banked
 12880  001250  6F9F               	movwf	printf@cp& (0+255),b
 12881  001252  0EFF               	movlw	high STR_111
 12882  001254  0100               	movlb	0	; () banked
 12883  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12884  001258                     l5256:
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;doprnt.c: 745: len = 0;
 12888  001258  0E00               	movlw	0
 12889  00125A  0100               	movlb	0	; () banked
 12890  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 12891  00125E  0E00               	movlw	0
 12892  001260  6FA3               	movwf	printf@len& (0+255),b
 12893                           
 12894                           ;doprnt.c: 746: while(cp[len])
 12895  001262  D003               	goto	l5260
 12896  001264                     l5258:
 12897                           
 12898                           ;doprnt.c: 747: len++;
 12899  001264  0100               	movlb	0	; () banked
 12900  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 12901  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12902  00126A                     l5260:
 12903                           
 12904                           ; BSR set to: 0
 12905  00126A  0100               	movlb	0	; () banked
 12906  00126C  51A3               	movf	printf@len& (0+255),w,b
 12907  00126E  0100               	movlb	0	; () banked
 12908  001270  259F               	addwf	printf@cp& (0+255),w,b
 12909  001272  0100               	movlb	0	; () banked
 12910  001274  6F9A               	movwf	??_printf& (0+255),b
 12911  001276  0100               	movlb	0	; () banked
 12912  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 12913  00127A  0100               	movlb	0	; () banked
 12914  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12915  00127E  0100               	movlb	0	; () banked
 12916  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 12917  001282  C09A  FFF6         	movff	??_printf,tblptrl
 12918  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 12919  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 12920  00128C  6EF8               	movwf	tblptru,c
 12921  00128E  0E0F               	movlw	(high __ramtop+-1)
 12922  001290  64F7               	cpfsgt	tblptrh,c
 12923  001292  D003               	bra	u3727
 12924  001294  0008               	tblrd		*
 12925  001296  50F5               	movf	tablat,w,c
 12926  001298  D005               	bra	u3720
 12927  00129A                     u3727:
 12928  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12929  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12930  0012A2  50EF               	movf	indf0,w,c
 12931  0012A4                     u3720:
 12932  0012A4  0900               	iorlw	0
 12933  0012A6  A4D8               	btfss	status,2,c
 12934  0012A8  D7DD               	goto	l5258
 12935                           
 12936                           ;doprnt.c: 757: if(width > len)
 12937  0012AA  0100               	movlb	0	; () banked
 12938  0012AC  51A9               	movf	printf@width& (0+255),w,b
 12939  0012AE  0100               	movlb	0	; () banked
 12940  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 12941  0012B2  0100               	movlb	0	; () banked
 12942  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 12943  0012B6  0100               	movlb	0	; () banked
 12944  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12945  0012BA  B0D8               	btfsc	status,0,c
 12946  0012BC  D009               	goto	l5266
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;doprnt.c: 758: width -= len;
 12950  0012BE  0100               	movlb	0	; () banked
 12951  0012C0  51A3               	movf	printf@len& (0+255),w,b
 12952  0012C2  0100               	movlb	0	; () banked
 12953  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 12954  0012C6  0100               	movlb	0	; () banked
 12955  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 12956  0012CA  0100               	movlb	0	; () banked
 12957  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12958  0012CE  D009               	goto	l5270
 12959  0012D0                     l5266:
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;doprnt.c: 759: else
 12963                           ;doprnt.c: 760: width = 0;
 12964  0012D0  0E00               	movlw	0
 12965  0012D2  0100               	movlb	0	; () banked
 12966  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12967  0012D6  0E00               	movlw	0
 12968  0012D8  6FA9               	movwf	printf@width& (0+255),b
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;doprnt.c: 764: while(width--)
 12972  0012DA  D003               	goto	l5270
 12973  0012DC                     l5268:
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;doprnt.c: 765: (putch(' ') );
 12977  0012DC  0E20               	movlw	32
 12978  0012DE  EC04  F021         	call	_putch
 12979  0012E2                     l5270:
 12980  0012E2  0100               	movlb	0	; () banked
 12981  0012E4  07A9               	decf	printf@width& (0+255),f,b
 12982  0012E6  A0D8               	btfss	status,0,c
 12983  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 12984  0012EA  0100               	movlb	0	; () banked
 12985  0012EC  29A9               	incf	printf@width& (0+255),w,b
 12986  0012EE  E1F6               	bnz	l5268
 12987  0012F0  0100               	movlb	0	; () banked
 12988  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 12989  0012F4  B4D8               	btfsc	status,2,c
 12990  0012F6  D017               	goto	l5276
 12991  0012F8  D7F1               	goto	l5268
 12992  0012FA                     l5272:
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;doprnt.c: 768: (putch(*cp++) );
 12996  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 12997  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12998  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 12999  001304  6EF8               	movwf	tblptru,c
 13000  001306  0E0F               	movlw	(high __ramtop+-1)
 13001  001308  64F7               	cpfsgt	tblptrh,c
 13002  00130A  D003               	bra	u3767
 13003  00130C  0008               	tblrd		*
 13004  00130E  50F5               	movf	tablat,w,c
 13005  001310  D005               	bra	u3760
 13006  001312                     u3767:
 13007  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13008  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13009  00131A  50EF               	movf	indf0,w,c
 13010  00131C                     u3760:
 13011  00131C  EC04  F021         	call	_putch
 13012  001320  0100               	movlb	0	; () banked
 13013  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13014  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13015  001326                     l5276:
 13016                           
 13017                           ; BSR set to: 0
 13018  001326  0100               	movlb	0	; () banked
 13019  001328  07A3               	decf	printf@len& (0+255),f,b
 13020  00132A  A0D8               	btfss	status,0,c
 13021  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13022  00132E  0100               	movlb	0	; () banked
 13023  001330  29A3               	incf	printf@len& (0+255),w,b
 13024  001332  E1E3               	bnz	l5272
 13025  001334  0100               	movlb	0	; () banked
 13026  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13027  001338  B4D8               	btfsc	status,2,c
 13028  00133A  D10A               	goto	l5354
 13029  00133C  D7DE               	goto	l5272
 13030  00133E                     l5278:
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;doprnt.c: 818: flag |= 0x40;
 13034  00133E  0100               	movlb	0	; () banked
 13035  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;doprnt.c: 822: }
 13039                           
 13040                           ;doprnt.c: 819: break;
 13041  001342  D01D               	goto	l1220
 13042  001344                     l5282:
 13043  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13044  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13045  00134C  0100               	movlb	0	; () banked
 13046  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13047  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13048  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13049  001352  6AF8               	clrf	tblptru,c
 13050  001354                     	endif
 13051  001354                     	if	0	;tblptru may be non-zero
 13052  001354                     	endif
 13053  001354  0008               	tblrd		*
 13054  001356  CFF5 F0A8          	movff	tablat,printf@c
 13055  00135A  0100               	movlb	0	; () banked
 13056  00135C  51A8               	movf	printf@c& (0+255),w,b
 13057                           
 13058                           ; Switch size 1, requested type "space"
 13059                           ; Number of cases is 5, Range of values is 0 to 117
 13060                           ; switch strategies available:
 13061                           ; Name         Instructions Cycles
 13062                           ; simple_byte           16     9 (average)
 13063                           ;	Chosen strategy is simple_byte
 13064  00135E  0A00               	xorlw	0	; case 0
 13065  001360  B4D8               	btfsc	status,2,c
 13066  001362  0012               	return	
 13067  001364  0A64               	xorlw	100	; case 100
 13068  001366  B4D8               	btfsc	status,2,c
 13069  001368  D00A               	goto	l1220
 13070  00136A  0A0D               	xorlw	13	; case 105
 13071  00136C  B4D8               	btfsc	status,2,c
 13072  00136E  D007               	goto	l1220
 13073  001370  0A1A               	xorlw	26	; case 115
 13074  001372  B4D8               	btfsc	status,2,c
 13075  001374  D758               	goto	l5248
 13076  001376  0A06               	xorlw	6	; case 117
 13077  001378  B4D8               	btfsc	status,2,c
 13078  00137A  D7E1               	goto	l5278
 13079  00137C  D0E9               	goto	l5354
 13080  00137E                     l1220:
 13081                           
 13082                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13083  00137E  0100               	movlb	0	; () banked
 13084  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13085  001382  D019               	goto	l5294
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;doprnt.c: 1253: {
 13089                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13090  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13091  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13092  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13093  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13094                           
 13095                           ; BSR set to: 0
 13096  001394  0E02               	movlw	2
 13097  001396  0100               	movlb	0	; () banked
 13098  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13099  00139A  0E00               	movlw	0
 13100  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13101                           
 13102                           ; BSR set to: 0
 13103                           ;doprnt.c: 1261: if((int)val < 0) {
 13104  00139E  0100               	movlb	0	; () banked
 13105  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13106  0013A2  D016               	goto	l5298
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;doprnt.c: 1262: flag |= 0x03;
 13110  0013A4  0E03               	movlw	3
 13111  0013A6  0100               	movlb	0	; () banked
 13112  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;doprnt.c: 1263: val = -val;
 13116  0013AA  0100               	movlb	0	; () banked
 13117  0013AC  6DA5               	negf	printf@val& (0+255),b
 13118  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13119  0013B0  B0D8               	btfsc	status,0,c
 13120  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;doprnt.c: 1264: }
 13124                           ;doprnt.c: 1266: }
 13125  0013B4  D00D               	goto	l5298
 13126  0013B6                     l5294:
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;doprnt.c: 1268: else
 13130                           ;doprnt.c: 1273: {
 13131                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13132  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13133  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13134  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13135  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13136                           
 13137                           ; BSR set to: 0
 13138  0013C6  0E02               	movlw	2
 13139  0013C8  0100               	movlb	0	; () banked
 13140  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13141  0013CC  0E00               	movlw	0
 13142  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13143  0013D0                     l5298:
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;doprnt.c: 1287: }
 13147                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13148  0013D0  0E01               	movlw	1
 13149  0013D2  0100               	movlb	0	; () banked
 13150  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13151  0013D6                     l5300:
 13152                           
 13153                           ; BSR set to: 0
 13154  0013D6  0E05               	movlw	5
 13155  0013D8  0100               	movlb	0	; () banked
 13156  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13157  0013DC  B4D8               	btfsc	status,2,c
 13158  0013DE  D019               	goto	l5312
 13159                           
 13160                           ; BSR set to: 0
 13161                           ;doprnt.c: 1306: if(val < dpowers[c])
 13162                           
 13163                           ; BSR set to: 0
 13164                           
 13165                           ; BSR set to: 0
 13166  0013E0  0100               	movlb	0	; () banked
 13167  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13168  0013E4  0D02               	mullw	2
 13169  0013E6  0E4A               	movlw	low _dpowers
 13170  0013E8  24F3               	addwf	prodl,w,c
 13171  0013EA  6EF6               	movwf	tblptrl,c
 13172  0013EC  0EFB               	movlw	high _dpowers
 13173  0013EE  20F4               	addwfc	prodh,w,c
 13174  0013F0  6EF7               	movwf	tblptrh,c
 13175  0013F2                     	if	1	;There are 3 active tblptr bytes
 13176  0013F2  6AF8               	clrf	tblptru,c
 13177  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13178  0013F6  22F8               	addwfc	tblptru,f,c
 13179  0013F8                     	endif
 13180  0013F8  0009               	tblrd		*+
 13181  0013FA  50F5               	movf	tablat,w,c
 13182  0013FC  0100               	movlb	0	; () banked
 13183  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13184  001400  0009               	tblrd		*+
 13185  001402  50F5               	movf	tablat,w,c
 13186  001404  0100               	movlb	0	; () banked
 13187  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13188  001408  A0D8               	btfss	status,0,c
 13189  00140A  D003               	goto	l5312
 13190                           
 13191                           ; BSR set to: 0
 13192                           
 13193                           ; BSR set to: 0
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;doprnt.c: 1307: break;
 13197  00140C  0100               	movlb	0	; () banked
 13198  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13199  001410  D7E2               	goto	l5300
 13200  001412                     l5312:
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13204  001412  0100               	movlb	0	; () banked
 13205  001414  51A9               	movf	printf@width& (0+255),w,b
 13206  001416  0100               	movlb	0	; () banked
 13207  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13208  00141A  B4D8               	btfsc	status,2,c
 13209  00141C  D00B               	goto	l5318
 13210                           
 13211                           ; BSR set to: 0
 13212  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13213  001422  0E03               	movlw	3
 13214  001424  0100               	movlb	0	; () banked
 13215  001426  179A               	andwf	??_printf& (0+255),f,b
 13216  001428  B4D8               	btfsc	status,2,c
 13217  00142A  D004               	goto	l5318
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;doprnt.c: 1346: width--;
 13221  00142C  0100               	movlb	0	; () banked
 13222  00142E  07A9               	decf	printf@width& (0+255),f,b
 13223  001430  A0D8               	btfss	status,0,c
 13224  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13225  001434                     l5318:
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;doprnt.c: 1381: if(width > c)
 13229  001434  0E80               	movlw	128
 13230  001436  0100               	movlb	0	; () banked
 13231  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13232  00143A  0E7F               	movlw	127
 13233  00143C  0100               	movlb	0	; () banked
 13234  00143E  6F9A               	movwf	??_printf& (0+255),b
 13235  001440  0100               	movlb	0	; () banked
 13236  001442  51A9               	movf	printf@width& (0+255),w,b
 13237  001444  0100               	movlb	0	; () banked
 13238  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13239  001448  0100               	movlb	0	; () banked
 13240  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13241  00144C  0A80               	xorlw	128
 13242  00144E  0100               	movlb	0	; () banked
 13243  001450  599A               	subwfb	??_printf& (0+255),w,b
 13244  001452  B0D8               	btfsc	status,0,c
 13245  001454  D00B               	goto	l5322
 13246                           
 13247                           ; BSR set to: 0
 13248                           ;doprnt.c: 1382: width -= c;
 13249  001456  0100               	movlb	0	; () banked
 13250  001458  51A8               	movf	printf@c& (0+255),w,b
 13251  00145A  0100               	movlb	0	; () banked
 13252  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13253  00145E  0E00               	movlw	0
 13254  001460  0100               	movlb	0	; () banked
 13255  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13256  001464  0EFF               	movlw	255
 13257  001466  0100               	movlb	0	; () banked
 13258  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13259  00146A  D005               	goto	l5324
 13260  00146C                     l5322:
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;doprnt.c: 1383: else
 13264                           ;doprnt.c: 1384: width = 0;
 13265  00146C  0E00               	movlw	0
 13266  00146E  0100               	movlb	0	; () banked
 13267  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13268  001472  0E00               	movlw	0
 13269  001474  6FA9               	movwf	printf@width& (0+255),b
 13270  001476                     l5324:
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;doprnt.c: 1387: if(flag & 0x04) {
 13274  001476  0100               	movlb	0	; () banked
 13275  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13276  00147A  D018               	goto	l5336
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;doprnt.c: 1392: if(flag & 0x03)
 13280  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13281  001480  0E03               	movlw	3
 13282  001482  0100               	movlb	0	; () banked
 13283  001484  179A               	andwf	??_printf& (0+255),f,b
 13284  001486  B4D8               	btfsc	status,2,c
 13285  001488  D003               	goto	l5330
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;doprnt.c: 1393: (putch('-') );
 13289  00148A  0E2D               	movlw	45
 13290  00148C  EC04  F021         	call	_putch
 13291  001490                     l5330:
 13292                           
 13293                           ;doprnt.c: 1415: if(width)
 13294  001490  0100               	movlb	0	; () banked
 13295  001492  51A9               	movf	printf@width& (0+255),w,b
 13296  001494  0100               	movlb	0	; () banked
 13297  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13298  001498  B4D8               	btfsc	status,2,c
 13299  00149A  D025               	goto	l5346
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;doprnt.c: 1417: (putch('0') );
 13303                           
 13304                           ; BSR set to: 0
 13305                           
 13306                           ;doprnt.c: 1416: do
 13307  00149C  0E30               	movlw	48
 13308  00149E  EC04  F021         	call	_putch
 13309                           
 13310                           ;doprnt.c: 1418: while(--width);
 13311  0014A2  0100               	movlb	0	; () banked
 13312  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13313  0014A6  A0D8               	btfss	status,0,c
 13314  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13315  0014AA  D7F2               	goto	l5330
 13316  0014AC                     l5336:
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;doprnt.c: 1422: {
 13320                           ;doprnt.c: 1424: if(width
 13321                           ;doprnt.c: 1428: )
 13322  0014AC  0100               	movlb	0	; () banked
 13323  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13324  0014B0  0100               	movlb	0	; () banked
 13325  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13326  0014B4  B4D8               	btfsc	status,2,c
 13327  0014B6  D00D               	goto	l5342
 13328  0014B8                     l5338:
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;doprnt.c: 1430: (putch(' ') );
 13332  0014B8  0E20               	movlw	32
 13333  0014BA  EC04  F021         	call	_putch
 13334                           
 13335                           ;doprnt.c: 1431: while(--width);
 13336  0014BE  0100               	movlb	0	; () banked
 13337  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13338  0014C2  A0D8               	btfss	status,0,c
 13339  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13340  0014C6  0100               	movlb	0	; () banked
 13341  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13342  0014CA  0100               	movlb	0	; () banked
 13343  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13344  0014CE  A4D8               	btfss	status,2,c
 13345  0014D0  D7F3               	goto	l5338
 13346  0014D2                     l5342:
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;doprnt.c: 1438: if(flag & 0x03)
 13350  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13351  0014D6  0E03               	movlw	3
 13352  0014D8  0100               	movlb	0	; () banked
 13353  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13354  0014DC  B4D8               	btfsc	status,2,c
 13355  0014DE  D003               	goto	l5346
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;doprnt.c: 1439: (putch('-') );
 13359  0014E0  0E2D               	movlw	45
 13360  0014E2  EC04  F021         	call	_putch
 13361  0014E6                     l5346:
 13362                           
 13363                           ;doprnt.c: 1469: }
 13364                           ;doprnt.c: 1472: prec = c;
 13365  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13366                           
 13367                           ;doprnt.c: 1474: while(prec--) {
 13368  0014EA  D02C               	goto	l5352
 13369  0014EC                     l5348:
 13370                           
 13371                           ;doprnt.c: 1478: {
 13372                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13373  0014EC  0100               	movlb	0	; () banked
 13374  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13375  0014F0  0D02               	mullw	2
 13376  0014F2  0E4A               	movlw	low _dpowers
 13377  0014F4  24F3               	addwf	prodl,w,c
 13378  0014F6  6EF6               	movwf	tblptrl,c
 13379  0014F8  0EFB               	movlw	high _dpowers
 13380  0014FA  20F4               	addwfc	prodh,w,c
 13381  0014FC  6EF7               	movwf	tblptrh,c
 13382  0014FE                     	if	1	;There are 3 active tblptr bytes
 13383  0014FE  6AF8               	clrf	tblptru,c
 13384  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13385  001502  22F8               	addwfc	tblptru,f,c
 13386  001504                     	endif
 13387  001504  0009               	tblrd		*+
 13388  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13389  00150A  000A               	tblrd		*-
 13390  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13391  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13392  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13393  001518  EC53  F01B         	call	___lwdiv	;wreg free
 13394  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13395  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13396  001524  0E00               	movlw	0
 13397  001526  0100               	movlb	0	; () banked
 13398  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13399  00152A  0E0A               	movlw	10
 13400  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13401  00152E  EC6B  F01C         	call	___lwmod	;wreg free
 13402  001532  0100               	movlb	0	; () banked
 13403  001534  5187               	movf	?___lwmod& (0+255),w,b
 13404  001536  0F30               	addlw	48
 13405  001538  0100               	movlb	0	; () banked
 13406  00153A  6FA8               	movwf	printf@c& (0+255),b
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;doprnt.c: 1523: }
 13410                           ;doprnt.c: 1524: (putch(c) );
 13411  00153C  0100               	movlb	0	; () banked
 13412  00153E  51A8               	movf	printf@c& (0+255),w,b
 13413  001540  EC04  F021         	call	_putch
 13414  001544                     l5352:
 13415  001544  0100               	movlb	0	; () banked
 13416  001546  079E               	decf	printf@prec& (0+255),f,b
 13417  001548  0100               	movlb	0	; () banked
 13418  00154A  299E               	incf	printf@prec& (0+255),w,b
 13419  00154C  A4D8               	btfss	status,2,c
 13420  00154E  D7CE               	goto	l5348
 13421  001550                     l5354:
 13422  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13423  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13424  001558  0100               	movlb	0	; () banked
 13425  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13426  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13427  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13428  00155E  6AF8               	clrf	tblptru,c
 13429  001560                     	endif
 13430  001560                     	if	0	;tblptru may be non-zero
 13431  001560                     	endif
 13432  001560  0008               	tblrd		*
 13433  001562  CFF5 F0A8          	movff	tablat,printf@c
 13434  001566  0100               	movlb	0	; () banked
 13435  001568  51A8               	movf	printf@c& (0+255),w,b
 13436  00156A  B4D8               	btfsc	status,2,c
 13437  00156C  0012               	return	
 13438  00156E  D5EB               	goto	l5224
 13439  001570                     __end_of_printf:
 13440                           	opt stack 0
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon2	equ	0xFF1
 13449                           intcon3	equ	0xFF0
 13450                           indf0	equ	0xFEF
 13451                           postinc0	equ	0xFEE
 13452                           fsr0h	equ	0xFEA
 13453                           fsr0l	equ	0xFE9
 13454                           wreg	equ	0xFE8
 13455                           postdec1	equ	0xFE5
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function _putch *****************
 13465 ;; Defined at:
 13466 ;;		line 20 in file "lcd.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  data            1    wreg     unsigned char 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  data            1    2[BANK0 ] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      void 
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0, cstack
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;Total ram usage:        1 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    8
 13487 ;; This function calls:
 13488 ;;		_lcdNibble
 13489 ;; This function is called by:
 13490 ;;		_printf
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           	psect	text47
 13495  004208                     __ptext47:
 13496                           	opt stack 0
 13497  004208                     _putch:
 13498                           	opt stack 18
 13499                           
 13500                           ;incstack = 0
 13501                           ;putch@data stored from wreg
 13502  004208  0100               	movlb	0	; () banked
 13503  00420A  6F82               	movwf	putch@data& (0+255),b
 13504                           
 13505                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13506  00420C  848C               	bsf	3980,2,c	;volatile
 13507                           
 13508                           ;lcd.c: 22: lcdNibble(data);
 13509  00420E  0100               	movlb	0	; () banked
 13510  004210  5182               	movf	putch@data& (0+255),w,b
 13511  004212  EC37  F01C         	call	_lcdNibble
 13512  004216  0012               	return		;funcret
 13513  004218                     __end_of_putch:
 13514                           	opt stack 0
 13515                           tblptru	equ	0xFF8
 13516                           tblptrh	equ	0xFF7
 13517                           tblptrl	equ	0xFF6
 13518                           tablat	equ	0xFF5
 13519                           prodh	equ	0xFF4
 13520                           prodl	equ	0xFF3
 13521                           intcon	equ	0xFF2
 13522                           intcon2	equ	0xFF1
 13523                           intcon3	equ	0xFF0
 13524                           indf0	equ	0xFEF
 13525                           postinc0	equ	0xFEE
 13526                           fsr0h	equ	0xFEA
 13527                           fsr0l	equ	0xFE9
 13528                           wreg	equ	0xFE8
 13529                           postdec1	equ	0xFE5
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           fsr2h	equ	0xFDA
 13535                           fsr2l	equ	0xFD9
 13536                           status	equ	0xFD8
 13537                           
 13538 ;; *************** function _isdigit *****************
 13539 ;; Defined at:
 13540 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13541 ;; Parameters:    Size  Location     Type
 13542 ;;  c               1    wreg     unsigned char 
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;  c               1    2[BANK0 ] unsigned char 
 13545 ;; Return value:  Size  Location     Type
 13546 ;;		None               void
 13547 ;; Registers used:
 13548 ;;		wreg, status,2, status,0
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;Total ram usage:        3 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; Hardware stack levels required when called:    7
 13561 ;; This function calls:
 13562 ;;		Nothing
 13563 ;; This function is called by:
 13564 ;;		_printf
 13565 ;; This function uses a non-reentrant model
 13566 ;;
 13567                           
 13568                           	psect	text48
 13569  00402E                     __ptext48:
 13570                           	opt stack 0
 13571  00402E                     _isdigit:
 13572                           	opt stack 19
 13573                           
 13574                           ;incstack = 0
 13575                           ;isdigit@c stored from wreg
 13576  00402E  0100               	movlb	0	; () banked
 13577  004030  6F82               	movwf	isdigit@c& (0+255),b
 13578  004032  0E00               	movlw	0
 13579  004034  0100               	movlb	0	; () banked
 13580  004036  6F81               	movwf	_isdigit$1876& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583  004038  0E3A               	movlw	58
 13584  00403A  0100               	movlb	0	; () banked
 13585  00403C  6182               	cpfslt	isdigit@c& (0+255),b
 13586  00403E  D007               	goto	l5074
 13587                           
 13588                           ; BSR set to: 0
 13589  004040  0E2F               	movlw	47
 13590  004042  0100               	movlb	0	; () banked
 13591  004044  6582               	cpfsgt	isdigit@c& (0+255),b
 13592  004046  D003               	goto	l5074
 13593                           
 13594                           ; BSR set to: 0
 13595  004048  0E01               	movlw	1
 13596  00404A  0100               	movlb	0	; () banked
 13597  00404C  6F81               	movwf	_isdigit$1876& (0+255),b
 13598  00404E                     l5074:
 13599                           
 13600                           ; BSR set to: 0
 13601  00404E  C081  F080         	movff	_isdigit$1876,??_isdigit
 13602  004052  0100               	movlb	0	; () banked
 13603  004054  3180               	rrcf	??_isdigit& (0+255),w,b
 13604  004056  0012               	return	
 13605  004058                     __end_of_isdigit:
 13606                           	opt stack 0
 13607                           tblptru	equ	0xFF8
 13608                           tblptrh	equ	0xFF7
 13609                           tblptrl	equ	0xFF6
 13610                           tablat	equ	0xFF5
 13611                           prodh	equ	0xFF4
 13612                           prodl	equ	0xFF3
 13613                           intcon	equ	0xFF2
 13614                           intcon2	equ	0xFF1
 13615                           intcon3	equ	0xFF0
 13616                           indf0	equ	0xFEF
 13617                           postinc0	equ	0xFEE
 13618                           fsr0h	equ	0xFEA
 13619                           fsr0l	equ	0xFE9
 13620                           wreg	equ	0xFE8
 13621                           postdec1	equ	0xFE5
 13622                           fsr1l	equ	0xFE1
 13623                           indf2	equ	0xFDF
 13624                           postinc2	equ	0xFDE
 13625                           postdec2	equ	0xFDD
 13626                           fsr2h	equ	0xFDA
 13627                           fsr2l	equ	0xFD9
 13628                           status	equ	0xFD8
 13629                           
 13630 ;; *************** function ___wmul *****************
 13631 ;; Defined at:
 13632 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13633 ;; Parameters:    Size  Location     Type
 13634 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13635 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13636 ;; Auto vars:     Size  Location     Type
 13637 ;;  product         2    4[BANK0 ] unsigned int 
 13638 ;; Return value:  Size  Location     Type
 13639 ;;                  2    0[BANK0 ] unsigned int 
 13640 ;; Registers used:
 13641 ;;		wreg, status,2, status,0, prodl, prodh
 13642 ;; Tracked objects:
 13643 ;;		On entry : 0/0
 13644 ;;		On exit  : 0/0
 13645 ;;		Unchanged: 0/0
 13646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13647 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;Total ram usage:        6 bytes
 13652 ;; Hardware stack levels used:    1
 13653 ;; Hardware stack levels required when called:    7
 13654 ;; This function calls:
 13655 ;;		Nothing
 13656 ;; This function is called by:
 13657 ;;		_printf
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           	psect	text49
 13662  003D62                     __ptext49:
 13663                           	opt stack 0
 13664  003D62                     ___wmul:
 13665                           	opt stack 19
 13666                           
 13667                           ; BSR set to: 0
 13668                           ;incstack = 0
 13669  003D62  0100               	movlb	0	; () banked
 13670  003D64  5180               	movf	___wmul@multiplier& (0+255),w,b
 13671  003D66  0100               	movlb	0	; () banked
 13672  003D68  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13673  003D6A  CFF3 F084          	movff	prodl,___wmul@product
 13674  003D6E  CFF4 F085          	movff	prodh,___wmul@product+1
 13675  003D72  0100               	movlb	0	; () banked
 13676  003D74  5180               	movf	___wmul@multiplier& (0+255),w,b
 13677  003D76  0100               	movlb	0	; () banked
 13678  003D78  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13679  003D7A  50F3               	movf	prodl,w,c
 13680  003D7C  0100               	movlb	0	; () banked
 13681  003D7E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13682  003D80  0100               	movlb	0	; () banked
 13683  003D82  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13684  003D84  0100               	movlb	0	; () banked
 13685  003D86  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13686  003D88  50F3               	movf	prodl,w,c
 13687  003D8A  0100               	movlb	0	; () banked
 13688  003D8C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13689                           
 13690                           ; BSR set to: 0
 13691  003D8E  C084  F080         	movff	___wmul@product,?___wmul
 13692  003D92  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13693  003D96  0012               	return	
 13694  003D98                     __end_of___wmul:
 13695                           	opt stack 0
 13696                           tblptru	equ	0xFF8
 13697                           tblptrh	equ	0xFF7
 13698                           tblptrl	equ	0xFF6
 13699                           tablat	equ	0xFF5
 13700                           prodh	equ	0xFF4
 13701                           prodl	equ	0xFF3
 13702                           intcon	equ	0xFF2
 13703                           intcon2	equ	0xFF1
 13704                           intcon3	equ	0xFF0
 13705                           indf0	equ	0xFEF
 13706                           postinc0	equ	0xFEE
 13707                           fsr0h	equ	0xFEA
 13708                           fsr0l	equ	0xFE9
 13709                           wreg	equ	0xFE8
 13710                           postdec1	equ	0xFE5
 13711                           fsr1l	equ	0xFE1
 13712                           indf2	equ	0xFDF
 13713                           postinc2	equ	0xFDE
 13714                           postdec2	equ	0xFDD
 13715                           fsr2h	equ	0xFDA
 13716                           fsr2l	equ	0xFD9
 13717                           status	equ	0xFD8
 13718                           
 13719 ;; *************** function ___lwmod *****************
 13720 ;; Defined at:
 13721 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  dividend        2    7[BANK0 ] unsigned int 
 13724 ;;  divisor         2    9[BANK0 ] unsigned int 
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;  counter         1   11[BANK0 ] unsigned char 
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  2    7[BANK0 ] unsigned int 
 13729 ;; Registers used:
 13730 ;;		wreg, status,2, status,0
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;Total ram usage:        5 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    7
 13743 ;; This function calls:
 13744 ;;		Nothing
 13745 ;; This function is called by:
 13746 ;;		_printf
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           	psect	text50
 13751  0038D6                     __ptext50:
 13752                           	opt stack 0
 13753  0038D6                     ___lwmod:
 13754                           	opt stack 19
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;incstack = 0
 13758  0038D6  0100               	movlb	0	; () banked
 13759  0038D8  5189               	movf	___lwmod@divisor& (0+255),w,b
 13760  0038DA  0100               	movlb	0	; () banked
 13761  0038DC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13762  0038DE  B4D8               	btfsc	status,2,c
 13763  0038E0  D026               	goto	l1677
 13764                           
 13765                           ; BSR set to: 0
 13766  0038E2  0E01               	movlw	1
 13767  0038E4  0100               	movlb	0	; () banked
 13768  0038E6  6F8B               	movwf	___lwmod@counter& (0+255),b
 13769  0038E8  D006               	goto	l5112
 13770  0038EA                     l5110:
 13771                           
 13772                           ; BSR set to: 0
 13773  0038EA  0100               	movlb	0	; () banked
 13774  0038EC  90D8               	bcf	status,0,c
 13775  0038EE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13776  0038F0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13777  0038F2  0100               	movlb	0	; () banked
 13778  0038F4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13779  0038F6                     l5112:
 13780                           
 13781                           ; BSR set to: 0
 13782  0038F6  0100               	movlb	0	; () banked
 13783  0038F8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13784  0038FA  D7F7               	goto	l5110
 13785  0038FC                     l5114:
 13786                           
 13787                           ; BSR set to: 0
 13788  0038FC  0100               	movlb	0	; () banked
 13789  0038FE  5189               	movf	___lwmod@divisor& (0+255),w,b
 13790  003900  0100               	movlb	0	; () banked
 13791  003902  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13792  003904  0100               	movlb	0	; () banked
 13793  003906  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13794  003908  0100               	movlb	0	; () banked
 13795  00390A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13796  00390C  A0D8               	btfss	status,0,c
 13797  00390E  D008               	goto	l5118
 13798                           
 13799                           ; BSR set to: 0
 13800  003910  0100               	movlb	0	; () banked
 13801  003912  5189               	movf	___lwmod@divisor& (0+255),w,b
 13802  003914  0100               	movlb	0	; () banked
 13803  003916  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13804  003918  0100               	movlb	0	; () banked
 13805  00391A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13806  00391C  0100               	movlb	0	; () banked
 13807  00391E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13808  003920                     l5118:
 13809                           
 13810                           ; BSR set to: 0
 13811  003920  0100               	movlb	0	; () banked
 13812  003922  90D8               	bcf	status,0,c
 13813  003924  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13814  003926  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13815                           
 13816                           ; BSR set to: 0
 13817  003928  0100               	movlb	0	; () banked
 13818  00392A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13819  00392C  D7E7               	goto	l5114
 13820  00392E                     l1677:
 13821                           
 13822                           ; BSR set to: 0
 13823  00392E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13824  003932  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13825                           
 13826                           ; BSR set to: 0
 13827  003936  0012               	return		;funcret
 13828  003938                     __end_of___lwmod:
 13829                           	opt stack 0
 13830                           tblptru	equ	0xFF8
 13831                           tblptrh	equ	0xFF7
 13832                           tblptrl	equ	0xFF6
 13833                           tablat	equ	0xFF5
 13834                           prodh	equ	0xFF4
 13835                           prodl	equ	0xFF3
 13836                           intcon	equ	0xFF2
 13837                           intcon2	equ	0xFF1
 13838                           intcon3	equ	0xFF0
 13839                           indf0	equ	0xFEF
 13840                           postinc0	equ	0xFEE
 13841                           fsr0h	equ	0xFEA
 13842                           fsr0l	equ	0xFE9
 13843                           wreg	equ	0xFE8
 13844                           postdec1	equ	0xFE5
 13845                           fsr1l	equ	0xFE1
 13846                           indf2	equ	0xFDF
 13847                           postinc2	equ	0xFDE
 13848                           postdec2	equ	0xFDD
 13849                           fsr2h	equ	0xFDA
 13850                           fsr2l	equ	0xFD9
 13851                           status	equ	0xFD8
 13852                           
 13853 ;; *************** function ___lwdiv *****************
 13854 ;; Defined at:
 13855 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13856 ;; Parameters:    Size  Location     Type
 13857 ;;  dividend        2    0[BANK0 ] unsigned int 
 13858 ;;  divisor         2    2[BANK0 ] unsigned int 
 13859 ;; Auto vars:     Size  Location     Type
 13860 ;;  quotient        2    4[BANK0 ] unsigned int 
 13861 ;;  counter         1    6[BANK0 ] unsigned char 
 13862 ;; Return value:  Size  Location     Type
 13863 ;;                  2    0[BANK0 ] unsigned int 
 13864 ;; Registers used:
 13865 ;;		wreg, status,2, status,0
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13871 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;Total ram usage:        7 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    7
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		_printf
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           	psect	text51
 13886  0036A6                     __ptext51:
 13887                           	opt stack 0
 13888  0036A6                     ___lwdiv:
 13889                           	opt stack 19
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;incstack = 0
 13893  0036A6  0E00               	movlw	0
 13894  0036A8  0100               	movlb	0	; () banked
 13895  0036AA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13896  0036AC  0E00               	movlw	0
 13897  0036AE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13898                           
 13899                           ; BSR set to: 0
 13900  0036B0  0100               	movlb	0	; () banked
 13901  0036B2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13902  0036B4  0100               	movlb	0	; () banked
 13903  0036B6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13904  0036B8  B4D8               	btfsc	status,2,c
 13905  0036BA  D02C               	goto	l1667
 13906                           
 13907                           ; BSR set to: 0
 13908  0036BC  0E01               	movlw	1
 13909  0036BE  0100               	movlb	0	; () banked
 13910  0036C0  6F86               	movwf	___lwdiv@counter& (0+255),b
 13911  0036C2  D006               	goto	l5092
 13912  0036C4                     l5090:
 13913                           
 13914                           ; BSR set to: 0
 13915  0036C4  0100               	movlb	0	; () banked
 13916  0036C6  90D8               	bcf	status,0,c
 13917  0036C8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13918  0036CA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13919  0036CC  0100               	movlb	0	; () banked
 13920  0036CE  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13921  0036D0                     l5092:
 13922                           
 13923                           ; BSR set to: 0
 13924  0036D0  0100               	movlb	0	; () banked
 13925  0036D2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13926  0036D4  D7F7               	goto	l5090
 13927  0036D6                     l5094:
 13928                           
 13929                           ; BSR set to: 0
 13930  0036D6  0100               	movlb	0	; () banked
 13931  0036D8  90D8               	bcf	status,0,c
 13932  0036DA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13933  0036DC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13934                           
 13935                           ; BSR set to: 0
 13936  0036DE  0100               	movlb	0	; () banked
 13937  0036E0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13938  0036E2  0100               	movlb	0	; () banked
 13939  0036E4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13940  0036E6  0100               	movlb	0	; () banked
 13941  0036E8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13942  0036EA  0100               	movlb	0	; () banked
 13943  0036EC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13944  0036EE  A0D8               	btfss	status,0,c
 13945  0036F0  D00A               	goto	l5102
 13946                           
 13947                           ; BSR set to: 0
 13948  0036F2  0100               	movlb	0	; () banked
 13949  0036F4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13950  0036F6  0100               	movlb	0	; () banked
 13951  0036F8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13952  0036FA  0100               	movlb	0	; () banked
 13953  0036FC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13954  0036FE  0100               	movlb	0	; () banked
 13955  003700  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13956                           
 13957                           ; BSR set to: 0
 13958  003702  0100               	movlb	0	; () banked
 13959  003704  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13960  003706                     l5102:
 13961                           
 13962                           ; BSR set to: 0
 13963  003706  0100               	movlb	0	; () banked
 13964  003708  90D8               	bcf	status,0,c
 13965  00370A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13966  00370C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13967                           
 13968                           ; BSR set to: 0
 13969  00370E  0100               	movlb	0	; () banked
 13970  003710  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13971  003712  D7E1               	goto	l5094
 13972  003714                     l1667:
 13973                           
 13974                           ; BSR set to: 0
 13975  003714  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13976  003718  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13977                           
 13978                           ; BSR set to: 0
 13979  00371C  0012               	return		;funcret
 13980  00371E                     __end_of___lwdiv:
 13981                           	opt stack 0
 13982                           tblptru	equ	0xFF8
 13983                           tblptrh	equ	0xFF7
 13984                           tblptrl	equ	0xFF6
 13985                           tablat	equ	0xFF5
 13986                           prodh	equ	0xFF4
 13987                           prodl	equ	0xFF3
 13988                           intcon	equ	0xFF2
 13989                           intcon2	equ	0xFF1
 13990                           intcon3	equ	0xFF0
 13991                           indf0	equ	0xFEF
 13992                           postinc0	equ	0xFEE
 13993                           fsr0h	equ	0xFEA
 13994                           fsr0l	equ	0xFE9
 13995                           wreg	equ	0xFE8
 13996                           postdec1	equ	0xFE5
 13997                           fsr1l	equ	0xFE1
 13998                           indf2	equ	0xFDF
 13999                           postinc2	equ	0xFDE
 14000                           postdec2	equ	0xFDD
 14001                           fsr2h	equ	0xFDA
 14002                           fsr2l	equ	0xFD9
 14003                           status	equ	0xFD8
 14004                           
 14005 ;; *************** function _lcdInst *****************
 14006 ;; Defined at:
 14007 ;;		line 15 in file "lcd.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  data            1    wreg     unsigned char 
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;  data            1    2[BANK0 ] unsigned char 
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      void 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2, status,0, cstack
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;Total ram usage:        1 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    8
 14028 ;; This function calls:
 14029 ;;		_lcdNibble
 14030 ;; This function is called by:
 14031 ;;		_UI
 14032 ;;		_change_state_to_menu_start
 14033 ;;		_change_state_to_menu_12
 14034 ;;		_change_state_to_menu_22
 14035 ;;		_initLCD
 14036 ;;		_printRTC
 14037 ;;		_Loading
 14038 ;;		_EEPROM_write
 14039 ;;		_Test
 14040 ;;		_algorithmTest
 14041 ;;		_sensorTest
 14042 ;;		_actuatorTest
 14043 ;;		_PortTestA5
 14044 ;;		_SolenoidTestA5
 14045 ;;		_ToggleTestA5
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text52
 14050  004218                     __ptext52:
 14051                           	opt stack 0
 14052  004218                     _lcdInst:
 14053                           	opt stack 20
 14054                           
 14055                           ; BSR set to: 0
 14056                           ;incstack = 0
 14057                           ;lcdInst@data stored from wreg
 14058  004218  0100               	movlb	0	; () banked
 14059  00421A  6F82               	movwf	lcdInst@data& (0+255),b
 14060                           
 14061                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14062  00421C  948C               	bcf	3980,2,c	;volatile
 14063                           
 14064                           ;lcd.c: 17: lcdNibble(data);
 14065  00421E  0100               	movlb	0	; () banked
 14066  004220  5182               	movf	lcdInst@data& (0+255),w,b
 14067  004222  EC37  F01C         	call	_lcdNibble
 14068  004226  0012               	return		;funcret
 14069  004228                     __end_of_lcdInst:
 14070                           	opt stack 0
 14071                           tblptru	equ	0xFF8
 14072                           tblptrh	equ	0xFF7
 14073                           tblptrl	equ	0xFF6
 14074                           tablat	equ	0xFF5
 14075                           prodh	equ	0xFF4
 14076                           prodl	equ	0xFF3
 14077                           intcon	equ	0xFF2
 14078                           intcon2	equ	0xFF1
 14079                           intcon3	equ	0xFF0
 14080                           indf0	equ	0xFEF
 14081                           postinc0	equ	0xFEE
 14082                           fsr0h	equ	0xFEA
 14083                           fsr0l	equ	0xFE9
 14084                           wreg	equ	0xFE8
 14085                           postdec1	equ	0xFE5
 14086                           fsr1l	equ	0xFE1
 14087                           indf2	equ	0xFDF
 14088                           postinc2	equ	0xFDE
 14089                           postdec2	equ	0xFDD
 14090                           fsr2h	equ	0xFDA
 14091                           fsr2l	equ	0xFD9
 14092                           status	equ	0xFD8
 14093                           
 14094 ;; *************** function _lcdNibble *****************
 14095 ;; Defined at:
 14096 ;;		line 25 in file "lcd.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  data            1    wreg     unsigned char 
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  data            1    1[BANK0 ] unsigned char 
 14101 ;;  temp            1    0[BANK0 ] unsigned char 
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  1    wreg      void 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2, status,0
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;Total ram usage:        2 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    7
 14118 ;; This function calls:
 14119 ;;		Nothing
 14120 ;; This function is called by:
 14121 ;;		_lcdInst
 14122 ;;		_putch
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	text53
 14127  00386E                     __ptext53:
 14128                           	opt stack 0
 14129  00386E                     _lcdNibble:
 14130                           	opt stack 20
 14131                           
 14132                           ;incstack = 0
 14133                           ;lcdNibble@data stored from wreg
 14134  00386E  0100               	movlb	0	; () banked
 14135  003870  6F81               	movwf	lcdNibble@data& (0+255),b
 14136                           
 14137                           ;lcd.c: 27: char temp = data & 0xF0;
 14138  003872  0100               	movlb	0	; () banked
 14139  003874  5181               	movf	lcdNibble@data& (0+255),w,b
 14140  003876  0BF0               	andlw	240
 14141  003878  0100               	movlb	0	; () banked
 14142  00387A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14143                           
 14144                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14145  00387C  508C               	movf	3980,w,c	;volatile
 14146  00387E  0B0F               	andlw	15
 14147  003880  6E8C               	movwf	3980,c	;volatile
 14148                           
 14149                           ;lcd.c: 29: LATD = temp | LATD;
 14150  003882  0100               	movlb	0	; () banked
 14151  003884  5180               	movf	lcdNibble@temp& (0+255),w,b
 14152  003886  108C               	iorwf	3980,w,c	;volatile
 14153  003888  6E8C               	movwf	3980,c	;volatile
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14157  00388A  868C               	bsf	3980,3,c	;volatile
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14161  00388C  0E42               	movlw	66
 14162  00388E                     u7757:
 14163  00388E  2EE8               	decfsz	wreg,f,c
 14164  003890  D7FE               	bra	u7757
 14165  003892  D000               	nop2	
 14166                           
 14167                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14168  003894  968C               	bcf	3980,3,c	;volatile
 14169                           
 14170                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14171  003896  0E42               	movlw	66
 14172  003898                     u7767:
 14173  003898  2EE8               	decfsz	wreg,f,c
 14174  00389A  D7FE               	bra	u7767
 14175  00389C  D000               	nop2	
 14176                           
 14177                           ;lcd.c: 36: data = data << 4;
 14178  00389E  0100               	movlb	0	; () banked
 14179  0038A0  3981               	swapf	lcdNibble@data& (0+255),w,b
 14180  0038A2  0BF0               	andlw	240
 14181  0038A4  0100               	movlb	0	; () banked
 14182  0038A6  6F81               	movwf	lcdNibble@data& (0+255),b
 14183                           
 14184                           ;lcd.c: 38: temp = data & 0xF0;
 14185  0038A8  0100               	movlb	0	; () banked
 14186  0038AA  5181               	movf	lcdNibble@data& (0+255),w,b
 14187  0038AC  0BF0               	andlw	240
 14188  0038AE  0100               	movlb	0	; () banked
 14189  0038B0  6F80               	movwf	lcdNibble@temp& (0+255),b
 14190                           
 14191                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14192  0038B2  508C               	movf	3980,w,c	;volatile
 14193  0038B4  0B0F               	andlw	15
 14194  0038B6  6E8C               	movwf	3980,c	;volatile
 14195                           
 14196                           ;lcd.c: 40: LATD = temp | LATD;
 14197  0038B8  0100               	movlb	0	; () banked
 14198  0038BA  5180               	movf	lcdNibble@temp& (0+255),w,b
 14199  0038BC  108C               	iorwf	3980,w,c	;volatile
 14200  0038BE  6E8C               	movwf	3980,c	;volatile
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14204  0038C0  868C               	bsf	3980,3,c	;volatile
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14208  0038C2  0E42               	movlw	66
 14209  0038C4                     u7777:
 14210  0038C4  2EE8               	decfsz	wreg,f,c
 14211  0038C6  D7FE               	bra	u7777
 14212  0038C8  D000               	nop2	
 14213                           
 14214                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14215  0038CA  968C               	bcf	3980,3,c	;volatile
 14216                           
 14217                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14218  0038CC  0E42               	movlw	66
 14219  0038CE                     u7787:
 14220  0038CE  2EE8               	decfsz	wreg,f,c
 14221  0038D0  D7FE               	bra	u7787
 14222  0038D2  D000               	nop2	
 14223  0038D4  0012               	return		;funcret
 14224  0038D6                     __end_of_lcdNibble:
 14225                           	opt stack 0
 14226                           tblptru	equ	0xFF8
 14227                           tblptrh	equ	0xFF7
 14228                           tblptrl	equ	0xFF6
 14229                           tablat	equ	0xFF5
 14230                           prodh	equ	0xFF4
 14231                           prodl	equ	0xFF3
 14232                           intcon	equ	0xFF2
 14233                           intcon2	equ	0xFF1
 14234                           intcon3	equ	0xFF0
 14235                           indf0	equ	0xFEF
 14236                           postinc0	equ	0xFEE
 14237                           fsr0h	equ	0xFEA
 14238                           fsr0l	equ	0xFE9
 14239                           wreg	equ	0xFE8
 14240                           postdec1	equ	0xFE5
 14241                           fsr1l	equ	0xFE1
 14242                           indf2	equ	0xFDF
 14243                           postinc2	equ	0xFDE
 14244                           postdec2	equ	0xFDD
 14245                           fsr2h	equ	0xFDA
 14246                           fsr2l	equ	0xFD9
 14247                           status	equ	0xFD8
 14248                           
 14249 ;; *************** function _EEPROMTest *****************
 14250 ;; Defined at:
 14251 ;;		line 427 in file "Test.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;		None
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;		None
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  1    wreg      void 
 14258 ;; Registers used:
 14259 ;;		None
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;Total ram usage:        0 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    7
 14272 ;; This function calls:
 14273 ;;		Nothing
 14274 ;; This function is called by:
 14275 ;;		_Test
 14276 ;; This function uses a non-reentrant model
 14277 ;;
 14278                           
 14279                           	psect	text54
 14280  00427C                     __ptext54:
 14281                           	opt stack 0
 14282  00427C                     _EEPROMTest:
 14283                           	opt stack 22
 14284                           
 14285                           ;incstack = 0
 14286  00427C  0012               	return		;funcret
 14287  00427E                     __end_of_EEPROMTest:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           intcon	equ	0xFF2
 14296                           intcon2	equ	0xFF1
 14297                           intcon3	equ	0xFF0
 14298                           indf0	equ	0xFEF
 14299                           postinc0	equ	0xFEE
 14300                           fsr0h	equ	0xFEA
 14301                           fsr0l	equ	0xFE9
 14302                           wreg	equ	0xFE8
 14303                           postdec1	equ	0xFE5
 14304                           fsr1l	equ	0xFE1
 14305                           indf2	equ	0xFDF
 14306                           postinc2	equ	0xFDE
 14307                           postdec2	equ	0xFDD
 14308                           fsr2h	equ	0xFDA
 14309                           fsr2l	equ	0xFD9
 14310                           status	equ	0xFD8
 14311                           
 14312 ;; *************** function _handler *****************
 14313 ;; Defined at:
 14314 ;;		line 16 in file "interruptHandler.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;		None
 14317 ;; Auto vars:     Size  Location     Type
 14318 ;;		None
 14319 ;; Return value:  Size  Location     Type
 14320 ;;                  1    wreg      void 
 14321 ;; Registers used:
 14322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14323 ;; Tracked objects:
 14324 ;;		On entry : 0/0
 14325 ;;		On exit  : 0/0
 14326 ;;		Unchanged: 0/0
 14327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14331 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;Total ram usage:       16 bytes
 14333 ;; Hardware stack levels used:    1
 14334 ;; Hardware stack levels required when called:    6
 14335 ;; This function calls:
 14336 ;;		_printSortTimer
 14337 ;;		_updateMenu
 14338 ;; This function is called by:
 14339 ;;		Interrupt level 2
 14340 ;; This function uses a non-reentrant model
 14341 ;;
 14342                           
 14343                           	psect	intcode
 14344  000008                     __pintcode:
 14345                           	opt stack 0
 14346  000008                     _handler:
 14347                           	opt stack 18
 14348                           
 14349                           ;incstack = 0
 14350  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14351  00000A  ED03  F013         	call	int_func,f	;refresh shadow registers
 14352                           tblptru	equ	0xFF8
 14353                           tblptrh	equ	0xFF7
 14354                           tblptrl	equ	0xFF6
 14355                           tablat	equ	0xFF5
 14356                           prodh	equ	0xFF4
 14357                           prodl	equ	0xFF3
 14358                           intcon	equ	0xFF2
 14359                           intcon2	equ	0xFF1
 14360                           intcon3	equ	0xFF0
 14361                           indf0	equ	0xFEF
 14362                           postinc0	equ	0xFEE
 14363                           fsr0h	equ	0xFEA
 14364                           fsr0l	equ	0xFE9
 14365                           wreg	equ	0xFE8
 14366                           postdec1	equ	0xFE5
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375                           	psect	intcode_body
 14376  002606                     __pintcode_body:
 14377                           	opt stack 18
 14378  002606                     int_func:
 14379                           	opt stack 18
 14380  002606  0006               	pop		; remove dummy address from shadow register refresh
 14381  002608  CFFA F04D          	movff	pclath,??_handler+2
 14382  00260C  CFFB F04E          	movff	pclatu,??_handler+3
 14383  002610  CFE9 F04F          	movff	fsr0l,??_handler+4
 14384  002614  CFEA F050          	movff	fsr0h,??_handler+5
 14385  002618  CFE1 F051          	movff	fsr1l,??_handler+6
 14386  00261C  CFE2 F052          	movff	fsr1h,??_handler+7
 14387  002620  CFD9 F053          	movff	fsr2l,??_handler+8
 14388  002624  CFDA F054          	movff	fsr2h,??_handler+9
 14389  002628  CFF3 F055          	movff	prodl,??_handler+10
 14390  00262C  CFF4 F056          	movff	prodh,??_handler+11
 14391  002630  CFF6 F057          	movff	tblptrl,??_handler+12
 14392  002634  CFF7 F058          	movff	tblptrh,??_handler+13
 14393  002638  CFF8 F059          	movff	tblptru,??_handler+14
 14394  00263C  CFF5 F05A          	movff	tablat,??_handler+15
 14395                           
 14396                           ;interruptHandler.c: 18: if(INT1IF){
 14397  002640  A0F0               	btfss	intcon3,0,c	;volatile
 14398  002642  D020               	goto	i2l7788
 14399                           
 14400                           ;interruptHandler.c: 19: INT1IF = 0;
 14401  002644  90F0               	bcf	intcon3,0,c	;volatile
 14402                           
 14403                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14404  002646  0100               	movlb	0	; () banked
 14405  002648  51FC               	movf	_machine_state& (0+255),w,b
 14406  00264A  A4D8               	btfss	status,2,c
 14407  00264C  D01B               	goto	i2l7788
 14408                           
 14409                           ; BSR set to: 0
 14410                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14411  00264E  3881               	swapf	3969,w,c	;volatile
 14412  002650  0B0F               	andlw	15
 14413  002652  0B0F               	andlw	15
 14414  002654  6E4B               	movwf	??_handler& (0+255),c
 14415  002656  6A4C               	clrf	(??_handler+1)& (0+255),c
 14416  002658  0E39               	movlw	low _keys
 14417  00265A  244B               	addwf	??_handler,w,c
 14418  00265C  6EF6               	movwf	tblptrl,c
 14419  00265E  0EFB               	movlw	high _keys
 14420  002660  204C               	addwfc	??_handler+1,w,c
 14421  002662  6EF7               	movwf	tblptrh,c
 14422  002664                     	if	1	;There are 3 active tblptr bytes
 14423  002664  6AF8               	clrf	tblptru,c
 14424  002666  0E00               	movlw	low (__mediumconst shr (0+16))
 14425  002668  22F8               	addwfc	tblptru,f,c
 14426  00266A                     	endif
 14427  00266A  0008               	tblrd		*
 14428  00266C  CFF5 F07D          	movff	tablat,_input	;volatile
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;interruptHandler.c: 23: if(input == '*'){
 14432  002670  0E2A               	movlw	42
 14433  002672  187D               	xorwf	_input,w,c	;volatile
 14434  002674  A4D8               	btfss	status,2,c
 14435  002676  D004               	goto	i2l7786
 14436                           
 14437                           ; BSR set to: 0
 14438                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14439  002678  0E03               	movlw	3
 14440  00267A  0100               	movlb	0	; () banked
 14441  00267C  6FFC               	movwf	_machine_state& (0+255),b
 14442                           
 14443                           ;interruptHandler.c: 25: }
 14444  00267E  D002               	goto	i2l7788
 14445  002680                     i2l7786:
 14446                           
 14447                           ; BSR set to: 0
 14448                           ;interruptHandler.c: 26: else{
 14449                           ;interruptHandler.c: 27: updateMenu();
 14450  002680  ECD4  F00D         	call	_updateMenu	;wreg free
 14451  002684                     i2l7788:
 14452                           
 14453                           ;interruptHandler.c: 28: }
 14454                           ;interruptHandler.c: 29: }
 14455                           ;interruptHandler.c: 30: }
 14456                           ;interruptHandler.c: 33: if(TMR0IF){
 14457  002684  A4F2               	btfss	intcon,2,c	;volatile
 14458  002686  D00C               	goto	i2l7802
 14459                           
 14460                           ;interruptHandler.c: 34: TMR0IF = 0;
 14461  002688  94F2               	bcf	intcon,2,c	;volatile
 14462                           
 14463                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14464  00268A  0100               	movlb	0	; () banked
 14465  00268C  05FC               	decf	_machine_state& (0+255),w,b
 14466  00268E  A4D8               	btfss	status,2,c
 14467  002690  D007               	goto	i2l7802
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;interruptHandler.c: 36: printSortTimer();
 14471  002692  EC4F  F010         	call	_printSortTimer	;wreg free
 14472                           
 14473                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14474  002696  0E85               	movlw	133
 14475  002698  6ED7               	movwf	4055,c	;volatile
 14476                           
 14477                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14478  00269A  0EEE               	movlw	238
 14479  00269C  6ED6               	movwf	4054,c	;volatile
 14480                           
 14481                           ;interruptHandler.c: 40: TMR0ON = 1;
 14482  00269E  8ED5               	bsf	4053,7,c	;volatile
 14483  0026A0                     i2l7802:
 14484                           
 14485                           ;interruptHandler.c: 41: }
 14486                           ;interruptHandler.c: 42: }
 14487                           ;interruptHandler.c: 45: if(TMR1IF){
 14488  0026A0  A09E               	btfss	3998,0,c	;volatile
 14489  0026A2  D024               	goto	i2l7826
 14490                           
 14491                           ;interruptHandler.c: 46: TMR1IF = 0;
 14492  0026A4  909E               	bcf	3998,0,c	;volatile
 14493                           
 14494                           ;interruptHandler.c: 47: TMR1ON = 0;
 14495  0026A6  90CD               	bcf	4045,0,c	;volatile
 14496                           
 14497                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 14498  0026A8  0100               	movlb	0	; () banked
 14499  0026AA  05FC               	decf	_machine_state& (0+255),w,b
 14500  0026AC  A4D8               	btfss	status,2,c
 14501  0026AE  D01E               	goto	i2l7826
 14502                           
 14503                           ; BSR set to: 0
 14504                           ;interruptHandler.c: 49: if(was_low_1){
 14505  0026B0  5079               	movf	_was_low_1,w,c	;volatile
 14506  0026B2  107A               	iorwf	_was_low_1+1,w,c	;volatile
 14507  0026B4  B4D8               	btfsc	status,2,c
 14508  0026B6  D00A               	goto	i2l840
 14509                           
 14510                           ; BSR set to: 0
 14511                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 14512  0026B8  828B               	bsf	3979,1,c	;volatile
 14513                           
 14514                           ; BSR set to: 0
 14515                           ;interruptHandler.c: 51: was_low_1 = 0;
 14516  0026BA  0E00               	movlw	0
 14517  0026BC  6E7A               	movwf	_was_low_1+1,c	;volatile
 14518  0026BE  0E00               	movlw	0
 14519  0026C0  6E79               	movwf	_was_low_1,c	;volatile
 14520                           
 14521                           ; BSR set to: 0
 14522                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 14523  0026C2  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 14527  0026C6  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 14528                           
 14529                           ;interruptHandler.c: 54: }
 14530  0026CA  D00F               	goto	i2l7824
 14531  0026CC                     i2l840:
 14532                           
 14533                           ; BSR set to: 0
 14534                           ;interruptHandler.c: 55: else{
 14535                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 14536  0026CC  928B               	bcf	3979,1,c	;volatile
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;interruptHandler.c: 57: was_low_1 = 1;
 14540  0026CE  0E00               	movlw	0
 14541  0026D0  6E7A               	movwf	_was_low_1+1,c	;volatile
 14542  0026D2  0E01               	movlw	1
 14543  0026D4  6E79               	movwf	_was_low_1,c	;volatile
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 14547  0026D6  0101               	movlb	1	; () banked
 14548  0026D8  511C               	movf	_servoTimes& (0+255),w,b
 14549  0026DA  0800               	sublw	0
 14550  0026DC  0F20               	addlw	32
 14551  0026DE  6ECF               	movwf	4047,c	;volatile
 14552                           
 14553                           ; BSR set to: 1
 14554                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 14555  0026E0  0101               	movlb	1	; () banked
 14556  0026E2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 14557  0026E4  0800               	sublw	0
 14558  0026E6  0F20               	addlw	32
 14559  0026E8  6ECE               	movwf	4046,c	;volatile
 14560  0026EA                     i2l7824:
 14561                           
 14562                           ;interruptHandler.c: 60: }
 14563                           ;interruptHandler.c: 61: TMR1ON = 1;
 14564  0026EA  80CD               	bsf	4045,0,c	;volatile
 14565  0026EC                     i2l7826:
 14566                           
 14567                           ;interruptHandler.c: 62: }
 14568                           ;interruptHandler.c: 63: }
 14569                           ;interruptHandler.c: 65: if(TMR3IF){
 14570  0026EC  A2A1               	btfss	4001,1,c	;volatile
 14571  0026EE  D024               	goto	i2l846
 14572                           
 14573                           ;interruptHandler.c: 66: TMR3IF = 0;
 14574  0026F0  92A1               	bcf	4001,1,c	;volatile
 14575                           
 14576                           ;interruptHandler.c: 67: TMR3ON = 0;
 14577  0026F2  90B1               	bcf	4017,0,c	;volatile
 14578                           
 14579                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 14580  0026F4  0100               	movlb	0	; () banked
 14581  0026F6  05FC               	decf	_machine_state& (0+255),w,b
 14582  0026F8  A4D8               	btfss	status,2,c
 14583  0026FA  D01E               	goto	i2l846
 14584                           
 14585                           ; BSR set to: 0
 14586                           ;interruptHandler.c: 69: if(was_low_3){
 14587  0026FC  507B               	movf	_was_low_3,w,c	;volatile
 14588  0026FE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 14589  002700  B4D8               	btfsc	status,2,c
 14590  002702  D00A               	goto	i2l844
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14594  002704  848B               	bsf	3979,2,c	;volatile
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;interruptHandler.c: 71: was_low_3 = 0;
 14598  002706  0E00               	movlw	0
 14599  002708  6E7C               	movwf	_was_low_3+1,c	;volatile
 14600  00270A  0E00               	movlw	0
 14601  00270C  6E7B               	movwf	_was_low_3,c	;volatile
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14605  00270E  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14609  002712  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14610                           
 14611                           ;interruptHandler.c: 74: }
 14612  002716  D00F               	goto	i2l7848
 14613  002718                     i2l844:
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;interruptHandler.c: 75: else{
 14617                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14618  002718  948B               	bcf	3979,2,c	;volatile
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;interruptHandler.c: 77: was_low_3 = 1;
 14622  00271A  0E00               	movlw	0
 14623  00271C  6E7C               	movwf	_was_low_3+1,c	;volatile
 14624  00271E  0E01               	movlw	1
 14625  002720  6E7B               	movwf	_was_low_3,c	;volatile
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14629  002722  0101               	movlb	1	; () banked
 14630  002724  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14631  002726  0800               	sublw	0
 14632  002728  0F20               	addlw	32
 14633  00272A  6EB3               	movwf	4019,c	;volatile
 14634                           
 14635                           ; BSR set to: 1
 14636                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14637  00272C  0101               	movlb	1	; () banked
 14638  00272E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14639  002730  0800               	sublw	0
 14640  002732  0F20               	addlw	32
 14641  002734  6EB2               	movwf	4018,c	;volatile
 14642  002736                     i2l7848:
 14643                           
 14644                           ;interruptHandler.c: 80: }
 14645                           ;interruptHandler.c: 81: TMR3ON = 1;
 14646  002736  80B1               	bsf	4017,0,c	;volatile
 14647  002738                     i2l846:
 14648  002738  C05A  FFF5         	movff	??_handler+15,tablat
 14649  00273C  C059  FFF8         	movff	??_handler+14,tblptru
 14650  002740  C058  FFF7         	movff	??_handler+13,tblptrh
 14651  002744  C057  FFF6         	movff	??_handler+12,tblptrl
 14652  002748  C056  FFF4         	movff	??_handler+11,prodh
 14653  00274C  C055  FFF3         	movff	??_handler+10,prodl
 14654  002750  C054  FFDA         	movff	??_handler+9,fsr2h
 14655  002754  C053  FFD9         	movff	??_handler+8,fsr2l
 14656  002758  C052  FFE2         	movff	??_handler+7,fsr1h
 14657  00275C  C051  FFE1         	movff	??_handler+6,fsr1l
 14658  002760  C050  FFEA         	movff	??_handler+5,fsr0h
 14659  002764  C04F  FFE9         	movff	??_handler+4,fsr0l
 14660  002768  C04E  FFFB         	movff	??_handler+3,pclatu
 14661  00276C  C04D  FFFA         	movff	??_handler+2,pclath
 14662  002770  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14663  002772  0011               	retfie		f
 14664  002774                     __end_of_handler:
 14665                           	opt stack 0
 14666                           pclatu	equ	0xFFB
 14667                           pclath	equ	0xFFA
 14668                           tblptru	equ	0xFF8
 14669                           tblptrh	equ	0xFF7
 14670                           tblptrl	equ	0xFF6
 14671                           tablat	equ	0xFF5
 14672                           prodh	equ	0xFF4
 14673                           prodl	equ	0xFF3
 14674                           intcon	equ	0xFF2
 14675                           intcon2	equ	0xFF1
 14676                           intcon3	equ	0xFF0
 14677                           indf0	equ	0xFEF
 14678                           postinc0	equ	0xFEE
 14679                           fsr0h	equ	0xFEA
 14680                           fsr0l	equ	0xFE9
 14681                           wreg	equ	0xFE8
 14682                           postdec1	equ	0xFE5
 14683                           fsr1h	equ	0xFE2
 14684                           fsr1l	equ	0xFE1
 14685                           indf2	equ	0xFDF
 14686                           postinc2	equ	0xFDE
 14687                           postdec2	equ	0xFDD
 14688                           fsr2h	equ	0xFDA
 14689                           fsr2l	equ	0xFD9
 14690                           status	equ	0xFD8
 14691                           
 14692 ;; *************** function _updateMenu *****************
 14693 ;; Defined at:
 14694 ;;		line 211 in file "UI.c"
 14695 ;; Parameters:    Size  Location     Type
 14696 ;;		None
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;		None
 14699 ;; Return value:  Size  Location     Type
 14700 ;;                  1    wreg      void 
 14701 ;; Registers used:
 14702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14712 ;;Total ram usage:        2 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:    5
 14715 ;; This function calls:
 14716 ;;		_change_state_to_logs_11
 14717 ;;		_change_state_to_logs_12
 14718 ;;		_change_state_to_logs_22
 14719 ;;		_change_state_to_logs_23
 14720 ;;		_change_state_to_logs_33
 14721 ;;		_change_state_to_logs_34
 14722 ;;		_change_state_to_menu_11
 14723 ;;		_change_state_to_menu_23
 14724 ;;		_dispLogs
 14725 ;;		_inputHandler
 14726 ;;		i2_change_state_to_menu_12
 14727 ;;		i2_change_state_to_menu_22
 14728 ;;		i2_change_state_to_menu_start
 14729 ;; This function is called by:
 14730 ;;		_handler
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           	psect	text56
 14735  001BA8                     __ptext56:
 14736                           	opt stack 0
 14737  001BA8                     _updateMenu:
 14738                           	opt stack 18
 14739                           
 14740                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14741                           
 14742                           ;incstack = 0
 14743  001BA8  0E00               	movlw	0
 14744  001BAA  6E78               	movwf	_up+1,c
 14745  001BAC  0E00               	movlw	0
 14746  001BAE  6E77               	movwf	_up,c
 14747  001BB0  0E00               	movlw	0
 14748  001BB2  6E68               	movwf	_down+1,c
 14749  001BB4  0E00               	movlw	0
 14750  001BB6  6E67               	movwf	_down,c
 14751  001BB8  0E00               	movlw	0
 14752  001BBA  6E6A               	movwf	_enter+1,c
 14753  001BBC  0E00               	movlw	0
 14754  001BBE  6E69               	movwf	_enter,c
 14755  001BC0  0E00               	movlw	0
 14756  001BC2  6E5C               	movwf	_back+1,c
 14757  001BC4  0E00               	movlw	0
 14758  001BC6  6E5B               	movwf	_back,c
 14759                           
 14760                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14761  001BC8  9EF2               	bcf	intcon,7,c	;volatile
 14762                           
 14763                           ;UI.c: 215: if (inputHandler()
 14764                           ;UI.c: 218: ){
 14765  001BCA  EC48  F011         	call	_inputHandler	;wreg free
 14766  001BCE  502A               	movf	?_inputHandler,w,c
 14767  001BD0  102B               	iorwf	?_inputHandler+1,w,c
 14768  001BD2  A4D8               	btfss	status,2,c
 14769  001BD4  D112               	goto	i2l7518
 14770  001BD6  D146               	goto	i2l254
 14771  001BD8                     i2l7370:
 14772                           
 14773                           ;UI.c: 222: change_state_to_menu_11();
 14774  001BD8  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 14775                           
 14776                           ;UI.c: 223: break;
 14777  001BDC  D143               	goto	i2l254
 14778  001BDE                     i2l7372:
 14779                           
 14780                           ;UI.c: 226: if(up){
 14781  001BDE  5077               	movf	_up,w,c
 14782  001BE0  1078               	iorwf	_up+1,w,c
 14783  001BE2  B4D8               	btfsc	status,2,c
 14784  001BE4  D003               	goto	i2l7376
 14785                           
 14786                           ;UI.c: 227: change_state_to_menu_23();
 14787  001BE6  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 14788                           
 14789                           ;UI.c: 228: }
 14790  001BEA  D13C               	goto	i2l254
 14791  001BEC                     i2l7376:
 14792                           
 14793                           ;UI.c: 229: else if(down){
 14794  001BEC  5067               	movf	_down,w,c
 14795  001BEE  1068               	iorwf	_down+1,w,c
 14796  001BF0  B4D8               	btfsc	status,2,c
 14797  001BF2  D003               	goto	i2l7380
 14798                           
 14799                           ;UI.c: 230: change_state_to_menu_12();
 14800  001BF4  ECFD  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14801                           
 14802                           ;UI.c: 231: }
 14803  001BF8  D135               	goto	i2l254
 14804  001BFA                     i2l7380:
 14805                           
 14806                           ;UI.c: 232: else if(enter){
 14807  001BFA  5069               	movf	_enter,w,c
 14808  001BFC  106A               	iorwf	_enter+1,w,c
 14809  001BFE  B4D8               	btfsc	status,2,c
 14810  001C00  D131               	goto	i2l254
 14811                           
 14812                           ;UI.c: 233: change_state_to_menu_start();
 14813  001C02  EC40  F020         	call	i2_change_state_to_menu_start	;wreg free
 14814                           
 14815                           ;UI.c: 234: }
 14816                           ;UI.c: 235: break;
 14817  001C06  D12E               	goto	i2l254
 14818  001C08                     i2l7384:
 14819                           
 14820                           ;UI.c: 238: if(up){
 14821  001C08  5077               	movf	_up,w,c
 14822  001C0A  1078               	iorwf	_up+1,w,c
 14823  001C0C  B4D8               	btfsc	status,2,c
 14824  001C0E  D003               	goto	i2l7388
 14825                           
 14826                           ;UI.c: 239: change_state_to_menu_11();
 14827  001C10  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 14828                           
 14829                           ;UI.c: 240: }
 14830  001C14  D127               	goto	i2l254
 14831  001C16                     i2l7388:
 14832                           
 14833                           ;UI.c: 241: else if(down){
 14834  001C16  5067               	movf	_down,w,c
 14835  001C18  1068               	iorwf	_down+1,w,c
 14836  001C1A  B4D8               	btfsc	status,2,c
 14837  001C1C  D011               	goto	i2l7404
 14838                           
 14839                           ;UI.c: 242: change_state_to_menu_23();
 14840  001C1E  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 14841                           
 14842                           ;UI.c: 243: }
 14843  001C22  D120               	goto	i2l254
 14844  001C24                     i2l7396:
 14845                           
 14846                           ;UI.c: 250: if(up){
 14847  001C24  5077               	movf	_up,w,c
 14848  001C26  1078               	iorwf	_up+1,w,c
 14849  001C28  B4D8               	btfsc	status,2,c
 14850  001C2A  D003               	goto	i2l7400
 14851                           
 14852                           ;UI.c: 251: change_state_to_menu_11();
 14853  001C2C  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 14854                           
 14855                           ;UI.c: 252: }
 14856  001C30  D119               	goto	i2l254
 14857  001C32                     i2l7400:
 14858                           
 14859                           ;UI.c: 253: else if(down){
 14860  001C32  5067               	movf	_down,w,c
 14861  001C34  1068               	iorwf	_down+1,w,c
 14862  001C36  B4D8               	btfsc	status,2,c
 14863  001C38  D003               	goto	i2l7404
 14864                           
 14865                           ;UI.c: 254: change_state_to_menu_23();
 14866  001C3A  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 14867                           
 14868                           ;UI.c: 255: }
 14869  001C3E  D112               	goto	i2l254
 14870  001C40                     i2l7404:
 14871                           
 14872                           ;UI.c: 256: else if(enter){
 14873  001C40  5069               	movf	_enter,w,c
 14874  001C42  106A               	iorwf	_enter+1,w,c
 14875  001C44  B4D8               	btfsc	status,2,c
 14876  001C46  D10E               	goto	i2l254
 14877                           
 14878                           ;UI.c: 257: machine_state = Sorting_state;
 14879  001C48  0E01               	movlw	1
 14880  001C4A  0100               	movlb	0	; () banked
 14881  001C4C  6FFC               	movwf	_machine_state& (0+255),b
 14882                           
 14883                           ; BSR set to: 0
 14884                           ;UI.c: 258: }
 14885                           ;UI.c: 259: break;
 14886                           
 14887                           ; BSR set to: 0
 14888                           
 14889                           ; BSR set to: 0
 14890  001C4E  D10A               	goto	i2l254
 14891  001C50                     i2l7408:
 14892                           
 14893                           ;UI.c: 262: if(up){
 14894  001C50  5077               	movf	_up,w,c
 14895  001C52  1078               	iorwf	_up+1,w,c
 14896  001C54  B4D8               	btfsc	status,2,c
 14897  001C56  D003               	goto	i2l7412
 14898                           
 14899                           ;UI.c: 263: change_state_to_menu_22();
 14900  001C58  ECE5  F01E         	call	i2_change_state_to_menu_22	;wreg free
 14901                           
 14902                           ;UI.c: 264: }
 14903  001C5C  D103               	goto	i2l254
 14904  001C5E                     i2l7412:
 14905                           
 14906                           ;UI.c: 265: else if(down){
 14907  001C5E  5067               	movf	_down,w,c
 14908  001C60  1068               	iorwf	_down+1,w,c
 14909  001C62  B4D8               	btfsc	status,2,c
 14910  001C64  D003               	goto	i2l7416
 14911                           
 14912                           ;UI.c: 266: change_state_to_menu_11();
 14913  001C66  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 14914                           
 14915                           ;UI.c: 267: }
 14916  001C6A  D0FC               	goto	i2l254
 14917  001C6C                     i2l7416:
 14918                           
 14919                           ;UI.c: 268: else if(enter){
 14920  001C6C  5069               	movf	_enter,w,c
 14921  001C6E  106A               	iorwf	_enter+1,w,c
 14922  001C70  B4D8               	btfsc	status,2,c
 14923  001C72  D0F8               	goto	i2l254
 14924                           
 14925                           ;UI.c: 269: change_state_to_logs_11();
 14926  001C74  ECA5  F01F         	call	_change_state_to_logs_11	;wreg free
 14927                           
 14928                           ;UI.c: 270: }
 14929                           ;UI.c: 271: break;
 14930  001C78  D0F5               	goto	i2l254
 14931  001C7A                     i2l7420:
 14932                           
 14933                           ;UI.c: 274: if(up){
 14934  001C7A  5077               	movf	_up,w,c
 14935  001C7C  1078               	iorwf	_up+1,w,c
 14936  001C7E  B4D8               	btfsc	status,2,c
 14937  001C80  D003               	goto	i2l7424
 14938                           
 14939                           ;UI.c: 275: change_state_to_logs_34();
 14940  001C82  EC45  F01F         	call	_change_state_to_logs_34	;wreg free
 14941                           
 14942                           ;UI.c: 276: }
 14943  001C86  D0EE               	goto	i2l254
 14944  001C88                     i2l7424:
 14945                           
 14946                           ;UI.c: 277: else if(down){
 14947  001C88  5067               	movf	_down,w,c
 14948  001C8A  1068               	iorwf	_down+1,w,c
 14949  001C8C  B4D8               	btfsc	status,2,c
 14950  001C8E  D003               	goto	i2l7428
 14951                           
 14952                           ;UI.c: 278: change_state_to_logs_12();
 14953  001C90  EC8D  F01F         	call	_change_state_to_logs_12	;wreg free
 14954                           
 14955                           ;UI.c: 279: }
 14956  001C94  D0E7               	goto	i2l254
 14957  001C96                     i2l7428:
 14958                           
 14959                           ;UI.c: 280: else if(enter){
 14960  001C96  5069               	movf	_enter,w,c
 14961  001C98  106A               	iorwf	_enter+1,w,c
 14962  001C9A  B4D8               	btfsc	status,2,c
 14963  001C9C  D007               	goto	i2l7432
 14964                           
 14965                           ;UI.c: 281: dispLogs(1);
 14966  001C9E  0E00               	movlw	0
 14967  001CA0  6E13               	movwf	dispLogs@myLog+1,c
 14968  001CA2  0E01               	movlw	1
 14969  001CA4  6E12               	movwf	dispLogs@myLog,c
 14970  001CA6  EC8C  F020         	call	_dispLogs	;wreg free
 14971                           
 14972                           ;UI.c: 282: }
 14973  001CAA  D0DC               	goto	i2l254
 14974  001CAC                     i2l7432:
 14975                           
 14976                           ;UI.c: 283: else if(back){
 14977  001CAC  505B               	movf	_back,w,c
 14978  001CAE  105C               	iorwf	_back+1,w,c
 14979  001CB0  B4D8               	btfsc	status,2,c
 14980  001CB2  D0D8               	goto	i2l254
 14981                           
 14982                           ;UI.c: 284: change_state_to_menu_23();
 14983  001CB4  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 14984                           
 14985                           ;UI.c: 285: }
 14986                           ;UI.c: 286: break;
 14987  001CB8  D0D5               	goto	i2l254
 14988  001CBA                     i2l7436:
 14989                           
 14990                           ;UI.c: 289: if(up){
 14991  001CBA  5077               	movf	_up,w,c
 14992  001CBC  1078               	iorwf	_up+1,w,c
 14993  001CBE  B4D8               	btfsc	status,2,c
 14994  001CC0  D003               	goto	i2l7440
 14995                           
 14996                           ;UI.c: 290: change_state_to_logs_11();
 14997  001CC2  ECA5  F01F         	call	_change_state_to_logs_11	;wreg free
 14998                           
 14999                           ;UI.c: 291: }
 15000  001CC6  D0CE               	goto	i2l254
 15001  001CC8                     i2l7440:
 15002                           
 15003                           ;UI.c: 292: else if(down){
 15004  001CC8  5067               	movf	_down,w,c
 15005  001CCA  1068               	iorwf	_down+1,w,c
 15006  001CCC  B4D8               	btfsc	status,2,c
 15007  001CCE  D003               	goto	i2l7444
 15008                           
 15009                           ;UI.c: 293: change_state_to_logs_23();
 15010  001CD0  ECD4  F01F         	call	_change_state_to_logs_23	;wreg free
 15011                           
 15012                           ;UI.c: 294: }
 15013  001CD4  D0C7               	goto	i2l254
 15014  001CD6                     i2l7444:
 15015                           
 15016                           ;UI.c: 295: else if(enter){
 15017  001CD6  5069               	movf	_enter,w,c
 15018  001CD8  106A               	iorwf	_enter+1,w,c
 15019  001CDA  B4D8               	btfsc	status,2,c
 15020  001CDC  D007               	goto	i2l7448
 15021                           
 15022                           ;UI.c: 296: dispLogs(2);
 15023  001CDE  0E00               	movlw	0
 15024  001CE0  6E13               	movwf	dispLogs@myLog+1,c
 15025  001CE2  0E02               	movlw	2
 15026  001CE4  6E12               	movwf	dispLogs@myLog,c
 15027  001CE6  EC8C  F020         	call	_dispLogs	;wreg free
 15028                           
 15029                           ;UI.c: 297: }
 15030  001CEA  D0BC               	goto	i2l254
 15031  001CEC                     i2l7448:
 15032                           
 15033                           ;UI.c: 298: else if(back){
 15034  001CEC  505B               	movf	_back,w,c
 15035  001CEE  105C               	iorwf	_back+1,w,c
 15036  001CF0  B4D8               	btfsc	status,2,c
 15037  001CF2  D0B8               	goto	i2l254
 15038                           
 15039                           ;UI.c: 299: change_state_to_menu_23();
 15040  001CF4  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 15041                           
 15042                           ;UI.c: 300: }
 15043                           ;UI.c: 301: break;
 15044  001CF8  D0B5               	goto	i2l254
 15045  001CFA                     i2l7452:
 15046                           
 15047                           ;UI.c: 304: if(up){
 15048  001CFA  5077               	movf	_up,w,c
 15049  001CFC  1078               	iorwf	_up+1,w,c
 15050  001CFE  B4D8               	btfsc	status,2,c
 15051  001D00  D003               	goto	i2l7456
 15052                           
 15053                           ;UI.c: 305: change_state_to_logs_11();
 15054  001D02  ECA5  F01F         	call	_change_state_to_logs_11	;wreg free
 15055                           
 15056                           ;UI.c: 306: }
 15057  001D06  D0AE               	goto	i2l254
 15058  001D08                     i2l7456:
 15059                           
 15060                           ;UI.c: 307: else if(down){
 15061  001D08  5067               	movf	_down,w,c
 15062  001D0A  1068               	iorwf	_down+1,w,c
 15063  001D0C  B4D8               	btfsc	status,2,c
 15064  001D0E  D003               	goto	i2l7460
 15065                           
 15066                           ;UI.c: 308: change_state_to_logs_23();
 15067  001D10  ECD4  F01F         	call	_change_state_to_logs_23	;wreg free
 15068                           
 15069                           ;UI.c: 309: }
 15070  001D14  D0A7               	goto	i2l254
 15071  001D16                     i2l7460:
 15072                           
 15073                           ;UI.c: 310: else if(enter){
 15074  001D16  5069               	movf	_enter,w,c
 15075  001D18  106A               	iorwf	_enter+1,w,c
 15076  001D1A  B4D8               	btfsc	status,2,c
 15077  001D1C  D007               	goto	i2l7464
 15078                           
 15079                           ;UI.c: 311: dispLogs(2);
 15080  001D1E  0E00               	movlw	0
 15081  001D20  6E13               	movwf	dispLogs@myLog+1,c
 15082  001D22  0E02               	movlw	2
 15083  001D24  6E12               	movwf	dispLogs@myLog,c
 15084  001D26  EC8C  F020         	call	_dispLogs	;wreg free
 15085                           
 15086                           ;UI.c: 312: }
 15087  001D2A  D09C               	goto	i2l254
 15088  001D2C                     i2l7464:
 15089                           
 15090                           ;UI.c: 313: else if(back){
 15091  001D2C  505B               	movf	_back,w,c
 15092  001D2E  105C               	iorwf	_back+1,w,c
 15093  001D30  B4D8               	btfsc	status,2,c
 15094  001D32  D098               	goto	i2l254
 15095                           
 15096                           ;UI.c: 314: change_state_to_menu_23();
 15097  001D34  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 15098                           
 15099                           ;UI.c: 315: }
 15100                           ;UI.c: 316: break;
 15101  001D38  D095               	goto	i2l254
 15102  001D3A                     i2l7468:
 15103                           
 15104                           ;UI.c: 319: if(up){
 15105  001D3A  5077               	movf	_up,w,c
 15106  001D3C  1078               	iorwf	_up+1,w,c
 15107  001D3E  B4D8               	btfsc	status,2,c
 15108  001D40  D003               	goto	i2l7472
 15109                           
 15110                           ;UI.c: 320: change_state_to_logs_22();
 15111  001D42  EC75  F01F         	call	_change_state_to_logs_22	;wreg free
 15112                           
 15113                           ;UI.c: 321: }
 15114  001D46  D08E               	goto	i2l254
 15115  001D48                     i2l7472:
 15116                           
 15117                           ;UI.c: 322: else if(down){
 15118  001D48  5067               	movf	_down,w,c
 15119  001D4A  1068               	iorwf	_down+1,w,c
 15120  001D4C  B4D8               	btfsc	status,2,c
 15121  001D4E  D003               	goto	i2l7476
 15122                           
 15123                           ;UI.c: 323: change_state_to_logs_34();
 15124  001D50  EC45  F01F         	call	_change_state_to_logs_34	;wreg free
 15125                           
 15126                           ;UI.c: 324: }
 15127  001D54  D087               	goto	i2l254
 15128  001D56                     i2l7476:
 15129                           
 15130                           ;UI.c: 325: else if(enter){
 15131  001D56  5069               	movf	_enter,w,c
 15132  001D58  106A               	iorwf	_enter+1,w,c
 15133  001D5A  B4D8               	btfsc	status,2,c
 15134  001D5C  D007               	goto	i2l7480
 15135                           
 15136                           ;UI.c: 326: dispLogs(3);
 15137  001D5E  0E00               	movlw	0
 15138  001D60  6E13               	movwf	dispLogs@myLog+1,c
 15139  001D62  0E03               	movlw	3
 15140  001D64  6E12               	movwf	dispLogs@myLog,c
 15141  001D66  EC8C  F020         	call	_dispLogs	;wreg free
 15142                           
 15143                           ;UI.c: 327: }
 15144  001D6A  D07C               	goto	i2l254
 15145  001D6C                     i2l7480:
 15146                           
 15147                           ;UI.c: 328: else if(back){
 15148  001D6C  505B               	movf	_back,w,c
 15149  001D6E  105C               	iorwf	_back+1,w,c
 15150  001D70  B4D8               	btfsc	status,2,c
 15151  001D72  D078               	goto	i2l254
 15152                           
 15153                           ;UI.c: 329: change_state_to_menu_23();
 15154  001D74  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 15155                           
 15156                           ;UI.c: 330: }
 15157                           ;UI.c: 331: break;
 15158  001D78  D075               	goto	i2l254
 15159  001D7A                     i2l7484:
 15160                           
 15161                           ;UI.c: 334: if(up){
 15162  001D7A  5077               	movf	_up,w,c
 15163  001D7C  1078               	iorwf	_up+1,w,c
 15164  001D7E  B4D8               	btfsc	status,2,c
 15165  001D80  D003               	goto	i2l7488
 15166                           
 15167                           ;UI.c: 335: change_state_to_logs_22();
 15168  001D82  EC75  F01F         	call	_change_state_to_logs_22	;wreg free
 15169                           
 15170                           ;UI.c: 336: }
 15171  001D86  D06E               	goto	i2l254
 15172  001D88                     i2l7488:
 15173                           
 15174                           ;UI.c: 337: else if(down){
 15175  001D88  5067               	movf	_down,w,c
 15176  001D8A  1068               	iorwf	_down+1,w,c
 15177  001D8C  B4D8               	btfsc	status,2,c
 15178  001D8E  D003               	goto	i2l7492
 15179                           
 15180                           ;UI.c: 338: change_state_to_logs_34();
 15181  001D90  EC45  F01F         	call	_change_state_to_logs_34	;wreg free
 15182                           
 15183                           ;UI.c: 339: }
 15184  001D94  D067               	goto	i2l254
 15185  001D96                     i2l7492:
 15186                           
 15187                           ;UI.c: 340: else if(enter){
 15188  001D96  5069               	movf	_enter,w,c
 15189  001D98  106A               	iorwf	_enter+1,w,c
 15190  001D9A  B4D8               	btfsc	status,2,c
 15191  001D9C  D007               	goto	i2l7496
 15192                           
 15193                           ;UI.c: 341: dispLogs(3);
 15194  001D9E  0E00               	movlw	0
 15195  001DA0  6E13               	movwf	dispLogs@myLog+1,c
 15196  001DA2  0E03               	movlw	3
 15197  001DA4  6E12               	movwf	dispLogs@myLog,c
 15198  001DA6  EC8C  F020         	call	_dispLogs	;wreg free
 15199                           
 15200                           ;UI.c: 342: }
 15201  001DAA  D05C               	goto	i2l254
 15202  001DAC                     i2l7496:
 15203                           
 15204                           ;UI.c: 343: else if(back){
 15205  001DAC  505B               	movf	_back,w,c
 15206  001DAE  105C               	iorwf	_back+1,w,c
 15207  001DB0  B4D8               	btfsc	status,2,c
 15208  001DB2  D058               	goto	i2l254
 15209                           
 15210                           ;UI.c: 344: change_state_to_menu_23();
 15211  001DB4  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 15212                           
 15213                           ;UI.c: 345: }
 15214                           ;UI.c: 346: break;
 15215  001DB8  D055               	goto	i2l254
 15216  001DBA                     i2l7500:
 15217                           
 15218                           ;UI.c: 349: if(up){
 15219  001DBA  5077               	movf	_up,w,c
 15220  001DBC  1078               	iorwf	_up+1,w,c
 15221  001DBE  B4D8               	btfsc	status,2,c
 15222  001DC0  D003               	goto	i2l7504
 15223                           
 15224                           ;UI.c: 350: change_state_to_logs_33();
 15225  001DC2  EC5D  F01F         	call	_change_state_to_logs_33	;wreg free
 15226                           
 15227                           ;UI.c: 351: }
 15228  001DC6  D04E               	goto	i2l254
 15229  001DC8                     i2l7504:
 15230                           
 15231                           ;UI.c: 352: else if(down){
 15232  001DC8  5067               	movf	_down,w,c
 15233  001DCA  1068               	iorwf	_down+1,w,c
 15234  001DCC  B4D8               	btfsc	status,2,c
 15235  001DCE  D003               	goto	i2l7508
 15236                           
 15237                           ;UI.c: 353: change_state_to_logs_11();
 15238  001DD0  ECA5  F01F         	call	_change_state_to_logs_11	;wreg free
 15239                           
 15240                           ;UI.c: 354: }
 15241  001DD4  D047               	goto	i2l254
 15242  001DD6                     i2l7508:
 15243                           
 15244                           ;UI.c: 355: else if(enter){
 15245  001DD6  5069               	movf	_enter,w,c
 15246  001DD8  106A               	iorwf	_enter+1,w,c
 15247  001DDA  B4D8               	btfsc	status,2,c
 15248  001DDC  D007               	goto	i2l7512
 15249                           
 15250                           ;UI.c: 356: dispLogs(4);
 15251  001DDE  0E00               	movlw	0
 15252  001DE0  6E13               	movwf	dispLogs@myLog+1,c
 15253  001DE2  0E04               	movlw	4
 15254  001DE4  6E12               	movwf	dispLogs@myLog,c
 15255  001DE6  EC8C  F020         	call	_dispLogs	;wreg free
 15256                           
 15257                           ;UI.c: 357: }
 15258  001DEA  D03C               	goto	i2l254
 15259  001DEC                     i2l7512:
 15260                           
 15261                           ;UI.c: 358: else if(back){
 15262  001DEC  505B               	movf	_back,w,c
 15263  001DEE  105C               	iorwf	_back+1,w,c
 15264  001DF0  B4D8               	btfsc	status,2,c
 15265  001DF2  D038               	goto	i2l254
 15266                           
 15267                           ;UI.c: 359: change_state_to_menu_23();
 15268  001DF4  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 15269                           
 15270                           ;UI.c: 365: }
 15271                           
 15272                           ;UI.c: 364: break;
 15273                           
 15274                           ;UI.c: 363: default:
 15275                           
 15276                           ;UI.c: 360: }
 15277                           ;UI.c: 361: break;
 15278  001DF8  D035               	goto	i2l254
 15279  001DFA                     i2l7518:
 15280  001DFA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15281  001DFE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15282                           
 15283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15284                           ; Switch size 1, requested type "space"
 15285                           ; Number of cases is 3, Range of values is 0 to 4
 15286                           ; switch strategies available:
 15287                           ; Name         Instructions Cycles
 15288                           ; simple_byte           10     6 (average)
 15289                           ;	Chosen strategy is simple_byte
 15290  001E02  5044               	movf	??_updateMenu+1,w,c
 15291  001E04  0A00               	xorlw	0	; case 0
 15292  001E06  B4D8               	btfsc	status,2,c
 15293  001E08  D007               	goto	i2l8112
 15294  001E0A  0A03               	xorlw	3	; case 3
 15295  001E0C  B4D8               	btfsc	status,2,c
 15296  001E0E  D015               	goto	i2l8114
 15297  001E10  0A07               	xorlw	7	; case 4
 15298  001E12  B4D8               	btfsc	status,2,c
 15299  001E14  D020               	goto	i2l8116
 15300  001E16  D026               	goto	i2l254
 15301  001E18                     i2l8112:
 15302                           
 15303                           ; Switch size 1, requested type "space"
 15304                           ; Number of cases is 5, Range of values is 0 to 23
 15305                           ; switch strategies available:
 15306                           ; Name         Instructions Cycles
 15307                           ; simple_byte           16     9 (average)
 15308                           ;	Chosen strategy is simple_byte
 15309  001E18  5043               	movf	??_updateMenu,w,c
 15310  001E1A  0A00               	xorlw	0	; case 0
 15311  001E1C  B4D8               	btfsc	status,2,c
 15312  001E1E  D6DC               	goto	i2l7370
 15313  001E20  0A0B               	xorlw	11	; case 11
 15314  001E22  B4D8               	btfsc	status,2,c
 15315  001E24  D6DC               	goto	i2l7372
 15316  001E26  0A07               	xorlw	7	; case 12
 15317  001E28  B4D8               	btfsc	status,2,c
 15318  001E2A  D6EE               	goto	i2l7384
 15319  001E2C  0A1A               	xorlw	26	; case 22
 15320  001E2E  B4D8               	btfsc	status,2,c
 15321  001E30  D6F9               	goto	i2l7396
 15322  001E32  0A01               	xorlw	1	; case 23
 15323  001E34  B4D8               	btfsc	status,2,c
 15324  001E36  D70C               	goto	i2l7408
 15325  001E38  D015               	goto	i2l254
 15326  001E3A                     i2l8114:
 15327                           
 15328                           ; Switch size 1, requested type "space"
 15329                           ; Number of cases is 4, Range of values is 243 to 255
 15330                           ; switch strategies available:
 15331                           ; Name         Instructions Cycles
 15332                           ; simple_byte           13     7 (average)
 15333                           ;	Chosen strategy is simple_byte
 15334  001E3A  5043               	movf	??_updateMenu,w,c
 15335  001E3C  0AF3               	xorlw	243	; case 243
 15336  001E3E  B4D8               	btfsc	status,2,c
 15337  001E40  D71C               	goto	i2l7420
 15338  001E42  0A07               	xorlw	7	; case 244
 15339  001E44  B4D8               	btfsc	status,2,c
 15340  001E46  D739               	goto	i2l7436
 15341  001E48  0A0A               	xorlw	10	; case 254
 15342  001E4A  B4D8               	btfsc	status,2,c
 15343  001E4C  D756               	goto	i2l7452
 15344  001E4E  0A01               	xorlw	1	; case 255
 15345  001E50  B4D8               	btfsc	status,2,c
 15346  001E52  D773               	goto	i2l7468
 15347  001E54  D007               	goto	i2l254
 15348  001E56                     i2l8116:
 15349                           
 15350                           ; Switch size 1, requested type "space"
 15351                           ; Number of cases is 2, Range of values is 9 to 10
 15352                           ; switch strategies available:
 15353                           ; Name         Instructions Cycles
 15354                           ; simple_byte            7     4 (average)
 15355                           ;	Chosen strategy is simple_byte
 15356  001E56  5043               	movf	??_updateMenu,w,c
 15357  001E58  0A09               	xorlw	9	; case 9
 15358  001E5A  B4D8               	btfsc	status,2,c
 15359  001E5C  D78E               	goto	i2l7484
 15360  001E5E  0A03               	xorlw	3	; case 10
 15361  001E60  B4D8               	btfsc	status,2,c
 15362  001E62  D7AB               	goto	i2l7500
 15363  001E64                     i2l254:
 15364                           
 15365                           ;UI.c: 366: }
 15366                           ;UI.c: 367: (INTCONbits.GIE = 1);
 15367  001E64  8EF2               	bsf	intcon,7,c	;volatile
 15368  001E66  0012               	return		;funcret
 15369  001E68                     __end_of_updateMenu:
 15370                           	opt stack 0
 15371                           pclatu	equ	0xFFB
 15372                           pclath	equ	0xFFA
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           intcon2	equ	0xFF1
 15381                           intcon3	equ	0xFF0
 15382                           indf0	equ	0xFEF
 15383                           postinc0	equ	0xFEE
 15384                           fsr0h	equ	0xFEA
 15385                           fsr0l	equ	0xFE9
 15386                           wreg	equ	0xFE8
 15387                           postdec1	equ	0xFE5
 15388                           fsr1h	equ	0xFE2
 15389                           fsr1l	equ	0xFE1
 15390                           indf2	equ	0xFDF
 15391                           postinc2	equ	0xFDE
 15392                           postdec2	equ	0xFDD
 15393                           fsr2h	equ	0xFDA
 15394                           fsr2l	equ	0xFD9
 15395                           status	equ	0xFD8
 15396                           
 15397 ;; *************** function i2_change_state_to_menu_start *****************
 15398 ;; Defined at:
 15399 ;;		line 472 in file "UI.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;		None
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;		None
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      void 
 15406 ;; Registers used:
 15407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;Total ram usage:        0 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    4
 15420 ;; This function calls:
 15421 ;;		i2_lcdInst
 15422 ;;		i2_printRTC
 15423 ;;		i2_printf
 15424 ;; This function is called by:
 15425 ;;		_updateMenu
 15426 ;; This function uses a non-reentrant model
 15427 ;;
 15428                           
 15429                           	psect	text57
 15430  004080                     __ptext57:
 15431                           	opt stack 0
 15432  004080                     i2_change_state_to_menu_start:
 15433                           	opt stack 18
 15434                           
 15435                           ;UI.c: 473: cur_state = 0;
 15436                           
 15437                           ;incstack = 0
 15438  004080  0E00               	movlw	0
 15439  004082  0100               	movlb	0	; () banked
 15440  004084  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15441  004086  0E00               	movlw	0
 15442  004088  6FDE               	movwf	_cur_state& (0+255),b
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;UI.c: 475: lcdInst(0b10000000);;
 15446  00408A  0E80               	movlw	128
 15447  00408C  EC1A  F021         	call	i2_lcdInst
 15448                           
 15449                           ;UI.c: 476: printRTC();
 15450  004090  EC34  F00F         	call	i2_printRTC	;wreg free
 15451                           
 15452                           ;UI.c: 477: lcdInst(0b11000000);;
 15453  004094  0EC0               	movlw	192
 15454  004096  EC1A  F021         	call	i2_lcdInst
 15455                           
 15456                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15457  00409A  0E20               	movlw	low STR_30
 15458  00409C  6E0D               	movwf	i2printf@f,c
 15459  00409E  0EFE               	movlw	high STR_30
 15460  0040A0  6E0E               	movwf	i2printf@f+1,c
 15461  0040A2  ECB8  F00A         	call	i2_printf	;wreg free
 15462  0040A6  0012               	return		;funcret
 15463  0040A8                     __end_ofi2_change_state_to_menu_start:
 15464                           	opt stack 0
 15465                           pclatu	equ	0xFFB
 15466                           pclath	equ	0xFFA
 15467                           tblptru	equ	0xFF8
 15468                           tblptrh	equ	0xFF7
 15469                           tblptrl	equ	0xFF6
 15470                           tablat	equ	0xFF5
 15471                           prodh	equ	0xFF4
 15472                           prodl	equ	0xFF3
 15473                           intcon	equ	0xFF2
 15474                           intcon2	equ	0xFF1
 15475                           intcon3	equ	0xFF0
 15476                           indf0	equ	0xFEF
 15477                           postinc0	equ	0xFEE
 15478                           fsr0h	equ	0xFEA
 15479                           fsr0l	equ	0xFE9
 15480                           wreg	equ	0xFE8
 15481                           postdec1	equ	0xFE5
 15482                           fsr1h	equ	0xFE2
 15483                           fsr1l	equ	0xFE1
 15484                           indf2	equ	0xFDF
 15485                           postinc2	equ	0xFDE
 15486                           postdec2	equ	0xFDD
 15487                           fsr2h	equ	0xFDA
 15488                           fsr2l	equ	0xFD9
 15489                           status	equ	0xFD8
 15490                           
 15491 ;; *************** function i2_printRTC *****************
 15492 ;; Defined at:
 15493 ;;		line 63 in file "RTC.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  printRTC       14   44[COMRAM] int [7]
 15498 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 15499 ;;  printRTC        2   64[COMRAM] int 
 15500 ;;  printRTC        2   58[COMRAM] int 
 15501 ;; Return value:  Size  Location     Type
 15502 ;;                  1    wreg      void 
 15503 ;; Registers used:
 15504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15505 ;; Tracked objects:
 15506 ;;		On entry : 0/0
 15507 ;;		On exit  : 0/0
 15508 ;;		Unchanged: 0/0
 15509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15511 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15512 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15513 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15514 ;;Total ram usage:       25 bytes
 15515 ;; Hardware stack levels used:    1
 15516 ;; Hardware stack levels required when called:    3
 15517 ;; This function calls:
 15518 ;;		i2_getRTC
 15519 ;;		i2_lcdInst
 15520 ;;		i2_printf
 15521 ;;		i2_strcpy
 15522 ;; This function is called by:
 15523 ;;		i2_change_state_to_menu_start
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           	psect	text58
 15528  001E68                     __ptext58:
 15529                           	opt stack 0
 15530  001E68                     i2_printRTC:
 15531                           	opt stack 18
 15532                           
 15533                           ;RTC.c: 64: getRTC();
 15534                           
 15535                           ;incstack = 0
 15536  001E68  ECCA  F01B         	call	i2_getRTC	;wreg free
 15537                           
 15538                           ;RTC.c: 65: char month[] = "MMM";
 15539  001E6C  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 15540  001E70  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 15541  001E74  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 15542  001E78  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 15543                           
 15544                           ;RTC.c: 66: int INT_time[7];
 15545                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 15546  001E7C  0E00               	movlw	0
 15547  001E7E  6E42               	movwf	i2printRTC@i+1,c
 15548  001E80  0E00               	movlw	0
 15549  001E82  6E41               	movwf	i2printRTC@i,c
 15550  001E84  BE42               	btfsc	i2printRTC@i+1,7,c
 15551  001E86  D006               	goto	i2l5916
 15552  001E88  5042               	movf	i2printRTC@i+1,w,c
 15553  001E8A  E135               	bnz	i2l591
 15554  001E8C  0E07               	movlw	7
 15555  001E8E  5C41               	subwf	i2printRTC@i,w,c
 15556  001E90  B0D8               	btfsc	status,0,c
 15557  001E92  D031               	goto	i2l591
 15558  001E94                     i2l5916:
 15559                           
 15560                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 15561  001E94  0E24               	movlw	low _time
 15562  001E96  2441               	addwf	i2printRTC@i,w,c
 15563  001E98  6ED9               	movwf	fsr2l,c
 15564  001E9A  0E01               	movlw	high _time
 15565  001E9C  2042               	addwfc	i2printRTC@i+1,w,c
 15566  001E9E  6EDA               	movwf	fsr2h,c
 15567  001EA0  50DF               	movf	indf2,w,c
 15568  001EA2  6E2A               	movwf	??i2_printRTC& (0+255),c
 15569  001EA4  3A2A               	swapf	??i2_printRTC,f,c
 15570  001EA6  0E0F               	movlw	15
 15571  001EA8  162A               	andwf	??i2_printRTC,f,c
 15572  001EAA  0E0F               	movlw	15
 15573  001EAC  162A               	andwf	??i2_printRTC,f,c
 15574  001EAE  502A               	movf	??i2_printRTC,w,c
 15575  001EB0  0D0A               	mullw	10
 15576  001EB2  0E24               	movlw	low _time
 15577  001EB4  2441               	addwf	i2printRTC@i,w,c
 15578  001EB6  6ED9               	movwf	fsr2l,c
 15579  001EB8  0E01               	movlw	high _time
 15580  001EBA  2042               	addwfc	i2printRTC@i+1,w,c
 15581  001EBC  6EDA               	movwf	fsr2h,c
 15582  001EBE  50DF               	movf	indf2,w,c
 15583  001EC0  0B0F               	andlw	15
 15584  001EC2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 15585  001EC4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 15586  001EC6  50F3               	movf	prodl,w,c
 15587  001EC8  262B               	addwf	??i2_printRTC+1,f,c
 15588  001ECA  50F4               	movf	prodh,w,c
 15589  001ECC  222C               	addwfc	??i2_printRTC+2,f,c
 15590  001ECE  90D8               	bcf	status,0,c
 15591  001ED0  3441               	rlcf	i2printRTC@i,w,c
 15592  001ED2  6ED9               	movwf	fsr2l,c
 15593  001ED4  3442               	rlcf	i2printRTC@i+1,w,c
 15594  001ED6  6EDA               	movwf	fsr2h,c
 15595  001ED8  0E2D               	movlw	low i2printRTC@INT_time
 15596  001EDA  26D9               	addwf	fsr2l,f,c
 15597  001EDC  0E00               	movlw	high i2printRTC@INT_time
 15598  001EDE  22DA               	addwfc	fsr2h,f,c
 15599  001EE0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15600  001EE4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15601  001EE8  4A41               	infsnz	i2printRTC@i,f,c
 15602  001EEA  2A42               	incf	i2printRTC@i+1,f,c
 15603  001EEC  BE42               	btfsc	i2printRTC@i+1,7,c
 15604  001EEE  D7D2               	goto	i2l5916
 15605  001EF0  5042               	movf	i2printRTC@i+1,w,c
 15606  001EF2  E101               	bnz	i2u453_40
 15607  001EF4  D7CB               	goto	L10
 15608  001EF6                     i2u453_40:
 15609  001EF6                     i2l591:
 15610                           
 15611                           ;RTC.c: 69: }
 15612                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15613  001EF6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15614  001EFA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15615                           
 15616                           ;RTC.c: 71: switch(RTC_month){
 15617  001EFE  D084               	goto	i2l5948
 15618  001F00                     i2l5922:
 15619                           
 15620                           ;RTC.c: 73: strcpy(month, "JAN");
 15621  001F00  0E3D               	movlw	low i2printRTC@month
 15622  001F02  6E01               	movwf	i2strcpy@to,c
 15623  001F04  0E00               	movlw	high i2printRTC@month
 15624  001F06  6E02               	movwf	i2strcpy@to+1,c
 15625  001F08  0EDB               	movlw	low STR_8
 15626  001F0A  6E03               	movwf	i2strcpy@from,c
 15627  001F0C  0EFF               	movlw	high STR_8
 15628  001F0E  6E04               	movwf	i2strcpy@from+1,c
 15629  001F10  ECCC  F01E         	call	i2_strcpy	;wreg free
 15630                           
 15631                           ;RTC.c: 74: break;
 15632  001F14  D0A6               	goto	i2l5950
 15633  001F16                     i2l5924:
 15634                           
 15635                           ;RTC.c: 76: strcpy(month, "FEB");
 15636  001F16  0E3D               	movlw	low i2printRTC@month
 15637  001F18  6E01               	movwf	i2strcpy@to,c
 15638  001F1A  0E00               	movlw	high i2printRTC@month
 15639  001F1C  6E02               	movwf	i2strcpy@to+1,c
 15640  001F1E  0ECB               	movlw	low STR_9
 15641  001F20  6E03               	movwf	i2strcpy@from,c
 15642  001F22  0EFF               	movlw	high STR_9
 15643  001F24  6E04               	movwf	i2strcpy@from+1,c
 15644  001F26  ECCC  F01E         	call	i2_strcpy	;wreg free
 15645                           
 15646                           ;RTC.c: 77: break;
 15647  001F2A  D09B               	goto	i2l5950
 15648  001F2C                     i2l5926:
 15649                           
 15650                           ;RTC.c: 79: strcpy(month, "MAR");
 15651  001F2C  0E3D               	movlw	low i2printRTC@month
 15652  001F2E  6E01               	movwf	i2strcpy@to,c
 15653  001F30  0E00               	movlw	high i2printRTC@month
 15654  001F32  6E02               	movwf	i2strcpy@to+1,c
 15655  001F34  0EE7               	movlw	low STR_10
 15656  001F36  6E03               	movwf	i2strcpy@from,c
 15657  001F38  0EFF               	movlw	high STR_10
 15658  001F3A  6E04               	movwf	i2strcpy@from+1,c
 15659  001F3C  ECCC  F01E         	call	i2_strcpy	;wreg free
 15660                           
 15661                           ;RTC.c: 80: break;
 15662  001F40  D090               	goto	i2l5950
 15663  001F42                     i2l5928:
 15664                           
 15665                           ;RTC.c: 82: strcpy(month, "APR");
 15666  001F42  0E3D               	movlw	low i2printRTC@month
 15667  001F44  6E01               	movwf	i2strcpy@to,c
 15668  001F46  0E00               	movlw	high i2printRTC@month
 15669  001F48  6E02               	movwf	i2strcpy@to+1,c
 15670  001F4A  0EEB               	movlw	low STR_11
 15671  001F4C  6E03               	movwf	i2strcpy@from,c
 15672  001F4E  0EFF               	movlw	high STR_11
 15673  001F50  6E04               	movwf	i2strcpy@from+1,c
 15674  001F52  ECCC  F01E         	call	i2_strcpy	;wreg free
 15675                           
 15676                           ;RTC.c: 83: break;
 15677  001F56  D085               	goto	i2l5950
 15678  001F58                     i2l5930:
 15679                           
 15680                           ;RTC.c: 85: strcpy(month, "MAY");
 15681  001F58  0E3D               	movlw	low i2printRTC@month
 15682  001F5A  6E01               	movwf	i2strcpy@to,c
 15683  001F5C  0E00               	movlw	high i2printRTC@month
 15684  001F5E  6E02               	movwf	i2strcpy@to+1,c
 15685  001F60  0EFB               	movlw	low STR_12
 15686  001F62  6E03               	movwf	i2strcpy@from,c
 15687  001F64  0EFF               	movlw	high STR_12
 15688  001F66  6E04               	movwf	i2strcpy@from+1,c
 15689  001F68  ECCC  F01E         	call	i2_strcpy	;wreg free
 15690                           
 15691                           ;RTC.c: 86: break;
 15692  001F6C  D07A               	goto	i2l5950
 15693  001F6E                     i2l5932:
 15694                           
 15695                           ;RTC.c: 88: strcpy(month, "JUN");
 15696  001F6E  0E3D               	movlw	low i2printRTC@month
 15697  001F70  6E01               	movwf	i2strcpy@to,c
 15698  001F72  0E00               	movlw	high i2printRTC@month
 15699  001F74  6E02               	movwf	i2strcpy@to+1,c
 15700  001F76  0EDF               	movlw	low STR_13
 15701  001F78  6E03               	movwf	i2strcpy@from,c
 15702  001F7A  0EFF               	movlw	high STR_13
 15703  001F7C  6E04               	movwf	i2strcpy@from+1,c
 15704  001F7E  ECCC  F01E         	call	i2_strcpy	;wreg free
 15705                           
 15706                           ;RTC.c: 89: break;
 15707  001F82  D06F               	goto	i2l5950
 15708  001F84                     i2l5934:
 15709                           
 15710                           ;RTC.c: 91: strcpy(month, "JUL");
 15711  001F84  0E3D               	movlw	low i2printRTC@month
 15712  001F86  6E01               	movwf	i2strcpy@to,c
 15713  001F88  0E00               	movlw	high i2printRTC@month
 15714  001F8A  6E02               	movwf	i2strcpy@to+1,c
 15715  001F8C  0ED7               	movlw	low STR_14
 15716  001F8E  6E03               	movwf	i2strcpy@from,c
 15717  001F90  0EFF               	movlw	high STR_14
 15718  001F92  6E04               	movwf	i2strcpy@from+1,c
 15719  001F94  ECCC  F01E         	call	i2_strcpy	;wreg free
 15720                           
 15721                           ;RTC.c: 92: break;
 15722  001F98  D064               	goto	i2l5950
 15723  001F9A                     i2l5936:
 15724                           
 15725                           ;RTC.c: 94: strcpy(month, "AUG");
 15726  001F9A  0E3D               	movlw	low i2printRTC@month
 15727  001F9C  6E01               	movwf	i2strcpy@to,c
 15728  001F9E  0E00               	movlw	high i2printRTC@month
 15729  001FA0  6E02               	movwf	i2strcpy@to+1,c
 15730  001FA2  0ED3               	movlw	low STR_15
 15731  001FA4  6E03               	movwf	i2strcpy@from,c
 15732  001FA6  0EFF               	movlw	high STR_15
 15733  001FA8  6E04               	movwf	i2strcpy@from+1,c
 15734  001FAA  ECCC  F01E         	call	i2_strcpy	;wreg free
 15735                           
 15736                           ;RTC.c: 95: break;
 15737  001FAE  D059               	goto	i2l5950
 15738  001FB0                     i2l5938:
 15739                           
 15740                           ;RTC.c: 97: strcpy(month, "SEP");
 15741  001FB0  0E3D               	movlw	low i2printRTC@month
 15742  001FB2  6E01               	movwf	i2strcpy@to,c
 15743  001FB4  0E00               	movlw	high i2printRTC@month
 15744  001FB6  6E02               	movwf	i2strcpy@to+1,c
 15745  001FB8  0EE3               	movlw	low STR_16
 15746  001FBA  6E03               	movwf	i2strcpy@from,c
 15747  001FBC  0EFF               	movlw	high STR_16
 15748  001FBE  6E04               	movwf	i2strcpy@from+1,c
 15749  001FC0  ECCC  F01E         	call	i2_strcpy	;wreg free
 15750                           
 15751                           ;RTC.c: 98: break;
 15752  001FC4  D04E               	goto	i2l5950
 15753  001FC6                     i2l5940:
 15754                           
 15755                           ;RTC.c: 100: strcpy(month, "OCT");
 15756  001FC6  0E3D               	movlw	low i2printRTC@month
 15757  001FC8  6E01               	movwf	i2strcpy@to,c
 15758  001FCA  0E00               	movlw	high i2printRTC@month
 15759  001FCC  6E02               	movwf	i2strcpy@to+1,c
 15760  001FCE  0EF3               	movlw	low STR_17
 15761  001FD0  6E03               	movwf	i2strcpy@from,c
 15762  001FD2  0EFF               	movlw	high STR_17
 15763  001FD4  6E04               	movwf	i2strcpy@from+1,c
 15764  001FD6  ECCC  F01E         	call	i2_strcpy	;wreg free
 15765                           
 15766                           ;RTC.c: 101: break;
 15767  001FDA  D043               	goto	i2l5950
 15768  001FDC                     i2l5942:
 15769                           
 15770                           ;RTC.c: 103: strcpy(month, "NOV");
 15771  001FDC  0E3D               	movlw	low i2printRTC@month
 15772  001FDE  6E01               	movwf	i2strcpy@to,c
 15773  001FE0  0E00               	movlw	high i2printRTC@month
 15774  001FE2  6E02               	movwf	i2strcpy@to+1,c
 15775  001FE4  0EF7               	movlw	low STR_18
 15776  001FE6  6E03               	movwf	i2strcpy@from,c
 15777  001FE8  0EFF               	movlw	high STR_18
 15778  001FEA  6E04               	movwf	i2strcpy@from+1,c
 15779  001FEC  ECCC  F01E         	call	i2_strcpy	;wreg free
 15780                           
 15781                           ;RTC.c: 104: break;
 15782  001FF0  D038               	goto	i2l5950
 15783  001FF2                     i2l5944:
 15784                           
 15785                           ;RTC.c: 106: strcpy(month, "DEC");
 15786  001FF2  0E3D               	movlw	low i2printRTC@month
 15787  001FF4  6E01               	movwf	i2strcpy@to,c
 15788  001FF6  0E00               	movlw	high i2printRTC@month
 15789  001FF8  6E02               	movwf	i2strcpy@to+1,c
 15790  001FFA  0ECF               	movlw	low STR_19
 15791  001FFC  6E03               	movwf	i2strcpy@from,c
 15792  001FFE  0EFF               	movlw	high STR_19
 15793  002000  6E04               	movwf	i2strcpy@from+1,c
 15794  002002  ECCC  F01E         	call	i2_strcpy	;wreg free
 15795                           
 15796                           ;RTC.c: 108: }
 15797                           
 15798                           ;RTC.c: 107: break;
 15799  002006  D02D               	goto	i2l5950
 15800  002008                     i2l5948:
 15801  002008  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15802  00200C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15803                           
 15804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15805                           ; Switch size 1, requested type "space"
 15806                           ; Number of cases is 1, Range of values is 0 to 0
 15807                           ; switch strategies available:
 15808                           ; Name         Instructions Cycles
 15809                           ; simple_byte            4     3 (average)
 15810                           ;	Chosen strategy is simple_byte
 15811  002010  502B               	movf	??i2_printRTC+1,w,c
 15812  002012  0A00               	xorlw	0	; case 0
 15813  002014  A4D8               	btfss	status,2,c
 15814  002016  D025               	goto	i2l5950
 15815                           
 15816                           ; Switch size 1, requested type "space"
 15817                           ; Number of cases is 12, Range of values is 1 to 12
 15818                           ; switch strategies available:
 15819                           ; Name         Instructions Cycles
 15820                           ; simple_byte           37    19 (average)
 15821                           ;	Chosen strategy is simple_byte
 15822  002018  502A               	movf	??i2_printRTC,w,c
 15823  00201A  0A01               	xorlw	1	; case 1
 15824  00201C  B4D8               	btfsc	status,2,c
 15825  00201E  D770               	goto	i2l5922
 15826  002020  0A03               	xorlw	3	; case 2
 15827  002022  B4D8               	btfsc	status,2,c
 15828  002024  D778               	goto	i2l5924
 15829  002026  0A01               	xorlw	1	; case 3
 15830  002028  B4D8               	btfsc	status,2,c
 15831  00202A  D780               	goto	i2l5926
 15832  00202C  0A07               	xorlw	7	; case 4
 15833  00202E  B4D8               	btfsc	status,2,c
 15834  002030  D788               	goto	i2l5928
 15835  002032  0A01               	xorlw	1	; case 5
 15836  002034  B4D8               	btfsc	status,2,c
 15837  002036  D790               	goto	i2l5930
 15838  002038  0A03               	xorlw	3	; case 6
 15839  00203A  B4D8               	btfsc	status,2,c
 15840  00203C  D798               	goto	i2l5932
 15841  00203E  0A01               	xorlw	1	; case 7
 15842  002040  B4D8               	btfsc	status,2,c
 15843  002042  D7A0               	goto	i2l5934
 15844  002044  0A0F               	xorlw	15	; case 8
 15845  002046  B4D8               	btfsc	status,2,c
 15846  002048  D7A8               	goto	i2l5936
 15847  00204A  0A01               	xorlw	1	; case 9
 15848  00204C  B4D8               	btfsc	status,2,c
 15849  00204E  D7B0               	goto	i2l5938
 15850  002050  0A03               	xorlw	3	; case 10
 15851  002052  B4D8               	btfsc	status,2,c
 15852  002054  D7B8               	goto	i2l5940
 15853  002056  0A01               	xorlw	1	; case 11
 15854  002058  B4D8               	btfsc	status,2,c
 15855  00205A  D7C0               	goto	i2l5942
 15856  00205C  0A07               	xorlw	7	; case 12
 15857  00205E  B4D8               	btfsc	status,2,c
 15858  002060  D7C8               	goto	i2l5944
 15859  002062                     i2l5950:
 15860                           
 15861                           ;RTC.c: 109: lcdInst(0b10000000);;
 15862  002062  0E80               	movlw	128
 15863  002064  EC1A  F021         	call	i2_lcdInst
 15864                           
 15865                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15866  002068  0E54               	movlw	low STR_21
 15867  00206A  6E0D               	movwf	i2printf@f,c
 15868  00206C  0EFB               	movlw	high STR_21
 15869  00206E  6E0E               	movwf	i2printf@f+1,c
 15870  002070  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15871  002074  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15872  002078  0E3D               	movlw	low i2printRTC@month
 15873  00207A  6E11               	movwf	?i2_printf+4,c
 15874  00207C  0E00               	movlw	high i2printRTC@month
 15875  00207E  6E12               	movwf	?i2_printf+5,c
 15876  002080  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15877  002084  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15878  002088  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15879  00208C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15880  002090  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15881  002094  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15882  002098  ECB8  F00A         	call	i2_printf	;wreg free
 15883  00209C  0012               	return		;funcret
 15884  00209E                     __end_ofi2_printRTC:
 15885                           	opt stack 0
 15886                           pclatu	equ	0xFFB
 15887                           pclath	equ	0xFFA
 15888                           tblptru	equ	0xFF8
 15889                           tblptrh	equ	0xFF7
 15890                           tblptrl	equ	0xFF6
 15891                           tablat	equ	0xFF5
 15892                           prodh	equ	0xFF4
 15893                           prodl	equ	0xFF3
 15894                           intcon	equ	0xFF2
 15895                           intcon2	equ	0xFF1
 15896                           intcon3	equ	0xFF0
 15897                           indf0	equ	0xFEF
 15898                           postinc0	equ	0xFEE
 15899                           fsr0h	equ	0xFEA
 15900                           fsr0l	equ	0xFE9
 15901                           wreg	equ	0xFE8
 15902                           postdec1	equ	0xFE5
 15903                           fsr1h	equ	0xFE2
 15904                           fsr1l	equ	0xFE1
 15905                           indf2	equ	0xFDF
 15906                           postinc2	equ	0xFDE
 15907                           postdec2	equ	0xFDD
 15908                           fsr2h	equ	0xFDA
 15909                           fsr2l	equ	0xFD9
 15910                           status	equ	0xFD8
 15911                           
 15912 ;; *************** function i2_strcpy *****************
 15913 ;; Defined at:
 15914 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15915 ;; Parameters:    Size  Location     Type
 15916 ;;  to              2    0[COMRAM] PTR unsigned char 
 15917 ;;		 -> printRTC@month(4), UI@month(4), 
 15918 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15919 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15920 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15921 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15922 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15923 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15924 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15925 ;;		 -> STR_8(4), 
 15926 ;; Auto vars:     Size  Location     Type
 15927 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15928 ;;		 -> printRTC@month(4), UI@month(4), 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;                  2    0[COMRAM] PTR unsigned char 
 15931 ;; Registers used:
 15932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15941 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15942 ;;Total ram usage:        6 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; This function calls:
 15945 ;;		Nothing
 15946 ;; This function is called by:
 15947 ;;		i2_printRTC
 15948 ;; This function uses a non-reentrant model
 15949 ;;
 15950                           
 15951                           	psect	text59
 15952  003D98                     __ptext59:
 15953                           	opt stack 0
 15954  003D98                     i2_strcpy:
 15955                           	opt stack 20
 15956                           
 15957                           ;incstack = 0
 15958  003D98  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15959  003D9C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15960  003DA0  D004               	goto	i2l5596
 15961  003DA2                     i2l5594:
 15962  003DA2  4A05               	infsnz	i2strcpy@cp,f,c
 15963  003DA4  2A06               	incf	i2strcpy@cp+1,f,c
 15964  003DA6  4A03               	infsnz	i2strcpy@from,f,c
 15965  003DA8  2A04               	incf	i2strcpy@from+1,f,c
 15966  003DAA                     i2l5596:
 15967  003DAA  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15968  003DAE  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15969  003DB2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15970  003DB2  6AF8               	clrf	tblptru,c
 15971  003DB4                     	endif
 15972  003DB4                     	if	0	;tblptru may be non-zero
 15973  003DB4                     	endif
 15974  003DB4  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15975  003DB8  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15976  003DBC  0008               	tblrd		*
 15977  003DBE  CFF5 FFDF          	movff	tablat,indf2
 15978  003DC2  50DF               	movf	indf2,w,c
 15979  003DC4  B4D8               	btfsc	status,2,c
 15980  003DC6  0012               	return	
 15981  003DC8  D7EC               	goto	i2l5594
 15982  003DCA                     __end_ofi2_strcpy:
 15983                           	opt stack 0
 15984                           pclatu	equ	0xFFB
 15985                           pclath	equ	0xFFA
 15986                           tblptru	equ	0xFF8
 15987                           tblptrh	equ	0xFF7
 15988                           tblptrl	equ	0xFF6
 15989                           tablat	equ	0xFF5
 15990                           prodh	equ	0xFF4
 15991                           prodl	equ	0xFF3
 15992                           intcon	equ	0xFF2
 15993                           intcon2	equ	0xFF1
 15994                           intcon3	equ	0xFF0
 15995                           indf0	equ	0xFEF
 15996                           postinc0	equ	0xFEE
 15997                           fsr0h	equ	0xFEA
 15998                           fsr0l	equ	0xFE9
 15999                           wreg	equ	0xFE8
 16000                           postdec1	equ	0xFE5
 16001                           fsr1h	equ	0xFE2
 16002                           fsr1l	equ	0xFE1
 16003                           indf2	equ	0xFDF
 16004                           postinc2	equ	0xFDE
 16005                           postdec2	equ	0xFDD
 16006                           fsr2h	equ	0xFDA
 16007                           fsr2l	equ	0xFD9
 16008                           status	equ	0xFD8
 16009                           
 16010 ;; *************** function _inputHandler *****************
 16011 ;; Defined at:
 16012 ;;		line 370 in file "UI.c"
 16013 ;; Parameters:    Size  Location     Type
 16014 ;;		None
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;		None
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  2   41[COMRAM] int 
 16019 ;; Registers used:
 16020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16021 ;; Tracked objects:
 16022 ;;		On entry : 0/0
 16023 ;;		On exit  : 0/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;Total ram usage:        4 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:    4
 16033 ;; This function calls:
 16034 ;;		_change_state_to_logs_11
 16035 ;;		_change_state_to_logs_12
 16036 ;;		_change_state_to_logs_22
 16037 ;;		_change_state_to_logs_23
 16038 ;;		_change_state_to_logs_33
 16039 ;;		_change_state_to_logs_34
 16040 ;;		_change_state_to_menu_11
 16041 ;;		_change_state_to_menu_23
 16042 ;;		i2_change_state_to_menu_12
 16043 ;;		i2_change_state_to_menu_22
 16044 ;; This function is called by:
 16045 ;;		_updateMenu
 16046 ;; This function uses a non-reentrant model
 16047 ;;
 16048                           
 16049                           	psect	text60
 16050  002290                     __ptext60:
 16051                           	opt stack 0
 16052  002290                     _inputHandler:
 16053                           	opt stack 18
 16054                           
 16055                           ;UI.c: 375: if(firstboot){
 16056                           
 16057                           ;incstack = 0
 16058  002290  5075               	movf	_firstboot,w,c
 16059  002292  1076               	iorwf	_firstboot+1,w,c
 16060  002294  B4D8               	btfsc	status,2,c
 16061  002296  D00B               	goto	i2l6018
 16062                           
 16063                           ;UI.c: 376: change_state_to_menu_11();
 16064  002298  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 16065                           
 16066                           ;UI.c: 377: firstboot = 0;
 16067  00229C  0E00               	movlw	0
 16068  00229E  6E76               	movwf	_firstboot+1,c
 16069  0022A0  0E00               	movlw	0
 16070  0022A2  6E75               	movwf	_firstboot,c
 16071                           
 16072                           ;UI.c: 378: return 0;
 16073  0022A4  0E00               	movlw	0
 16074  0022A6  6E2B               	movwf	?_inputHandler+1,c
 16075  0022A8  0E00               	movlw	0
 16076  0022AA  6E2A               	movwf	?_inputHandler,c
 16077  0022AC  0012               	return	
 16078  0022AE                     i2l6018:
 16079                           
 16080                           ;UI.c: 379: }
 16081                           ;UI.c: 380: if (logstate){
 16082  0022AE  0100               	movlb	0	; () banked
 16083  0022B0  51F6               	movf	_logstate& (0+255),w,b
 16084  0022B2  0100               	movlb	0	; () banked
 16085  0022B4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16086  0022B6  B4D8               	btfsc	status,2,c
 16087  0022B8  D0C7               	goto	i2l6136
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16091  0022BA  0E43               	movlw	67
 16092  0022BC  187D               	xorwf	_input,w,c	;volatile
 16093  0022BE  A4D8               	btfss	status,2,c
 16094  0022C0  D012               	goto	i2l6036
 16095                           
 16096                           ; BSR set to: 0
 16097  0022C2  B281               	btfsc	3969,1,c	;volatile
 16098  0022C4  D009               	goto	i2l6028
 16099  0022C6  D00F               	goto	i2l6036
 16100  0022C8                     i2l6026:
 16101                           
 16102                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16103  0022C8  0E68               	movlw	104
 16104  0022CA  6E2C               	movwf	??_inputHandler& (0+255),c
 16105  0022CC  0EE4               	movlw	228
 16106  0022CE                     i2u779_47:
 16107  0022CE  2EE8               	decfsz	wreg,f,c
 16108  0022D0  D7FE               	bra	i2u779_47
 16109  0022D2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16110  0022D4  D7FC               	bra	i2u779_47
 16111  0022D6  D000               	nop2	
 16112  0022D8                     i2l6028:
 16113  0022D8  B281               	btfsc	3969,1,c	;volatile
 16114  0022DA  D7F6               	goto	i2l6026
 16115  0022DC                     i2l6030:
 16116                           
 16117                           ;UI.c: 385: }
 16118                           ;UI.c: 386: return 0;
 16119  0022DC  0E00               	movlw	0
 16120  0022DE  6E2B               	movwf	?_inputHandler+1,c
 16121  0022E0  0E00               	movlw	0
 16122  0022E2  6E2A               	movwf	?_inputHandler,c
 16123  0022E4  0012               	return	
 16124  0022E6                     i2l6036:
 16125                           
 16126                           ;UI.c: 388: else if (input == 'D'){
 16127  0022E6  0E44               	movlw	68
 16128  0022E8  187D               	xorwf	_input,w,c	;volatile
 16129  0022EA  A4D8               	btfss	status,2,c
 16130  0022EC  D7F7               	goto	i2l6030
 16131                           
 16132                           ;UI.c: 390: logstate = 0;
 16133  0022EE  0E00               	movlw	0
 16134  0022F0  0100               	movlb	0	; () banked
 16135  0022F2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16136  0022F4  0E00               	movlw	0
 16137  0022F6  6FF6               	movwf	_logstate& (0+255),b
 16138                           
 16139                           ;UI.c: 391: switch(cur_state){
 16140  0022F8  D012               	goto	i2l6054
 16141  0022FA                     i2l6040:
 16142                           
 16143                           ;UI.c: 393: change_state_to_logs_11();
 16144  0022FA  ECA5  F01F         	call	_change_state_to_logs_11	;wreg free
 16145                           
 16146                           ;UI.c: 394: break;
 16147  0022FE  D7EE               	goto	i2l6030
 16148  002300                     i2l6042:
 16149                           
 16150                           ;UI.c: 396: change_state_to_logs_12();
 16151  002300  EC8D  F01F         	call	_change_state_to_logs_12	;wreg free
 16152                           
 16153                           ;UI.c: 397: break;
 16154  002304  D7EB               	goto	i2l6030
 16155  002306                     i2l6044:
 16156                           
 16157                           ;UI.c: 399: change_state_to_logs_22();
 16158  002306  EC75  F01F         	call	_change_state_to_logs_22	;wreg free
 16159                           
 16160                           ;UI.c: 400: break;
 16161  00230A  D7E8               	goto	i2l6030
 16162  00230C                     i2l6046:
 16163                           
 16164                           ;UI.c: 402: change_state_to_logs_23();
 16165  00230C  ECD4  F01F         	call	_change_state_to_logs_23	;wreg free
 16166                           
 16167                           ;UI.c: 403: break;
 16168  002310  D7E5               	goto	i2l6030
 16169  002312                     i2l6048:
 16170                           
 16171                           ;UI.c: 405: change_state_to_logs_33();
 16172  002312  EC5D  F01F         	call	_change_state_to_logs_33	;wreg free
 16173                           
 16174                           ;UI.c: 406: break;
 16175  002316  D7E2               	goto	i2l6030
 16176  002318                     i2l6050:
 16177                           
 16178                           ;UI.c: 408: change_state_to_logs_34();
 16179  002318  EC45  F01F         	call	_change_state_to_logs_34	;wreg free
 16180                           
 16181                           ;UI.c: 410: }
 16182                           
 16183                           ;UI.c: 409: break;
 16184  00231C  D7DF               	goto	i2l6030
 16185  00231E                     i2l6054:
 16186  00231E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16187  002322  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16188                           
 16189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16190                           ; Switch size 1, requested type "space"
 16191                           ; Number of cases is 2, Range of values is 3 to 4
 16192                           ; switch strategies available:
 16193                           ; Name         Instructions Cycles
 16194                           ; simple_byte            7     4 (average)
 16195                           ;	Chosen strategy is simple_byte
 16196  002326  502D               	movf	??_inputHandler+1,w,c
 16197  002328  0A03               	xorlw	3	; case 3
 16198  00232A  B4D8               	btfsc	status,2,c
 16199  00232C  D004               	goto	i2l8120
 16200  00232E  0A07               	xorlw	7	; case 4
 16201  002330  B4D8               	btfsc	status,2,c
 16202  002332  D00F               	goto	i2l8122
 16203  002334  D7D3               	goto	i2l6030
 16204  002336                     i2l8120:
 16205                           
 16206                           ; Switch size 1, requested type "space"
 16207                           ; Number of cases is 4, Range of values is 243 to 255
 16208                           ; switch strategies available:
 16209                           ; Name         Instructions Cycles
 16210                           ; simple_byte           13     7 (average)
 16211                           ;	Chosen strategy is simple_byte
 16212  002336  502C               	movf	??_inputHandler,w,c
 16213  002338  0AF3               	xorlw	243	; case 243
 16214  00233A  B4D8               	btfsc	status,2,c
 16215  00233C  D7DE               	goto	i2l6040
 16216  00233E  0A07               	xorlw	7	; case 244
 16217  002340  B4D8               	btfsc	status,2,c
 16218  002342  D7DE               	goto	i2l6042
 16219  002344  0A0A               	xorlw	10	; case 254
 16220  002346  B4D8               	btfsc	status,2,c
 16221  002348  D7DE               	goto	i2l6044
 16222  00234A  0A01               	xorlw	1	; case 255
 16223  00234C  B4D8               	btfsc	status,2,c
 16224  00234E  D7DE               	goto	i2l6046
 16225  002350  D7C5               	goto	i2l6030
 16226  002352                     i2l8122:
 16227                           
 16228                           ; Switch size 1, requested type "space"
 16229                           ; Number of cases is 2, Range of values is 9 to 10
 16230                           ; switch strategies available:
 16231                           ; Name         Instructions Cycles
 16232                           ; simple_byte            7     4 (average)
 16233                           ;	Chosen strategy is simple_byte
 16234  002352  502C               	movf	??_inputHandler,w,c
 16235  002354  0A09               	xorlw	9	; case 9
 16236  002356  B4D8               	btfsc	status,2,c
 16237  002358  D7DC               	goto	i2l6048
 16238  00235A  0A03               	xorlw	3	; case 10
 16239  00235C  B4D8               	btfsc	status,2,c
 16240  00235E  D7DC               	goto	i2l6050
 16241  002360  D7BD               	goto	i2l6030
 16242  002362                     i2l6066:
 16243                           
 16244                           ;UI.c: 420: if(cur_state == 11){
 16245  002362  0E0B               	movlw	11
 16246  002364  0100               	movlb	0	; () banked
 16247  002366  19DE               	xorwf	_cur_state& (0+255),w,b
 16248  002368  0100               	movlb	0	; () banked
 16249  00236A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16250  00236C  A4D8               	btfss	status,2,c
 16251  00236E  D005               	goto	i2l6074
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;UI.c: 421: return 0;
 16255  002370  0E00               	movlw	0
 16256  002372  6E2B               	movwf	?_inputHandler+1,c
 16257  002374  0E00               	movlw	0
 16258  002376  6E2A               	movwf	?_inputHandler,c
 16259                           
 16260                           ; BSR set to: 0
 16261  002378  0012               	return	
 16262  00237A                     i2l6074:
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;UI.c: 423: else{
 16266                           ;UI.c: 424: change_state_to_menu_11();
 16267  00237A  EC2D  F01F         	call	_change_state_to_menu_11	;wreg free
 16268                           
 16269                           ;UI.c: 425: }
 16270                           ;UI.c: 426: return 0;
 16271  00237E  0E00               	movlw	0
 16272  002380  6E2B               	movwf	?_inputHandler+1,c
 16273  002382  0E00               	movlw	0
 16274  002384  6E2A               	movwf	?_inputHandler,c
 16275  002386  0012               	return	
 16276  002388                     i2l6080:
 16277                           
 16278                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16279  002388  0E16               	movlw	22
 16280  00238A  0100               	movlb	0	; () banked
 16281  00238C  19DE               	xorwf	_cur_state& (0+255),w,b
 16282  00238E  0100               	movlb	0	; () banked
 16283  002390  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16284  002392  B4D8               	btfsc	status,2,c
 16285  002394  D007               	goto	i2l6084
 16286                           
 16287                           ; BSR set to: 0
 16288  002396  0E0C               	movlw	12
 16289  002398  0100               	movlb	0	; () banked
 16290  00239A  19DE               	xorwf	_cur_state& (0+255),w,b
 16291  00239C  0100               	movlb	0	; () banked
 16292  00239E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16293  0023A0  A4D8               	btfss	status,2,c
 16294  0023A2  D005               	goto	i2l6090
 16295  0023A4                     i2l6084:
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;UI.c: 429: return 0;
 16299  0023A4  0E00               	movlw	0
 16300  0023A6  6E2B               	movwf	?_inputHandler+1,c
 16301  0023A8  0E00               	movlw	0
 16302  0023AA  6E2A               	movwf	?_inputHandler,c
 16303                           
 16304                           ; BSR set to: 0
 16305  0023AC  0012               	return	
 16306  0023AE                     i2l6090:
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;UI.c: 431: else if(cur_state == 23){
 16310  0023AE  0E17               	movlw	23
 16311  0023B0  0100               	movlb	0	; () banked
 16312  0023B2  19DE               	xorwf	_cur_state& (0+255),w,b
 16313  0023B4  0100               	movlb	0	; () banked
 16314  0023B6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16315  0023B8  A4D8               	btfss	status,2,c
 16316  0023BA  D003               	goto	i2l6094
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;UI.c: 432: change_state_to_menu_22();
 16320  0023BC  ECE5  F01E         	call	i2_change_state_to_menu_22	;wreg free
 16321                           
 16322                           ;UI.c: 433: }
 16323  0023C0  D002               	goto	i2l6096
 16324  0023C2                     i2l6094:
 16325                           
 16326                           ;UI.c: 434: else{
 16327                           ;UI.c: 435: change_state_to_menu_12();
 16328  0023C2  ECFD  F01E         	call	i2_change_state_to_menu_12	;wreg free
 16329  0023C6                     i2l6096:
 16330                           
 16331                           ;UI.c: 436: }
 16332                           ;UI.c: 437: return 0;
 16333  0023C6  0E00               	movlw	0
 16334  0023C8  6E2B               	movwf	?_inputHandler+1,c
 16335  0023CA  0E00               	movlw	0
 16336  0023CC  6E2A               	movwf	?_inputHandler,c
 16337  0023CE  0012               	return	
 16338  0023D0                     i2l6100:
 16339                           
 16340                           ;UI.c: 439: if(cur_state == 23){
 16341  0023D0  0E17               	movlw	23
 16342  0023D2  0100               	movlb	0	; () banked
 16343  0023D4  19DE               	xorwf	_cur_state& (0+255),w,b
 16344  0023D6  0100               	movlb	0	; () banked
 16345  0023D8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16346  0023DA  A4D8               	btfss	status,2,c
 16347  0023DC  D005               	goto	i2l6108
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;UI.c: 440: return 0;
 16351  0023DE  0E00               	movlw	0
 16352  0023E0  6E2B               	movwf	?_inputHandler+1,c
 16353  0023E2  0E00               	movlw	0
 16354  0023E4  6E2A               	movwf	?_inputHandler,c
 16355                           
 16356                           ; BSR set to: 0
 16357  0023E6  0012               	return	
 16358  0023E8                     i2l6108:
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;UI.c: 442: else{
 16362                           ;UI.c: 443: change_state_to_menu_23();
 16363  0023E8  EC15  F01F         	call	_change_state_to_menu_23	;wreg free
 16364                           
 16365                           ;UI.c: 444: }
 16366                           ;UI.c: 445: return 0;
 16367  0023EC  0E00               	movlw	0
 16368  0023EE  6E2B               	movwf	?_inputHandler+1,c
 16369  0023F0  0E00               	movlw	0
 16370  0023F2  6E2A               	movwf	?_inputHandler,c
 16371  0023F4  0012               	return	
 16372  0023F6                     i2l6114:
 16373                           
 16374                           ;UI.c: 448: up = 1;
 16375  0023F6  0E00               	movlw	0
 16376  0023F8  6E78               	movwf	_up+1,c
 16377  0023FA  0E01               	movlw	1
 16378  0023FC  6E77               	movwf	_up,c
 16379                           
 16380                           ;UI.c: 449: return 1;
 16381  0023FE  0E00               	movlw	0
 16382  002400  6E2B               	movwf	?_inputHandler+1,c
 16383  002402  0E01               	movlw	1
 16384  002404  6E2A               	movwf	?_inputHandler,c
 16385  002406  0012               	return	
 16386  002408                     i2l6118:
 16387                           
 16388                           ;UI.c: 451: down = 1;
 16389  002408  0E00               	movlw	0
 16390  00240A  6E68               	movwf	_down+1,c
 16391  00240C  0E01               	movlw	1
 16392  00240E  6E67               	movwf	_down,c
 16393                           
 16394                           ;UI.c: 452: return 1;
 16395  002410  0E00               	movlw	0
 16396  002412  6E2B               	movwf	?_inputHandler+1,c
 16397  002414  0E01               	movlw	1
 16398  002416  6E2A               	movwf	?_inputHandler,c
 16399  002418  0012               	return	
 16400  00241A                     i2l6122:
 16401                           
 16402                           ;UI.c: 454: enter = 1;
 16403  00241A  0E00               	movlw	0
 16404  00241C  6E6A               	movwf	_enter+1,c
 16405  00241E  0E01               	movlw	1
 16406  002420  6E69               	movwf	_enter,c
 16407                           
 16408                           ;UI.c: 455: return 1;
 16409  002422  0E00               	movlw	0
 16410  002424  6E2B               	movwf	?_inputHandler+1,c
 16411  002426  0E01               	movlw	1
 16412  002428  6E2A               	movwf	?_inputHandler,c
 16413  00242A  0012               	return	
 16414  00242C                     i2l6126:
 16415                           
 16416                           ;UI.c: 457: back = 1;
 16417  00242C  0E00               	movlw	0
 16418  00242E  6E5C               	movwf	_back+1,c
 16419  002430  0E01               	movlw	1
 16420  002432  6E5B               	movwf	_back,c
 16421                           
 16422                           ;UI.c: 458: return 1;
 16423  002434  0E00               	movlw	0
 16424  002436  6E2B               	movwf	?_inputHandler+1,c
 16425  002438  0E01               	movlw	1
 16426  00243A  6E2A               	movwf	?_inputHandler,c
 16427  00243C  0012               	return	
 16428  00243E                     i2l6130:
 16429                           
 16430                           ;UI.c: 461: return 1;
 16431  00243E  0E00               	movlw	0
 16432  002440  6E2B               	movwf	?_inputHandler+1,c
 16433  002442  0E01               	movlw	1
 16434  002444  6E2A               	movwf	?_inputHandler,c
 16435                           
 16436                           ;UI.c: 462: }
 16437  002446  0012               	return	
 16438  002448                     i2l6136:
 16439  002448  507D               	movf	_input,w,c	;volatile
 16440                           
 16441                           ; Switch size 1, requested type "space"
 16442                           ; Number of cases is 7, Range of values is 49 to 68
 16443                           ; switch strategies available:
 16444                           ; Name         Instructions Cycles
 16445                           ; simple_byte           22    12 (average)
 16446                           ;	Chosen strategy is simple_byte
 16447  00244A  0A31               	xorlw	49	; case 49
 16448  00244C  B4D8               	btfsc	status,2,c
 16449  00244E  D789               	goto	i2l6066
 16450  002450  0A03               	xorlw	3	; case 50
 16451  002452  B4D8               	btfsc	status,2,c
 16452  002454  D799               	goto	i2l6080
 16453  002456  0A01               	xorlw	1	; case 51
 16454  002458  B4D8               	btfsc	status,2,c
 16455  00245A  D7BA               	goto	i2l6100
 16456  00245C  0A72               	xorlw	114	; case 65
 16457  00245E  B4D8               	btfsc	status,2,c
 16458  002460  D7CA               	goto	i2l6114
 16459  002462  0A03               	xorlw	3	; case 66
 16460  002464  B4D8               	btfsc	status,2,c
 16461  002466  D7D0               	goto	i2l6118
 16462  002468  0A01               	xorlw	1	; case 67
 16463  00246A  B4D8               	btfsc	status,2,c
 16464  00246C  D7D6               	goto	i2l6122
 16465  00246E  0A07               	xorlw	7	; case 68
 16466  002470  B4D8               	btfsc	status,2,c
 16467  002472  D7DC               	goto	i2l6126
 16468  002474  D7E4               	goto	i2l6130
 16469  002476                     __end_of_inputHandler:
 16470                           	opt stack 0
 16471                           pclatu	equ	0xFFB
 16472                           pclath	equ	0xFFA
 16473                           tblptru	equ	0xFF8
 16474                           tblptrh	equ	0xFF7
 16475                           tblptrl	equ	0xFF6
 16476                           tablat	equ	0xFF5
 16477                           prodh	equ	0xFF4
 16478                           prodl	equ	0xFF3
 16479                           intcon	equ	0xFF2
 16480                           intcon2	equ	0xFF1
 16481                           intcon3	equ	0xFF0
 16482                           indf0	equ	0xFEF
 16483                           postinc0	equ	0xFEE
 16484                           fsr0h	equ	0xFEA
 16485                           fsr0l	equ	0xFE9
 16486                           wreg	equ	0xFE8
 16487                           postdec1	equ	0xFE5
 16488                           fsr1h	equ	0xFE2
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8
 16496                           
 16497 ;; *************** function i2_change_state_to_menu_22 *****************
 16498 ;; Defined at:
 16499 ;;		line 496 in file "UI.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;		None
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;		None
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  1    wreg      void 
 16506 ;; Registers used:
 16507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 0/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;Total ram usage:        0 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; Hardware stack levels required when called:    3
 16520 ;; This function calls:
 16521 ;;		i2_lcdInst
 16522 ;;		i2_printf
 16523 ;; This function is called by:
 16524 ;;		_updateMenu
 16525 ;;		_inputHandler
 16526 ;; This function uses a non-reentrant model
 16527 ;;
 16528                           
 16529                           	psect	text61
 16530  003DCA                     __ptext61:
 16531                           	opt stack 0
 16532  003DCA                     i2_change_state_to_menu_22:
 16533                           	opt stack 19
 16534                           
 16535                           ;UI.c: 497: cur_state = 22;
 16536                           
 16537                           ;incstack = 0
 16538  003DCA  0E00               	movlw	0
 16539  003DCC  0100               	movlb	0	; () banked
 16540  003DCE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16541  003DD0  0E16               	movlw	22
 16542  003DD2  6FDE               	movwf	_cur_state& (0+255),b
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;UI.c: 499: lcdInst(0b10000000);;
 16546  003DD4  0E80               	movlw	128
 16547  003DD6  EC1A  F021         	call	i2_lcdInst
 16548                           
 16549                           ;UI.c: 500: printf("2. SORT        <");
 16550  003DDA  0EED               	movlw	low STR_34
 16551  003DDC  6E0D               	movwf	i2printf@f,c
 16552  003DDE  0EFD               	movlw	high STR_34
 16553  003DE0  6E0E               	movwf	i2printf@f+1,c
 16554  003DE2  ECB8  F00A         	call	i2_printf	;wreg free
 16555                           
 16556                           ;UI.c: 501: lcdInst(0b11000000);;
 16557  003DE6  0EC0               	movlw	192
 16558  003DE8  EC1A  F021         	call	i2_lcdInst
 16559                           
 16560                           ;UI.c: 502: printf("3. LOGS         ");
 16561  003DEC  0E32               	movlw	low STR_36
 16562  003DEE  6E0D               	movwf	i2printf@f,c
 16563  003DF0  0EFD               	movlw	high STR_36
 16564  003DF2  6E0E               	movwf	i2printf@f+1,c
 16565  003DF4  ECB8  F00A         	call	i2_printf	;wreg free
 16566  003DF8  0012               	return		;funcret
 16567  003DFA                     __end_ofi2_change_state_to_menu_22:
 16568                           	opt stack 0
 16569                           pclatu	equ	0xFFB
 16570                           pclath	equ	0xFFA
 16571                           tblptru	equ	0xFF8
 16572                           tblptrh	equ	0xFF7
 16573                           tblptrl	equ	0xFF6
 16574                           tablat	equ	0xFF5
 16575                           prodh	equ	0xFF4
 16576                           prodl	equ	0xFF3
 16577                           intcon	equ	0xFF2
 16578                           intcon2	equ	0xFF1
 16579                           intcon3	equ	0xFF0
 16580                           indf0	equ	0xFEF
 16581                           postinc0	equ	0xFEE
 16582                           fsr0h	equ	0xFEA
 16583                           fsr0l	equ	0xFE9
 16584                           wreg	equ	0xFE8
 16585                           postdec1	equ	0xFE5
 16586                           fsr1h	equ	0xFE2
 16587                           fsr1l	equ	0xFE1
 16588                           indf2	equ	0xFDF
 16589                           postinc2	equ	0xFDE
 16590                           postdec2	equ	0xFDD
 16591                           fsr2h	equ	0xFDA
 16592                           fsr2l	equ	0xFD9
 16593                           status	equ	0xFD8
 16594                           
 16595 ;; *************** function i2_change_state_to_menu_12 *****************
 16596 ;; Defined at:
 16597 ;;		line 488 in file "UI.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;		None
 16600 ;; Auto vars:     Size  Location     Type
 16601 ;;		None
 16602 ;; Return value:  Size  Location     Type
 16603 ;;                  1    wreg      void 
 16604 ;; Registers used:
 16605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16606 ;; Tracked objects:
 16607 ;;		On entry : 0/0
 16608 ;;		On exit  : 0/0
 16609 ;;		Unchanged: 0/0
 16610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;Total ram usage:        0 bytes
 16616 ;; Hardware stack levels used:    1
 16617 ;; Hardware stack levels required when called:    3
 16618 ;; This function calls:
 16619 ;;		i2_lcdInst
 16620 ;;		i2_printf
 16621 ;; This function is called by:
 16622 ;;		_updateMenu
 16623 ;;		_inputHandler
 16624 ;; This function uses a non-reentrant model
 16625 ;;
 16626                           
 16627                           	psect	text62
 16628  003DFA                     __ptext62:
 16629                           	opt stack 0
 16630  003DFA                     i2_change_state_to_menu_12:
 16631                           	opt stack 19
 16632                           
 16633                           ;UI.c: 489: cur_state = 12;
 16634                           
 16635                           ;incstack = 0
 16636  003DFA  0E00               	movlw	0
 16637  003DFC  0100               	movlb	0	; () banked
 16638  003DFE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16639  003E00  0E0C               	movlw	12
 16640  003E02  6FDE               	movwf	_cur_state& (0+255),b
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;UI.c: 491: lcdInst(0b10000000);;
 16644  003E04  0E80               	movlw	128
 16645  003E06  EC1A  F021         	call	i2_lcdInst
 16646                           
 16647                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16648  003E0A  0E54               	movlw	low STR_33
 16649  003E0C  6E0D               	movwf	i2printf@f,c
 16650  003E0E  0EFD               	movlw	high STR_33
 16651  003E10  6E0E               	movwf	i2printf@f+1,c
 16652  003E12  ECB8  F00A         	call	i2_printf	;wreg free
 16653                           
 16654                           ;UI.c: 493: lcdInst(0b11000000);;
 16655  003E16  0EC0               	movlw	192
 16656  003E18  EC1A  F021         	call	i2_lcdInst
 16657                           
 16658                           ;UI.c: 494: printf("2. SORT        <");
 16659  003E1C  0EED               	movlw	low STR_34
 16660  003E1E  6E0D               	movwf	i2printf@f,c
 16661  003E20  0EFD               	movlw	high STR_34
 16662  003E22  6E0E               	movwf	i2printf@f+1,c
 16663  003E24  ECB8  F00A         	call	i2_printf	;wreg free
 16664  003E28  0012               	return		;funcret
 16665  003E2A                     __end_ofi2_change_state_to_menu_12:
 16666                           	opt stack 0
 16667                           pclatu	equ	0xFFB
 16668                           pclath	equ	0xFFA
 16669                           tblptru	equ	0xFF8
 16670                           tblptrh	equ	0xFF7
 16671                           tblptrl	equ	0xFF6
 16672                           tablat	equ	0xFF5
 16673                           prodh	equ	0xFF4
 16674                           prodl	equ	0xFF3
 16675                           intcon	equ	0xFF2
 16676                           intcon2	equ	0xFF1
 16677                           intcon3	equ	0xFF0
 16678                           indf0	equ	0xFEF
 16679                           postinc0	equ	0xFEE
 16680                           fsr0h	equ	0xFEA
 16681                           fsr0l	equ	0xFE9
 16682                           wreg	equ	0xFE8
 16683                           postdec1	equ	0xFE5
 16684                           fsr1h	equ	0xFE2
 16685                           fsr1l	equ	0xFE1
 16686                           indf2	equ	0xFDF
 16687                           postinc2	equ	0xFDE
 16688                           postdec2	equ	0xFDD
 16689                           fsr2h	equ	0xFDA
 16690                           fsr2l	equ	0xFD9
 16691                           status	equ	0xFD8
 16692                           
 16693 ;; *************** function _change_state_to_menu_23 *****************
 16694 ;; Defined at:
 16695 ;;		line 504 in file "UI.c"
 16696 ;; Parameters:    Size  Location     Type
 16697 ;;		None
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;		None
 16700 ;; Return value:  Size  Location     Type
 16701 ;;                  1    wreg      void 
 16702 ;; Registers used:
 16703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16704 ;; Tracked objects:
 16705 ;;		On entry : 0/0
 16706 ;;		On exit  : 0/0
 16707 ;;		Unchanged: 0/0
 16708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;Total ram usage:        0 bytes
 16714 ;; Hardware stack levels used:    1
 16715 ;; Hardware stack levels required when called:    3
 16716 ;; This function calls:
 16717 ;;		i2_lcdInst
 16718 ;;		i2_printf
 16719 ;; This function is called by:
 16720 ;;		_updateMenu
 16721 ;;		_inputHandler
 16722 ;; This function uses a non-reentrant model
 16723 ;;
 16724                           
 16725                           	psect	text63
 16726  003E2A                     __ptext63:
 16727                           	opt stack 0
 16728  003E2A                     _change_state_to_menu_23:
 16729                           	opt stack 18
 16730                           
 16731                           ;UI.c: 505: cur_state = 23;
 16732                           
 16733                           ;incstack = 0
 16734  003E2A  0E00               	movlw	0
 16735  003E2C  0100               	movlb	0	; () banked
 16736  003E2E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16737  003E30  0E17               	movlw	23
 16738  003E32  6FDE               	movwf	_cur_state& (0+255),b
 16739                           
 16740                           ; BSR set to: 0
 16741                           ;UI.c: 507: lcdInst(0b10000000);;
 16742  003E34  0E80               	movlw	128
 16743  003E36  EC1A  F021         	call	i2_lcdInst
 16744                           
 16745                           ;UI.c: 508: printf("2. SORT         ");
 16746  003E3A  0E43               	movlw	low STR_32
 16747  003E3C  6E0D               	movwf	i2printf@f,c
 16748  003E3E  0EFD               	movlw	high STR_32
 16749  003E40  6E0E               	movwf	i2printf@f+1,c
 16750  003E42  ECB8  F00A         	call	i2_printf	;wreg free
 16751                           
 16752                           ;UI.c: 509: lcdInst(0b11000000);;
 16753  003E46  0EC0               	movlw	192
 16754  003E48  EC1A  F021         	call	i2_lcdInst
 16755                           
 16756                           ;UI.c: 510: printf("3. LOGS        <");
 16757  003E4C  0EDC               	movlw	low STR_38
 16758  003E4E  6E0D               	movwf	i2printf@f,c
 16759  003E50  0EFD               	movlw	high STR_38
 16760  003E52  6E0E               	movwf	i2printf@f+1,c
 16761  003E54  ECB8  F00A         	call	i2_printf	;wreg free
 16762  003E58  0012               	return		;funcret
 16763  003E5A                     __end_of_change_state_to_menu_23:
 16764                           	opt stack 0
 16765                           pclatu	equ	0xFFB
 16766                           pclath	equ	0xFFA
 16767                           tblptru	equ	0xFF8
 16768                           tblptrh	equ	0xFF7
 16769                           tblptrl	equ	0xFF6
 16770                           tablat	equ	0xFF5
 16771                           prodh	equ	0xFF4
 16772                           prodl	equ	0xFF3
 16773                           intcon	equ	0xFF2
 16774                           intcon2	equ	0xFF1
 16775                           intcon3	equ	0xFF0
 16776                           indf0	equ	0xFEF
 16777                           postinc0	equ	0xFEE
 16778                           fsr0h	equ	0xFEA
 16779                           fsr0l	equ	0xFE9
 16780                           wreg	equ	0xFE8
 16781                           postdec1	equ	0xFE5
 16782                           fsr1h	equ	0xFE2
 16783                           fsr1l	equ	0xFE1
 16784                           indf2	equ	0xFDF
 16785                           postinc2	equ	0xFDE
 16786                           postdec2	equ	0xFDD
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function _change_state_to_menu_11 *****************
 16792 ;; Defined at:
 16793 ;;		line 480 in file "UI.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;		None
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;		None
 16798 ;; Return value:  Size  Location     Type
 16799 ;;                  1    wreg      void 
 16800 ;; Registers used:
 16801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16802 ;; Tracked objects:
 16803 ;;		On entry : 0/0
 16804 ;;		On exit  : 0/0
 16805 ;;		Unchanged: 0/0
 16806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;Total ram usage:        0 bytes
 16812 ;; Hardware stack levels used:    1
 16813 ;; Hardware stack levels required when called:    3
 16814 ;; This function calls:
 16815 ;;		i2_lcdInst
 16816 ;;		i2_printf
 16817 ;; This function is called by:
 16818 ;;		_updateMenu
 16819 ;;		_inputHandler
 16820 ;; This function uses a non-reentrant model
 16821 ;;
 16822                           
 16823                           	psect	text64
 16824  003E5A                     __ptext64:
 16825                           	opt stack 0
 16826  003E5A                     _change_state_to_menu_11:
 16827                           	opt stack 18
 16828                           
 16829                           ;UI.c: 481: cur_state = 11;
 16830                           
 16831                           ;incstack = 0
 16832  003E5A  0E00               	movlw	0
 16833  003E5C  0100               	movlb	0	; () banked
 16834  003E5E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16835  003E60  0E0B               	movlw	11
 16836  003E62  6FDE               	movwf	_cur_state& (0+255),b
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;UI.c: 483: lcdInst(0b10000000);;
 16840  003E64  0E80               	movlw	128
 16841  003E66  EC1A  F021         	call	i2_lcdInst
 16842                           
 16843                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16844  003E6A  0EFE               	movlw	low STR_31
 16845  003E6C  6E0D               	movwf	i2printf@f,c
 16846  003E6E  0EFD               	movlw	high STR_31
 16847  003E70  6E0E               	movwf	i2printf@f+1,c
 16848  003E72  ECB8  F00A         	call	i2_printf	;wreg free
 16849                           
 16850                           ;UI.c: 485: lcdInst(0b11000000);;
 16851  003E76  0EC0               	movlw	192
 16852  003E78  EC1A  F021         	call	i2_lcdInst
 16853                           
 16854                           ;UI.c: 486: printf("2. SORT         ");
 16855  003E7C  0E43               	movlw	low STR_32
 16856  003E7E  6E0D               	movwf	i2printf@f,c
 16857  003E80  0EFD               	movlw	high STR_32
 16858  003E82  6E0E               	movwf	i2printf@f+1,c
 16859  003E84  ECB8  F00A         	call	i2_printf	;wreg free
 16860  003E88  0012               	return		;funcret
 16861  003E8A                     __end_of_change_state_to_menu_11:
 16862                           	opt stack 0
 16863                           pclatu	equ	0xFFB
 16864                           pclath	equ	0xFFA
 16865                           tblptru	equ	0xFF8
 16866                           tblptrh	equ	0xFF7
 16867                           tblptrl	equ	0xFF6
 16868                           tablat	equ	0xFF5
 16869                           prodh	equ	0xFF4
 16870                           prodl	equ	0xFF3
 16871                           intcon	equ	0xFF2
 16872                           intcon2	equ	0xFF1
 16873                           intcon3	equ	0xFF0
 16874                           indf0	equ	0xFEF
 16875                           postinc0	equ	0xFEE
 16876                           fsr0h	equ	0xFEA
 16877                           fsr0l	equ	0xFE9
 16878                           wreg	equ	0xFE8
 16879                           postdec1	equ	0xFE5
 16880                           fsr1h	equ	0xFE2
 16881                           fsr1l	equ	0xFE1
 16882                           indf2	equ	0xFDF
 16883                           postinc2	equ	0xFDE
 16884                           postdec2	equ	0xFDD
 16885                           fsr2h	equ	0xFDA
 16886                           fsr2l	equ	0xFD9
 16887                           status	equ	0xFD8
 16888                           
 16889 ;; *************** function _change_state_to_logs_34 *****************
 16890 ;; Defined at:
 16891 ;;		line 547 in file "UI.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;		None
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;		None
 16896 ;; Return value:  Size  Location     Type
 16897 ;;                  1    wreg      void 
 16898 ;; Registers used:
 16899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16900 ;; Tracked objects:
 16901 ;;		On entry : 0/0
 16902 ;;		On exit  : 0/0
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16909 ;;Total ram usage:        0 bytes
 16910 ;; Hardware stack levels used:    1
 16911 ;; Hardware stack levels required when called:    3
 16912 ;; This function calls:
 16913 ;;		i2_lcdInst
 16914 ;;		i2_printf
 16915 ;; This function is called by:
 16916 ;;		_updateMenu
 16917 ;;		_inputHandler
 16918 ;; This function uses a non-reentrant model
 16919 ;;
 16920                           
 16921                           	psect	text65
 16922  003E8A                     __ptext65:
 16923                           	opt stack 0
 16924  003E8A                     _change_state_to_logs_34:
 16925                           	opt stack 18
 16926                           
 16927                           ;UI.c: 548: cur_state = 1034;
 16928                           
 16929                           ;incstack = 0
 16930  003E8A  0E04               	movlw	4
 16931  003E8C  0100               	movlb	0	; () banked
 16932  003E8E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16933  003E90  0E0A               	movlw	10
 16934  003E92  6FDE               	movwf	_cur_state& (0+255),b
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;UI.c: 549: lcdInst(0b10000000);;
 16938  003E94  0E80               	movlw	128
 16939  003E96  EC1A  F021         	call	i2_lcdInst
 16940                           
 16941                           ;UI.c: 550: printf("LOG 3           ");
 16942  003E9A  0E10               	movlw	low STR_44
 16943  003E9C  6E0D               	movwf	i2printf@f,c
 16944  003E9E  0EFD               	movlw	high STR_44
 16945  003EA0  6E0E               	movwf	i2printf@f+1,c
 16946  003EA2  ECB8  F00A         	call	i2_printf	;wreg free
 16947                           
 16948                           ;UI.c: 551: lcdInst(0b11000000);;
 16949  003EA6  0EC0               	movlw	192
 16950  003EA8  EC1A  F021         	call	i2_lcdInst
 16951                           
 16952                           ;UI.c: 552: printf("LOG 4          <");
 16953  003EAC  0ECB               	movlw	low STR_50
 16954  003EAE  6E0D               	movwf	i2printf@f,c
 16955  003EB0  0EFD               	movlw	high STR_50
 16956  003EB2  6E0E               	movwf	i2printf@f+1,c
 16957  003EB4  ECB8  F00A         	call	i2_printf	;wreg free
 16958  003EB8  0012               	return		;funcret
 16959  003EBA                     __end_of_change_state_to_logs_34:
 16960                           	opt stack 0
 16961                           pclatu	equ	0xFFB
 16962                           pclath	equ	0xFFA
 16963                           tblptru	equ	0xFF8
 16964                           tblptrh	equ	0xFF7
 16965                           tblptrl	equ	0xFF6
 16966                           tablat	equ	0xFF5
 16967                           prodh	equ	0xFF4
 16968                           prodl	equ	0xFF3
 16969                           intcon	equ	0xFF2
 16970                           intcon2	equ	0xFF1
 16971                           intcon3	equ	0xFF0
 16972                           indf0	equ	0xFEF
 16973                           postinc0	equ	0xFEE
 16974                           fsr0h	equ	0xFEA
 16975                           fsr0l	equ	0xFE9
 16976                           wreg	equ	0xFE8
 16977                           postdec1	equ	0xFE5
 16978                           fsr1h	equ	0xFE2
 16979                           fsr1l	equ	0xFE1
 16980                           indf2	equ	0xFDF
 16981                           postinc2	equ	0xFDE
 16982                           postdec2	equ	0xFDD
 16983                           fsr2h	equ	0xFDA
 16984                           fsr2l	equ	0xFD9
 16985                           status	equ	0xFD8
 16986                           
 16987 ;; *************** function _change_state_to_logs_33 *****************
 16988 ;; Defined at:
 16989 ;;		line 540 in file "UI.c"
 16990 ;; Parameters:    Size  Location     Type
 16991 ;;		None
 16992 ;; Auto vars:     Size  Location     Type
 16993 ;;		None
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  1    wreg      void 
 16996 ;; Registers used:
 16997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;Total ram usage:        0 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    3
 17010 ;; This function calls:
 17011 ;;		i2_lcdInst
 17012 ;;		i2_printf
 17013 ;; This function is called by:
 17014 ;;		_updateMenu
 17015 ;;		_inputHandler
 17016 ;; This function uses a non-reentrant model
 17017 ;;
 17018                           
 17019                           	psect	text66
 17020  003EBA                     __ptext66:
 17021                           	opt stack 0
 17022  003EBA                     _change_state_to_logs_33:
 17023                           	opt stack 18
 17024                           
 17025                           ;UI.c: 541: cur_state = 1033;
 17026                           
 17027                           ;incstack = 0
 17028  003EBA  0E04               	movlw	4
 17029  003EBC  0100               	movlb	0	; () banked
 17030  003EBE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17031  003EC0  0E09               	movlw	9
 17032  003EC2  6FDE               	movwf	_cur_state& (0+255),b
 17033                           
 17034                           ; BSR set to: 0
 17035                           ;UI.c: 542: lcdInst(0b10000000);;
 17036  003EC4  0E80               	movlw	128
 17037  003EC6  EC1A  F021         	call	i2_lcdInst
 17038                           
 17039                           ;UI.c: 543: printf("LOG 3          <");
 17040  003ECA  0EBA               	movlw	low STR_46
 17041  003ECC  6E0D               	movwf	i2printf@f,c
 17042  003ECE  0EFD               	movlw	high STR_46
 17043  003ED0  6E0E               	movwf	i2printf@f+1,c
 17044  003ED2  ECB8  F00A         	call	i2_printf	;wreg free
 17045                           
 17046                           ;UI.c: 544: lcdInst(0b11000000);;
 17047  003ED6  0EC0               	movlw	192
 17048  003ED8  EC1A  F021         	call	i2_lcdInst
 17049                           
 17050                           ;UI.c: 545: printf("LOG 4           ");
 17051  003EDC  0E21               	movlw	low STR_48
 17052  003EDE  6E0D               	movwf	i2printf@f,c
 17053  003EE0  0EFD               	movlw	high STR_48
 17054  003EE2  6E0E               	movwf	i2printf@f+1,c
 17055  003EE4  ECB8  F00A         	call	i2_printf	;wreg free
 17056  003EE8  0012               	return		;funcret
 17057  003EEA                     __end_of_change_state_to_logs_33:
 17058                           	opt stack 0
 17059                           pclatu	equ	0xFFB
 17060                           pclath	equ	0xFFA
 17061                           tblptru	equ	0xFF8
 17062                           tblptrh	equ	0xFF7
 17063                           tblptrl	equ	0xFF6
 17064                           tablat	equ	0xFF5
 17065                           prodh	equ	0xFF4
 17066                           prodl	equ	0xFF3
 17067                           intcon	equ	0xFF2
 17068                           intcon2	equ	0xFF1
 17069                           intcon3	equ	0xFF0
 17070                           indf0	equ	0xFEF
 17071                           postinc0	equ	0xFEE
 17072                           fsr0h	equ	0xFEA
 17073                           fsr0l	equ	0xFE9
 17074                           wreg	equ	0xFE8
 17075                           postdec1	equ	0xFE5
 17076                           fsr1h	equ	0xFE2
 17077                           fsr1l	equ	0xFE1
 17078                           indf2	equ	0xFDF
 17079                           postinc2	equ	0xFDE
 17080                           postdec2	equ	0xFDD
 17081                           fsr2h	equ	0xFDA
 17082                           fsr2l	equ	0xFD9
 17083                           status	equ	0xFD8
 17084                           
 17085 ;; *************** function _change_state_to_logs_23 *****************
 17086 ;; Defined at:
 17087 ;;		line 533 in file "UI.c"
 17088 ;; Parameters:    Size  Location     Type
 17089 ;;		None
 17090 ;; Auto vars:     Size  Location     Type
 17091 ;;		None
 17092 ;; Return value:  Size  Location     Type
 17093 ;;                  1    wreg      void 
 17094 ;; Registers used:
 17095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17096 ;; Tracked objects:
 17097 ;;		On entry : 0/0
 17098 ;;		On exit  : 0/0
 17099 ;;		Unchanged: 0/0
 17100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17105 ;;Total ram usage:        0 bytes
 17106 ;; Hardware stack levels used:    1
 17107 ;; Hardware stack levels required when called:    3
 17108 ;; This function calls:
 17109 ;;		i2_lcdInst
 17110 ;;		i2_printf
 17111 ;; This function is called by:
 17112 ;;		_updateMenu
 17113 ;;		_inputHandler
 17114 ;; This function uses a non-reentrant model
 17115 ;;
 17116                           
 17117                           	psect	text67
 17118  003FA8                     __ptext67:
 17119                           	opt stack 0
 17120  003FA8                     _change_state_to_logs_23:
 17121                           	opt stack 18
 17122                           
 17123                           ;UI.c: 534: cur_state = 1023;
 17124                           
 17125                           ;incstack = 0
 17126  003FA8  0E03               	movlw	3
 17127  003FAA  0100               	movlb	0	; () banked
 17128  003FAC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17129  003FAE  69DE               	setf	_cur_state& (0+255),b
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;UI.c: 535: lcdInst(0b10000000);;
 17133  003FB0  0E80               	movlw	128
 17134  003FB2  EC1A  F021         	call	i2_lcdInst
 17135                           
 17136                           ;UI.c: 536: printf("LOG 2           ");
 17137  003FB6  0EFF               	movlw	low STR_40
 17138  003FB8  6E0D               	movwf	i2printf@f,c
 17139  003FBA  0EFC               	movlw	high STR_40
 17140  003FBC  6E0E               	movwf	i2printf@f+1,c
 17141  003FBE  ECB8  F00A         	call	i2_printf	;wreg free
 17142                           
 17143                           ;UI.c: 537: lcdInst(0b11000000);;
 17144  003FC2  0EC0               	movlw	192
 17145  003FC4  EC1A  F021         	call	i2_lcdInst
 17146                           
 17147                           ;UI.c: 538: printf("LOG 3          <");
 17148  003FC8  0EBA               	movlw	low STR_46
 17149  003FCA  6E0D               	movwf	i2printf@f,c
 17150  003FCC  0EFD               	movlw	high STR_46
 17151  003FCE  6E0E               	movwf	i2printf@f+1,c
 17152  003FD0  ECB8  F00A         	call	i2_printf	;wreg free
 17153  003FD4  0012               	return		;funcret
 17154  003FD6                     __end_of_change_state_to_logs_23:
 17155                           	opt stack 0
 17156                           pclatu	equ	0xFFB
 17157                           pclath	equ	0xFFA
 17158                           tblptru	equ	0xFF8
 17159                           tblptrh	equ	0xFF7
 17160                           tblptrl	equ	0xFF6
 17161                           tablat	equ	0xFF5
 17162                           prodh	equ	0xFF4
 17163                           prodl	equ	0xFF3
 17164                           intcon	equ	0xFF2
 17165                           intcon2	equ	0xFF1
 17166                           intcon3	equ	0xFF0
 17167                           indf0	equ	0xFEF
 17168                           postinc0	equ	0xFEE
 17169                           fsr0h	equ	0xFEA
 17170                           fsr0l	equ	0xFE9
 17171                           wreg	equ	0xFE8
 17172                           postdec1	equ	0xFE5
 17173                           fsr1h	equ	0xFE2
 17174                           fsr1l	equ	0xFE1
 17175                           indf2	equ	0xFDF
 17176                           postinc2	equ	0xFDE
 17177                           postdec2	equ	0xFDD
 17178                           fsr2h	equ	0xFDA
 17179                           fsr2l	equ	0xFD9
 17180                           status	equ	0xFD8
 17181                           
 17182 ;; *************** function _change_state_to_logs_22 *****************
 17183 ;; Defined at:
 17184 ;;		line 526 in file "UI.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;		None
 17187 ;; Auto vars:     Size  Location     Type
 17188 ;;		None
 17189 ;; Return value:  Size  Location     Type
 17190 ;;                  1    wreg      void 
 17191 ;; Registers used:
 17192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17193 ;; Tracked objects:
 17194 ;;		On entry : 0/0
 17195 ;;		On exit  : 0/0
 17196 ;;		Unchanged: 0/0
 17197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;Total ram usage:        0 bytes
 17203 ;; Hardware stack levels used:    1
 17204 ;; Hardware stack levels required when called:    3
 17205 ;; This function calls:
 17206 ;;		i2_lcdInst
 17207 ;;		i2_printf
 17208 ;; This function is called by:
 17209 ;;		_updateMenu
 17210 ;;		_inputHandler
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           	psect	text68
 17215  003EEA                     __ptext68:
 17216                           	opt stack 0
 17217  003EEA                     _change_state_to_logs_22:
 17218                           	opt stack 18
 17219                           
 17220                           ;UI.c: 527: cur_state = 1022;
 17221                           
 17222                           ;incstack = 0
 17223  003EEA  0E03               	movlw	3
 17224  003EEC  0100               	movlb	0	; () banked
 17225  003EEE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17226  003EF0  0EFE               	movlw	254
 17227  003EF2  6FDE               	movwf	_cur_state& (0+255),b
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;UI.c: 528: lcdInst(0b10000000);;
 17231  003EF4  0E80               	movlw	128
 17232  003EF6  EC1A  F021         	call	i2_lcdInst
 17233                           
 17234                           ;UI.c: 529: printf("LOG 2          <");
 17235  003EFA  0EA9               	movlw	low STR_42
 17236  003EFC  6E0D               	movwf	i2printf@f,c
 17237  003EFE  0EFD               	movlw	high STR_42
 17238  003F00  6E0E               	movwf	i2printf@f+1,c
 17239  003F02  ECB8  F00A         	call	i2_printf	;wreg free
 17240                           
 17241                           ;UI.c: 530: lcdInst(0b11000000);;
 17242  003F06  0EC0               	movlw	192
 17243  003F08  EC1A  F021         	call	i2_lcdInst
 17244                           
 17245                           ;UI.c: 531: printf("LOG 3           ");
 17246  003F0C  0E10               	movlw	low STR_44
 17247  003F0E  6E0D               	movwf	i2printf@f,c
 17248  003F10  0EFD               	movlw	high STR_44
 17249  003F12  6E0E               	movwf	i2printf@f+1,c
 17250  003F14  ECB8  F00A         	call	i2_printf	;wreg free
 17251  003F18  0012               	return		;funcret
 17252  003F1A                     __end_of_change_state_to_logs_22:
 17253                           	opt stack 0
 17254                           pclatu	equ	0xFFB
 17255                           pclath	equ	0xFFA
 17256                           tblptru	equ	0xFF8
 17257                           tblptrh	equ	0xFF7
 17258                           tblptrl	equ	0xFF6
 17259                           tablat	equ	0xFF5
 17260                           prodh	equ	0xFF4
 17261                           prodl	equ	0xFF3
 17262                           intcon	equ	0xFF2
 17263                           intcon2	equ	0xFF1
 17264                           intcon3	equ	0xFF0
 17265                           indf0	equ	0xFEF
 17266                           postinc0	equ	0xFEE
 17267                           fsr0h	equ	0xFEA
 17268                           fsr0l	equ	0xFE9
 17269                           wreg	equ	0xFE8
 17270                           postdec1	equ	0xFE5
 17271                           fsr1h	equ	0xFE2
 17272                           fsr1l	equ	0xFE1
 17273                           indf2	equ	0xFDF
 17274                           postinc2	equ	0xFDE
 17275                           postdec2	equ	0xFDD
 17276                           fsr2h	equ	0xFDA
 17277                           fsr2l	equ	0xFD9
 17278                           status	equ	0xFD8
 17279                           
 17280 ;; *************** function _change_state_to_logs_12 *****************
 17281 ;; Defined at:
 17282 ;;		line 519 in file "UI.c"
 17283 ;; Parameters:    Size  Location     Type
 17284 ;;		None
 17285 ;; Auto vars:     Size  Location     Type
 17286 ;;		None
 17287 ;; Return value:  Size  Location     Type
 17288 ;;                  1    wreg      void 
 17289 ;; Registers used:
 17290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17291 ;; Tracked objects:
 17292 ;;		On entry : 0/0
 17293 ;;		On exit  : 0/0
 17294 ;;		Unchanged: 0/0
 17295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17300 ;;Total ram usage:        0 bytes
 17301 ;; Hardware stack levels used:    1
 17302 ;; Hardware stack levels required when called:    3
 17303 ;; This function calls:
 17304 ;;		i2_lcdInst
 17305 ;;		i2_printf
 17306 ;; This function is called by:
 17307 ;;		_updateMenu
 17308 ;;		_inputHandler
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312                           	psect	text69
 17313  003F1A                     __ptext69:
 17314                           	opt stack 0
 17315  003F1A                     _change_state_to_logs_12:
 17316                           	opt stack 18
 17317                           
 17318                           ;UI.c: 520: cur_state = 1012;
 17319                           
 17320                           ;incstack = 0
 17321  003F1A  0E03               	movlw	3
 17322  003F1C  0100               	movlb	0	; () banked
 17323  003F1E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17324  003F20  0EF4               	movlw	244
 17325  003F22  6FDE               	movwf	_cur_state& (0+255),b
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;UI.c: 521: lcdInst(0b10000000);;
 17329  003F24  0E80               	movlw	128
 17330  003F26  EC1A  F021         	call	i2_lcdInst
 17331                           
 17332                           ;UI.c: 522: printf("LOG 1           ");
 17333  003F2A  0EEE               	movlw	low STR_41
 17334  003F2C  6E0D               	movwf	i2printf@f,c
 17335  003F2E  0EFC               	movlw	high STR_41
 17336  003F30  6E0E               	movwf	i2printf@f+1,c
 17337  003F32  ECB8  F00A         	call	i2_printf	;wreg free
 17338                           
 17339                           ;UI.c: 523: lcdInst(0b11000000);;
 17340  003F36  0EC0               	movlw	192
 17341  003F38  EC1A  F021         	call	i2_lcdInst
 17342                           
 17343                           ;UI.c: 524: printf("LOG 2          <");
 17344  003F3C  0EA9               	movlw	low STR_42
 17345  003F3E  6E0D               	movwf	i2printf@f,c
 17346  003F40  0EFD               	movlw	high STR_42
 17347  003F42  6E0E               	movwf	i2printf@f+1,c
 17348  003F44  ECB8  F00A         	call	i2_printf	;wreg free
 17349  003F48  0012               	return		;funcret
 17350  003F4A                     __end_of_change_state_to_logs_12:
 17351                           	opt stack 0
 17352                           pclatu	equ	0xFFB
 17353                           pclath	equ	0xFFA
 17354                           tblptru	equ	0xFF8
 17355                           tblptrh	equ	0xFF7
 17356                           tblptrl	equ	0xFF6
 17357                           tablat	equ	0xFF5
 17358                           prodh	equ	0xFF4
 17359                           prodl	equ	0xFF3
 17360                           intcon	equ	0xFF2
 17361                           intcon2	equ	0xFF1
 17362                           intcon3	equ	0xFF0
 17363                           indf0	equ	0xFEF
 17364                           postinc0	equ	0xFEE
 17365                           fsr0h	equ	0xFEA
 17366                           fsr0l	equ	0xFE9
 17367                           wreg	equ	0xFE8
 17368                           postdec1	equ	0xFE5
 17369                           fsr1h	equ	0xFE2
 17370                           fsr1l	equ	0xFE1
 17371                           indf2	equ	0xFDF
 17372                           postinc2	equ	0xFDE
 17373                           postdec2	equ	0xFDD
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           
 17378 ;; *************** function _change_state_to_logs_11 *****************
 17379 ;; Defined at:
 17380 ;;		line 512 in file "UI.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;		None
 17383 ;; Auto vars:     Size  Location     Type
 17384 ;;		None
 17385 ;; Return value:  Size  Location     Type
 17386 ;;                  1    wreg      void 
 17387 ;; Registers used:
 17388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17389 ;; Tracked objects:
 17390 ;;		On entry : 0/0
 17391 ;;		On exit  : 0/0
 17392 ;;		Unchanged: 0/0
 17393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;Total ram usage:        0 bytes
 17399 ;; Hardware stack levels used:    1
 17400 ;; Hardware stack levels required when called:    3
 17401 ;; This function calls:
 17402 ;;		i2_lcdInst
 17403 ;;		i2_printf
 17404 ;; This function is called by:
 17405 ;;		_updateMenu
 17406 ;;		_inputHandler
 17407 ;; This function uses a non-reentrant model
 17408 ;;
 17409                           
 17410                           	psect	text70
 17411  003F4A                     __ptext70:
 17412                           	opt stack 0
 17413  003F4A                     _change_state_to_logs_11:
 17414                           	opt stack 18
 17415                           
 17416                           ;UI.c: 513: cur_state = 1011;
 17417                           
 17418                           ;incstack = 0
 17419  003F4A  0E03               	movlw	3
 17420  003F4C  0100               	movlb	0	; () banked
 17421  003F4E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17422  003F50  0EF3               	movlw	243
 17423  003F52  6FDE               	movwf	_cur_state& (0+255),b
 17424                           
 17425                           ; BSR set to: 0
 17426                           ;UI.c: 514: lcdInst(0b10000000);;
 17427  003F54  0E80               	movlw	128
 17428  003F56  EC1A  F021         	call	i2_lcdInst
 17429                           
 17430                           ;UI.c: 515: printf("LOG 1          <");
 17431  003F5A  0E98               	movlw	low STR_39
 17432  003F5C  6E0D               	movwf	i2printf@f,c
 17433  003F5E  0EFD               	movlw	high STR_39
 17434  003F60  6E0E               	movwf	i2printf@f+1,c
 17435  003F62  ECB8  F00A         	call	i2_printf	;wreg free
 17436                           
 17437                           ;UI.c: 516: lcdInst(0b11000000);;
 17438  003F66  0EC0               	movlw	192
 17439  003F68  EC1A  F021         	call	i2_lcdInst
 17440                           
 17441                           ;UI.c: 517: printf("LOG 2           ");
 17442  003F6C  0EFF               	movlw	low STR_40
 17443  003F6E  6E0D               	movwf	i2printf@f,c
 17444  003F70  0EFC               	movlw	high STR_40
 17445  003F72  6E0E               	movwf	i2printf@f+1,c
 17446  003F74  ECB8  F00A         	call	i2_printf	;wreg free
 17447  003F78  0012               	return		;funcret
 17448  003F7A                     __end_of_change_state_to_logs_11:
 17449                           	opt stack 0
 17450                           pclatu	equ	0xFFB
 17451                           pclath	equ	0xFFA
 17452                           tblptru	equ	0xFF8
 17453                           tblptrh	equ	0xFF7
 17454                           tblptrl	equ	0xFF6
 17455                           tablat	equ	0xFF5
 17456                           prodh	equ	0xFF4
 17457                           prodl	equ	0xFF3
 17458                           intcon	equ	0xFF2
 17459                           intcon2	equ	0xFF1
 17460                           intcon3	equ	0xFF0
 17461                           indf0	equ	0xFEF
 17462                           postinc0	equ	0xFEE
 17463                           fsr0h	equ	0xFEA
 17464                           fsr0l	equ	0xFE9
 17465                           wreg	equ	0xFE8
 17466                           postdec1	equ	0xFE5
 17467                           fsr1h	equ	0xFE2
 17468                           fsr1l	equ	0xFE1
 17469                           indf2	equ	0xFDF
 17470                           postinc2	equ	0xFDE
 17471                           postdec2	equ	0xFDD
 17472                           fsr2h	equ	0xFDA
 17473                           fsr2l	equ	0xFD9
 17474                           status	equ	0xFD8
 17475                           
 17476 ;; *************** function _dispLogs *****************
 17477 ;; Defined at:
 17478 ;;		line 465 in file "UI.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;  myLog           2   17[COMRAM] int 
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;		None
 17483 ;; Return value:  Size  Location     Type
 17484 ;;                  1    wreg      void 
 17485 ;; Registers used:
 17486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;Total ram usage:        2 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    2
 17499 ;; This function calls:
 17500 ;;		_retrieveLog
 17501 ;; This function is called by:
 17502 ;;		_updateMenu
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           	psect	text71
 17507  004118                     __ptext71:
 17508                           	opt stack 0
 17509  004118                     _dispLogs:
 17510                           	opt stack 20
 17511                           
 17512                           ;UI.c: 466: logstate = 1;
 17513                           
 17514                           ;incstack = 0
 17515  004118  0E00               	movlw	0
 17516  00411A  0100               	movlb	0	; () banked
 17517  00411C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17518  00411E  0E01               	movlw	1
 17519  004120  6FF6               	movwf	_logstate& (0+255),b
 17520                           
 17521                           ; BSR set to: 0
 17522                           ;UI.c: 467: log = myLog;
 17523  004122  C012  F0E6         	movff	dispLogs@myLog,_log
 17524  004126  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;UI.c: 468: retrieveLog(myLog - 1);
 17528  00412A  0EFF               	movlw	255
 17529  00412C  2412               	addwf	dispLogs@myLog,w,c
 17530  00412E  6E07               	movwf	retrieveLog@logNum,c
 17531  004130  0EFF               	movlw	255
 17532  004132  2013               	addwfc	dispLogs@myLog+1,w,c
 17533  004134  6E08               	movwf	retrieveLog@logNum+1,c
 17534  004136  EC2D  F016         	call	_retrieveLog	;wreg free
 17535  00413A  0012               	return		;funcret
 17536  00413C                     __end_of_dispLogs:
 17537                           	opt stack 0
 17538                           pclatu	equ	0xFFB
 17539                           pclath	equ	0xFFA
 17540                           tblptru	equ	0xFF8
 17541                           tblptrh	equ	0xFF7
 17542                           tblptrl	equ	0xFF6
 17543                           tablat	equ	0xFF5
 17544                           prodh	equ	0xFF4
 17545                           prodl	equ	0xFF3
 17546                           intcon	equ	0xFF2
 17547                           intcon2	equ	0xFF1
 17548                           intcon3	equ	0xFF0
 17549                           indf0	equ	0xFEF
 17550                           postinc0	equ	0xFEE
 17551                           fsr0h	equ	0xFEA
 17552                           fsr0l	equ	0xFE9
 17553                           wreg	equ	0xFE8
 17554                           postdec1	equ	0xFE5
 17555                           fsr1h	equ	0xFE2
 17556                           fsr1l	equ	0xFE1
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           fsr2h	equ	0xFDA
 17561                           fsr2l	equ	0xFD9
 17562                           status	equ	0xFD8
 17563                           
 17564 ;; *************** function _retrieveLog *****************
 17565 ;; Defined at:
 17566 ;;		line 134 in file "EEPROM.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;  logNum          2    6[COMRAM] int 
 17569 ;; Auto vars:     Size  Location     Type
 17570 ;;  i               2   13[COMRAM] int 
 17571 ;;  addr            2   15[COMRAM] unsigned short 
 17572 ;;  byte3           1   12[COMRAM] unsigned char 
 17573 ;;  byte2           1   11[COMRAM] unsigned char 
 17574 ;;  byte1           1   10[COMRAM] unsigned char 
 17575 ;; Return value:  Size  Location     Type
 17576 ;;                  1    wreg      void 
 17577 ;; Registers used:
 17578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17579 ;; Tracked objects:
 17580 ;;		On entry : 0/0
 17581 ;;		On exit  : 0/0
 17582 ;;		Unchanged: 0/0
 17583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17585 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17587 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17588 ;;Total ram usage:       11 bytes
 17589 ;; Hardware stack levels used:    1
 17590 ;; Hardware stack levels required when called:    1
 17591 ;; This function calls:
 17592 ;;		i2_EEPROM_read
 17593 ;;		i2___wmul
 17594 ;; This function is called by:
 17595 ;;		_dispLogs
 17596 ;; This function uses a non-reentrant model
 17597 ;;
 17598                           
 17599                           	psect	text72
 17600  002C5A                     __ptext72:
 17601                           	opt stack 0
 17602  002C5A                     _retrieveLog:
 17603                           	opt stack 20
 17604                           
 17605                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17606                           
 17607                           ;incstack = 0
 17608  002C5A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17609  002C5E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17610  002C62  0E00               	movlw	0
 17611  002C64  6E04               	movwf	i2___wmul@multiplicand+1,c
 17612  002C66  0E0B               	movlw	11
 17613  002C68  6E03               	movwf	i2___wmul@multiplicand,c
 17614  002C6A  EC54  F020         	call	i2___wmul	;wreg free
 17615  002C6E  0E01               	movlw	1
 17616  002C70  2401               	addwf	?i2___wmul,w,c
 17617  002C72  6E10               	movwf	retrieveLog@addr,c
 17618  002C74  0E00               	movlw	0
 17619  002C76  2002               	addwfc	?i2___wmul+1,w,c
 17620  002C78  6E11               	movwf	retrieveLog@addr+1,c
 17621                           
 17622                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17623  002C7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17624  002C7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17625  002C82  ECE6  F020         	call	i2_EEPROM_read	;wreg free
 17626  002C86  6E0B               	movwf	retrieveLog@byte1,c
 17627                           
 17628                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17629  002C88  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17630  002C8C  0E80               	movlw	128
 17631  002C8E  1609               	andwf	??_retrieveLog,f,c
 17632  002C90  5009               	movf	??_retrieveLog,w,c
 17633  002C92  0100               	movlb	0	; () banked
 17634  002C94  6FE8               	movwf	_log_completion& (0+255),b
 17635  002C96  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17636                           
 17637                           ; BSR set to: 0
 17638                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17639  002C98  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17640  002C9C  0E0F               	movlw	15
 17641  002C9E  1609               	andwf	??_retrieveLog,f,c
 17642  002CA0  5009               	movf	??_retrieveLog,w,c
 17643  002CA2  0100               	movlb	0	; () banked
 17644  002CA4  6FF2               	movwf	_log_count_total& (0+255),b
 17645  002CA6  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;EEPROM.c: 146: addr++;
 17649  002CA8  4A10               	infsnz	retrieveLog@addr,f,c
 17650  002CAA  2A11               	incf	retrieveLog@addr+1,f,c
 17651                           
 17652                           ; BSR set to: 0
 17653                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17654  002CAC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17655  002CB0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17656  002CB4  ECE6  F020         	call	i2_EEPROM_read	;wreg free
 17657  002CB8  6E0C               	movwf	retrieveLog@byte2,c
 17658                           
 17659                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17660  002CBA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17661  002CBE  0EF0               	movlw	240
 17662  002CC0  1609               	andwf	??_retrieveLog,f,c
 17663  002CC2  5009               	movf	??_retrieveLog,w,c
 17664  002CC4  0100               	movlb	0	; () banked
 17665  002CC6  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17666  002CC8  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17667                           
 17668                           ; BSR set to: 0
 17669                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17670  002CCA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17671  002CCE  0E0F               	movlw	15
 17672  002CD0  1609               	andwf	??_retrieveLog,f,c
 17673  002CD2  5009               	movf	??_retrieveLog,w,c
 17674  002CD4  0100               	movlb	0	; () banked
 17675  002CD6  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17676  002CD8  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;EEPROM.c: 152: addr++;
 17680  002CDA  4A10               	infsnz	retrieveLog@addr,f,c
 17681  002CDC  2A11               	incf	retrieveLog@addr+1,f,c
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17685  002CDE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17686  002CE2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17687  002CE6  ECE6  F020         	call	i2_EEPROM_read	;wreg free
 17688  002CEA  6E0D               	movwf	retrieveLog@byte3,c
 17689                           
 17690                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17691  002CEC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17692  002CF0  0EF0               	movlw	240
 17693  002CF2  1609               	andwf	??_retrieveLog,f,c
 17694  002CF4  5009               	movf	??_retrieveLog,w,c
 17695  002CF6  0100               	movlb	0	; () banked
 17696  002CF8  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17697  002CFA  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17698                           
 17699                           ; BSR set to: 0
 17700                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17701  002CFC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17702  002D00  0E0F               	movlw	15
 17703  002D02  1609               	andwf	??_retrieveLog,f,c
 17704  002D04  5009               	movf	??_retrieveLog,w,c
 17705  002D06  0100               	movlb	0	; () banked
 17706  002D08  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17707  002D0A  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;EEPROM.c: 156: addr++;
 17711  002D0C  4A10               	infsnz	retrieveLog@addr,f,c
 17712  002D0E  2A11               	incf	retrieveLog@addr+1,f,c
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17716  002D10  0E00               	movlw	0
 17717  002D12  6E0F               	movwf	retrieveLog@i+1,c
 17718  002D14  0E00               	movlw	0
 17719  002D16  6E0E               	movwf	retrieveLog@i,c
 17720  002D18                     i2l5778:
 17721                           
 17722                           ; BSR set to: 0
 17723  002D18  BE0F               	btfsc	retrieveLog@i+1,7,c
 17724  002D1A  D006               	goto	i2l5782
 17725  002D1C  500F               	movf	retrieveLog@i+1,w,c
 17726  002D1E  E11E               	bnz	i2l5790
 17727  002D20  0E07               	movlw	7
 17728  002D22  5C0E               	subwf	retrieveLog@i,w,c
 17729  002D24  B0D8               	btfsc	status,0,c
 17730  002D26  D01A               	goto	i2l5790
 17731  002D28                     i2l5782:
 17732                           
 17733                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17734  002D28  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17735  002D2C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17736  002D30  ECE6  F020         	call	i2_EEPROM_read	;wreg free
 17737  002D34  6E09               	movwf	??_retrieveLog& (0+255),c
 17738  002D36  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17739  002D38  90D8               	bcf	status,0,c
 17740  002D3A  340E               	rlcf	retrieveLog@i,w,c
 17741  002D3C  6ED9               	movwf	fsr2l,c
 17742  002D3E  340F               	rlcf	retrieveLog@i+1,w,c
 17743  002D40  6EDA               	movwf	fsr2h,c
 17744  002D42  0E00               	movlw	low _log_startTime
 17745  002D44  26D9               	addwf	fsr2l,f,c
 17746  002D46  0E01               	movlw	high _log_startTime
 17747  002D48  22DA               	addwfc	fsr2h,f,c
 17748  002D4A  C009  FFDE         	movff	??_retrieveLog,postinc2
 17749  002D4E  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17750                           
 17751                           ;EEPROM.c: 161: addr++;
 17752  002D52  4A10               	infsnz	retrieveLog@addr,f,c
 17753  002D54  2A11               	incf	retrieveLog@addr+1,f,c
 17754  002D56  4A0E               	infsnz	retrieveLog@i,f,c
 17755  002D58  2A0F               	incf	retrieveLog@i+1,f,c
 17756  002D5A  D7DE               	goto	i2l5778
 17757  002D5C                     i2l5790:
 17758                           
 17759                           ;EEPROM.c: 162: }
 17760                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17761  002D5C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17762  002D60  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17763  002D64  ECE6  F020         	call	i2_EEPROM_read	;wreg free
 17764  002D68  6E09               	movwf	??_retrieveLog& (0+255),c
 17765  002D6A  5009               	movf	??_retrieveLog,w,c
 17766  002D6C  0100               	movlb	0	; () banked
 17767  002D6E  6FF4               	movwf	_log_total_time& (0+255),b
 17768  002D70  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17769                           
 17770                           ; BSR set to: 0
 17771  002D72  0012               	return		;funcret
 17772  002D74                     __end_of_retrieveLog:
 17773                           	opt stack 0
 17774                           pclatu	equ	0xFFB
 17775                           pclath	equ	0xFFA
 17776                           tblptru	equ	0xFF8
 17777                           tblptrh	equ	0xFF7
 17778                           tblptrl	equ	0xFF6
 17779                           tablat	equ	0xFF5
 17780                           prodh	equ	0xFF4
 17781                           prodl	equ	0xFF3
 17782                           intcon	equ	0xFF2
 17783                           intcon2	equ	0xFF1
 17784                           intcon3	equ	0xFF0
 17785                           indf0	equ	0xFEF
 17786                           postinc0	equ	0xFEE
 17787                           fsr0h	equ	0xFEA
 17788                           fsr0l	equ	0xFE9
 17789                           wreg	equ	0xFE8
 17790                           postdec1	equ	0xFE5
 17791                           fsr1h	equ	0xFE2
 17792                           fsr1l	equ	0xFE1
 17793                           indf2	equ	0xFDF
 17794                           postinc2	equ	0xFDE
 17795                           postdec2	equ	0xFDD
 17796                           fsr2h	equ	0xFDA
 17797                           fsr2l	equ	0xFD9
 17798                           status	equ	0xFD8
 17799                           
 17800 ;; *************** function i2_EEPROM_read *****************
 17801 ;; Defined at:
 17802 ;;		line 68 in file "EEPROM.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;  address         2    0[COMRAM] unsigned short 
 17805 ;; Auto vars:     Size  Location     Type
 17806 ;;		None
 17807 ;; Return value:  Size  Location     Type
 17808 ;;                  1    wreg      unsigned char 
 17809 ;; Registers used:
 17810 ;;		wreg, status,2
 17811 ;; Tracked objects:
 17812 ;;		On entry : 0/0
 17813 ;;		On exit  : 0/0
 17814 ;;		Unchanged: 0/0
 17815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;Total ram usage:        2 bytes
 17821 ;; Hardware stack levels used:    1
 17822 ;; This function calls:
 17823 ;;		Nothing
 17824 ;; This function is called by:
 17825 ;;		_retrieveLog
 17826 ;; This function uses a non-reentrant model
 17827 ;;
 17828                           
 17829                           	psect	text73
 17830  0041CC                     __ptext73:
 17831                           	opt stack 0
 17832  0041CC                     i2_EEPROM_read:
 17833                           	opt stack 20
 17834                           
 17835                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;incstack = 0
 17839  0041CC  5002               	movf	i2EEPROM_read@address+1,w,c
 17840  0041CE  6EAA               	movwf	4010,c	;volatile
 17841                           
 17842                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17843  0041D0  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17844                           
 17845                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17846  0041D4  9EA6               	bcf	4006,7,c	;volatile
 17847                           
 17848                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17849  0041D6  9CA6               	bcf	4006,6,c	;volatile
 17850                           
 17851                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17852  0041D8  80A6               	bsf	4006,0,c	;volatile
 17853  0041DA                     i2l922:
 17854  0041DA  B0A6               	btfsc	4006,0,c	;volatile
 17855  0041DC  D7FE               	goto	i2l922
 17856                           
 17857                           ;EEPROM.c: 81: return EEDATA;
 17858  0041DE  50A8               	movf	4008,w,c	;volatile
 17859  0041E0  0012               	return	
 17860  0041E2                     __end_ofi2_EEPROM_read:
 17861                           	opt stack 0
 17862                           pclatu	equ	0xFFB
 17863                           pclath	equ	0xFFA
 17864                           tblptru	equ	0xFF8
 17865                           tblptrh	equ	0xFF7
 17866                           tblptrl	equ	0xFF6
 17867                           tablat	equ	0xFF5
 17868                           prodh	equ	0xFF4
 17869                           prodl	equ	0xFF3
 17870                           intcon	equ	0xFF2
 17871                           intcon2	equ	0xFF1
 17872                           intcon3	equ	0xFF0
 17873                           indf0	equ	0xFEF
 17874                           postinc0	equ	0xFEE
 17875                           fsr0h	equ	0xFEA
 17876                           fsr0l	equ	0xFE9
 17877                           wreg	equ	0xFE8
 17878                           postdec1	equ	0xFE5
 17879                           fsr1h	equ	0xFE2
 17880                           fsr1l	equ	0xFE1
 17881                           indf2	equ	0xFDF
 17882                           postinc2	equ	0xFDE
 17883                           postdec2	equ	0xFDD
 17884                           fsr2h	equ	0xFDA
 17885                           fsr2l	equ	0xFD9
 17886                           status	equ	0xFD8
 17887                           
 17888 ;; *************** function _printSortTimer *****************
 17889 ;; Defined at:
 17890 ;;		line 263 in file "sort.c"
 17891 ;; Parameters:    Size  Location     Type
 17892 ;;		None
 17893 ;; Auto vars:     Size  Location     Type
 17894 ;;  i               2   72[COMRAM] int 
 17895 ;;  curTime        14   46[COMRAM] int [7]
 17896 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17897 ;;  sec             2   66[COMRAM] int 
 17898 ;;  min             2   64[COMRAM] int 
 17899 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17900 ;;  start_sec       2   60[COMRAM] unsigned int 
 17901 ;;  hour            2   44[COMRAM] int 
 17902 ;; Return value:  Size  Location     Type
 17903 ;;                  1    wreg      void 
 17904 ;; Registers used:
 17905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17906 ;; Tracked objects:
 17907 ;;		On entry : 0/0
 17908 ;;		On exit  : 0/0
 17909 ;;		Unchanged: 0/0
 17910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17913 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17914 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17915 ;;Total ram usage:       33 bytes
 17916 ;; Hardware stack levels used:    1
 17917 ;; Hardware stack levels required when called:    3
 17918 ;; This function calls:
 17919 ;;		i2___lwdiv
 17920 ;;		i2___lwmod
 17921 ;;		i2___wmul
 17922 ;;		i2_getRTC
 17923 ;;		i2_lcdInst
 17924 ;;		i2_printf
 17925 ;; This function is called by:
 17926 ;;		_handler
 17927 ;; This function uses a non-reentrant model
 17928 ;;
 17929                           
 17930                           	psect	text74
 17931  00209E                     __ptext74:
 17932                           	opt stack 0
 17933  00209E                     _printSortTimer:
 17934                           	opt stack 20
 17935                           
 17936                           ;sort.c: 264: getRTC();
 17937                           
 17938                           ;incstack = 0
 17939  00209E  ECCA  F01B         	call	i2_getRTC	;wreg free
 17940                           
 17941                           ;sort.c: 265: int curTime[7];
 17942                           ;sort.c: 266: for(int i = 0; i < 7; i++){
 17943  0020A2  0E00               	movlw	0
 17944  0020A4  6E4A               	movwf	printSortTimer@i+1,c
 17945  0020A6  0E00               	movlw	0
 17946  0020A8  6E49               	movwf	printSortTimer@i,c
 17947  0020AA                     i2l7692:
 17948  0020AA  BE4A               	btfsc	printSortTimer@i+1,7,c
 17949  0020AC  D006               	goto	i2l7696
 17950  0020AE  504A               	movf	printSortTimer@i+1,w,c
 17951  0020B0  E131               	bnz	i2l7702
 17952  0020B2  0E07               	movlw	7
 17953  0020B4  5C49               	subwf	printSortTimer@i,w,c
 17954  0020B6  B0D8               	btfsc	status,0,c
 17955  0020B8  D02D               	goto	i2l7702
 17956  0020BA                     i2l7696:
 17957                           
 17958                           ;sort.c: 267: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17959  0020BA  0E24               	movlw	low _time
 17960  0020BC  2449               	addwf	printSortTimer@i,w,c
 17961  0020BE  6ED9               	movwf	fsr2l,c
 17962  0020C0  0E01               	movlw	high _time
 17963  0020C2  204A               	addwfc	printSortTimer@i+1,w,c
 17964  0020C4  6EDA               	movwf	fsr2h,c
 17965  0020C6  50DF               	movf	indf2,w,c
 17966  0020C8  6E2A               	movwf	??_printSortTimer& (0+255),c
 17967  0020CA  3A2A               	swapf	??_printSortTimer,f,c
 17968  0020CC  0E0F               	movlw	15
 17969  0020CE  162A               	andwf	??_printSortTimer,f,c
 17970  0020D0  0E0F               	movlw	15
 17971  0020D2  162A               	andwf	??_printSortTimer,f,c
 17972  0020D4  502A               	movf	??_printSortTimer,w,c
 17973  0020D6  0D0A               	mullw	10
 17974  0020D8  0E24               	movlw	low _time
 17975  0020DA  2449               	addwf	printSortTimer@i,w,c
 17976  0020DC  6ED9               	movwf	fsr2l,c
 17977  0020DE  0E01               	movlw	high _time
 17978  0020E0  204A               	addwfc	printSortTimer@i+1,w,c
 17979  0020E2  6EDA               	movwf	fsr2h,c
 17980  0020E4  50DF               	movf	indf2,w,c
 17981  0020E6  0B0F               	andlw	15
 17982  0020E8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17983  0020EA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17984  0020EC  50F3               	movf	prodl,w,c
 17985  0020EE  262B               	addwf	??_printSortTimer+1,f,c
 17986  0020F0  50F4               	movf	prodh,w,c
 17987  0020F2  222C               	addwfc	??_printSortTimer+2,f,c
 17988  0020F4  90D8               	bcf	status,0,c
 17989  0020F6  3449               	rlcf	printSortTimer@i,w,c
 17990  0020F8  6ED9               	movwf	fsr2l,c
 17991  0020FA  344A               	rlcf	printSortTimer@i+1,w,c
 17992  0020FC  6EDA               	movwf	fsr2h,c
 17993  0020FE  0E2F               	movlw	low printSortTimer@curTime
 17994  002100  26D9               	addwf	fsr2l,f,c
 17995  002102  0E00               	movlw	high printSortTimer@curTime
 17996  002104  22DA               	addwfc	fsr2h,f,c
 17997  002106  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17998  00210A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17999  00210E  4A49               	infsnz	printSortTimer@i,f,c
 18000  002110  2A4A               	incf	printSortTimer@i+1,f,c
 18001  002112  D7CB               	goto	i2l7692
 18002  002114                     i2l7702:
 18003                           
 18004                           ;sort.c: 268: }
 18005                           ;sort.c: 269: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18006  002114  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18007  002118  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18008  00211C  0E00               	movlw	0
 18009  00211E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18010  002120  0E3C               	movlw	60
 18011  002122  6E03               	movwf	i2___wmul@multiplicand,c
 18012  002124  EC54  F020         	call	i2___wmul	;wreg free
 18013  002128  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18014  00212C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18015  002130  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18016  002134  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18017  002138  0E0E               	movlw	14
 18018  00213A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18019  00213C  0E10               	movlw	16
 18020  00213E  6E03               	movwf	i2___wmul@multiplicand,c
 18021  002140  EC54  F020         	call	i2___wmul	;wreg free
 18022  002144  5001               	movf	?i2___wmul,w,c
 18023  002146  262A               	addwf	??_printSortTimer,f,c
 18024  002148  5002               	movf	?i2___wmul+1,w,c
 18025  00214A  222B               	addwfc	??_printSortTimer+1,f,c
 18026  00214C  0101               	movlb	1	; () banked
 18027  00214E  510E               	movf	_startTime& (0+255),w,b
 18028  002150  242A               	addwf	??_printSortTimer,w,c
 18029  002152  6E3D               	movwf	printSortTimer@start_sec,c
 18030  002154  0101               	movlb	1	; () banked
 18031  002156  510F               	movf	(_startTime+1)& (0+255),w,b
 18032  002158  202B               	addwfc	??_printSortTimer+1,w,c
 18033  00215A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18034                           
 18035                           ;sort.c: 270: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18036  00215C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18037  002160  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18038  002164  0E00               	movlw	0
 18039  002166  6E04               	movwf	i2___wmul@multiplicand+1,c
 18040  002168  0E3C               	movlw	60
 18041  00216A  6E03               	movwf	i2___wmul@multiplicand,c
 18042  00216C  EC54  F020         	call	i2___wmul	;wreg free
 18043  002170  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18044  002174  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18045  002178  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18046  00217C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18047  002180  0E0E               	movlw	14
 18048  002182  6E04               	movwf	i2___wmul@multiplicand+1,c
 18049  002184  0E10               	movlw	16
 18050  002186  6E03               	movwf	i2___wmul@multiplicand,c
 18051  002188  EC54  F020         	call	i2___wmul	;wreg free
 18052  00218C  5001               	movf	?i2___wmul,w,c
 18053  00218E  262A               	addwf	??_printSortTimer,f,c
 18054  002190  5002               	movf	?i2___wmul+1,w,c
 18055  002192  222B               	addwfc	??_printSortTimer+1,f,c
 18056  002194  502F               	movf	printSortTimer@curTime,w,c
 18057  002196  242A               	addwf	??_printSortTimer,w,c
 18058  002198  6E3F               	movwf	printSortTimer@cur_sec,c
 18059  00219A  5030               	movf	printSortTimer@curTime+1,w,c
 18060  00219C  202B               	addwfc	??_printSortTimer+1,w,c
 18061  00219E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18062                           
 18063                           ;sort.c: 271: unsigned int timeDiff = cur_sec - start_sec;
 18064  0021A0  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18065  0021A4  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18066  0021A8  1E2A               	comf	??_printSortTimer,f,c
 18067  0021AA  1E2B               	comf	??_printSortTimer+1,f,c
 18068  0021AC  4A2A               	infsnz	??_printSortTimer,f,c
 18069  0021AE  2A2B               	incf	??_printSortTimer+1,f,c
 18070  0021B0  503F               	movf	printSortTimer@cur_sec,w,c
 18071  0021B2  242A               	addwf	??_printSortTimer,w,c
 18072  0021B4  6E47               	movwf	printSortTimer@timeDiff,c
 18073  0021B6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18074  0021B8  202B               	addwfc	??_printSortTimer+1,w,c
 18075  0021BA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18076                           
 18077                           ;sort.c: 273: total_time = timeDiff;
 18078  0021BC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18079  0021C0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18080                           
 18081                           ;sort.c: 275: if(timeDiff >= 10){
 18082  0021C4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18083  0021C6  E104               	bnz	i2u671_40
 18084  0021C8  0E0A               	movlw	10
 18085  0021CA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18086  0021CC  A0D8               	btfss	status,0,c
 18087  0021CE  D003               	goto	i2l7712
 18088  0021D0                     i2u671_40:
 18089                           
 18090                           ;sort.c: 276: machine_state = DoneSorting_state;
 18091  0021D0  0E02               	movlw	2
 18092  0021D2  0100               	movlb	0	; () banked
 18093  0021D4  6FFC               	movwf	_machine_state& (0+255),b
 18094  0021D6                     i2l7712:
 18095                           
 18096                           ;sort.c: 278: }
 18097                           ;sort.c: 280: int hour = timeDiff / 3600;
 18098  0021D6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18099  0021DA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18100  0021DE  0E0E               	movlw	14
 18101  0021E0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18102  0021E2  0E10               	movlw	16
 18103  0021E4  6E08               	movwf	i2___lwdiv@divisor,c
 18104  0021E6  EC7E  F01D         	call	i2___lwdiv	;wreg free
 18105  0021EA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18106  0021EE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18107                           
 18108                           ;sort.c: 281: int min = (timeDiff % 3600) / 60;
 18109  0021F2  0E0E               	movlw	14
 18110  0021F4  6E04               	movwf	i2___lwmod@divisor+1,c
 18111  0021F6  0E10               	movlw	16
 18112  0021F8  6E03               	movwf	i2___lwmod@divisor,c
 18113  0021FA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18114  0021FE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18115  002202  EC3D  F01E         	call	i2___lwmod	;wreg free
 18116  002206  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18117  00220A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18118  00220E  0E00               	movlw	0
 18119  002210  6E09               	movwf	i2___lwdiv@divisor+1,c
 18120  002212  0E3C               	movlw	60
 18121  002214  6E08               	movwf	i2___lwdiv@divisor,c
 18122  002216  EC7E  F01D         	call	i2___lwdiv	;wreg free
 18123  00221A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18124  00221E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18125                           
 18126                           ;sort.c: 282: int sec = (timeDiff % 3600) % 60;
 18127  002222  0E0E               	movlw	14
 18128  002224  6E04               	movwf	i2___lwmod@divisor+1,c
 18129  002226  0E10               	movlw	16
 18130  002228  6E03               	movwf	i2___lwmod@divisor,c
 18131  00222A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18132  00222E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18133  002232  EC3D  F01E         	call	i2___lwmod	;wreg free
 18134  002236  C001  F045         	movff	?i2___lwmod,_printSortTimer$2352
 18135  00223A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2352+1
 18136                           
 18137                           ;sort.c: 282: int sec = (timeDiff % 3600) % 60;
 18138  00223E  C045  F001         	movff	_printSortTimer$2352,i2___lwmod@dividend
 18139  002242  C046  F002         	movff	_printSortTimer$2352+1,i2___lwmod@dividend+1
 18140  002246  0E00               	movlw	0
 18141  002248  6E04               	movwf	i2___lwmod@divisor+1,c
 18142  00224A  0E3C               	movlw	60
 18143  00224C  6E03               	movwf	i2___lwmod@divisor,c
 18144  00224E  EC3D  F01E         	call	i2___lwmod	;wreg free
 18145  002252  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18146  002256  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18147                           
 18148                           ;sort.c: 284: lcdInst(0b10000000);;
 18149  00225A  0E80               	movlw	128
 18150  00225C  EC1A  F021         	call	i2_lcdInst
 18151                           
 18152                           ;sort.c: 285: printf("SORTING...");
 18153  002260  0E85               	movlw	low STR_64
 18154  002262  6E0D               	movwf	i2printf@f,c
 18155  002264  0EFF               	movlw	high STR_64
 18156  002266  6E0E               	movwf	i2printf@f+1,c
 18157  002268  ECB8  F00A         	call	i2_printf	;wreg free
 18158                           
 18159                           ;sort.c: 286: lcdInst(0b11000000);;
 18160  00226C  0EC0               	movlw	192
 18161  00226E  EC1A  F021         	call	i2_lcdInst
 18162                           
 18163                           ;sort.c: 287: printf("TIME %d:%02d", min, sec);
 18164  002272  0E56               	movlw	low STR_65
 18165  002274  6E0D               	movwf	i2printf@f,c
 18166  002276  0EFF               	movlw	high STR_65
 18167  002278  6E0E               	movwf	i2printf@f+1,c
 18168  00227A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18169  00227E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18170  002282  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18171  002286  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18172  00228A  ECB8  F00A         	call	i2_printf	;wreg free
 18173  00228E  0012               	return		;funcret
 18174  002290                     __end_of_printSortTimer:
 18175                           	opt stack 0
 18176                           pclatu	equ	0xFFB
 18177                           pclath	equ	0xFFA
 18178                           tblptru	equ	0xFF8
 18179                           tblptrh	equ	0xFF7
 18180                           tblptrl	equ	0xFF6
 18181                           tablat	equ	0xFF5
 18182                           prodh	equ	0xFF4
 18183                           prodl	equ	0xFF3
 18184                           intcon	equ	0xFF2
 18185                           intcon2	equ	0xFF1
 18186                           intcon3	equ	0xFF0
 18187                           indf0	equ	0xFEF
 18188                           postinc0	equ	0xFEE
 18189                           fsr0h	equ	0xFEA
 18190                           fsr0l	equ	0xFE9
 18191                           wreg	equ	0xFE8
 18192                           postdec1	equ	0xFE5
 18193                           fsr1h	equ	0xFE2
 18194                           fsr1l	equ	0xFE1
 18195                           indf2	equ	0xFDF
 18196                           postinc2	equ	0xFDE
 18197                           postdec2	equ	0xFDD
 18198                           fsr2h	equ	0xFDA
 18199                           fsr2l	equ	0xFD9
 18200                           status	equ	0xFD8
 18201                           
 18202 ;; *************** function i2_printf *****************
 18203 ;; Defined at:
 18204 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18205 ;; Parameters:    Size  Location     Type
 18206 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18207 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 18208 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 18209 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 18210 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 18211 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 18212 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 18213 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 18214 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 18215 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 18216 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 18217 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 18218 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 18219 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 18220 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 18221 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 18222 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 18223 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 18224 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 18225 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 18226 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 18227 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 18228 ;;		 -> STR_1(18), 
 18229 ;; Auto vars:     Size  Location     Type
 18230 ;;  printf          4    0        struct .
 18231 ;;  printf          2   39[COMRAM] int 
 18232 ;;  printf          2   35[COMRAM] unsigned int 
 18233 ;;  printf          2   33[COMRAM] unsigned int 
 18234 ;;  printf          2   31[COMRAM] PTR void [1]
 18235 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18236 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18237 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 18238 ;;  printf          1   38[COMRAM] char 
 18239 ;;  printf          1   37[COMRAM] unsigned char 
 18240 ;;  printf          1   28[COMRAM] char 
 18241 ;; Return value:  Size  Location     Type
 18242 ;;                  2   12[COMRAM] int 
 18243 ;; Registers used:
 18244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18245 ;; Tracked objects:
 18246 ;;		On entry : 0/0
 18247 ;;		On exit  : 0/0
 18248 ;;		Unchanged: 0/0
 18249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18250 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18251 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18252 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18253 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18254 ;;Total ram usage:       29 bytes
 18255 ;; Hardware stack levels used:    1
 18256 ;; Hardware stack levels required when called:    2
 18257 ;; This function calls:
 18258 ;;		i2___lwdiv
 18259 ;;		i2___lwmod
 18260 ;;		i2___wmul
 18261 ;;		i2_isdigit
 18262 ;;		i2_putch
 18263 ;; This function is called by:
 18264 ;;		_change_state_to_menu_11
 18265 ;;		_change_state_to_menu_23
 18266 ;;		_change_state_to_logs_11
 18267 ;;		_change_state_to_logs_12
 18268 ;;		_change_state_to_logs_22
 18269 ;;		_change_state_to_logs_23
 18270 ;;		_change_state_to_logs_33
 18271 ;;		_change_state_to_logs_34
 18272 ;;		_printSortTimer
 18273 ;;		i2_change_state_to_menu_start
 18274 ;;		i2_change_state_to_menu_12
 18275 ;;		i2_change_state_to_menu_22
 18276 ;;		i2_printRTC
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           	psect	text75
 18281  001570                     __ptext75:
 18282                           	opt stack 0
 18283  001570                     i2_printf:
 18284                           	opt stack 19
 18285                           
 18286                           ;doprnt.c: 466: va_list ap;
 18287                           ;doprnt.c: 499: signed char c;
 18288                           ;doprnt.c: 501: int width;
 18289                           ;doprnt.c: 506: signed char prec;
 18290                           ;doprnt.c: 508: unsigned char flag;
 18291                           ;doprnt.c: 523: union {
 18292                           ;doprnt.c: 524: unsigned long vd;
 18293                           ;doprnt.c: 525: double integ;
 18294                           ;doprnt.c: 526: } tmpval;
 18295                           ;doprnt.c: 528: unsigned int val;
 18296                           ;doprnt.c: 529: unsigned len;
 18297                           ;doprnt.c: 530: const char * cp;
 18298                           ;doprnt.c: 533: *ap = __va_start();
 18299                           
 18300                           ;incstack = 0
 18301  001570  0E0F               	movlw	low (?i2_printf+2)
 18302  001572  6E20               	movwf	i2printf@ap,c
 18303  001574  0E00               	movlw	high (?i2_printf+2)
 18304  001576  6E21               	movwf	i2printf@ap+1,c
 18305                           
 18306                           ;doprnt.c: 536: while(c = *f++) {
 18307  001578  D1A4               	goto	i2l5590
 18308  00157A                     i2l5460:
 18309                           
 18310                           ;doprnt.c: 538: if(c != '%')
 18311  00157A  0E25               	movlw	37
 18312  00157C  1827               	xorwf	i2printf@c,w,c
 18313  00157E  B4D8               	btfsc	status,2,c
 18314  001580  D004               	goto	i2l5464
 18315                           
 18316                           ;doprnt.c: 540: {
 18317                           ;doprnt.c: 541: (putch(c) );
 18318  001582  5027               	movf	i2printf@c,w,c
 18319  001584  EC14  F021         	call	i2_putch
 18320                           
 18321                           ;doprnt.c: 542: continue;
 18322  001588  D19C               	goto	i2l5590
 18323  00158A                     i2l5464:
 18324                           
 18325                           ;doprnt.c: 543: }
 18326                           ;doprnt.c: 546: width = 0;
 18327  00158A  0E00               	movlw	0
 18328  00158C  6E29               	movwf	i2printf@width+1,c
 18329  00158E  0E00               	movlw	0
 18330  001590  6E28               	movwf	i2printf@width,c
 18331                           
 18332                           ;doprnt.c: 548: flag = 0;
 18333  001592  0E00               	movlw	0
 18334  001594  6E26               	movwf	i2printf@flag,c
 18335                           
 18336                           ;doprnt.c: 551: switch(*f) {
 18337                           
 18338                           ;doprnt.c: 550: for(;;) {
 18339  001596  D003               	goto	i2l5470
 18340  001598                     i2l5466:
 18341                           
 18342                           ;doprnt.c: 580: flag |= 0x04;
 18343  001598  8426               	bsf	i2printf@flag,2,c
 18344                           
 18345                           ;doprnt.c: 581: f++;
 18346  00159A  4A0D               	infsnz	i2printf@f,f,c
 18347  00159C  2A0E               	incf	i2printf@f+1,f,c
 18348  00159E                     i2l5470:
 18349  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 18350  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18351  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18352  0015A6  6AF8               	clrf	tblptru,c
 18353  0015A8                     	endif
 18354  0015A8                     	if	0	;tblptru may be non-zero
 18355  0015A8                     	endif
 18356  0015A8  0008               	tblrd		*
 18357  0015AA  50F5               	movf	tablat,w,c
 18358                           
 18359                           ; Switch size 1, requested type "space"
 18360                           ; Number of cases is 1, Range of values is 48 to 48
 18361                           ; switch strategies available:
 18362                           ; Name         Instructions Cycles
 18363                           ; simple_byte            4     3 (average)
 18364                           ;	Chosen strategy is simple_byte
 18365  0015AC  0A30               	xorlw	48	; case 48
 18366  0015AE  B4D8               	btfsc	status,2,c
 18367  0015B0  D7F3               	goto	i2l5466
 18368                           
 18369                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18370                           
 18371                           ;doprnt.c: 586: }
 18372                           
 18373                           ;doprnt.c: 585: break;
 18374  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18375  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18376  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18377  0015BA  6AF8               	clrf	tblptru,c
 18378  0015BC                     	endif
 18379  0015BC                     	if	0	;tblptru may be non-zero
 18380  0015BC                     	endif
 18381  0015BC  0008               	tblrd		*
 18382  0015BE  50F5               	movf	tablat,w,c
 18383  0015C0  ECC0  F020         	call	i2_isdigit
 18384  0015C4  A0D8               	btfss	status,0,c
 18385  0015C6  D0A6               	goto	i2l5518
 18386                           
 18387                           ;doprnt.c: 598: width = 0;
 18388  0015C8  0E00               	movlw	0
 18389  0015CA  6E29               	movwf	i2printf@width+1,c
 18390  0015CC  0E00               	movlw	0
 18391  0015CE  6E28               	movwf	i2printf@width,c
 18392  0015D0                     i2l5476:
 18393                           
 18394                           ;doprnt.c: 600: width *= 10;
 18395  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18396  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18397  0015D8  0E00               	movlw	0
 18398  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 18399  0015DC  0E0A               	movlw	10
 18400  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 18401  0015E0  EC54  F020         	call	i2___wmul	;wreg free
 18402  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 18403  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18404                           
 18405                           ;doprnt.c: 601: width += *f++ - '0';
 18406  0015EC  0ED0               	movlw	208
 18407  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 18408  0015F0  0EFF               	movlw	255
 18409  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18410  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 18411  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18412  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18413  0015FC  6AF8               	clrf	tblptru,c
 18414  0015FE                     	endif
 18415  0015FE                     	if	0	;tblptru may be non-zero
 18416  0015FE                     	endif
 18417  0015FE  0008               	tblrd		*
 18418  001600  50F5               	movf	tablat,w,c
 18419  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18420  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18421  001606  5019               	movf	??i2_printf,w,c
 18422  001608  261B               	addwf	??i2_printf+2,f,c
 18423  00160A  501A               	movf	??i2_printf+1,w,c
 18424  00160C  221C               	addwfc	??i2_printf+3,f,c
 18425  00160E  501B               	movf	??i2_printf+2,w,c
 18426  001610  2628               	addwf	i2printf@width,f,c
 18427  001612  501C               	movf	??i2_printf+3,w,c
 18428  001614  2229               	addwfc	i2printf@width+1,f,c
 18429  001616  4A0D               	infsnz	i2printf@f,f,c
 18430  001618  2A0E               	incf	i2printf@f+1,f,c
 18431                           
 18432                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18433  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18434  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18435  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18436  001622  6AF8               	clrf	tblptru,c
 18437  001624                     	endif
 18438  001624                     	if	0	;tblptru may be non-zero
 18439  001624                     	endif
 18440  001624  0008               	tblrd		*
 18441  001626  50F5               	movf	tablat,w,c
 18442  001628  ECC0  F020         	call	i2_isdigit
 18443  00162C  A0D8               	btfss	status,0,c
 18444  00162E  D072               	goto	i2l5518
 18445  001630  D7CF               	goto	i2l5476
 18446  001632                     i2l5484:
 18447                           
 18448                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18449  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 18450  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18451  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 18452  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18453  001642  0E02               	movlw	2
 18454  001644  2620               	addwf	i2printf@ap,f,c
 18455  001646  0E00               	movlw	0
 18456  001648  2221               	addwfc	i2printf@ap+1,f,c
 18457                           
 18458                           ;doprnt.c: 740: if(!cp)
 18459  00164A  501E               	movf	i2printf@cp,w,c
 18460  00164C  101F               	iorwf	i2printf@cp+1,w,c
 18461  00164E  A4D8               	btfss	status,2,c
 18462  001650  D004               	goto	i2l5492
 18463                           
 18464                           ;doprnt.c: 741: cp = "(null)";
 18465  001652  0EB6               	movlw	low STR_111
 18466  001654  6E1E               	movwf	i2printf@cp,c
 18467  001656  0EFF               	movlw	high STR_111
 18468  001658  6E1F               	movwf	i2printf@cp+1,c
 18469  00165A                     i2l5492:
 18470                           
 18471                           ;doprnt.c: 745: len = 0;
 18472  00165A  0E00               	movlw	0
 18473  00165C  6E23               	movwf	i2printf@len+1,c
 18474  00165E  0E00               	movlw	0
 18475  001660  6E22               	movwf	i2printf@len,c
 18476                           
 18477                           ;doprnt.c: 746: while(cp[len])
 18478  001662  D002               	goto	i2l5496
 18479  001664                     i2l5494:
 18480                           
 18481                           ;doprnt.c: 747: len++;
 18482  001664  4A22               	infsnz	i2printf@len,f,c
 18483  001666  2A23               	incf	i2printf@len+1,f,c
 18484  001668                     i2l5496:
 18485  001668  5022               	movf	i2printf@len,w,c
 18486  00166A  241E               	addwf	i2printf@cp,w,c
 18487  00166C  6E19               	movwf	??i2_printf& (0+255),c
 18488  00166E  5023               	movf	i2printf@len+1,w,c
 18489  001670  201F               	addwfc	i2printf@cp+1,w,c
 18490  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18491  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 18492  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 18493  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 18494  00167E  6EF8               	movwf	tblptru,c
 18495  001680  0E0F               	movlw	(high __ramtop+-1)
 18496  001682  64F7               	cpfsgt	tblptrh,c
 18497  001684  D003               	bra	i2u409_47
 18498  001686  0008               	tblrd		*
 18499  001688  50F5               	movf	tablat,w,c
 18500  00168A  D005               	bra	i2u409_40
 18501  00168C                     i2u409_47:
 18502  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18503  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 18504  001694  50EF               	movf	indf0,w,c
 18505  001696                     i2u409_40:
 18506  001696  0900               	iorlw	0
 18507  001698  A4D8               	btfss	status,2,c
 18508  00169A  D7E4               	goto	i2l5494
 18509                           
 18510                           ;doprnt.c: 757: if(width > len)
 18511  00169C  5028               	movf	i2printf@width,w,c
 18512  00169E  5C22               	subwf	i2printf@len,w,c
 18513  0016A0  5029               	movf	i2printf@width+1,w,c
 18514  0016A2  5823               	subwfb	i2printf@len+1,w,c
 18515  0016A4  B0D8               	btfsc	status,0,c
 18516  0016A6  D005               	goto	i2l5502
 18517                           
 18518                           ;doprnt.c: 758: width -= len;
 18519  0016A8  5022               	movf	i2printf@len,w,c
 18520  0016AA  5E28               	subwf	i2printf@width,f,c
 18521  0016AC  5023               	movf	i2printf@len+1,w,c
 18522  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 18523  0016B0  D008               	goto	i2l5506
 18524  0016B2                     i2l5502:
 18525                           
 18526                           ;doprnt.c: 759: else
 18527                           ;doprnt.c: 760: width = 0;
 18528  0016B2  0E00               	movlw	0
 18529  0016B4  6E29               	movwf	i2printf@width+1,c
 18530  0016B6  0E00               	movlw	0
 18531  0016B8  6E28               	movwf	i2printf@width,c
 18532                           
 18533                           ;doprnt.c: 764: while(width--)
 18534  0016BA  D003               	goto	i2l5506
 18535  0016BC                     i2l5504:
 18536                           
 18537                           ;doprnt.c: 765: (putch(' ') );
 18538  0016BC  0E20               	movlw	32
 18539  0016BE  EC14  F021         	call	i2_putch
 18540  0016C2                     i2l5506:
 18541  0016C2  0628               	decf	i2printf@width,f,c
 18542  0016C4  A0D8               	btfss	status,0,c
 18543  0016C6  0629               	decf	i2printf@width+1,f,c
 18544  0016C8  2828               	incf	i2printf@width,w,c
 18545  0016CA  E1F8               	bnz	i2l5504
 18546  0016CC  2829               	incf	i2printf@width+1,w,c
 18547  0016CE  B4D8               	btfsc	status,2,c
 18548  0016D0  D016               	goto	i2l5512
 18549  0016D2  D7F4               	goto	i2l5504
 18550  0016D4                     i2l5508:
 18551                           
 18552                           ;doprnt.c: 768: (putch(*cp++) );
 18553  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 18554  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 18555  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 18556  0016DE  6EF8               	movwf	tblptru,c
 18557  0016E0  0E0F               	movlw	(high __ramtop+-1)
 18558  0016E2  64F7               	cpfsgt	tblptrh,c
 18559  0016E4  D003               	bra	i2u413_47
 18560  0016E6  0008               	tblrd		*
 18561  0016E8  50F5               	movf	tablat,w,c
 18562  0016EA  D005               	bra	i2u413_40
 18563  0016EC                     i2u413_47:
 18564  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18565  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18566  0016F4  50EF               	movf	indf0,w,c
 18567  0016F6                     i2u413_40:
 18568  0016F6  EC14  F021         	call	i2_putch
 18569  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 18570  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 18571  0016FE                     i2l5512:
 18572  0016FE  0622               	decf	i2printf@len,f,c
 18573  001700  A0D8               	btfss	status,0,c
 18574  001702  0623               	decf	i2printf@len+1,f,c
 18575  001704  2822               	incf	i2printf@len,w,c
 18576  001706  E1E6               	bnz	i2l5508
 18577  001708  2823               	incf	i2printf@len+1,w,c
 18578  00170A  B4D8               	btfsc	status,2,c
 18579  00170C  D0DA               	goto	i2l5590
 18580  00170E  D7E2               	goto	i2l5508
 18581  001710                     i2l5514:
 18582                           
 18583                           ;doprnt.c: 818: flag |= 0x40;
 18584  001710  8C26               	bsf	i2printf@flag,6,c
 18585                           
 18586                           ;doprnt.c: 822: }
 18587                           
 18588                           ;doprnt.c: 819: break;
 18589  001712  D01B               	goto	i2l1220
 18590  001714                     i2l5518:
 18591  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 18592  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18593  00171C  4A0D               	infsnz	i2printf@f,f,c
 18594  00171E  2A0E               	incf	i2printf@f+1,f,c
 18595  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18596  001720  6AF8               	clrf	tblptru,c
 18597  001722                     	endif
 18598  001722                     	if	0	;tblptru may be non-zero
 18599  001722                     	endif
 18600  001722  0008               	tblrd		*
 18601  001724  CFF5 F027          	movff	tablat,i2printf@c
 18602  001728  5027               	movf	i2printf@c,w,c
 18603                           
 18604                           ; Switch size 1, requested type "space"
 18605                           ; Number of cases is 5, Range of values is 0 to 117
 18606                           ; switch strategies available:
 18607                           ; Name         Instructions Cycles
 18608                           ; simple_byte           16     9 (average)
 18609                           ;	Chosen strategy is simple_byte
 18610  00172A  0A00               	xorlw	0	; case 0
 18611  00172C  B4D8               	btfsc	status,2,c
 18612  00172E  0012               	return	
 18613  001730  0A64               	xorlw	100	; case 100
 18614  001732  B4D8               	btfsc	status,2,c
 18615  001734  D00A               	goto	i2l1220
 18616  001736  0A0D               	xorlw	13	; case 105
 18617  001738  B4D8               	btfsc	status,2,c
 18618  00173A  D007               	goto	i2l1220
 18619  00173C  0A1A               	xorlw	26	; case 115
 18620  00173E  B4D8               	btfsc	status,2,c
 18621  001740  D778               	goto	i2l5484
 18622  001742  0A06               	xorlw	6	; case 117
 18623  001744  B4D8               	btfsc	status,2,c
 18624  001746  D7E4               	goto	i2l5514
 18625  001748  D0BC               	goto	i2l5590
 18626  00174A                     i2l1220:
 18627                           
 18628                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18629  00174A  BC26               	btfsc	i2printf@flag,6,c
 18630  00174C  D015               	goto	i2l5530
 18631                           
 18632                           ;doprnt.c: 1253: {
 18633                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18634  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18635  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18636  001756  CFDE F024          	movff	postinc2,i2printf@val
 18637  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 18638  00175E  0E02               	movlw	2
 18639  001760  2620               	addwf	i2printf@ap,f,c
 18640  001762  0E00               	movlw	0
 18641  001764  2221               	addwfc	i2printf@ap+1,f,c
 18642                           
 18643                           ;doprnt.c: 1261: if((int)val < 0) {
 18644  001766  AE25               	btfss	i2printf@val+1,7,c
 18645  001768  D013               	goto	i2l5534
 18646                           
 18647                           ;doprnt.c: 1262: flag |= 0x03;
 18648  00176A  0E03               	movlw	3
 18649  00176C  1226               	iorwf	i2printf@flag,f,c
 18650                           
 18651                           ;doprnt.c: 1263: val = -val;
 18652  00176E  6C24               	negf	i2printf@val,c
 18653  001770  1E25               	comf	i2printf@val+1,f,c
 18654  001772  B0D8               	btfsc	status,0,c
 18655  001774  2A25               	incf	i2printf@val+1,f,c
 18656                           
 18657                           ;doprnt.c: 1264: }
 18658                           ;doprnt.c: 1266: }
 18659  001776  D00C               	goto	i2l5534
 18660  001778                     i2l5530:
 18661                           
 18662                           ;doprnt.c: 1268: else
 18663                           ;doprnt.c: 1273: {
 18664                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18665  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 18666  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18667  001780  CFDE F024          	movff	postinc2,i2printf@val
 18668  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 18669  001788  0E02               	movlw	2
 18670  00178A  2620               	addwf	i2printf@ap,f,c
 18671  00178C  0E00               	movlw	0
 18672  00178E  2221               	addwfc	i2printf@ap+1,f,c
 18673  001790                     i2l5534:
 18674                           
 18675                           ;doprnt.c: 1287: }
 18676                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18677  001790  0E01               	movlw	1
 18678  001792  6E27               	movwf	i2printf@c,c
 18679  001794                     i2l5536:
 18680  001794  0E05               	movlw	5
 18681  001796  1827               	xorwf	i2printf@c,w,c
 18682  001798  B4D8               	btfsc	status,2,c
 18683  00179A  D015               	goto	i2l5548
 18684                           
 18685                           ;doprnt.c: 1306: if(val < dpowers[c])
 18686  00179C  5027               	movf	i2printf@c,w,c
 18687  00179E  0D02               	mullw	2
 18688  0017A0  0E4A               	movlw	low _dpowers
 18689  0017A2  24F3               	addwf	prodl,w,c
 18690  0017A4  6EF6               	movwf	tblptrl,c
 18691  0017A6  0EFB               	movlw	high _dpowers
 18692  0017A8  20F4               	addwfc	prodh,w,c
 18693  0017AA  6EF7               	movwf	tblptrh,c
 18694  0017AC                     	if	1	;There are 3 active tblptr bytes
 18695  0017AC  6AF8               	clrf	tblptru,c
 18696  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 18697  0017B0  22F8               	addwfc	tblptru,f,c
 18698  0017B2                     	endif
 18699  0017B2  0009               	tblrd		*+
 18700  0017B4  50F5               	movf	tablat,w,c
 18701  0017B6  5C24               	subwf	i2printf@val,w,c
 18702  0017B8  0009               	tblrd		*+
 18703  0017BA  50F5               	movf	tablat,w,c
 18704  0017BC  5825               	subwfb	i2printf@val+1,w,c
 18705  0017BE  A0D8               	btfss	status,0,c
 18706  0017C0  D002               	goto	i2l5548
 18707                           
 18708                           ;doprnt.c: 1307: break;
 18709  0017C2  2A27               	incf	i2printf@c,f,c
 18710  0017C4  D7E7               	goto	i2l5536
 18711  0017C6                     i2l5548:
 18712                           
 18713                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18714  0017C6  5028               	movf	i2printf@width,w,c
 18715  0017C8  1029               	iorwf	i2printf@width+1,w,c
 18716  0017CA  B4D8               	btfsc	status,2,c
 18717  0017CC  D009               	goto	i2l5554
 18718  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 18719  0017D2  0E03               	movlw	3
 18720  0017D4  1619               	andwf	??i2_printf,f,c
 18721  0017D6  B4D8               	btfsc	status,2,c
 18722  0017D8  D003               	goto	i2l5554
 18723                           
 18724                           ;doprnt.c: 1346: width--;
 18725  0017DA  0628               	decf	i2printf@width,f,c
 18726  0017DC  A0D8               	btfss	status,0,c
 18727  0017DE  0629               	decf	i2printf@width+1,f,c
 18728  0017E0                     i2l5554:
 18729                           
 18730                           ;doprnt.c: 1381: if(width > c)
 18731  0017E0  0E80               	movlw	128
 18732  0017E2  BE27               	btfsc	i2printf@c,7,c
 18733  0017E4  0E7F               	movlw	127
 18734  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 18735  0017E8  5028               	movf	i2printf@width,w,c
 18736  0017EA  5C27               	subwf	i2printf@c,w,c
 18737  0017EC  5029               	movf	i2printf@width+1,w,c
 18738  0017EE  0A80               	xorlw	128
 18739  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 18740  0017F2  B0D8               	btfsc	status,0,c
 18741  0017F4  D007               	goto	i2l5558
 18742                           
 18743                           ;doprnt.c: 1382: width -= c;
 18744  0017F6  5027               	movf	i2printf@c,w,c
 18745  0017F8  5E28               	subwf	i2printf@width,f,c
 18746  0017FA  0E00               	movlw	0
 18747  0017FC  BE27               	btfsc	i2printf@c,7,c
 18748  0017FE  0EFF               	movlw	255
 18749  001800  5A29               	subwfb	i2printf@width+1,f,c
 18750  001802  D004               	goto	i2l5560
 18751  001804                     i2l5558:
 18752                           
 18753                           ;doprnt.c: 1383: else
 18754                           ;doprnt.c: 1384: width = 0;
 18755  001804  0E00               	movlw	0
 18756  001806  6E29               	movwf	i2printf@width+1,c
 18757  001808  0E00               	movlw	0
 18758  00180A  6E28               	movwf	i2printf@width,c
 18759  00180C                     i2l5560:
 18760                           
 18761                           ;doprnt.c: 1387: if(flag & 0x04) {
 18762  00180C  A426               	btfss	i2printf@flag,2,c
 18763  00180E  D014               	goto	i2l5572
 18764                           
 18765                           ;doprnt.c: 1392: if(flag & 0x03)
 18766  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 18767  001814  0E03               	movlw	3
 18768  001816  1619               	andwf	??i2_printf,f,c
 18769  001818  B4D8               	btfsc	status,2,c
 18770  00181A  D003               	goto	i2l5566
 18771                           
 18772                           ;doprnt.c: 1393: (putch('-') );
 18773  00181C  0E2D               	movlw	45
 18774  00181E  EC14  F021         	call	i2_putch
 18775  001822                     i2l5566:
 18776                           
 18777                           ;doprnt.c: 1415: if(width)
 18778  001822  5028               	movf	i2printf@width,w,c
 18779  001824  1029               	iorwf	i2printf@width+1,w,c
 18780  001826  B4D8               	btfsc	status,2,c
 18781  001828  D01E               	goto	i2l5582
 18782                           
 18783                           ;doprnt.c: 1417: (putch('0') );
 18784                           
 18785                           ;doprnt.c: 1416: do
 18786  00182A  0E30               	movlw	48
 18787  00182C  EC14  F021         	call	i2_putch
 18788                           
 18789                           ;doprnt.c: 1418: while(--width);
 18790  001830  0628               	decf	i2printf@width,f,c
 18791  001832  A0D8               	btfss	status,0,c
 18792  001834  0629               	decf	i2printf@width+1,f,c
 18793  001836  D7F5               	goto	i2l5566
 18794  001838                     i2l5572:
 18795                           
 18796                           ;doprnt.c: 1422: {
 18797                           ;doprnt.c: 1424: if(width
 18798                           ;doprnt.c: 1428: )
 18799  001838  5028               	movf	i2printf@width,w,c
 18800  00183A  1029               	iorwf	i2printf@width+1,w,c
 18801  00183C  B4D8               	btfsc	status,2,c
 18802  00183E  D00A               	goto	i2l5578
 18803  001840                     i2l5574:
 18804                           
 18805                           ;doprnt.c: 1430: (putch(' ') );
 18806  001840  0E20               	movlw	32
 18807  001842  EC14  F021         	call	i2_putch
 18808                           
 18809                           ;doprnt.c: 1431: while(--width);
 18810  001846  0628               	decf	i2printf@width,f,c
 18811  001848  A0D8               	btfss	status,0,c
 18812  00184A  0629               	decf	i2printf@width+1,f,c
 18813  00184C  5028               	movf	i2printf@width,w,c
 18814  00184E  1029               	iorwf	i2printf@width+1,w,c
 18815  001850  A4D8               	btfss	status,2,c
 18816  001852  D7F6               	goto	i2l5574
 18817  001854                     i2l5578:
 18818                           
 18819                           ;doprnt.c: 1438: if(flag & 0x03)
 18820  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 18821  001858  0E03               	movlw	3
 18822  00185A  1619               	andwf	??i2_printf,f,c
 18823  00185C  B4D8               	btfsc	status,2,c
 18824  00185E  D003               	goto	i2l5582
 18825                           
 18826                           ;doprnt.c: 1439: (putch('-') );
 18827  001860  0E2D               	movlw	45
 18828  001862  EC14  F021         	call	i2_putch
 18829  001866                     i2l5582:
 18830                           
 18831                           ;doprnt.c: 1469: }
 18832                           ;doprnt.c: 1472: prec = c;
 18833  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 18834                           
 18835                           ;doprnt.c: 1474: while(prec--) {
 18836  00186A  D027               	goto	i2l5588
 18837  00186C                     i2l5584:
 18838                           
 18839                           ;doprnt.c: 1478: {
 18840                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18841  00186C  501D               	movf	i2printf@prec,w,c
 18842  00186E  0D02               	mullw	2
 18843  001870  0E4A               	movlw	low _dpowers
 18844  001872  24F3               	addwf	prodl,w,c
 18845  001874  6EF6               	movwf	tblptrl,c
 18846  001876  0EFB               	movlw	high _dpowers
 18847  001878  20F4               	addwfc	prodh,w,c
 18848  00187A  6EF7               	movwf	tblptrh,c
 18849  00187C                     	if	1	;There are 3 active tblptr bytes
 18850  00187C  6AF8               	clrf	tblptru,c
 18851  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 18852  001880  22F8               	addwfc	tblptru,f,c
 18853  001882                     	endif
 18854  001882  0009               	tblrd		*+
 18855  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18856  001888  000A               	tblrd		*-
 18857  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18858  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18859  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18860  001896  EC7E  F01D         	call	i2___lwdiv	;wreg free
 18861  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18862  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18863  0018A2  0E00               	movlw	0
 18864  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 18865  0018A6  0E0A               	movlw	10
 18866  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 18867  0018AA  EC3D  F01E         	call	i2___lwmod	;wreg free
 18868  0018AE  5001               	movf	?i2___lwmod,w,c
 18869  0018B0  0F30               	addlw	48
 18870  0018B2  6E27               	movwf	i2printf@c,c
 18871                           
 18872                           ;doprnt.c: 1523: }
 18873                           ;doprnt.c: 1524: (putch(c) );
 18874  0018B4  5027               	movf	i2printf@c,w,c
 18875  0018B6  EC14  F021         	call	i2_putch
 18876  0018BA                     i2l5588:
 18877  0018BA  061D               	decf	i2printf@prec,f,c
 18878  0018BC  281D               	incf	i2printf@prec,w,c
 18879  0018BE  A4D8               	btfss	status,2,c
 18880  0018C0  D7D5               	goto	i2l5584
 18881  0018C2                     i2l5590:
 18882  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18883  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18884  0018CA  4A0D               	infsnz	i2printf@f,f,c
 18885  0018CC  2A0E               	incf	i2printf@f+1,f,c
 18886  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18887  0018CE  6AF8               	clrf	tblptru,c
 18888  0018D0                     	endif
 18889  0018D0                     	if	0	;tblptru may be non-zero
 18890  0018D0                     	endif
 18891  0018D0  0008               	tblrd		*
 18892  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 18893  0018D6  5027               	movf	i2printf@c,w,c
 18894  0018D8  B4D8               	btfsc	status,2,c
 18895  0018DA  0012               	return	
 18896  0018DC  D64E               	goto	i2l5460
 18897  0018DE                     __end_ofi2_printf:
 18898                           	opt stack 0
 18899                           pclatu	equ	0xFFB
 18900                           pclath	equ	0xFFA
 18901                           tblptru	equ	0xFF8
 18902                           tblptrh	equ	0xFF7
 18903                           tblptrl	equ	0xFF6
 18904                           tablat	equ	0xFF5
 18905                           prodh	equ	0xFF4
 18906                           prodl	equ	0xFF3
 18907                           intcon	equ	0xFF2
 18908                           intcon2	equ	0xFF1
 18909                           intcon3	equ	0xFF0
 18910                           indf0	equ	0xFEF
 18911                           postinc0	equ	0xFEE
 18912                           fsr0h	equ	0xFEA
 18913                           fsr0l	equ	0xFE9
 18914                           wreg	equ	0xFE8
 18915                           postdec1	equ	0xFE5
 18916                           fsr1h	equ	0xFE2
 18917                           fsr1l	equ	0xFE1
 18918                           indf2	equ	0xFDF
 18919                           postinc2	equ	0xFDE
 18920                           postdec2	equ	0xFDD
 18921                           fsr2h	equ	0xFDA
 18922                           fsr2l	equ	0xFD9
 18923                           status	equ	0xFD8
 18924                           
 18925 ;; *************** function i2_putch *****************
 18926 ;; Defined at:
 18927 ;;		line 20 in file "lcd.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;  data            1    wreg     unsigned char 
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  data            1    2[COMRAM] unsigned char 
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  1    wreg      void 
 18934 ;; Registers used:
 18935 ;;		wreg, status,2, status,0, cstack
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18945 ;;Total ram usage:        1 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    1
 18948 ;; This function calls:
 18949 ;;		i2_lcdNibble
 18950 ;; This function is called by:
 18951 ;;		i2_printf
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text76
 18956  004228                     __ptext76:
 18957                           	opt stack 0
 18958  004228                     i2_putch:
 18959                           	opt stack 19
 18960                           
 18961                           ;incstack = 0
 18962                           ;i2putch@data stored from wreg
 18963  004228  6E03               	movwf	i2putch@data,c
 18964                           
 18965                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18966  00422A  848C               	bsf	3980,2,c	;volatile
 18967                           
 18968                           ;lcd.c: 22: lcdNibble(data);
 18969  00422C  5003               	movf	i2putch@data,w,c
 18970  00422E  EC53  F01D         	call	i2_lcdNibble
 18971  004232  0012               	return		;funcret
 18972  004234                     __end_ofi2_putch:
 18973                           	opt stack 0
 18974                           pclatu	equ	0xFFB
 18975                           pclath	equ	0xFFA
 18976                           tblptru	equ	0xFF8
 18977                           tblptrh	equ	0xFF7
 18978                           tblptrl	equ	0xFF6
 18979                           tablat	equ	0xFF5
 18980                           prodh	equ	0xFF4
 18981                           prodl	equ	0xFF3
 18982                           intcon	equ	0xFF2
 18983                           intcon2	equ	0xFF1
 18984                           intcon3	equ	0xFF0
 18985                           indf0	equ	0xFEF
 18986                           postinc0	equ	0xFEE
 18987                           fsr0h	equ	0xFEA
 18988                           fsr0l	equ	0xFE9
 18989                           wreg	equ	0xFE8
 18990                           postdec1	equ	0xFE5
 18991                           fsr1h	equ	0xFE2
 18992                           fsr1l	equ	0xFE1
 18993                           indf2	equ	0xFDF
 18994                           postinc2	equ	0xFDE
 18995                           postdec2	equ	0xFDD
 18996                           fsr2h	equ	0xFDA
 18997                           fsr2l	equ	0xFD9
 18998                           status	equ	0xFD8
 18999                           
 19000 ;; *************** function i2_isdigit *****************
 19001 ;; Defined at:
 19002 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19003 ;; Parameters:    Size  Location     Type
 19004 ;;  c               1    wreg     unsigned char 
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;  c               1    2[COMRAM] unsigned char 
 19007 ;; Return value:  Size  Location     Type
 19008 ;;		None               void
 19009 ;; Registers used:
 19010 ;;		wreg, status,2, status,0
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19020 ;;Total ram usage:        3 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; This function calls:
 19023 ;;		Nothing
 19024 ;; This function is called by:
 19025 ;;		i2_printf
 19026 ;; This function uses a non-reentrant model
 19027 ;;
 19028                           
 19029                           	psect	text77
 19030  004180                     __ptext77:
 19031                           	opt stack 0
 19032  004180                     i2_isdigit:
 19033                           	opt stack 20
 19034                           
 19035                           ;incstack = 0
 19036                           ;i2isdigit@c stored from wreg
 19037  004180  6E03               	movwf	i2isdigit@c,c
 19038  004182  0E00               	movlw	0
 19039  004184  6E02               	movwf	i2_isdigit$1876,c
 19040  004186  0E3A               	movlw	58
 19041  004188  6003               	cpfslt	i2isdigit@c,c
 19042  00418A  D005               	goto	i2l5166
 19043  00418C  0E2F               	movlw	47
 19044  00418E  6403               	cpfsgt	i2isdigit@c,c
 19045  004190  D002               	goto	i2l5166
 19046  004192  0E01               	movlw	1
 19047  004194  6E02               	movwf	i2_isdigit$1876,c
 19048  004196                     i2l5166:
 19049  004196  C002  F001         	movff	i2_isdigit$1876,??i2_isdigit
 19050  00419A  3001               	rrcf	??i2_isdigit,w,c
 19051  00419C  0012               	return	
 19052  00419E                     __end_ofi2_isdigit:
 19053                           	opt stack 0
 19054                           pclatu	equ	0xFFB
 19055                           pclath	equ	0xFFA
 19056                           tblptru	equ	0xFF8
 19057                           tblptrh	equ	0xFF7
 19058                           tblptrl	equ	0xFF6
 19059                           tablat	equ	0xFF5
 19060                           prodh	equ	0xFF4
 19061                           prodl	equ	0xFF3
 19062                           intcon	equ	0xFF2
 19063                           intcon2	equ	0xFF1
 19064                           intcon3	equ	0xFF0
 19065                           indf0	equ	0xFEF
 19066                           postinc0	equ	0xFEE
 19067                           fsr0h	equ	0xFEA
 19068                           fsr0l	equ	0xFE9
 19069                           wreg	equ	0xFE8
 19070                           postdec1	equ	0xFE5
 19071                           fsr1h	equ	0xFE2
 19072                           fsr1l	equ	0xFE1
 19073                           indf2	equ	0xFDF
 19074                           postinc2	equ	0xFDE
 19075                           postdec2	equ	0xFDD
 19076                           fsr2h	equ	0xFDA
 19077                           fsr2l	equ	0xFD9
 19078                           status	equ	0xFD8
 19079                           
 19080 ;; *************** function i2___wmul *****************
 19081 ;; Defined at:
 19082 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19083 ;; Parameters:    Size  Location     Type
 19084 ;;  multiplier      2    0[COMRAM] unsigned int 
 19085 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19086 ;; Auto vars:     Size  Location     Type
 19087 ;;  __wmul          2    4[COMRAM] unsigned int 
 19088 ;; Return value:  Size  Location     Type
 19089 ;;                  2    0[COMRAM] unsigned int 
 19090 ;; Registers used:
 19091 ;;		wreg, status,2, status,0, prodl, prodh
 19092 ;; Tracked objects:
 19093 ;;		On entry : 0/0
 19094 ;;		On exit  : 0/0
 19095 ;;		Unchanged: 0/0
 19096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19100 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19101 ;;Total ram usage:        6 bytes
 19102 ;; Hardware stack levels used:    1
 19103 ;; This function calls:
 19104 ;;		Nothing
 19105 ;; This function is called by:
 19106 ;;		_printSortTimer
 19107 ;;		_retrieveLog
 19108 ;;		i2_printf
 19109 ;; This function uses a non-reentrant model
 19110 ;;
 19111                           
 19112                           	psect	text78
 19113  0040A8                     __ptext78:
 19114                           	opt stack 0
 19115  0040A8                     i2___wmul:
 19116                           	opt stack 20
 19117                           
 19118                           ;incstack = 0
 19119  0040A8  5001               	movf	i2___wmul@multiplier,w,c
 19120  0040AA  0203               	mulwf	i2___wmul@multiplicand,c
 19121  0040AC  CFF3 F005          	movff	prodl,i2___wmul@product
 19122  0040B0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19123  0040B4  5001               	movf	i2___wmul@multiplier,w,c
 19124  0040B6  0204               	mulwf	i2___wmul@multiplicand+1,c
 19125  0040B8  50F3               	movf	prodl,w,c
 19126  0040BA  2606               	addwf	i2___wmul@product+1,f,c
 19127  0040BC  5002               	movf	i2___wmul@multiplier+1,w,c
 19128  0040BE  0203               	mulwf	i2___wmul@multiplicand,c
 19129  0040C0  50F3               	movf	prodl,w,c
 19130  0040C2  2606               	addwf	i2___wmul@product+1,f,c
 19131  0040C4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19132  0040C8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19133  0040CC  0012               	return	
 19134  0040CE                     __end_ofi2___wmul:
 19135                           	opt stack 0
 19136                           pclatu	equ	0xFFB
 19137                           pclath	equ	0xFFA
 19138                           tblptru	equ	0xFF8
 19139                           tblptrh	equ	0xFF7
 19140                           tblptrl	equ	0xFF6
 19141                           tablat	equ	0xFF5
 19142                           prodh	equ	0xFF4
 19143                           prodl	equ	0xFF3
 19144                           intcon	equ	0xFF2
 19145                           intcon2	equ	0xFF1
 19146                           intcon3	equ	0xFF0
 19147                           indf0	equ	0xFEF
 19148                           postinc0	equ	0xFEE
 19149                           fsr0h	equ	0xFEA
 19150                           fsr0l	equ	0xFE9
 19151                           wreg	equ	0xFE8
 19152                           postdec1	equ	0xFE5
 19153                           fsr1h	equ	0xFE2
 19154                           fsr1l	equ	0xFE1
 19155                           indf2	equ	0xFDF
 19156                           postinc2	equ	0xFDE
 19157                           postdec2	equ	0xFDD
 19158                           fsr2h	equ	0xFDA
 19159                           fsr2l	equ	0xFD9
 19160                           status	equ	0xFD8
 19161                           
 19162 ;; *************** function i2___lwmod *****************
 19163 ;; Defined at:
 19164 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19165 ;; Parameters:    Size  Location     Type
 19166 ;;  dividend        2    0[COMRAM] unsigned int 
 19167 ;;  divisor         2    2[COMRAM] unsigned int 
 19168 ;; Auto vars:     Size  Location     Type
 19169 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19170 ;; Return value:  Size  Location     Type
 19171 ;;                  2    0[COMRAM] unsigned int 
 19172 ;; Registers used:
 19173 ;;		wreg, status,2, status,0
 19174 ;; Tracked objects:
 19175 ;;		On entry : 0/0
 19176 ;;		On exit  : 0/0
 19177 ;;		Unchanged: 0/0
 19178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;Total ram usage:        5 bytes
 19184 ;; Hardware stack levels used:    1
 19185 ;; This function calls:
 19186 ;;		Nothing
 19187 ;; This function is called by:
 19188 ;;		_printSortTimer
 19189 ;;		i2_printf
 19190 ;; This function uses a non-reentrant model
 19191 ;;
 19192                           
 19193                           	psect	text79
 19194  003C7A                     __ptext79:
 19195                           	opt stack 0
 19196  003C7A                     i2___lwmod:
 19197                           	opt stack 20
 19198                           
 19199                           ;incstack = 0
 19200  003C7A  5003               	movf	i2___lwmod@divisor,w,c
 19201  003C7C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19202  003C7E  B4D8               	btfsc	status,2,c
 19203  003C80  D018               	goto	i2l1677
 19204  003C82  0E01               	movlw	1
 19205  003C84  6E05               	movwf	i2___lwmod@counter,c
 19206  003C86  D004               	goto	i2l5198
 19207  003C88                     i2l5196:
 19208  003C88  90D8               	bcf	status,0,c
 19209  003C8A  3603               	rlcf	i2___lwmod@divisor,f,c
 19210  003C8C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19211  003C8E  2A05               	incf	i2___lwmod@counter,f,c
 19212  003C90                     i2l5198:
 19213  003C90  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19214  003C92  D7FA               	goto	i2l5196
 19215  003C94                     i2l5200:
 19216  003C94  5003               	movf	i2___lwmod@divisor,w,c
 19217  003C96  5C01               	subwf	i2___lwmod@dividend,w,c
 19218  003C98  5004               	movf	i2___lwmod@divisor+1,w,c
 19219  003C9A  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19220  003C9C  A0D8               	btfss	status,0,c
 19221  003C9E  D004               	goto	i2l5204
 19222  003CA0  5003               	movf	i2___lwmod@divisor,w,c
 19223  003CA2  5E01               	subwf	i2___lwmod@dividend,f,c
 19224  003CA4  5004               	movf	i2___lwmod@divisor+1,w,c
 19225  003CA6  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19226  003CA8                     i2l5204:
 19227  003CA8  90D8               	bcf	status,0,c
 19228  003CAA  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19229  003CAC  3203               	rrcf	i2___lwmod@divisor,f,c
 19230  003CAE  2E05               	decfsz	i2___lwmod@counter,f,c
 19231  003CB0  D7F1               	goto	i2l5200
 19232  003CB2                     i2l1677:
 19233  003CB2  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19234  003CB6  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19235  003CBA  0012               	return		;funcret
 19236  003CBC                     __end_ofi2___lwmod:
 19237                           	opt stack 0
 19238                           pclatu	equ	0xFFB
 19239                           pclath	equ	0xFFA
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           intcon2	equ	0xFF1
 19248                           intcon3	equ	0xFF0
 19249                           indf0	equ	0xFEF
 19250                           postinc0	equ	0xFEE
 19251                           fsr0h	equ	0xFEA
 19252                           fsr0l	equ	0xFE9
 19253                           wreg	equ	0xFE8
 19254                           postdec1	equ	0xFE5
 19255                           fsr1h	equ	0xFE2
 19256                           fsr1l	equ	0xFE1
 19257                           indf2	equ	0xFDF
 19258                           postinc2	equ	0xFDE
 19259                           postdec2	equ	0xFDD
 19260                           fsr2h	equ	0xFDA
 19261                           fsr2l	equ	0xFD9
 19262                           status	equ	0xFD8
 19263                           
 19264 ;; *************** function i2___lwdiv *****************
 19265 ;; Defined at:
 19266 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19267 ;; Parameters:    Size  Location     Type
 19268 ;;  dividend        2    5[COMRAM] unsigned int 
 19269 ;;  divisor         2    7[COMRAM] unsigned int 
 19270 ;; Auto vars:     Size  Location     Type
 19271 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19272 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  2    5[COMRAM] unsigned int 
 19275 ;; Registers used:
 19276 ;;		wreg, status,2, status,0
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19285 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19286 ;;Total ram usage:        7 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; This function calls:
 19289 ;;		Nothing
 19290 ;; This function is called by:
 19291 ;;		_printSortTimer
 19292 ;;		i2_printf
 19293 ;; This function uses a non-reentrant model
 19294 ;;
 19295                           
 19296                           	psect	text80
 19297  003AFC                     __ptext80:
 19298                           	opt stack 0
 19299  003AFC                     i2___lwdiv:
 19300                           	opt stack 20
 19301                           
 19302                           ;incstack = 0
 19303  003AFC  0E00               	movlw	0
 19304  003AFE  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19305  003B00  0E00               	movlw	0
 19306  003B02  6E0A               	movwf	i2___lwdiv@quotient,c
 19307  003B04  5008               	movf	i2___lwdiv@divisor,w,c
 19308  003B06  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19309  003B08  B4D8               	btfsc	status,2,c
 19310  003B0A  D01C               	goto	i2l1667
 19311  003B0C  0E01               	movlw	1
 19312  003B0E  6E0C               	movwf	i2___lwdiv@counter,c
 19313  003B10  D004               	goto	i2l5178
 19314  003B12                     i2l5176:
 19315  003B12  90D8               	bcf	status,0,c
 19316  003B14  3608               	rlcf	i2___lwdiv@divisor,f,c
 19317  003B16  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19318  003B18  2A0C               	incf	i2___lwdiv@counter,f,c
 19319  003B1A                     i2l5178:
 19320  003B1A  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19321  003B1C  D7FA               	goto	i2l5176
 19322  003B1E                     i2l5180:
 19323  003B1E  90D8               	bcf	status,0,c
 19324  003B20  360A               	rlcf	i2___lwdiv@quotient,f,c
 19325  003B22  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 19326  003B24  5008               	movf	i2___lwdiv@divisor,w,c
 19327  003B26  5C06               	subwf	i2___lwdiv@dividend,w,c
 19328  003B28  5009               	movf	i2___lwdiv@divisor+1,w,c
 19329  003B2A  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 19330  003B2C  A0D8               	btfss	status,0,c
 19331  003B2E  D005               	goto	i2l5188
 19332  003B30  5008               	movf	i2___lwdiv@divisor,w,c
 19333  003B32  5E06               	subwf	i2___lwdiv@dividend,f,c
 19334  003B34  5009               	movf	i2___lwdiv@divisor+1,w,c
 19335  003B36  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 19336  003B38  800A               	bsf	i2___lwdiv@quotient,0,c
 19337  003B3A                     i2l5188:
 19338  003B3A  90D8               	bcf	status,0,c
 19339  003B3C  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 19340  003B3E  3208               	rrcf	i2___lwdiv@divisor,f,c
 19341  003B40  2E0C               	decfsz	i2___lwdiv@counter,f,c
 19342  003B42  D7ED               	goto	i2l5180
 19343  003B44                     i2l1667:
 19344  003B44  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 19345  003B48  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 19346  003B4C  0012               	return		;funcret
 19347  003B4E                     __end_ofi2___lwdiv:
 19348                           	opt stack 0
 19349                           pclatu	equ	0xFFB
 19350                           pclath	equ	0xFFA
 19351                           tblptru	equ	0xFF8
 19352                           tblptrh	equ	0xFF7
 19353                           tblptrl	equ	0xFF6
 19354                           tablat	equ	0xFF5
 19355                           prodh	equ	0xFF4
 19356                           prodl	equ	0xFF3
 19357                           intcon	equ	0xFF2
 19358                           intcon2	equ	0xFF1
 19359                           intcon3	equ	0xFF0
 19360                           indf0	equ	0xFEF
 19361                           postinc0	equ	0xFEE
 19362                           fsr0h	equ	0xFEA
 19363                           fsr0l	equ	0xFE9
 19364                           wreg	equ	0xFE8
 19365                           postdec1	equ	0xFE5
 19366                           fsr1h	equ	0xFE2
 19367                           fsr1l	equ	0xFE1
 19368                           indf2	equ	0xFDF
 19369                           postinc2	equ	0xFDE
 19370                           postdec2	equ	0xFDD
 19371                           fsr2h	equ	0xFDA
 19372                           fsr2l	equ	0xFD9
 19373                           status	equ	0xFD8
 19374                           
 19375 ;; *************** function i2_lcdInst *****************
 19376 ;; Defined at:
 19377 ;;		line 15 in file "lcd.c"
 19378 ;; Parameters:    Size  Location     Type
 19379 ;;  data            1    wreg     unsigned char 
 19380 ;; Auto vars:     Size  Location     Type
 19381 ;;  data            1    2[COMRAM] unsigned char 
 19382 ;; Return value:  Size  Location     Type
 19383 ;;                  1    wreg      void 
 19384 ;; Registers used:
 19385 ;;		wreg, status,2, status,0, cstack
 19386 ;; Tracked objects:
 19387 ;;		On entry : 0/0
 19388 ;;		On exit  : 0/0
 19389 ;;		Unchanged: 0/0
 19390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19395 ;;Total ram usage:        1 bytes
 19396 ;; Hardware stack levels used:    1
 19397 ;; Hardware stack levels required when called:    1
 19398 ;; This function calls:
 19399 ;;		i2_lcdNibble
 19400 ;; This function is called by:
 19401 ;;		_change_state_to_menu_11
 19402 ;;		_change_state_to_menu_23
 19403 ;;		_change_state_to_logs_11
 19404 ;;		_change_state_to_logs_12
 19405 ;;		_change_state_to_logs_22
 19406 ;;		_change_state_to_logs_23
 19407 ;;		_change_state_to_logs_33
 19408 ;;		_change_state_to_logs_34
 19409 ;;		_printSortTimer
 19410 ;;		i2_change_state_to_menu_start
 19411 ;;		i2_change_state_to_menu_12
 19412 ;;		i2_change_state_to_menu_22
 19413 ;;		i2_printRTC
 19414 ;; This function uses a non-reentrant model
 19415 ;;
 19416                           
 19417                           	psect	text81
 19418  004234                     __ptext81:
 19419                           	opt stack 0
 19420  004234                     i2_lcdInst:
 19421                           	opt stack 19
 19422                           
 19423                           ;incstack = 0
 19424                           ;i2lcdInst@data stored from wreg
 19425  004234  6E03               	movwf	i2lcdInst@data,c
 19426                           
 19427                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19428  004236  948C               	bcf	3980,2,c	;volatile
 19429                           
 19430                           ;lcd.c: 17: lcdNibble(data);
 19431  004238  5003               	movf	i2lcdInst@data,w,c
 19432  00423A  EC53  F01D         	call	i2_lcdNibble
 19433  00423E  0012               	return		;funcret
 19434  004240                     __end_ofi2_lcdInst:
 19435                           	opt stack 0
 19436                           pclatu	equ	0xFFB
 19437                           pclath	equ	0xFFA
 19438                           tblptru	equ	0xFF8
 19439                           tblptrh	equ	0xFF7
 19440                           tblptrl	equ	0xFF6
 19441                           tablat	equ	0xFF5
 19442                           prodh	equ	0xFF4
 19443                           prodl	equ	0xFF3
 19444                           intcon	equ	0xFF2
 19445                           intcon2	equ	0xFF1
 19446                           intcon3	equ	0xFF0
 19447                           indf0	equ	0xFEF
 19448                           postinc0	equ	0xFEE
 19449                           fsr0h	equ	0xFEA
 19450                           fsr0l	equ	0xFE9
 19451                           wreg	equ	0xFE8
 19452                           postdec1	equ	0xFE5
 19453                           fsr1h	equ	0xFE2
 19454                           fsr1l	equ	0xFE1
 19455                           indf2	equ	0xFDF
 19456                           postinc2	equ	0xFDE
 19457                           postdec2	equ	0xFDD
 19458                           fsr2h	equ	0xFDA
 19459                           fsr2l	equ	0xFD9
 19460                           status	equ	0xFD8
 19461                           
 19462 ;; *************** function i2_lcdNibble *****************
 19463 ;; Defined at:
 19464 ;;		line 25 in file "lcd.c"
 19465 ;; Parameters:    Size  Location     Type
 19466 ;;  data            1    wreg     unsigned char 
 19467 ;; Auto vars:     Size  Location     Type
 19468 ;;  data            1    1[COMRAM] unsigned char 
 19469 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19470 ;; Return value:  Size  Location     Type
 19471 ;;                  1    wreg      void 
 19472 ;; Registers used:
 19473 ;;		wreg, status,2, status,0
 19474 ;; Tracked objects:
 19475 ;;		On entry : 0/0
 19476 ;;		On exit  : 0/0
 19477 ;;		Unchanged: 0/0
 19478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;Total ram usage:        2 bytes
 19484 ;; Hardware stack levels used:    1
 19485 ;; This function calls:
 19486 ;;		Nothing
 19487 ;; This function is called by:
 19488 ;;		i2_lcdInst
 19489 ;;		i2_putch
 19490 ;; This function uses a non-reentrant model
 19491 ;;
 19492                           
 19493                           	psect	text82
 19494  003AA6                     __ptext82:
 19495                           	opt stack 0
 19496  003AA6                     i2_lcdNibble:
 19497                           	opt stack 19
 19498                           
 19499                           ;incstack = 0
 19500                           ;i2lcdNibble@data stored from wreg
 19501  003AA6  6E02               	movwf	i2lcdNibble@data,c
 19502                           
 19503                           ;lcd.c: 27: char temp = data & 0xF0;
 19504  003AA8  5002               	movf	i2lcdNibble@data,w,c
 19505  003AAA  0BF0               	andlw	240
 19506  003AAC  6E01               	movwf	i2lcdNibble@temp,c
 19507                           
 19508                           ;lcd.c: 28: LATD = LATD & 0x0F;
 19509  003AAE  508C               	movf	3980,w,c	;volatile
 19510  003AB0  0B0F               	andlw	15
 19511  003AB2  6E8C               	movwf	3980,c	;volatile
 19512                           
 19513                           ;lcd.c: 29: LATD = temp | LATD;
 19514  003AB4  5001               	movf	i2lcdNibble@temp,w,c
 19515  003AB6  108C               	iorwf	3980,w,c	;volatile
 19516  003AB8  6E8C               	movwf	3980,c	;volatile
 19517                           
 19518                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 19519  003ABA  868C               	bsf	3980,3,c	;volatile
 19520                           
 19521                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19522  003ABC  0E42               	movlw	66
 19523  003ABE                     i2u780_47:
 19524  003ABE  2EE8               	decfsz	wreg,f,c
 19525  003AC0  D7FE               	bra	i2u780_47
 19526  003AC2  D000               	nop2	
 19527                           
 19528                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 19529  003AC4  968C               	bcf	3980,3,c	;volatile
 19530                           
 19531                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19532  003AC6  0E42               	movlw	66
 19533  003AC8                     i2u781_47:
 19534  003AC8  2EE8               	decfsz	wreg,f,c
 19535  003ACA  D7FE               	bra	i2u781_47
 19536  003ACC  D000               	nop2	
 19537                           
 19538                           ;lcd.c: 36: data = data << 4;
 19539  003ACE  3802               	swapf	i2lcdNibble@data,w,c
 19540  003AD0  0BF0               	andlw	240
 19541  003AD2  6E02               	movwf	i2lcdNibble@data,c
 19542                           
 19543                           ;lcd.c: 38: temp = data & 0xF0;
 19544  003AD4  5002               	movf	i2lcdNibble@data,w,c
 19545  003AD6  0BF0               	andlw	240
 19546  003AD8  6E01               	movwf	i2lcdNibble@temp,c
 19547                           
 19548                           ;lcd.c: 39: LATD = LATD & 0x0F;
 19549  003ADA  508C               	movf	3980,w,c	;volatile
 19550  003ADC  0B0F               	andlw	15
 19551  003ADE  6E8C               	movwf	3980,c	;volatile
 19552                           
 19553                           ;lcd.c: 40: LATD = temp | LATD;
 19554  003AE0  5001               	movf	i2lcdNibble@temp,w,c
 19555  003AE2  108C               	iorwf	3980,w,c	;volatile
 19556  003AE4  6E8C               	movwf	3980,c	;volatile
 19557                           
 19558                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 19559  003AE6  868C               	bsf	3980,3,c	;volatile
 19560                           
 19561                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19562  003AE8  0E42               	movlw	66
 19563  003AEA                     i2u782_47:
 19564  003AEA  2EE8               	decfsz	wreg,f,c
 19565  003AEC  D7FE               	bra	i2u782_47
 19566  003AEE  D000               	nop2	
 19567                           
 19568                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 19569  003AF0  968C               	bcf	3980,3,c	;volatile
 19570                           
 19571                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19572  003AF2  0E42               	movlw	66
 19573  003AF4                     i2u783_47:
 19574  003AF4  2EE8               	decfsz	wreg,f,c
 19575  003AF6  D7FE               	bra	i2u783_47
 19576  003AF8  D000               	nop2	
 19577  003AFA  0012               	return		;funcret
 19578  003AFC                     __end_ofi2_lcdNibble:
 19579                           	opt stack 0
 19580                           pclatu	equ	0xFFB
 19581                           pclath	equ	0xFFA
 19582                           tblptru	equ	0xFF8
 19583                           tblptrh	equ	0xFF7
 19584                           tblptrl	equ	0xFF6
 19585                           tablat	equ	0xFF5
 19586                           prodh	equ	0xFF4
 19587                           prodl	equ	0xFF3
 19588                           intcon	equ	0xFF2
 19589                           intcon2	equ	0xFF1
 19590                           intcon3	equ	0xFF0
 19591                           indf0	equ	0xFEF
 19592                           postinc0	equ	0xFEE
 19593                           fsr0h	equ	0xFEA
 19594                           fsr0l	equ	0xFE9
 19595                           wreg	equ	0xFE8
 19596                           postdec1	equ	0xFE5
 19597                           fsr1h	equ	0xFE2
 19598                           fsr1l	equ	0xFE1
 19599                           indf2	equ	0xFDF
 19600                           postinc2	equ	0xFDE
 19601                           postdec2	equ	0xFDD
 19602                           fsr2h	equ	0xFDA
 19603                           fsr2l	equ	0xFD9
 19604                           status	equ	0xFD8
 19605                           
 19606 ;; *************** function i2_getRTC *****************
 19607 ;; Defined at:
 19608 ;;		line 44 in file "RTC.c"
 19609 ;; Parameters:    Size  Location     Type
 19610 ;;		None
 19611 ;; Auto vars:     Size  Location     Type
 19612 ;;  getRTC          2    3[COMRAM] int 
 19613 ;; Return value:  Size  Location     Type
 19614 ;;                  1    wreg      void 
 19615 ;; Registers used:
 19616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19617 ;; Tracked objects:
 19618 ;;		On entry : 0/0
 19619 ;;		On exit  : 0/0
 19620 ;;		Unchanged: 0/0
 19621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19625 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19626 ;;Total ram usage:        2 bytes
 19627 ;; Hardware stack levels used:    1
 19628 ;; Hardware stack levels required when called:    2
 19629 ;; This function calls:
 19630 ;;		i2_I2C_Master_Read
 19631 ;;		i2_I2C_Master_Start
 19632 ;;		i2_I2C_Master_Stop
 19633 ;;		i2_I2C_Master_Write
 19634 ;; This function is called by:
 19635 ;;		_printSortTimer
 19636 ;;		i2_printRTC
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text83
 19641  003794                     __ptext83:
 19642                           	opt stack 0
 19643  003794                     i2_getRTC:
 19644                           	opt stack 18
 19645                           
 19646                           ;RTC.c: 48: I2C_Master_Start();
 19647                           
 19648                           ;incstack = 0
 19649  003794  EC3A  F021         	call	i2_I2C_Master_Start	;wreg free
 19650                           
 19651                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19652  003798  0E00               	movlw	0
 19653  00379A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19654  00379C  0ED0               	movlw	208
 19655  00379E  6E02               	movwf	i2I2C_Master_Write@d,c
 19656  0037A0  EC25  F021         	call	i2_I2C_Master_Write	;wreg free
 19657                           
 19658                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19659  0037A4  0E00               	movlw	0
 19660  0037A6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19661  0037A8  0E00               	movlw	0
 19662  0037AA  6E02               	movwf	i2I2C_Master_Write@d,c
 19663  0037AC  EC25  F021         	call	i2_I2C_Master_Write	;wreg free
 19664                           
 19665                           ;RTC.c: 51: I2C_Master_Stop();
 19666  0037B0  EC36  F021         	call	i2_I2C_Master_Stop	;wreg free
 19667                           
 19668                           ;RTC.c: 54: I2C_Master_Start();
 19669  0037B4  EC3A  F021         	call	i2_I2C_Master_Start	;wreg free
 19670                           
 19671                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19672  0037B8  0E00               	movlw	0
 19673  0037BA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19674  0037BC  0ED1               	movlw	209
 19675  0037BE  6E02               	movwf	i2I2C_Master_Write@d,c
 19676  0037C0  EC25  F021         	call	i2_I2C_Master_Write	;wreg free
 19677                           
 19678                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19679  0037C4  0E00               	movlw	0
 19680  0037C6  6E05               	movwf	i2getRTC@i+1,c
 19681  0037C8  0E00               	movlw	0
 19682  0037CA  6E04               	movwf	i2getRTC@i,c
 19683  0037CC                     i2l5432:
 19684  0037CC  BE05               	btfsc	i2getRTC@i+1,7,c
 19685  0037CE  D006               	goto	i2l5436
 19686  0037D0  5005               	movf	i2getRTC@i+1,w,c
 19687  0037D2  E111               	bnz	i2l5442
 19688  0037D4  0E06               	movlw	6
 19689  0037D6  5C04               	subwf	i2getRTC@i,w,c
 19690  0037D8  B0D8               	btfsc	status,0,c
 19691  0037DA  D00D               	goto	i2l5442
 19692  0037DC                     i2l5436:
 19693                           
 19694                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19695  0037DC  0E24               	movlw	low _time
 19696  0037DE  2404               	addwf	i2getRTC@i,w,c
 19697  0037E0  6ED9               	movwf	fsr2l,c
 19698  0037E2  0E01               	movlw	high _time
 19699  0037E4  2005               	addwfc	i2getRTC@i+1,w,c
 19700  0037E6  6EDA               	movwf	fsr2h,c
 19701  0037E8  0E01               	movlw	1
 19702  0037EA  EC67  F020         	call	i2_I2C_Master_Read
 19703  0037EE  6EDF               	movwf	indf2,c
 19704  0037F0  4A04               	infsnz	i2getRTC@i,f,c
 19705  0037F2  2A05               	incf	i2getRTC@i+1,f,c
 19706  0037F4  D7EB               	goto	i2l5432
 19707  0037F6                     i2l5442:
 19708                           
 19709                           ;RTC.c: 58: }
 19710                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19711  0037F6  0E00               	movlw	0
 19712  0037F8  EC67  F020         	call	i2_I2C_Master_Read
 19713  0037FC  0101               	movlb	1	; () banked
 19714  0037FE  6F2A               	movwf	(_time+6)& (0+255),b
 19715                           
 19716                           ;RTC.c: 60: I2C_Master_Stop();
 19717  003800  EC36  F021         	call	i2_I2C_Master_Stop	;wreg free
 19718  003804  0012               	return		;funcret
 19719  003806                     __end_ofi2_getRTC:
 19720                           	opt stack 0
 19721                           pclatu	equ	0xFFB
 19722                           pclath	equ	0xFFA
 19723                           tblptru	equ	0xFF8
 19724                           tblptrh	equ	0xFF7
 19725                           tblptrl	equ	0xFF6
 19726                           tablat	equ	0xFF5
 19727                           prodh	equ	0xFF4
 19728                           prodl	equ	0xFF3
 19729                           intcon	equ	0xFF2
 19730                           intcon2	equ	0xFF1
 19731                           intcon3	equ	0xFF0
 19732                           indf0	equ	0xFEF
 19733                           postinc0	equ	0xFEE
 19734                           fsr0h	equ	0xFEA
 19735                           fsr0l	equ	0xFE9
 19736                           wreg	equ	0xFE8
 19737                           postdec1	equ	0xFE5
 19738                           fsr1h	equ	0xFE2
 19739                           fsr1l	equ	0xFE1
 19740                           indf2	equ	0xFDF
 19741                           postinc2	equ	0xFDE
 19742                           postdec2	equ	0xFDD
 19743                           fsr2h	equ	0xFDA
 19744                           fsr2l	equ	0xFD9
 19745                           status	equ	0xFD8
 19746                           
 19747 ;; *************** function i2_I2C_Master_Write *****************
 19748 ;; Defined at:
 19749 ;;		line 49 in file "I2C.c"
 19750 ;; Parameters:    Size  Location     Type
 19751 ;;  d               2    1[COMRAM] unsigned int 
 19752 ;; Auto vars:     Size  Location     Type
 19753 ;;		None
 19754 ;; Return value:  Size  Location     Type
 19755 ;;                  1    wreg      void 
 19756 ;; Registers used:
 19757 ;;		wreg, status,2, status,0, cstack
 19758 ;; Tracked objects:
 19759 ;;		On entry : 0/0
 19760 ;;		On exit  : 0/0
 19761 ;;		Unchanged: 0/0
 19762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19763 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19767 ;;Total ram usage:        2 bytes
 19768 ;; Hardware stack levels used:    1
 19769 ;; Hardware stack levels required when called:    1
 19770 ;; This function calls:
 19771 ;;		i2_I2C_Master_Wait
 19772 ;; This function is called by:
 19773 ;;		i2_getRTC
 19774 ;; This function uses a non-reentrant model
 19775 ;;
 19776                           
 19777                           	psect	text84
 19778  00424A                     __ptext84:
 19779                           	opt stack 0
 19780  00424A                     i2_I2C_Master_Write:
 19781                           	opt stack 18
 19782                           
 19783                           ;I2C.c: 51: I2C_Master_Wait();
 19784                           
 19785                           ;incstack = 0
 19786  00424A  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 19787                           
 19788                           ;I2C.c: 52: SSPBUF = d;
 19789  00424E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19790  004252  0012               	return		;funcret
 19791  004254                     __end_ofi2_I2C_Master_Write:
 19792                           	opt stack 0
 19793                           pclatu	equ	0xFFB
 19794                           pclath	equ	0xFFA
 19795                           tblptru	equ	0xFF8
 19796                           tblptrh	equ	0xFF7
 19797                           tblptrl	equ	0xFF6
 19798                           tablat	equ	0xFF5
 19799                           prodh	equ	0xFF4
 19800                           prodl	equ	0xFF3
 19801                           intcon	equ	0xFF2
 19802                           intcon2	equ	0xFF1
 19803                           intcon3	equ	0xFF0
 19804                           indf0	equ	0xFEF
 19805                           postinc0	equ	0xFEE
 19806                           fsr0h	equ	0xFEA
 19807                           fsr0l	equ	0xFE9
 19808                           wreg	equ	0xFE8
 19809                           postdec1	equ	0xFE5
 19810                           fsr1h	equ	0xFE2
 19811                           fsr1l	equ	0xFE1
 19812                           indf2	equ	0xFDF
 19813                           postinc2	equ	0xFDE
 19814                           postdec2	equ	0xFDD
 19815                           fsr2h	equ	0xFDA
 19816                           fsr2l	equ	0xFD9
 19817                           status	equ	0xFD8
 19818                           
 19819 ;; *************** function i2_I2C_Master_Stop *****************
 19820 ;; Defined at:
 19821 ;;		line 43 in file "I2C.c"
 19822 ;; Parameters:    Size  Location     Type
 19823 ;;		None
 19824 ;; Auto vars:     Size  Location     Type
 19825 ;;		None
 19826 ;; Return value:  Size  Location     Type
 19827 ;;                  1    wreg      void 
 19828 ;; Registers used:
 19829 ;;		wreg, status,2, status,0, cstack
 19830 ;; Tracked objects:
 19831 ;;		On entry : 0/0
 19832 ;;		On exit  : 0/0
 19833 ;;		Unchanged: 0/0
 19834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19839 ;;Total ram usage:        0 bytes
 19840 ;; Hardware stack levels used:    1
 19841 ;; Hardware stack levels required when called:    1
 19842 ;; This function calls:
 19843 ;;		i2_I2C_Master_Wait
 19844 ;; This function is called by:
 19845 ;;		i2_getRTC
 19846 ;; This function uses a non-reentrant model
 19847 ;;
 19848                           
 19849                           	psect	text85
 19850  00426C                     __ptext85:
 19851                           	opt stack 0
 19852  00426C                     i2_I2C_Master_Stop:
 19853                           	opt stack 18
 19854                           
 19855                           ;I2C.c: 45: I2C_Master_Wait();
 19856                           
 19857                           ;incstack = 0
 19858  00426C  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 19859                           
 19860                           ;I2C.c: 46: PEN = 1;
 19861  004270  84C5               	bsf	4037,2,c	;volatile
 19862  004272  0012               	return		;funcret
 19863  004274                     __end_ofi2_I2C_Master_Stop:
 19864                           	opt stack 0
 19865                           pclatu	equ	0xFFB
 19866                           pclath	equ	0xFFA
 19867                           tblptru	equ	0xFF8
 19868                           tblptrh	equ	0xFF7
 19869                           tblptrl	equ	0xFF6
 19870                           tablat	equ	0xFF5
 19871                           prodh	equ	0xFF4
 19872                           prodl	equ	0xFF3
 19873                           intcon	equ	0xFF2
 19874                           intcon2	equ	0xFF1
 19875                           intcon3	equ	0xFF0
 19876                           indf0	equ	0xFEF
 19877                           postinc0	equ	0xFEE
 19878                           fsr0h	equ	0xFEA
 19879                           fsr0l	equ	0xFE9
 19880                           wreg	equ	0xFE8
 19881                           postdec1	equ	0xFE5
 19882                           fsr1h	equ	0xFE2
 19883                           fsr1l	equ	0xFE1
 19884                           indf2	equ	0xFDF
 19885                           postinc2	equ	0xFDE
 19886                           postdec2	equ	0xFDD
 19887                           fsr2h	equ	0xFDA
 19888                           fsr2l	equ	0xFD9
 19889                           status	equ	0xFD8
 19890                           
 19891 ;; *************** function i2_I2C_Master_Start *****************
 19892 ;; Defined at:
 19893 ;;		line 31 in file "I2C.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;		None
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;		None
 19898 ;; Return value:  Size  Location     Type
 19899 ;;                  1    wreg      void 
 19900 ;; Registers used:
 19901 ;;		wreg, status,2, status,0, cstack
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;Total ram usage:        0 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; Hardware stack levels required when called:    1
 19914 ;; This function calls:
 19915 ;;		i2_I2C_Master_Wait
 19916 ;; This function is called by:
 19917 ;;		i2_getRTC
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text86
 19922  004274                     __ptext86:
 19923                           	opt stack 0
 19924  004274                     i2_I2C_Master_Start:
 19925                           	opt stack 18
 19926                           
 19927                           ;I2C.c: 33: I2C_Master_Wait();
 19928                           
 19929                           ;incstack = 0
 19930  004274  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 19931                           
 19932                           ;I2C.c: 34: SEN = 1;
 19933  004278  80C5               	bsf	4037,0,c	;volatile
 19934  00427A  0012               	return		;funcret
 19935  00427C                     __end_ofi2_I2C_Master_Start:
 19936                           	opt stack 0
 19937                           pclatu	equ	0xFFB
 19938                           pclath	equ	0xFFA
 19939                           tblptru	equ	0xFF8
 19940                           tblptrh	equ	0xFF7
 19941                           tblptrl	equ	0xFF6
 19942                           tablat	equ	0xFF5
 19943                           prodh	equ	0xFF4
 19944                           prodl	equ	0xFF3
 19945                           intcon	equ	0xFF2
 19946                           intcon2	equ	0xFF1
 19947                           intcon3	equ	0xFF0
 19948                           indf0	equ	0xFEF
 19949                           postinc0	equ	0xFEE
 19950                           fsr0h	equ	0xFEA
 19951                           fsr0l	equ	0xFE9
 19952                           wreg	equ	0xFE8
 19953                           postdec1	equ	0xFE5
 19954                           fsr1h	equ	0xFE2
 19955                           fsr1l	equ	0xFE1
 19956                           indf2	equ	0xFDF
 19957                           postinc2	equ	0xFDE
 19958                           postdec2	equ	0xFDD
 19959                           fsr2h	equ	0xFDA
 19960                           fsr2l	equ	0xFD9
 19961                           status	equ	0xFD8
 19962                           
 19963 ;; *************** function i2_I2C_Master_Read *****************
 19964 ;; Defined at:
 19965 ;;		line 55 in file "I2C.c"
 19966 ;; Parameters:    Size  Location     Type
 19967 ;;  a               1    wreg     unsigned char 
 19968 ;; Auto vars:     Size  Location     Type
 19969 ;;  a               1    1[COMRAM] unsigned char 
 19970 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19971 ;; Return value:  Size  Location     Type
 19972 ;;                  1    wreg      unsigned char 
 19973 ;; Registers used:
 19974 ;;		wreg, status,2, status,0, cstack
 19975 ;; Tracked objects:
 19976 ;;		On entry : 0/0
 19977 ;;		On exit  : 0/0
 19978 ;;		Unchanged: 0/0
 19979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19984 ;;Total ram usage:        2 bytes
 19985 ;; Hardware stack levels used:    1
 19986 ;; Hardware stack levels required when called:    1
 19987 ;; This function calls:
 19988 ;;		i2_I2C_Master_Wait
 19989 ;; This function is called by:
 19990 ;;		i2_getRTC
 19991 ;; This function uses a non-reentrant model
 19992 ;;
 19993                           
 19994                           	psect	text87
 19995  0040CE                     __ptext87:
 19996                           	opt stack 0
 19997  0040CE                     i2_I2C_Master_Read:
 19998                           	opt stack 18
 19999                           
 20000                           ;incstack = 0
 20001                           ;i2I2C_Master_Read@a stored from wreg
 20002  0040CE  6E02               	movwf	i2I2C_Master_Read@a,c
 20003                           
 20004                           ;I2C.c: 57: unsigned char temp;
 20005                           ;I2C.c: 58: I2C_Master_Wait();
 20006  0040D0  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 20007                           
 20008                           ;I2C.c: 59: RCEN = 1;
 20009  0040D4  86C5               	bsf	4037,3,c	;volatile
 20010                           
 20011                           ;I2C.c: 60: I2C_Master_Wait();
 20012  0040D6  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 20013                           
 20014                           ;I2C.c: 61: temp = SSPBUF;
 20015  0040DA  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20016                           
 20017                           ;I2C.c: 62: I2C_Master_Wait();
 20018  0040DE  ECFB  F020         	call	i2_I2C_Master_Wait	;wreg free
 20019                           
 20020                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20021  0040E2  5002               	movf	i2I2C_Master_Read@a,w,c
 20022  0040E4  A4D8               	btfss	status,2,c
 20023  0040E6  D002               	goto	i2u357_40
 20024  0040E8  8AC5               	bsf	4037,5,c	;volatile
 20025  0040EA  D001               	goto	i2l5142
 20026  0040EC                     i2u357_40:
 20027  0040EC  9AC5               	bcf	4037,5,c	;volatile
 20028  0040EE                     i2l5142:
 20029                           
 20030                           ;I2C.c: 64: ACKEN = 1;
 20031  0040EE  88C5               	bsf	4037,4,c	;volatile
 20032                           
 20033                           ;I2C.c: 65: return temp;
 20034  0040F0  5003               	movf	i2I2C_Master_Read@temp,w,c
 20035  0040F2  0012               	return	
 20036  0040F4                     __end_ofi2_I2C_Master_Read:
 20037                           	opt stack 0
 20038                           pclatu	equ	0xFFB
 20039                           pclath	equ	0xFFA
 20040                           tblptru	equ	0xFF8
 20041                           tblptrh	equ	0xFF7
 20042                           tblptrl	equ	0xFF6
 20043                           tablat	equ	0xFF5
 20044                           prodh	equ	0xFF4
 20045                           prodl	equ	0xFF3
 20046                           intcon	equ	0xFF2
 20047                           intcon2	equ	0xFF1
 20048                           intcon3	equ	0xFF0
 20049                           indf0	equ	0xFEF
 20050                           postinc0	equ	0xFEE
 20051                           fsr0h	equ	0xFEA
 20052                           fsr0l	equ	0xFE9
 20053                           wreg	equ	0xFE8
 20054                           postdec1	equ	0xFE5
 20055                           fsr1h	equ	0xFE2
 20056                           fsr1l	equ	0xFE1
 20057                           indf2	equ	0xFDF
 20058                           postinc2	equ	0xFDE
 20059                           postdec2	equ	0xFDD
 20060                           fsr2h	equ	0xFDA
 20061                           fsr2l	equ	0xFD9
 20062                           status	equ	0xFD8
 20063                           
 20064 ;; *************** function i2_I2C_Master_Wait *****************
 20065 ;; Defined at:
 20066 ;;		line 26 in file "I2C.c"
 20067 ;; Parameters:    Size  Location     Type
 20068 ;;		None
 20069 ;; Auto vars:     Size  Location     Type
 20070 ;;		None
 20071 ;; Return value:  Size  Location     Type
 20072 ;;                  1    wreg      void 
 20073 ;; Registers used:
 20074 ;;		wreg, status,2, status,0
 20075 ;; Tracked objects:
 20076 ;;		On entry : 0/0
 20077 ;;		On exit  : 0/0
 20078 ;;		Unchanged: 0/0
 20079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20084 ;;Total ram usage:        1 bytes
 20085 ;; Hardware stack levels used:    1
 20086 ;; This function calls:
 20087 ;;		Nothing
 20088 ;; This function is called by:
 20089 ;;		i2_I2C_Master_Start
 20090 ;;		i2_I2C_Master_Stop
 20091 ;;		i2_I2C_Master_Write
 20092 ;;		i2_I2C_Master_Read
 20093 ;; This function uses a non-reentrant model
 20094 ;;
 20095                           
 20096                           	psect	text88
 20097  0041F6                     __ptext88:
 20098                           	opt stack 0
 20099  0041F6                     i2_I2C_Master_Wait:
 20100                           	opt stack 18
 20101  0041F6                     i2l66:
 20102  0041F6  B4C7               	btfsc	4039,2,c	;volatile
 20103  0041F8  D7FE               	goto	i2l66
 20104  0041FA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20105  0041FE  0E1F               	movlw	31
 20106  004200  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20107  004202  B4D8               	btfsc	status,2,c
 20108  004204  0012               	return	
 20109  004206  D7F7               	goto	i2l66
 20110  004208                     __end_ofi2_I2C_Master_Wait:
 20111                           	opt stack 0
 20112                           pclatu	equ	0xFFB
 20113                           pclath	equ	0xFFA
 20114                           tblptru	equ	0xFF8
 20115                           tblptrh	equ	0xFF7
 20116                           tblptrl	equ	0xFF6
 20117                           tablat	equ	0xFF5
 20118                           prodh	equ	0xFF4
 20119                           prodl	equ	0xFF3
 20120                           intcon	equ	0xFF2
 20121                           intcon2	equ	0xFF1
 20122                           intcon3	equ	0xFF0
 20123                           indf0	equ	0xFEF
 20124                           postinc0	equ	0xFEE
 20125                           fsr0h	equ	0xFEA
 20126                           fsr0l	equ	0xFE9
 20127                           wreg	equ	0xFE8
 20128                           postdec1	equ	0xFE5
 20129                           fsr1h	equ	0xFE2
 20130                           fsr1l	equ	0xFE1
 20131                           indf2	equ	0xFDF
 20132                           postinc2	equ	0xFDE
 20133                           postdec2	equ	0xFDD
 20134                           fsr2h	equ	0xFDA
 20135                           fsr2l	equ	0xFD9
 20136                           status	equ	0xFD8
 20137                           pclatu	equ	0xFFB
 20138                           pclath	equ	0xFFA
 20139                           tblptru	equ	0xFF8
 20140                           tblptrh	equ	0xFF7
 20141                           tblptrl	equ	0xFF6
 20142                           tablat	equ	0xFF5
 20143                           prodh	equ	0xFF4
 20144                           prodl	equ	0xFF3
 20145                           intcon	equ	0xFF2
 20146                           intcon2	equ	0xFF1
 20147                           intcon3	equ	0xFF0
 20148                           indf0	equ	0xFEF
 20149                           postinc0	equ	0xFEE
 20150                           fsr0h	equ	0xFEA
 20151                           fsr0l	equ	0xFE9
 20152                           wreg	equ	0xFE8
 20153                           postdec1	equ	0xFE5
 20154                           fsr1h	equ	0xFE2
 20155                           fsr1l	equ	0xFE1
 20156                           indf2	equ	0xFDF
 20157                           postinc2	equ	0xFDE
 20158                           postdec2	equ	0xFDD
 20159                           fsr2h	equ	0xFDA
 20160                           fsr2l	equ	0xFD9
 20161                           status	equ	0xFD8
 20162                           
 20163                           	psect	rparam
 20164  0000                     pclatu	equ	0xFFB
 20165                           pclath	equ	0xFFA
 20166                           tblptru	equ	0xFF8
 20167                           tblptrh	equ	0xFF7
 20168                           tblptrl	equ	0xFF6
 20169                           tablat	equ	0xFF5
 20170                           prodh	equ	0xFF4
 20171                           prodl	equ	0xFF3
 20172                           intcon	equ	0xFF2
 20173                           intcon2	equ	0xFF1
 20174                           intcon3	equ	0xFF0
 20175                           indf0	equ	0xFEF
 20176                           postinc0	equ	0xFEE
 20177                           fsr0h	equ	0xFEA
 20178                           fsr0l	equ	0xFE9
 20179                           wreg	equ	0xFE8
 20180                           postdec1	equ	0xFE5
 20181                           fsr1h	equ	0xFE2
 20182                           fsr1l	equ	0xFE1
 20183                           indf2	equ	0xFDF
 20184                           postinc2	equ	0xFDE
 20185                           postdec2	equ	0xFDD
 20186                           fsr2h	equ	0xFDA
 20187                           fsr2l	equ	0xFD9
 20188                           status	equ	0xFD8
 20189                           
 20190                           	psect	temp
 20191  00007E                     btemp:
 20192                           	opt stack 0
 20193  00007E                     	ds	1
 20194  0000                     int$flags	set	btemp
 20195                           pclatu	equ	0xFFB
 20196                           pclath	equ	0xFFA
 20197                           tblptru	equ	0xFF8
 20198                           tblptrh	equ	0xFF7
 20199                           tblptrl	equ	0xFF6
 20200                           tablat	equ	0xFF5
 20201                           prodh	equ	0xFF4
 20202                           prodl	equ	0xFF3
 20203                           intcon	equ	0xFF2
 20204                           intcon2	equ	0xFF1
 20205                           intcon3	equ	0xFF0
 20206                           indf0	equ	0xFEF
 20207                           postinc0	equ	0xFEE
 20208                           fsr0h	equ	0xFEA
 20209                           fsr0l	equ	0xFE9
 20210                           wreg	equ	0xFE8
 20211                           postdec1	equ	0xFE5
 20212                           fsr1h	equ	0xFE2
 20213                           fsr1l	equ	0xFE1
 20214                           indf2	equ	0xFDF
 20215                           postinc2	equ	0xFDE
 20216                           postdec2	equ	0xFDD
 20217                           fsr2h	equ	0xFDA
 20218                           fsr2l	equ	0xFD9
 20219                           status	equ	0xFD8


Data Sizes:
    Strings     1195
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_111(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_108(CODE[10]), STR_107(CODE[13]), 
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  150053
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   16065
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   13421
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10402
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9655
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21136
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20286
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42152
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12327
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   59625
                                             70 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8074
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7959
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   11593
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7984
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8097
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7959
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7824
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 16:18:51 2017

                                    _i 012B                     i2_I2C_Master_Start 4274  
                   i2_I2C_Master_Write 424A                                     l66 41E2  
                                   _ID 2B38                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l715 2842                                    l478 3462  
                                  l591 1994                                    l922 41AE  
                                  l931 2B22                                    l909 2F90  
                                  l775 375A                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 3E8A  
      __end_of_change_state_to_menu_12 3D2C        __end_of_change_state_to_menu_22 3CF4  
      __end_of_change_state_to_menu_23 3E5A           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 3F7A  
      __end_of_change_state_to_logs_12 3F4A        __end_of_change_state_to_logs_22 3F1A  
      __end_of_change_state_to_logs_23 3FD6        __end_of_change_state_to_logs_33 3EEA  
      __end_of_change_state_to_logs_34 3EBA                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1100 0E8E  
                                 l1012 2EF0                                   l1031 30B4  
                                 l1112 1028                                   l1040 24D4  
                                 l1009 2ED0                                   l1034 30B8  
                                 l1131 3642                                   l1043 24D8  
                                 l1220 137E                                   l1132 3646  
                                 l1052 259C                                   l1133 364A  
                                 l1125 3622                                   l1134 364E  
                                 l1070 09CC                                   l1135 3652  
                                 l1063 0922                                   l1152 39EC  
                                 l1160 2DA8                                   l1137 3690  
                                 l1129 363E                                   l1073 0A32  
                                 l1146 39DC                                   l1074 0A80  
                                 l1066 0926                                   l1075 0AE6  
                                 l1076 0B34                                   l1166 2DF4  
                                 l1183 3596                                   l1175 3562  
                                 l1614 3294                                   l5102 3706  
                                 l5110 38EA                                   l5112 38F6  
                                 l5114 38FC                                   l1667 3714  
                                 l5300 13D6                                   l1677 392E  
                                 l5118 3920                                   l5230 116C  
                                 l5214 4016                                   l5312 1412  
                                 l5240 11AA                                   l5224 1146  
                                 l5216 4028                                   l5056 3FA0  
                                 l5090 36C4                                   l5074 404E  
                                 l5330 1490                                   l5322 146C  
                                 l5234 1176                                   l5410 3228  
                                 l6202 2880                                   l5092 36D0  
                                 l5324 1476                                   l5260 126A  
                                 l5228 115A                                   l7100 0236  
                                 l5420 3282                                   l5412 322E  
                                 l5094 36D6                                   l5342 14D2  
                                 l5318 1434                                   l5270 12E2  
                                 l7110 0260                                   l5352 1544  
                                 l5336 14AC                                   l5272 12FA  
                                 l5256 1258                                   l5248 1226  
                                 l5360 3D42                                   l7104 024E  
                                 l7040 0118                                   l5408 3218  
                                 l5338 14B8                                   l5346 14E6  
                                 l5266 12D0                                   l5258 1264  
                                 l5282 1344                                   l5354 1550  
                                 l5370 35F2                                   l7210 061C  
                                 l7114 026A                                   l7034 0100  
                                 l6234 2BD4                                   l5348 14EC  
                                 l5276 1326                                   l5268 12DC  
                                 l7140 032E                                   l7052 014C  
                                 l7044 0122                                   l7036 0106  
                                 l6244 2C04                                   l6252 2C1C  
                                 l5294 13B6                                   l5278 133E  
                                 l6510 0BB0                                   l6430 09A0  
                                 l5366 35DC                                   l5358 3D36  
                                 l7214 0626                                   l7150 03C4  
                                 l7142 034C                                   l7134 02D4  
                                 l7118 0282                                   l6270 28C6  
                                 l6520 0BD8                                   l6424 0990  
                                 l5376 3612                                   l5640 19F8  
                                 l7312 07EA                                   l7304 07C8  
                                 l7232 0672                                   l7224 0650  
                                 l7152 03E2                                   l7144 036A  
                                 l7136 02F2                                   l7072 01B4  
                                 l7048 013A                                   l6272 28E0  
                                 l6280 292E                                   l6248 2C10  
                                 l5298 13D0                                   l5394 3746  
                                 l6602 0D6E                                   l6514 0BBA  
                                 l6434 09B8                                   l6426 0996  
                                 l6370 2590                                   l6362 2572  
                                 l5650 1A8E                                   l5642 1A16  
                                 l5634 199E                                   l7330 0848  
                                 l7250 06D8                                   l7218 063E  
                                 l7154 0400                                   l7146 0388  
                                 l7138 0310                                   l7162 045A  
                                 l7066 01A4                                   l7082 01DA  
                                 l6274 28FA                                   l6282 295C  
                                 l5802 32CA                                   l6178 2800  
                                 l5396 3770                                   l6540 0C3E  
                                 l6524 0BE2                                   l6356 2530  
                                 l5652 1AAC                                   l5644 1A34  
                                 l5636 19BC                                   l5660 1B06  
                                 l5628 1912                                   l7308 07D2  
                                 l7228 065A                                   l7172 050A  
                                 l7156 041E                                   l7148 03A6  
                                 l7164 04BE                                   l7076 01CC  
                                 l7068 01AA                                   l6276 2914  
                                 l6188 284A                                   l6702 0F7C  
                                 l6622 0DE2                                   l6614 0DC0  
                                 l6606 0D86                                   l6550 0C66  
                                 l6518 0BD2                                   l5654 1ACA  
                                 l5646 1A52                                   l5638 19DA  
                                 l5662 1B64                                   l7334 0852  
                                 l7254 06E2                                   l7190 0556  
                                 l7182 0534                                   l7158 043C  
                                 _ADIE 007CEE                                   l6720 0FDE  
                                 l6712 0FA4                                   l6704 0F82  
                                 l6640 0E44                                   l6632 0E0A  
                                 l6624 0DE8                                   l6544 0C56  
                                 l6536 0C34                                   l6528 0BFA  
                                 l6384 2600                                   l5656 1AE8  
                                 l5648 1A70                                   l7352 089E  
                                 l7344 087C                                   l7272 072E  
                                 l7264 070C                                   l7176 0522  
                                 l7168 0500                                   l7096 022C  
                                 l5808 3340                                   l6730 1006  
                                 l6650 0E6C                                   l6618 0DCA  
                                 l6570 0CDA                                   l6562 0CB8  
                                 l6554 0C7E                                   l6546 0C5C  
                                 l6378 25BE                                   l7338 086A  
                                 l7290 0794                                   l7258 06FA  
                                 l7186 053E                                   l7610 2A5C  
                                 l6724 0FE8                                   l6708 0F8C  
                                 l6644 0E4E                                   l6628 0DF2  
                                 l6580 0D02                                   l6572 0CE0  
                                 l7348 0886                                   l7268 0716  
                                 l7356 08AA                                   l5860 303E  
                                 l5844 2FFC                                   l5852 301E  
                                 l6902 3656                                   l6734 1010  
                                 l6654 0E76                                   l6566 0CC2  
                                 l7294 079E                                   l5870 4074  
                                 l6728 1000                                   l6672 0EE0  
                                 l6648 0E66                                   l6592 0D46  
                                 l6576 0CEA                                   l6920 3148  
                                 l5856 3034                                   l5848 3006  
                                 l7608 2A48                                   l6762 109A  
                                 l6754 1078                                   l6682 0F08  
                                 l7298 07B6                                   l7634 2ADC  
                                 l5866 405E                                   l6860 2DB6  
                                 l6844 358A                                   l6780 10E6  
                                 l6772 10C2                                   l6764 10A0  
                                 l6676 0EF8                                   l6668 0ED6  
                                 l6596 0D5E                                   l6588 0D3C  
                                 l6932 317C                                   l5964 34CA  
                                 l6870 2DDC                                   l6790 110E  
                                 l6758 1082                                   l6694 0F5A  
                                 l6686 0F20                                   l6678 0EFE  
                                 l6598 0D64                                   l7670 2F08  
                                 l7646 2E72                                   l6934 3188  
                                 l6926 315E                                   l5974 350C  
                                 l5798 32B4                                   l7742 3434  
                                 l6880 2E1C                                   l6864 2DCC  
                                 l6848 2D74                                   l6784 10F0  
                                 l6768 10AA                                   l7672 2F0E  
                                 l7664 2EF6                                   l6952 31E0  
                                 l6944 31BE                                   l6936 318E  
                                 l5968 34E0                                   l7744 343A  
                                 l7760 3464                                   l6890 2E50  
                                 l6866 2DD2                                   l6794 1118  
                                 l6698 0F64                                   l7674 2F14  
                                 l7666 2EFC                                   l7682 2F26  
                                 l7754 3458                                   l7746 3440  
                                 l6788 1108                                   l7676 2F1A  
                                 l7668 2F02                                   l6948 31CC  
                                 l6980 33C6                                   l6972 3390  
                                 l6964 336C                                   l7756 345E  
                                 l6894 2E5A                                   l6798 1130  
                                 l7678 2F20                                   l6974 339C  
                                 l6976 33A2                                   l6984 33D4  
                                 l6968 337C                                   l6988 33E8  
                                 STR_1 FBDD                                   STR_2 FF2E  
                                 STR_3 FBCB                                   STR_4 FE51  
                                 STR_5 FBCB                                   STR_6 FE0F  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5010 0A80                                   u5030 0B34  
                                 u4330 3C2A                                   u4340 3C2C  
                                 u4350 3BDE                                   u3470 3F9E  
                                 u4351 3BDA                                   u3720 12A4  
                                 u4360 3BE0                                   _PEIE 007F96  
                                 u4390 1994                                   u4710 2842  
                                 u3727 129A                                   u7007 012A  
                                 u4375 3968                                   u3760 131C  
                                 u4800 2BC4                                   u7017 0166  
                                 u7107 062E                                   u7027 01BC  
                                 u4708 2810                                   _RCEN 007E2B  
                                 u7117 0662                                   u7037 01E8  
                                 u3767 1312                                   u7207 088E  
                                 u7127 068C                                   u7047 023E  
                                 u4808 2BC8                                   u7217 2E80  
                                 u7137 06EA                                   u7057 0272  
                                 u4770 2B68                                   u4690 280C  
                                 u7307 401E                                   u7227 2EC4  
                                 u7147 071E                                   u7067 029C  
                                 u7317 3064                                   u7237 2484  
                                 u7157 0748                                   u7077 0512  
                                 u7407 0A60                                   u7327 30A8  
                                 u7247 24C8                                   u7167 07A6  
                                 u7087 0546                                   u7417 0A90  
                                 u7337 30CA                                   u7257 24EA  
                                 u7177 07DA                                   u7097 0570  
                                 i2l66 41F6                                   u4778 2B6C  
                                 u7507 0CF2                                   u7427 0AF6  
                                 u7347 08D2                                   u7267 2518  
                                 u7187 0804                                   u6660 2B22  
                                 u7517 0D4E                                   u7437 0B14  
                                 u7357 0916                                   u7277 2566  
                                 u7197 085A                                   u4990 09CC  
                                 u7607 0F94                                   u7527 0D76  
                                 u7447 0B44                                   u7367 0938  
                                 u7287 25B0                                   u7617 0FF0  
                                 u7537 0DD2                                   u7457 0BC2  
                                 u7377 09A8                                   u7297 25F4  
                                 u7707 2DE4                                   u7627 1018  
                                 u7547 0DFA                                   u7467 0BEA  
                                 u7387 09DC                                   u6907 2BAA  
                                 u7717 2E04                                   u7637 103A  
                                 u7557 0E56                                   u7477 0C46  
                                 u7397 0A42                                   u6917 2C40  
                                 u7727 2E2A                                   u7647 108A  
                                 u7567 0E7E                                   u7487 0C6E  
                                 u6927 296A                                   u7737 2E62  
                                 u7657 10B2                                   u7577 0EE8  
                                 u7497 0CCA                                   u6937 299E  
                                 u6857 2792                                   u7747 39A6  
                                 u7667 10F8                                   u7587 0F10  
                                 u6947 2FB2                                   u6867 28AA  
                                 u7757 388E                                   u7677 1120  
                                 u7597 0F6C                                   u6957 300E  
                                 u6877 3A36                                   u7767 3898  
                                 u7687 3522                                   u6967 3046  
                                 u6887 406A                                   u7777 38C4  
                                 u7697 2D82                                   u6977 3C3C  
                                 u6897 2B4E                                   u7787 38CE  
                                 u6987 3C70                                   u6997 002A  
                                 _RSEN 007E29                            _stopSignals 41B6  
                                 _Test 2E72                                   _back 005B  
                                 _main 33F2                                   _down 0067  
                                 _keys FB39                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 413C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                     ??_SolenoidTestA5 00AB                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4234  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E68  
                          i2_lcdNibble 3AA6                        __end_of_Loading 28BC  
                 __end_of_actuatorTest 1138                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3056                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 31EA                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB54  
                                STR_14 FFD7                                  STR_22 FFA4  
                                STR_30 FE20                                  STR_15 FFD3  
                                STR_23 FF20                                  STR_31 FDFE  
                                STR_16 FFE3                                  STR_24 FD65  
                                STR_32 FD43                                  STR_40 FCFF  
                                STR_17 FFF3                                  STR_33 FD54  
                                STR_41 FCEE                                  STR_25 FB94  
                                STR_18 FFF7                                  STR_34 FDED  
                                STR_50 FDCB                                  STR_42 FDA9  
                                STR_26 FD76                                  STR_43 FDA9  
                                STR_35 FDED                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FB81  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD87                                  STR_36 FD32  
                                STR_44 FD10                        __end_of___awmod 33F2  
                                STR_45 FCFF                                  STR_37 FD43  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FB91                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED9  
                                STR_38 FDDC                                  STR_46 FDBA  
                                STR_47 FDBA                                  STR_55 FFFB  
                                STR_63 FB54                                  STR_71 FF12  
                                STR_39 FD98                                  STR_56 FFDF  
                                STR_64 FF85                                  STR_80 FE61  
                                STR_48 FD21                                  STR_72 FC99  
                                STR_49 FD10                                  STR_57 FFD7  
                                STR_65 FF56                                  STR_73 FEF6  
                                STR_81 FE8E                                  STR_58 FFD3  
                                STR_90 FF7A                                  STR_74 FF63  
                                STR_82 FE31                                  STR_66 FB6C  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_83 FF9A                                  STR_75 FEBB  
                                STR_91 FEAC                                  STR_84 FF12  
                                STR_76 FF04                                  STR_68 FCAA  
                                STR_92 FC44                                  STR_77 FFAE  
                                STR_85 FECA                                  STR_69 FCDD  
                                STR_93 FC33                                  STR_78 FF12  
                                STR_86 FEE8                                  STR_94 FC11  
                                STR_79 FF3C                                  STR_87 FCBB  
                                STR_95 FC66                                  STR_88 FF6F  
                                STR_96 FC77                                  STR_89 FCCC  
                                STR_97 FBEF                                  STR_98 FE41  
                                STR_99 FC22                                  ?_sort 0001  
                      __end_of___lldiv 32A6                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 371E                        __end_of___lwmod 3938  
                                i2l254 1E64                                  i2l591 1EF6  
                                i2l840 26CC                                  i2l922 41DA  
                                i2l844 2718                                  i2l846 2738  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4228                        __end_of_handler 2774  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 402E  
                      __end_of_initLCD 3C7A                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                      __end_of_loadRTC 3514                        __end_of_readMAG 3BE8  
                      __end_of_dpowers FB54                                  _first 00E4  
                                _enter 0069                        __end_of_isdigit 4058  
                                _input 007D                                  _putch 4208  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 40CE                       __end_ofi2_getRTC 3806  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 3DCA  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3B4E  
                         __end_of_Test 2F6E                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3488                           __end_of_keys FB4A  
                         __end_of_sort 415E                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC00  
                               STR_101 FC22                                 STR_102 FE9D  
                               STR_110 FC88                                 STR_111 FFB6  
                               STR_103 FE7F                                 STR_104 FE70  
                               STR_105 FBA7                                 STR_106 FBB9  
                               _ADRESH 000FC4                                 STR_107 FF49  
                               STR_108 FF90                                 _EEADRH 000FAA  
                               STR_109 FC55                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3DFA  
            i2_change_state_to_menu_22 3DCA                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1220 174A                                 i2l5200 3C94  
                               i2l1667 3B44                                 i2l5204 3CA8  
                               i2l6100 23D0                                 i2l1677 3CB2  
                               i2l5142 40EE                                 i2l6030 22DC  
                               i2l6040 22FA                                 i2l6130 243E  
                               i2l6122 241A                                 i2l6114 23F6  
                               i2l6050 2318                                 i2l6042 2300  
                               i2l6026 22C8                                 i2l6018 22AE  
                               i2l5180 3B1E                                 i2l6108 23E8  
                               i2l6044 2306                                 i2l6028 22D8  
                               i2l6036 22E6                                 i2l5166 4196  
                               i2l5502 16B2                                 i2l6126 242C  
                               i2l6118 2408                                 i2l6046 230C  
                               i2l6054 231E                                 i2l5432 37CC  
                               i2l5176 3B12                                 i2l5512 16FE  
                               i2l5504 16BC                                 i2l6080 2388  
                               i2l6048 2312                                 i2l6136 2448  
                               i2l5442 37F6                                 i2l5178 3B1A  
                               i2l5530 1778                                 i2l5514 1710  
                               i2l5506 16C2                                 i2l6090 23AE  
                               i2l6074 237A                                 i2l6066 2362  
                               i2l5436 37DC                                 i2l5188 3B3A  
                               i2l5196 3C88                                 i2l5508 16D4  
                               i2l5460 157A                                 i2l6084 23A4  
                               i2l5198 3C90                                 i2l5534 1790  
                               i2l5518 1714                                 i2l5470 159E  
                               i2l6094 23C2                                 i2l5560 180C  
                               i2l5536 1794                                 i2l5464 158A  
                               i2l6096 23C6                                 i2l8120 2336  
                               i2l8112 1E18                                 i2l7400 1C32  
                               i2l5554 17E0                                 i2l5466 1598  
                               i2l8122 2352                                 i2l8114 1E3A  
                               i2l5572 1838                                 i2l5548 17C6  
                               i2l5492 165A                                 i2l5484 1632  
                               i2l5476 15D0                                 i2l8116 1E56  
                               i2l7500 1DBA                                 i2l7420 1C7A  
                               i2l7412 1C5E                                 i2l7404 1C40  
                               i2l5574 1840                                 i2l5582 1866  
                               i2l5566 1822                                 i2l5558 1804  
                               i2l5494 1664                                 i2l5590 18C2  
                               i2l5584 186C                                 i2l5496 1668  
                               i2l7512 1DEC                                 i2l7504 1DC8  
                               i2l7440 1CC8                                 i2l7432 1CAC  
                               i2l7424 1C88                                 i2l7416 1C6C  
                               i2l7408 1C50                                 i2l5578 1854  
                               i2l5594 3DA2                                 i2l5930 1F58  
                               i2l5922 1F00                                 i2l7370 1BD8  
                               i2l5588 18BA                                 i2l5596 3DAA  
                               i2l5940 1FC6                                 i2l5932 1F6E  
                               i2l5924 1F16                                 i2l5916 1E94  
                               i2l7508 1DD6                                 i2l7460 1D16  
                               i2l7452 1CFA                                 i2l7444 1CD6  
                               i2l7436 1CBA                                 i2l7428 1C96  
                               i2l7380 1BFA                                 i2l7372 1BDE  
                               i2l7702 2114                                 i2l5790 2D5C  
                               i2l5782 2D28                                 i2l5942 1FDC  
                               i2l5934 1F84                                 i2l5926 1F2C  
                               i2l5950 2062                                 i2l7518 1DFA  
                               i2l7712 21D6                                 i2l5944 1FF2  
                               i2l5936 1F9A                                 i2l5928 1F42  
                               i2l7480 1D6C                                 i2l7472 1D48  
                               i2l7464 1D2C                                 i2l7456 1D08  
                               i2l7448 1CEC                                 i2l7384 1C08  
                               i2l7376 1BEC                                 i2l5778 2D18  
                               i2l5938 1FB0                                 i2l7802 26A0  
                               i2l5948 2008                                 i2l7492 1D96  
                               i2l7484 1D7A                                 i2l7476 1D56  
                               i2l7468 1D3A                                 i2l7396 1C24  
                               i2l7388 1C16                                 i2l7496 1DAC  
                               i2l7488 1D88                                 i2l7824 26EA  
                               i2l7826 26EC                                 i2l7692 20AA  
                               i2l7696 20BA                                 i2l7848 2736  
                               i2l7786 2680                                 i2l7788 2684  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4080  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 413C  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 29FC                                 ___wmul 3D62  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 359C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4180  
                               _initUI 40F4                                 _readIR 3BE8  
                               _logRun 29FC                                 clear_0 3B74  
                               clear_1 3B80                                 clear_2 3B8C  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3998                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 3D2C  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 40A8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4080                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3B4E                       __end_of_printRTC 1BA8  
                         __mediumconst FB38                      __end_ofi2___lwmod 3CBC  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 312C                      __end_ofi2_lcdInst 4240  
                    __end_ofi2_isdigit 419E                             __accesstop 0080  
              __end_of__initialization 3B92                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 41CC  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 427E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 4254  
                          i2printRTC@i 0041                          _initSortTimer 32A6  
          __end_of_updateServoPosition 3794                          __end_of_putch 4218  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2C5A                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 4002          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 3FD6                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 2F6E                                UI@F3222 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 36A6  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2232 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 4228                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 38D6                                _Loading 2774  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 312C  
                              ___awmod 3350                             _initServos 39F4  
                              ___lldiv 31EA                        __size_of___wmul 0036  
                              ___lwdiv 36A6                                ___lwmod 38D6  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3B4E  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3806                                _lcdInst 4218  
                              _handler 0008                                __ptext0 33F2  
                              __ptext1 41B6                                __ptext2 413C  
                              __ptext3 2774                                __ptext4 32A6  
                              __ptext5 39F4                                __ptext6 3806  
                              __ptext7 4058                                __ptext8 2B38  
                              __ptext9 28BC                        __size_of_printf 0438  
                              _readADC 4002                        __size_of_strcpy 0036  
                              _initLCD 3C34                                _cur_can 0065  
                              _loadRTC 3488                                _readMAG 3B9C  
                              _dpowers FB4A                     actuatorTest@i_1601 00BE  
                   actuatorTest@i_1602 00BF                     actuatorTest@i_1605 00C0  
                   actuatorTest@i_1606 00C1                     actuatorTest@i_1608 00C2  
                   actuatorTest@i_1609 00C3                     actuatorTest@i_1580 00B1  
                   actuatorTest@i_1582 00B2                     actuatorTest@i_1591 00B8  
                   actuatorTest@i_1583 00B3                     actuatorTest@i_1592 00B9  
                   actuatorTest@i_1576 00AE                     actuatorTest@i_1585 00B4  
                   actuatorTest@i_1577 00AF                     actuatorTest@i_1569 00AD  
                   actuatorTest@i_1586 00B5                     actuatorTest@i_1595 00BA  
                   actuatorTest@i_1579 00B0                     actuatorTest@i_1596 00BB  
                   actuatorTest@i_1588 00B6                     actuatorTest@i_1589 00B7  
                   actuatorTest@i_1598 00BC                     actuatorTest@i_1599 00BD  
                              _isdigit 402E                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 28BC                         __pintcode_body 2606  
                 end_of_initialization 3B92                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1620 00AF                   SolenoidTestA5@i_1622 00B0  
                              int_func 2606                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 386E  
                           _sensorTest 2476                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2476  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3AA6  
                           _updateMenu 1BA8                      i2_I2C_Master_Read 40CE  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 41F6  
                    i2_I2C_Master_Stop 426C                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3AFC  
                            i2___lwmod 3C7A                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 209E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4234                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4180  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 41B6  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3D98                         __end_of_getRTC 3622  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4118  
                       __end_of_readIR 3C34                         __end_of_logRun 2B38  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 3D62  
            __end_ofi2_I2C_Master_Read 40F4              __end_ofi2_I2C_Master_Wait 4208  
                         i2printf@prec 001D                    start_initialization 3B4E  
            __end_ofi2_I2C_Master_Stop 4274                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1314 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3622  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2352 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1876 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 419E  
                   __end_of_PortTestA5 39F4                       _I2C_Master_Start 4264  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4240  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 359C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB38  
                            _lcdNibble 386E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 2D74                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                          _algorithmTest 3056  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0122  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 0190             __end_ofi2_I2C_Master_Start 427C  
           __end_ofi2_I2C_Master_Write 4254                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2290  
                          ??i2_isdigit 0001                               i2u413_40 16F6  
                             i2u413_47 16EC                               i2u409_40 1696  
                             i2u409_47 168C                               _PIR2bits 000FA1  
                             i2u357_40 40EC                               i2u453_40 1EF6  
                             i2u671_40 21D0                               i2u780_47 3ABE  
                             i2u781_47 3AC8                               i2u782_47 3AEA  
                             i2u783_47 3AF4                               i2u779_47 22CE  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 2E72  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 40A8  
                        lcdNibble@data 0081                               i2_getRTC 3794  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 1570                               i2_strcpy 3D98  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 3B62                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 41E2                            _count_total 00FE  
                     ??_initGlobalVars 0080                        SolenoidTestA5@i 00AD  
                             __Hrparam 0000                       __size_of_Loading 0148  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                        ?_SolenoidTestA5 0001  
                __end_of_initSortTimer 3350                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 3E5A  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 3CF4  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 3CBC  
              _change_state_to_menu_23 3E2A                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 3F4A                _change_state_to_logs_12 3F1A  
              _change_state_to_logs_22 3EEA                _change_state_to_logs_23 3FA8  
              _change_state_to_logs_33 3EBA                _change_state_to_logs_34 3E8A  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 276C                             _EEPROMTest 427C  
                      _I2C_Master_Init 3938                       __size_of_readADC 002C  
                      _I2C_Master_Read 3F7A                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 41E2  
                      _I2C_Master_Stop 425C                       __size_of_isdigit 002A  
                             _delay_ms 4058                         _printSortTimer 209E  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 2D74                               __ptext10 3A4E  
                             __ptext11 29FC                               __ptext20 3C34  
                             __ptext12 2F6E                               __ptext21 0012  
                             __ptext13 419E                               __ptext30 3CBC  
                             __ptext22 18DE                               __ptext14 40F4  
                             __ptext31 3CF4                               __ptext23 3D2C  
                             __ptext15 3488                               __ptext40 08B8  
                             __ptext32 3350                               __ptext24 359C  
                             __ptext16 3938                               __ptext41 371E  
                             __ptext33 312C                               __ptext25 4240  
                             __ptext17 31EA                               __ptext50 38D6  
                             __ptext42 3514                               __ptext34 2E72  
                             __ptext26 425C                               __ptext18 3FD6  
                             __ptext51 36A6                               __ptext43 2D74  
                             __ptext35 2476                               __ptext27 4264  
                             __ptext19 415E                               __ptext60 2290  
                             __ptext52 4218                               __ptext44 3622  
                             __ptext36 3B9C                               __ptext28 3F7A  
                             __ptext61 3DCA                               __ptext53 386E  
                             __ptext45 3998                               __ptext37 3BE8  
                             __ptext29 41E2                               __ptext70 3F4A  
                             __ptext62 3DFA                               __ptext54 427C  
                             __ptext46 1138                               __ptext38 4002  
                             __ptext71 4118                               __ptext63 3E2A  
                             __ptext47 4208                               __ptext39 3056  
                             __ptext80 3AFC                               __ptext72 2C5A  
                             __ptext64 3E5A                               __ptext56 1BA8  
                             __ptext48 402E                               __ptext81 4234  
                             __ptext73 41CC                               __ptext65 3E8A  
                             __ptext57 4080                               __ptext49 3D62  
                             __ptext82 3AA6                               __ptext74 209E  
                             __ptext66 3EBA                               __ptext58 1E68  
                             __ptext83 3794                               __ptext75 1570  
                             __ptext67 3FA8                               __ptext59 3D98  
                             __ptext84 424A                               __ptext76 4228  
                             __ptext68 3EEA                               __ptext85 426C  
                             __ptext77 4180                               __ptext69 3F1A  
                             __ptext86 4274                               __ptext78 40A8  
                             __ptext87 40CE                               __ptext79 3C7A  
                             __ptext88 41F6                               _dispLogs 4118  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1876 0002                     __end_of_initServos 3A4E  
                        __size_of_Test 00FC                          ?_EEPROM_write 00AB  
                             _initTime 415E                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 371E  
               __size_of_machineConfig 0058                          ??i2_lcdNibble 0001  
                             _printRTC 18DE                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 3E2A  
    __end_ofi2_change_state_to_menu_22 3DFA                               loadRTC@i 0096  
               __end_of_printSortTimer 2290                              putch@data 0082  
             __end_of_I2C_Master_Start 426C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 424A                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 3514  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2606  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 41CC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 1E68                __end_of_I2C_Master_Init 3998  
              __end_of_I2C_Master_Read 3FA8                __end_of_I2C_Master_Wait 41F6  
              __end_of_I2C_Master_Stop 4264                          printRTC@F3213 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                         sensorTest@on 00AD                            _retrieveLog 2C5A  
                  __end_ofi2_lcdNibble 3AFC                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3A4E                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
