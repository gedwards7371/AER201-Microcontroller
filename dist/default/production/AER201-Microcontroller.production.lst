

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 04 22:32:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  005314                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3235
   155  005314  4D                 	db	77
   156  005315  4D                 	db	77
   157  005316  4D                 	db	77
   158  005317  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  005318  4D                 	db	77
   162  005319  4D                 	db	77
   163  00531A  4D                 	db	77
   164  00531B  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FAEE                     __pmediumconst:
   168                           	opt stack 0
   169  00FAEE  00                 	db	0
   170  00FAEF                     _keys:
   171                           	opt stack 0
   172  00FAEF  31                 	db	49
   173  00FAF0  32                 	db	50
   174  00FAF1  33                 	db	51
   175  00FAF2  41                 	db	65
   176  00FAF3  34                 	db	52
   177  00FAF4  35                 	db	53
   178  00FAF5  36                 	db	54
   179  00FAF6  42                 	db	66
   180  00FAF7  37                 	db	55
   181  00FAF8  38                 	db	56
   182  00FAF9  39                 	db	57
   183  00FAFA  43                 	db	67
   184  00FAFB  2A                 	db	42
   185  00FAFC  30                 	db	48
   186  00FAFD  23                 	db	35
   187  00FAFE  44                 	db	68
   188  00FAFF  00                 	db	0
   189  00FB00                     __end_of_keys:
   190                           	opt stack 0
   191  00FB00                     _dpowers:
   192                           	opt stack 0
   193  00FB00  0001               	dw	1
   194  00FB02  000A               	dw	10
   195  00FB04  0064               	dw	100
   196  00FB06  03E8               	dw	1000
   197  00FB08  2710               	dw	10000
   198  00FB0A                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _LATEbits	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FB0A                     STR_21:
   273  00FB0A  25                 	db	37
   274  00FB0B  30                 	db	48	;'0'
   275  00FB0C  32                 	db	50	;'2'
   276  00FB0D  64                 	db	100	;'d'
   277  00FB0E  25                 	db	37
   278  00FB0F  73                 	db	115	;'s'
   279  00FB10  20                 	db	32
   280  00FB11  7C                 	db	124
   281  00FB12  20                 	db	32
   282  00FB13  25                 	db	37
   283  00FB14  30                 	db	48	;'0'
   284  00FB15  32                 	db	50	;'2'
   285  00FB16  64                 	db	100	;'d'
   286  00FB17  3A                 	db	58	;':'
   287  00FB18  25                 	db	37
   288  00FB19  30                 	db	48	;'0'
   289  00FB1A  32                 	db	50	;'2'
   290  00FB1B  64                 	db	100	;'d'
   291  00FB1C  3A                 	db	58	;':'
   292  00FB1D  25                 	db	37
   293  00FB1E  30                 	db	48	;'0'
   294  00FB1F  32                 	db	50	;'2'
   295  00FB20  64                 	db	100	;'d'
   296  00FB21  00                 	db	0
   297  00FB22                     STR_66:
   298  00FB22  28                 	db	40
   299  00FB23  64                 	db	100	;'d'
   300  00FB24  61                 	db	97	;'a'
   301  00FB25  74                 	db	116	;'t'
   302  00FB26  61                 	db	97	;'a'
   303  00FB27  3A                 	db	58	;':'
   304  00FB28  20                 	db	32
   305  00FB29  25                 	db	37
   306  00FB2A  75                 	db	117	;'u'
   307  00FB2B  2C                 	db	44
   308  00FB2C  20                 	db	32
   309  00FB2D  61                 	db	97	;'a'
   310  00FB2E  64                 	db	100	;'d'
   311  00FB2F  64                 	db	100	;'d'
   312  00FB30  72                 	db	114	;'r'
   313  00FB31  3A                 	db	58	;':'
   314  00FB32  20                 	db	32
   315  00FB33  25                 	db	37
   316  00FB34  75                 	db	117	;'u'
   317  00FB35  29                 	db	41
   318  00FB36  00                 	db	0
   319  00FB37                     STR_111:
   320  00FB37  44                 	db	68	;'D'
   321  00FB38  20                 	db	32
   322  00FB39  57                 	db	87	;'W'
   323  00FB3A  49                 	db	73	;'I'
   324  00FB3B  4C                 	db	76	;'L'
   325  00FB3C  4C                 	db	76	;'L'
   326  00FB3D  20                 	db	32
   327  00FB3E  52                 	db	82	;'R'
   328  00FB3F  45                 	db	69	;'E'
   329  00FB40  54                 	db	84	;'T'
   330  00FB41  55                 	db	85	;'U'
   331  00FB42  52                 	db	82	;'R'
   332  00FB43  4E                 	db	78	;'N'
   333  00FB44  20                 	db	32
   334  00FB45  20                 	db	32
   335  00FB46  20                 	db	32
   336  00FB47  20                 	db	32
   337  00FB48  00                 	db	0
   338  00FB49                     STR_112:
   339  00FB49  4F                 	db	79	;'O'
   340  00FB4A  54                 	db	84	;'T'
   341  00FB4B  48                 	db	72	;'H'
   342  00FB4C  45                 	db	69	;'E'
   343  00FB4D  52                 	db	82	;'R'
   344  00FB4E  20                 	db	32
   345  00FB4F  53                 	db	83	;'S'
   346  00FB50  45                 	db	69	;'E'
   347  00FB51  54                 	db	84	;'T'
   348  00FB52  53                 	db	83	;'S'
   349  00FB53  20                 	db	32
   350  00FB54  52                 	db	82	;'R'
   351  00FB55  41                 	db	65	;'A'
   352  00FB56  35                 	db	53	;'5'
   353  00FB57  20                 	db	32
   354  00FB58  20                 	db	32
   355  00FB59  20                 	db	32
   356  00FB5A  00                 	db	0
   357  00FB5B                     STR_120:
   358  00FB5B  53                 	db	83	;'S'
   359  00FB5C  3A                 	db	58	;':'
   360  00FB5D  20                 	db	32
   361  00FB5E  44                 	db	68	;'D'
   362  00FB5F  20                 	db	32
   363  00FB60  57                 	db	87	;'W'
   364  00FB61  49                 	db	73	;'I'
   365  00FB62  4C                 	db	76	;'L'
   366  00FB63  4C                 	db	76	;'L'
   367  00FB64  20                 	db	32
   368  00FB65  52                 	db	82	;'R'
   369  00FB66  45                 	db	69	;'E'
   370  00FB67  54                 	db	84	;'T'
   371  00FB68  55                 	db	85	;'U'
   372  00FB69  52                 	db	82	;'R'
   373  00FB6A  4E                 	db	78	;'N'
   374  00FB6B  20                 	db	32
   375  00FB6C  00                 	db	0
   376  00FB6D                     STR_123:
   377  00FB6D  4F                 	db	79	;'O'
   378  00FB6E  54                 	db	84	;'T'
   379  00FB6F  48                 	db	72	;'H'
   380  00FB70  45                 	db	69	;'E'
   381  00FB71  52                 	db	82	;'R'
   382  00FB72  3A                 	db	58	;':'
   383  00FB73  20                 	db	32
   384  00FB74  43                 	db	67	;'C'
   385  00FB75  41                 	db	65	;'A'
   386  00FB76  4D                 	db	77	;'M'
   387  00FB77  20                 	db	32
   388  00FB78  54                 	db	84	;'T'
   389  00FB79  4F                 	db	79	;'O'
   390  00FB7A  47                 	db	71	;'G'
   391  00FB7B  47                 	db	71	;'G'
   392  00FB7C  4C                 	db	76	;'L'
   393  00FB7D  45                 	db	69	;'E'
   394  00FB7E  00                 	db	0
   395  00FB7F                     STR_122:
   396  00FB7F  44                 	db	68	;'D'
   397  00FB80  3A                 	db	58	;':'
   398  00FB81  20                 	db	32
   399  00FB82  52                 	db	82	;'R'
   400  00FB83  45                 	db	69	;'E'
   401  00FB84  54                 	db	84	;'T'
   402  00FB85  7C                 	db	124
   403  00FB86  32                 	db	50	;'2'
   404  00FB87  3A                 	db	58	;':'
   405  00FB88  20                 	db	32
   406  00FB89  43                 	db	67	;'C'
   407  00FB8A  4F                 	db	79	;'O'
   408  00FB8B  4E                 	db	78	;'N'
   409  00FB8C  44                 	db	68	;'D'
   410  00FB8D  20                 	db	32
   411  00FB8E  25                 	db	37
   412  00FB8F  64                 	db	100	;'d'
   413  00FB90  00                 	db	0
   414  00FB91                     STR_3:
   415  00FB91  2D                 	db	45
   416  00FB92  2D                 	db	45
   417  00FB93  20                 	db	32
   418  00FB94  4C                 	db	76	;'L'
   419  00FB95  4F                 	db	79	;'O'
   420  00FB96  47                 	db	71	;'G'
   421  00FB97  20                 	db	32
   422  00FB98  25                 	db	37
   423  00FB99  32                 	db	50	;'2'
   424  00FB9A  64                 	db	100	;'d'
   425  00FB9B  20                 	db	32
   426  00FB9C  48                 	db	72	;'H'
   427  00FB9D  45                 	db	69	;'E'
   428  00FB9E  52                 	db	82	;'R'
   429  00FB9F  45                 	db	69	;'E'
   430  00FBA0  2D                 	db	45
   431  00FBA1  2D                 	db	45
   432  00FBA2  00                 	db	0
   433  00FBA3                     STR_1:
   434  00FBA3  52                 	db	82	;'R'
   435  00FBA4  45                 	db	69	;'E'
   436  00FBA5  53                 	db	83	;'S'
   437  00FBA6  55                 	db	85	;'U'
   438  00FBA7  4C                 	db	76	;'L'
   439  00FBA8  54                 	db	84	;'T'
   440  00FBA9  53                 	db	83	;'S'
   441  00FBAA  20                 	db	32
   442  00FBAB  49                 	db	73	;'I'
   443  00FBAC  4E                 	db	78	;'N'
   444  00FBAD  20                 	db	32
   445  00FBAE  4C                 	db	76	;'L'
   446  00FBAF  4F                 	db	79	;'O'
   447  00FBB0  47                 	db	71	;'G'
   448  00FBB1  20                 	db	32
   449  00FBB2  25                 	db	37
   450  00FBB3  64                 	db	100	;'d'
   451  00FBB4  00                 	db	0
   452  00FBB5                     STR_102:
   453  00FBB5  4D                 	db	77	;'M'
   454  00FBB6  49                 	db	73	;'I'
   455  00FBB7  44                 	db	68	;'D'
   456  00FBB8  20                 	db	32
   457  00FBB9  2D                 	db	45
   458  00FBBA  2D                 	db	45
   459  00FBBB  20                 	db	32
   460  00FBBC  32                 	db	50	;'2'
   461  00FBBD  73                 	db	115	;'s'
   462  00FBBE  20                 	db	32
   463  00FBBF  20                 	db	32
   464  00FBC0  20                 	db	32
   465  00FBC1  20                 	db	32
   466  00FBC2  20                 	db	32
   467  00FBC3  20                 	db	32
   468  00FBC4  20                 	db	32
   469  00FBC5  00                 	db	0
   470  00FBC6                     STR_105:
   471  00FBC6  44                 	db	68	;'D'
   472  00FBC7  52                 	db	82	;'R'
   473  00FBC8  4F                 	db	79	;'O'
   474  00FBC9  50                 	db	80	;'P'
   475  00FBCA  20                 	db	32
   476  00FBCB  2D                 	db	45
   477  00FBCC  2D                 	db	45
   478  00FBCD  20                 	db	32
   479  00FBCE  32                 	db	50	;'2'
   480  00FBCF  73                 	db	115	;'s'
   481  00FBD0  20                 	db	32
   482  00FBD1  20                 	db	32
   483  00FBD2  20                 	db	32
   484  00FBD3  20                 	db	32
   485  00FBD4  20                 	db	32
   486  00FBD5  20                 	db	32
   487  00FBD6  00                 	db	0
   488  00FBD7                     STR_99:
   489  00FBD7  4C                 	db	76	;'L'
   490  00FBD8  45                 	db	69	;'E'
   491  00FBD9  46                 	db	70	;'F'
   492  00FBDA  54                 	db	84	;'T'
   493  00FBDB  20                 	db	32
   494  00FBDC  2D                 	db	45
   495  00FBDD  2D                 	db	45
   496  00FBDE  20                 	db	32
   497  00FBDF  32                 	db	50	;'2'
   498  00FBE0  73                 	db	115	;'s'
   499  00FBE1  20                 	db	32
   500  00FBE2  20                 	db	32
   501  00FBE3  20                 	db	32
   502  00FBE4  20                 	db	32
   503  00FBE5  20                 	db	32
   504  00FBE6  20                 	db	32
   505  00FBE7  00                 	db	0
   506  00FBE8                     STR_104:
   507  00FBE8  4C                 	db	76	;'L'
   508  00FBE9  45                 	db	69	;'E'
   509  00FBEA  56                 	db	86	;'V'
   510  00FBEB  45                 	db	69	;'E'
   511  00FBEC  4C                 	db	76	;'L'
   512  00FBED  20                 	db	32
   513  00FBEE  2D                 	db	45
   514  00FBEF  2D                 	db	45
   515  00FBF0  20                 	db	32
   516  00FBF1  32                 	db	50	;'2'
   517  00FBF2  73                 	db	115	;'s'
   518  00FBF3  20                 	db	32
   519  00FBF4  20                 	db	32
   520  00FBF5  20                 	db	32
   521  00FBF6  20                 	db	32
   522  00FBF7  20                 	db	32
   523  00FBF8  00                 	db	0
   524  00FBF9                     STR_98:
   525  00FBF9  52                 	db	82	;'R'
   526  00FBFA  49                 	db	73	;'I'
   527  00FBFB  47                 	db	71	;'G'
   528  00FBFC  48                 	db	72	;'H'
   529  00FBFD  54                 	db	84	;'T'
   530  00FBFE  20                 	db	32
   531  00FBFF  2D                 	db	45
   532  00FC00  2D                 	db	45
   533  00FC01  20                 	db	32
   534  00FC02  32                 	db	50	;'2'
   535  00FC03  73                 	db	115	;'s'
   536  00FC04  20                 	db	32
   537  00FC05  20                 	db	32
   538  00FC06  20                 	db	32
   539  00FC07  20                 	db	32
   540  00FC08  20                 	db	32
   541  00FC09  00                 	db	0
   542  00FC0A                     STR_97:
   543  00FC0A  4D                 	db	77	;'M'
   544  00FC0B  49                 	db	73	;'I'
   545  00FC0C  44                 	db	68	;'D'
   546  00FC0D  44                 	db	68	;'D'
   547  00FC0E  4C                 	db	76	;'L'
   548  00FC0F  45                 	db	69	;'E'
   549  00FC10  20                 	db	32
   550  00FC11  2D                 	db	45
   551  00FC12  2D                 	db	45
   552  00FC13  20                 	db	32
   553  00FC14  32                 	db	50	;'2'
   554  00FC15  73                 	db	115	;'s'
   555  00FC16  20                 	db	32
   556  00FC17  20                 	db	32
   557  00FC18  20                 	db	32
   558  00FC19  20                 	db	32
   559  00FC1A  00                 	db	0
   560  00FC1B  44                 	db	68	;'D'
   561  00FC1C  20                 	db	32
   562  00FC1D  57                 	db	87	;'W'
   563  00FC1E  49                 	db	73	;'I'
   564  00FC1F  4C                 	db	76	;'L'
   565  00FC20  4C                 	db	76	;'L'
   566  00FC21  20                 	db	32
   567  00FC22  52                 	db	82	;'R'
   568  00FC23  45                 	db	69	;'E'
   569  00FC24  54                 	db	84	;'T'
   570  00FC25  55                 	db	85	;'U'
   571  00FC26  52                 	db	82	;'R'
   572  00FC27  4E                 	db	78	;'N'
   573  00FC28  20                 	db	32
   574  00FC29  20                 	db	32
   575  00FC2A  20                 	db	32
   576  00FC2B  00                 	db	0
   577  00FC2C                     STR_100:
   578  00FC2C  4D                 	db	77	;'M'
   579  00FC2D  49                 	db	73	;'I'
   580  00FC2E  44                 	db	68	;'D'
   581  00FC2F  2D                 	db	45
   582  00FC30  4C                 	db	76	;'L'
   583  00FC31  45                 	db	69	;'E'
   584  00FC32  46                 	db	70	;'F'
   585  00FC33  54                 	db	84	;'T'
   586  00FC34  20                 	db	32
   587  00FC35  2D                 	db	45
   588  00FC36  2D                 	db	45
   589  00FC37  20                 	db	32
   590  00FC38  32                 	db	50	;'2'
   591  00FC39  73                 	db	115	;'s'
   592  00FC3A  20                 	db	32
   593  00FC3B  20                 	db	32
   594  00FC3C  00                 	db	0
   595  00FC3D                     STR_101:
   596  00FC3D  4D                 	db	77	;'M'
   597  00FC3E  49                 	db	73	;'I'
   598  00FC3F  44                 	db	68	;'D'
   599  00FC40  2D                 	db	45
   600  00FC41  52                 	db	82	;'R'
   601  00FC42  49                 	db	73	;'I'
   602  00FC43  47                 	db	71	;'G'
   603  00FC44  48                 	db	72	;'H'
   604  00FC45  54                 	db	84	;'T'
   605  00FC46  20                 	db	32
   606  00FC47  2D                 	db	45
   607  00FC48  2D                 	db	45
   608  00FC49  20                 	db	32
   609  00FC4A  32                 	db	50	;'2'
   610  00FC4B  73                 	db	115	;'s'
   611  00FC4C  20                 	db	32
   612  00FC4D  00                 	db	0
   613  00FC4E  45                 	db	69	;'E'
   614  00FC4F  4C                 	db	76	;'L'
   615  00FC50  53                 	db	83	;'S'
   616  00FC51  45                 	db	69	;'E'
   617  00FC52  20                 	db	32
   618  00FC53  54                 	db	84	;'T'
   619  00FC54  4F                 	db	79	;'O'
   620  00FC55  47                 	db	71	;'G'
   621  00FC56  47                 	db	71	;'G'
   622  00FC57  4C                 	db	76	;'L'
   623  00FC58  45                 	db	69	;'E'
   624  00FC59  53                 	db	83	;'S'
   625  00FC5A  20                 	db	32
   626  00FC5B  52                 	db	82	;'R'
   627  00FC5C  41                 	db	65	;'A'
   628  00FC5D  35                 	db	53	;'5'
   629  00FC5E  00                 	db	0
   630  00FC5F                     STR_72:
   631  00FC5F  41                 	db	65	;'A'
   632  00FC60  4C                 	db	76	;'L'
   633  00FC61  47                 	db	71	;'G'
   634  00FC62  31                 	db	49	;'1'
   635  00FC63  3A                 	db	58	;':'
   636  00FC64  20                 	db	32
   637  00FC65  39                 	db	57	;'9'
   638  00FC66  20                 	db	32
   639  00FC67  50                 	db	80	;'P'
   640  00FC68  4F                 	db	79	;'O'
   641  00FC69  50                 	db	80	;'P'
   642  00FC6A  4E                 	db	78	;'N'
   643  00FC6B  4F                 	db	79	;'O'
   644  00FC6C  54                 	db	84	;'T'
   645  00FC6D  41                 	db	65	;'A'
   646  00FC6E  42                 	db	66	;'B'
   647  00FC6F  00                 	db	0
   648  00FC70                     STR_92:
   649  00FC70  54                 	db	84	;'T'
   650  00FC71  53                 	db	83	;'S'
   651  00FC72  54                 	db	84	;'T'
   652  00FC73  3A                 	db	58	;':'
   653  00FC74  20                 	db	32
   654  00FC75  43                 	db	67	;'C'
   655  00FC76  4F                 	db	79	;'O'
   656  00FC77  4E                 	db	78	;'N'
   657  00FC78  44                 	db	68	;'D'
   658  00FC79  20                 	db	32
   659  00FC7A  53                 	db	83	;'S'
   660  00FC7B  4F                 	db	79	;'O'
   661  00FC7C  4C                 	db	76	;'L'
   662  00FC7D  4E                 	db	78	;'N'
   663  00FC7E  27                 	db	39
   664  00FC7F  44                 	db	68	;'D'
   665  00FC80  00                 	db	0
   666  00FC81                     STR_94:
   667  00FC81  54                 	db	84	;'T'
   668  00FC82  53                 	db	83	;'S'
   669  00FC83  54                 	db	84	;'T'
   670  00FC84  3A                 	db	58	;':'
   671  00FC85  20                 	db	32
   672  00FC86  50                 	db	80	;'P'
   673  00FC87  55                 	db	85	;'U'
   674  00FC88  53                 	db	83	;'S'
   675  00FC89  48                 	db	72	;'H'
   676  00FC8A  20                 	db	32
   677  00FC8B  53                 	db	83	;'S'
   678  00FC8C  4F                 	db	79	;'O'
   679  00FC8D  4C                 	db	76	;'L'
   680  00FC8E  4E                 	db	78	;'N'
   681  00FC8F  27                 	db	39
   682  00FC90  44                 	db	68	;'D'
   683  00FC91  00                 	db	0
   684  00FC92                     STR_68:
   685  00FC92  32                 	db	50	;'2'
   686  00FC93  2E                 	db	46
   687  00FC94  53                 	db	83	;'S'
   688  00FC95  4E                 	db	78	;'N'
   689  00FC96  52                 	db	82	;'R'
   690  00FC97  7C                 	db	124
   691  00FC98  34                 	db	52	;'4'
   692  00FC99  2E                 	db	46
   693  00FC9A  48                 	db	72	;'H'
   694  00FC9B  49                 	db	73	;'I'
   695  00FC9C  7C                 	db	124
   696  00FC9D  35                 	db	53	;'5'
   697  00FC9E  2E                 	db	46
   698  00FC9F  4D                 	db	77	;'M'
   699  00FCA0  45                 	db	69	;'E'
   700  00FCA1  44                 	db	68	;'D'
   701  00FCA2  00                 	db	0
   702  00FCA3                     STR_69:
   703  00FCA3  42                 	db	66	;'B'
   704  00FCA4  2E                 	db	46
   705  00FCA5  50                 	db	80	;'P'
   706  00FCA6  53                 	db	83	;'S'
   707  00FCA7  48                 	db	72	;'H'
   708  00FCA8  7C                 	db	124
   709  00FCA9  38                 	db	56	;'8'
   710  00FCAA  2E                 	db	46
   711  00FCAB  53                 	db	83	;'S'
   712  00FCAC  56                 	db	86	;'V'
   713  00FCAD  7C                 	db	124
   714  00FCAE  39                 	db	57	;'9'
   715  00FCAF  2E                 	db	46
   716  00FCB0  42                 	db	66	;'B'
   717  00FCB1  4C                 	db	76	;'L'
   718  00FCB2  4B                 	db	75	;'K'
   719  00FCB3  00                 	db	0
   720  00FCB4                     STR_110:
   721  00FCB4  54                 	db	84	;'T'
   722  00FCB5  53                 	db	83	;'S'
   723  00FCB6  54                 	db	84	;'T'
   724  00FCB7  3A                 	db	58	;':'
   725  00FCB8  20                 	db	32
   726  00FCB9  42                 	db	66	;'B'
   727  00FCBA  4F                 	db	79	;'O'
   728  00FCBB  54                 	db	84	;'T'
   729  00FCBC  48                 	db	72	;'H'
   730  00FCBD  20                 	db	32
   731  00FCBE  53                 	db	83	;'S'
   732  00FCBF  45                 	db	69	;'E'
   733  00FCC0  52                 	db	82	;'R'
   734  00FCC1  56                 	db	86	;'V'
   735  00FCC2  4F                 	db	79	;'O'
   736  00FCC3  53                 	db	83	;'S'
   737  00FCC4  00                 	db	0
   738  00FCC5                     STR_41:
   739  00FCC5  4C                 	db	76	;'L'
   740  00FCC6  4F                 	db	79	;'O'
   741  00FCC7  47                 	db	71	;'G'
   742  00FCC8  20                 	db	32
   743  00FCC9  31                 	db	49	;'1'
   744  00FCCA  20                 	db	32
   745  00FCCB  20                 	db	32
   746  00FCCC  20                 	db	32
   747  00FCCD  20                 	db	32
   748  00FCCE  20                 	db	32
   749  00FCCF  20                 	db	32
   750  00FCD0  20                 	db	32
   751  00FCD1  20                 	db	32
   752  00FCD2  20                 	db	32
   753  00FCD3  20                 	db	32
   754  00FCD4  20                 	db	32
   755  00FCD5  00                 	db	0
   756  00FCD6                     STR_40:
   757  00FCD6  4C                 	db	76	;'L'
   758  00FCD7  4F                 	db	79	;'O'
   759  00FCD8  47                 	db	71	;'G'
   760  00FCD9  20                 	db	32
   761  00FCDA  32                 	db	50	;'2'
   762  00FCDB  20                 	db	32
   763  00FCDC  20                 	db	32
   764  00FCDD  20                 	db	32
   765  00FCDE  20                 	db	32
   766  00FCDF  20                 	db	32
   767  00FCE0  20                 	db	32
   768  00FCE1  20                 	db	32
   769  00FCE2  20                 	db	32
   770  00FCE3  20                 	db	32
   771  00FCE4  20                 	db	32
   772  00FCE5  20                 	db	32
   773  00FCE6  00                 	db	0
   774  00FCE7                     STR_44:
   775  00FCE7  4C                 	db	76	;'L'
   776  00FCE8  4F                 	db	79	;'O'
   777  00FCE9  47                 	db	71	;'G'
   778  00FCEA  20                 	db	32
   779  00FCEB  33                 	db	51	;'3'
   780  00FCEC  20                 	db	32
   781  00FCED  20                 	db	32
   782  00FCEE  20                 	db	32
   783  00FCEF  20                 	db	32
   784  00FCF0  20                 	db	32
   785  00FCF1  20                 	db	32
   786  00FCF2  20                 	db	32
   787  00FCF3  20                 	db	32
   788  00FCF4  20                 	db	32
   789  00FCF5  20                 	db	32
   790  00FCF6  20                 	db	32
   791  00FCF7  00                 	db	0
   792  00FCF8                     STR_48:
   793  00FCF8  4C                 	db	76	;'L'
   794  00FCF9  4F                 	db	79	;'O'
   795  00FCFA  47                 	db	71	;'G'
   796  00FCFB  20                 	db	32
   797  00FCFC  34                 	db	52	;'4'
   798  00FCFD  20                 	db	32
   799  00FCFE  20                 	db	32
   800  00FCFF  20                 	db	32
   801  00FD00  20                 	db	32
   802  00FD01  20                 	db	32
   803  00FD02  20                 	db	32
   804  00FD03  20                 	db	32
   805  00FD04  20                 	db	32
   806  00FD05  20                 	db	32
   807  00FD06  20                 	db	32
   808  00FD07  20                 	db	32
   809  00FD08  00                 	db	0
   810  00FD09                     STR_36:
   811  00FD09  33                 	db	51	;'3'
   812  00FD0A  2E                 	db	46
   813  00FD0B  20                 	db	32
   814  00FD0C  4C                 	db	76	;'L'
   815  00FD0D  4F                 	db	79	;'O'
   816  00FD0E  47                 	db	71	;'G'
   817  00FD0F  53                 	db	83	;'S'
   818  00FD10  20                 	db	32
   819  00FD11  20                 	db	32
   820  00FD12  20                 	db	32
   821  00FD13  20                 	db	32
   822  00FD14  20                 	db	32
   823  00FD15  20                 	db	32
   824  00FD16  20                 	db	32
   825  00FD17  20                 	db	32
   826  00FD18  20                 	db	32
   827  00FD19  00                 	db	0
   828  00FD1A                     STR_32:
   829  00FD1A  32                 	db	50	;'2'
   830  00FD1B  2E                 	db	46
   831  00FD1C  20                 	db	32
   832  00FD1D  53                 	db	83	;'S'
   833  00FD1E  4F                 	db	79	;'O'
   834  00FD1F  52                 	db	82	;'R'
   835  00FD20  54                 	db	84	;'T'
   836  00FD21  20                 	db	32
   837  00FD22  20                 	db	32
   838  00FD23  20                 	db	32
   839  00FD24  20                 	db	32
   840  00FD25  20                 	db	32
   841  00FD26  20                 	db	32
   842  00FD27  20                 	db	32
   843  00FD28  20                 	db	32
   844  00FD29  20                 	db	32
   845  00FD2A  00                 	db	0
   846  00FD2B                     STR_33:
   847  00FD2B  31                 	db	49	;'1'
   848  00FD2C  2E                 	db	46
   849  00FD2D  20                 	db	32
   850  00FD2E  44                 	db	68	;'D'
   851  00FD2F  41                 	db	65	;'A'
   852  00FD30  54                 	db	84	;'T'
   853  00FD31  45                 	db	69	;'E'
   854  00FD32  2F                 	db	47
   855  00FD33  54                 	db	84	;'T'
   856  00FD34  49                 	db	73	;'I'
   857  00FD35  4D                 	db	77	;'M'
   858  00FD36  45                 	db	69	;'E'
   859  00FD37  20                 	db	32
   860  00FD38  20                 	db	32
   861  00FD39  20                 	db	32
   862  00FD3A  20                 	db	32
   863  00FD3B  00                 	db	0
   864  00FD3C                     STR_24:
   865  00FD3C  20                 	db	32
   866  00FD3D  2D                 	db	45
   867  00FD3E  2D                 	db	45
   868  00FD3F  20                 	db	32
   869  00FD40  50                 	db	80	;'P'
   870  00FD41  4F                 	db	79	;'O'
   871  00FD42  50                 	db	80	;'P'
   872  00FD43  20                 	db	32
   873  00FD44  20                 	db	32
   874  00FD45  43                 	db	67	;'C'
   875  00FD46  41                 	db	65	;'A'
   876  00FD47  4E                 	db	78	;'N'
   877  00FD48  20                 	db	32
   878  00FD49  2D                 	db	45
   879  00FD4A  2D                 	db	45
   880  00FD4B  20                 	db	32
   881  00FD4C  00                 	db	0
   882  00FD4D                     STR_26:
   883  00FD4D  20                 	db	32
   884  00FD4E  2D                 	db	45
   885  00FD4F  2D                 	db	45
   886  00FD50  20                 	db	32
   887  00FD51  53                 	db	83	;'S'
   888  00FD52  4F                 	db	79	;'O'
   889  00FD53  55                 	db	85	;'U'
   890  00FD54  50                 	db	80	;'P'
   891  00FD55  20                 	db	32
   892  00FD56  43                 	db	67	;'C'
   893  00FD57  41                 	db	65	;'A'
   894  00FD58  4E                 	db	78	;'N'
   895  00FD59  20                 	db	32
   896  00FD5A  2D                 	db	45
   897  00FD5B  2D                 	db	45
   898  00FD5C  20                 	db	32
   899  00FD5D  00                 	db	0
   900  00FD5E                     STR_28:
   901  00FD5E  2D                 	db	45
   902  00FD5F  2D                 	db	45
   903  00FD60  20                 	db	32
   904  00FD61  54                 	db	84	;'T'
   905  00FD62  4F                 	db	79	;'O'
   906  00FD63  54                 	db	84	;'T'
   907  00FD64  41                 	db	65	;'A'
   908  00FD65  4C                 	db	76	;'L'
   909  00FD66  20                 	db	32
   910  00FD67  43                 	db	67	;'C'
   911  00FD68  41                 	db	65	;'A'
   912  00FD69  4E                 	db	78	;'N'
   913  00FD6A  53                 	db	83	;'S'
   914  00FD6B  20                 	db	32
   915  00FD6C  2D                 	db	45
   916  00FD6D  2D                 	db	45
   917  00FD6E  00                 	db	0
   918  00FD6F                     STR_39:
   919  00FD6F  4C                 	db	76	;'L'
   920  00FD70  4F                 	db	79	;'O'
   921  00FD71  47                 	db	71	;'G'
   922  00FD72  20                 	db	32
   923  00FD73  31                 	db	49	;'1'
   924  00FD74  20                 	db	32
   925  00FD75  20                 	db	32
   926  00FD76  20                 	db	32
   927  00FD77  20                 	db	32
   928  00FD78  20                 	db	32
   929  00FD79  20                 	db	32
   930  00FD7A  20                 	db	32
   931  00FD7B  20                 	db	32
   932  00FD7C  20                 	db	32
   933  00FD7D  20                 	db	32
   934  00FD7E  3C                 	db	60	;'<'
   935  00FD7F  00                 	db	0
   936  00FD80                     STR_42:
   937  00FD80  4C                 	db	76	;'L'
   938  00FD81  4F                 	db	79	;'O'
   939  00FD82  47                 	db	71	;'G'
   940  00FD83  20                 	db	32
   941  00FD84  32                 	db	50	;'2'
   942  00FD85  20                 	db	32
   943  00FD86  20                 	db	32
   944  00FD87  20                 	db	32
   945  00FD88  20                 	db	32
   946  00FD89  20                 	db	32
   947  00FD8A  20                 	db	32
   948  00FD8B  20                 	db	32
   949  00FD8C  20                 	db	32
   950  00FD8D  20                 	db	32
   951  00FD8E  20                 	db	32
   952  00FD8F  3C                 	db	60	;'<'
   953  00FD90  00                 	db	0
   954  00FD91                     STR_46:
   955  00FD91  4C                 	db	76	;'L'
   956  00FD92  4F                 	db	79	;'O'
   957  00FD93  47                 	db	71	;'G'
   958  00FD94  20                 	db	32
   959  00FD95  33                 	db	51	;'3'
   960  00FD96  20                 	db	32
   961  00FD97  20                 	db	32
   962  00FD98  20                 	db	32
   963  00FD99  20                 	db	32
   964  00FD9A  20                 	db	32
   965  00FD9B  20                 	db	32
   966  00FD9C  20                 	db	32
   967  00FD9D  20                 	db	32
   968  00FD9E  20                 	db	32
   969  00FD9F  20                 	db	32
   970  00FDA0  3C                 	db	60	;'<'
   971  00FDA1  00                 	db	0
   972  00FDA2                     STR_50:
   973  00FDA2  4C                 	db	76	;'L'
   974  00FDA3  4F                 	db	79	;'O'
   975  00FDA4  47                 	db	71	;'G'
   976  00FDA5  20                 	db	32
   977  00FDA6  34                 	db	52	;'4'
   978  00FDA7  20                 	db	32
   979  00FDA8  20                 	db	32
   980  00FDA9  20                 	db	32
   981  00FDAA  20                 	db	32
   982  00FDAB  20                 	db	32
   983  00FDAC  20                 	db	32
   984  00FDAD  20                 	db	32
   985  00FDAE  20                 	db	32
   986  00FDAF  20                 	db	32
   987  00FDB0  20                 	db	32
   988  00FDB1  3C                 	db	60	;'<'
   989  00FDB2  00                 	db	0
   990  00FDB3                     STR_38:
   991  00FDB3  33                 	db	51	;'3'
   992  00FDB4  2E                 	db	46
   993  00FDB5  20                 	db	32
   994  00FDB6  4C                 	db	76	;'L'
   995  00FDB7  4F                 	db	79	;'O'
   996  00FDB8  47                 	db	71	;'G'
   997  00FDB9  53                 	db	83	;'S'
   998  00FDBA  20                 	db	32
   999  00FDBB  20                 	db	32
  1000  00FDBC  20                 	db	32
  1001  00FDBD  20                 	db	32
  1002  00FDBE  20                 	db	32
  1003  00FDBF  20                 	db	32
  1004  00FDC0  20                 	db	32
  1005  00FDC1  20                 	db	32
  1006  00FDC2  3C                 	db	60	;'<'
  1007  00FDC3  00                 	db	0
  1008  00FDC4                     STR_34:
  1009  00FDC4  32                 	db	50	;'2'
  1010  00FDC5  2E                 	db	46
  1011  00FDC6  20                 	db	32
  1012  00FDC7  53                 	db	83	;'S'
  1013  00FDC8  4F                 	db	79	;'O'
  1014  00FDC9  52                 	db	82	;'R'
  1015  00FDCA  54                 	db	84	;'T'
  1016  00FDCB  20                 	db	32
  1017  00FDCC  20                 	db	32
  1018  00FDCD  20                 	db	32
  1019  00FDCE  20                 	db	32
  1020  00FDCF  20                 	db	32
  1021  00FDD0  20                 	db	32
  1022  00FDD1  20                 	db	32
  1023  00FDD2  20                 	db	32
  1024  00FDD3  3C                 	db	60	;'<'
  1025  00FDD4  00                 	db	0
  1026  00FDD5                     STR_31:
  1027  00FDD5  31                 	db	49	;'1'
  1028  00FDD6  2E                 	db	46
  1029  00FDD7  20                 	db	32
  1030  00FDD8  44                 	db	68	;'D'
  1031  00FDD9  41                 	db	65	;'A'
  1032  00FDDA  54                 	db	84	;'T'
  1033  00FDDB  45                 	db	69	;'E'
  1034  00FDDC  2F                 	db	47
  1035  00FDDD  54                 	db	84	;'T'
  1036  00FDDE  49                 	db	73	;'I'
  1037  00FDDF  4D                 	db	77	;'M'
  1038  00FDE0  45                 	db	69	;'E'
  1039  00FDE1  20                 	db	32
  1040  00FDE2  20                 	db	32
  1041  00FDE3  20                 	db	32
  1042  00FDE4  3C                 	db	60	;'<'
  1043  00FDE5  00                 	db	0
  1044  00FDE6                     STR_6:
  1045  00FDE6  50                 	db	80	;'P'
  1046  00FDE7  41                 	db	65	;'A'
  1047  00FDE8  55                 	db	85	;'U'
  1048  00FDE9  53                 	db	83	;'S'
  1049  00FDEA  45                 	db	69	;'E'
  1050  00FDEB  20                 	db	32
  1051  00FDEC  3C                 	db	60	;'<'
  1052  00FDED  20                 	db	32
  1053  00FDEE  7C                 	db	124
  1054  00FDEF  20                 	db	32
  1055  00FDF0  42                 	db	66	;'B'
  1056  00FDF1  41                 	db	65	;'A'
  1057  00FDF2  43                 	db	67	;'C'
  1058  00FDF3  4B                 	db	75	;'K'
  1059  00FDF4  20                 	db	32
  1060  00FDF5  3E                 	db	62	;'>'
  1061  00FDF6  00                 	db	0
  1062  00FDF7                     STR_30:
  1063  00FDF7  50                 	db	80	;'P'
  1064  00FDF8  55                 	db	85	;'U'
  1065  00FDF9  53                 	db	83	;'S'
  1066  00FDFA  48                 	db	72	;'H'
  1067  00FDFB  20                 	db	32
  1068  00FDFC  54                 	db	84	;'T'
  1069  00FDFD  4F                 	db	79	;'O'
  1070  00FDFE  20                 	db	32
  1071  00FDFF  43                 	db	67	;'C'
  1072  00FE00  4F                 	db	79	;'O'
  1073  00FE01  4E                 	db	78	;'N'
  1074  00FE02  54                 	db	84	;'T'
  1075  00FE03  49                 	db	73	;'I'
  1076  00FE04  4E                 	db	78	;'N'
  1077  00FE05  55                 	db	85	;'U'
  1078  00FE06  45                 	db	69	;'E'
  1079  00FE07  00                 	db	0
  1080  00FE08                     STR_27:
  1081  00FE08  4E                 	db	78	;'N'
  1082  00FE09  4C                 	db	76	;'L'
  1083  00FE0A  41                 	db	65	;'A'
  1084  00FE0B  42                 	db	66	;'B'
  1085  00FE0C  3A                 	db	58	;':'
  1086  00FE0D  20                 	db	32
  1087  00FE0E  25                 	db	37
  1088  00FE0F  64                 	db	100	;'d'
  1089  00FE10  7C                 	db	124
  1090  00FE11  4C                 	db	76	;'L'
  1091  00FE12  41                 	db	65	;'A'
  1092  00FE13  42                 	db	66	;'B'
  1093  00FE14  3A                 	db	58	;':'
  1094  00FE15  20                 	db	32
  1095  00FE16  25                 	db	37
  1096  00FE17  64                 	db	100	;'d'
  1097  00FE18  00                 	db	0
  1098  00FE19                     STR_25:
  1099  00FE19  4E                 	db	78	;'N'
  1100  00FE1A  54                 	db	84	;'T'
  1101  00FE1B  41                 	db	65	;'A'
  1102  00FE1C  42                 	db	66	;'B'
  1103  00FE1D  3A                 	db	58	;':'
  1104  00FE1E  20                 	db	32
  1105  00FE1F  25                 	db	37
  1106  00FE20  64                 	db	100	;'d'
  1107  00FE21  7C                 	db	124
  1108  00FE22  54                 	db	84	;'T'
  1109  00FE23  41                 	db	65	;'A'
  1110  00FE24  42                 	db	66	;'B'
  1111  00FE25  3A                 	db	58	;':'
  1112  00FE26  20                 	db	32
  1113  00FE27  25                 	db	37
  1114  00FE28  64                 	db	100	;'d'
  1115  00FE29  00                 	db	0
  1116  00FE2A                     STR_83:
  1117  00FE2A  4D                 	db	77	;'M'
  1118  00FE2B  41                 	db	65	;'A'
  1119  00FE2C  47                 	db	71	;'G'
  1120  00FE2D  5F                 	db	95	;'_'
  1121  00FE2E  73                 	db	115	;'s'
  1122  00FE2F  69                 	db	105	;'i'
  1123  00FE30  67                 	db	103	;'g'
  1124  00FE31  6E                 	db	110	;'n'
  1125  00FE32  61                 	db	97	;'a'
  1126  00FE33  6C                 	db	108	;'l'
  1127  00FE34  3A                 	db	58	;':'
  1128  00FE35  20                 	db	32
  1129  00FE36  25                 	db	37
  1130  00FE37  64                 	db	100	;'d'
  1131  00FE38  20                 	db	32
  1132  00FE39  00                 	db	0
  1133  00FE3A                     STR_103:
  1134  00FE3A  54                 	db	84	;'T'
  1135  00FE3B  53                 	db	83	;'S'
  1136  00FE3C  54                 	db	84	;'T'
  1137  00FE3D  3A                 	db	58	;':'
  1138  00FE3E  20                 	db	32
  1139  00FE3F  54                 	db	84	;'T'
  1140  00FE40  49                 	db	73	;'I'
  1141  00FE41  4C                 	db	76	;'L'
  1142  00FE42  54                 	db	84	;'T'
  1143  00FE43  20                 	db	32
  1144  00FE44  53                 	db	83	;'S'
  1145  00FE45  45                 	db	69	;'E'
  1146  00FE46  52                 	db	82	;'R'
  1147  00FE47  56                 	db	86	;'V'
  1148  00FE48  4F                 	db	79	;'O'
  1149  00FE49  00                 	db	0
  1150  00FE4A                     STR_4:
  1151  00FE4A  44                 	db	68	;'D'
  1152  00FE4B  49                 	db	73	;'I'
  1153  00FE4C  44                 	db	68	;'D'
  1154  00FE4D  4E                 	db	78	;'N'
  1155  00FE4E  27                 	db	39
  1156  00FE4F  54                 	db	84	;'T'
  1157  00FE50  20                 	db	32
  1158  00FE51  43                 	db	67	;'C'
  1159  00FE52  4F                 	db	79	;'O'
  1160  00FE53  4D                 	db	77	;'M'
  1161  00FE54  50                 	db	80	;'P'
  1162  00FE55  4C                 	db	76	;'L'
  1163  00FE56  45                 	db	69	;'E'
  1164  00FE57  54                 	db	84	;'T'
  1165  00FE58  45                 	db	69	;'E'
  1166  00FE59  00                 	db	0
  1167  00FE5A                     STR_80:
  1168  00FE5A  49                 	db	73	;'I'
  1169  00FE5B  52                 	db	82	;'R'
  1170  00FE5C  5F                 	db	95	;'_'
  1171  00FE5D  73                 	db	115	;'s'
  1172  00FE5E  69                 	db	105	;'i'
  1173  00FE5F  67                 	db	103	;'g'
  1174  00FE60  6E                 	db	110	;'n'
  1175  00FE61  61                 	db	97	;'a'
  1176  00FE62  6C                 	db	108	;'l'
  1177  00FE63  3A                 	db	58	;':'
  1178  00FE64  20                 	db	32
  1179  00FE65  25                 	db	37
  1180  00FE66  64                 	db	100	;'d'
  1181  00FE67  20                 	db	32
  1182  00FE68  00                 	db	0
  1183  00FE69                     STR_109:
  1184  00FE69  43                 	db	67	;'C'
  1185  00FE6A  41                 	db	65	;'A'
  1186  00FE6B  4D                 	db	77	;'M'
  1187  00FE6C  20                 	db	32
  1188  00FE6D  44                 	db	68	;'D'
  1189  00FE6E  57                 	db	87	;'W'
  1190  00FE6F  4E                 	db	78	;'N'
  1191  00FE70  20                 	db	32
  1192  00FE71  7C                 	db	124
  1193  00FE72  52                 	db	82	;'R'
  1194  00FE73  43                 	db	67	;'C'
  1195  00FE74  30                 	db	48	;'0'
  1196  00FE75  3D                 	db	61	;'='
  1197  00FE76  30                 	db	48	;'0'
  1198  00FE77  00                 	db	0
  1199  00FE78                     STR_108:
  1200  00FE78  43                 	db	67	;'C'
  1201  00FE79  41                 	db	65	;'A'
  1202  00FE7A  4D                 	db	77	;'M'
  1203  00FE7B  20                 	db	32
  1204  00FE7C  55                 	db	85	;'U'
  1205  00FE7D  50                 	db	80	;'P'
  1206  00FE7E  20                 	db	32
  1207  00FE7F  20                 	db	32
  1208  00FE80  7C                 	db	124
  1209  00FE81  52                 	db	82	;'R'
  1210  00FE82  43                 	db	67	;'C'
  1211  00FE83  30                 	db	48	;'0'
  1212  00FE84  3D                 	db	61	;'='
  1213  00FE85  31                 	db	49	;'1'
  1214  00FE86  00                 	db	0
  1215  00FE87                     STR_82:
  1216  00FE87  54                 	db	84	;'T'
  1217  00FE88  53                 	db	83	;'S'
  1218  00FE89  54                 	db	84	;'T'
  1219  00FE8A  3A                 	db	58	;':'
  1220  00FE8B  20                 	db	32
  1221  00FE8C  4D                 	db	77	;'M'
  1222  00FE8D  41                 	db	65	;'A'
  1223  00FE8E  47                 	db	71	;'G'
  1224  00FE8F  4E                 	db	78	;'N'
  1225  00FE90  45                 	db	69	;'E'
  1226  00FE91  54                 	db	84	;'T'
  1227  00FE92  49                 	db	73	;'I'
  1228  00FE93  53                 	db	83	;'S'
  1229  00FE94  4D                 	db	77	;'M'
  1230  00FE95  00                 	db	0
  1231  00FE96                     STR_107:
  1232  00FE96  54                 	db	84	;'T'
  1233  00FE97  53                 	db	83	;'S'
  1234  00FE98  54                 	db	84	;'T'
  1235  00FE99  3A                 	db	58	;':'
  1236  00FE9A  20                 	db	32
  1237  00FE9B  43                 	db	67	;'C'
  1238  00FE9C  41                 	db	65	;'A'
  1239  00FE9D  4D                 	db	77	;'M'
  1240  00FE9E  20                 	db	32
  1241  00FE9F  53                 	db	83	;'S'
  1242  00FEA0  45                 	db	69	;'E'
  1243  00FEA1  52                 	db	82	;'R'
  1244  00FEA2  56                 	db	86	;'V'
  1245  00FEA3  4F                 	db	79	;'O'
  1246  00FEA4  00                 	db	0
  1247  00FEA5                     STR_96:
  1248  00FEA5  54                 	db	84	;'T'
  1249  00FEA6  53                 	db	83	;'S'
  1250  00FEA7  54                 	db	84	;'T'
  1251  00FEA8  3A                 	db	58	;':'
  1252  00FEA9  20                 	db	32
  1253  00FEAA  50                 	db	80	;'P'
  1254  00FEAB  41                 	db	65	;'A'
  1255  00FEAC  4E                 	db	78	;'N'
  1256  00FEAD  20                 	db	32
  1257  00FEAE  53                 	db	83	;'S'
  1258  00FEAF  45                 	db	69	;'E'
  1259  00FEB0  52                 	db	82	;'R'
  1260  00FEB1  56                 	db	86	;'V'
  1261  00FEB2  4F                 	db	79	;'O'
  1262  00FEB3  00                 	db	0
  1263  00FEB4                     STR_75:
  1264  00FEB4  41                 	db	65	;'A'
  1265  00FEB5  4C                 	db	76	;'L'
  1266  00FEB6  47                 	db	71	;'G'
  1267  00FEB7  34                 	db	52	;'4'
  1268  00FEB8  3A                 	db	58	;':'
  1269  00FEB9  20                 	db	32
  1270  00FEBA  41                 	db	65	;'A'
  1271  00FEBB  4C                 	db	76	;'L'
  1272  00FEBC  4C                 	db	76	;'L'
  1273  00FEBD  20                 	db	32
  1274  00FEBE  43                 	db	67	;'C'
  1275  00FEBF  41                 	db	65	;'A'
  1276  00FEC0  4E                 	db	78	;'N'
  1277  00FEC1  53                 	db	83	;'S'
  1278  00FEC2  00                 	db	0
  1279  00FEC3                     STR_90:
  1280  00FEC3  54                 	db	84	;'T'
  1281  00FEC4  53                 	db	83	;'S'
  1282  00FEC5  54                 	db	84	;'T'
  1283  00FEC6  3A                 	db	58	;':'
  1284  00FEC7  20                 	db	32
  1285  00FEC8  44                 	db	68	;'D'
  1286  00FEC9  43                 	db	67	;'C'
  1287  00FECA  20                 	db	32
  1288  00FECB  4D                 	db	77	;'M'
  1289  00FECC  4F                 	db	79	;'O'
  1290  00FECD  54                 	db	84	;'T'
  1291  00FECE  4F                 	db	79	;'O'
  1292  00FECF  52                 	db	82	;'R'
  1293  00FED0  53                 	db	83	;'S'
  1294  00FED1  00                 	db	0
  1295  00FED2                     STR_70:
  1296  00FED2  41                 	db	65	;'A'
  1297  00FED3  4C                 	db	76	;'L'
  1298  00FED4  47                 	db	71	;'G'
  1299  00FED5  4F                 	db	79	;'O'
  1300  00FED6  52                 	db	82	;'R'
  1301  00FED7  49                 	db	73	;'I'
  1302  00FED8  54                 	db	84	;'T'
  1303  00FED9  48                 	db	72	;'H'
  1304  00FEDA  4D                 	db	77	;'M'
  1305  00FEDB  20                 	db	32
  1306  00FEDC  54                 	db	84	;'T'
  1307  00FEDD  45                 	db	69	;'E'
  1308  00FEDE  53                 	db	83	;'S'
  1309  00FEDF  54                 	db	84	;'T'
  1310  00FEE0  00                 	db	0
  1311  00FEE1                     STR_91:
  1312  00FEE1  50                 	db	80	;'P'
  1313  00FEE2  49                 	db	73	;'I'
  1314  00FEE3  4E                 	db	78	;'N'
  1315  00FEE4  20                 	db	32
  1316  00FEE5  52                 	db	82	;'R'
  1317  00FEE6  41                 	db	65	;'A'
  1318  00FEE7  35                 	db	53	;'5'
  1319  00FEE8  20                 	db	32
  1320  00FEE9  48                 	db	72	;'H'
  1321  00FEEA  49                 	db	73	;'I'
  1322  00FEEB  47                 	db	71	;'G'
  1323  00FEEC  48                 	db	72	;'H'
  1324  00FEED  2E                 	db	46
  1325  00FEEE  00                 	db	0
  1326  00FEEF                     STR_73:
  1327  00FEEF  41                 	db	65	;'A'
  1328  00FEF0  4C                 	db	76	;'L'
  1329  00FEF1  47                 	db	71	;'G'
  1330  00FEF2  32                 	db	50	;'2'
  1331  00FEF3  3A                 	db	58	;':'
  1332  00FEF4  20                 	db	32
  1333  00FEF5  31                 	db	49	;'1'
  1334  00FEF6  32                 	db	50	;'2'
  1335  00FEF7  20                 	db	32
  1336  00FEF8  43                 	db	67	;'C'
  1337  00FEF9  41                 	db	65	;'A'
  1338  00FEFA  4E                 	db	78	;'N'
  1339  00FEFB  53                 	db	83	;'S'
  1340  00FEFC  00                 	db	0
  1341  00FEFD                     STR_76:
  1342  00FEFD  41                 	db	65	;'A'
  1343  00FEFE  4C                 	db	76	;'L'
  1344  00FEFF  47                 	db	71	;'G'
  1345  00FF00  35                 	db	53	;'5'
  1346  00FF01  3A                 	db	58	;':'
  1347  00FF02  20                 	db	32
  1348  00FF03  4E                 	db	78	;'N'
  1349  00FF04  4F                 	db	79	;'O'
  1350  00FF05  20                 	db	32
  1351  00FF06  43                 	db	67	;'C'
  1352  00FF07  41                 	db	65	;'A'
  1353  00FF08  4E                 	db	78	;'N'
  1354  00FF09  53                 	db	83	;'S'
  1355  00FF0A  00                 	db	0
  1356  00FF0B                     STR_71:
  1357  00FF0B  50                 	db	80	;'P'
  1358  00FF0C  55                 	db	85	;'U'
  1359  00FF0D  53                 	db	83	;'S'
  1360  00FF0E  48                 	db	72	;'H'
  1361  00FF0F  20                 	db	32
  1362  00FF10  54                 	db	84	;'T'
  1363  00FF11  4F                 	db	79	;'O'
  1364  00FF12  20                 	db	32
  1365  00FF13  53                 	db	83	;'S'
  1366  00FF14  54                 	db	84	;'T'
  1367  00FF15  41                 	db	65	;'A'
  1368  00FF16  52                 	db	82	;'R'
  1369  00FF17  54                 	db	84	;'T'
  1370  00FF18  00                 	db	0
  1371  00FF19                     STR_23:
  1372  00FF19  25                 	db	37
  1373  00FF1A  64                 	db	100	;'d'
  1374  00FF1B  20                 	db	32
  1375  00FF1C  4D                 	db	77	;'M'
  1376  00FF1D  49                 	db	73	;'I'
  1377  00FF1E  4E                 	db	78	;'N'
  1378  00FF1F  20                 	db	32
  1379  00FF20  25                 	db	37
  1380  00FF21  64                 	db	100	;'d'
  1381  00FF22  20                 	db	32
  1382  00FF23  53                 	db	83	;'S'
  1383  00FF24  45                 	db	69	;'E'
  1384  00FF25  43                 	db	67	;'C'
  1385  00FF26  00                 	db	0
  1386  00FF27                     STR_2:
  1387  00FF27  54                 	db	84	;'T'
  1388  00FF28  49                 	db	73	;'I'
  1389  00FF29  4D                 	db	77	;'M'
  1390  00FF2A  45                 	db	69	;'E'
  1391  00FF2B  3A                 	db	58	;':'
  1392  00FF2C  20                 	db	32
  1393  00FF2D  25                 	db	37
  1394  00FF2E  64                 	db	100	;'d'
  1395  00FF2F  3A                 	db	58	;':'
  1396  00FF30  25                 	db	37
  1397  00FF31  30                 	db	48	;'0'
  1398  00FF32  32                 	db	50	;'2'
  1399  00FF33  64                 	db	100	;'d'
  1400  00FF34  00                 	db	0
  1401  00FF35                     STR_79:
  1402  00FF35  54                 	db	84	;'T'
  1403  00FF36  53                 	db	83	;'S'
  1404  00FF37  54                 	db	84	;'T'
  1405  00FF38  3A                 	db	58	;':'
  1406  00FF39  20                 	db	32
  1407  00FF3A  49                 	db	73	;'I'
  1408  00FF3B  52                 	db	82	;'R'
  1409  00FF3C  20                 	db	32
  1410  00FF3D  53                 	db	83	;'S'
  1411  00FF3E  4E                 	db	78	;'N'
  1412  00FF3F  53                 	db	83	;'S'
  1413  00FF40  52                 	db	82	;'R'
  1414  00FF41  00                 	db	0
  1415  00FF42                     STR_65:
  1416  00FF42  54                 	db	84	;'T'
  1417  00FF43  49                 	db	73	;'I'
  1418  00FF44  4D                 	db	77	;'M'
  1419  00FF45  45                 	db	69	;'E'
  1420  00FF46  20                 	db	32
  1421  00FF47  25                 	db	37
  1422  00FF48  64                 	db	100	;'d'
  1423  00FF49  3A                 	db	58	;':'
  1424  00FF4A  25                 	db	37
  1425  00FF4B  30                 	db	48	;'0'
  1426  00FF4C  32                 	db	50	;'2'
  1427  00FF4D  64                 	db	100	;'d'
  1428  00FF4E  00                 	db	0
  1429  00FF4F                     STR_74:
  1430  00FF4F  41                 	db	65	;'A'
  1431  00FF50  4C                 	db	76	;'L'
  1432  00FF51  47                 	db	71	;'G'
  1433  00FF52  33                 	db	51	;'3'
  1434  00FF53  3A                 	db	58	;':'
  1435  00FF54  20                 	db	32
  1436  00FF55  31                 	db	49	;'1'
  1437  00FF56  20                 	db	32
  1438  00FF57  43                 	db	67	;'C'
  1439  00FF58  41                 	db	65	;'A'
  1440  00FF59  4E                 	db	78	;'N'
  1441  00FF5A  00                 	db	0
  1442  00FF5B                     STR_93:
  1443  00FF5B  50                 	db	80	;'P'
  1444  00FF5C  49                 	db	73	;'I'
  1445  00FF5D  4E                 	db	78	;'N'
  1446  00FF5E  20                 	db	32
  1447  00FF5F  52                 	db	82	;'R'
  1448  00FF60  41                 	db	65	;'A'
  1449  00FF61  33                 	db	51	;'3'
  1450  00FF62  2E                 	db	46
  1451  00FF63  2E                 	db	46
  1452  00FF64  2E                 	db	46
  1453  00FF65  00                 	db	0
  1454  00FF66                     STR_95:
  1455  00FF66  50                 	db	80	;'P'
  1456  00FF67  49                 	db	73	;'I'
  1457  00FF68  4E                 	db	78	;'N'
  1458  00FF69  20                 	db	32
  1459  00FF6A  52                 	db	82	;'R'
  1460  00FF6B  41                 	db	65	;'A'
  1461  00FF6C  34                 	db	52	;'4'
  1462  00FF6D  2E                 	db	46
  1463  00FF6E  2E                 	db	46
  1464  00FF6F  2E                 	db	46
  1465  00FF70  00                 	db	0
  1466  00FF71                     STR_113:
  1467  00FF71  50                 	db	80	;'P'
  1468  00FF72  55                 	db	85	;'U'
  1469  00FF73  53                 	db	83	;'S'
  1470  00FF74  48                 	db	72	;'H'
  1471  00FF75  45                 	db	69	;'E'
  1472  00FF76  52                 	db	82	;'R'
  1473  00FF77  20                 	db	32
  1474  00FF78  54                 	db	84	;'T'
  1475  00FF79  53                 	db	83	;'S'
  1476  00FF7A  54                 	db	84	;'T'
  1477  00FF7B  00                 	db	0
  1478  00FF7C                     STR_64:
  1479  00FF7C  53                 	db	83	;'S'
  1480  00FF7D  4F                 	db	79	;'O'
  1481  00FF7E  52                 	db	82	;'R'
  1482  00FF7F  54                 	db	84	;'T'
  1483  00FF80  49                 	db	73	;'I'
  1484  00FF81  4E                 	db	78	;'N'
  1485  00FF82  47                 	db	71	;'G'
  1486  00FF83  2E                 	db	46
  1487  00FF84  2E                 	db	46
  1488  00FF85  2E                 	db	46
  1489  00FF86  00                 	db	0
  1490  00FF87                     STR_84:
  1491  00FF87  54                 	db	84	;'T'
  1492  00FF88  53                 	db	83	;'S'
  1493  00FF89  54                 	db	84	;'T'
  1494  00FF8A  3A                 	db	58	;':'
  1495  00FF8B  20                 	db	32
  1496  00FF8C  43                 	db	67	;'C'
  1497  00FF8D  4F                 	db	79	;'O'
  1498  00FF8E  4E                 	db	78	;'N'
  1499  00FF8F  44                 	db	68	;'D'
  1500  00FF90  00                 	db	0
  1501  00FF91                     STR_88:
  1502  00FF91  41                 	db	65	;'A'
  1503  00FF92  43                 	db	67	;'C'
  1504  00FF93  54                 	db	84	;'T'
  1505  00FF94  55                 	db	85	;'U'
  1506  00FF95  41                 	db	65	;'A'
  1507  00FF96  54                 	db	84	;'T'
  1508  00FF97  4F                 	db	79	;'O'
  1509  00FF98  52                 	db	82	;'R'
  1510  00FF99  53                 	db	83	;'S'
  1511  00FF9A  00                 	db	0
  1512  00FF9B                     STR_22:
  1513  00FF9B  44                 	db	68	;'D'
  1514  00FF9C  55                 	db	85	;'U'
  1515  00FF9D  52                 	db	82	;'R'
  1516  00FF9E  41                 	db	65	;'A'
  1517  00FF9F  54                 	db	84	;'T'
  1518  00FFA0  49                 	db	73	;'I'
  1519  00FFA1  4F                 	db	79	;'O'
  1520  00FFA2  4E                 	db	78	;'N'
  1521  00FFA3  3A                 	db	58	;':'
  1522  00FFA4  00                 	db	0
  1523  00FFA5                     STR_86:
  1524  00FFA5  43                 	db	67	;'C'
  1525  00FFA6  4F                 	db	79	;'O'
  1526  00FFA7  4E                 	db	78	;'N'
  1527  00FFA8  44                 	db	68	;'D'
  1528  00FFA9  3A                 	db	58	;':'
  1529  00FFAA  20                 	db	32
  1530  00FFAB  25                 	db	37
  1531  00FFAC  64                 	db	100	;'d'
  1532  00FFAD  00                 	db	0
  1533  00FFAE                     STR_77:
  1534  00FFAE  53                 	db	83	;'S'
  1535  00FFAF  45                 	db	69	;'E'
  1536  00FFB0  4E                 	db	78	;'N'
  1537  00FFB1  53                 	db	83	;'S'
  1538  00FFB2  4F                 	db	79	;'O'
  1539  00FFB3  52                 	db	82	;'R'
  1540  00FFB4  53                 	db	83	;'S'
  1541  00FFB5  00                 	db	0
  1542  00FFB6                     STR_126:
  1543  00FFB6  28                 	db	40
  1544  00FFB7  6E                 	db	110	;'n'
  1545  00FFB8  75                 	db	117	;'u'
  1546  00FFB9  6C                 	db	108	;'l'
  1547  00FFBA  6C                 	db	108	;'l'
  1548  00FFBB  29                 	db	41
  1549  00FFBC  00                 	db	0
  1550  00FFBD                     STR_67:
  1551  00FFBD  46                 	db	70	;'F'
  1552  00FFBE  41                 	db	65	;'A'
  1553  00FFBF  49                 	db	73	;'I'
  1554  00FFC0  4C                 	db	76	;'L'
  1555  00FFC1  45                 	db	69	;'E'
  1556  00FFC2  44                 	db	68	;'D'
  1557  00FFC3  00                 	db	0
  1558  00FFC4                     STR_7:
  1559  00FFC4  53                 	db	83	;'S'
  1560  00FFC5  54                 	db	84	;'T'
  1561  00FFC6  41                 	db	65	;'A'
  1562  00FFC7  52                 	db	82	;'R'
  1563  00FFC8  54                 	db	84	;'T'
  1564  00FFC9  3A                 	db	58	;':'
  1565  00FFCA  00                 	db	0
  1566  00FFCB                     STR_9:
  1567  00FFCB  46                 	db	70	;'F'
  1568  00FFCC  45                 	db	69	;'E'
  1569  00FFCD  42                 	db	66	;'B'
  1570  00FFCE  00                 	db	0
  1571  00FFCF                     STR_19:
  1572  00FFCF  44                 	db	68	;'D'
  1573  00FFD0  45                 	db	69	;'E'
  1574  00FFD1  43                 	db	67	;'C'
  1575  00FFD2  00                 	db	0
  1576  00FFD3                     STR_15:
  1577  00FFD3  41                 	db	65	;'A'
  1578  00FFD4  55                 	db	85	;'U'
  1579  00FFD5  47                 	db	71	;'G'
  1580  00FFD6  00                 	db	0
  1581  00FFD7                     STR_14:
  1582  00FFD7  4A                 	db	74	;'J'
  1583  00FFD8  55                 	db	85	;'U'
  1584  00FFD9  4C                 	db	76	;'L'
  1585  00FFDA  00                 	db	0
  1586  00FFDB                     STR_8:
  1587  00FFDB  4A                 	db	74	;'J'
  1588  00FFDC  41                 	db	65	;'A'
  1589  00FFDD  4E                 	db	78	;'N'
  1590  00FFDE  00                 	db	0
  1591  00FFDF                     STR_13:
  1592  00FFDF  4A                 	db	74	;'J'
  1593  00FFE0  55                 	db	85	;'U'
  1594  00FFE1  4E                 	db	78	;'N'
  1595  00FFE2  00                 	db	0
  1596  00FFE3                     STR_16:
  1597  00FFE3  53                 	db	83	;'S'
  1598  00FFE4  45                 	db	69	;'E'
  1599  00FFE5  50                 	db	80	;'P'
  1600  00FFE6  00                 	db	0
  1601  00FFE7                     STR_10:
  1602  00FFE7  4D                 	db	77	;'M'
  1603  00FFE8  41                 	db	65	;'A'
  1604  00FFE9  52                 	db	82	;'R'
  1605  00FFEA  00                 	db	0
  1606  00FFEB                     STR_11:
  1607  00FFEB  41                 	db	65	;'A'
  1608  00FFEC  50                 	db	80	;'P'
  1609  00FFED  52                 	db	82	;'R'
  1610  00FFEE  00                 	db	0
  1611  00FFEF                     STR_20:
  1612  00FFEF  45                 	db	69	;'E'
  1613  00FFF0  52                 	db	82	;'R'
  1614  00FFF1  52                 	db	82	;'R'
  1615  00FFF2  00                 	db	0
  1616  00FFF3                     STR_17:
  1617  00FFF3  4F                 	db	79	;'O'
  1618  00FFF4  43                 	db	67	;'C'
  1619  00FFF5  54                 	db	84	;'T'
  1620  00FFF6  00                 	db	0
  1621  00FFF7                     STR_18:
  1622  00FFF7  4E                 	db	78	;'N'
  1623  00FFF8  4F                 	db	79	;'O'
  1624  00FFF9  56                 	db	86	;'V'
  1625  00FFFA  00                 	db	0
  1626  00FFFB                     STR_12:
  1627  00FFFB  4D                 	db	77	;'M'
  1628  00FFFC  41                 	db	65	;'A'
  1629  00FFFD  59                 	db	89	;'Y'
  1630  00FFFE  00                 	db	0
  1631  0000                     
  1632                           ; #config settings
  1633  00FFFF  00                 	db	0	; dummy byte at the end
  1634  0000                     
  1635                           	psect	cinit
  1636  004BB0                     __pcinit:
  1637                           	opt stack 0
  1638  004BB0                     start_initialization:
  1639                           	opt stack 0
  1640  004BB0                     __initialization:
  1641                           	opt stack 0
  1642                           
  1643                           ; Initialize objects allocated to BANK1 (8 bytes)
  1644                           ; load TBLPTR registers with __pidataBANK1
  1645  004BB0  0E14               	movlw	low __pidataBANK1
  1646  004BB2  6EF6               	movwf	tblptrl,c
  1647  004BB4  0E53               	movlw	high __pidataBANK1
  1648  004BB6  6EF7               	movwf	tblptrh,c
  1649  004BB8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1650  004BBA  6EF8               	movwf	tblptru,c
  1651  004BBC  EE01  F041         	lfsr	0,__pdataBANK1
  1652  004BC0  EE10 F008          	lfsr	1,8
  1653  004BC4                     copy_data0:
  1654  004BC4  0009               	tblrd		*+
  1655  004BC6  CFF5 FFEE          	movff	tablat,postinc0
  1656  004BCA  50E5               	movf	postdec1,w,c
  1657  004BCC  50E1               	movf	fsr1l,w,c
  1658  004BCE  E1FA               	bnz	copy_data0
  1659                           
  1660                           ; Clear objects allocated to BANK1 (65 bytes)
  1661  004BD0  EE01  F000         	lfsr	0,__pbssBANK1
  1662  004BD4  0E41               	movlw	65
  1663  004BD6                     clear_0:
  1664  004BD6  6AEE               	clrf	postinc0,c
  1665  004BD8  06E8               	decf	wreg,f,c
  1666  004BDA  E1FD               	bnz	clear_0
  1667                           
  1668                           ; Clear objects allocated to BANK0 (38 bytes)
  1669  004BDC  EE00  F0DA         	lfsr	0,__pbssBANK0
  1670  004BE0  0E26               	movlw	38
  1671  004BE2                     clear_1:
  1672  004BE2  6AEE               	clrf	postinc0,c
  1673  004BE4  06E8               	decf	wreg,f,c
  1674  004BE6  E1FD               	bnz	clear_1
  1675                           
  1676                           ; Clear objects allocated to COMRAM (35 bytes)
  1677  004BE8  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1678  004BEC  0E23               	movlw	35
  1679  004BEE                     clear_2:
  1680  004BEE  6AEE               	clrf	postinc0,c
  1681  004BF0  06E8               	decf	wreg,f,c
  1682  004BF2  E1FD               	bnz	clear_2
  1683  004BF4                     end_of_initialization:
  1684                           	opt stack 0
  1685  004BF4                     __end_of__initialization:
  1686                           	opt stack 0
  1687  004BF4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1688  004BF6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1689  004BF8  0100               	movlb	0
  1690  004BFA  EF15  F020         	goto	_main	;jump to C main() function
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700                           	psect	bssCOMRAM
  1701  00005B                     __pbssCOMRAM:
  1702                           	opt stack 0
  1703  00005B                     _back:
  1704                           	opt stack 0
  1705  00005B                     	ds	2
  1706  00005D                     _down:
  1707                           	opt stack 0
  1708  00005D                     	ds	2
  1709  00005F                     _enter:
  1710                           	opt stack 0
  1711  00005F                     	ds	2
  1712  000061                     _f_panning_to_bin:
  1713                           	opt stack 0
  1714  000061                     	ds	2
  1715  000063                     _log_completion:
  1716                           	opt stack 0
  1717  000063                     	ds	2
  1718  000065                     _log_count_can_no_lab:
  1719                           	opt stack 0
  1720  000065                     	ds	2
  1721  000067                     _log_count_can_w_lab:
  1722                           	opt stack 0
  1723  000067                     	ds	2
  1724  000069                     _log_count_pop_no_tab:
  1725                           	opt stack 0
  1726  000069                     	ds	2
  1727  00006B                     _log_count_pop_w_tab:
  1728                           	opt stack 0
  1729  00006B                     	ds	2
  1730  00006D                     _most_recent_sort_time:
  1731                           	opt stack 0
  1732  00006D                     	ds	2
  1733  00006F                     _pan_servo_state:
  1734                           	opt stack 0
  1735  00006F                     	ds	2
  1736  000071                     _servo_timer_counter:
  1737                           	opt stack 0
  1738  000071                     	ds	2
  1739  000073                     _servo_timer_target:
  1740                           	opt stack 0
  1741  000073                     	ds	2
  1742  000075                     _tilt_servo_state:
  1743                           	opt stack 0
  1744  000075                     	ds	2
  1745  000077                     _up:
  1746                           	opt stack 0
  1747  000077                     	ds	2
  1748  000079                     _was_low_1:
  1749                           	opt stack 0
  1750  000079                     	ds	2
  1751  00007B                     _was_low_3:
  1752                           	opt stack 0
  1753  00007B                     	ds	2
  1754  00007D                     _input:
  1755                           	opt stack 0
  1756  00007D                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	bssBANK0
  1767  0000DA                     __pbssBANK0:
  1768                           	opt stack 0
  1769  0000DA                     _servoTimes:
  1770                           	opt stack 0
  1771  0000DA                     	ds	8
  1772  0000E2                     _sensor_outputs:
  1773                           	opt stack 0
  1774  0000E2                     	ds	4
  1775  0000E6                     _IR_signal:
  1776                           	opt stack 0
  1777  0000E6                     	ds	2
  1778  0000E8                     _MAG_signal:
  1779                           	opt stack 0
  1780  0000E8                     	ds	2
  1781  0000EA                     _RTCflag:
  1782                           	opt stack 0
  1783  0000EA                     	ds	2
  1784  0000EC                     _cur_state:
  1785                           	opt stack 0
  1786  0000EC                     	ds	2
  1787  0000EE                     _f_lastCan:
  1788                           	opt stack 0
  1789  0000EE                     	ds	2
  1790  0000F0                     _f_loadingNewCan:
  1791                           	opt stack 0
  1792  0000F0                     	ds	2
  1793  0000F2                     _log:
  1794                           	opt stack 0
  1795  0000F2                     	ds	2
  1796  0000F4                     _log_total_time:
  1797                           	opt stack 0
  1798  0000F4                     	ds	2
  1799  0000F6                     _logstate:
  1800                           	opt stack 0
  1801  0000F6                     	ds	2
  1802  0000F8                     _total_time:
  1803                           	opt stack 0
  1804  0000F8                     	ds	2
  1805  0000FA                     _var:
  1806                           	opt stack 0
  1807  0000FA                     	ds	2
  1808  0000FC                     _machine_state:
  1809                           	opt stack 0
  1810  0000FC                     	ds	1
  1811  0000FD                     _sel:
  1812                           	opt stack 0
  1813  0000FD                     	ds	1
  1814  0000FE                     _count_total:
  1815                           	opt stack 0
  1816  0000FE                     	ds	2
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           
  1826                           	psect	bssBANK1
  1827  000100                     __pbssBANK1:
  1828                           	opt stack 0
  1829  000100                     _log_startTime:
  1830                           	opt stack 0
  1831  000100                     	ds	14
  1832  00010E                     _startTime:
  1833                           	opt stack 0
  1834  00010E                     	ds	14
  1835  00011C                     _time:
  1836                           	opt stack 0
  1837  00011C                     	ds	7
  1838  000123                     _count_can_no_lab:
  1839                           	opt stack 0
  1840  000123                     	ds	2
  1841  000125                     _count_can_w_lab:
  1842                           	opt stack 0
  1843  000125                     	ds	2
  1844  000127                     _count_pop_no_tab:
  1845                           	opt stack 0
  1846  000127                     	ds	2
  1847  000129                     _count_pop_w_tab:
  1848                           	opt stack 0
  1849  000129                     	ds	2
  1850  00012B                     _cur_can:
  1851                           	opt stack 0
  1852  00012B                     	ds	2
  1853  00012D                     _debug:
  1854                           	opt stack 0
  1855  00012D                     	ds	2
  1856  00012F                     _f_ID_receive:
  1857                           	opt stack 0
  1858  00012F                     	ds	2
  1859  000131                     _f_can_coming_to_ID:
  1860                           	opt stack 0
  1861  000131                     	ds	2
  1862  000133                     _f_can_coming_to_distribution:
  1863                           	opt stack 0
  1864  000133                     	ds	2
  1865  000135                     _f_can_distributed:
  1866                           	opt stack 0
  1867  000135                     	ds	2
  1868  000137                     _f_most_recent_sort_time:
  1869                           	opt stack 0
  1870  000137                     	ds	2
  1871  000139                     _first:
  1872                           	opt stack 0
  1873  000139                     	ds	2
  1874  00013B                     _firstboot:
  1875                           	opt stack 0
  1876  00013B                     	ds	2
  1877  00013D                     _i:
  1878                           	opt stack 0
  1879  00013D                     	ds	2
  1880  00013F                     _log_count_total:
  1881                           	opt stack 0
  1882  00013F                     	ds	2
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892                           	psect	dataBANK1
  1893  000141                     __pdataBANK1:
  1894                           	opt stack 0
  1895  000141                     UI@F3235:
  1896                           	opt stack 0
  1897  000141                     	ds	4
  1898  000145                     printRTC@F3226:
  1899                           	opt stack 0
  1900  000145                     	ds	4
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	cstackBANK0
  1911  000080                     __pcstackBANK0:
  1912                           	opt stack 0
  1913  000080                     ??_delay_ms:
  1914  000080                     ??_PortTests:
  1915  000080                     ??_isdigit:
  1916  000080                     ??_readADC:
  1917  000080                     ??_I2C_Master_Wait:
  1918  000080                     ?___wmul:
  1919                           	opt stack 0
  1920  000080                     ?___awmod:
  1921                           	opt stack 0
  1922  000080                     ?___lwdiv:
  1923                           	opt stack 0
  1924  000080                     ?___lldiv:
  1925                           	opt stack 0
  1926  000080                     lcdNibble@temp:
  1927                           	opt stack 0
  1928  000080                     initTime@m:
  1929                           	opt stack 0
  1930  000080                     updateServoPosition@time_us:
  1931                           	opt stack 0
  1932  000080                     EEPROM_read@address:
  1933                           	opt stack 0
  1934  000080                     ___wmul@multiplier:
  1935                           	opt stack 0
  1936  000080                     ___awmod@dividend:
  1937                           	opt stack 0
  1938  000080                     ___lwdiv@dividend:
  1939                           	opt stack 0
  1940  000080                     strcpy@to:
  1941                           	opt stack 0
  1942  000080                     ___lldiv@dividend:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x0
  1946  000080                     	ds	1
  1947  000081                     readADC@channel:
  1948                           	opt stack 0
  1949  000081                     I2C_Master_Read@a:
  1950                           	opt stack 0
  1951  000081                     lcdNibble@data:
  1952                           	opt stack 0
  1953  000081                     initTime@h:
  1954                           	opt stack 0
  1955  000081                     delay_ms@milliseconds:
  1956                           	opt stack 0
  1957  000081                     _isdigit$2058:
  1958                           	opt stack 0
  1959  000081                     I2C_Master_Write@d:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x1
  1963  000081                     	ds	1
  1964  000082                     ??_ID:
  1965  000082                     ??_readIR:
  1966  000082                     ??_readMAG:
  1967  000082                     I2C_Master_Read@temp:
  1968                           	opt stack 0
  1969  000082                     lcdInst@data:
  1970                           	opt stack 0
  1971  000082                     putch@data:
  1972                           	opt stack 0
  1973  000082                     initTime@w:
  1974                           	opt stack 0
  1975  000082                     isdigit@c:
  1976                           	opt stack 0
  1977  000082                     updateServoPosition@timer:
  1978                           	opt stack 0
  1979  000082                     ___wmul@multiplicand:
  1980                           	opt stack 0
  1981  000082                     ___awmod@divisor:
  1982                           	opt stack 0
  1983  000082                     ___lwdiv@divisor:
  1984                           	opt stack 0
  1985  000082                     strcpy@from:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x2
  1989  000082                     	ds	1
  1990  000083                     ??_initLCD:
  1991  000083                     initTime@DD:
  1992                           	opt stack 0
  1993  000083                     getRTC@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x3
  1997  000083                     	ds	1
  1998  000084                     ??_updateServoPosition:
  1999  000084                     initTime@MM:
  2000                           	opt stack 0
  2001  000084                     ___awmod@counter:
  2002                           	opt stack 0
  2003  000084                     readIR@res:
  2004                           	opt stack 0
  2005  000084                     readMAG@res:
  2006                           	opt stack 0
  2007  000084                     ID@i:
  2008                           	opt stack 0
  2009  000084                     ___wmul@product:
  2010                           	opt stack 0
  2011  000084                     ___lwdiv@quotient:
  2012                           	opt stack 0
  2013  000084                     strcpy@cp:
  2014                           	opt stack 0
  2015  000084                     ___lldiv@divisor:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x4
  2019  000084                     	ds	1
  2020  000085                     ??_initSortTimer:
  2021  000085                     initTime@YY:
  2022                           	opt stack 0
  2023  000085                     ___awmod@sign:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  000085                     	ds	1
  2028  000086                     ??_getIR:
  2029  000086                     ??_getMAG:
  2030  000086                     ?___awdiv:
  2031                           	opt stack 0
  2032  000086                     initTime@s:
  2033                           	opt stack 0
  2034  000086                     ___lwdiv@counter:
  2035                           	opt stack 0
  2036  000086                     ID@i_1173:
  2037                           	opt stack 0
  2038  000086                     updateServoPosition@my_time:
  2039                           	opt stack 0
  2040  000086                     ___awdiv@dividend:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x6
  2044  000086                     	ds	1
  2045  000087                     ?___lwmod:
  2046                           	opt stack 0
  2047  000087                     getIR@i:
  2048                           	opt stack 0
  2049  000087                     ___lwmod@dividend:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x7
  2053  000087                     	ds	1
  2054  000088                     ??_Distribution:
  2055  000088                     ??_initServos:
  2056  000088                     ID@i_1174:
  2057                           	opt stack 0
  2058  000088                     initSortTimer@i:
  2059                           	opt stack 0
  2060  000088                     ___awdiv@divisor:
  2061                           	opt stack 0
  2062  000088                     ___lldiv@quotient:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0x8
  2066  000088                     	ds	1
  2067  000089                     ___lwmod@divisor:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x9
  2071  000089                     	ds	1
  2072  00008A                     ___awdiv@counter:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0xA
  2076  00008A                     	ds	1
  2077  00008B                     ___awdiv@sign:
  2078                           	opt stack 0
  2079  00008B                     ___lwmod@counter:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0xB
  2083  00008B                     	ds	1
  2084  00008C                     ___lldiv@counter:
  2085                           	opt stack 0
  2086  00008C                     ___awdiv@quotient:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0xC
  2090  00008C                     	ds	1
  2091  00008D                     I2C_Master_Init@c:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0xD
  2095  00008D                     	ds	1
  2096  00008E                     ?_printf:
  2097                           	opt stack 0
  2098  00008E                     printf@f:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0xE
  2102  00008E                     	ds	3
  2103  000091                     ??_I2C_Master_Init:
  2104                           
  2105                           ; 1 bytes @ 0x11
  2106  000091                     	ds	4
  2107  000095                     ??_loadRTC:
  2108                           
  2109                           ; 1 bytes @ 0x15
  2110  000095                     	ds	1
  2111  000096                     loadRTC@i:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x16
  2115  000096                     	ds	4
  2116  00009A                     ??_printf:
  2117                           
  2118                           ; 1 bytes @ 0x1A
  2119  00009A                     	ds	4
  2120  00009E                     printf@prec:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x1E
  2124  00009E                     	ds	1
  2125  00009F                     printf@cp:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x1F
  2129  00009F                     	ds	2
  2130  0000A1                     printf@ap:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x21
  2134  0000A1                     	ds	2
  2135  0000A3                     printf@len:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x23
  2139  0000A3                     	ds	2
  2140  0000A5                     printf@val:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x25
  2144  0000A5                     	ds	2
  2145  0000A7                     printf@flag:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x27
  2149  0000A7                     	ds	1
  2150  0000A8                     printf@c:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x28
  2154  0000A8                     	ds	1
  2155  0000A9                     printf@width:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x29
  2159  0000A9                     	ds	2
  2160  0000AB                     ??_printRTC:
  2161  0000AB                     ??_algorithmTest:
  2162  0000AB                     ??_sensorTest:
  2163  0000AB                     ??_actuatorTest:
  2164  0000AB                     ??_PortTestA5:
  2165  0000AB                     ??_SpeedTest:
  2166  0000AB                     ??_PusherTest:
  2167  0000AB                     ??_BothServos:
  2168  0000AB                     ??_BlockerTest:
  2169  0000AB                     EEPROM_write@address:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x2B
  2173  0000AB                     	ds	1
  2174  0000AC                     BlockerTest@i:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x2C
  2178  0000AC                     	ds	1
  2179  0000AD                     EEPROM_write@data:
  2180                           	opt stack 0
  2181  0000AD                     actuatorTest@i_1734:
  2182                           	opt stack 0
  2183  0000AD                     sensorTest@res:
  2184                           	opt stack 0
  2185  0000AD                     PusherTest@res:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2D
  2189  0000AD                     	ds	1
  2190  0000AE                     ??_EEPROM_write:
  2191  0000AE                     actuatorTest@i_1741:
  2192                           	opt stack 0
  2193  0000AE                     BlockerTest@cam_flag:
  2194                           	opt stack 0
  2195  0000AE                     printRTC@INT_time:
  2196                           	opt stack 0
  2197                           
  2198                           ; 14 bytes @ 0x2E
  2199  0000AE                     	ds	1
  2200  0000AF                     EEPROM_write@i:
  2201                           	opt stack 0
  2202  0000AF                     actuatorTest@i_1742:
  2203                           	opt stack 0
  2204  0000AF                     PusherTest@res_1789:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x2F
  2208  0000AF                     	ds	1
  2209  0000B0                     EEPROM_write@i_1398:
  2210                           	opt stack 0
  2211  0000B0                     actuatorTest@i_1744:
  2212                           	opt stack 0
  2213  0000B0                     BlockerTest@cond_flag:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x30
  2217  0000B0                     	ds	1
  2218  0000B1                     ??_Loading:
  2219  0000B1                     logRun@num:
  2220                           	opt stack 0
  2221  0000B1                     actuatorTest@i_1745:
  2222                           	opt stack 0
  2223  0000B1                     PusherTest@i:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x31
  2227  0000B1                     	ds	1
  2228  0000B2                     logRun@byte1:
  2229                           	opt stack 0
  2230  0000B2                     actuatorTest@i_1747:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x32
  2234  0000B2                     	ds	1
  2235  0000B3                     logRun@byte2:
  2236                           	opt stack 0
  2237  0000B3                     actuatorTest@i_1748:
  2238                           	opt stack 0
  2239  0000B3                     Loading@addr:
  2240                           	opt stack 0
  2241  0000B3                     PusherTest@i_1793:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x33
  2245  0000B3                     	ds	1
  2246  0000B4                     logRun@byte3:
  2247                           	opt stack 0
  2248  0000B4                     actuatorTest@i_1750:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x34
  2252  0000B4                     	ds	1
  2253  0000B5                     Loading@byte1:
  2254                           	opt stack 0
  2255  0000B5                     logRun@byte_i:
  2256                           	opt stack 0
  2257  0000B5                     actuatorTest@i_1751:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x35
  2261  0000B5                     	ds	1
  2262  0000B6                     logRun@byte11:
  2263                           	opt stack 0
  2264  0000B6                     actuatorTest@i_1753:
  2265                           	opt stack 0
  2266  0000B6                     Loading@i_1148:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x36
  2270  0000B6                     	ds	1
  2271  0000B7                     actuatorTest@i_1754:
  2272                           	opt stack 0
  2273  0000B7                     logRun@i:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x37
  2277  0000B7                     	ds	1
  2278  0000B8                     actuatorTest@i_1756:
  2279                           	opt stack 0
  2280  0000B8                     Loading@i_1157:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x38
  2284  0000B8                     	ds	1
  2285  0000B9                     actuatorTest@i_1757:
  2286                           	opt stack 0
  2287  0000B9                     logRun@addr:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x39
  2291  0000B9                     	ds	1
  2292  0000BA                     actuatorTest@i_1760:
  2293                           	opt stack 0
  2294  0000BA                     Loading@i_1159:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x3A
  2298  0000BA                     	ds	1
  2299  0000BB                     actuatorTest@i_1761:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x3B
  2303  0000BB                     	ds	1
  2304  0000BC                     actuatorTest@i_1763:
  2305                           	opt stack 0
  2306  0000BC                     printRTC@RTC_month:
  2307                           	opt stack 0
  2308  0000BC                     Loading@i_1160:
  2309                           	opt stack 0
  2310                           
  2311                           ; 2 bytes @ 0x3C
  2312  0000BC                     	ds	1
  2313  0000BD                     actuatorTest@i_1764:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x3D
  2317  0000BD                     	ds	1
  2318  0000BE                     actuatorTest@i_1766:
  2319                           	opt stack 0
  2320  0000BE                     Loading@i_1162:
  2321                           	opt stack 0
  2322  0000BE                     printRTC@month:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x3E
  2326  0000BE                     	ds	1
  2327  0000BF                     actuatorTest@i_1767:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x3F
  2331  0000BF                     	ds	1
  2332  0000C0                     actuatorTest@i_1770:
  2333                           	opt stack 0
  2334  0000C0                     Loading@j:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x40
  2338  0000C0                     	ds	1
  2339  0000C1                     actuatorTest@i_1771:
  2340                           	opt stack 0
  2341                           
  2342                           ; 1 bytes @ 0x41
  2343  0000C1                     	ds	1
  2344  0000C2                     actuatorTest@i_1773:
  2345                           	opt stack 0
  2346  0000C2                     printRTC@i:
  2347                           	opt stack 0
  2348  0000C2                     Loading@i:
  2349                           	opt stack 0
  2350                           
  2351                           ; 2 bytes @ 0x42
  2352  0000C2                     	ds	1
  2353  0000C3                     actuatorTest@i_1774:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x43
  2357  0000C3                     	ds	1
  2358  0000C4                     ??_UI:
  2359  0000C4                     actuatorTest@i:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x44
  2363  0000C4                     	ds	2
  2364  0000C6                     ??_Test:
  2365  0000C6                     _UI$2416:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x46
  2369  0000C6                     	ds	2
  2370  0000C8                     UI@i:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x48
  2374  0000C8                     	ds	1
  2375  0000C9                     UI@i_409:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x49
  2379  0000C9                     	ds	1
  2380  0000CA                     UI@i_412:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4A
  2384  0000CA                     	ds	1
  2385  0000CB                     UI@i_413:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x4B
  2389  0000CB                     	ds	1
  2390  0000CC                     UI@i_431:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x4C
  2394  0000CC                     	ds	1
  2395  0000CD                     UI@i_432:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x4D
  2399  0000CD                     	ds	1
  2400  0000CE                     UI@i_435:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x4E
  2404  0000CE                     	ds	1
  2405  0000CF                     UI@i_436:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x4F
  2409  0000CF                     	ds	1
  2410  0000D0                     UI@i_439:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x50
  2414  0000D0                     	ds	1
  2415  0000D1                     UI@i_440:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x51
  2419  0000D1                     	ds	1
  2420  0000D2                     UI@i_443:
  2421                           	opt stack 0
  2422                           
  2423                           ; 1 bytes @ 0x52
  2424  0000D2                     	ds	1
  2425  0000D3                     UI@i_444:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x53
  2429  0000D3                     	ds	1
  2430  0000D4                     UI@i_447:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x54
  2434  0000D4                     	ds	1
  2435  0000D5                     UI@i_448:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x55
  2439  0000D5                     	ds	1
  2440  0000D6                     UI@month:
  2441                           	opt stack 0
  2442                           
  2443                           ; 4 bytes @ 0x56
  2444  0000D6                     	ds	4
  2445  0000DA                     tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           
  2454                           ; 1 bytes @ 0x5A
  2455                           
  2456                           	psect	cstackCOMRAM
  2457  000001                     __pcstackCOMRAM:
  2458                           	opt stack 0
  2459  000001                     ??i2_I2C_Master_Wait:
  2460  000001                     ??i2_delay_ms:
  2461  000001                     ??i2_isdigit:
  2462  000001                     ?i2___wmul:
  2463                           	opt stack 0
  2464  000001                     ?i2___lwmod:
  2465                           	opt stack 0
  2466  000001                     i2lcdNibble@temp:
  2467                           	opt stack 0
  2468  000001                     i2updateServoPosition@time_us:
  2469                           	opt stack 0
  2470  000001                     i2EEPROM_read@address:
  2471                           	opt stack 0
  2472  000001                     i2___wmul@multiplier:
  2473                           	opt stack 0
  2474  000001                     i2___lwmod@dividend:
  2475                           	opt stack 0
  2476  000001                     i2strcpy@to:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x0
  2480  000001                     	ds	1
  2481  000002                     i2I2C_Master_Read@a:
  2482                           	opt stack 0
  2483  000002                     i2lcdNibble@data:
  2484                           	opt stack 0
  2485  000002                     i2delay_ms@milliseconds:
  2486                           	opt stack 0
  2487  000002                     i2_isdigit$2058:
  2488                           	opt stack 0
  2489  000002                     i2I2C_Master_Write@d:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x1
  2493  000002                     	ds	1
  2494  000003                     i2I2C_Master_Read@temp:
  2495                           	opt stack 0
  2496  000003                     i2lcdInst@data:
  2497                           	opt stack 0
  2498  000003                     i2putch@data:
  2499                           	opt stack 0
  2500  000003                     i2isdigit@c:
  2501                           	opt stack 0
  2502  000003                     i2updateServoPosition@timer:
  2503                           	opt stack 0
  2504  000003                     i2___wmul@multiplicand:
  2505                           	opt stack 0
  2506  000003                     i2___lwmod@divisor:
  2507                           	opt stack 0
  2508  000003                     i2strcpy@from:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x2
  2512  000003                     	ds	1
  2513  000004                     i2getRTC@i:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x3
  2517  000004                     	ds	1
  2518  000005                     ??i2_updateServoPosition:
  2519  000005                     i2___lwmod@counter:
  2520                           	opt stack 0
  2521  000005                     i2___wmul@product:
  2522                           	opt stack 0
  2523  000005                     i2strcpy@cp:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x4
  2527  000005                     	ds	1
  2528  000006                     ?i2___lwdiv:
  2529                           	opt stack 0
  2530  000006                     i2___lwdiv@dividend:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x5
  2534  000006                     	ds	1
  2535  000007                     retrieveLog@logNum:
  2536                           	opt stack 0
  2537  000007                     i2updateServoPosition@my_time:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x6
  2541  000007                     	ds	1
  2542  000008                     i2___lwdiv@divisor:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x7
  2546  000008                     	ds	1
  2547  000009                     ??_retrieveLog:
  2548  000009                     ??_updateServoStates:
  2549                           
  2550                           ; 1 bytes @ 0x8
  2551  000009                     	ds	1
  2552  00000A                     i2___lwdiv@quotient:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x9
  2556  00000A                     	ds	1
  2557  00000B                     retrieveLog@byte1:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0xA
  2561  00000B                     	ds	1
  2562  00000C                     retrieveLog@byte2:
  2563                           	opt stack 0
  2564  00000C                     i2___lwdiv@counter:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0xB
  2568  00000C                     	ds	1
  2569  00000D                     ?i2_printf:
  2570                           	opt stack 0
  2571  00000D                     retrieveLog@byte3:
  2572                           	opt stack 0
  2573  00000D                     i2printf@f:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0xC
  2577  00000D                     	ds	1
  2578  00000E                     retrieveLog@i:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0xD
  2582  00000E                     	ds	2
  2583  000010                     retrieveLog@addr:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0xF
  2587  000010                     	ds	2
  2588  000012                     dispLogs@myLog:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x11
  2592  000012                     	ds	2
  2593  000014                     
  2594                           ; 1 bytes @ 0x13
  2595  000014                     	ds	5
  2596  000019                     ??i2_printf:
  2597                           
  2598                           ; 1 bytes @ 0x18
  2599  000019                     	ds	4
  2600  00001D                     i2printf@prec:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x1C
  2604  00001D                     	ds	1
  2605  00001E                     i2printf@cp:
  2606                           	opt stack 0
  2607                           
  2608                           ; 2 bytes @ 0x1D
  2609  00001E                     	ds	2
  2610  000020                     i2printf@ap:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x1F
  2614  000020                     	ds	2
  2615  000022                     i2printf@len:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x21
  2619  000022                     	ds	2
  2620  000024                     i2printf@val:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x23
  2624  000024                     	ds	2
  2625  000026                     i2printf@flag:
  2626                           	opt stack 0
  2627                           
  2628                           ; 1 bytes @ 0x25
  2629  000026                     	ds	1
  2630  000027                     i2printf@c:
  2631                           	opt stack 0
  2632                           
  2633                           ; 1 bytes @ 0x26
  2634  000027                     	ds	1
  2635  000028                     i2printf@width:
  2636                           	opt stack 0
  2637                           
  2638                           ; 2 bytes @ 0x27
  2639  000028                     	ds	2
  2640  00002A                     ??_printSortTimer:
  2641  00002A                     ??i2_printRTC:
  2642  00002A                     ?_inputHandler:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x29
  2646  00002A                     	ds	2
  2647  00002C                     ??_inputHandler:
  2648                           
  2649                           ; 1 bytes @ 0x2B
  2650  00002C                     	ds	1
  2651  00002D                     printSortTimer@curTime:
  2652                           	opt stack 0
  2653  00002D                     i2printRTC@INT_time:
  2654                           	opt stack 0
  2655                           
  2656                           ; 14 bytes @ 0x2C
  2657  00002D                     	ds	14
  2658  00003B                     printSortTimer@start_sec:
  2659                           	opt stack 0
  2660  00003B                     i2printRTC@RTC_month:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x3A
  2664  00003B                     	ds	2
  2665  00003D                     printSortTimer@cur_sec:
  2666                           	opt stack 0
  2667  00003D                     i2printRTC@month:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0x3C
  2671  00003D                     	ds	2
  2672  00003F                     printSortTimer@min:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x3E
  2676  00003F                     	ds	2
  2677  000041                     printSortTimer@sec:
  2678                           	opt stack 0
  2679  000041                     i2printRTC@i:
  2680                           	opt stack 0
  2681                           
  2682                           ; 2 bytes @ 0x40
  2683  000041                     	ds	2
  2684  000043                     ??_updateMenu:
  2685  000043                     _printSortTimer$2548:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x42
  2689  000043                     	ds	2
  2690  000045                     printSortTimer@timeDiff:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x44
  2694  000045                     	ds	2
  2695  000047                     printSortTimer@i_1186:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x46
  2699  000047                     	ds	2
  2700  000049                     printSortTimer@i:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x48
  2704  000049                     	ds	2
  2705  00004B                     ??_handler:
  2706                           
  2707                           ; 1 bytes @ 0x4A
  2708  00004B                     	ds	16
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1l	equ	0xFE1
  2717                           
  2718 ;;
  2719 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2720 ;;
  2721 ;; *************** function _main *****************
  2722 ;; Defined at:
  2723 ;;		line 19 in file "main.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels required when called:   13
  2743 ;; This function calls:
  2744 ;;		_I2C_Master_Init
  2745 ;;		_Test
  2746 ;;		_UI
  2747 ;;		_initLCD
  2748 ;;		_initTime
  2749 ;;		_initUI
  2750 ;;		_logRun
  2751 ;;		_machineConfig
  2752 ;;		_sort
  2753 ;;		_stopSignals
  2754 ;; This function is called by:
  2755 ;;		Startup code after reset
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text0
  2760  00402A                     __ptext0:
  2761                           	opt stack 0
  2762  00402A                     _main:
  2763                           	opt stack 18
  2764                           
  2765                           ;main.c: 20: machineConfig();
  2766                           
  2767                           ;incstack = 0
  2768  00402A  ECFB  F024         	call	_machineConfig	;wreg free
  2769                           
  2770                           ;main.c: 21: initLCD();
  2771  00402E  EC4B  F026         	call	_initLCD	;wreg free
  2772                           
  2773                           ;main.c: 24: RTCflag = 0;
  2774  004032  0E00               	movlw	0
  2775  004034  0100               	movlb	0	; () banked
  2776  004036  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2777  004038  0E00               	movlw	0
  2778  00403A  6FEA               	movwf	_RTCflag& (0+255),b
  2779                           
  2780                           ;main.c: 25: if(RTCflag){
  2781  00403C  0100               	movlb	0	; () banked
  2782  00403E  51EA               	movf	_RTCflag& (0+255),w,b
  2783  004040  0100               	movlb	0	; () banked
  2784  004042  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2785  004044  B4D8               	btfsc	status,2,c
  2786  004046  D016               	goto	l9374
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2790  004048  0E20               	movlw	32
  2791  00404A  0100               	movlb	0	; () banked
  2792  00404C  6F80               	movwf	initTime@m& (0+255),b
  2793  00404E  0E15               	movlw	21
  2794  004050  0100               	movlb	0	; () banked
  2795  004052  6F81               	movwf	initTime@h& (0+255),b
  2796  004054  0E04               	movlw	4
  2797  004056  0100               	movlb	0	; () banked
  2798  004058  6F82               	movwf	initTime@w& (0+255),b
  2799  00405A  0E15               	movlw	21
  2800  00405C  0100               	movlb	0	; () banked
  2801  00405E  6F83               	movwf	initTime@DD& (0+255),b
  2802  004060  0E03               	movlw	3
  2803  004062  0100               	movlb	0	; () banked
  2804  004064  6F84               	movwf	initTime@MM& (0+255),b
  2805  004066  0E17               	movlw	23
  2806  004068  0100               	movlb	0	; () banked
  2807  00406A  6F85               	movwf	initTime@YY& (0+255),b
  2808  00406C  0E42               	movlw	66
  2809  00406E  ECFF  F028         	call	_initTime
  2810                           
  2811                           ;main.c: 27: }
  2812  004072  D00B               	goto	l9376
  2813  004074                     l9374:
  2814                           
  2815                           ;main.c: 28: else{
  2816                           ;main.c: 29: I2C_Master_Init(10000);
  2817  004074  0E10               	movlw	16
  2818  004076  0100               	movlb	0	; () banked
  2819  004078  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2820  00407A  0E27               	movlw	39
  2821  00407C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2822  00407E  0E00               	movlw	0
  2823  004080  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2824  004082  0E00               	movlw	0
  2825  004084  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2826  004086  ECCB  F024         	call	_I2C_Master_Init	;wreg free
  2827  00408A                     l9376:
  2828                           
  2829                           ;main.c: 30: }
  2830                           ;main.c: 32: initUI();
  2831  00408A  EC2F  F027         	call	_initUI	;wreg free
  2832                           
  2833                           ;main.c: 33: first = 1;
  2834  00408E  0E00               	movlw	0
  2835  004090  0101               	movlb	1	; () banked
  2836  004092  6F3A               	movwf	(_first+1)& (0+255),b
  2837  004094  0E01               	movlw	1
  2838  004096  6F39               	movwf	_first& (0+255),b
  2839                           
  2840                           ; BSR set to: 1
  2841                           ;main.c: 44: switch(machine_state){
  2842                           
  2843                           ;main.c: 43: while(1){
  2844  004098  D018               	goto	l9398
  2845  00409A                     l9380:
  2846                           
  2847                           ;main.c: 46: UI();
  2848  00409A  EC65  F004         	call	_UI	;wreg free
  2849                           
  2850                           ;main.c: 47: break;
  2851  00409E  D015               	goto	l9398
  2852  0040A0                     l9382:
  2853                           
  2854                           ;main.c: 49: sort();
  2855  0040A0  ECEE  F028         	call	_sort	;wreg free
  2856                           
  2857                           ;main.c: 50: break;
  2858  0040A4  D012               	goto	l9398
  2859  0040A6                     l9384:
  2860                           
  2861                           ;main.c: 52: stopSignals();
  2862  0040A6  EC2D  F029         	call	_stopSignals	;wreg free
  2863                           
  2864                           ;main.c: 53: logRun();
  2865  0040AA  EC0B  F01D         	call	_logRun	;wreg free
  2866                           
  2867                           ;main.c: 54: first = 1;
  2868  0040AE  0E00               	movlw	0
  2869  0040B0  0101               	movlb	1	; () banked
  2870  0040B2  6F3A               	movwf	(_first+1)& (0+255),b
  2871  0040B4  0E01               	movlw	1
  2872  0040B6  6F39               	movwf	_first& (0+255),b
  2873                           
  2874                           ; BSR set to: 1
  2875                           ;main.c: 55: UI();
  2876  0040B8  EC65  F004         	call	_UI	;wreg free
  2877                           
  2878                           ;main.c: 56: break;
  2879  0040BC  D006               	goto	l9398
  2880  0040BE                     l9392:
  2881                           
  2882                           ;main.c: 58: Test();
  2883  0040BE  EC3B  F01E         	call	_Test	;wreg free
  2884                           
  2885                           ;main.c: 59: break;
  2886  0040C2  D003               	goto	l9398
  2887  0040C4                     l9394:
  2888                           
  2889                           ;main.c: 61: stopSignals();
  2890  0040C4  EC2D  F029         	call	_stopSignals	;wreg free
  2891  0040C8                     l491:
  2892  0040C8  D7FF               	goto	l491
  2893  0040CA                     l9398:
  2894  0040CA  0100               	movlb	0	; () banked
  2895  0040CC  51FC               	movf	_machine_state& (0+255),w,b
  2896                           
  2897                           ; Switch size 1, requested type "space"
  2898                           ; Number of cases is 5, Range of values is 0 to 4
  2899                           ; switch strategies available:
  2900                           ; Name         Instructions Cycles
  2901                           ; simple_byte           16     9 (average)
  2902                           ;	Chosen strategy is simple_byte
  2903  0040CE  0A00               	xorlw	0	; case 0
  2904  0040D0  B4D8               	btfsc	status,2,c
  2905  0040D2  D7E3               	goto	l9380
  2906  0040D4  0A01               	xorlw	1	; case 1
  2907  0040D6  B4D8               	btfsc	status,2,c
  2908  0040D8  D7E3               	goto	l9382
  2909  0040DA  0A03               	xorlw	3	; case 2
  2910  0040DC  B4D8               	btfsc	status,2,c
  2911  0040DE  D7E3               	goto	l9384
  2912  0040E0  0A01               	xorlw	1	; case 3
  2913  0040E2  B4D8               	btfsc	status,2,c
  2914  0040E4  D7EC               	goto	l9392
  2915  0040E6  0A07               	xorlw	7	; case 4
  2916  0040E8  B4D8               	btfsc	status,2,c
  2917  0040EA  D7EC               	goto	l9394
  2918                           
  2919                           ; BSR set to: 0
  2920                           
  2921                           ; BSR set to: 0
  2922  0040EC  D7EE               	goto	l9398
  2923  0040EE                     __end_of_main:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1l	equ	0xFE1
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _stopSignals *****************
  2936 ;; Defined at:
  2937 ;;		line 70 in file "main.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    7
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text1
  2966  00525A                     __ptext1:
  2967                           	opt stack 0
  2968  00525A                     _stopSignals:
  2969                           	opt stack 23
  2970                           
  2971                           ;main.c: 71: LATA = 0x00;
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;incstack = 0
  2975  00525A  0E00               	movlw	0
  2976  00525C  6E89               	movwf	3977,c	;volatile
  2977                           
  2978                           ;main.c: 72: LATB = 0x00;
  2979  00525E  0E00               	movlw	0
  2980  005260  6E8A               	movwf	3978,c	;volatile
  2981                           
  2982                           ;main.c: 73: LATC = 0x00;
  2983  005262  0E00               	movlw	0
  2984  005264  6E8B               	movwf	3979,c	;volatile
  2985                           
  2986                           ;main.c: 74: LATD = 0x00;
  2987  005266  0E00               	movlw	0
  2988  005268  6E8C               	movwf	3980,c	;volatile
  2989                           
  2990                           ;main.c: 75: LATE = 0x00;
  2991  00526A  0E00               	movlw	0
  2992  00526C  6E8D               	movwf	3981,c	;volatile
  2993                           
  2994                           ;main.c: 76: TMR1ON = 0;
  2995  00526E  90CD               	bcf	4045,0,c	;volatile
  2996                           
  2997                           ;main.c: 77: TMR3ON = 0;
  2998  005270  90B1               	bcf	4017,0,c	;volatile
  2999  005272  0012               	return		;funcret
  3000  005274                     __end_of_stopSignals:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _sort *****************
  3013 ;; Defined at:
  3014 ;;		line 63 in file "sort.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:   12
  3035 ;; This function calls:
  3036 ;;		_Distribution
  3037 ;;		_ID
  3038 ;;		_Loading
  3039 ;; This function is called by:
  3040 ;;		_main
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text2
  3045  0051DC                     __ptext2:
  3046                           	opt stack 0
  3047  0051DC                     _sort:
  3048                           	opt stack 18
  3049                           
  3050                           ;sort.c: 64: if(machine_state == Sorting_state){
  3051                           
  3052                           ;incstack = 0
  3053  0051DC  0100               	movlb	0	; () banked
  3054  0051DE  05FC               	decf	_machine_state& (0+255),w,b
  3055  0051E0  B4D8               	btfsc	status,2,c
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;sort.c: 65: Loading();
  3059  0051E2  ECB6  F008         	call	_Loading	;wreg free
  3060                           
  3061                           ;sort.c: 66: }
  3062                           ;sort.c: 67: if(machine_state == Sorting_state){
  3063  0051E6  0100               	movlb	0	; () banked
  3064  0051E8  05FC               	decf	_machine_state& (0+255),w,b
  3065  0051EA  B4D8               	btfsc	status,2,c
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 68: ID();
  3069  0051EC  EC34  F016         	call	_ID	;wreg free
  3070                           
  3071                           ;sort.c: 69: }
  3072                           ;sort.c: 70: if(machine_state == Sorting_state){
  3073  0051F0  0100               	movlb	0	; () banked
  3074  0051F2  05FC               	decf	_machine_state& (0+255),w,b
  3075  0051F4  A4D8               	btfss	status,2,c
  3076  0051F6  0012               	return	
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;sort.c: 71: Distribution();
  3080  0051F8  EC39  F01F         	call	_Distribution	;wreg free
  3081  0051FC  0012               	return	
  3082  0051FE                     __end_of_sort:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _Loading *****************
  3095 ;; Defined at:
  3096 ;;		line 75 in file "sort.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  i               2   62[BANK0 ] int 
  3101 ;;  i               2   60[BANK0 ] int 
  3102 ;;  i               2   58[BANK0 ] int 
  3103 ;;  i               2   56[BANK0 ] int 
  3104 ;;  i               2   54[BANK0 ] int 
  3105 ;;  j               2   64[BANK0 ] int 
  3106 ;;  i               2   66[BANK0 ] int 
  3107 ;;  addr            2   51[BANK0 ] unsigned short 
  3108 ;;  byte1           1   53[BANK0 ] unsigned char 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:       19 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:   11
  3125 ;; This function calls:
  3126 ;;		_EEPROM_read
  3127 ;;		_EEPROM_write
  3128 ;;		_delay_ms
  3129 ;;		_getIR
  3130 ;;		_getMAG
  3131 ;;		_initGlobalVars
  3132 ;;		_initServos
  3133 ;;		_initSortTimer
  3134 ;;		_lcdInst
  3135 ;;		_readIR
  3136 ;; This function is called by:
  3137 ;;		_sort
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text3
  3142  00116C                     __ptext3:
  3143                           	opt stack 0
  3144  00116C                     _Loading:
  3145                           	opt stack 18
  3146                           
  3147                           ;sort.c: 76: if(first){
  3148                           
  3149                           ;incstack = 0
  3150  00116C  0101               	movlb	1	; () banked
  3151  00116E  5139               	movf	_first& (0+255),w,b
  3152  001170  0101               	movlb	1	; () banked
  3153  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3154  001174  B4D8               	btfsc	status,2,c
  3155  001176  D066               	goto	l7242
  3156                           
  3157                           ; BSR set to: 1
  3158                           ;sort.c: 77: initGlobalVars();
  3159  001178  EC34  F021         	call	_initGlobalVars	;wreg free
  3160                           
  3161                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3162  00117C  0E01               	movlw	1
  3163  00117E  EC6C  F029         	call	_lcdInst
  3164  001182  0E68               	movlw	104
  3165  001184  0100               	movlb	0	; () banked
  3166  001186  6FB1               	movwf	??_Loading& (0+255),b
  3167  001188  0EE4               	movlw	228
  3168  00118A                     u8557:
  3169  00118A  2EE8               	decfsz	wreg,f,c
  3170  00118C  D7FE               	bra	u8557
  3171  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3172  001190  D7FC               	bra	u8557
  3173  001192  F000               	nop	
  3174                           
  3175                           ;sort.c: 79: initSortTimer();
  3176  001194  EC8A  F021         	call	_initSortTimer	;wreg free
  3177                           
  3178                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3179  001198  8A8B               	bsf	3979,5,c	;volatile
  3180                           
  3181                           ;sort.c: 85: sel = EEPROM_read(0);
  3182  00119A  0E00               	movlw	0
  3183  00119C  0100               	movlb	0	; () banked
  3184  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3185  0011A0  0E00               	movlw	0
  3186  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3187  0011A4  EC3A  F029         	call	_EEPROM_read	;wreg free
  3188  0011A8  0100               	movlb	0	; () banked
  3189  0011AA  6FFD               	movwf	_sel& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3193  0011AC  0100               	movlb	0	; () banked
  3194  0011AE  51FD               	movf	_sel& (0+255),w,b
  3195  0011B0  0D0B               	mullw	11
  3196  0011B2  0E01               	movlw	1
  3197  0011B4  24F3               	addwf	prodl,w,c
  3198  0011B6  0100               	movlb	0	; () banked
  3199  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3200  0011BA  0E00               	movlw	0
  3201  0011BC  20F4               	addwfc	prodh,w,c
  3202  0011BE  0100               	movlb	0	; () banked
  3203  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3207  0011C2  0E7F               	movlw	127
  3208  0011C4  0100               	movlb	0	; () banked
  3209  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3213  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3214  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3215  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3216  0011D4  ECC5  F01E         	call	_EEPROM_write	;wreg free
  3217                           
  3218                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3219  0011D8  948A               	bcf	3978,2,c	;volatile
  3220                           
  3221                           ;sort.c: 93: for(int i=0; i<46; i++){
  3222  0011DA  0E00               	movlw	0
  3223  0011DC  0100               	movlb	0	; () banked
  3224  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3225  0011E0  0E00               	movlw	0
  3226  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229  0011E4  0100               	movlb	0	; () banked
  3230  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3231  0011E8  D008               	goto	l7232
  3232  0011EA  0100               	movlb	0	; () banked
  3233  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3234  0011EE  E126               	bnz	l752
  3235  0011F0  0E2E               	movlw	46
  3236  0011F2  0100               	movlb	0	; () banked
  3237  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3238  0011F6  B0D8               	btfsc	status,0,c
  3239  0011F8  D021               	goto	l752
  3240  0011FA                     l7232:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3244  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3245  0011FC  D004               	goto	u5590
  3246  0011FE  0100               	movlb	0	; () banked
  3247  001200  6BB1               	clrf	??_Loading& (0+255),b
  3248  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3249  001204  D002               	goto	u5608
  3250  001206                     u5590:
  3251  001206  0100               	movlb	0	; () banked
  3252  001208  6BB1               	clrf	??_Loading& (0+255),b
  3253  00120A                     u5608:
  3254  00120A  0100               	movlb	0	; () banked
  3255  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3256  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3257  001210  508A               	movf	3978,w,c	;volatile
  3258  001212  0100               	movlb	0	; () banked
  3259  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3260  001216  0BFB               	andlw	-5
  3261  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3262  00121A  6E8A               	movwf	3978,c	;volatile
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 95: delay_ms(45-i);
  3266  00121C  0100               	movlb	0	; () banked
  3267  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3268  001220  0800               	sublw	0
  3269  001222  0F2D               	addlw	45
  3270  001224  EC8E  F028         	call	_delay_ms
  3271  001228  0100               	movlb	0	; () banked
  3272  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3273  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3274                           
  3275                           ; BSR set to: 0
  3276  00122E  0100               	movlb	0	; () banked
  3277  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3278  001232  D7E3               	goto	l7232
  3279  001234  0100               	movlb	0	; () banked
  3280  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3281  001238  E101               	bnz	u5610
  3282  00123A  D7DA               	goto	L1
  3283  00123C                     u5610:
  3284  00123C                     l752:
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;sort.c: 96: }
  3288                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3289  00123C  848A               	bsf	3978,2,c	;volatile
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 100: initServos();
  3293  00123E  EC57  F025         	call	_initServos	;wreg free
  3294                           
  3295                           ;sort.c: 101: }
  3296  001242  0012               	return	
  3297  001244                     l7242:
  3298                           
  3299                           ;sort.c: 102: else{
  3300                           ;sort.c: 105: if(!f_loadingNewCan){
  3301  001244  0100               	movlb	0	; () banked
  3302  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3303  001248  0100               	movlb	0	; () banked
  3304  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3305  00124C  A4D8               	btfss	status,2,c
  3306  00124E  D018               	goto	l7258
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;sort.c: 107: getIR();
  3310  001250  ECBC  F023         	call	_getIR	;wreg free
  3311                           
  3312                           ;sort.c: 109: if(!f_loadingNewCan){
  3313  001254  0100               	movlb	0	; () banked
  3314  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3315  001258  0100               	movlb	0	; () banked
  3316  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3317  00125C  B4D8               	btfsc	status,2,c
  3318  00125E  0012               	return	
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 113: else{
  3322                           ;sort.c: 114: count_total++;
  3323                           
  3324                           ; BSR set to: 0
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;sort.c: 111: }
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 110: return;
  3331  001260  0100               	movlb	0	; () banked
  3332  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3333  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 115: if(count_total == 12){
  3337  001266  0E0C               	movlw	12
  3338  001268  0100               	movlb	0	; () banked
  3339  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3340  00126C  0100               	movlb	0	; () banked
  3341  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3342  001270  A4D8               	btfss	status,2,c
  3343  001272  0012               	return	
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 116: f_lastCan = 1;
  3347  001274  0E00               	movlw	0
  3348  001276  0100               	movlb	0	; () banked
  3349  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3350  00127A  0E01               	movlw	1
  3351  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;sort.c: 117: }
  3355                           ;sort.c: 118: }
  3356                           ;sort.c: 119: }
  3357                           
  3358                           ; BSR set to: 0
  3359  00127E  0012               	return	
  3360  001280                     l7258:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 122: else if(f_ID_receive){
  3364  001280  0101               	movlb	1	; () banked
  3365  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3366  001284  0101               	movlb	1	; () banked
  3367  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3368  001288  B4D8               	btfsc	status,2,c
  3369  00128A  0012               	return	
  3370                           
  3371                           ; BSR set to: 1
  3372                           ;sort.c: 123: f_most_recent_sort_time = 1;
  3373  00128C  0E00               	movlw	0
  3374  00128E  0101               	movlb	1	; () banked
  3375  001290  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3376  001292  0E01               	movlw	1
  3377  001294  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3378                           
  3379                           ;sort.c: 124: f_loadingNewCan = 0;
  3380  001296  0E00               	movlw	0
  3381  001298  0100               	movlb	0	; () banked
  3382  00129A  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3383  00129C  0E00               	movlw	0
  3384  00129E  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 125: _delay((unsigned long)((750)*(32000000/4000.0)));
  3388  0012A0  0E1F               	movlw	31
  3389  0012A2  0100               	movlb	0	; () banked
  3390  0012A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3391  0012A6  0E71               	movlw	113
  3392  0012A8  0100               	movlb	0	; () banked
  3393  0012AA  6FB1               	movwf	??_Loading& (0+255),b
  3394  0012AC  0E1E               	movlw	30
  3395  0012AE                     u8567:
  3396  0012AE  2EE8               	decfsz	wreg,f,c
  3397  0012B0  D7FE               	bra	u8567
  3398  0012B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3399  0012B4  D7FC               	bra	u8567
  3400  0012B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3401  0012B8  D7FA               	bra	u8567
  3402  0012BA  F000               	nop	
  3403                           
  3404                           ;sort.c: 126: LATBbits.LATB2 = 0;
  3405  0012BC  948A               	bcf	3978,2,c	;volatile
  3406                           
  3407                           ;sort.c: 130: getMAG();
  3408  0012BE  ECFD  F026         	call	_getMAG	;wreg free
  3409                           
  3410                           ;sort.c: 131: sensor_outputs[0] = MAG_signal;
  3411  0012C2  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3412  0012C6  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3413                           
  3414                           ;sort.c: 133: if(sensor_outputs[0]){
  3415  0012CA  0100               	movlb	0	; () banked
  3416  0012CC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3417  0012CE  0100               	movlb	0	; () banked
  3418  0012D0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3419  0012D2  B4D8               	btfsc	status,2,c
  3420  0012D4  D01D               	goto	l7284
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;sort.c: 134: for(int i = 0; i<2500; i++){
  3424  0012D6  0E00               	movlw	0
  3425  0012D8  0100               	movlb	0	; () banked
  3426  0012DA  6FB7               	movwf	(Loading@i_1148+1)& (0+255),b
  3427  0012DC  0E00               	movlw	0
  3428  0012DE  6FB6               	movwf	Loading@i_1148& (0+255),b
  3429  0012E0                     l7274:
  3430                           
  3431                           ; BSR set to: 0
  3432  0012E0  0100               	movlb	0	; () banked
  3433  0012E2  BFB7               	btfsc	(Loading@i_1148+1)& (0+255),7,b
  3434  0012E4  D008               	goto	l762
  3435  0012E6  0EC4               	movlw	196
  3436  0012E8  0100               	movlb	0	; () banked
  3437  0012EA  5DB6               	subwf	Loading@i_1148& (0+255),w,b
  3438  0012EC  0E09               	movlw	9
  3439  0012EE  0100               	movlb	0	; () banked
  3440  0012F0  59B7               	subwfb	(Loading@i_1148+1)& (0+255),w,b
  3441  0012F2  B0D8               	btfsc	status,0,c
  3442  0012F4  D02A               	goto	l7296
  3443  0012F6                     l762:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sort.c: 135: LATAbits.LATA4 = 1;
  3447  0012F6  8889               	bsf	3977,4,c	;volatile
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;sort.c: 136: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3451  0012F8  0EC8               	movlw	200
  3452  0012FA                     u8577:
  3453  0012FA  2EE8               	decfsz	wreg,f,c
  3454  0012FC  D7FE               	bra	u8577
  3455                           
  3456                           ;sort.c: 137: LATAbits.LATA4 = 0;
  3457  0012FE  9889               	bcf	3977,4,c	;volatile
  3458                           
  3459                           ;sort.c: 138: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3460  001300  0E42               	movlw	66
  3461  001302                     u8587:
  3462  001302  2EE8               	decfsz	wreg,f,c
  3463  001304  D7FE               	bra	u8587
  3464  001306  D000               	nop2	
  3465  001308  0100               	movlb	0	; () banked
  3466  00130A  4BB6               	infsnz	Loading@i_1148& (0+255),f,b
  3467  00130C  2BB7               	incf	(Loading@i_1148+1)& (0+255),f,b
  3468  00130E  D7E8               	goto	l7274
  3469  001310                     l7284:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 141: else{
  3473                           ;sort.c: 142: for(int i = 0; i<2500; i++){
  3474  001310  0E00               	movlw	0
  3475  001312  0100               	movlb	0	; () banked
  3476  001314  6FB9               	movwf	(Loading@i_1157+1)& (0+255),b
  3477  001316  0E00               	movlw	0
  3478  001318  6FB8               	movwf	Loading@i_1157& (0+255),b
  3479  00131A                     l7286:
  3480                           
  3481                           ; BSR set to: 0
  3482  00131A  0100               	movlb	0	; () banked
  3483  00131C  BFB9               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3484  00131E  D008               	goto	l765
  3485  001320  0EC4               	movlw	196
  3486  001322  0100               	movlb	0	; () banked
  3487  001324  5DB8               	subwf	Loading@i_1157& (0+255),w,b
  3488  001326  0E09               	movlw	9
  3489  001328  0100               	movlb	0	; () banked
  3490  00132A  59B9               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3491  00132C  B0D8               	btfsc	status,0,c
  3492  00132E  D00D               	goto	l7296
  3493  001330                     l765:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 143: LATAbits.LATA4 = 1;
  3497  001330  8889               	bsf	3977,4,c	;volatile
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;sort.c: 144: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3501  001332  0E9A               	movlw	154
  3502  001334                     u8597:
  3503  001334  2EE8               	decfsz	wreg,f,c
  3504  001336  D7FE               	bra	u8597
  3505  001338  D000               	nop2	
  3506                           
  3507                           ;sort.c: 145: LATAbits.LATA4 = 0;
  3508  00133A  9889               	bcf	3977,4,c	;volatile
  3509                           
  3510                           ;sort.c: 146: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3511  00133C  0E70               	movlw	112
  3512  00133E                     u8607:
  3513  00133E  2EE8               	decfsz	wreg,f,c
  3514  001340  D7FE               	bra	u8607
  3515  001342  0100               	movlb	0	; () banked
  3516  001344  4BB8               	infsnz	Loading@i_1157& (0+255),f,b
  3517  001346  2BB9               	incf	(Loading@i_1157+1)& (0+255),f,b
  3518  001348  D7E8               	goto	l7286
  3519  00134A                     l7296:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;sort.c: 147: }
  3523                           ;sort.c: 148: }
  3524                           ;sort.c: 150: _delay((unsigned long)((350)*(32000000/4000.0)));
  3525  00134A  0E0F               	movlw	15
  3526  00134C  0100               	movlb	0	; () banked
  3527  00134E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3528  001350  0E35               	movlw	53
  3529  001352  0100               	movlb	0	; () banked
  3530  001354  6FB1               	movwf	??_Loading& (0+255),b
  3531  001356  0E51               	movlw	81
  3532  001358                     u8617:
  3533  001358  2EE8               	decfsz	wreg,f,c
  3534  00135A  D7FE               	bra	u8617
  3535  00135C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3536  00135E  D7FC               	bra	u8617
  3537  001360  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3538  001362  D7FA               	bra	u8617
  3539                           
  3540                           ;sort.c: 152: readIR();
  3541  001364  ECFF  F025         	call	_readIR	;wreg free
  3542                           
  3543                           ;sort.c: 153: if(IR_signal==1){
  3544  001368  0100               	movlb	0	; () banked
  3545  00136A  05E6               	decf	_IR_signal& (0+255),w,b
  3546  00136C  0100               	movlb	0	; () banked
  3547  00136E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3548  001370  A4D8               	btfss	status,2,c
  3549  001372  D147               	goto	l7414
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;sort.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  3553  001374  0E05               	movlw	5
  3554  001376  0100               	movlb	0	; () banked
  3555  001378  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3556  00137A  0E0F               	movlw	15
  3557  00137C  0100               	movlb	0	; () banked
  3558  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3559  001380  0EF1               	movlw	241
  3560  001382                     u8627:
  3561  001382  2EE8               	decfsz	wreg,f,c
  3562  001384  D7FE               	bra	u8627
  3563  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3564  001388  D7FC               	bra	u8627
  3565  00138A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3566  00138C  D7FA               	bra	u8627
  3567                           
  3568                           ;sort.c: 155: readIR();
  3569  00138E  ECFF  F025         	call	_readIR	;wreg free
  3570                           
  3571                           ;sort.c: 156: if(IR_signal==1){
  3572  001392  0100               	movlb	0	; () banked
  3573  001394  05E6               	decf	_IR_signal& (0+255),w,b
  3574  001396  0100               	movlb	0	; () banked
  3575  001398  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3576  00139A  A4D8               	btfss	status,2,c
  3577  00139C  D040               	goto	l7334
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;sort.c: 157: if(sensor_outputs[0]){
  3581  00139E  0100               	movlb	0	; () banked
  3582  0013A0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3583  0013A2  0100               	movlb	0	; () banked
  3584  0013A4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3585  0013A6  B4D8               	btfsc	status,2,c
  3586  0013A8  D01D               	goto	l7322
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3590  0013AA  0E00               	movlw	0
  3591  0013AC  0100               	movlb	0	; () banked
  3592  0013AE  6FBB               	movwf	(Loading@i_1159+1)& (0+255),b
  3593  0013B0  0E00               	movlw	0
  3594  0013B2  6FBA               	movwf	Loading@i_1159& (0+255),b
  3595  0013B4                     l7312:
  3596                           
  3597                           ; BSR set to: 0
  3598  0013B4  0100               	movlb	0	; () banked
  3599  0013B6  BFBB               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3600  0013B8  D008               	goto	l770
  3601  0013BA  0EC4               	movlw	196
  3602  0013BC  0100               	movlb	0	; () banked
  3603  0013BE  5DBA               	subwf	Loading@i_1159& (0+255),w,b
  3604  0013C0  0E09               	movlw	9
  3605  0013C2  0100               	movlb	0	; () banked
  3606  0013C4  59BB               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3607  0013C6  B0D8               	btfsc	status,0,c
  3608  0013C8  D02A               	goto	l7334
  3609  0013CA                     l770:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3613  0013CA  8889               	bsf	3977,4,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 160: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3617  0013CC  0EC8               	movlw	200
  3618  0013CE                     u8637:
  3619  0013CE  2EE8               	decfsz	wreg,f,c
  3620  0013D0  D7FE               	bra	u8637
  3621                           
  3622                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3623  0013D2  9889               	bcf	3977,4,c	;volatile
  3624                           
  3625                           ;sort.c: 162: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3626  0013D4  0E42               	movlw	66
  3627  0013D6                     u8647:
  3628  0013D6  2EE8               	decfsz	wreg,f,c
  3629  0013D8  D7FE               	bra	u8647
  3630  0013DA  D000               	nop2	
  3631  0013DC  0100               	movlb	0	; () banked
  3632  0013DE  4BBA               	infsnz	Loading@i_1159& (0+255),f,b
  3633  0013E0  2BBB               	incf	(Loading@i_1159+1)& (0+255),f,b
  3634  0013E2  D7E8               	goto	l7312
  3635  0013E4                     l7322:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 165: else{
  3639                           ;sort.c: 166: for(int i = 0; i<2500; i++){
  3640  0013E4  0E00               	movlw	0
  3641  0013E6  0100               	movlb	0	; () banked
  3642  0013E8  6FBD               	movwf	(Loading@i_1160+1)& (0+255),b
  3643  0013EA  0E00               	movlw	0
  3644  0013EC  6FBC               	movwf	Loading@i_1160& (0+255),b
  3645  0013EE                     l7324:
  3646                           
  3647                           ; BSR set to: 0
  3648  0013EE  0100               	movlb	0	; () banked
  3649  0013F0  BFBD               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3650  0013F2  D008               	goto	l773
  3651  0013F4  0EC4               	movlw	196
  3652  0013F6  0100               	movlb	0	; () banked
  3653  0013F8  5DBC               	subwf	Loading@i_1160& (0+255),w,b
  3654  0013FA  0E09               	movlw	9
  3655  0013FC  0100               	movlb	0	; () banked
  3656  0013FE  59BD               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3657  001400  B0D8               	btfsc	status,0,c
  3658  001402  D00D               	goto	l7334
  3659  001404                     l773:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 167: LATAbits.LATA4 = 1;
  3663  001404  8889               	bsf	3977,4,c	;volatile
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 168: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3667  001406  0E9A               	movlw	154
  3668  001408                     u8657:
  3669  001408  2EE8               	decfsz	wreg,f,c
  3670  00140A  D7FE               	bra	u8657
  3671  00140C  D000               	nop2	
  3672                           
  3673                           ;sort.c: 169: LATAbits.LATA4 = 0;
  3674  00140E  9889               	bcf	3977,4,c	;volatile
  3675                           
  3676                           ;sort.c: 170: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3677  001410  0E70               	movlw	112
  3678  001412                     u8667:
  3679  001412  2EE8               	decfsz	wreg,f,c
  3680  001414  D7FE               	bra	u8667
  3681  001416  0100               	movlb	0	; () banked
  3682  001418  4BBC               	infsnz	Loading@i_1160& (0+255),f,b
  3683  00141A  2BBD               	incf	(Loading@i_1160+1)& (0+255),f,b
  3684  00141C  D7E8               	goto	l7324
  3685  00141E                     l7334:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 171: }
  3689                           ;sort.c: 172: }
  3690                           ;sort.c: 173: }
  3691                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3692  00141E  0E0F               	movlw	15
  3693  001420  0100               	movlb	0	; () banked
  3694  001422  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3695  001424  0E35               	movlw	53
  3696  001426  0100               	movlb	0	; () banked
  3697  001428  6FB1               	movwf	??_Loading& (0+255),b
  3698  00142A  0E51               	movlw	81
  3699  00142C                     u8677:
  3700  00142C  2EE8               	decfsz	wreg,f,c
  3701  00142E  D7FE               	bra	u8677
  3702  001430  2FB1               	decfsz	??_Loading& (0+255),f,b
  3703  001432  D7FC               	bra	u8677
  3704  001434  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3705  001436  D7FA               	bra	u8677
  3706                           
  3707                           ;sort.c: 177: int j = 1;
  3708  001438  0E00               	movlw	0
  3709  00143A  0100               	movlb	0	; () banked
  3710  00143C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3711  00143E  0E01               	movlw	1
  3712  001440  6FC0               	movwf	Loading@j& (0+255),b
  3713                           
  3714                           ;sort.c: 178: while(IR_signal == 1){
  3715  001442  D0D8               	goto	l7412
  3716  001444                     l7338:
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 179: readIR();
  3720  001444  ECFF  F025         	call	_readIR	;wreg free
  3721                           
  3722                           ;sort.c: 180: if(j == 10){
  3723  001448  0E0A               	movlw	10
  3724  00144A  0100               	movlb	0	; () banked
  3725  00144C  19C0               	xorwf	Loading@j& (0+255),w,b
  3726  00144E  0100               	movlb	0	; () banked
  3727  001450  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3728  001452  A4D8               	btfss	status,2,c
  3729  001454  D016               	goto	l7346
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;sort.c: 181: LATBbits.LATB2 = !LATBbits.LATB2;
  3733  001456  B48A               	btfsc	3978,2,c	;volatile
  3734  001458  D004               	goto	u5790
  3735  00145A  0100               	movlb	0	; () banked
  3736  00145C  6BB1               	clrf	??_Loading& (0+255),b
  3737  00145E  2BB1               	incf	??_Loading& (0+255),f,b
  3738  001460  D002               	goto	u5808
  3739  001462                     u5790:
  3740  001462  0100               	movlb	0	; () banked
  3741  001464  6BB1               	clrf	??_Loading& (0+255),b
  3742  001466                     u5808:
  3743  001466  0100               	movlb	0	; () banked
  3744  001468  47B1               	rlncf	??_Loading& (0+255),f,b
  3745  00146A  47B1               	rlncf	??_Loading& (0+255),f,b
  3746  00146C  508A               	movf	3978,w,c	;volatile
  3747  00146E  0100               	movlb	0	; () banked
  3748  001470  19B1               	xorwf	??_Loading& (0+255),w,b
  3749  001472  0BFB               	andlw	-5
  3750  001474  19B1               	xorwf	??_Loading& (0+255),w,b
  3751  001476  6E8A               	movwf	3978,c	;volatile
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;sort.c: 182: j = 0;
  3755  001478  0E00               	movlw	0
  3756  00147A  0100               	movlb	0	; () banked
  3757  00147C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3758  00147E  0E00               	movlw	0
  3759  001480  6FC0               	movwf	Loading@j& (0+255),b
  3760  001482                     l7346:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;sort.c: 183: }
  3764                           ;sort.c: 184: if(IR_signal==1){
  3765  001482  0100               	movlb	0	; () banked
  3766  001484  05E6               	decf	_IR_signal& (0+255),w,b
  3767  001486  0100               	movlb	0	; () banked
  3768  001488  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3769  00148A  A4D8               	btfss	status,2,c
  3770  00148C  D098               	goto	l7400
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;sort.c: 185: _delay((unsigned long)((350)*(32000000/4000.0)));
  3774  00148E  0E0F               	movlw	15
  3775  001490  0100               	movlb	0	; () banked
  3776  001492  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3777  001494  0E35               	movlw	53
  3778  001496  0100               	movlb	0	; () banked
  3779  001498  6FB1               	movwf	??_Loading& (0+255),b
  3780  00149A  0E51               	movlw	81
  3781  00149C                     u8687:
  3782  00149C  2EE8               	decfsz	wreg,f,c
  3783  00149E  D7FE               	bra	u8687
  3784  0014A0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3785  0014A2  D7FC               	bra	u8687
  3786  0014A4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3787  0014A6  D7FA               	bra	u8687
  3788                           
  3789                           ;sort.c: 186: readIR();
  3790  0014A8  ECFF  F025         	call	_readIR	;wreg free
  3791                           
  3792                           ;sort.c: 187: if(IR_signal==1){
  3793  0014AC  0100               	movlb	0	; () banked
  3794  0014AE  05E6               	decf	_IR_signal& (0+255),w,b
  3795  0014B0  0100               	movlb	0	; () banked
  3796  0014B2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3797  0014B4  A4D8               	btfss	status,2,c
  3798  0014B6  D07F               	goto	l779
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;sort.c: 188: if(sensor_outputs[0]){
  3802  0014B8  0100               	movlb	0	; () banked
  3803  0014BA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3804  0014BC  0100               	movlb	0	; () banked
  3805  0014BE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3806  0014C0  B4D8               	btfsc	status,2,c
  3807  0014C2  D011               	goto	l7362
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;sort.c: 189: LATAbits.LATA4 = 1;
  3811  0014C4  8889               	bsf	3977,4,c	;volatile
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;sort.c: 190: _delay((unsigned long)((250)*(32000000/4000.0)));
  3815  0014C6  0E0B               	movlw	11
  3816  0014C8  0100               	movlb	0	; () banked
  3817  0014CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3818  0014CC  0E26               	movlw	38
  3819  0014CE  0100               	movlb	0	; () banked
  3820  0014D0  6FB1               	movwf	??_Loading& (0+255),b
  3821  0014D2  0E5D               	movlw	93
  3822  0014D4                     u8697:
  3823  0014D4  2EE8               	decfsz	wreg,f,c
  3824  0014D6  D7FE               	bra	u8697
  3825  0014D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3826  0014DA  D7FC               	bra	u8697
  3827  0014DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3828  0014DE  D7FA               	bra	u8697
  3829  0014E0  D000               	nop2	
  3830                           
  3831                           ;sort.c: 191: LATAbits.LATA4 = 0;
  3832  0014E2  9889               	bcf	3977,4,c	;volatile
  3833                           
  3834                           ;sort.c: 192: }
  3835  0014E4  D068               	goto	l779
  3836  0014E6                     l7362:
  3837                           
  3838                           ;sort.c: 193: else{
  3839                           ;sort.c: 194: for(int i = 0; i<2500; i++){
  3840  0014E6  0E00               	movlw	0
  3841  0014E8  0100               	movlb	0	; () banked
  3842  0014EA  6FBF               	movwf	(Loading@i_1162+1)& (0+255),b
  3843  0014EC  0E00               	movlw	0
  3844  0014EE  6FBE               	movwf	Loading@i_1162& (0+255),b
  3845  0014F0                     l7364:
  3846                           
  3847                           ; BSR set to: 0
  3848  0014F0  0100               	movlb	0	; () banked
  3849  0014F2  BFBF               	btfsc	(Loading@i_1162+1)& (0+255),7,b
  3850  0014F4  D041               	goto	l7392
  3851  0014F6  0EC4               	movlw	196
  3852  0014F8  0100               	movlb	0	; () banked
  3853  0014FA  5DBE               	subwf	Loading@i_1162& (0+255),w,b
  3854  0014FC  0E09               	movlw	9
  3855  0014FE  0100               	movlb	0	; () banked
  3856  001500  59BF               	subwfb	(Loading@i_1162+1)& (0+255),w,b
  3857  001502  B0D8               	btfsc	status,0,c
  3858  001504  D058               	goto	l779
  3859  001506  D038               	goto	l7392
  3860  001508                     l785:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3864  001508  8889               	bsf	3977,4,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;sort.c: 198: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3868  00150A  0EC8               	movlw	200
  3869  00150C                     u8707:
  3870  00150C  2EE8               	decfsz	wreg,f,c
  3871  00150E  D7FE               	bra	u8707
  3872                           
  3873                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3874  001510  9889               	bcf	3977,4,c	;volatile
  3875                           
  3876                           ;sort.c: 200: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3877  001512  0E42               	movlw	66
  3878  001514                     u8717:
  3879  001514  2EE8               	decfsz	wreg,f,c
  3880  001516  D7FE               	bra	u8717
  3881  001518  D01C               	goto	L2
  3882  00151A                     l787:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3886  00151A  8889               	bsf	3977,4,c	;volatile
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 204: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3890  00151C  0ED5               	movlw	213
  3891  00151E                     u8727:
  3892  00151E  2EE8               	decfsz	wreg,f,c
  3893  001520  D7FE               	bra	u8727
  3894  001522  F000               	nop	
  3895                           
  3896                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3897  001524  9889               	bcf	3977,4,c	;volatile
  3898                           
  3899                           ;sort.c: 206: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3900  001526  0E35               	movlw	53
  3901  001528                     u8737:
  3902  001528  2EE8               	decfsz	wreg,f,c
  3903  00152A  D7FE               	bra	u8737
  3904  00152C  D01D               	goto	L3
  3905  00152E                     l788:
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3909  00152E  8889               	bsf	3977,4,c	;volatile
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;sort.c: 210: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3913  001530  0EE2               	movlw	226
  3914  001532                     u8747:
  3915  001532  2EE8               	decfsz	wreg,f,c
  3916  001534  D7FE               	bra	u8747
  3917  001536  D000               	nop2	
  3918                           
  3919                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3920  001538  9889               	bcf	3977,4,c	;volatile
  3921                           
  3922                           ;sort.c: 212: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3923  00153A  0E28               	movlw	40
  3924  00153C                     u8757:
  3925  00153C  2EE8               	decfsz	wreg,f,c
  3926  00153E  D7FE               	bra	u8757
  3927                           
  3928                           ;sort.c: 213: break;
  3929  001540  D036               	goto	l7394
  3930  001542                     l789:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3934  001542  8889               	bsf	3977,4,c	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;sort.c: 216: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3938  001544  0EF0               	movlw	240
  3939  001546                     u8767:
  3940  001546  2EE8               	decfsz	wreg,f,c
  3941  001548  D7FE               	bra	u8767
  3942                           
  3943                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3944  00154A  9889               	bcf	3977,4,c	;volatile
  3945                           
  3946                           ;sort.c: 218: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3947  00154C  0E1A               	movlw	26
  3948  00154E                     u8777:
  3949  00154E  2EE8               	decfsz	wreg,f,c
  3950  001550  D7FE               	bra	u8777
  3951  001552                     L2:
  3952  001552  D000               	nop2	
  3953                           
  3954                           ;sort.c: 219: break;
  3955  001554  D02C               	goto	l7394
  3956  001556                     l790:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3960  001556  8889               	bsf	3977,4,c	;volatile
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;sort.c: 222: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3964  001558  0EFD               	movlw	253
  3965  00155A                     u8787:
  3966  00155A  2EE8               	decfsz	wreg,f,c
  3967  00155C  D7FE               	bra	u8787
  3968  00155E  F000               	nop	
  3969                           
  3970                           ;sort.c: 223: LATAbits.LATA4 = 0;
  3971  001560  9889               	bcf	3977,4,c	;volatile
  3972                           
  3973                           ;sort.c: 224: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3974  001562  0E0D               	movlw	13
  3975  001564                     u8797:
  3976  001564  2EE8               	decfsz	wreg,f,c
  3977  001566  D7FE               	bra	u8797
  3978  001568                     L3:
  3979  001568  F000               	nop	
  3980                           
  3981                           ;sort.c: 225: break;
  3982  00156A  D021               	goto	l7394
  3983  00156C                     l791:
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;sort.c: 227: LATAbits.LATA4 = 1;
  3987  00156C  8889               	bsf	3977,4,c	;volatile
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;sort.c: 228: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3991  00156E  0EA0               	movlw	160
  3992  001570                     u8807:
  3993  001570  D000               	nop2	
  3994  001572  2EE8               	decfsz	wreg,f,c
  3995  001574  D7FD               	bra	u8807
  3996                           
  3997                           ;sort.c: 230: }
  3998                           
  3999                           ;sort.c: 229: break;
  4000  001576  D01B               	goto	l7394
  4001  001578                     l7392:
  4002  001578  C0C0  F0B1         	movff	Loading@j,??_Loading
  4003  00157C  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4004                           
  4005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4006                           ; Switch size 1, requested type "space"
  4007                           ; Number of cases is 1, Range of values is 0 to 0
  4008                           ; switch strategies available:
  4009                           ; Name         Instructions Cycles
  4010                           ; simple_byte            4     3 (average)
  4011                           ;	Chosen strategy is simple_byte
  4012  001580  0100               	movlb	0	; () banked
  4013  001582  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4014  001584  0A00               	xorlw	0	; case 0
  4015  001586  A4D8               	btfss	status,2,c
  4016  001588  D7F1               	goto	l791
  4017                           
  4018                           ; BSR set to: 0
  4019                           ; Switch size 1, requested type "space"
  4020                           ; Number of cases is 5, Range of values is 1 to 5
  4021                           ; switch strategies available:
  4022                           ; Name         Instructions Cycles
  4023                           ; simple_byte           16     9 (average)
  4024                           ;	Chosen strategy is simple_byte
  4025  00158A  0100               	movlb	0	; () banked
  4026  00158C  51B1               	movf	??_Loading& (0+255),w,b
  4027  00158E  0A01               	xorlw	1	; case 1
  4028  001590  B4D8               	btfsc	status,2,c
  4029  001592  D7BA               	goto	l785
  4030  001594  0A03               	xorlw	3	; case 2
  4031  001596  B4D8               	btfsc	status,2,c
  4032  001598  D7C0               	goto	l787
  4033  00159A  0A01               	xorlw	1	; case 3
  4034  00159C  B4D8               	btfsc	status,2,c
  4035  00159E  D7C7               	goto	l788
  4036  0015A0  0A07               	xorlw	7	; case 4
  4037  0015A2  B4D8               	btfsc	status,2,c
  4038  0015A4  D7CE               	goto	l789
  4039  0015A6  0A01               	xorlw	1	; case 5
  4040  0015A8  B4D8               	btfsc	status,2,c
  4041  0015AA  D7D5               	goto	l790
  4042  0015AC  D7DF               	goto	l791
  4043  0015AE                     l7394:
  4044  0015AE  0100               	movlb	0	; () banked
  4045  0015B0  4BBE               	infsnz	Loading@i_1162& (0+255),f,b
  4046  0015B2  2BBF               	incf	(Loading@i_1162+1)& (0+255),f,b
  4047  0015B4  D79D               	goto	l7364
  4048  0015B6                     l779:
  4049                           
  4050                           ;sort.c: 231: }
  4051                           ;sort.c: 232: }
  4052                           ;sort.c: 233: }
  4053                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4054  0015B6  9889               	bcf	3977,4,c	;volatile
  4055                           
  4056                           ;sort.c: 235: j++;
  4057  0015B8  0100               	movlb	0	; () banked
  4058  0015BA  4BC0               	infsnz	Loading@j& (0+255),f,b
  4059  0015BC  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4060  0015BE                     l7400:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;sort.c: 236: }
  4064                           ;sort.c: 238: if(!IR_signal){
  4065  0015BE  0100               	movlb	0	; () banked
  4066  0015C0  51E6               	movf	_IR_signal& (0+255),w,b
  4067  0015C2  0100               	movlb	0	; () banked
  4068  0015C4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4069  0015C6  A4D8               	btfss	status,2,c
  4070  0015C8  D015               	goto	l7412
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 239: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4074  0015CA  0E29               	movlw	41
  4075  0015CC  0100               	movlb	0	; () banked
  4076  0015CE  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4077  0015D0  0E96               	movlw	150
  4078  0015D2  0100               	movlb	0	; () banked
  4079  0015D4  6FB1               	movwf	??_Loading& (0+255),b
  4080  0015D6  0E7F               	movlw	127
  4081  0015D8                     u8817:
  4082  0015D8  2EE8               	decfsz	wreg,f,c
  4083  0015DA  D7FE               	bra	u8817
  4084  0015DC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4085  0015DE  D7FC               	bra	u8817
  4086  0015E0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4087  0015E2  D7FA               	bra	u8817
  4088                           
  4089                           ;sort.c: 240: readIR();
  4090  0015E4  ECFF  F025         	call	_readIR	;wreg free
  4091                           
  4092                           ;sort.c: 241: if(IR_signal==1){
  4093  0015E8  0100               	movlb	0	; () banked
  4094  0015EA  05E6               	decf	_IR_signal& (0+255),w,b
  4095  0015EC  0100               	movlb	0	; () banked
  4096  0015EE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4097  0015F0  A4D8               	btfss	status,2,c
  4098  0015F2  D006               	goto	l795
  4099  0015F4                     l7412:
  4100                           
  4101                           ; BSR set to: 0
  4102  0015F4  0100               	movlb	0	; () banked
  4103  0015F6  05E6               	decf	_IR_signal& (0+255),w,b
  4104  0015F8  0100               	movlb	0	; () banked
  4105  0015FA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4106  0015FC  B4D8               	btfsc	status,2,c
  4107  0015FE  D722               	goto	l7338
  4108  001600                     l795:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;sort.c: 246: }
  4112                           ;sort.c: 247: }
  4113                           ;sort.c: 248: }
  4114                           ;sort.c: 249: LATBbits.LATB2 = 0;
  4115  001600  948A               	bcf	3978,2,c	;volatile
  4116  001602                     l7414:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;sort.c: 250: }
  4120                           ;sort.c: 251: f_can_coming_to_ID = 1;
  4121  001602  0E00               	movlw	0
  4122  001604  0101               	movlb	1	; () banked
  4123  001606  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4124  001608  0E01               	movlw	1
  4125  00160A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4126                           
  4127                           ; BSR set to: 1
  4128                           
  4129                           ; BSR set to: 1
  4130  00160C  0012               	return	
  4131  00160E                     __end_of_Loading:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           postinc0	equ	0xFEE
  4140                           wreg	equ	0xFE8
  4141                           postdec1	equ	0xFE5
  4142                           fsr1l	equ	0xFE1
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _initSortTimer *****************
  4146 ;; Defined at:
  4147 ;;		line 408 in file "sort.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  i               2    8[BANK0 ] int 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;Total ram usage:        5 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:   10
  4168 ;; This function calls:
  4169 ;;		_getRTC
  4170 ;; This function is called by:
  4171 ;;		_Loading
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text4
  4176  004314                     __ptext4:
  4177                           	opt stack 0
  4178  004314                     _initSortTimer:
  4179                           	opt stack 18
  4180                           
  4181                           ;sort.c: 410: getRTC();
  4182                           
  4183                           ;incstack = 0
  4184  004314  EC76  F022         	call	_getRTC	;wreg free
  4185                           
  4186                           ;sort.c: 411: for(int i = 0; i < 7; i++){
  4187  004318  0E00               	movlw	0
  4188  00431A  0100               	movlb	0	; () banked
  4189  00431C  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4190  00431E  0E00               	movlw	0
  4191  004320  6F88               	movwf	initSortTimer@i& (0+255),b
  4192  004322                     l6816:
  4193                           
  4194                           ; BSR set to: 0
  4195  004322  0100               	movlb	0	; () banked
  4196  004324  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4197  004326  D008               	goto	l6820
  4198  004328  0100               	movlb	0	; () banked
  4199  00432A  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4200  00432C  E140               	bnz	l6826
  4201  00432E  0E07               	movlw	7
  4202  004330  0100               	movlb	0	; () banked
  4203  004332  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4204  004334  B0D8               	btfsc	status,0,c
  4205  004336  D03B               	goto	l6826
  4206  004338                     l6820:
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;sort.c: 412: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4210  004338  0E1C               	movlw	low _time
  4211  00433A  0100               	movlb	0	; () banked
  4212  00433C  2588               	addwf	initSortTimer@i& (0+255),w,b
  4213  00433E  6ED9               	movwf	fsr2l,c
  4214  004340  0E01               	movlw	high _time
  4215  004342  0100               	movlb	0	; () banked
  4216  004344  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4217  004346  6EDA               	movwf	fsr2h,c
  4218  004348  50DF               	movf	indf2,w,c
  4219  00434A  0100               	movlb	0	; () banked
  4220  00434C  6F85               	movwf	??_initSortTimer& (0+255),b
  4221  00434E  0100               	movlb	0	; () banked
  4222  004350  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4223  004352  0E0F               	movlw	15
  4224  004354  1785               	andwf	??_initSortTimer& (0+255),f,b
  4225  004356  0E0F               	movlw	15
  4226  004358  0100               	movlb	0	; () banked
  4227  00435A  1785               	andwf	??_initSortTimer& (0+255),f,b
  4228  00435C  0100               	movlb	0	; () banked
  4229  00435E  5185               	movf	??_initSortTimer& (0+255),w,b
  4230  004360  0D0A               	mullw	10
  4231  004362  0E1C               	movlw	low _time
  4232  004364  0100               	movlb	0	; () banked
  4233  004366  2588               	addwf	initSortTimer@i& (0+255),w,b
  4234  004368  6ED9               	movwf	fsr2l,c
  4235  00436A  0E01               	movlw	high _time
  4236  00436C  0100               	movlb	0	; () banked
  4237  00436E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4238  004370  6EDA               	movwf	fsr2h,c
  4239  004372  50DF               	movf	indf2,w,c
  4240  004374  0B0F               	andlw	15
  4241  004376  0100               	movlb	0	; () banked
  4242  004378  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4243  00437A  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4244  00437C  50F3               	movf	prodl,w,c
  4245  00437E  0100               	movlb	0	; () banked
  4246  004380  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4247  004382  50F4               	movf	prodh,w,c
  4248  004384  0100               	movlb	0	; () banked
  4249  004386  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4250  004388  90D8               	bcf	status,0,c
  4251  00438A  0100               	movlb	0	; () banked
  4252  00438C  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4253  00438E  6ED9               	movwf	fsr2l,c
  4254  004390  0100               	movlb	0	; () banked
  4255  004392  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4256  004394  6EDA               	movwf	fsr2h,c
  4257  004396  0E0E               	movlw	low _startTime
  4258  004398  26D9               	addwf	fsr2l,f,c
  4259  00439A  0E01               	movlw	high _startTime
  4260  00439C  22DA               	addwfc	fsr2h,f,c
  4261  00439E  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4262  0043A2  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4263                           
  4264                           ; BSR set to: 0
  4265  0043A6  0100               	movlb	0	; () banked
  4266  0043A8  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4267  0043AA  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4268  0043AC  D7BA               	goto	l6816
  4269  0043AE                     l6826:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;sort.c: 413: }
  4273                           ;sort.c: 415: T0CON = 0b00010111;
  4274  0043AE  0E17               	movlw	23
  4275  0043B0  6ED5               	movwf	4053,c	;volatile
  4276                           
  4277                           ;sort.c: 424: TMR0H = 0b10000101;
  4278  0043B2  0E85               	movlw	133
  4279  0043B4  6ED7               	movwf	4055,c	;volatile
  4280                           
  4281                           ;sort.c: 425: TMR0L = 0b11101110;
  4282  0043B6  0EEE               	movlw	238
  4283  0043B8  6ED6               	movwf	4054,c	;volatile
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;sort.c: 426: TMR0ON = 1;
  4287  0043BA  8ED5               	bsf	4053,7,c	;volatile
  4288                           
  4289                           ; BSR set to: 0
  4290  0043BC  0012               	return		;funcret
  4291  0043BE                     __end_of_initSortTimer:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           postdec1	equ	0xFE5
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _initGlobalVars *****************
  4311 ;; Defined at:
  4312 ;;		line 378 in file "sort.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    7
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_Loading
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text5
  4341  004268                     __ptext5:
  4342                           	opt stack 0
  4343  004268                     _initGlobalVars:
  4344                           	opt stack 21
  4345                           
  4346                           ;sort.c: 380: first = 0;
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;incstack = 0
  4350  004268  0E00               	movlw	0
  4351  00426A  0101               	movlb	1	; () banked
  4352  00426C  6F3A               	movwf	(_first+1)& (0+255),b
  4353  00426E  0E00               	movlw	0
  4354  004270  6F39               	movwf	_first& (0+255),b
  4355                           
  4356                           ;sort.c: 383: f_loadingNewCan = 0;
  4357  004272  0E00               	movlw	0
  4358  004274  0100               	movlb	0	; () banked
  4359  004276  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4360  004278  0E00               	movlw	0
  4361  00427A  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4362                           
  4363                           ;sort.c: 384: f_lastCan = 0;
  4364  00427C  0E00               	movlw	0
  4365  00427E  0100               	movlb	0	; () banked
  4366  004280  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4367  004282  0E00               	movlw	0
  4368  004284  6FEE               	movwf	_f_lastCan& (0+255),b
  4369                           
  4370                           ;sort.c: 385: f_ID_receive = 1;
  4371  004286  0E00               	movlw	0
  4372  004288  0101               	movlb	1	; () banked
  4373  00428A  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4374  00428C  0E01               	movlw	1
  4375  00428E  6F2F               	movwf	_f_ID_receive& (0+255),b
  4376                           
  4377                           ;sort.c: 386: f_can_coming_to_ID = 0;
  4378  004290  0E00               	movlw	0
  4379  004292  0101               	movlb	1	; () banked
  4380  004294  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4381  004296  0E00               	movlw	0
  4382  004298  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4383                           
  4384                           ;sort.c: 387: f_can_coming_to_distribution = 0;
  4385  00429A  0E00               	movlw	0
  4386  00429C  0101               	movlb	1	; () banked
  4387  00429E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4388  0042A0  0E00               	movlw	0
  4389  0042A2  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4390                           
  4391                           ;sort.c: 388: f_can_distributed = 1;
  4392  0042A4  0E00               	movlw	0
  4393  0042A6  0101               	movlb	1	; () banked
  4394  0042A8  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4395  0042AA  0E01               	movlw	1
  4396  0042AC  6F35               	movwf	_f_can_distributed& (0+255),b
  4397                           
  4398                           ;sort.c: 389: f_most_recent_sort_time = 0;
  4399  0042AE  0E00               	movlw	0
  4400  0042B0  0101               	movlb	1	; () banked
  4401  0042B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4402  0042B4  0E00               	movlw	0
  4403  0042B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4404                           
  4405                           ;sort.c: 392: count_total = 0;
  4406  0042B8  0E00               	movlw	0
  4407  0042BA  0100               	movlb	0	; () banked
  4408  0042BC  6FFF               	movwf	(_count_total+1)& (0+255),b
  4409  0042BE  0E00               	movlw	0
  4410  0042C0  6FFE               	movwf	_count_total& (0+255),b
  4411                           
  4412                           ;sort.c: 393: count_pop_no_tab = 0;
  4413  0042C2  0E00               	movlw	0
  4414  0042C4  0101               	movlb	1	; () banked
  4415  0042C6  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4416  0042C8  0E00               	movlw	0
  4417  0042CA  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4418                           
  4419                           ;sort.c: 394: count_pop_w_tab = 0;
  4420  0042CC  0E00               	movlw	0
  4421  0042CE  0101               	movlb	1	; () banked
  4422  0042D0  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4423  0042D2  0E00               	movlw	0
  4424  0042D4  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4425                           
  4426                           ;sort.c: 395: count_can_w_lab = 0;
  4427  0042D6  0E00               	movlw	0
  4428  0042D8  0101               	movlb	1	; () banked
  4429  0042DA  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4430  0042DC  0E00               	movlw	0
  4431  0042DE  6F25               	movwf	_count_can_w_lab& (0+255),b
  4432                           
  4433                           ;sort.c: 396: count_can_no_lab = 0;
  4434  0042E0  0E00               	movlw	0
  4435  0042E2  0101               	movlb	1	; () banked
  4436  0042E4  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4437  0042E6  0E00               	movlw	0
  4438  0042E8  6F23               	movwf	_count_can_no_lab& (0+255),b
  4439                           
  4440                           ;sort.c: 399: most_recent_sort_time = 999;
  4441  0042EA  0E03               	movlw	3
  4442  0042EC  6E6E               	movwf	_most_recent_sort_time+1,c
  4443  0042EE  0EE7               	movlw	231
  4444  0042F0  6E6D               	movwf	_most_recent_sort_time,c
  4445                           
  4446                           ;sort.c: 402: servo_timer_counter = 0;
  4447  0042F2  0E00               	movlw	0
  4448  0042F4  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4449  0042F6  0E00               	movlw	0
  4450  0042F8  6E71               	movwf	_servo_timer_counter,c	;volatile
  4451                           
  4452                           ;sort.c: 403: servo_timer_target = 9999;
  4453  0042FA  0E27               	movlw	39
  4454  0042FC  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4455  0042FE  0E0F               	movlw	15
  4456  004300  6E73               	movwf	_servo_timer_target,c	;volatile
  4457                           
  4458                           ; BSR set to: 1
  4459                           ;sort.c: 404: pan_servo_state = -1;
  4460  004302  686F               	setf	_pan_servo_state,c	;volatile
  4461  004304  6870               	setf	_pan_servo_state+1,c	;volatile
  4462                           
  4463                           ; BSR set to: 1
  4464                           ;sort.c: 405: tilt_servo_state = -1;
  4465  004306  6875               	setf	_tilt_servo_state,c	;volatile
  4466  004308  6876               	setf	_tilt_servo_state+1,c	;volatile
  4467                           
  4468                           ;sort.c: 406: f_panning_to_bin = 0;
  4469  00430A  0E00               	movlw	0
  4470  00430C  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4471  00430E  0E00               	movlw	0
  4472  004310  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4473                           
  4474                           ; BSR set to: 1
  4475  004312  0012               	return		;funcret
  4476  004314                     __end_of_initGlobalVars:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           postdec1	equ	0xFE5
  4487                           fsr1l	equ	0xFE1
  4488                           indf2	equ	0xFDF
  4489                           postinc2	equ	0xFDE
  4490                           postdec2	equ	0xFDD
  4491                           fsr2h	equ	0xFDA
  4492                           fsr2l	equ	0xFD9
  4493                           status	equ	0xFD8
  4494                           
  4495 ;; *************** function _getMAG *****************
  4496 ;; Defined at:
  4497 ;;		line 496 in file "sort.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;Total ram usage:        2 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    9
  4518 ;; This function calls:
  4519 ;;		_readMAG
  4520 ;; This function is called by:
  4521 ;;		_Loading
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text6
  4526  004DFA                     __ptext6:
  4527                           	opt stack 0
  4528  004DFA                     _getMAG:
  4529                           	opt stack 19
  4530                           
  4531                           ;sort.c: 497: readMAG();
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;incstack = 0
  4535  004DFA  EC25  F026         	call	_readMAG	;wreg free
  4536                           
  4537                           ;sort.c: 499: if(MAG_signal==1){
  4538  004DFE  0100               	movlb	0	; () banked
  4539  004E00  05E8               	decf	_MAG_signal& (0+255),w,b
  4540  004E02  0100               	movlb	0	; () banked
  4541  004E04  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4542  004E06  A4D8               	btfss	status,2,c
  4543  004E08  0012               	return	
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000.0)));
  4547  004E0A  0E15               	movlw	21
  4548  004E0C  0100               	movlb	0	; () banked
  4549  004E0E  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4550  004E10  0E4B               	movlw	75
  4551  004E12  0100               	movlb	0	; () banked
  4552  004E14  6F86               	movwf	??_getMAG& (0+255),b
  4553  004E16  0EBE               	movlw	190
  4554  004E18                     u8827:
  4555  004E18  2EE8               	decfsz	wreg,f,c
  4556  004E1A  D7FE               	bra	u8827
  4557  004E1C  2F86               	decfsz	??_getMAG& (0+255),f,b
  4558  004E1E  D7FC               	bra	u8827
  4559  004E20  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4560  004E22  D7FA               	bra	u8827
  4561  004E24  F000               	nop	
  4562                           
  4563                           ;sort.c: 501: readMAG();
  4564  004E26  EC25  F026         	call	_readMAG	;wreg free
  4565  004E2A  0012               	return	
  4566  004E2C                     __end_of_getMAG:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           indf2	equ	0xFDF
  4579                           postinc2	equ	0xFDE
  4580                           postdec2	equ	0xFDD
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _getIR *****************
  4586 ;; Defined at:
  4587 ;;		line 480 in file "sort.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  i               2    7[BANK0 ] int 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        3 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    9
  4608 ;; This function calls:
  4609 ;;		_readIR
  4610 ;; This function is called by:
  4611 ;;		_Loading
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text7
  4616  004778                     __ptext7:
  4617                           	opt stack 0
  4618  004778                     _getIR:
  4619                           	opt stack 19
  4620                           
  4621                           ;sort.c: 481: readIR();
  4622                           
  4623                           ;incstack = 0
  4624  004778  ECFF  F025         	call	_readIR	;wreg free
  4625                           
  4626                           ;sort.c: 482: for(int i = 0; i < 150; i++){
  4627  00477C  0E00               	movlw	0
  4628  00477E  0100               	movlb	0	; () banked
  4629  004780  6F88               	movwf	(getIR@i+1)& (0+255),b
  4630  004782  0E00               	movlw	0
  4631  004784  6F87               	movwf	getIR@i& (0+255),b
  4632  004786                     l6908:
  4633                           
  4634                           ; BSR set to: 0
  4635  004786  0100               	movlb	0	; () banked
  4636  004788  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4637  00478A  D008               	goto	l6912
  4638  00478C  0100               	movlb	0	; () banked
  4639  00478E  5188               	movf	(getIR@i+1)& (0+255),w,b
  4640  004790  E11A               	bnz	l6924
  4641  004792  0E96               	movlw	150
  4642  004794  0100               	movlb	0	; () banked
  4643  004796  5D87               	subwf	getIR@i& (0+255),w,b
  4644  004798  B0D8               	btfsc	status,0,c
  4645  00479A  D015               	goto	l6924
  4646  00479C                     l6912:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4650  00479C  0E06               	movlw	6
  4651  00479E  0100               	movlb	0	; () banked
  4652  0047A0  6F86               	movwf	??_getIR& (0+255),b
  4653  0047A2  0E30               	movlw	48
  4654  0047A4                     u8837:
  4655  0047A4  2EE8               	decfsz	wreg,f,c
  4656  0047A6  D7FE               	bra	u8837
  4657  0047A8  2F86               	decfsz	??_getIR& (0+255),f,b
  4658  0047AA  D7FC               	bra	u8837
  4659  0047AC  F000               	nop	
  4660                           
  4661                           ;sort.c: 484: readIR();
  4662  0047AE  ECFF  F025         	call	_readIR	;wreg free
  4663                           
  4664                           ;sort.c: 485: if(!IR_signal){
  4665  0047B2  0100               	movlb	0	; () banked
  4666  0047B4  51E6               	movf	_IR_signal& (0+255),w,b
  4667  0047B6  0100               	movlb	0	; () banked
  4668  0047B8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4669  0047BA  B4D8               	btfsc	status,2,c
  4670  0047BC  D004               	goto	l6924
  4671                           
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;sort.c: 486: break;
  4678  0047BE  0100               	movlb	0	; () banked
  4679  0047C0  4B87               	infsnz	getIR@i& (0+255),f,b
  4680  0047C2  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4681  0047C4  D7E0               	goto	l6908
  4682  0047C6                     l6924:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;sort.c: 487: }
  4686                           ;sort.c: 488: }
  4687                           ;sort.c: 489: if(IR_signal==1){
  4688  0047C6  0100               	movlb	0	; () banked
  4689  0047C8  05E6               	decf	_IR_signal& (0+255),w,b
  4690  0047CA  0100               	movlb	0	; () banked
  4691  0047CC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4692  0047CE  A4D8               	btfss	status,2,c
  4693  0047D0  D006               	goto	l6928
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;sort.c: 490: f_loadingNewCan = 1;
  4697  0047D2  0E00               	movlw	0
  4698  0047D4  0100               	movlb	0	; () banked
  4699  0047D6  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4700  0047D8  0E01               	movlw	1
  4701  0047DA  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4702                           
  4703                           ;sort.c: 491: }
  4704  0047DC  0012               	return	
  4705  0047DE                     l6928:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;sort.c: 492: else{
  4709                           ;sort.c: 493: f_loadingNewCan = 0;
  4710  0047DE  0E00               	movlw	0
  4711  0047E0  0100               	movlb	0	; () banked
  4712  0047E2  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4713  0047E4  0E00               	movlw	0
  4714  0047E6  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4715  0047E8  0012               	return	
  4716  0047EA                     __end_of_getIR:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           postdec1	equ	0xFE5
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _readIR *****************
  4736 ;; Defined at:
  4737 ;;		line 23 in file "ADCFunctionality.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  res             2    4[BANK0 ] int 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:        4 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    8
  4758 ;; This function calls:
  4759 ;;		_readADC
  4760 ;; This function is called by:
  4761 ;;		_Loading
  4762 ;;		_getIR
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text8
  4767  004BFE                     __ptext8:
  4768                           	opt stack 0
  4769  004BFE                     _readIR:
  4770                           	opt stack 20
  4771                           
  4772                           ;ADCFunctionality.c: 24: readADC(0);
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;incstack = 0
  4776  004BFE  0E00               	movlw	0
  4777  004C00  EC63  F028         	call	_readADC
  4778                           
  4779                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4780  004C04  50C3               	movf	4035,w,c	;volatile
  4781  004C06  CFC4 F082          	movff	4036,??_readIR	;volatile
  4782  004C0A  0100               	movlb	0	; () banked
  4783  004C0C  6B83               	clrf	(??_readIR+1)& (0+255),b
  4784  004C0E  C082  F083         	movff	??_readIR,??_readIR+1
  4785  004C12  0100               	movlb	0	; () banked
  4786  004C14  6B82               	clrf	??_readIR& (0+255),b
  4787  004C16  0100               	movlb	0	; () banked
  4788  004C18  1182               	iorwf	??_readIR& (0+255),w,b
  4789  004C1A  0100               	movlb	0	; () banked
  4790  004C1C  6F84               	movwf	readIR@res& (0+255),b
  4791  004C1E  0100               	movlb	0	; () banked
  4792  004C20  5183               	movf	(??_readIR+1)& (0+255),w,b
  4793  004C22  0100               	movlb	0	; () banked
  4794  004C24  6F85               	movwf	(readIR@res+1)& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4798  004C26  0100               	movlb	0	; () banked
  4799  004C28  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4800  004C2A  D00A               	goto	u4530
  4801  004C2C  0E21               	movlw	33
  4802  004C2E  0100               	movlb	0	; () banked
  4803  004C30  5D84               	subwf	readIR@res& (0+255),w,b
  4804  004C32  0E03               	movlw	3
  4805  004C34  0100               	movlb	0	; () banked
  4806  004C36  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4807  004C38  A0D8               	btfss	status,0,c
  4808  004C3A  D002               	goto	u4530
  4809  004C3C  0E01               	movlw	1
  4810  004C3E  D001               	goto	u4540
  4811  004C40                     u4530:
  4812  004C40  0E00               	movlw	0
  4813  004C42                     u4540:
  4814  004C42  0100               	movlb	0	; () banked
  4815  004C44  6FE6               	movwf	_IR_signal& (0+255),b
  4816  004C46  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819  004C48  0012               	return		;funcret
  4820  004C4A                     __end_of_readIR:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _ID *****************
  4840 ;; Defined at:
  4841 ;;		line 255 in file "sort.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  i               2    8[BANK0 ] int 
  4846 ;;  i               2    6[BANK0 ] int 
  4847 ;;  i               2    4[BANK0 ] int 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  1    wreg      void 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;Total ram usage:        8 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    8
  4864 ;; This function calls:
  4865 ;;		_delay_ms
  4866 ;; This function is called by:
  4867 ;;		_sort
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text9
  4872  002C68                     __ptext9:
  4873                           	opt stack 0
  4874  002C68                     _ID:
  4875                           	opt stack 21
  4876                           
  4877                           ;sort.c: 256: if(f_can_coming_to_ID){
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;incstack = 0
  4881  002C68  0101               	movlb	1	; () banked
  4882  002C6A  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4883  002C6C  0101               	movlb	1	; () banked
  4884  002C6E  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4885  002C70  B4D8               	btfsc	status,2,c
  4886  002C72  0012               	return	
  4887                           
  4888                           ; BSR set to: 1
  4889                           ;sort.c: 258: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4890  002C74  0E29               	movlw	41
  4891  002C76  0100               	movlb	0	; () banked
  4892  002C78  6F83               	movwf	(??_ID+1)& (0+255),b
  4893  002C7A  0E96               	movlw	150
  4894  002C7C  0100               	movlb	0	; () banked
  4895  002C7E  6F82               	movwf	??_ID& (0+255),b
  4896  002C80  0E7F               	movlw	127
  4897  002C82                     u8847:
  4898  002C82  2EE8               	decfsz	wreg,f,c
  4899  002C84  D7FE               	bra	u8847
  4900  002C86  2F82               	decfsz	??_ID& (0+255),f,b
  4901  002C88  D7FC               	bra	u8847
  4902  002C8A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4903  002C8C  D7FA               	bra	u8847
  4904                           
  4905                           ;sort.c: 260: LATAbits.LATA3 = 1;
  4906  002C8E  8689               	bsf	3977,3,c	;volatile
  4907                           
  4908                           ;sort.c: 261: _delay((unsigned long)((600)*(32000000/4000.0)));
  4909  002C90  0E19               	movlw	25
  4910  002C92  0100               	movlb	0	; () banked
  4911  002C94  6F83               	movwf	(??_ID+1)& (0+255),b
  4912  002C96  0E5A               	movlw	90
  4913  002C98  0100               	movlb	0	; () banked
  4914  002C9A  6F82               	movwf	??_ID& (0+255),b
  4915  002C9C  0EB1               	movlw	177
  4916  002C9E                     u8857:
  4917  002C9E  2EE8               	decfsz	wreg,f,c
  4918  002CA0  D7FE               	bra	u8857
  4919  002CA2  2F82               	decfsz	??_ID& (0+255),f,b
  4920  002CA4  D7FC               	bra	u8857
  4921  002CA6  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4922  002CA8  D7FA               	bra	u8857
  4923  002CAA  D000               	nop2	
  4924                           
  4925                           ;sort.c: 262: sensor_outputs[1] = PORTAbits.RA2;
  4926  002CAC  A480               	btfss	3968,2,c	;volatile
  4927  002CAE  D004               	goto	u5900
  4928  002CB0  0100               	movlb	0	; () banked
  4929  002CB2  6B82               	clrf	??_ID& (0+255),b
  4930  002CB4  2B82               	incf	??_ID& (0+255),f,b
  4931  002CB6  D002               	goto	u5908
  4932  002CB8                     u5900:
  4933  002CB8  0100               	movlb	0	; () banked
  4934  002CBA  6B82               	clrf	??_ID& (0+255),b
  4935  002CBC                     u5908:
  4936  002CBC  0100               	movlb	0	; () banked
  4937  002CBE  5182               	movf	??_ID& (0+255),w,b
  4938  002CC0  0100               	movlb	0	; () banked
  4939  002CC2  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4940  002CC4  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;sort.c: 263: LATAbits.LATA3 = 0;
  4944  002CC6  9689               	bcf	3977,3,c	;volatile
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;sort.c: 265: _delay((unsigned long)((200)*(32000000/4000.0)));
  4948  002CC8  0E09               	movlw	9
  4949  002CCA  0100               	movlb	0	; () banked
  4950  002CCC  6F83               	movwf	(??_ID+1)& (0+255),b
  4951  002CCE  0E1E               	movlw	30
  4952  002CD0  0100               	movlb	0	; () banked
  4953  002CD2  6F82               	movwf	??_ID& (0+255),b
  4954  002CD4  0EE4               	movlw	228
  4955  002CD6                     u8867:
  4956  002CD6  2EE8               	decfsz	wreg,f,c
  4957  002CD8  D7FE               	bra	u8867
  4958  002CDA  2F82               	decfsz	??_ID& (0+255),f,b
  4959  002CDC  D7FC               	bra	u8867
  4960  002CDE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4961  002CE0  D7FA               	bra	u8867
  4962  002CE2  F000               	nop	
  4963                           
  4964                           ;sort.c: 266: LATAbits.LATA3 = 1;
  4965  002CE4  8689               	bsf	3977,3,c	;volatile
  4966                           
  4967                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  4968  002CE6  0E19               	movlw	25
  4969  002CE8  0100               	movlb	0	; () banked
  4970  002CEA  6F83               	movwf	(??_ID+1)& (0+255),b
  4971  002CEC  0E5A               	movlw	90
  4972  002CEE  0100               	movlb	0	; () banked
  4973  002CF0  6F82               	movwf	??_ID& (0+255),b
  4974  002CF2  0EB1               	movlw	177
  4975  002CF4                     u8877:
  4976  002CF4  2EE8               	decfsz	wreg,f,c
  4977  002CF6  D7FE               	bra	u8877
  4978  002CF8  2F82               	decfsz	??_ID& (0+255),f,b
  4979  002CFA  D7FC               	bra	u8877
  4980  002CFC  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4981  002CFE  D7FA               	bra	u8877
  4982  002D00  D000               	nop2	
  4983                           
  4984                           ;sort.c: 268: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4985  002D02  A480               	btfss	3968,2,c	;volatile
  4986  002D04  D004               	goto	u5910
  4987  002D06  0100               	movlb	0	; () banked
  4988  002D08  6B82               	clrf	??_ID& (0+255),b
  4989  002D0A  2B82               	incf	??_ID& (0+255),f,b
  4990  002D0C  D002               	goto	u5918
  4991  002D0E                     u5910:
  4992  002D0E  0100               	movlb	0	; () banked
  4993  002D10  6B82               	clrf	??_ID& (0+255),b
  4994  002D12                     u5918:
  4995  002D12  0100               	movlb	0	; () banked
  4996  002D14  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4997  002D16  0100               	movlb	0	; () banked
  4998  002D18  1182               	iorwf	??_ID& (0+255),w,b
  4999  002D1A  0100               	movlb	0	; () banked
  5000  002D1C  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5001  002D1E  0100               	movlb	0	; () banked
  5002  002D20  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5003  002D22  0100               	movlb	0	; () banked
  5004  002D24  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;sort.c: 276: if(!sensor_outputs[0]){
  5008  002D26  0100               	movlb	0	; () banked
  5009  002D28  51E2               	movf	_sensor_outputs& (0+255),w,b
  5010  002D2A  0100               	movlb	0	; () banked
  5011  002D2C  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5012  002D2E  A4D8               	btfss	status,2,c
  5013  002D30  D016               	goto	l7452
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;sort.c: 277: if(!sensor_outputs[1]){
  5017  002D32  0100               	movlb	0	; () banked
  5018  002D34  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5019  002D36  0100               	movlb	0	; () banked
  5020  002D38  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5021  002D3A  A4D8               	btfss	status,2,c
  5022  002D3C  D008               	goto	l7448
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;sort.c: 278: count_pop_no_tab++;
  5026  002D3E  0101               	movlb	1	; () banked
  5027  002D40  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5028  002D42  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5029                           
  5030                           ; BSR set to: 1
  5031                           ;sort.c: 279: cur_can = 0;
  5032  002D44  0E00               	movlw	0
  5033  002D46  0101               	movlb	1	; () banked
  5034  002D48  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5035  002D4A  0E00               	movlw	0
  5036  002D4C  D007               	goto	L4
  5037  002D4E                     l7448:
  5038                           
  5039                           ;sort.c: 281: else{
  5040                           ;sort.c: 282: count_pop_w_tab++;
  5041  002D4E  0101               	movlb	1	; () banked
  5042  002D50  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5043  002D52  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5044                           
  5045                           ; BSR set to: 1
  5046                           ;sort.c: 283: cur_can = 1;
  5047  002D54  0E00               	movlw	0
  5048  002D56  0101               	movlb	1	; () banked
  5049  002D58  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5050  002D5A  0E01               	movlw	1
  5051  002D5C                     L4:
  5052  002D5C  6F2B               	movwf	_cur_can& (0+255),b
  5053  002D5E                     l7452:
  5054                           
  5055                           ;sort.c: 284: }
  5056                           ;sort.c: 285: }
  5057                           ;sort.c: 286: if(sensor_outputs[0]){
  5058  002D5E  0100               	movlb	0	; () banked
  5059  002D60  51E2               	movf	_sensor_outputs& (0+255),w,b
  5060  002D62  0100               	movlb	0	; () banked
  5061  002D64  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5062  002D66  B4D8               	btfsc	status,2,c
  5063  002D68  D016               	goto	l7464
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;sort.c: 287: if(!sensor_outputs[1]){
  5067  002D6A  0100               	movlb	0	; () banked
  5068  002D6C  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5069  002D6E  0100               	movlb	0	; () banked
  5070  002D70  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5071  002D72  A4D8               	btfss	status,2,c
  5072  002D74  D008               	goto	l7460
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;sort.c: 288: count_can_w_lab++;
  5076  002D76  0101               	movlb	1	; () banked
  5077  002D78  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5078  002D7A  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5079                           
  5080                           ; BSR set to: 1
  5081                           ;sort.c: 289: cur_can = 2;
  5082  002D7C  0E00               	movlw	0
  5083  002D7E  0101               	movlb	1	; () banked
  5084  002D80  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5085  002D82  0E02               	movlw	2
  5086  002D84  D007               	goto	L5
  5087  002D86                     l7460:
  5088                           
  5089                           ;sort.c: 291: else{
  5090                           ;sort.c: 292: count_can_no_lab++;
  5091  002D86  0101               	movlb	1	; () banked
  5092  002D88  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5093  002D8A  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5094                           
  5095                           ; BSR set to: 1
  5096                           ;sort.c: 293: cur_can = 3;
  5097  002D8C  0E00               	movlw	0
  5098  002D8E  0101               	movlb	1	; () banked
  5099  002D90  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5100  002D92  0E03               	movlw	3
  5101  002D94                     L5:
  5102  002D94  6F2B               	movwf	_cur_can& (0+255),b
  5103  002D96                     l7464:
  5104                           
  5105                           ;sort.c: 294: }
  5106                           ;sort.c: 295: }
  5107                           ;sort.c: 296: LATAbits.LATA3 = 0;
  5108  002D96  9689               	bcf	3977,3,c	;volatile
  5109  002D98                     l7466:
  5110  002D98  0101               	movlb	1	; () banked
  5111  002D9A  5135               	movf	_f_can_distributed& (0+255),w,b
  5112  002D9C  0101               	movlb	1	; () banked
  5113  002D9E  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5114  002DA0  B4D8               	btfsc	status,2,c
  5115  002DA2  D7FA               	goto	l7466
  5116                           
  5117                           ; BSR set to: 1
  5118                           ;sort.c: 300: if(sensor_outputs[0]){
  5119                           
  5120                           ; BSR set to: 1
  5121  002DA4  0100               	movlb	0	; () banked
  5122  002DA6  51E2               	movf	_sensor_outputs& (0+255),w,b
  5123  002DA8  0100               	movlb	0	; () banked
  5124  002DAA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5125  002DAC  B4D8               	btfsc	status,2,c
  5126  002DAE  D020               	goto	l7484
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;sort.c: 302: LATAbits.LATA3 = 1;
  5130  002DB0  8689               	bsf	3977,3,c	;volatile
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;sort.c: 305: for(int i=0;i<10000;i++)
  5134  002DB2  0E00               	movlw	0
  5135  002DB4  0100               	movlb	0	; () banked
  5136  002DB6  6F85               	movwf	(ID@i+1)& (0+255),b
  5137  002DB8  0E00               	movlw	0
  5138  002DBA  6F84               	movwf	ID@i& (0+255),b
  5139  002DBC                     l7474:
  5140                           
  5141                           ; BSR set to: 0
  5142  002DBC  0100               	movlb	0	; () banked
  5143  002DBE  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5144  002DC0  D008               	goto	l809
  5145  002DC2  0E10               	movlw	16
  5146  002DC4  0100               	movlb	0	; () banked
  5147  002DC6  5D84               	subwf	ID@i& (0+255),w,b
  5148  002DC8  0E27               	movlw	39
  5149  002DCA  0100               	movlb	0	; () banked
  5150  002DCC  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5151  002DCE  B0D8               	btfsc	status,0,c
  5152  002DD0  D00D               	goto	l810
  5153  002DD2                     l809:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;sort.c: 306: {
  5157                           ;sort.c: 307: LATCbits.LATC0 = 1;
  5158  002DD2  808B               	bsf	3979,0,c	;volatile
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;sort.c: 308: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5162  002DD4  0E1A               	movlw	26
  5163  002DD6                     u8887:
  5164  002DD6  2EE8               	decfsz	wreg,f,c
  5165  002DD8  D7FE               	bra	u8887
  5166  002DDA  D000               	nop2	
  5167                           
  5168                           ;sort.c: 309: LATCbits.LATC0 = 0;
  5169  002DDC  908B               	bcf	3979,0,c	;volatile
  5170                           
  5171                           ;sort.c: 310: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5172  002DDE  0EF0               	movlw	240
  5173  002DE0                     u8897:
  5174  002DE0  2EE8               	decfsz	wreg,f,c
  5175  002DE2  D7FE               	bra	u8897
  5176  002DE4  0100               	movlb	0	; () banked
  5177  002DE6  4B84               	infsnz	ID@i& (0+255),f,b
  5178  002DE8  2B85               	incf	(ID@i+1)& (0+255),f,b
  5179  002DEA  D7E8               	goto	l7474
  5180  002DEC                     l810:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;sort.c: 311: }
  5184                           ;sort.c: 313: LATAbits.LATA3 = 0;
  5185  002DEC  9689               	bcf	3977,3,c	;volatile
  5186                           
  5187                           ;sort.c: 316: }
  5188  002DEE  D01D               	goto	l811
  5189  002DF0                     l7484:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;sort.c: 317: else{
  5193                           ;sort.c: 319: for(int i=0;i<10000;i++)
  5194  002DF0  0E00               	movlw	0
  5195  002DF2  0100               	movlb	0	; () banked
  5196  002DF4  6F87               	movwf	(ID@i_1173+1)& (0+255),b
  5197  002DF6  0E00               	movlw	0
  5198  002DF8  6F86               	movwf	ID@i_1173& (0+255),b
  5199  002DFA                     l7486:
  5200                           
  5201                           ; BSR set to: 0
  5202  002DFA  0100               	movlb	0	; () banked
  5203  002DFC  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5204  002DFE  D008               	goto	l812
  5205  002E00  0E10               	movlw	16
  5206  002E02  0100               	movlb	0	; () banked
  5207  002E04  5D86               	subwf	ID@i_1173& (0+255),w,b
  5208  002E06  0E27               	movlw	39
  5209  002E08  0100               	movlb	0	; () banked
  5210  002E0A  5987               	subwfb	(ID@i_1173+1)& (0+255),w,b
  5211  002E0C  B0D8               	btfsc	status,0,c
  5212  002E0E  D00D               	goto	l811
  5213  002E10                     l812:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;sort.c: 320: {
  5217                           ;sort.c: 321: LATCbits.LATC0 = 1;
  5218  002E10  808B               	bsf	3979,0,c	;volatile
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;sort.c: 322: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5222  002E12  0E1A               	movlw	26
  5223  002E14                     u8907:
  5224  002E14  2EE8               	decfsz	wreg,f,c
  5225  002E16  D7FE               	bra	u8907
  5226  002E18  D000               	nop2	
  5227                           
  5228                           ;sort.c: 323: LATCbits.LATC0 = 0;
  5229  002E1A  908B               	bcf	3979,0,c	;volatile
  5230                           
  5231                           ;sort.c: 324: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5232  002E1C  0EF0               	movlw	240
  5233  002E1E                     u8917:
  5234  002E1E  2EE8               	decfsz	wreg,f,c
  5235  002E20  D7FE               	bra	u8917
  5236  002E22  0100               	movlb	0	; () banked
  5237  002E24  4B86               	infsnz	ID@i_1173& (0+255),f,b
  5238  002E26  2B87               	incf	(ID@i_1173+1)& (0+255),f,b
  5239  002E28  D7E8               	goto	l7486
  5240  002E2A                     l811:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;sort.c: 325: }
  5244                           ;sort.c: 326: }
  5245                           ;sort.c: 328: LATCbits.LATC0 = 0;
  5246  002E2A  908B               	bcf	3979,0,c	;volatile
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;sort.c: 330: f_can_coming_to_distribution = 1;
  5250  002E2C  0E00               	movlw	0
  5251  002E2E  0101               	movlb	1	; () banked
  5252  002E30  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5253  002E32  0E01               	movlw	1
  5254  002E34  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5255                           
  5256                           ; BSR set to: 1
  5257                           ;sort.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
  5258  002E36  0E1F               	movlw	31
  5259  002E38  0100               	movlb	0	; () banked
  5260  002E3A  6F83               	movwf	(??_ID+1)& (0+255),b
  5261  002E3C  0E71               	movlw	113
  5262  002E3E  0100               	movlb	0	; () banked
  5263  002E40  6F82               	movwf	??_ID& (0+255),b
  5264  002E42  0E1E               	movlw	30
  5265  002E44                     u8927:
  5266  002E44  2EE8               	decfsz	wreg,f,c
  5267  002E46  D7FE               	bra	u8927
  5268  002E48  2F82               	decfsz	??_ID& (0+255),f,b
  5269  002E4A  D7FC               	bra	u8927
  5270  002E4C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5271  002E4E  D7FA               	bra	u8927
  5272  002E50  F000               	nop	
  5273                           
  5274                           ;sort.c: 332: LATCbits.LATC0 = 1;
  5275  002E52  808B               	bsf	3979,0,c	;volatile
  5276                           
  5277                           ;sort.c: 335: if(!f_lastCan){
  5278  002E54  0100               	movlb	0	; () banked
  5279  002E56  51EE               	movf	_f_lastCan& (0+255),w,b
  5280  002E58  0100               	movlb	0	; () banked
  5281  002E5A  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5282  002E5C  A4D8               	btfss	status,2,c
  5283  002E5E  D032               	goto	l7518
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;sort.c: 336: for(int i=0; i<46; i++){
  5287  002E60  0E00               	movlw	0
  5288  002E62  0100               	movlb	0	; () banked
  5289  002E64  6F89               	movwf	(ID@i_1174+1)& (0+255),b
  5290  002E66  0E00               	movlw	0
  5291  002E68  6F88               	movwf	ID@i_1174& (0+255),b
  5292                           
  5293                           ; BSR set to: 0
  5294  002E6A  0100               	movlb	0	; () banked
  5295  002E6C  BF89               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5296  002E6E  D008               	goto	l7510
  5297  002E70  0100               	movlb	0	; () banked
  5298  002E72  5189               	movf	(ID@i_1174+1)& (0+255),w,b
  5299  002E74  E126               	bnz	l816
  5300  002E76  0E2E               	movlw	46
  5301  002E78  0100               	movlb	0	; () banked
  5302  002E7A  5D88               	subwf	ID@i_1174& (0+255),w,b
  5303  002E7C  B0D8               	btfsc	status,0,c
  5304  002E7E  D021               	goto	l816
  5305  002E80                     l7510:
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;sort.c: 337: LATBbits.LATB2 = !LATBbits.LATB2;
  5309  002E80  B48A               	btfsc	3978,2,c	;volatile
  5310  002E82  D004               	goto	u6040
  5311  002E84  0100               	movlb	0	; () banked
  5312  002E86  6B82               	clrf	??_ID& (0+255),b
  5313  002E88  2B82               	incf	??_ID& (0+255),f,b
  5314  002E8A  D002               	goto	u6058
  5315  002E8C                     u6040:
  5316  002E8C  0100               	movlb	0	; () banked
  5317  002E8E  6B82               	clrf	??_ID& (0+255),b
  5318  002E90                     u6058:
  5319  002E90  0100               	movlb	0	; () banked
  5320  002E92  4782               	rlncf	??_ID& (0+255),f,b
  5321  002E94  4782               	rlncf	??_ID& (0+255),f,b
  5322  002E96  508A               	movf	3978,w,c	;volatile
  5323  002E98  0100               	movlb	0	; () banked
  5324  002E9A  1982               	xorwf	??_ID& (0+255),w,b
  5325  002E9C  0BFB               	andlw	-5
  5326  002E9E  1982               	xorwf	??_ID& (0+255),w,b
  5327  002EA0  6E8A               	movwf	3978,c	;volatile
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;sort.c: 338: delay_ms(45-i);
  5331  002EA2  0100               	movlb	0	; () banked
  5332  002EA4  5188               	movf	ID@i_1174& (0+255),w,b
  5333  002EA6  0800               	sublw	0
  5334  002EA8  0F2D               	addlw	45
  5335  002EAA  EC8E  F028         	call	_delay_ms
  5336  002EAE  0100               	movlb	0	; () banked
  5337  002EB0  4B88               	infsnz	ID@i_1174& (0+255),f,b
  5338  002EB2  2B89               	incf	(ID@i_1174+1)& (0+255),f,b
  5339                           
  5340                           ; BSR set to: 0
  5341  002EB4  0100               	movlb	0	; () banked
  5342  002EB6  BF89               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5343  002EB8  D7E3               	goto	l7510
  5344  002EBA  0100               	movlb	0	; () banked
  5345  002EBC  5189               	movf	(ID@i_1174+1)& (0+255),w,b
  5346  002EBE  E101               	bnz	u6060
  5347  002EC0  D7DA               	goto	L6
  5348  002EC2                     u6060:
  5349  002EC2                     l816:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;sort.c: 339: }
  5353                           ;sort.c: 340: LATBbits.LATB2 = 1;
  5354  002EC2  848A               	bsf	3978,2,c	;volatile
  5355  002EC4                     l7518:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;sort.c: 341: }
  5359                           ;sort.c: 343: f_can_coming_to_ID = 0;
  5360  002EC4  0E00               	movlw	0
  5361  002EC6  0101               	movlb	1	; () banked
  5362  002EC8  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5363  002ECA  0E00               	movlw	0
  5364  002ECC  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5365  002ECE  0012               	return	
  5366  002ED0                     __end_of_ID:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           postdec1	equ	0xFE5
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           fsr2h	equ	0xFDA
  5382                           fsr2l	equ	0xFD9
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function _delay_ms *****************
  5386 ;; Defined at:
  5387 ;;		line 590 in file "sort.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  milliseconds    1    wreg     unsigned char 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      void 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;Total ram usage:        2 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    7
  5408 ;; This function calls:
  5409 ;;		Nothing
  5410 ;; This function is called by:
  5411 ;;		_Loading
  5412 ;;		_ID
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text10
  5417  00511C                     __ptext10:
  5418                           	opt stack 0
  5419  00511C                     _delay_ms:
  5420                           	opt stack 21
  5421                           
  5422                           ; BSR set to: 1
  5423                           ;incstack = 0
  5424                           ;delay_ms@milliseconds stored from wreg
  5425  00511C  0100               	movlb	0	; () banked
  5426  00511E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5427                           
  5428                           ;sort.c: 591: while(milliseconds > 0)
  5429  005120  D00B               	goto	l6888
  5430  005122                     l6884:
  5431                           
  5432                           ;sort.c: 592: {
  5433                           ;sort.c: 593: milliseconds--;
  5434  005122  0100               	movlb	0	; () banked
  5435  005124  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5439  005126  0E0B               	movlw	11
  5440  005128  0100               	movlb	0	; () banked
  5441  00512A  6F80               	movwf	??_delay_ms& (0+255),b
  5442  00512C  0E47               	movlw	71
  5443  00512E                     u8937:
  5444  00512E  2EE8               	decfsz	wreg,f,c
  5445  005130  D7FE               	bra	u8937
  5446  005132  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5447  005134  D7FC               	bra	u8937
  5448  005136  D000               	nop2	
  5449  005138                     l6888:
  5450  005138  0100               	movlb	0	; () banked
  5451  00513A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5452  00513C  0100               	movlb	0	; () banked
  5453  00513E  B4D8               	btfsc	status,2,c
  5454  005140  0012               	return	
  5455  005142  D7EF               	goto	l6884
  5456  005144                     __end_of_delay_ms:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _Distribution *****************
  5476 ;; Defined at:
  5477 ;;		line 346 in file "sort.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2, status,0, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;Total ram usage:        2 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    8
  5498 ;; This function calls:
  5499 ;;		_updateServoPosition
  5500 ;; This function is called by:
  5501 ;;		_sort
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text11
  5506  003E72                     __ptext11:
  5507                           	opt stack 0
  5508  003E72                     _Distribution:
  5509                           	opt stack 21
  5510                           
  5511                           ;sort.c: 347: if(f_can_coming_to_distribution){
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;incstack = 0
  5515  003E72  0101               	movlb	1	; () banked
  5516  003E74  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5517  003E76  0101               	movlb	1	; () banked
  5518  003E78  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5519  003E7A  B4D8               	btfsc	status,2,c
  5520  003E7C  0012               	return	
  5521                           
  5522                           ; BSR set to: 1
  5523                           ;sort.c: 348: f_can_distributed = 0;
  5524  003E7E  0E00               	movlw	0
  5525  003E80  0101               	movlb	1	; () banked
  5526  003E82  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5527  003E84  0E00               	movlw	0
  5528  003E86  6F35               	movwf	_f_can_distributed& (0+255),b
  5529                           
  5530                           ;sort.c: 355: switch(cur_can){
  5531  003E88  D034               	goto	l7534
  5532  003E8A                     l7524:
  5533                           
  5534                           ;sort.c: 357: updateServoPosition(500, 1);
  5535  003E8A  0E01               	movlw	1
  5536  003E8C  0100               	movlb	0	; () banked
  5537  003E8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5538  003E90  0EF4               	movlw	244
  5539  003E92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5540  003E94  0E00               	movlw	0
  5541  003E96  0100               	movlb	0	; () banked
  5542  003E98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5543  003E9A  0E01               	movlw	1
  5544  003E9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5545  003E9E  ECB9  F022         	call	_updateServoPosition	;wreg free
  5546                           
  5547                           ;sort.c: 358: break;
  5548  003EA2  D03E               	goto	l7536
  5549  003EA4                     l7526:
  5550                           
  5551                           ;sort.c: 360: updateServoPosition(850, 1);
  5552  003EA4  0E03               	movlw	3
  5553  003EA6  0100               	movlb	0	; () banked
  5554  003EA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5555  003EAA  0E52               	movlw	82
  5556  003EAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5557  003EAE  0E00               	movlw	0
  5558  003EB0  0100               	movlb	0	; () banked
  5559  003EB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5560  003EB4  0E01               	movlw	1
  5561  003EB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5562  003EB8  ECB9  F022         	call	_updateServoPosition	;wreg free
  5563                           
  5564                           ;sort.c: 361: break;
  5565  003EBC  D031               	goto	l7536
  5566  003EBE                     l7528:
  5567                           
  5568                           ;sort.c: 363: updateServoPosition(1670, 1);
  5569  003EBE  0E06               	movlw	6
  5570  003EC0  0100               	movlb	0	; () banked
  5571  003EC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5572  003EC4  0E86               	movlw	134
  5573  003EC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5574  003EC8  0E00               	movlw	0
  5575  003ECA  0100               	movlb	0	; () banked
  5576  003ECC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5577  003ECE  0E01               	movlw	1
  5578  003ED0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5579  003ED2  ECB9  F022         	call	_updateServoPosition	;wreg free
  5580                           
  5581                           ;sort.c: 364: break;
  5582  003ED6  D024               	goto	l7536
  5583  003ED8                     l7530:
  5584                           
  5585                           ;sort.c: 366: updateServoPosition(2400, 1);
  5586  003ED8  0E09               	movlw	9
  5587  003EDA  0100               	movlb	0	; () banked
  5588  003EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5589  003EDE  0E60               	movlw	96
  5590  003EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5591  003EE2  0E00               	movlw	0
  5592  003EE4  0100               	movlb	0	; () banked
  5593  003EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5594  003EE8  0E01               	movlw	1
  5595  003EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5596  003EEC  ECB9  F022         	call	_updateServoPosition	;wreg free
  5597                           
  5598                           ;sort.c: 370: }
  5599                           
  5600                           ;sort.c: 369: break;
  5601                           
  5602                           ;sort.c: 368: default:
  5603                           
  5604                           ;sort.c: 367: break;
  5605  003EF0  D017               	goto	l7536
  5606  003EF2                     l7534:
  5607  003EF2  C12B  F088         	movff	_cur_can,??_Distribution
  5608  003EF6  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5609                           
  5610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5611                           ; Switch size 1, requested type "space"
  5612                           ; Number of cases is 1, Range of values is 0 to 0
  5613                           ; switch strategies available:
  5614                           ; Name         Instructions Cycles
  5615                           ; simple_byte            4     3 (average)
  5616                           ;	Chosen strategy is simple_byte
  5617  003EFA  0100               	movlb	0	; () banked
  5618  003EFC  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5619  003EFE  0A00               	xorlw	0	; case 0
  5620  003F00  A4D8               	btfss	status,2,c
  5621  003F02  D00E               	goto	l7536
  5622                           
  5623                           ; BSR set to: 0
  5624                           ; Switch size 1, requested type "space"
  5625                           ; Number of cases is 4, Range of values is 0 to 3
  5626                           ; switch strategies available:
  5627                           ; Name         Instructions Cycles
  5628                           ; simple_byte           13     7 (average)
  5629                           ;	Chosen strategy is simple_byte
  5630  003F04  0100               	movlb	0	; () banked
  5631  003F06  5188               	movf	??_Distribution& (0+255),w,b
  5632  003F08  0A00               	xorlw	0	; case 0
  5633  003F0A  B4D8               	btfsc	status,2,c
  5634  003F0C  D7BE               	goto	l7524
  5635  003F0E  0A01               	xorlw	1	; case 1
  5636  003F10  B4D8               	btfsc	status,2,c
  5637  003F12  D7C8               	goto	l7526
  5638  003F14  0A03               	xorlw	3	; case 2
  5639  003F16  B4D8               	btfsc	status,2,c
  5640  003F18  D7D2               	goto	l7528
  5641  003F1A  0A01               	xorlw	1	; case 3
  5642  003F1C  B4D8               	btfsc	status,2,c
  5643  003F1E  D7DC               	goto	l7530
  5644  003F20                     l7536:
  5645                           
  5646                           ;sort.c: 371: updateServoPosition(1050, 3);
  5647  003F20  0E04               	movlw	4
  5648  003F22  0100               	movlb	0	; () banked
  5649  003F24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5650  003F26  0E1A               	movlw	26
  5651  003F28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5652  003F2A  0E00               	movlw	0
  5653  003F2C  0100               	movlb	0	; () banked
  5654  003F2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5655  003F30  0E03               	movlw	3
  5656  003F32  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5657  003F34  ECB9  F022         	call	_updateServoPosition	;wreg free
  5658                           
  5659                           ;sort.c: 372: servo_timer_target = 750;
  5660  003F38  0E02               	movlw	2
  5661  003F3A  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5662  003F3C  0EEE               	movlw	238
  5663  003F3E  6E73               	movwf	_servo_timer_target,c	;volatile
  5664                           
  5665                           ;sort.c: 373: f_panning_to_bin = 1;
  5666  003F40  0E00               	movlw	0
  5667  003F42  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5668  003F44  0E01               	movlw	1
  5669  003F46  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5670                           
  5671                           ;sort.c: 374: f_can_coming_to_distribution = 0;
  5672  003F48  0E00               	movlw	0
  5673  003F4A  0101               	movlb	1	; () banked
  5674  003F4C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5675  003F4E  0E00               	movlw	0
  5676  003F50  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5677  003F52  0012               	return	
  5678  003F54                     __end_of_Distribution:
  5679                           	opt stack 0
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           postinc0	equ	0xFEE
  5687                           wreg	equ	0xFE8
  5688                           postdec1	equ	0xFE5
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _machineConfig *****************
  5698 ;; Defined at:
  5699 ;;		line 15 in file "MachineConfig.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:        0 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    7
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_main
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text12
  5728  0049F6                     __ptext12:
  5729                           	opt stack 0
  5730  0049F6                     _machineConfig:
  5731                           	opt stack 23
  5732                           
  5733                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5734                           
  5735                           ; BSR set to: 1
  5736                           ;incstack = 0
  5737  0049F6  0EF0               	movlw	240
  5738  0049F8  6ED3               	movwf	4051,c	;volatile
  5739                           
  5740                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5741  0049FA  8C9B               	bsf	3995,6,c	;volatile
  5742                           
  5743                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5744  0049FC  0E07               	movlw	7
  5745  0049FE  6E92               	movwf	3986,c	;volatile
  5746                           
  5747                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5748  004A00  0EF2               	movlw	242
  5749  004A02  6E93               	movwf	3987,c	;volatile
  5750                           
  5751                           ;MachineConfig.c: 27: TRISC = 0x00;
  5752  004A04  0E00               	movlw	0
  5753  004A06  6E94               	movwf	3988,c	;volatile
  5754                           
  5755                           ;MachineConfig.c: 31: TRISD = 0x00;
  5756  004A08  0E00               	movlw	0
  5757  004A0A  6E95               	movwf	3989,c	;volatile
  5758                           
  5759                           ;MachineConfig.c: 34: TRISE = 0x00;
  5760  004A0C  0E00               	movlw	0
  5761  004A0E  6E96               	movwf	3990,c	;volatile
  5762                           
  5763                           ;MachineConfig.c: 37: LATA = 0x00;
  5764  004A10  0E00               	movlw	0
  5765  004A12  6E89               	movwf	3977,c	;volatile
  5766                           
  5767                           ;MachineConfig.c: 38: LATB = 0x00;
  5768  004A14  0E00               	movlw	0
  5769  004A16  6E8A               	movwf	3978,c	;volatile
  5770                           
  5771                           ;MachineConfig.c: 39: LATC = 0x00;
  5772  004A18  0E00               	movlw	0
  5773  004A1A  6E8B               	movwf	3979,c	;volatile
  5774                           
  5775                           ;MachineConfig.c: 40: LATD = 0x00;
  5776  004A1C  0E00               	movlw	0
  5777  004A1E  6E8C               	movwf	3980,c	;volatile
  5778                           
  5779                           ;MachineConfig.c: 41: LATE = 0x00;
  5780  004A20  0E00               	movlw	0
  5781  004A22  6E8D               	movwf	3981,c	;volatile
  5782                           
  5783                           ;MachineConfig.c: 43: nRBPU = 0;
  5784  004A24  9EF1               	bcf	intcon2,7,c	;volatile
  5785                           
  5786                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5787  004A26  0E00               	movlw	0
  5788  004A28  6EC2               	movwf	4034,c	;volatile
  5789                           
  5790                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5791  004A2A  0E0D               	movlw	13
  5792  004A2C  6EC1               	movwf	4033,c	;volatile
  5793                           
  5794                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5795  004A2E  0E00               	movlw	0
  5796  004A30  6EB5               	movwf	4021,c	;volatile
  5797                           
  5798                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5799  004A32  96B4               	bcf	4020,3,c	;volatile
  5800                           
  5801                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5802  004A34  0EB1               	movlw	177
  5803  004A36  6EC0               	movwf	4032,c	;volatile
  5804                           
  5805                           ;MachineConfig.c: 55: INT1IE = 1;
  5806  004A38  86F0               	bsf	intcon3,3,c	;volatile
  5807                           
  5808                           ;MachineConfig.c: 57: TMR0IE = 1;
  5809  004A3A  8AF2               	bsf	intcon,5,c	;volatile
  5810                           
  5811                           ;MachineConfig.c: 58: TMR1IE = 1;
  5812  004A3C  809D               	bsf	3997,0,c	;volatile
  5813                           
  5814                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5815  004A3E  0EB0               	movlw	176
  5816  004A40  6ECD               	movwf	4045,c	;volatile
  5817                           
  5818                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5819  004A42  0EB0               	movlw	176
  5820  004A44  6EB1               	movwf	4017,c	;volatile
  5821                           
  5822                           ;MachineConfig.c: 61: TMR2IE = 1;
  5823  004A46  829D               	bsf	3997,1,c	;volatile
  5824                           
  5825                           ;MachineConfig.c: 62: TMR3IE = 1;
  5826  004A48  82A0               	bsf	4000,1,c	;volatile
  5827                           
  5828                           ;MachineConfig.c: 63: PEIE = 1;
  5829  004A4A  8CF2               	bsf	intcon,6,c	;volatile
  5830                           
  5831                           ;MachineConfig.c: 64: ADIE = 0;
  5832  004A4C  9C9D               	bcf	3997,6,c	;volatile
  5833                           
  5834                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5835  004A4E  9EF2               	bcf	intcon,7,c	;volatile
  5836  004A50  0012               	return		;funcret
  5837  004A52                     __end_of_machineConfig:
  5838                           	opt stack 0
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           intcon3	equ	0xFF0
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           postdec1	equ	0xFE5
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _logRun *****************
  5860 ;; Defined at:
  5861 ;;		line 84 in file "EEPROM.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5866 ;;  i               2   55[BANK0 ] int 
  5867 ;;  num             1   49[BANK0 ] unsigned char 
  5868 ;;  addr            2   57[BANK0 ] unsigned short 
  5869 ;;  byte11          1   54[BANK0 ] unsigned char 
  5870 ;;  byte3           1   52[BANK0 ] unsigned char 
  5871 ;;  byte2           1   51[BANK0 ] unsigned char 
  5872 ;;  byte1           1   50[BANK0 ] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;Total ram usage:       10 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:   11
  5889 ;; This function calls:
  5890 ;;		_EEPROM_read
  5891 ;;		_EEPROM_write
  5892 ;; This function is called by:
  5893 ;;		_main
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text13
  5898  003A16                     __ptext13:
  5899                           	opt stack 0
  5900  003A16                     _logRun:
  5901                           	opt stack 19
  5902                           
  5903                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5904                           
  5905                           ;incstack = 0
  5906  003A16  0E00               	movlw	0
  5907  003A18  0100               	movlb	0	; () banked
  5908  003A1A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5909  003A1C  0E00               	movlw	0
  5910  003A1E  6F80               	movwf	EEPROM_read@address& (0+255),b
  5911  003A20  EC3A  F029         	call	_EEPROM_read	;wreg free
  5912  003A24  0100               	movlb	0	; () banked
  5913  003A26  6FFD               	movwf	_sel& (0+255),b
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5917  003A28  0100               	movlb	0	; () banked
  5918  003A2A  51FD               	movf	_sel& (0+255),w,b
  5919  003A2C  0D0B               	mullw	11
  5920  003A2E  0E01               	movlw	1
  5921  003A30  24F3               	addwf	prodl,w,c
  5922  003A32  0100               	movlb	0	; () banked
  5923  003A34  6FB9               	movwf	logRun@addr& (0+255),b
  5924  003A36  0E00               	movlw	0
  5925  003A38  20F4               	addwfc	prodh,w,c
  5926  003A3A  0100               	movlb	0	; () banked
  5927  003A3C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;EEPROM.c: 101: if (sel < 3){
  5931  003A3E  0E03               	movlw	3
  5932  003A40  0100               	movlb	0	; () banked
  5933  003A42  61FD               	cpfslt	_sel& (0+255),b
  5934  003A44  D00E               	goto	l9120
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5938  003A46  0100               	movlb	0	; () banked
  5939  003A48  29FD               	incf	_sel& (0+255),w,b
  5940  003A4A  0100               	movlb	0	; () banked
  5941  003A4C  6FB1               	movwf	logRun@num& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5945  003A4E  0E00               	movlw	0
  5946  003A50  0100               	movlb	0	; () banked
  5947  003A52  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5948  003A54  0E00               	movlw	0
  5949  003A56  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5950  003A58  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5951  003A5C  ECC5  F01E         	call	_EEPROM_write	;wreg free
  5952                           
  5953                           ;EEPROM.c: 104: }
  5954  003A60  D00A               	goto	l9122
  5955  003A62                     l9120:
  5956                           
  5957                           ;EEPROM.c: 105: else{
  5958                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5959  003A62  0E00               	movlw	0
  5960  003A64  0100               	movlb	0	; () banked
  5961  003A66  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5962  003A68  0E00               	movlw	0
  5963  003A6A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5964  003A6C  0E00               	movlw	0
  5965  003A6E  0100               	movlb	0	; () banked
  5966  003A70  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5967  003A72  ECC5  F01E         	call	_EEPROM_write	;wreg free
  5968  003A76                     l9122:
  5969                           
  5970                           ;EEPROM.c: 107: }
  5971                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5972  003A76  0100               	movlb	0	; () banked
  5973  003A78  51FE               	movf	_count_total& (0+255),w,b
  5974  003A7A  0980               	iorlw	128
  5975  003A7C  0100               	movlb	0	; () banked
  5976  003A7E  6FB2               	movwf	logRun@byte1& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5980  003A80  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5981  003A84  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5982  003A88  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5983  003A8C  ECC5  F01E         	call	_EEPROM_write	;wreg free
  5984                           
  5985                           ;EEPROM.c: 112: addr++;
  5986  003A90  0100               	movlb	0	; () banked
  5987  003A92  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5988  003A94  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5992  003A96  0101               	movlb	1	; () banked
  5993  003A98  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  5994  003A9A  0BF0               	andlw	240
  5995  003A9C  0101               	movlb	1	; () banked
  5996  003A9E  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  5997  003AA0  0100               	movlb	0	; () banked
  5998  003AA2  6FB3               	movwf	logRun@byte2& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6002  003AA4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6003  003AA8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6004  003AAC  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6005  003AB0  ECC5  F01E         	call	_EEPROM_write	;wreg free
  6006                           
  6007                           ;EEPROM.c: 117: addr++;
  6008  003AB4  0100               	movlb	0	; () banked
  6009  003AB6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6010  003AB8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6014  003ABA  0101               	movlb	1	; () banked
  6015  003ABC  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6016  003ABE  0BF0               	andlw	240
  6017  003AC0  0101               	movlb	1	; () banked
  6018  003AC2  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6019  003AC4  0100               	movlb	0	; () banked
  6020  003AC6  6FB4               	movwf	logRun@byte3& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6024  003AC8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6025  003ACC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6026  003AD0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6027  003AD4  ECC5  F01E         	call	_EEPROM_write	;wreg free
  6028                           
  6029                           ;EEPROM.c: 120: addr++;
  6030  003AD8  0100               	movlb	0	; () banked
  6031  003ADA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6032  003ADC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6036  003ADE  0E00               	movlw	0
  6037  003AE0  0100               	movlb	0	; () banked
  6038  003AE2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6039  003AE4  0E00               	movlw	0
  6040  003AE6  6FB7               	movwf	logRun@i& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043  003AE8  0100               	movlb	0	; () banked
  6044  003AEA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6045  003AEC  D008               	goto	l9146
  6046  003AEE  0100               	movlb	0	; () banked
  6047  003AF0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6048  003AF2  E128               	bnz	l1052
  6049  003AF4  0E07               	movlw	7
  6050  003AF6  0100               	movlb	0	; () banked
  6051  003AF8  5DB7               	subwf	logRun@i& (0+255),w,b
  6052  003AFA  B0D8               	btfsc	status,0,c
  6053  003AFC  D023               	goto	l1052
  6054  003AFE                     l9146:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6058  003AFE  90D8               	bcf	status,0,c
  6059  003B00  0100               	movlb	0	; () banked
  6060  003B02  35B7               	rlcf	logRun@i& (0+255),w,b
  6061  003B04  6ED9               	movwf	fsr2l,c
  6062  003B06  0100               	movlb	0	; () banked
  6063  003B08  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6064  003B0A  6EDA               	movwf	fsr2h,c
  6065  003B0C  0E0E               	movlw	low _startTime
  6066  003B0E  26D9               	addwf	fsr2l,f,c
  6067  003B10  0E01               	movlw	high _startTime
  6068  003B12  22DA               	addwfc	fsr2h,f,c
  6069  003B14  50DF               	movf	indf2,w,c
  6070  003B16  0100               	movlb	0	; () banked
  6071  003B18  6FB5               	movwf	logRun@byte_i& (0+255),b
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6075  003B1A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6076  003B1E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6077  003B22  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6078  003B26  ECC5  F01E         	call	_EEPROM_write	;wreg free
  6079                           
  6080                           ;EEPROM.c: 126: addr++;
  6081  003B2A  0100               	movlb	0	; () banked
  6082  003B2C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6083  003B2E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6084                           
  6085                           ; BSR set to: 0
  6086  003B30  0100               	movlb	0	; () banked
  6087  003B32  4BB7               	infsnz	logRun@i& (0+255),f,b
  6088  003B34  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6089                           
  6090                           ; BSR set to: 0
  6091  003B36  0100               	movlb	0	; () banked
  6092  003B38  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6093  003B3A  D7E1               	goto	l9146
  6094  003B3C  0100               	movlb	0	; () banked
  6095  003B3E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6096  003B40  E101               	bnz	u8220
  6097  003B42  D7D8               	goto	L7
  6098  003B44                     u8220:
  6099  003B44                     l1052:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;EEPROM.c: 127: }
  6103                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6104  003B44  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6108  003B48  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6109  003B4C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6110  003B50  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6111  003B54  ECC5  F01E         	call	_EEPROM_write	;wreg free
  6112  003B58  0012               	return		;funcret
  6113  003B5A                     __end_of_logRun:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           intcon2	equ	0xFF1
  6123                           intcon3	equ	0xFF0
  6124                           postinc0	equ	0xFEE
  6125                           wreg	equ	0xFE8
  6126                           postdec1	equ	0xFE5
  6127                           fsr1l	equ	0xFE1
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function _EEPROM_write *****************
  6136 ;; Defined at:
  6137 ;;		line 32 in file "EEPROM.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  address         2   43[BANK0 ] unsigned short 
  6140 ;;  data            1   45[BANK0 ] unsigned char 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  i               1   48[BANK0 ] unsigned char 
  6143 ;;  i               1   47[BANK0 ] unsigned char 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  1    wreg      void 
  6146 ;; Registers used:
  6147 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6153 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;Total ram usage:        6 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:   10
  6160 ;; This function calls:
  6161 ;;		_EEPROM_read
  6162 ;;		_lcdInst
  6163 ;;		_printf
  6164 ;; This function is called by:
  6165 ;;		_Loading
  6166 ;;		_logRun
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text14
  6171  003D8A                     __ptext14:
  6172                           	opt stack 0
  6173  003D8A                     _EEPROM_write:
  6174                           	opt stack 18
  6175                           
  6176                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6177                           
  6178                           ;incstack = 0
  6179  003D8A  84A6               	bsf	4006,2,c	;volatile
  6180                           
  6181                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6182  003D8C  0100               	movlb	0	; () banked
  6183  003D8E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6184  003D90  6EAA               	movwf	4010,c	;volatile
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6188  003D92  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;EEPROM.c: 39: EEDATA = data;
  6192  003D96  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6196  003D9A  9EA6               	bcf	4006,7,c	;volatile
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6200  003D9C  9CA6               	bcf	4006,6,c	;volatile
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6204  003D9E  9EF2               	bcf	intcon,7,c	;volatile
  6205                           
  6206                           ;EEPROM.c: 45: EECON2 = 0x55;
  6207  003DA0  0E55               	movlw	85
  6208  003DA2  6EA7               	movwf	4007,c	;volatile
  6209                           
  6210                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6211  003DA4  0EAA               	movlw	170
  6212  003DA6  6EA7               	movwf	4007,c	;volatile
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6216  003DA8  82A6               	bsf	4006,1,c	;volatile
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6220  003DAA  8EF2               	bsf	intcon,7,c	;volatile
  6221  003DAC                     l1030:
  6222  003DAC  A8A1               	btfss	4001,4,c	;volatile
  6223  003DAE  D7FE               	goto	l1030
  6224                           
  6225                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6226  003DB0  98A1               	bcf	4001,4,c	;volatile
  6227                           
  6228                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6229  003DB2  94A6               	bcf	4006,2,c	;volatile
  6230                           
  6231                           ;EEPROM.c: 57: if(debug){
  6232  003DB4  0101               	movlb	1	; () banked
  6233  003DB6  512D               	movf	_debug& (0+255),w,b
  6234  003DB8  0101               	movlb	1	; () banked
  6235  003DBA  112E               	iorwf	(_debug+1)& (0+255),w,b
  6236  003DBC  B4D8               	btfsc	status,2,c
  6237  003DBE  0012               	return	
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6241  003DC0  0E01               	movlw	1
  6242  003DC2  EC6C  F029         	call	_lcdInst
  6243  003DC6  0E68               	movlw	104
  6244  003DC8  0100               	movlb	0	; () banked
  6245  003DCA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6246  003DCC  0EE4               	movlw	228
  6247  003DCE                     u8947:
  6248  003DCE  2EE8               	decfsz	wreg,f,c
  6249  003DD0  D7FE               	bra	u8947
  6250  003DD2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6251  003DD4  D7FC               	bra	u8947
  6252  003DD6  F000               	nop	
  6253                           
  6254                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6255  003DD8  0E80               	movlw	128
  6256  003DDA  EC6C  F029         	call	_lcdInst
  6257                           
  6258                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6259  003DDE  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6260  003DE2  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6261  003DE6  EC3A  F029         	call	_EEPROM_read	;wreg free
  6262  003DEA  0100               	movlb	0	; () banked
  6263  003DEC  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6264  003DEE  A4D8               	btfss	status,2,c
  6265  003DF0  D024               	goto	l6870
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6269  003DF2  0E22               	movlw	low STR_66
  6270  003DF4  0100               	movlb	0	; () banked
  6271  003DF6  6F8E               	movwf	printf@f& (0+255),b
  6272  003DF8  0EFB               	movlw	high STR_66
  6273  003DFA  0100               	movlb	0	; () banked
  6274  003DFC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6275  003DFE  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6276  003E02  0100               	movlb	0	; () banked
  6277  003E04  6B91               	clrf	(?_printf+3)& (0+255),b
  6278  003E06  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6279  003E0A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6280  003E0E  EC07  F00B         	call	_printf	;wreg free
  6281                           
  6282                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6283  003E12  0E00               	movlw	0
  6284  003E14  0100               	movlb	0	; () banked
  6285  003E16  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6286  003E18                     l6862:
  6287                           
  6288                           ; BSR set to: 0
  6289  003E18  0E63               	movlw	99
  6290  003E1A  0100               	movlb	0	; () banked
  6291  003E1C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6292  003E1E  D001               	goto	l6866
  6293  003E20  0012               	return	
  6294  003E22                     l6866:
  6295                           
  6296                           ; BSR set to: 0
  6297  003E22  0E68               	movlw	104
  6298  003E24  0100               	movlb	0	; () banked
  6299  003E26  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6300  003E28  0EE4               	movlw	228
  6301  003E2A                     u8957:
  6302  003E2A  2EE8               	decfsz	wreg,f,c
  6303  003E2C  D7FE               	bra	u8957
  6304  003E2E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6305  003E30  D7FC               	bra	u8957
  6306  003E32  F000               	nop	
  6307  003E34  0100               	movlb	0	; () banked
  6308  003E36  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6309  003E38  D7EF               	goto	l6862
  6310  003E3A                     l6870:
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6314  003E3A  0EBD               	movlw	low STR_67
  6315  003E3C  0100               	movlb	0	; () banked
  6316  003E3E  6F8E               	movwf	printf@f& (0+255),b
  6317  003E40  0EFF               	movlw	high STR_67
  6318  003E42  0100               	movlb	0	; () banked
  6319  003E44  6F8F               	movwf	(printf@f+1)& (0+255),b
  6320  003E46  EC07  F00B         	call	_printf	;wreg free
  6321  003E4A  0E00               	movlw	0
  6322  003E4C  0100               	movlb	0	; () banked
  6323  003E4E  6FB0               	movwf	EEPROM_write@i_1398& (0+255),b
  6324  003E50                     l6874:
  6325                           
  6326                           ; BSR set to: 0
  6327  003E50  0E63               	movlw	99
  6328  003E52  0100               	movlb	0	; () banked
  6329  003E54  65B0               	cpfsgt	EEPROM_write@i_1398& (0+255),b
  6330  003E56  D001               	goto	l6878
  6331  003E58  0012               	return	
  6332  003E5A                     l6878:
  6333                           
  6334                           ; BSR set to: 0
  6335  003E5A  0E68               	movlw	104
  6336  003E5C  0100               	movlb	0	; () banked
  6337  003E5E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6338  003E60  0EE4               	movlw	228
  6339  003E62                     u8967:
  6340  003E62  2EE8               	decfsz	wreg,f,c
  6341  003E64  D7FE               	bra	u8967
  6342  003E66  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6343  003E68  D7FC               	bra	u8967
  6344  003E6A  F000               	nop	
  6345  003E6C  0100               	movlb	0	; () banked
  6346  003E6E  2BB0               	incf	EEPROM_write@i_1398& (0+255),f,b
  6347  003E70  D7EF               	goto	l6874
  6348  003E72                     __end_of_EEPROM_write:
  6349                           	opt stack 0
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           intcon	equ	0xFF2
  6357                           intcon2	equ	0xFF1
  6358                           intcon3	equ	0xFF0
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           postdec1	equ	0xFE5
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _EEPROM_read *****************
  6371 ;; Defined at:
  6372 ;;		line 68 in file "EEPROM.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  address         2    0[BANK0 ] unsigned short 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      unsigned char 
  6379 ;; Registers used:
  6380 ;;		wreg, status,2
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:        2 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    7
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_Loading
  6397 ;;		_EEPROM_write
  6398 ;;		_logRun
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text15
  6403  005274                     __ptext15:
  6404                           	opt stack 0
  6405  005274                     _EEPROM_read:
  6406                           	opt stack 20
  6407                           
  6408                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6409                           
  6410                           ;incstack = 0
  6411  005274  0100               	movlb	0	; () banked
  6412  005276  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6413  005278  6EAA               	movwf	4010,c	;volatile
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6417  00527A  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6421  00527E  9EA6               	bcf	4006,7,c	;volatile
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6425  005280  9CA6               	bcf	4006,6,c	;volatile
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6429  005282  80A6               	bsf	4006,0,c	;volatile
  6430  005284                     l1043:
  6431  005284  B0A6               	btfsc	4006,0,c	;volatile
  6432  005286  D7FE               	goto	l1043
  6433                           
  6434                           ;EEPROM.c: 81: return EEDATA;
  6435  005288  50A8               	movf	4008,w,c	;volatile
  6436  00528A  0012               	return	
  6437  00528C                     __end_of_EEPROM_read:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           intcon2	equ	0xFF1
  6447                           intcon3	equ	0xFF0
  6448                           postinc0	equ	0xFEE
  6449                           wreg	equ	0xFE8
  6450                           postdec1	equ	0xFE5
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _initUI *****************
  6460 ;; Defined at:
  6461 ;;		line 62 in file "UI.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;Total ram usage:        0 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:   12
  6482 ;; This function calls:
  6483 ;;		_change_state_to_menu_start
  6484 ;;		_loadRTC
  6485 ;; This function is called by:
  6486 ;;		_main
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text16
  6491  004E5E                     __ptext16:
  6492                           	opt stack 0
  6493  004E5E                     _initUI:
  6494                           	opt stack 18
  6495                           
  6496                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6497                           
  6498                           ;incstack = 0
  6499  004E5E  8EF2               	bsf	intcon,7,c	;volatile
  6500                           
  6501                           ;UI.c: 64: machine_state = UI_state;
  6502  004E60  0E00               	movlw	0
  6503  004E62  0100               	movlb	0	; () banked
  6504  004E64  6FFC               	movwf	_machine_state& (0+255),b
  6505                           
  6506                           ;UI.c: 65: logstate = 0;
  6507  004E66  0E00               	movlw	0
  6508  004E68  0100               	movlb	0	; () banked
  6509  004E6A  6FF7               	movwf	(_logstate+1)& (0+255),b
  6510  004E6C  0E00               	movlw	0
  6511  004E6E  6FF6               	movwf	_logstate& (0+255),b
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;UI.c: 67: if(RTCflag){
  6515  004E70  0100               	movlb	0	; () banked
  6516  004E72  51EA               	movf	_RTCflag& (0+255),w,b
  6517  004E74  0100               	movlb	0	; () banked
  6518  004E76  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6519  004E78  A4D8               	btfss	status,2,c
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;UI.c: 68: loadRTC();
  6523  004E7A  EC30  F022         	call	_loadRTC	;wreg free
  6524                           
  6525                           ;UI.c: 69: }
  6526                           ;UI.c: 71: change_state_to_menu_start();
  6527  004E7E  EC4D  F028         	call	_change_state_to_menu_start	;wreg free
  6528                           
  6529                           ;UI.c: 72: firstboot = 1;
  6530  004E82  0E00               	movlw	0
  6531  004E84  0101               	movlb	1	; () banked
  6532  004E86  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6533  004E88  0E01               	movlw	1
  6534  004E8A  6F3B               	movwf	_firstboot& (0+255),b
  6535                           
  6536                           ; BSR set to: 1
  6537  004E8C  0012               	return		;funcret
  6538  004E8E                     __end_of_initUI:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           intcon2	equ	0xFF1
  6548                           intcon3	equ	0xFF0
  6549                           postinc0	equ	0xFEE
  6550                           wreg	equ	0xFE8
  6551                           postdec1	equ	0xFE5
  6552                           fsr1l	equ	0xFE1
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           postdec2	equ	0xFDD
  6556                           fsr2h	equ	0xFDA
  6557                           fsr2l	equ	0xFD9
  6558                           status	equ	0xFD8
  6559                           
  6560 ;; *************** function _loadRTC *****************
  6561 ;; Defined at:
  6562 ;;		line 28 in file "RTC.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  i               2   22[BANK0 ] int 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        3 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    9
  6583 ;; This function calls:
  6584 ;;		_I2C_Master_Init
  6585 ;;		_I2C_Master_Start
  6586 ;;		_I2C_Master_Stop
  6587 ;;		_I2C_Master_Write
  6588 ;; This function is called by:
  6589 ;;		_initUI
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text17
  6594  004460                     __ptext17:
  6595                           	opt stack 0
  6596  004460                     _loadRTC:
  6597                           	opt stack 20
  6598                           
  6599                           ;RTC.c: 30: I2C_Master_Init(10000);
  6600                           
  6601                           ; BSR set to: 1
  6602                           ;incstack = 0
  6603  004460  0E10               	movlw	16
  6604  004462  0100               	movlb	0	; () banked
  6605  004464  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6606  004466  0E27               	movlw	39
  6607  004468  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6608  00446A  0E00               	movlw	0
  6609  00446C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6610  00446E  0E00               	movlw	0
  6611  004470  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6612  004472  ECCB  F024         	call	_I2C_Master_Init	;wreg free
  6613                           
  6614                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6615  004476  9EF2               	bcf	intcon,7,c	;volatile
  6616                           
  6617                           ;RTC.c: 34: I2C_Master_Start();
  6618  004478  EC92  F029         	call	_I2C_Master_Start	;wreg free
  6619                           
  6620                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6621  00447C  0E00               	movlw	0
  6622  00447E  0100               	movlb	0	; () banked
  6623  004480  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6624  004482  0ED0               	movlw	208
  6625  004484  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6626  004486  EC80  F029         	call	_I2C_Master_Write	;wreg free
  6627                           
  6628                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6629  00448A  0E00               	movlw	0
  6630  00448C  0100               	movlb	0	; () banked
  6631  00448E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6632  004490  0E00               	movlw	0
  6633  004492  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6634  004494  EC80  F029         	call	_I2C_Master_Write	;wreg free
  6635                           
  6636                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6637  004498  0E00               	movlw	0
  6638  00449A  0100               	movlb	0	; () banked
  6639  00449C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6640  00449E  0E00               	movlw	0
  6641  0044A0  6F96               	movwf	loadRTC@i& (0+255),b
  6642  0044A2                     l7016:
  6643                           
  6644                           ; BSR set to: 0
  6645  0044A2  0100               	movlb	0	; () banked
  6646  0044A4  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6647  0044A6  D008               	goto	l7020
  6648  0044A8  0100               	movlb	0	; () banked
  6649  0044AA  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6650  0044AC  E11B               	bnz	l7026
  6651  0044AE  0E07               	movlw	7
  6652  0044B0  0100               	movlb	0	; () banked
  6653  0044B2  5D96               	subwf	loadRTC@i& (0+255),w,b
  6654  0044B4  B0D8               	btfsc	status,0,c
  6655  0044B6  D016               	goto	l7026
  6656  0044B8                     l7020:
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6660  0044B8  0E1C               	movlw	low _time
  6661  0044BA  0100               	movlb	0	; () banked
  6662  0044BC  2596               	addwf	loadRTC@i& (0+255),w,b
  6663  0044BE  6ED9               	movwf	fsr2l,c
  6664  0044C0  0E01               	movlw	high _time
  6665  0044C2  0100               	movlb	0	; () banked
  6666  0044C4  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6667  0044C6  6EDA               	movwf	fsr2h,c
  6668  0044C8  50DF               	movf	indf2,w,c
  6669  0044CA  0100               	movlb	0	; () banked
  6670  0044CC  6F95               	movwf	??_loadRTC& (0+255),b
  6671  0044CE  0100               	movlb	0	; () banked
  6672  0044D0  5195               	movf	??_loadRTC& (0+255),w,b
  6673  0044D2  0100               	movlb	0	; () banked
  6674  0044D4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6675  0044D6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6676  0044D8  EC80  F029         	call	_I2C_Master_Write	;wreg free
  6677  0044DC  0100               	movlb	0	; () banked
  6678  0044DE  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6679  0044E0  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6680  0044E2  D7DF               	goto	l7016
  6681  0044E4                     l7026:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;RTC.c: 39: }
  6685                           ;RTC.c: 40: I2C_Master_Stop();
  6686  0044E4  EC8E  F029         	call	_I2C_Master_Stop	;wreg free
  6687                           
  6688                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6689  0044E8  8EF2               	bsf	intcon,7,c	;volatile
  6690  0044EA  0012               	return		;funcret
  6691  0044EC                     __end_of_loadRTC:
  6692                           	opt stack 0
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           intcon2	equ	0xFF1
  6701                           intcon3	equ	0xFF0
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           fsr1l	equ	0xFE1
  6706                           indf2	equ	0xFDF
  6707                           postinc2	equ	0xFDE
  6708                           postdec2	equ	0xFDD
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function _I2C_Master_Init *****************
  6714 ;; Defined at:
  6715 ;;		line 15 in file "I2C.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  c               4   13[BANK0 ] const unsigned long 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;Total ram usage:        8 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    8
  6736 ;; This function calls:
  6737 ;;		___lldiv
  6738 ;; This function is called by:
  6739 ;;		_main
  6740 ;;		_loadRTC
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text18
  6745  004996                     __ptext18:
  6746                           	opt stack 0
  6747  004996                     _I2C_Master_Init:
  6748                           	opt stack 20
  6749                           
  6750                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6751                           
  6752                           ;incstack = 0
  6753  004996  0E00               	movlw	0
  6754  004998  6EC7               	movwf	4039,c	;volatile
  6755                           
  6756                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6757  00499A  0E28               	movlw	40
  6758  00499C  6EC6               	movwf	4038,c	;volatile
  6759                           
  6760                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6761  00499E  0E00               	movlw	0
  6762  0049A0  6EC5               	movwf	4037,c	;volatile
  6763                           
  6764                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6765  0049A2  0E00               	movlw	0
  6766  0049A4  0100               	movlb	0	; () banked
  6767  0049A6  6F80               	movwf	___lldiv@dividend& (0+255),b
  6768  0049A8  0E48               	movlw	72
  6769  0049AA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6770  0049AC  0EE8               	movlw	232
  6771  0049AE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6772  0049B0  0E01               	movlw	1
  6773  0049B2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6774  0049B4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6775  0049B8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6776  0049BC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6777  0049C0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6778  0049C4  0E02               	movlw	2
  6779  0049C6                     u5225:
  6780  0049C6  90D8               	bcf	status,0,c
  6781  0049C8  0100               	movlb	0	; () banked
  6782  0049CA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6783  0049CC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6784  0049CE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6785  0049D0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6786  0049D2  2EE8               	decfsz	wreg,f,c
  6787  0049D4  D7F8               	goto	u5225
  6788  0049D6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6789  0049DA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6790  0049DE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6791  0049E2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6792  0049E6  ECD6  F020         	call	___lldiv	;wreg free
  6793  0049EA  0100               	movlb	0	; () banked
  6794  0049EC  0580               	decf	?___lldiv& (0+255),w,b
  6795  0049EE  6EC8               	movwf	4040,c	;volatile
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;I2C.c: 22: TRISC3 = 1;
  6799  0049F0  8694               	bsf	3988,3,c	;volatile
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;I2C.c: 23: TRISC4 = 1;
  6803  0049F2  8894               	bsf	3988,4,c	;volatile
  6804                           
  6805                           ; BSR set to: 0
  6806  0049F4  0012               	return		;funcret
  6807  0049F6                     __end_of_I2C_Master_Init:
  6808                           	opt stack 0
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           prodh	equ	0xFF4
  6814                           prodl	equ	0xFF3
  6815                           intcon	equ	0xFF2
  6816                           intcon2	equ	0xFF1
  6817                           intcon3	equ	0xFF0
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           postdec1	equ	0xFE5
  6821                           fsr1l	equ	0xFE1
  6822                           indf2	equ	0xFDF
  6823                           postinc2	equ	0xFDE
  6824                           postdec2	equ	0xFDD
  6825                           fsr2h	equ	0xFDA
  6826                           fsr2l	equ	0xFD9
  6827                           status	equ	0xFD8
  6828                           
  6829 ;; *************** function ___lldiv *****************
  6830 ;; Defined at:
  6831 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  dividend        4    0[BANK0 ] unsigned long 
  6834 ;;  divisor         4    4[BANK0 ] unsigned long 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  quotient        4    8[BANK0 ] unsigned long 
  6837 ;;  counter         1   12[BANK0 ] unsigned char 
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  4    0[BANK0 ] unsigned long 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2, status,0
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6847 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;Total ram usage:       13 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    7
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_I2C_Master_Init
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text19
  6862  0041AC                     __ptext19:
  6863                           	opt stack 0
  6864  0041AC                     ___lldiv:
  6865                           	opt stack 20
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;incstack = 0
  6869  0041AC  0E00               	movlw	0
  6870  0041AE  0100               	movlb	0	; () banked
  6871  0041B0  6F88               	movwf	___lldiv@quotient& (0+255),b
  6872  0041B2  0E00               	movlw	0
  6873  0041B4  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6874  0041B6  0E00               	movlw	0
  6875  0041B8  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6876  0041BA  0E00               	movlw	0
  6877  0041BC  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880  0041BE  0100               	movlb	0	; () banked
  6881  0041C0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6882  0041C2  0100               	movlb	0	; () banked
  6883  0041C4  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6884  0041C6  0100               	movlb	0	; () banked
  6885  0041C8  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6886  0041CA  0100               	movlb	0	; () banked
  6887  0041CC  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6888  0041CE  B4D8               	btfsc	status,2,c
  6889  0041D0  D042               	goto	l1804
  6890                           
  6891                           ; BSR set to: 0
  6892  0041D2  0E01               	movlw	1
  6893  0041D4  0100               	movlb	0	; () banked
  6894  0041D6  6F8C               	movwf	___lldiv@counter& (0+255),b
  6895  0041D8  D008               	goto	l6436
  6896  0041DA                     l6434:
  6897                           
  6898                           ; BSR set to: 0
  6899  0041DA  0100               	movlb	0	; () banked
  6900  0041DC  90D8               	bcf	status,0,c
  6901  0041DE  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6902  0041E0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6903  0041E2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6904  0041E4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6905  0041E6  0100               	movlb	0	; () banked
  6906  0041E8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6907  0041EA                     l6436:
  6908                           
  6909                           ; BSR set to: 0
  6910  0041EA  0100               	movlb	0	; () banked
  6911  0041EC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6912  0041EE  D7F5               	goto	l6434
  6913  0041F0                     l6438:
  6914                           
  6915                           ; BSR set to: 0
  6916  0041F0  0100               	movlb	0	; () banked
  6917  0041F2  90D8               	bcf	status,0,c
  6918  0041F4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6919  0041F6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6920  0041F8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6921  0041FA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6922                           
  6923                           ; BSR set to: 0
  6924  0041FC  0100               	movlb	0	; () banked
  6925  0041FE  5184               	movf	___lldiv@divisor& (0+255),w,b
  6926  004200  0100               	movlb	0	; () banked
  6927  004202  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6928  004204  0100               	movlb	0	; () banked
  6929  004206  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6930  004208  0100               	movlb	0	; () banked
  6931  00420A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6932  00420C  0100               	movlb	0	; () banked
  6933  00420E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6934  004210  0100               	movlb	0	; () banked
  6935  004212  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6936  004214  0100               	movlb	0	; () banked
  6937  004216  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6938  004218  0100               	movlb	0	; () banked
  6939  00421A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6940  00421C  A0D8               	btfss	status,0,c
  6941  00421E  D012               	goto	l6446
  6942                           
  6943                           ; BSR set to: 0
  6944  004220  0100               	movlb	0	; () banked
  6945  004222  5184               	movf	___lldiv@divisor& (0+255),w,b
  6946  004224  0100               	movlb	0	; () banked
  6947  004226  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6948  004228  0100               	movlb	0	; () banked
  6949  00422A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6950  00422C  0100               	movlb	0	; () banked
  6951  00422E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6952  004230  0100               	movlb	0	; () banked
  6953  004232  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6954  004234  0100               	movlb	0	; () banked
  6955  004236  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6956  004238  0100               	movlb	0	; () banked
  6957  00423A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6958  00423C  0100               	movlb	0	; () banked
  6959  00423E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6960                           
  6961                           ; BSR set to: 0
  6962  004240  0100               	movlb	0	; () banked
  6963  004242  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6964  004244                     l6446:
  6965                           
  6966                           ; BSR set to: 0
  6967  004244  0100               	movlb	0	; () banked
  6968  004246  90D8               	bcf	status,0,c
  6969  004248  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6970  00424A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6971  00424C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6972  00424E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6973                           
  6974                           ; BSR set to: 0
  6975  004250  0100               	movlb	0	; () banked
  6976  004252  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6977  004254  D7CD               	goto	l6438
  6978  004256                     l1804:
  6979                           
  6980                           ; BSR set to: 0
  6981  004256  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6982  00425A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6983  00425E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6984  004262  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6985                           
  6986                           ; BSR set to: 0
  6987  004266  0012               	return		;funcret
  6988  004268                     __end_of___lldiv:
  6989                           	opt stack 0
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           intcon	equ	0xFF2
  6997                           intcon2	equ	0xFF1
  6998                           intcon3	equ	0xFF0
  6999                           postinc0	equ	0xFEE
  7000                           wreg	equ	0xFE8
  7001                           postdec1	equ	0xFE5
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _change_state_to_menu_start *****************
  7011 ;; Defined at:
  7012 ;;		line 474 in file "UI.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:   11
  7033 ;; This function calls:
  7034 ;;		_lcdInst
  7035 ;;		_printRTC
  7036 ;;		_printf
  7037 ;; This function is called by:
  7038 ;;		_initUI
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text20
  7043  00509A                     __ptext20:
  7044                           	opt stack 0
  7045  00509A                     _change_state_to_menu_start:
  7046                           	opt stack 18
  7047                           
  7048                           ;UI.c: 475: cur_state = 0;
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;incstack = 0
  7052  00509A  0E00               	movlw	0
  7053  00509C  0100               	movlb	0	; () banked
  7054  00509E  6FED               	movwf	(_cur_state+1)& (0+255),b
  7055  0050A0  0E00               	movlw	0
  7056  0050A2  6FEC               	movwf	_cur_state& (0+255),b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;UI.c: 477: lcdInst(0b10000000);;
  7060  0050A4  0E80               	movlw	128
  7061  0050A6  EC6C  F029         	call	_lcdInst
  7062                           
  7063                           ;UI.c: 478: printRTC();
  7064  0050AA  EC1B  F012         	call	_printRTC	;wreg free
  7065                           
  7066                           ;UI.c: 479: lcdInst(0b11000000);;
  7067  0050AE  0EC0               	movlw	192
  7068  0050B0  EC6C  F029         	call	_lcdInst
  7069                           
  7070                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7071  0050B4  0EF7               	movlw	low STR_30
  7072  0050B6  0100               	movlb	0	; () banked
  7073  0050B8  6F8E               	movwf	printf@f& (0+255),b
  7074  0050BA  0EFD               	movlw	high STR_30
  7075  0050BC  0100               	movlb	0	; () banked
  7076  0050BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  7077  0050C0  EC07  F00B         	call	_printf	;wreg free
  7078  0050C4  0012               	return		;funcret
  7079  0050C6                     __end_of_change_state_to_menu_start:
  7080                           	opt stack 0
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           intcon2	equ	0xFF1
  7089                           intcon3	equ	0xFF0
  7090                           postinc0	equ	0xFEE
  7091                           wreg	equ	0xFE8
  7092                           postdec1	equ	0xFE5
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101 ;; *************** function _initTime *****************
  7102 ;; Defined at:
  7103 ;;		line 17 in file "RTC.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  s               1    wreg     unsigned char 
  7106 ;;  m               1    0[BANK0 ] unsigned char 
  7107 ;;  h               1    1[BANK0 ] unsigned char 
  7108 ;;  w               1    2[BANK0 ] unsigned char 
  7109 ;;  DD              1    3[BANK0 ] unsigned char 
  7110 ;;  MM              1    4[BANK0 ] unsigned char 
  7111 ;;  YY              1    5[BANK0 ] unsigned char 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  s               1    6[BANK0 ] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7123 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;Total ram usage:        7 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    7
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_main
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text21
  7138  0051FE                     __ptext21:
  7139                           	opt stack 0
  7140  0051FE                     _initTime:
  7141                           	opt stack 23
  7142                           
  7143                           ;incstack = 0
  7144                           ;initTime@s stored from wreg
  7145  0051FE  0100               	movlb	0	; () banked
  7146  005200  6F86               	movwf	initTime@s& (0+255),b
  7147                           
  7148                           ;RTC.c: 19: time[0] = s;
  7149  005202  C086  F11C         	movff	initTime@s,_time
  7150                           
  7151                           ;RTC.c: 20: time[1] = m;
  7152  005206  C080  F11D         	movff	initTime@m,_time+1
  7153                           
  7154                           ;RTC.c: 21: time[2] = h;
  7155  00520A  C081  F11E         	movff	initTime@h,_time+2
  7156                           
  7157                           ;RTC.c: 22: time[3] = w;
  7158  00520E  C082  F11F         	movff	initTime@w,_time+3
  7159                           
  7160                           ;RTC.c: 23: time[4] = DD;
  7161  005212  C083  F120         	movff	initTime@DD,_time+4
  7162                           
  7163                           ;RTC.c: 24: time[5] = MM;
  7164  005216  C084  F121         	movff	initTime@MM,_time+5
  7165                           
  7166                           ;RTC.c: 25: time[6] = YY;
  7167  00521A  C085  F122         	movff	initTime@YY,_time+6
  7168  00521E  0012               	return		;funcret
  7169  005220                     __end_of_initTime:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           intcon2	equ	0xFF1
  7179                           intcon3	equ	0xFF0
  7180                           postinc0	equ	0xFEE
  7181                           wreg	equ	0xFE8
  7182                           postdec1	equ	0xFE5
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _initLCD *****************
  7192 ;; Defined at:
  7193 ;;		line 48 in file "lcd.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, status,0, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;Total ram usage:        1 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    9
  7214 ;; This function calls:
  7215 ;;		_lcdInst
  7216 ;; This function is called by:
  7217 ;;		_main
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text22
  7222  004C96                     __ptext22:
  7223                           	opt stack 0
  7224  004C96                     _initLCD:
  7225                           	opt stack 21
  7226                           
  7227                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7228                           
  7229                           ;incstack = 0
  7230  004C96  0E9C               	movlw	156
  7231  004C98  0100               	movlb	0	; () banked
  7232  004C9A  6F83               	movwf	??_initLCD& (0+255),b
  7233  004C9C  0ED7               	movlw	215
  7234  004C9E                     u8977:
  7235  004C9E  2EE8               	decfsz	wreg,f,c
  7236  004CA0  D7FE               	bra	u8977
  7237  004CA2  2F83               	decfsz	??_initLCD& (0+255),f,b
  7238  004CA4  D7FC               	bra	u8977
  7239                           
  7240                           ;lcd.c: 50: lcdInst(0b00110011);
  7241  004CA6  0E33               	movlw	51
  7242  004CA8  EC6C  F029         	call	_lcdInst
  7243                           
  7244                           ;lcd.c: 51: lcdInst(0b00110010);
  7245  004CAC  0E32               	movlw	50
  7246  004CAE  EC6C  F029         	call	_lcdInst
  7247                           
  7248                           ;lcd.c: 53: lcdInst(0b00101000);
  7249  004CB2  0E28               	movlw	40
  7250  004CB4  EC6C  F029         	call	_lcdInst
  7251                           
  7252                           ;lcd.c: 54: lcdInst(0b00001100);
  7253  004CB8  0E0C               	movlw	12
  7254  004CBA  EC6C  F029         	call	_lcdInst
  7255                           
  7256                           ;lcd.c: 55: lcdInst(0b00000110);
  7257  004CBE  0E06               	movlw	6
  7258  004CC0  EC6C  F029         	call	_lcdInst
  7259                           
  7260                           ;lcd.c: 56: lcdInst(0b00000001);
  7261  004CC4  0E01               	movlw	1
  7262  004CC6  EC6C  F029         	call	_lcdInst
  7263                           
  7264                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7265  004CCA  0E9C               	movlw	156
  7266  004CCC  0100               	movlb	0	; () banked
  7267  004CCE  6F83               	movwf	??_initLCD& (0+255),b
  7268  004CD0  0ED7               	movlw	215
  7269  004CD2                     u8987:
  7270  004CD2  2EE8               	decfsz	wreg,f,c
  7271  004CD4  D7FE               	bra	u8987
  7272  004CD6  2F83               	decfsz	??_initLCD& (0+255),f,b
  7273  004CD8  D7FC               	bra	u8987
  7274  004CDA  0012               	return		;funcret
  7275  004CDC                     __end_of_initLCD:
  7276                           	opt stack 0
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           intcon2	equ	0xFF1
  7285                           intcon3	equ	0xFF0
  7286                           postinc0	equ	0xFEE
  7287                           wreg	equ	0xFE8
  7288                           postdec1	equ	0xFE5
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _UI *****************
  7298 ;; Defined at:
  7299 ;;		line 76 in file "UI.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;		None
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  i               1   73[BANK0 ] unsigned char 
  7304 ;;  i               1   85[BANK0 ] unsigned char 
  7305 ;;  i               1   84[BANK0 ] unsigned char 
  7306 ;;  i               1   83[BANK0 ] unsigned char 
  7307 ;;  i               1   82[BANK0 ] unsigned char 
  7308 ;;  i               1   81[BANK0 ] unsigned char 
  7309 ;;  i               1   80[BANK0 ] unsigned char 
  7310 ;;  i               1   79[BANK0 ] unsigned char 
  7311 ;;  i               1   78[BANK0 ] unsigned char 
  7312 ;;  i               1   77[BANK0 ] unsigned char 
  7313 ;;  i               1   76[BANK0 ] unsigned char 
  7314 ;;  i               1   75[BANK0 ] unsigned char 
  7315 ;;  i               1   74[BANK0 ] unsigned char 
  7316 ;;  month           4   86[BANK0 ] unsigned char [4]
  7317 ;;  i               1   72[BANK0 ] unsigned char 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      void 
  7320 ;; Registers used:
  7321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;Total ram usage:       22 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:   11
  7334 ;; This function calls:
  7335 ;;		___awdiv
  7336 ;;		___awmod
  7337 ;;		_change_state_to_menu_12
  7338 ;;		_change_state_to_menu_22
  7339 ;;		_lcdInst
  7340 ;;		_printRTC
  7341 ;;		_printf
  7342 ;;		_strcpy
  7343 ;; This function is called by:
  7344 ;;		_main
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text23
  7349  0008CA                     __ptext23:
  7350                           	opt stack 0
  7351  0008CA                     _UI:
  7352                           	opt stack 19
  7353                           
  7354                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7355                           
  7356                           ;incstack = 0
  7357  0008CA  0E02               	movlw	2
  7358  0008CC  0100               	movlb	0	; () banked
  7359  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7360  0008D0  A4D8               	btfss	status,2,c
  7361  0008D2  D075               	goto	l8544
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7365  0008D4  0E01               	movlw	1
  7366  0008D6  EC6C  F029         	call	_lcdInst
  7367  0008DA  0E68               	movlw	104
  7368  0008DC  0100               	movlb	0	; () banked
  7369  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7370  0008E0  0EE4               	movlw	228
  7371  0008E2                     u8997:
  7372  0008E2  2EE8               	decfsz	wreg,f,c
  7373  0008E4  D7FE               	bra	u8997
  7374  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7375  0008E8  D7FC               	bra	u8997
  7376  0008EA  F000               	nop	
  7377                           
  7378                           ;UI.c: 79: lcdInst(0b10000000);;
  7379  0008EC  0E80               	movlw	128
  7380  0008EE  EC6C  F029         	call	_lcdInst
  7381                           
  7382                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7383  0008F2  0EA3               	movlw	low STR_1
  7384  0008F4  0100               	movlb	0	; () banked
  7385  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7386  0008F8  0EFB               	movlw	high STR_1
  7387  0008FA  0100               	movlb	0	; () banked
  7388  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7389  0008FE  0E01               	movlw	1
  7390  000900  0100               	movlb	0	; () banked
  7391  000902  25FD               	addwf	_sel& (0+255),w,b
  7392  000904  0100               	movlb	0	; () banked
  7393  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7394  000908  0100               	movlb	0	; () banked
  7395  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7396  00090C  0E00               	movlw	0
  7397  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7398  000910  EC07  F00B         	call	_printf	;wreg free
  7399                           
  7400                           ;UI.c: 81: lcdInst(0b11000000);;
  7401  000914  0EC0               	movlw	192
  7402  000916  EC6C  F029         	call	_lcdInst
  7403                           
  7404                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7405  00091A  0E0E               	movlw	14
  7406  00091C  0100               	movlb	0	; () banked
  7407  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7408  000920  0E10               	movlw	16
  7409  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7410  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7411  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7412  00092C  ECDF  F021         	call	___awmod	;wreg free
  7413  000930  C080  F0C6         	movff	?___awmod,_UI$2416
  7414  000934  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  7415                           
  7416                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7417  000938  0E27               	movlw	low STR_2
  7418  00093A  0100               	movlb	0	; () banked
  7419  00093C  6F8E               	movwf	printf@f& (0+255),b
  7420  00093E  0EFF               	movlw	high STR_2
  7421  000940  0100               	movlb	0	; () banked
  7422  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7423  000944  0E0E               	movlw	14
  7424  000946  0100               	movlb	0	; () banked
  7425  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7426  00094A  0E10               	movlw	16
  7427  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7428  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7429  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7430  000956  ECDF  F021         	call	___awmod	;wreg free
  7431  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7432  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7433  000962  0E00               	movlw	0
  7434  000964  0100               	movlb	0	; () banked
  7435  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7436  000968  0E3C               	movlw	60
  7437  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7438  00096C  EC77  F020         	call	___awdiv	;wreg free
  7439  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7440  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7441  000978  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  7442  00097C  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  7443  000980  0E00               	movlw	0
  7444  000982  0100               	movlb	0	; () banked
  7445  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7446  000986  0E3C               	movlw	60
  7447  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7448  00098A  ECDF  F021         	call	___awmod	;wreg free
  7449  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7450  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7451  000996  EC07  F00B         	call	_printf	;wreg free
  7452                           
  7453                           ;UI.c: 83: machine_state = UI_state;
  7454  00099A  0E00               	movlw	0
  7455  00099C  0100               	movlb	0	; () banked
  7456  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7457  0009A0                     l180:
  7458  0009A0  A281               	btfss	3969,1,c	;volatile
  7459  0009A2  D7FE               	goto	l180
  7460                           
  7461                           ;UI.c: 86: }
  7462                           ;UI.c: 87: if(cur_state==12){
  7463  0009A4  0E0C               	movlw	12
  7464  0009A6  0100               	movlb	0	; () banked
  7465  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7466  0009AA  0100               	movlb	0	; () banked
  7467  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7468  0009AE  A4D8               	btfss	status,2,c
  7469  0009B0  D003               	goto	l8542
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;UI.c: 88: change_state_to_menu_12();
  7473  0009B2  ECAB  F026         	call	_change_state_to_menu_12	;wreg free
  7474                           
  7475                           ;UI.c: 89: }
  7476  0009B6  D3D3               	goto	l8864
  7477  0009B8                     l8542:
  7478                           
  7479                           ;UI.c: 90: else{
  7480                           ;UI.c: 91: change_state_to_menu_22();
  7481  0009B8  EC8F  F026         	call	_change_state_to_menu_22	;wreg free
  7482                           
  7483                           ;UI.c: 92: }
  7484                           ;UI.c: 93: }
  7485  0009BC  D3D0               	goto	l8864
  7486  0009BE                     l8544:
  7487                           
  7488                           ;UI.c: 94: else if(cur_state == 0){
  7489  0009BE  0100               	movlb	0	; () banked
  7490  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7491  0009C2  0100               	movlb	0	; () banked
  7492  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7493  0009C6  A4D8               	btfss	status,2,c
  7494  0009C8  D3CA               	goto	l8864
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7498  0009CA  0E00               	movlw	0
  7499  0009CC  0100               	movlb	0	; () banked
  7500  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7501  0009D0                     l8548:
  7502                           
  7503                           ; BSR set to: 0
  7504  0009D0  0E63               	movlw	99
  7505  0009D2  0100               	movlb	0	; () banked
  7506  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7507  0009D6  D001               	goto	l8552
  7508  0009D8  D00C               	goto	l8556
  7509  0009DA                     l8552:
  7510                           
  7511                           ; BSR set to: 0
  7512  0009DA  0E68               	movlw	104
  7513  0009DC  0100               	movlb	0	; () banked
  7514  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7515  0009E0  0EE4               	movlw	228
  7516  0009E2                     u9007:
  7517  0009E2  2EE8               	decfsz	wreg,f,c
  7518  0009E4  D7FE               	bra	u9007
  7519  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7520  0009E8  D7FC               	bra	u9007
  7521  0009EA  F000               	nop	
  7522  0009EC  0100               	movlb	0	; () banked
  7523  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7524  0009F0  D7EF               	goto	l8548
  7525  0009F2                     l8556:
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;UI.c: 96: if(cur_state == 0){
  7529  0009F2  0100               	movlb	0	; () banked
  7530  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7531  0009F6  0100               	movlb	0	; () banked
  7532  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7533  0009FA  A4D8               	btfss	status,2,c
  7534  0009FC  D3B0               	goto	l8864
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;UI.c: 97: printRTC();
  7538  0009FE  EC1B  F012         	call	_printRTC	;wreg free
  7539                           
  7540                           ;UI.c: 98: }
  7541                           ;UI.c: 99: }
  7542                           ;UI.c: 100: while(logstate){
  7543  000A02  D3AD               	goto	l8864
  7544  000A04                     l8560:
  7545                           
  7546                           ;UI.c: 102: if(!log_completion){
  7547  000A04  5063               	movf	_log_completion,w,c
  7548  000A06  1064               	iorwf	_log_completion+1,w,c
  7549  000A08  A4D8               	btfss	status,2,c
  7550  000A0A  D041               	goto	l8590
  7551                           
  7552                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7553  000A0C  0E01               	movlw	1
  7554  000A0E  EC6C  F029         	call	_lcdInst
  7555  000A12  0E68               	movlw	104
  7556  000A14  0100               	movlb	0	; () banked
  7557  000A16  6FC4               	movwf	??_UI& (0+255),b
  7558  000A18  0EE4               	movlw	228
  7559  000A1A                     u9017:
  7560  000A1A  2EE8               	decfsz	wreg,f,c
  7561  000A1C  D7FE               	bra	u9017
  7562  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7563  000A20  D7FC               	bra	u9017
  7564  000A22  F000               	nop	
  7565                           
  7566                           ;UI.c: 104: lcdInst(0b10000000);;
  7567  000A24  0E80               	movlw	128
  7568  000A26  EC6C  F029         	call	_lcdInst
  7569                           
  7570                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7571  000A2A  0E91               	movlw	low STR_3
  7572  000A2C  0100               	movlb	0	; () banked
  7573  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7574  000A30  0EFB               	movlw	high STR_3
  7575  000A32  0100               	movlb	0	; () banked
  7576  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7577  000A36  C0F2  F090         	movff	_log,?_printf+2
  7578  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7579  000A3E  EC07  F00B         	call	_printf	;wreg free
  7580                           
  7581                           ;UI.c: 106: lcdInst(0b11000000);;
  7582  000A42  0EC0               	movlw	192
  7583  000A44  EC6C  F029         	call	_lcdInst
  7584                           
  7585                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7586  000A48  0E4A               	movlw	low STR_4
  7587  000A4A  0100               	movlb	0	; () banked
  7588  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7589  000A4E  0EFE               	movlw	high STR_4
  7590  000A50  0100               	movlb	0	; () banked
  7591  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7592  000A54  EC07  F00B         	call	_printf	;wreg free
  7593  000A58                     l8574:
  7594  000A58  0E00               	movlw	0
  7595  000A5A  0100               	movlb	0	; () banked
  7596  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7597  000A5E                     l8576:
  7598                           
  7599                           ; BSR set to: 0
  7600  000A5E  0E63               	movlw	99
  7601  000A60  0100               	movlb	0	; () banked
  7602  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7603  000A64  D001               	goto	l8580
  7604  000A66  D00C               	goto	l8584
  7605  000A68                     l8580:
  7606                           
  7607                           ; BSR set to: 0
  7608  000A68  0E68               	movlw	104
  7609  000A6A  0100               	movlb	0	; () banked
  7610  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7611  000A6E  0EE4               	movlw	228
  7612  000A70                     u9027:
  7613  000A70  2EE8               	decfsz	wreg,f,c
  7614  000A72  D7FE               	bra	u9027
  7615  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7616  000A76  D7FC               	bra	u9027
  7617  000A78  F000               	nop	
  7618  000A7A  0100               	movlb	0	; () banked
  7619  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7620  000A7E  D7EF               	goto	l8576
  7621  000A80                     l8584:
  7622                           
  7623                           ; BSR set to: 0
  7624  000A80  0100               	movlb	0	; () banked
  7625  000A82  51F6               	movf	_logstate& (0+255),w,b
  7626  000A84  0100               	movlb	0	; () banked
  7627  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7628  000A88  B4D8               	btfsc	status,2,c
  7629  000A8A  0012               	return	
  7630  000A8C  D7E5               	goto	l8574
  7631  000A8E                     l8590:
  7632                           
  7633                           ;UI.c: 111: else{
  7634                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7635  000A8E  0E01               	movlw	1
  7636  000A90  EC6C  F029         	call	_lcdInst
  7637  000A94  0E68               	movlw	104
  7638  000A96  0100               	movlb	0	; () banked
  7639  000A98  6FC4               	movwf	??_UI& (0+255),b
  7640  000A9A  0EE4               	movlw	228
  7641  000A9C                     u9037:
  7642  000A9C  2EE8               	decfsz	wreg,f,c
  7643  000A9E  D7FE               	bra	u9037
  7644  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7645  000AA2  D7FC               	bra	u9037
  7646  000AA4  F000               	nop	
  7647                           
  7648                           ;UI.c: 113: lcdInst(0b10000000);;
  7649  000AA6  0E80               	movlw	128
  7650  000AA8  EC6C  F029         	call	_lcdInst
  7651                           
  7652                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7653  000AAC  0E91               	movlw	low STR_3
  7654  000AAE  0100               	movlb	0	; () banked
  7655  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7656  000AB2  0EFB               	movlw	high STR_3
  7657  000AB4  0100               	movlb	0	; () banked
  7658  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7659  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7660  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7661  000AC0  EC07  F00B         	call	_printf	;wreg free
  7662                           
  7663                           ;UI.c: 115: lcdInst(0b11000000);;
  7664  000AC4  0EC0               	movlw	192
  7665  000AC6  EC6C  F029         	call	_lcdInst
  7666                           
  7667                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7668  000ACA  0EE6               	movlw	low STR_6
  7669  000ACC  0100               	movlb	0	; () banked
  7670  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7671  000AD0  0EFD               	movlw	high STR_6
  7672  000AD2  0100               	movlb	0	; () banked
  7673  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7674  000AD6  EC07  F00B         	call	_printf	;wreg free
  7675                           
  7676                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7677  000ADA  0E00               	movlw	0
  7678  000ADC  0100               	movlb	0	; () banked
  7679  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7680  000AE0                     l8604:
  7681                           
  7682                           ; BSR set to: 0
  7683  000AE0  0E63               	movlw	99
  7684  000AE2  0100               	movlb	0	; () banked
  7685  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7686  000AE6  D001               	goto	l8608
  7687  000AE8  D00C               	goto	l8612
  7688  000AEA                     l8608:
  7689                           
  7690                           ; BSR set to: 0
  7691  000AEA  0E68               	movlw	104
  7692  000AEC  0100               	movlb	0	; () banked
  7693  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7694  000AF0  0EE4               	movlw	228
  7695  000AF2                     u9047:
  7696  000AF2  2EE8               	decfsz	wreg,f,c
  7697  000AF4  D7FE               	bra	u9047
  7698  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7699  000AF8  D7FC               	bra	u9047
  7700  000AFA  F000               	nop	
  7701  000AFC  0100               	movlb	0	; () banked
  7702  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7703  000B00  D7EF               	goto	l8604
  7704  000B02                     l8612:
  7705                           
  7706                           ; BSR set to: 0
  7707  000B02  0100               	movlb	0	; () banked
  7708  000B04  51F6               	movf	_logstate& (0+255),w,b
  7709  000B06  0100               	movlb	0	; () banked
  7710  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7711  000B0A  B4D8               	btfsc	status,2,c
  7712  000B0C  0012               	return	
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7716                           
  7717                           ; BSR set to: 0
  7718                           
  7719                           ; BSR set to: 0
  7720  000B0E  0E00               	movlw	0
  7721  000B10  0100               	movlb	0	; () banked
  7722  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7723  000B14                     l8618:
  7724                           
  7725                           ; BSR set to: 0
  7726  000B14  0E63               	movlw	99
  7727  000B16  0100               	movlb	0	; () banked
  7728  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7729  000B1A  D001               	goto	l8622
  7730  000B1C  D00C               	goto	l8626
  7731  000B1E                     l8622:
  7732                           
  7733                           ; BSR set to: 0
  7734  000B1E  0E68               	movlw	104
  7735  000B20  0100               	movlb	0	; () banked
  7736  000B22  6FC4               	movwf	??_UI& (0+255),b
  7737  000B24  0EE4               	movlw	228
  7738  000B26                     u9057:
  7739  000B26  2EE8               	decfsz	wreg,f,c
  7740  000B28  D7FE               	bra	u9057
  7741  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7742  000B2C  D7FC               	bra	u9057
  7743  000B2E  F000               	nop	
  7744  000B30  0100               	movlb	0	; () banked
  7745  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7746  000B34  D7EF               	goto	l8618
  7747  000B36                     l8626:
  7748                           
  7749                           ; BSR set to: 0
  7750  000B36  0100               	movlb	0	; () banked
  7751  000B38  51F6               	movf	_logstate& (0+255),w,b
  7752  000B3A  0100               	movlb	0	; () banked
  7753  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7754  000B3E  B4D8               	btfsc	status,2,c
  7755  000B40  0012               	return	
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7759                           
  7760                           ; BSR set to: 0
  7761                           
  7762                           ; BSR set to: 0
  7763  000B42  0E01               	movlw	1
  7764  000B44  EC6C  F029         	call	_lcdInst
  7765  000B48  0E68               	movlw	104
  7766  000B4A  0100               	movlb	0	; () banked
  7767  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7768  000B4E  0EE4               	movlw	228
  7769  000B50                     u9067:
  7770  000B50  2EE8               	decfsz	wreg,f,c
  7771  000B52  D7FE               	bra	u9067
  7772  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7773  000B56  D7FC               	bra	u9067
  7774  000B58  F000               	nop	
  7775                           
  7776                           ;UI.c: 122: lcdInst(0b10000000);;
  7777  000B5A  0E80               	movlw	128
  7778  000B5C  EC6C  F029         	call	_lcdInst
  7779                           
  7780                           ;UI.c: 123: printf("START:");
  7781  000B60  0EC4               	movlw	low STR_7
  7782  000B62  0100               	movlb	0	; () banked
  7783  000B64  6F8E               	movwf	printf@f& (0+255),b
  7784  000B66  0EFF               	movlw	high STR_7
  7785  000B68  0100               	movlb	0	; () banked
  7786  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7787  000B6C  EC07  F00B         	call	_printf	;wreg free
  7788                           
  7789                           ;UI.c: 124: lcdInst(0b11000000);;
  7790  000B70  0EC0               	movlw	192
  7791  000B72  EC6C  F029         	call	_lcdInst
  7792                           
  7793                           ;UI.c: 125: char month[] = "MMM";
  7794  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7795  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7796  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7797  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7798                           
  7799                           ;UI.c: 126: switch(log_startTime[5]){
  7800  000B86  D0C3               	goto	l8670
  7801  000B88                     l8642:
  7802                           
  7803                           ;UI.c: 128: strcpy(month, "JAN");
  7804  000B88  0ED6               	movlw	low UI@month
  7805  000B8A  0100               	movlb	0	; () banked
  7806  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7807  000B8E  0E00               	movlw	high UI@month
  7808  000B90  0100               	movlb	0	; () banked
  7809  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7810  000B94  0EDB               	movlw	low STR_8
  7811  000B96  0100               	movlb	0	; () banked
  7812  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7813  000B9A  0EFF               	movlw	high STR_8
  7814  000B9C  0100               	movlb	0	; () banked
  7815  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7816  000BA0  ECC7  F026         	call	_strcpy	;wreg free
  7817                           
  7818                           ;UI.c: 129: break;
  7819  000BA4  D0E6               	goto	l8672
  7820  000BA6                     l8644:
  7821                           
  7822                           ;UI.c: 131: strcpy(month, "FEB");
  7823  000BA6  0ED6               	movlw	low UI@month
  7824  000BA8  0100               	movlb	0	; () banked
  7825  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7826  000BAC  0E00               	movlw	high UI@month
  7827  000BAE  0100               	movlb	0	; () banked
  7828  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7829  000BB2  0ECB               	movlw	low STR_9
  7830  000BB4  0100               	movlb	0	; () banked
  7831  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7832  000BB8  0EFF               	movlw	high STR_9
  7833  000BBA  0100               	movlb	0	; () banked
  7834  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7835  000BBE  ECC7  F026         	call	_strcpy	;wreg free
  7836                           
  7837                           ;UI.c: 132: break;
  7838  000BC2  D0D7               	goto	l8672
  7839  000BC4                     l8646:
  7840                           
  7841                           ;UI.c: 134: strcpy(month, "MAR");
  7842  000BC4  0ED6               	movlw	low UI@month
  7843  000BC6  0100               	movlb	0	; () banked
  7844  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7845  000BCA  0E00               	movlw	high UI@month
  7846  000BCC  0100               	movlb	0	; () banked
  7847  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7848  000BD0  0EE7               	movlw	low STR_10
  7849  000BD2  0100               	movlb	0	; () banked
  7850  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7851  000BD6  0EFF               	movlw	high STR_10
  7852  000BD8  0100               	movlb	0	; () banked
  7853  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7854  000BDC  ECC7  F026         	call	_strcpy	;wreg free
  7855                           
  7856                           ;UI.c: 135: break;
  7857  000BE0  D0C8               	goto	l8672
  7858  000BE2                     l8648:
  7859                           
  7860                           ;UI.c: 137: strcpy(month, "APR");
  7861  000BE2  0ED6               	movlw	low UI@month
  7862  000BE4  0100               	movlb	0	; () banked
  7863  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7864  000BE8  0E00               	movlw	high UI@month
  7865  000BEA  0100               	movlb	0	; () banked
  7866  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7867  000BEE  0EEB               	movlw	low STR_11
  7868  000BF0  0100               	movlb	0	; () banked
  7869  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7870  000BF4  0EFF               	movlw	high STR_11
  7871  000BF6  0100               	movlb	0	; () banked
  7872  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7873  000BFA  ECC7  F026         	call	_strcpy	;wreg free
  7874                           
  7875                           ;UI.c: 138: break;
  7876  000BFE  D0B9               	goto	l8672
  7877  000C00                     l8650:
  7878                           
  7879                           ;UI.c: 140: strcpy(month, "MAY");
  7880  000C00  0ED6               	movlw	low UI@month
  7881  000C02  0100               	movlb	0	; () banked
  7882  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7883  000C06  0E00               	movlw	high UI@month
  7884  000C08  0100               	movlb	0	; () banked
  7885  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7886  000C0C  0EFB               	movlw	low STR_12
  7887  000C0E  0100               	movlb	0	; () banked
  7888  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7889  000C12  0EFF               	movlw	high STR_12
  7890  000C14  0100               	movlb	0	; () banked
  7891  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7892  000C18  ECC7  F026         	call	_strcpy	;wreg free
  7893                           
  7894                           ;UI.c: 141: break;
  7895  000C1C  D0AA               	goto	l8672
  7896  000C1E                     l8652:
  7897                           
  7898                           ;UI.c: 143: strcpy(month, "JUN");
  7899  000C1E  0ED6               	movlw	low UI@month
  7900  000C20  0100               	movlb	0	; () banked
  7901  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7902  000C24  0E00               	movlw	high UI@month
  7903  000C26  0100               	movlb	0	; () banked
  7904  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7905  000C2A  0EDF               	movlw	low STR_13
  7906  000C2C  0100               	movlb	0	; () banked
  7907  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7908  000C30  0EFF               	movlw	high STR_13
  7909  000C32  0100               	movlb	0	; () banked
  7910  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7911  000C36  ECC7  F026         	call	_strcpy	;wreg free
  7912                           
  7913                           ;UI.c: 144: break;
  7914  000C3A  D09B               	goto	l8672
  7915  000C3C                     l8654:
  7916                           
  7917                           ;UI.c: 146: strcpy(month, "JUL");
  7918  000C3C  0ED6               	movlw	low UI@month
  7919  000C3E  0100               	movlb	0	; () banked
  7920  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7921  000C42  0E00               	movlw	high UI@month
  7922  000C44  0100               	movlb	0	; () banked
  7923  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7924  000C48  0ED7               	movlw	low STR_14
  7925  000C4A  0100               	movlb	0	; () banked
  7926  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7927  000C4E  0EFF               	movlw	high STR_14
  7928  000C50  0100               	movlb	0	; () banked
  7929  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7930  000C54  ECC7  F026         	call	_strcpy	;wreg free
  7931                           
  7932                           ;UI.c: 147: break;
  7933  000C58  D08C               	goto	l8672
  7934  000C5A                     l8656:
  7935                           
  7936                           ;UI.c: 149: strcpy(month, "AUG");
  7937  000C5A  0ED6               	movlw	low UI@month
  7938  000C5C  0100               	movlb	0	; () banked
  7939  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7940  000C60  0E00               	movlw	high UI@month
  7941  000C62  0100               	movlb	0	; () banked
  7942  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7943  000C66  0ED3               	movlw	low STR_15
  7944  000C68  0100               	movlb	0	; () banked
  7945  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7946  000C6C  0EFF               	movlw	high STR_15
  7947  000C6E  0100               	movlb	0	; () banked
  7948  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7949  000C72  ECC7  F026         	call	_strcpy	;wreg free
  7950                           
  7951                           ;UI.c: 150: break;
  7952  000C76  D07D               	goto	l8672
  7953  000C78                     l8658:
  7954                           
  7955                           ;UI.c: 152: strcpy(month, "SEP");
  7956  000C78  0ED6               	movlw	low UI@month
  7957  000C7A  0100               	movlb	0	; () banked
  7958  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7959  000C7E  0E00               	movlw	high UI@month
  7960  000C80  0100               	movlb	0	; () banked
  7961  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7962  000C84  0EE3               	movlw	low STR_16
  7963  000C86  0100               	movlb	0	; () banked
  7964  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7965  000C8A  0EFF               	movlw	high STR_16
  7966  000C8C  0100               	movlb	0	; () banked
  7967  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7968  000C90  ECC7  F026         	call	_strcpy	;wreg free
  7969                           
  7970                           ;UI.c: 153: break;
  7971  000C94  D06E               	goto	l8672
  7972  000C96                     l8660:
  7973                           
  7974                           ;UI.c: 155: strcpy(month, "OCT");
  7975  000C96  0ED6               	movlw	low UI@month
  7976  000C98  0100               	movlb	0	; () banked
  7977  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  7978  000C9C  0E00               	movlw	high UI@month
  7979  000C9E  0100               	movlb	0	; () banked
  7980  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7981  000CA2  0EF3               	movlw	low STR_17
  7982  000CA4  0100               	movlb	0	; () banked
  7983  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  7984  000CA8  0EFF               	movlw	high STR_17
  7985  000CAA  0100               	movlb	0	; () banked
  7986  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7987  000CAE  ECC7  F026         	call	_strcpy	;wreg free
  7988                           
  7989                           ;UI.c: 156: break;
  7990  000CB2  D05F               	goto	l8672
  7991  000CB4                     l8662:
  7992                           
  7993                           ;UI.c: 158: strcpy(month, "NOV");
  7994  000CB4  0ED6               	movlw	low UI@month
  7995  000CB6  0100               	movlb	0	; () banked
  7996  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  7997  000CBA  0E00               	movlw	high UI@month
  7998  000CBC  0100               	movlb	0	; () banked
  7999  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8000  000CC0  0EF7               	movlw	low STR_18
  8001  000CC2  0100               	movlb	0	; () banked
  8002  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  8003  000CC6  0EFF               	movlw	high STR_18
  8004  000CC8  0100               	movlb	0	; () banked
  8005  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8006  000CCC  ECC7  F026         	call	_strcpy	;wreg free
  8007                           
  8008                           ;UI.c: 159: break;
  8009  000CD0  D050               	goto	l8672
  8010  000CD2                     l8664:
  8011                           
  8012                           ;UI.c: 161: strcpy(month, "DEC");
  8013  000CD2  0ED6               	movlw	low UI@month
  8014  000CD4  0100               	movlb	0	; () banked
  8015  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  8016  000CD8  0E00               	movlw	high UI@month
  8017  000CDA  0100               	movlb	0	; () banked
  8018  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8019  000CDE  0ECF               	movlw	low STR_19
  8020  000CE0  0100               	movlb	0	; () banked
  8021  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  8022  000CE4  0EFF               	movlw	high STR_19
  8023  000CE6  0100               	movlb	0	; () banked
  8024  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8025  000CEA  ECC7  F026         	call	_strcpy	;wreg free
  8026                           
  8027                           ;UI.c: 162: break;
  8028  000CEE  D041               	goto	l8672
  8029  000CF0                     l8666:
  8030                           
  8031                           ;UI.c: 164: strcpy(month, "ERR");
  8032  000CF0  0ED6               	movlw	low UI@month
  8033  000CF2  0100               	movlb	0	; () banked
  8034  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  8035  000CF6  0E00               	movlw	high UI@month
  8036  000CF8  0100               	movlb	0	; () banked
  8037  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8038  000CFC  0EEF               	movlw	low STR_20
  8039  000CFE  0100               	movlb	0	; () banked
  8040  000D00  6F82               	movwf	strcpy@from& (0+255),b
  8041  000D02  0EFF               	movlw	high STR_20
  8042  000D04  0100               	movlb	0	; () banked
  8043  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8044  000D08  ECC7  F026         	call	_strcpy	;wreg free
  8045                           
  8046                           ;UI.c: 166: }
  8047                           
  8048                           ;UI.c: 165: break;
  8049  000D0C  D032               	goto	l8672
  8050  000D0E                     l8670:
  8051  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  8052  000D12  CFDE F0C4          	movff	postinc2,??_UI
  8053  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  8054                           
  8055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8056                           ; Switch size 1, requested type "space"
  8057                           ; Number of cases is 1, Range of values is 0 to 0
  8058                           ; switch strategies available:
  8059                           ; Name         Instructions Cycles
  8060                           ; simple_byte            4     3 (average)
  8061                           ;	Chosen strategy is simple_byte
  8062  000D1A  0100               	movlb	0	; () banked
  8063  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  8064  000D1E  0A00               	xorlw	0	; case 0
  8065  000D20  A4D8               	btfss	status,2,c
  8066  000D22  D7E6               	goto	l8666
  8067                           
  8068                           ; BSR set to: 0
  8069                           ; Switch size 1, requested type "space"
  8070                           ; Number of cases is 12, Range of values is 1 to 12
  8071                           ; switch strategies available:
  8072                           ; Name         Instructions Cycles
  8073                           ; simple_byte           37    19 (average)
  8074                           ;	Chosen strategy is simple_byte
  8075  000D24  0100               	movlb	0	; () banked
  8076  000D26  51C4               	movf	??_UI& (0+255),w,b
  8077  000D28  0A01               	xorlw	1	; case 1
  8078  000D2A  B4D8               	btfsc	status,2,c
  8079  000D2C  D72D               	goto	l8642
  8080  000D2E  0A03               	xorlw	3	; case 2
  8081  000D30  B4D8               	btfsc	status,2,c
  8082  000D32  D739               	goto	l8644
  8083  000D34  0A01               	xorlw	1	; case 3
  8084  000D36  B4D8               	btfsc	status,2,c
  8085  000D38  D745               	goto	l8646
  8086  000D3A  0A07               	xorlw	7	; case 4
  8087  000D3C  B4D8               	btfsc	status,2,c
  8088  000D3E  D751               	goto	l8648
  8089  000D40  0A01               	xorlw	1	; case 5
  8090  000D42  B4D8               	btfsc	status,2,c
  8091  000D44  D75D               	goto	l8650
  8092  000D46  0A03               	xorlw	3	; case 6
  8093  000D48  B4D8               	btfsc	status,2,c
  8094  000D4A  D769               	goto	l8652
  8095  000D4C  0A01               	xorlw	1	; case 7
  8096  000D4E  B4D8               	btfsc	status,2,c
  8097  000D50  D775               	goto	l8654
  8098  000D52  0A0F               	xorlw	15	; case 8
  8099  000D54  B4D8               	btfsc	status,2,c
  8100  000D56  D781               	goto	l8656
  8101  000D58  0A01               	xorlw	1	; case 9
  8102  000D5A  B4D8               	btfsc	status,2,c
  8103  000D5C  D78D               	goto	l8658
  8104  000D5E  0A03               	xorlw	3	; case 10
  8105  000D60  B4D8               	btfsc	status,2,c
  8106  000D62  D799               	goto	l8660
  8107  000D64  0A01               	xorlw	1	; case 11
  8108  000D66  B4D8               	btfsc	status,2,c
  8109  000D68  D7A5               	goto	l8662
  8110  000D6A  0A07               	xorlw	7	; case 12
  8111  000D6C  B4D8               	btfsc	status,2,c
  8112  000D6E  D7B1               	goto	l8664
  8113  000D70  D7BF               	goto	l8666
  8114  000D72                     l8672:
  8115                           
  8116                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8117  000D72  0E0A               	movlw	low STR_21
  8118  000D74  0100               	movlb	0	; () banked
  8119  000D76  6F8E               	movwf	printf@f& (0+255),b
  8120  000D78  0EFB               	movlw	high STR_21
  8121  000D7A  0100               	movlb	0	; () banked
  8122  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8123  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8124  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8125  000D86  0ED6               	movlw	low UI@month
  8126  000D88  0100               	movlb	0	; () banked
  8127  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8128  000D8C  0E00               	movlw	high UI@month
  8129  000D8E  0100               	movlb	0	; () banked
  8130  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8131  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8132  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8133  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8134  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8135  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8136  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8137  000DAA  EC07  F00B         	call	_printf	;wreg free
  8138                           
  8139                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8140  000DAE  0E00               	movlw	0
  8141  000DB0  0100               	movlb	0	; () banked
  8142  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8143  000DB4                     l8676:
  8144                           
  8145                           ; BSR set to: 0
  8146  000DB4  0E63               	movlw	99
  8147  000DB6  0100               	movlb	0	; () banked
  8148  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8149  000DBA  D001               	goto	l8680
  8150  000DBC  D00C               	goto	l8684
  8151  000DBE                     l8680:
  8152                           
  8153                           ; BSR set to: 0
  8154  000DBE  0E68               	movlw	104
  8155  000DC0  0100               	movlb	0	; () banked
  8156  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8157  000DC4  0EE4               	movlw	228
  8158  000DC6                     u9077:
  8159  000DC6  2EE8               	decfsz	wreg,f,c
  8160  000DC8  D7FE               	bra	u9077
  8161  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8162  000DCC  D7FC               	bra	u9077
  8163  000DCE  F000               	nop	
  8164  000DD0  0100               	movlb	0	; () banked
  8165  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8166  000DD4  D7EF               	goto	l8676
  8167  000DD6                     l8684:
  8168                           
  8169                           ; BSR set to: 0
  8170  000DD6  0100               	movlb	0	; () banked
  8171  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8172  000DDA  0100               	movlb	0	; () banked
  8173  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8174  000DDE  B4D8               	btfsc	status,2,c
  8175  000DE0  0012               	return	
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8179                           
  8180                           ; BSR set to: 0
  8181                           
  8182                           ; BSR set to: 0
  8183  000DE2  0E00               	movlw	0
  8184  000DE4  0100               	movlb	0	; () banked
  8185  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8186  000DE8                     l8690:
  8187                           
  8188                           ; BSR set to: 0
  8189  000DE8  0E63               	movlw	99
  8190  000DEA  0100               	movlb	0	; () banked
  8191  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8192  000DEE  D001               	goto	l8694
  8193  000DF0  D00C               	goto	l8698
  8194  000DF2                     l8694:
  8195                           
  8196                           ; BSR set to: 0
  8197  000DF2  0E68               	movlw	104
  8198  000DF4  0100               	movlb	0	; () banked
  8199  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8200  000DF8  0EE4               	movlw	228
  8201  000DFA                     u9087:
  8202  000DFA  2EE8               	decfsz	wreg,f,c
  8203  000DFC  D7FE               	bra	u9087
  8204  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8205  000E00  D7FC               	bra	u9087
  8206  000E02  F000               	nop	
  8207  000E04  0100               	movlb	0	; () banked
  8208  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8209  000E08  D7EF               	goto	l8690
  8210  000E0A                     l8698:
  8211                           
  8212                           ; BSR set to: 0
  8213  000E0A  0100               	movlb	0	; () banked
  8214  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8215  000E0E  0100               	movlb	0	; () banked
  8216  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8217  000E12  B4D8               	btfsc	status,2,c
  8218  000E14  0012               	return	
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8222                           
  8223                           ; BSR set to: 0
  8224                           
  8225                           ; BSR set to: 0
  8226  000E16  0E01               	movlw	1
  8227  000E18  EC6C  F029         	call	_lcdInst
  8228  000E1C  0E68               	movlw	104
  8229  000E1E  0100               	movlb	0	; () banked
  8230  000E20  6FC4               	movwf	??_UI& (0+255),b
  8231  000E22  0EE4               	movlw	228
  8232  000E24                     u9097:
  8233  000E24  2EE8               	decfsz	wreg,f,c
  8234  000E26  D7FE               	bra	u9097
  8235  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8236  000E2A  D7FC               	bra	u9097
  8237  000E2C  F000               	nop	
  8238                           
  8239                           ;UI.c: 173: lcdInst(0b10000000);;
  8240  000E2E  0E80               	movlw	128
  8241  000E30  EC6C  F029         	call	_lcdInst
  8242                           
  8243                           ;UI.c: 174: printf("DURATION:");
  8244  000E34  0E9B               	movlw	low STR_22
  8245  000E36  0100               	movlb	0	; () banked
  8246  000E38  6F8E               	movwf	printf@f& (0+255),b
  8247  000E3A  0EFF               	movlw	high STR_22
  8248  000E3C  0100               	movlb	0	; () banked
  8249  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8250  000E40  EC07  F00B         	call	_printf	;wreg free
  8251                           
  8252                           ;UI.c: 175: lcdInst(0b11000000);;
  8253  000E44  0EC0               	movlw	192
  8254  000E46  EC6C  F029         	call	_lcdInst
  8255                           
  8256                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8257  000E4A  0E0E               	movlw	14
  8258  000E4C  0100               	movlb	0	; () banked
  8259  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8260  000E50  0E10               	movlw	16
  8261  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8262  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8263  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8264  000E5C  ECDF  F021         	call	___awmod	;wreg free
  8265  000E60  C080  F0C6         	movff	?___awmod,_UI$2416
  8266  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  8267                           
  8268                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8269  000E68  0E19               	movlw	low STR_23
  8270  000E6A  0100               	movlb	0	; () banked
  8271  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8272  000E6E  0EFF               	movlw	high STR_23
  8273  000E70  0100               	movlb	0	; () banked
  8274  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8275  000E74  0E0E               	movlw	14
  8276  000E76  0100               	movlb	0	; () banked
  8277  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8278  000E7A  0E10               	movlw	16
  8279  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8280  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8281  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8282  000E86  ECDF  F021         	call	___awmod	;wreg free
  8283  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8284  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8285  000E92  0E00               	movlw	0
  8286  000E94  0100               	movlb	0	; () banked
  8287  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8288  000E98  0E3C               	movlw	60
  8289  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8290  000E9C  EC77  F020         	call	___awdiv	;wreg free
  8291  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8292  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8293  000EA8  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  8294  000EAC  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  8295  000EB0  0E00               	movlw	0
  8296  000EB2  0100               	movlb	0	; () banked
  8297  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8298  000EB6  0E3C               	movlw	60
  8299  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8300  000EBA  ECDF  F021         	call	___awmod	;wreg free
  8301  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8302  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8303  000EC6  EC07  F00B         	call	_printf	;wreg free
  8304                           
  8305                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8306  000ECA  0E00               	movlw	0
  8307  000ECC  0100               	movlb	0	; () banked
  8308  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8309  000ED0                     l8718:
  8310                           
  8311                           ; BSR set to: 0
  8312  000ED0  0E63               	movlw	99
  8313  000ED2  0100               	movlb	0	; () banked
  8314  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8315  000ED6  D001               	goto	l8722
  8316  000ED8  D00C               	goto	l8726
  8317  000EDA                     l8722:
  8318                           
  8319                           ; BSR set to: 0
  8320  000EDA  0E68               	movlw	104
  8321  000EDC  0100               	movlb	0	; () banked
  8322  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8323  000EE0  0EE4               	movlw	228
  8324  000EE2                     u9107:
  8325  000EE2  2EE8               	decfsz	wreg,f,c
  8326  000EE4  D7FE               	bra	u9107
  8327  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8328  000EE8  D7FC               	bra	u9107
  8329  000EEA  F000               	nop	
  8330  000EEC  0100               	movlb	0	; () banked
  8331  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8332  000EF0  D7EF               	goto	l8718
  8333  000EF2                     l8726:
  8334                           
  8335                           ; BSR set to: 0
  8336  000EF2  0100               	movlb	0	; () banked
  8337  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8338  000EF6  0100               	movlb	0	; () banked
  8339  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8340  000EFA  B4D8               	btfsc	status,2,c
  8341  000EFC  0012               	return	
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8345                           
  8346                           ; BSR set to: 0
  8347                           
  8348                           ; BSR set to: 0
  8349  000EFE  0E00               	movlw	0
  8350  000F00  0100               	movlb	0	; () banked
  8351  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8352  000F04                     l8732:
  8353                           
  8354                           ; BSR set to: 0
  8355  000F04  0E63               	movlw	99
  8356  000F06  0100               	movlb	0	; () banked
  8357  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8358  000F0A  D001               	goto	l8736
  8359  000F0C  D00C               	goto	l8740
  8360  000F0E                     l8736:
  8361                           
  8362                           ; BSR set to: 0
  8363  000F0E  0E68               	movlw	104
  8364  000F10  0100               	movlb	0	; () banked
  8365  000F12  6FC4               	movwf	??_UI& (0+255),b
  8366  000F14  0EE4               	movlw	228
  8367  000F16                     u9117:
  8368  000F16  2EE8               	decfsz	wreg,f,c
  8369  000F18  D7FE               	bra	u9117
  8370  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8371  000F1C  D7FC               	bra	u9117
  8372  000F1E  F000               	nop	
  8373  000F20  0100               	movlb	0	; () banked
  8374  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8375  000F24  D7EF               	goto	l8732
  8376  000F26                     l8740:
  8377                           
  8378                           ; BSR set to: 0
  8379  000F26  0100               	movlb	0	; () banked
  8380  000F28  51F6               	movf	_logstate& (0+255),w,b
  8381  000F2A  0100               	movlb	0	; () banked
  8382  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8383  000F2E  B4D8               	btfsc	status,2,c
  8384  000F30  0012               	return	
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8388                           
  8389                           ; BSR set to: 0
  8390                           
  8391                           ; BSR set to: 0
  8392  000F32  0E01               	movlw	1
  8393  000F34  EC6C  F029         	call	_lcdInst
  8394  000F38  0E68               	movlw	104
  8395  000F3A  0100               	movlb	0	; () banked
  8396  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8397  000F3E  0EE4               	movlw	228
  8398  000F40                     u9127:
  8399  000F40  2EE8               	decfsz	wreg,f,c
  8400  000F42  D7FE               	bra	u9127
  8401  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8402  000F46  D7FC               	bra	u9127
  8403  000F48  F000               	nop	
  8404                           
  8405                           ;UI.c: 182: lcdInst(0b10000000);;
  8406  000F4A  0E80               	movlw	128
  8407  000F4C  EC6C  F029         	call	_lcdInst
  8408                           
  8409                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8410  000F50  0E3C               	movlw	low STR_24
  8411  000F52  0100               	movlb	0	; () banked
  8412  000F54  6F8E               	movwf	printf@f& (0+255),b
  8413  000F56  0EFD               	movlw	high STR_24
  8414  000F58  0100               	movlb	0	; () banked
  8415  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8416  000F5C  EC07  F00B         	call	_printf	;wreg free
  8417                           
  8418                           ;UI.c: 184: lcdInst(0b11000000);;
  8419  000F60  0EC0               	movlw	192
  8420  000F62  EC6C  F029         	call	_lcdInst
  8421                           
  8422                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8423  000F66  0E19               	movlw	low STR_25
  8424  000F68  0100               	movlb	0	; () banked
  8425  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8426  000F6C  0EFE               	movlw	high STR_25
  8427  000F6E  0100               	movlb	0	; () banked
  8428  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8429  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8430  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8431  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8432  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8433  000F82  EC07  F00B         	call	_printf	;wreg free
  8434                           
  8435                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8436  000F86  0E00               	movlw	0
  8437  000F88  0100               	movlb	0	; () banked
  8438  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8439  000F8C                     l8758:
  8440                           
  8441                           ; BSR set to: 0
  8442  000F8C  0E63               	movlw	99
  8443  000F8E  0100               	movlb	0	; () banked
  8444  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8445  000F92  D001               	goto	l8762
  8446  000F94  D00C               	goto	l8766
  8447  000F96                     l8762:
  8448                           
  8449                           ; BSR set to: 0
  8450  000F96  0E68               	movlw	104
  8451  000F98  0100               	movlb	0	; () banked
  8452  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8453  000F9C  0EE4               	movlw	228
  8454  000F9E                     u9137:
  8455  000F9E  2EE8               	decfsz	wreg,f,c
  8456  000FA0  D7FE               	bra	u9137
  8457  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8458  000FA4  D7FC               	bra	u9137
  8459  000FA6  F000               	nop	
  8460  000FA8  0100               	movlb	0	; () banked
  8461  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8462  000FAC  D7EF               	goto	l8758
  8463  000FAE                     l8766:
  8464                           
  8465                           ; BSR set to: 0
  8466  000FAE  0100               	movlb	0	; () banked
  8467  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8468  000FB2  0100               	movlb	0	; () banked
  8469  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8470  000FB6  B4D8               	btfsc	status,2,c
  8471  000FB8  0012               	return	
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8475                           
  8476                           ; BSR set to: 0
  8477                           
  8478                           ; BSR set to: 0
  8479  000FBA  0E00               	movlw	0
  8480  000FBC  0100               	movlb	0	; () banked
  8481  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8482  000FC0                     l8772:
  8483                           
  8484                           ; BSR set to: 0
  8485  000FC0  0E63               	movlw	99
  8486  000FC2  0100               	movlb	0	; () banked
  8487  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8488  000FC6  D001               	goto	l8776
  8489  000FC8  D00C               	goto	l8780
  8490  000FCA                     l8776:
  8491                           
  8492                           ; BSR set to: 0
  8493  000FCA  0E68               	movlw	104
  8494  000FCC  0100               	movlb	0	; () banked
  8495  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8496  000FD0  0EE4               	movlw	228
  8497  000FD2                     u9147:
  8498  000FD2  2EE8               	decfsz	wreg,f,c
  8499  000FD4  D7FE               	bra	u9147
  8500  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8501  000FD8  D7FC               	bra	u9147
  8502  000FDA  F000               	nop	
  8503  000FDC  0100               	movlb	0	; () banked
  8504  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8505  000FE0  D7EF               	goto	l8772
  8506  000FE2                     l8780:
  8507                           
  8508                           ; BSR set to: 0
  8509  000FE2  0100               	movlb	0	; () banked
  8510  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8511  000FE6  0100               	movlb	0	; () banked
  8512  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8513  000FEA  B4D8               	btfsc	status,2,c
  8514  000FEC  0012               	return	
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8518                           
  8519                           ; BSR set to: 0
  8520                           
  8521                           ; BSR set to: 0
  8522  000FEE  0E01               	movlw	1
  8523  000FF0  EC6C  F029         	call	_lcdInst
  8524  000FF4  0E68               	movlw	104
  8525  000FF6  0100               	movlb	0	; () banked
  8526  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8527  000FFA  0EE4               	movlw	228
  8528  000FFC                     u9157:
  8529  000FFC  2EE8               	decfsz	wreg,f,c
  8530  000FFE  D7FE               	bra	u9157
  8531  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8532  001002  D7FC               	bra	u9157
  8533  001004  F000               	nop	
  8534                           
  8535                           ;UI.c: 191: lcdInst(0b10000000);;
  8536  001006  0E80               	movlw	128
  8537  001008  EC6C  F029         	call	_lcdInst
  8538                           
  8539                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8540  00100C  0E4D               	movlw	low STR_26
  8541  00100E  0100               	movlb	0	; () banked
  8542  001010  6F8E               	movwf	printf@f& (0+255),b
  8543  001012  0EFD               	movlw	high STR_26
  8544  001014  0100               	movlb	0	; () banked
  8545  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8546  001018  EC07  F00B         	call	_printf	;wreg free
  8547                           
  8548                           ;UI.c: 193: lcdInst(0b11000000);;
  8549  00101C  0EC0               	movlw	192
  8550  00101E  EC6C  F029         	call	_lcdInst
  8551                           
  8552                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8553  001022  0E08               	movlw	low STR_27
  8554  001024  0100               	movlb	0	; () banked
  8555  001026  6F8E               	movwf	printf@f& (0+255),b
  8556  001028  0EFE               	movlw	high STR_27
  8557  00102A  0100               	movlb	0	; () banked
  8558  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8559  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8560  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8561  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8562  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8563  00103E  EC07  F00B         	call	_printf	;wreg free
  8564                           
  8565                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8566  001042  0E00               	movlw	0
  8567  001044  0100               	movlb	0	; () banked
  8568  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8569  001048                     l8798:
  8570                           
  8571                           ; BSR set to: 0
  8572  001048  0E63               	movlw	99
  8573  00104A  0100               	movlb	0	; () banked
  8574  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8575  00104E  D001               	goto	l8802
  8576  001050  D00C               	goto	l8806
  8577  001052                     l8802:
  8578                           
  8579                           ; BSR set to: 0
  8580  001052  0E68               	movlw	104
  8581  001054  0100               	movlb	0	; () banked
  8582  001056  6FC4               	movwf	??_UI& (0+255),b
  8583  001058  0EE4               	movlw	228
  8584  00105A                     u9167:
  8585  00105A  2EE8               	decfsz	wreg,f,c
  8586  00105C  D7FE               	bra	u9167
  8587  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8588  001060  D7FC               	bra	u9167
  8589  001062  F000               	nop	
  8590  001064  0100               	movlb	0	; () banked
  8591  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8592  001068  D7EF               	goto	l8798
  8593  00106A                     l8806:
  8594                           
  8595                           ; BSR set to: 0
  8596  00106A  0100               	movlb	0	; () banked
  8597  00106C  51F6               	movf	_logstate& (0+255),w,b
  8598  00106E  0100               	movlb	0	; () banked
  8599  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8600  001072  B4D8               	btfsc	status,2,c
  8601  001074  0012               	return	
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8605                           
  8606                           ; BSR set to: 0
  8607                           
  8608                           ; BSR set to: 0
  8609  001076  0E00               	movlw	0
  8610  001078  0100               	movlb	0	; () banked
  8611  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8612  00107C                     l8812:
  8613                           
  8614                           ; BSR set to: 0
  8615  00107C  0E63               	movlw	99
  8616  00107E  0100               	movlb	0	; () banked
  8617  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8618  001082  D001               	goto	l8816
  8619  001084  D00C               	goto	l8820
  8620  001086                     l8816:
  8621                           
  8622                           ; BSR set to: 0
  8623  001086  0E68               	movlw	104
  8624  001088  0100               	movlb	0	; () banked
  8625  00108A  6FC4               	movwf	??_UI& (0+255),b
  8626  00108C  0EE4               	movlw	228
  8627  00108E                     u9177:
  8628  00108E  2EE8               	decfsz	wreg,f,c
  8629  001090  D7FE               	bra	u9177
  8630  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8631  001094  D7FC               	bra	u9177
  8632  001096  F000               	nop	
  8633  001098  0100               	movlb	0	; () banked
  8634  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8635  00109C  D7EF               	goto	l8812
  8636  00109E                     l8820:
  8637                           
  8638                           ; BSR set to: 0
  8639  00109E  0100               	movlb	0	; () banked
  8640  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8641  0010A2  0100               	movlb	0	; () banked
  8642  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8643  0010A6  B4D8               	btfsc	status,2,c
  8644  0010A8  0012               	return	
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8648                           
  8649                           ; BSR set to: 0
  8650                           
  8651                           ; BSR set to: 0
  8652  0010AA  0E01               	movlw	1
  8653  0010AC  EC6C  F029         	call	_lcdInst
  8654  0010B0  0E68               	movlw	104
  8655  0010B2  0100               	movlb	0	; () banked
  8656  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8657  0010B6  0EE4               	movlw	228
  8658  0010B8                     u9187:
  8659  0010B8  2EE8               	decfsz	wreg,f,c
  8660  0010BA  D7FE               	bra	u9187
  8661  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8662  0010BE  D7FC               	bra	u9187
  8663  0010C0  F000               	nop	
  8664                           
  8665                           ;UI.c: 200: lcdInst(0b10000000);;
  8666  0010C2  0E80               	movlw	128
  8667  0010C4  EC6C  F029         	call	_lcdInst
  8668                           
  8669                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8670  0010C8  0E5E               	movlw	low STR_28
  8671  0010CA  0100               	movlb	0	; () banked
  8672  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8673  0010CE  0EFD               	movlw	high STR_28
  8674  0010D0  0100               	movlb	0	; () banked
  8675  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8676  0010D4  EC07  F00B         	call	_printf	;wreg free
  8677                           
  8678                           ;UI.c: 202: lcdInst(0b11000000);;
  8679  0010D8  0EC0               	movlw	192
  8680  0010DA  EC6C  F029         	call	_lcdInst
  8681                           
  8682                           ;UI.c: 203: printf("%d", log_count_total);
  8683  0010DE  0E16               	movlw	low (STR_27+14)
  8684  0010E0  0100               	movlb	0	; () banked
  8685  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8686  0010E4  0EFE               	movlw	high (STR_27+14)
  8687  0010E6  0100               	movlb	0	; () banked
  8688  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8689  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8690  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8691  0010F2  EC07  F00B         	call	_printf	;wreg free
  8692                           
  8693                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8694  0010F6  0E00               	movlw	0
  8695  0010F8  0100               	movlb	0	; () banked
  8696  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8697  0010FC                     l8838:
  8698                           
  8699                           ; BSR set to: 0
  8700  0010FC  0E63               	movlw	99
  8701  0010FE  0100               	movlb	0	; () banked
  8702  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8703  001102  D001               	goto	l8842
  8704  001104  D00C               	goto	l8846
  8705  001106                     l8842:
  8706                           
  8707                           ; BSR set to: 0
  8708  001106  0E68               	movlw	104
  8709  001108  0100               	movlb	0	; () banked
  8710  00110A  6FC4               	movwf	??_UI& (0+255),b
  8711  00110C  0EE4               	movlw	228
  8712  00110E                     u9197:
  8713  00110E  2EE8               	decfsz	wreg,f,c
  8714  001110  D7FE               	bra	u9197
  8715  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8716  001114  D7FC               	bra	u9197
  8717  001116  F000               	nop	
  8718  001118  0100               	movlb	0	; () banked
  8719  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8720  00111C  D7EF               	goto	l8838
  8721  00111E                     l8846:
  8722                           
  8723                           ; BSR set to: 0
  8724  00111E  0100               	movlb	0	; () banked
  8725  001120  51F6               	movf	_logstate& (0+255),w,b
  8726  001122  0100               	movlb	0	; () banked
  8727  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8728  001126  B4D8               	btfsc	status,2,c
  8729  001128  0012               	return	
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8733                           
  8734                           ; BSR set to: 0
  8735                           
  8736                           ; BSR set to: 0
  8737  00112A  0E00               	movlw	0
  8738  00112C  0100               	movlb	0	; () banked
  8739  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8740  001130                     l8852:
  8741                           
  8742                           ; BSR set to: 0
  8743  001130  0E63               	movlw	99
  8744  001132  0100               	movlb	0	; () banked
  8745  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8746  001136  D001               	goto	l8856
  8747  001138  D00C               	goto	l8860
  8748  00113A                     l8856:
  8749                           
  8750                           ; BSR set to: 0
  8751  00113A  0E68               	movlw	104
  8752  00113C  0100               	movlb	0	; () banked
  8753  00113E  6FC4               	movwf	??_UI& (0+255),b
  8754  001140  0EE4               	movlw	228
  8755  001142                     u9207:
  8756  001142  2EE8               	decfsz	wreg,f,c
  8757  001144  D7FE               	bra	u9207
  8758  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8759  001148  D7FC               	bra	u9207
  8760  00114A  F000               	nop	
  8761  00114C  0100               	movlb	0	; () banked
  8762  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8763  001150  D7EF               	goto	l8852
  8764  001152                     l8860:
  8765                           
  8766                           ; BSR set to: 0
  8767  001152  0100               	movlb	0	; () banked
  8768  001154  51F6               	movf	_logstate& (0+255),w,b
  8769  001156  0100               	movlb	0	; () banked
  8770  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8771  00115A  B4D8               	btfsc	status,2,c
  8772  00115C  0012               	return	
  8773  00115E                     l8864:
  8774  00115E  0100               	movlb	0	; () banked
  8775  001160  51F6               	movf	_logstate& (0+255),w,b
  8776  001162  0100               	movlb	0	; () banked
  8777  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8778  001166  B4D8               	btfsc	status,2,c
  8779  001168  0012               	return	
  8780  00116A  D44C               	goto	l8560
  8781  00116C                     __end_of_UI:
  8782                           	opt stack 0
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           intcon2	equ	0xFF1
  8791                           intcon3	equ	0xFF0
  8792                           postinc0	equ	0xFEE
  8793                           wreg	equ	0xFE8
  8794                           postdec1	equ	0xFE5
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _printRTC *****************
  8804 ;; Defined at:
  8805 ;;		line 63 in file "RTC.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  i               2   66[BANK0 ] int 
  8810 ;;  INT_time       14   46[BANK0 ] int [7]
  8811 ;;  month           4   62[BANK0 ] unsigned char [4]
  8812 ;;  RTC_month       2   60[BANK0 ] int 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      void 
  8815 ;; Registers used:
  8816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:       25 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:   10
  8829 ;; This function calls:
  8830 ;;		_getRTC
  8831 ;;		_lcdInst
  8832 ;;		_printf
  8833 ;;		_strcpy
  8834 ;; This function is called by:
  8835 ;;		_UI
  8836 ;;		_change_state_to_menu_start
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text24
  8841  002436                     __ptext24:
  8842                           	opt stack 0
  8843  002436                     _printRTC:
  8844                           	opt stack 18
  8845                           
  8846                           ;RTC.c: 64: getRTC();
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;incstack = 0
  8850  002436  EC76  F022         	call	_getRTC	;wreg free
  8851                           
  8852                           ;RTC.c: 65: char month[] = "MMM";
  8853  00243A  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8854  00243E  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8855  002442  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8856  002446  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8857                           
  8858                           ;RTC.c: 66: int INT_time[7];
  8859                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8860  00244A  0E00               	movlw	0
  8861  00244C  0100               	movlb	0	; () banked
  8862  00244E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8863  002450  0E00               	movlw	0
  8864  002452  6FC2               	movwf	printRTC@i& (0+255),b
  8865                           
  8866                           ; BSR set to: 0
  8867  002454  0100               	movlb	0	; () banked
  8868  002456  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8869  002458  D008               	goto	l6642
  8870  00245A  0100               	movlb	0	; () banked
  8871  00245C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8872  00245E  E146               	bnz	l606
  8873  002460  0E07               	movlw	7
  8874  002462  0100               	movlb	0	; () banked
  8875  002464  5DC2               	subwf	printRTC@i& (0+255),w,b
  8876  002466  B0D8               	btfsc	status,0,c
  8877  002468  D041               	goto	l606
  8878  00246A                     l6642:
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8882  00246A  0E1C               	movlw	low _time
  8883  00246C  0100               	movlb	0	; () banked
  8884  00246E  25C2               	addwf	printRTC@i& (0+255),w,b
  8885  002470  6ED9               	movwf	fsr2l,c
  8886  002472  0E01               	movlw	high _time
  8887  002474  0100               	movlb	0	; () banked
  8888  002476  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8889  002478  6EDA               	movwf	fsr2h,c
  8890  00247A  50DF               	movf	indf2,w,c
  8891  00247C  0100               	movlb	0	; () banked
  8892  00247E  6FAB               	movwf	??_printRTC& (0+255),b
  8893  002480  0100               	movlb	0	; () banked
  8894  002482  3BAB               	swapf	??_printRTC& (0+255),f,b
  8895  002484  0E0F               	movlw	15
  8896  002486  17AB               	andwf	??_printRTC& (0+255),f,b
  8897  002488  0E0F               	movlw	15
  8898  00248A  0100               	movlb	0	; () banked
  8899  00248C  17AB               	andwf	??_printRTC& (0+255),f,b
  8900  00248E  0100               	movlb	0	; () banked
  8901  002490  51AB               	movf	??_printRTC& (0+255),w,b
  8902  002492  0D0A               	mullw	10
  8903  002494  0E1C               	movlw	low _time
  8904  002496  0100               	movlb	0	; () banked
  8905  002498  25C2               	addwf	printRTC@i& (0+255),w,b
  8906  00249A  6ED9               	movwf	fsr2l,c
  8907  00249C  0E01               	movlw	high _time
  8908  00249E  0100               	movlb	0	; () banked
  8909  0024A0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8910  0024A2  6EDA               	movwf	fsr2h,c
  8911  0024A4  50DF               	movf	indf2,w,c
  8912  0024A6  0B0F               	andlw	15
  8913  0024A8  0100               	movlb	0	; () banked
  8914  0024AA  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8915  0024AC  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8916  0024AE  50F3               	movf	prodl,w,c
  8917  0024B0  0100               	movlb	0	; () banked
  8918  0024B2  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8919  0024B4  50F4               	movf	prodh,w,c
  8920  0024B6  0100               	movlb	0	; () banked
  8921  0024B8  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8922  0024BA  90D8               	bcf	status,0,c
  8923  0024BC  0100               	movlb	0	; () banked
  8924  0024BE  35C2               	rlcf	printRTC@i& (0+255),w,b
  8925  0024C0  6ED9               	movwf	fsr2l,c
  8926  0024C2  0100               	movlb	0	; () banked
  8927  0024C4  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8928  0024C6  6EDA               	movwf	fsr2h,c
  8929  0024C8  0EAE               	movlw	low printRTC@INT_time
  8930  0024CA  26D9               	addwf	fsr2l,f,c
  8931  0024CC  0E00               	movlw	high printRTC@INT_time
  8932  0024CE  22DA               	addwfc	fsr2h,f,c
  8933  0024D0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8934  0024D4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8935                           
  8936                           ; BSR set to: 0
  8937  0024D8  0100               	movlb	0	; () banked
  8938  0024DA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8939  0024DC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8940                           
  8941                           ; BSR set to: 0
  8942  0024DE  0100               	movlb	0	; () banked
  8943  0024E0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8944  0024E2  D7C3               	goto	l6642
  8945  0024E4  0100               	movlb	0	; () banked
  8946  0024E6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8947  0024E8  E101               	bnz	u5240
  8948  0024EA  D7BA               	goto	L8
  8949  0024EC                     u5240:
  8950  0024EC                     l606:
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;RTC.c: 69: }
  8954                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8955  0024EC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8956  0024F0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8957                           
  8958                           ;RTC.c: 71: switch(RTC_month){
  8959  0024F4  D0B4               	goto	l6674
  8960  0024F6                     l6648:
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;RTC.c: 73: strcpy(month, "JAN");
  8964  0024F6  0EBE               	movlw	low printRTC@month
  8965  0024F8  0100               	movlb	0	; () banked
  8966  0024FA  6F80               	movwf	strcpy@to& (0+255),b
  8967  0024FC  0E00               	movlw	high printRTC@month
  8968  0024FE  0100               	movlb	0	; () banked
  8969  002500  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8970  002502  0EDB               	movlw	low STR_8
  8971  002504  0100               	movlb	0	; () banked
  8972  002506  6F82               	movwf	strcpy@from& (0+255),b
  8973  002508  0EFF               	movlw	high STR_8
  8974  00250A  0100               	movlb	0	; () banked
  8975  00250C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8976  00250E  ECC7  F026         	call	_strcpy	;wreg free
  8977                           
  8978                           ;RTC.c: 74: break;
  8979  002512  D0D4               	goto	l6676
  8980  002514                     l6650:
  8981                           
  8982                           ;RTC.c: 76: strcpy(month, "FEB");
  8983  002514  0EBE               	movlw	low printRTC@month
  8984  002516  0100               	movlb	0	; () banked
  8985  002518  6F80               	movwf	strcpy@to& (0+255),b
  8986  00251A  0E00               	movlw	high printRTC@month
  8987  00251C  0100               	movlb	0	; () banked
  8988  00251E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8989  002520  0ECB               	movlw	low STR_9
  8990  002522  0100               	movlb	0	; () banked
  8991  002524  6F82               	movwf	strcpy@from& (0+255),b
  8992  002526  0EFF               	movlw	high STR_9
  8993  002528  0100               	movlb	0	; () banked
  8994  00252A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8995  00252C  ECC7  F026         	call	_strcpy	;wreg free
  8996                           
  8997                           ;RTC.c: 77: break;
  8998  002530  D0C5               	goto	l6676
  8999  002532                     l6652:
  9000                           
  9001                           ;RTC.c: 79: strcpy(month, "MAR");
  9002  002532  0EBE               	movlw	low printRTC@month
  9003  002534  0100               	movlb	0	; () banked
  9004  002536  6F80               	movwf	strcpy@to& (0+255),b
  9005  002538  0E00               	movlw	high printRTC@month
  9006  00253A  0100               	movlb	0	; () banked
  9007  00253C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9008  00253E  0EE7               	movlw	low STR_10
  9009  002540  0100               	movlb	0	; () banked
  9010  002542  6F82               	movwf	strcpy@from& (0+255),b
  9011  002544  0EFF               	movlw	high STR_10
  9012  002546  0100               	movlb	0	; () banked
  9013  002548  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9014  00254A  ECC7  F026         	call	_strcpy	;wreg free
  9015                           
  9016                           ;RTC.c: 80: break;
  9017  00254E  D0B6               	goto	l6676
  9018  002550                     l6654:
  9019                           
  9020                           ;RTC.c: 82: strcpy(month, "APR");
  9021  002550  0EBE               	movlw	low printRTC@month
  9022  002552  0100               	movlb	0	; () banked
  9023  002554  6F80               	movwf	strcpy@to& (0+255),b
  9024  002556  0E00               	movlw	high printRTC@month
  9025  002558  0100               	movlb	0	; () banked
  9026  00255A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9027  00255C  0EEB               	movlw	low STR_11
  9028  00255E  0100               	movlb	0	; () banked
  9029  002560  6F82               	movwf	strcpy@from& (0+255),b
  9030  002562  0EFF               	movlw	high STR_11
  9031  002564  0100               	movlb	0	; () banked
  9032  002566  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9033  002568  ECC7  F026         	call	_strcpy	;wreg free
  9034                           
  9035                           ;RTC.c: 83: break;
  9036  00256C  D0A7               	goto	l6676
  9037  00256E                     l6656:
  9038                           
  9039                           ;RTC.c: 85: strcpy(month, "MAY");
  9040  00256E  0EBE               	movlw	low printRTC@month
  9041  002570  0100               	movlb	0	; () banked
  9042  002572  6F80               	movwf	strcpy@to& (0+255),b
  9043  002574  0E00               	movlw	high printRTC@month
  9044  002576  0100               	movlb	0	; () banked
  9045  002578  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9046  00257A  0EFB               	movlw	low STR_12
  9047  00257C  0100               	movlb	0	; () banked
  9048  00257E  6F82               	movwf	strcpy@from& (0+255),b
  9049  002580  0EFF               	movlw	high STR_12
  9050  002582  0100               	movlb	0	; () banked
  9051  002584  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9052  002586  ECC7  F026         	call	_strcpy	;wreg free
  9053                           
  9054                           ;RTC.c: 86: break;
  9055  00258A  D098               	goto	l6676
  9056  00258C                     l6658:
  9057                           
  9058                           ;RTC.c: 88: strcpy(month, "JUN");
  9059  00258C  0EBE               	movlw	low printRTC@month
  9060  00258E  0100               	movlb	0	; () banked
  9061  002590  6F80               	movwf	strcpy@to& (0+255),b
  9062  002592  0E00               	movlw	high printRTC@month
  9063  002594  0100               	movlb	0	; () banked
  9064  002596  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9065  002598  0EDF               	movlw	low STR_13
  9066  00259A  0100               	movlb	0	; () banked
  9067  00259C  6F82               	movwf	strcpy@from& (0+255),b
  9068  00259E  0EFF               	movlw	high STR_13
  9069  0025A0  0100               	movlb	0	; () banked
  9070  0025A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9071  0025A4  ECC7  F026         	call	_strcpy	;wreg free
  9072                           
  9073                           ;RTC.c: 89: break;
  9074  0025A8  D089               	goto	l6676
  9075  0025AA                     l6660:
  9076                           
  9077                           ;RTC.c: 91: strcpy(month, "JUL");
  9078  0025AA  0EBE               	movlw	low printRTC@month
  9079  0025AC  0100               	movlb	0	; () banked
  9080  0025AE  6F80               	movwf	strcpy@to& (0+255),b
  9081  0025B0  0E00               	movlw	high printRTC@month
  9082  0025B2  0100               	movlb	0	; () banked
  9083  0025B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9084  0025B6  0ED7               	movlw	low STR_14
  9085  0025B8  0100               	movlb	0	; () banked
  9086  0025BA  6F82               	movwf	strcpy@from& (0+255),b
  9087  0025BC  0EFF               	movlw	high STR_14
  9088  0025BE  0100               	movlb	0	; () banked
  9089  0025C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9090  0025C2  ECC7  F026         	call	_strcpy	;wreg free
  9091                           
  9092                           ;RTC.c: 92: break;
  9093  0025C6  D07A               	goto	l6676
  9094  0025C8                     l6662:
  9095                           
  9096                           ;RTC.c: 94: strcpy(month, "AUG");
  9097  0025C8  0EBE               	movlw	low printRTC@month
  9098  0025CA  0100               	movlb	0	; () banked
  9099  0025CC  6F80               	movwf	strcpy@to& (0+255),b
  9100  0025CE  0E00               	movlw	high printRTC@month
  9101  0025D0  0100               	movlb	0	; () banked
  9102  0025D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9103  0025D4  0ED3               	movlw	low STR_15
  9104  0025D6  0100               	movlb	0	; () banked
  9105  0025D8  6F82               	movwf	strcpy@from& (0+255),b
  9106  0025DA  0EFF               	movlw	high STR_15
  9107  0025DC  0100               	movlb	0	; () banked
  9108  0025DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9109  0025E0  ECC7  F026         	call	_strcpy	;wreg free
  9110                           
  9111                           ;RTC.c: 95: break;
  9112  0025E4  D06B               	goto	l6676
  9113  0025E6                     l6664:
  9114                           
  9115                           ;RTC.c: 97: strcpy(month, "SEP");
  9116  0025E6  0EBE               	movlw	low printRTC@month
  9117  0025E8  0100               	movlb	0	; () banked
  9118  0025EA  6F80               	movwf	strcpy@to& (0+255),b
  9119  0025EC  0E00               	movlw	high printRTC@month
  9120  0025EE  0100               	movlb	0	; () banked
  9121  0025F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9122  0025F2  0EE3               	movlw	low STR_16
  9123  0025F4  0100               	movlb	0	; () banked
  9124  0025F6  6F82               	movwf	strcpy@from& (0+255),b
  9125  0025F8  0EFF               	movlw	high STR_16
  9126  0025FA  0100               	movlb	0	; () banked
  9127  0025FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9128  0025FE  ECC7  F026         	call	_strcpy	;wreg free
  9129                           
  9130                           ;RTC.c: 98: break;
  9131  002602  D05C               	goto	l6676
  9132  002604                     l6666:
  9133                           
  9134                           ;RTC.c: 100: strcpy(month, "OCT");
  9135  002604  0EBE               	movlw	low printRTC@month
  9136  002606  0100               	movlb	0	; () banked
  9137  002608  6F80               	movwf	strcpy@to& (0+255),b
  9138  00260A  0E00               	movlw	high printRTC@month
  9139  00260C  0100               	movlb	0	; () banked
  9140  00260E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9141  002610  0EF3               	movlw	low STR_17
  9142  002612  0100               	movlb	0	; () banked
  9143  002614  6F82               	movwf	strcpy@from& (0+255),b
  9144  002616  0EFF               	movlw	high STR_17
  9145  002618  0100               	movlb	0	; () banked
  9146  00261A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9147  00261C  ECC7  F026         	call	_strcpy	;wreg free
  9148                           
  9149                           ;RTC.c: 101: break;
  9150  002620  D04D               	goto	l6676
  9151  002622                     l6668:
  9152                           
  9153                           ;RTC.c: 103: strcpy(month, "NOV");
  9154  002622  0EBE               	movlw	low printRTC@month
  9155  002624  0100               	movlb	0	; () banked
  9156  002626  6F80               	movwf	strcpy@to& (0+255),b
  9157  002628  0E00               	movlw	high printRTC@month
  9158  00262A  0100               	movlb	0	; () banked
  9159  00262C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9160  00262E  0EF7               	movlw	low STR_18
  9161  002630  0100               	movlb	0	; () banked
  9162  002632  6F82               	movwf	strcpy@from& (0+255),b
  9163  002634  0EFF               	movlw	high STR_18
  9164  002636  0100               	movlb	0	; () banked
  9165  002638  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9166  00263A  ECC7  F026         	call	_strcpy	;wreg free
  9167                           
  9168                           ;RTC.c: 104: break;
  9169  00263E  D03E               	goto	l6676
  9170  002640                     l6670:
  9171                           
  9172                           ;RTC.c: 106: strcpy(month, "DEC");
  9173  002640  0EBE               	movlw	low printRTC@month
  9174  002642  0100               	movlb	0	; () banked
  9175  002644  6F80               	movwf	strcpy@to& (0+255),b
  9176  002646  0E00               	movlw	high printRTC@month
  9177  002648  0100               	movlb	0	; () banked
  9178  00264A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9179  00264C  0ECF               	movlw	low STR_19
  9180  00264E  0100               	movlb	0	; () banked
  9181  002650  6F82               	movwf	strcpy@from& (0+255),b
  9182  002652  0EFF               	movlw	high STR_19
  9183  002654  0100               	movlb	0	; () banked
  9184  002656  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9185  002658  ECC7  F026         	call	_strcpy	;wreg free
  9186                           
  9187                           ;RTC.c: 108: }
  9188                           
  9189                           ;RTC.c: 107: break;
  9190  00265C  D02F               	goto	l6676
  9191  00265E                     l6674:
  9192  00265E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9193  002662  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9194                           
  9195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9196                           ; Switch size 1, requested type "space"
  9197                           ; Number of cases is 1, Range of values is 0 to 0
  9198                           ; switch strategies available:
  9199                           ; Name         Instructions Cycles
  9200                           ; simple_byte            4     3 (average)
  9201                           ;	Chosen strategy is simple_byte
  9202  002666  0100               	movlb	0	; () banked
  9203  002668  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9204  00266A  0A00               	xorlw	0	; case 0
  9205  00266C  A4D8               	btfss	status,2,c
  9206  00266E  D026               	goto	l6676
  9207                           
  9208                           ; BSR set to: 0
  9209                           ; Switch size 1, requested type "space"
  9210                           ; Number of cases is 12, Range of values is 1 to 12
  9211                           ; switch strategies available:
  9212                           ; Name         Instructions Cycles
  9213                           ; simple_byte           37    19 (average)
  9214                           ;	Chosen strategy is simple_byte
  9215  002670  0100               	movlb	0	; () banked
  9216  002672  51AB               	movf	??_printRTC& (0+255),w,b
  9217  002674  0A01               	xorlw	1	; case 1
  9218  002676  B4D8               	btfsc	status,2,c
  9219  002678  D73E               	goto	l6648
  9220  00267A  0A03               	xorlw	3	; case 2
  9221  00267C  B4D8               	btfsc	status,2,c
  9222  00267E  D74A               	goto	l6650
  9223  002680  0A01               	xorlw	1	; case 3
  9224  002682  B4D8               	btfsc	status,2,c
  9225  002684  D756               	goto	l6652
  9226  002686  0A07               	xorlw	7	; case 4
  9227  002688  B4D8               	btfsc	status,2,c
  9228  00268A  D762               	goto	l6654
  9229  00268C  0A01               	xorlw	1	; case 5
  9230  00268E  B4D8               	btfsc	status,2,c
  9231  002690  D76E               	goto	l6656
  9232  002692  0A03               	xorlw	3	; case 6
  9233  002694  B4D8               	btfsc	status,2,c
  9234  002696  D77A               	goto	l6658
  9235  002698  0A01               	xorlw	1	; case 7
  9236  00269A  B4D8               	btfsc	status,2,c
  9237  00269C  D786               	goto	l6660
  9238  00269E  0A0F               	xorlw	15	; case 8
  9239  0026A0  B4D8               	btfsc	status,2,c
  9240  0026A2  D792               	goto	l6662
  9241  0026A4  0A01               	xorlw	1	; case 9
  9242  0026A6  B4D8               	btfsc	status,2,c
  9243  0026A8  D79E               	goto	l6664
  9244  0026AA  0A03               	xorlw	3	; case 10
  9245  0026AC  B4D8               	btfsc	status,2,c
  9246  0026AE  D7AA               	goto	l6666
  9247  0026B0  0A01               	xorlw	1	; case 11
  9248  0026B2  B4D8               	btfsc	status,2,c
  9249  0026B4  D7B6               	goto	l6668
  9250  0026B6  0A07               	xorlw	7	; case 12
  9251  0026B8  B4D8               	btfsc	status,2,c
  9252  0026BA  D7C2               	goto	l6670
  9253  0026BC                     l6676:
  9254                           
  9255                           ;RTC.c: 109: lcdInst(0b10000000);;
  9256  0026BC  0E80               	movlw	128
  9257  0026BE  EC6C  F029         	call	_lcdInst
  9258                           
  9259                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9260  0026C2  0E0A               	movlw	low STR_21
  9261  0026C4  0100               	movlb	0	; () banked
  9262  0026C6  6F8E               	movwf	printf@f& (0+255),b
  9263  0026C8  0EFB               	movlw	high STR_21
  9264  0026CA  0100               	movlb	0	; () banked
  9265  0026CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9266  0026CE  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9267  0026D2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9268  0026D6  0EBE               	movlw	low printRTC@month
  9269  0026D8  0100               	movlb	0	; () banked
  9270  0026DA  6F92               	movwf	(?_printf+4)& (0+255),b
  9271  0026DC  0E00               	movlw	high printRTC@month
  9272  0026DE  0100               	movlb	0	; () banked
  9273  0026E0  6F93               	movwf	(?_printf+5)& (0+255),b
  9274  0026E2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9275  0026E6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9276  0026EA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9277  0026EE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9278  0026F2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9279  0026F6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9280  0026FA  EC07  F00B         	call	_printf	;wreg free
  9281  0026FE  0012               	return		;funcret
  9282  002700                     __end_of_printRTC:
  9283                           	opt stack 0
  9284                           tblptru	equ	0xFF8
  9285                           tblptrh	equ	0xFF7
  9286                           tblptrl	equ	0xFF6
  9287                           tablat	equ	0xFF5
  9288                           prodh	equ	0xFF4
  9289                           prodl	equ	0xFF3
  9290                           intcon	equ	0xFF2
  9291                           intcon2	equ	0xFF1
  9292                           intcon3	equ	0xFF0
  9293                           postinc0	equ	0xFEE
  9294                           wreg	equ	0xFE8
  9295                           postdec1	equ	0xFE5
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function _strcpy *****************
  9305 ;; Defined at:
  9306 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9309 ;;		 -> printRTC@month(4), UI@month(4), 
  9310 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9311 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9312 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9313 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9314 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9315 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9316 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9317 ;;		 -> STR_8(4), 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9320 ;;		 -> printRTC@month(4), UI@month(4), 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  2    0[BANK0 ] PTR unsigned char 
  9323 ;; Registers used:
  9324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9330 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;Total ram usage:        6 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    7
  9337 ;; This function calls:
  9338 ;;		Nothing
  9339 ;; This function is called by:
  9340 ;;		_UI
  9341 ;;		_printRTC
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text25
  9346  004D8E                     __ptext25:
  9347                           	opt stack 0
  9348  004D8E                     _strcpy:
  9349                           	opt stack 20
  9350                           
  9351                           ;incstack = 0
  9352  004D8E  C080  F084         	movff	strcpy@to,strcpy@cp
  9353  004D92  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9354  004D96  D006               	goto	l6382
  9355  004D98                     l6380:
  9356  004D98  0100               	movlb	0	; () banked
  9357  004D9A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9358  004D9C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9359  004D9E  0100               	movlb	0	; () banked
  9360  004DA0  4B82               	infsnz	strcpy@from& (0+255),f,b
  9361  004DA2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9362  004DA4                     l6382:
  9363  004DA4  C082  FFF6         	movff	strcpy@from,tblptrl
  9364  004DA8  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9365  004DAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9366  004DAC  6AF8               	clrf	tblptru,c
  9367  004DAE                     	endif
  9368  004DAE                     	if	0	;tblptru may be non-zero
  9369  004DAE                     	endif
  9370  004DAE  C084  FFD9         	movff	strcpy@cp,fsr2l
  9371  004DB2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9372  004DB6  0008               	tblrd		*
  9373  004DB8  CFF5 FFDF          	movff	tablat,indf2
  9374  004DBC  50DF               	movf	indf2,w,c
  9375  004DBE  B4D8               	btfsc	status,2,c
  9376  004DC0  0012               	return	
  9377  004DC2  D7EA               	goto	l6380
  9378  004DC4                     __end_of_strcpy:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           intcon2	equ	0xFF1
  9388                           intcon3	equ	0xFF0
  9389                           postinc0	equ	0xFEE
  9390                           wreg	equ	0xFE8
  9391                           postdec1	equ	0xFE5
  9392                           fsr1l	equ	0xFE1
  9393                           indf2	equ	0xFDF
  9394                           postinc2	equ	0xFDE
  9395                           postdec2	equ	0xFDD
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _getRTC *****************
  9401 ;; Defined at:
  9402 ;;		line 44 in file "RTC.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  i               2    3[BANK0 ] int 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  1    wreg      void 
  9409 ;; Registers used:
  9410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;Total ram usage:        2 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    9
  9423 ;; This function calls:
  9424 ;;		_I2C_Master_Read
  9425 ;;		_I2C_Master_Start
  9426 ;;		_I2C_Master_Stop
  9427 ;;		_I2C_Master_Write
  9428 ;; This function is called by:
  9429 ;;		_printRTC
  9430 ;;		_initSortTimer
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text26
  9435  0044EC                     __ptext26:
  9436                           	opt stack 0
  9437  0044EC                     _getRTC:
  9438                           	opt stack 18
  9439                           
  9440                           ;RTC.c: 48: I2C_Master_Start();
  9441                           
  9442                           ;incstack = 0
  9443  0044EC  EC92  F029         	call	_I2C_Master_Start	;wreg free
  9444                           
  9445                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9446  0044F0  0E00               	movlw	0
  9447  0044F2  0100               	movlb	0	; () banked
  9448  0044F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9449  0044F6  0ED0               	movlw	208
  9450  0044F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9451  0044FA  EC80  F029         	call	_I2C_Master_Write	;wreg free
  9452                           
  9453                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9454  0044FE  0E00               	movlw	0
  9455  004500  0100               	movlb	0	; () banked
  9456  004502  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9457  004504  0E00               	movlw	0
  9458  004506  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9459  004508  EC80  F029         	call	_I2C_Master_Write	;wreg free
  9460                           
  9461                           ;RTC.c: 51: I2C_Master_Stop();
  9462  00450C  EC8E  F029         	call	_I2C_Master_Stop	;wreg free
  9463                           
  9464                           ;RTC.c: 54: I2C_Master_Start();
  9465  004510  EC92  F029         	call	_I2C_Master_Start	;wreg free
  9466                           
  9467                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9468  004514  0E00               	movlw	0
  9469  004516  0100               	movlb	0	; () banked
  9470  004518  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9471  00451A  0ED1               	movlw	209
  9472  00451C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9473  00451E  EC80  F029         	call	_I2C_Master_Write	;wreg free
  9474                           
  9475                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9476  004522  0E00               	movlw	0
  9477  004524  0100               	movlb	0	; () banked
  9478  004526  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9479  004528  0E00               	movlw	0
  9480  00452A  6F83               	movwf	getRTC@i& (0+255),b
  9481  00452C                     l6388:
  9482                           
  9483                           ; BSR set to: 0
  9484  00452C  0100               	movlb	0	; () banked
  9485  00452E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9486  004530  D008               	goto	l6392
  9487  004532  0100               	movlb	0	; () banked
  9488  004534  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9489  004536  E115               	bnz	l6398
  9490  004538  0E06               	movlw	6
  9491  00453A  0100               	movlb	0	; () banked
  9492  00453C  5D83               	subwf	getRTC@i& (0+255),w,b
  9493  00453E  B0D8               	btfsc	status,0,c
  9494  004540  D010               	goto	l6398
  9495  004542                     l6392:
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9499  004542  0E1C               	movlw	low _time
  9500  004544  0100               	movlb	0	; () banked
  9501  004546  2583               	addwf	getRTC@i& (0+255),w,b
  9502  004548  6ED9               	movwf	fsr2l,c
  9503  00454A  0E01               	movlw	high _time
  9504  00454C  0100               	movlb	0	; () banked
  9505  00454E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9506  004550  6EDA               	movwf	fsr2h,c
  9507  004552  0E01               	movlw	1
  9508  004554  EC1F  F028         	call	_I2C_Master_Read
  9509  004558  6EDF               	movwf	indf2,c
  9510  00455A  0100               	movlb	0	; () banked
  9511  00455C  4B83               	infsnz	getRTC@i& (0+255),f,b
  9512  00455E  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9513  004560  D7E5               	goto	l6388
  9514  004562                     l6398:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;RTC.c: 58: }
  9518                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9519  004562  0E00               	movlw	0
  9520  004564  EC1F  F028         	call	_I2C_Master_Read
  9521  004568  0101               	movlb	1	; () banked
  9522  00456A  6F22               	movwf	(_time+6)& (0+255),b
  9523                           
  9524                           ;RTC.c: 60: I2C_Master_Stop();
  9525  00456C  EC8E  F029         	call	_I2C_Master_Stop	;wreg free
  9526  004570  0012               	return		;funcret
  9527  004572                     __end_of_getRTC:
  9528                           	opt stack 0
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           intcon2	equ	0xFF1
  9537                           intcon3	equ	0xFF0
  9538                           postinc0	equ	0xFEE
  9539                           wreg	equ	0xFE8
  9540                           postdec1	equ	0xFE5
  9541                           fsr1l	equ	0xFE1
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8
  9548                           
  9549 ;; *************** function _I2C_Master_Write *****************
  9550 ;; Defined at:
  9551 ;;		line 49 in file "I2C.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  d               2    1[BANK0 ] unsigned int 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9565 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;Total ram usage:        2 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    8
  9572 ;; This function calls:
  9573 ;;		_I2C_Master_Wait
  9574 ;; This function is called by:
  9575 ;;		_loadRTC
  9576 ;;		_getRTC
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text27
  9581  005300                     __ptext27:
  9582                           	opt stack 0
  9583  005300                     _I2C_Master_Write:
  9584                           	opt stack 18
  9585                           
  9586                           ;I2C.c: 51: I2C_Master_Wait();
  9587                           
  9588                           ;incstack = 0
  9589  005300  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9590                           
  9591                           ;I2C.c: 52: SSPBUF = d;
  9592  005304  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9593  005308  0012               	return		;funcret
  9594  00530A                     __end_of_I2C_Master_Write:
  9595                           	opt stack 0
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           intcon2	equ	0xFF1
  9604                           intcon3	equ	0xFF0
  9605                           postinc0	equ	0xFEE
  9606                           wreg	equ	0xFE8
  9607                           postdec1	equ	0xFE5
  9608                           fsr1l	equ	0xFE1
  9609                           indf2	equ	0xFDF
  9610                           postinc2	equ	0xFDE
  9611                           postdec2	equ	0xFDD
  9612                           fsr2h	equ	0xFDA
  9613                           fsr2l	equ	0xFD9
  9614                           status	equ	0xFD8
  9615                           
  9616 ;; *************** function _I2C_Master_Stop *****************
  9617 ;; Defined at:
  9618 ;;		line 43 in file "I2C.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      void 
  9625 ;; Registers used:
  9626 ;;		wreg, status,2, status,0, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    8
  9639 ;; This function calls:
  9640 ;;		_I2C_Master_Wait
  9641 ;; This function is called by:
  9642 ;;		_loadRTC
  9643 ;;		_getRTC
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           	psect	text28
  9648  00531C                     __ptext28:
  9649                           	opt stack 0
  9650  00531C                     _I2C_Master_Stop:
  9651                           	opt stack 18
  9652                           
  9653                           ;I2C.c: 45: I2C_Master_Wait();
  9654                           
  9655                           ;incstack = 0
  9656  00531C  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9657                           
  9658                           ;I2C.c: 46: PEN = 1;
  9659  005320  84C5               	bsf	4037,2,c	;volatile
  9660  005322  0012               	return		;funcret
  9661  005324                     __end_of_I2C_Master_Stop:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon	equ	0xFF2
  9670                           intcon2	equ	0xFF1
  9671                           intcon3	equ	0xFF0
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _I2C_Master_Start *****************
  9684 ;; Defined at:
  9685 ;;		line 31 in file "I2C.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg, status,2, status,0, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    8
  9706 ;; This function calls:
  9707 ;;		_I2C_Master_Wait
  9708 ;; This function is called by:
  9709 ;;		_loadRTC
  9710 ;;		_getRTC
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           	psect	text29
  9715  005324                     __ptext29:
  9716                           	opt stack 0
  9717  005324                     _I2C_Master_Start:
  9718                           	opt stack 18
  9719                           
  9720                           ;I2C.c: 33: I2C_Master_Wait();
  9721                           
  9722                           ;incstack = 0
  9723  005324  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9724                           
  9725                           ;I2C.c: 34: SEN = 1;
  9726  005328  80C5               	bsf	4037,0,c	;volatile
  9727  00532A  0012               	return		;funcret
  9728  00532C                     __end_of_I2C_Master_Start:
  9729                           	opt stack 0
  9730                           tblptru	equ	0xFF8
  9731                           tblptrh	equ	0xFF7
  9732                           tblptrl	equ	0xFF6
  9733                           tablat	equ	0xFF5
  9734                           prodh	equ	0xFF4
  9735                           prodl	equ	0xFF3
  9736                           intcon	equ	0xFF2
  9737                           intcon2	equ	0xFF1
  9738                           intcon3	equ	0xFF0
  9739                           postinc0	equ	0xFEE
  9740                           wreg	equ	0xFE8
  9741                           postdec1	equ	0xFE5
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           postdec2	equ	0xFDD
  9746                           fsr2h	equ	0xFDA
  9747                           fsr2l	equ	0xFD9
  9748                           status	equ	0xFD8
  9749                           
  9750 ;; *************** function _I2C_Master_Read *****************
  9751 ;; Defined at:
  9752 ;;		line 55 in file "I2C.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  a               1    wreg     unsigned char 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  a               1    1[BANK0 ] unsigned char 
  9757 ;;  temp            1    2[BANK0 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  1    wreg      unsigned char 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        2 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    8
  9774 ;; This function calls:
  9775 ;;		_I2C_Master_Wait
  9776 ;; This function is called by:
  9777 ;;		_getRTC
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text30
  9782  00503E                     __ptext30:
  9783                           	opt stack 0
  9784  00503E                     _I2C_Master_Read:
  9785                           	opt stack 18
  9786                           
  9787                           ;incstack = 0
  9788                           ;I2C_Master_Read@a stored from wreg
  9789  00503E  0100               	movlb	0	; () banked
  9790  005040  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9791                           
  9792                           ;I2C.c: 57: unsigned char temp;
  9793                           ;I2C.c: 58: I2C_Master_Wait();
  9794  005042  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9795                           
  9796                           ;I2C.c: 59: RCEN = 1;
  9797  005046  86C5               	bsf	4037,3,c	;volatile
  9798                           
  9799                           ;I2C.c: 60: I2C_Master_Wait();
  9800  005048  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9801                           
  9802                           ;I2C.c: 61: temp = SSPBUF;
  9803  00504C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9804                           
  9805                           ;I2C.c: 62: I2C_Master_Wait();
  9806  005050  EC51  F029         	call	_I2C_Master_Wait	;wreg free
  9807                           
  9808                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9809  005054  0100               	movlb	0	; () banked
  9810  005056  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9811  005058  0100               	movlb	0	; () banked
  9812  00505A  A4D8               	btfss	status,2,c
  9813  00505C  D002               	goto	u4330
  9814  00505E  8AC5               	bsf	4037,5,c	;volatile
  9815  005060  D001               	goto	l6076
  9816  005062                     u4330:
  9817  005062  9AC5               	bcf	4037,5,c	;volatile
  9818  005064                     l6076:
  9819                           
  9820                           ;I2C.c: 64: ACKEN = 1;
  9821  005064  88C5               	bsf	4037,4,c	;volatile
  9822                           
  9823                           ;I2C.c: 65: return temp;
  9824  005066  0100               	movlb	0	; () banked
  9825  005068  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9826  00506A  0012               	return	
  9827  00506C                     __end_of_I2C_Master_Read:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           intcon	equ	0xFF2
  9836                           intcon2	equ	0xFF1
  9837                           intcon3	equ	0xFF0
  9838                           postinc0	equ	0xFEE
  9839                           wreg	equ	0xFE8
  9840                           postdec1	equ	0xFE5
  9841                           fsr1l	equ	0xFE1
  9842                           indf2	equ	0xFDF
  9843                           postinc2	equ	0xFDE
  9844                           postdec2	equ	0xFDD
  9845                           fsr2h	equ	0xFDA
  9846                           fsr2l	equ	0xFD9
  9847                           status	equ	0xFD8
  9848                           
  9849 ;; *************** function _I2C_Master_Wait *****************
  9850 ;; Defined at:
  9851 ;;		line 26 in file "I2C.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;		None
  9854 ;; Auto vars:     Size  Location     Type
  9855 ;;		None
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  1    wreg      void 
  9858 ;; Registers used:
  9859 ;;		wreg, status,2, status,0
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;Total ram usage:        1 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    7
  9872 ;; This function calls:
  9873 ;;		Nothing
  9874 ;; This function is called by:
  9875 ;;		_I2C_Master_Start
  9876 ;;		_I2C_Master_Stop
  9877 ;;		_I2C_Master_Write
  9878 ;;		_I2C_Master_Read
  9879 ;;		_I2C_Master_RepeatedStart
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           	psect	text31
  9884  0052A2                     __ptext31:
  9885                           	opt stack 0
  9886  0052A2                     _I2C_Master_Wait:
  9887                           	opt stack 18
  9888  0052A2                     l66:
  9889  0052A2  B4C7               	btfsc	4039,2,c	;volatile
  9890  0052A4  D7FE               	goto	l66
  9891  0052A6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9892  0052AA  0E1F               	movlw	31
  9893  0052AC  0100               	movlb	0	; () banked
  9894  0052AE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9895  0052B0  B4D8               	btfsc	status,2,c
  9896  0052B2  0012               	return	
  9897  0052B4  D7F6               	goto	l66
  9898  0052B6                     __end_of_I2C_Master_Wait:
  9899                           	opt stack 0
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           intcon3	equ	0xFF0
  9909                           postinc0	equ	0xFEE
  9910                           wreg	equ	0xFE8
  9911                           postdec1	equ	0xFE5
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           postdec2	equ	0xFDD
  9916                           fsr2h	equ	0xFDA
  9917                           fsr2l	equ	0xFD9
  9918                           status	equ	0xFD8
  9919                           
  9920 ;; *************** function _change_state_to_menu_22 *****************
  9921 ;; Defined at:
  9922 ;;		line 498 in file "UI.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;		None
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  1    wreg      void 
  9929 ;; Registers used:
  9930 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;Total ram usage:        0 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:   10
  9943 ;; This function calls:
  9944 ;;		_lcdInst
  9945 ;;		_printf
  9946 ;; This function is called by:
  9947 ;;		_UI
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text32
  9952  004D1E                     __ptext32:
  9953                           	opt stack 0
  9954  004D1E                     _change_state_to_menu_22:
  9955                           	opt stack 19
  9956                           
  9957                           ;UI.c: 499: cur_state = 22;
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;incstack = 0
  9961  004D1E  0E00               	movlw	0
  9962  004D20  0100               	movlb	0	; () banked
  9963  004D22  6FED               	movwf	(_cur_state+1)& (0+255),b
  9964  004D24  0E16               	movlw	22
  9965  004D26  6FEC               	movwf	_cur_state& (0+255),b
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;UI.c: 501: lcdInst(0b10000000);;
  9969  004D28  0E80               	movlw	128
  9970  004D2A  EC6C  F029         	call	_lcdInst
  9971                           
  9972                           ;UI.c: 502: printf("2. SORT        <");
  9973  004D2E  0EC4               	movlw	low STR_34
  9974  004D30  0100               	movlb	0	; () banked
  9975  004D32  6F8E               	movwf	printf@f& (0+255),b
  9976  004D34  0EFD               	movlw	high STR_34
  9977  004D36  0100               	movlb	0	; () banked
  9978  004D38  6F8F               	movwf	(printf@f+1)& (0+255),b
  9979  004D3A  EC07  F00B         	call	_printf	;wreg free
  9980                           
  9981                           ;UI.c: 503: lcdInst(0b11000000);;
  9982  004D3E  0EC0               	movlw	192
  9983  004D40  EC6C  F029         	call	_lcdInst
  9984                           
  9985                           ;UI.c: 504: printf("3. LOGS         ");
  9986  004D44  0E09               	movlw	low STR_36
  9987  004D46  0100               	movlb	0	; () banked
  9988  004D48  6F8E               	movwf	printf@f& (0+255),b
  9989  004D4A  0EFD               	movlw	high STR_36
  9990  004D4C  0100               	movlb	0	; () banked
  9991  004D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9992  004D50  EC07  F00B         	call	_printf	;wreg free
  9993  004D54  0012               	return		;funcret
  9994  004D56                     __end_of_change_state_to_menu_22:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon2	equ	0xFF1
 10004                           intcon3	equ	0xFF0
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           postdec1	equ	0xFE5
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _change_state_to_menu_12 *****************
 10017 ;; Defined at:
 10018 ;;		line 490 in file "UI.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;Total ram usage:        0 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:   10
 10039 ;; This function calls:
 10040 ;;		_lcdInst
 10041 ;;		_printf
 10042 ;; This function is called by:
 10043 ;;		_UI
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text33
 10048  004D56                     __ptext33:
 10049                           	opt stack 0
 10050  004D56                     _change_state_to_menu_12:
 10051                           	opt stack 19
 10052                           
 10053                           ;UI.c: 491: cur_state = 12;
 10054                           
 10055                           ;incstack = 0
 10056  004D56  0E00               	movlw	0
 10057  004D58  0100               	movlb	0	; () banked
 10058  004D5A  6FED               	movwf	(_cur_state+1)& (0+255),b
 10059  004D5C  0E0C               	movlw	12
 10060  004D5E  6FEC               	movwf	_cur_state& (0+255),b
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;UI.c: 493: lcdInst(0b10000000);;
 10064  004D60  0E80               	movlw	128
 10065  004D62  EC6C  F029         	call	_lcdInst
 10066                           
 10067                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10068  004D66  0E2B               	movlw	low STR_33
 10069  004D68  0100               	movlb	0	; () banked
 10070  004D6A  6F8E               	movwf	printf@f& (0+255),b
 10071  004D6C  0EFD               	movlw	high STR_33
 10072  004D6E  0100               	movlb	0	; () banked
 10073  004D70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10074  004D72  EC07  F00B         	call	_printf	;wreg free
 10075                           
 10076                           ;UI.c: 495: lcdInst(0b11000000);;
 10077  004D76  0EC0               	movlw	192
 10078  004D78  EC6C  F029         	call	_lcdInst
 10079                           
 10080                           ;UI.c: 496: printf("2. SORT        <");
 10081  004D7C  0EC4               	movlw	low STR_34
 10082  004D7E  0100               	movlb	0	; () banked
 10083  004D80  6F8E               	movwf	printf@f& (0+255),b
 10084  004D82  0EFD               	movlw	high STR_34
 10085  004D84  0100               	movlb	0	; () banked
 10086  004D86  6F8F               	movwf	(printf@f+1)& (0+255),b
 10087  004D88  EC07  F00B         	call	_printf	;wreg free
 10088  004D8C  0012               	return		;funcret
 10089  004D8E                     __end_of_change_state_to_menu_12:
 10090                           	opt stack 0
 10091                           tblptru	equ	0xFF8
 10092                           tblptrh	equ	0xFF7
 10093                           tblptrl	equ	0xFF6
 10094                           tablat	equ	0xFF5
 10095                           prodh	equ	0xFF4
 10096                           prodl	equ	0xFF3
 10097                           intcon	equ	0xFF2
 10098                           intcon2	equ	0xFF1
 10099                           intcon3	equ	0xFF0
 10100                           postinc0	equ	0xFEE
 10101                           wreg	equ	0xFE8
 10102                           postdec1	equ	0xFE5
 10103                           fsr1l	equ	0xFE1
 10104                           indf2	equ	0xFDF
 10105                           postinc2	equ	0xFDE
 10106                           postdec2	equ	0xFDD
 10107                           fsr2h	equ	0xFDA
 10108                           fsr2l	equ	0xFD9
 10109                           status	equ	0xFD8
 10110                           
 10111 ;; *************** function ___awmod *****************
 10112 ;; Defined at:
 10113 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;  dividend        2    0[BANK0 ] int 
 10116 ;;  divisor         2    2[BANK0 ] int 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  sign            1    5[BANK0 ] unsigned char 
 10119 ;;  counter         1    4[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  2    0[BANK0 ] int 
 10122 ;; Registers used:
 10123 ;;		wreg, status,2, status,0
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:        6 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    7
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_UI
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text34
 10144  0043BE                     __ptext34:
 10145                           	opt stack 0
 10146  0043BE                     ___awmod:
 10147                           	opt stack 22
 10148                           
 10149                           ;incstack = 0
 10150  0043BE  0E00               	movlw	0
 10151  0043C0  0100               	movlb	0	; () banked
 10152  0043C2  6F85               	movwf	___awmod@sign& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155  0043C4  0100               	movlb	0	; () banked
 10156  0043C6  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10157  0043C8  D008               	goto	l8448
 10158                           
 10159                           ; BSR set to: 0
 10160  0043CA  0100               	movlb	0	; () banked
 10161  0043CC  6D80               	negf	___awmod@dividend& (0+255),b
 10162  0043CE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10163  0043D0  B0D8               	btfsc	status,0,c
 10164  0043D2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10165                           
 10166                           ; BSR set to: 0
 10167  0043D4  0E01               	movlw	1
 10168  0043D6  0100               	movlb	0	; () banked
 10169  0043D8  6F85               	movwf	___awmod@sign& (0+255),b
 10170  0043DA                     l8448:
 10171                           
 10172                           ; BSR set to: 0
 10173  0043DA  0100               	movlb	0	; () banked
 10174  0043DC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10175  0043DE  D005               	goto	l8452
 10176                           
 10177                           ; BSR set to: 0
 10178  0043E0  0100               	movlb	0	; () banked
 10179  0043E2  6D82               	negf	___awmod@divisor& (0+255),b
 10180  0043E4  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10181  0043E6  B0D8               	btfsc	status,0,c
 10182  0043E8  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10183  0043EA                     l8452:
 10184                           
 10185                           ; BSR set to: 0
 10186  0043EA  0100               	movlb	0	; () banked
 10187  0043EC  5182               	movf	___awmod@divisor& (0+255),w,b
 10188  0043EE  0100               	movlb	0	; () banked
 10189  0043F0  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10190  0043F2  B4D8               	btfsc	status,2,c
 10191  0043F4  D026               	goto	l8468
 10192                           
 10193                           ; BSR set to: 0
 10194  0043F6  0E01               	movlw	1
 10195  0043F8  0100               	movlb	0	; () banked
 10196  0043FA  6F84               	movwf	___awmod@counter& (0+255),b
 10197  0043FC  D006               	goto	l8458
 10198  0043FE                     l8456:
 10199                           
 10200                           ; BSR set to: 0
 10201  0043FE  0100               	movlb	0	; () banked
 10202  004400  90D8               	bcf	status,0,c
 10203  004402  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10204  004404  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10205  004406  0100               	movlb	0	; () banked
 10206  004408  2B84               	incf	___awmod@counter& (0+255),f,b
 10207  00440A                     l8458:
 10208                           
 10209                           ; BSR set to: 0
 10210  00440A  0100               	movlb	0	; () banked
 10211  00440C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10212  00440E  D7F7               	goto	l8456
 10213  004410                     l8460:
 10214                           
 10215                           ; BSR set to: 0
 10216  004410  0100               	movlb	0	; () banked
 10217  004412  5182               	movf	___awmod@divisor& (0+255),w,b
 10218  004414  0100               	movlb	0	; () banked
 10219  004416  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10220  004418  0100               	movlb	0	; () banked
 10221  00441A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10222  00441C  0100               	movlb	0	; () banked
 10223  00441E  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10224  004420  A0D8               	btfss	status,0,c
 10225  004422  D008               	goto	l8464
 10226                           
 10227                           ; BSR set to: 0
 10228  004424  0100               	movlb	0	; () banked
 10229  004426  5182               	movf	___awmod@divisor& (0+255),w,b
 10230  004428  0100               	movlb	0	; () banked
 10231  00442A  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10232  00442C  0100               	movlb	0	; () banked
 10233  00442E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10234  004430  0100               	movlb	0	; () banked
 10235  004432  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10236  004434                     l8464:
 10237                           
 10238                           ; BSR set to: 0
 10239  004434  0100               	movlb	0	; () banked
 10240  004436  90D8               	bcf	status,0,c
 10241  004438  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10242  00443A  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10243                           
 10244                           ; BSR set to: 0
 10245  00443C  0100               	movlb	0	; () banked
 10246  00443E  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10247  004440  D7E7               	goto	l8460
 10248  004442                     l8468:
 10249                           
 10250                           ; BSR set to: 0
 10251  004442  0100               	movlb	0	; () banked
 10252  004444  5185               	movf	___awmod@sign& (0+255),w,b
 10253  004446  0100               	movlb	0	; () banked
 10254  004448  B4D8               	btfsc	status,2,c
 10255  00444A  D005               	goto	l8472
 10256                           
 10257                           ; BSR set to: 0
 10258  00444C  0100               	movlb	0	; () banked
 10259  00444E  6D80               	negf	___awmod@dividend& (0+255),b
 10260  004450  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10261  004452  B0D8               	btfsc	status,0,c
 10262  004454  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10263  004456                     l8472:
 10264                           
 10265                           ; BSR set to: 0
 10266  004456  C080  F080         	movff	___awmod@dividend,?___awmod
 10267  00445A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10268  00445E  0012               	return	
 10269  004460                     __end_of___awmod:
 10270                           	opt stack 0
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           intcon2	equ	0xFF1
 10279                           intcon3	equ	0xFF0
 10280                           postinc0	equ	0xFEE
 10281                           wreg	equ	0xFE8
 10282                           postdec1	equ	0xFE5
 10283                           fsr1l	equ	0xFE1
 10284                           indf2	equ	0xFDF
 10285                           postinc2	equ	0xFDE
 10286                           postdec2	equ	0xFDD
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function ___awdiv *****************
 10292 ;; Defined at:
 10293 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;  dividend        2    6[BANK0 ] int 
 10296 ;;  divisor         2    8[BANK0 ] int 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  quotient        2   12[BANK0 ] int 
 10299 ;;  sign            1   11[BANK0 ] unsigned char 
 10300 ;;  counter         1   10[BANK0 ] unsigned char 
 10301 ;; Return value:  Size  Location     Type
 10302 ;;                  2    6[BANK0 ] int 
 10303 ;; Registers used:
 10304 ;;		wreg, status,2, status,0
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10310 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;Total ram usage:        8 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    7
 10317 ;; This function calls:
 10318 ;;		Nothing
 10319 ;; This function is called by:
 10320 ;;		_UI
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text35
 10325  0040EE                     __ptext35:
 10326                           	opt stack 0
 10327  0040EE                     ___awdiv:
 10328                           	opt stack 22
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;incstack = 0
 10332  0040EE  0E00               	movlw	0
 10333  0040F0  0100               	movlb	0	; () banked
 10334  0040F2  6F8B               	movwf	___awdiv@sign& (0+255),b
 10335                           
 10336                           ; BSR set to: 0
 10337  0040F4  0100               	movlb	0	; () banked
 10338  0040F6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10339  0040F8  D008               	goto	l8404
 10340                           
 10341                           ; BSR set to: 0
 10342  0040FA  0100               	movlb	0	; () banked
 10343  0040FC  6D88               	negf	___awdiv@divisor& (0+255),b
 10344  0040FE  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10345  004100  B0D8               	btfsc	status,0,c
 10346  004102  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10347                           
 10348                           ; BSR set to: 0
 10349  004104  0E01               	movlw	1
 10350  004106  0100               	movlb	0	; () banked
 10351  004108  6F8B               	movwf	___awdiv@sign& (0+255),b
 10352  00410A                     l8404:
 10353                           
 10354                           ; BSR set to: 0
 10355  00410A  0100               	movlb	0	; () banked
 10356  00410C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10357  00410E  D008               	goto	l8410
 10358                           
 10359                           ; BSR set to: 0
 10360  004110  0100               	movlb	0	; () banked
 10361  004112  6D86               	negf	___awdiv@dividend& (0+255),b
 10362  004114  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10363  004116  B0D8               	btfsc	status,0,c
 10364  004118  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10365                           
 10366                           ; BSR set to: 0
 10367  00411A  0E01               	movlw	1
 10368  00411C  0100               	movlb	0	; () banked
 10369  00411E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10370  004120                     l8410:
 10371                           
 10372                           ; BSR set to: 0
 10373  004120  0E00               	movlw	0
 10374  004122  0100               	movlb	0	; () banked
 10375  004124  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10376  004126  0E00               	movlw	0
 10377  004128  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10378                           
 10379                           ; BSR set to: 0
 10380  00412A  0100               	movlb	0	; () banked
 10381  00412C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10382  00412E  0100               	movlb	0	; () banked
 10383  004130  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10384  004132  B4D8               	btfsc	status,2,c
 10385  004134  D02C               	goto	l8432
 10386                           
 10387                           ; BSR set to: 0
 10388  004136  0E01               	movlw	1
 10389  004138  0100               	movlb	0	; () banked
 10390  00413A  6F8A               	movwf	___awdiv@counter& (0+255),b
 10391  00413C  D006               	goto	l8418
 10392  00413E                     l8416:
 10393                           
 10394                           ; BSR set to: 0
 10395  00413E  0100               	movlb	0	; () banked
 10396  004140  90D8               	bcf	status,0,c
 10397  004142  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10398  004144  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10399  004146  0100               	movlb	0	; () banked
 10400  004148  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10401  00414A                     l8418:
 10402                           
 10403                           ; BSR set to: 0
 10404  00414A  0100               	movlb	0	; () banked
 10405  00414C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10406  00414E  D7F7               	goto	l8416
 10407  004150                     l8420:
 10408                           
 10409                           ; BSR set to: 0
 10410  004150  0100               	movlb	0	; () banked
 10411  004152  90D8               	bcf	status,0,c
 10412  004154  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10413  004156  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10414                           
 10415                           ; BSR set to: 0
 10416  004158  0100               	movlb	0	; () banked
 10417  00415A  5188               	movf	___awdiv@divisor& (0+255),w,b
 10418  00415C  0100               	movlb	0	; () banked
 10419  00415E  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10420  004160  0100               	movlb	0	; () banked
 10421  004162  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10422  004164  0100               	movlb	0	; () banked
 10423  004166  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10424  004168  A0D8               	btfss	status,0,c
 10425  00416A  D00A               	goto	l8428
 10426                           
 10427                           ; BSR set to: 0
 10428  00416C  0100               	movlb	0	; () banked
 10429  00416E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10430  004170  0100               	movlb	0	; () banked
 10431  004172  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10432  004174  0100               	movlb	0	; () banked
 10433  004176  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10434  004178  0100               	movlb	0	; () banked
 10435  00417A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10436                           
 10437                           ; BSR set to: 0
 10438  00417C  0100               	movlb	0	; () banked
 10439  00417E  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10440  004180                     l8428:
 10441                           
 10442                           ; BSR set to: 0
 10443  004180  0100               	movlb	0	; () banked
 10444  004182  90D8               	bcf	status,0,c
 10445  004184  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10446  004186  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10447                           
 10448                           ; BSR set to: 0
 10449  004188  0100               	movlb	0	; () banked
 10450  00418A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10451  00418C  D7E1               	goto	l8420
 10452  00418E                     l8432:
 10453                           
 10454                           ; BSR set to: 0
 10455  00418E  0100               	movlb	0	; () banked
 10456  004190  518B               	movf	___awdiv@sign& (0+255),w,b
 10457  004192  0100               	movlb	0	; () banked
 10458  004194  B4D8               	btfsc	status,2,c
 10459  004196  D005               	goto	l8436
 10460                           
 10461                           ; BSR set to: 0
 10462  004198  0100               	movlb	0	; () banked
 10463  00419A  6D8C               	negf	___awdiv@quotient& (0+255),b
 10464  00419C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10465  00419E  B0D8               	btfsc	status,0,c
 10466  0041A0  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10467  0041A2                     l8436:
 10468                           
 10469                           ; BSR set to: 0
 10470  0041A2  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10471  0041A6  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10472  0041AA  0012               	return	
 10473  0041AC                     __end_of___awdiv:
 10474                           	opt stack 0
 10475                           tblptru	equ	0xFF8
 10476                           tblptrh	equ	0xFF7
 10477                           tblptrl	equ	0xFF6
 10478                           tablat	equ	0xFF5
 10479                           prodh	equ	0xFF4
 10480                           prodl	equ	0xFF3
 10481                           intcon	equ	0xFF2
 10482                           intcon2	equ	0xFF1
 10483                           intcon3	equ	0xFF0
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           postdec1	equ	0xFE5
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           fsr2h	equ	0xFDA
 10492                           fsr2l	equ	0xFD9
 10493                           status	equ	0xFD8
 10494                           
 10495 ;; *************** function _Test *****************
 10496 ;; Defined at:
 10497 ;;		line 30 in file "Test.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:        2 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:   11
 10518 ;; This function calls:
 10519 ;;		_BlockerTest
 10520 ;;		_BothServos
 10521 ;;		_EEPROMTest
 10522 ;;		_PortTestA5
 10523 ;;		_PortTests
 10524 ;;		_PusherTest
 10525 ;;		_SpeedTest
 10526 ;;		_actuatorTest
 10527 ;;		_algorithmTest
 10528 ;;		_lcdInst
 10529 ;;		_printf
 10530 ;;		_sensorTest
 10531 ;; This function is called by:
 10532 ;;		_main
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text36
 10537  003C76                     __ptext36:
 10538                           	opt stack 0
 10539  003C76                     _Test:
 10540                           	opt stack 19
 10541  003C76                     
 10542                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10543  003C76  0E01               	movlw	1
 10544  003C78  EC6C  F029         	call	_lcdInst
 10545  003C7C  0E68               	movlw	104
 10546  003C7E  0100               	movlb	0	; () banked
 10547  003C80  6FC6               	movwf	??_Test& (0+255),b
 10548  003C82  0EE4               	movlw	228
 10549  003C84                     u9217:
 10550  003C84  2EE8               	decfsz	wreg,f,c
 10551  003C86  D7FE               	bra	u9217
 10552  003C88  2FC6               	decfsz	??_Test& (0+255),f,b
 10553  003C8A  D7FC               	bra	u9217
 10554  003C8C  F000               	nop	
 10555  003C8E  0E80               	movlw	128
 10556  003C90  EC6C  F029         	call	_lcdInst
 10557                           
 10558                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10559  003C94  0E92               	movlw	low STR_68
 10560  003C96  0100               	movlb	0	; () banked
 10561  003C98  6F8E               	movwf	printf@f& (0+255),b
 10562  003C9A  0EFC               	movlw	high STR_68
 10563  003C9C  0100               	movlb	0	; () banked
 10564  003C9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10565  003CA0  EC07  F00B         	call	_printf	;wreg free
 10566                           
 10567                           ;Test.c: 35: lcdInst(0b11000000);;
 10568  003CA4  0EC0               	movlw	192
 10569  003CA6  EC6C  F029         	call	_lcdInst
 10570                           
 10571                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10572  003CAA  0EA3               	movlw	low STR_69
 10573  003CAC  0100               	movlb	0	; () banked
 10574  003CAE  6F8E               	movwf	printf@f& (0+255),b
 10575  003CB0  0EFC               	movlw	high STR_69
 10576  003CB2  0100               	movlb	0	; () banked
 10577  003CB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10578  003CB6  EC07  F00B         	call	_printf	;wreg free
 10579                           
 10580                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10581  003CBA  0E05               	movlw	5
 10582  003CBC  0100               	movlb	0	; () banked
 10583  003CBE  6FC7               	movwf	(??_Test+1)& (0+255),b
 10584  003CC0  0E0F               	movlw	15
 10585  003CC2  0100               	movlb	0	; () banked
 10586  003CC4  6FC6               	movwf	??_Test& (0+255),b
 10587  003CC6  0EF1               	movlw	241
 10588  003CC8                     u9227:
 10589  003CC8  2EE8               	decfsz	wreg,f,c
 10590  003CCA  D7FE               	bra	u9227
 10591  003CCC  2FC6               	decfsz	??_Test& (0+255),f,b
 10592  003CCE  D7FC               	bra	u9227
 10593  003CD0  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10594  003CD2  D7FA               	bra	u9227
 10595  003CD4                     l1146:
 10596  003CD4  A281               	btfss	3969,1,c	;volatile
 10597  003CD6  D7FE               	goto	l1146
 10598                           
 10599                           ;Test.c: 39: var = PORTB >> 4;
 10600  003CD8  CF81 F0C6          	movff	3969,??_Test	;volatile
 10601  003CDC  0100               	movlb	0	; () banked
 10602  003CDE  3BC6               	swapf	??_Test& (0+255),f,b
 10603  003CE0  0E0F               	movlw	15
 10604  003CE2  17C6               	andwf	??_Test& (0+255),f,b
 10605  003CE4  0100               	movlb	0	; () banked
 10606  003CE6  51C6               	movf	??_Test& (0+255),w,b
 10607  003CE8  0100               	movlb	0	; () banked
 10608  003CEA  6FFA               	movwf	_var& (0+255),b
 10609  003CEC  6BFB               	clrf	(_var+1)& (0+255),b
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;Test.c: 40: var++;
 10613  003CEE  0100               	movlb	0	; () banked
 10614  003CF0  4BFA               	infsnz	_var& (0+255),f,b
 10615  003CF2  2BFB               	incf	(_var+1)& (0+255),f,b
 10616  003CF4                     l1149:
 10617  003CF4  A281               	btfss	3969,1,c	;volatile
 10618  003CF6  D01F               	goto	l9198
 10619  003CF8  D7FD               	goto	l1149
 10620  003CFA                     l9176:
 10621                           
 10622                           ;Test.c: 44: algorithmTest();
 10623  003CFA  ECAA  F01F         	call	_algorithmTest	;wreg free
 10624                           
 10625                           ;Test.c: 45: break;
 10626  003CFE  D7BB               	goto	l9158
 10627  003D00                     l9178:
 10628                           
 10629                           ;Test.c: 47: sensorTest();
 10630  003D00  EC9C  F010         	call	_sensorTest	;wreg free
 10631                           
 10632                           ;Test.c: 48: break;
 10633  003D04  D7B8               	goto	l9158
 10634  003D06                     l9180:
 10635                           
 10636                           ;Test.c: 50: actuatorTest();
 10637  003D06  EC09  F000         	call	_actuatorTest	;wreg free
 10638                           
 10639                           ;Test.c: 51: break;
 10640  003D0A  D7B5               	goto	l9158
 10641  003D0C                     l9182:
 10642                           
 10643                           ;Test.c: 53: PortTestA5();
 10644  003D0C  EC29  F025         	call	_PortTestA5	;wreg free
 10645                           
 10646                           ;Test.c: 54: break;
 10647  003D10  D7B2               	goto	l9158
 10648  003D12                     l9184:
 10649                           
 10650                           ;Test.c: 57: SpeedTest();
 10651  003D12  ECFC  F022         	call	_SpeedTest	;wreg free
 10652                           
 10653                           ;Test.c: 58: break;
 10654  003D16  D7AF               	goto	l9158
 10655  003D18                     l9186:
 10656                           
 10657                           ;Test.c: 60: EEPROMTest();
 10658  003D18  EC9E  F029         	call	_EEPROMTest	;wreg free
 10659                           
 10660                           ;Test.c: 61: break;
 10661  003D1C  D7AC               	goto	l9158
 10662  003D1E                     l9188:
 10663                           
 10664                           ;Test.c: 63: PusherTest();
 10665  003D1E  EC68  F017         	call	_PusherTest	;wreg free
 10666                           
 10667                           ;Test.c: 64: break;
 10668  003D22  D7A9               	goto	l9158
 10669  003D24                     l9190:
 10670                           
 10671                           ;Test.c: 66: PortTests();
 10672  003D24  EC3E  F023         	call	_PortTests	;wreg free
 10673                           
 10674                           ;Test.c: 67: break;
 10675  003D28  D7A6               	goto	l9158
 10676  003D2A                     l9192:
 10677                           
 10678                           ;Test.c: 69: BothServos();
 10679  003D2A  EC23  F00D         	call	_BothServos	;wreg free
 10680                           
 10681                           ;Test.c: 70: break;
 10682  003D2E  D7A3               	goto	l9158
 10683  003D30                     l9194:
 10684                           
 10685                           ;Test.c: 72: BlockerTest();
 10686  003D30  EC49  F01C         	call	_BlockerTest	;wreg free
 10687                           
 10688                           ;Test.c: 76: }
 10689                           
 10690                           ;Test.c: 75: break;
 10691                           
 10692                           ;Test.c: 74: default:
 10693                           
 10694                           ;Test.c: 73: break;
 10695  003D34  D7A0               	goto	l9158
 10696  003D36                     l9198:
 10697  003D36  C0FA  F0C6         	movff	_var,??_Test
 10698  003D3A  C0FB  F0C7         	movff	_var+1,??_Test+1
 10699                           
 10700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10701                           ; Switch size 1, requested type "space"
 10702                           ; Number of cases is 1, Range of values is 0 to 0
 10703                           ; switch strategies available:
 10704                           ; Name         Instructions Cycles
 10705                           ; simple_byte            4     3 (average)
 10706                           ;	Chosen strategy is simple_byte
 10707  003D3E  0100               	movlb	0	; () banked
 10708  003D40  51C7               	movf	(??_Test+1)& (0+255),w,b
 10709  003D42  0A00               	xorlw	0	; case 0
 10710  003D44  A4D8               	btfss	status,2,c
 10711  003D46  D797               	goto	l9158
 10712                           
 10713                           ; BSR set to: 0
 10714                           ; Switch size 1, requested type "space"
 10715                           ; Number of cases is 10, Range of values is 1 to 11
 10716                           ; switch strategies available:
 10717                           ; Name         Instructions Cycles
 10718                           ; simple_byte           31    16 (average)
 10719                           ;	Chosen strategy is simple_byte
 10720  003D48  0100               	movlb	0	; () banked
 10721  003D4A  51C6               	movf	??_Test& (0+255),w,b
 10722  003D4C  0A01               	xorlw	1	; case 1
 10723  003D4E  B4D8               	btfsc	status,2,c
 10724  003D50  D7D4               	goto	l9176
 10725  003D52  0A03               	xorlw	3	; case 2
 10726  003D54  B4D8               	btfsc	status,2,c
 10727  003D56  D7D4               	goto	l9178
 10728  003D58  0A01               	xorlw	1	; case 3
 10729  003D5A  B4D8               	btfsc	status,2,c
 10730  003D5C  D7D4               	goto	l9180
 10731  003D5E  0A06               	xorlw	6	; case 5
 10732  003D60  B4D8               	btfsc	status,2,c
 10733  003D62  D7D4               	goto	l9182
 10734  003D64  0A03               	xorlw	3	; case 6
 10735  003D66  B4D8               	btfsc	status,2,c
 10736  003D68  D7D4               	goto	l9184
 10737  003D6A  0A01               	xorlw	1	; case 7
 10738  003D6C  B4D8               	btfsc	status,2,c
 10739  003D6E  D7D4               	goto	l9186
 10740  003D70  0A0F               	xorlw	15	; case 8
 10741  003D72  B4D8               	btfsc	status,2,c
 10742  003D74  D7D4               	goto	l9188
 10743  003D76  0A01               	xorlw	1	; case 9
 10744  003D78  B4D8               	btfsc	status,2,c
 10745  003D7A  D7D4               	goto	l9190
 10746  003D7C  0A03               	xorlw	3	; case 10
 10747  003D7E  B4D8               	btfsc	status,2,c
 10748  003D80  D7D4               	goto	l9192
 10749  003D82  0A01               	xorlw	1	; case 11
 10750  003D84  B4D8               	btfsc	status,2,c
 10751  003D86  D7D4               	goto	l9194
 10752                           
 10753                           ; BSR set to: 0
 10754                           
 10755                           ; BSR set to: 0
 10756  003D88  D776               	goto	l9158
 10757  003D8A                     __end_of_Test:
 10758                           	opt stack 0
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon2	equ	0xFF1
 10767                           intcon3	equ	0xFF0
 10768                           postinc0	equ	0xFEE
 10769                           wreg	equ	0xFE8
 10770                           postdec1	equ	0xFE5
 10771                           fsr1l	equ	0xFE1
 10772                           indf2	equ	0xFDF
 10773                           postinc2	equ	0xFDE
 10774                           postdec2	equ	0xFDD
 10775                           fsr2h	equ	0xFDA
 10776                           fsr2l	equ	0xFD9
 10777                           status	equ	0xFD8
 10778                           
 10779 ;; *************** function _sensorTest *****************
 10780 ;; Defined at:
 10781 ;;		line 124 in file "Test.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;		None
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;  res             2   45[BANK0 ] int 
 10786 ;; Return value:  Size  Location     Type
 10787 ;;                  1    wreg      void 
 10788 ;; Registers used:
 10789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;Total ram usage:        4 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; Hardware stack levels required when called:   10
 10802 ;; This function calls:
 10803 ;;		_lcdInst
 10804 ;;		_printf
 10805 ;;		_readADC
 10806 ;;		_readMAG
 10807 ;; This function is called by:
 10808 ;;		_Test
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           	psect	text37
 10813  002138                     __ptext37:
 10814                           	opt stack 0
 10815  002138                     _sensorTest:
 10816                           	opt stack 19
 10817                           
 10818                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;incstack = 0
 10822  002138  0E01               	movlw	1
 10823  00213A  EC6C  F029         	call	_lcdInst
 10824  00213E  0E68               	movlw	104
 10825  002140  0100               	movlb	0	; () banked
 10826  002142  6FAB               	movwf	??_sensorTest& (0+255),b
 10827  002144  0EE4               	movlw	228
 10828  002146                     u9237:
 10829  002146  2EE8               	decfsz	wreg,f,c
 10830  002148  D7FE               	bra	u9237
 10831  00214A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10832  00214C  D7FC               	bra	u9237
 10833  00214E  F000               	nop	
 10834  002150  0E80               	movlw	128
 10835  002152  EC6C  F029         	call	_lcdInst
 10836                           
 10837                           ;Test.c: 127: printf("SENSORS");
 10838  002156  0EAE               	movlw	low STR_77
 10839  002158  0100               	movlb	0	; () banked
 10840  00215A  6F8E               	movwf	printf@f& (0+255),b
 10841  00215C  0EFF               	movlw	high STR_77
 10842  00215E  0100               	movlb	0	; () banked
 10843  002160  6F8F               	movwf	(printf@f+1)& (0+255),b
 10844  002162  EC07  F00B         	call	_printf	;wreg free
 10845                           
 10846                           ;Test.c: 128: lcdInst(0b11000000);;
 10847  002166  0EC0               	movlw	192
 10848  002168  EC6C  F029         	call	_lcdInst
 10849                           
 10850                           ;Test.c: 129: printf("PUSH TO START");
 10851  00216C  0E0B               	movlw	low STR_71
 10852  00216E  0100               	movlb	0	; () banked
 10853  002170  6F8E               	movwf	printf@f& (0+255),b
 10854  002172  0EFF               	movlw	high STR_71
 10855  002174  0100               	movlb	0	; () banked
 10856  002176  6F8F               	movwf	(printf@f+1)& (0+255),b
 10857  002178  EC07  F00B         	call	_printf	;wreg free
 10858                           
 10859                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10860  00217C  0E05               	movlw	5
 10861  00217E  0100               	movlb	0	; () banked
 10862  002180  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10863  002182  0E0F               	movlw	15
 10864  002184  0100               	movlb	0	; () banked
 10865  002186  6FAB               	movwf	??_sensorTest& (0+255),b
 10866  002188  0EF1               	movlw	241
 10867  00218A                     u9247:
 10868  00218A  2EE8               	decfsz	wreg,f,c
 10869  00218C  D7FE               	bra	u9247
 10870  00218E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10871  002190  D7FC               	bra	u9247
 10872  002192  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10873  002194  D7FA               	bra	u9247
 10874  002196                     l1179:
 10875  002196  A281               	btfss	3969,1,c	;volatile
 10876  002198  D7FE               	goto	l1179
 10877  00219A                     l1182:
 10878  00219A  B281               	btfsc	3969,1,c	;volatile
 10879  00219C  D7FE               	goto	l1182
 10880                           
 10881                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10882  00219E  0E01               	movlw	1
 10883  0021A0  EC6C  F029         	call	_lcdInst
 10884  0021A4  0E68               	movlw	104
 10885  0021A6  0100               	movlb	0	; () banked
 10886  0021A8  6FAB               	movwf	??_sensorTest& (0+255),b
 10887  0021AA  0EE4               	movlw	228
 10888  0021AC                     u9257:
 10889  0021AC  2EE8               	decfsz	wreg,f,c
 10890  0021AE  D7FE               	bra	u9257
 10891  0021B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10892  0021B2  D7FC               	bra	u9257
 10893  0021B4  F000               	nop	
 10894  0021B6  0E80               	movlw	128
 10895  0021B8  EC6C  F029         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 138: printf("TST: IR SNSR");
 10898  0021BC  0E35               	movlw	low STR_79
 10899  0021BE  0100               	movlb	0	; () banked
 10900  0021C0  6F8E               	movwf	printf@f& (0+255),b
 10901  0021C2  0EFF               	movlw	high STR_79
 10902  0021C4  0100               	movlb	0	; () banked
 10903  0021C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  0021C8  EC07  F00B         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10907  0021CC  0E05               	movlw	5
 10908  0021CE  0100               	movlb	0	; () banked
 10909  0021D0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10910  0021D2  0E0F               	movlw	15
 10911  0021D4  0100               	movlb	0	; () banked
 10912  0021D6  6FAB               	movwf	??_sensorTest& (0+255),b
 10913  0021D8  0EF1               	movlw	241
 10914  0021DA                     u9267:
 10915  0021DA  2EE8               	decfsz	wreg,f,c
 10916  0021DC  D7FE               	bra	u9267
 10917  0021DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10918  0021E0  D7FC               	bra	u9267
 10919  0021E2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10920  0021E4  D7FA               	bra	u9267
 10921                           
 10922                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10923  0021E6  8A8B               	bsf	3979,5,c	;volatile
 10924                           
 10925                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10926  0021E8  D05C               	goto	l7622
 10927  0021EA                     l7604:
 10928                           
 10929                           ;Test.c: 143: readADC(0);
 10930  0021EA  0E00               	movlw	0
 10931  0021EC  EC63  F028         	call	_readADC
 10932                           
 10933                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10934  0021F0  50C3               	movf	4035,w,c	;volatile
 10935  0021F2  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10936  0021F6  0100               	movlb	0	; () banked
 10937  0021F8  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10938  0021FA  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10939  0021FE  0100               	movlb	0	; () banked
 10940  002200  6BAB               	clrf	??_sensorTest& (0+255),b
 10941  002202  0100               	movlb	0	; () banked
 10942  002204  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10943  002206  0100               	movlb	0	; () banked
 10944  002208  6FAD               	movwf	sensorTest@res& (0+255),b
 10945  00220A  0100               	movlb	0	; () banked
 10946  00220C  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10947  00220E  0100               	movlb	0	; () banked
 10948  002210  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10952  002212  0100               	movlb	0	; () banked
 10953  002214  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10954  002216  D00A               	goto	u6120
 10955  002218  0E21               	movlw	33
 10956  00221A  0100               	movlb	0	; () banked
 10957  00221C  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10958  00221E  0E03               	movlw	3
 10959  002220  0100               	movlb	0	; () banked
 10960  002222  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10961  002224  A0D8               	btfss	status,0,c
 10962  002226  D002               	goto	u6120
 10963  002228  0E01               	movlw	1
 10964  00222A  D001               	goto	u6130
 10965  00222C                     u6120:
 10966  00222C  0E00               	movlw	0
 10967  00222E                     u6130:
 10968  00222E  0100               	movlb	0	; () banked
 10969  002230  6FE6               	movwf	_IR_signal& (0+255),b
 10970  002232  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 10971                           
 10972                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10973  002234  0E01               	movlw	1
 10974  002236  EC6C  F029         	call	_lcdInst
 10975  00223A  0E68               	movlw	104
 10976  00223C  0100               	movlb	0	; () banked
 10977  00223E  6FAB               	movwf	??_sensorTest& (0+255),b
 10978  002240  0EE4               	movlw	228
 10979  002242                     u9277:
 10980  002242  2EE8               	decfsz	wreg,f,c
 10981  002244  D7FE               	bra	u9277
 10982  002246  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10983  002248  D7FC               	bra	u9277
 10984  00224A  F000               	nop	
 10985  00224C  0E80               	movlw	128
 10986  00224E  EC6C  F029         	call	_lcdInst
 10987                           
 10988                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10989  002252  0E5A               	movlw	low STR_80
 10990  002254  0100               	movlb	0	; () banked
 10991  002256  6F8E               	movwf	printf@f& (0+255),b
 10992  002258  0EFE               	movlw	high STR_80
 10993  00225A  0100               	movlb	0	; () banked
 10994  00225C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10995  00225E  C0E6  F090         	movff	_IR_signal,?_printf+2
 10996  002262  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 10997  002266  EC07  F00B         	call	_printf	;wreg free
 10998                           
 10999                           ;Test.c: 149: lcdInst(0b11000000);;
 11000  00226A  0EC0               	movlw	192
 11001  00226C  EC6C  F029         	call	_lcdInst
 11002                           
 11003                           ;Test.c: 150: printf("%d", res);
 11004  002270  0E16               	movlw	low (STR_27+14)
 11005  002272  0100               	movlb	0	; () banked
 11006  002274  6F8E               	movwf	printf@f& (0+255),b
 11007  002276  0EFE               	movlw	high (STR_27+14)
 11008  002278  0100               	movlb	0	; () banked
 11009  00227A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11010  00227C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11011  002280  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11012  002284  EC07  F00B         	call	_printf	;wreg free
 11013                           
 11014                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11015  002288  0E05               	movlw	5
 11016  00228A  0100               	movlb	0	; () banked
 11017  00228C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11018  00228E  0E0F               	movlw	15
 11019  002290  0100               	movlb	0	; () banked
 11020  002292  6FAB               	movwf	??_sensorTest& (0+255),b
 11021  002294  0EF1               	movlw	241
 11022  002296                     u9287:
 11023  002296  2EE8               	decfsz	wreg,f,c
 11024  002298  D7FE               	bra	u9287
 11025  00229A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11026  00229C  D7FC               	bra	u9287
 11027  00229E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11028  0022A0  D7FA               	bra	u9287
 11029  0022A2                     l7622:
 11030  0022A2  A281               	btfss	3969,1,c	;volatile
 11031  0022A4  D7A2               	goto	l7604
 11032                           
 11033                           ;Test.c: 152: }
 11034                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11035  0022A6  9A8B               	bcf	3979,5,c	;volatile
 11036                           
 11037                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11038  0022A8  0E01               	movlw	1
 11039  0022AA  EC6C  F029         	call	_lcdInst
 11040  0022AE  0E68               	movlw	104
 11041  0022B0  0100               	movlb	0	; () banked
 11042  0022B2  6FAB               	movwf	??_sensorTest& (0+255),b
 11043  0022B4  0EE4               	movlw	228
 11044  0022B6                     u9297:
 11045  0022B6  2EE8               	decfsz	wreg,f,c
 11046  0022B8  D7FE               	bra	u9297
 11047  0022BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11048  0022BC  D7FC               	bra	u9297
 11049  0022BE  F000               	nop	
 11050  0022C0  0E80               	movlw	128
 11051  0022C2  EC6C  F029         	call	_lcdInst
 11052                           
 11053                           ;Test.c: 162: printf("TST: MAGNETISM");
 11054  0022C6  0E87               	movlw	low STR_82
 11055  0022C8  0100               	movlb	0	; () banked
 11056  0022CA  6F8E               	movwf	printf@f& (0+255),b
 11057  0022CC  0EFE               	movlw	high STR_82
 11058  0022CE  0100               	movlb	0	; () banked
 11059  0022D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11060  0022D2  EC07  F00B         	call	_printf	;wreg free
 11061                           
 11062                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11063  0022D6  0E05               	movlw	5
 11064  0022D8  0100               	movlb	0	; () banked
 11065  0022DA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11066  0022DC  0E0F               	movlw	15
 11067  0022DE  0100               	movlb	0	; () banked
 11068  0022E0  6FAB               	movwf	??_sensorTest& (0+255),b
 11069  0022E2  0EF1               	movlw	241
 11070  0022E4                     u9307:
 11071  0022E4  2EE8               	decfsz	wreg,f,c
 11072  0022E6  D7FE               	bra	u9307
 11073  0022E8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11074  0022EA  D7FC               	bra	u9307
 11075  0022EC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11076  0022EE  D7FA               	bra	u9307
 11077                           
 11078                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11079  0022F0  D021               	goto	l7640
 11080  0022F2                     l7634:
 11081                           
 11082                           ;Test.c: 165: readMAG();
 11083  0022F2  EC25  F026         	call	_readMAG	;wreg free
 11084                           
 11085                           ;Test.c: 166: lcdInst(0b10000000);;
 11086  0022F6  0E80               	movlw	128
 11087  0022F8  EC6C  F029         	call	_lcdInst
 11088                           
 11089                           ;Test.c: 167: lcdInst(0b11000000);;
 11090  0022FC  0EC0               	movlw	192
 11091  0022FE  EC6C  F029         	call	_lcdInst
 11092                           
 11093                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11094  002302  0E2A               	movlw	low STR_83
 11095  002304  0100               	movlb	0	; () banked
 11096  002306  6F8E               	movwf	printf@f& (0+255),b
 11097  002308  0EFE               	movlw	high STR_83
 11098  00230A  0100               	movlb	0	; () banked
 11099  00230C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11100  00230E  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11101  002312  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11102  002316  EC07  F00B         	call	_printf	;wreg free
 11103                           
 11104                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11105  00231A  0E05               	movlw	5
 11106  00231C  0100               	movlb	0	; () banked
 11107  00231E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11108  002320  0E0F               	movlw	15
 11109  002322  0100               	movlb	0	; () banked
 11110  002324  6FAB               	movwf	??_sensorTest& (0+255),b
 11111  002326  0EF1               	movlw	241
 11112  002328                     u9317:
 11113  002328  2EE8               	decfsz	wreg,f,c
 11114  00232A  D7FE               	bra	u9317
 11115  00232C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11116  00232E  D7FC               	bra	u9317
 11117  002330  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11118  002332  D7FA               	bra	u9317
 11119  002334                     l7640:
 11120  002334  A281               	btfss	3969,1,c	;volatile
 11121  002336  D7DD               	goto	l7634
 11122                           
 11123                           ;Test.c: 170: }
 11124                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11125  002338  0E01               	movlw	1
 11126  00233A  EC6C  F029         	call	_lcdInst
 11127  00233E  0E68               	movlw	104
 11128  002340  0100               	movlb	0	; () banked
 11129  002342  6FAB               	movwf	??_sensorTest& (0+255),b
 11130  002344  0EE4               	movlw	228
 11131  002346                     u9327:
 11132  002346  2EE8               	decfsz	wreg,f,c
 11133  002348  D7FE               	bra	u9327
 11134  00234A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11135  00234C  D7FC               	bra	u9327
 11136  00234E  F000               	nop	
 11137  002350  0E80               	movlw	128
 11138  002352  EC6C  F029         	call	_lcdInst
 11139                           
 11140                           ;Test.c: 176: printf("TST: COND");
 11141  002356  0E87               	movlw	low STR_84
 11142  002358  0100               	movlb	0	; () banked
 11143  00235A  6F8E               	movwf	printf@f& (0+255),b
 11144  00235C  0EFF               	movlw	high STR_84
 11145  00235E  0100               	movlb	0	; () banked
 11146  002360  6F8F               	movwf	(printf@f+1)& (0+255),b
 11147  002362  EC07  F00B         	call	_printf	;wreg free
 11148                           
 11149                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11150  002366  0E05               	movlw	5
 11151  002368  0100               	movlb	0	; () banked
 11152  00236A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11153  00236C  0E0F               	movlw	15
 11154  00236E  0100               	movlb	0	; () banked
 11155  002370  6FAB               	movwf	??_sensorTest& (0+255),b
 11156  002372  0EF1               	movlw	241
 11157  002374                     u9337:
 11158  002374  2EE8               	decfsz	wreg,f,c
 11159  002376  D7FE               	bra	u9337
 11160  002378  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11161  00237A  D7FC               	bra	u9337
 11162  00237C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11163  00237E  D7FA               	bra	u9337
 11164  002380                     l7652:
 11165                           
 11166                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11167  002380  0E01               	movlw	1
 11168  002382  EC6C  F029         	call	_lcdInst
 11169  002386  0E68               	movlw	104
 11170  002388  0100               	movlb	0	; () banked
 11171  00238A  6FAB               	movwf	??_sensorTest& (0+255),b
 11172  00238C  0EE4               	movlw	228
 11173  00238E                     u9347:
 11174  00238E  2EE8               	decfsz	wreg,f,c
 11175  002390  D7FE               	bra	u9347
 11176  002392  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11177  002394  D7FC               	bra	u9347
 11178  002396  F000               	nop	
 11179  002398  0E80               	movlw	128
 11180  00239A  EC6C  F029         	call	_lcdInst
 11181                           
 11182                           ;Test.c: 180: printf("TST: COND");
 11183  00239E  0E87               	movlw	low STR_84
 11184  0023A0  0100               	movlb	0	; () banked
 11185  0023A2  6F8E               	movwf	printf@f& (0+255),b
 11186  0023A4  0EFF               	movlw	high STR_84
 11187  0023A6  0100               	movlb	0	; () banked
 11188  0023A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11189  0023AA  EC07  F00B         	call	_printf	;wreg free
 11190                           
 11191                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11192  0023AE  D01B               	goto	l7664
 11193  0023B0                     l7660:
 11194                           
 11195                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11196  0023B0  0E80               	movlw	128
 11197  0023B2  EC6C  F029         	call	_lcdInst
 11198  0023B6  0EC0               	movlw	192
 11199  0023B8  EC6C  F029         	call	_lcdInst
 11200                           
 11201                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11202  0023BC  0EA5               	movlw	low STR_86
 11203  0023BE  0100               	movlb	0	; () banked
 11204  0023C0  6F8E               	movwf	printf@f& (0+255),b
 11205  0023C2  0EFF               	movlw	high STR_86
 11206  0023C4  0100               	movlb	0	; () banked
 11207  0023C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11208  0023C8  A480               	btfss	3968,2,c	;volatile
 11209  0023CA  D004               	goto	u6160
 11210  0023CC  0100               	movlb	0	; () banked
 11211  0023CE  6BAB               	clrf	??_sensorTest& (0+255),b
 11212  0023D0  2BAB               	incf	??_sensorTest& (0+255),f,b
 11213  0023D2  D002               	goto	u6168
 11214  0023D4                     u6160:
 11215  0023D4  0100               	movlb	0	; () banked
 11216  0023D6  6BAB               	clrf	??_sensorTest& (0+255),b
 11217  0023D8                     u6168:
 11218  0023D8  0100               	movlb	0	; () banked
 11219  0023DA  51AB               	movf	??_sensorTest& (0+255),w,b
 11220  0023DC  0100               	movlb	0	; () banked
 11221  0023DE  6F90               	movwf	(?_printf+2)& (0+255),b
 11222  0023E0  6B91               	clrf	(?_printf+3)& (0+255),b
 11223  0023E2  EC07  F00B         	call	_printf	;wreg free
 11224  0023E6                     l7664:
 11225  0023E6  A281               	btfss	3969,1,c	;volatile
 11226  0023E8  D7E3               	goto	l7660
 11227                           
 11228                           ;Test.c: 187: }
 11229                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11230  0023EA  3881               	swapf	3969,w,c	;volatile
 11231  0023EC  0B0F               	andlw	15
 11232  0023EE  0A0F               	xorlw	15
 11233  0023F0  B4D8               	btfsc	status,2,c
 11234  0023F2  0012               	return	
 11235                           
 11236                           ;Test.c: 191: else{
 11237                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11238                           
 11239                           ;Test.c: 190: }
 11240                           
 11241                           ;Test.c: 189: break;
 11242  0023F4  8689               	bsf	3977,3,c	;volatile
 11243                           
 11244                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11245  0023F6  D01B               	goto	l7676
 11246  0023F8                     l7672:
 11247                           
 11248                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11249  0023F8  0E80               	movlw	128
 11250  0023FA  EC6C  F029         	call	_lcdInst
 11251  0023FE  0EC0               	movlw	192
 11252  002400  EC6C  F029         	call	_lcdInst
 11253                           
 11254                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11255  002404  0EA5               	movlw	low STR_86
 11256  002406  0100               	movlb	0	; () banked
 11257  002408  6F8E               	movwf	printf@f& (0+255),b
 11258  00240A  0EFF               	movlw	high STR_86
 11259  00240C  0100               	movlb	0	; () banked
 11260  00240E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11261  002410  A480               	btfss	3968,2,c	;volatile
 11262  002412  D004               	goto	u6190
 11263  002414  0100               	movlb	0	; () banked
 11264  002416  6BAB               	clrf	??_sensorTest& (0+255),b
 11265  002418  2BAB               	incf	??_sensorTest& (0+255),f,b
 11266  00241A  D002               	goto	u6198
 11267  00241C                     u6190:
 11268  00241C  0100               	movlb	0	; () banked
 11269  00241E  6BAB               	clrf	??_sensorTest& (0+255),b
 11270  002420                     u6198:
 11271  002420  0100               	movlb	0	; () banked
 11272  002422  51AB               	movf	??_sensorTest& (0+255),w,b
 11273  002424  0100               	movlb	0	; () banked
 11274  002426  6F90               	movwf	(?_printf+2)& (0+255),b
 11275  002428  6B91               	clrf	(?_printf+3)& (0+255),b
 11276  00242A  EC07  F00B         	call	_printf	;wreg free
 11277  00242E                     l7676:
 11278  00242E  B281               	btfsc	3969,1,c	;volatile
 11279  002430  D7E3               	goto	l7672
 11280                           
 11281                           ;Test.c: 197: }
 11282                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11283  002432  9689               	bcf	3977,3,c	;volatile
 11284  002434  D7A5               	goto	l7652
 11285  002436                     __end_of_sensorTest:
 11286                           	opt stack 0
 11287                           tblptru	equ	0xFF8
 11288                           tblptrh	equ	0xFF7
 11289                           tblptrl	equ	0xFF6
 11290                           tablat	equ	0xFF5
 11291                           prodh	equ	0xFF4
 11292                           prodl	equ	0xFF3
 11293                           intcon	equ	0xFF2
 11294                           intcon2	equ	0xFF1
 11295                           intcon3	equ	0xFF0
 11296                           postinc0	equ	0xFEE
 11297                           wreg	equ	0xFE8
 11298                           postdec1	equ	0xFE5
 11299                           fsr1l	equ	0xFE1
 11300                           indf2	equ	0xFDF
 11301                           postinc2	equ	0xFDE
 11302                           postdec2	equ	0xFDD
 11303                           fsr2h	equ	0xFDA
 11304                           fsr2l	equ	0xFD9
 11305                           status	equ	0xFD8
 11306                           
 11307 ;; *************** function _readMAG *****************
 11308 ;; Defined at:
 11309 ;;		line 29 in file "ADCFunctionality.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;		None
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;  res             2    4[BANK0 ] int 
 11314 ;; Return value:  Size  Location     Type
 11315 ;;                  1    wreg      void 
 11316 ;; Registers used:
 11317 ;;		wreg, status,2, status,0, cstack
 11318 ;; Tracked objects:
 11319 ;;		On entry : 0/0
 11320 ;;		On exit  : 0/0
 11321 ;;		Unchanged: 0/0
 11322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11327 ;;Total ram usage:        4 bytes
 11328 ;; Hardware stack levels used:    1
 11329 ;; Hardware stack levels required when called:    8
 11330 ;; This function calls:
 11331 ;;		_readADC
 11332 ;; This function is called by:
 11333 ;;		_getMAG
 11334 ;;		_sensorTest
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text38
 11339  004C4A                     __ptext38:
 11340                           	opt stack 0
 11341  004C4A                     _readMAG:
 11342                           	opt stack 19
 11343                           
 11344                           ;ADCFunctionality.c: 30: readADC(1);
 11345                           
 11346                           ;incstack = 0
 11347  004C4A  0E01               	movlw	1
 11348  004C4C  EC63  F028         	call	_readADC
 11349                           
 11350                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11351  004C50  50C3               	movf	4035,w,c	;volatile
 11352  004C52  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11353  004C56  0100               	movlb	0	; () banked
 11354  004C58  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11355  004C5A  C082  F083         	movff	??_readMAG,??_readMAG+1
 11356  004C5E  0100               	movlb	0	; () banked
 11357  004C60  6B82               	clrf	??_readMAG& (0+255),b
 11358  004C62  0100               	movlb	0	; () banked
 11359  004C64  1182               	iorwf	??_readMAG& (0+255),w,b
 11360  004C66  0100               	movlb	0	; () banked
 11361  004C68  6F84               	movwf	readMAG@res& (0+255),b
 11362  004C6A  0100               	movlb	0	; () banked
 11363  004C6C  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11364  004C6E  0100               	movlb	0	; () banked
 11365  004C70  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11369  004C72  0100               	movlb	0	; () banked
 11370  004C74  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11371  004C76  D008               	goto	u4551
 11372  004C78  0100               	movlb	0	; () banked
 11373  004C7A  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11374  004C7C  E107               	bnz	u4550
 11375  004C7E  0E96               	movlw	150
 11376  004C80  0100               	movlb	0	; () banked
 11377  004C82  5D84               	subwf	readMAG@res& (0+255),w,b
 11378  004C84  B0D8               	btfsc	status,0,c
 11379  004C86  D002               	goto	u4550
 11380  004C88                     u4551:
 11381  004C88  0E01               	movlw	1
 11382  004C8A  D001               	goto	u4560
 11383  004C8C                     u4550:
 11384  004C8C  0E00               	movlw	0
 11385  004C8E                     u4560:
 11386  004C8E  0100               	movlb	0	; () banked
 11387  004C90  6FE8               	movwf	_MAG_signal& (0+255),b
 11388  004C92  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11389                           
 11390                           ; BSR set to: 0
 11391  004C94  0012               	return		;funcret
 11392  004C96                     __end_of_readMAG:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           intcon3	equ	0xFF0
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           postdec1	equ	0xFE5
 11406                           fsr1l	equ	0xFE1
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           fsr2h	equ	0xFDA
 11411                           fsr2l	equ	0xFD9
 11412                           status	equ	0xFD8
 11413                           
 11414 ;; *************** function _algorithmTest *****************
 11415 ;; Defined at:
 11416 ;;		line 80 in file "Test.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;		None
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;		None
 11421 ;; Return value:  Size  Location     Type
 11422 ;;                  1    wreg      void 
 11423 ;; Registers used:
 11424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11425 ;; Tracked objects:
 11426 ;;		On entry : 0/0
 11427 ;;		On exit  : 0/0
 11428 ;;		Unchanged: 0/0
 11429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11434 ;;Total ram usage:        2 bytes
 11435 ;; Hardware stack levels used:    1
 11436 ;; Hardware stack levels required when called:   10
 11437 ;; This function calls:
 11438 ;;		_lcdInst
 11439 ;;		_printf
 11440 ;; This function is called by:
 11441 ;;		_Test
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text39
 11446  003F54                     __ptext39:
 11447                           	opt stack 0
 11448  003F54                     _algorithmTest:
 11449                           	opt stack 19
 11450                           
 11451                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;incstack = 0
 11455  003F54  0E01               	movlw	1
 11456  003F56  EC6C  F029         	call	_lcdInst
 11457  003F5A  0E68               	movlw	104
 11458  003F5C  0100               	movlb	0	; () banked
 11459  003F5E  6FAB               	movwf	??_algorithmTest& (0+255),b
 11460  003F60  0EE4               	movlw	228
 11461  003F62                     u9357:
 11462  003F62  2EE8               	decfsz	wreg,f,c
 11463  003F64  D7FE               	bra	u9357
 11464  003F66  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11465  003F68  D7FC               	bra	u9357
 11466  003F6A  F000               	nop	
 11467  003F6C  0E80               	movlw	128
 11468  003F6E  EC6C  F029         	call	_lcdInst
 11469                           
 11470                           ;Test.c: 83: printf("ALGORITHM TEST");
 11471  003F72  0ED2               	movlw	low STR_70
 11472  003F74  0100               	movlb	0	; () banked
 11473  003F76  6F8E               	movwf	printf@f& (0+255),b
 11474  003F78  0EFE               	movlw	high STR_70
 11475  003F7A  0100               	movlb	0	; () banked
 11476  003F7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11477  003F7E  EC07  F00B         	call	_printf	;wreg free
 11478                           
 11479                           ;Test.c: 84: lcdInst(0b11000000);;
 11480  003F82  0EC0               	movlw	192
 11481  003F84  EC6C  F029         	call	_lcdInst
 11482                           
 11483                           ;Test.c: 85: printf("PUSH TO START");
 11484  003F88  0E0B               	movlw	low STR_71
 11485  003F8A  0100               	movlb	0	; () banked
 11486  003F8C  6F8E               	movwf	printf@f& (0+255),b
 11487  003F8E  0EFF               	movlw	high STR_71
 11488  003F90  0100               	movlb	0	; () banked
 11489  003F92  6F8F               	movwf	(printf@f+1)& (0+255),b
 11490  003F94  EC07  F00B         	call	_printf	;wreg free
 11491                           
 11492                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11493  003F98  0E05               	movlw	5
 11494  003F9A  0100               	movlb	0	; () banked
 11495  003F9C  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11496  003F9E  0E0F               	movlw	15
 11497  003FA0  0100               	movlb	0	; () banked
 11498  003FA2  6FAB               	movwf	??_algorithmTest& (0+255),b
 11499  003FA4  0EF1               	movlw	241
 11500  003FA6                     u9367:
 11501  003FA6  2EE8               	decfsz	wreg,f,c
 11502  003FA8  D7FE               	bra	u9367
 11503  003FAA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11504  003FAC  D7FC               	bra	u9367
 11505  003FAE  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11506  003FB0  D7FA               	bra	u9367
 11507  003FB2                     l1170:
 11508  003FB2  A281               	btfss	3969,1,c	;volatile
 11509  003FB4  D7FE               	goto	l1170
 11510  003FB6                     l1173:
 11511  003FB6  B281               	btfsc	3969,1,c	;volatile
 11512  003FB8  D7FE               	goto	l1173
 11513                           
 11514                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11515  003FBA  0E01               	movlw	1
 11516  003FBC  EC6C  F029         	call	_lcdInst
 11517  003FC0  0E68               	movlw	104
 11518  003FC2  0100               	movlb	0	; () banked
 11519  003FC4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11520  003FC6  0EE4               	movlw	228
 11521  003FC8                     u9377:
 11522  003FC8  2EE8               	decfsz	wreg,f,c
 11523  003FCA  D7FE               	bra	u9377
 11524  003FCC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11525  003FCE  D7FC               	bra	u9377
 11526  003FD0  F000               	nop	
 11527  003FD2  0E80               	movlw	128
 11528  003FD4  EC6C  F029         	call	_lcdInst
 11529                           
 11530                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11531  003FD8  0E5F               	movlw	low STR_72
 11532  003FDA  0100               	movlb	0	; () banked
 11533  003FDC  6F8E               	movwf	printf@f& (0+255),b
 11534  003FDE  0EFC               	movlw	high STR_72
 11535  003FE0  0100               	movlb	0	; () banked
 11536  003FE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11537  003FE4  EC07  F00B         	call	_printf	;wreg free
 11538                           
 11539                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11540  003FE8  0EEF               	movlw	low STR_73
 11541  003FEA  0100               	movlb	0	; () banked
 11542  003FEC  6F8E               	movwf	printf@f& (0+255),b
 11543  003FEE  0EFE               	movlw	high STR_73
 11544  003FF0  0100               	movlb	0	; () banked
 11545  003FF2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11546  003FF4  EC07  F00B         	call	_printf	;wreg free
 11547                           
 11548                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11549  003FF8  0E4F               	movlw	low STR_74
 11550  003FFA  0100               	movlb	0	; () banked
 11551  003FFC  6F8E               	movwf	printf@f& (0+255),b
 11552  003FFE  0EFF               	movlw	high STR_74
 11553  004000  0100               	movlb	0	; () banked
 11554  004002  6F8F               	movwf	(printf@f+1)& (0+255),b
 11555  004004  EC07  F00B         	call	_printf	;wreg free
 11556                           
 11557                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11558  004008  0EB4               	movlw	low STR_75
 11559  00400A  0100               	movlb	0	; () banked
 11560  00400C  6F8E               	movwf	printf@f& (0+255),b
 11561  00400E  0EFE               	movlw	high STR_75
 11562  004010  0100               	movlb	0	; () banked
 11563  004012  6F8F               	movwf	(printf@f+1)& (0+255),b
 11564  004014  EC07  F00B         	call	_printf	;wreg free
 11565                           
 11566                           ;Test.c: 121: printf("ALG5: NO CANS");
 11567  004018  0EFD               	movlw	low STR_76
 11568  00401A  0100               	movlb	0	; () banked
 11569  00401C  6F8E               	movwf	printf@f& (0+255),b
 11570  00401E  0EFE               	movlw	high STR_76
 11571  004020  0100               	movlb	0	; () banked
 11572  004022  6F8F               	movwf	(printf@f+1)& (0+255),b
 11573  004024  EC07  F00B         	call	_printf	;wreg free
 11574  004028  0012               	return		;funcret
 11575  00402A                     __end_of_algorithmTest:
 11576                           	opt stack 0
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           intcon2	equ	0xFF1
 11585                           intcon3	equ	0xFF0
 11586                           postinc0	equ	0xFEE
 11587                           wreg	equ	0xFE8
 11588                           postdec1	equ	0xFE5
 11589                           fsr1l	equ	0xFE1
 11590                           indf2	equ	0xFDF
 11591                           postinc2	equ	0xFDE
 11592                           postdec2	equ	0xFDD
 11593                           fsr2h	equ	0xFDA
 11594                           fsr2l	equ	0xFD9
 11595                           status	equ	0xFD8
 11596                           
 11597 ;; *************** function _actuatorTest *****************
 11598 ;; Defined at:
 11599 ;;		line 203 in file "Test.c"
 11600 ;; Parameters:    Size  Location     Type
 11601 ;;		None
 11602 ;; Auto vars:     Size  Location     Type
 11603 ;;  i               1   45[BANK0 ] unsigned char 
 11604 ;;  i               1   67[BANK0 ] unsigned char 
 11605 ;;  i               1   66[BANK0 ] unsigned char 
 11606 ;;  i               1   65[BANK0 ] unsigned char 
 11607 ;;  i               1   64[BANK0 ] unsigned char 
 11608 ;;  i               1   63[BANK0 ] unsigned char 
 11609 ;;  i               1   62[BANK0 ] unsigned char 
 11610 ;;  i               1   61[BANK0 ] unsigned char 
 11611 ;;  i               1   60[BANK0 ] unsigned char 
 11612 ;;  i               1   59[BANK0 ] unsigned char 
 11613 ;;  i               1   58[BANK0 ] unsigned char 
 11614 ;;  i               1   57[BANK0 ] unsigned char 
 11615 ;;  i               1   56[BANK0 ] unsigned char 
 11616 ;;  i               1   55[BANK0 ] unsigned char 
 11617 ;;  i               1   54[BANK0 ] unsigned char 
 11618 ;;  i               1   53[BANK0 ] unsigned char 
 11619 ;;  i               1   52[BANK0 ] unsigned char 
 11620 ;;  i               1   51[BANK0 ] unsigned char 
 11621 ;;  i               1   50[BANK0 ] unsigned char 
 11622 ;;  i               1   49[BANK0 ] unsigned char 
 11623 ;;  i               1   48[BANK0 ] unsigned char 
 11624 ;;  i               1   47[BANK0 ] unsigned char 
 11625 ;;  i               1   46[BANK0 ] unsigned char 
 11626 ;;  i               2   68[BANK0 ] int 
 11627 ;; Return value:  Size  Location     Type
 11628 ;;                  1    wreg      void 
 11629 ;; Registers used:
 11630 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11637 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11639 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;Total ram usage:       27 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:   10
 11643 ;; This function calls:
 11644 ;;		_lcdInst
 11645 ;;		_printf
 11646 ;;		_updateServoPosition
 11647 ;; This function is called by:
 11648 ;;		_Test
 11649 ;; This function uses a non-reentrant model
 11650 ;;
 11651                           
 11652                           	psect	text40
 11653  000012                     __ptext40:
 11654                           	opt stack 0
 11655  000012                     _actuatorTest:
 11656                           	opt stack 19
 11657                           
 11658                           ;Test.c: 205: int i = 0;
 11659                           
 11660                           ;incstack = 0
 11661  000012  0E00               	movlw	0
 11662  000014  0100               	movlb	0	; () banked
 11663  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11664  000018  0E00               	movlw	0
 11665  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11669  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11673  00001E  0E01               	movlw	1
 11674  000020  EC6C  F029         	call	_lcdInst
 11675  000024  0E68               	movlw	104
 11676  000026  0100               	movlb	0	; () banked
 11677  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11678  00002A  0EE4               	movlw	228
 11679  00002C                     u9387:
 11680  00002C  2EE8               	decfsz	wreg,f,c
 11681  00002E  D7FE               	bra	u9387
 11682  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11683  000032  D7FC               	bra	u9387
 11684  000034  F000               	nop	
 11685  000036  0E80               	movlw	128
 11686  000038  EC6C  F029         	call	_lcdInst
 11687                           
 11688                           ;Test.c: 209: printf("ACTUATORS");
 11689  00003C  0E91               	movlw	low STR_88
 11690  00003E  0100               	movlb	0	; () banked
 11691  000040  6F8E               	movwf	printf@f& (0+255),b
 11692  000042  0EFF               	movlw	high STR_88
 11693  000044  0100               	movlb	0	; () banked
 11694  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11695  000048  EC07  F00B         	call	_printf	;wreg free
 11696                           
 11697                           ;Test.c: 210: lcdInst(0b11000000);;
 11698  00004C  0EC0               	movlw	192
 11699  00004E  EC6C  F029         	call	_lcdInst
 11700                           
 11701                           ;Test.c: 211: printf("PUSH TO START");
 11702  000052  0E0B               	movlw	low STR_71
 11703  000054  0100               	movlb	0	; () banked
 11704  000056  6F8E               	movwf	printf@f& (0+255),b
 11705  000058  0EFF               	movlw	high STR_71
 11706  00005A  0100               	movlb	0	; () banked
 11707  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11708  00005E  EC07  F00B         	call	_printf	;wreg free
 11709                           
 11710                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11711  000062  0E05               	movlw	5
 11712  000064  0100               	movlb	0	; () banked
 11713  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11714  000068  0E0F               	movlw	15
 11715  00006A  0100               	movlb	0	; () banked
 11716  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11717  00006E  0EF1               	movlw	241
 11718  000070                     u9397:
 11719  000070  2EE8               	decfsz	wreg,f,c
 11720  000072  D7FE               	bra	u9397
 11721  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11722  000076  D7FC               	bra	u9397
 11723  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11724  00007A  D7FA               	bra	u9397
 11725  00007C                     l1205:
 11726  00007C  A281               	btfss	3969,1,c	;volatile
 11727  00007E  D7FE               	goto	l1205
 11728  000080                     l1208:
 11729  000080  B281               	btfsc	3969,1,c	;volatile
 11730  000082  D7FE               	goto	l1208
 11731                           
 11732                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11733  000084  0E01               	movlw	1
 11734  000086  EC6C  F029         	call	_lcdInst
 11735  00008A  0E68               	movlw	104
 11736  00008C  0100               	movlb	0	; () banked
 11737  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11738  000090  0EE4               	movlw	228
 11739  000092                     u9407:
 11740  000092  2EE8               	decfsz	wreg,f,c
 11741  000094  D7FE               	bra	u9407
 11742  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11743  000098  D7FC               	bra	u9407
 11744  00009A  F000               	nop	
 11745  00009C  0E80               	movlw	128
 11746  00009E  EC6C  F029         	call	_lcdInst
 11747                           
 11748                           ;Test.c: 220: printf("TST: DC MOTORS");
 11749  0000A2  0EC3               	movlw	low STR_90
 11750  0000A4  0100               	movlb	0	; () banked
 11751  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11752  0000A8  0EFE               	movlw	high STR_90
 11753  0000AA  0100               	movlb	0	; () banked
 11754  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11755  0000AE  EC07  F00B         	call	_printf	;wreg free
 11756                           
 11757                           ;Test.c: 221: lcdInst(0b11000000);;
 11758  0000B2  0EC0               	movlw	192
 11759  0000B4  EC6C  F029         	call	_lcdInst
 11760                           
 11761                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11762  0000B8  0EE1               	movlw	low STR_91
 11763  0000BA  0100               	movlb	0	; () banked
 11764  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11765  0000BE  0EFE               	movlw	high STR_91
 11766  0000C0  0100               	movlb	0	; () banked
 11767  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11768  0000C4  EC07  F00B         	call	_printf	;wreg free
 11769                           
 11770                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11771  0000C8  848A               	bsf	3978,2,c	;volatile
 11772                           
 11773                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11774  0000CA  0E00               	movlw	0
 11775  0000CC  0100               	movlb	0	; () banked
 11776  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11777  0000D0  0E00               	movlw	0
 11778  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11779                           
 11780                           ; BSR set to: 0
 11781  0000D4  0100               	movlb	0	; () banked
 11782  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11783  0000D8  D008               	goto	l7716
 11784  0000DA  0100               	movlb	0	; () banked
 11785  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11786  0000DE  E123               	bnz	l1212
 11787  0000E0  0E05               	movlw	5
 11788  0000E2  0100               	movlb	0	; () banked
 11789  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11790  0000E6  B0D8               	btfsc	status,0,c
 11791  0000E8  D01E               	goto	l1212
 11792  0000EA                     l7716:
 11793                           
 11794                           ; BSR set to: 0
 11795  0000EA  0E00               	movlw	0
 11796  0000EC  0100               	movlb	0	; () banked
 11797  0000EE  6FAD               	movwf	actuatorTest@i_1734& (0+255),b
 11798  0000F0                     l7718:
 11799                           
 11800                           ; BSR set to: 0
 11801  0000F0  0E63               	movlw	99
 11802  0000F2  0100               	movlb	0	; () banked
 11803  0000F4  65AD               	cpfsgt	actuatorTest@i_1734& (0+255),b
 11804  0000F6  D001               	goto	l7722
 11805  0000F8  D00C               	goto	l7726
 11806  0000FA                     l7722:
 11807                           
 11808                           ; BSR set to: 0
 11809  0000FA  0E68               	movlw	104
 11810  0000FC  0100               	movlb	0	; () banked
 11811  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11812  000100  0EE4               	movlw	228
 11813  000102                     u9417:
 11814  000102  2EE8               	decfsz	wreg,f,c
 11815  000104  D7FE               	bra	u9417
 11816  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11817  000108  D7FC               	bra	u9417
 11818  00010A  F000               	nop	
 11819  00010C  0100               	movlb	0	; () banked
 11820  00010E  2BAD               	incf	actuatorTest@i_1734& (0+255),f,b
 11821  000110  D7EF               	goto	l7718
 11822  000112                     l7726:
 11823                           
 11824                           ; BSR set to: 0
 11825  000112  0100               	movlb	0	; () banked
 11826  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11827  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11828                           
 11829                           ; BSR set to: 0
 11830  000118  0100               	movlb	0	; () banked
 11831  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11832  00011C  D7E6               	goto	l7716
 11833  00011E  0100               	movlb	0	; () banked
 11834  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11835  000122  E101               	bnz	u6260
 11836  000124  D7DD               	goto	L9
 11837  000126                     u6260:
 11838  000126                     l1212:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11842  000126  948A               	bcf	3978,2,c	;volatile
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11846  000128  0E01               	movlw	1
 11847  00012A  EC6C  F029         	call	_lcdInst
 11848  00012E  0E68               	movlw	104
 11849  000130  0100               	movlb	0	; () banked
 11850  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11851  000134  0EE4               	movlw	228
 11852  000136                     u9427:
 11853  000136  2EE8               	decfsz	wreg,f,c
 11854  000138  D7FE               	bra	u9427
 11855  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11856  00013C  D7FC               	bra	u9427
 11857  00013E  F000               	nop	
 11858  000140  0E80               	movlw	128
 11859  000142  EC6C  F029         	call	_lcdInst
 11860                           
 11861                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11862  000146  0E70               	movlw	low STR_92
 11863  000148  0100               	movlb	0	; () banked
 11864  00014A  6F8E               	movwf	printf@f& (0+255),b
 11865  00014C  0EFC               	movlw	high STR_92
 11866  00014E  0100               	movlb	0	; () banked
 11867  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11868  000152  EC07  F00B         	call	_printf	;wreg free
 11869                           
 11870                           ;Test.c: 233: lcdInst(0b11000000);;
 11871  000156  0EC0               	movlw	192
 11872  000158  EC6C  F029         	call	_lcdInst
 11873                           
 11874                           ;Test.c: 234: printf("PIN RA3...");
 11875  00015C  0E5B               	movlw	low STR_93
 11876  00015E  0100               	movlb	0	; () banked
 11877  000160  6F8E               	movwf	printf@f& (0+255),b
 11878  000162  0EFF               	movlw	high STR_93
 11879  000164  0100               	movlb	0	; () banked
 11880  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11881  000168  EC07  F00B         	call	_printf	;wreg free
 11882                           
 11883                           ;Test.c: 235: for(i=0;i<5;i++){
 11884  00016C  0E00               	movlw	0
 11885  00016E  0100               	movlb	0	; () banked
 11886  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11887  000172  0E00               	movlw	0
 11888  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11889                           
 11890                           ; BSR set to: 0
 11891  000176  0100               	movlb	0	; () banked
 11892  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11893  00017A  D008               	goto	l1215
 11894  00017C  0100               	movlb	0	; () banked
 11895  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11896  000180  E12C               	bnz	l1216
 11897  000182  0E05               	movlw	5
 11898  000184  0100               	movlb	0	; () banked
 11899  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11900  000188  B0D8               	btfsc	status,0,c
 11901  00018A  D027               	goto	l1216
 11902  00018C                     l1215:
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11906  00018C  8689               	bsf	3977,3,c	;volatile
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11910  00018E  0E0D               	movlw	13
 11911  000190  0100               	movlb	0	; () banked
 11912  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11913  000194  0E2D               	movlw	45
 11914  000196  0100               	movlb	0	; () banked
 11915  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11916  00019A  0ED7               	movlw	215
 11917  00019C                     u9437:
 11918  00019C  2EE8               	decfsz	wreg,f,c
 11919  00019E  D7FE               	bra	u9437
 11920  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11921  0001A2  D7FC               	bra	u9437
 11922  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11923  0001A6  D7FA               	bra	u9437
 11924  0001A8  D000               	nop2	
 11925                           
 11926                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11927  0001AA  9689               	bcf	3977,3,c	;volatile
 11928                           
 11929                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11930  0001AC  0E1D               	movlw	29
 11931  0001AE  0100               	movlb	0	; () banked
 11932  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11933  0001B2  0E69               	movlw	105
 11934  0001B4  0100               	movlb	0	; () banked
 11935  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11936  0001B8  0EA5               	movlw	165
 11937  0001BA                     u9447:
 11938  0001BA  2EE8               	decfsz	wreg,f,c
 11939  0001BC  D7FE               	bra	u9447
 11940  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11941  0001C0  D7FC               	bra	u9447
 11942  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11943  0001C4  D7FA               	bra	u9447
 11944  0001C6  0100               	movlb	0	; () banked
 11945  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11946  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11947  0001CC  0100               	movlb	0	; () banked
 11948  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11949  0001D0  D7DD               	goto	l1215
 11950  0001D2  0100               	movlb	0	; () banked
 11951  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11952  0001D6  E101               	bnz	u6280
 11953  0001D8  D7D4               	goto	L10
 11954  0001DA                     u6280:
 11955  0001DA                     l1216:
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;Test.c: 240: }
 11959                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11960  0001DA  9689               	bcf	3977,3,c	;volatile
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11964  0001DC  0E01               	movlw	1
 11965  0001DE  EC6C  F029         	call	_lcdInst
 11966  0001E2  0E68               	movlw	104
 11967  0001E4  0100               	movlb	0	; () banked
 11968  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11969  0001E8  0EE4               	movlw	228
 11970  0001EA                     u9457:
 11971  0001EA  2EE8               	decfsz	wreg,f,c
 11972  0001EC  D7FE               	bra	u9457
 11973  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11974  0001F0  D7FC               	bra	u9457
 11975  0001F2  F000               	nop	
 11976  0001F4  0E80               	movlw	128
 11977  0001F6  EC6C  F029         	call	_lcdInst
 11978                           
 11979                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11980  0001FA  0E81               	movlw	low STR_94
 11981  0001FC  0100               	movlb	0	; () banked
 11982  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11983  000200  0EFC               	movlw	high STR_94
 11984  000202  0100               	movlb	0	; () banked
 11985  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11986  000206  EC07  F00B         	call	_printf	;wreg free
 11987                           
 11988                           ;Test.c: 249: lcdInst(0b11000000);;
 11989  00020A  0EC0               	movlw	192
 11990  00020C  EC6C  F029         	call	_lcdInst
 11991                           
 11992                           ;Test.c: 250: printf("PIN RA4...");
 11993  000210  0E66               	movlw	low STR_95
 11994  000212  0100               	movlb	0	; () banked
 11995  000214  6F8E               	movwf	printf@f& (0+255),b
 11996  000216  0EFF               	movlw	high STR_95
 11997  000218  0100               	movlb	0	; () banked
 11998  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11999  00021C  EC07  F00B         	call	_printf	;wreg free
 12000                           
 12001                           ;Test.c: 251: for(i=0;i<5;i++){
 12002  000220  0E00               	movlw	0
 12003  000222  0100               	movlb	0	; () banked
 12004  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12005  000226  0E00               	movlw	0
 12006  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12007                           
 12008                           ; BSR set to: 0
 12009  00022A  0100               	movlb	0	; () banked
 12010  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12011  00022E  D008               	goto	l1217
 12012  000230  0100               	movlb	0	; () banked
 12013  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12014  000234  E12C               	bnz	l1218
 12015  000236  0E05               	movlw	5
 12016  000238  0100               	movlb	0	; () banked
 12017  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12018  00023C  B0D8               	btfsc	status,0,c
 12019  00023E  D027               	goto	l1218
 12020  000240                     l1217:
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12024  000240  8889               	bsf	3977,4,c	;volatile
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12028  000242  0E0D               	movlw	13
 12029  000244  0100               	movlb	0	; () banked
 12030  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12031  000248  0E2D               	movlw	45
 12032  00024A  0100               	movlb	0	; () banked
 12033  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12034  00024E  0ED7               	movlw	215
 12035  000250                     u9467:
 12036  000250  2EE8               	decfsz	wreg,f,c
 12037  000252  D7FE               	bra	u9467
 12038  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12039  000256  D7FC               	bra	u9467
 12040  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12041  00025A  D7FA               	bra	u9467
 12042  00025C  D000               	nop2	
 12043                           
 12044                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12045  00025E  9889               	bcf	3977,4,c	;volatile
 12046                           
 12047                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12048  000260  0E1D               	movlw	29
 12049  000262  0100               	movlb	0	; () banked
 12050  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12051  000266  0E69               	movlw	105
 12052  000268  0100               	movlb	0	; () banked
 12053  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12054  00026C  0EA5               	movlw	165
 12055  00026E                     u9477:
 12056  00026E  2EE8               	decfsz	wreg,f,c
 12057  000270  D7FE               	bra	u9477
 12058  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12059  000274  D7FC               	bra	u9477
 12060  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12061  000278  D7FA               	bra	u9477
 12062  00027A  0100               	movlb	0	; () banked
 12063  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12064  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12065  000280  0100               	movlb	0	; () banked
 12066  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12067  000284  D7DD               	goto	l1217
 12068  000286  0100               	movlb	0	; () banked
 12069  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12070  00028A  E101               	bnz	u6300
 12071  00028C  D7D4               	goto	L11
 12072  00028E                     u6300:
 12073  00028E                     l1218:
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;Test.c: 256: }
 12077                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12078  00028E  9889               	bcf	3977,4,c	;volatile
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12082  000290  0E01               	movlw	1
 12083  000292  EC6C  F029         	call	_lcdInst
 12084  000296  0E68               	movlw	104
 12085  000298  0100               	movlb	0	; () banked
 12086  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12087  00029C  0EE4               	movlw	228
 12088  00029E                     u9487:
 12089  00029E  2EE8               	decfsz	wreg,f,c
 12090  0002A0  D7FE               	bra	u9487
 12091  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12092  0002A4  D7FC               	bra	u9487
 12093  0002A6  F000               	nop	
 12094  0002A8  0E80               	movlw	128
 12095  0002AA  EC6C  F029         	call	_lcdInst
 12096                           
 12097                           ;Test.c: 261: machine_state = Sorting_state;
 12098  0002AE  0E01               	movlw	1
 12099  0002B0  0100               	movlb	0	; () banked
 12100  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;Test.c: 262: was_low_1 = 0;
 12104  0002B4  0E00               	movlw	0
 12105  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12106  0002B8  0E00               	movlw	0
 12107  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;Test.c: 263: was_low_1 = 0;
 12111  0002BC  0E00               	movlw	0
 12112  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12113  0002C0  0E00               	movlw	0
 12114  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;Test.c: 270: printf("TST: PAN SERVO");
 12118  0002C4  0EA5               	movlw	low STR_96
 12119  0002C6  0100               	movlb	0	; () banked
 12120  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12121  0002CA  0EFE               	movlw	high STR_96
 12122  0002CC  0100               	movlb	0	; () banked
 12123  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12124  0002D0  EC07  F00B         	call	_printf	;wreg free
 12125                           
 12126                           ;Test.c: 271: lcdInst(0b11000000);;
 12127  0002D4  0EC0               	movlw	192
 12128  0002D6  EC6C  F029         	call	_lcdInst
 12129                           
 12130                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12131  0002DA  0E0A               	movlw	low STR_97
 12132  0002DC  0100               	movlb	0	; () banked
 12133  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12134  0002E0  0EFC               	movlw	high STR_97
 12135  0002E2  0100               	movlb	0	; () banked
 12136  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12137  0002E6  EC07  F00B         	call	_printf	;wreg free
 12138                           
 12139                           ;Test.c: 273: updateServoPosition(1200, 1);
 12140  0002EA  0E04               	movlw	4
 12141  0002EC  0100               	movlb	0	; () banked
 12142  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12143  0002F0  0EB0               	movlw	176
 12144  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12145  0002F4  0E00               	movlw	0
 12146  0002F6  0100               	movlb	0	; () banked
 12147  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12148  0002FA  0E01               	movlw	1
 12149  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12150  0002FE  ECB9  F022         	call	_updateServoPosition	;wreg free
 12151                           
 12152                           ;Test.c: 274: TMR1ON = 1;
 12153  000302  80CD               	bsf	4045,0,c	;volatile
 12154                           
 12155                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12156  000304  0E00               	movlw	0
 12157  000306  0100               	movlb	0	; () banked
 12158  000308  6FAE               	movwf	actuatorTest@i_1741& (0+255),b
 12159  00030A                     l7802:
 12160                           
 12161                           ; BSR set to: 0
 12162  00030A  0E63               	movlw	99
 12163  00030C  0100               	movlb	0	; () banked
 12164  00030E  65AE               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12165  000310  D001               	goto	l7806
 12166  000312  D00C               	goto	l7810
 12167  000314                     l7806:
 12168                           
 12169                           ; BSR set to: 0
 12170  000314  0E68               	movlw	104
 12171  000316  0100               	movlb	0	; () banked
 12172  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12173  00031A  0EE4               	movlw	228
 12174  00031C                     u9497:
 12175  00031C  2EE8               	decfsz	wreg,f,c
 12176  00031E  D7FE               	bra	u9497
 12177  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12178  000322  D7FC               	bra	u9497
 12179  000324  F000               	nop	
 12180  000326  0100               	movlb	0	; () banked
 12181  000328  2BAE               	incf	actuatorTest@i_1741& (0+255),f,b
 12182  00032A  D7EF               	goto	l7802
 12183  00032C                     l7810:
 12184                           
 12185                           ; BSR set to: 0
 12186  00032C  0E00               	movlw	0
 12187  00032E  0100               	movlb	0	; () banked
 12188  000330  6FAF               	movwf	actuatorTest@i_1742& (0+255),b
 12189  000332                     l7812:
 12190                           
 12191                           ; BSR set to: 0
 12192  000332  0E63               	movlw	99
 12193  000334  0100               	movlb	0	; () banked
 12194  000336  65AF               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12195  000338  D001               	goto	l7816
 12196  00033A  D00C               	goto	l7820
 12197  00033C                     l7816:
 12198                           
 12199                           ; BSR set to: 0
 12200  00033C  0E68               	movlw	104
 12201  00033E  0100               	movlb	0	; () banked
 12202  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12203  000342  0EE4               	movlw	228
 12204  000344                     u9507:
 12205  000344  2EE8               	decfsz	wreg,f,c
 12206  000346  D7FE               	bra	u9507
 12207  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12208  00034A  D7FC               	bra	u9507
 12209  00034C  F000               	nop	
 12210  00034E  0100               	movlb	0	; () banked
 12211  000350  2BAF               	incf	actuatorTest@i_1742& (0+255),f,b
 12212  000352  D7EF               	goto	l7812
 12213  000354                     l7820:
 12214                           
 12215                           ; BSR set to: 0
 12216                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12217  000354  0E80               	movlw	128
 12218  000356  EC6C  F029         	call	_lcdInst
 12219  00035A  0EC0               	movlw	192
 12220  00035C  EC6C  F029         	call	_lcdInst
 12221                           
 12222                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12223  000360  0EF9               	movlw	low STR_98
 12224  000362  0100               	movlb	0	; () banked
 12225  000364  6F8E               	movwf	printf@f& (0+255),b
 12226  000366  0EFB               	movlw	high STR_98
 12227  000368  0100               	movlb	0	; () banked
 12228  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12229  00036C  EC07  F00B         	call	_printf	;wreg free
 12230                           
 12231                           ;Test.c: 279: updateServoPosition(500, 1);
 12232  000370  0E01               	movlw	1
 12233  000372  0100               	movlb	0	; () banked
 12234  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12235  000376  0EF4               	movlw	244
 12236  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12237  00037A  0E00               	movlw	0
 12238  00037C  0100               	movlb	0	; () banked
 12239  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12240  000380  0E01               	movlw	1
 12241  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12242  000384  ECB9  F022         	call	_updateServoPosition	;wreg free
 12243                           
 12244                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12245  000388  0E00               	movlw	0
 12246  00038A  0100               	movlb	0	; () banked
 12247  00038C  6FB0               	movwf	actuatorTest@i_1744& (0+255),b
 12248  00038E                     l7828:
 12249                           
 12250                           ; BSR set to: 0
 12251  00038E  0E63               	movlw	99
 12252  000390  0100               	movlb	0	; () banked
 12253  000392  65B0               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12254  000394  D001               	goto	l7832
 12255  000396  D00C               	goto	l7836
 12256  000398                     l7832:
 12257                           
 12258                           ; BSR set to: 0
 12259  000398  0E68               	movlw	104
 12260  00039A  0100               	movlb	0	; () banked
 12261  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12262  00039E  0EE4               	movlw	228
 12263  0003A0                     u9517:
 12264  0003A0  2EE8               	decfsz	wreg,f,c
 12265  0003A2  D7FE               	bra	u9517
 12266  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12267  0003A6  D7FC               	bra	u9517
 12268  0003A8  F000               	nop	
 12269  0003AA  0100               	movlb	0	; () banked
 12270  0003AC  2BB0               	incf	actuatorTest@i_1744& (0+255),f,b
 12271  0003AE  D7EF               	goto	l7828
 12272  0003B0                     l7836:
 12273                           
 12274                           ; BSR set to: 0
 12275  0003B0  0E00               	movlw	0
 12276  0003B2  0100               	movlb	0	; () banked
 12277  0003B4  6FB1               	movwf	actuatorTest@i_1745& (0+255),b
 12278  0003B6                     l7838:
 12279                           
 12280                           ; BSR set to: 0
 12281  0003B6  0E63               	movlw	99
 12282  0003B8  0100               	movlb	0	; () banked
 12283  0003BA  65B1               	cpfsgt	actuatorTest@i_1745& (0+255),b
 12284  0003BC  D001               	goto	l7842
 12285  0003BE  D00C               	goto	l7846
 12286  0003C0                     l7842:
 12287                           
 12288                           ; BSR set to: 0
 12289  0003C0  0E68               	movlw	104
 12290  0003C2  0100               	movlb	0	; () banked
 12291  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12292  0003C6  0EE4               	movlw	228
 12293  0003C8                     u9527:
 12294  0003C8  2EE8               	decfsz	wreg,f,c
 12295  0003CA  D7FE               	bra	u9527
 12296  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12297  0003CE  D7FC               	bra	u9527
 12298  0003D0  F000               	nop	
 12299  0003D2  0100               	movlb	0	; () banked
 12300  0003D4  2BB1               	incf	actuatorTest@i_1745& (0+255),f,b
 12301  0003D6  D7EF               	goto	l7838
 12302  0003D8                     l7846:
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12306  0003D8  0E80               	movlw	128
 12307  0003DA  EC6C  F029         	call	_lcdInst
 12308  0003DE  0EC0               	movlw	192
 12309  0003E0  EC6C  F029         	call	_lcdInst
 12310                           
 12311                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12312  0003E4  0ED7               	movlw	low STR_99
 12313  0003E6  0100               	movlb	0	; () banked
 12314  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12315  0003EA  0EFB               	movlw	high STR_99
 12316  0003EC  0100               	movlb	0	; () banked
 12317  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12318  0003F0  EC07  F00B         	call	_printf	;wreg free
 12319                           
 12320                           ;Test.c: 284: updateServoPosition(2400, 1);
 12321  0003F4  0E09               	movlw	9
 12322  0003F6  0100               	movlb	0	; () banked
 12323  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12324  0003FA  0E60               	movlw	96
 12325  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12326  0003FE  0E00               	movlw	0
 12327  000400  0100               	movlb	0	; () banked
 12328  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12329  000404  0E01               	movlw	1
 12330  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12331  000408  ECB9  F022         	call	_updateServoPosition	;wreg free
 12332                           
 12333                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12334  00040C  0E00               	movlw	0
 12335  00040E  0100               	movlb	0	; () banked
 12336  000410  6FB2               	movwf	actuatorTest@i_1747& (0+255),b
 12337  000412                     l7854:
 12338                           
 12339                           ; BSR set to: 0
 12340  000412  0E63               	movlw	99
 12341  000414  0100               	movlb	0	; () banked
 12342  000416  65B2               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12343  000418  D001               	goto	l7858
 12344  00041A  D00C               	goto	l7862
 12345  00041C                     l7858:
 12346                           
 12347                           ; BSR set to: 0
 12348  00041C  0E68               	movlw	104
 12349  00041E  0100               	movlb	0	; () banked
 12350  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12351  000422  0EE4               	movlw	228
 12352  000424                     u9537:
 12353  000424  2EE8               	decfsz	wreg,f,c
 12354  000426  D7FE               	bra	u9537
 12355  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12356  00042A  D7FC               	bra	u9537
 12357  00042C  F000               	nop	
 12358  00042E  0100               	movlb	0	; () banked
 12359  000430  2BB2               	incf	actuatorTest@i_1747& (0+255),f,b
 12360  000432  D7EF               	goto	l7854
 12361  000434                     l7862:
 12362                           
 12363                           ; BSR set to: 0
 12364  000434  0E00               	movlw	0
 12365  000436  0100               	movlb	0	; () banked
 12366  000438  6FB3               	movwf	actuatorTest@i_1748& (0+255),b
 12367  00043A                     l7864:
 12368                           
 12369                           ; BSR set to: 0
 12370  00043A  0E63               	movlw	99
 12371  00043C  0100               	movlb	0	; () banked
 12372  00043E  65B3               	cpfsgt	actuatorTest@i_1748& (0+255),b
 12373  000440  D001               	goto	l7868
 12374  000442  D00C               	goto	l7872
 12375  000444                     l7868:
 12376                           
 12377                           ; BSR set to: 0
 12378  000444  0E68               	movlw	104
 12379  000446  0100               	movlb	0	; () banked
 12380  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12381  00044A  0EE4               	movlw	228
 12382  00044C                     u9547:
 12383  00044C  2EE8               	decfsz	wreg,f,c
 12384  00044E  D7FE               	bra	u9547
 12385  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12386  000452  D7FC               	bra	u9547
 12387  000454  F000               	nop	
 12388  000456  0100               	movlb	0	; () banked
 12389  000458  2BB3               	incf	actuatorTest@i_1748& (0+255),f,b
 12390  00045A  D7EF               	goto	l7864
 12391  00045C                     l7872:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12395  00045C  0E80               	movlw	128
 12396  00045E  EC6C  F029         	call	_lcdInst
 12397  000462  0EC0               	movlw	192
 12398  000464  EC6C  F029         	call	_lcdInst
 12399                           
 12400                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12401  000468  0E2C               	movlw	low STR_100
 12402  00046A  0100               	movlb	0	; () banked
 12403  00046C  6F8E               	movwf	printf@f& (0+255),b
 12404  00046E  0EFC               	movlw	high STR_100
 12405  000470  0100               	movlb	0	; () banked
 12406  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12407  000474  EC07  F00B         	call	_printf	;wreg free
 12408                           
 12409                           ;Test.c: 289: updateServoPosition(1670, 1);
 12410  000478  0E06               	movlw	6
 12411  00047A  0100               	movlb	0	; () banked
 12412  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12413  00047E  0E86               	movlw	134
 12414  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12415  000482  0E00               	movlw	0
 12416  000484  0100               	movlb	0	; () banked
 12417  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12418  000488  0E01               	movlw	1
 12419  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12420  00048C  ECB9  F022         	call	_updateServoPosition	;wreg free
 12421                           
 12422                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12423  000490  0E00               	movlw	0
 12424  000492  0100               	movlb	0	; () banked
 12425  000494  6FB4               	movwf	actuatorTest@i_1750& (0+255),b
 12426  000496                     l7880:
 12427                           
 12428                           ; BSR set to: 0
 12429  000496  0E63               	movlw	99
 12430  000498  0100               	movlb	0	; () banked
 12431  00049A  65B4               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12432  00049C  D001               	goto	l7884
 12433  00049E  D00C               	goto	l7888
 12434  0004A0                     l7884:
 12435                           
 12436                           ; BSR set to: 0
 12437  0004A0  0E68               	movlw	104
 12438  0004A2  0100               	movlb	0	; () banked
 12439  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12440  0004A6  0EE4               	movlw	228
 12441  0004A8                     u9557:
 12442  0004A8  2EE8               	decfsz	wreg,f,c
 12443  0004AA  D7FE               	bra	u9557
 12444  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12445  0004AE  D7FC               	bra	u9557
 12446  0004B0  F000               	nop	
 12447  0004B2  0100               	movlb	0	; () banked
 12448  0004B4  2BB4               	incf	actuatorTest@i_1750& (0+255),f,b
 12449  0004B6  D7EF               	goto	l7880
 12450  0004B8                     l7888:
 12451                           
 12452                           ; BSR set to: 0
 12453  0004B8  0E00               	movlw	0
 12454  0004BA  0100               	movlb	0	; () banked
 12455  0004BC  6FB5               	movwf	actuatorTest@i_1751& (0+255),b
 12456  0004BE                     l7890:
 12457                           
 12458                           ; BSR set to: 0
 12459  0004BE  0E63               	movlw	99
 12460  0004C0  0100               	movlb	0	; () banked
 12461  0004C2  65B5               	cpfsgt	actuatorTest@i_1751& (0+255),b
 12462  0004C4  D001               	goto	l7894
 12463  0004C6  D00C               	goto	l7898
 12464  0004C8                     l7894:
 12465                           
 12466                           ; BSR set to: 0
 12467  0004C8  0E68               	movlw	104
 12468  0004CA  0100               	movlb	0	; () banked
 12469  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12470  0004CE  0EE4               	movlw	228
 12471  0004D0                     u9567:
 12472  0004D0  2EE8               	decfsz	wreg,f,c
 12473  0004D2  D7FE               	bra	u9567
 12474  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12475  0004D6  D7FC               	bra	u9567
 12476  0004D8  F000               	nop	
 12477  0004DA  0100               	movlb	0	; () banked
 12478  0004DC  2BB5               	incf	actuatorTest@i_1751& (0+255),f,b
 12479  0004DE  D7EF               	goto	l7890
 12480  0004E0                     l7898:
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12484  0004E0  0E80               	movlw	128
 12485  0004E2  EC6C  F029         	call	_lcdInst
 12486  0004E6  0EC0               	movlw	192
 12487  0004E8  EC6C  F029         	call	_lcdInst
 12488                           
 12489                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12490  0004EC  0E3D               	movlw	low STR_101
 12491  0004EE  0100               	movlb	0	; () banked
 12492  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12493  0004F2  0EFC               	movlw	high STR_101
 12494  0004F4  0100               	movlb	0	; () banked
 12495  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12496  0004F8  EC07  F00B         	call	_printf	;wreg free
 12497                           
 12498                           ;Test.c: 294: updateServoPosition(850, 1);
 12499  0004FC  0E03               	movlw	3
 12500  0004FE  0100               	movlb	0	; () banked
 12501  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12502  000502  0E52               	movlw	82
 12503  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12504  000506  0E00               	movlw	0
 12505  000508  0100               	movlb	0	; () banked
 12506  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12507  00050C  0E01               	movlw	1
 12508  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12509  000510  ECB9  F022         	call	_updateServoPosition	;wreg free
 12510                           
 12511                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12512  000514  0E00               	movlw	0
 12513  000516  0100               	movlb	0	; () banked
 12514  000518  6FB6               	movwf	actuatorTest@i_1753& (0+255),b
 12515  00051A                     l7906:
 12516                           
 12517                           ; BSR set to: 0
 12518  00051A  0E63               	movlw	99
 12519  00051C  0100               	movlb	0	; () banked
 12520  00051E  65B6               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12521  000520  D001               	goto	l7910
 12522  000522  D00C               	goto	l7914
 12523  000524                     l7910:
 12524                           
 12525                           ; BSR set to: 0
 12526  000524  0E68               	movlw	104
 12527  000526  0100               	movlb	0	; () banked
 12528  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12529  00052A  0EE4               	movlw	228
 12530  00052C                     u9577:
 12531  00052C  2EE8               	decfsz	wreg,f,c
 12532  00052E  D7FE               	bra	u9577
 12533  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12534  000532  D7FC               	bra	u9577
 12535  000534  F000               	nop	
 12536  000536  0100               	movlb	0	; () banked
 12537  000538  2BB6               	incf	actuatorTest@i_1753& (0+255),f,b
 12538  00053A  D7EF               	goto	l7906
 12539  00053C                     l7914:
 12540                           
 12541                           ; BSR set to: 0
 12542  00053C  0E00               	movlw	0
 12543  00053E  0100               	movlb	0	; () banked
 12544  000540  6FB7               	movwf	actuatorTest@i_1754& (0+255),b
 12545  000542                     l7916:
 12546                           
 12547                           ; BSR set to: 0
 12548  000542  0E63               	movlw	99
 12549  000544  0100               	movlb	0	; () banked
 12550  000546  65B7               	cpfsgt	actuatorTest@i_1754& (0+255),b
 12551  000548  D001               	goto	l7920
 12552  00054A  D00C               	goto	l7924
 12553  00054C                     l7920:
 12554                           
 12555                           ; BSR set to: 0
 12556  00054C  0E68               	movlw	104
 12557  00054E  0100               	movlb	0	; () banked
 12558  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12559  000552  0EE4               	movlw	228
 12560  000554                     u9587:
 12561  000554  2EE8               	decfsz	wreg,f,c
 12562  000556  D7FE               	bra	u9587
 12563  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12564  00055A  D7FC               	bra	u9587
 12565  00055C  F000               	nop	
 12566  00055E  0100               	movlb	0	; () banked
 12567  000560  2BB7               	incf	actuatorTest@i_1754& (0+255),f,b
 12568  000562  D7EF               	goto	l7916
 12569  000564                     l7924:
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12573  000564  0E80               	movlw	128
 12574  000566  EC6C  F029         	call	_lcdInst
 12575  00056A  0EC0               	movlw	192
 12576  00056C  EC6C  F029         	call	_lcdInst
 12577                           
 12578                           ;Test.c: 298: printf("MID -- 2s       ");
 12579  000570  0EB5               	movlw	low STR_102
 12580  000572  0100               	movlb	0	; () banked
 12581  000574  6F8E               	movwf	printf@f& (0+255),b
 12582  000576  0EFB               	movlw	high STR_102
 12583  000578  0100               	movlb	0	; () banked
 12584  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12585  00057C  EC07  F00B         	call	_printf	;wreg free
 12586                           
 12587                           ;Test.c: 299: updateServoPosition(1200, 1);
 12588  000580  0E04               	movlw	4
 12589  000582  0100               	movlb	0	; () banked
 12590  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12591  000586  0EB0               	movlw	176
 12592  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12593  00058A  0E00               	movlw	0
 12594  00058C  0100               	movlb	0	; () banked
 12595  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12596  000590  0E01               	movlw	1
 12597  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12598  000594  ECB9  F022         	call	_updateServoPosition	;wreg free
 12599                           
 12600                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12601  000598  0E00               	movlw	0
 12602  00059A  0100               	movlb	0	; () banked
 12603  00059C  6FB8               	movwf	actuatorTest@i_1756& (0+255),b
 12604  00059E                     l7932:
 12605                           
 12606                           ; BSR set to: 0
 12607  00059E  0E63               	movlw	99
 12608  0005A0  0100               	movlb	0	; () banked
 12609  0005A2  65B8               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12610  0005A4  D001               	goto	l7936
 12611  0005A6  D00C               	goto	l7940
 12612  0005A8                     l7936:
 12613                           
 12614                           ; BSR set to: 0
 12615  0005A8  0E68               	movlw	104
 12616  0005AA  0100               	movlb	0	; () banked
 12617  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12618  0005AE  0EE4               	movlw	228
 12619  0005B0                     u9597:
 12620  0005B0  2EE8               	decfsz	wreg,f,c
 12621  0005B2  D7FE               	bra	u9597
 12622  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12623  0005B6  D7FC               	bra	u9597
 12624  0005B8  F000               	nop	
 12625  0005BA  0100               	movlb	0	; () banked
 12626  0005BC  2BB8               	incf	actuatorTest@i_1756& (0+255),f,b
 12627  0005BE  D7EF               	goto	l7932
 12628  0005C0                     l7940:
 12629                           
 12630                           ; BSR set to: 0
 12631  0005C0  0E00               	movlw	0
 12632  0005C2  0100               	movlb	0	; () banked
 12633  0005C4  6FB9               	movwf	actuatorTest@i_1757& (0+255),b
 12634  0005C6                     l7942:
 12635                           
 12636                           ; BSR set to: 0
 12637  0005C6  0E63               	movlw	99
 12638  0005C8  0100               	movlb	0	; () banked
 12639  0005CA  65B9               	cpfsgt	actuatorTest@i_1757& (0+255),b
 12640  0005CC  D001               	goto	l7946
 12641  0005CE  D00C               	goto	l1242
 12642  0005D0                     l7946:
 12643                           
 12644                           ; BSR set to: 0
 12645  0005D0  0E68               	movlw	104
 12646  0005D2  0100               	movlb	0	; () banked
 12647  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12648  0005D6  0EE4               	movlw	228
 12649  0005D8                     u9607:
 12650  0005D8  2EE8               	decfsz	wreg,f,c
 12651  0005DA  D7FE               	bra	u9607
 12652  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12653  0005DE  D7FC               	bra	u9607
 12654  0005E0  F000               	nop	
 12655  0005E2  0100               	movlb	0	; () banked
 12656  0005E4  2BB9               	incf	actuatorTest@i_1757& (0+255),f,b
 12657  0005E6  D7EF               	goto	l7942
 12658  0005E8                     l1242:
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;Test.c: 301: TMR1ON = 0;
 12662  0005E8  90CD               	bcf	4045,0,c	;volatile
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;Test.c: 308: printf("TST: TILT SERVO");
 12666  0005EA  0E3A               	movlw	low STR_103
 12667  0005EC  0100               	movlb	0	; () banked
 12668  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12669  0005F0  0EFE               	movlw	high STR_103
 12670  0005F2  0100               	movlb	0	; () banked
 12671  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12672  0005F6  EC07  F00B         	call	_printf	;wreg free
 12673                           
 12674                           ;Test.c: 309: lcdInst(0b11000000);;
 12675  0005FA  0EC0               	movlw	192
 12676  0005FC  EC6C  F029         	call	_lcdInst
 12677                           
 12678                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12679  000600  0EE8               	movlw	low STR_104
 12680  000602  0100               	movlb	0	; () banked
 12681  000604  6F8E               	movwf	printf@f& (0+255),b
 12682  000606  0EFB               	movlw	high STR_104
 12683  000608  0100               	movlb	0	; () banked
 12684  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12685  00060C  EC07  F00B         	call	_printf	;wreg free
 12686                           
 12687                           ;Test.c: 311: updateServoPosition(1050, 3);
 12688  000610  0E04               	movlw	4
 12689  000612  0100               	movlb	0	; () banked
 12690  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12691  000616  0E1A               	movlw	26
 12692  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12693  00061A  0E00               	movlw	0
 12694  00061C  0100               	movlb	0	; () banked
 12695  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12696  000620  0E03               	movlw	3
 12697  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12698  000624  ECB9  F022         	call	_updateServoPosition	;wreg free
 12699                           
 12700                           ;Test.c: 312: TMR3ON = 1;
 12701  000628  80B1               	bsf	4017,0,c	;volatile
 12702                           
 12703                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12704  00062A  0E00               	movlw	0
 12705  00062C  0100               	movlb	0	; () banked
 12706  00062E  6FBA               	movwf	actuatorTest@i_1760& (0+255),b
 12707  000630                     l7960:
 12708                           
 12709                           ; BSR set to: 0
 12710  000630  0E63               	movlw	99
 12711  000632  0100               	movlb	0	; () banked
 12712  000634  65BA               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12713  000636  D001               	goto	l7964
 12714  000638  D00C               	goto	l7968
 12715  00063A                     l7964:
 12716                           
 12717                           ; BSR set to: 0
 12718  00063A  0E68               	movlw	104
 12719  00063C  0100               	movlb	0	; () banked
 12720  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12721  000640  0EE4               	movlw	228
 12722  000642                     u9617:
 12723  000642  2EE8               	decfsz	wreg,f,c
 12724  000644  D7FE               	bra	u9617
 12725  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12726  000648  D7FC               	bra	u9617
 12727  00064A  F000               	nop	
 12728  00064C  0100               	movlb	0	; () banked
 12729  00064E  2BBA               	incf	actuatorTest@i_1760& (0+255),f,b
 12730  000650  D7EF               	goto	l7960
 12731  000652                     l7968:
 12732                           
 12733                           ; BSR set to: 0
 12734  000652  0E00               	movlw	0
 12735  000654  0100               	movlb	0	; () banked
 12736  000656  6FBB               	movwf	actuatorTest@i_1761& (0+255),b
 12737  000658                     l7970:
 12738                           
 12739                           ; BSR set to: 0
 12740  000658  0E63               	movlw	99
 12741  00065A  0100               	movlb	0	; () banked
 12742  00065C  65BB               	cpfsgt	actuatorTest@i_1761& (0+255),b
 12743  00065E  D001               	goto	l7974
 12744  000660  D00C               	goto	l7978
 12745  000662                     l7974:
 12746                           
 12747                           ; BSR set to: 0
 12748  000662  0E68               	movlw	104
 12749  000664  0100               	movlb	0	; () banked
 12750  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12751  000668  0EE4               	movlw	228
 12752  00066A                     u9627:
 12753  00066A  2EE8               	decfsz	wreg,f,c
 12754  00066C  D7FE               	bra	u9627
 12755  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12756  000670  D7FC               	bra	u9627
 12757  000672  F000               	nop	
 12758  000674  0100               	movlb	0	; () banked
 12759  000676  2BBB               	incf	actuatorTest@i_1761& (0+255),f,b
 12760  000678  D7EF               	goto	l7970
 12761  00067A                     l7978:
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12765  00067A  0E80               	movlw	128
 12766  00067C  EC6C  F029         	call	_lcdInst
 12767  000680  0EC0               	movlw	192
 12768  000682  EC6C  F029         	call	_lcdInst
 12769                           
 12770                           ;Test.c: 316: printf("DROP -- 2s      ");
 12771  000686  0EC6               	movlw	low STR_105
 12772  000688  0100               	movlb	0	; () banked
 12773  00068A  6F8E               	movwf	printf@f& (0+255),b
 12774  00068C  0EFB               	movlw	high STR_105
 12775  00068E  0100               	movlb	0	; () banked
 12776  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12777  000692  EC07  F00B         	call	_printf	;wreg free
 12778                           
 12779                           ;Test.c: 317: updateServoPosition(1260, 3);
 12780  000696  0E04               	movlw	4
 12781  000698  0100               	movlb	0	; () banked
 12782  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12783  00069C  0EEC               	movlw	236
 12784  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12785  0006A0  0E00               	movlw	0
 12786  0006A2  0100               	movlb	0	; () banked
 12787  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12788  0006A6  0E03               	movlw	3
 12789  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12790  0006AA  ECB9  F022         	call	_updateServoPosition	;wreg free
 12791                           
 12792                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12793  0006AE  0E00               	movlw	0
 12794  0006B0  0100               	movlb	0	; () banked
 12795  0006B2  6FBC               	movwf	actuatorTest@i_1763& (0+255),b
 12796  0006B4                     l7986:
 12797                           
 12798                           ; BSR set to: 0
 12799  0006B4  0E63               	movlw	99
 12800  0006B6  0100               	movlb	0	; () banked
 12801  0006B8  65BC               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12802  0006BA  D001               	goto	l7990
 12803  0006BC  D00C               	goto	l7994
 12804  0006BE                     l7990:
 12805                           
 12806                           ; BSR set to: 0
 12807  0006BE  0E68               	movlw	104
 12808  0006C0  0100               	movlb	0	; () banked
 12809  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12810  0006C4  0EE4               	movlw	228
 12811  0006C6                     u9637:
 12812  0006C6  2EE8               	decfsz	wreg,f,c
 12813  0006C8  D7FE               	bra	u9637
 12814  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12815  0006CC  D7FC               	bra	u9637
 12816  0006CE  F000               	nop	
 12817  0006D0  0100               	movlb	0	; () banked
 12818  0006D2  2BBC               	incf	actuatorTest@i_1763& (0+255),f,b
 12819  0006D4  D7EF               	goto	l7986
 12820  0006D6                     l7994:
 12821                           
 12822                           ; BSR set to: 0
 12823  0006D6  0E00               	movlw	0
 12824  0006D8  0100               	movlb	0	; () banked
 12825  0006DA  6FBD               	movwf	actuatorTest@i_1764& (0+255),b
 12826  0006DC                     l7996:
 12827                           
 12828                           ; BSR set to: 0
 12829  0006DC  0E63               	movlw	99
 12830  0006DE  0100               	movlb	0	; () banked
 12831  0006E0  65BD               	cpfsgt	actuatorTest@i_1764& (0+255),b
 12832  0006E2  D001               	goto	l8000
 12833  0006E4  D00C               	goto	l8004
 12834  0006E6                     l8000:
 12835                           
 12836                           ; BSR set to: 0
 12837  0006E6  0E68               	movlw	104
 12838  0006E8  0100               	movlb	0	; () banked
 12839  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12840  0006EC  0EE4               	movlw	228
 12841  0006EE                     u9647:
 12842  0006EE  2EE8               	decfsz	wreg,f,c
 12843  0006F0  D7FE               	bra	u9647
 12844  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12845  0006F4  D7FC               	bra	u9647
 12846  0006F6  F000               	nop	
 12847  0006F8  0100               	movlb	0	; () banked
 12848  0006FA  2BBD               	incf	actuatorTest@i_1764& (0+255),f,b
 12849  0006FC  D7EF               	goto	l7996
 12850  0006FE                     l8004:
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12854  0006FE  0E80               	movlw	128
 12855  000700  EC6C  F029         	call	_lcdInst
 12856  000704  0EC0               	movlw	192
 12857  000706  EC6C  F029         	call	_lcdInst
 12858                           
 12859                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12860  00070A  0EE8               	movlw	low STR_104
 12861  00070C  0100               	movlb	0	; () banked
 12862  00070E  6F8E               	movwf	printf@f& (0+255),b
 12863  000710  0EFB               	movlw	high STR_104
 12864  000712  0100               	movlb	0	; () banked
 12865  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12866  000716  EC07  F00B         	call	_printf	;wreg free
 12867                           
 12868                           ;Test.c: 322: updateServoPosition(1050, 3);
 12869  00071A  0E04               	movlw	4
 12870  00071C  0100               	movlb	0	; () banked
 12871  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12872  000720  0E1A               	movlw	26
 12873  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12874  000724  0E00               	movlw	0
 12875  000726  0100               	movlb	0	; () banked
 12876  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12877  00072A  0E03               	movlw	3
 12878  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12879  00072E  ECB9  F022         	call	_updateServoPosition	;wreg free
 12880                           
 12881                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12882  000732  0E00               	movlw	0
 12883  000734  0100               	movlb	0	; () banked
 12884  000736  6FBE               	movwf	actuatorTest@i_1766& (0+255),b
 12885  000738                     l8012:
 12886                           
 12887                           ; BSR set to: 0
 12888  000738  0E63               	movlw	99
 12889  00073A  0100               	movlb	0	; () banked
 12890  00073C  65BE               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12891  00073E  D001               	goto	l8016
 12892  000740  D00C               	goto	l8020
 12893  000742                     l8016:
 12894                           
 12895                           ; BSR set to: 0
 12896  000742  0E68               	movlw	104
 12897  000744  0100               	movlb	0	; () banked
 12898  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12899  000748  0EE4               	movlw	228
 12900  00074A                     u9657:
 12901  00074A  2EE8               	decfsz	wreg,f,c
 12902  00074C  D7FE               	bra	u9657
 12903  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12904  000750  D7FC               	bra	u9657
 12905  000752  F000               	nop	
 12906  000754  0100               	movlb	0	; () banked
 12907  000756  2BBE               	incf	actuatorTest@i_1766& (0+255),f,b
 12908  000758  D7EF               	goto	l8012
 12909  00075A                     l8020:
 12910                           
 12911                           ; BSR set to: 0
 12912  00075A  0E00               	movlw	0
 12913  00075C  0100               	movlb	0	; () banked
 12914  00075E  6FBF               	movwf	actuatorTest@i_1767& (0+255),b
 12915  000760                     l8022:
 12916                           
 12917                           ; BSR set to: 0
 12918  000760  0E63               	movlw	99
 12919  000762  0100               	movlb	0	; () banked
 12920  000764  65BF               	cpfsgt	actuatorTest@i_1767& (0+255),b
 12921  000766  D001               	goto	l8026
 12922  000768  D00C               	goto	l1254
 12923  00076A                     l8026:
 12924                           
 12925                           ; BSR set to: 0
 12926  00076A  0E68               	movlw	104
 12927  00076C  0100               	movlb	0	; () banked
 12928  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12929  000770  0EE4               	movlw	228
 12930  000772                     u9667:
 12931  000772  2EE8               	decfsz	wreg,f,c
 12932  000774  D7FE               	bra	u9667
 12933  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12934  000778  D7FC               	bra	u9667
 12935  00077A  F000               	nop	
 12936  00077C  0100               	movlb	0	; () banked
 12937  00077E  2BBF               	incf	actuatorTest@i_1767& (0+255),f,b
 12938  000780  D7EF               	goto	l8022
 12939  000782                     l1254:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;Test.c: 324: TMR3ON = 0;
 12943  000782  90B1               	bcf	4017,0,c	;volatile
 12944                           
 12945                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12946  000784  9EF2               	bcf	intcon,7,c	;volatile
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12950  000786  0E01               	movlw	1
 12951  000788  EC6C  F029         	call	_lcdInst
 12952  00078C  0E68               	movlw	104
 12953  00078E  0100               	movlb	0	; () banked
 12954  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12955  000792  0EE4               	movlw	228
 12956  000794                     u9677:
 12957  000794  2EE8               	decfsz	wreg,f,c
 12958  000796  D7FE               	bra	u9677
 12959  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12960  00079A  D7FC               	bra	u9677
 12961  00079C  F000               	nop	
 12962  00079E  0E80               	movlw	128
 12963  0007A0  EC6C  F029         	call	_lcdInst
 12964                           
 12965                           ;Test.c: 331: printf("TST: CAM SERVO");
 12966  0007A4  0E96               	movlw	low STR_107
 12967  0007A6  0100               	movlb	0	; () banked
 12968  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12969  0007AA  0EFE               	movlw	high STR_107
 12970  0007AC  0100               	movlb	0	; () banked
 12971  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12972  0007B0  EC07  F00B         	call	_printf	;wreg free
 12973                           
 12974                           ;Test.c: 332: lcdInst(0b11000000);;
 12975  0007B4  0EC0               	movlw	192
 12976  0007B6  EC6C  F029         	call	_lcdInst
 12977                           
 12978                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12979  0007BA  0E78               	movlw	low STR_108
 12980  0007BC  0100               	movlb	0	; () banked
 12981  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12982  0007C0  0EFE               	movlw	high STR_108
 12983  0007C2  0100               	movlb	0	; () banked
 12984  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12985  0007C6  EC07  F00B         	call	_printf	;wreg free
 12986                           
 12987                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12988  0007CA  808B               	bsf	3979,0,c	;volatile
 12989                           
 12990                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12991  0007CC  0E00               	movlw	0
 12992  0007CE  0100               	movlb	0	; () banked
 12993  0007D0  6FC0               	movwf	actuatorTest@i_1770& (0+255),b
 12994  0007D2                     l8046:
 12995                           
 12996                           ; BSR set to: 0
 12997  0007D2  0E63               	movlw	99
 12998  0007D4  0100               	movlb	0	; () banked
 12999  0007D6  65C0               	cpfsgt	actuatorTest@i_1770& (0+255),b
 13000  0007D8  D001               	goto	l8050
 13001  0007DA  D00C               	goto	l8054
 13002  0007DC                     l8050:
 13003                           
 13004                           ; BSR set to: 0
 13005  0007DC  0E68               	movlw	104
 13006  0007DE  0100               	movlb	0	; () banked
 13007  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13008  0007E2  0EE4               	movlw	228
 13009  0007E4                     u9687:
 13010  0007E4  2EE8               	decfsz	wreg,f,c
 13011  0007E6  D7FE               	bra	u9687
 13012  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13013  0007EA  D7FC               	bra	u9687
 13014  0007EC  F000               	nop	
 13015  0007EE  0100               	movlb	0	; () banked
 13016  0007F0  2BC0               	incf	actuatorTest@i_1770& (0+255),f,b
 13017  0007F2  D7EF               	goto	l8046
 13018  0007F4                     l8054:
 13019                           
 13020                           ; BSR set to: 0
 13021  0007F4  0E00               	movlw	0
 13022  0007F6  0100               	movlb	0	; () banked
 13023  0007F8  6FC1               	movwf	actuatorTest@i_1771& (0+255),b
 13024  0007FA                     l8056:
 13025                           
 13026                           ; BSR set to: 0
 13027  0007FA  0E63               	movlw	99
 13028  0007FC  0100               	movlb	0	; () banked
 13029  0007FE  65C1               	cpfsgt	actuatorTest@i_1771& (0+255),b
 13030  000800  D001               	goto	l8060
 13031  000802  D00C               	goto	l8064
 13032  000804                     l8060:
 13033                           
 13034                           ; BSR set to: 0
 13035  000804  0E68               	movlw	104
 13036  000806  0100               	movlb	0	; () banked
 13037  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13038  00080A  0EE4               	movlw	228
 13039  00080C                     u9697:
 13040  00080C  2EE8               	decfsz	wreg,f,c
 13041  00080E  D7FE               	bra	u9697
 13042  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13043  000812  D7FC               	bra	u9697
 13044  000814  F000               	nop	
 13045  000816  0100               	movlb	0	; () banked
 13046  000818  2BC1               	incf	actuatorTest@i_1771& (0+255),f,b
 13047  00081A  D7EF               	goto	l8056
 13048  00081C                     l8064:
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13052  00081C  0E80               	movlw	128
 13053  00081E  EC6C  F029         	call	_lcdInst
 13054  000822  0EC0               	movlw	192
 13055  000824  EC6C  F029         	call	_lcdInst
 13056                           
 13057                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13058  000828  0E69               	movlw	low STR_109
 13059  00082A  0100               	movlb	0	; () banked
 13060  00082C  6F8E               	movwf	printf@f& (0+255),b
 13061  00082E  0EFE               	movlw	high STR_109
 13062  000830  0100               	movlb	0	; () banked
 13063  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13064  000834  EC07  F00B         	call	_printf	;wreg free
 13065                           
 13066                           ;Test.c: 340: for(i=0;i<10000;i++)
 13067  000838  0E00               	movlw	0
 13068  00083A  0100               	movlb	0	; () banked
 13069  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13070  00083E  0E00               	movlw	0
 13071  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13072  000842                     l8070:
 13073                           
 13074                           ; BSR set to: 0
 13075  000842  0100               	movlb	0	; () banked
 13076  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13077  000846  D008               	goto	l1259
 13078  000848  0E10               	movlw	16
 13079  00084A  0100               	movlb	0	; () banked
 13080  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13081  00084E  0E27               	movlw	39
 13082  000850  0100               	movlb	0	; () banked
 13083  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13084  000854  B0D8               	btfsc	status,0,c
 13085  000856  D00D               	goto	l8080
 13086  000858                     l1259:
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;Test.c: 341: {
 13090                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13091  000858  808B               	bsf	3979,0,c	;volatile
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13095  00085A  0E1A               	movlw	26
 13096  00085C                     u9707:
 13097  00085C  2EE8               	decfsz	wreg,f,c
 13098  00085E  D7FE               	bra	u9707
 13099  000860  D000               	nop2	
 13100                           
 13101                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13102  000862  908B               	bcf	3979,0,c	;volatile
 13103                           
 13104                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13105  000864  0EF0               	movlw	240
 13106  000866                     u9717:
 13107  000866  2EE8               	decfsz	wreg,f,c
 13108  000868  D7FE               	bra	u9717
 13109  00086A  0100               	movlb	0	; () banked
 13110  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13111  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13112  000870  D7E8               	goto	l8070
 13113  000872                     l8080:
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;Test.c: 346: }
 13117                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13118  000872  0E00               	movlw	0
 13119  000874  0100               	movlb	0	; () banked
 13120  000876  6FC2               	movwf	actuatorTest@i_1773& (0+255),b
 13121  000878                     l8082:
 13122                           
 13123                           ; BSR set to: 0
 13124  000878  0E63               	movlw	99
 13125  00087A  0100               	movlb	0	; () banked
 13126  00087C  65C2               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13127  00087E  D001               	goto	l8086
 13128  000880  D00C               	goto	l8090
 13129  000882                     l8086:
 13130                           
 13131                           ; BSR set to: 0
 13132  000882  0E68               	movlw	104
 13133  000884  0100               	movlb	0	; () banked
 13134  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13135  000888  0EE4               	movlw	228
 13136  00088A                     u9727:
 13137  00088A  2EE8               	decfsz	wreg,f,c
 13138  00088C  D7FE               	bra	u9727
 13139  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13140  000890  D7FC               	bra	u9727
 13141  000892  F000               	nop	
 13142  000894  0100               	movlb	0	; () banked
 13143  000896  2BC2               	incf	actuatorTest@i_1773& (0+255),f,b
 13144  000898  D7EF               	goto	l8082
 13145  00089A                     l8090:
 13146                           
 13147                           ; BSR set to: 0
 13148  00089A  0E00               	movlw	0
 13149  00089C  0100               	movlb	0	; () banked
 13150  00089E  6FC3               	movwf	actuatorTest@i_1774& (0+255),b
 13151  0008A0                     l8092:
 13152                           
 13153                           ; BSR set to: 0
 13154  0008A0  0E63               	movlw	99
 13155  0008A2  0100               	movlb	0	; () banked
 13156  0008A4  65C3               	cpfsgt	actuatorTest@i_1774& (0+255),b
 13157  0008A6  D001               	goto	l8096
 13158  0008A8  D00C               	goto	l8100
 13159  0008AA                     l8096:
 13160                           
 13161                           ; BSR set to: 0
 13162  0008AA  0E68               	movlw	104
 13163  0008AC  0100               	movlb	0	; () banked
 13164  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13165  0008B0  0EE4               	movlw	228
 13166  0008B2                     u9737:
 13167  0008B2  2EE8               	decfsz	wreg,f,c
 13168  0008B4  D7FE               	bra	u9737
 13169  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13170  0008B8  D7FC               	bra	u9737
 13171  0008BA  F000               	nop	
 13172  0008BC  0100               	movlb	0	; () banked
 13173  0008BE  2BC3               	incf	actuatorTest@i_1774& (0+255),f,b
 13174  0008C0  D7EF               	goto	l8092
 13175  0008C2                     l8100:
 13176                           
 13177                           ; BSR set to: 0
 13178                           ;Test.c: 349: machine_state = Testing_state;
 13179  0008C2  0E03               	movlw	3
 13180  0008C4  0100               	movlb	0	; () banked
 13181  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13182                           
 13183                           ; BSR set to: 0
 13184  0008C8  0012               	return		;funcret
 13185  0008CA                     __end_of_actuatorTest:
 13186                           	opt stack 0
 13187                           tblptru	equ	0xFF8
 13188                           tblptrh	equ	0xFF7
 13189                           tblptrl	equ	0xFF6
 13190                           tablat	equ	0xFF5
 13191                           prodh	equ	0xFF4
 13192                           prodl	equ	0xFF3
 13193                           intcon	equ	0xFF2
 13194                           intcon2	equ	0xFF1
 13195                           intcon3	equ	0xFF0
 13196                           postinc0	equ	0xFEE
 13197                           wreg	equ	0xFE8
 13198                           postdec1	equ	0xFE5
 13199                           fsr1l	equ	0xFE1
 13200                           indf2	equ	0xFDF
 13201                           postinc2	equ	0xFDE
 13202                           postdec2	equ	0xFDD
 13203                           fsr2h	equ	0xFDA
 13204                           fsr2l	equ	0xFD9
 13205                           status	equ	0xFD8
 13206                           
 13207 ;; *************** function _SpeedTest *****************
 13208 ;; Defined at:
 13209 ;;		line 549 in file "Test.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;		None
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;		None
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      void 
 13216 ;; Registers used:
 13217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;Total ram usage:        1 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:   10
 13230 ;; This function calls:
 13231 ;;		_lcdInst
 13232 ;;		_printf
 13233 ;; This function is called by:
 13234 ;;		_Test
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           	psect	text41
 13239  0045F8                     __ptext41:
 13240                           	opt stack 0
 13241  0045F8                     _SpeedTest:
 13242                           	opt stack 19
 13243                           
 13244                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;incstack = 0
 13248  0045F8  0E01               	movlw	1
 13249  0045FA  EC6C  F029         	call	_lcdInst
 13250  0045FE  0E68               	movlw	104
 13251  004600  0100               	movlb	0	; () banked
 13252  004602  6FAB               	movwf	??_SpeedTest& (0+255),b
 13253  004604  0EE4               	movlw	228
 13254  004606                     u9747:
 13255  004606  2EE8               	decfsz	wreg,f,c
 13256  004608  D7FE               	bra	u9747
 13257  00460A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13258  00460C  D7FC               	bra	u9747
 13259  00460E  F000               	nop	
 13260  004610  0E80               	movlw	128
 13261  004612  EC6C  F029         	call	_lcdInst
 13262                           
 13263                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13264  004616  0E5B               	movlw	low STR_120
 13265  004618  0100               	movlb	0	; () banked
 13266  00461A  6F8E               	movwf	printf@f& (0+255),b
 13267  00461C  0EFB               	movlw	high STR_120
 13268  00461E  0100               	movlb	0	; () banked
 13269  004620  6F8F               	movwf	(printf@f+1)& (0+255),b
 13270  004622  EC07  F00B         	call	_printf	;wreg free
 13271                           
 13272                           ;Test.c: 553: lcdInst(0b11000000);;
 13273  004626  0EC0               	movlw	192
 13274  004628  EC6C  F029         	call	_lcdInst
 13275                           
 13276                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13277  00462C  0E49               	movlw	low STR_112
 13278  00462E  0100               	movlb	0	; () banked
 13279  004630  6F8E               	movwf	printf@f& (0+255),b
 13280  004632  0EFB               	movlw	high STR_112
 13281  004634  0100               	movlb	0	; () banked
 13282  004636  6F8F               	movwf	(printf@f+1)& (0+255),b
 13283  004638  EC07  F00B         	call	_printf	;wreg free
 13284  00463C                     l1345:
 13285  00463C  A281               	btfss	3969,1,c	;volatile
 13286  00463E  D7FE               	goto	l1345
 13287                           
 13288                           ;Test.c: 559: }
 13289                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13290  004640  3881               	swapf	3969,w,c	;volatile
 13291  004642  0B0F               	andlw	15
 13292  004644  0A0F               	xorlw	15
 13293  004646  B4D8               	btfsc	status,2,c
 13294  004648  0012               	return	
 13295  00464A  D014               	goto	l8142
 13296  00464C                     l1352:
 13297                           
 13298                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13299  00464C  8A89               	bsf	3977,5,c	;volatile
 13300                           
 13301                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13302  00464E  0E34               	movlw	52
 13303  004650  0100               	movlb	0	; () banked
 13304  004652  6FAB               	movwf	??_SpeedTest& (0+255),b
 13305  004654  0EF1               	movlw	241
 13306  004656                     u9757:
 13307  004656  2EE8               	decfsz	wreg,f,c
 13308  004658  D7FE               	bra	u9757
 13309  00465A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13310  00465C  D7FC               	bra	u9757
 13311  00465E  D000               	nop2	
 13312                           
 13313                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13314  004660  9A89               	bcf	3977,5,c	;volatile
 13315                           
 13316                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13317  004662  0E34               	movlw	52
 13318  004664  0100               	movlb	0	; () banked
 13319  004666  6FAB               	movwf	??_SpeedTest& (0+255),b
 13320  004668  0EF1               	movlw	241
 13321  00466A                     u9767:
 13322  00466A  2EE8               	decfsz	wreg,f,c
 13323  00466C  D7FE               	bra	u9767
 13324  00466E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13325  004670  D7FC               	bra	u9767
 13326  004672  D000               	nop2	
 13327  004674                     l8142:
 13328  004674  B281               	btfsc	3969,1,c	;volatile
 13329  004676  D7EA               	goto	l1352
 13330                           
 13331                           ;Test.c: 571: }
 13332                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13333  004678  9A89               	bcf	3977,5,c	;volatile
 13334  00467A  D7E0               	goto	l1345
 13335  00467C                     __end_of_SpeedTest:
 13336                           	opt stack 0
 13337                           tblptru	equ	0xFF8
 13338                           tblptrh	equ	0xFF7
 13339                           tblptrl	equ	0xFF6
 13340                           tablat	equ	0xFF5
 13341                           prodh	equ	0xFF4
 13342                           prodl	equ	0xFF3
 13343                           intcon	equ	0xFF2
 13344                           intcon2	equ	0xFF1
 13345                           intcon3	equ	0xFF0
 13346                           postinc0	equ	0xFEE
 13347                           wreg	equ	0xFE8
 13348                           postdec1	equ	0xFE5
 13349                           fsr1l	equ	0xFE1
 13350                           indf2	equ	0xFDF
 13351                           postinc2	equ	0xFDE
 13352                           postdec2	equ	0xFDD
 13353                           fsr2h	equ	0xFDA
 13354                           fsr2l	equ	0xFD9
 13355                           status	equ	0xFD8
 13356                           
 13357 ;; *************** function _PusherTest *****************
 13358 ;; Defined at:
 13359 ;;		line 467 in file "Test.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;		None
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;  i               2   51[BANK0 ] int 
 13364 ;;  i               2   49[BANK0 ] int 
 13365 ;;  res             2   47[BANK0 ] int 
 13366 ;;  res             2   45[BANK0 ] int 
 13367 ;; Return value:  Size  Location     Type
 13368 ;;                  1    wreg      void 
 13369 ;; Registers used:
 13370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13371 ;; Tracked objects:
 13372 ;;		On entry : 0/0
 13373 ;;		On exit  : 0/0
 13374 ;;		Unchanged: 0/0
 13375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13377 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;Total ram usage:       10 bytes
 13381 ;; Hardware stack levels used:    1
 13382 ;; Hardware stack levels required when called:   10
 13383 ;; This function calls:
 13384 ;;		_lcdInst
 13385 ;;		_printf
 13386 ;;		_readADC
 13387 ;; This function is called by:
 13388 ;;		_Test
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           	psect	text42
 13393  002ED0                     __ptext42:
 13394                           	opt stack 0
 13395  002ED0                     _PusherTest:
 13396                           	opt stack 19
 13397                           
 13398                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13399                           
 13400                           ;incstack = 0
 13401  002ED0  0E01               	movlw	1
 13402  002ED2  EC6C  F029         	call	_lcdInst
 13403  002ED6  0E68               	movlw	104
 13404  002ED8  0100               	movlb	0	; () banked
 13405  002EDA  6FAB               	movwf	??_PusherTest& (0+255),b
 13406  002EDC  0EE4               	movlw	228
 13407  002EDE                     u9777:
 13408  002EDE  2EE8               	decfsz	wreg,f,c
 13409  002EE0  D7FE               	bra	u9777
 13410  002EE2  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13411  002EE4  D7FC               	bra	u9777
 13412  002EE6  F000               	nop	
 13413  002EE8  0E80               	movlw	128
 13414  002EEA  EC6C  F029         	call	_lcdInst
 13415                           
 13416                           ;Test.c: 469: printf("PUSHER TST");
 13417  002EEE  0E71               	movlw	low STR_113
 13418  002EF0  0100               	movlb	0	; () banked
 13419  002EF2  6F8E               	movwf	printf@f& (0+255),b
 13420  002EF4  0EFF               	movlw	high STR_113
 13421  002EF6  0100               	movlb	0	; () banked
 13422  002EF8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13423  002EFA  EC07  F00B         	call	_printf	;wreg free
 13424                           
 13425                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13426  002EFE  8A8B               	bsf	3979,5,c	;volatile
 13427                           
 13428                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13429  002F00  D05C               	goto	l8172
 13430  002F02                     l8154:
 13431                           
 13432                           ;Test.c: 473: readADC(0);
 13433  002F02  0E00               	movlw	0
 13434  002F04  EC63  F028         	call	_readADC
 13435                           
 13436                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13437  002F08  50C3               	movf	4035,w,c	;volatile
 13438  002F0A  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13439  002F0E  0100               	movlb	0	; () banked
 13440  002F10  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13441  002F12  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13442  002F16  0100               	movlb	0	; () banked
 13443  002F18  6BAB               	clrf	??_PusherTest& (0+255),b
 13444  002F1A  0100               	movlb	0	; () banked
 13445  002F1C  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13446  002F1E  0100               	movlb	0	; () banked
 13447  002F20  6FAD               	movwf	PusherTest@res& (0+255),b
 13448  002F22  0100               	movlb	0	; () banked
 13449  002F24  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13450  002F26  0100               	movlb	0	; () banked
 13451  002F28  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13455  002F2A  0100               	movlb	0	; () banked
 13456  002F2C  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13457  002F2E  D00A               	goto	u6830
 13458  002F30  0E21               	movlw	33
 13459  002F32  0100               	movlb	0	; () banked
 13460  002F34  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13461  002F36  0E03               	movlw	3
 13462  002F38  0100               	movlb	0	; () banked
 13463  002F3A  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13464  002F3C  A0D8               	btfss	status,0,c
 13465  002F3E  D002               	goto	u6830
 13466  002F40  0E01               	movlw	1
 13467  002F42  D001               	goto	u6840
 13468  002F44                     u6830:
 13469  002F44  0E00               	movlw	0
 13470  002F46                     u6840:
 13471  002F46  0100               	movlb	0	; () banked
 13472  002F48  6FE6               	movwf	_IR_signal& (0+255),b
 13473  002F4A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13474                           
 13475                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13476  002F4C  0E01               	movlw	1
 13477  002F4E  EC6C  F029         	call	_lcdInst
 13478  002F52  0E68               	movlw	104
 13479  002F54  0100               	movlb	0	; () banked
 13480  002F56  6FAB               	movwf	??_PusherTest& (0+255),b
 13481  002F58  0EE4               	movlw	228
 13482  002F5A                     u9787:
 13483  002F5A  2EE8               	decfsz	wreg,f,c
 13484  002F5C  D7FE               	bra	u9787
 13485  002F5E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13486  002F60  D7FC               	bra	u9787
 13487  002F62  F000               	nop	
 13488  002F64  0E80               	movlw	128
 13489  002F66  EC6C  F029         	call	_lcdInst
 13490                           
 13491                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13492  002F6A  0E5A               	movlw	low STR_80
 13493  002F6C  0100               	movlb	0	; () banked
 13494  002F6E  6F8E               	movwf	printf@f& (0+255),b
 13495  002F70  0EFE               	movlw	high STR_80
 13496  002F72  0100               	movlb	0	; () banked
 13497  002F74  6F8F               	movwf	(printf@f+1)& (0+255),b
 13498  002F76  C0E6  F090         	movff	_IR_signal,?_printf+2
 13499  002F7A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13500  002F7E  EC07  F00B         	call	_printf	;wreg free
 13501                           
 13502                           ;Test.c: 479: lcdInst(0b11000000);;
 13503  002F82  0EC0               	movlw	192
 13504  002F84  EC6C  F029         	call	_lcdInst
 13505                           
 13506                           ;Test.c: 480: printf("%d", res);
 13507  002F88  0E16               	movlw	low (STR_27+14)
 13508  002F8A  0100               	movlb	0	; () banked
 13509  002F8C  6F8E               	movwf	printf@f& (0+255),b
 13510  002F8E  0EFE               	movlw	high (STR_27+14)
 13511  002F90  0100               	movlb	0	; () banked
 13512  002F92  6F8F               	movwf	(printf@f+1)& (0+255),b
 13513  002F94  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13514  002F98  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13515  002F9C  EC07  F00B         	call	_printf	;wreg free
 13516                           
 13517                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13518  002FA0  0E05               	movlw	5
 13519  002FA2  0100               	movlb	0	; () banked
 13520  002FA4  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13521  002FA6  0E0F               	movlw	15
 13522  002FA8  0100               	movlb	0	; () banked
 13523  002FAA  6FAB               	movwf	??_PusherTest& (0+255),b
 13524  002FAC  0EF1               	movlw	241
 13525  002FAE                     u9797:
 13526  002FAE  2EE8               	decfsz	wreg,f,c
 13527  002FB0  D7FE               	bra	u9797
 13528  002FB2  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13529  002FB4  D7FC               	bra	u9797
 13530  002FB6  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13531  002FB8  D7FA               	bra	u9797
 13532  002FBA                     l8172:
 13533  002FBA  B281               	btfsc	3969,1,c	;volatile
 13534  002FBC  D05D               	goto	l8192
 13535  002FBE  D7A1               	goto	l8154
 13536  002FC0                     l8174:
 13537                           
 13538                           ;Test.c: 487: readADC(0);
 13539  002FC0  0E00               	movlw	0
 13540  002FC2  EC63  F028         	call	_readADC
 13541                           
 13542                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13543  002FC6  50C3               	movf	4035,w,c	;volatile
 13544  002FC8  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13545  002FCC  0100               	movlb	0	; () banked
 13546  002FCE  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13547  002FD0  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13548  002FD4  0100               	movlb	0	; () banked
 13549  002FD6  6BAB               	clrf	??_PusherTest& (0+255),b
 13550  002FD8  0100               	movlb	0	; () banked
 13551  002FDA  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13552  002FDC  0100               	movlb	0	; () banked
 13553  002FDE  6FAF               	movwf	PusherTest@res_1789& (0+255),b
 13554  002FE0  0100               	movlb	0	; () banked
 13555  002FE2  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13556  002FE4  0100               	movlb	0	; () banked
 13557  002FE6  6FB0               	movwf	(PusherTest@res_1789+1)& (0+255),b
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13561  002FE8  0100               	movlb	0	; () banked
 13562  002FEA  BFB0               	btfsc	(PusherTest@res_1789+1)& (0+255),7,b
 13563  002FEC  D00A               	goto	u6860
 13564  002FEE  0E21               	movlw	33
 13565  002FF0  0100               	movlb	0	; () banked
 13566  002FF2  5DAF               	subwf	PusherTest@res_1789& (0+255),w,b
 13567  002FF4  0E03               	movlw	3
 13568  002FF6  0100               	movlb	0	; () banked
 13569  002FF8  59B0               	subwfb	(PusherTest@res_1789+1)& (0+255),w,b
 13570  002FFA  A0D8               	btfss	status,0,c
 13571  002FFC  D002               	goto	u6860
 13572  002FFE  0E01               	movlw	1
 13573  003000  D001               	goto	u6870
 13574  003002                     u6860:
 13575  003002  0E00               	movlw	0
 13576  003004                     u6870:
 13577  003004  0100               	movlb	0	; () banked
 13578  003006  6FE6               	movwf	_IR_signal& (0+255),b
 13579  003008  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13580                           
 13581                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13582  00300A  0E01               	movlw	1
 13583  00300C  EC6C  F029         	call	_lcdInst
 13584  003010  0E68               	movlw	104
 13585  003012  0100               	movlb	0	; () banked
 13586  003014  6FAB               	movwf	??_PusherTest& (0+255),b
 13587  003016  0EE4               	movlw	228
 13588  003018                     u9807:
 13589  003018  2EE8               	decfsz	wreg,f,c
 13590  00301A  D7FE               	bra	u9807
 13591  00301C  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13592  00301E  D7FC               	bra	u9807
 13593  003020  F000               	nop	
 13594  003022  0E80               	movlw	128
 13595  003024  EC6C  F029         	call	_lcdInst
 13596                           
 13597                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13598  003028  0E5A               	movlw	low STR_80
 13599  00302A  0100               	movlb	0	; () banked
 13600  00302C  6F8E               	movwf	printf@f& (0+255),b
 13601  00302E  0EFE               	movlw	high STR_80
 13602  003030  0100               	movlb	0	; () banked
 13603  003032  6F8F               	movwf	(printf@f+1)& (0+255),b
 13604  003034  C0E6  F090         	movff	_IR_signal,?_printf+2
 13605  003038  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13606  00303C  EC07  F00B         	call	_printf	;wreg free
 13607                           
 13608                           ;Test.c: 492: lcdInst(0b11000000);;
 13609  003040  0EC0               	movlw	192
 13610  003042  EC6C  F029         	call	_lcdInst
 13611                           
 13612                           ;Test.c: 493: printf("%d", res);
 13613  003046  0E16               	movlw	low (STR_27+14)
 13614  003048  0100               	movlb	0	; () banked
 13615  00304A  6F8E               	movwf	printf@f& (0+255),b
 13616  00304C  0EFE               	movlw	high (STR_27+14)
 13617  00304E  0100               	movlb	0	; () banked
 13618  003050  6F8F               	movwf	(printf@f+1)& (0+255),b
 13619  003052  C0AF  F090         	movff	PusherTest@res_1789,?_printf+2
 13620  003056  C0B0  F091         	movff	PusherTest@res_1789+1,?_printf+3
 13621  00305A  EC07  F00B         	call	_printf	;wreg free
 13622                           
 13623                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13624  00305E  0E05               	movlw	5
 13625  003060  0100               	movlb	0	; () banked
 13626  003062  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13627  003064  0E0F               	movlw	15
 13628  003066  0100               	movlb	0	; () banked
 13629  003068  6FAB               	movwf	??_PusherTest& (0+255),b
 13630  00306A  0EF1               	movlw	241
 13631  00306C                     u9817:
 13632  00306C  2EE8               	decfsz	wreg,f,c
 13633  00306E  D7FE               	bra	u9817
 13634  003070  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13635  003072  D7FC               	bra	u9817
 13636  003074  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13637  003076  D7FA               	bra	u9817
 13638  003078                     l8192:
 13639  003078  A281               	btfss	3969,1,c	;volatile
 13640  00307A  D7A2               	goto	l8174
 13641                           
 13642                           ;Test.c: 495: }
 13643                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13644  00307C  3881               	swapf	3969,w,c	;volatile
 13645  00307E  0B0F               	andlw	15
 13646  003080  0A0F               	xorlw	15
 13647  003082  B4D8               	btfsc	status,2,c
 13648  003084  D047               	goto	l1314
 13649                           
 13650                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13651                           
 13652                           ;Test.c: 498: }
 13653                           
 13654                           ;Test.c: 497: break;
 13655  003086  3881               	swapf	3969,w,c	;volatile
 13656  003088  0B0F               	andlw	15
 13657  00308A  0A05               	xorlw	5
 13658  00308C  A4D8               	btfss	status,2,c
 13659  00308E  D01D               	goto	l8214
 13660                           
 13661                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13662  003090  0E00               	movlw	0
 13663  003092  0100               	movlb	0	; () banked
 13664  003094  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13665  003096  0E00               	movlw	0
 13666  003098  6FB1               	movwf	PusherTest@i& (0+255),b
 13667  00309A                     l8204:
 13668                           
 13669                           ; BSR set to: 0
 13670  00309A  0100               	movlb	0	; () banked
 13671  00309C  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13672  00309E  D008               	goto	l1317
 13673  0030A0  0EB8               	movlw	184
 13674  0030A2  0100               	movlb	0	; () banked
 13675  0030A4  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13676  0030A6  0E0B               	movlw	11
 13677  0030A8  0100               	movlb	0	; () banked
 13678  0030AA  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13679  0030AC  B0D8               	btfsc	status,0,c
 13680  0030AE  D02F               	goto	l1323
 13681  0030B0                     l1317:
 13682                           
 13683                           ; BSR set to: 0
 13684                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13685  0030B0  8889               	bsf	3977,4,c	;volatile
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13689  0030B2  0EC8               	movlw	200
 13690  0030B4                     u9827:
 13691  0030B4  2EE8               	decfsz	wreg,f,c
 13692  0030B6  D7FE               	bra	u9827
 13693                           
 13694                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13695  0030B8  9889               	bcf	3977,4,c	;volatile
 13696                           
 13697                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13698  0030BA  0E42               	movlw	66
 13699  0030BC                     u9837:
 13700  0030BC  2EE8               	decfsz	wreg,f,c
 13701  0030BE  D7FE               	bra	u9837
 13702  0030C0  D000               	nop2	
 13703  0030C2  0100               	movlb	0	; () banked
 13704  0030C4  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13705  0030C6  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13706  0030C8  D7E8               	goto	l8204
 13707  0030CA                     l8214:
 13708                           
 13709                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13710  0030CA  3881               	swapf	3969,w,c	;volatile
 13711  0030CC  0B0F               	andlw	15
 13712  0030CE  0A06               	xorlw	6
 13713  0030D0  A4D8               	btfss	status,2,c
 13714  0030D2  D01D               	goto	l1323
 13715                           
 13716                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13717  0030D4  0E00               	movlw	0
 13718  0030D6  0100               	movlb	0	; () banked
 13719  0030D8  6FB4               	movwf	(PusherTest@i_1793+1)& (0+255),b
 13720  0030DA  0E00               	movlw	0
 13721  0030DC  6FB3               	movwf	PusherTest@i_1793& (0+255),b
 13722  0030DE                     l8218:
 13723                           
 13724                           ; BSR set to: 0
 13725  0030DE  0100               	movlb	0	; () banked
 13726  0030E0  BFB4               	btfsc	(PusherTest@i_1793+1)& (0+255),7,b
 13727  0030E2  D008               	goto	l1321
 13728  0030E4  0EB8               	movlw	184
 13729  0030E6  0100               	movlb	0	; () banked
 13730  0030E8  5DB3               	subwf	PusherTest@i_1793& (0+255),w,b
 13731  0030EA  0E0B               	movlw	11
 13732  0030EC  0100               	movlb	0	; () banked
 13733  0030EE  59B4               	subwfb	(PusherTest@i_1793+1)& (0+255),w,b
 13734  0030F0  B0D8               	btfsc	status,0,c
 13735  0030F2  D00D               	goto	l1323
 13736  0030F4                     l1321:
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13740  0030F4  8889               	bsf	3977,4,c	;volatile
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13744  0030F6  0E9A               	movlw	154
 13745  0030F8                     u9847:
 13746  0030F8  2EE8               	decfsz	wreg,f,c
 13747  0030FA  D7FE               	bra	u9847
 13748  0030FC  D000               	nop2	
 13749                           
 13750                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13751  0030FE  9889               	bcf	3977,4,c	;volatile
 13752                           
 13753                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13754  003100  0E70               	movlw	112
 13755  003102                     u9857:
 13756  003102  2EE8               	decfsz	wreg,f,c
 13757  003104  D7FE               	bra	u9857
 13758  003106  0100               	movlb	0	; () banked
 13759  003108  4BB3               	infsnz	PusherTest@i_1793& (0+255),f,b
 13760  00310A  2BB4               	incf	(PusherTest@i_1793+1)& (0+255),f,b
 13761  00310C  D7E8               	goto	l8218
 13762  00310E                     l1323:
 13763  00310E  A281               	btfss	3969,1,c	;volatile
 13764  003110  D7B3               	goto	l8192
 13765  003112  D7FD               	goto	l1323
 13766  003114                     l1314:
 13767                           
 13768                           ;Test.c: 519: }
 13769                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13770  003114  9A8B               	bcf	3979,5,c	;volatile
 13771  003116  0012               	return		;funcret
 13772  003118                     __end_of_PusherTest:
 13773                           	opt stack 0
 13774                           tblptru	equ	0xFF8
 13775                           tblptrh	equ	0xFF7
 13776                           tblptrl	equ	0xFF6
 13777                           tablat	equ	0xFF5
 13778                           prodh	equ	0xFF4
 13779                           prodl	equ	0xFF3
 13780                           intcon	equ	0xFF2
 13781                           intcon2	equ	0xFF1
 13782                           intcon3	equ	0xFF0
 13783                           postinc0	equ	0xFEE
 13784                           wreg	equ	0xFE8
 13785                           postdec1	equ	0xFE5
 13786                           fsr1l	equ	0xFE1
 13787                           indf2	equ	0xFDF
 13788                           postinc2	equ	0xFDE
 13789                           postdec2	equ	0xFDD
 13790                           fsr2h	equ	0xFDA
 13791                           fsr2l	equ	0xFD9
 13792                           status	equ	0xFD8
 13793                           
 13794 ;; *************** function _readADC *****************
 13795 ;; Defined at:
 13796 ;;		line 15 in file "ADCFunctionality.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;  channel         1    wreg     unsigned char 
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;  channel         1    1[BANK0 ] unsigned char 
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      void 
 13803 ;; Registers used:
 13804 ;;		wreg, status,2, status,0, cstack
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;Total ram usage:        2 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    7
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_readIR
 13821 ;;		_readMAG
 13822 ;;		_sensorTest
 13823 ;;		_PusherTest
 13824 ;; This function uses a non-reentrant model
 13825 ;;
 13826                           
 13827                           	psect	text43
 13828  0050C6                     __ptext43:
 13829                           	opt stack 0
 13830  0050C6                     _readADC:
 13831                           	opt stack 20
 13832                           
 13833                           ;incstack = 0
 13834                           ;readADC@channel stored from wreg
 13835  0050C6  0100               	movlb	0	; () banked
 13836  0050C8  6F81               	movwf	readADC@channel& (0+255),b
 13837                           
 13838                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13839  0050CA  0100               	movlb	0	; () banked
 13840  0050CC  4581               	rlncf	readADC@channel& (0+255),w,b
 13841  0050CE  46E8               	rlncf	wreg,f,c
 13842  0050D0  0BFC               	andlw	252
 13843  0050D2  6EC2               	movwf	4034,c	;volatile
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13847  0050D4  80C2               	bsf	4034,0,c	;volatile
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13851  0050D6  82C2               	bsf	4034,1,c	;volatile
 13852                           
 13853                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13854  0050D8  D009               	goto	l6054
 13855  0050DA                     l6052:
 13856  0050DA  0E34               	movlw	52
 13857  0050DC  0100               	movlb	0	; () banked
 13858  0050DE  6F80               	movwf	??_readADC& (0+255),b
 13859  0050E0  0EF1               	movlw	241
 13860  0050E2                     u9867:
 13861  0050E2  2EE8               	decfsz	wreg,f,c
 13862  0050E4  D7FE               	bra	u9867
 13863  0050E6  2F80               	decfsz	??_readADC& (0+255),f,b
 13864  0050E8  D7FC               	bra	u9867
 13865  0050EA  D000               	nop2	
 13866  0050EC                     l6054:
 13867  0050EC  A2C2               	btfss	4034,1,c	;volatile
 13868  0050EE  0012               	return	
 13869  0050F0  D7F4               	goto	l6052
 13870  0050F2                     __end_of_readADC:
 13871                           	opt stack 0
 13872                           tblptru	equ	0xFF8
 13873                           tblptrh	equ	0xFF7
 13874                           tblptrl	equ	0xFF6
 13875                           tablat	equ	0xFF5
 13876                           prodh	equ	0xFF4
 13877                           prodl	equ	0xFF3
 13878                           intcon	equ	0xFF2
 13879                           intcon2	equ	0xFF1
 13880                           intcon3	equ	0xFF0
 13881                           postinc0	equ	0xFEE
 13882                           wreg	equ	0xFE8
 13883                           postdec1	equ	0xFE5
 13884                           fsr1l	equ	0xFE1
 13885                           indf2	equ	0xFDF
 13886                           postinc2	equ	0xFDE
 13887                           postdec2	equ	0xFDD
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8
 13891                           
 13892 ;; *************** function _PortTests *****************
 13893 ;; Defined at:
 13894 ;;		line 409 in file "Test.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;		None
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;		None
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  1    wreg      void 
 13901 ;; Registers used:
 13902 ;;		wreg, status,2, status,0
 13903 ;; Tracked objects:
 13904 ;;		On entry : 0/0
 13905 ;;		On exit  : 0/0
 13906 ;;		Unchanged: 0/0
 13907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13912 ;;Total ram usage:        2 bytes
 13913 ;; Hardware stack levels used:    1
 13914 ;; Hardware stack levels required when called:    7
 13915 ;; This function calls:
 13916 ;;		Nothing
 13917 ;; This function is called by:
 13918 ;;		_Test
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           	psect	text44
 13923  00467C                     __ptext44:
 13924                           	opt stack 0
 13925  00467C                     _PortTests:
 13926                           	opt stack 22
 13927  00467C                     l1272:
 13928  00467C  A281               	btfss	3969,1,c	;volatile
 13929  00467E  D7FE               	goto	l1272
 13930                           
 13931                           ;Test.c: 413: var = PORTB >> 4;
 13932  004680  CF81 F080          	movff	3969,??_PortTests	;volatile
 13933  004684  0100               	movlb	0	; () banked
 13934  004686  3B80               	swapf	??_PortTests& (0+255),f,b
 13935  004688  0E0F               	movlw	15
 13936  00468A  1780               	andwf	??_PortTests& (0+255),f,b
 13937  00468C  0100               	movlb	0	; () banked
 13938  00468E  5180               	movf	??_PortTests& (0+255),w,b
 13939  004690  0100               	movlb	0	; () banked
 13940  004692  6FFA               	movwf	_var& (0+255),b
 13941  004694  6BFB               	clrf	(_var+1)& (0+255),b
 13942                           
 13943                           ;Test.c: 414: switch(var){
 13944  004696  D00C               	goto	l8232
 13945  004698                     l1276:
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13949  004698  808D               	bsf	3981,0,c	;volatile
 13950                           
 13951                           ;Test.c: 417: break;
 13952  00469A  D027               	goto	l1284
 13953  00469C                     l1278:
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13957  00469C  828D               	bsf	3981,1,c	;volatile
 13958                           
 13959                           ;Test.c: 420: break;
 13960  00469E  D025               	goto	l1284
 13961  0046A0                     l1279:
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13965  0046A0  808C               	bsf	3980,0,c	;volatile
 13966                           
 13967                           ;Test.c: 423: break;
 13968  0046A2  D023               	goto	l1284
 13969  0046A4                     l1280:
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13973  0046A4  8689               	bsf	3977,3,c	;volatile
 13974                           
 13975                           ;Test.c: 426: break;
 13976  0046A6  D021               	goto	l1284
 13977  0046A8                     l1281:
 13978                           
 13979                           ; BSR set to: 0
 13980                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13981  0046A8  8889               	bsf	3977,4,c	;volatile
 13982                           
 13983                           ;Test.c: 429: break;
 13984  0046AA  D01F               	goto	l1284
 13985  0046AC                     l1282:
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13989  0046AC  8A89               	bsf	3977,5,c	;volatile
 13990                           
 13991                           ; BSR set to: 0
 13992                           ;Test.c: 435: }
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Test.c: 434: break;
 13996                           
 13997                           ;Test.c: 433: default:
 13998                           
 13999                           ;Test.c: 432: break;
 14000  0046AE  D01D               	goto	l1284
 14001  0046B0                     l8232:
 14002                           
 14003                           ; BSR set to: 0
 14004  0046B0  C0FA  F080         	movff	_var,??_PortTests
 14005  0046B4  C0FB  F081         	movff	_var+1,??_PortTests+1
 14006                           
 14007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14008                           ; Switch size 1, requested type "space"
 14009                           ; Number of cases is 1, Range of values is 0 to 0
 14010                           ; switch strategies available:
 14011                           ; Name         Instructions Cycles
 14012                           ; simple_byte            4     3 (average)
 14013                           ;	Chosen strategy is simple_byte
 14014  0046B8  0100               	movlb	0	; () banked
 14015  0046BA  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14016  0046BC  0A00               	xorlw	0	; case 0
 14017  0046BE  A4D8               	btfss	status,2,c
 14018  0046C0  D014               	goto	l1284
 14019                           
 14020                           ; BSR set to: 0
 14021                           ; Switch size 1, requested type "space"
 14022                           ; Number of cases is 6, Range of values is 0 to 5
 14023                           ; switch strategies available:
 14024                           ; Name         Instructions Cycles
 14025                           ; simple_byte           19    10 (average)
 14026                           ;	Chosen strategy is simple_byte
 14027  0046C2  0100               	movlb	0	; () banked
 14028  0046C4  5180               	movf	??_PortTests& (0+255),w,b
 14029  0046C6  0A00               	xorlw	0	; case 0
 14030  0046C8  B4D8               	btfsc	status,2,c
 14031  0046CA  D7E6               	goto	l1276
 14032  0046CC  0A01               	xorlw	1	; case 1
 14033  0046CE  B4D8               	btfsc	status,2,c
 14034  0046D0  D7E5               	goto	l1278
 14035  0046D2  0A03               	xorlw	3	; case 2
 14036  0046D4  B4D8               	btfsc	status,2,c
 14037  0046D6  D7E4               	goto	l1279
 14038  0046D8  0A01               	xorlw	1	; case 3
 14039  0046DA  B4D8               	btfsc	status,2,c
 14040  0046DC  D7E3               	goto	l1280
 14041  0046DE  0A07               	xorlw	7	; case 4
 14042  0046E0  B4D8               	btfsc	status,2,c
 14043  0046E2  D7E2               	goto	l1281
 14044  0046E4  0A01               	xorlw	1	; case 5
 14045  0046E6  B4D8               	btfsc	status,2,c
 14046  0046E8  D7E1               	goto	l1282
 14047  0046EA                     l1284:
 14048  0046EA  B281               	btfsc	3969,1,c	;volatile
 14049  0046EC  D7FE               	goto	l1284
 14050                           
 14051                           ;Test.c: 437: __nop();
 14052  0046EE  F000               	nop	
 14053                           
 14054                           ;Test.c: 438: __nop();
 14055  0046F0  F000               	nop	
 14056                           
 14057                           ;Test.c: 439: LATA = 0x00;
 14058  0046F2  0E00               	movlw	0
 14059  0046F4  6E89               	movwf	3977,c	;volatile
 14060                           
 14061                           ;Test.c: 440: LATE = 0x00;
 14062  0046F6  0E00               	movlw	0
 14063  0046F8  6E8D               	movwf	3981,c	;volatile
 14064                           
 14065                           ;Test.c: 441: LATD = 0x00; }
 14066  0046FA  0E00               	movlw	0
 14067  0046FC  6E8C               	movwf	3980,c	;volatile
 14068  0046FE  D7BE               	goto	l1272
 14069  004700                     __end_of_PortTests:
 14070                           	opt stack 0
 14071                           tblptru	equ	0xFF8
 14072                           tblptrh	equ	0xFF7
 14073                           tblptrl	equ	0xFF6
 14074                           tablat	equ	0xFF5
 14075                           prodh	equ	0xFF4
 14076                           prodl	equ	0xFF3
 14077                           intcon	equ	0xFF2
 14078                           intcon2	equ	0xFF1
 14079                           intcon3	equ	0xFF0
 14080                           postinc0	equ	0xFEE
 14081                           wreg	equ	0xFE8
 14082                           postdec1	equ	0xFE5
 14083                           fsr1l	equ	0xFE1
 14084                           indf2	equ	0xFDF
 14085                           postinc2	equ	0xFDE
 14086                           postdec2	equ	0xFDD
 14087                           fsr2h	equ	0xFDA
 14088                           fsr2l	equ	0xFD9
 14089                           status	equ	0xFD8
 14090                           
 14091 ;; *************** function _PortTestA5 *****************
 14092 ;; Defined at:
 14093 ;;		line 444 in file "Test.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;		None
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;		None
 14098 ;; Return value:  Size  Location     Type
 14099 ;;                  1    wreg      void 
 14100 ;; Registers used:
 14101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14102 ;; Tracked objects:
 14103 ;;		On entry : 0/0
 14104 ;;		On exit  : 0/0
 14105 ;;		Unchanged: 0/0
 14106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;Total ram usage:        1 bytes
 14112 ;; Hardware stack levels used:    1
 14113 ;; Hardware stack levels required when called:   10
 14114 ;; This function calls:
 14115 ;;		_lcdInst
 14116 ;;		_printf
 14117 ;; This function is called by:
 14118 ;;		_Test
 14119 ;; This function uses a non-reentrant model
 14120 ;;
 14121                           
 14122                           	psect	text45
 14123  004A52                     __ptext45:
 14124                           	opt stack 0
 14125  004A52                     _PortTestA5:
 14126                           	opt stack 19
 14127                           
 14128                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14129                           
 14130                           ;incstack = 0
 14131  004A52  0E01               	movlw	1
 14132  004A54  EC6C  F029         	call	_lcdInst
 14133  004A58  0E68               	movlw	104
 14134  004A5A  0100               	movlb	0	; () banked
 14135  004A5C  6FAB               	movwf	??_PortTestA5& (0+255),b
 14136  004A5E  0EE4               	movlw	228
 14137  004A60                     u9877:
 14138  004A60  2EE8               	decfsz	wreg,f,c
 14139  004A62  D7FE               	bra	u9877
 14140  004A64  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14141  004A66  D7FC               	bra	u9877
 14142  004A68  F000               	nop	
 14143  004A6A  0E80               	movlw	128
 14144  004A6C  EC6C  F029         	call	_lcdInst
 14145                           
 14146                           ;Test.c: 446: printf("D WILL RETURN    ");
 14147  004A70  0E37               	movlw	low STR_111
 14148  004A72  0100               	movlb	0	; () banked
 14149  004A74  6F8E               	movwf	printf@f& (0+255),b
 14150  004A76  0EFB               	movlw	high STR_111
 14151  004A78  0100               	movlb	0	; () banked
 14152  004A7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14153  004A7C  EC07  F00B         	call	_printf	;wreg free
 14154                           
 14155                           ;Test.c: 447: lcdInst(0b11000000);;
 14156  004A80  0EC0               	movlw	192
 14157  004A82  EC6C  F029         	call	_lcdInst
 14158                           
 14159                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14160  004A86  0E49               	movlw	low STR_112
 14161  004A88  0100               	movlb	0	; () banked
 14162  004A8A  6F8E               	movwf	printf@f& (0+255),b
 14163  004A8C  0EFB               	movlw	high STR_112
 14164  004A8E  0100               	movlb	0	; () banked
 14165  004A90  6F8F               	movwf	(printf@f+1)& (0+255),b
 14166  004A92  EC07  F00B         	call	_printf	;wreg free
 14167  004A96                     l1293:
 14168  004A96  A281               	btfss	3969,1,c	;volatile
 14169  004A98  D7FE               	goto	l1293
 14170                           
 14171                           ;Test.c: 453: }
 14172                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14173  004A9A  3881               	swapf	3969,w,c	;volatile
 14174  004A9C  0B0F               	andlw	15
 14175  004A9E  0A0F               	xorlw	15
 14176  004AA0  B4D8               	btfsc	status,2,c
 14177  004AA2  0012               	return	
 14178                           
 14179                           ;Test.c: 457: else{
 14180                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14181                           
 14182                           ;Test.c: 456: }
 14183                           
 14184                           ;Test.c: 455: break;
 14185  004AA4  848A               	bsf	3978,2,c	;volatile
 14186  004AA6                     l1299:
 14187  004AA6  B281               	btfsc	3969,1,c	;volatile
 14188  004AA8  D7FE               	goto	l1299
 14189                           
 14190                           ;Test.c: 461: }
 14191                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14192  004AAA  948A               	bcf	3978,2,c	;volatile
 14193  004AAC  D7F4               	goto	l1293
 14194  004AAE                     __end_of_PortTestA5:
 14195                           	opt stack 0
 14196                           tblptru	equ	0xFF8
 14197                           tblptrh	equ	0xFF7
 14198                           tblptrl	equ	0xFF6
 14199                           tablat	equ	0xFF5
 14200                           prodh	equ	0xFF4
 14201                           prodl	equ	0xFF3
 14202                           intcon	equ	0xFF2
 14203                           intcon2	equ	0xFF1
 14204                           intcon3	equ	0xFF0
 14205                           postinc0	equ	0xFEE
 14206                           wreg	equ	0xFE8
 14207                           postdec1	equ	0xFE5
 14208                           fsr1l	equ	0xFE1
 14209                           indf2	equ	0xFDF
 14210                           postinc2	equ	0xFDE
 14211                           postdec2	equ	0xFDD
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _EEPROMTest *****************
 14217 ;; Defined at:
 14218 ;;		line 577 in file "Test.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;		None
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;		None
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      void 
 14225 ;; Registers used:
 14226 ;;		None
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14236 ;;Total ram usage:        0 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    7
 14239 ;; This function calls:
 14240 ;;		Nothing
 14241 ;; This function is called by:
 14242 ;;		_Test
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           	psect	text46
 14247  00533C                     __ptext46:
 14248                           	opt stack 0
 14249  00533C                     _EEPROMTest:
 14250                           	opt stack 22
 14251                           
 14252                           ;incstack = 0
 14253  00533C  0012               	return		;funcret
 14254  00533E                     __end_of_EEPROMTest:
 14255                           	opt stack 0
 14256                           tblptru	equ	0xFF8
 14257                           tblptrh	equ	0xFF7
 14258                           tblptrl	equ	0xFF6
 14259                           tablat	equ	0xFF5
 14260                           prodh	equ	0xFF4
 14261                           prodl	equ	0xFF3
 14262                           intcon	equ	0xFF2
 14263                           intcon2	equ	0xFF1
 14264                           intcon3	equ	0xFF0
 14265                           postinc0	equ	0xFEE
 14266                           wreg	equ	0xFE8
 14267                           postdec1	equ	0xFE5
 14268                           fsr1l	equ	0xFE1
 14269                           indf2	equ	0xFDF
 14270                           postinc2	equ	0xFDE
 14271                           postdec2	equ	0xFDD
 14272                           fsr2h	equ	0xFDA
 14273                           fsr2l	equ	0xFD9
 14274                           status	equ	0xFD8
 14275                           
 14276 ;; *************** function _BothServos *****************
 14277 ;; Defined at:
 14278 ;;		line 352 in file "Test.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;		None
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;		None
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  1    wreg      void 
 14285 ;; Registers used:
 14286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14296 ;;Total ram usage:        2 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:   10
 14299 ;; This function calls:
 14300 ;;		_initServos
 14301 ;;		_lcdInst
 14302 ;;		_printf
 14303 ;;		_updateServoPosition
 14304 ;; This function is called by:
 14305 ;;		_Test
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           	psect	text47
 14310  001A46                     __ptext47:
 14311                           	opt stack 0
 14312  001A46                     _BothServos:
 14313                           	opt stack 19
 14314                           
 14315                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14316                           
 14317                           ;incstack = 0
 14318  001A46  0E01               	movlw	1
 14319  001A48  EC6C  F029         	call	_lcdInst
 14320  001A4C  0E68               	movlw	104
 14321  001A4E  0100               	movlb	0	; () banked
 14322  001A50  6FAB               	movwf	??_BothServos& (0+255),b
 14323  001A52  0EE4               	movlw	228
 14324  001A54                     u9887:
 14325  001A54  2EE8               	decfsz	wreg,f,c
 14326  001A56  D7FE               	bra	u9887
 14327  001A58  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14328  001A5A  D7FC               	bra	u9887
 14329  001A5C  F000               	nop	
 14330  001A5E  0E80               	movlw	128
 14331  001A60  EC6C  F029         	call	_lcdInst
 14332                           
 14333                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14334  001A64  0EB4               	movlw	low STR_110
 14335  001A66  0100               	movlb	0	; () banked
 14336  001A68  6F8E               	movwf	printf@f& (0+255),b
 14337  001A6A  0EFC               	movlw	high STR_110
 14338  001A6C  0100               	movlb	0	; () banked
 14339  001A6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14340  001A70  EC07  F00B         	call	_printf	;wreg free
 14341                           
 14342                           ;Test.c: 355: TMR1ON = 1;
 14343  001A74  80CD               	bsf	4045,0,c	;volatile
 14344                           
 14345                           ;Test.c: 356: TMR3ON = 1;
 14346  001A76  80B1               	bsf	4017,0,c	;volatile
 14347                           
 14348                           ;Test.c: 357: machine_state = Sorting_state;
 14349  001A78  0E01               	movlw	1
 14350  001A7A  0100               	movlb	0	; () banked
 14351  001A7C  6FFC               	movwf	_machine_state& (0+255),b
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;Test.c: 358: was_low_1 = 0;
 14355  001A7E  0E00               	movlw	0
 14356  001A80  6E7A               	movwf	_was_low_1+1,c	;volatile
 14357  001A82  0E00               	movlw	0
 14358  001A84  6E79               	movwf	_was_low_1,c	;volatile
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;Test.c: 359: was_low_3 = 0;
 14362  001A86  0E00               	movlw	0
 14363  001A88  6E7C               	movwf	_was_low_3+1,c	;volatile
 14364  001A8A  0E00               	movlw	0
 14365  001A8C  6E7B               	movwf	_was_low_3,c	;volatile
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;Test.c: 365: initServos();
 14369  001A8E  EC57  F025         	call	_initServos	;wreg free
 14370                           
 14371                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14372  001A92  0E3D               	movlw	61
 14373  001A94  0100               	movlb	0	; () banked
 14374  001A96  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14375  001A98  0EE1               	movlw	225
 14376  001A9A  0100               	movlb	0	; () banked
 14377  001A9C  6FAB               	movwf	??_BothServos& (0+255),b
 14378  001A9E  0E3F               	movlw	63
 14379  001AA0                     u9897:
 14380  001AA0  2EE8               	decfsz	wreg,f,c
 14381  001AA2  D7FE               	bra	u9897
 14382  001AA4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14383  001AA6  D7FC               	bra	u9897
 14384  001AA8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14385  001AAA  D7FA               	bra	u9897
 14386  001AAC  D000               	nop2	
 14387                           
 14388                           ;Test.c: 368: updateServoPosition(500, 1);
 14389  001AAE  0E01               	movlw	1
 14390  001AB0  0100               	movlb	0	; () banked
 14391  001AB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14392  001AB4  0EF4               	movlw	244
 14393  001AB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14394  001AB8  0E00               	movlw	0
 14395  001ABA  0100               	movlb	0	; () banked
 14396  001ABC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14397  001ABE  0E01               	movlw	1
 14398  001AC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14399  001AC2  ECB9  F022         	call	_updateServoPosition	;wreg free
 14400                           
 14401                           ;Test.c: 369: updateServoPosition(1050, 3);
 14402  001AC6  0E04               	movlw	4
 14403  001AC8  0100               	movlb	0	; () banked
 14404  001ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14405  001ACC  0E1A               	movlw	26
 14406  001ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14407  001AD0  0E00               	movlw	0
 14408  001AD2  0100               	movlb	0	; () banked
 14409  001AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14410  001AD6  0E03               	movlw	3
 14411  001AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14412  001ADA  ECB9  F022         	call	_updateServoPosition	;wreg free
 14413                           
 14414                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14415  001ADE  0E1F               	movlw	31
 14416  001AE0  0100               	movlb	0	; () banked
 14417  001AE2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14418  001AE4  0E71               	movlw	113
 14419  001AE6  0100               	movlb	0	; () banked
 14420  001AE8  6FAB               	movwf	??_BothServos& (0+255),b
 14421  001AEA  0E1E               	movlw	30
 14422  001AEC                     u9907:
 14423  001AEC  2EE8               	decfsz	wreg,f,c
 14424  001AEE  D7FE               	bra	u9907
 14425  001AF0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14426  001AF2  D7FC               	bra	u9907
 14427  001AF4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14428  001AF6  D7FA               	bra	u9907
 14429  001AF8  F000               	nop	
 14430                           
 14431                           ;Test.c: 371: updateServoPosition(1260, 3);
 14432  001AFA  0E04               	movlw	4
 14433  001AFC  0100               	movlb	0	; () banked
 14434  001AFE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14435  001B00  0EEC               	movlw	236
 14436  001B02  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14437  001B04  0E00               	movlw	0
 14438  001B06  0100               	movlb	0	; () banked
 14439  001B08  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14440  001B0A  0E03               	movlw	3
 14441  001B0C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14442  001B0E  ECB9  F022         	call	_updateServoPosition	;wreg free
 14443                           
 14444                           ;Test.c: 372: _delay((unsigned long)((700)*(32000000/4000.0)));
 14445  001B12  0E1D               	movlw	29
 14446  001B14  0100               	movlb	0	; () banked
 14447  001B16  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14448  001B18  0E69               	movlw	105
 14449  001B1A  0100               	movlb	0	; () banked
 14450  001B1C  6FAB               	movwf	??_BothServos& (0+255),b
 14451  001B1E  0EA5               	movlw	165
 14452  001B20                     u9917:
 14453  001B20  2EE8               	decfsz	wreg,f,c
 14454  001B22  D7FE               	bra	u9917
 14455  001B24  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14456  001B26  D7FC               	bra	u9917
 14457  001B28  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14458  001B2A  D7FA               	bra	u9917
 14459                           
 14460                           ;Test.c: 373: updateServoPosition(1050, 3);
 14461  001B2C  0E04               	movlw	4
 14462  001B2E  0100               	movlb	0	; () banked
 14463  001B30  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14464  001B32  0E1A               	movlw	26
 14465  001B34  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14466  001B36  0E00               	movlw	0
 14467  001B38  0100               	movlb	0	; () banked
 14468  001B3A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14469  001B3C  0E03               	movlw	3
 14470  001B3E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14471  001B40  ECB9  F022         	call	_updateServoPosition	;wreg free
 14472                           
 14473                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14474  001B44  0E1F               	movlw	31
 14475  001B46  0100               	movlb	0	; () banked
 14476  001B48  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14477  001B4A  0E71               	movlw	113
 14478  001B4C  0100               	movlb	0	; () banked
 14479  001B4E  6FAB               	movwf	??_BothServos& (0+255),b
 14480  001B50  0E1E               	movlw	30
 14481  001B52                     u9927:
 14482  001B52  2EE8               	decfsz	wreg,f,c
 14483  001B54  D7FE               	bra	u9927
 14484  001B56  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14485  001B58  D7FC               	bra	u9927
 14486  001B5A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14487  001B5C  D7FA               	bra	u9927
 14488  001B5E  F000               	nop	
 14489                           
 14490                           ;Test.c: 376: updateServoPosition(850, 1);
 14491  001B60  0E03               	movlw	3
 14492  001B62  0100               	movlb	0	; () banked
 14493  001B64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14494  001B66  0E52               	movlw	82
 14495  001B68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14496  001B6A  0E00               	movlw	0
 14497  001B6C  0100               	movlb	0	; () banked
 14498  001B6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14499  001B70  0E01               	movlw	1
 14500  001B72  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14501  001B74  ECB9  F022         	call	_updateServoPosition	;wreg free
 14502                           
 14503                           ;Test.c: 377: updateServoPosition(1050, 3);
 14504  001B78  0E04               	movlw	4
 14505  001B7A  0100               	movlb	0	; () banked
 14506  001B7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14507  001B7E  0E1A               	movlw	26
 14508  001B80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14509  001B82  0E00               	movlw	0
 14510  001B84  0100               	movlb	0	; () banked
 14511  001B86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14512  001B88  0E03               	movlw	3
 14513  001B8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14514  001B8C  ECB9  F022         	call	_updateServoPosition	;wreg free
 14515                           
 14516                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14517  001B90  0E1F               	movlw	31
 14518  001B92  0100               	movlb	0	; () banked
 14519  001B94  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14520  001B96  0E71               	movlw	113
 14521  001B98  0100               	movlb	0	; () banked
 14522  001B9A  6FAB               	movwf	??_BothServos& (0+255),b
 14523  001B9C  0E1E               	movlw	30
 14524  001B9E                     u9937:
 14525  001B9E  2EE8               	decfsz	wreg,f,c
 14526  001BA0  D7FE               	bra	u9937
 14527  001BA2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14528  001BA4  D7FC               	bra	u9937
 14529  001BA6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14530  001BA8  D7FA               	bra	u9937
 14531  001BAA  F000               	nop	
 14532                           
 14533                           ;Test.c: 379: updateServoPosition(1260, 3);
 14534  001BAC  0E04               	movlw	4
 14535  001BAE  0100               	movlb	0	; () banked
 14536  001BB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14537  001BB2  0EEC               	movlw	236
 14538  001BB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14539  001BB6  0E00               	movlw	0
 14540  001BB8  0100               	movlb	0	; () banked
 14541  001BBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14542  001BBC  0E03               	movlw	3
 14543  001BBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14544  001BC0  ECB9  F022         	call	_updateServoPosition	;wreg free
 14545                           
 14546                           ;Test.c: 380: _delay((unsigned long)((700)*(32000000/4000.0)));
 14547  001BC4  0E1D               	movlw	29
 14548  001BC6  0100               	movlb	0	; () banked
 14549  001BC8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14550  001BCA  0E69               	movlw	105
 14551  001BCC  0100               	movlb	0	; () banked
 14552  001BCE  6FAB               	movwf	??_BothServos& (0+255),b
 14553  001BD0  0EA5               	movlw	165
 14554  001BD2                     u9947:
 14555  001BD2  2EE8               	decfsz	wreg,f,c
 14556  001BD4  D7FE               	bra	u9947
 14557  001BD6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14558  001BD8  D7FC               	bra	u9947
 14559  001BDA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14560  001BDC  D7FA               	bra	u9947
 14561                           
 14562                           ;Test.c: 381: updateServoPosition(1050, 3);
 14563  001BDE  0E04               	movlw	4
 14564  001BE0  0100               	movlb	0	; () banked
 14565  001BE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14566  001BE4  0E1A               	movlw	26
 14567  001BE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14568  001BE8  0E00               	movlw	0
 14569  001BEA  0100               	movlb	0	; () banked
 14570  001BEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14571  001BEE  0E03               	movlw	3
 14572  001BF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14573  001BF2  ECB9  F022         	call	_updateServoPosition	;wreg free
 14574                           
 14575                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14576  001BF6  0E1F               	movlw	31
 14577  001BF8  0100               	movlb	0	; () banked
 14578  001BFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14579  001BFC  0E71               	movlw	113
 14580  001BFE  0100               	movlb	0	; () banked
 14581  001C00  6FAB               	movwf	??_BothServos& (0+255),b
 14582  001C02  0E1E               	movlw	30
 14583  001C04                     u9957:
 14584  001C04  2EE8               	decfsz	wreg,f,c
 14585  001C06  D7FE               	bra	u9957
 14586  001C08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14587  001C0A  D7FC               	bra	u9957
 14588  001C0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14589  001C0E  D7FA               	bra	u9957
 14590  001C10  F000               	nop	
 14591                           
 14592                           ;Test.c: 384: updateServoPosition(1200, 1);
 14593  001C12  0E04               	movlw	4
 14594  001C14  0100               	movlb	0	; () banked
 14595  001C16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14596  001C18  0EB0               	movlw	176
 14597  001C1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14598  001C1C  0E00               	movlw	0
 14599  001C1E  0100               	movlb	0	; () banked
 14600  001C20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14601  001C22  0E01               	movlw	1
 14602  001C24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14603  001C26  ECB9  F022         	call	_updateServoPosition	;wreg free
 14604                           
 14605                           ;Test.c: 385: updateServoPosition(1050, 3);
 14606  001C2A  0E04               	movlw	4
 14607  001C2C  0100               	movlb	0	; () banked
 14608  001C2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14609  001C30  0E1A               	movlw	26
 14610  001C32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14611  001C34  0E00               	movlw	0
 14612  001C36  0100               	movlb	0	; () banked
 14613  001C38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14614  001C3A  0E03               	movlw	3
 14615  001C3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14616  001C3E  ECB9  F022         	call	_updateServoPosition	;wreg free
 14617                           
 14618                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14619  001C42  0E3D               	movlw	61
 14620  001C44  0100               	movlb	0	; () banked
 14621  001C46  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14622  001C48  0EE1               	movlw	225
 14623  001C4A  0100               	movlb	0	; () banked
 14624  001C4C  6FAB               	movwf	??_BothServos& (0+255),b
 14625  001C4E  0E3F               	movlw	63
 14626  001C50                     u9967:
 14627  001C50  2EE8               	decfsz	wreg,f,c
 14628  001C52  D7FE               	bra	u9967
 14629  001C54  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14630  001C56  D7FC               	bra	u9967
 14631  001C58  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14632  001C5A  D7FA               	bra	u9967
 14633  001C5C  D000               	nop2	
 14634                           
 14635                           ;Test.c: 388: updateServoPosition(1670, 1);
 14636  001C5E  0E06               	movlw	6
 14637  001C60  0100               	movlb	0	; () banked
 14638  001C62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14639  001C64  0E86               	movlw	134
 14640  001C66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14641  001C68  0E00               	movlw	0
 14642  001C6A  0100               	movlb	0	; () banked
 14643  001C6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14644  001C6E  0E01               	movlw	1
 14645  001C70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14646  001C72  ECB9  F022         	call	_updateServoPosition	;wreg free
 14647                           
 14648                           ;Test.c: 389: updateServoPosition(1050, 3);
 14649  001C76  0E04               	movlw	4
 14650  001C78  0100               	movlb	0	; () banked
 14651  001C7A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14652  001C7C  0E1A               	movlw	26
 14653  001C7E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14654  001C80  0E00               	movlw	0
 14655  001C82  0100               	movlb	0	; () banked
 14656  001C84  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14657  001C86  0E03               	movlw	3
 14658  001C88  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14659  001C8A  ECB9  F022         	call	_updateServoPosition	;wreg free
 14660                           
 14661                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14662  001C8E  0E1F               	movlw	31
 14663  001C90  0100               	movlb	0	; () banked
 14664  001C92  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14665  001C94  0E71               	movlw	113
 14666  001C96  0100               	movlb	0	; () banked
 14667  001C98  6FAB               	movwf	??_BothServos& (0+255),b
 14668  001C9A  0E1E               	movlw	30
 14669  001C9C                     u9977:
 14670  001C9C  2EE8               	decfsz	wreg,f,c
 14671  001C9E  D7FE               	bra	u9977
 14672  001CA0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14673  001CA2  D7FC               	bra	u9977
 14674  001CA4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14675  001CA6  D7FA               	bra	u9977
 14676  001CA8  F000               	nop	
 14677                           
 14678                           ;Test.c: 391: updateServoPosition(1390, 3);
 14679  001CAA  0E05               	movlw	5
 14680  001CAC  0100               	movlb	0	; () banked
 14681  001CAE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14682  001CB0  0E6E               	movlw	110
 14683  001CB2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14684  001CB4  0E00               	movlw	0
 14685  001CB6  0100               	movlb	0	; () banked
 14686  001CB8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14687  001CBA  0E03               	movlw	3
 14688  001CBC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14689  001CBE  ECB9  F022         	call	_updateServoPosition	;wreg free
 14690                           
 14691                           ;Test.c: 392: _delay((unsigned long)((700)*(32000000/4000.0)));
 14692  001CC2  0E1D               	movlw	29
 14693  001CC4  0100               	movlb	0	; () banked
 14694  001CC6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14695  001CC8  0E69               	movlw	105
 14696  001CCA  0100               	movlb	0	; () banked
 14697  001CCC  6FAB               	movwf	??_BothServos& (0+255),b
 14698  001CCE  0EA5               	movlw	165
 14699  001CD0                     u9987:
 14700  001CD0  2EE8               	decfsz	wreg,f,c
 14701  001CD2  D7FE               	bra	u9987
 14702  001CD4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14703  001CD6  D7FC               	bra	u9987
 14704  001CD8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14705  001CDA  D7FA               	bra	u9987
 14706                           
 14707                           ;Test.c: 393: updateServoPosition(1050, 3);
 14708  001CDC  0E04               	movlw	4
 14709  001CDE  0100               	movlb	0	; () banked
 14710  001CE0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14711  001CE2  0E1A               	movlw	26
 14712  001CE4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14713  001CE6  0E00               	movlw	0
 14714  001CE8  0100               	movlb	0	; () banked
 14715  001CEA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14716  001CEC  0E03               	movlw	3
 14717  001CEE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14718  001CF0  ECB9  F022         	call	_updateServoPosition	;wreg free
 14719                           
 14720                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14721  001CF4  0E1F               	movlw	31
 14722  001CF6  0100               	movlb	0	; () banked
 14723  001CF8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14724  001CFA  0E71               	movlw	113
 14725  001CFC  0100               	movlb	0	; () banked
 14726  001CFE  6FAB               	movwf	??_BothServos& (0+255),b
 14727  001D00  0E1E               	movlw	30
 14728  001D02                     u9997:
 14729  001D02  2EE8               	decfsz	wreg,f,c
 14730  001D04  D7FE               	bra	u9997
 14731  001D06  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14732  001D08  D7FC               	bra	u9997
 14733  001D0A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14734  001D0C  D7FA               	bra	u9997
 14735  001D0E  F000               	nop	
 14736                           
 14737                           ;Test.c: 396: updateServoPosition(2400, 1);
 14738  001D10  0E09               	movlw	9
 14739  001D12  0100               	movlb	0	; () banked
 14740  001D14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14741  001D16  0E60               	movlw	96
 14742  001D18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14743  001D1A  0E00               	movlw	0
 14744  001D1C  0100               	movlb	0	; () banked
 14745  001D1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14746  001D20  0E01               	movlw	1
 14747  001D22  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14748  001D24  ECB9  F022         	call	_updateServoPosition	;wreg free
 14749                           
 14750                           ;Test.c: 397: updateServoPosition(1050, 3);
 14751  001D28  0E04               	movlw	4
 14752  001D2A  0100               	movlb	0	; () banked
 14753  001D2C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14754  001D2E  0E1A               	movlw	26
 14755  001D30  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14756  001D32  0E00               	movlw	0
 14757  001D34  0100               	movlb	0	; () banked
 14758  001D36  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14759  001D38  0E03               	movlw	3
 14760  001D3A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14761  001D3C  ECB9  F022         	call	_updateServoPosition	;wreg free
 14762                           
 14763                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14764  001D40  0E1F               	movlw	31
 14765  001D42  0100               	movlb	0	; () banked
 14766  001D44  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14767  001D46  0E71               	movlw	113
 14768  001D48  0100               	movlb	0	; () banked
 14769  001D4A  6FAB               	movwf	??_BothServos& (0+255),b
 14770  001D4C  0E1E               	movlw	30
 14771  001D4E                     u10007:
 14772  001D4E  2EE8               	decfsz	wreg,f,c
 14773  001D50  D7FE               	bra	u10007
 14774  001D52  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14775  001D54  D7FC               	bra	u10007
 14776  001D56  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14777  001D58  D7FA               	bra	u10007
 14778  001D5A  F000               	nop	
 14779                           
 14780                           ;Test.c: 399: updateServoPosition(1390, 3);
 14781  001D5C  0E05               	movlw	5
 14782  001D5E  0100               	movlb	0	; () banked
 14783  001D60  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14784  001D62  0E6E               	movlw	110
 14785  001D64  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14786  001D66  0E00               	movlw	0
 14787  001D68  0100               	movlb	0	; () banked
 14788  001D6A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14789  001D6C  0E03               	movlw	3
 14790  001D6E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14791  001D70  ECB9  F022         	call	_updateServoPosition	;wreg free
 14792                           
 14793                           ;Test.c: 400: _delay((unsigned long)((700)*(32000000/4000.0)));
 14794  001D74  0E1D               	movlw	29
 14795  001D76  0100               	movlb	0	; () banked
 14796  001D78  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14797  001D7A  0E69               	movlw	105
 14798  001D7C  0100               	movlb	0	; () banked
 14799  001D7E  6FAB               	movwf	??_BothServos& (0+255),b
 14800  001D80  0EA5               	movlw	165
 14801  001D82                     u10017:
 14802  001D82  2EE8               	decfsz	wreg,f,c
 14803  001D84  D7FE               	bra	u10017
 14804  001D86  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14805  001D88  D7FC               	bra	u10017
 14806  001D8A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14807  001D8C  D7FA               	bra	u10017
 14808                           
 14809                           ;Test.c: 401: updateServoPosition(1050, 3);
 14810  001D8E  0E04               	movlw	4
 14811  001D90  0100               	movlb	0	; () banked
 14812  001D92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14813  001D94  0E1A               	movlw	26
 14814  001D96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14815  001D98  0E00               	movlw	0
 14816  001D9A  0100               	movlb	0	; () banked
 14817  001D9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14818  001D9E  0E03               	movlw	3
 14819  001DA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14820  001DA2  ECB9  F022         	call	_updateServoPosition	;wreg free
 14821                           
 14822                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14823  001DA6  0E1F               	movlw	31
 14824  001DA8  0100               	movlb	0	; () banked
 14825  001DAA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14826  001DAC  0E71               	movlw	113
 14827  001DAE  0100               	movlb	0	; () banked
 14828  001DB0  6FAB               	movwf	??_BothServos& (0+255),b
 14829  001DB2  0E1E               	movlw	30
 14830  001DB4                     u10027:
 14831  001DB4  2EE8               	decfsz	wreg,f,c
 14832  001DB6  D7FE               	bra	u10027
 14833  001DB8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14834  001DBA  D7FC               	bra	u10027
 14835  001DBC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14836  001DBE  D7FA               	bra	u10027
 14837  001DC0  F000               	nop	
 14838                           
 14839                           ;Test.c: 404: TMR1ON = 0;
 14840  001DC2  90CD               	bcf	4045,0,c	;volatile
 14841                           
 14842                           ;Test.c: 405: TMR3ON = 0;
 14843  001DC4  90B1               	bcf	4017,0,c	;volatile
 14844                           
 14845                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14846  001DC6  9EF2               	bcf	intcon,7,c	;volatile
 14847  001DC8  0012               	return		;funcret
 14848  001DCA                     __end_of_BothServos:
 14849                           	opt stack 0
 14850                           tblptru	equ	0xFF8
 14851                           tblptrh	equ	0xFF7
 14852                           tblptrl	equ	0xFF6
 14853                           tablat	equ	0xFF5
 14854                           prodh	equ	0xFF4
 14855                           prodl	equ	0xFF3
 14856                           intcon	equ	0xFF2
 14857                           intcon2	equ	0xFF1
 14858                           intcon3	equ	0xFF0
 14859                           postinc0	equ	0xFEE
 14860                           wreg	equ	0xFE8
 14861                           postdec1	equ	0xFE5
 14862                           fsr1l	equ	0xFE1
 14863                           indf2	equ	0xFDF
 14864                           postinc2	equ	0xFDE
 14865                           postdec2	equ	0xFDD
 14866                           fsr2h	equ	0xFDA
 14867                           fsr2l	equ	0xFD9
 14868                           status	equ	0xFD8
 14869                           
 14870 ;; *************** function _initServos *****************
 14871 ;; Defined at:
 14872 ;;		line 428 in file "sort.c"
 14873 ;; Parameters:    Size  Location     Type
 14874 ;;		None
 14875 ;; Auto vars:     Size  Location     Type
 14876 ;;		None
 14877 ;; Return value:  Size  Location     Type
 14878 ;;                  1    wreg      void 
 14879 ;; Registers used:
 14880 ;;		wreg, status,2, status,0, cstack
 14881 ;; Tracked objects:
 14882 ;;		On entry : 0/0
 14883 ;;		On exit  : 0/0
 14884 ;;		Unchanged: 0/0
 14885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14889 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;Total ram usage:        1 bytes
 14891 ;; Hardware stack levels used:    1
 14892 ;; Hardware stack levels required when called:    8
 14893 ;; This function calls:
 14894 ;;		_updateServoPosition
 14895 ;; This function is called by:
 14896 ;;		_Loading
 14897 ;;		_BothServos
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           	psect	text48
 14902  004AAE                     __ptext48:
 14903                           	opt stack 0
 14904  004AAE                     _initServos:
 14905                           	opt stack 20
 14906                           
 14907                           ;sort.c: 429: updateServoPosition(1200, 1);
 14908                           
 14909                           ;incstack = 0
 14910  004AAE  0E04               	movlw	4
 14911  004AB0  0100               	movlb	0	; () banked
 14912  004AB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14913  004AB4  0EB0               	movlw	176
 14914  004AB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14915  004AB8  0E00               	movlw	0
 14916  004ABA  0100               	movlb	0	; () banked
 14917  004ABC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14918  004ABE  0E01               	movlw	1
 14919  004AC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14920  004AC2  ECB9  F022         	call	_updateServoPosition	;wreg free
 14921                           
 14922                           ;sort.c: 430: updateServoPosition(1050, 3);
 14923  004AC6  0E04               	movlw	4
 14924  004AC8  0100               	movlb	0	; () banked
 14925  004ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14926  004ACC  0E1A               	movlw	26
 14927  004ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14928  004AD0  0E00               	movlw	0
 14929  004AD2  0100               	movlb	0	; () banked
 14930  004AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14931  004AD6  0E03               	movlw	3
 14932  004AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14933  004ADA  ECB9  F022         	call	_updateServoPosition	;wreg free
 14934                           
 14935                           ;sort.c: 431: TMR1ON = 1;
 14936  004ADE  80CD               	bsf	4045,0,c	;volatile
 14937                           
 14938                           ;sort.c: 432: was_low_1 = 0;
 14939  004AE0  0E00               	movlw	0
 14940  004AE2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14941  004AE4  0E00               	movlw	0
 14942  004AE6  6E79               	movwf	_was_low_1,c	;volatile
 14943                           
 14944                           ;sort.c: 433: _delay((unsigned long)((5)*(32000000/4000.0)));
 14945  004AE8  0E34               	movlw	52
 14946  004AEA  0100               	movlb	0	; () banked
 14947  004AEC  6F88               	movwf	??_initServos& (0+255),b
 14948  004AEE  0EF1               	movlw	241
 14949  004AF0                     u10037:
 14950  004AF0  2EE8               	decfsz	wreg,f,c
 14951  004AF2  D7FE               	bra	u10037
 14952  004AF4  2F88               	decfsz	??_initServos& (0+255),f,b
 14953  004AF6  D7FC               	bra	u10037
 14954  004AF8  D000               	nop2	
 14955                           
 14956                           ;sort.c: 434: TMR3ON = 1;
 14957  004AFA  80B1               	bsf	4017,0,c	;volatile
 14958                           
 14959                           ;sort.c: 435: was_low_3 = 0;
 14960  004AFC  0E00               	movlw	0
 14961  004AFE  6E7C               	movwf	_was_low_3+1,c	;volatile
 14962  004B00  0E00               	movlw	0
 14963  004B02  6E7B               	movwf	_was_low_3,c	;volatile
 14964                           
 14965                           ;sort.c: 437: LATCbits.LATC0 = 1;
 14966  004B04  808B               	bsf	3979,0,c	;volatile
 14967  004B06  0012               	return		;funcret
 14968  004B08                     __end_of_initServos:
 14969                           	opt stack 0
 14970                           tblptru	equ	0xFF8
 14971                           tblptrh	equ	0xFF7
 14972                           tblptrl	equ	0xFF6
 14973                           tablat	equ	0xFF5
 14974                           prodh	equ	0xFF4
 14975                           prodl	equ	0xFF3
 14976                           intcon	equ	0xFF2
 14977                           intcon2	equ	0xFF1
 14978                           intcon3	equ	0xFF0
 14979                           postinc0	equ	0xFEE
 14980                           wreg	equ	0xFE8
 14981                           postdec1	equ	0xFE5
 14982                           fsr1l	equ	0xFE1
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           fsr2h	equ	0xFDA
 14987                           fsr2l	equ	0xFD9
 14988                           status	equ	0xFD8
 14989                           
 14990 ;; *************** function _updateServoPosition *****************
 14991 ;; Defined at:
 14992 ;;		line 505 in file "sort.c"
 14993 ;; Parameters:    Size  Location     Type
 14994 ;;  time_us         2    0[BANK0 ] int 
 14995 ;;  timer           2    2[BANK0 ] int 
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;  my_time         2    6[BANK0 ] unsigned int 
 14998 ;; Return value:  Size  Location     Type
 14999 ;;                  1    wreg      void 
 15000 ;; Registers used:
 15001 ;;		wreg, status,2, status,0
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15007 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;Total ram usage:        8 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    7
 15014 ;; This function calls:
 15015 ;;		Nothing
 15016 ;; This function is called by:
 15017 ;;		_Distribution
 15018 ;;		_initServos
 15019 ;;		_actuatorTest
 15020 ;;		_BothServos
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text49
 15025  004572                     __ptext49:
 15026                           	opt stack 0
 15027  004572                     _updateServoPosition:
 15028                           	opt stack 20
 15029                           
 15030                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 15031                           
 15032                           ;incstack = 0
 15033  004572  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15034  004576  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15035  00457A  0100               	movlb	0	; () banked
 15036  00457C  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15037  00457E  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15038  004580  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15039  004582  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15040  004584  0EFF               	movlw	255
 15041  004586  0100               	movlb	0	; () banked
 15042  004588  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15043  00458A  0100               	movlb	0	; () banked
 15044  00458C  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15045  00458E  0EFF               	movlw	255
 15046  004590  0100               	movlb	0	; () banked
 15047  004592  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15048  004594  0100               	movlb	0	; () banked
 15049  004596  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15050                           
 15051                           ;sort.c: 507: switch(timer){
 15052  004598  D01D               	goto	l6422
 15053  00459A                     l6416:
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 15057  00459A  0100               	movlb	0	; () banked
 15058  00459C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15059  00459E  0100               	movlb	0	; () banked
 15060  0045A0  6FDA               	movwf	_servoTimes& (0+255),b
 15061  0045A2  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15062                           
 15063                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 15064  0045A4  0100               	movlb	0	; () banked
 15065  0045A6  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15066  0045A8  0100               	movlb	0	; () banked
 15067  0045AA  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15068  0045AC  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;sort.c: 512: pan_servo_state = time_us;
 15072  0045AE  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15073  0045B2  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15074  0045B6                     l868:
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 15078  0045B6  0100               	movlb	0	; () banked
 15079  0045B8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15080  0045BA  0100               	movlb	0	; () banked
 15081  0045BC  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15082  0045BE  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15083                           
 15084                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 15085  0045C0  0100               	movlb	0	; () banked
 15086  0045C2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15087  0045C4  0100               	movlb	0	; () banked
 15088  0045C6  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15089  0045C8  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;sort.c: 517: tilt_servo_state = time_us;
 15093  0045CA  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15094  0045CE  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15095                           
 15096                           ;sort.c: 518: }
 15097  0045D2  0012               	return	
 15098  0045D4                     l6422:
 15099                           
 15100                           ; BSR set to: 0
 15101  0045D4  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15102  0045D8  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15103                           
 15104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15105                           ; Switch size 1, requested type "space"
 15106                           ; Number of cases is 1, Range of values is 0 to 0
 15107                           ; switch strategies available:
 15108                           ; Name         Instructions Cycles
 15109                           ; simple_byte            4     3 (average)
 15110                           ;	Chosen strategy is simple_byte
 15111  0045DC  0100               	movlb	0	; () banked
 15112  0045DE  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15113  0045E0  0A00               	xorlw	0	; case 0
 15114  0045E2  A4D8               	btfss	status,2,c
 15115  0045E4  0012               	return	
 15116                           
 15117                           ; BSR set to: 0
 15118                           ; Switch size 1, requested type "space"
 15119                           ; Number of cases is 2, Range of values is 1 to 3
 15120                           ; switch strategies available:
 15121                           ; Name         Instructions Cycles
 15122                           ; simple_byte            7     4 (average)
 15123                           ;	Chosen strategy is simple_byte
 15124  0045E6  0100               	movlb	0	; () banked
 15125  0045E8  5184               	movf	??_updateServoPosition& (0+255),w,b
 15126  0045EA  0A01               	xorlw	1	; case 1
 15127  0045EC  B4D8               	btfsc	status,2,c
 15128  0045EE  D7D5               	goto	l6416
 15129  0045F0  0A02               	xorlw	2	; case 3
 15130  0045F2  A4D8               	btfss	status,2,c
 15131  0045F4  0012               	return	
 15132  0045F6  D7DF               	goto	l868
 15133  0045F8                     __end_of_updateServoPosition:
 15134                           	opt stack 0
 15135                           tblptru	equ	0xFF8
 15136                           tblptrh	equ	0xFF7
 15137                           tblptrl	equ	0xFF6
 15138                           tablat	equ	0xFF5
 15139                           prodh	equ	0xFF4
 15140                           prodl	equ	0xFF3
 15141                           intcon	equ	0xFF2
 15142                           intcon2	equ	0xFF1
 15143                           intcon3	equ	0xFF0
 15144                           postinc0	equ	0xFEE
 15145                           wreg	equ	0xFE8
 15146                           postdec1	equ	0xFE5
 15147                           fsr1l	equ	0xFE1
 15148                           indf2	equ	0xFDF
 15149                           postinc2	equ	0xFDE
 15150                           postdec2	equ	0xFDD
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function _BlockerTest *****************
 15156 ;; Defined at:
 15157 ;;		line 589 in file "Test.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;		None
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  i               2   44[BANK0 ] int 
 15162 ;;  cond_flag       2   48[BANK0 ] int 
 15163 ;;  cam_flag        2   46[BANK0 ] int 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;Total ram usage:        7 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:   10
 15180 ;; This function calls:
 15181 ;;		_lcdInst
 15182 ;;		_printf
 15183 ;; This function is called by:
 15184 ;;		_Test
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           	psect	text50
 15189  003892                     __ptext50:
 15190                           	opt stack 0
 15191  003892                     _BlockerTest:
 15192                           	opt stack 19
 15193                           
 15194                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15195                           
 15196                           ; BSR set to: 0
 15197                           ;incstack = 0
 15198  003892  0E01               	movlw	1
 15199  003894  EC6C  F029         	call	_lcdInst
 15200  003898  0E68               	movlw	104
 15201  00389A  0100               	movlb	0	; () banked
 15202  00389C  6FAB               	movwf	??_BlockerTest& (0+255),b
 15203  00389E  0EE4               	movlw	228
 15204  0038A0                     u10047:
 15205  0038A0  2EE8               	decfsz	wreg,f,c
 15206  0038A2  D7FE               	bra	u10047
 15207  0038A4  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15208  0038A6  D7FC               	bra	u10047
 15209  0038A8  F000               	nop	
 15210  0038AA  0E80               	movlw	128
 15211  0038AC  EC6C  F029         	call	_lcdInst
 15212                           
 15213                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15214  0038B0  0E7F               	movlw	low STR_122
 15215  0038B2  0100               	movlb	0	; () banked
 15216  0038B4  6F8E               	movwf	printf@f& (0+255),b
 15217  0038B6  0EFB               	movlw	high STR_122
 15218  0038B8  0100               	movlb	0	; () banked
 15219  0038BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15220  0038BC  A480               	btfss	3968,2,c	;volatile
 15221  0038BE  D004               	goto	u6990
 15222  0038C0  0100               	movlb	0	; () banked
 15223  0038C2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15224  0038C4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15225  0038C6  D002               	goto	u6998
 15226  0038C8                     u6990:
 15227  0038C8  0100               	movlb	0	; () banked
 15228  0038CA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15229  0038CC                     u6998:
 15230  0038CC  0100               	movlb	0	; () banked
 15231  0038CE  51AB               	movf	??_BlockerTest& (0+255),w,b
 15232  0038D0  0100               	movlb	0	; () banked
 15233  0038D2  6F90               	movwf	(?_printf+2)& (0+255),b
 15234  0038D4  6B91               	clrf	(?_printf+3)& (0+255),b
 15235  0038D6  EC07  F00B         	call	_printf	;wreg free
 15236                           
 15237                           ;Test.c: 592: lcdInst(0b11000000);;
 15238  0038DA  0EC0               	movlw	192
 15239  0038DC  EC6C  F029         	call	_lcdInst
 15240                           
 15241                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15242  0038E0  0E6D               	movlw	low STR_123
 15243  0038E2  0100               	movlb	0	; () banked
 15244  0038E4  6F8E               	movwf	printf@f& (0+255),b
 15245  0038E6  0EFB               	movlw	high STR_123
 15246  0038E8  0100               	movlb	0	; () banked
 15247  0038EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15248  0038EC  EC07  F00B         	call	_printf	;wreg free
 15249                           
 15250                           ;Test.c: 594: int cam_flag = 1;
 15251  0038F0  0E00               	movlw	0
 15252  0038F2  0100               	movlb	0	; () banked
 15253  0038F4  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15254  0038F6  0E01               	movlw	1
 15255  0038F8  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;Test.c: 595: int cond_flag = 0;
 15259  0038FA  0E00               	movlw	0
 15260  0038FC  0100               	movlb	0	; () banked
 15261  0038FE  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15262  003900  0E00               	movlw	0
 15263  003902  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15267                           
 15268                           ;Test.c: 596: while(1){
 15269  003904  D018               	goto	l8352
 15270  003906                     l8348:
 15271                           
 15272                           ;Test.c: 598: lcdInst(0b10000000);;
 15273  003906  0E80               	movlw	128
 15274  003908  EC6C  F029         	call	_lcdInst
 15275                           
 15276                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15277  00390C  0E7F               	movlw	low STR_122
 15278  00390E  0100               	movlb	0	; () banked
 15279  003910  6F8E               	movwf	printf@f& (0+255),b
 15280  003912  0EFB               	movlw	high STR_122
 15281  003914  0100               	movlb	0	; () banked
 15282  003916  6F8F               	movwf	(printf@f+1)& (0+255),b
 15283  003918  A480               	btfss	3968,2,c	;volatile
 15284  00391A  D004               	goto	u7000
 15285  00391C  0100               	movlb	0	; () banked
 15286  00391E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15287  003920  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15288  003922  D002               	goto	u7008
 15289  003924                     u7000:
 15290  003924  0100               	movlb	0	; () banked
 15291  003926  6BAB               	clrf	??_BlockerTest& (0+255),b
 15292  003928                     u7008:
 15293  003928  0100               	movlb	0	; () banked
 15294  00392A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15295  00392C  0100               	movlb	0	; () banked
 15296  00392E  6F90               	movwf	(?_printf+2)& (0+255),b
 15297  003930  6B91               	clrf	(?_printf+3)& (0+255),b
 15298  003932  EC07  F00B         	call	_printf	;wreg free
 15299  003936                     l8352:
 15300  003936  A281               	btfss	3969,1,c	;volatile
 15301  003938  D7E6               	goto	l8348
 15302                           
 15303                           ;Test.c: 600: }
 15304                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15305  00393A  3881               	swapf	3969,w,c	;volatile
 15306  00393C  0B0F               	andlw	15
 15307  00393E  0A0F               	xorlw	15
 15308  003940  B4D8               	btfsc	status,2,c
 15309  003942  0012               	return	
 15310                           
 15311                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15312                           
 15313                           ;Test.c: 603: }
 15314                           
 15315                           ;Test.c: 602: break;
 15316  003944  3881               	swapf	3969,w,c	;volatile
 15317  003946  0B0F               	andlw	15
 15318  003948  06E8               	decf	wreg,f,c
 15319  00394A  A4D8               	btfss	status,2,c
 15320  00394C  D016               	goto	l8370
 15321                           
 15322                           ;Test.c: 605: if(cond_flag){
 15323  00394E  0100               	movlb	0	; () banked
 15324  003950  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15325  003952  0100               	movlb	0	; () banked
 15326  003954  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15327  003956  B4D8               	btfsc	status,2,c
 15328  003958  D007               	goto	l1369
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15332  00395A  8689               	bsf	3977,3,c	;volatile
 15333  00395C  D006               	goto	l8368
 15334  00395E                     u7051:
 15335  00395E  0E01               	movlw	1
 15336  003960                     u7060:
 15337  003960  0100               	movlb	0	; () banked
 15338  003962  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15339  003964  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15340                           
 15341                           ;Test.c: 608: }
 15342  003966  D054               	goto	l8394
 15343  003968                     l1369:
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;Test.c: 609: else{
 15347                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15348  003968  9689               	bcf	3977,3,c	;volatile
 15349  00396A                     l8368:
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;Test.c: 611: cond_flag = !cond_flag;
 15353  00396A  0100               	movlb	0	; () banked
 15354  00396C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15355  00396E  0100               	movlb	0	; () banked
 15356  003970  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15357  003972  B4D8               	btfsc	status,2,c
 15358  003974  D7F4               	goto	u7051
 15359  003976  0E00               	movlw	0
 15360  003978  D7F3               	goto	u7060
 15361  00397A                     l8370:
 15362                           
 15363                           ;Test.c: 614: else{
 15364                           ;Test.c: 615: if(cam_flag){
 15365  00397A  0100               	movlb	0	; () banked
 15366  00397C  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15367  00397E  0100               	movlb	0	; () banked
 15368  003980  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15369  003982  B4D8               	btfsc	status,2,c
 15370  003984  D007               	goto	l8376
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15374  003986  808B               	bsf	3979,0,c	;volatile
 15375  003988  D023               	goto	l8388
 15376  00398A                     u7101:
 15377  00398A  0E01               	movlw	1
 15378  00398C                     u7110:
 15379  00398C  0100               	movlb	0	; () banked
 15380  00398E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15381  003990  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15382                           
 15383                           ;Test.c: 618: }
 15384  003992  D03E               	goto	l8394
 15385  003994                     l8376:
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;Test.c: 619: else{
 15389                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15390  003994  0E00               	movlw	0
 15391  003996  0100               	movlb	0	; () banked
 15392  003998  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15393  00399A  0E00               	movlw	0
 15394  00399C  6FAC               	movwf	BlockerTest@i& (0+255),b
 15395  00399E                     l8378:
 15396                           
 15397                           ; BSR set to: 0
 15398  00399E  0100               	movlb	0	; () banked
 15399  0039A0  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15400  0039A2  D008               	goto	l1374
 15401  0039A4  0E88               	movlw	136
 15402  0039A6  0100               	movlb	0	; () banked
 15403  0039A8  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15404  0039AA  0E13               	movlw	19
 15405  0039AC  0100               	movlb	0	; () banked
 15406  0039AE  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15407  0039B0  B0D8               	btfsc	status,0,c
 15408  0039B2  D00D               	goto	l1375
 15409  0039B4                     l1374:
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;Test.c: 621: {
 15413                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15414  0039B4  808B               	bsf	3979,0,c	;volatile
 15415                           
 15416                           ; BSR set to: 0
 15417                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15418  0039B6  0E1A               	movlw	26
 15419  0039B8                     u10057:
 15420  0039B8  2EE8               	decfsz	wreg,f,c
 15421  0039BA  D7FE               	bra	u10057
 15422  0039BC  D000               	nop2	
 15423                           
 15424                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15425  0039BE  908B               	bcf	3979,0,c	;volatile
 15426                           
 15427                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15428  0039C0  0EF0               	movlw	240
 15429  0039C2                     u10067:
 15430  0039C2  2EE8               	decfsz	wreg,f,c
 15431  0039C4  D7FE               	bra	u10067
 15432  0039C6  0100               	movlb	0	; () banked
 15433  0039C8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15434  0039CA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15435  0039CC  D7E8               	goto	l8378
 15436  0039CE                     l1375:
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;Test.c: 626: }
 15440                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15441  0039CE  908B               	bcf	3979,0,c	;volatile
 15442  0039D0                     l8388:
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;Test.c: 628: cam_flag = !cam_flag;
 15446  0039D0  0100               	movlb	0	; () banked
 15447  0039D2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15448  0039D4  0100               	movlb	0	; () banked
 15449  0039D6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15450  0039D8  B4D8               	btfsc	status,2,c
 15451  0039DA  D7D7               	goto	u7101
 15452  0039DC  0E00               	movlw	0
 15453  0039DE  D7D6               	goto	u7110
 15454  0039E0                     l8390:
 15455                           
 15456                           ;Test.c: 633: lcdInst(0b10000000);;
 15457  0039E0  0E80               	movlw	128
 15458  0039E2  EC6C  F029         	call	_lcdInst
 15459                           
 15460                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15461  0039E6  0E7F               	movlw	low STR_122
 15462  0039E8  0100               	movlb	0	; () banked
 15463  0039EA  6F8E               	movwf	printf@f& (0+255),b
 15464  0039EC  0EFB               	movlw	high STR_122
 15465  0039EE  0100               	movlb	0	; () banked
 15466  0039F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15467  0039F2  A480               	btfss	3968,2,c	;volatile
 15468  0039F4  D004               	goto	u7160
 15469  0039F6  0100               	movlb	0	; () banked
 15470  0039F8  6BAB               	clrf	??_BlockerTest& (0+255),b
 15471  0039FA  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15472  0039FC  D002               	goto	u7168
 15473  0039FE                     u7160:
 15474  0039FE  0100               	movlb	0	; () banked
 15475  003A00  6BAB               	clrf	??_BlockerTest& (0+255),b
 15476  003A02                     u7168:
 15477  003A02  0100               	movlb	0	; () banked
 15478  003A04  51AB               	movf	??_BlockerTest& (0+255),w,b
 15479  003A06  0100               	movlb	0	; () banked
 15480  003A08  6F90               	movwf	(?_printf+2)& (0+255),b
 15481  003A0A  6B91               	clrf	(?_printf+3)& (0+255),b
 15482  003A0C  EC07  F00B         	call	_printf	;wreg free
 15483  003A10                     l8394:
 15484  003A10  A281               	btfss	3969,1,c	;volatile
 15485  003A12  D791               	goto	l8352
 15486  003A14  D7E5               	goto	l8390
 15487  003A16                     __end_of_BlockerTest:
 15488                           	opt stack 0
 15489                           tblptru	equ	0xFF8
 15490                           tblptrh	equ	0xFF7
 15491                           tblptrl	equ	0xFF6
 15492                           tablat	equ	0xFF5
 15493                           prodh	equ	0xFF4
 15494                           prodl	equ	0xFF3
 15495                           intcon	equ	0xFF2
 15496                           intcon2	equ	0xFF1
 15497                           intcon3	equ	0xFF0
 15498                           postinc0	equ	0xFEE
 15499                           wreg	equ	0xFE8
 15500                           postdec1	equ	0xFE5
 15501                           fsr1l	equ	0xFE1
 15502                           indf2	equ	0xFDF
 15503                           postinc2	equ	0xFDE
 15504                           postdec2	equ	0xFDD
 15505                           fsr2h	equ	0xFDA
 15506                           fsr2l	equ	0xFD9
 15507                           status	equ	0xFD8
 15508                           
 15509 ;; *************** function _printf *****************
 15510 ;; Defined at:
 15511 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15512 ;; Parameters:    Size  Location     Type
 15513 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15514 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15515 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15516 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15517 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15518 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15519 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15520 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15521 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15522 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15523 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15524 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15525 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15526 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15527 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15528 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15529 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15530 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15531 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15532 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15533 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15534 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15535 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15536 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15537 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15538 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;  tmpval          4    0        struct .
 15541 ;;  width           2   41[BANK0 ] int 
 15542 ;;  val             2   37[BANK0 ] unsigned int 
 15543 ;;  len             2   35[BANK0 ] unsigned int 
 15544 ;;  ap              2   33[BANK0 ] PTR void [1]
 15545 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15546 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15547 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15548 ;;  c               1   40[BANK0 ] char 
 15549 ;;  flag            1   39[BANK0 ] unsigned char 
 15550 ;;  prec            1   30[BANK0 ] char 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;                  2   14[BANK0 ] int 
 15553 ;; Registers used:
 15554 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15560 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15563 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;Total ram usage:       29 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    9
 15567 ;; This function calls:
 15568 ;;		___lwdiv
 15569 ;;		___lwmod
 15570 ;;		___wmul
 15571 ;;		_isdigit
 15572 ;;		_putch
 15573 ;; This function is called by:
 15574 ;;		_UI
 15575 ;;		_change_state_to_menu_start
 15576 ;;		_change_state_to_menu_12
 15577 ;;		_change_state_to_menu_22
 15578 ;;		_printRTC
 15579 ;;		_EEPROM_write
 15580 ;;		_Test
 15581 ;;		_algorithmTest
 15582 ;;		_sensorTest
 15583 ;;		_actuatorTest
 15584 ;;		_BothServos
 15585 ;;		_PortTestA5
 15586 ;;		_PusherTest
 15587 ;;		_SpeedTest
 15588 ;;		_BlockerTest
 15589 ;;		_ToggleTestA5
 15590 ;; This function uses a non-reentrant model
 15591 ;;
 15592                           
 15593                           	psect	text51
 15594  00160E                     __ptext51:
 15595                           	opt stack 0
 15596  00160E                     _printf:
 15597                           	opt stack 18
 15598                           
 15599                           ;doprnt.c: 466: va_list ap;
 15600                           ;doprnt.c: 499: signed char c;
 15601                           ;doprnt.c: 501: int width;
 15602                           ;doprnt.c: 506: signed char prec;
 15603                           ;doprnt.c: 508: unsigned char flag;
 15604                           ;doprnt.c: 523: union {
 15605                           ;doprnt.c: 524: unsigned long vd;
 15606                           ;doprnt.c: 525: double integ;
 15607                           ;doprnt.c: 526: } tmpval;
 15608                           ;doprnt.c: 528: unsigned int val;
 15609                           ;doprnt.c: 529: unsigned len;
 15610                           ;doprnt.c: 530: const char * cp;
 15611                           ;doprnt.c: 533: *ap = __va_start();
 15612                           
 15613                           ;incstack = 0
 15614  00160E  0E90               	movlw	low (?_printf+2)
 15615  001610  0100               	movlb	0	; () banked
 15616  001612  6FA1               	movwf	printf@ap& (0+255),b
 15617  001614  0E00               	movlw	high (?_printf+2)
 15618  001616  0100               	movlb	0	; () banked
 15619  001618  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15620                           
 15621                           ;doprnt.c: 536: while(c = *f++) {
 15622  00161A  D205               	goto	l6376
 15623  00161C                     l6246:
 15624                           
 15625                           ; BSR set to: 0
 15626                           ;doprnt.c: 538: if(c != '%')
 15627  00161C  0E25               	movlw	37
 15628  00161E  0100               	movlb	0	; () banked
 15629  001620  19A8               	xorwf	printf@c& (0+255),w,b
 15630  001622  B4D8               	btfsc	status,2,c
 15631  001624  D005               	goto	l6250
 15632                           
 15633                           ; BSR set to: 0
 15634                           ;doprnt.c: 540: {
 15635                           ;doprnt.c: 541: (putch(c) );
 15636  001626  0100               	movlb	0	; () banked
 15637  001628  51A8               	movf	printf@c& (0+255),w,b
 15638  00162A  EC64  F029         	call	_putch
 15639                           
 15640                           ;doprnt.c: 542: continue;
 15641  00162E  D1FB               	goto	l6376
 15642  001630                     l6250:
 15643                           
 15644                           ;doprnt.c: 543: }
 15645                           ;doprnt.c: 546: width = 0;
 15646  001630  0E00               	movlw	0
 15647  001632  0100               	movlb	0	; () banked
 15648  001634  6FAA               	movwf	(printf@width+1)& (0+255),b
 15649  001636  0E00               	movlw	0
 15650  001638  6FA9               	movwf	printf@width& (0+255),b
 15651                           
 15652                           ;doprnt.c: 548: flag = 0;
 15653  00163A  0E00               	movlw	0
 15654  00163C  0100               	movlb	0	; () banked
 15655  00163E  6FA7               	movwf	printf@flag& (0+255),b
 15656                           
 15657                           ; BSR set to: 0
 15658                           ;doprnt.c: 551: switch(*f) {
 15659                           
 15660                           ;doprnt.c: 550: for(;;) {
 15661  001640  D005               	goto	l6256
 15662  001642                     l6252:
 15663                           
 15664                           ;doprnt.c: 580: flag |= 0x04;
 15665  001642  0100               	movlb	0	; () banked
 15666  001644  85A7               	bsf	printf@flag& (0+255),2,b
 15667                           
 15668                           ;doprnt.c: 581: f++;
 15669  001646  0100               	movlb	0	; () banked
 15670  001648  4B8E               	infsnz	printf@f& (0+255),f,b
 15671  00164A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15672  00164C                     l6256:
 15673  00164C  C08E  FFF6         	movff	printf@f,tblptrl
 15674  001650  C08F  FFF7         	movff	printf@f+1,tblptrh
 15675  001654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15676  001654  6AF8               	clrf	tblptru,c
 15677  001656                     	endif
 15678  001656                     	if	0	;tblptru may be non-zero
 15679  001656                     	endif
 15680  001656  0008               	tblrd		*
 15681  001658  50F5               	movf	tablat,w,c
 15682                           
 15683                           ; Switch size 1, requested type "space"
 15684                           ; Number of cases is 1, Range of values is 48 to 48
 15685                           ; switch strategies available:
 15686                           ; Name         Instructions Cycles
 15687                           ; simple_byte            4     3 (average)
 15688                           ;	Chosen strategy is simple_byte
 15689  00165A  0A30               	xorlw	48	; case 48
 15690  00165C  B4D8               	btfsc	status,2,c
 15691  00165E  D7F1               	goto	l6252
 15692                           
 15693                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15694                           
 15695                           ;doprnt.c: 586: }
 15696                           
 15697                           ;doprnt.c: 585: break;
 15698  001660  C08E  FFF6         	movff	printf@f,tblptrl
 15699  001664  C08F  FFF7         	movff	printf@f+1,tblptrh
 15700  001668                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15701  001668  6AF8               	clrf	tblptru,c
 15702  00166A                     	endif
 15703  00166A                     	if	0	;tblptru may be non-zero
 15704  00166A                     	endif
 15705  00166A  0008               	tblrd		*
 15706  00166C  50F5               	movf	tablat,w,c
 15707  00166E  EC79  F028         	call	_isdigit
 15708  001672  A0D8               	btfss	status,0,c
 15709  001674  D0D2               	goto	l6304
 15710                           
 15711                           ;doprnt.c: 598: width = 0;
 15712  001676  0E00               	movlw	0
 15713  001678  0100               	movlb	0	; () banked
 15714  00167A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15715  00167C  0E00               	movlw	0
 15716  00167E  6FA9               	movwf	printf@width& (0+255),b
 15717  001680                     l6262:
 15718                           
 15719                           ;doprnt.c: 600: width *= 10;
 15720  001680  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15721  001684  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15722  001688  0E00               	movlw	0
 15723  00168A  0100               	movlb	0	; () banked
 15724  00168C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15725  00168E  0E0A               	movlw	10
 15726  001690  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15727  001692  ECE2  F026         	call	___wmul	;wreg free
 15728  001696  C080  F0A9         	movff	?___wmul,printf@width
 15729  00169A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15730                           
 15731                           ;doprnt.c: 601: width += *f++ - '0';
 15732  00169E  0ED0               	movlw	208
 15733  0016A0  0100               	movlb	0	; () banked
 15734  0016A2  6F9A               	movwf	??_printf& (0+255),b
 15735  0016A4  0EFF               	movlw	255
 15736  0016A6  0100               	movlb	0	; () banked
 15737  0016A8  6F9B               	movwf	(??_printf+1)& (0+255),b
 15738  0016AA  C08E  FFF6         	movff	printf@f,tblptrl
 15739  0016AE  C08F  FFF7         	movff	printf@f+1,tblptrh
 15740  0016B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15741  0016B2  6AF8               	clrf	tblptru,c
 15742  0016B4                     	endif
 15743  0016B4                     	if	0	;tblptru may be non-zero
 15744  0016B4                     	endif
 15745  0016B4  0008               	tblrd		*
 15746  0016B6  50F5               	movf	tablat,w,c
 15747  0016B8  0100               	movlb	0	; () banked
 15748  0016BA  6F9C               	movwf	(??_printf+2)& (0+255),b
 15749  0016BC  6B9D               	clrf	(??_printf+3)& (0+255),b
 15750  0016BE  0100               	movlb	0	; () banked
 15751  0016C0  519A               	movf	??_printf& (0+255),w,b
 15752  0016C2  0100               	movlb	0	; () banked
 15753  0016C4  279C               	addwf	(??_printf+2)& (0+255),f,b
 15754  0016C6  0100               	movlb	0	; () banked
 15755  0016C8  519B               	movf	(??_printf+1)& (0+255),w,b
 15756  0016CA  0100               	movlb	0	; () banked
 15757  0016CC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15758  0016CE  0100               	movlb	0	; () banked
 15759  0016D0  519C               	movf	(??_printf+2)& (0+255),w,b
 15760  0016D2  0100               	movlb	0	; () banked
 15761  0016D4  27A9               	addwf	printf@width& (0+255),f,b
 15762  0016D6  0100               	movlb	0	; () banked
 15763  0016D8  519D               	movf	(??_printf+3)& (0+255),w,b
 15764  0016DA  0100               	movlb	0	; () banked
 15765  0016DC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15766                           
 15767                           ; BSR set to: 0
 15768  0016DE  0100               	movlb	0	; () banked
 15769  0016E0  4B8E               	infsnz	printf@f& (0+255),f,b
 15770  0016E2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15774  0016E4  C08E  FFF6         	movff	printf@f,tblptrl
 15775  0016E8  C08F  FFF7         	movff	printf@f+1,tblptrh
 15776  0016EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15777  0016EC  6AF8               	clrf	tblptru,c
 15778  0016EE                     	endif
 15779  0016EE                     	if	0	;tblptru may be non-zero
 15780  0016EE                     	endif
 15781  0016EE  0008               	tblrd		*
 15782  0016F0  50F5               	movf	tablat,w,c
 15783  0016F2  EC79  F028         	call	_isdigit
 15784  0016F6  A0D8               	btfss	status,0,c
 15785  0016F8  D090               	goto	l6304
 15786  0016FA  D7C2               	goto	l6262
 15787  0016FC                     l6270:
 15788                           
 15789                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15790  0016FC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15791  001700  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15792  001704  CFDE F09F          	movff	postinc2,printf@cp
 15793  001708  CFDD F0A0          	movff	postdec2,printf@cp+1
 15794  00170C  0E02               	movlw	2
 15795  00170E  0100               	movlb	0	; () banked
 15796  001710  27A1               	addwf	printf@ap& (0+255),f,b
 15797  001712  0E00               	movlw	0
 15798  001714  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;doprnt.c: 740: if(!cp)
 15802  001716  0100               	movlb	0	; () banked
 15803  001718  519F               	movf	printf@cp& (0+255),w,b
 15804  00171A  0100               	movlb	0	; () banked
 15805  00171C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15806  00171E  A4D8               	btfss	status,2,c
 15807  001720  D006               	goto	l6278
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;doprnt.c: 741: cp = "(null)";
 15811  001722  0EB6               	movlw	low STR_126
 15812  001724  0100               	movlb	0	; () banked
 15813  001726  6F9F               	movwf	printf@cp& (0+255),b
 15814  001728  0EFF               	movlw	high STR_126
 15815  00172A  0100               	movlb	0	; () banked
 15816  00172C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15817  00172E                     l6278:
 15818                           
 15819                           ; BSR set to: 0
 15820                           ;doprnt.c: 745: len = 0;
 15821  00172E  0E00               	movlw	0
 15822  001730  0100               	movlb	0	; () banked
 15823  001732  6FA4               	movwf	(printf@len+1)& (0+255),b
 15824  001734  0E00               	movlw	0
 15825  001736  6FA3               	movwf	printf@len& (0+255),b
 15826                           
 15827                           ;doprnt.c: 746: while(cp[len])
 15828  001738  D003               	goto	l6282
 15829  00173A                     l6280:
 15830                           
 15831                           ;doprnt.c: 747: len++;
 15832  00173A  0100               	movlb	0	; () banked
 15833  00173C  4BA3               	infsnz	printf@len& (0+255),f,b
 15834  00173E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15835  001740                     l6282:
 15836                           
 15837                           ; BSR set to: 0
 15838  001740  0100               	movlb	0	; () banked
 15839  001742  51A3               	movf	printf@len& (0+255),w,b
 15840  001744  0100               	movlb	0	; () banked
 15841  001746  259F               	addwf	printf@cp& (0+255),w,b
 15842  001748  0100               	movlb	0	; () banked
 15843  00174A  6F9A               	movwf	??_printf& (0+255),b
 15844  00174C  0100               	movlb	0	; () banked
 15845  00174E  51A4               	movf	(printf@len+1)& (0+255),w,b
 15846  001750  0100               	movlb	0	; () banked
 15847  001752  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15848  001754  0100               	movlb	0	; () banked
 15849  001756  6F9B               	movwf	(??_printf+1)& (0+255),b
 15850  001758  C09A  FFF6         	movff	??_printf,tblptrl
 15851  00175C  C09B  FFF7         	movff	??_printf+1,tblptrh
 15852  001760  0E00               	movlw	low (__mediumconst shr (0+16))
 15853  001762  6EF8               	movwf	tblptru,c
 15854  001764  0E0F               	movlw	(high __ramtop+-1)
 15855  001766  64F7               	cpfsgt	tblptrh,c
 15856  001768  D003               	bra	u4617
 15857  00176A  0008               	tblrd		*
 15858  00176C  50F5               	movf	tablat,w,c
 15859  00176E  D005               	bra	u4610
 15860  001770                     u4617:
 15861  001770  CFF6 FFE9          	movff	tblptrl,fsr0l
 15862  001774  CFF7 FFEA          	movff	tblptrh,fsr0h
 15863  001778  50EF               	movf	indf0,w,c
 15864  00177A                     u4610:
 15865  00177A  0900               	iorlw	0
 15866  00177C  A4D8               	btfss	status,2,c
 15867  00177E  D7DD               	goto	l6280
 15868                           
 15869                           ;doprnt.c: 757: if(width > len)
 15870  001780  0100               	movlb	0	; () banked
 15871  001782  51A9               	movf	printf@width& (0+255),w,b
 15872  001784  0100               	movlb	0	; () banked
 15873  001786  5DA3               	subwf	printf@len& (0+255),w,b
 15874  001788  0100               	movlb	0	; () banked
 15875  00178A  51AA               	movf	(printf@width+1)& (0+255),w,b
 15876  00178C  0100               	movlb	0	; () banked
 15877  00178E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15878  001790  B0D8               	btfsc	status,0,c
 15879  001792  D009               	goto	l6288
 15880                           
 15881                           ; BSR set to: 0
 15882                           ;doprnt.c: 758: width -= len;
 15883  001794  0100               	movlb	0	; () banked
 15884  001796  51A3               	movf	printf@len& (0+255),w,b
 15885  001798  0100               	movlb	0	; () banked
 15886  00179A  5FA9               	subwf	printf@width& (0+255),f,b
 15887  00179C  0100               	movlb	0	; () banked
 15888  00179E  51A4               	movf	(printf@len+1)& (0+255),w,b
 15889  0017A0  0100               	movlb	0	; () banked
 15890  0017A2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15891  0017A4  D009               	goto	l6292
 15892  0017A6                     l6288:
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;doprnt.c: 759: else
 15896                           ;doprnt.c: 760: width = 0;
 15897  0017A6  0E00               	movlw	0
 15898  0017A8  0100               	movlb	0	; () banked
 15899  0017AA  6FAA               	movwf	(printf@width+1)& (0+255),b
 15900  0017AC  0E00               	movlw	0
 15901  0017AE  6FA9               	movwf	printf@width& (0+255),b
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;doprnt.c: 764: while(width--)
 15905  0017B0  D003               	goto	l6292
 15906  0017B2                     l6290:
 15907                           
 15908                           ; BSR set to: 0
 15909                           ;doprnt.c: 765: (putch(' ') );
 15910  0017B2  0E20               	movlw	32
 15911  0017B4  EC64  F029         	call	_putch
 15912  0017B8                     l6292:
 15913  0017B8  0100               	movlb	0	; () banked
 15914  0017BA  07A9               	decf	printf@width& (0+255),f,b
 15915  0017BC  A0D8               	btfss	status,0,c
 15916  0017BE  07AA               	decf	(printf@width+1)& (0+255),f,b
 15917  0017C0  0100               	movlb	0	; () banked
 15918  0017C2  29A9               	incf	printf@width& (0+255),w,b
 15919  0017C4  E1F6               	bnz	l6290
 15920  0017C6  0100               	movlb	0	; () banked
 15921  0017C8  29AA               	incf	(printf@width+1)& (0+255),w,b
 15922  0017CA  B4D8               	btfsc	status,2,c
 15923  0017CC  D017               	goto	l6298
 15924  0017CE  D7F1               	goto	l6290
 15925  0017D0                     l6294:
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;doprnt.c: 768: (putch(*cp++) );
 15929  0017D0  C09F  FFF6         	movff	printf@cp,tblptrl
 15930  0017D4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15931  0017D8  0E00               	movlw	low (__mediumconst shr (0+16))
 15932  0017DA  6EF8               	movwf	tblptru,c
 15933  0017DC  0E0F               	movlw	(high __ramtop+-1)
 15934  0017DE  64F7               	cpfsgt	tblptrh,c
 15935  0017E0  D003               	bra	u4657
 15936  0017E2  0008               	tblrd		*
 15937  0017E4  50F5               	movf	tablat,w,c
 15938  0017E6  D005               	bra	u4650
 15939  0017E8                     u4657:
 15940  0017E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15941  0017EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15942  0017F0  50EF               	movf	indf0,w,c
 15943  0017F2                     u4650:
 15944  0017F2  EC64  F029         	call	_putch
 15945  0017F6  0100               	movlb	0	; () banked
 15946  0017F8  4B9F               	infsnz	printf@cp& (0+255),f,b
 15947  0017FA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15948  0017FC                     l6298:
 15949                           
 15950                           ; BSR set to: 0
 15951  0017FC  0100               	movlb	0	; () banked
 15952  0017FE  07A3               	decf	printf@len& (0+255),f,b
 15953  001800  A0D8               	btfss	status,0,c
 15954  001802  07A4               	decf	(printf@len+1)& (0+255),f,b
 15955  001804  0100               	movlb	0	; () banked
 15956  001806  29A3               	incf	printf@len& (0+255),w,b
 15957  001808  E1E3               	bnz	l6294
 15958  00180A  0100               	movlb	0	; () banked
 15959  00180C  29A4               	incf	(printf@len+1)& (0+255),w,b
 15960  00180E  B4D8               	btfsc	status,2,c
 15961  001810  D10A               	goto	l6376
 15962  001812  D7DE               	goto	l6294
 15963  001814                     l6300:
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;doprnt.c: 818: flag |= 0x40;
 15967  001814  0100               	movlb	0	; () banked
 15968  001816  8DA7               	bsf	printf@flag& (0+255),6,b
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;doprnt.c: 822: }
 15972                           
 15973                           ;doprnt.c: 819: break;
 15974  001818  D01D               	goto	l1410
 15975  00181A                     l6304:
 15976  00181A  C08E  FFF6         	movff	printf@f,tblptrl
 15977  00181E  C08F  FFF7         	movff	printf@f+1,tblptrh
 15978  001822  0100               	movlb	0	; () banked
 15979  001824  4B8E               	infsnz	printf@f& (0+255),f,b
 15980  001826  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15981  001828                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15982  001828  6AF8               	clrf	tblptru,c
 15983  00182A                     	endif
 15984  00182A                     	if	0	;tblptru may be non-zero
 15985  00182A                     	endif
 15986  00182A  0008               	tblrd		*
 15987  00182C  CFF5 F0A8          	movff	tablat,printf@c
 15988  001830  0100               	movlb	0	; () banked
 15989  001832  51A8               	movf	printf@c& (0+255),w,b
 15990                           
 15991                           ; Switch size 1, requested type "space"
 15992                           ; Number of cases is 5, Range of values is 0 to 117
 15993                           ; switch strategies available:
 15994                           ; Name         Instructions Cycles
 15995                           ; simple_byte           16     9 (average)
 15996                           ;	Chosen strategy is simple_byte
 15997  001834  0A00               	xorlw	0	; case 0
 15998  001836  B4D8               	btfsc	status,2,c
 15999  001838  0012               	return	
 16000  00183A  0A64               	xorlw	100	; case 100
 16001  00183C  B4D8               	btfsc	status,2,c
 16002  00183E  D00A               	goto	l1410
 16003  001840  0A0D               	xorlw	13	; case 105
 16004  001842  B4D8               	btfsc	status,2,c
 16005  001844  D007               	goto	l1410
 16006  001846  0A1A               	xorlw	26	; case 115
 16007  001848  B4D8               	btfsc	status,2,c
 16008  00184A  D758               	goto	l6270
 16009  00184C  0A06               	xorlw	6	; case 117
 16010  00184E  B4D8               	btfsc	status,2,c
 16011  001850  D7E1               	goto	l6300
 16012  001852  D0E9               	goto	l6376
 16013  001854                     l1410:
 16014                           
 16015                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16016  001854  0100               	movlb	0	; () banked
 16017  001856  BDA7               	btfsc	printf@flag& (0+255),6,b
 16018  001858  D019               	goto	l6316
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;doprnt.c: 1253: {
 16022                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16023  00185A  C0A1  FFD9         	movff	printf@ap,fsr2l
 16024  00185E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16025  001862  CFDE F0A5          	movff	postinc2,printf@val
 16026  001866  CFDD F0A6          	movff	postdec2,printf@val+1
 16027                           
 16028                           ; BSR set to: 0
 16029  00186A  0E02               	movlw	2
 16030  00186C  0100               	movlb	0	; () banked
 16031  00186E  27A1               	addwf	printf@ap& (0+255),f,b
 16032  001870  0E00               	movlw	0
 16033  001872  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;doprnt.c: 1261: if((int)val < 0) {
 16037  001874  0100               	movlb	0	; () banked
 16038  001876  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16039  001878  D016               	goto	l6320
 16040                           
 16041                           ; BSR set to: 0
 16042                           ;doprnt.c: 1262: flag |= 0x03;
 16043  00187A  0E03               	movlw	3
 16044  00187C  0100               	movlb	0	; () banked
 16045  00187E  13A7               	iorwf	printf@flag& (0+255),f,b
 16046                           
 16047                           ; BSR set to: 0
 16048                           ;doprnt.c: 1263: val = -val;
 16049  001880  0100               	movlb	0	; () banked
 16050  001882  6DA5               	negf	printf@val& (0+255),b
 16051  001884  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16052  001886  B0D8               	btfsc	status,0,c
 16053  001888  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16054                           
 16055                           ; BSR set to: 0
 16056                           ;doprnt.c: 1264: }
 16057                           ;doprnt.c: 1266: }
 16058  00188A  D00D               	goto	l6320
 16059  00188C                     l6316:
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;doprnt.c: 1268: else
 16063                           ;doprnt.c: 1273: {
 16064                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16065  00188C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16066  001890  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16067  001894  CFDE F0A5          	movff	postinc2,printf@val
 16068  001898  CFDD F0A6          	movff	postdec2,printf@val+1
 16069                           
 16070                           ; BSR set to: 0
 16071  00189C  0E02               	movlw	2
 16072  00189E  0100               	movlb	0	; () banked
 16073  0018A0  27A1               	addwf	printf@ap& (0+255),f,b
 16074  0018A2  0E00               	movlw	0
 16075  0018A4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16076  0018A6                     l6320:
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;doprnt.c: 1287: }
 16080                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16081  0018A6  0E01               	movlw	1
 16082  0018A8  0100               	movlb	0	; () banked
 16083  0018AA  6FA8               	movwf	printf@c& (0+255),b
 16084  0018AC                     l6322:
 16085                           
 16086                           ; BSR set to: 0
 16087  0018AC  0E05               	movlw	5
 16088  0018AE  0100               	movlb	0	; () banked
 16089  0018B0  19A8               	xorwf	printf@c& (0+255),w,b
 16090  0018B2  B4D8               	btfsc	status,2,c
 16091  0018B4  D019               	goto	l6334
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;doprnt.c: 1306: if(val < dpowers[c])
 16095                           
 16096                           ; BSR set to: 0
 16097                           
 16098                           ; BSR set to: 0
 16099  0018B6  0100               	movlb	0	; () banked
 16100  0018B8  51A8               	movf	printf@c& (0+255),w,b
 16101  0018BA  0D02               	mullw	2
 16102  0018BC  0E00               	movlw	low _dpowers
 16103  0018BE  24F3               	addwf	prodl,w,c
 16104  0018C0  6EF6               	movwf	tblptrl,c
 16105  0018C2  0EFB               	movlw	high _dpowers
 16106  0018C4  20F4               	addwfc	prodh,w,c
 16107  0018C6  6EF7               	movwf	tblptrh,c
 16108  0018C8                     	if	1	;There are 3 active tblptr bytes
 16109  0018C8  6AF8               	clrf	tblptru,c
 16110  0018CA  0E00               	movlw	low (__mediumconst shr (0+16))
 16111  0018CC  22F8               	addwfc	tblptru,f,c
 16112  0018CE                     	endif
 16113  0018CE  0009               	tblrd		*+
 16114  0018D0  50F5               	movf	tablat,w,c
 16115  0018D2  0100               	movlb	0	; () banked
 16116  0018D4  5DA5               	subwf	printf@val& (0+255),w,b
 16117  0018D6  0009               	tblrd		*+
 16118  0018D8  50F5               	movf	tablat,w,c
 16119  0018DA  0100               	movlb	0	; () banked
 16120  0018DC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16121  0018DE  A0D8               	btfss	status,0,c
 16122  0018E0  D003               	goto	l6334
 16123                           
 16124                           ; BSR set to: 0
 16125                           
 16126                           ; BSR set to: 0
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;doprnt.c: 1307: break;
 16130  0018E2  0100               	movlb	0	; () banked
 16131  0018E4  2BA8               	incf	printf@c& (0+255),f,b
 16132  0018E6  D7E2               	goto	l6322
 16133  0018E8                     l6334:
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16137  0018E8  0100               	movlb	0	; () banked
 16138  0018EA  51A9               	movf	printf@width& (0+255),w,b
 16139  0018EC  0100               	movlb	0	; () banked
 16140  0018EE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16141  0018F0  B4D8               	btfsc	status,2,c
 16142  0018F2  D00B               	goto	l6340
 16143                           
 16144                           ; BSR set to: 0
 16145  0018F4  C0A7  F09A         	movff	printf@flag,??_printf
 16146  0018F8  0E03               	movlw	3
 16147  0018FA  0100               	movlb	0	; () banked
 16148  0018FC  179A               	andwf	??_printf& (0+255),f,b
 16149  0018FE  B4D8               	btfsc	status,2,c
 16150  001900  D004               	goto	l6340
 16151                           
 16152                           ; BSR set to: 0
 16153                           ;doprnt.c: 1346: width--;
 16154  001902  0100               	movlb	0	; () banked
 16155  001904  07A9               	decf	printf@width& (0+255),f,b
 16156  001906  A0D8               	btfss	status,0,c
 16157  001908  07AA               	decf	(printf@width+1)& (0+255),f,b
 16158  00190A                     l6340:
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;doprnt.c: 1381: if(width > c)
 16162  00190A  0E80               	movlw	128
 16163  00190C  0100               	movlb	0	; () banked
 16164  00190E  BFA8               	btfsc	printf@c& (0+255),7,b
 16165  001910  0E7F               	movlw	127
 16166  001912  0100               	movlb	0	; () banked
 16167  001914  6F9A               	movwf	??_printf& (0+255),b
 16168  001916  0100               	movlb	0	; () banked
 16169  001918  51A9               	movf	printf@width& (0+255),w,b
 16170  00191A  0100               	movlb	0	; () banked
 16171  00191C  5DA8               	subwf	printf@c& (0+255),w,b
 16172  00191E  0100               	movlb	0	; () banked
 16173  001920  51AA               	movf	(printf@width+1)& (0+255),w,b
 16174  001922  0A80               	xorlw	128
 16175  001924  0100               	movlb	0	; () banked
 16176  001926  599A               	subwfb	??_printf& (0+255),w,b
 16177  001928  B0D8               	btfsc	status,0,c
 16178  00192A  D00B               	goto	l6344
 16179                           
 16180                           ; BSR set to: 0
 16181                           ;doprnt.c: 1382: width -= c;
 16182  00192C  0100               	movlb	0	; () banked
 16183  00192E  51A8               	movf	printf@c& (0+255),w,b
 16184  001930  0100               	movlb	0	; () banked
 16185  001932  5FA9               	subwf	printf@width& (0+255),f,b
 16186  001934  0E00               	movlw	0
 16187  001936  0100               	movlb	0	; () banked
 16188  001938  BFA8               	btfsc	printf@c& (0+255),7,b
 16189  00193A  0EFF               	movlw	255
 16190  00193C  0100               	movlb	0	; () banked
 16191  00193E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16192  001940  D005               	goto	l6346
 16193  001942                     l6344:
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;doprnt.c: 1383: else
 16197                           ;doprnt.c: 1384: width = 0;
 16198  001942  0E00               	movlw	0
 16199  001944  0100               	movlb	0	; () banked
 16200  001946  6FAA               	movwf	(printf@width+1)& (0+255),b
 16201  001948  0E00               	movlw	0
 16202  00194A  6FA9               	movwf	printf@width& (0+255),b
 16203  00194C                     l6346:
 16204                           
 16205                           ; BSR set to: 0
 16206                           ;doprnt.c: 1387: if(flag & 0x04) {
 16207  00194C  0100               	movlb	0	; () banked
 16208  00194E  A5A7               	btfss	printf@flag& (0+255),2,b
 16209  001950  D018               	goto	l6358
 16210                           
 16211                           ; BSR set to: 0
 16212                           ;doprnt.c: 1392: if(flag & 0x03)
 16213  001952  C0A7  F09A         	movff	printf@flag,??_printf
 16214  001956  0E03               	movlw	3
 16215  001958  0100               	movlb	0	; () banked
 16216  00195A  179A               	andwf	??_printf& (0+255),f,b
 16217  00195C  B4D8               	btfsc	status,2,c
 16218  00195E  D003               	goto	l6352
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;doprnt.c: 1393: (putch('-') );
 16222  001960  0E2D               	movlw	45
 16223  001962  EC64  F029         	call	_putch
 16224  001966                     l6352:
 16225                           
 16226                           ;doprnt.c: 1415: if(width)
 16227  001966  0100               	movlb	0	; () banked
 16228  001968  51A9               	movf	printf@width& (0+255),w,b
 16229  00196A  0100               	movlb	0	; () banked
 16230  00196C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16231  00196E  B4D8               	btfsc	status,2,c
 16232  001970  D025               	goto	l6368
 16233                           
 16234                           ; BSR set to: 0
 16235                           ;doprnt.c: 1417: (putch('0') );
 16236                           
 16237                           ; BSR set to: 0
 16238                           
 16239                           ;doprnt.c: 1416: do
 16240  001972  0E30               	movlw	48
 16241  001974  EC64  F029         	call	_putch
 16242                           
 16243                           ;doprnt.c: 1418: while(--width);
 16244  001978  0100               	movlb	0	; () banked
 16245  00197A  07A9               	decf	printf@width& (0+255),f,b
 16246  00197C  A0D8               	btfss	status,0,c
 16247  00197E  07AA               	decf	(printf@width+1)& (0+255),f,b
 16248  001980  D7F2               	goto	l6352
 16249  001982                     l6358:
 16250                           
 16251                           ; BSR set to: 0
 16252                           ;doprnt.c: 1422: {
 16253                           ;doprnt.c: 1424: if(width
 16254                           ;doprnt.c: 1428: )
 16255  001982  0100               	movlb	0	; () banked
 16256  001984  51A9               	movf	printf@width& (0+255),w,b
 16257  001986  0100               	movlb	0	; () banked
 16258  001988  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16259  00198A  B4D8               	btfsc	status,2,c
 16260  00198C  D00D               	goto	l6364
 16261  00198E                     l6360:
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;doprnt.c: 1430: (putch(' ') );
 16265  00198E  0E20               	movlw	32
 16266  001990  EC64  F029         	call	_putch
 16267                           
 16268                           ;doprnt.c: 1431: while(--width);
 16269  001994  0100               	movlb	0	; () banked
 16270  001996  07A9               	decf	printf@width& (0+255),f,b
 16271  001998  A0D8               	btfss	status,0,c
 16272  00199A  07AA               	decf	(printf@width+1)& (0+255),f,b
 16273  00199C  0100               	movlb	0	; () banked
 16274  00199E  51A9               	movf	printf@width& (0+255),w,b
 16275  0019A0  0100               	movlb	0	; () banked
 16276  0019A2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16277  0019A4  A4D8               	btfss	status,2,c
 16278  0019A6  D7F3               	goto	l6360
 16279  0019A8                     l6364:
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;doprnt.c: 1438: if(flag & 0x03)
 16283  0019A8  C0A7  F09A         	movff	printf@flag,??_printf
 16284  0019AC  0E03               	movlw	3
 16285  0019AE  0100               	movlb	0	; () banked
 16286  0019B0  179A               	andwf	??_printf& (0+255),f,b
 16287  0019B2  B4D8               	btfsc	status,2,c
 16288  0019B4  D003               	goto	l6368
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;doprnt.c: 1439: (putch('-') );
 16292  0019B6  0E2D               	movlw	45
 16293  0019B8  EC64  F029         	call	_putch
 16294  0019BC                     l6368:
 16295                           
 16296                           ;doprnt.c: 1469: }
 16297                           ;doprnt.c: 1472: prec = c;
 16298  0019BC  C0A8  F09E         	movff	printf@c,printf@prec
 16299                           
 16300                           ;doprnt.c: 1474: while(prec--) {
 16301  0019C0  D02C               	goto	l6374
 16302  0019C2                     l6370:
 16303                           
 16304                           ;doprnt.c: 1478: {
 16305                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16306  0019C2  0100               	movlb	0	; () banked
 16307  0019C4  519E               	movf	printf@prec& (0+255),w,b
 16308  0019C6  0D02               	mullw	2
 16309  0019C8  0E00               	movlw	low _dpowers
 16310  0019CA  24F3               	addwf	prodl,w,c
 16311  0019CC  6EF6               	movwf	tblptrl,c
 16312  0019CE  0EFB               	movlw	high _dpowers
 16313  0019D0  20F4               	addwfc	prodh,w,c
 16314  0019D2  6EF7               	movwf	tblptrh,c
 16315  0019D4                     	if	1	;There are 3 active tblptr bytes
 16316  0019D4  6AF8               	clrf	tblptru,c
 16317  0019D6  0E00               	movlw	low (__mediumconst shr (0+16))
 16318  0019D8  22F8               	addwfc	tblptru,f,c
 16319  0019DA                     	endif
 16320  0019DA  0009               	tblrd		*+
 16321  0019DC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16322  0019E0  000A               	tblrd		*-
 16323  0019E2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16324  0019E6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16325  0019EA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16326  0019EE  EC80  F023         	call	___lwdiv	;wreg free
 16327  0019F2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16328  0019F6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16329  0019FA  0E00               	movlw	0
 16330  0019FC  0100               	movlb	0	; () banked
 16331  0019FE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16332  001A00  0E0A               	movlw	10
 16333  001A02  6F89               	movwf	___lwmod@divisor& (0+255),b
 16334  001A04  EC9A  F024         	call	___lwmod	;wreg free
 16335  001A08  0100               	movlb	0	; () banked
 16336  001A0A  5187               	movf	?___lwmod& (0+255),w,b
 16337  001A0C  0F30               	addlw	48
 16338  001A0E  0100               	movlb	0	; () banked
 16339  001A10  6FA8               	movwf	printf@c& (0+255),b
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;doprnt.c: 1523: }
 16343                           ;doprnt.c: 1524: (putch(c) );
 16344  001A12  0100               	movlb	0	; () banked
 16345  001A14  51A8               	movf	printf@c& (0+255),w,b
 16346  001A16  EC64  F029         	call	_putch
 16347  001A1A                     l6374:
 16348  001A1A  0100               	movlb	0	; () banked
 16349  001A1C  079E               	decf	printf@prec& (0+255),f,b
 16350  001A1E  0100               	movlb	0	; () banked
 16351  001A20  299E               	incf	printf@prec& (0+255),w,b
 16352  001A22  A4D8               	btfss	status,2,c
 16353  001A24  D7CE               	goto	l6370
 16354  001A26                     l6376:
 16355  001A26  C08E  FFF6         	movff	printf@f,tblptrl
 16356  001A2A  C08F  FFF7         	movff	printf@f+1,tblptrh
 16357  001A2E  0100               	movlb	0	; () banked
 16358  001A30  4B8E               	infsnz	printf@f& (0+255),f,b
 16359  001A32  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16360  001A34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16361  001A34  6AF8               	clrf	tblptru,c
 16362  001A36                     	endif
 16363  001A36                     	if	0	;tblptru may be non-zero
 16364  001A36                     	endif
 16365  001A36  0008               	tblrd		*
 16366  001A38  CFF5 F0A8          	movff	tablat,printf@c
 16367  001A3C  0100               	movlb	0	; () banked
 16368  001A3E  51A8               	movf	printf@c& (0+255),w,b
 16369  001A40  B4D8               	btfsc	status,2,c
 16370  001A42  0012               	return	
 16371  001A44  D5EB               	goto	l6246
 16372  001A46                     __end_of_printf:
 16373                           	opt stack 0
 16374                           tblptru	equ	0xFF8
 16375                           tblptrh	equ	0xFF7
 16376                           tblptrl	equ	0xFF6
 16377                           tablat	equ	0xFF5
 16378                           prodh	equ	0xFF4
 16379                           prodl	equ	0xFF3
 16380                           intcon	equ	0xFF2
 16381                           intcon2	equ	0xFF1
 16382                           intcon3	equ	0xFF0
 16383                           indf0	equ	0xFEF
 16384                           postinc0	equ	0xFEE
 16385                           fsr0h	equ	0xFEA
 16386                           fsr0l	equ	0xFE9
 16387                           wreg	equ	0xFE8
 16388                           postdec1	equ	0xFE5
 16389                           fsr1l	equ	0xFE1
 16390                           indf2	equ	0xFDF
 16391                           postinc2	equ	0xFDE
 16392                           postdec2	equ	0xFDD
 16393                           fsr2h	equ	0xFDA
 16394                           fsr2l	equ	0xFD9
 16395                           status	equ	0xFD8
 16396                           
 16397 ;; *************** function _putch *****************
 16398 ;; Defined at:
 16399 ;;		line 20 in file "lcd.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;  data            1    wreg     unsigned char 
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;  data            1    2[BANK0 ] unsigned char 
 16404 ;; Return value:  Size  Location     Type
 16405 ;;                  1    wreg      void 
 16406 ;; Registers used:
 16407 ;;		wreg, status,2, status,0, cstack
 16408 ;; Tracked objects:
 16409 ;;		On entry : 0/0
 16410 ;;		On exit  : 0/0
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;Total ram usage:        1 bytes
 16418 ;; Hardware stack levels used:    1
 16419 ;; Hardware stack levels required when called:    8
 16420 ;; This function calls:
 16421 ;;		_lcdNibble
 16422 ;; This function is called by:
 16423 ;;		_printf
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427                           	psect	text52
 16428  0052C8                     __ptext52:
 16429                           	opt stack 0
 16430  0052C8                     _putch:
 16431                           	opt stack 18
 16432                           
 16433                           ;incstack = 0
 16434                           ;putch@data stored from wreg
 16435  0052C8  0100               	movlb	0	; () banked
 16436  0052CA  6F82               	movwf	putch@data& (0+255),b
 16437                           
 16438                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16439  0052CC  848C               	bsf	3980,2,c	;volatile
 16440                           
 16441                           ;lcd.c: 22: lcdNibble(data);
 16442  0052CE  0100               	movlb	0	; () banked
 16443  0052D0  5182               	movf	putch@data& (0+255),w,b
 16444  0052D2  EC66  F024         	call	_lcdNibble
 16445  0052D6  0012               	return		;funcret
 16446  0052D8                     __end_of_putch:
 16447                           	opt stack 0
 16448                           tblptru	equ	0xFF8
 16449                           tblptrh	equ	0xFF7
 16450                           tblptrl	equ	0xFF6
 16451                           tablat	equ	0xFF5
 16452                           prodh	equ	0xFF4
 16453                           prodl	equ	0xFF3
 16454                           intcon	equ	0xFF2
 16455                           intcon2	equ	0xFF1
 16456                           intcon3	equ	0xFF0
 16457                           indf0	equ	0xFEF
 16458                           postinc0	equ	0xFEE
 16459                           fsr0h	equ	0xFEA
 16460                           fsr0l	equ	0xFE9
 16461                           wreg	equ	0xFE8
 16462                           postdec1	equ	0xFE5
 16463                           fsr1l	equ	0xFE1
 16464                           indf2	equ	0xFDF
 16465                           postinc2	equ	0xFDE
 16466                           postdec2	equ	0xFDD
 16467                           fsr2h	equ	0xFDA
 16468                           fsr2l	equ	0xFD9
 16469                           status	equ	0xFD8
 16470                           
 16471 ;; *************** function _isdigit *****************
 16472 ;; Defined at:
 16473 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;  c               1    wreg     unsigned char 
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;  c               1    2[BANK0 ] unsigned char 
 16478 ;; Return value:  Size  Location     Type
 16479 ;;		None               void
 16480 ;; Registers used:
 16481 ;;		wreg, status,2, status,0
 16482 ;; Tracked objects:
 16483 ;;		On entry : 0/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;Total ram usage:        3 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:    7
 16494 ;; This function calls:
 16495 ;;		Nothing
 16496 ;; This function is called by:
 16497 ;;		_printf
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           	psect	text53
 16502  0050F2                     __ptext53:
 16503                           	opt stack 0
 16504  0050F2                     _isdigit:
 16505                           	opt stack 19
 16506                           
 16507                           ;incstack = 0
 16508                           ;isdigit@c stored from wreg
 16509  0050F2  0100               	movlb	0	; () banked
 16510  0050F4  6F82               	movwf	isdigit@c& (0+255),b
 16511  0050F6  0E00               	movlw	0
 16512  0050F8  0100               	movlb	0	; () banked
 16513  0050FA  6F81               	movwf	_isdigit$2058& (0+255),b
 16514                           
 16515                           ; BSR set to: 0
 16516  0050FC  0E3A               	movlw	58
 16517  0050FE  0100               	movlb	0	; () banked
 16518  005100  6182               	cpfslt	isdigit@c& (0+255),b
 16519  005102  D007               	goto	l6094
 16520                           
 16521                           ; BSR set to: 0
 16522  005104  0E2F               	movlw	47
 16523  005106  0100               	movlb	0	; () banked
 16524  005108  6582               	cpfsgt	isdigit@c& (0+255),b
 16525  00510A  D003               	goto	l6094
 16526                           
 16527                           ; BSR set to: 0
 16528  00510C  0E01               	movlw	1
 16529  00510E  0100               	movlb	0	; () banked
 16530  005110  6F81               	movwf	_isdigit$2058& (0+255),b
 16531  005112                     l6094:
 16532                           
 16533                           ; BSR set to: 0
 16534  005112  C081  F080         	movff	_isdigit$2058,??_isdigit
 16535  005116  0100               	movlb	0	; () banked
 16536  005118  3180               	rrcf	??_isdigit& (0+255),w,b
 16537  00511A  0012               	return	
 16538  00511C                     __end_of_isdigit:
 16539                           	opt stack 0
 16540                           tblptru	equ	0xFF8
 16541                           tblptrh	equ	0xFF7
 16542                           tblptrl	equ	0xFF6
 16543                           tablat	equ	0xFF5
 16544                           prodh	equ	0xFF4
 16545                           prodl	equ	0xFF3
 16546                           intcon	equ	0xFF2
 16547                           intcon2	equ	0xFF1
 16548                           intcon3	equ	0xFF0
 16549                           indf0	equ	0xFEF
 16550                           postinc0	equ	0xFEE
 16551                           fsr0h	equ	0xFEA
 16552                           fsr0l	equ	0xFE9
 16553                           wreg	equ	0xFE8
 16554                           postdec1	equ	0xFE5
 16555                           fsr1l	equ	0xFE1
 16556                           indf2	equ	0xFDF
 16557                           postinc2	equ	0xFDE
 16558                           postdec2	equ	0xFDD
 16559                           fsr2h	equ	0xFDA
 16560                           fsr2l	equ	0xFD9
 16561                           status	equ	0xFD8
 16562                           
 16563 ;; *************** function ___wmul *****************
 16564 ;; Defined at:
 16565 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16568 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16569 ;; Auto vars:     Size  Location     Type
 16570 ;;  product         2    4[BANK0 ] unsigned int 
 16571 ;; Return value:  Size  Location     Type
 16572 ;;                  2    0[BANK0 ] unsigned int 
 16573 ;; Registers used:
 16574 ;;		wreg, status,2, status,0, prodl, prodh
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16580 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;Total ram usage:        6 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; Hardware stack levels required when called:    7
 16587 ;; This function calls:
 16588 ;;		Nothing
 16589 ;; This function is called by:
 16590 ;;		_printf
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           	psect	text54
 16595  004DC4                     __ptext54:
 16596                           	opt stack 0
 16597  004DC4                     ___wmul:
 16598                           	opt stack 19
 16599                           
 16600                           ; BSR set to: 0
 16601                           ;incstack = 0
 16602  004DC4  0100               	movlb	0	; () banked
 16603  004DC6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16604  004DC8  0100               	movlb	0	; () banked
 16605  004DCA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16606  004DCC  CFF3 F084          	movff	prodl,___wmul@product
 16607  004DD0  CFF4 F085          	movff	prodh,___wmul@product+1
 16608  004DD4  0100               	movlb	0	; () banked
 16609  004DD6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16610  004DD8  0100               	movlb	0	; () banked
 16611  004DDA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16612  004DDC  50F3               	movf	prodl,w,c
 16613  004DDE  0100               	movlb	0	; () banked
 16614  004DE0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16615  004DE2  0100               	movlb	0	; () banked
 16616  004DE4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16617  004DE6  0100               	movlb	0	; () banked
 16618  004DE8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16619  004DEA  50F3               	movf	prodl,w,c
 16620  004DEC  0100               	movlb	0	; () banked
 16621  004DEE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16622                           
 16623                           ; BSR set to: 0
 16624  004DF0  C084  F080         	movff	___wmul@product,?___wmul
 16625  004DF4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16626  004DF8  0012               	return	
 16627  004DFA                     __end_of___wmul:
 16628                           	opt stack 0
 16629                           tblptru	equ	0xFF8
 16630                           tblptrh	equ	0xFF7
 16631                           tblptrl	equ	0xFF6
 16632                           tablat	equ	0xFF5
 16633                           prodh	equ	0xFF4
 16634                           prodl	equ	0xFF3
 16635                           intcon	equ	0xFF2
 16636                           intcon2	equ	0xFF1
 16637                           intcon3	equ	0xFF0
 16638                           indf0	equ	0xFEF
 16639                           postinc0	equ	0xFEE
 16640                           fsr0h	equ	0xFEA
 16641                           fsr0l	equ	0xFE9
 16642                           wreg	equ	0xFE8
 16643                           postdec1	equ	0xFE5
 16644                           fsr1l	equ	0xFE1
 16645                           indf2	equ	0xFDF
 16646                           postinc2	equ	0xFDE
 16647                           postdec2	equ	0xFDD
 16648                           fsr2h	equ	0xFDA
 16649                           fsr2l	equ	0xFD9
 16650                           status	equ	0xFD8
 16651                           
 16652 ;; *************** function ___lwmod *****************
 16653 ;; Defined at:
 16654 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16655 ;; Parameters:    Size  Location     Type
 16656 ;;  dividend        2    7[BANK0 ] unsigned int 
 16657 ;;  divisor         2    9[BANK0 ] unsigned int 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  counter         1   11[BANK0 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;                  2    7[BANK0 ] unsigned int 
 16662 ;; Registers used:
 16663 ;;		wreg, status,2, status,0
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16669 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;Total ram usage:        5 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    7
 16676 ;; This function calls:
 16677 ;;		Nothing
 16678 ;; This function is called by:
 16679 ;;		_printf
 16680 ;; This function uses a non-reentrant model
 16681 ;;
 16682                           
 16683                           	psect	text55
 16684  004934                     __ptext55:
 16685                           	opt stack 0
 16686  004934                     ___lwmod:
 16687                           	opt stack 19
 16688                           
 16689                           ; BSR set to: 0
 16690                           ;incstack = 0
 16691  004934  0100               	movlb	0	; () banked
 16692  004936  5189               	movf	___lwmod@divisor& (0+255),w,b
 16693  004938  0100               	movlb	0	; () banked
 16694  00493A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16695  00493C  B4D8               	btfsc	status,2,c
 16696  00493E  D026               	goto	l1867
 16697                           
 16698                           ; BSR set to: 0
 16699  004940  0E01               	movlw	1
 16700  004942  0100               	movlb	0	; () banked
 16701  004944  6F8B               	movwf	___lwmod@counter& (0+255),b
 16702  004946  D006               	goto	l6132
 16703  004948                     l6130:
 16704                           
 16705                           ; BSR set to: 0
 16706  004948  0100               	movlb	0	; () banked
 16707  00494A  90D8               	bcf	status,0,c
 16708  00494C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16709  00494E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16710  004950  0100               	movlb	0	; () banked
 16711  004952  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16712  004954                     l6132:
 16713                           
 16714                           ; BSR set to: 0
 16715  004954  0100               	movlb	0	; () banked
 16716  004956  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16717  004958  D7F7               	goto	l6130
 16718  00495A                     l6134:
 16719                           
 16720                           ; BSR set to: 0
 16721  00495A  0100               	movlb	0	; () banked
 16722  00495C  5189               	movf	___lwmod@divisor& (0+255),w,b
 16723  00495E  0100               	movlb	0	; () banked
 16724  004960  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16725  004962  0100               	movlb	0	; () banked
 16726  004964  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16727  004966  0100               	movlb	0	; () banked
 16728  004968  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16729  00496A  A0D8               	btfss	status,0,c
 16730  00496C  D008               	goto	l6138
 16731                           
 16732                           ; BSR set to: 0
 16733  00496E  0100               	movlb	0	; () banked
 16734  004970  5189               	movf	___lwmod@divisor& (0+255),w,b
 16735  004972  0100               	movlb	0	; () banked
 16736  004974  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16737  004976  0100               	movlb	0	; () banked
 16738  004978  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16739  00497A  0100               	movlb	0	; () banked
 16740  00497C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16741  00497E                     l6138:
 16742                           
 16743                           ; BSR set to: 0
 16744  00497E  0100               	movlb	0	; () banked
 16745  004980  90D8               	bcf	status,0,c
 16746  004982  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16747  004984  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16748                           
 16749                           ; BSR set to: 0
 16750  004986  0100               	movlb	0	; () banked
 16751  004988  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16752  00498A  D7E7               	goto	l6134
 16753  00498C                     l1867:
 16754                           
 16755                           ; BSR set to: 0
 16756  00498C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16757  004990  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16758                           
 16759                           ; BSR set to: 0
 16760  004994  0012               	return		;funcret
 16761  004996                     __end_of___lwmod:
 16762                           	opt stack 0
 16763                           tblptru	equ	0xFF8
 16764                           tblptrh	equ	0xFF7
 16765                           tblptrl	equ	0xFF6
 16766                           tablat	equ	0xFF5
 16767                           prodh	equ	0xFF4
 16768                           prodl	equ	0xFF3
 16769                           intcon	equ	0xFF2
 16770                           intcon2	equ	0xFF1
 16771                           intcon3	equ	0xFF0
 16772                           indf0	equ	0xFEF
 16773                           postinc0	equ	0xFEE
 16774                           fsr0h	equ	0xFEA
 16775                           fsr0l	equ	0xFE9
 16776                           wreg	equ	0xFE8
 16777                           postdec1	equ	0xFE5
 16778                           fsr1l	equ	0xFE1
 16779                           indf2	equ	0xFDF
 16780                           postinc2	equ	0xFDE
 16781                           postdec2	equ	0xFDD
 16782                           fsr2h	equ	0xFDA
 16783                           fsr2l	equ	0xFD9
 16784                           status	equ	0xFD8
 16785                           
 16786 ;; *************** function ___lwdiv *****************
 16787 ;; Defined at:
 16788 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16789 ;; Parameters:    Size  Location     Type
 16790 ;;  dividend        2    0[BANK0 ] unsigned int 
 16791 ;;  divisor         2    2[BANK0 ] unsigned int 
 16792 ;; Auto vars:     Size  Location     Type
 16793 ;;  quotient        2    4[BANK0 ] unsigned int 
 16794 ;;  counter         1    6[BANK0 ] unsigned char 
 16795 ;; Return value:  Size  Location     Type
 16796 ;;                  2    0[BANK0 ] unsigned int 
 16797 ;; Registers used:
 16798 ;;		wreg, status,2, status,0
 16799 ;; Tracked objects:
 16800 ;;		On entry : 0/0
 16801 ;;		On exit  : 0/0
 16802 ;;		Unchanged: 0/0
 16803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16804 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;Total ram usage:        7 bytes
 16809 ;; Hardware stack levels used:    1
 16810 ;; Hardware stack levels required when called:    7
 16811 ;; This function calls:
 16812 ;;		Nothing
 16813 ;; This function is called by:
 16814 ;;		_printf
 16815 ;; This function uses a non-reentrant model
 16816 ;;
 16817                           
 16818                           	psect	text56
 16819  004700                     __ptext56:
 16820                           	opt stack 0
 16821  004700                     ___lwdiv:
 16822                           	opt stack 19
 16823                           
 16824                           ; BSR set to: 0
 16825                           ;incstack = 0
 16826  004700  0E00               	movlw	0
 16827  004702  0100               	movlb	0	; () banked
 16828  004704  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16829  004706  0E00               	movlw	0
 16830  004708  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16831                           
 16832                           ; BSR set to: 0
 16833  00470A  0100               	movlb	0	; () banked
 16834  00470C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16835  00470E  0100               	movlb	0	; () banked
 16836  004710  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16837  004712  B4D8               	btfsc	status,2,c
 16838  004714  D02C               	goto	l1857
 16839                           
 16840                           ; BSR set to: 0
 16841  004716  0E01               	movlw	1
 16842  004718  0100               	movlb	0	; () banked
 16843  00471A  6F86               	movwf	___lwdiv@counter& (0+255),b
 16844  00471C  D006               	goto	l6112
 16845  00471E                     l6110:
 16846                           
 16847                           ; BSR set to: 0
 16848  00471E  0100               	movlb	0	; () banked
 16849  004720  90D8               	bcf	status,0,c
 16850  004722  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16851  004724  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16852  004726  0100               	movlb	0	; () banked
 16853  004728  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16854  00472A                     l6112:
 16855                           
 16856                           ; BSR set to: 0
 16857  00472A  0100               	movlb	0	; () banked
 16858  00472C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16859  00472E  D7F7               	goto	l6110
 16860  004730                     l6114:
 16861                           
 16862                           ; BSR set to: 0
 16863  004730  0100               	movlb	0	; () banked
 16864  004732  90D8               	bcf	status,0,c
 16865  004734  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16866  004736  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16867                           
 16868                           ; BSR set to: 0
 16869  004738  0100               	movlb	0	; () banked
 16870  00473A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16871  00473C  0100               	movlb	0	; () banked
 16872  00473E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16873  004740  0100               	movlb	0	; () banked
 16874  004742  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16875  004744  0100               	movlb	0	; () banked
 16876  004746  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16877  004748  A0D8               	btfss	status,0,c
 16878  00474A  D00A               	goto	l6122
 16879                           
 16880                           ; BSR set to: 0
 16881  00474C  0100               	movlb	0	; () banked
 16882  00474E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16883  004750  0100               	movlb	0	; () banked
 16884  004752  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16885  004754  0100               	movlb	0	; () banked
 16886  004756  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16887  004758  0100               	movlb	0	; () banked
 16888  00475A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16889                           
 16890                           ; BSR set to: 0
 16891  00475C  0100               	movlb	0	; () banked
 16892  00475E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16893  004760                     l6122:
 16894                           
 16895                           ; BSR set to: 0
 16896  004760  0100               	movlb	0	; () banked
 16897  004762  90D8               	bcf	status,0,c
 16898  004764  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16899  004766  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16900                           
 16901                           ; BSR set to: 0
 16902  004768  0100               	movlb	0	; () banked
 16903  00476A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16904  00476C  D7E1               	goto	l6114
 16905  00476E                     l1857:
 16906                           
 16907                           ; BSR set to: 0
 16908  00476E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16909  004772  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16910                           
 16911                           ; BSR set to: 0
 16912  004776  0012               	return		;funcret
 16913  004778                     __end_of___lwdiv:
 16914                           	opt stack 0
 16915                           tblptru	equ	0xFF8
 16916                           tblptrh	equ	0xFF7
 16917                           tblptrl	equ	0xFF6
 16918                           tablat	equ	0xFF5
 16919                           prodh	equ	0xFF4
 16920                           prodl	equ	0xFF3
 16921                           intcon	equ	0xFF2
 16922                           intcon2	equ	0xFF1
 16923                           intcon3	equ	0xFF0
 16924                           indf0	equ	0xFEF
 16925                           postinc0	equ	0xFEE
 16926                           fsr0h	equ	0xFEA
 16927                           fsr0l	equ	0xFE9
 16928                           wreg	equ	0xFE8
 16929                           postdec1	equ	0xFE5
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           fsr2h	equ	0xFDA
 16935                           fsr2l	equ	0xFD9
 16936                           status	equ	0xFD8
 16937                           
 16938 ;; *************** function _lcdInst *****************
 16939 ;; Defined at:
 16940 ;;		line 15 in file "lcd.c"
 16941 ;; Parameters:    Size  Location     Type
 16942 ;;  data            1    wreg     unsigned char 
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;  data            1    2[BANK0 ] unsigned char 
 16945 ;; Return value:  Size  Location     Type
 16946 ;;                  1    wreg      void 
 16947 ;; Registers used:
 16948 ;;		wreg, status,2, status,0, cstack
 16949 ;; Tracked objects:
 16950 ;;		On entry : 0/0
 16951 ;;		On exit  : 0/0
 16952 ;;		Unchanged: 0/0
 16953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;Total ram usage:        1 bytes
 16959 ;; Hardware stack levels used:    1
 16960 ;; Hardware stack levels required when called:    8
 16961 ;; This function calls:
 16962 ;;		_lcdNibble
 16963 ;; This function is called by:
 16964 ;;		_UI
 16965 ;;		_change_state_to_menu_start
 16966 ;;		_change_state_to_menu_12
 16967 ;;		_change_state_to_menu_22
 16968 ;;		_initLCD
 16969 ;;		_printRTC
 16970 ;;		_Loading
 16971 ;;		_EEPROM_write
 16972 ;;		_Test
 16973 ;;		_algorithmTest
 16974 ;;		_sensorTest
 16975 ;;		_actuatorTest
 16976 ;;		_BothServos
 16977 ;;		_PortTestA5
 16978 ;;		_PusherTest
 16979 ;;		_SpeedTest
 16980 ;;		_BlockerTest
 16981 ;;		_ToggleTestA5
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           	psect	text57
 16986  0052D8                     __ptext57:
 16987                           	opt stack 0
 16988  0052D8                     _lcdInst:
 16989                           	opt stack 20
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;incstack = 0
 16993                           ;lcdInst@data stored from wreg
 16994  0052D8  0100               	movlb	0	; () banked
 16995  0052DA  6F82               	movwf	lcdInst@data& (0+255),b
 16996                           
 16997                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16998  0052DC  948C               	bcf	3980,2,c	;volatile
 16999                           
 17000                           ;lcd.c: 17: lcdNibble(data);
 17001  0052DE  0100               	movlb	0	; () banked
 17002  0052E0  5182               	movf	lcdInst@data& (0+255),w,b
 17003  0052E2  EC66  F024         	call	_lcdNibble
 17004  0052E6  0012               	return		;funcret
 17005  0052E8                     __end_of_lcdInst:
 17006                           	opt stack 0
 17007                           tblptru	equ	0xFF8
 17008                           tblptrh	equ	0xFF7
 17009                           tblptrl	equ	0xFF6
 17010                           tablat	equ	0xFF5
 17011                           prodh	equ	0xFF4
 17012                           prodl	equ	0xFF3
 17013                           intcon	equ	0xFF2
 17014                           intcon2	equ	0xFF1
 17015                           intcon3	equ	0xFF0
 17016                           indf0	equ	0xFEF
 17017                           postinc0	equ	0xFEE
 17018                           fsr0h	equ	0xFEA
 17019                           fsr0l	equ	0xFE9
 17020                           wreg	equ	0xFE8
 17021                           postdec1	equ	0xFE5
 17022                           fsr1l	equ	0xFE1
 17023                           indf2	equ	0xFDF
 17024                           postinc2	equ	0xFDE
 17025                           postdec2	equ	0xFDD
 17026                           fsr2h	equ	0xFDA
 17027                           fsr2l	equ	0xFD9
 17028                           status	equ	0xFD8
 17029                           
 17030 ;; *************** function _lcdNibble *****************
 17031 ;; Defined at:
 17032 ;;		line 25 in file "lcd.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;  data            1    wreg     unsigned char 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  data            1    1[BANK0 ] unsigned char 
 17037 ;;  temp            1    0[BANK0 ] unsigned char 
 17038 ;; Return value:  Size  Location     Type
 17039 ;;                  1    wreg      void 
 17040 ;; Registers used:
 17041 ;;		wreg, status,2, status,0
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;Total ram usage:        2 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    7
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		_lcdInst
 17058 ;;		_putch
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           	psect	text58
 17063  0048CC                     __ptext58:
 17064                           	opt stack 0
 17065  0048CC                     _lcdNibble:
 17066                           	opt stack 20
 17067                           
 17068                           ;incstack = 0
 17069                           ;lcdNibble@data stored from wreg
 17070  0048CC  0100               	movlb	0	; () banked
 17071  0048CE  6F81               	movwf	lcdNibble@data& (0+255),b
 17072                           
 17073                           ;lcd.c: 27: char temp = data & 0xF0;
 17074  0048D0  0100               	movlb	0	; () banked
 17075  0048D2  5181               	movf	lcdNibble@data& (0+255),w,b
 17076  0048D4  0BF0               	andlw	240
 17077  0048D6  0100               	movlb	0	; () banked
 17078  0048D8  6F80               	movwf	lcdNibble@temp& (0+255),b
 17079                           
 17080                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17081  0048DA  508C               	movf	3980,w,c	;volatile
 17082  0048DC  0B0F               	andlw	15
 17083  0048DE  6E8C               	movwf	3980,c	;volatile
 17084                           
 17085                           ;lcd.c: 29: LATD = temp | LATD;
 17086  0048E0  0100               	movlb	0	; () banked
 17087  0048E2  5180               	movf	lcdNibble@temp& (0+255),w,b
 17088  0048E4  108C               	iorwf	3980,w,c	;volatile
 17089  0048E6  6E8C               	movwf	3980,c	;volatile
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17093  0048E8  868C               	bsf	3980,3,c	;volatile
 17094                           
 17095                           ; BSR set to: 0
 17096                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17097  0048EA  0E42               	movlw	66
 17098  0048EC                     u10077:
 17099  0048EC  2EE8               	decfsz	wreg,f,c
 17100  0048EE  D7FE               	bra	u10077
 17101  0048F0  D000               	nop2	
 17102                           
 17103                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17104  0048F2  968C               	bcf	3980,3,c	;volatile
 17105                           
 17106                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17107  0048F4  0E42               	movlw	66
 17108  0048F6                     u10087:
 17109  0048F6  2EE8               	decfsz	wreg,f,c
 17110  0048F8  D7FE               	bra	u10087
 17111  0048FA  D000               	nop2	
 17112                           
 17113                           ;lcd.c: 36: data = data << 4;
 17114  0048FC  0100               	movlb	0	; () banked
 17115  0048FE  3981               	swapf	lcdNibble@data& (0+255),w,b
 17116  004900  0BF0               	andlw	240
 17117  004902  0100               	movlb	0	; () banked
 17118  004904  6F81               	movwf	lcdNibble@data& (0+255),b
 17119                           
 17120                           ;lcd.c: 38: temp = data & 0xF0;
 17121  004906  0100               	movlb	0	; () banked
 17122  004908  5181               	movf	lcdNibble@data& (0+255),w,b
 17123  00490A  0BF0               	andlw	240
 17124  00490C  0100               	movlb	0	; () banked
 17125  00490E  6F80               	movwf	lcdNibble@temp& (0+255),b
 17126                           
 17127                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17128  004910  508C               	movf	3980,w,c	;volatile
 17129  004912  0B0F               	andlw	15
 17130  004914  6E8C               	movwf	3980,c	;volatile
 17131                           
 17132                           ;lcd.c: 40: LATD = temp | LATD;
 17133  004916  0100               	movlb	0	; () banked
 17134  004918  5180               	movf	lcdNibble@temp& (0+255),w,b
 17135  00491A  108C               	iorwf	3980,w,c	;volatile
 17136  00491C  6E8C               	movwf	3980,c	;volatile
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17140  00491E  868C               	bsf	3980,3,c	;volatile
 17141                           
 17142                           ; BSR set to: 0
 17143                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17144  004920  0E42               	movlw	66
 17145  004922                     u10097:
 17146  004922  2EE8               	decfsz	wreg,f,c
 17147  004924  D7FE               	bra	u10097
 17148  004926  D000               	nop2	
 17149                           
 17150                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17151  004928  968C               	bcf	3980,3,c	;volatile
 17152                           
 17153                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17154  00492A  0E42               	movlw	66
 17155  00492C                     u10107:
 17156  00492C  2EE8               	decfsz	wreg,f,c
 17157  00492E  D7FE               	bra	u10107
 17158  004930  D000               	nop2	
 17159  004932  0012               	return		;funcret
 17160  004934                     __end_of_lcdNibble:
 17161                           	opt stack 0
 17162                           tblptru	equ	0xFF8
 17163                           tblptrh	equ	0xFF7
 17164                           tblptrl	equ	0xFF6
 17165                           tablat	equ	0xFF5
 17166                           prodh	equ	0xFF4
 17167                           prodl	equ	0xFF3
 17168                           intcon	equ	0xFF2
 17169                           intcon2	equ	0xFF1
 17170                           intcon3	equ	0xFF0
 17171                           indf0	equ	0xFEF
 17172                           postinc0	equ	0xFEE
 17173                           fsr0h	equ	0xFEA
 17174                           fsr0l	equ	0xFE9
 17175                           wreg	equ	0xFE8
 17176                           postdec1	equ	0xFE5
 17177                           fsr1l	equ	0xFE1
 17178                           indf2	equ	0xFDF
 17179                           postinc2	equ	0xFDE
 17180                           postdec2	equ	0xFDD
 17181                           fsr2h	equ	0xFDA
 17182                           fsr2l	equ	0xFD9
 17183                           status	equ	0xFD8
 17184                           
 17185 ;; *************** function _handler *****************
 17186 ;; Defined at:
 17187 ;;		line 16 in file "interruptHandler.c"
 17188 ;; Parameters:    Size  Location     Type
 17189 ;;		None
 17190 ;; Auto vars:     Size  Location     Type
 17191 ;;		None
 17192 ;; Return value:  Size  Location     Type
 17193 ;;                  1    wreg      void 
 17194 ;; Registers used:
 17195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17196 ;; Tracked objects:
 17197 ;;		On entry : 0/0
 17198 ;;		On exit  : 0/0
 17199 ;;		Unchanged: 0/0
 17200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;Total ram usage:       16 bytes
 17206 ;; Hardware stack levels used:    1
 17207 ;; Hardware stack levels required when called:    6
 17208 ;; This function calls:
 17209 ;;		_printSortTimer
 17210 ;;		_updateMenu
 17211 ;;		_updateServoStates
 17212 ;; This function is called by:
 17213 ;;		Interrupt level 2
 17214 ;; This function uses a non-reentrant model
 17215 ;;
 17216                           
 17217                           	psect	intcode
 17218  000008                     __pintcode:
 17219                           	opt stack 0
 17220  000008                     _handler:
 17221                           	opt stack 18
 17222                           
 17223                           ;incstack = 0
 17224  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17225  00000A  ED81  F01B         	call	int_func,f	;refresh shadow registers
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           intcon2	equ	0xFF1
 17234                           intcon3	equ	0xFF0
 17235                           indf0	equ	0xFEF
 17236                           postinc0	equ	0xFEE
 17237                           fsr0h	equ	0xFEA
 17238                           fsr0l	equ	0xFE9
 17239                           wreg	equ	0xFE8
 17240                           postdec1	equ	0xFE5
 17241                           fsr1l	equ	0xFE1
 17242                           indf2	equ	0xFDF
 17243                           postinc2	equ	0xFDE
 17244                           postdec2	equ	0xFDD
 17245                           fsr2h	equ	0xFDA
 17246                           fsr2l	equ	0xFD9
 17247                           status	equ	0xFD8
 17248                           
 17249                           	psect	intcode_body
 17250  003702                     __pintcode_body:
 17251                           	opt stack 18
 17252  003702                     int_func:
 17253                           	opt stack 18
 17254  003702  0006               	pop		; remove dummy address from shadow register refresh
 17255  003704  CFFA F04D          	movff	pclath,??_handler+2
 17256  003708  CFFB F04E          	movff	pclatu,??_handler+3
 17257  00370C  CFE9 F04F          	movff	fsr0l,??_handler+4
 17258  003710  CFEA F050          	movff	fsr0h,??_handler+5
 17259  003714  CFE1 F051          	movff	fsr1l,??_handler+6
 17260  003718  CFE2 F052          	movff	fsr1h,??_handler+7
 17261  00371C  CFD9 F053          	movff	fsr2l,??_handler+8
 17262  003720  CFDA F054          	movff	fsr2h,??_handler+9
 17263  003724  CFF3 F055          	movff	prodl,??_handler+10
 17264  003728  CFF4 F056          	movff	prodh,??_handler+11
 17265  00372C  CFF6 F057          	movff	tblptrl,??_handler+12
 17266  003730  CFF7 F058          	movff	tblptrh,??_handler+13
 17267  003734  CFF8 F059          	movff	tblptru,??_handler+14
 17268  003738  CFF5 F05A          	movff	tablat,??_handler+15
 17269                           
 17270                           ;interruptHandler.c: 18: if(INT1IF){
 17271  00373C  A0F0               	btfss	intcon3,0,c	;volatile
 17272  00373E  D02B               	goto	i2l9420
 17273                           
 17274                           ;interruptHandler.c: 19: INT1IF = 0;
 17275  003740  90F0               	bcf	intcon3,0,c	;volatile
 17276                           
 17277                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17278  003742  0100               	movlb	0	; () banked
 17279  003744  51FC               	movf	_machine_state& (0+255),w,b
 17280  003746  A4D8               	btfss	status,2,c
 17281  003748  D01B               	goto	i2l9414
 17282                           
 17283                           ; BSR set to: 0
 17284                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17285  00374A  3881               	swapf	3969,w,c	;volatile
 17286  00374C  0B0F               	andlw	15
 17287  00374E  0B0F               	andlw	15
 17288  003750  6E4B               	movwf	??_handler& (0+255),c
 17289  003752  6A4C               	clrf	(??_handler+1)& (0+255),c
 17290  003754  0EEF               	movlw	low _keys
 17291  003756  244B               	addwf	??_handler,w,c
 17292  003758  6EF6               	movwf	tblptrl,c
 17293  00375A  0EFA               	movlw	high _keys
 17294  00375C  204C               	addwfc	??_handler+1,w,c
 17295  00375E  6EF7               	movwf	tblptrh,c
 17296  003760                     	if	1	;There are 3 active tblptr bytes
 17297  003760  6AF8               	clrf	tblptru,c
 17298  003762  0E00               	movlw	low (__mediumconst shr (0+16))
 17299  003764  22F8               	addwfc	tblptru,f,c
 17300  003766                     	endif
 17301  003766  0008               	tblrd		*
 17302  003768  CFF5 F07D          	movff	tablat,_input	;volatile
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;interruptHandler.c: 23: if(input == '*'){
 17306  00376C  0E2A               	movlw	42
 17307  00376E  187D               	xorwf	_input,w,c	;volatile
 17308  003770  A4D8               	btfss	status,2,c
 17309  003772  D004               	goto	i2l9412
 17310                           
 17311                           ; BSR set to: 0
 17312                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17313  003774  0E03               	movlw	3
 17314  003776  0100               	movlb	0	; () banked
 17315  003778  6FFC               	movwf	_machine_state& (0+255),b
 17316                           
 17317                           ;interruptHandler.c: 25: }
 17318  00377A  D002               	goto	i2l9414
 17319  00377C                     i2l9412:
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;interruptHandler.c: 26: else{
 17323                           ;interruptHandler.c: 27: updateMenu();
 17324  00377C  EC80  F013         	call	_updateMenu	;wreg free
 17325  003780                     i2l9414:
 17326                           
 17327                           ;interruptHandler.c: 28: }
 17328                           ;interruptHandler.c: 29: }
 17329                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17330  003780  0100               	movlb	0	; () banked
 17331  003782  05FC               	decf	_machine_state& (0+255),w,b
 17332  003784  A4D8               	btfss	status,2,c
 17333  003786  D007               	goto	i2l9420
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;interruptHandler.c: 31: if(input == '*'){
 17337  003788  0E2A               	movlw	42
 17338  00378A  187D               	xorwf	_input,w,c	;volatile
 17339  00378C  A4D8               	btfss	status,2,c
 17340  00378E  D003               	goto	i2l9420
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17344  003790  0E02               	movlw	2
 17345  003792  0100               	movlb	0	; () banked
 17346  003794  6FFC               	movwf	_machine_state& (0+255),b
 17347  003796                     i2l9420:
 17348                           
 17349                           ;interruptHandler.c: 33: }
 17350                           ;interruptHandler.c: 34: }
 17351                           ;interruptHandler.c: 35: }
 17352                           ;interruptHandler.c: 38: if(TMR0IF){
 17353  003796  A4F2               	btfss	intcon,2,c	;volatile
 17354  003798  D00C               	goto	i2l9434
 17355                           
 17356                           ;interruptHandler.c: 39: TMR0IF = 0;
 17357  00379A  94F2               	bcf	intcon,2,c	;volatile
 17358                           
 17359                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17360  00379C  0100               	movlb	0	; () banked
 17361  00379E  05FC               	decf	_machine_state& (0+255),w,b
 17362  0037A0  A4D8               	btfss	status,2,c
 17363  0037A2  D007               	goto	i2l9434
 17364                           
 17365                           ; BSR set to: 0
 17366                           ;interruptHandler.c: 41: printSortTimer();
 17367  0037A4  ECE0  F014         	call	_printSortTimer	;wreg free
 17368                           
 17369                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17370  0037A8  0E85               	movlw	133
 17371  0037AA  6ED7               	movwf	4055,c	;volatile
 17372                           
 17373                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17374  0037AC  0EEE               	movlw	238
 17375  0037AE  6ED6               	movwf	4054,c	;volatile
 17376                           
 17377                           ;interruptHandler.c: 45: TMR0ON = 1;
 17378  0037B0  8ED5               	bsf	4053,7,c	;volatile
 17379  0037B2                     i2l9434:
 17380                           
 17381                           ;interruptHandler.c: 46: }
 17382                           ;interruptHandler.c: 47: }
 17383                           ;interruptHandler.c: 50: if(TMR1IF){
 17384  0037B2  A09E               	btfss	3998,0,c	;volatile
 17385  0037B4  D02A               	goto	i2l9462
 17386                           
 17387                           ;interruptHandler.c: 51: TMR1IF = 0;
 17388  0037B6  909E               	bcf	3998,0,c	;volatile
 17389                           
 17390                           ;interruptHandler.c: 52: TMR1ON = 0;
 17391  0037B8  90CD               	bcf	4045,0,c	;volatile
 17392                           
 17393                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17394  0037BA  0100               	movlb	0	; () banked
 17395  0037BC  05FC               	decf	_machine_state& (0+255),w,b
 17396  0037BE  A4D8               	btfss	status,2,c
 17397  0037C0  D024               	goto	i2l9462
 17398                           
 17399                           ; BSR set to: 0
 17400                           ;interruptHandler.c: 54: if(was_low_1){
 17401  0037C2  5079               	movf	_was_low_1,w,c	;volatile
 17402  0037C4  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17403  0037C6  B4D8               	btfsc	status,2,c
 17404  0037C8  D00A               	goto	i2l961
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17408  0037CA  828B               	bsf	3979,1,c	;volatile
 17409                           
 17410                           ; BSR set to: 0
 17411                           ;interruptHandler.c: 56: was_low_1 = 0;
 17412  0037CC  0E00               	movlw	0
 17413  0037CE  6E7A               	movwf	_was_low_1+1,c	;volatile
 17414  0037D0  0E00               	movlw	0
 17415  0037D2  6E79               	movwf	_was_low_1,c	;volatile
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17419  0037D4  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17423  0037D8  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17424                           
 17425                           ;interruptHandler.c: 59: }
 17426  0037DC  D00F               	goto	i2l9456
 17427  0037DE                     i2l961:
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;interruptHandler.c: 60: else{
 17431                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17432  0037DE  928B               	bcf	3979,1,c	;volatile
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;interruptHandler.c: 62: was_low_1 = 1;
 17436  0037E0  0E00               	movlw	0
 17437  0037E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 17438  0037E4  0E01               	movlw	1
 17439  0037E6  6E79               	movwf	_was_low_1,c	;volatile
 17440                           
 17441                           ; BSR set to: 0
 17442                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17443  0037E8  0100               	movlb	0	; () banked
 17444  0037EA  51DA               	movf	_servoTimes& (0+255),w,b
 17445  0037EC  0800               	sublw	0
 17446  0037EE  0F20               	addlw	32
 17447  0037F0  6ECF               	movwf	4047,c	;volatile
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17451  0037F2  0100               	movlb	0	; () banked
 17452  0037F4  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17453  0037F6  0800               	sublw	0
 17454  0037F8  0F20               	addlw	32
 17455  0037FA  6ECE               	movwf	4046,c	;volatile
 17456  0037FC                     i2l9456:
 17457                           
 17458                           ; BSR set to: 0
 17459                           ;interruptHandler.c: 65: }
 17460                           ;interruptHandler.c: 66: TMR1ON = 1;
 17461  0037FC  80CD               	bsf	4045,0,c	;volatile
 17462                           
 17463                           ; BSR set to: 0
 17464                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17465  0037FE  0E0A               	movlw	10
 17466  003800  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17467  003802  0E00               	movlw	0
 17468  003804  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;interruptHandler.c: 69: updateServoStates();
 17472  003806  EC9D  F01A         	call	_updateServoStates	;wreg free
 17473  00380A                     i2l9462:
 17474                           
 17475                           ;interruptHandler.c: 70: }
 17476                           ;interruptHandler.c: 71: }
 17477                           ;interruptHandler.c: 73: if(TMR3IF){
 17478  00380A  A2A1               	btfss	4001,1,c	;volatile
 17479  00380C  D024               	goto	i2l967
 17480                           
 17481                           ;interruptHandler.c: 74: TMR3IF = 0;
 17482  00380E  92A1               	bcf	4001,1,c	;volatile
 17483                           
 17484                           ;interruptHandler.c: 75: TMR3ON = 0;
 17485  003810  90B1               	bcf	4017,0,c	;volatile
 17486                           
 17487                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17488  003812  0100               	movlb	0	; () banked
 17489  003814  05FC               	decf	_machine_state& (0+255),w,b
 17490  003816  A4D8               	btfss	status,2,c
 17491  003818  D01E               	goto	i2l967
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;interruptHandler.c: 77: if(was_low_3){
 17495  00381A  507B               	movf	_was_low_3,w,c	;volatile
 17496  00381C  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17497  00381E  B4D8               	btfsc	status,2,c
 17498  003820  D00A               	goto	i2l965
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17502  003822  848B               	bsf	3979,2,c	;volatile
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;interruptHandler.c: 79: was_low_3 = 0;
 17506  003824  0E00               	movlw	0
 17507  003826  6E7C               	movwf	_was_low_3+1,c	;volatile
 17508  003828  0E00               	movlw	0
 17509  00382A  6E7B               	movwf	_was_low_3,c	;volatile
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17513  00382C  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17514                           
 17515                           ; BSR set to: 0
 17516                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17517  003830  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17518                           
 17519                           ;interruptHandler.c: 82: }
 17520  003834  D00F               	goto	i2l9484
 17521  003836                     i2l965:
 17522                           
 17523                           ; BSR set to: 0
 17524                           ;interruptHandler.c: 83: else{
 17525                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17526  003836  948B               	bcf	3979,2,c	;volatile
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;interruptHandler.c: 85: was_low_3 = 1;
 17530  003838  0E00               	movlw	0
 17531  00383A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17532  00383C  0E01               	movlw	1
 17533  00383E  6E7B               	movwf	_was_low_3,c	;volatile
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17537  003840  0100               	movlb	0	; () banked
 17538  003842  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17539  003844  0800               	sublw	0
 17540  003846  0F20               	addlw	32
 17541  003848  6EB3               	movwf	4019,c	;volatile
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17545  00384A  0100               	movlb	0	; () banked
 17546  00384C  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17547  00384E  0800               	sublw	0
 17548  003850  0F20               	addlw	32
 17549  003852  6EB2               	movwf	4018,c	;volatile
 17550  003854                     i2l9484:
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;interruptHandler.c: 88: }
 17554                           ;interruptHandler.c: 89: TMR3ON = 1;
 17555  003854  80B1               	bsf	4017,0,c	;volatile
 17556  003856                     i2l967:
 17557  003856  C05A  FFF5         	movff	??_handler+15,tablat
 17558  00385A  C059  FFF8         	movff	??_handler+14,tblptru
 17559  00385E  C058  FFF7         	movff	??_handler+13,tblptrh
 17560  003862  C057  FFF6         	movff	??_handler+12,tblptrl
 17561  003866  C056  FFF4         	movff	??_handler+11,prodh
 17562  00386A  C055  FFF3         	movff	??_handler+10,prodl
 17563  00386E  C054  FFDA         	movff	??_handler+9,fsr2h
 17564  003872  C053  FFD9         	movff	??_handler+8,fsr2l
 17565  003876  C052  FFE2         	movff	??_handler+7,fsr1h
 17566  00387A  C051  FFE1         	movff	??_handler+6,fsr1l
 17567  00387E  C050  FFEA         	movff	??_handler+5,fsr0h
 17568  003882  C04F  FFE9         	movff	??_handler+4,fsr0l
 17569  003886  C04E  FFFB         	movff	??_handler+3,pclatu
 17570  00388A  C04D  FFFA         	movff	??_handler+2,pclath
 17571  00388E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17572  003890  0011               	retfie		f
 17573  003892                     __end_of_handler:
 17574                           	opt stack 0
 17575                           pclatu	equ	0xFFB
 17576                           pclath	equ	0xFFA
 17577                           tblptru	equ	0xFF8
 17578                           tblptrh	equ	0xFF7
 17579                           tblptrl	equ	0xFF6
 17580                           tablat	equ	0xFF5
 17581                           prodh	equ	0xFF4
 17582                           prodl	equ	0xFF3
 17583                           intcon	equ	0xFF2
 17584                           intcon2	equ	0xFF1
 17585                           intcon3	equ	0xFF0
 17586                           indf0	equ	0xFEF
 17587                           postinc0	equ	0xFEE
 17588                           fsr0h	equ	0xFEA
 17589                           fsr0l	equ	0xFE9
 17590                           wreg	equ	0xFE8
 17591                           postdec1	equ	0xFE5
 17592                           fsr1h	equ	0xFE2
 17593                           fsr1l	equ	0xFE1
 17594                           indf2	equ	0xFDF
 17595                           postinc2	equ	0xFDE
 17596                           postdec2	equ	0xFDD
 17597                           fsr2h	equ	0xFDA
 17598                           fsr2l	equ	0xFD9
 17599                           status	equ	0xFD8
 17600                           
 17601 ;; *************** function _updateServoStates *****************
 17602 ;; Defined at:
 17603 ;;		line 520 in file "sort.c"
 17604 ;; Parameters:    Size  Location     Type
 17605 ;;		None
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;		None
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  1    wreg      void 
 17610 ;; Registers used:
 17611 ;;		wreg, status,2, status,0, cstack
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;Total ram usage:        2 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:    1
 17624 ;; This function calls:
 17625 ;;		i2_updateServoPosition
 17626 ;; This function is called by:
 17627 ;;		_handler
 17628 ;; This function uses a non-reentrant model
 17629 ;;
 17630                           
 17631                           	psect	text60
 17632  00353A                     __ptext60:
 17633                           	opt stack 0
 17634  00353A                     _updateServoStates:
 17635                           	opt stack 22
 17636                           
 17637                           ;sort.c: 522: if(servo_timer_counter >= servo_timer_target){
 17638                           
 17639                           ;incstack = 0
 17640  00353A  5073               	movf	_servo_timer_target,w,c	;volatile
 17641  00353C  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17642  00353E  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17643  003540  0A80               	xorlw	128
 17644  003542  6E09               	movwf	??_updateServoStates& (0+255),c
 17645  003544  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17646  003546  0A80               	xorlw	128
 17647  003548  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17648  00354A  A0D8               	btfss	status,0,c
 17649  00354C  0012               	return	
 17650                           
 17651                           ;sort.c: 524: if(f_panning_to_bin){
 17652  00354E  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17653  003550  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17654  003552  A4D8               	btfss	status,2,c
 17655  003554  D036               	goto	i2l9302
 17656  003556  D05F               	goto	i2l9306
 17657  003558                     i2l9276:
 17658                           
 17659                           ;sort.c: 528: updateServoPosition(1260, 3);
 17660  003558  0E04               	movlw	4
 17661  00355A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17662  00355C  0EEC               	movlw	236
 17663  00355E  6E01               	movwf	i2updateServoPosition@time_us,c
 17664  003560  0E00               	movlw	0
 17665  003562  6E04               	movwf	i2updateServoPosition@timer+1,c
 17666  003564  0E03               	movlw	3
 17667  003566  6E03               	movwf	i2updateServoPosition@timer,c
 17668  003568  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17669  00356C  D025               	goto	i2l9296
 17670  00356E                     i2l9280:
 17671                           
 17672                           ;sort.c: 530: servo_timer_target = 700;
 17673  00356E  0E02               	movlw	2
 17674  003570  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17675  003572  0EBC               	movlw	188
 17676  003574  6E73               	movwf	_servo_timer_target,c	;volatile
 17677                           
 17678                           ;sort.c: 531: break;
 17679  003576  D04A               	goto	i2l9304
 17680  003578                     i2l9282:
 17681                           
 17682                           ;sort.c: 533: updateServoPosition(1260, 3);
 17683  003578  0E04               	movlw	4
 17684  00357A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17685  00357C  0EEC               	movlw	236
 17686  00357E  6E01               	movwf	i2updateServoPosition@time_us,c
 17687  003580  0E00               	movlw	0
 17688  003582  6E04               	movwf	i2updateServoPosition@timer+1,c
 17689  003584  0E03               	movlw	3
 17690  003586  6E03               	movwf	i2updateServoPosition@timer,c
 17691  003588  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17692  00358C  D015               	goto	i2l9296
 17693  00358E                     i2l9288:
 17694                           
 17695                           ;sort.c: 539: updateServoPosition(1390, 3);
 17696  00358E  0E05               	movlw	5
 17697  003590  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17698  003592  0E6E               	movlw	110
 17699  003594  6E01               	movwf	i2updateServoPosition@time_us,c
 17700  003596  0E00               	movlw	0
 17701  003598  6E04               	movwf	i2updateServoPosition@timer+1,c
 17702  00359A  0E03               	movlw	3
 17703  00359C  6E03               	movwf	i2updateServoPosition@timer,c
 17704  00359E  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17705  0035A2  D00A               	goto	i2l9296
 17706  0035A4                     i2l9294:
 17707                           
 17708                           ;sort.c: 544: updateServoPosition(1390, 3);
 17709  0035A4  0E05               	movlw	5
 17710  0035A6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17711  0035A8  0E6E               	movlw	110
 17712  0035AA  6E01               	movwf	i2updateServoPosition@time_us,c
 17713  0035AC  0E00               	movlw	0
 17714  0035AE  6E04               	movwf	i2updateServoPosition@timer+1,c
 17715  0035B0  0E03               	movlw	3
 17716  0035B2  6E03               	movwf	i2updateServoPosition@timer,c
 17717  0035B4  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17718  0035B8                     i2l9296:
 17719                           
 17720                           ;sort.c: 545: servo_timer_counter = 0;
 17721  0035B8  0E00               	movlw	0
 17722  0035BA  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17723  0035BC  0E00               	movlw	0
 17724  0035BE  6E71               	movwf	_servo_timer_counter,c	;volatile
 17725  0035C0  D7D6               	goto	i2l9280
 17726  0035C2                     i2l9302:
 17727  0035C2  C06F  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17728  0035C6  C070  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17729                           
 17730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17731                           ; Switch size 1, requested type "space"
 17732                           ; Number of cases is 4, Range of values is 1 to 9
 17733                           ; switch strategies available:
 17734                           ; Name         Instructions Cycles
 17735                           ; simple_byte           13     7 (average)
 17736                           ;	Chosen strategy is simple_byte
 17737  0035CA  500A               	movf	??_updateServoStates+1,w,c
 17738  0035CC  0A01               	xorlw	1	; case 1
 17739  0035CE  B4D8               	btfsc	status,2,c
 17740  0035D0  D00A               	goto	i2l9944
 17741  0035D2  0A02               	xorlw	2	; case 3
 17742  0035D4  B4D8               	btfsc	status,2,c
 17743  0035D6  D00C               	goto	i2l9946
 17744  0035D8  0A05               	xorlw	5	; case 6
 17745  0035DA  B4D8               	btfsc	status,2,c
 17746  0035DC  D00E               	goto	i2l9948
 17747  0035DE  0A0F               	xorlw	15	; case 9
 17748  0035E0  B4D8               	btfsc	status,2,c
 17749  0035E2  D010               	goto	i2l9950
 17750  0035E4  D013               	goto	i2l9304
 17751  0035E6                     i2l9944:
 17752                           
 17753                           ; Switch size 1, requested type "space"
 17754                           ; Number of cases is 1, Range of values is 244 to 244
 17755                           ; switch strategies available:
 17756                           ; Name         Instructions Cycles
 17757                           ; simple_byte            4     3 (average)
 17758                           ;	Chosen strategy is simple_byte
 17759  0035E6  5009               	movf	??_updateServoStates,w,c
 17760  0035E8  0AF4               	xorlw	244	; case 244
 17761  0035EA  B4D8               	btfsc	status,2,c
 17762  0035EC  D7B5               	goto	i2l9276
 17763  0035EE  D00E               	goto	i2l9304
 17764  0035F0                     i2l9946:
 17765                           
 17766                           ; Switch size 1, requested type "space"
 17767                           ; Number of cases is 1, Range of values is 82 to 82
 17768                           ; switch strategies available:
 17769                           ; Name         Instructions Cycles
 17770                           ; simple_byte            4     3 (average)
 17771                           ;	Chosen strategy is simple_byte
 17772  0035F0  5009               	movf	??_updateServoStates,w,c
 17773  0035F2  0A52               	xorlw	82	; case 82
 17774  0035F4  B4D8               	btfsc	status,2,c
 17775  0035F6  D7C0               	goto	i2l9282
 17776  0035F8  D009               	goto	i2l9304
 17777  0035FA                     i2l9948:
 17778                           
 17779                           ; Switch size 1, requested type "space"
 17780                           ; Number of cases is 1, Range of values is 134 to 134
 17781                           ; switch strategies available:
 17782                           ; Name         Instructions Cycles
 17783                           ; simple_byte            4     3 (average)
 17784                           ;	Chosen strategy is simple_byte
 17785  0035FA  5009               	movf	??_updateServoStates,w,c
 17786  0035FC  0A86               	xorlw	134	; case 134
 17787  0035FE  B4D8               	btfsc	status,2,c
 17788  003600  D7C6               	goto	i2l9288
 17789  003602  D004               	goto	i2l9304
 17790  003604                     i2l9950:
 17791                           
 17792                           ; Switch size 1, requested type "space"
 17793                           ; Number of cases is 1, Range of values is 96 to 96
 17794                           ; switch strategies available:
 17795                           ; Name         Instructions Cycles
 17796                           ; simple_byte            4     3 (average)
 17797                           ;	Chosen strategy is simple_byte
 17798  003604  5009               	movf	??_updateServoStates,w,c
 17799  003606  0A60               	xorlw	96	; case 96
 17800  003608  B4D8               	btfsc	status,2,c
 17801  00360A  D7CC               	goto	i2l9294
 17802  00360C                     i2l9304:
 17803                           
 17804                           ;sort.c: 551: f_panning_to_bin = 0;
 17805  00360C  0E00               	movlw	0
 17806  00360E  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17807  003610  0E00               	movlw	0
 17808  003612  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17809                           
 17810                           ;sort.c: 552: }
 17811  003614  0012               	return	
 17812  003616                     i2l9306:
 17813                           
 17814                           ;sort.c: 553: else if(pan_servo_state == 1200){
 17815  003616  0EB0               	movlw	176
 17816  003618  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17817  00361A  E15A               	bnz	i2l9336
 17818  00361C  0E04               	movlw	4
 17819  00361E  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17820  003620  A4D8               	btfss	status,2,c
 17821  003622  D056               	goto	i2l9336
 17822                           
 17823                           ;sort.c: 555: servo_timer_counter = 0;
 17824  003624  0E00               	movlw	0
 17825  003626  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17826  003628  0E00               	movlw	0
 17827  00362A  6E71               	movwf	_servo_timer_counter,c	;volatile
 17828                           
 17829                           ;sort.c: 556: }
 17830  00362C  0012               	return	
 17831  00362E                     i2l9310:
 17832                           
 17833                           ;sort.c: 561: updateServoPosition(1050, 3);
 17834  00362E  0E04               	movlw	4
 17835  003630  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17836  003632  0E1A               	movlw	26
 17837  003634  6E01               	movwf	i2updateServoPosition@time_us,c
 17838  003636  0E00               	movlw	0
 17839  003638  6E04               	movwf	i2updateServoPosition@timer+1,c
 17840  00363A  0E03               	movlw	3
 17841  00363C  6E03               	movwf	i2updateServoPosition@timer,c
 17842  00363E  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17843                           
 17844                           ;sort.c: 562: servo_timer_counter = 0;
 17845  003642  0E00               	movlw	0
 17846  003644  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17847  003646  0E00               	movlw	0
 17848  003648  6E71               	movwf	_servo_timer_counter,c	;volatile
 17849                           
 17850                           ;sort.c: 563: servo_timer_target = 750;
 17851  00364A  0E02               	movlw	2
 17852  00364C  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17853  00364E  0EEE               	movlw	238
 17854  003650  6E73               	movwf	_servo_timer_target,c	;volatile
 17855                           
 17856                           ;sort.c: 564: break;
 17857  003652  0012               	return	
 17858  003654                     i2l9316:
 17859                           
 17860                           ;sort.c: 566: updateServoPosition(1050, 3);
 17861  003654  0E04               	movlw	4
 17862  003656  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17863  003658  0E1A               	movlw	26
 17864  00365A  6E01               	movwf	i2updateServoPosition@time_us,c
 17865  00365C  0E00               	movlw	0
 17866  00365E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17867  003660  0E03               	movlw	3
 17868  003662  6E03               	movwf	i2updateServoPosition@timer,c
 17869  003664  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17870                           
 17871                           ;sort.c: 567: servo_timer_counter = 0;
 17872  003668  0E00               	movlw	0
 17873  00366A  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17874  00366C  0E00               	movlw	0
 17875  00366E  6E71               	movwf	_servo_timer_counter,c	;volatile
 17876                           
 17877                           ;sort.c: 568: servo_timer_target = 750;
 17878  003670  0E02               	movlw	2
 17879  003672  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17880  003674  0EEE               	movlw	238
 17881  003676  6E73               	movwf	_servo_timer_target,c	;volatile
 17882                           
 17883                           ;sort.c: 569: break;
 17884  003678  0012               	return	
 17885  00367A                     i2l9322:
 17886                           
 17887                           ;sort.c: 572: updateServoPosition(1200, 1);
 17888  00367A  0E04               	movlw	4
 17889  00367C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17890  00367E  0EB0               	movlw	176
 17891  003680  6E01               	movwf	i2updateServoPosition@time_us,c
 17892  003682  0E00               	movlw	0
 17893  003684  6E04               	movwf	i2updateServoPosition@timer+1,c
 17894  003686  0E01               	movlw	1
 17895  003688  6E03               	movwf	i2updateServoPosition@timer,c
 17896  00368A  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17897                           
 17898                           ;sort.c: 573: updateServoPosition(1050, 3);
 17899  00368E  0E04               	movlw	4
 17900  003690  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17901  003692  0E1A               	movlw	26
 17902  003694  6E01               	movwf	i2updateServoPosition@time_us,c
 17903  003696  0E00               	movlw	0
 17904  003698  6E04               	movwf	i2updateServoPosition@timer+1,c
 17905  00369A  0E03               	movlw	3
 17906  00369C  6E03               	movwf	i2updateServoPosition@timer,c
 17907  00369E  EC2E  F024         	call	i2_updateServoPosition	;wreg free
 17908                           
 17909                           ;sort.c: 574: servo_timer_counter = 0;
 17910  0036A2  0E00               	movlw	0
 17911  0036A4  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17912  0036A6  0E00               	movlw	0
 17913  0036A8  6E71               	movwf	_servo_timer_counter,c	;volatile
 17914                           
 17915                           ;sort.c: 575: servo_timer_target = 9999;
 17916  0036AA  0E27               	movlw	39
 17917  0036AC  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17918  0036AE  0E0F               	movlw	15
 17919  0036B0  6E73               	movwf	_servo_timer_target,c	;volatile
 17920                           
 17921                           ;sort.c: 577: f_can_distributed = 1;
 17922  0036B2  0E00               	movlw	0
 17923  0036B4  0101               	movlb	1	; () banked
 17924  0036B6  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 17925  0036B8  0E01               	movlw	1
 17926  0036BA  6F35               	movwf	_f_can_distributed& (0+255),b
 17927                           
 17928                           ; BSR set to: 1
 17929                           ;sort.c: 578: if(f_lastCan == 1){
 17930  0036BC  0100               	movlb	0	; () banked
 17931  0036BE  05EE               	decf	_f_lastCan& (0+255),w,b
 17932  0036C0  0100               	movlb	0	; () banked
 17933  0036C2  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 17934  0036C4  A4D8               	btfss	status,2,c
 17935  0036C6  0012               	return	
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;sort.c: 579: machine_state = DoneSorting_state;
 17939  0036C8  0E02               	movlw	2
 17940  0036CA  0100               	movlb	0	; () banked
 17941  0036CC  6FFC               	movwf	_machine_state& (0+255),b
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;sort.c: 585: }
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;sort.c: 584: break;
 17948                           
 17949                           ;sort.c: 583: default:
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;sort.c: 580: }
 17953                           ;sort.c: 581: break;
 17954  0036CE  0012               	return	
 17955  0036D0                     i2l9336:
 17956  0036D0  C075  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 17957  0036D4  C076  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 17958                           
 17959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17960                           ; Switch size 1, requested type "space"
 17961                           ; Number of cases is 2, Range of values is 4 to 5
 17962                           ; switch strategies available:
 17963                           ; Name         Instructions Cycles
 17964                           ; simple_byte            7     4 (average)
 17965                           ;	Chosen strategy is simple_byte
 17966  0036D8  500A               	movf	??_updateServoStates+1,w,c
 17967  0036DA  0A04               	xorlw	4	; case 4
 17968  0036DC  B4D8               	btfsc	status,2,c
 17969  0036DE  D004               	goto	i2l9952
 17970  0036E0  0A01               	xorlw	1	; case 5
 17971  0036E2  A4D8               	btfss	status,2,c
 17972  0036E4  0012               	return	
 17973  0036E6  D008               	goto	i2l9954
 17974  0036E8                     i2l9952:
 17975                           
 17976                           ; Switch size 1, requested type "space"
 17977                           ; Number of cases is 2, Range of values is 26 to 236
 17978                           ; switch strategies available:
 17979                           ; Name         Instructions Cycles
 17980                           ; simple_byte            7     4 (average)
 17981                           ;	Chosen strategy is simple_byte
 17982  0036E8  5009               	movf	??_updateServoStates,w,c
 17983  0036EA  0A1A               	xorlw	26	; case 26
 17984  0036EC  B4D8               	btfsc	status,2,c
 17985  0036EE  D7C5               	goto	i2l9322
 17986  0036F0  0AF6               	xorlw	246	; case 236
 17987  0036F2  A4D8               	btfss	status,2,c
 17988  0036F4  0012               	return	
 17989  0036F6  D79B               	goto	i2l9310
 17990  0036F8                     i2l9954:
 17991                           
 17992                           ; Switch size 1, requested type "space"
 17993                           ; Number of cases is 1, Range of values is 110 to 110
 17994                           ; switch strategies available:
 17995                           ; Name         Instructions Cycles
 17996                           ; simple_byte            4     3 (average)
 17997                           ;	Chosen strategy is simple_byte
 17998  0036F8  5009               	movf	??_updateServoStates,w,c
 17999  0036FA  0A6E               	xorlw	110	; case 110
 18000  0036FC  A4D8               	btfss	status,2,c
 18001  0036FE  0012               	return	
 18002  003700  D7A9               	goto	i2l9316
 18003  003702                     __end_of_updateServoStates:
 18004                           	opt stack 0
 18005                           pclatu	equ	0xFFB
 18006                           pclath	equ	0xFFA
 18007                           tblptru	equ	0xFF8
 18008                           tblptrh	equ	0xFF7
 18009                           tblptrl	equ	0xFF6
 18010                           tablat	equ	0xFF5
 18011                           prodh	equ	0xFF4
 18012                           prodl	equ	0xFF3
 18013                           intcon	equ	0xFF2
 18014                           intcon2	equ	0xFF1
 18015                           intcon3	equ	0xFF0
 18016                           indf0	equ	0xFEF
 18017                           postinc0	equ	0xFEE
 18018                           fsr0h	equ	0xFEA
 18019                           fsr0l	equ	0xFE9
 18020                           wreg	equ	0xFE8
 18021                           postdec1	equ	0xFE5
 18022                           fsr1h	equ	0xFE2
 18023                           fsr1l	equ	0xFE1
 18024                           indf2	equ	0xFDF
 18025                           postinc2	equ	0xFDE
 18026                           postdec2	equ	0xFDD
 18027                           fsr2h	equ	0xFDA
 18028                           fsr2l	equ	0xFD9
 18029                           status	equ	0xFD8
 18030                           
 18031 ;; *************** function i2_updateServoPosition *****************
 18032 ;; Defined at:
 18033 ;;		line 505 in file "sort.c"
 18034 ;; Parameters:    Size  Location     Type
 18035 ;;  time_us         2    0[COMRAM] int 
 18036 ;;  timer           2    2[COMRAM] int 
 18037 ;; Auto vars:     Size  Location     Type
 18038 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18039 ;; Return value:  Size  Location     Type
 18040 ;;                  1    wreg      void 
 18041 ;; Registers used:
 18042 ;;		wreg, status,2, status,0
 18043 ;; Tracked objects:
 18044 ;;		On entry : 0/0
 18045 ;;		On exit  : 0/0
 18046 ;;		Unchanged: 0/0
 18047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18048 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18050 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18051 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;Total ram usage:        8 bytes
 18053 ;; Hardware stack levels used:    1
 18054 ;; This function calls:
 18055 ;;		Nothing
 18056 ;; This function is called by:
 18057 ;;		_updateServoStates
 18058 ;; This function uses a non-reentrant model
 18059 ;;
 18060                           
 18061                           	psect	text61
 18062  00485C                     __ptext61:
 18063                           	opt stack 0
 18064  00485C                     i2_updateServoPosition:
 18065                           	opt stack 22
 18066                           
 18067                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 18068                           
 18069                           ;incstack = 0
 18070  00485C  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18071  004860  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18072  004864  1E05               	comf	??i2_updateServoPosition,f,c
 18073  004866  1E06               	comf	??i2_updateServoPosition+1,f,c
 18074  004868  4A05               	infsnz	??i2_updateServoPosition,f,c
 18075  00486A  2A06               	incf	??i2_updateServoPosition+1,f,c
 18076  00486C  0EFF               	movlw	255
 18077  00486E  2405               	addwf	??i2_updateServoPosition,w,c
 18078  004870  6E07               	movwf	i2updateServoPosition@my_time,c
 18079  004872  0EFF               	movlw	255
 18080  004874  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18081  004876  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18082                           
 18083                           ;sort.c: 507: switch(timer){
 18084  004878  D019               	goto	i2l8494
 18085  00487A                     i2l8488:
 18086                           
 18087                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 18088  00487A  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18089  00487C  0100               	movlb	0	; () banked
 18090  00487E  6FDA               	movwf	_servoTimes& (0+255),b
 18091  004880  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18092                           
 18093                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 18094  004882  5007               	movf	i2updateServoPosition@my_time,w,c
 18095  004884  0100               	movlb	0	; () banked
 18096  004886  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18097  004888  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18098                           
 18099                           ; BSR set to: 0
 18100                           ;sort.c: 512: pan_servo_state = time_us;
 18101  00488A  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18102  00488E  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18103  004892                     i2l868:
 18104                           
 18105                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 18106  004892  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18107  004894  0100               	movlb	0	; () banked
 18108  004896  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18109  004898  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18110                           
 18111                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 18112  00489A  5007               	movf	i2updateServoPosition@my_time,w,c
 18113  00489C  0100               	movlb	0	; () banked
 18114  00489E  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18115  0048A0  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;sort.c: 517: tilt_servo_state = time_us;
 18119  0048A2  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18120  0048A6  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18121                           
 18122                           ;sort.c: 518: }
 18123  0048AA  0012               	return	
 18124  0048AC                     i2l8494:
 18125  0048AC  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18126  0048B0  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18127                           
 18128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18129                           ; Switch size 1, requested type "space"
 18130                           ; Number of cases is 1, Range of values is 0 to 0
 18131                           ; switch strategies available:
 18132                           ; Name         Instructions Cycles
 18133                           ; simple_byte            4     3 (average)
 18134                           ;	Chosen strategy is simple_byte
 18135  0048B4  5006               	movf	??i2_updateServoPosition+1,w,c
 18136  0048B6  0A00               	xorlw	0	; case 0
 18137  0048B8  A4D8               	btfss	status,2,c
 18138  0048BA  0012               	return	
 18139                           
 18140                           ; Switch size 1, requested type "space"
 18141                           ; Number of cases is 2, Range of values is 1 to 3
 18142                           ; switch strategies available:
 18143                           ; Name         Instructions Cycles
 18144                           ; simple_byte            7     4 (average)
 18145                           ;	Chosen strategy is simple_byte
 18146  0048BC  5005               	movf	??i2_updateServoPosition,w,c
 18147  0048BE  0A01               	xorlw	1	; case 1
 18148  0048C0  B4D8               	btfsc	status,2,c
 18149  0048C2  D7DB               	goto	i2l8488
 18150  0048C4  0A02               	xorlw	2	; case 3
 18151  0048C6  A4D8               	btfss	status,2,c
 18152  0048C8  0012               	return	
 18153  0048CA  D7E3               	goto	i2l868
 18154  0048CC                     __end_ofi2_updateServoPosition:
 18155                           	opt stack 0
 18156                           pclatu	equ	0xFFB
 18157                           pclath	equ	0xFFA
 18158                           tblptru	equ	0xFF8
 18159                           tblptrh	equ	0xFF7
 18160                           tblptrl	equ	0xFF6
 18161                           tablat	equ	0xFF5
 18162                           prodh	equ	0xFF4
 18163                           prodl	equ	0xFF3
 18164                           intcon	equ	0xFF2
 18165                           intcon2	equ	0xFF1
 18166                           intcon3	equ	0xFF0
 18167                           indf0	equ	0xFEF
 18168                           postinc0	equ	0xFEE
 18169                           fsr0h	equ	0xFEA
 18170                           fsr0l	equ	0xFE9
 18171                           wreg	equ	0xFE8
 18172                           postdec1	equ	0xFE5
 18173                           fsr1h	equ	0xFE2
 18174                           fsr1l	equ	0xFE1
 18175                           indf2	equ	0xFDF
 18176                           postinc2	equ	0xFDE
 18177                           postdec2	equ	0xFDD
 18178                           fsr2h	equ	0xFDA
 18179                           fsr2l	equ	0xFD9
 18180                           status	equ	0xFD8
 18181                           
 18182 ;; *************** function _updateMenu *****************
 18183 ;; Defined at:
 18184 ;;		line 213 in file "UI.c"
 18185 ;; Parameters:    Size  Location     Type
 18186 ;;		None
 18187 ;; Auto vars:     Size  Location     Type
 18188 ;;		None
 18189 ;; Return value:  Size  Location     Type
 18190 ;;                  1    wreg      void 
 18191 ;; Registers used:
 18192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18193 ;; Tracked objects:
 18194 ;;		On entry : 0/0
 18195 ;;		On exit  : 0/0
 18196 ;;		Unchanged: 0/0
 18197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;Total ram usage:        2 bytes
 18203 ;; Hardware stack levels used:    1
 18204 ;; Hardware stack levels required when called:    5
 18205 ;; This function calls:
 18206 ;;		_change_state_to_logs_11
 18207 ;;		_change_state_to_logs_12
 18208 ;;		_change_state_to_logs_22
 18209 ;;		_change_state_to_logs_23
 18210 ;;		_change_state_to_logs_33
 18211 ;;		_change_state_to_logs_34
 18212 ;;		_change_state_to_menu_11
 18213 ;;		_change_state_to_menu_23
 18214 ;;		_dispLogs
 18215 ;;		_inputHandler
 18216 ;;		i2_change_state_to_menu_12
 18217 ;;		i2_change_state_to_menu_22
 18218 ;;		i2_change_state_to_menu_start
 18219 ;; This function is called by:
 18220 ;;		_handler
 18221 ;; This function uses a non-reentrant model
 18222 ;;
 18223                           
 18224                           	psect	text62
 18225  002700                     __ptext62:
 18226                           	opt stack 0
 18227  002700                     _updateMenu:
 18228                           	opt stack 18
 18229                           
 18230                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18231                           
 18232                           ;incstack = 0
 18233  002700  0E00               	movlw	0
 18234  002702  6E78               	movwf	_up+1,c
 18235  002704  0E00               	movlw	0
 18236  002706  6E77               	movwf	_up,c
 18237  002708  0E00               	movlw	0
 18238  00270A  6E5E               	movwf	_down+1,c
 18239  00270C  0E00               	movlw	0
 18240  00270E  6E5D               	movwf	_down,c
 18241  002710  0E00               	movlw	0
 18242  002712  6E60               	movwf	_enter+1,c
 18243  002714  0E00               	movlw	0
 18244  002716  6E5F               	movwf	_enter,c
 18245  002718  0E00               	movlw	0
 18246  00271A  6E5C               	movwf	_back+1,c
 18247  00271C  0E00               	movlw	0
 18248  00271E  6E5B               	movwf	_back,c
 18249                           
 18250                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18251  002720  9EF2               	bcf	intcon,7,c	;volatile
 18252                           
 18253                           ;UI.c: 217: if (inputHandler()
 18254                           ;UI.c: 220: ){
 18255  002722  ECA7  F019         	call	_inputHandler	;wreg free
 18256  002726  502A               	movf	?_inputHandler,w,c
 18257  002728  102B               	iorwf	?_inputHandler+1,w,c
 18258  00272A  A4D8               	btfss	status,2,c
 18259  00272C  D112               	goto	i2l9026
 18260  00272E  D146               	goto	i2l257
 18261  002730                     i2l8878:
 18262                           
 18263                           ;UI.c: 224: change_state_to_menu_11();
 18264  002730  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 18265                           
 18266                           ;UI.c: 225: break;
 18267  002734  D143               	goto	i2l257
 18268  002736                     i2l8880:
 18269                           
 18270                           ;UI.c: 228: if(up){
 18271  002736  5077               	movf	_up,w,c
 18272  002738  1078               	iorwf	_up+1,w,c
 18273  00273A  B4D8               	btfsc	status,2,c
 18274  00273C  D003               	goto	i2l8884
 18275                           
 18276                           ;UI.c: 229: change_state_to_menu_23();
 18277  00273E  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18278                           
 18279                           ;UI.c: 230: }
 18280  002742  D13C               	goto	i2l257
 18281  002744                     i2l8884:
 18282                           
 18283                           ;UI.c: 231: else if(down){
 18284  002744  505D               	movf	_down,w,c
 18285  002746  105E               	iorwf	_down+1,w,c
 18286  002748  B4D8               	btfsc	status,2,c
 18287  00274A  D003               	goto	i2l8888
 18288                           
 18289                           ;UI.c: 232: change_state_to_menu_12();
 18290  00274C  EC5F  F027         	call	i2_change_state_to_menu_12	;wreg free
 18291                           
 18292                           ;UI.c: 233: }
 18293  002750  D135               	goto	i2l257
 18294  002752                     i2l8888:
 18295                           
 18296                           ;UI.c: 234: else if(enter){
 18297  002752  505F               	movf	_enter,w,c
 18298  002754  1060               	iorwf	_enter+1,w,c
 18299  002756  B4D8               	btfsc	status,2,c
 18300  002758  D131               	goto	i2l257
 18301                           
 18302                           ;UI.c: 235: change_state_to_menu_start();
 18303  00275A  ECA2  F028         	call	i2_change_state_to_menu_start	;wreg free
 18304                           
 18305                           ;UI.c: 236: }
 18306                           ;UI.c: 237: break;
 18307  00275E  D12E               	goto	i2l257
 18308  002760                     i2l8892:
 18309                           
 18310                           ;UI.c: 240: if(up){
 18311  002760  5077               	movf	_up,w,c
 18312  002762  1078               	iorwf	_up+1,w,c
 18313  002764  B4D8               	btfsc	status,2,c
 18314  002766  D003               	goto	i2l8896
 18315                           
 18316                           ;UI.c: 241: change_state_to_menu_11();
 18317  002768  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 18318                           
 18319                           ;UI.c: 242: }
 18320  00276C  D127               	goto	i2l257
 18321  00276E                     i2l8896:
 18322                           
 18323                           ;UI.c: 243: else if(down){
 18324  00276E  505D               	movf	_down,w,c
 18325  002770  105E               	iorwf	_down+1,w,c
 18326  002772  B4D8               	btfsc	status,2,c
 18327  002774  D011               	goto	i2l8912
 18328                           
 18329                           ;UI.c: 244: change_state_to_menu_23();
 18330  002776  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18331                           
 18332                           ;UI.c: 245: }
 18333  00277A  D120               	goto	i2l257
 18334  00277C                     i2l8904:
 18335                           
 18336                           ;UI.c: 252: if(up){
 18337  00277C  5077               	movf	_up,w,c
 18338  00277E  1078               	iorwf	_up+1,w,c
 18339  002780  B4D8               	btfsc	status,2,c
 18340  002782  D003               	goto	i2l8908
 18341                           
 18342                           ;UI.c: 253: change_state_to_menu_11();
 18343  002784  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 18344                           
 18345                           ;UI.c: 254: }
 18346  002788  D119               	goto	i2l257
 18347  00278A                     i2l8908:
 18348                           
 18349                           ;UI.c: 255: else if(down){
 18350  00278A  505D               	movf	_down,w,c
 18351  00278C  105E               	iorwf	_down+1,w,c
 18352  00278E  B4D8               	btfsc	status,2,c
 18353  002790  D003               	goto	i2l8912
 18354                           
 18355                           ;UI.c: 256: change_state_to_menu_23();
 18356  002792  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18357                           
 18358                           ;UI.c: 257: }
 18359  002796  D112               	goto	i2l257
 18360  002798                     i2l8912:
 18361                           
 18362                           ;UI.c: 258: else if(enter){
 18363  002798  505F               	movf	_enter,w,c
 18364  00279A  1060               	iorwf	_enter+1,w,c
 18365  00279C  B4D8               	btfsc	status,2,c
 18366  00279E  D10E               	goto	i2l257
 18367                           
 18368                           ;UI.c: 259: machine_state = Sorting_state;
 18369  0027A0  0E01               	movlw	1
 18370  0027A2  0100               	movlb	0	; () banked
 18371  0027A4  6FFC               	movwf	_machine_state& (0+255),b
 18372                           
 18373                           ; BSR set to: 0
 18374                           ;UI.c: 260: }
 18375                           ;UI.c: 261: break;
 18376                           
 18377                           ; BSR set to: 0
 18378                           
 18379                           ; BSR set to: 0
 18380  0027A6  D10A               	goto	i2l257
 18381  0027A8                     i2l8916:
 18382                           
 18383                           ;UI.c: 264: if(up){
 18384  0027A8  5077               	movf	_up,w,c
 18385  0027AA  1078               	iorwf	_up+1,w,c
 18386  0027AC  B4D8               	btfsc	status,2,c
 18387  0027AE  D003               	goto	i2l8920
 18388                           
 18389                           ;UI.c: 265: change_state_to_menu_22();
 18390  0027B0  EC47  F027         	call	i2_change_state_to_menu_22	;wreg free
 18391                           
 18392                           ;UI.c: 266: }
 18393  0027B4  D103               	goto	i2l257
 18394  0027B6                     i2l8920:
 18395                           
 18396                           ;UI.c: 267: else if(down){
 18397  0027B6  505D               	movf	_down,w,c
 18398  0027B8  105E               	iorwf	_down+1,w,c
 18399  0027BA  B4D8               	btfsc	status,2,c
 18400  0027BC  D003               	goto	i2l8924
 18401                           
 18402                           ;UI.c: 268: change_state_to_menu_11();
 18403  0027BE  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 18404                           
 18405                           ;UI.c: 269: }
 18406  0027C2  D0FC               	goto	i2l257
 18407  0027C4                     i2l8924:
 18408                           
 18409                           ;UI.c: 270: else if(enter){
 18410  0027C4  505F               	movf	_enter,w,c
 18411  0027C6  1060               	iorwf	_enter+1,w,c
 18412  0027C8  B4D8               	btfsc	status,2,c
 18413  0027CA  D0F8               	goto	i2l257
 18414                           
 18415                           ;UI.c: 271: change_state_to_logs_11();
 18416  0027CC  EC07  F028         	call	_change_state_to_logs_11	;wreg free
 18417                           
 18418                           ;UI.c: 272: }
 18419                           ;UI.c: 273: break;
 18420  0027D0  D0F5               	goto	i2l257
 18421  0027D2                     i2l8928:
 18422                           
 18423                           ;UI.c: 276: if(up){
 18424  0027D2  5077               	movf	_up,w,c
 18425  0027D4  1078               	iorwf	_up+1,w,c
 18426  0027D6  B4D8               	btfsc	status,2,c
 18427  0027D8  D003               	goto	i2l8932
 18428                           
 18429                           ;UI.c: 277: change_state_to_logs_34();
 18430  0027DA  ECA7  F027         	call	_change_state_to_logs_34	;wreg free
 18431                           
 18432                           ;UI.c: 278: }
 18433  0027DE  D0EE               	goto	i2l257
 18434  0027E0                     i2l8932:
 18435                           
 18436                           ;UI.c: 279: else if(down){
 18437  0027E0  505D               	movf	_down,w,c
 18438  0027E2  105E               	iorwf	_down+1,w,c
 18439  0027E4  B4D8               	btfsc	status,2,c
 18440  0027E6  D003               	goto	i2l8936
 18441                           
 18442                           ;UI.c: 280: change_state_to_logs_12();
 18443  0027E8  ECEF  F027         	call	_change_state_to_logs_12	;wreg free
 18444                           
 18445                           ;UI.c: 281: }
 18446  0027EC  D0E7               	goto	i2l257
 18447  0027EE                     i2l8936:
 18448                           
 18449                           ;UI.c: 282: else if(enter){
 18450  0027EE  505F               	movf	_enter,w,c
 18451  0027F0  1060               	iorwf	_enter+1,w,c
 18452  0027F2  B4D8               	btfsc	status,2,c
 18453  0027F4  D007               	goto	i2l8940
 18454                           
 18455                           ;UI.c: 283: dispLogs(1);
 18456  0027F6  0E00               	movlw	0
 18457  0027F8  6E13               	movwf	dispLogs@myLog+1,c
 18458  0027FA  0E01               	movlw	1
 18459  0027FC  6E12               	movwf	dispLogs@myLog,c
 18460  0027FE  ECDC  F028         	call	_dispLogs	;wreg free
 18461                           
 18462                           ;UI.c: 284: }
 18463  002802  D0DC               	goto	i2l257
 18464  002804                     i2l8940:
 18465                           
 18466                           ;UI.c: 285: else if(back){
 18467  002804  505B               	movf	_back,w,c
 18468  002806  105C               	iorwf	_back+1,w,c
 18469  002808  B4D8               	btfsc	status,2,c
 18470  00280A  D0D8               	goto	i2l257
 18471                           
 18472                           ;UI.c: 286: change_state_to_menu_23();
 18473  00280C  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18474                           
 18475                           ;UI.c: 287: }
 18476                           ;UI.c: 288: break;
 18477  002810  D0D5               	goto	i2l257
 18478  002812                     i2l8944:
 18479                           
 18480                           ;UI.c: 291: if(up){
 18481  002812  5077               	movf	_up,w,c
 18482  002814  1078               	iorwf	_up+1,w,c
 18483  002816  B4D8               	btfsc	status,2,c
 18484  002818  D003               	goto	i2l8948
 18485                           
 18486                           ;UI.c: 292: change_state_to_logs_11();
 18487  00281A  EC07  F028         	call	_change_state_to_logs_11	;wreg free
 18488                           
 18489                           ;UI.c: 293: }
 18490  00281E  D0CE               	goto	i2l257
 18491  002820                     i2l8948:
 18492                           
 18493                           ;UI.c: 294: else if(down){
 18494  002820  505D               	movf	_down,w,c
 18495  002822  105E               	iorwf	_down+1,w,c
 18496  002824  B4D8               	btfsc	status,2,c
 18497  002826  D003               	goto	i2l8952
 18498                           
 18499                           ;UI.c: 295: change_state_to_logs_23();
 18500  002828  EC36  F028         	call	_change_state_to_logs_23	;wreg free
 18501                           
 18502                           ;UI.c: 296: }
 18503  00282C  D0C7               	goto	i2l257
 18504  00282E                     i2l8952:
 18505                           
 18506                           ;UI.c: 297: else if(enter){
 18507  00282E  505F               	movf	_enter,w,c
 18508  002830  1060               	iorwf	_enter+1,w,c
 18509  002832  B4D8               	btfsc	status,2,c
 18510  002834  D007               	goto	i2l8956
 18511                           
 18512                           ;UI.c: 298: dispLogs(2);
 18513  002836  0E00               	movlw	0
 18514  002838  6E13               	movwf	dispLogs@myLog+1,c
 18515  00283A  0E02               	movlw	2
 18516  00283C  6E12               	movwf	dispLogs@myLog,c
 18517  00283E  ECDC  F028         	call	_dispLogs	;wreg free
 18518                           
 18519                           ;UI.c: 299: }
 18520  002842  D0BC               	goto	i2l257
 18521  002844                     i2l8956:
 18522                           
 18523                           ;UI.c: 300: else if(back){
 18524  002844  505B               	movf	_back,w,c
 18525  002846  105C               	iorwf	_back+1,w,c
 18526  002848  B4D8               	btfsc	status,2,c
 18527  00284A  D0B8               	goto	i2l257
 18528                           
 18529                           ;UI.c: 301: change_state_to_menu_23();
 18530  00284C  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18531                           
 18532                           ;UI.c: 302: }
 18533                           ;UI.c: 303: break;
 18534  002850  D0B5               	goto	i2l257
 18535  002852                     i2l8960:
 18536                           
 18537                           ;UI.c: 306: if(up){
 18538  002852  5077               	movf	_up,w,c
 18539  002854  1078               	iorwf	_up+1,w,c
 18540  002856  B4D8               	btfsc	status,2,c
 18541  002858  D003               	goto	i2l8964
 18542                           
 18543                           ;UI.c: 307: change_state_to_logs_11();
 18544  00285A  EC07  F028         	call	_change_state_to_logs_11	;wreg free
 18545                           
 18546                           ;UI.c: 308: }
 18547  00285E  D0AE               	goto	i2l257
 18548  002860                     i2l8964:
 18549                           
 18550                           ;UI.c: 309: else if(down){
 18551  002860  505D               	movf	_down,w,c
 18552  002862  105E               	iorwf	_down+1,w,c
 18553  002864  B4D8               	btfsc	status,2,c
 18554  002866  D003               	goto	i2l8968
 18555                           
 18556                           ;UI.c: 310: change_state_to_logs_23();
 18557  002868  EC36  F028         	call	_change_state_to_logs_23	;wreg free
 18558                           
 18559                           ;UI.c: 311: }
 18560  00286C  D0A7               	goto	i2l257
 18561  00286E                     i2l8968:
 18562                           
 18563                           ;UI.c: 312: else if(enter){
 18564  00286E  505F               	movf	_enter,w,c
 18565  002870  1060               	iorwf	_enter+1,w,c
 18566  002872  B4D8               	btfsc	status,2,c
 18567  002874  D007               	goto	i2l8972
 18568                           
 18569                           ;UI.c: 313: dispLogs(2);
 18570  002876  0E00               	movlw	0
 18571  002878  6E13               	movwf	dispLogs@myLog+1,c
 18572  00287A  0E02               	movlw	2
 18573  00287C  6E12               	movwf	dispLogs@myLog,c
 18574  00287E  ECDC  F028         	call	_dispLogs	;wreg free
 18575                           
 18576                           ;UI.c: 314: }
 18577  002882  D09C               	goto	i2l257
 18578  002884                     i2l8972:
 18579                           
 18580                           ;UI.c: 315: else if(back){
 18581  002884  505B               	movf	_back,w,c
 18582  002886  105C               	iorwf	_back+1,w,c
 18583  002888  B4D8               	btfsc	status,2,c
 18584  00288A  D098               	goto	i2l257
 18585                           
 18586                           ;UI.c: 316: change_state_to_menu_23();
 18587  00288C  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18588                           
 18589                           ;UI.c: 317: }
 18590                           ;UI.c: 318: break;
 18591  002890  D095               	goto	i2l257
 18592  002892                     i2l8976:
 18593                           
 18594                           ;UI.c: 321: if(up){
 18595  002892  5077               	movf	_up,w,c
 18596  002894  1078               	iorwf	_up+1,w,c
 18597  002896  B4D8               	btfsc	status,2,c
 18598  002898  D003               	goto	i2l8980
 18599                           
 18600                           ;UI.c: 322: change_state_to_logs_22();
 18601  00289A  ECD7  F027         	call	_change_state_to_logs_22	;wreg free
 18602                           
 18603                           ;UI.c: 323: }
 18604  00289E  D08E               	goto	i2l257
 18605  0028A0                     i2l8980:
 18606                           
 18607                           ;UI.c: 324: else if(down){
 18608  0028A0  505D               	movf	_down,w,c
 18609  0028A2  105E               	iorwf	_down+1,w,c
 18610  0028A4  B4D8               	btfsc	status,2,c
 18611  0028A6  D003               	goto	i2l8984
 18612                           
 18613                           ;UI.c: 325: change_state_to_logs_34();
 18614  0028A8  ECA7  F027         	call	_change_state_to_logs_34	;wreg free
 18615                           
 18616                           ;UI.c: 326: }
 18617  0028AC  D087               	goto	i2l257
 18618  0028AE                     i2l8984:
 18619                           
 18620                           ;UI.c: 327: else if(enter){
 18621  0028AE  505F               	movf	_enter,w,c
 18622  0028B0  1060               	iorwf	_enter+1,w,c
 18623  0028B2  B4D8               	btfsc	status,2,c
 18624  0028B4  D007               	goto	i2l8988
 18625                           
 18626                           ;UI.c: 328: dispLogs(3);
 18627  0028B6  0E00               	movlw	0
 18628  0028B8  6E13               	movwf	dispLogs@myLog+1,c
 18629  0028BA  0E03               	movlw	3
 18630  0028BC  6E12               	movwf	dispLogs@myLog,c
 18631  0028BE  ECDC  F028         	call	_dispLogs	;wreg free
 18632                           
 18633                           ;UI.c: 329: }
 18634  0028C2  D07C               	goto	i2l257
 18635  0028C4                     i2l8988:
 18636                           
 18637                           ;UI.c: 330: else if(back){
 18638  0028C4  505B               	movf	_back,w,c
 18639  0028C6  105C               	iorwf	_back+1,w,c
 18640  0028C8  B4D8               	btfsc	status,2,c
 18641  0028CA  D078               	goto	i2l257
 18642                           
 18643                           ;UI.c: 331: change_state_to_menu_23();
 18644  0028CC  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18645                           
 18646                           ;UI.c: 332: }
 18647                           ;UI.c: 333: break;
 18648  0028D0  D075               	goto	i2l257
 18649  0028D2                     i2l8992:
 18650                           
 18651                           ;UI.c: 336: if(up){
 18652  0028D2  5077               	movf	_up,w,c
 18653  0028D4  1078               	iorwf	_up+1,w,c
 18654  0028D6  B4D8               	btfsc	status,2,c
 18655  0028D8  D003               	goto	i2l8996
 18656                           
 18657                           ;UI.c: 337: change_state_to_logs_22();
 18658  0028DA  ECD7  F027         	call	_change_state_to_logs_22	;wreg free
 18659                           
 18660                           ;UI.c: 338: }
 18661  0028DE  D06E               	goto	i2l257
 18662  0028E0                     i2l8996:
 18663                           
 18664                           ;UI.c: 339: else if(down){
 18665  0028E0  505D               	movf	_down,w,c
 18666  0028E2  105E               	iorwf	_down+1,w,c
 18667  0028E4  B4D8               	btfsc	status,2,c
 18668  0028E6  D003               	goto	i2l9000
 18669                           
 18670                           ;UI.c: 340: change_state_to_logs_34();
 18671  0028E8  ECA7  F027         	call	_change_state_to_logs_34	;wreg free
 18672                           
 18673                           ;UI.c: 341: }
 18674  0028EC  D067               	goto	i2l257
 18675  0028EE                     i2l9000:
 18676                           
 18677                           ;UI.c: 342: else if(enter){
 18678  0028EE  505F               	movf	_enter,w,c
 18679  0028F0  1060               	iorwf	_enter+1,w,c
 18680  0028F2  B4D8               	btfsc	status,2,c
 18681  0028F4  D007               	goto	i2l9004
 18682                           
 18683                           ;UI.c: 343: dispLogs(3);
 18684  0028F6  0E00               	movlw	0
 18685  0028F8  6E13               	movwf	dispLogs@myLog+1,c
 18686  0028FA  0E03               	movlw	3
 18687  0028FC  6E12               	movwf	dispLogs@myLog,c
 18688  0028FE  ECDC  F028         	call	_dispLogs	;wreg free
 18689                           
 18690                           ;UI.c: 344: }
 18691  002902  D05C               	goto	i2l257
 18692  002904                     i2l9004:
 18693                           
 18694                           ;UI.c: 345: else if(back){
 18695  002904  505B               	movf	_back,w,c
 18696  002906  105C               	iorwf	_back+1,w,c
 18697  002908  B4D8               	btfsc	status,2,c
 18698  00290A  D058               	goto	i2l257
 18699                           
 18700                           ;UI.c: 346: change_state_to_menu_23();
 18701  00290C  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18702                           
 18703                           ;UI.c: 347: }
 18704                           ;UI.c: 348: break;
 18705  002910  D055               	goto	i2l257
 18706  002912                     i2l9008:
 18707                           
 18708                           ;UI.c: 351: if(up){
 18709  002912  5077               	movf	_up,w,c
 18710  002914  1078               	iorwf	_up+1,w,c
 18711  002916  B4D8               	btfsc	status,2,c
 18712  002918  D003               	goto	i2l9012
 18713                           
 18714                           ;UI.c: 352: change_state_to_logs_33();
 18715  00291A  ECBF  F027         	call	_change_state_to_logs_33	;wreg free
 18716                           
 18717                           ;UI.c: 353: }
 18718  00291E  D04E               	goto	i2l257
 18719  002920                     i2l9012:
 18720                           
 18721                           ;UI.c: 354: else if(down){
 18722  002920  505D               	movf	_down,w,c
 18723  002922  105E               	iorwf	_down+1,w,c
 18724  002924  B4D8               	btfsc	status,2,c
 18725  002926  D003               	goto	i2l9016
 18726                           
 18727                           ;UI.c: 355: change_state_to_logs_11();
 18728  002928  EC07  F028         	call	_change_state_to_logs_11	;wreg free
 18729                           
 18730                           ;UI.c: 356: }
 18731  00292C  D047               	goto	i2l257
 18732  00292E                     i2l9016:
 18733                           
 18734                           ;UI.c: 357: else if(enter){
 18735  00292E  505F               	movf	_enter,w,c
 18736  002930  1060               	iorwf	_enter+1,w,c
 18737  002932  B4D8               	btfsc	status,2,c
 18738  002934  D007               	goto	i2l9020
 18739                           
 18740                           ;UI.c: 358: dispLogs(4);
 18741  002936  0E00               	movlw	0
 18742  002938  6E13               	movwf	dispLogs@myLog+1,c
 18743  00293A  0E04               	movlw	4
 18744  00293C  6E12               	movwf	dispLogs@myLog,c
 18745  00293E  ECDC  F028         	call	_dispLogs	;wreg free
 18746                           
 18747                           ;UI.c: 359: }
 18748  002942  D03C               	goto	i2l257
 18749  002944                     i2l9020:
 18750                           
 18751                           ;UI.c: 360: else if(back){
 18752  002944  505B               	movf	_back,w,c
 18753  002946  105C               	iorwf	_back+1,w,c
 18754  002948  B4D8               	btfsc	status,2,c
 18755  00294A  D038               	goto	i2l257
 18756                           
 18757                           ;UI.c: 361: change_state_to_menu_23();
 18758  00294C  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 18759                           
 18760                           ;UI.c: 367: }
 18761                           
 18762                           ;UI.c: 366: break;
 18763                           
 18764                           ;UI.c: 365: default:
 18765                           
 18766                           ;UI.c: 362: }
 18767                           ;UI.c: 363: break;
 18768  002950  D035               	goto	i2l257
 18769  002952                     i2l9026:
 18770  002952  C0EC  F043         	movff	_cur_state,??_updateMenu
 18771  002956  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18772                           
 18773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18774                           ; Switch size 1, requested type "space"
 18775                           ; Number of cases is 3, Range of values is 0 to 4
 18776                           ; switch strategies available:
 18777                           ; Name         Instructions Cycles
 18778                           ; simple_byte           10     6 (average)
 18779                           ;	Chosen strategy is simple_byte
 18780  00295A  5044               	movf	??_updateMenu+1,w,c
 18781  00295C  0A00               	xorlw	0	; case 0
 18782  00295E  B4D8               	btfsc	status,2,c
 18783  002960  D007               	goto	i2l9958
 18784  002962  0A03               	xorlw	3	; case 3
 18785  002964  B4D8               	btfsc	status,2,c
 18786  002966  D015               	goto	i2l9960
 18787  002968  0A07               	xorlw	7	; case 4
 18788  00296A  B4D8               	btfsc	status,2,c
 18789  00296C  D020               	goto	i2l9962
 18790  00296E  D026               	goto	i2l257
 18791  002970                     i2l9958:
 18792                           
 18793                           ; Switch size 1, requested type "space"
 18794                           ; Number of cases is 5, Range of values is 0 to 23
 18795                           ; switch strategies available:
 18796                           ; Name         Instructions Cycles
 18797                           ; simple_byte           16     9 (average)
 18798                           ;	Chosen strategy is simple_byte
 18799  002970  5043               	movf	??_updateMenu,w,c
 18800  002972  0A00               	xorlw	0	; case 0
 18801  002974  B4D8               	btfsc	status,2,c
 18802  002976  D6DC               	goto	i2l8878
 18803  002978  0A0B               	xorlw	11	; case 11
 18804  00297A  B4D8               	btfsc	status,2,c
 18805  00297C  D6DC               	goto	i2l8880
 18806  00297E  0A07               	xorlw	7	; case 12
 18807  002980  B4D8               	btfsc	status,2,c
 18808  002982  D6EE               	goto	i2l8892
 18809  002984  0A1A               	xorlw	26	; case 22
 18810  002986  B4D8               	btfsc	status,2,c
 18811  002988  D6F9               	goto	i2l8904
 18812  00298A  0A01               	xorlw	1	; case 23
 18813  00298C  B4D8               	btfsc	status,2,c
 18814  00298E  D70C               	goto	i2l8916
 18815  002990  D015               	goto	i2l257
 18816  002992                     i2l9960:
 18817                           
 18818                           ; Switch size 1, requested type "space"
 18819                           ; Number of cases is 4, Range of values is 243 to 255
 18820                           ; switch strategies available:
 18821                           ; Name         Instructions Cycles
 18822                           ; simple_byte           13     7 (average)
 18823                           ;	Chosen strategy is simple_byte
 18824  002992  5043               	movf	??_updateMenu,w,c
 18825  002994  0AF3               	xorlw	243	; case 243
 18826  002996  B4D8               	btfsc	status,2,c
 18827  002998  D71C               	goto	i2l8928
 18828  00299A  0A07               	xorlw	7	; case 244
 18829  00299C  B4D8               	btfsc	status,2,c
 18830  00299E  D739               	goto	i2l8944
 18831  0029A0  0A0A               	xorlw	10	; case 254
 18832  0029A2  B4D8               	btfsc	status,2,c
 18833  0029A4  D756               	goto	i2l8960
 18834  0029A6  0A01               	xorlw	1	; case 255
 18835  0029A8  B4D8               	btfsc	status,2,c
 18836  0029AA  D773               	goto	i2l8976
 18837  0029AC  D007               	goto	i2l257
 18838  0029AE                     i2l9962:
 18839                           
 18840                           ; Switch size 1, requested type "space"
 18841                           ; Number of cases is 2, Range of values is 9 to 10
 18842                           ; switch strategies available:
 18843                           ; Name         Instructions Cycles
 18844                           ; simple_byte            7     4 (average)
 18845                           ;	Chosen strategy is simple_byte
 18846  0029AE  5043               	movf	??_updateMenu,w,c
 18847  0029B0  0A09               	xorlw	9	; case 9
 18848  0029B2  B4D8               	btfsc	status,2,c
 18849  0029B4  D78E               	goto	i2l8992
 18850  0029B6  0A03               	xorlw	3	; case 10
 18851  0029B8  B4D8               	btfsc	status,2,c
 18852  0029BA  D7AB               	goto	i2l9008
 18853  0029BC                     i2l257:
 18854                           
 18855                           ;UI.c: 368: }
 18856                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18857  0029BC  8EF2               	bsf	intcon,7,c	;volatile
 18858  0029BE  0012               	return		;funcret
 18859  0029C0                     __end_of_updateMenu:
 18860                           	opt stack 0
 18861                           pclatu	equ	0xFFB
 18862                           pclath	equ	0xFFA
 18863                           tblptru	equ	0xFF8
 18864                           tblptrh	equ	0xFF7
 18865                           tblptrl	equ	0xFF6
 18866                           tablat	equ	0xFF5
 18867                           prodh	equ	0xFF4
 18868                           prodl	equ	0xFF3
 18869                           intcon	equ	0xFF2
 18870                           intcon2	equ	0xFF1
 18871                           intcon3	equ	0xFF0
 18872                           indf0	equ	0xFEF
 18873                           postinc0	equ	0xFEE
 18874                           fsr0h	equ	0xFEA
 18875                           fsr0l	equ	0xFE9
 18876                           wreg	equ	0xFE8
 18877                           postdec1	equ	0xFE5
 18878                           fsr1h	equ	0xFE2
 18879                           fsr1l	equ	0xFE1
 18880                           indf2	equ	0xFDF
 18881                           postinc2	equ	0xFDE
 18882                           postdec2	equ	0xFDD
 18883                           fsr2h	equ	0xFDA
 18884                           fsr2l	equ	0xFD9
 18885                           status	equ	0xFD8
 18886                           
 18887 ;; *************** function i2_change_state_to_menu_start *****************
 18888 ;; Defined at:
 18889 ;;		line 474 in file "UI.c"
 18890 ;; Parameters:    Size  Location     Type
 18891 ;;		None
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;		None
 18894 ;; Return value:  Size  Location     Type
 18895 ;;                  1    wreg      void 
 18896 ;; Registers used:
 18897 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18907 ;;Total ram usage:        0 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    4
 18910 ;; This function calls:
 18911 ;;		i2_lcdInst
 18912 ;;		i2_printRTC
 18913 ;;		i2_printf
 18914 ;; This function is called by:
 18915 ;;		_updateMenu
 18916 ;; This function uses a non-reentrant model
 18917 ;;
 18918                           
 18919                           	psect	text63
 18920  005144                     __ptext63:
 18921                           	opt stack 0
 18922  005144                     i2_change_state_to_menu_start:
 18923                           	opt stack 18
 18924                           
 18925                           ;UI.c: 475: cur_state = 0;
 18926                           
 18927                           ;incstack = 0
 18928  005144  0E00               	movlw	0
 18929  005146  0100               	movlb	0	; () banked
 18930  005148  6FED               	movwf	(_cur_state+1)& (0+255),b
 18931  00514A  0E00               	movlw	0
 18932  00514C  6FEC               	movwf	_cur_state& (0+255),b
 18933                           
 18934                           ; BSR set to: 0
 18935                           ;UI.c: 477: lcdInst(0b10000000);;
 18936  00514E  0E80               	movlw	128
 18937  005150  EC7A  F029         	call	i2_lcdInst
 18938                           
 18939                           ;UI.c: 478: printRTC();
 18940  005154  EC8C  F018         	call	i2_printRTC	;wreg free
 18941                           
 18942                           ;UI.c: 479: lcdInst(0b11000000);;
 18943  005158  0EC0               	movlw	192
 18944  00515A  EC7A  F029         	call	i2_lcdInst
 18945                           
 18946                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18947  00515E  0EF7               	movlw	low STR_30
 18948  005160  6E0D               	movwf	i2printf@f,c
 18949  005162  0EFD               	movlw	high STR_30
 18950  005164  6E0E               	movwf	i2printf@f+1,c
 18951  005166  ECE5  F00E         	call	i2_printf	;wreg free
 18952  00516A  0012               	return		;funcret
 18953  00516C                     __end_ofi2_change_state_to_menu_start:
 18954                           	opt stack 0
 18955                           pclatu	equ	0xFFB
 18956                           pclath	equ	0xFFA
 18957                           tblptru	equ	0xFF8
 18958                           tblptrh	equ	0xFF7
 18959                           tblptrl	equ	0xFF6
 18960                           tablat	equ	0xFF5
 18961                           prodh	equ	0xFF4
 18962                           prodl	equ	0xFF3
 18963                           intcon	equ	0xFF2
 18964                           intcon2	equ	0xFF1
 18965                           intcon3	equ	0xFF0
 18966                           indf0	equ	0xFEF
 18967                           postinc0	equ	0xFEE
 18968                           fsr0h	equ	0xFEA
 18969                           fsr0l	equ	0xFE9
 18970                           wreg	equ	0xFE8
 18971                           postdec1	equ	0xFE5
 18972                           fsr1h	equ	0xFE2
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           fsr2h	equ	0xFDA
 18978                           fsr2l	equ	0xFD9
 18979                           status	equ	0xFD8
 18980                           
 18981 ;; *************** function i2_printRTC *****************
 18982 ;; Defined at:
 18983 ;;		line 63 in file "RTC.c"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;		None
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;  printRTC       14   44[COMRAM] int [7]
 18988 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18989 ;;  printRTC        2   64[COMRAM] int 
 18990 ;;  printRTC        2   58[COMRAM] int 
 18991 ;; Return value:  Size  Location     Type
 18992 ;;                  1    wreg      void 
 18993 ;; Registers used:
 18994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : 0/0
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;Total ram usage:       25 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:    3
 19007 ;; This function calls:
 19008 ;;		i2_getRTC
 19009 ;;		i2_lcdInst
 19010 ;;		i2_printf
 19011 ;;		i2_strcpy
 19012 ;; This function is called by:
 19013 ;;		i2_change_state_to_menu_start
 19014 ;; This function uses a non-reentrant model
 19015 ;;
 19016                           
 19017                           	psect	text64
 19018  003118                     __ptext64:
 19019                           	opt stack 0
 19020  003118                     i2_printRTC:
 19021                           	opt stack 18
 19022                           
 19023                           ;RTC.c: 64: getRTC();
 19024                           
 19025                           ;incstack = 0
 19026  003118  ECF5  F023         	call	i2_getRTC	;wreg free
 19027                           
 19028                           ;RTC.c: 65: char month[] = "MMM";
 19029  00311C  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 19030  003120  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 19031  003124  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 19032  003128  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 19033                           
 19034                           ;RTC.c: 66: int INT_time[7];
 19035                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19036  00312C  0E00               	movlw	0
 19037  00312E  6E42               	movwf	i2printRTC@i+1,c
 19038  003130  0E00               	movlw	0
 19039  003132  6E41               	movwf	i2printRTC@i,c
 19040  003134  BE42               	btfsc	i2printRTC@i+1,7,c
 19041  003136  D006               	goto	i2l6968
 19042  003138  5042               	movf	i2printRTC@i+1,w,c
 19043  00313A  E135               	bnz	i2l606
 19044  00313C  0E07               	movlw	7
 19045  00313E  5C41               	subwf	i2printRTC@i,w,c
 19046  003140  B0D8               	btfsc	status,0,c
 19047  003142  D031               	goto	i2l606
 19048  003144                     i2l6968:
 19049                           
 19050                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19051  003144  0E1C               	movlw	low _time
 19052  003146  2441               	addwf	i2printRTC@i,w,c
 19053  003148  6ED9               	movwf	fsr2l,c
 19054  00314A  0E01               	movlw	high _time
 19055  00314C  2042               	addwfc	i2printRTC@i+1,w,c
 19056  00314E  6EDA               	movwf	fsr2h,c
 19057  003150  50DF               	movf	indf2,w,c
 19058  003152  6E2A               	movwf	??i2_printRTC& (0+255),c
 19059  003154  3A2A               	swapf	??i2_printRTC,f,c
 19060  003156  0E0F               	movlw	15
 19061  003158  162A               	andwf	??i2_printRTC,f,c
 19062  00315A  0E0F               	movlw	15
 19063  00315C  162A               	andwf	??i2_printRTC,f,c
 19064  00315E  502A               	movf	??i2_printRTC,w,c
 19065  003160  0D0A               	mullw	10
 19066  003162  0E1C               	movlw	low _time
 19067  003164  2441               	addwf	i2printRTC@i,w,c
 19068  003166  6ED9               	movwf	fsr2l,c
 19069  003168  0E01               	movlw	high _time
 19070  00316A  2042               	addwfc	i2printRTC@i+1,w,c
 19071  00316C  6EDA               	movwf	fsr2h,c
 19072  00316E  50DF               	movf	indf2,w,c
 19073  003170  0B0F               	andlw	15
 19074  003172  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19075  003174  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19076  003176  50F3               	movf	prodl,w,c
 19077  003178  262B               	addwf	??i2_printRTC+1,f,c
 19078  00317A  50F4               	movf	prodh,w,c
 19079  00317C  222C               	addwfc	??i2_printRTC+2,f,c
 19080  00317E  90D8               	bcf	status,0,c
 19081  003180  3441               	rlcf	i2printRTC@i,w,c
 19082  003182  6ED9               	movwf	fsr2l,c
 19083  003184  3442               	rlcf	i2printRTC@i+1,w,c
 19084  003186  6EDA               	movwf	fsr2h,c
 19085  003188  0E2D               	movlw	low i2printRTC@INT_time
 19086  00318A  26D9               	addwf	fsr2l,f,c
 19087  00318C  0E00               	movlw	high i2printRTC@INT_time
 19088  00318E  22DA               	addwfc	fsr2h,f,c
 19089  003190  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19090  003194  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19091  003198  4A41               	infsnz	i2printRTC@i,f,c
 19092  00319A  2A42               	incf	i2printRTC@i+1,f,c
 19093  00319C  BE42               	btfsc	i2printRTC@i+1,7,c
 19094  00319E  D7D2               	goto	i2l6968
 19095  0031A0  5042               	movf	i2printRTC@i+1,w,c
 19096  0031A2  E101               	bnz	i2u543_40
 19097  0031A4  D7CB               	goto	L12
 19098  0031A6                     i2u543_40:
 19099  0031A6                     i2l606:
 19100                           
 19101                           ;RTC.c: 69: }
 19102                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19103  0031A6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19104  0031AA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19105                           
 19106                           ;RTC.c: 71: switch(RTC_month){
 19107  0031AE  D084               	goto	i2l7000
 19108  0031B0                     i2l6974:
 19109                           
 19110                           ;RTC.c: 73: strcpy(month, "JAN");
 19111  0031B0  0E3D               	movlw	low i2printRTC@month
 19112  0031B2  6E01               	movwf	i2strcpy@to,c
 19113  0031B4  0E00               	movlw	high i2printRTC@month
 19114  0031B6  6E02               	movwf	i2strcpy@to+1,c
 19115  0031B8  0EDB               	movlw	low STR_8
 19116  0031BA  6E03               	movwf	i2strcpy@from,c
 19117  0031BC  0EFF               	movlw	high STR_8
 19118  0031BE  6E04               	movwf	i2strcpy@from+1,c
 19119  0031C0  EC16  F027         	call	i2_strcpy	;wreg free
 19120                           
 19121                           ;RTC.c: 74: break;
 19122  0031C4  D0A6               	goto	i2l7002
 19123  0031C6                     i2l6976:
 19124                           
 19125                           ;RTC.c: 76: strcpy(month, "FEB");
 19126  0031C6  0E3D               	movlw	low i2printRTC@month
 19127  0031C8  6E01               	movwf	i2strcpy@to,c
 19128  0031CA  0E00               	movlw	high i2printRTC@month
 19129  0031CC  6E02               	movwf	i2strcpy@to+1,c
 19130  0031CE  0ECB               	movlw	low STR_9
 19131  0031D0  6E03               	movwf	i2strcpy@from,c
 19132  0031D2  0EFF               	movlw	high STR_9
 19133  0031D4  6E04               	movwf	i2strcpy@from+1,c
 19134  0031D6  EC16  F027         	call	i2_strcpy	;wreg free
 19135                           
 19136                           ;RTC.c: 77: break;
 19137  0031DA  D09B               	goto	i2l7002
 19138  0031DC                     i2l6978:
 19139                           
 19140                           ;RTC.c: 79: strcpy(month, "MAR");
 19141  0031DC  0E3D               	movlw	low i2printRTC@month
 19142  0031DE  6E01               	movwf	i2strcpy@to,c
 19143  0031E0  0E00               	movlw	high i2printRTC@month
 19144  0031E2  6E02               	movwf	i2strcpy@to+1,c
 19145  0031E4  0EE7               	movlw	low STR_10
 19146  0031E6  6E03               	movwf	i2strcpy@from,c
 19147  0031E8  0EFF               	movlw	high STR_10
 19148  0031EA  6E04               	movwf	i2strcpy@from+1,c
 19149  0031EC  EC16  F027         	call	i2_strcpy	;wreg free
 19150                           
 19151                           ;RTC.c: 80: break;
 19152  0031F0  D090               	goto	i2l7002
 19153  0031F2                     i2l6980:
 19154                           
 19155                           ;RTC.c: 82: strcpy(month, "APR");
 19156  0031F2  0E3D               	movlw	low i2printRTC@month
 19157  0031F4  6E01               	movwf	i2strcpy@to,c
 19158  0031F6  0E00               	movlw	high i2printRTC@month
 19159  0031F8  6E02               	movwf	i2strcpy@to+1,c
 19160  0031FA  0EEB               	movlw	low STR_11
 19161  0031FC  6E03               	movwf	i2strcpy@from,c
 19162  0031FE  0EFF               	movlw	high STR_11
 19163  003200  6E04               	movwf	i2strcpy@from+1,c
 19164  003202  EC16  F027         	call	i2_strcpy	;wreg free
 19165                           
 19166                           ;RTC.c: 83: break;
 19167  003206  D085               	goto	i2l7002
 19168  003208                     i2l6982:
 19169                           
 19170                           ;RTC.c: 85: strcpy(month, "MAY");
 19171  003208  0E3D               	movlw	low i2printRTC@month
 19172  00320A  6E01               	movwf	i2strcpy@to,c
 19173  00320C  0E00               	movlw	high i2printRTC@month
 19174  00320E  6E02               	movwf	i2strcpy@to+1,c
 19175  003210  0EFB               	movlw	low STR_12
 19176  003212  6E03               	movwf	i2strcpy@from,c
 19177  003214  0EFF               	movlw	high STR_12
 19178  003216  6E04               	movwf	i2strcpy@from+1,c
 19179  003218  EC16  F027         	call	i2_strcpy	;wreg free
 19180                           
 19181                           ;RTC.c: 86: break;
 19182  00321C  D07A               	goto	i2l7002
 19183  00321E                     i2l6984:
 19184                           
 19185                           ;RTC.c: 88: strcpy(month, "JUN");
 19186  00321E  0E3D               	movlw	low i2printRTC@month
 19187  003220  6E01               	movwf	i2strcpy@to,c
 19188  003222  0E00               	movlw	high i2printRTC@month
 19189  003224  6E02               	movwf	i2strcpy@to+1,c
 19190  003226  0EDF               	movlw	low STR_13
 19191  003228  6E03               	movwf	i2strcpy@from,c
 19192  00322A  0EFF               	movlw	high STR_13
 19193  00322C  6E04               	movwf	i2strcpy@from+1,c
 19194  00322E  EC16  F027         	call	i2_strcpy	;wreg free
 19195                           
 19196                           ;RTC.c: 89: break;
 19197  003232  D06F               	goto	i2l7002
 19198  003234                     i2l6986:
 19199                           
 19200                           ;RTC.c: 91: strcpy(month, "JUL");
 19201  003234  0E3D               	movlw	low i2printRTC@month
 19202  003236  6E01               	movwf	i2strcpy@to,c
 19203  003238  0E00               	movlw	high i2printRTC@month
 19204  00323A  6E02               	movwf	i2strcpy@to+1,c
 19205  00323C  0ED7               	movlw	low STR_14
 19206  00323E  6E03               	movwf	i2strcpy@from,c
 19207  003240  0EFF               	movlw	high STR_14
 19208  003242  6E04               	movwf	i2strcpy@from+1,c
 19209  003244  EC16  F027         	call	i2_strcpy	;wreg free
 19210                           
 19211                           ;RTC.c: 92: break;
 19212  003248  D064               	goto	i2l7002
 19213  00324A                     i2l6988:
 19214                           
 19215                           ;RTC.c: 94: strcpy(month, "AUG");
 19216  00324A  0E3D               	movlw	low i2printRTC@month
 19217  00324C  6E01               	movwf	i2strcpy@to,c
 19218  00324E  0E00               	movlw	high i2printRTC@month
 19219  003250  6E02               	movwf	i2strcpy@to+1,c
 19220  003252  0ED3               	movlw	low STR_15
 19221  003254  6E03               	movwf	i2strcpy@from,c
 19222  003256  0EFF               	movlw	high STR_15
 19223  003258  6E04               	movwf	i2strcpy@from+1,c
 19224  00325A  EC16  F027         	call	i2_strcpy	;wreg free
 19225                           
 19226                           ;RTC.c: 95: break;
 19227  00325E  D059               	goto	i2l7002
 19228  003260                     i2l6990:
 19229                           
 19230                           ;RTC.c: 97: strcpy(month, "SEP");
 19231  003260  0E3D               	movlw	low i2printRTC@month
 19232  003262  6E01               	movwf	i2strcpy@to,c
 19233  003264  0E00               	movlw	high i2printRTC@month
 19234  003266  6E02               	movwf	i2strcpy@to+1,c
 19235  003268  0EE3               	movlw	low STR_16
 19236  00326A  6E03               	movwf	i2strcpy@from,c
 19237  00326C  0EFF               	movlw	high STR_16
 19238  00326E  6E04               	movwf	i2strcpy@from+1,c
 19239  003270  EC16  F027         	call	i2_strcpy	;wreg free
 19240                           
 19241                           ;RTC.c: 98: break;
 19242  003274  D04E               	goto	i2l7002
 19243  003276                     i2l6992:
 19244                           
 19245                           ;RTC.c: 100: strcpy(month, "OCT");
 19246  003276  0E3D               	movlw	low i2printRTC@month
 19247  003278  6E01               	movwf	i2strcpy@to,c
 19248  00327A  0E00               	movlw	high i2printRTC@month
 19249  00327C  6E02               	movwf	i2strcpy@to+1,c
 19250  00327E  0EF3               	movlw	low STR_17
 19251  003280  6E03               	movwf	i2strcpy@from,c
 19252  003282  0EFF               	movlw	high STR_17
 19253  003284  6E04               	movwf	i2strcpy@from+1,c
 19254  003286  EC16  F027         	call	i2_strcpy	;wreg free
 19255                           
 19256                           ;RTC.c: 101: break;
 19257  00328A  D043               	goto	i2l7002
 19258  00328C                     i2l6994:
 19259                           
 19260                           ;RTC.c: 103: strcpy(month, "NOV");
 19261  00328C  0E3D               	movlw	low i2printRTC@month
 19262  00328E  6E01               	movwf	i2strcpy@to,c
 19263  003290  0E00               	movlw	high i2printRTC@month
 19264  003292  6E02               	movwf	i2strcpy@to+1,c
 19265  003294  0EF7               	movlw	low STR_18
 19266  003296  6E03               	movwf	i2strcpy@from,c
 19267  003298  0EFF               	movlw	high STR_18
 19268  00329A  6E04               	movwf	i2strcpy@from+1,c
 19269  00329C  EC16  F027         	call	i2_strcpy	;wreg free
 19270                           
 19271                           ;RTC.c: 104: break;
 19272  0032A0  D038               	goto	i2l7002
 19273  0032A2                     i2l6996:
 19274                           
 19275                           ;RTC.c: 106: strcpy(month, "DEC");
 19276  0032A2  0E3D               	movlw	low i2printRTC@month
 19277  0032A4  6E01               	movwf	i2strcpy@to,c
 19278  0032A6  0E00               	movlw	high i2printRTC@month
 19279  0032A8  6E02               	movwf	i2strcpy@to+1,c
 19280  0032AA  0ECF               	movlw	low STR_19
 19281  0032AC  6E03               	movwf	i2strcpy@from,c
 19282  0032AE  0EFF               	movlw	high STR_19
 19283  0032B0  6E04               	movwf	i2strcpy@from+1,c
 19284  0032B2  EC16  F027         	call	i2_strcpy	;wreg free
 19285                           
 19286                           ;RTC.c: 108: }
 19287                           
 19288                           ;RTC.c: 107: break;
 19289  0032B6  D02D               	goto	i2l7002
 19290  0032B8                     i2l7000:
 19291  0032B8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19292  0032BC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19293                           
 19294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19295                           ; Switch size 1, requested type "space"
 19296                           ; Number of cases is 1, Range of values is 0 to 0
 19297                           ; switch strategies available:
 19298                           ; Name         Instructions Cycles
 19299                           ; simple_byte            4     3 (average)
 19300                           ;	Chosen strategy is simple_byte
 19301  0032C0  502B               	movf	??i2_printRTC+1,w,c
 19302  0032C2  0A00               	xorlw	0	; case 0
 19303  0032C4  A4D8               	btfss	status,2,c
 19304  0032C6  D025               	goto	i2l7002
 19305                           
 19306                           ; Switch size 1, requested type "space"
 19307                           ; Number of cases is 12, Range of values is 1 to 12
 19308                           ; switch strategies available:
 19309                           ; Name         Instructions Cycles
 19310                           ; simple_byte           37    19 (average)
 19311                           ;	Chosen strategy is simple_byte
 19312  0032C8  502A               	movf	??i2_printRTC,w,c
 19313  0032CA  0A01               	xorlw	1	; case 1
 19314  0032CC  B4D8               	btfsc	status,2,c
 19315  0032CE  D770               	goto	i2l6974
 19316  0032D0  0A03               	xorlw	3	; case 2
 19317  0032D2  B4D8               	btfsc	status,2,c
 19318  0032D4  D778               	goto	i2l6976
 19319  0032D6  0A01               	xorlw	1	; case 3
 19320  0032D8  B4D8               	btfsc	status,2,c
 19321  0032DA  D780               	goto	i2l6978
 19322  0032DC  0A07               	xorlw	7	; case 4
 19323  0032DE  B4D8               	btfsc	status,2,c
 19324  0032E0  D788               	goto	i2l6980
 19325  0032E2  0A01               	xorlw	1	; case 5
 19326  0032E4  B4D8               	btfsc	status,2,c
 19327  0032E6  D790               	goto	i2l6982
 19328  0032E8  0A03               	xorlw	3	; case 6
 19329  0032EA  B4D8               	btfsc	status,2,c
 19330  0032EC  D798               	goto	i2l6984
 19331  0032EE  0A01               	xorlw	1	; case 7
 19332  0032F0  B4D8               	btfsc	status,2,c
 19333  0032F2  D7A0               	goto	i2l6986
 19334  0032F4  0A0F               	xorlw	15	; case 8
 19335  0032F6  B4D8               	btfsc	status,2,c
 19336  0032F8  D7A8               	goto	i2l6988
 19337  0032FA  0A01               	xorlw	1	; case 9
 19338  0032FC  B4D8               	btfsc	status,2,c
 19339  0032FE  D7B0               	goto	i2l6990
 19340  003300  0A03               	xorlw	3	; case 10
 19341  003302  B4D8               	btfsc	status,2,c
 19342  003304  D7B8               	goto	i2l6992
 19343  003306  0A01               	xorlw	1	; case 11
 19344  003308  B4D8               	btfsc	status,2,c
 19345  00330A  D7C0               	goto	i2l6994
 19346  00330C  0A07               	xorlw	7	; case 12
 19347  00330E  B4D8               	btfsc	status,2,c
 19348  003310  D7C8               	goto	i2l6996
 19349  003312                     i2l7002:
 19350                           
 19351                           ;RTC.c: 109: lcdInst(0b10000000);;
 19352  003312  0E80               	movlw	128
 19353  003314  EC7A  F029         	call	i2_lcdInst
 19354                           
 19355                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19356  003318  0E0A               	movlw	low STR_21
 19357  00331A  6E0D               	movwf	i2printf@f,c
 19358  00331C  0EFB               	movlw	high STR_21
 19359  00331E  6E0E               	movwf	i2printf@f+1,c
 19360  003320  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19361  003324  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19362  003328  0E3D               	movlw	low i2printRTC@month
 19363  00332A  6E11               	movwf	?i2_printf+4,c
 19364  00332C  0E00               	movlw	high i2printRTC@month
 19365  00332E  6E12               	movwf	?i2_printf+5,c
 19366  003330  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19367  003334  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19368  003338  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19369  00333C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19370  003340  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19371  003344  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19372  003348  ECE5  F00E         	call	i2_printf	;wreg free
 19373  00334C  0012               	return		;funcret
 19374  00334E                     __end_ofi2_printRTC:
 19375                           	opt stack 0
 19376                           pclatu	equ	0xFFB
 19377                           pclath	equ	0xFFA
 19378                           tblptru	equ	0xFF8
 19379                           tblptrh	equ	0xFF7
 19380                           tblptrl	equ	0xFF6
 19381                           tablat	equ	0xFF5
 19382                           prodh	equ	0xFF4
 19383                           prodl	equ	0xFF3
 19384                           intcon	equ	0xFF2
 19385                           intcon2	equ	0xFF1
 19386                           intcon3	equ	0xFF0
 19387                           indf0	equ	0xFEF
 19388                           postinc0	equ	0xFEE
 19389                           fsr0h	equ	0xFEA
 19390                           fsr0l	equ	0xFE9
 19391                           wreg	equ	0xFE8
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function i2_strcpy *****************
 19403 ;; Defined at:
 19404 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;  to              2    0[COMRAM] PTR unsigned char 
 19407 ;;		 -> printRTC@month(4), UI@month(4), 
 19408 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19409 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19410 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19411 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19412 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19413 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19414 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19415 ;;		 -> STR_8(4), 
 19416 ;; Auto vars:     Size  Location     Type
 19417 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19418 ;;		 -> printRTC@month(4), UI@month(4), 
 19419 ;; Return value:  Size  Location     Type
 19420 ;;                  2    0[COMRAM] PTR unsigned char 
 19421 ;; Registers used:
 19422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19423 ;; Tracked objects:
 19424 ;;		On entry : 0/0
 19425 ;;		On exit  : 0/0
 19426 ;;		Unchanged: 0/0
 19427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;Total ram usage:        6 bytes
 19433 ;; Hardware stack levels used:    1
 19434 ;; This function calls:
 19435 ;;		Nothing
 19436 ;; This function is called by:
 19437 ;;		i2_printRTC
 19438 ;; This function uses a non-reentrant model
 19439 ;;
 19440                           
 19441                           	psect	text65
 19442  004E2C                     __ptext65:
 19443                           	opt stack 0
 19444  004E2C                     i2_strcpy:
 19445                           	opt stack 20
 19446                           
 19447                           ;incstack = 0
 19448  004E2C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19449  004E30  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19450  004E34  D004               	goto	i2l6622
 19451  004E36                     i2l6620:
 19452  004E36  4A05               	infsnz	i2strcpy@cp,f,c
 19453  004E38  2A06               	incf	i2strcpy@cp+1,f,c
 19454  004E3A  4A03               	infsnz	i2strcpy@from,f,c
 19455  004E3C  2A04               	incf	i2strcpy@from+1,f,c
 19456  004E3E                     i2l6622:
 19457  004E3E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19458  004E42  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19459  004E46                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19460  004E46  6AF8               	clrf	tblptru,c
 19461  004E48                     	endif
 19462  004E48                     	if	0	;tblptru may be non-zero
 19463  004E48                     	endif
 19464  004E48  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19465  004E4C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19466  004E50  0008               	tblrd		*
 19467  004E52  CFF5 FFDF          	movff	tablat,indf2
 19468  004E56  50DF               	movf	indf2,w,c
 19469  004E58  B4D8               	btfsc	status,2,c
 19470  004E5A  0012               	return	
 19471  004E5C  D7EC               	goto	i2l6620
 19472  004E5E                     __end_ofi2_strcpy:
 19473                           	opt stack 0
 19474                           pclatu	equ	0xFFB
 19475                           pclath	equ	0xFFA
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           intcon2	equ	0xFF1
 19484                           intcon3	equ	0xFF0
 19485                           indf0	equ	0xFEF
 19486                           postinc0	equ	0xFEE
 19487                           fsr0h	equ	0xFEA
 19488                           fsr0l	equ	0xFE9
 19489                           wreg	equ	0xFE8
 19490                           postdec1	equ	0xFE5
 19491                           fsr1h	equ	0xFE2
 19492                           fsr1l	equ	0xFE1
 19493                           indf2	equ	0xFDF
 19494                           postinc2	equ	0xFDE
 19495                           postdec2	equ	0xFDD
 19496                           fsr2h	equ	0xFDA
 19497                           fsr2l	equ	0xFD9
 19498                           status	equ	0xFD8
 19499                           
 19500 ;; *************** function _inputHandler *****************
 19501 ;; Defined at:
 19502 ;;		line 372 in file "UI.c"
 19503 ;; Parameters:    Size  Location     Type
 19504 ;;		None
 19505 ;; Auto vars:     Size  Location     Type
 19506 ;;		None
 19507 ;; Return value:  Size  Location     Type
 19508 ;;                  2   41[COMRAM] int 
 19509 ;; Registers used:
 19510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19511 ;; Tracked objects:
 19512 ;;		On entry : 0/0
 19513 ;;		On exit  : 0/0
 19514 ;;		Unchanged: 0/0
 19515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19520 ;;Total ram usage:        4 bytes
 19521 ;; Hardware stack levels used:    1
 19522 ;; Hardware stack levels required when called:    4
 19523 ;; This function calls:
 19524 ;;		_change_state_to_logs_11
 19525 ;;		_change_state_to_logs_12
 19526 ;;		_change_state_to_logs_22
 19527 ;;		_change_state_to_logs_23
 19528 ;;		_change_state_to_logs_33
 19529 ;;		_change_state_to_logs_34
 19530 ;;		_change_state_to_menu_11
 19531 ;;		_change_state_to_menu_23
 19532 ;;		i2_change_state_to_menu_12
 19533 ;;		i2_change_state_to_menu_22
 19534 ;; This function is called by:
 19535 ;;		_updateMenu
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           	psect	text66
 19540  00334E                     __ptext66:
 19541                           	opt stack 0
 19542  00334E                     _inputHandler:
 19543                           	opt stack 18
 19544                           
 19545                           ;UI.c: 377: if(firstboot){
 19546                           
 19547                           ;incstack = 0
 19548  00334E  0101               	movlb	1	; () banked
 19549  003350  513B               	movf	_firstboot& (0+255),w,b
 19550  003352  0101               	movlb	1	; () banked
 19551  003354  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19552  003356  B4D8               	btfsc	status,2,c
 19553  003358  D00C               	goto	i2l7070
 19554                           
 19555                           ; BSR set to: 1
 19556                           ;UI.c: 378: change_state_to_menu_11();
 19557  00335A  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 19558                           
 19559                           ;UI.c: 379: firstboot = 0;
 19560  00335E  0E00               	movlw	0
 19561  003360  0101               	movlb	1	; () banked
 19562  003362  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19563  003364  0E00               	movlw	0
 19564  003366  6F3B               	movwf	_firstboot& (0+255),b
 19565                           
 19566                           ; BSR set to: 1
 19567                           ;UI.c: 380: return 0;
 19568  003368  0E00               	movlw	0
 19569  00336A  6E2B               	movwf	?_inputHandler+1,c
 19570  00336C  0E00               	movlw	0
 19571  00336E  6E2A               	movwf	?_inputHandler,c
 19572                           
 19573                           ; BSR set to: 1
 19574  003370  0012               	return	
 19575  003372                     i2l7070:
 19576                           
 19577                           ; BSR set to: 1
 19578                           ;UI.c: 381: }
 19579                           ;UI.c: 382: if (logstate){
 19580  003372  0100               	movlb	0	; () banked
 19581  003374  51F6               	movf	_logstate& (0+255),w,b
 19582  003376  0100               	movlb	0	; () banked
 19583  003378  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19584  00337A  B4D8               	btfsc	status,2,c
 19585  00337C  D0C7               	goto	i2l7188
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19589  00337E  0E43               	movlw	67
 19590  003380  187D               	xorwf	_input,w,c	;volatile
 19591  003382  A4D8               	btfss	status,2,c
 19592  003384  D012               	goto	i2l7088
 19593                           
 19594                           ; BSR set to: 0
 19595  003386  B281               	btfsc	3969,1,c	;volatile
 19596  003388  D009               	goto	i2l7080
 19597  00338A  D00F               	goto	i2l7088
 19598  00338C                     i2l7078:
 19599                           
 19600                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19601  00338C  0E68               	movlw	104
 19602  00338E  6E2C               	movwf	??_inputHandler& (0+255),c
 19603  003390  0EE4               	movlw	228
 19604  003392                     i2u1011_47:
 19605  003392  2EE8               	decfsz	wreg,f,c
 19606  003394  D7FE               	bra	i2u1011_47
 19607  003396  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19608  003398  D7FC               	bra	i2u1011_47
 19609  00339A  D000               	nop2	
 19610  00339C                     i2l7080:
 19611  00339C  B281               	btfsc	3969,1,c	;volatile
 19612  00339E  D7F6               	goto	i2l7078
 19613  0033A0                     i2l7082:
 19614                           
 19615                           ;UI.c: 387: }
 19616                           ;UI.c: 388: return 0;
 19617  0033A0  0E00               	movlw	0
 19618  0033A2  6E2B               	movwf	?_inputHandler+1,c
 19619  0033A4  0E00               	movlw	0
 19620  0033A6  6E2A               	movwf	?_inputHandler,c
 19621  0033A8  0012               	return	
 19622  0033AA                     i2l7088:
 19623                           
 19624                           ;UI.c: 390: else if (input == 'D'){
 19625  0033AA  0E44               	movlw	68
 19626  0033AC  187D               	xorwf	_input,w,c	;volatile
 19627  0033AE  A4D8               	btfss	status,2,c
 19628  0033B0  D7F7               	goto	i2l7082
 19629                           
 19630                           ;UI.c: 392: logstate = 0;
 19631  0033B2  0E00               	movlw	0
 19632  0033B4  0100               	movlb	0	; () banked
 19633  0033B6  6FF7               	movwf	(_logstate+1)& (0+255),b
 19634  0033B8  0E00               	movlw	0
 19635  0033BA  6FF6               	movwf	_logstate& (0+255),b
 19636                           
 19637                           ;UI.c: 393: switch(cur_state){
 19638  0033BC  D012               	goto	i2l7106
 19639  0033BE                     i2l7092:
 19640                           
 19641                           ;UI.c: 395: change_state_to_logs_11();
 19642  0033BE  EC07  F028         	call	_change_state_to_logs_11	;wreg free
 19643                           
 19644                           ;UI.c: 396: break;
 19645  0033C2  D7EE               	goto	i2l7082
 19646  0033C4                     i2l7094:
 19647                           
 19648                           ;UI.c: 398: change_state_to_logs_12();
 19649  0033C4  ECEF  F027         	call	_change_state_to_logs_12	;wreg free
 19650                           
 19651                           ;UI.c: 399: break;
 19652  0033C8  D7EB               	goto	i2l7082
 19653  0033CA                     i2l7096:
 19654                           
 19655                           ;UI.c: 401: change_state_to_logs_22();
 19656  0033CA  ECD7  F027         	call	_change_state_to_logs_22	;wreg free
 19657                           
 19658                           ;UI.c: 402: break;
 19659  0033CE  D7E8               	goto	i2l7082
 19660  0033D0                     i2l7098:
 19661                           
 19662                           ;UI.c: 404: change_state_to_logs_23();
 19663  0033D0  EC36  F028         	call	_change_state_to_logs_23	;wreg free
 19664                           
 19665                           ;UI.c: 405: break;
 19666  0033D4  D7E5               	goto	i2l7082
 19667  0033D6                     i2l7100:
 19668                           
 19669                           ;UI.c: 407: change_state_to_logs_33();
 19670  0033D6  ECBF  F027         	call	_change_state_to_logs_33	;wreg free
 19671                           
 19672                           ;UI.c: 408: break;
 19673  0033DA  D7E2               	goto	i2l7082
 19674  0033DC                     i2l7102:
 19675                           
 19676                           ;UI.c: 410: change_state_to_logs_34();
 19677  0033DC  ECA7  F027         	call	_change_state_to_logs_34	;wreg free
 19678                           
 19679                           ;UI.c: 412: }
 19680                           
 19681                           ;UI.c: 411: break;
 19682  0033E0  D7DF               	goto	i2l7082
 19683  0033E2                     i2l7106:
 19684  0033E2  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19685  0033E6  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19686                           
 19687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19688                           ; Switch size 1, requested type "space"
 19689                           ; Number of cases is 2, Range of values is 3 to 4
 19690                           ; switch strategies available:
 19691                           ; Name         Instructions Cycles
 19692                           ; simple_byte            7     4 (average)
 19693                           ;	Chosen strategy is simple_byte
 19694  0033EA  502D               	movf	??_inputHandler+1,w,c
 19695  0033EC  0A03               	xorlw	3	; case 3
 19696  0033EE  B4D8               	btfsc	status,2,c
 19697  0033F0  D004               	goto	i2l9966
 19698  0033F2  0A07               	xorlw	7	; case 4
 19699  0033F4  B4D8               	btfsc	status,2,c
 19700  0033F6  D00F               	goto	i2l9968
 19701  0033F8  D7D3               	goto	i2l7082
 19702  0033FA                     i2l9966:
 19703                           
 19704                           ; Switch size 1, requested type "space"
 19705                           ; Number of cases is 4, Range of values is 243 to 255
 19706                           ; switch strategies available:
 19707                           ; Name         Instructions Cycles
 19708                           ; simple_byte           13     7 (average)
 19709                           ;	Chosen strategy is simple_byte
 19710  0033FA  502C               	movf	??_inputHandler,w,c
 19711  0033FC  0AF3               	xorlw	243	; case 243
 19712  0033FE  B4D8               	btfsc	status,2,c
 19713  003400  D7DE               	goto	i2l7092
 19714  003402  0A07               	xorlw	7	; case 244
 19715  003404  B4D8               	btfsc	status,2,c
 19716  003406  D7DE               	goto	i2l7094
 19717  003408  0A0A               	xorlw	10	; case 254
 19718  00340A  B4D8               	btfsc	status,2,c
 19719  00340C  D7DE               	goto	i2l7096
 19720  00340E  0A01               	xorlw	1	; case 255
 19721  003410  B4D8               	btfsc	status,2,c
 19722  003412  D7DE               	goto	i2l7098
 19723  003414  D7C5               	goto	i2l7082
 19724  003416                     i2l9968:
 19725                           
 19726                           ; Switch size 1, requested type "space"
 19727                           ; Number of cases is 2, Range of values is 9 to 10
 19728                           ; switch strategies available:
 19729                           ; Name         Instructions Cycles
 19730                           ; simple_byte            7     4 (average)
 19731                           ;	Chosen strategy is simple_byte
 19732  003416  502C               	movf	??_inputHandler,w,c
 19733  003418  0A09               	xorlw	9	; case 9
 19734  00341A  B4D8               	btfsc	status,2,c
 19735  00341C  D7DC               	goto	i2l7100
 19736  00341E  0A03               	xorlw	3	; case 10
 19737  003420  B4D8               	btfsc	status,2,c
 19738  003422  D7DC               	goto	i2l7102
 19739  003424  D7BD               	goto	i2l7082
 19740  003426                     i2l7118:
 19741                           
 19742                           ;UI.c: 422: if(cur_state == 11){
 19743  003426  0E0B               	movlw	11
 19744  003428  0100               	movlb	0	; () banked
 19745  00342A  19EC               	xorwf	_cur_state& (0+255),w,b
 19746  00342C  0100               	movlb	0	; () banked
 19747  00342E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19748  003430  A4D8               	btfss	status,2,c
 19749  003432  D005               	goto	i2l7126
 19750                           
 19751                           ; BSR set to: 0
 19752                           ;UI.c: 423: return 0;
 19753  003434  0E00               	movlw	0
 19754  003436  6E2B               	movwf	?_inputHandler+1,c
 19755  003438  0E00               	movlw	0
 19756  00343A  6E2A               	movwf	?_inputHandler,c
 19757                           
 19758                           ; BSR set to: 0
 19759  00343C  0012               	return	
 19760  00343E                     i2l7126:
 19761                           
 19762                           ; BSR set to: 0
 19763                           ;UI.c: 425: else{
 19764                           ;UI.c: 426: change_state_to_menu_11();
 19765  00343E  EC8F  F027         	call	_change_state_to_menu_11	;wreg free
 19766                           
 19767                           ;UI.c: 427: }
 19768                           ;UI.c: 428: return 0;
 19769  003442  0E00               	movlw	0
 19770  003444  6E2B               	movwf	?_inputHandler+1,c
 19771  003446  0E00               	movlw	0
 19772  003448  6E2A               	movwf	?_inputHandler,c
 19773  00344A  0012               	return	
 19774  00344C                     i2l7132:
 19775                           
 19776                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19777  00344C  0E16               	movlw	22
 19778  00344E  0100               	movlb	0	; () banked
 19779  003450  19EC               	xorwf	_cur_state& (0+255),w,b
 19780  003452  0100               	movlb	0	; () banked
 19781  003454  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19782  003456  B4D8               	btfsc	status,2,c
 19783  003458  D007               	goto	i2l7136
 19784                           
 19785                           ; BSR set to: 0
 19786  00345A  0E0C               	movlw	12
 19787  00345C  0100               	movlb	0	; () banked
 19788  00345E  19EC               	xorwf	_cur_state& (0+255),w,b
 19789  003460  0100               	movlb	0	; () banked
 19790  003462  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19791  003464  A4D8               	btfss	status,2,c
 19792  003466  D005               	goto	i2l7142
 19793  003468                     i2l7136:
 19794                           
 19795                           ; BSR set to: 0
 19796                           ;UI.c: 431: return 0;
 19797  003468  0E00               	movlw	0
 19798  00346A  6E2B               	movwf	?_inputHandler+1,c
 19799  00346C  0E00               	movlw	0
 19800  00346E  6E2A               	movwf	?_inputHandler,c
 19801                           
 19802                           ; BSR set to: 0
 19803  003470  0012               	return	
 19804  003472                     i2l7142:
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;UI.c: 433: else if(cur_state == 23){
 19808  003472  0E17               	movlw	23
 19809  003474  0100               	movlb	0	; () banked
 19810  003476  19EC               	xorwf	_cur_state& (0+255),w,b
 19811  003478  0100               	movlb	0	; () banked
 19812  00347A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19813  00347C  A4D8               	btfss	status,2,c
 19814  00347E  D003               	goto	i2l7146
 19815                           
 19816                           ; BSR set to: 0
 19817                           ;UI.c: 434: change_state_to_menu_22();
 19818  003480  EC47  F027         	call	i2_change_state_to_menu_22	;wreg free
 19819                           
 19820                           ;UI.c: 435: }
 19821  003484  D002               	goto	i2l7148
 19822  003486                     i2l7146:
 19823                           
 19824                           ;UI.c: 436: else{
 19825                           ;UI.c: 437: change_state_to_menu_12();
 19826  003486  EC5F  F027         	call	i2_change_state_to_menu_12	;wreg free
 19827  00348A                     i2l7148:
 19828                           
 19829                           ;UI.c: 438: }
 19830                           ;UI.c: 439: return 0;
 19831  00348A  0E00               	movlw	0
 19832  00348C  6E2B               	movwf	?_inputHandler+1,c
 19833  00348E  0E00               	movlw	0
 19834  003490  6E2A               	movwf	?_inputHandler,c
 19835  003492  0012               	return	
 19836  003494                     i2l7152:
 19837                           
 19838                           ;UI.c: 441: if(cur_state == 23){
 19839  003494  0E17               	movlw	23
 19840  003496  0100               	movlb	0	; () banked
 19841  003498  19EC               	xorwf	_cur_state& (0+255),w,b
 19842  00349A  0100               	movlb	0	; () banked
 19843  00349C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19844  00349E  A4D8               	btfss	status,2,c
 19845  0034A0  D005               	goto	i2l7160
 19846                           
 19847                           ; BSR set to: 0
 19848                           ;UI.c: 442: return 0;
 19849  0034A2  0E00               	movlw	0
 19850  0034A4  6E2B               	movwf	?_inputHandler+1,c
 19851  0034A6  0E00               	movlw	0
 19852  0034A8  6E2A               	movwf	?_inputHandler,c
 19853                           
 19854                           ; BSR set to: 0
 19855  0034AA  0012               	return	
 19856  0034AC                     i2l7160:
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;UI.c: 444: else{
 19860                           ;UI.c: 445: change_state_to_menu_23();
 19861  0034AC  EC77  F027         	call	_change_state_to_menu_23	;wreg free
 19862                           
 19863                           ;UI.c: 446: }
 19864                           ;UI.c: 447: return 0;
 19865  0034B0  0E00               	movlw	0
 19866  0034B2  6E2B               	movwf	?_inputHandler+1,c
 19867  0034B4  0E00               	movlw	0
 19868  0034B6  6E2A               	movwf	?_inputHandler,c
 19869  0034B8  0012               	return	
 19870  0034BA                     i2l7166:
 19871                           
 19872                           ;UI.c: 450: up = 1;
 19873  0034BA  0E00               	movlw	0
 19874  0034BC  6E78               	movwf	_up+1,c
 19875  0034BE  0E01               	movlw	1
 19876  0034C0  6E77               	movwf	_up,c
 19877                           
 19878                           ;UI.c: 451: return 1;
 19879  0034C2  0E00               	movlw	0
 19880  0034C4  6E2B               	movwf	?_inputHandler+1,c
 19881  0034C6  0E01               	movlw	1
 19882  0034C8  6E2A               	movwf	?_inputHandler,c
 19883  0034CA  0012               	return	
 19884  0034CC                     i2l7170:
 19885                           
 19886                           ;UI.c: 453: down = 1;
 19887  0034CC  0E00               	movlw	0
 19888  0034CE  6E5E               	movwf	_down+1,c
 19889  0034D0  0E01               	movlw	1
 19890  0034D2  6E5D               	movwf	_down,c
 19891                           
 19892                           ;UI.c: 454: return 1;
 19893  0034D4  0E00               	movlw	0
 19894  0034D6  6E2B               	movwf	?_inputHandler+1,c
 19895  0034D8  0E01               	movlw	1
 19896  0034DA  6E2A               	movwf	?_inputHandler,c
 19897  0034DC  0012               	return	
 19898  0034DE                     i2l7174:
 19899                           
 19900                           ;UI.c: 456: enter = 1;
 19901  0034DE  0E00               	movlw	0
 19902  0034E0  6E60               	movwf	_enter+1,c
 19903  0034E2  0E01               	movlw	1
 19904  0034E4  6E5F               	movwf	_enter,c
 19905                           
 19906                           ;UI.c: 457: return 1;
 19907  0034E6  0E00               	movlw	0
 19908  0034E8  6E2B               	movwf	?_inputHandler+1,c
 19909  0034EA  0E01               	movlw	1
 19910  0034EC  6E2A               	movwf	?_inputHandler,c
 19911  0034EE  0012               	return	
 19912  0034F0                     i2l7178:
 19913                           
 19914                           ;UI.c: 459: back = 1;
 19915  0034F0  0E00               	movlw	0
 19916  0034F2  6E5C               	movwf	_back+1,c
 19917  0034F4  0E01               	movlw	1
 19918  0034F6  6E5B               	movwf	_back,c
 19919                           
 19920                           ;UI.c: 460: return 1;
 19921  0034F8  0E00               	movlw	0
 19922  0034FA  6E2B               	movwf	?_inputHandler+1,c
 19923  0034FC  0E01               	movlw	1
 19924  0034FE  6E2A               	movwf	?_inputHandler,c
 19925  003500  0012               	return	
 19926  003502                     i2l7182:
 19927                           
 19928                           ;UI.c: 463: return 1;
 19929  003502  0E00               	movlw	0
 19930  003504  6E2B               	movwf	?_inputHandler+1,c
 19931  003506  0E01               	movlw	1
 19932  003508  6E2A               	movwf	?_inputHandler,c
 19933                           
 19934                           ;UI.c: 464: }
 19935  00350A  0012               	return	
 19936  00350C                     i2l7188:
 19937  00350C  507D               	movf	_input,w,c	;volatile
 19938                           
 19939                           ; Switch size 1, requested type "space"
 19940                           ; Number of cases is 7, Range of values is 49 to 68
 19941                           ; switch strategies available:
 19942                           ; Name         Instructions Cycles
 19943                           ; simple_byte           22    12 (average)
 19944                           ;	Chosen strategy is simple_byte
 19945  00350E  0A31               	xorlw	49	; case 49
 19946  003510  B4D8               	btfsc	status,2,c
 19947  003512  D789               	goto	i2l7118
 19948  003514  0A03               	xorlw	3	; case 50
 19949  003516  B4D8               	btfsc	status,2,c
 19950  003518  D799               	goto	i2l7132
 19951  00351A  0A01               	xorlw	1	; case 51
 19952  00351C  B4D8               	btfsc	status,2,c
 19953  00351E  D7BA               	goto	i2l7152
 19954  003520  0A72               	xorlw	114	; case 65
 19955  003522  B4D8               	btfsc	status,2,c
 19956  003524  D7CA               	goto	i2l7166
 19957  003526  0A03               	xorlw	3	; case 66
 19958  003528  B4D8               	btfsc	status,2,c
 19959  00352A  D7D0               	goto	i2l7170
 19960  00352C  0A01               	xorlw	1	; case 67
 19961  00352E  B4D8               	btfsc	status,2,c
 19962  003530  D7D6               	goto	i2l7174
 19963  003532  0A07               	xorlw	7	; case 68
 19964  003534  B4D8               	btfsc	status,2,c
 19965  003536  D7DC               	goto	i2l7178
 19966  003538  D7E4               	goto	i2l7182
 19967  00353A                     __end_of_inputHandler:
 19968                           	opt stack 0
 19969                           pclatu	equ	0xFFB
 19970                           pclath	equ	0xFFA
 19971                           tblptru	equ	0xFF8
 19972                           tblptrh	equ	0xFF7
 19973                           tblptrl	equ	0xFF6
 19974                           tablat	equ	0xFF5
 19975                           prodh	equ	0xFF4
 19976                           prodl	equ	0xFF3
 19977                           intcon	equ	0xFF2
 19978                           intcon2	equ	0xFF1
 19979                           intcon3	equ	0xFF0
 19980                           indf0	equ	0xFEF
 19981                           postinc0	equ	0xFEE
 19982                           fsr0h	equ	0xFEA
 19983                           fsr0l	equ	0xFE9
 19984                           wreg	equ	0xFE8
 19985                           postdec1	equ	0xFE5
 19986                           fsr1h	equ	0xFE2
 19987                           fsr1l	equ	0xFE1
 19988                           indf2	equ	0xFDF
 19989                           postinc2	equ	0xFDE
 19990                           postdec2	equ	0xFDD
 19991                           fsr2h	equ	0xFDA
 19992                           fsr2l	equ	0xFD9
 19993                           status	equ	0xFD8
 19994                           
 19995 ;; *************** function i2_change_state_to_menu_22 *****************
 19996 ;; Defined at:
 19997 ;;		line 498 in file "UI.c"
 19998 ;; Parameters:    Size  Location     Type
 19999 ;;		None
 20000 ;; Auto vars:     Size  Location     Type
 20001 ;;		None
 20002 ;; Return value:  Size  Location     Type
 20003 ;;                  1    wreg      void 
 20004 ;; Registers used:
 20005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20006 ;; Tracked objects:
 20007 ;;		On entry : 0/0
 20008 ;;		On exit  : 0/0
 20009 ;;		Unchanged: 0/0
 20010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;Total ram usage:        0 bytes
 20016 ;; Hardware stack levels used:    1
 20017 ;; Hardware stack levels required when called:    3
 20018 ;; This function calls:
 20019 ;;		i2_lcdInst
 20020 ;;		i2_printf
 20021 ;; This function is called by:
 20022 ;;		_updateMenu
 20023 ;;		_inputHandler
 20024 ;; This function uses a non-reentrant model
 20025 ;;
 20026                           
 20027                           	psect	text67
 20028  004E8E                     __ptext67:
 20029                           	opt stack 0
 20030  004E8E                     i2_change_state_to_menu_22:
 20031                           	opt stack 19
 20032                           
 20033                           ;UI.c: 499: cur_state = 22;
 20034                           
 20035                           ;incstack = 0
 20036  004E8E  0E00               	movlw	0
 20037  004E90  0100               	movlb	0	; () banked
 20038  004E92  6FED               	movwf	(_cur_state+1)& (0+255),b
 20039  004E94  0E16               	movlw	22
 20040  004E96  6FEC               	movwf	_cur_state& (0+255),b
 20041                           
 20042                           ; BSR set to: 0
 20043                           ;UI.c: 501: lcdInst(0b10000000);;
 20044  004E98  0E80               	movlw	128
 20045  004E9A  EC7A  F029         	call	i2_lcdInst
 20046                           
 20047                           ;UI.c: 502: printf("2. SORT        <");
 20048  004E9E  0EC4               	movlw	low STR_34
 20049  004EA0  6E0D               	movwf	i2printf@f,c
 20050  004EA2  0EFD               	movlw	high STR_34
 20051  004EA4  6E0E               	movwf	i2printf@f+1,c
 20052  004EA6  ECE5  F00E         	call	i2_printf	;wreg free
 20053                           
 20054                           ;UI.c: 503: lcdInst(0b11000000);;
 20055  004EAA  0EC0               	movlw	192
 20056  004EAC  EC7A  F029         	call	i2_lcdInst
 20057                           
 20058                           ;UI.c: 504: printf("3. LOGS         ");
 20059  004EB0  0E09               	movlw	low STR_36
 20060  004EB2  6E0D               	movwf	i2printf@f,c
 20061  004EB4  0EFD               	movlw	high STR_36
 20062  004EB6  6E0E               	movwf	i2printf@f+1,c
 20063  004EB8  ECE5  F00E         	call	i2_printf	;wreg free
 20064  004EBC  0012               	return		;funcret
 20065  004EBE                     __end_ofi2_change_state_to_menu_22:
 20066                           	opt stack 0
 20067                           pclatu	equ	0xFFB
 20068                           pclath	equ	0xFFA
 20069                           tblptru	equ	0xFF8
 20070                           tblptrh	equ	0xFF7
 20071                           tblptrl	equ	0xFF6
 20072                           tablat	equ	0xFF5
 20073                           prodh	equ	0xFF4
 20074                           prodl	equ	0xFF3
 20075                           intcon	equ	0xFF2
 20076                           intcon2	equ	0xFF1
 20077                           intcon3	equ	0xFF0
 20078                           indf0	equ	0xFEF
 20079                           postinc0	equ	0xFEE
 20080                           fsr0h	equ	0xFEA
 20081                           fsr0l	equ	0xFE9
 20082                           wreg	equ	0xFE8
 20083                           postdec1	equ	0xFE5
 20084                           fsr1h	equ	0xFE2
 20085                           fsr1l	equ	0xFE1
 20086                           indf2	equ	0xFDF
 20087                           postinc2	equ	0xFDE
 20088                           postdec2	equ	0xFDD
 20089                           fsr2h	equ	0xFDA
 20090                           fsr2l	equ	0xFD9
 20091                           status	equ	0xFD8
 20092                           
 20093 ;; *************** function i2_change_state_to_menu_12 *****************
 20094 ;; Defined at:
 20095 ;;		line 490 in file "UI.c"
 20096 ;; Parameters:    Size  Location     Type
 20097 ;;		None
 20098 ;; Auto vars:     Size  Location     Type
 20099 ;;		None
 20100 ;; Return value:  Size  Location     Type
 20101 ;;                  1    wreg      void 
 20102 ;; Registers used:
 20103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20104 ;; Tracked objects:
 20105 ;;		On entry : 0/0
 20106 ;;		On exit  : 0/0
 20107 ;;		Unchanged: 0/0
 20108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20113 ;;Total ram usage:        0 bytes
 20114 ;; Hardware stack levels used:    1
 20115 ;; Hardware stack levels required when called:    3
 20116 ;; This function calls:
 20117 ;;		i2_lcdInst
 20118 ;;		i2_printf
 20119 ;; This function is called by:
 20120 ;;		_updateMenu
 20121 ;;		_inputHandler
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           	psect	text68
 20126  004EBE                     __ptext68:
 20127                           	opt stack 0
 20128  004EBE                     i2_change_state_to_menu_12:
 20129                           	opt stack 19
 20130                           
 20131                           ;UI.c: 491: cur_state = 12;
 20132                           
 20133                           ;incstack = 0
 20134  004EBE  0E00               	movlw	0
 20135  004EC0  0100               	movlb	0	; () banked
 20136  004EC2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20137  004EC4  0E0C               	movlw	12
 20138  004EC6  6FEC               	movwf	_cur_state& (0+255),b
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;UI.c: 493: lcdInst(0b10000000);;
 20142  004EC8  0E80               	movlw	128
 20143  004ECA  EC7A  F029         	call	i2_lcdInst
 20144                           
 20145                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20146  004ECE  0E2B               	movlw	low STR_33
 20147  004ED0  6E0D               	movwf	i2printf@f,c
 20148  004ED2  0EFD               	movlw	high STR_33
 20149  004ED4  6E0E               	movwf	i2printf@f+1,c
 20150  004ED6  ECE5  F00E         	call	i2_printf	;wreg free
 20151                           
 20152                           ;UI.c: 495: lcdInst(0b11000000);;
 20153  004EDA  0EC0               	movlw	192
 20154  004EDC  EC7A  F029         	call	i2_lcdInst
 20155                           
 20156                           ;UI.c: 496: printf("2. SORT        <");
 20157  004EE0  0EC4               	movlw	low STR_34
 20158  004EE2  6E0D               	movwf	i2printf@f,c
 20159  004EE4  0EFD               	movlw	high STR_34
 20160  004EE6  6E0E               	movwf	i2printf@f+1,c
 20161  004EE8  ECE5  F00E         	call	i2_printf	;wreg free
 20162  004EEC  0012               	return		;funcret
 20163  004EEE                     __end_ofi2_change_state_to_menu_12:
 20164                           	opt stack 0
 20165                           pclatu	equ	0xFFB
 20166                           pclath	equ	0xFFA
 20167                           tblptru	equ	0xFF8
 20168                           tblptrh	equ	0xFF7
 20169                           tblptrl	equ	0xFF6
 20170                           tablat	equ	0xFF5
 20171                           prodh	equ	0xFF4
 20172                           prodl	equ	0xFF3
 20173                           intcon	equ	0xFF2
 20174                           intcon2	equ	0xFF1
 20175                           intcon3	equ	0xFF0
 20176                           indf0	equ	0xFEF
 20177                           postinc0	equ	0xFEE
 20178                           fsr0h	equ	0xFEA
 20179                           fsr0l	equ	0xFE9
 20180                           wreg	equ	0xFE8
 20181                           postdec1	equ	0xFE5
 20182                           fsr1h	equ	0xFE2
 20183                           fsr1l	equ	0xFE1
 20184                           indf2	equ	0xFDF
 20185                           postinc2	equ	0xFDE
 20186                           postdec2	equ	0xFDD
 20187                           fsr2h	equ	0xFDA
 20188                           fsr2l	equ	0xFD9
 20189                           status	equ	0xFD8
 20190                           
 20191 ;; *************** function _change_state_to_menu_23 *****************
 20192 ;; Defined at:
 20193 ;;		line 506 in file "UI.c"
 20194 ;; Parameters:    Size  Location     Type
 20195 ;;		None
 20196 ;; Auto vars:     Size  Location     Type
 20197 ;;		None
 20198 ;; Return value:  Size  Location     Type
 20199 ;;                  1    wreg      void 
 20200 ;; Registers used:
 20201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20202 ;; Tracked objects:
 20203 ;;		On entry : 0/0
 20204 ;;		On exit  : 0/0
 20205 ;;		Unchanged: 0/0
 20206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;Total ram usage:        0 bytes
 20212 ;; Hardware stack levels used:    1
 20213 ;; Hardware stack levels required when called:    3
 20214 ;; This function calls:
 20215 ;;		i2_lcdInst
 20216 ;;		i2_printf
 20217 ;; This function is called by:
 20218 ;;		_updateMenu
 20219 ;;		_inputHandler
 20220 ;; This function uses a non-reentrant model
 20221 ;;
 20222                           
 20223                           	psect	text69
 20224  004EEE                     __ptext69:
 20225                           	opt stack 0
 20226  004EEE                     _change_state_to_menu_23:
 20227                           	opt stack 18
 20228                           
 20229                           ;UI.c: 507: cur_state = 23;
 20230                           
 20231                           ;incstack = 0
 20232  004EEE  0E00               	movlw	0
 20233  004EF0  0100               	movlb	0	; () banked
 20234  004EF2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20235  004EF4  0E17               	movlw	23
 20236  004EF6  6FEC               	movwf	_cur_state& (0+255),b
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;UI.c: 509: lcdInst(0b10000000);;
 20240  004EF8  0E80               	movlw	128
 20241  004EFA  EC7A  F029         	call	i2_lcdInst
 20242                           
 20243                           ;UI.c: 510: printf("2. SORT         ");
 20244  004EFE  0E1A               	movlw	low STR_32
 20245  004F00  6E0D               	movwf	i2printf@f,c
 20246  004F02  0EFD               	movlw	high STR_32
 20247  004F04  6E0E               	movwf	i2printf@f+1,c
 20248  004F06  ECE5  F00E         	call	i2_printf	;wreg free
 20249                           
 20250                           ;UI.c: 511: lcdInst(0b11000000);;
 20251  004F0A  0EC0               	movlw	192
 20252  004F0C  EC7A  F029         	call	i2_lcdInst
 20253                           
 20254                           ;UI.c: 512: printf("3. LOGS        <");
 20255  004F10  0EB3               	movlw	low STR_38
 20256  004F12  6E0D               	movwf	i2printf@f,c
 20257  004F14  0EFD               	movlw	high STR_38
 20258  004F16  6E0E               	movwf	i2printf@f+1,c
 20259  004F18  ECE5  F00E         	call	i2_printf	;wreg free
 20260  004F1C  0012               	return		;funcret
 20261  004F1E                     __end_of_change_state_to_menu_23:
 20262                           	opt stack 0
 20263                           pclatu	equ	0xFFB
 20264                           pclath	equ	0xFFA
 20265                           tblptru	equ	0xFF8
 20266                           tblptrh	equ	0xFF7
 20267                           tblptrl	equ	0xFF6
 20268                           tablat	equ	0xFF5
 20269                           prodh	equ	0xFF4
 20270                           prodl	equ	0xFF3
 20271                           intcon	equ	0xFF2
 20272                           intcon2	equ	0xFF1
 20273                           intcon3	equ	0xFF0
 20274                           indf0	equ	0xFEF
 20275                           postinc0	equ	0xFEE
 20276                           fsr0h	equ	0xFEA
 20277                           fsr0l	equ	0xFE9
 20278                           wreg	equ	0xFE8
 20279                           postdec1	equ	0xFE5
 20280                           fsr1h	equ	0xFE2
 20281                           fsr1l	equ	0xFE1
 20282                           indf2	equ	0xFDF
 20283                           postinc2	equ	0xFDE
 20284                           postdec2	equ	0xFDD
 20285                           fsr2h	equ	0xFDA
 20286                           fsr2l	equ	0xFD9
 20287                           status	equ	0xFD8
 20288                           
 20289 ;; *************** function _change_state_to_menu_11 *****************
 20290 ;; Defined at:
 20291 ;;		line 482 in file "UI.c"
 20292 ;; Parameters:    Size  Location     Type
 20293 ;;		None
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;		None
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  1    wreg      void 
 20298 ;; Registers used:
 20299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20309 ;;Total ram usage:        0 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; Hardware stack levels required when called:    3
 20312 ;; This function calls:
 20313 ;;		i2_lcdInst
 20314 ;;		i2_printf
 20315 ;; This function is called by:
 20316 ;;		_updateMenu
 20317 ;;		_inputHandler
 20318 ;; This function uses a non-reentrant model
 20319 ;;
 20320                           
 20321                           	psect	text70
 20322  004F1E                     __ptext70:
 20323                           	opt stack 0
 20324  004F1E                     _change_state_to_menu_11:
 20325                           	opt stack 18
 20326                           
 20327                           ;UI.c: 483: cur_state = 11;
 20328                           
 20329                           ;incstack = 0
 20330  004F1E  0E00               	movlw	0
 20331  004F20  0100               	movlb	0	; () banked
 20332  004F22  6FED               	movwf	(_cur_state+1)& (0+255),b
 20333  004F24  0E0B               	movlw	11
 20334  004F26  6FEC               	movwf	_cur_state& (0+255),b
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;UI.c: 485: lcdInst(0b10000000);;
 20338  004F28  0E80               	movlw	128
 20339  004F2A  EC7A  F029         	call	i2_lcdInst
 20340                           
 20341                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20342  004F2E  0ED5               	movlw	low STR_31
 20343  004F30  6E0D               	movwf	i2printf@f,c
 20344  004F32  0EFD               	movlw	high STR_31
 20345  004F34  6E0E               	movwf	i2printf@f+1,c
 20346  004F36  ECE5  F00E         	call	i2_printf	;wreg free
 20347                           
 20348                           ;UI.c: 487: lcdInst(0b11000000);;
 20349  004F3A  0EC0               	movlw	192
 20350  004F3C  EC7A  F029         	call	i2_lcdInst
 20351                           
 20352                           ;UI.c: 488: printf("2. SORT         ");
 20353  004F40  0E1A               	movlw	low STR_32
 20354  004F42  6E0D               	movwf	i2printf@f,c
 20355  004F44  0EFD               	movlw	high STR_32
 20356  004F46  6E0E               	movwf	i2printf@f+1,c
 20357  004F48  ECE5  F00E         	call	i2_printf	;wreg free
 20358  004F4C  0012               	return		;funcret
 20359  004F4E                     __end_of_change_state_to_menu_11:
 20360                           	opt stack 0
 20361                           pclatu	equ	0xFFB
 20362                           pclath	equ	0xFFA
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           intcon2	equ	0xFF1
 20371                           intcon3	equ	0xFF0
 20372                           indf0	equ	0xFEF
 20373                           postinc0	equ	0xFEE
 20374                           fsr0h	equ	0xFEA
 20375                           fsr0l	equ	0xFE9
 20376                           wreg	equ	0xFE8
 20377                           postdec1	equ	0xFE5
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           fsr2h	equ	0xFDA
 20384                           fsr2l	equ	0xFD9
 20385                           status	equ	0xFD8
 20386                           
 20387 ;; *************** function _change_state_to_logs_34 *****************
 20388 ;; Defined at:
 20389 ;;		line 549 in file "UI.c"
 20390 ;; Parameters:    Size  Location     Type
 20391 ;;		None
 20392 ;; Auto vars:     Size  Location     Type
 20393 ;;		None
 20394 ;; Return value:  Size  Location     Type
 20395 ;;                  1    wreg      void 
 20396 ;; Registers used:
 20397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20398 ;; Tracked objects:
 20399 ;;		On entry : 0/0
 20400 ;;		On exit  : 0/0
 20401 ;;		Unchanged: 0/0
 20402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20407 ;;Total ram usage:        0 bytes
 20408 ;; Hardware stack levels used:    1
 20409 ;; Hardware stack levels required when called:    3
 20410 ;; This function calls:
 20411 ;;		i2_lcdInst
 20412 ;;		i2_printf
 20413 ;; This function is called by:
 20414 ;;		_updateMenu
 20415 ;;		_inputHandler
 20416 ;; This function uses a non-reentrant model
 20417 ;;
 20418                           
 20419                           	psect	text71
 20420  004F4E                     __ptext71:
 20421                           	opt stack 0
 20422  004F4E                     _change_state_to_logs_34:
 20423                           	opt stack 18
 20424                           
 20425                           ;UI.c: 550: cur_state = 1034;
 20426                           
 20427                           ;incstack = 0
 20428  004F4E  0E04               	movlw	4
 20429  004F50  0100               	movlb	0	; () banked
 20430  004F52  6FED               	movwf	(_cur_state+1)& (0+255),b
 20431  004F54  0E0A               	movlw	10
 20432  004F56  6FEC               	movwf	_cur_state& (0+255),b
 20433                           
 20434                           ; BSR set to: 0
 20435                           ;UI.c: 551: lcdInst(0b10000000);;
 20436  004F58  0E80               	movlw	128
 20437  004F5A  EC7A  F029         	call	i2_lcdInst
 20438                           
 20439                           ;UI.c: 552: printf("LOG 3           ");
 20440  004F5E  0EE7               	movlw	low STR_44
 20441  004F60  6E0D               	movwf	i2printf@f,c
 20442  004F62  0EFC               	movlw	high STR_44
 20443  004F64  6E0E               	movwf	i2printf@f+1,c
 20444  004F66  ECE5  F00E         	call	i2_printf	;wreg free
 20445                           
 20446                           ;UI.c: 553: lcdInst(0b11000000);;
 20447  004F6A  0EC0               	movlw	192
 20448  004F6C  EC7A  F029         	call	i2_lcdInst
 20449                           
 20450                           ;UI.c: 554: printf("LOG 4          <");
 20451  004F70  0EA2               	movlw	low STR_50
 20452  004F72  6E0D               	movwf	i2printf@f,c
 20453  004F74  0EFD               	movlw	high STR_50
 20454  004F76  6E0E               	movwf	i2printf@f+1,c
 20455  004F78  ECE5  F00E         	call	i2_printf	;wreg free
 20456  004F7C  0012               	return		;funcret
 20457  004F7E                     __end_of_change_state_to_logs_34:
 20458                           	opt stack 0
 20459                           pclatu	equ	0xFFB
 20460                           pclath	equ	0xFFA
 20461                           tblptru	equ	0xFF8
 20462                           tblptrh	equ	0xFF7
 20463                           tblptrl	equ	0xFF6
 20464                           tablat	equ	0xFF5
 20465                           prodh	equ	0xFF4
 20466                           prodl	equ	0xFF3
 20467                           intcon	equ	0xFF2
 20468                           intcon2	equ	0xFF1
 20469                           intcon3	equ	0xFF0
 20470                           indf0	equ	0xFEF
 20471                           postinc0	equ	0xFEE
 20472                           fsr0h	equ	0xFEA
 20473                           fsr0l	equ	0xFE9
 20474                           wreg	equ	0xFE8
 20475                           postdec1	equ	0xFE5
 20476                           fsr1h	equ	0xFE2
 20477                           fsr1l	equ	0xFE1
 20478                           indf2	equ	0xFDF
 20479                           postinc2	equ	0xFDE
 20480                           postdec2	equ	0xFDD
 20481                           fsr2h	equ	0xFDA
 20482                           fsr2l	equ	0xFD9
 20483                           status	equ	0xFD8
 20484                           
 20485 ;; *************** function _change_state_to_logs_33 *****************
 20486 ;; Defined at:
 20487 ;;		line 542 in file "UI.c"
 20488 ;; Parameters:    Size  Location     Type
 20489 ;;		None
 20490 ;; Auto vars:     Size  Location     Type
 20491 ;;		None
 20492 ;; Return value:  Size  Location     Type
 20493 ;;                  1    wreg      void 
 20494 ;; Registers used:
 20495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20496 ;; Tracked objects:
 20497 ;;		On entry : 0/0
 20498 ;;		On exit  : 0/0
 20499 ;;		Unchanged: 0/0
 20500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20505 ;;Total ram usage:        0 bytes
 20506 ;; Hardware stack levels used:    1
 20507 ;; Hardware stack levels required when called:    3
 20508 ;; This function calls:
 20509 ;;		i2_lcdInst
 20510 ;;		i2_printf
 20511 ;; This function is called by:
 20512 ;;		_updateMenu
 20513 ;;		_inputHandler
 20514 ;; This function uses a non-reentrant model
 20515 ;;
 20516                           
 20517                           	psect	text72
 20518  004F7E                     __ptext72:
 20519                           	opt stack 0
 20520  004F7E                     _change_state_to_logs_33:
 20521                           	opt stack 18
 20522                           
 20523                           ;UI.c: 543: cur_state = 1033;
 20524                           
 20525                           ;incstack = 0
 20526  004F7E  0E04               	movlw	4
 20527  004F80  0100               	movlb	0	; () banked
 20528  004F82  6FED               	movwf	(_cur_state+1)& (0+255),b
 20529  004F84  0E09               	movlw	9
 20530  004F86  6FEC               	movwf	_cur_state& (0+255),b
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;UI.c: 544: lcdInst(0b10000000);;
 20534  004F88  0E80               	movlw	128
 20535  004F8A  EC7A  F029         	call	i2_lcdInst
 20536                           
 20537                           ;UI.c: 545: printf("LOG 3          <");
 20538  004F8E  0E91               	movlw	low STR_46
 20539  004F90  6E0D               	movwf	i2printf@f,c
 20540  004F92  0EFD               	movlw	high STR_46
 20541  004F94  6E0E               	movwf	i2printf@f+1,c
 20542  004F96  ECE5  F00E         	call	i2_printf	;wreg free
 20543                           
 20544                           ;UI.c: 546: lcdInst(0b11000000);;
 20545  004F9A  0EC0               	movlw	192
 20546  004F9C  EC7A  F029         	call	i2_lcdInst
 20547                           
 20548                           ;UI.c: 547: printf("LOG 4           ");
 20549  004FA0  0EF8               	movlw	low STR_48
 20550  004FA2  6E0D               	movwf	i2printf@f,c
 20551  004FA4  0EFC               	movlw	high STR_48
 20552  004FA6  6E0E               	movwf	i2printf@f+1,c
 20553  004FA8  ECE5  F00E         	call	i2_printf	;wreg free
 20554  004FAC  0012               	return		;funcret
 20555  004FAE                     __end_of_change_state_to_logs_33:
 20556                           	opt stack 0
 20557                           pclatu	equ	0xFFB
 20558                           pclath	equ	0xFFA
 20559                           tblptru	equ	0xFF8
 20560                           tblptrh	equ	0xFF7
 20561                           tblptrl	equ	0xFF6
 20562                           tablat	equ	0xFF5
 20563                           prodh	equ	0xFF4
 20564                           prodl	equ	0xFF3
 20565                           intcon	equ	0xFF2
 20566                           intcon2	equ	0xFF1
 20567                           intcon3	equ	0xFF0
 20568                           indf0	equ	0xFEF
 20569                           postinc0	equ	0xFEE
 20570                           fsr0h	equ	0xFEA
 20571                           fsr0l	equ	0xFE9
 20572                           wreg	equ	0xFE8
 20573                           postdec1	equ	0xFE5
 20574                           fsr1h	equ	0xFE2
 20575                           fsr1l	equ	0xFE1
 20576                           indf2	equ	0xFDF
 20577                           postinc2	equ	0xFDE
 20578                           postdec2	equ	0xFDD
 20579                           fsr2h	equ	0xFDA
 20580                           fsr2l	equ	0xFD9
 20581                           status	equ	0xFD8
 20582                           
 20583 ;; *************** function _change_state_to_logs_23 *****************
 20584 ;; Defined at:
 20585 ;;		line 535 in file "UI.c"
 20586 ;; Parameters:    Size  Location     Type
 20587 ;;		None
 20588 ;; Auto vars:     Size  Location     Type
 20589 ;;		None
 20590 ;; Return value:  Size  Location     Type
 20591 ;;                  1    wreg      void 
 20592 ;; Registers used:
 20593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20594 ;; Tracked objects:
 20595 ;;		On entry : 0/0
 20596 ;;		On exit  : 0/0
 20597 ;;		Unchanged: 0/0
 20598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20603 ;;Total ram usage:        0 bytes
 20604 ;; Hardware stack levels used:    1
 20605 ;; Hardware stack levels required when called:    3
 20606 ;; This function calls:
 20607 ;;		i2_lcdInst
 20608 ;;		i2_printf
 20609 ;; This function is called by:
 20610 ;;		_updateMenu
 20611 ;;		_inputHandler
 20612 ;; This function uses a non-reentrant model
 20613 ;;
 20614                           
 20615                           	psect	text73
 20616  00506C                     __ptext73:
 20617                           	opt stack 0
 20618  00506C                     _change_state_to_logs_23:
 20619                           	opt stack 18
 20620                           
 20621                           ;UI.c: 536: cur_state = 1023;
 20622                           
 20623                           ;incstack = 0
 20624  00506C  0E03               	movlw	3
 20625  00506E  0100               	movlb	0	; () banked
 20626  005070  6FED               	movwf	(_cur_state+1)& (0+255),b
 20627  005072  69EC               	setf	_cur_state& (0+255),b
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;UI.c: 537: lcdInst(0b10000000);;
 20631  005074  0E80               	movlw	128
 20632  005076  EC7A  F029         	call	i2_lcdInst
 20633                           
 20634                           ;UI.c: 538: printf("LOG 2           ");
 20635  00507A  0ED6               	movlw	low STR_40
 20636  00507C  6E0D               	movwf	i2printf@f,c
 20637  00507E  0EFC               	movlw	high STR_40
 20638  005080  6E0E               	movwf	i2printf@f+1,c
 20639  005082  ECE5  F00E         	call	i2_printf	;wreg free
 20640                           
 20641                           ;UI.c: 539: lcdInst(0b11000000);;
 20642  005086  0EC0               	movlw	192
 20643  005088  EC7A  F029         	call	i2_lcdInst
 20644                           
 20645                           ;UI.c: 540: printf("LOG 3          <");
 20646  00508C  0E91               	movlw	low STR_46
 20647  00508E  6E0D               	movwf	i2printf@f,c
 20648  005090  0EFD               	movlw	high STR_46
 20649  005092  6E0E               	movwf	i2printf@f+1,c
 20650  005094  ECE5  F00E         	call	i2_printf	;wreg free
 20651  005098  0012               	return		;funcret
 20652  00509A                     __end_of_change_state_to_logs_23:
 20653                           	opt stack 0
 20654                           pclatu	equ	0xFFB
 20655                           pclath	equ	0xFFA
 20656                           tblptru	equ	0xFF8
 20657                           tblptrh	equ	0xFF7
 20658                           tblptrl	equ	0xFF6
 20659                           tablat	equ	0xFF5
 20660                           prodh	equ	0xFF4
 20661                           prodl	equ	0xFF3
 20662                           intcon	equ	0xFF2
 20663                           intcon2	equ	0xFF1
 20664                           intcon3	equ	0xFF0
 20665                           indf0	equ	0xFEF
 20666                           postinc0	equ	0xFEE
 20667                           fsr0h	equ	0xFEA
 20668                           fsr0l	equ	0xFE9
 20669                           wreg	equ	0xFE8
 20670                           postdec1	equ	0xFE5
 20671                           fsr1h	equ	0xFE2
 20672                           fsr1l	equ	0xFE1
 20673                           indf2	equ	0xFDF
 20674                           postinc2	equ	0xFDE
 20675                           postdec2	equ	0xFDD
 20676                           fsr2h	equ	0xFDA
 20677                           fsr2l	equ	0xFD9
 20678                           status	equ	0xFD8
 20679                           
 20680 ;; *************** function _change_state_to_logs_22 *****************
 20681 ;; Defined at:
 20682 ;;		line 528 in file "UI.c"
 20683 ;; Parameters:    Size  Location     Type
 20684 ;;		None
 20685 ;; Auto vars:     Size  Location     Type
 20686 ;;		None
 20687 ;; Return value:  Size  Location     Type
 20688 ;;                  1    wreg      void 
 20689 ;; Registers used:
 20690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20691 ;; Tracked objects:
 20692 ;;		On entry : 0/0
 20693 ;;		On exit  : 0/0
 20694 ;;		Unchanged: 0/0
 20695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20700 ;;Total ram usage:        0 bytes
 20701 ;; Hardware stack levels used:    1
 20702 ;; Hardware stack levels required when called:    3
 20703 ;; This function calls:
 20704 ;;		i2_lcdInst
 20705 ;;		i2_printf
 20706 ;; This function is called by:
 20707 ;;		_updateMenu
 20708 ;;		_inputHandler
 20709 ;; This function uses a non-reentrant model
 20710 ;;
 20711                           
 20712                           	psect	text74
 20713  004FAE                     __ptext74:
 20714                           	opt stack 0
 20715  004FAE                     _change_state_to_logs_22:
 20716                           	opt stack 18
 20717                           
 20718                           ;UI.c: 529: cur_state = 1022;
 20719                           
 20720                           ;incstack = 0
 20721  004FAE  0E03               	movlw	3
 20722  004FB0  0100               	movlb	0	; () banked
 20723  004FB2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20724  004FB4  0EFE               	movlw	254
 20725  004FB6  6FEC               	movwf	_cur_state& (0+255),b
 20726                           
 20727                           ; BSR set to: 0
 20728                           ;UI.c: 530: lcdInst(0b10000000);;
 20729  004FB8  0E80               	movlw	128
 20730  004FBA  EC7A  F029         	call	i2_lcdInst
 20731                           
 20732                           ;UI.c: 531: printf("LOG 2          <");
 20733  004FBE  0E80               	movlw	low STR_42
 20734  004FC0  6E0D               	movwf	i2printf@f,c
 20735  004FC2  0EFD               	movlw	high STR_42
 20736  004FC4  6E0E               	movwf	i2printf@f+1,c
 20737  004FC6  ECE5  F00E         	call	i2_printf	;wreg free
 20738                           
 20739                           ;UI.c: 532: lcdInst(0b11000000);;
 20740  004FCA  0EC0               	movlw	192
 20741  004FCC  EC7A  F029         	call	i2_lcdInst
 20742                           
 20743                           ;UI.c: 533: printf("LOG 3           ");
 20744  004FD0  0EE7               	movlw	low STR_44
 20745  004FD2  6E0D               	movwf	i2printf@f,c
 20746  004FD4  0EFC               	movlw	high STR_44
 20747  004FD6  6E0E               	movwf	i2printf@f+1,c
 20748  004FD8  ECE5  F00E         	call	i2_printf	;wreg free
 20749  004FDC  0012               	return		;funcret
 20750  004FDE                     __end_of_change_state_to_logs_22:
 20751                           	opt stack 0
 20752                           pclatu	equ	0xFFB
 20753                           pclath	equ	0xFFA
 20754                           tblptru	equ	0xFF8
 20755                           tblptrh	equ	0xFF7
 20756                           tblptrl	equ	0xFF6
 20757                           tablat	equ	0xFF5
 20758                           prodh	equ	0xFF4
 20759                           prodl	equ	0xFF3
 20760                           intcon	equ	0xFF2
 20761                           intcon2	equ	0xFF1
 20762                           intcon3	equ	0xFF0
 20763                           indf0	equ	0xFEF
 20764                           postinc0	equ	0xFEE
 20765                           fsr0h	equ	0xFEA
 20766                           fsr0l	equ	0xFE9
 20767                           wreg	equ	0xFE8
 20768                           postdec1	equ	0xFE5
 20769                           fsr1h	equ	0xFE2
 20770                           fsr1l	equ	0xFE1
 20771                           indf2	equ	0xFDF
 20772                           postinc2	equ	0xFDE
 20773                           postdec2	equ	0xFDD
 20774                           fsr2h	equ	0xFDA
 20775                           fsr2l	equ	0xFD9
 20776                           status	equ	0xFD8
 20777                           
 20778 ;; *************** function _change_state_to_logs_12 *****************
 20779 ;; Defined at:
 20780 ;;		line 521 in file "UI.c"
 20781 ;; Parameters:    Size  Location     Type
 20782 ;;		None
 20783 ;; Auto vars:     Size  Location     Type
 20784 ;;		None
 20785 ;; Return value:  Size  Location     Type
 20786 ;;                  1    wreg      void 
 20787 ;; Registers used:
 20788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20789 ;; Tracked objects:
 20790 ;;		On entry : 0/0
 20791 ;;		On exit  : 0/0
 20792 ;;		Unchanged: 0/0
 20793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;Total ram usage:        0 bytes
 20799 ;; Hardware stack levels used:    1
 20800 ;; Hardware stack levels required when called:    3
 20801 ;; This function calls:
 20802 ;;		i2_lcdInst
 20803 ;;		i2_printf
 20804 ;; This function is called by:
 20805 ;;		_updateMenu
 20806 ;;		_inputHandler
 20807 ;; This function uses a non-reentrant model
 20808 ;;
 20809                           
 20810                           	psect	text75
 20811  004FDE                     __ptext75:
 20812                           	opt stack 0
 20813  004FDE                     _change_state_to_logs_12:
 20814                           	opt stack 18
 20815                           
 20816                           ;UI.c: 522: cur_state = 1012;
 20817                           
 20818                           ;incstack = 0
 20819  004FDE  0E03               	movlw	3
 20820  004FE0  0100               	movlb	0	; () banked
 20821  004FE2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20822  004FE4  0EF4               	movlw	244
 20823  004FE6  6FEC               	movwf	_cur_state& (0+255),b
 20824                           
 20825                           ; BSR set to: 0
 20826                           ;UI.c: 523: lcdInst(0b10000000);;
 20827  004FE8  0E80               	movlw	128
 20828  004FEA  EC7A  F029         	call	i2_lcdInst
 20829                           
 20830                           ;UI.c: 524: printf("LOG 1           ");
 20831  004FEE  0EC5               	movlw	low STR_41
 20832  004FF0  6E0D               	movwf	i2printf@f,c
 20833  004FF2  0EFC               	movlw	high STR_41
 20834  004FF4  6E0E               	movwf	i2printf@f+1,c
 20835  004FF6  ECE5  F00E         	call	i2_printf	;wreg free
 20836                           
 20837                           ;UI.c: 525: lcdInst(0b11000000);;
 20838  004FFA  0EC0               	movlw	192
 20839  004FFC  EC7A  F029         	call	i2_lcdInst
 20840                           
 20841                           ;UI.c: 526: printf("LOG 2          <");
 20842  005000  0E80               	movlw	low STR_42
 20843  005002  6E0D               	movwf	i2printf@f,c
 20844  005004  0EFD               	movlw	high STR_42
 20845  005006  6E0E               	movwf	i2printf@f+1,c
 20846  005008  ECE5  F00E         	call	i2_printf	;wreg free
 20847  00500C  0012               	return		;funcret
 20848  00500E                     __end_of_change_state_to_logs_12:
 20849                           	opt stack 0
 20850                           pclatu	equ	0xFFB
 20851                           pclath	equ	0xFFA
 20852                           tblptru	equ	0xFF8
 20853                           tblptrh	equ	0xFF7
 20854                           tblptrl	equ	0xFF6
 20855                           tablat	equ	0xFF5
 20856                           prodh	equ	0xFF4
 20857                           prodl	equ	0xFF3
 20858                           intcon	equ	0xFF2
 20859                           intcon2	equ	0xFF1
 20860                           intcon3	equ	0xFF0
 20861                           indf0	equ	0xFEF
 20862                           postinc0	equ	0xFEE
 20863                           fsr0h	equ	0xFEA
 20864                           fsr0l	equ	0xFE9
 20865                           wreg	equ	0xFE8
 20866                           postdec1	equ	0xFE5
 20867                           fsr1h	equ	0xFE2
 20868                           fsr1l	equ	0xFE1
 20869                           indf2	equ	0xFDF
 20870                           postinc2	equ	0xFDE
 20871                           postdec2	equ	0xFDD
 20872                           fsr2h	equ	0xFDA
 20873                           fsr2l	equ	0xFD9
 20874                           status	equ	0xFD8
 20875                           
 20876 ;; *************** function _change_state_to_logs_11 *****************
 20877 ;; Defined at:
 20878 ;;		line 514 in file "UI.c"
 20879 ;; Parameters:    Size  Location     Type
 20880 ;;		None
 20881 ;; Auto vars:     Size  Location     Type
 20882 ;;		None
 20883 ;; Return value:  Size  Location     Type
 20884 ;;                  1    wreg      void 
 20885 ;; Registers used:
 20886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20887 ;; Tracked objects:
 20888 ;;		On entry : 0/0
 20889 ;;		On exit  : 0/0
 20890 ;;		Unchanged: 0/0
 20891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;Total ram usage:        0 bytes
 20897 ;; Hardware stack levels used:    1
 20898 ;; Hardware stack levels required when called:    3
 20899 ;; This function calls:
 20900 ;;		i2_lcdInst
 20901 ;;		i2_printf
 20902 ;; This function is called by:
 20903 ;;		_updateMenu
 20904 ;;		_inputHandler
 20905 ;; This function uses a non-reentrant model
 20906 ;;
 20907                           
 20908                           	psect	text76
 20909  00500E                     __ptext76:
 20910                           	opt stack 0
 20911  00500E                     _change_state_to_logs_11:
 20912                           	opt stack 18
 20913                           
 20914                           ;UI.c: 515: cur_state = 1011;
 20915                           
 20916                           ;incstack = 0
 20917  00500E  0E03               	movlw	3
 20918  005010  0100               	movlb	0	; () banked
 20919  005012  6FED               	movwf	(_cur_state+1)& (0+255),b
 20920  005014  0EF3               	movlw	243
 20921  005016  6FEC               	movwf	_cur_state& (0+255),b
 20922                           
 20923                           ; BSR set to: 0
 20924                           ;UI.c: 516: lcdInst(0b10000000);;
 20925  005018  0E80               	movlw	128
 20926  00501A  EC7A  F029         	call	i2_lcdInst
 20927                           
 20928                           ;UI.c: 517: printf("LOG 1          <");
 20929  00501E  0E6F               	movlw	low STR_39
 20930  005020  6E0D               	movwf	i2printf@f,c
 20931  005022  0EFD               	movlw	high STR_39
 20932  005024  6E0E               	movwf	i2printf@f+1,c
 20933  005026  ECE5  F00E         	call	i2_printf	;wreg free
 20934                           
 20935                           ;UI.c: 518: lcdInst(0b11000000);;
 20936  00502A  0EC0               	movlw	192
 20937  00502C  EC7A  F029         	call	i2_lcdInst
 20938                           
 20939                           ;UI.c: 519: printf("LOG 2           ");
 20940  005030  0ED6               	movlw	low STR_40
 20941  005032  6E0D               	movwf	i2printf@f,c
 20942  005034  0EFC               	movlw	high STR_40
 20943  005036  6E0E               	movwf	i2printf@f+1,c
 20944  005038  ECE5  F00E         	call	i2_printf	;wreg free
 20945  00503C  0012               	return		;funcret
 20946  00503E                     __end_of_change_state_to_logs_11:
 20947                           	opt stack 0
 20948                           pclatu	equ	0xFFB
 20949                           pclath	equ	0xFFA
 20950                           tblptru	equ	0xFF8
 20951                           tblptrh	equ	0xFF7
 20952                           tblptrl	equ	0xFF6
 20953                           tablat	equ	0xFF5
 20954                           prodh	equ	0xFF4
 20955                           prodl	equ	0xFF3
 20956                           intcon	equ	0xFF2
 20957                           intcon2	equ	0xFF1
 20958                           intcon3	equ	0xFF0
 20959                           indf0	equ	0xFEF
 20960                           postinc0	equ	0xFEE
 20961                           fsr0h	equ	0xFEA
 20962                           fsr0l	equ	0xFE9
 20963                           wreg	equ	0xFE8
 20964                           postdec1	equ	0xFE5
 20965                           fsr1h	equ	0xFE2
 20966                           fsr1l	equ	0xFE1
 20967                           indf2	equ	0xFDF
 20968                           postinc2	equ	0xFDE
 20969                           postdec2	equ	0xFDD
 20970                           fsr2h	equ	0xFDA
 20971                           fsr2l	equ	0xFD9
 20972                           status	equ	0xFD8
 20973                           
 20974 ;; *************** function _dispLogs *****************
 20975 ;; Defined at:
 20976 ;;		line 467 in file "UI.c"
 20977 ;; Parameters:    Size  Location     Type
 20978 ;;  myLog           2   17[COMRAM] int 
 20979 ;; Auto vars:     Size  Location     Type
 20980 ;;		None
 20981 ;; Return value:  Size  Location     Type
 20982 ;;                  1    wreg      void 
 20983 ;; Registers used:
 20984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20985 ;; Tracked objects:
 20986 ;;		On entry : 0/0
 20987 ;;		On exit  : 0/0
 20988 ;;		Unchanged: 0/0
 20989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;Total ram usage:        2 bytes
 20995 ;; Hardware stack levels used:    1
 20996 ;; Hardware stack levels required when called:    2
 20997 ;; This function calls:
 20998 ;;		_retrieveLog
 20999 ;; This function is called by:
 21000 ;;		_updateMenu
 21001 ;; This function uses a non-reentrant model
 21002 ;;
 21003                           
 21004                           	psect	text77
 21005  0051B8                     __ptext77:
 21006                           	opt stack 0
 21007  0051B8                     _dispLogs:
 21008                           	opt stack 20
 21009                           
 21010                           ;UI.c: 468: logstate = 1;
 21011                           
 21012                           ;incstack = 0
 21013  0051B8  0E00               	movlw	0
 21014  0051BA  0100               	movlb	0	; () banked
 21015  0051BC  6FF7               	movwf	(_logstate+1)& (0+255),b
 21016  0051BE  0E01               	movlw	1
 21017  0051C0  6FF6               	movwf	_logstate& (0+255),b
 21018                           
 21019                           ; BSR set to: 0
 21020                           ;UI.c: 469: log = myLog;
 21021  0051C2  C012  F0F2         	movff	dispLogs@myLog,_log
 21022  0051C6  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 21023                           
 21024                           ; BSR set to: 0
 21025                           ;UI.c: 470: retrieveLog(myLog - 1);
 21026  0051CA  0EFF               	movlw	255
 21027  0051CC  2412               	addwf	dispLogs@myLog,w,c
 21028  0051CE  6E07               	movwf	retrieveLog@logNum,c
 21029  0051D0  0EFF               	movlw	255
 21030  0051D2  2013               	addwfc	dispLogs@myLog+1,w,c
 21031  0051D4  6E08               	movwf	retrieveLog@logNum+1,c
 21032  0051D6  ECAD  F01D         	call	_retrieveLog	;wreg free
 21033  0051DA  0012               	return		;funcret
 21034  0051DC                     __end_of_dispLogs:
 21035                           	opt stack 0
 21036                           pclatu	equ	0xFFB
 21037                           pclath	equ	0xFFA
 21038                           tblptru	equ	0xFF8
 21039                           tblptrh	equ	0xFF7
 21040                           tblptrl	equ	0xFF6
 21041                           tablat	equ	0xFF5
 21042                           prodh	equ	0xFF4
 21043                           prodl	equ	0xFF3
 21044                           intcon	equ	0xFF2
 21045                           intcon2	equ	0xFF1
 21046                           intcon3	equ	0xFF0
 21047                           indf0	equ	0xFEF
 21048                           postinc0	equ	0xFEE
 21049                           fsr0h	equ	0xFEA
 21050                           fsr0l	equ	0xFE9
 21051                           wreg	equ	0xFE8
 21052                           postdec1	equ	0xFE5
 21053                           fsr1h	equ	0xFE2
 21054                           fsr1l	equ	0xFE1
 21055                           indf2	equ	0xFDF
 21056                           postinc2	equ	0xFDE
 21057                           postdec2	equ	0xFDD
 21058                           fsr2h	equ	0xFDA
 21059                           fsr2l	equ	0xFD9
 21060                           status	equ	0xFD8
 21061                           
 21062 ;; *************** function _retrieveLog *****************
 21063 ;; Defined at:
 21064 ;;		line 134 in file "EEPROM.c"
 21065 ;; Parameters:    Size  Location     Type
 21066 ;;  logNum          2    6[COMRAM] int 
 21067 ;; Auto vars:     Size  Location     Type
 21068 ;;  i               2   13[COMRAM] int 
 21069 ;;  addr            2   15[COMRAM] unsigned short 
 21070 ;;  byte3           1   12[COMRAM] unsigned char 
 21071 ;;  byte2           1   11[COMRAM] unsigned char 
 21072 ;;  byte1           1   10[COMRAM] unsigned char 
 21073 ;; Return value:  Size  Location     Type
 21074 ;;                  1    wreg      void 
 21075 ;; Registers used:
 21076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21077 ;; Tracked objects:
 21078 ;;		On entry : 0/0
 21079 ;;		On exit  : 0/0
 21080 ;;		Unchanged: 0/0
 21081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21086 ;;Total ram usage:       11 bytes
 21087 ;; Hardware stack levels used:    1
 21088 ;; Hardware stack levels required when called:    1
 21089 ;; This function calls:
 21090 ;;		i2_EEPROM_read
 21091 ;;		i2___wmul
 21092 ;; This function is called by:
 21093 ;;		_dispLogs
 21094 ;; This function uses a non-reentrant model
 21095 ;;
 21096                           
 21097                           	psect	text78
 21098  003B5A                     __ptext78:
 21099                           	opt stack 0
 21100  003B5A                     _retrieveLog:
 21101                           	opt stack 20
 21102                           
 21103                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21104                           
 21105                           ;incstack = 0
 21106  003B5A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21107  003B5E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21108  003B62  0E00               	movlw	0
 21109  003B64  6E04               	movwf	i2___wmul@multiplicand+1,c
 21110  003B66  0E0B               	movlw	11
 21111  003B68  6E03               	movwf	i2___wmul@multiplicand,c
 21112  003B6A  ECB6  F028         	call	i2___wmul	;wreg free
 21113  003B6E  0E01               	movlw	1
 21114  003B70  2401               	addwf	?i2___wmul,w,c
 21115  003B72  6E10               	movwf	retrieveLog@addr,c
 21116  003B74  0E00               	movlw	0
 21117  003B76  2002               	addwfc	?i2___wmul+1,w,c
 21118  003B78  6E11               	movwf	retrieveLog@addr+1,c
 21119                           
 21120                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21121  003B7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21122  003B7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21123  003B82  EC46  F029         	call	i2_EEPROM_read	;wreg free
 21124  003B86  6E0B               	movwf	retrieveLog@byte1,c
 21125                           
 21126                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21127  003B88  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21128  003B8C  0E80               	movlw	128
 21129  003B8E  1609               	andwf	??_retrieveLog,f,c
 21130  003B90  5009               	movf	??_retrieveLog,w,c
 21131  003B92  6E63               	movwf	_log_completion,c
 21132  003B94  6A64               	clrf	_log_completion+1,c
 21133                           
 21134                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21135  003B96  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21136  003B9A  0E0F               	movlw	15
 21137  003B9C  1609               	andwf	??_retrieveLog,f,c
 21138  003B9E  5009               	movf	??_retrieveLog,w,c
 21139  003BA0  0101               	movlb	1	; () banked
 21140  003BA2  6F3F               	movwf	_log_count_total& (0+255),b
 21141  003BA4  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21142                           
 21143                           ; BSR set to: 1
 21144                           ;EEPROM.c: 146: addr++;
 21145  003BA6  4A10               	infsnz	retrieveLog@addr,f,c
 21146  003BA8  2A11               	incf	retrieveLog@addr+1,f,c
 21147                           
 21148                           ; BSR set to: 1
 21149                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21150  003BAA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21151  003BAE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21152  003BB2  EC46  F029         	call	i2_EEPROM_read	;wreg free
 21153  003BB6  6E0C               	movwf	retrieveLog@byte2,c
 21154                           
 21155                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21156  003BB8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21157  003BBC  3A09               	swapf	??_retrieveLog,f,c
 21158  003BBE  0E0F               	movlw	15
 21159  003BC0  1609               	andwf	??_retrieveLog,f,c
 21160  003BC2  0E0F               	movlw	15
 21161  003BC4  1609               	andwf	??_retrieveLog,f,c
 21162  003BC6  5009               	movf	??_retrieveLog,w,c
 21163  003BC8  6E69               	movwf	_log_count_pop_no_tab,c
 21164  003BCA  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21165                           
 21166                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21167  003BCC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21168  003BD0  0E0F               	movlw	15
 21169  003BD2  1609               	andwf	??_retrieveLog,f,c
 21170  003BD4  5009               	movf	??_retrieveLog,w,c
 21171  003BD6  6E6B               	movwf	_log_count_pop_w_tab,c
 21172  003BD8  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21173                           
 21174                           ;EEPROM.c: 152: addr++;
 21175  003BDA  4A10               	infsnz	retrieveLog@addr,f,c
 21176  003BDC  2A11               	incf	retrieveLog@addr+1,f,c
 21177                           
 21178                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21179  003BDE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21180  003BE2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21181  003BE6  EC46  F029         	call	i2_EEPROM_read	;wreg free
 21182  003BEA  6E0D               	movwf	retrieveLog@byte3,c
 21183                           
 21184                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21185  003BEC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21186  003BF0  3A09               	swapf	??_retrieveLog,f,c
 21187  003BF2  0E0F               	movlw	15
 21188  003BF4  1609               	andwf	??_retrieveLog,f,c
 21189  003BF6  0E0F               	movlw	15
 21190  003BF8  1609               	andwf	??_retrieveLog,f,c
 21191  003BFA  5009               	movf	??_retrieveLog,w,c
 21192  003BFC  6E67               	movwf	_log_count_can_w_lab,c
 21193  003BFE  6A68               	clrf	_log_count_can_w_lab+1,c
 21194                           
 21195                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21196  003C00  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21197  003C04  0E0F               	movlw	15
 21198  003C06  1609               	andwf	??_retrieveLog,f,c
 21199  003C08  5009               	movf	??_retrieveLog,w,c
 21200  003C0A  6E65               	movwf	_log_count_can_no_lab,c
 21201  003C0C  6A66               	clrf	_log_count_can_no_lab+1,c
 21202                           
 21203                           ;EEPROM.c: 156: addr++;
 21204  003C0E  4A10               	infsnz	retrieveLog@addr,f,c
 21205  003C10  2A11               	incf	retrieveLog@addr+1,f,c
 21206                           
 21207                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21208  003C12  0E00               	movlw	0
 21209  003C14  6E0F               	movwf	retrieveLog@i+1,c
 21210  003C16  0E00               	movlw	0
 21211  003C18  6E0E               	movwf	retrieveLog@i,c
 21212  003C1A                     i2l6792:
 21213  003C1A  BE0F               	btfsc	retrieveLog@i+1,7,c
 21214  003C1C  D006               	goto	i2l6796
 21215  003C1E  500F               	movf	retrieveLog@i+1,w,c
 21216  003C20  E11E               	bnz	i2l6804
 21217  003C22  0E07               	movlw	7
 21218  003C24  5C0E               	subwf	retrieveLog@i,w,c
 21219  003C26  B0D8               	btfsc	status,0,c
 21220  003C28  D01A               	goto	i2l6804
 21221  003C2A                     i2l6796:
 21222                           
 21223                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21224  003C2A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21225  003C2E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21226  003C32  EC46  F029         	call	i2_EEPROM_read	;wreg free
 21227  003C36  6E09               	movwf	??_retrieveLog& (0+255),c
 21228  003C38  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21229  003C3A  90D8               	bcf	status,0,c
 21230  003C3C  340E               	rlcf	retrieveLog@i,w,c
 21231  003C3E  6ED9               	movwf	fsr2l,c
 21232  003C40  340F               	rlcf	retrieveLog@i+1,w,c
 21233  003C42  6EDA               	movwf	fsr2h,c
 21234  003C44  0E00               	movlw	low _log_startTime
 21235  003C46  26D9               	addwf	fsr2l,f,c
 21236  003C48  0E01               	movlw	high _log_startTime
 21237  003C4A  22DA               	addwfc	fsr2h,f,c
 21238  003C4C  C009  FFDE         	movff	??_retrieveLog,postinc2
 21239  003C50  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21240                           
 21241                           ;EEPROM.c: 161: addr++;
 21242  003C54  4A10               	infsnz	retrieveLog@addr,f,c
 21243  003C56  2A11               	incf	retrieveLog@addr+1,f,c
 21244  003C58  4A0E               	infsnz	retrieveLog@i,f,c
 21245  003C5A  2A0F               	incf	retrieveLog@i+1,f,c
 21246  003C5C  D7DE               	goto	i2l6792
 21247  003C5E                     i2l6804:
 21248                           
 21249                           ;EEPROM.c: 162: }
 21250                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21251  003C5E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21252  003C62  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21253  003C66  EC46  F029         	call	i2_EEPROM_read	;wreg free
 21254  003C6A  6E09               	movwf	??_retrieveLog& (0+255),c
 21255  003C6C  5009               	movf	??_retrieveLog,w,c
 21256  003C6E  0100               	movlb	0	; () banked
 21257  003C70  6FF4               	movwf	_log_total_time& (0+255),b
 21258  003C72  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21259                           
 21260                           ; BSR set to: 0
 21261  003C74  0012               	return		;funcret
 21262  003C76                     __end_of_retrieveLog:
 21263                           	opt stack 0
 21264                           pclatu	equ	0xFFB
 21265                           pclath	equ	0xFFA
 21266                           tblptru	equ	0xFF8
 21267                           tblptrh	equ	0xFF7
 21268                           tblptrl	equ	0xFF6
 21269                           tablat	equ	0xFF5
 21270                           prodh	equ	0xFF4
 21271                           prodl	equ	0xFF3
 21272                           intcon	equ	0xFF2
 21273                           intcon2	equ	0xFF1
 21274                           intcon3	equ	0xFF0
 21275                           indf0	equ	0xFEF
 21276                           postinc0	equ	0xFEE
 21277                           fsr0h	equ	0xFEA
 21278                           fsr0l	equ	0xFE9
 21279                           wreg	equ	0xFE8
 21280                           postdec1	equ	0xFE5
 21281                           fsr1h	equ	0xFE2
 21282                           fsr1l	equ	0xFE1
 21283                           indf2	equ	0xFDF
 21284                           postinc2	equ	0xFDE
 21285                           postdec2	equ	0xFDD
 21286                           fsr2h	equ	0xFDA
 21287                           fsr2l	equ	0xFD9
 21288                           status	equ	0xFD8
 21289                           
 21290 ;; *************** function i2_EEPROM_read *****************
 21291 ;; Defined at:
 21292 ;;		line 68 in file "EEPROM.c"
 21293 ;; Parameters:    Size  Location     Type
 21294 ;;  address         2    0[COMRAM] unsigned short 
 21295 ;; Auto vars:     Size  Location     Type
 21296 ;;		None
 21297 ;; Return value:  Size  Location     Type
 21298 ;;                  1    wreg      unsigned char 
 21299 ;; Registers used:
 21300 ;;		wreg, status,2
 21301 ;; Tracked objects:
 21302 ;;		On entry : 0/0
 21303 ;;		On exit  : 0/0
 21304 ;;		Unchanged: 0/0
 21305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21310 ;;Total ram usage:        2 bytes
 21311 ;; Hardware stack levels used:    1
 21312 ;; This function calls:
 21313 ;;		Nothing
 21314 ;; This function is called by:
 21315 ;;		_retrieveLog
 21316 ;; This function uses a non-reentrant model
 21317 ;;
 21318                           
 21319                           	psect	text79
 21320  00528C                     __ptext79:
 21321                           	opt stack 0
 21322  00528C                     i2_EEPROM_read:
 21323                           	opt stack 20
 21324                           
 21325                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21326                           
 21327                           ; BSR set to: 0
 21328                           ;incstack = 0
 21329  00528C  5002               	movf	i2EEPROM_read@address+1,w,c
 21330  00528E  6EAA               	movwf	4010,c	;volatile
 21331                           
 21332                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21333  005290  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21334                           
 21335                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21336  005294  9EA6               	bcf	4006,7,c	;volatile
 21337                           
 21338                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21339  005296  9CA6               	bcf	4006,6,c	;volatile
 21340                           
 21341                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21342  005298  80A6               	bsf	4006,0,c	;volatile
 21343  00529A                     i2l1043:
 21344  00529A  B0A6               	btfsc	4006,0,c	;volatile
 21345  00529C  D7FE               	goto	i2l1043
 21346                           
 21347                           ;EEPROM.c: 81: return EEDATA;
 21348  00529E  50A8               	movf	4008,w,c	;volatile
 21349  0052A0  0012               	return	
 21350  0052A2                     __end_ofi2_EEPROM_read:
 21351                           	opt stack 0
 21352                           pclatu	equ	0xFFB
 21353                           pclath	equ	0xFFA
 21354                           tblptru	equ	0xFF8
 21355                           tblptrh	equ	0xFF7
 21356                           tblptrl	equ	0xFF6
 21357                           tablat	equ	0xFF5
 21358                           prodh	equ	0xFF4
 21359                           prodl	equ	0xFF3
 21360                           intcon	equ	0xFF2
 21361                           intcon2	equ	0xFF1
 21362                           intcon3	equ	0xFF0
 21363                           indf0	equ	0xFEF
 21364                           postinc0	equ	0xFEE
 21365                           fsr0h	equ	0xFEA
 21366                           fsr0l	equ	0xFE9
 21367                           wreg	equ	0xFE8
 21368                           postdec1	equ	0xFE5
 21369                           fsr1h	equ	0xFE2
 21370                           fsr1l	equ	0xFE1
 21371                           indf2	equ	0xFDF
 21372                           postinc2	equ	0xFDE
 21373                           postdec2	equ	0xFDD
 21374                           fsr2h	equ	0xFDA
 21375                           fsr2l	equ	0xFD9
 21376                           status	equ	0xFD8
 21377                           
 21378 ;; *************** function _printSortTimer *****************
 21379 ;; Defined at:
 21380 ;;		line 439 in file "sort.c"
 21381 ;; Parameters:    Size  Location     Type
 21382 ;;		None
 21383 ;; Auto vars:     Size  Location     Type
 21384 ;;  i               2   70[COMRAM] int 
 21385 ;;  i               2   72[COMRAM] int 
 21386 ;;  curTime        14   44[COMRAM] int [7]
 21387 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21388 ;;  sec             2   64[COMRAM] int 
 21389 ;;  min             2   62[COMRAM] int 
 21390 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21391 ;;  start_sec       2   58[COMRAM] unsigned int 
 21392 ;; Return value:  Size  Location     Type
 21393 ;;                  1    wreg      void 
 21394 ;; Registers used:
 21395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21396 ;; Tracked objects:
 21397 ;;		On entry : 0/0
 21398 ;;		On exit  : 0/0
 21399 ;;		Unchanged: 0/0
 21400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21402 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;Total ram usage:       33 bytes
 21406 ;; Hardware stack levels used:    1
 21407 ;; Hardware stack levels required when called:    3
 21408 ;; This function calls:
 21409 ;;		i2___lwdiv
 21410 ;;		i2___lwmod
 21411 ;;		i2___wmul
 21412 ;;		i2_delay_ms
 21413 ;;		i2_getRTC
 21414 ;;		i2_lcdInst
 21415 ;;		i2_printf
 21416 ;; This function is called by:
 21417 ;;		_handler
 21418 ;; This function uses a non-reentrant model
 21419 ;;
 21420                           
 21421                           	psect	text80
 21422  0029C0                     __ptext80:
 21423                           	opt stack 0
 21424  0029C0                     _printSortTimer:
 21425                           	opt stack 20
 21426                           
 21427                           ;sort.c: 440: getRTC();
 21428                           
 21429                           ;incstack = 0
 21430  0029C0  ECF5  F023         	call	i2_getRTC	;wreg free
 21431                           
 21432                           ;sort.c: 441: int curTime[7];
 21433                           ;sort.c: 442: for(int i = 0; i < 7; i++){
 21434  0029C4  0E00               	movlw	0
 21435  0029C6  6E4A               	movwf	printSortTimer@i+1,c
 21436  0029C8  0E00               	movlw	0
 21437  0029CA  6E49               	movwf	printSortTimer@i,c
 21438  0029CC                     i2l9208:
 21439  0029CC  BE4A               	btfsc	printSortTimer@i+1,7,c
 21440  0029CE  D006               	goto	i2l9212
 21441  0029D0  504A               	movf	printSortTimer@i+1,w,c
 21442  0029D2  E131               	bnz	i2l9218
 21443  0029D4  0E07               	movlw	7
 21444  0029D6  5C49               	subwf	printSortTimer@i,w,c
 21445  0029D8  B0D8               	btfsc	status,0,c
 21446  0029DA  D02D               	goto	i2l9218
 21447  0029DC                     i2l9212:
 21448                           
 21449                           ;sort.c: 443: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21450  0029DC  0E1C               	movlw	low _time
 21451  0029DE  2449               	addwf	printSortTimer@i,w,c
 21452  0029E0  6ED9               	movwf	fsr2l,c
 21453  0029E2  0E01               	movlw	high _time
 21454  0029E4  204A               	addwfc	printSortTimer@i+1,w,c
 21455  0029E6  6EDA               	movwf	fsr2h,c
 21456  0029E8  50DF               	movf	indf2,w,c
 21457  0029EA  6E2A               	movwf	??_printSortTimer& (0+255),c
 21458  0029EC  3A2A               	swapf	??_printSortTimer,f,c
 21459  0029EE  0E0F               	movlw	15
 21460  0029F0  162A               	andwf	??_printSortTimer,f,c
 21461  0029F2  0E0F               	movlw	15
 21462  0029F4  162A               	andwf	??_printSortTimer,f,c
 21463  0029F6  502A               	movf	??_printSortTimer,w,c
 21464  0029F8  0D0A               	mullw	10
 21465  0029FA  0E1C               	movlw	low _time
 21466  0029FC  2449               	addwf	printSortTimer@i,w,c
 21467  0029FE  6ED9               	movwf	fsr2l,c
 21468  002A00  0E01               	movlw	high _time
 21469  002A02  204A               	addwfc	printSortTimer@i+1,w,c
 21470  002A04  6EDA               	movwf	fsr2h,c
 21471  002A06  50DF               	movf	indf2,w,c
 21472  002A08  0B0F               	andlw	15
 21473  002A0A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21474  002A0C  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21475  002A0E  50F3               	movf	prodl,w,c
 21476  002A10  262B               	addwf	??_printSortTimer+1,f,c
 21477  002A12  50F4               	movf	prodh,w,c
 21478  002A14  222C               	addwfc	??_printSortTimer+2,f,c
 21479  002A16  90D8               	bcf	status,0,c
 21480  002A18  3449               	rlcf	printSortTimer@i,w,c
 21481  002A1A  6ED9               	movwf	fsr2l,c
 21482  002A1C  344A               	rlcf	printSortTimer@i+1,w,c
 21483  002A1E  6EDA               	movwf	fsr2h,c
 21484  002A20  0E2D               	movlw	low printSortTimer@curTime
 21485  002A22  26D9               	addwf	fsr2l,f,c
 21486  002A24  0E00               	movlw	high printSortTimer@curTime
 21487  002A26  22DA               	addwfc	fsr2h,f,c
 21488  002A28  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21489  002A2C  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21490  002A30  4A49               	infsnz	printSortTimer@i,f,c
 21491  002A32  2A4A               	incf	printSortTimer@i+1,f,c
 21492  002A34  D7CB               	goto	i2l9208
 21493  002A36                     i2l9218:
 21494                           
 21495                           ;sort.c: 444: }
 21496                           ;sort.c: 445: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21497  002A36  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21498  002A3A  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21499  002A3E  0E00               	movlw	0
 21500  002A40  6E04               	movwf	i2___wmul@multiplicand+1,c
 21501  002A42  0E3C               	movlw	60
 21502  002A44  6E03               	movwf	i2___wmul@multiplicand,c
 21503  002A46  ECB6  F028         	call	i2___wmul	;wreg free
 21504  002A4A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21505  002A4E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21506  002A52  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21507  002A56  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21508  002A5A  0E0E               	movlw	14
 21509  002A5C  6E04               	movwf	i2___wmul@multiplicand+1,c
 21510  002A5E  0E10               	movlw	16
 21511  002A60  6E03               	movwf	i2___wmul@multiplicand,c
 21512  002A62  ECB6  F028         	call	i2___wmul	;wreg free
 21513  002A66  5001               	movf	?i2___wmul,w,c
 21514  002A68  262A               	addwf	??_printSortTimer,f,c
 21515  002A6A  5002               	movf	?i2___wmul+1,w,c
 21516  002A6C  222B               	addwfc	??_printSortTimer+1,f,c
 21517  002A6E  0101               	movlb	1	; () banked
 21518  002A70  510E               	movf	_startTime& (0+255),w,b
 21519  002A72  242A               	addwf	??_printSortTimer,w,c
 21520  002A74  6E3B               	movwf	printSortTimer@start_sec,c
 21521  002A76  0101               	movlb	1	; () banked
 21522  002A78  510F               	movf	(_startTime+1)& (0+255),w,b
 21523  002A7A  202B               	addwfc	??_printSortTimer+1,w,c
 21524  002A7C  6E3C               	movwf	printSortTimer@start_sec+1,c
 21525                           
 21526                           ;sort.c: 446: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21527  002A7E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21528  002A82  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21529  002A86  0E00               	movlw	0
 21530  002A88  6E04               	movwf	i2___wmul@multiplicand+1,c
 21531  002A8A  0E3C               	movlw	60
 21532  002A8C  6E03               	movwf	i2___wmul@multiplicand,c
 21533  002A8E  ECB6  F028         	call	i2___wmul	;wreg free
 21534  002A92  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21535  002A96  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21536  002A9A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21537  002A9E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21538  002AA2  0E0E               	movlw	14
 21539  002AA4  6E04               	movwf	i2___wmul@multiplicand+1,c
 21540  002AA6  0E10               	movlw	16
 21541  002AA8  6E03               	movwf	i2___wmul@multiplicand,c
 21542  002AAA  ECB6  F028         	call	i2___wmul	;wreg free
 21543  002AAE  5001               	movf	?i2___wmul,w,c
 21544  002AB0  262A               	addwf	??_printSortTimer,f,c
 21545  002AB2  5002               	movf	?i2___wmul+1,w,c
 21546  002AB4  222B               	addwfc	??_printSortTimer+1,f,c
 21547  002AB6  502D               	movf	printSortTimer@curTime,w,c
 21548  002AB8  242A               	addwf	??_printSortTimer,w,c
 21549  002ABA  6E3D               	movwf	printSortTimer@cur_sec,c
 21550  002ABC  502E               	movf	printSortTimer@curTime+1,w,c
 21551  002ABE  202B               	addwfc	??_printSortTimer+1,w,c
 21552  002AC0  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21553                           
 21554                           ;sort.c: 447: unsigned int timeDiff = cur_sec - start_sec;
 21555  002AC2  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21556  002AC6  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21557  002ACA  1E2A               	comf	??_printSortTimer,f,c
 21558  002ACC  1E2B               	comf	??_printSortTimer+1,f,c
 21559  002ACE  4A2A               	infsnz	??_printSortTimer,f,c
 21560  002AD0  2A2B               	incf	??_printSortTimer+1,f,c
 21561  002AD2  503D               	movf	printSortTimer@cur_sec,w,c
 21562  002AD4  242A               	addwf	??_printSortTimer,w,c
 21563  002AD6  6E45               	movwf	printSortTimer@timeDiff,c
 21564  002AD8  503E               	movf	printSortTimer@cur_sec+1,w,c
 21565  002ADA  202B               	addwfc	??_printSortTimer+1,w,c
 21566  002ADC  6E46               	movwf	printSortTimer@timeDiff+1,c
 21567                           
 21568                           ;sort.c: 449: total_time = timeDiff;
 21569  002ADE  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21570  002AE2  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21571                           
 21572                           ;sort.c: 451: if(f_most_recent_sort_time){
 21573  002AE6  0101               	movlb	1	; () banked
 21574  002AE8  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21575  002AEA  0101               	movlb	1	; () banked
 21576  002AEC  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21577  002AEE  B4D8               	btfsc	status,2,c
 21578  002AF0  D009               	goto	i2l9230
 21579                           
 21580                           ; BSR set to: 1
 21581                           ;sort.c: 452: most_recent_sort_time = total_time;
 21582  002AF2  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21583  002AF6  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21584                           
 21585                           ; BSR set to: 1
 21586                           ;sort.c: 453: f_most_recent_sort_time = 0;
 21587  002AFA  0E00               	movlw	0
 21588  002AFC  0101               	movlb	1	; () banked
 21589  002AFE  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21590  002B00  0E00               	movlw	0
 21591  002B02  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21592  002B04                     i2l9230:
 21593                           
 21594                           ; BSR set to: 1
 21595                           ;sort.c: 454: }
 21596                           ;sort.c: 456: if(total_time - most_recent_sort_time == 20){
 21597  002B04  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21598  002B08  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21599  002B0C  1E2A               	comf	??_printSortTimer,f,c
 21600  002B0E  1E2B               	comf	??_printSortTimer+1,f,c
 21601  002B10  4A2A               	infsnz	??_printSortTimer,f,c
 21602  002B12  2A2B               	incf	??_printSortTimer+1,f,c
 21603  002B14  0100               	movlb	0	; () banked
 21604  002B16  51F8               	movf	_total_time& (0+255),w,b
 21605  002B18  262A               	addwf	??_printSortTimer,f,c
 21606  002B1A  0100               	movlb	0	; () banked
 21607  002B1C  51F9               	movf	(_total_time+1)& (0+255),w,b
 21608  002B1E  222B               	addwfc	??_printSortTimer+1,f,c
 21609  002B20  0E14               	movlw	20
 21610  002B22  182A               	xorwf	??_printSortTimer,w,c
 21611  002B24  102B               	iorwf	??_printSortTimer+1,w,c
 21612  002B26  A4D8               	btfss	status,2,c
 21613  002B28  D033               	goto	i2l9250
 21614                           
 21615                           ; BSR set to: 0
 21616                           ;sort.c: 457: LATBbits.LATB2 = 0;
 21617  002B2A  948A               	bcf	3978,2,c	;volatile
 21618                           
 21619                           ; BSR set to: 0
 21620                           ;sort.c: 458: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21621  002B2C  0E52               	movlw	82
 21622  002B2E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21623  002B30  0E2B               	movlw	43
 21624  002B32  6E2A               	movwf	??_printSortTimer& (0+255),c
 21625  002B34  0E00               	movlw	0
 21626  002B36                     i2u1012_47:
 21627  002B36  2EE8               	decfsz	wreg,f,c
 21628  002B38  D7FE               	bra	i2u1012_47
 21629  002B3A  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21630  002B3C  D7FC               	bra	i2u1012_47
 21631  002B3E  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21632  002B40  D7FA               	bra	i2u1012_47
 21633  002B42  D000               	nop2	
 21634                           
 21635                           ;sort.c: 459: for(int i=0; i<46; i++){
 21636  002B44  0E00               	movlw	0
 21637  002B46  6E48               	movwf	printSortTimer@i_1186+1,c
 21638  002B48  0E00               	movlw	0
 21639  002B4A  6E47               	movwf	printSortTimer@i_1186,c
 21640  002B4C  BE48               	btfsc	printSortTimer@i_1186+1,7,c
 21641  002B4E  D006               	goto	i2l9242
 21642  002B50  5048               	movf	printSortTimer@i_1186+1,w,c
 21643  002B52  E11D               	bnz	i2l847
 21644  002B54  0E2E               	movlw	46
 21645  002B56  5C47               	subwf	printSortTimer@i_1186,w,c
 21646  002B58  B0D8               	btfsc	status,0,c
 21647  002B5A  D019               	goto	i2l847
 21648  002B5C                     i2l9242:
 21649                           
 21650                           ;sort.c: 460: LATBbits.LATB2 = !LATBbits.LATB2;
 21651  002B5C  B48A               	btfsc	3978,2,c	;volatile
 21652  002B5E  D003               	goto	i2u830_40
 21653  002B60  6A2A               	clrf	??_printSortTimer& (0+255),c
 21654  002B62  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21655  002B64  D001               	goto	i2u831_48
 21656  002B66                     i2u830_40:
 21657  002B66  6A2A               	clrf	??_printSortTimer& (0+255),c
 21658  002B68                     i2u831_48:
 21659  002B68  462A               	rlncf	??_printSortTimer,f,c
 21660  002B6A  462A               	rlncf	??_printSortTimer,f,c
 21661  002B6C  508A               	movf	3978,w,c	;volatile
 21662  002B6E  182A               	xorwf	??_printSortTimer,w,c
 21663  002B70  0BFB               	andlw	-5
 21664  002B72  182A               	xorwf	??_printSortTimer,w,c
 21665  002B74  6E8A               	movwf	3978,c	;volatile
 21666                           
 21667                           ;sort.c: 461: delay_ms(45-i);
 21668  002B76  5047               	movf	printSortTimer@i_1186,w,c
 21669  002B78  0800               	sublw	0
 21670  002B7A  0F2D               	addlw	45
 21671  002B7C  EC1F  F029         	call	i2_delay_ms
 21672  002B80  4A47               	infsnz	printSortTimer@i_1186,f,c
 21673  002B82  2A48               	incf	printSortTimer@i_1186+1,f,c
 21674  002B84  BE48               	btfsc	printSortTimer@i_1186+1,7,c
 21675  002B86  D7EA               	goto	i2l9242
 21676  002B88  5048               	movf	printSortTimer@i_1186+1,w,c
 21677  002B8A  E101               	bnz	i2u832_40
 21678  002B8C  D7E3               	goto	L13
 21679  002B8E                     i2u832_40:
 21680  002B8E                     i2l847:
 21681                           
 21682                           ;sort.c: 462: }
 21683                           ;sort.c: 463: LATBbits.LATB2 = 1;
 21684  002B8E  848A               	bsf	3978,2,c	;volatile
 21685  002B90                     i2l9250:
 21686                           
 21687                           ;sort.c: 464: }
 21688                           ;sort.c: 466: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21689  002B90  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21690  002B94  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21691  002B98  1E2A               	comf	??_printSortTimer,f,c
 21692  002B9A  1E2B               	comf	??_printSortTimer+1,f,c
 21693  002B9C  4A2A               	infsnz	??_printSortTimer,f,c
 21694  002B9E  2A2B               	incf	??_printSortTimer+1,f,c
 21695  002BA0  0100               	movlb	0	; () banked
 21696  002BA2  51F8               	movf	_total_time& (0+255),w,b
 21697  002BA4  262A               	addwf	??_printSortTimer,f,c
 21698  002BA6  0100               	movlb	0	; () banked
 21699  002BA8  51F9               	movf	(_total_time+1)& (0+255),w,b
 21700  002BAA  222B               	addwfc	??_printSortTimer+1,f,c
 21701  002BAC  0E2A               	movlw	42
 21702  002BAE  182A               	xorwf	??_printSortTimer,w,c
 21703  002BB0  102B               	iorwf	??_printSortTimer+1,w,c
 21704  002BB2  B4D8               	btfsc	status,2,c
 21705  002BB4  D007               	goto	i2l9254
 21706                           
 21707                           ; BSR set to: 0
 21708  002BB6  0EB3               	movlw	179
 21709  002BB8  0100               	movlb	0	; () banked
 21710  002BBA  19F8               	xorwf	_total_time& (0+255),w,b
 21711  002BBC  0100               	movlb	0	; () banked
 21712  002BBE  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21713  002BC0  A4D8               	btfss	status,2,c
 21714  002BC2  D003               	goto	i2l9256
 21715  002BC4                     i2l9254:
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;sort.c: 467: machine_state = DoneSorting_state;
 21719  002BC4  0E02               	movlw	2
 21720  002BC6  0100               	movlb	0	; () banked
 21721  002BC8  6FFC               	movwf	_machine_state& (0+255),b
 21722  002BCA                     i2l9256:
 21723                           
 21724                           ; BSR set to: 0
 21725                           ;sort.c: 469: }
 21726                           ;sort.c: 471: int min = (timeDiff % 3600) / 60;
 21727  002BCA  0E0E               	movlw	14
 21728  002BCC  6E04               	movwf	i2___lwmod@divisor+1,c
 21729  002BCE  0E10               	movlw	16
 21730  002BD0  6E03               	movwf	i2___lwmod@divisor,c
 21731  002BD2  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21732  002BD6  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21733  002BDA  EC6E  F026         	call	i2___lwmod	;wreg free
 21734  002BDE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21735  002BE2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21736  002BE6  0E00               	movlw	0
 21737  002BE8  6E09               	movwf	i2___lwdiv@divisor+1,c
 21738  002BEA  0E3C               	movlw	60
 21739  002BEC  6E08               	movwf	i2___lwdiv@divisor,c
 21740  002BEE  ECAF  F025         	call	i2___lwdiv	;wreg free
 21741  002BF2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21742  002BF6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21743                           
 21744                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21745  002BFA  0E0E               	movlw	14
 21746  002BFC  6E04               	movwf	i2___lwmod@divisor+1,c
 21747  002BFE  0E10               	movlw	16
 21748  002C00  6E03               	movwf	i2___lwmod@divisor,c
 21749  002C02  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21750  002C06  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21751  002C0A  EC6E  F026         	call	i2___lwmod	;wreg free
 21752  002C0E  C001  F043         	movff	?i2___lwmod,_printSortTimer$2548
 21753  002C12  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2548+1
 21754                           
 21755                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21756  002C16  C043  F001         	movff	_printSortTimer$2548,i2___lwmod@dividend
 21757  002C1A  C044  F002         	movff	_printSortTimer$2548+1,i2___lwmod@dividend+1
 21758  002C1E  0E00               	movlw	0
 21759  002C20  6E04               	movwf	i2___lwmod@divisor+1,c
 21760  002C22  0E3C               	movlw	60
 21761  002C24  6E03               	movwf	i2___lwmod@divisor,c
 21762  002C26  EC6E  F026         	call	i2___lwmod	;wreg free
 21763  002C2A  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21764  002C2E  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21765                           
 21766                           ;sort.c: 474: lcdInst(0b10000000);;
 21767  002C32  0E80               	movlw	128
 21768  002C34  EC7A  F029         	call	i2_lcdInst
 21769                           
 21770                           ;sort.c: 475: printf("SORTING...");
 21771  002C38  0E7C               	movlw	low STR_64
 21772  002C3A  6E0D               	movwf	i2printf@f,c
 21773  002C3C  0EFF               	movlw	high STR_64
 21774  002C3E  6E0E               	movwf	i2printf@f+1,c
 21775  002C40  ECE5  F00E         	call	i2_printf	;wreg free
 21776                           
 21777                           ;sort.c: 476: lcdInst(0b11000000);;
 21778  002C44  0EC0               	movlw	192
 21779  002C46  EC7A  F029         	call	i2_lcdInst
 21780                           
 21781                           ;sort.c: 477: printf("TIME %d:%02d", min, sec);
 21782  002C4A  0E42               	movlw	low STR_65
 21783  002C4C  6E0D               	movwf	i2printf@f,c
 21784  002C4E  0EFF               	movlw	high STR_65
 21785  002C50  6E0E               	movwf	i2printf@f+1,c
 21786  002C52  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21787  002C56  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21788  002C5A  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21789  002C5E  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21790  002C62  ECE5  F00E         	call	i2_printf	;wreg free
 21791  002C66  0012               	return		;funcret
 21792  002C68                     __end_of_printSortTimer:
 21793                           	opt stack 0
 21794                           pclatu	equ	0xFFB
 21795                           pclath	equ	0xFFA
 21796                           tblptru	equ	0xFF8
 21797                           tblptrh	equ	0xFF7
 21798                           tblptrl	equ	0xFF6
 21799                           tablat	equ	0xFF5
 21800                           prodh	equ	0xFF4
 21801                           prodl	equ	0xFF3
 21802                           intcon	equ	0xFF2
 21803                           intcon2	equ	0xFF1
 21804                           intcon3	equ	0xFF0
 21805                           indf0	equ	0xFEF
 21806                           postinc0	equ	0xFEE
 21807                           fsr0h	equ	0xFEA
 21808                           fsr0l	equ	0xFE9
 21809                           wreg	equ	0xFE8
 21810                           postdec1	equ	0xFE5
 21811                           fsr1h	equ	0xFE2
 21812                           fsr1l	equ	0xFE1
 21813                           indf2	equ	0xFDF
 21814                           postinc2	equ	0xFDE
 21815                           postdec2	equ	0xFDD
 21816                           fsr2h	equ	0xFDA
 21817                           fsr2l	equ	0xFD9
 21818                           status	equ	0xFD8
 21819                           
 21820 ;; *************** function i2_printf *****************
 21821 ;; Defined at:
 21822 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21823 ;; Parameters:    Size  Location     Type
 21824 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21825 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21826 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21827 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21828 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21829 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21830 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21831 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21832 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21833 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21834 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21835 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21836 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21837 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21838 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21839 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21840 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21841 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21842 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21843 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21844 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21845 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21846 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21847 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21848 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21849 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21850 ;; Auto vars:     Size  Location     Type
 21851 ;;  printf          4    0        struct .
 21852 ;;  printf          2   39[COMRAM] int 
 21853 ;;  printf          2   35[COMRAM] unsigned int 
 21854 ;;  printf          2   33[COMRAM] unsigned int 
 21855 ;;  printf          2   31[COMRAM] PTR void [1]
 21856 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21857 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21858 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21859 ;;  printf          1   38[COMRAM] char 
 21860 ;;  printf          1   37[COMRAM] unsigned char 
 21861 ;;  printf          1   28[COMRAM] char 
 21862 ;; Return value:  Size  Location     Type
 21863 ;;                  2   12[COMRAM] int 
 21864 ;; Registers used:
 21865 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21866 ;; Tracked objects:
 21867 ;;		On entry : 0/0
 21868 ;;		On exit  : 0/0
 21869 ;;		Unchanged: 0/0
 21870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21871 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21872 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21873 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21874 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21875 ;;Total ram usage:       29 bytes
 21876 ;; Hardware stack levels used:    1
 21877 ;; Hardware stack levels required when called:    2
 21878 ;; This function calls:
 21879 ;;		i2___lwdiv
 21880 ;;		i2___lwmod
 21881 ;;		i2___wmul
 21882 ;;		i2_isdigit
 21883 ;;		i2_putch
 21884 ;; This function is called by:
 21885 ;;		_change_state_to_menu_11
 21886 ;;		_change_state_to_menu_23
 21887 ;;		_change_state_to_logs_11
 21888 ;;		_change_state_to_logs_12
 21889 ;;		_change_state_to_logs_22
 21890 ;;		_change_state_to_logs_23
 21891 ;;		_change_state_to_logs_33
 21892 ;;		_change_state_to_logs_34
 21893 ;;		_printSortTimer
 21894 ;;		i2_change_state_to_menu_start
 21895 ;;		i2_change_state_to_menu_12
 21896 ;;		i2_change_state_to_menu_22
 21897 ;;		i2_printRTC
 21898 ;; This function uses a non-reentrant model
 21899 ;;
 21900                           
 21901                           	psect	text81
 21902  001DCA                     __ptext81:
 21903                           	opt stack 0
 21904  001DCA                     i2_printf:
 21905                           	opt stack 19
 21906                           
 21907                           ;doprnt.c: 466: va_list ap;
 21908                           ;doprnt.c: 499: signed char c;
 21909                           ;doprnt.c: 501: int width;
 21910                           ;doprnt.c: 506: signed char prec;
 21911                           ;doprnt.c: 508: unsigned char flag;
 21912                           ;doprnt.c: 523: union {
 21913                           ;doprnt.c: 524: unsigned long vd;
 21914                           ;doprnt.c: 525: double integ;
 21915                           ;doprnt.c: 526: } tmpval;
 21916                           ;doprnt.c: 528: unsigned int val;
 21917                           ;doprnt.c: 529: unsigned len;
 21918                           ;doprnt.c: 530: const char * cp;
 21919                           ;doprnt.c: 533: *ap = __va_start();
 21920                           
 21921                           ;incstack = 0
 21922  001DCA  0E0F               	movlw	low (?i2_printf+2)
 21923  001DCC  6E20               	movwf	i2printf@ap,c
 21924  001DCE  0E00               	movlw	high (?i2_printf+2)
 21925  001DD0  6E21               	movwf	i2printf@ap+1,c
 21926                           
 21927                           ;doprnt.c: 536: while(c = *f++) {
 21928  001DD2  D1A4               	goto	i2l6616
 21929  001DD4                     i2l6486:
 21930                           
 21931                           ;doprnt.c: 538: if(c != '%')
 21932  001DD4  0E25               	movlw	37
 21933  001DD6  1827               	xorwf	i2printf@c,w,c
 21934  001DD8  B4D8               	btfsc	status,2,c
 21935  001DDA  D004               	goto	i2l6490
 21936                           
 21937                           ;doprnt.c: 540: {
 21938                           ;doprnt.c: 541: (putch(c) );
 21939  001DDC  5027               	movf	i2printf@c,w,c
 21940  001DDE  EC74  F029         	call	i2_putch
 21941                           
 21942                           ;doprnt.c: 542: continue;
 21943  001DE2  D19C               	goto	i2l6616
 21944  001DE4                     i2l6490:
 21945                           
 21946                           ;doprnt.c: 543: }
 21947                           ;doprnt.c: 546: width = 0;
 21948  001DE4  0E00               	movlw	0
 21949  001DE6  6E29               	movwf	i2printf@width+1,c
 21950  001DE8  0E00               	movlw	0
 21951  001DEA  6E28               	movwf	i2printf@width,c
 21952                           
 21953                           ;doprnt.c: 548: flag = 0;
 21954  001DEC  0E00               	movlw	0
 21955  001DEE  6E26               	movwf	i2printf@flag,c
 21956                           
 21957                           ;doprnt.c: 551: switch(*f) {
 21958                           
 21959                           ;doprnt.c: 550: for(;;) {
 21960  001DF0  D003               	goto	i2l6496
 21961  001DF2                     i2l6492:
 21962                           
 21963                           ;doprnt.c: 580: flag |= 0x04;
 21964  001DF2  8426               	bsf	i2printf@flag,2,c
 21965                           
 21966                           ;doprnt.c: 581: f++;
 21967  001DF4  4A0D               	infsnz	i2printf@f,f,c
 21968  001DF6  2A0E               	incf	i2printf@f+1,f,c
 21969  001DF8                     i2l6496:
 21970  001DF8  C00D  FFF6         	movff	i2printf@f,tblptrl
 21971  001DFC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21972  001E00                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21973  001E00  6AF8               	clrf	tblptru,c
 21974  001E02                     	endif
 21975  001E02                     	if	0	;tblptru may be non-zero
 21976  001E02                     	endif
 21977  001E02  0008               	tblrd		*
 21978  001E04  50F5               	movf	tablat,w,c
 21979                           
 21980                           ; Switch size 1, requested type "space"
 21981                           ; Number of cases is 1, Range of values is 48 to 48
 21982                           ; switch strategies available:
 21983                           ; Name         Instructions Cycles
 21984                           ; simple_byte            4     3 (average)
 21985                           ;	Chosen strategy is simple_byte
 21986  001E06  0A30               	xorlw	48	; case 48
 21987  001E08  B4D8               	btfsc	status,2,c
 21988  001E0A  D7F3               	goto	i2l6492
 21989                           
 21990                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21991                           
 21992                           ;doprnt.c: 586: }
 21993                           
 21994                           ;doprnt.c: 585: break;
 21995  001E0C  C00D  FFF6         	movff	i2printf@f,tblptrl
 21996  001E10  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21997  001E14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21998  001E14  6AF8               	clrf	tblptru,c
 21999  001E16                     	endif
 22000  001E16                     	if	0	;tblptru may be non-zero
 22001  001E16                     	endif
 22002  001E16  0008               	tblrd		*
 22003  001E18  50F5               	movf	tablat,w,c
 22004  001E1A  EC10  F029         	call	i2_isdigit
 22005  001E1E  A0D8               	btfss	status,0,c
 22006  001E20  D0A6               	goto	i2l6544
 22007                           
 22008                           ;doprnt.c: 598: width = 0;
 22009  001E22  0E00               	movlw	0
 22010  001E24  6E29               	movwf	i2printf@width+1,c
 22011  001E26  0E00               	movlw	0
 22012  001E28  6E28               	movwf	i2printf@width,c
 22013  001E2A                     i2l6502:
 22014                           
 22015                           ;doprnt.c: 600: width *= 10;
 22016  001E2A  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22017  001E2E  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22018  001E32  0E00               	movlw	0
 22019  001E34  6E04               	movwf	i2___wmul@multiplicand+1,c
 22020  001E36  0E0A               	movlw	10
 22021  001E38  6E03               	movwf	i2___wmul@multiplicand,c
 22022  001E3A  ECB6  F028         	call	i2___wmul	;wreg free
 22023  001E3E  C001  F028         	movff	?i2___wmul,i2printf@width
 22024  001E42  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22025                           
 22026                           ;doprnt.c: 601: width += *f++ - '0';
 22027  001E46  0ED0               	movlw	208
 22028  001E48  6E19               	movwf	??i2_printf& (0+255),c
 22029  001E4A  0EFF               	movlw	255
 22030  001E4C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22031  001E4E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22032  001E52  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22033  001E56                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22034  001E56  6AF8               	clrf	tblptru,c
 22035  001E58                     	endif
 22036  001E58                     	if	0	;tblptru may be non-zero
 22037  001E58                     	endif
 22038  001E58  0008               	tblrd		*
 22039  001E5A  50F5               	movf	tablat,w,c
 22040  001E5C  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22041  001E5E  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22042  001E60  5019               	movf	??i2_printf,w,c
 22043  001E62  261B               	addwf	??i2_printf+2,f,c
 22044  001E64  501A               	movf	??i2_printf+1,w,c
 22045  001E66  221C               	addwfc	??i2_printf+3,f,c
 22046  001E68  501B               	movf	??i2_printf+2,w,c
 22047  001E6A  2628               	addwf	i2printf@width,f,c
 22048  001E6C  501C               	movf	??i2_printf+3,w,c
 22049  001E6E  2229               	addwfc	i2printf@width+1,f,c
 22050  001E70  4A0D               	infsnz	i2printf@f,f,c
 22051  001E72  2A0E               	incf	i2printf@f+1,f,c
 22052                           
 22053                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22054  001E74  C00D  FFF6         	movff	i2printf@f,tblptrl
 22055  001E78  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22056  001E7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22057  001E7C  6AF8               	clrf	tblptru,c
 22058  001E7E                     	endif
 22059  001E7E                     	if	0	;tblptru may be non-zero
 22060  001E7E                     	endif
 22061  001E7E  0008               	tblrd		*
 22062  001E80  50F5               	movf	tablat,w,c
 22063  001E82  EC10  F029         	call	i2_isdigit
 22064  001E86  A0D8               	btfss	status,0,c
 22065  001E88  D072               	goto	i2l6544
 22066  001E8A  D7CF               	goto	i2l6502
 22067  001E8C                     i2l6510:
 22068                           
 22069                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22070  001E8C  C020  FFD9         	movff	i2printf@ap,fsr2l
 22071  001E90  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22072  001E94  CFDE F01E          	movff	postinc2,i2printf@cp
 22073  001E98  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22074  001E9C  0E02               	movlw	2
 22075  001E9E  2620               	addwf	i2printf@ap,f,c
 22076  001EA0  0E00               	movlw	0
 22077  001EA2  2221               	addwfc	i2printf@ap+1,f,c
 22078                           
 22079                           ;doprnt.c: 740: if(!cp)
 22080  001EA4  501E               	movf	i2printf@cp,w,c
 22081  001EA6  101F               	iorwf	i2printf@cp+1,w,c
 22082  001EA8  A4D8               	btfss	status,2,c
 22083  001EAA  D004               	goto	i2l6518
 22084                           
 22085                           ;doprnt.c: 741: cp = "(null)";
 22086  001EAC  0EB6               	movlw	low STR_126
 22087  001EAE  6E1E               	movwf	i2printf@cp,c
 22088  001EB0  0EFF               	movlw	high STR_126
 22089  001EB2  6E1F               	movwf	i2printf@cp+1,c
 22090  001EB4                     i2l6518:
 22091                           
 22092                           ;doprnt.c: 745: len = 0;
 22093  001EB4  0E00               	movlw	0
 22094  001EB6  6E23               	movwf	i2printf@len+1,c
 22095  001EB8  0E00               	movlw	0
 22096  001EBA  6E22               	movwf	i2printf@len,c
 22097                           
 22098                           ;doprnt.c: 746: while(cp[len])
 22099  001EBC  D002               	goto	i2l6522
 22100  001EBE                     i2l6520:
 22101                           
 22102                           ;doprnt.c: 747: len++;
 22103  001EBE  4A22               	infsnz	i2printf@len,f,c
 22104  001EC0  2A23               	incf	i2printf@len+1,f,c
 22105  001EC2                     i2l6522:
 22106  001EC2  5022               	movf	i2printf@len,w,c
 22107  001EC4  241E               	addwf	i2printf@cp,w,c
 22108  001EC6  6E19               	movwf	??i2_printf& (0+255),c
 22109  001EC8  5023               	movf	i2printf@len+1,w,c
 22110  001ECA  201F               	addwfc	i2printf@cp+1,w,c
 22111  001ECC  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22112  001ECE  C019  FFF6         	movff	??i2_printf,tblptrl
 22113  001ED2  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22114  001ED6  0E00               	movlw	low (__mediumconst shr (0+16))
 22115  001ED8  6EF8               	movwf	tblptru,c
 22116  001EDA  0E0F               	movlw	(high __ramtop+-1)
 22117  001EDC  64F7               	cpfsgt	tblptrh,c
 22118  001EDE  D003               	bra	i2u498_47
 22119  001EE0  0008               	tblrd		*
 22120  001EE2  50F5               	movf	tablat,w,c
 22121  001EE4  D005               	bra	i2u498_40
 22122  001EE6                     i2u498_47:
 22123  001EE6  CFF6 FFE9          	movff	tblptrl,fsr0l
 22124  001EEA  CFF7 FFEA          	movff	tblptrh,fsr0h
 22125  001EEE  50EF               	movf	indf0,w,c
 22126  001EF0                     i2u498_40:
 22127  001EF0  0900               	iorlw	0
 22128  001EF2  A4D8               	btfss	status,2,c
 22129  001EF4  D7E4               	goto	i2l6520
 22130                           
 22131                           ;doprnt.c: 757: if(width > len)
 22132  001EF6  5028               	movf	i2printf@width,w,c
 22133  001EF8  5C22               	subwf	i2printf@len,w,c
 22134  001EFA  5029               	movf	i2printf@width+1,w,c
 22135  001EFC  5823               	subwfb	i2printf@len+1,w,c
 22136  001EFE  B0D8               	btfsc	status,0,c
 22137  001F00  D005               	goto	i2l6528
 22138                           
 22139                           ;doprnt.c: 758: width -= len;
 22140  001F02  5022               	movf	i2printf@len,w,c
 22141  001F04  5E28               	subwf	i2printf@width,f,c
 22142  001F06  5023               	movf	i2printf@len+1,w,c
 22143  001F08  5A29               	subwfb	i2printf@width+1,f,c
 22144  001F0A  D008               	goto	i2l6532
 22145  001F0C                     i2l6528:
 22146                           
 22147                           ;doprnt.c: 759: else
 22148                           ;doprnt.c: 760: width = 0;
 22149  001F0C  0E00               	movlw	0
 22150  001F0E  6E29               	movwf	i2printf@width+1,c
 22151  001F10  0E00               	movlw	0
 22152  001F12  6E28               	movwf	i2printf@width,c
 22153                           
 22154                           ;doprnt.c: 764: while(width--)
 22155  001F14  D003               	goto	i2l6532
 22156  001F16                     i2l6530:
 22157                           
 22158                           ;doprnt.c: 765: (putch(' ') );
 22159  001F16  0E20               	movlw	32
 22160  001F18  EC74  F029         	call	i2_putch
 22161  001F1C                     i2l6532:
 22162  001F1C  0628               	decf	i2printf@width,f,c
 22163  001F1E  A0D8               	btfss	status,0,c
 22164  001F20  0629               	decf	i2printf@width+1,f,c
 22165  001F22  2828               	incf	i2printf@width,w,c
 22166  001F24  E1F8               	bnz	i2l6530
 22167  001F26  2829               	incf	i2printf@width+1,w,c
 22168  001F28  B4D8               	btfsc	status,2,c
 22169  001F2A  D016               	goto	i2l6538
 22170  001F2C  D7F4               	goto	i2l6530
 22171  001F2E                     i2l6534:
 22172                           
 22173                           ;doprnt.c: 768: (putch(*cp++) );
 22174  001F2E  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22175  001F32  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22176  001F36  0E00               	movlw	low (__mediumconst shr (0+16))
 22177  001F38  6EF8               	movwf	tblptru,c
 22178  001F3A  0E0F               	movlw	(high __ramtop+-1)
 22179  001F3C  64F7               	cpfsgt	tblptrh,c
 22180  001F3E  D003               	bra	i2u502_47
 22181  001F40  0008               	tblrd		*
 22182  001F42  50F5               	movf	tablat,w,c
 22183  001F44  D005               	bra	i2u502_40
 22184  001F46                     i2u502_47:
 22185  001F46  CFF6 FFE9          	movff	tblptrl,fsr0l
 22186  001F4A  CFF7 FFEA          	movff	tblptrh,fsr0h
 22187  001F4E  50EF               	movf	indf0,w,c
 22188  001F50                     i2u502_40:
 22189  001F50  EC74  F029         	call	i2_putch
 22190  001F54  4A1E               	infsnz	i2printf@cp,f,c
 22191  001F56  2A1F               	incf	i2printf@cp+1,f,c
 22192  001F58                     i2l6538:
 22193  001F58  0622               	decf	i2printf@len,f,c
 22194  001F5A  A0D8               	btfss	status,0,c
 22195  001F5C  0623               	decf	i2printf@len+1,f,c
 22196  001F5E  2822               	incf	i2printf@len,w,c
 22197  001F60  E1E6               	bnz	i2l6534
 22198  001F62  2823               	incf	i2printf@len+1,w,c
 22199  001F64  B4D8               	btfsc	status,2,c
 22200  001F66  D0DA               	goto	i2l6616
 22201  001F68  D7E2               	goto	i2l6534
 22202  001F6A                     i2l6540:
 22203                           
 22204                           ;doprnt.c: 818: flag |= 0x40;
 22205  001F6A  8C26               	bsf	i2printf@flag,6,c
 22206                           
 22207                           ;doprnt.c: 822: }
 22208                           
 22209                           ;doprnt.c: 819: break;
 22210  001F6C  D01B               	goto	i2l1410
 22211  001F6E                     i2l6544:
 22212  001F6E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22213  001F72  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22214  001F76  4A0D               	infsnz	i2printf@f,f,c
 22215  001F78  2A0E               	incf	i2printf@f+1,f,c
 22216  001F7A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22217  001F7A  6AF8               	clrf	tblptru,c
 22218  001F7C                     	endif
 22219  001F7C                     	if	0	;tblptru may be non-zero
 22220  001F7C                     	endif
 22221  001F7C  0008               	tblrd		*
 22222  001F7E  CFF5 F027          	movff	tablat,i2printf@c
 22223  001F82  5027               	movf	i2printf@c,w,c
 22224                           
 22225                           ; Switch size 1, requested type "space"
 22226                           ; Number of cases is 5, Range of values is 0 to 117
 22227                           ; switch strategies available:
 22228                           ; Name         Instructions Cycles
 22229                           ; simple_byte           16     9 (average)
 22230                           ;	Chosen strategy is simple_byte
 22231  001F84  0A00               	xorlw	0	; case 0
 22232  001F86  B4D8               	btfsc	status,2,c
 22233  001F88  0012               	return	
 22234  001F8A  0A64               	xorlw	100	; case 100
 22235  001F8C  B4D8               	btfsc	status,2,c
 22236  001F8E  D00A               	goto	i2l1410
 22237  001F90  0A0D               	xorlw	13	; case 105
 22238  001F92  B4D8               	btfsc	status,2,c
 22239  001F94  D007               	goto	i2l1410
 22240  001F96  0A1A               	xorlw	26	; case 115
 22241  001F98  B4D8               	btfsc	status,2,c
 22242  001F9A  D778               	goto	i2l6510
 22243  001F9C  0A06               	xorlw	6	; case 117
 22244  001F9E  B4D8               	btfsc	status,2,c
 22245  001FA0  D7E4               	goto	i2l6540
 22246  001FA2  D0BC               	goto	i2l6616
 22247  001FA4                     i2l1410:
 22248                           
 22249                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22250  001FA4  BC26               	btfsc	i2printf@flag,6,c
 22251  001FA6  D015               	goto	i2l6556
 22252                           
 22253                           ;doprnt.c: 1253: {
 22254                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22255  001FA8  C020  FFD9         	movff	i2printf@ap,fsr2l
 22256  001FAC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22257  001FB0  CFDE F024          	movff	postinc2,i2printf@val
 22258  001FB4  CFDD F025          	movff	postdec2,i2printf@val+1
 22259  001FB8  0E02               	movlw	2
 22260  001FBA  2620               	addwf	i2printf@ap,f,c
 22261  001FBC  0E00               	movlw	0
 22262  001FBE  2221               	addwfc	i2printf@ap+1,f,c
 22263                           
 22264                           ;doprnt.c: 1261: if((int)val < 0) {
 22265  001FC0  AE25               	btfss	i2printf@val+1,7,c
 22266  001FC2  D013               	goto	i2l6560
 22267                           
 22268                           ;doprnt.c: 1262: flag |= 0x03;
 22269  001FC4  0E03               	movlw	3
 22270  001FC6  1226               	iorwf	i2printf@flag,f,c
 22271                           
 22272                           ;doprnt.c: 1263: val = -val;
 22273  001FC8  6C24               	negf	i2printf@val,c
 22274  001FCA  1E25               	comf	i2printf@val+1,f,c
 22275  001FCC  B0D8               	btfsc	status,0,c
 22276  001FCE  2A25               	incf	i2printf@val+1,f,c
 22277                           
 22278                           ;doprnt.c: 1264: }
 22279                           ;doprnt.c: 1266: }
 22280  001FD0  D00C               	goto	i2l6560
 22281  001FD2                     i2l6556:
 22282                           
 22283                           ;doprnt.c: 1268: else
 22284                           ;doprnt.c: 1273: {
 22285                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22286  001FD2  C020  FFD9         	movff	i2printf@ap,fsr2l
 22287  001FD6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22288  001FDA  CFDE F024          	movff	postinc2,i2printf@val
 22289  001FDE  CFDD F025          	movff	postdec2,i2printf@val+1
 22290  001FE2  0E02               	movlw	2
 22291  001FE4  2620               	addwf	i2printf@ap,f,c
 22292  001FE6  0E00               	movlw	0
 22293  001FE8  2221               	addwfc	i2printf@ap+1,f,c
 22294  001FEA                     i2l6560:
 22295                           
 22296                           ;doprnt.c: 1287: }
 22297                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22298  001FEA  0E01               	movlw	1
 22299  001FEC  6E27               	movwf	i2printf@c,c
 22300  001FEE                     i2l6562:
 22301  001FEE  0E05               	movlw	5
 22302  001FF0  1827               	xorwf	i2printf@c,w,c
 22303  001FF2  B4D8               	btfsc	status,2,c
 22304  001FF4  D015               	goto	i2l6574
 22305                           
 22306                           ;doprnt.c: 1306: if(val < dpowers[c])
 22307  001FF6  5027               	movf	i2printf@c,w,c
 22308  001FF8  0D02               	mullw	2
 22309  001FFA  0E00               	movlw	low _dpowers
 22310  001FFC  24F3               	addwf	prodl,w,c
 22311  001FFE  6EF6               	movwf	tblptrl,c
 22312  002000  0EFB               	movlw	high _dpowers
 22313  002002  20F4               	addwfc	prodh,w,c
 22314  002004  6EF7               	movwf	tblptrh,c
 22315  002006                     	if	1	;There are 3 active tblptr bytes
 22316  002006  6AF8               	clrf	tblptru,c
 22317  002008  0E00               	movlw	low (__mediumconst shr (0+16))
 22318  00200A  22F8               	addwfc	tblptru,f,c
 22319  00200C                     	endif
 22320  00200C  0009               	tblrd		*+
 22321  00200E  50F5               	movf	tablat,w,c
 22322  002010  5C24               	subwf	i2printf@val,w,c
 22323  002012  0009               	tblrd		*+
 22324  002014  50F5               	movf	tablat,w,c
 22325  002016  5825               	subwfb	i2printf@val+1,w,c
 22326  002018  A0D8               	btfss	status,0,c
 22327  00201A  D002               	goto	i2l6574
 22328                           
 22329                           ;doprnt.c: 1307: break;
 22330  00201C  2A27               	incf	i2printf@c,f,c
 22331  00201E  D7E7               	goto	i2l6562
 22332  002020                     i2l6574:
 22333                           
 22334                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22335  002020  5028               	movf	i2printf@width,w,c
 22336  002022  1029               	iorwf	i2printf@width+1,w,c
 22337  002024  B4D8               	btfsc	status,2,c
 22338  002026  D009               	goto	i2l6580
 22339  002028  C026  F019         	movff	i2printf@flag,??i2_printf
 22340  00202C  0E03               	movlw	3
 22341  00202E  1619               	andwf	??i2_printf,f,c
 22342  002030  B4D8               	btfsc	status,2,c
 22343  002032  D003               	goto	i2l6580
 22344                           
 22345                           ;doprnt.c: 1346: width--;
 22346  002034  0628               	decf	i2printf@width,f,c
 22347  002036  A0D8               	btfss	status,0,c
 22348  002038  0629               	decf	i2printf@width+1,f,c
 22349  00203A                     i2l6580:
 22350                           
 22351                           ;doprnt.c: 1381: if(width > c)
 22352  00203A  0E80               	movlw	128
 22353  00203C  BE27               	btfsc	i2printf@c,7,c
 22354  00203E  0E7F               	movlw	127
 22355  002040  6E19               	movwf	??i2_printf& (0+255),c
 22356  002042  5028               	movf	i2printf@width,w,c
 22357  002044  5C27               	subwf	i2printf@c,w,c
 22358  002046  5029               	movf	i2printf@width+1,w,c
 22359  002048  0A80               	xorlw	128
 22360  00204A  5819               	subwfb	??i2_printf& (0+255),w,c
 22361  00204C  B0D8               	btfsc	status,0,c
 22362  00204E  D007               	goto	i2l6584
 22363                           
 22364                           ;doprnt.c: 1382: width -= c;
 22365  002050  5027               	movf	i2printf@c,w,c
 22366  002052  5E28               	subwf	i2printf@width,f,c
 22367  002054  0E00               	movlw	0
 22368  002056  BE27               	btfsc	i2printf@c,7,c
 22369  002058  0EFF               	movlw	255
 22370  00205A  5A29               	subwfb	i2printf@width+1,f,c
 22371  00205C  D004               	goto	i2l6586
 22372  00205E                     i2l6584:
 22373                           
 22374                           ;doprnt.c: 1383: else
 22375                           ;doprnt.c: 1384: width = 0;
 22376  00205E  0E00               	movlw	0
 22377  002060  6E29               	movwf	i2printf@width+1,c
 22378  002062  0E00               	movlw	0
 22379  002064  6E28               	movwf	i2printf@width,c
 22380  002066                     i2l6586:
 22381                           
 22382                           ;doprnt.c: 1387: if(flag & 0x04) {
 22383  002066  A426               	btfss	i2printf@flag,2,c
 22384  002068  D014               	goto	i2l6598
 22385                           
 22386                           ;doprnt.c: 1392: if(flag & 0x03)
 22387  00206A  C026  F019         	movff	i2printf@flag,??i2_printf
 22388  00206E  0E03               	movlw	3
 22389  002070  1619               	andwf	??i2_printf,f,c
 22390  002072  B4D8               	btfsc	status,2,c
 22391  002074  D003               	goto	i2l6592
 22392                           
 22393                           ;doprnt.c: 1393: (putch('-') );
 22394  002076  0E2D               	movlw	45
 22395  002078  EC74  F029         	call	i2_putch
 22396  00207C                     i2l6592:
 22397                           
 22398                           ;doprnt.c: 1415: if(width)
 22399  00207C  5028               	movf	i2printf@width,w,c
 22400  00207E  1029               	iorwf	i2printf@width+1,w,c
 22401  002080  B4D8               	btfsc	status,2,c
 22402  002082  D01E               	goto	i2l6608
 22403                           
 22404                           ;doprnt.c: 1417: (putch('0') );
 22405                           
 22406                           ;doprnt.c: 1416: do
 22407  002084  0E30               	movlw	48
 22408  002086  EC74  F029         	call	i2_putch
 22409                           
 22410                           ;doprnt.c: 1418: while(--width);
 22411  00208A  0628               	decf	i2printf@width,f,c
 22412  00208C  A0D8               	btfss	status,0,c
 22413  00208E  0629               	decf	i2printf@width+1,f,c
 22414  002090  D7F5               	goto	i2l6592
 22415  002092                     i2l6598:
 22416                           
 22417                           ;doprnt.c: 1422: {
 22418                           ;doprnt.c: 1424: if(width
 22419                           ;doprnt.c: 1428: )
 22420  002092  5028               	movf	i2printf@width,w,c
 22421  002094  1029               	iorwf	i2printf@width+1,w,c
 22422  002096  B4D8               	btfsc	status,2,c
 22423  002098  D00A               	goto	i2l6604
 22424  00209A                     i2l6600:
 22425                           
 22426                           ;doprnt.c: 1430: (putch(' ') );
 22427  00209A  0E20               	movlw	32
 22428  00209C  EC74  F029         	call	i2_putch
 22429                           
 22430                           ;doprnt.c: 1431: while(--width);
 22431  0020A0  0628               	decf	i2printf@width,f,c
 22432  0020A2  A0D8               	btfss	status,0,c
 22433  0020A4  0629               	decf	i2printf@width+1,f,c
 22434  0020A6  5028               	movf	i2printf@width,w,c
 22435  0020A8  1029               	iorwf	i2printf@width+1,w,c
 22436  0020AA  A4D8               	btfss	status,2,c
 22437  0020AC  D7F6               	goto	i2l6600
 22438  0020AE                     i2l6604:
 22439                           
 22440                           ;doprnt.c: 1438: if(flag & 0x03)
 22441  0020AE  C026  F019         	movff	i2printf@flag,??i2_printf
 22442  0020B2  0E03               	movlw	3
 22443  0020B4  1619               	andwf	??i2_printf,f,c
 22444  0020B6  B4D8               	btfsc	status,2,c
 22445  0020B8  D003               	goto	i2l6608
 22446                           
 22447                           ;doprnt.c: 1439: (putch('-') );
 22448  0020BA  0E2D               	movlw	45
 22449  0020BC  EC74  F029         	call	i2_putch
 22450  0020C0                     i2l6608:
 22451                           
 22452                           ;doprnt.c: 1469: }
 22453                           ;doprnt.c: 1472: prec = c;
 22454  0020C0  C027  F01D         	movff	i2printf@c,i2printf@prec
 22455                           
 22456                           ;doprnt.c: 1474: while(prec--) {
 22457  0020C4  D027               	goto	i2l6614
 22458  0020C6                     i2l6610:
 22459                           
 22460                           ;doprnt.c: 1478: {
 22461                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22462  0020C6  501D               	movf	i2printf@prec,w,c
 22463  0020C8  0D02               	mullw	2
 22464  0020CA  0E00               	movlw	low _dpowers
 22465  0020CC  24F3               	addwf	prodl,w,c
 22466  0020CE  6EF6               	movwf	tblptrl,c
 22467  0020D0  0EFB               	movlw	high _dpowers
 22468  0020D2  20F4               	addwfc	prodh,w,c
 22469  0020D4  6EF7               	movwf	tblptrh,c
 22470  0020D6                     	if	1	;There are 3 active tblptr bytes
 22471  0020D6  6AF8               	clrf	tblptru,c
 22472  0020D8  0E00               	movlw	low (__mediumconst shr (0+16))
 22473  0020DA  22F8               	addwfc	tblptru,f,c
 22474  0020DC                     	endif
 22475  0020DC  0009               	tblrd		*+
 22476  0020DE  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22477  0020E2  000A               	tblrd		*-
 22478  0020E4  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22479  0020E8  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22480  0020EC  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22481  0020F0  ECAF  F025         	call	i2___lwdiv	;wreg free
 22482  0020F4  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22483  0020F8  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22484  0020FC  0E00               	movlw	0
 22485  0020FE  6E04               	movwf	i2___lwmod@divisor+1,c
 22486  002100  0E0A               	movlw	10
 22487  002102  6E03               	movwf	i2___lwmod@divisor,c
 22488  002104  EC6E  F026         	call	i2___lwmod	;wreg free
 22489  002108  5001               	movf	?i2___lwmod,w,c
 22490  00210A  0F30               	addlw	48
 22491  00210C  6E27               	movwf	i2printf@c,c
 22492                           
 22493                           ;doprnt.c: 1523: }
 22494                           ;doprnt.c: 1524: (putch(c) );
 22495  00210E  5027               	movf	i2printf@c,w,c
 22496  002110  EC74  F029         	call	i2_putch
 22497  002114                     i2l6614:
 22498  002114  061D               	decf	i2printf@prec,f,c
 22499  002116  281D               	incf	i2printf@prec,w,c
 22500  002118  A4D8               	btfss	status,2,c
 22501  00211A  D7D5               	goto	i2l6610
 22502  00211C                     i2l6616:
 22503  00211C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22504  002120  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22505  002124  4A0D               	infsnz	i2printf@f,f,c
 22506  002126  2A0E               	incf	i2printf@f+1,f,c
 22507  002128                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22508  002128  6AF8               	clrf	tblptru,c
 22509  00212A                     	endif
 22510  00212A                     	if	0	;tblptru may be non-zero
 22511  00212A                     	endif
 22512  00212A  0008               	tblrd		*
 22513  00212C  CFF5 F027          	movff	tablat,i2printf@c
 22514  002130  5027               	movf	i2printf@c,w,c
 22515  002132  B4D8               	btfsc	status,2,c
 22516  002134  0012               	return	
 22517  002136  D64E               	goto	i2l6486
 22518  002138                     __end_ofi2_printf:
 22519                           	opt stack 0
 22520                           pclatu	equ	0xFFB
 22521                           pclath	equ	0xFFA
 22522                           tblptru	equ	0xFF8
 22523                           tblptrh	equ	0xFF7
 22524                           tblptrl	equ	0xFF6
 22525                           tablat	equ	0xFF5
 22526                           prodh	equ	0xFF4
 22527                           prodl	equ	0xFF3
 22528                           intcon	equ	0xFF2
 22529                           intcon2	equ	0xFF1
 22530                           intcon3	equ	0xFF0
 22531                           indf0	equ	0xFEF
 22532                           postinc0	equ	0xFEE
 22533                           fsr0h	equ	0xFEA
 22534                           fsr0l	equ	0xFE9
 22535                           wreg	equ	0xFE8
 22536                           postdec1	equ	0xFE5
 22537                           fsr1h	equ	0xFE2
 22538                           fsr1l	equ	0xFE1
 22539                           indf2	equ	0xFDF
 22540                           postinc2	equ	0xFDE
 22541                           postdec2	equ	0xFDD
 22542                           fsr2h	equ	0xFDA
 22543                           fsr2l	equ	0xFD9
 22544                           status	equ	0xFD8
 22545                           
 22546 ;; *************** function i2_putch *****************
 22547 ;; Defined at:
 22548 ;;		line 20 in file "lcd.c"
 22549 ;; Parameters:    Size  Location     Type
 22550 ;;  data            1    wreg     unsigned char 
 22551 ;; Auto vars:     Size  Location     Type
 22552 ;;  data            1    2[COMRAM] unsigned char 
 22553 ;; Return value:  Size  Location     Type
 22554 ;;                  1    wreg      void 
 22555 ;; Registers used:
 22556 ;;		wreg, status,2, status,0, cstack
 22557 ;; Tracked objects:
 22558 ;;		On entry : 0/0
 22559 ;;		On exit  : 0/0
 22560 ;;		Unchanged: 0/0
 22561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22565 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22566 ;;Total ram usage:        1 bytes
 22567 ;; Hardware stack levels used:    1
 22568 ;; Hardware stack levels required when called:    1
 22569 ;; This function calls:
 22570 ;;		i2_lcdNibble
 22571 ;; This function is called by:
 22572 ;;		i2_printf
 22573 ;; This function uses a non-reentrant model
 22574 ;;
 22575                           
 22576                           	psect	text82
 22577  0052E8                     __ptext82:
 22578                           	opt stack 0
 22579  0052E8                     i2_putch:
 22580                           	opt stack 19
 22581                           
 22582                           ;incstack = 0
 22583                           ;i2putch@data stored from wreg
 22584  0052E8  6E03               	movwf	i2putch@data,c
 22585                           
 22586                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22587  0052EA  848C               	bsf	3980,2,c	;volatile
 22588                           
 22589                           ;lcd.c: 22: lcdNibble(data);
 22590  0052EC  5003               	movf	i2putch@data,w,c
 22591  0052EE  EC84  F025         	call	i2_lcdNibble
 22592  0052F2  0012               	return		;funcret
 22593  0052F4                     __end_ofi2_putch:
 22594                           	opt stack 0
 22595                           pclatu	equ	0xFFB
 22596                           pclath	equ	0xFFA
 22597                           tblptru	equ	0xFF8
 22598                           tblptrh	equ	0xFF7
 22599                           tblptrl	equ	0xFF6
 22600                           tablat	equ	0xFF5
 22601                           prodh	equ	0xFF4
 22602                           prodl	equ	0xFF3
 22603                           intcon	equ	0xFF2
 22604                           intcon2	equ	0xFF1
 22605                           intcon3	equ	0xFF0
 22606                           indf0	equ	0xFEF
 22607                           postinc0	equ	0xFEE
 22608                           fsr0h	equ	0xFEA
 22609                           fsr0l	equ	0xFE9
 22610                           wreg	equ	0xFE8
 22611                           postdec1	equ	0xFE5
 22612                           fsr1h	equ	0xFE2
 22613                           fsr1l	equ	0xFE1
 22614                           indf2	equ	0xFDF
 22615                           postinc2	equ	0xFDE
 22616                           postdec2	equ	0xFDD
 22617                           fsr2h	equ	0xFDA
 22618                           fsr2l	equ	0xFD9
 22619                           status	equ	0xFD8
 22620                           
 22621 ;; *************** function i2_isdigit *****************
 22622 ;; Defined at:
 22623 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22624 ;; Parameters:    Size  Location     Type
 22625 ;;  c               1    wreg     unsigned char 
 22626 ;; Auto vars:     Size  Location     Type
 22627 ;;  c               1    2[COMRAM] unsigned char 
 22628 ;; Return value:  Size  Location     Type
 22629 ;;		None               void
 22630 ;; Registers used:
 22631 ;;		wreg, status,2, status,0
 22632 ;; Tracked objects:
 22633 ;;		On entry : 0/0
 22634 ;;		On exit  : 0/0
 22635 ;;		Unchanged: 0/0
 22636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22641 ;;Total ram usage:        3 bytes
 22642 ;; Hardware stack levels used:    1
 22643 ;; This function calls:
 22644 ;;		Nothing
 22645 ;; This function is called by:
 22646 ;;		i2_printf
 22647 ;; This function uses a non-reentrant model
 22648 ;;
 22649                           
 22650                           	psect	text83
 22651  005220                     __ptext83:
 22652                           	opt stack 0
 22653  005220                     i2_isdigit:
 22654                           	opt stack 20
 22655                           
 22656                           ;incstack = 0
 22657                           ;i2isdigit@c stored from wreg
 22658  005220  6E03               	movwf	i2isdigit@c,c
 22659  005222  0E00               	movlw	0
 22660  005224  6E02               	movwf	i2_isdigit$2058,c
 22661  005226  0E3A               	movlw	58
 22662  005228  6003               	cpfslt	i2isdigit@c,c
 22663  00522A  D005               	goto	i2l6186
 22664  00522C  0E2F               	movlw	47
 22665  00522E  6403               	cpfsgt	i2isdigit@c,c
 22666  005230  D002               	goto	i2l6186
 22667  005232  0E01               	movlw	1
 22668  005234  6E02               	movwf	i2_isdigit$2058,c
 22669  005236                     i2l6186:
 22670  005236  C002  F001         	movff	i2_isdigit$2058,??i2_isdigit
 22671  00523A  3001               	rrcf	??i2_isdigit,w,c
 22672  00523C  0012               	return	
 22673  00523E                     __end_ofi2_isdigit:
 22674                           	opt stack 0
 22675                           pclatu	equ	0xFFB
 22676                           pclath	equ	0xFFA
 22677                           tblptru	equ	0xFF8
 22678                           tblptrh	equ	0xFF7
 22679                           tblptrl	equ	0xFF6
 22680                           tablat	equ	0xFF5
 22681                           prodh	equ	0xFF4
 22682                           prodl	equ	0xFF3
 22683                           intcon	equ	0xFF2
 22684                           intcon2	equ	0xFF1
 22685                           intcon3	equ	0xFF0
 22686                           indf0	equ	0xFEF
 22687                           postinc0	equ	0xFEE
 22688                           fsr0h	equ	0xFEA
 22689                           fsr0l	equ	0xFE9
 22690                           wreg	equ	0xFE8
 22691                           postdec1	equ	0xFE5
 22692                           fsr1h	equ	0xFE2
 22693                           fsr1l	equ	0xFE1
 22694                           indf2	equ	0xFDF
 22695                           postinc2	equ	0xFDE
 22696                           postdec2	equ	0xFDD
 22697                           fsr2h	equ	0xFDA
 22698                           fsr2l	equ	0xFD9
 22699                           status	equ	0xFD8
 22700                           
 22701 ;; *************** function i2___wmul *****************
 22702 ;; Defined at:
 22703 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22704 ;; Parameters:    Size  Location     Type
 22705 ;;  multiplier      2    0[COMRAM] unsigned int 
 22706 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22707 ;; Auto vars:     Size  Location     Type
 22708 ;;  __wmul          2    4[COMRAM] unsigned int 
 22709 ;; Return value:  Size  Location     Type
 22710 ;;                  2    0[COMRAM] unsigned int 
 22711 ;; Registers used:
 22712 ;;		wreg, status,2, status,0, prodl, prodh
 22713 ;; Tracked objects:
 22714 ;;		On entry : 0/0
 22715 ;;		On exit  : 0/0
 22716 ;;		Unchanged: 0/0
 22717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22718 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22721 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22722 ;;Total ram usage:        6 bytes
 22723 ;; Hardware stack levels used:    1
 22724 ;; This function calls:
 22725 ;;		Nothing
 22726 ;; This function is called by:
 22727 ;;		_printSortTimer
 22728 ;;		_retrieveLog
 22729 ;;		i2_printf
 22730 ;; This function uses a non-reentrant model
 22731 ;;
 22732                           
 22733                           	psect	text84
 22734  00516C                     __ptext84:
 22735                           	opt stack 0
 22736  00516C                     i2___wmul:
 22737                           	opt stack 20
 22738                           
 22739                           ;incstack = 0
 22740  00516C  5001               	movf	i2___wmul@multiplier,w,c
 22741  00516E  0203               	mulwf	i2___wmul@multiplicand,c
 22742  005170  CFF3 F005          	movff	prodl,i2___wmul@product
 22743  005174  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22744  005178  5001               	movf	i2___wmul@multiplier,w,c
 22745  00517A  0204               	mulwf	i2___wmul@multiplicand+1,c
 22746  00517C  50F3               	movf	prodl,w,c
 22747  00517E  2606               	addwf	i2___wmul@product+1,f,c
 22748  005180  5002               	movf	i2___wmul@multiplier+1,w,c
 22749  005182  0203               	mulwf	i2___wmul@multiplicand,c
 22750  005184  50F3               	movf	prodl,w,c
 22751  005186  2606               	addwf	i2___wmul@product+1,f,c
 22752  005188  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22753  00518C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22754  005190  0012               	return	
 22755  005192                     __end_ofi2___wmul:
 22756                           	opt stack 0
 22757                           pclatu	equ	0xFFB
 22758                           pclath	equ	0xFFA
 22759                           tblptru	equ	0xFF8
 22760                           tblptrh	equ	0xFF7
 22761                           tblptrl	equ	0xFF6
 22762                           tablat	equ	0xFF5
 22763                           prodh	equ	0xFF4
 22764                           prodl	equ	0xFF3
 22765                           intcon	equ	0xFF2
 22766                           intcon2	equ	0xFF1
 22767                           intcon3	equ	0xFF0
 22768                           indf0	equ	0xFEF
 22769                           postinc0	equ	0xFEE
 22770                           fsr0h	equ	0xFEA
 22771                           fsr0l	equ	0xFE9
 22772                           wreg	equ	0xFE8
 22773                           postdec1	equ	0xFE5
 22774                           fsr1h	equ	0xFE2
 22775                           fsr1l	equ	0xFE1
 22776                           indf2	equ	0xFDF
 22777                           postinc2	equ	0xFDE
 22778                           postdec2	equ	0xFDD
 22779                           fsr2h	equ	0xFDA
 22780                           fsr2l	equ	0xFD9
 22781                           status	equ	0xFD8
 22782                           
 22783 ;; *************** function i2___lwmod *****************
 22784 ;; Defined at:
 22785 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22786 ;; Parameters:    Size  Location     Type
 22787 ;;  dividend        2    0[COMRAM] unsigned int 
 22788 ;;  divisor         2    2[COMRAM] unsigned int 
 22789 ;; Auto vars:     Size  Location     Type
 22790 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22791 ;; Return value:  Size  Location     Type
 22792 ;;                  2    0[COMRAM] unsigned int 
 22793 ;; Registers used:
 22794 ;;		wreg, status,2, status,0
 22795 ;; Tracked objects:
 22796 ;;		On entry : 0/0
 22797 ;;		On exit  : 0/0
 22798 ;;		Unchanged: 0/0
 22799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22800 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22803 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22804 ;;Total ram usage:        5 bytes
 22805 ;; Hardware stack levels used:    1
 22806 ;; This function calls:
 22807 ;;		Nothing
 22808 ;; This function is called by:
 22809 ;;		_printSortTimer
 22810 ;;		i2_printf
 22811 ;; This function uses a non-reentrant model
 22812 ;;
 22813                           
 22814                           	psect	text85
 22815  004CDC                     __ptext85:
 22816                           	opt stack 0
 22817  004CDC                     i2___lwmod:
 22818                           	opt stack 20
 22819                           
 22820                           ;incstack = 0
 22821  004CDC  5003               	movf	i2___lwmod@divisor,w,c
 22822  004CDE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22823  004CE0  B4D8               	btfsc	status,2,c
 22824  004CE2  D018               	goto	i2l1867
 22825  004CE4  0E01               	movlw	1
 22826  004CE6  6E05               	movwf	i2___lwmod@counter,c
 22827  004CE8  D004               	goto	i2l6218
 22828  004CEA                     i2l6216:
 22829  004CEA  90D8               	bcf	status,0,c
 22830  004CEC  3603               	rlcf	i2___lwmod@divisor,f,c
 22831  004CEE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22832  004CF0  2A05               	incf	i2___lwmod@counter,f,c
 22833  004CF2                     i2l6218:
 22834  004CF2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22835  004CF4  D7FA               	goto	i2l6216
 22836  004CF6                     i2l6220:
 22837  004CF6  5003               	movf	i2___lwmod@divisor,w,c
 22838  004CF8  5C01               	subwf	i2___lwmod@dividend,w,c
 22839  004CFA  5004               	movf	i2___lwmod@divisor+1,w,c
 22840  004CFC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22841  004CFE  A0D8               	btfss	status,0,c
 22842  004D00  D004               	goto	i2l6224
 22843  004D02  5003               	movf	i2___lwmod@divisor,w,c
 22844  004D04  5E01               	subwf	i2___lwmod@dividend,f,c
 22845  004D06  5004               	movf	i2___lwmod@divisor+1,w,c
 22846  004D08  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22847  004D0A                     i2l6224:
 22848  004D0A  90D8               	bcf	status,0,c
 22849  004D0C  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22850  004D0E  3203               	rrcf	i2___lwmod@divisor,f,c
 22851  004D10  2E05               	decfsz	i2___lwmod@counter,f,c
 22852  004D12  D7F1               	goto	i2l6220
 22853  004D14                     i2l1867:
 22854  004D14  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22855  004D18  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22856  004D1C  0012               	return		;funcret
 22857  004D1E                     __end_ofi2___lwmod:
 22858                           	opt stack 0
 22859                           pclatu	equ	0xFFB
 22860                           pclath	equ	0xFFA
 22861                           tblptru	equ	0xFF8
 22862                           tblptrh	equ	0xFF7
 22863                           tblptrl	equ	0xFF6
 22864                           tablat	equ	0xFF5
 22865                           prodh	equ	0xFF4
 22866                           prodl	equ	0xFF3
 22867                           intcon	equ	0xFF2
 22868                           intcon2	equ	0xFF1
 22869                           intcon3	equ	0xFF0
 22870                           indf0	equ	0xFEF
 22871                           postinc0	equ	0xFEE
 22872                           fsr0h	equ	0xFEA
 22873                           fsr0l	equ	0xFE9
 22874                           wreg	equ	0xFE8
 22875                           postdec1	equ	0xFE5
 22876                           fsr1h	equ	0xFE2
 22877                           fsr1l	equ	0xFE1
 22878                           indf2	equ	0xFDF
 22879                           postinc2	equ	0xFDE
 22880                           postdec2	equ	0xFDD
 22881                           fsr2h	equ	0xFDA
 22882                           fsr2l	equ	0xFD9
 22883                           status	equ	0xFD8
 22884                           
 22885 ;; *************** function i2___lwdiv *****************
 22886 ;; Defined at:
 22887 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22888 ;; Parameters:    Size  Location     Type
 22889 ;;  dividend        2    5[COMRAM] unsigned int 
 22890 ;;  divisor         2    7[COMRAM] unsigned int 
 22891 ;; Auto vars:     Size  Location     Type
 22892 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22893 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22894 ;; Return value:  Size  Location     Type
 22895 ;;                  2    5[COMRAM] unsigned int 
 22896 ;; Registers used:
 22897 ;;		wreg, status,2, status,0
 22898 ;; Tracked objects:
 22899 ;;		On entry : 0/0
 22900 ;;		On exit  : 0/0
 22901 ;;		Unchanged: 0/0
 22902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22904 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22906 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22907 ;;Total ram usage:        7 bytes
 22908 ;; Hardware stack levels used:    1
 22909 ;; This function calls:
 22910 ;;		Nothing
 22911 ;; This function is called by:
 22912 ;;		_printSortTimer
 22913 ;;		i2_printf
 22914 ;; This function uses a non-reentrant model
 22915 ;;
 22916                           
 22917                           	psect	text86
 22918  004B5E                     __ptext86:
 22919                           	opt stack 0
 22920  004B5E                     i2___lwdiv:
 22921                           	opt stack 20
 22922                           
 22923                           ;incstack = 0
 22924  004B5E  0E00               	movlw	0
 22925  004B60  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22926  004B62  0E00               	movlw	0
 22927  004B64  6E0A               	movwf	i2___lwdiv@quotient,c
 22928  004B66  5008               	movf	i2___lwdiv@divisor,w,c
 22929  004B68  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22930  004B6A  B4D8               	btfsc	status,2,c
 22931  004B6C  D01C               	goto	i2l1857
 22932  004B6E  0E01               	movlw	1
 22933  004B70  6E0C               	movwf	i2___lwdiv@counter,c
 22934  004B72  D004               	goto	i2l6198
 22935  004B74                     i2l6196:
 22936  004B74  90D8               	bcf	status,0,c
 22937  004B76  3608               	rlcf	i2___lwdiv@divisor,f,c
 22938  004B78  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22939  004B7A  2A0C               	incf	i2___lwdiv@counter,f,c
 22940  004B7C                     i2l6198:
 22941  004B7C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22942  004B7E  D7FA               	goto	i2l6196
 22943  004B80                     i2l6200:
 22944  004B80  90D8               	bcf	status,0,c
 22945  004B82  360A               	rlcf	i2___lwdiv@quotient,f,c
 22946  004B84  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22947  004B86  5008               	movf	i2___lwdiv@divisor,w,c
 22948  004B88  5C06               	subwf	i2___lwdiv@dividend,w,c
 22949  004B8A  5009               	movf	i2___lwdiv@divisor+1,w,c
 22950  004B8C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22951  004B8E  A0D8               	btfss	status,0,c
 22952  004B90  D005               	goto	i2l6208
 22953  004B92  5008               	movf	i2___lwdiv@divisor,w,c
 22954  004B94  5E06               	subwf	i2___lwdiv@dividend,f,c
 22955  004B96  5009               	movf	i2___lwdiv@divisor+1,w,c
 22956  004B98  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22957  004B9A  800A               	bsf	i2___lwdiv@quotient,0,c
 22958  004B9C                     i2l6208:
 22959  004B9C  90D8               	bcf	status,0,c
 22960  004B9E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22961  004BA0  3208               	rrcf	i2___lwdiv@divisor,f,c
 22962  004BA2  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22963  004BA4  D7ED               	goto	i2l6200
 22964  004BA6                     i2l1857:
 22965  004BA6  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22966  004BAA  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22967  004BAE  0012               	return		;funcret
 22968  004BB0                     __end_ofi2___lwdiv:
 22969                           	opt stack 0
 22970                           pclatu	equ	0xFFB
 22971                           pclath	equ	0xFFA
 22972                           tblptru	equ	0xFF8
 22973                           tblptrh	equ	0xFF7
 22974                           tblptrl	equ	0xFF6
 22975                           tablat	equ	0xFF5
 22976                           prodh	equ	0xFF4
 22977                           prodl	equ	0xFF3
 22978                           intcon	equ	0xFF2
 22979                           intcon2	equ	0xFF1
 22980                           intcon3	equ	0xFF0
 22981                           indf0	equ	0xFEF
 22982                           postinc0	equ	0xFEE
 22983                           fsr0h	equ	0xFEA
 22984                           fsr0l	equ	0xFE9
 22985                           wreg	equ	0xFE8
 22986                           postdec1	equ	0xFE5
 22987                           fsr1h	equ	0xFE2
 22988                           fsr1l	equ	0xFE1
 22989                           indf2	equ	0xFDF
 22990                           postinc2	equ	0xFDE
 22991                           postdec2	equ	0xFDD
 22992                           fsr2h	equ	0xFDA
 22993                           fsr2l	equ	0xFD9
 22994                           status	equ	0xFD8
 22995                           
 22996 ;; *************** function i2_lcdInst *****************
 22997 ;; Defined at:
 22998 ;;		line 15 in file "lcd.c"
 22999 ;; Parameters:    Size  Location     Type
 23000 ;;  data            1    wreg     unsigned char 
 23001 ;; Auto vars:     Size  Location     Type
 23002 ;;  data            1    2[COMRAM] unsigned char 
 23003 ;; Return value:  Size  Location     Type
 23004 ;;                  1    wreg      void 
 23005 ;; Registers used:
 23006 ;;		wreg, status,2, status,0, cstack
 23007 ;; Tracked objects:
 23008 ;;		On entry : 0/0
 23009 ;;		On exit  : 0/0
 23010 ;;		Unchanged: 0/0
 23011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;Total ram usage:        1 bytes
 23017 ;; Hardware stack levels used:    1
 23018 ;; Hardware stack levels required when called:    1
 23019 ;; This function calls:
 23020 ;;		i2_lcdNibble
 23021 ;; This function is called by:
 23022 ;;		_change_state_to_menu_11
 23023 ;;		_change_state_to_menu_23
 23024 ;;		_change_state_to_logs_11
 23025 ;;		_change_state_to_logs_12
 23026 ;;		_change_state_to_logs_22
 23027 ;;		_change_state_to_logs_23
 23028 ;;		_change_state_to_logs_33
 23029 ;;		_change_state_to_logs_34
 23030 ;;		_printSortTimer
 23031 ;;		i2_change_state_to_menu_start
 23032 ;;		i2_change_state_to_menu_12
 23033 ;;		i2_change_state_to_menu_22
 23034 ;;		i2_printRTC
 23035 ;; This function uses a non-reentrant model
 23036 ;;
 23037                           
 23038                           	psect	text87
 23039  0052F4                     __ptext87:
 23040                           	opt stack 0
 23041  0052F4                     i2_lcdInst:
 23042                           	opt stack 19
 23043                           
 23044                           ;incstack = 0
 23045                           ;i2lcdInst@data stored from wreg
 23046  0052F4  6E03               	movwf	i2lcdInst@data,c
 23047                           
 23048                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23049  0052F6  948C               	bcf	3980,2,c	;volatile
 23050                           
 23051                           ;lcd.c: 17: lcdNibble(data);
 23052  0052F8  5003               	movf	i2lcdInst@data,w,c
 23053  0052FA  EC84  F025         	call	i2_lcdNibble
 23054  0052FE  0012               	return		;funcret
 23055  005300                     __end_ofi2_lcdInst:
 23056                           	opt stack 0
 23057                           pclatu	equ	0xFFB
 23058                           pclath	equ	0xFFA
 23059                           tblptru	equ	0xFF8
 23060                           tblptrh	equ	0xFF7
 23061                           tblptrl	equ	0xFF6
 23062                           tablat	equ	0xFF5
 23063                           prodh	equ	0xFF4
 23064                           prodl	equ	0xFF3
 23065                           intcon	equ	0xFF2
 23066                           intcon2	equ	0xFF1
 23067                           intcon3	equ	0xFF0
 23068                           indf0	equ	0xFEF
 23069                           postinc0	equ	0xFEE
 23070                           fsr0h	equ	0xFEA
 23071                           fsr0l	equ	0xFE9
 23072                           wreg	equ	0xFE8
 23073                           postdec1	equ	0xFE5
 23074                           fsr1h	equ	0xFE2
 23075                           fsr1l	equ	0xFE1
 23076                           indf2	equ	0xFDF
 23077                           postinc2	equ	0xFDE
 23078                           postdec2	equ	0xFDD
 23079                           fsr2h	equ	0xFDA
 23080                           fsr2l	equ	0xFD9
 23081                           status	equ	0xFD8
 23082                           
 23083 ;; *************** function i2_lcdNibble *****************
 23084 ;; Defined at:
 23085 ;;		line 25 in file "lcd.c"
 23086 ;; Parameters:    Size  Location     Type
 23087 ;;  data            1    wreg     unsigned char 
 23088 ;; Auto vars:     Size  Location     Type
 23089 ;;  data            1    1[COMRAM] unsigned char 
 23090 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23091 ;; Return value:  Size  Location     Type
 23092 ;;                  1    wreg      void 
 23093 ;; Registers used:
 23094 ;;		wreg, status,2, status,0
 23095 ;; Tracked objects:
 23096 ;;		On entry : 0/0
 23097 ;;		On exit  : 0/0
 23098 ;;		Unchanged: 0/0
 23099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23104 ;;Total ram usage:        2 bytes
 23105 ;; Hardware stack levels used:    1
 23106 ;; This function calls:
 23107 ;;		Nothing
 23108 ;; This function is called by:
 23109 ;;		i2_lcdInst
 23110 ;;		i2_putch
 23111 ;; This function uses a non-reentrant model
 23112 ;;
 23113                           
 23114                           	psect	text88
 23115  004B08                     __ptext88:
 23116                           	opt stack 0
 23117  004B08                     i2_lcdNibble:
 23118                           	opt stack 19
 23119                           
 23120                           ;incstack = 0
 23121                           ;i2lcdNibble@data stored from wreg
 23122  004B08  6E02               	movwf	i2lcdNibble@data,c
 23123                           
 23124                           ;lcd.c: 27: char temp = data & 0xF0;
 23125  004B0A  5002               	movf	i2lcdNibble@data,w,c
 23126  004B0C  0BF0               	andlw	240
 23127  004B0E  6E01               	movwf	i2lcdNibble@temp,c
 23128                           
 23129                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23130  004B10  508C               	movf	3980,w,c	;volatile
 23131  004B12  0B0F               	andlw	15
 23132  004B14  6E8C               	movwf	3980,c	;volatile
 23133                           
 23134                           ;lcd.c: 29: LATD = temp | LATD;
 23135  004B16  5001               	movf	i2lcdNibble@temp,w,c
 23136  004B18  108C               	iorwf	3980,w,c	;volatile
 23137  004B1A  6E8C               	movwf	3980,c	;volatile
 23138                           
 23139                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23140  004B1C  868C               	bsf	3980,3,c	;volatile
 23141                           
 23142                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23143  004B1E  0E42               	movlw	66
 23144  004B20                     i2u1013_47:
 23145  004B20  2EE8               	decfsz	wreg,f,c
 23146  004B22  D7FE               	bra	i2u1013_47
 23147  004B24  D000               	nop2	
 23148                           
 23149                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23150  004B26  968C               	bcf	3980,3,c	;volatile
 23151                           
 23152                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23153  004B28  0E42               	movlw	66
 23154  004B2A                     i2u1014_47:
 23155  004B2A  2EE8               	decfsz	wreg,f,c
 23156  004B2C  D7FE               	bra	i2u1014_47
 23157  004B2E  D000               	nop2	
 23158                           
 23159                           ;lcd.c: 36: data = data << 4;
 23160  004B30  3802               	swapf	i2lcdNibble@data,w,c
 23161  004B32  0BF0               	andlw	240
 23162  004B34  6E02               	movwf	i2lcdNibble@data,c
 23163                           
 23164                           ;lcd.c: 38: temp = data & 0xF0;
 23165  004B36  5002               	movf	i2lcdNibble@data,w,c
 23166  004B38  0BF0               	andlw	240
 23167  004B3A  6E01               	movwf	i2lcdNibble@temp,c
 23168                           
 23169                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23170  004B3C  508C               	movf	3980,w,c	;volatile
 23171  004B3E  0B0F               	andlw	15
 23172  004B40  6E8C               	movwf	3980,c	;volatile
 23173                           
 23174                           ;lcd.c: 40: LATD = temp | LATD;
 23175  004B42  5001               	movf	i2lcdNibble@temp,w,c
 23176  004B44  108C               	iorwf	3980,w,c	;volatile
 23177  004B46  6E8C               	movwf	3980,c	;volatile
 23178                           
 23179                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23180  004B48  868C               	bsf	3980,3,c	;volatile
 23181                           
 23182                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23183  004B4A  0E42               	movlw	66
 23184  004B4C                     i2u1015_47:
 23185  004B4C  2EE8               	decfsz	wreg,f,c
 23186  004B4E  D7FE               	bra	i2u1015_47
 23187  004B50  D000               	nop2	
 23188                           
 23189                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23190  004B52  968C               	bcf	3980,3,c	;volatile
 23191                           
 23192                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23193  004B54  0E42               	movlw	66
 23194  004B56                     i2u1016_47:
 23195  004B56  2EE8               	decfsz	wreg,f,c
 23196  004B58  D7FE               	bra	i2u1016_47
 23197  004B5A  D000               	nop2	
 23198  004B5C  0012               	return		;funcret
 23199  004B5E                     __end_ofi2_lcdNibble:
 23200                           	opt stack 0
 23201                           pclatu	equ	0xFFB
 23202                           pclath	equ	0xFFA
 23203                           tblptru	equ	0xFF8
 23204                           tblptrh	equ	0xFF7
 23205                           tblptrl	equ	0xFF6
 23206                           tablat	equ	0xFF5
 23207                           prodh	equ	0xFF4
 23208                           prodl	equ	0xFF3
 23209                           intcon	equ	0xFF2
 23210                           intcon2	equ	0xFF1
 23211                           intcon3	equ	0xFF0
 23212                           indf0	equ	0xFEF
 23213                           postinc0	equ	0xFEE
 23214                           fsr0h	equ	0xFEA
 23215                           fsr0l	equ	0xFE9
 23216                           wreg	equ	0xFE8
 23217                           postdec1	equ	0xFE5
 23218                           fsr1h	equ	0xFE2
 23219                           fsr1l	equ	0xFE1
 23220                           indf2	equ	0xFDF
 23221                           postinc2	equ	0xFDE
 23222                           postdec2	equ	0xFDD
 23223                           fsr2h	equ	0xFDA
 23224                           fsr2l	equ	0xFD9
 23225                           status	equ	0xFD8
 23226                           
 23227 ;; *************** function i2_getRTC *****************
 23228 ;; Defined at:
 23229 ;;		line 44 in file "RTC.c"
 23230 ;; Parameters:    Size  Location     Type
 23231 ;;		None
 23232 ;; Auto vars:     Size  Location     Type
 23233 ;;  getRTC          2    3[COMRAM] int 
 23234 ;; Return value:  Size  Location     Type
 23235 ;;                  1    wreg      void 
 23236 ;; Registers used:
 23237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23238 ;; Tracked objects:
 23239 ;;		On entry : 0/0
 23240 ;;		On exit  : 0/0
 23241 ;;		Unchanged: 0/0
 23242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23247 ;;Total ram usage:        2 bytes
 23248 ;; Hardware stack levels used:    1
 23249 ;; Hardware stack levels required when called:    2
 23250 ;; This function calls:
 23251 ;;		i2_I2C_Master_Read
 23252 ;;		i2_I2C_Master_Start
 23253 ;;		i2_I2C_Master_Stop
 23254 ;;		i2_I2C_Master_Write
 23255 ;; This function is called by:
 23256 ;;		_printSortTimer
 23257 ;;		i2_printRTC
 23258 ;; This function uses a non-reentrant model
 23259 ;;
 23260                           
 23261                           	psect	text89
 23262  0047EA                     __ptext89:
 23263                           	opt stack 0
 23264  0047EA                     i2_getRTC:
 23265                           	opt stack 18
 23266                           
 23267                           ;RTC.c: 48: I2C_Master_Start();
 23268                           
 23269                           ;incstack = 0
 23270  0047EA  EC9A  F029         	call	i2_I2C_Master_Start	;wreg free
 23271                           
 23272                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23273  0047EE  0E00               	movlw	0
 23274  0047F0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23275  0047F2  0ED0               	movlw	208
 23276  0047F4  6E02               	movwf	i2I2C_Master_Write@d,c
 23277  0047F6  EC85  F029         	call	i2_I2C_Master_Write	;wreg free
 23278                           
 23279                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23280  0047FA  0E00               	movlw	0
 23281  0047FC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23282  0047FE  0E00               	movlw	0
 23283  004800  6E02               	movwf	i2I2C_Master_Write@d,c
 23284  004802  EC85  F029         	call	i2_I2C_Master_Write	;wreg free
 23285                           
 23286                           ;RTC.c: 51: I2C_Master_Stop();
 23287  004806  EC96  F029         	call	i2_I2C_Master_Stop	;wreg free
 23288                           
 23289                           ;RTC.c: 54: I2C_Master_Start();
 23290  00480A  EC9A  F029         	call	i2_I2C_Master_Start	;wreg free
 23291                           
 23292                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23293  00480E  0E00               	movlw	0
 23294  004810  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23295  004812  0ED1               	movlw	209
 23296  004814  6E02               	movwf	i2I2C_Master_Write@d,c
 23297  004816  EC85  F029         	call	i2_I2C_Master_Write	;wreg free
 23298                           
 23299                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23300  00481A  0E00               	movlw	0
 23301  00481C  6E05               	movwf	i2getRTC@i+1,c
 23302  00481E  0E00               	movlw	0
 23303  004820  6E04               	movwf	i2getRTC@i,c
 23304  004822                     i2l6458:
 23305  004822  BE05               	btfsc	i2getRTC@i+1,7,c
 23306  004824  D006               	goto	i2l6462
 23307  004826  5005               	movf	i2getRTC@i+1,w,c
 23308  004828  E111               	bnz	i2l6468
 23309  00482A  0E06               	movlw	6
 23310  00482C  5C04               	subwf	i2getRTC@i,w,c
 23311  00482E  B0D8               	btfsc	status,0,c
 23312  004830  D00D               	goto	i2l6468
 23313  004832                     i2l6462:
 23314                           
 23315                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23316  004832  0E1C               	movlw	low _time
 23317  004834  2404               	addwf	i2getRTC@i,w,c
 23318  004836  6ED9               	movwf	fsr2l,c
 23319  004838  0E01               	movlw	high _time
 23320  00483A  2005               	addwfc	i2getRTC@i+1,w,c
 23321  00483C  6EDA               	movwf	fsr2h,c
 23322  00483E  0E01               	movlw	1
 23323  004840  ECC9  F028         	call	i2_I2C_Master_Read
 23324  004844  6EDF               	movwf	indf2,c
 23325  004846  4A04               	infsnz	i2getRTC@i,f,c
 23326  004848  2A05               	incf	i2getRTC@i+1,f,c
 23327  00484A  D7EB               	goto	i2l6458
 23328  00484C                     i2l6468:
 23329                           
 23330                           ;RTC.c: 58: }
 23331                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23332  00484C  0E00               	movlw	0
 23333  00484E  ECC9  F028         	call	i2_I2C_Master_Read
 23334  004852  0101               	movlb	1	; () banked
 23335  004854  6F22               	movwf	(_time+6)& (0+255),b
 23336                           
 23337                           ;RTC.c: 60: I2C_Master_Stop();
 23338  004856  EC96  F029         	call	i2_I2C_Master_Stop	;wreg free
 23339  00485A  0012               	return		;funcret
 23340  00485C                     __end_ofi2_getRTC:
 23341                           	opt stack 0
 23342                           pclatu	equ	0xFFB
 23343                           pclath	equ	0xFFA
 23344                           tblptru	equ	0xFF8
 23345                           tblptrh	equ	0xFF7
 23346                           tblptrl	equ	0xFF6
 23347                           tablat	equ	0xFF5
 23348                           prodh	equ	0xFF4
 23349                           prodl	equ	0xFF3
 23350                           intcon	equ	0xFF2
 23351                           intcon2	equ	0xFF1
 23352                           intcon3	equ	0xFF0
 23353                           indf0	equ	0xFEF
 23354                           postinc0	equ	0xFEE
 23355                           fsr0h	equ	0xFEA
 23356                           fsr0l	equ	0xFE9
 23357                           wreg	equ	0xFE8
 23358                           postdec1	equ	0xFE5
 23359                           fsr1h	equ	0xFE2
 23360                           fsr1l	equ	0xFE1
 23361                           indf2	equ	0xFDF
 23362                           postinc2	equ	0xFDE
 23363                           postdec2	equ	0xFDD
 23364                           fsr2h	equ	0xFDA
 23365                           fsr2l	equ	0xFD9
 23366                           status	equ	0xFD8
 23367                           
 23368 ;; *************** function i2_I2C_Master_Write *****************
 23369 ;; Defined at:
 23370 ;;		line 49 in file "I2C.c"
 23371 ;; Parameters:    Size  Location     Type
 23372 ;;  d               2    1[COMRAM] unsigned int 
 23373 ;; Auto vars:     Size  Location     Type
 23374 ;;		None
 23375 ;; Return value:  Size  Location     Type
 23376 ;;                  1    wreg      void 
 23377 ;; Registers used:
 23378 ;;		wreg, status,2, status,0, cstack
 23379 ;; Tracked objects:
 23380 ;;		On entry : 0/0
 23381 ;;		On exit  : 0/0
 23382 ;;		Unchanged: 0/0
 23383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23388 ;;Total ram usage:        2 bytes
 23389 ;; Hardware stack levels used:    1
 23390 ;; Hardware stack levels required when called:    1
 23391 ;; This function calls:
 23392 ;;		i2_I2C_Master_Wait
 23393 ;; This function is called by:
 23394 ;;		i2_getRTC
 23395 ;; This function uses a non-reentrant model
 23396 ;;
 23397                           
 23398                           	psect	text90
 23399  00530A                     __ptext90:
 23400                           	opt stack 0
 23401  00530A                     i2_I2C_Master_Write:
 23402                           	opt stack 18
 23403                           
 23404                           ;I2C.c: 51: I2C_Master_Wait();
 23405                           
 23406                           ;incstack = 0
 23407  00530A  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23408                           
 23409                           ;I2C.c: 52: SSPBUF = d;
 23410  00530E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23411  005312  0012               	return		;funcret
 23412  005314                     __end_ofi2_I2C_Master_Write:
 23413                           	opt stack 0
 23414                           pclatu	equ	0xFFB
 23415                           pclath	equ	0xFFA
 23416                           tblptru	equ	0xFF8
 23417                           tblptrh	equ	0xFF7
 23418                           tblptrl	equ	0xFF6
 23419                           tablat	equ	0xFF5
 23420                           prodh	equ	0xFF4
 23421                           prodl	equ	0xFF3
 23422                           intcon	equ	0xFF2
 23423                           intcon2	equ	0xFF1
 23424                           intcon3	equ	0xFF0
 23425                           indf0	equ	0xFEF
 23426                           postinc0	equ	0xFEE
 23427                           fsr0h	equ	0xFEA
 23428                           fsr0l	equ	0xFE9
 23429                           wreg	equ	0xFE8
 23430                           postdec1	equ	0xFE5
 23431                           fsr1h	equ	0xFE2
 23432                           fsr1l	equ	0xFE1
 23433                           indf2	equ	0xFDF
 23434                           postinc2	equ	0xFDE
 23435                           postdec2	equ	0xFDD
 23436                           fsr2h	equ	0xFDA
 23437                           fsr2l	equ	0xFD9
 23438                           status	equ	0xFD8
 23439                           
 23440 ;; *************** function i2_I2C_Master_Stop *****************
 23441 ;; Defined at:
 23442 ;;		line 43 in file "I2C.c"
 23443 ;; Parameters:    Size  Location     Type
 23444 ;;		None
 23445 ;; Auto vars:     Size  Location     Type
 23446 ;;		None
 23447 ;; Return value:  Size  Location     Type
 23448 ;;                  1    wreg      void 
 23449 ;; Registers used:
 23450 ;;		wreg, status,2, status,0, cstack
 23451 ;; Tracked objects:
 23452 ;;		On entry : 0/0
 23453 ;;		On exit  : 0/0
 23454 ;;		Unchanged: 0/0
 23455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23460 ;;Total ram usage:        0 bytes
 23461 ;; Hardware stack levels used:    1
 23462 ;; Hardware stack levels required when called:    1
 23463 ;; This function calls:
 23464 ;;		i2_I2C_Master_Wait
 23465 ;; This function is called by:
 23466 ;;		i2_getRTC
 23467 ;; This function uses a non-reentrant model
 23468 ;;
 23469                           
 23470                           	psect	text91
 23471  00532C                     __ptext91:
 23472                           	opt stack 0
 23473  00532C                     i2_I2C_Master_Stop:
 23474                           	opt stack 18
 23475                           
 23476                           ;I2C.c: 45: I2C_Master_Wait();
 23477                           
 23478                           ;incstack = 0
 23479  00532C  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23480                           
 23481                           ;I2C.c: 46: PEN = 1;
 23482  005330  84C5               	bsf	4037,2,c	;volatile
 23483  005332  0012               	return		;funcret
 23484  005334                     __end_ofi2_I2C_Master_Stop:
 23485                           	opt stack 0
 23486                           pclatu	equ	0xFFB
 23487                           pclath	equ	0xFFA
 23488                           tblptru	equ	0xFF8
 23489                           tblptrh	equ	0xFF7
 23490                           tblptrl	equ	0xFF6
 23491                           tablat	equ	0xFF5
 23492                           prodh	equ	0xFF4
 23493                           prodl	equ	0xFF3
 23494                           intcon	equ	0xFF2
 23495                           intcon2	equ	0xFF1
 23496                           intcon3	equ	0xFF0
 23497                           indf0	equ	0xFEF
 23498                           postinc0	equ	0xFEE
 23499                           fsr0h	equ	0xFEA
 23500                           fsr0l	equ	0xFE9
 23501                           wreg	equ	0xFE8
 23502                           postdec1	equ	0xFE5
 23503                           fsr1h	equ	0xFE2
 23504                           fsr1l	equ	0xFE1
 23505                           indf2	equ	0xFDF
 23506                           postinc2	equ	0xFDE
 23507                           postdec2	equ	0xFDD
 23508                           fsr2h	equ	0xFDA
 23509                           fsr2l	equ	0xFD9
 23510                           status	equ	0xFD8
 23511                           
 23512 ;; *************** function i2_I2C_Master_Start *****************
 23513 ;; Defined at:
 23514 ;;		line 31 in file "I2C.c"
 23515 ;; Parameters:    Size  Location     Type
 23516 ;;		None
 23517 ;; Auto vars:     Size  Location     Type
 23518 ;;		None
 23519 ;; Return value:  Size  Location     Type
 23520 ;;                  1    wreg      void 
 23521 ;; Registers used:
 23522 ;;		wreg, status,2, status,0, cstack
 23523 ;; Tracked objects:
 23524 ;;		On entry : 0/0
 23525 ;;		On exit  : 0/0
 23526 ;;		Unchanged: 0/0
 23527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;Total ram usage:        0 bytes
 23533 ;; Hardware stack levels used:    1
 23534 ;; Hardware stack levels required when called:    1
 23535 ;; This function calls:
 23536 ;;		i2_I2C_Master_Wait
 23537 ;; This function is called by:
 23538 ;;		i2_getRTC
 23539 ;; This function uses a non-reentrant model
 23540 ;;
 23541                           
 23542                           	psect	text92
 23543  005334                     __ptext92:
 23544                           	opt stack 0
 23545  005334                     i2_I2C_Master_Start:
 23546                           	opt stack 18
 23547                           
 23548                           ;I2C.c: 33: I2C_Master_Wait();
 23549                           
 23550                           ;incstack = 0
 23551  005334  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23552                           
 23553                           ;I2C.c: 34: SEN = 1;
 23554  005338  80C5               	bsf	4037,0,c	;volatile
 23555  00533A  0012               	return		;funcret
 23556  00533C                     __end_ofi2_I2C_Master_Start:
 23557                           	opt stack 0
 23558                           pclatu	equ	0xFFB
 23559                           pclath	equ	0xFFA
 23560                           tblptru	equ	0xFF8
 23561                           tblptrh	equ	0xFF7
 23562                           tblptrl	equ	0xFF6
 23563                           tablat	equ	0xFF5
 23564                           prodh	equ	0xFF4
 23565                           prodl	equ	0xFF3
 23566                           intcon	equ	0xFF2
 23567                           intcon2	equ	0xFF1
 23568                           intcon3	equ	0xFF0
 23569                           indf0	equ	0xFEF
 23570                           postinc0	equ	0xFEE
 23571                           fsr0h	equ	0xFEA
 23572                           fsr0l	equ	0xFE9
 23573                           wreg	equ	0xFE8
 23574                           postdec1	equ	0xFE5
 23575                           fsr1h	equ	0xFE2
 23576                           fsr1l	equ	0xFE1
 23577                           indf2	equ	0xFDF
 23578                           postinc2	equ	0xFDE
 23579                           postdec2	equ	0xFDD
 23580                           fsr2h	equ	0xFDA
 23581                           fsr2l	equ	0xFD9
 23582                           status	equ	0xFD8
 23583                           
 23584 ;; *************** function i2_I2C_Master_Read *****************
 23585 ;; Defined at:
 23586 ;;		line 55 in file "I2C.c"
 23587 ;; Parameters:    Size  Location     Type
 23588 ;;  a               1    wreg     unsigned char 
 23589 ;; Auto vars:     Size  Location     Type
 23590 ;;  a               1    1[COMRAM] unsigned char 
 23591 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23592 ;; Return value:  Size  Location     Type
 23593 ;;                  1    wreg      unsigned char 
 23594 ;; Registers used:
 23595 ;;		wreg, status,2, status,0, cstack
 23596 ;; Tracked objects:
 23597 ;;		On entry : 0/0
 23598 ;;		On exit  : 0/0
 23599 ;;		Unchanged: 0/0
 23600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23605 ;;Total ram usage:        2 bytes
 23606 ;; Hardware stack levels used:    1
 23607 ;; Hardware stack levels required when called:    1
 23608 ;; This function calls:
 23609 ;;		i2_I2C_Master_Wait
 23610 ;; This function is called by:
 23611 ;;		i2_getRTC
 23612 ;; This function uses a non-reentrant model
 23613 ;;
 23614                           
 23615                           	psect	text93
 23616  005192                     __ptext93:
 23617                           	opt stack 0
 23618  005192                     i2_I2C_Master_Read:
 23619                           	opt stack 18
 23620                           
 23621                           ;incstack = 0
 23622                           ;i2I2C_Master_Read@a stored from wreg
 23623  005192  6E02               	movwf	i2I2C_Master_Read@a,c
 23624                           
 23625                           ;I2C.c: 57: unsigned char temp;
 23626                           ;I2C.c: 58: I2C_Master_Wait();
 23627  005194  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23628                           
 23629                           ;I2C.c: 59: RCEN = 1;
 23630  005198  86C5               	bsf	4037,3,c	;volatile
 23631                           
 23632                           ;I2C.c: 60: I2C_Master_Wait();
 23633  00519A  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23634                           
 23635                           ;I2C.c: 61: temp = SSPBUF;
 23636  00519E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23637                           
 23638                           ;I2C.c: 62: I2C_Master_Wait();
 23639  0051A2  EC5B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23640                           
 23641                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23642  0051A6  5002               	movf	i2I2C_Master_Read@a,w,c
 23643  0051A8  A4D8               	btfss	status,2,c
 23644  0051AA  D002               	goto	i2u443_40
 23645  0051AC  8AC5               	bsf	4037,5,c	;volatile
 23646  0051AE  D001               	goto	i2l6162
 23647  0051B0                     i2u443_40:
 23648  0051B0  9AC5               	bcf	4037,5,c	;volatile
 23649  0051B2                     i2l6162:
 23650                           
 23651                           ;I2C.c: 64: ACKEN = 1;
 23652  0051B2  88C5               	bsf	4037,4,c	;volatile
 23653                           
 23654                           ;I2C.c: 65: return temp;
 23655  0051B4  5003               	movf	i2I2C_Master_Read@temp,w,c
 23656  0051B6  0012               	return	
 23657  0051B8                     __end_ofi2_I2C_Master_Read:
 23658                           	opt stack 0
 23659                           pclatu	equ	0xFFB
 23660                           pclath	equ	0xFFA
 23661                           tblptru	equ	0xFF8
 23662                           tblptrh	equ	0xFF7
 23663                           tblptrl	equ	0xFF6
 23664                           tablat	equ	0xFF5
 23665                           prodh	equ	0xFF4
 23666                           prodl	equ	0xFF3
 23667                           intcon	equ	0xFF2
 23668                           intcon2	equ	0xFF1
 23669                           intcon3	equ	0xFF0
 23670                           indf0	equ	0xFEF
 23671                           postinc0	equ	0xFEE
 23672                           fsr0h	equ	0xFEA
 23673                           fsr0l	equ	0xFE9
 23674                           wreg	equ	0xFE8
 23675                           postdec1	equ	0xFE5
 23676                           fsr1h	equ	0xFE2
 23677                           fsr1l	equ	0xFE1
 23678                           indf2	equ	0xFDF
 23679                           postinc2	equ	0xFDE
 23680                           postdec2	equ	0xFDD
 23681                           fsr2h	equ	0xFDA
 23682                           fsr2l	equ	0xFD9
 23683                           status	equ	0xFD8
 23684                           
 23685 ;; *************** function i2_I2C_Master_Wait *****************
 23686 ;; Defined at:
 23687 ;;		line 26 in file "I2C.c"
 23688 ;; Parameters:    Size  Location     Type
 23689 ;;		None
 23690 ;; Auto vars:     Size  Location     Type
 23691 ;;		None
 23692 ;; Return value:  Size  Location     Type
 23693 ;;                  1    wreg      void 
 23694 ;; Registers used:
 23695 ;;		wreg, status,2, status,0
 23696 ;; Tracked objects:
 23697 ;;		On entry : 0/0
 23698 ;;		On exit  : 0/0
 23699 ;;		Unchanged: 0/0
 23700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;Total ram usage:        1 bytes
 23706 ;; Hardware stack levels used:    1
 23707 ;; This function calls:
 23708 ;;		Nothing
 23709 ;; This function is called by:
 23710 ;;		i2_I2C_Master_Start
 23711 ;;		i2_I2C_Master_Stop
 23712 ;;		i2_I2C_Master_Write
 23713 ;;		i2_I2C_Master_Read
 23714 ;; This function uses a non-reentrant model
 23715 ;;
 23716                           
 23717                           	psect	text94
 23718  0052B6                     __ptext94:
 23719                           	opt stack 0
 23720  0052B6                     i2_I2C_Master_Wait:
 23721                           	opt stack 18
 23722  0052B6                     i2l66:
 23723  0052B6  B4C7               	btfsc	4039,2,c	;volatile
 23724  0052B8  D7FE               	goto	i2l66
 23725  0052BA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23726  0052BE  0E1F               	movlw	31
 23727  0052C0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23728  0052C2  B4D8               	btfsc	status,2,c
 23729  0052C4  0012               	return	
 23730  0052C6  D7F7               	goto	i2l66
 23731  0052C8                     __end_ofi2_I2C_Master_Wait:
 23732                           	opt stack 0
 23733                           pclatu	equ	0xFFB
 23734                           pclath	equ	0xFFA
 23735                           tblptru	equ	0xFF8
 23736                           tblptrh	equ	0xFF7
 23737                           tblptrl	equ	0xFF6
 23738                           tablat	equ	0xFF5
 23739                           prodh	equ	0xFF4
 23740                           prodl	equ	0xFF3
 23741                           intcon	equ	0xFF2
 23742                           intcon2	equ	0xFF1
 23743                           intcon3	equ	0xFF0
 23744                           indf0	equ	0xFEF
 23745                           postinc0	equ	0xFEE
 23746                           fsr0h	equ	0xFEA
 23747                           fsr0l	equ	0xFE9
 23748                           wreg	equ	0xFE8
 23749                           postdec1	equ	0xFE5
 23750                           fsr1h	equ	0xFE2
 23751                           fsr1l	equ	0xFE1
 23752                           indf2	equ	0xFDF
 23753                           postinc2	equ	0xFDE
 23754                           postdec2	equ	0xFDD
 23755                           fsr2h	equ	0xFDA
 23756                           fsr2l	equ	0xFD9
 23757                           status	equ	0xFD8
 23758                           
 23759 ;; *************** function i2_delay_ms *****************
 23760 ;; Defined at:
 23761 ;;		line 590 in file "sort.c"
 23762 ;; Parameters:    Size  Location     Type
 23763 ;;  milliseconds    1    wreg     unsigned char 
 23764 ;; Auto vars:     Size  Location     Type
 23765 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23766 ;; Return value:  Size  Location     Type
 23767 ;;                  1    wreg      void 
 23768 ;; Registers used:
 23769 ;;		wreg, status,2, status,0, cstack
 23770 ;; Tracked objects:
 23771 ;;		On entry : 0/0
 23772 ;;		On exit  : 0/0
 23773 ;;		Unchanged: 0/0
 23774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23779 ;;Total ram usage:        2 bytes
 23780 ;; Hardware stack levels used:    1
 23781 ;; This function calls:
 23782 ;;		Nothing
 23783 ;; This function is called by:
 23784 ;;		_printSortTimer
 23785 ;; This function uses a non-reentrant model
 23786 ;;
 23787                           
 23788                           	psect	text95
 23789  00523E                     __ptext95:
 23790                           	opt stack 0
 23791  00523E                     i2_delay_ms:
 23792                           	opt stack 22
 23793                           
 23794                           ;incstack = 0
 23795                           ;i2delay_ms@milliseconds stored from wreg
 23796  00523E  6E02               	movwf	i2delay_ms@milliseconds,c
 23797                           
 23798                           ;sort.c: 591: while(milliseconds > 0)
 23799  005240  D008               	goto	i2l8506
 23800  005242                     i2l8502:
 23801                           
 23802                           ;sort.c: 592: {
 23803                           ;sort.c: 593: milliseconds--;
 23804  005242  0602               	decf	i2delay_ms@milliseconds,f,c
 23805                           
 23806                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23807  005244  0E0B               	movlw	11
 23808  005246  6E01               	movwf	??i2_delay_ms& (0+255),c
 23809  005248  0E48               	movlw	72
 23810  00524A                     i2u1017_47:
 23811  00524A  2EE8               	decfsz	wreg,f,c
 23812  00524C  D7FE               	bra	i2u1017_47
 23813  00524E  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23814  005250  D7FC               	bra	i2u1017_47
 23815  005252                     i2l8506:
 23816  005252  5002               	movf	i2delay_ms@milliseconds,w,c
 23817  005254  B4D8               	btfsc	status,2,c
 23818  005256  0012               	return	
 23819  005258  D7F4               	goto	i2l8502
 23820  00525A                     __end_ofi2_delay_ms:
 23821                           	opt stack 0
 23822                           pclatu	equ	0xFFB
 23823                           pclath	equ	0xFFA
 23824                           tblptru	equ	0xFF8
 23825                           tblptrh	equ	0xFF7
 23826                           tblptrl	equ	0xFF6
 23827                           tablat	equ	0xFF5
 23828                           prodh	equ	0xFF4
 23829                           prodl	equ	0xFF3
 23830                           intcon	equ	0xFF2
 23831                           intcon2	equ	0xFF1
 23832                           intcon3	equ	0xFF0
 23833                           indf0	equ	0xFEF
 23834                           postinc0	equ	0xFEE
 23835                           fsr0h	equ	0xFEA
 23836                           fsr0l	equ	0xFE9
 23837                           wreg	equ	0xFE8
 23838                           postdec1	equ	0xFE5
 23839                           fsr1h	equ	0xFE2
 23840                           fsr1l	equ	0xFE1
 23841                           indf2	equ	0xFDF
 23842                           postinc2	equ	0xFDE
 23843                           postdec2	equ	0xFDD
 23844                           fsr2h	equ	0xFDA
 23845                           fsr2l	equ	0xFD9
 23846                           status	equ	0xFD8
 23847                           pclatu	equ	0xFFB
 23848                           pclath	equ	0xFFA
 23849                           tblptru	equ	0xFF8
 23850                           tblptrh	equ	0xFF7
 23851                           tblptrl	equ	0xFF6
 23852                           tablat	equ	0xFF5
 23853                           prodh	equ	0xFF4
 23854                           prodl	equ	0xFF3
 23855                           intcon	equ	0xFF2
 23856                           intcon2	equ	0xFF1
 23857                           intcon3	equ	0xFF0
 23858                           indf0	equ	0xFEF
 23859                           postinc0	equ	0xFEE
 23860                           fsr0h	equ	0xFEA
 23861                           fsr0l	equ	0xFE9
 23862                           wreg	equ	0xFE8
 23863                           postdec1	equ	0xFE5
 23864                           fsr1h	equ	0xFE2
 23865                           fsr1l	equ	0xFE1
 23866                           indf2	equ	0xFDF
 23867                           postinc2	equ	0xFDE
 23868                           postdec2	equ	0xFDD
 23869                           fsr2h	equ	0xFDA
 23870                           fsr2l	equ	0xFD9
 23871                           status	equ	0xFD8
 23872                           
 23873                           	psect	rparam
 23874  0000                     pclatu	equ	0xFFB
 23875                           pclath	equ	0xFFA
 23876                           tblptru	equ	0xFF8
 23877                           tblptrh	equ	0xFF7
 23878                           tblptrl	equ	0xFF6
 23879                           tablat	equ	0xFF5
 23880                           prodh	equ	0xFF4
 23881                           prodl	equ	0xFF3
 23882                           intcon	equ	0xFF2
 23883                           intcon2	equ	0xFF1
 23884                           intcon3	equ	0xFF0
 23885                           indf0	equ	0xFEF
 23886                           postinc0	equ	0xFEE
 23887                           fsr0h	equ	0xFEA
 23888                           fsr0l	equ	0xFE9
 23889                           wreg	equ	0xFE8
 23890                           postdec1	equ	0xFE5
 23891                           fsr1h	equ	0xFE2
 23892                           fsr1l	equ	0xFE1
 23893                           indf2	equ	0xFDF
 23894                           postinc2	equ	0xFDE
 23895                           postdec2	equ	0xFDD
 23896                           fsr2h	equ	0xFDA
 23897                           fsr2l	equ	0xFD9
 23898                           status	equ	0xFD8
 23899                           
 23900                           	psect	temp
 23901  00007E                     btemp:
 23902                           	opt stack 0
 23903  00007E                     	ds	1
 23904  0000                     int$flags	set	btemp
 23905                           pclatu	equ	0xFFB
 23906                           pclath	equ	0xFFA
 23907                           tblptru	equ	0xFF8
 23908                           tblptrh	equ	0xFF7
 23909                           tblptrl	equ	0xFF6
 23910                           tablat	equ	0xFF5
 23911                           prodh	equ	0xFF4
 23912                           prodl	equ	0xFF3
 23913                           intcon	equ	0xFF2
 23914                           intcon2	equ	0xFF1
 23915                           intcon3	equ	0xFF0
 23916                           indf0	equ	0xFEF
 23917                           postinc0	equ	0xFEE
 23918                           fsr0h	equ	0xFEA
 23919                           fsr0l	equ	0xFE9
 23920                           wreg	equ	0xFE8
 23921                           postdec1	equ	0xFE5
 23922                           fsr1h	equ	0xFE2
 23923                           fsr1l	equ	0xFE1
 23924                           indf2	equ	0xFDF
 23925                           postinc2	equ	0xFDE
 23926                           postdec2	equ	0xFDD
 23927                           fsr2h	equ	0xFDA
 23928                           fsr2l	equ	0xFD9
 23929                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  200579
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22783
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17463
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   96741
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15223
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19117
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76327
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 04 22:32:57 2017

                                    _i 013D                     i2_I2C_Master_Start 5334  
                   i2_I2C_Master_Write 530A                                     l66 52A2  
                                   _ID 2C68                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l606 24EC  
                                  l810 2DEC                                    l811 2E2A  
                                  l491 40C8                                    l812 2E10  
                                  l816 2EC2                                    l752 123C  
                                  l809 2DD2                                    l770 13CA  
                                  l762 12F6                                    l773 1404  
                                  l765 1330                                    l790 1556  
                                  l791 156C                                    l785 1508  
                                  l795 1600                                    l787 151A  
                                  l779 15B6                                    l868 45B6  
                                  l788 152E                                    l789 1542  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3702                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F2  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3A16  
                  _log_count_can_w_lab 0067                             i2_delay_ms 523E  
      __end_of_change_state_to_menu_11 4F4E        __end_of_change_state_to_menu_12 4D8E  
      __end_of_change_state_to_menu_22 4D56        __end_of_change_state_to_menu_23 4F1E  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 503E        __end_of_change_state_to_logs_12 500E  
      __end_of_change_state_to_logs_22 4FDE        __end_of_change_state_to_logs_23 509A  
      __end_of_change_state_to_logs_33 4FAE        __end_of_change_state_to_logs_34 4F7E  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1030 3DAC                                   l1043 5284  
                                 l1212 0126                                   l1052 3B44  
                                 l1205 007C                                   l1215 018C  
                                 l1216 01DA                                   l1208 0080  
                                 l1321 30F4                                   l1217 0240  
                                 l1410 1854                                   l1314 3114  
                                 l1242 05E8                                   l1218 028E  
                                 l1170 3FB2                                   l1146 3CD4  
                                 l1323 310E                                   l1317 30B0  
                                 l1173 3FB6                                   l1149 3CF4  
                                 l1254 0782                                   l1182 219A  
                                 l1280 46A4                                   l1272 467C  
                                 l1352 464C                                   l1281 46A8  
                                 l1345 463C                                   l1282 46AC  
                                 l1259 0858                                   l1179 2196  
                                 l1284 46EA                                   l1276 4698  
                                 l1293 4A96                                   l1374 39B4  
                                 l1278 469C                                   l1375 39CE  
                                 l1279 46A0                                   l1369 3968  
                                 l1299 4AA6                                   l1804 4256  
                                 l6110 471E                                   l6112 472A  
                                 l1857 476E                                   l6122 4760  
                                 l6114 4730                                   l6130 4948  
                                 l1867 498C                                   l6132 4954  
                                 l6300 1814                                   l6052 50DA  
                                 l7020 44B8                                   l6134 495A  
                                 l6054 50EC                                   l6320 18A6  
                                 l6304 181A                                   l8000 06E6  
                                 l7016 44A2                                   l6138 497E  
                                 l6322 18AC                                   l6250 1630  
                                 l7026 44E4                                   l6340 190A  
                                 l6316 188C                                   l6252 1642  
                                 l8100 08C2                                   l8020 075A  
                                 l8012 0738                                   l8004 06FE  
                                 l6076 5064                                   l6094 5112  
                                 l6334 18E8                                   l6270 16FC  
                                 l6262 1680                                   l6246 161C  
                                 l6422 45D4                                   l8022 0760  
                                 l6360 198E                                   l6352 1966  
                                 l6344 1942                                   l6280 173A  
                                 l6256 164C                                   l6416 459A  
                                 l8016 0742                                   l7400 15BE  
                                 l7312 13B4                                   l7232 11FA  
                                 l6370 19C2                                   l6346 194C  
                                 l6290 17B2                                   l6282 1740  
                                 l8050 07DC                                   l8026 076A  
                                 l6434 41DA                                   l7322 13E4  
                                 l7242 1244                                   l6364 19A8  
                                 l6292 17B8                                   l8204 309A  
                                 l8060 0804                                   l6380 4D98  
                                 l6436 41EA                                   l7412 15F4  
                                 l7324 13EE                                   l6374 1A1A  
                                 l6358 1982                                   l6294 17D0  
                                 l6278 172E                                   l8214 30CA  
                                 l8142 4674                                   l8070 0842  
                                 l8054 07F4                                   l8046 07D2  
                                 l6382 4DA4                                   l6446 4244  
                                 l6438 41F0                                   l7510 2E80  
                                 l7334 141E                                   l7414 1602  
                                 _ADIE 007CEE                                   l6368 19BC  
                                 l6288 17A6                                   l6376 1A26  
                                 l8232 46B0                                   l8080 0872  
                                 l8064 081C                                   l8056 07FA  
                                 l6392 4542                                   l9120 3A62  
                                 l6298 17FC                                   l8218 30DE  
                                 l8154 2F02                                   l8090 089A  
                                 l8082 0878                                   l8410 4120  
                                 l6650 2514                                   l6642 246A  
                                 l9122 3A76                                   l7530 3ED8  
                                 l7362 14E6                                   l7346 1482  
                                 l7338 1444                                   l7274 12E0  
                                 l7258 1280                                   l8172 2FBA  
                                 l8092 08A0                                   l7604 21EA  
                                 l8420 4150                                   l8404 410A  
                                 l6388 452C                                   l6660 25AA  
                                 l6652 2532                                   l7524 3E8A  
                                 l7460 2D86                                   l7452 2D5E  
                                 l6820 4338                                   l7364 14F0  
                                 l7284 1310                                   l8174 2FC0  
                                 l8086 0882                                   l7622 22A2  
                                 l6398 4562                                   l6670 2640  
                                 l6662 25C8                                   l6654 2550  
                                 l7526 3EA4                                   l7534 3EF2  
                                 l7518 2EC4                                   l7286 131A  
                                 l8352 3936                                   l8192 3078  
                                 l8096 08AA                                   l7640 2334  
                                 l8416 413E                                   l8432 418E  
                                 l6664 25E6                                   l6656 256E  
                                 l6648 24F6                                   l7528 3EBE  
                                 l7536 3F20                                   l7464 2D96  
                                 l7448 2D4E                                   l6912 479C  
                                 l6816 4322                                   l7392 1578  
                                 l7296 134A                                   l8370 397A  
                                 l7810 032C                                   l7802 030A  
                                 l7722 00FA                                   l7634 22F2  
                                 l8418 414A                                   l6666 2604  
                                 l6658 258C                                   l6674 265E  
                                 l9146 3AFE                                   l7474 2DBC  
                                 l7466 2D98                                   l6826 43AE  
                                 l7394 15AE                                   l8348 3906  
                                 l7820 0354                                   l7812 0332  
                                 l7716 00EA                                   l7660 23B0  
                                 l7652 2380                                   l9180 3D06  
                                 l8436 41A2                                   l8428 4180  
                                 l8460 4410                                   l8452 43EA  
                                 l6668 2622                                   l6676 26BC  
                                 l8612 0B02                                   l8604 0AE0  
                                 l7484 2DF0                                   l6924 47C6  
                                 l6908 4786                                   l8390 39E0  
                                 l7910 0524                                   l7806 0314  
                                 l7726 0112                                   l7718 00F0  
                                 l9190 3D24                                   l9182 3D0C  
                                 l9158 3C76                                   l8622 0B1E  
                                 l8542 09B8                                   l6862 3E18  
                                 l6870 3E3A                                   l7486 2DFA  
                                 l8376 3994                                   l8368 396A  
                                 l7920 054C                                   l7832 0398  
                                 l7816 033C                                   l7672 23F8  
                                 l7664 23E6                                   l9192 3D2A  
                                 l9184 3D12                                   l9176 3CFA  
                                 l8472 4456                                   l8464 4434  
                                 l8456 43FE                                   l8448 43DA  
                                 l8608 0AEA                                   l8560 0A04  
                                 l8552 09DA                                   l8544 09BE  
                                 l6928 47DE                                   l8378 399E  
                                 l8394 3A10                                   l7914 053C  
                                 l7906 051A                                   l7842 03C0  
                                 l9194 3D30                                   l9186 3D18  
                                 l9178 3D00                                   l8458 440A  
                                 l8802 1052                                   l8722 0EDA  
                                 l8650 0C00                                   l8642 0B88  
                                 l8626 0B36                                   l8618 0B14  
                                 l6874 3E50                                   l6866 3E22  
                                 l8388 39D0                                   l7940 05C0  
                                 l7932 059E                                   l7924 0564  
                                 l7916 0542                                   l7836 03B0  
                                 l7828 038E                                   l7676 242E  
                                 l9188 3D1E                                   l8468 4442  
                                 l8820 109E                                   l8812 107C  
                                 l8740 0F26                                   l8732 0F04  
                                 l8660 0C96                                   l8652 0C1E  
                                 l8644 0BA6                                   l8580 0A68  
                                 l8556 09F2                                   l8548 09D0  
                                 l6884 5122                                   l9380 409A  
                                 l7942 05C6                                   l7862 0434  
                                 l7854 0412                                   l7846 03D8  
                                 l7838 03B6                                   l9198 3D36  
                                 l8806 106A                                   l8726 0EF2  
                                 l8718 0ED0                                   l8662 0CB4  
                                 l8654 0C3C                                   l8646 0BC4  
                                 l8670 0D0E                                   l8574 0A58  
                                 l8590 0A8E                                   l6878 3E5A  
                                 l9382 40A0                                   l9374 4074  
                                 l7960 0630                                   l7936 05A8  
                                 l7880 0496                                   l7872 045C  
                                 l7864 043A                                   l8816 1086  
                                 l8736 0F0E                                   l8680 0DBE  
                                 l8664 0CD2                                   l8656 0C5A  
                                 l8648 0BE2                                   l8672 0D72  
                                 l8584 0A80                                   l8576 0A5E  
                                 l6888 5138                                   l9392 40BE  
                                 l9384 40A6                                   l9376 408A  
                                 l7970 0658                                   l7946 05D0  
                                 l7890 04BE                                   l7858 041C  
                                 l8842 1106                                   l8762 0F96  
                                 l8690 0DE8                                   l8666 0CF0  
                                 l8658 0C78                                   l9394 40C4  
                                 l7964 063A                                   l7884 04A0  
                                 l7868 0444                                   l8860 1152  
                                 l8852 1130                                   l8780 0FE2  
                                 l8772 0FC0                                   l8684 0DD6  
                                 l8676 0DB4                                   l7990 06BE  
                                 l7974 0662                                   l7894 04C8  
                                 l8846 111E                                   l8838 10FC  
                                 l8766 0FAE                                   l8758 0F8C  
                                 l8694 0DF2                                   l9398 40CA  
                                 l7968 0652                                   l7888 04B8  
                                 l8856 113A                                   l8776 0FCA  
                                 l8864 115E                                   l7994 06D6  
                                 l7986 06B4                                   l7978 067A  
                                 l7898 04E0                                   l8698 0E0A  
                                 l7996 06DC                                   l8798 1048  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4330 5062  
                                 u7000 3924                                   u6120 222C  
                                 u5240 24EC                                   u6040 2E8C  
                                 u5225 49C6                                   u4610 177A  
                                 u6130 222E                                   u4530 4C40  
                                 _PEIE 007F96                                   u6300 028E  
                                 u6060 2EC2                                   u4540 4C42  
                                 u7101 398A                                   u7110 398C  
                                 u4550 4C8C                                   u4551 4C88  
                                 u7008 3928                                   u4560 4C8E  
                                 u6160 23D4                                   u4617 1770  
                                 u4650 17F2                                   u6058 2E90  
                                 u5610 123C                                   u7051 395E  
                                 u7060 3960                                   u6260 0126  
                                 _RCEN 007E2B                                   u6190 241C  
                                 u7160 39FE                                   u6280 01DA  
                                 u6168 23D8                                   u5608 120A  
                                 u4657 17E8                                   u8220 3B44  
                                 u5900 2CB8                                   u6198 2420  
                                 u5910 2D0E                                   u5590 1206  
                                 u9007 09E2                                   u7168 3A02  
                                 u5808 1466                                   u9017 0A1A  
                                 i2l66 52B6                                   u9107 0EE2  
                                 u9027 0A70                                   u5908 2CBC  
                                 u9117 0F16                                   u9037 0A9C  
                                 u6830 2F44                                   u5918 2D12  
                                 u5790 1462                                   u9207 1142  
                                 u9127 0F40                                   u9047 0AF2  
                                 u6840 2F46                                   u9217 3C84  
                                 u9137 0F9E                                   u9057 0B26  
                                 u9307 22E4                                   u9227 3CC8  
                                 u9147 0FD2                                   u9067 0B50  
                                 u6860 3002                                   u9317 2328  
                                 u9237 2146                                   u9157 0FFC  
                                 u9077 0DC6                                   u6870 3004  
                                 u9407 0092                                   u9327 2346  
                                 u9247 218A                                   u9167 105A  
                                 u9087 0DFA                                   u8607 133E  
                                 u9417 0102                                   u9337 2374  
                                 u9257 21AC                                   u9177 108E  
                                 u9097 0E24                                   u8617 1358  
                                 u9507 0344                                   u9427 0136  
                                 u9347 238E                                   u9267 21DA  
                                 u9187 10B8                                   u8707 150C  
                                 u8627 1382                                   u9517 03A0  
                                 u9437 019C                                   u9357 3F62  
                                 u9277 2242                                   u9197 110E  
                                 u8717 1514                                   u8637 13CE  
                                 u8557 118A                                   u6990 38C8  
                                 u9607 05D8                                   u9527 03C8  
                                 u9447 01BA                                   u9367 3FA6  
                                 u9287 2296                                   u8807 1570  
                                 u8727 151E                                   u8647 13D6  
                                 u8567 12AE                                   u9617 0642  
                                 u9537 0424                                   u9457 01EA  
                                 u9377 3FC8                                   u9297 22B6  
                                 u8817 15D8                                   u8737 1528  
                                 u8657 1408                                   u8577 12FA  
                                 u9707 085C                                   u9627 066A  
                                 u9547 044C                                   u9467 0250  
                                 u9387 002C                                   u8907 2E14  
                                 u8827 4E18                                   u8747 1532  
                                 u8667 1412                                   u8587 1302  
                                 u9717 0866                                   u9637 06C6  
                                 u9557 04A8                                   u9477 026E  
                                 u9397 0070                                   u8917 2E1E  
                                 u8837 47A4                                   u8757 153C  
                                 u8677 142C                                   u8597 1334  
                                 u6998 38CC                                   u9807 3018  
                                 u9727 088A                                   u9647 06EE  
                                 u9567 04D0                                   u9487 029E  
                                 u8927 2E44                                   u8847 2C82  
                                 u8767 1546                                   u8687 149C  
                                 u9817 306C                                   u9737 08B2  
                                 u9657 074A                                   u9577 052C  
                                 u9497 031C                                   u8937 512E  
                                 u8857 2C9E                                   u8777 154E  
                                 u8697 14D4                                   u9907 1AEC  
                                 u9827 30B4                                   u9747 4606  
                                 u9667 0772                                   u9587 0554  
                                 u8947 3DCE                                   u8867 2CD6  
                                 u8787 155A                                   u9917 1B20  
                                 u9837 30BC                                   u9757 4656  
                                 u9677 0794                                   u9597 05B0  
                                 u8957 3E2A                                   u8877 2CF4  
                                 u8797 1564                                   u9927 1B52  
                                 u9847 30F8                                   u9767 466A  
                                 u9687 07E4                                   u8967 3E62  
                                 u8887 2DD6                                   u9937 1B9E  
                                 u9857 3102                                   u9777 2EDE  
                                 u9697 080C                                   u8977 4C9E  
                                 u8897 2DE0                                   u9947 1BD2  
                                 u9867 50E2                                   u9787 2F5A  
                                 u8987 4CD2                                   u9957 1C04  
                                 u9877 4A60                                   u9797 2FAE  
                                 u8997 08E2                                   u9967 1C50  
                                 u9887 1A54                                   u9977 1C9C  
                                 u9897 1AA0                                   u9987 1CD0  
                                 _RSEN 007E29                                   u9997 1D02  
                          _stopSignals 525A                                   _Test 3C76  
                                 _back 005B                                   _main 402A  
                                 _down 005D                                   _keys FAEF  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 51DC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0065                        __end_ofi2_putch 52F4  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3118  
                          i2_lcdNibble 4B08                        __end_of_Loading 160E  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E72  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 41AC  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 4460                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4268           i2updateServoPosition@time_us 0001  
                                u10007 1D4E                                  u10017 1D82  
                                u10107 492C                                  u10027 1DB4  
                                u10037 4AF0                                  u10047 38A0  
                                u10057 39B8                                  u10067 39C2  
                                u10077 48EC                                  u10087 48F6  
                                _T0CON 000FD5                                  u10097 4922  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 4778  
                      __end_of___lwmod 4996                                  i2l257 29BC  
                                i2l606 31A6                                  i2l847 2B8E  
                                i2l961 37DE                                  i2l868 4892  
                      ___awdiv@counter 008A                                  i2l965 3836  
                                i2l967 3856                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A46  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 52E8  
                      __end_of_handler 3892                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 50F2                        __end_of_initLCD 4CDC  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 4778  
                      __end_of_loadRTC 44EC                        __end_of_readMAG 4C96  
                      __end_of_dpowers FB0A                                  _first 0139  
                                _enter 005F                        __end_of_isdigit 511C  
                                _input 007D                                  _putch 52C8  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5192                       __end_ofi2_getRTC 485C  
                  _log_count_pop_w_tab 006B                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2138                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4E5E  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1186 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4BB0                           __end_of_Test 3D8A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 40EE  
                         __end_of_keys FB00                           __end_of_sort 51FE  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1793 00B3                            _BlockerTest 3892  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4EBE  
            i2_change_state_to_menu_22 4E8E                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1043 529A                                 i2l1410 1FA4  
                               i2l6200 4B80                                 i2l7000 32B8  
                               i2l1857 4BA6                                 i2l7002 3312  
                               i2l1867 4D14                                 i2l6220 4CF6  
                               i2l7100 33D6                                 i2l7102 33DC  
                               i2l6208 4B9C                                 i2l6224 4D0A  
                               i2l6216 4CEA                                 i2l6162 51B2  
                               i2l6218 4CF2                                 i2l7106 33E2  
                               i2l7132 344C                                 i2l6510 1E8C  
                               i2l6502 1E2A                                 i2l7142 3472  
                               i2l7126 343E                                 i2l7118 3426  
                               i2l7070 3372                                 i2l6600 209A  
                               i2l6520 1EBE                                 i2l7160 34AC  
                               i2l7152 3494                                 i2l7136 3468  
                               i2l7080 339C                                 i2l9000 28EE  
                               i2l6186 5236                                 i2l6610 20C6  
                               i2l6530 1F16                                 i2l6522 1EC2  
                               i2l7170 34CC                                 i2l7146 3486  
                               i2l7082 33A0                                 i2l6196 4B74  
                               i2l6604 20AE                                 i2l6540 1F6A  
                               i2l6532 1F1C                                 i2l7148 348A  
                               i2l7092 33BE                                 i2l6620 4E36  
                               i2l9020 2944                                 i2l9012 2920  
                               i2l9004 2904                                 i2l6462 4832  
                               i2l6198 4B7C                                 i2l6614 2114  
                               i2l6534 1F2E                                 i2l6518 1EB4  
                               i2l7182 3502                                 i2l7174 34DE  
                               i2l7166 34BA                                 i2l7094 33C4  
                               i2l7078 338C                                 i2l6622 4E3E  
                               i2l6608 20C0                                 i2l6560 1FEA  
                               i2l6528 1F0C                                 i2l6544 1F6E  
                               i2l6616 211C                                 i2l7096 33CA  
                               i2l7088 33AA                                 i2l9016 292E  
                               i2l9008 2912                                 i2l6458 4822  
                               i2l6562 1FEE                                 i2l6538 1F58  
                               i2l6490 1DE4                                 i2l7178 34F0  
                               i2l7098 33D0                                 i2l9026 2952  
                               i2l6468 484C                                 i2l6580 203A  
                               i2l6556 1FD2                                 i2l6492 1DF2  
                               i2l9212 29DC                                 i2l6804 3C5E  
                               i2l7188 350C                                 i2l8502 5242  
                               i2l6574 2020                                 i2l6486 1DD4  
                               i2l9230 2B04                                 i2l9310 362E  
                               i2l9302 35C2                                 i2l6592 207C  
                               i2l6584 205E                                 i2l6496 1DF8  
                               i2l9208 29CC                                 i2l9304 360C  
                               i2l8506 5252                                 i2l6586 2066  
                               i2l9242 2B5C                                 i2l9250 2B90  
                               i2l9218 2A36                                 i2l9322 367A  
                               i2l9306 3616                                 i2l9316 3654  
                               i2l9412 377C                                 i2l9420 3796  
                               i2l6598 2092                                 i2l9254 2BC4  
                               i2l9414 3780                                 i2l9256 2BCA  
                               i2l6792 3C1A                                 i2l9336 36D0  
                               i2l9280 356E                                 i2l9282 3578  
                               i2l9434 37B2                                 i2l6796 3C2A  
                               i2l6980 31F2                                 i2l9276 3558  
                               i2l6990 3260                                 i2l6982 3208  
                               i2l6974 31B0                                 i2l8494 48AC  
                               i2l9294 35A4                                 i2l9462 380A  
                               i2l6992 3276                                 i2l6984 321E  
                               i2l6976 31C6                                 i2l6968 3144  
                               i2l8920 27B6                                 i2l8912 2798  
                               i2l8904 277C                                 i2l8488 487A  
                               i2l9296 35B8                                 i2l9288 358E  
                               i2l9456 37FC                                 i2l6994 328C  
                               i2l6986 3234                                 i2l6978 31DC  
                               i2l6996 32A2                                 i2l6988 324A  
                               i2l8940 2804                                 i2l8932 27E0  
                               i2l8924 27C4                                 i2l8916 27A8  
                               i2l8908 278A                                 i2l9484 3854  
                               i2l8960 2852                                 i2l8952 282E  
                               i2l8944 2812                                 i2l8936 27EE  
                               i2l8928 27D2                                 i2l8880 2736  
                               i2l8980 28A0                                 i2l8972 2884  
                               i2l8964 2860                                 i2l8956 2844  
                               i2l8948 2820                                 i2l8892 2760  
                               i2l8884 2744                                 i2l8878 2730  
                               i2l9950 3604                                 i2l9960 2992  
                               i2l8992 28D2                                 i2l8984 28AE  
                               i2l8976 2892                                 i2l8968 286E  
                               i2l8896 276E                                 i2l8888 2752  
                               i2l9952 36E8                                 i2l9944 35E6  
                               i2l9962 29AE                                 i2l9954 36F8  
                               i2l9946 35F0                                 i2l8996 28E0  
                               i2l8988 28C4                                 i2l9948 35FA  
                               i2l9966 33FA                                 i2l9958 2970  
                               i2l9968 3416                _f_most_recent_sort_time 0137  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5144  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 51DC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 3F54  
                               ___wmul 4DC4                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4DFA  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 44EC                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5220  
                               _initUI 4E5E                                 _readIR 4BFE  
                               _logRun 3A16                                 getIR@i 0087  
                               clear_0 4BD6                                 clear_1 4BE2  
                               clear_2 4BEE                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4A52  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 160E                              ??_handler 004B  
              __size_of_initGlobalVars 00AC                           ?_retrieveLog 0007  
                               _strcpy 4D8E                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 516C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5144                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4BB0  
                     __end_of_printRTC 2700                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4D1E                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0069                  __end_of_algorithmTest 402A  
                    __end_ofi2_lcdInst 5300                             _PusherTest 2ED0  
                    __end_ofi2_isdigit 523E                             __accesstop 0080  
              __end_of__initialization 4BF4                          ?_inputHandler 002A  
                _most_recent_sort_time 006D                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 528C                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 533E  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5314  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 47EA  
                          i2printRTC@i 0041                          _initSortTimer 4314  
          __end_of_updateServoPosition 45F8                          __end_of_putch 52D8  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2ED0                             __end_of_UI 116C  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 50C6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 509A  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 48CC  
                         _EEPROM_write 3D8A               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3235 0141  
                    __end_of_SpeedTest 467C                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 4700  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2416 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006F                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 52E8                              ?_initTime 0080  
                      _f_loadingNewCan 00F0                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4934                                _Loading 116C  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 40EE  
                              ___awmod 43BE                             _initServos 4AAE  
                              ___lldiv 41AC                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4700  
                              ___lwmod 4934                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4BB0  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4268                                _lcdInst 52D8  
                              _handler 0008                                __ptext0 402A  
                              __ptext1 525A                                __ptext2 51DC  
                              __ptext3 116C                                __ptext4 4314  
                              __ptext5 4268                                __ptext6 4DFA  
                              __ptext7 4778                                __ptext8 4BFE  
                              __ptext9 2C68                        __size_of_printf 0438  
                              _readADC 50C6                        __size_of_strcpy 0036  
                              _initLCD 4C96                                _cur_can 012B  
                              _loadRTC 4460                                _readMAG 4C4A  
                              _dpowers FB00                     actuatorTest@i_1741 00AE  
                   actuatorTest@i_1750 00B4                     actuatorTest@i_1742 00AF  
                   actuatorTest@i_1734 00AD                     actuatorTest@i_1751 00B5  
                   actuatorTest@i_1760 00BA                     actuatorTest@i_1744 00B0  
                   actuatorTest@i_1761 00BB                     actuatorTest@i_1753 00B6  
                   actuatorTest@i_1745 00B1                     actuatorTest@i_1770 00C0  
                   actuatorTest@i_1754 00B7                     actuatorTest@i_1771 00C1  
                   actuatorTest@i_1763 00BC                     actuatorTest@i_1747 00B2  
                   actuatorTest@i_1764 00BD                     actuatorTest@i_1756 00B8  
                   actuatorTest@i_1748 00B3                     actuatorTest@i_1773 00C2  
                   actuatorTest@i_1757 00B9                     actuatorTest@i_1774 00C3  
                   actuatorTest@i_1766 00BE                     actuatorTest@i_1767 00BF  
                              _isdigit 50F2                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011C  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 3E72                         __pintcode_body 3702  
                 end_of_initialization 4BF4                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3702                    i2___wmul@multiplier 0001  
                            i2u1011_47 3392                              i2u1012_47 2B36  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1013_47 4B20                              i2u1014_47 4B2A  
                            i2u1015_47 4B4C                              i2u1016_47 4B56  
                            i2u1017_47 524A              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 525A                 __end_of_initGlobalVars 4314  
                           _sensorTest 2138                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 353A  
                         ??_BothServos 00AB                  __end_of_machineConfig 4A52  
                           _updateMenu 2700                      i2_I2C_Master_Read 5192  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 52B6  
                    i2_I2C_Master_Stop 532C                      i2___lwdiv@divisor 0008  
                      _log_count_total 013F                              i2___lwdiv 4B5E  
                            i2___lwmod 4CDC                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 334E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 52F4                          Loading@i_1160 00BC  
                        Loading@i_1162 00BE                          Loading@i_1148 00B6  
                        Loading@i_1157 00B8                          Loading@i_1159 00BA  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5220                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DCA                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 528C                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4DFA  
                       __end_of_getMAG 4E2C                         __end_of_getRTC 4572  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4E8E  
                       __end_of_readIR 4C4A                         __end_of_logRun 3B5A  
                     i2___wmul@product 0005                         __end_of_printf 1A46  
                         i2printf@flag 0026                         __end_of_strcpy 4DC4  
            __end_ofi2_I2C_Master_Read 51B8              __end_ofi2_I2C_Master_Wait 52C8  
                         i2printf@prec 001D                    start_initialization 4BB0  
            __end_ofi2_I2C_Master_Stop 5334                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1398 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 45F8  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 467C                            ?_sensorTest 0001  
                          __pdataBANK1 0141                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1173 0086  
                             ID@i_1174 0088                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2548 0043                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A8  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2058 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0075  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1789 00AF                        _count_pop_w_tab 0129  
                          _EEPROM_read 5274                     __end_of_PortTestA5 4AAE  
                     _I2C_Master_Start 5324                              _f_lastCan 00EE  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5300                      __size_of_initTime 0022  
                i2_updateServoPosition 485C                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 48CC                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00E2  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 3118                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3F54  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0268  
                          __size_of_UI 08A2                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 533C             __end_ofi2_I2C_Master_Write 5314  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 334E  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u502_40 1F50                               i2u502_47 1F46  
                             i2u443_40 51B0                               _PIR2bits 000FA1  
                             i2u543_40 31A6                               i2u830_40 2B66  
                             i2u832_40 2B8E                               i2u831_48 2B68  
                             i2u498_40 1EF0                               i2u498_47 1EE6  
                  __size_of_updateMenu 02C0                         _log_completion 0063  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 516C                          lcdNibble@data 0081  
                             i2_getRTC 47EA                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DCA                               i2_strcpy 4E2C  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4BC4                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 52A2  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 04A2                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 43BE  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4F1E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4D56             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4D1E                _change_state_to_menu_23 4EEE  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 500E  
              _change_state_to_logs_12 4FDE                _change_state_to_logs_22 4FAE  
              _change_state_to_logs_23 506C                _change_state_to_logs_33 4F7E  
              _change_state_to_logs_34 4F4E                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 388A  
                           _EEPROMTest 533C                        _I2C_Master_Init 4996  
                     __size_of_readADC 002C                        _I2C_Master_Read 503E  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 52A2                        _I2C_Master_Stop 531C  
                     __size_of_isdigit 002A                               _delay_ms 511C  
                       _printSortTimer 29C0                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3C76  
                             __ptext10 511C                               __ptext11 3E72  
                             __ptext20 509A                               __ptext12 49F6  
                             __ptext21 51FE                               __ptext13 3A16  
                             __ptext30 503E                               __ptext22 4C96  
                             __ptext14 3D8A                               __ptext31 52A2  
                             __ptext23 08CA                               __ptext15 5274  
                             __ptext40 0012                               __ptext32 4D1E  
                             __ptext24 2436                               __ptext16 4E5E  
                             __ptext41 45F8                               __ptext33 4D56  
                             __ptext25 4D8E                               __ptext17 4460  
                             __ptext50 3892                               __ptext42 2ED0  
                             __ptext34 43BE                               __ptext26 44EC  
                             __ptext18 4996                               __ptext51 160E  
                             __ptext43 50C6                               __ptext35 40EE  
                             __ptext27 5300                               __ptext19 41AC  
                             __ptext60 353A                               __ptext52 52C8  
                             __ptext44 467C                               __ptext36 3C76  
                             __ptext28 531C                               __ptext61 485C  
                             __ptext53 50F2                               __ptext45 4A52  
                             __ptext37 2138                               __ptext29 5324  
                             __ptext70 4F1E                               __ptext62 2700  
                             __ptext54 4DC4                               __ptext46 533C  
                             __ptext38 4C4A                               __ptext71 4F4E  
                             __ptext63 5144                               __ptext55 4934  
                             __ptext47 1A46                               __ptext39 3F54  
                             __ptext80 29C0                               __ptext72 4F7E  
                             __ptext64 3118                               __ptext56 4700  
                             __ptext48 4AAE                               __ptext81 1DCA  
                             __ptext73 506C                               __ptext65 4E2C  
                             __ptext57 52D8                               __ptext49 4572  
                             __ptext90 530A                               __ptext82 52E8  
                             __ptext74 4FAE                               __ptext66 334E  
                             __ptext58 48CC                               __ptext91 532C  
                             __ptext83 5220                               __ptext75 4FDE  
                             __ptext67 4E8E                               __ptext92 5334  
                             __ptext84 516C                               __ptext76 500E  
                             __ptext68 4EBE                               __ptext93 5192  
                             __ptext85 4CDC                               __ptext77 51B8  
                             __ptext69 4EEE                               __ptext94 52B6  
                             __ptext86 4B5E                               __ptext78 3B5A  
                             __ptext95 523E                               __ptext87 52F4  
                             __ptext79 528C                               __ptext88 4B08  
                             __ptext89 47EA                               _dispLogs 51B8  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2058 0002  
                   __end_of_initServos 4B08                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 51FE  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4572                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 2436  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4EEE      __end_ofi2_change_state_to_menu_22 4EBE  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C68  
                            putch@data 0082               __end_of_I2C_Master_Start 532C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 530A  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 0071                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2436  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5274  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29C0                __end_of_I2C_Master_Init 49F6  
              __end_of_I2C_Master_Read 506C                __end_of_I2C_Master_Wait 52B6  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5324  
                          lcdInst@data 0082                          printRTC@F3226 0145  
                         retrieveLog@i 000E                            _retrieveLog 3B5A  
                  __end_ofi2_lcdNibble 4B5E                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 0073  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 49F6  
                      ___lwmod@counter 008B                      _updateServoStates 353A  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
