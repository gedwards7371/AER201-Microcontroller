

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 17:01:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.40
   112                           ; Generated 01/12/2016 GMT
   113                           ; 
   114                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4620 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  0048DE                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for UI@F3225
   151  0048DE  4D                 	db	77
   152  0048DF  4D                 	db	77
   153  0048E0  4D                 	db	77
   154  0048E1  00                 	db	0
   155                           
   156                           ;initializer for printRTC@F3216
   157  0048E2  4D                 	db	77
   158  0048E3  4D                 	db	77
   159  0048E4  4D                 	db	77
   160  0048E5  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FB14                     __pmediumconst:
   164                           	opt stack 0
   165  00FB14  00                 	db	0
   166  00FB15                     _keys:
   167                           	opt stack 0
   168  00FB15  31                 	db	49
   169  00FB16  32                 	db	50
   170  00FB17  33                 	db	51
   171  00FB18  41                 	db	65
   172  00FB19  34                 	db	52
   173  00FB1A  35                 	db	53
   174  00FB1B  36                 	db	54
   175  00FB1C  42                 	db	66
   176  00FB1D  37                 	db	55
   177  00FB1E  38                 	db	56
   178  00FB1F  39                 	db	57
   179  00FB20  43                 	db	67
   180  00FB21  2A                 	db	42
   181  00FB22  30                 	db	48
   182  00FB23  23                 	db	35
   183  00FB24  44                 	db	68
   184  00FB25  00                 	db	0
   185  00FB26                     __end_of_keys:
   186                           	opt stack 0
   187  00FB26                     _dpowers:
   188                           	opt stack 0
   189  00FB26  0001               	dw	1
   190  00FB28  000A               	dw	10
   191  00FB2A  0064               	dw	100
   192  00FB2C  03E8               	dw	1000
   193  00FB2E  2710               	dw	10000
   194  00FB30                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _EEADR	set	4009
   205  0000                     _EEADRH	set	4010
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATA	set	3977
   211  0000                     _LATAbits	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATCbits	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADIE	set	31982
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB30                     STR_21:
   268  00FB30  25                 	db	37
   269  00FB31  30                 	db	48	;'0'
   270  00FB32  32                 	db	50	;'2'
   271  00FB33  64                 	db	100	;'d'
   272  00FB34  25                 	db	37
   273  00FB35  73                 	db	115	;'s'
   274  00FB36  20                 	db	32
   275  00FB37  7C                 	db	124
   276  00FB38  20                 	db	32
   277  00FB39  25                 	db	37
   278  00FB3A  30                 	db	48	;'0'
   279  00FB3B  32                 	db	50	;'2'
   280  00FB3C  64                 	db	100	;'d'
   281  00FB3D  3A                 	db	58	;':'
   282  00FB3E  25                 	db	37
   283  00FB3F  30                 	db	48	;'0'
   284  00FB40  32                 	db	50	;'2'
   285  00FB41  64                 	db	100	;'d'
   286  00FB42  3A                 	db	58	;':'
   287  00FB43  25                 	db	37
   288  00FB44  30                 	db	48	;'0'
   289  00FB45  32                 	db	50	;'2'
   290  00FB46  64                 	db	100	;'d'
   291  00FB47  00                 	db	0
   292  00FB48                     STR_66:
   293  00FB48  28                 	db	40
   294  00FB49  64                 	db	100	;'d'
   295  00FB4A  61                 	db	97	;'a'
   296  00FB4B  74                 	db	116	;'t'
   297  00FB4C  61                 	db	97	;'a'
   298  00FB4D  3A                 	db	58	;':'
   299  00FB4E  20                 	db	32
   300  00FB4F  25                 	db	37
   301  00FB50  75                 	db	117	;'u'
   302  00FB51  2C                 	db	44
   303  00FB52  20                 	db	32
   304  00FB53  61                 	db	97	;'a'
   305  00FB54  64                 	db	100	;'d'
   306  00FB55  64                 	db	100	;'d'
   307  00FB56  72                 	db	114	;'r'
   308  00FB57  3A                 	db	58	;':'
   309  00FB58  20                 	db	32
   310  00FB59  25                 	db	37
   311  00FB5A  75                 	db	117	;'u'
   312  00FB5B  29                 	db	41
   313  00FB5C  00                 	db	0
   314  00FB5D                     STR_27:
   315  00FB5D  4E                 	db	78	;'N'
   316  00FB5E  4F                 	db	79	;'O'
   317  00FB5F  20                 	db	32
   318  00FB60  4C                 	db	76	;'L'
   319  00FB61  41                 	db	65	;'A'
   320  00FB62  42                 	db	66	;'B'
   321  00FB63  3A                 	db	58	;':'
   322  00FB64  20                 	db	32
   323  00FB65  25                 	db	37
   324  00FB66  64                 	db	100	;'d'
   325  00FB67  7C                 	db	124
   326  00FB68  4C                 	db	76	;'L'
   327  00FB69  41                 	db	65	;'A'
   328  00FB6A  42                 	db	66	;'B'
   329  00FB6B  3A                 	db	58	;':'
   330  00FB6C  20                 	db	32
   331  00FB6D  25                 	db	37
   332  00FB6E  64                 	db	100	;'d'
   333  00FB6F  00                 	db	0
   334  00FB70                     STR_25:
   335  00FB70  4E                 	db	78	;'N'
   336  00FB71  4F                 	db	79	;'O'
   337  00FB72  20                 	db	32
   338  00FB73  54                 	db	84	;'T'
   339  00FB74  41                 	db	65	;'A'
   340  00FB75  42                 	db	66	;'B'
   341  00FB76  3A                 	db	58	;':'
   342  00FB77  20                 	db	32
   343  00FB78  25                 	db	37
   344  00FB79  64                 	db	100	;'d'
   345  00FB7A  7C                 	db	124
   346  00FB7B  54                 	db	84	;'T'
   347  00FB7C  41                 	db	65	;'A'
   348  00FB7D  42                 	db	66	;'B'
   349  00FB7E  3A                 	db	58	;':'
   350  00FB7F  20                 	db	32
   351  00FB80  25                 	db	37
   352  00FB81  64                 	db	100	;'d'
   353  00FB82  00                 	db	0
   354  00FB83                     STR_111:
   355  00FB83  44                 	db	68	;'D'
   356  00FB84  20                 	db	32
   357  00FB85  57                 	db	87	;'W'
   358  00FB86  49                 	db	73	;'I'
   359  00FB87  4C                 	db	76	;'L'
   360  00FB88  4C                 	db	76	;'L'
   361  00FB89  20                 	db	32
   362  00FB8A  52                 	db	82	;'R'
   363  00FB8B  45                 	db	69	;'E'
   364  00FB8C  54                 	db	84	;'T'
   365  00FB8D  55                 	db	85	;'U'
   366  00FB8E  52                 	db	82	;'R'
   367  00FB8F  4E                 	db	78	;'N'
   368  00FB90  20                 	db	32
   369  00FB91  20                 	db	32
   370  00FB92  20                 	db	32
   371  00FB93  20                 	db	32
   372  00FB94  00                 	db	0
   373  00FB95                     STR_112:
   374  00FB95  4F                 	db	79	;'O'
   375  00FB96  54                 	db	84	;'T'
   376  00FB97  48                 	db	72	;'H'
   377  00FB98  45                 	db	69	;'E'
   378  00FB99  52                 	db	82	;'R'
   379  00FB9A  20                 	db	32
   380  00FB9B  53                 	db	83	;'S'
   381  00FB9C  45                 	db	69	;'E'
   382  00FB9D  54                 	db	84	;'T'
   383  00FB9E  53                 	db	83	;'S'
   384  00FB9F  20                 	db	32
   385  00FBA0  52                 	db	82	;'R'
   386  00FBA1  41                 	db	65	;'A'
   387  00FBA2  35                 	db	53	;'5'
   388  00FBA3  20                 	db	32
   389  00FBA4  20                 	db	32
   390  00FBA5  20                 	db	32
   391  00FBA6  00                 	db	0
   392  00FBA7                     STR_3:
   393  00FBA7  2D                 	db	45
   394  00FBA8  2D                 	db	45
   395  00FBA9  20                 	db	32
   396  00FBAA  4C                 	db	76	;'L'
   397  00FBAB  4F                 	db	79	;'O'
   398  00FBAC  47                 	db	71	;'G'
   399  00FBAD  20                 	db	32
   400  00FBAE  25                 	db	37
   401  00FBAF  32                 	db	50	;'2'
   402  00FBB0  64                 	db	100	;'d'
   403  00FBB1  20                 	db	32
   404  00FBB2  48                 	db	72	;'H'
   405  00FBB3  45                 	db	69	;'E'
   406  00FBB4  52                 	db	82	;'R'
   407  00FBB5  45                 	db	69	;'E'
   408  00FBB6  2D                 	db	45
   409  00FBB7  2D                 	db	45
   410  00FBB8  00                 	db	0
   411  00FBB9                     STR_1:
   412  00FBB9  52                 	db	82	;'R'
   413  00FBBA  45                 	db	69	;'E'
   414  00FBBB  53                 	db	83	;'S'
   415  00FBBC  55                 	db	85	;'U'
   416  00FBBD  4C                 	db	76	;'L'
   417  00FBBE  54                 	db	84	;'T'
   418  00FBBF  53                 	db	83	;'S'
   419  00FBC0  20                 	db	32
   420  00FBC1  49                 	db	73	;'I'
   421  00FBC2  4E                 	db	78	;'N'
   422  00FBC3  20                 	db	32
   423  00FBC4  4C                 	db	76	;'L'
   424  00FBC5  4F                 	db	79	;'O'
   425  00FBC6  47                 	db	71	;'G'
   426  00FBC7  20                 	db	32
   427  00FBC8  25                 	db	37
   428  00FBC9  64                 	db	100	;'d'
   429  00FBCA  00                 	db	0
   430  00FBCB                     STR_102:
   431  00FBCB  4D                 	db	77	;'M'
   432  00FBCC  49                 	db	73	;'I'
   433  00FBCD  44                 	db	68	;'D'
   434  00FBCE  20                 	db	32
   435  00FBCF  2D                 	db	45
   436  00FBD0  2D                 	db	45
   437  00FBD1  20                 	db	32
   438  00FBD2  32                 	db	50	;'2'
   439  00FBD3  73                 	db	115	;'s'
   440  00FBD4  20                 	db	32
   441  00FBD5  20                 	db	32
   442  00FBD6  20                 	db	32
   443  00FBD7  20                 	db	32
   444  00FBD8  20                 	db	32
   445  00FBD9  20                 	db	32
   446  00FBDA  20                 	db	32
   447  00FBDB  00                 	db	0
   448  00FBDC                     STR_105:
   449  00FBDC  44                 	db	68	;'D'
   450  00FBDD  52                 	db	82	;'R'
   451  00FBDE  4F                 	db	79	;'O'
   452  00FBDF  50                 	db	80	;'P'
   453  00FBE0  20                 	db	32
   454  00FBE1  2D                 	db	45
   455  00FBE2  2D                 	db	45
   456  00FBE3  20                 	db	32
   457  00FBE4  32                 	db	50	;'2'
   458  00FBE5  73                 	db	115	;'s'
   459  00FBE6  20                 	db	32
   460  00FBE7  20                 	db	32
   461  00FBE8  20                 	db	32
   462  00FBE9  20                 	db	32
   463  00FBEA  20                 	db	32
   464  00FBEB  20                 	db	32
   465  00FBEC  00                 	db	0
   466  00FBED                     STR_99:
   467  00FBED  4C                 	db	76	;'L'
   468  00FBEE  45                 	db	69	;'E'
   469  00FBEF  46                 	db	70	;'F'
   470  00FBF0  54                 	db	84	;'T'
   471  00FBF1  20                 	db	32
   472  00FBF2  2D                 	db	45
   473  00FBF3  2D                 	db	45
   474  00FBF4  20                 	db	32
   475  00FBF5  32                 	db	50	;'2'
   476  00FBF6  73                 	db	115	;'s'
   477  00FBF7  20                 	db	32
   478  00FBF8  20                 	db	32
   479  00FBF9  20                 	db	32
   480  00FBFA  20                 	db	32
   481  00FBFB  20                 	db	32
   482  00FBFC  20                 	db	32
   483  00FBFD  00                 	db	0
   484  00FBFE                     STR_104:
   485  00FBFE  4C                 	db	76	;'L'
   486  00FBFF  45                 	db	69	;'E'
   487  00FC00  56                 	db	86	;'V'
   488  00FC01  45                 	db	69	;'E'
   489  00FC02  4C                 	db	76	;'L'
   490  00FC03  20                 	db	32
   491  00FC04  2D                 	db	45
   492  00FC05  2D                 	db	45
   493  00FC06  20                 	db	32
   494  00FC07  32                 	db	50	;'2'
   495  00FC08  73                 	db	115	;'s'
   496  00FC09  20                 	db	32
   497  00FC0A  20                 	db	32
   498  00FC0B  20                 	db	32
   499  00FC0C  20                 	db	32
   500  00FC0D  20                 	db	32
   501  00FC0E  00                 	db	0
   502  00FC0F                     STR_98:
   503  00FC0F  52                 	db	82	;'R'
   504  00FC10  49                 	db	73	;'I'
   505  00FC11  47                 	db	71	;'G'
   506  00FC12  48                 	db	72	;'H'
   507  00FC13  54                 	db	84	;'T'
   508  00FC14  20                 	db	32
   509  00FC15  2D                 	db	45
   510  00FC16  2D                 	db	45
   511  00FC17  20                 	db	32
   512  00FC18  32                 	db	50	;'2'
   513  00FC19  73                 	db	115	;'s'
   514  00FC1A  20                 	db	32
   515  00FC1B  20                 	db	32
   516  00FC1C  20                 	db	32
   517  00FC1D  20                 	db	32
   518  00FC1E  20                 	db	32
   519  00FC1F  00                 	db	0
   520  00FC20                     STR_97:
   521  00FC20  4D                 	db	77	;'M'
   522  00FC21  49                 	db	73	;'I'
   523  00FC22  44                 	db	68	;'D'
   524  00FC23  44                 	db	68	;'D'
   525  00FC24  4C                 	db	76	;'L'
   526  00FC25  45                 	db	69	;'E'
   527  00FC26  20                 	db	32
   528  00FC27  2D                 	db	45
   529  00FC28  2D                 	db	45
   530  00FC29  20                 	db	32
   531  00FC2A  32                 	db	50	;'2'
   532  00FC2B  73                 	db	115	;'s'
   533  00FC2C  20                 	db	32
   534  00FC2D  20                 	db	32
   535  00FC2E  20                 	db	32
   536  00FC2F  20                 	db	32
   537  00FC30  00                 	db	0
   538  00FC31                     STR_115:
   539  00FC31  44                 	db	68	;'D'
   540  00FC32  20                 	db	32
   541  00FC33  57                 	db	87	;'W'
   542  00FC34  49                 	db	73	;'I'
   543  00FC35  4C                 	db	76	;'L'
   544  00FC36  4C                 	db	76	;'L'
   545  00FC37  20                 	db	32
   546  00FC38  52                 	db	82	;'R'
   547  00FC39  45                 	db	69	;'E'
   548  00FC3A  54                 	db	84	;'T'
   549  00FC3B  55                 	db	85	;'U'
   550  00FC3C  52                 	db	82	;'R'
   551  00FC3D  4E                 	db	78	;'N'
   552  00FC3E  20                 	db	32
   553  00FC3F  20                 	db	32
   554  00FC40  20                 	db	32
   555  00FC41  00                 	db	0
   556  00FC42                     STR_100:
   557  00FC42  4D                 	db	77	;'M'
   558  00FC43  49                 	db	73	;'I'
   559  00FC44  44                 	db	68	;'D'
   560  00FC45  2D                 	db	45
   561  00FC46  4C                 	db	76	;'L'
   562  00FC47  45                 	db	69	;'E'
   563  00FC48  46                 	db	70	;'F'
   564  00FC49  54                 	db	84	;'T'
   565  00FC4A  20                 	db	32
   566  00FC4B  2D                 	db	45
   567  00FC4C  2D                 	db	45
   568  00FC4D  20                 	db	32
   569  00FC4E  32                 	db	50	;'2'
   570  00FC4F  73                 	db	115	;'s'
   571  00FC50  20                 	db	32
   572  00FC51  20                 	db	32
   573  00FC52  00                 	db	0
   574  00FC53                     STR_101:
   575  00FC53  4D                 	db	77	;'M'
   576  00FC54  49                 	db	73	;'I'
   577  00FC55  44                 	db	68	;'D'
   578  00FC56  2D                 	db	45
   579  00FC57  52                 	db	82	;'R'
   580  00FC58  49                 	db	73	;'I'
   581  00FC59  47                 	db	71	;'G'
   582  00FC5A  48                 	db	72	;'H'
   583  00FC5B  54                 	db	84	;'T'
   584  00FC5C  20                 	db	32
   585  00FC5D  2D                 	db	45
   586  00FC5E  2D                 	db	45
   587  00FC5F  20                 	db	32
   588  00FC60  32                 	db	50	;'2'
   589  00FC61  73                 	db	115	;'s'
   590  00FC62  20                 	db	32
   591  00FC63  00                 	db	0
   592  00FC64                     STR_116:
   593  00FC64  45                 	db	69	;'E'
   594  00FC65  4C                 	db	76	;'L'
   595  00FC66  53                 	db	83	;'S'
   596  00FC67  45                 	db	69	;'E'
   597  00FC68  20                 	db	32
   598  00FC69  54                 	db	84	;'T'
   599  00FC6A  4F                 	db	79	;'O'
   600  00FC6B  47                 	db	71	;'G'
   601  00FC6C  47                 	db	71	;'G'
   602  00FC6D  4C                 	db	76	;'L'
   603  00FC6E  45                 	db	69	;'E'
   604  00FC6F  53                 	db	83	;'S'
   605  00FC70  20                 	db	32
   606  00FC71  52                 	db	82	;'R'
   607  00FC72  41                 	db	65	;'A'
   608  00FC73  35                 	db	53	;'5'
   609  00FC74  00                 	db	0
   610  00FC75                     STR_72:
   611  00FC75  41                 	db	65	;'A'
   612  00FC76  4C                 	db	76	;'L'
   613  00FC77  47                 	db	71	;'G'
   614  00FC78  31                 	db	49	;'1'
   615  00FC79  3A                 	db	58	;':'
   616  00FC7A  20                 	db	32
   617  00FC7B  39                 	db	57	;'9'
   618  00FC7C  20                 	db	32
   619  00FC7D  50                 	db	80	;'P'
   620  00FC7E  4F                 	db	79	;'O'
   621  00FC7F  50                 	db	80	;'P'
   622  00FC80  4E                 	db	78	;'N'
   623  00FC81  4F                 	db	79	;'O'
   624  00FC82  54                 	db	84	;'T'
   625  00FC83  41                 	db	65	;'A'
   626  00FC84  42                 	db	66	;'B'
   627  00FC85  00                 	db	0
   628  00FC86                     STR_68:
   629  00FC86  31                 	db	49	;'1'
   630  00FC87  2E                 	db	46
   631  00FC88  41                 	db	65	;'A'
   632  00FC89  4C                 	db	76	;'L'
   633  00FC8A  47                 	db	71	;'G'
   634  00FC8B  7C                 	db	124
   635  00FC8C  32                 	db	50	;'2'
   636  00FC8D  2E                 	db	46
   637  00FC8E  53                 	db	83	;'S'
   638  00FC8F  4E                 	db	78	;'N'
   639  00FC90  52                 	db	82	;'R'
   640  00FC91  7C                 	db	124
   641  00FC92  33                 	db	51	;'3'
   642  00FC93  2E                 	db	46
   643  00FC94  41                 	db	65	;'A'
   644  00FC95  43                 	db	67	;'C'
   645  00FC96  00                 	db	0
   646  00FC97                     STR_92:
   647  00FC97  54                 	db	84	;'T'
   648  00FC98  53                 	db	83	;'S'
   649  00FC99  54                 	db	84	;'T'
   650  00FC9A  3A                 	db	58	;':'
   651  00FC9B  20                 	db	32
   652  00FC9C  43                 	db	67	;'C'
   653  00FC9D  4F                 	db	79	;'O'
   654  00FC9E  4E                 	db	78	;'N'
   655  00FC9F  44                 	db	68	;'D'
   656  00FCA0  20                 	db	32
   657  00FCA1  53                 	db	83	;'S'
   658  00FCA2  4F                 	db	79	;'O'
   659  00FCA3  4C                 	db	76	;'L'
   660  00FCA4  4E                 	db	78	;'N'
   661  00FCA5  27                 	db	39
   662  00FCA6  44                 	db	68	;'D'
   663  00FCA7  00                 	db	0
   664  00FCA8                     STR_94:
   665  00FCA8  54                 	db	84	;'T'
   666  00FCA9  53                 	db	83	;'S'
   667  00FCAA  54                 	db	84	;'T'
   668  00FCAB  3A                 	db	58	;':'
   669  00FCAC  20                 	db	32
   670  00FCAD  50                 	db	80	;'P'
   671  00FCAE  55                 	db	85	;'U'
   672  00FCAF  53                 	db	83	;'S'
   673  00FCB0  48                 	db	72	;'H'
   674  00FCB1  20                 	db	32
   675  00FCB2  53                 	db	83	;'S'
   676  00FCB3  4F                 	db	79	;'O'
   677  00FCB4  4C                 	db	76	;'L'
   678  00FCB5  4E                 	db	78	;'N'
   679  00FCB6  27                 	db	39
   680  00FCB7  44                 	db	68	;'D'
   681  00FCB8  00                 	db	0
   682  00FCB9                     STR_69:
   683  00FCB9  34                 	db	52	;'4'
   684  00FCBA  2E                 	db	46
   685  00FCBB  48                 	db	72	;'H'
   686  00FCBC  49                 	db	73	;'I'
   687  00FCBD  7C                 	db	124
   688  00FCBE  35                 	db	53	;'5'
   689  00FCBF  2E                 	db	46
   690  00FCC0  54                 	db	84	;'T'
   691  00FCC1  4F                 	db	79	;'O'
   692  00FCC2  47                 	db	71	;'G'
   693  00FCC3  7C                 	db	124
   694  00FCC4  36                 	db	54	;'6'
   695  00FCC5  2E                 	db	46
   696  00FCC6  45                 	db	69	;'E'
   697  00FCC7  45                 	db	69	;'E'
   698  00FCC8  50                 	db	80	;'P'
   699  00FCC9  00                 	db	0
   700  00FCCA                     STR_110:
   701  00FCCA  54                 	db	84	;'T'
   702  00FCCB  53                 	db	83	;'S'
   703  00FCCC  54                 	db	84	;'T'
   704  00FCCD  3A                 	db	58	;':'
   705  00FCCE  20                 	db	32
   706  00FCCF  42                 	db	66	;'B'
   707  00FCD0  4F                 	db	79	;'O'
   708  00FCD1  54                 	db	84	;'T'
   709  00FCD2  48                 	db	72	;'H'
   710  00FCD3  20                 	db	32
   711  00FCD4  53                 	db	83	;'S'
   712  00FCD5  45                 	db	69	;'E'
   713  00FCD6  52                 	db	82	;'R'
   714  00FCD7  56                 	db	86	;'V'
   715  00FCD8  4F                 	db	79	;'O'
   716  00FCD9  53                 	db	83	;'S'
   717  00FCDA  00                 	db	0
   718  00FCDB                     STR_41:
   719  00FCDB  4C                 	db	76	;'L'
   720  00FCDC  4F                 	db	79	;'O'
   721  00FCDD  47                 	db	71	;'G'
   722  00FCDE  20                 	db	32
   723  00FCDF  31                 	db	49	;'1'
   724  00FCE0  20                 	db	32
   725  00FCE1  20                 	db	32
   726  00FCE2  20                 	db	32
   727  00FCE3  20                 	db	32
   728  00FCE4  20                 	db	32
   729  00FCE5  20                 	db	32
   730  00FCE6  20                 	db	32
   731  00FCE7  20                 	db	32
   732  00FCE8  20                 	db	32
   733  00FCE9  20                 	db	32
   734  00FCEA  20                 	db	32
   735  00FCEB  00                 	db	0
   736  00FCEC                     STR_40:
   737  00FCEC  4C                 	db	76	;'L'
   738  00FCED  4F                 	db	79	;'O'
   739  00FCEE  47                 	db	71	;'G'
   740  00FCEF  20                 	db	32
   741  00FCF0  32                 	db	50	;'2'
   742  00FCF1  20                 	db	32
   743  00FCF2  20                 	db	32
   744  00FCF3  20                 	db	32
   745  00FCF4  20                 	db	32
   746  00FCF5  20                 	db	32
   747  00FCF6  20                 	db	32
   748  00FCF7  20                 	db	32
   749  00FCF8  20                 	db	32
   750  00FCF9  20                 	db	32
   751  00FCFA  20                 	db	32
   752  00FCFB  20                 	db	32
   753  00FCFC  00                 	db	0
   754  00FCFD                     STR_44:
   755  00FCFD  4C                 	db	76	;'L'
   756  00FCFE  4F                 	db	79	;'O'
   757  00FCFF  47                 	db	71	;'G'
   758  00FD00  20                 	db	32
   759  00FD01  33                 	db	51	;'3'
   760  00FD02  20                 	db	32
   761  00FD03  20                 	db	32
   762  00FD04  20                 	db	32
   763  00FD05  20                 	db	32
   764  00FD06  20                 	db	32
   765  00FD07  20                 	db	32
   766  00FD08  20                 	db	32
   767  00FD09  20                 	db	32
   768  00FD0A  20                 	db	32
   769  00FD0B  20                 	db	32
   770  00FD0C  20                 	db	32
   771  00FD0D  00                 	db	0
   772  00FD0E                     STR_48:
   773  00FD0E  4C                 	db	76	;'L'
   774  00FD0F  4F                 	db	79	;'O'
   775  00FD10  47                 	db	71	;'G'
   776  00FD11  20                 	db	32
   777  00FD12  34                 	db	52	;'4'
   778  00FD13  20                 	db	32
   779  00FD14  20                 	db	32
   780  00FD15  20                 	db	32
   781  00FD16  20                 	db	32
   782  00FD17  20                 	db	32
   783  00FD18  20                 	db	32
   784  00FD19  20                 	db	32
   785  00FD1A  20                 	db	32
   786  00FD1B  20                 	db	32
   787  00FD1C  20                 	db	32
   788  00FD1D  20                 	db	32
   789  00FD1E  00                 	db	0
   790  00FD1F                     STR_36:
   791  00FD1F  33                 	db	51	;'3'
   792  00FD20  2E                 	db	46
   793  00FD21  20                 	db	32
   794  00FD22  4C                 	db	76	;'L'
   795  00FD23  4F                 	db	79	;'O'
   796  00FD24  47                 	db	71	;'G'
   797  00FD25  53                 	db	83	;'S'
   798  00FD26  20                 	db	32
   799  00FD27  20                 	db	32
   800  00FD28  20                 	db	32
   801  00FD29  20                 	db	32
   802  00FD2A  20                 	db	32
   803  00FD2B  20                 	db	32
   804  00FD2C  20                 	db	32
   805  00FD2D  20                 	db	32
   806  00FD2E  20                 	db	32
   807  00FD2F  00                 	db	0
   808  00FD30                     STR_32:
   809  00FD30  32                 	db	50	;'2'
   810  00FD31  2E                 	db	46
   811  00FD32  20                 	db	32
   812  00FD33  53                 	db	83	;'S'
   813  00FD34  4F                 	db	79	;'O'
   814  00FD35  52                 	db	82	;'R'
   815  00FD36  54                 	db	84	;'T'
   816  00FD37  20                 	db	32
   817  00FD38  20                 	db	32
   818  00FD39  20                 	db	32
   819  00FD3A  20                 	db	32
   820  00FD3B  20                 	db	32
   821  00FD3C  20                 	db	32
   822  00FD3D  20                 	db	32
   823  00FD3E  20                 	db	32
   824  00FD3F  20                 	db	32
   825  00FD40  00                 	db	0
   826  00FD41                     STR_33:
   827  00FD41  31                 	db	49	;'1'
   828  00FD42  2E                 	db	46
   829  00FD43  20                 	db	32
   830  00FD44  44                 	db	68	;'D'
   831  00FD45  41                 	db	65	;'A'
   832  00FD46  54                 	db	84	;'T'
   833  00FD47  45                 	db	69	;'E'
   834  00FD48  2F                 	db	47
   835  00FD49  54                 	db	84	;'T'
   836  00FD4A  49                 	db	73	;'I'
   837  00FD4B  4D                 	db	77	;'M'
   838  00FD4C  45                 	db	69	;'E'
   839  00FD4D  20                 	db	32
   840  00FD4E  20                 	db	32
   841  00FD4F  20                 	db	32
   842  00FD50  20                 	db	32
   843  00FD51  00                 	db	0
   844  00FD52                     STR_24:
   845  00FD52  20                 	db	32
   846  00FD53  2D                 	db	45
   847  00FD54  2D                 	db	45
   848  00FD55  20                 	db	32
   849  00FD56  50                 	db	80	;'P'
   850  00FD57  4F                 	db	79	;'O'
   851  00FD58  50                 	db	80	;'P'
   852  00FD59  20                 	db	32
   853  00FD5A  20                 	db	32
   854  00FD5B  43                 	db	67	;'C'
   855  00FD5C  41                 	db	65	;'A'
   856  00FD5D  4E                 	db	78	;'N'
   857  00FD5E  20                 	db	32
   858  00FD5F  2D                 	db	45
   859  00FD60  2D                 	db	45
   860  00FD61  20                 	db	32
   861  00FD62  00                 	db	0
   862  00FD63                     STR_26:
   863  00FD63  20                 	db	32
   864  00FD64  2D                 	db	45
   865  00FD65  2D                 	db	45
   866  00FD66  20                 	db	32
   867  00FD67  53                 	db	83	;'S'
   868  00FD68  4F                 	db	79	;'O'
   869  00FD69  55                 	db	85	;'U'
   870  00FD6A  50                 	db	80	;'P'
   871  00FD6B  20                 	db	32
   872  00FD6C  43                 	db	67	;'C'
   873  00FD6D  41                 	db	65	;'A'
   874  00FD6E  4E                 	db	78	;'N'
   875  00FD6F  20                 	db	32
   876  00FD70  2D                 	db	45
   877  00FD71  2D                 	db	45
   878  00FD72  20                 	db	32
   879  00FD73  00                 	db	0
   880  00FD74                     STR_28:
   881  00FD74  2D                 	db	45
   882  00FD75  2D                 	db	45
   883  00FD76  20                 	db	32
   884  00FD77  54                 	db	84	;'T'
   885  00FD78  4F                 	db	79	;'O'
   886  00FD79  54                 	db	84	;'T'
   887  00FD7A  41                 	db	65	;'A'
   888  00FD7B  4C                 	db	76	;'L'
   889  00FD7C  20                 	db	32
   890  00FD7D  43                 	db	67	;'C'
   891  00FD7E  41                 	db	65	;'A'
   892  00FD7F  4E                 	db	78	;'N'
   893  00FD80  53                 	db	83	;'S'
   894  00FD81  20                 	db	32
   895  00FD82  2D                 	db	45
   896  00FD83  2D                 	db	45
   897  00FD84  00                 	db	0
   898  00FD85                     STR_39:
   899  00FD85  4C                 	db	76	;'L'
   900  00FD86  4F                 	db	79	;'O'
   901  00FD87  47                 	db	71	;'G'
   902  00FD88  20                 	db	32
   903  00FD89  31                 	db	49	;'1'
   904  00FD8A  20                 	db	32
   905  00FD8B  20                 	db	32
   906  00FD8C  20                 	db	32
   907  00FD8D  20                 	db	32
   908  00FD8E  20                 	db	32
   909  00FD8F  20                 	db	32
   910  00FD90  20                 	db	32
   911  00FD91  20                 	db	32
   912  00FD92  20                 	db	32
   913  00FD93  20                 	db	32
   914  00FD94  3C                 	db	60	;'<'
   915  00FD95  00                 	db	0
   916  00FD96                     STR_42:
   917  00FD96  4C                 	db	76	;'L'
   918  00FD97  4F                 	db	79	;'O'
   919  00FD98  47                 	db	71	;'G'
   920  00FD99  20                 	db	32
   921  00FD9A  32                 	db	50	;'2'
   922  00FD9B  20                 	db	32
   923  00FD9C  20                 	db	32
   924  00FD9D  20                 	db	32
   925  00FD9E  20                 	db	32
   926  00FD9F  20                 	db	32
   927  00FDA0  20                 	db	32
   928  00FDA1  20                 	db	32
   929  00FDA2  20                 	db	32
   930  00FDA3  20                 	db	32
   931  00FDA4  20                 	db	32
   932  00FDA5  3C                 	db	60	;'<'
   933  00FDA6  00                 	db	0
   934  00FDA7                     STR_46:
   935  00FDA7  4C                 	db	76	;'L'
   936  00FDA8  4F                 	db	79	;'O'
   937  00FDA9  47                 	db	71	;'G'
   938  00FDAA  20                 	db	32
   939  00FDAB  33                 	db	51	;'3'
   940  00FDAC  20                 	db	32
   941  00FDAD  20                 	db	32
   942  00FDAE  20                 	db	32
   943  00FDAF  20                 	db	32
   944  00FDB0  20                 	db	32
   945  00FDB1  20                 	db	32
   946  00FDB2  20                 	db	32
   947  00FDB3  20                 	db	32
   948  00FDB4  20                 	db	32
   949  00FDB5  20                 	db	32
   950  00FDB6  3C                 	db	60	;'<'
   951  00FDB7  00                 	db	0
   952  00FDB8                     STR_50:
   953  00FDB8  4C                 	db	76	;'L'
   954  00FDB9  4F                 	db	79	;'O'
   955  00FDBA  47                 	db	71	;'G'
   956  00FDBB  20                 	db	32
   957  00FDBC  34                 	db	52	;'4'
   958  00FDBD  20                 	db	32
   959  00FDBE  20                 	db	32
   960  00FDBF  20                 	db	32
   961  00FDC0  20                 	db	32
   962  00FDC1  20                 	db	32
   963  00FDC2  20                 	db	32
   964  00FDC3  20                 	db	32
   965  00FDC4  20                 	db	32
   966  00FDC5  20                 	db	32
   967  00FDC6  20                 	db	32
   968  00FDC7  3C                 	db	60	;'<'
   969  00FDC8  00                 	db	0
   970  00FDC9                     STR_38:
   971  00FDC9  33                 	db	51	;'3'
   972  00FDCA  2E                 	db	46
   973  00FDCB  20                 	db	32
   974  00FDCC  4C                 	db	76	;'L'
   975  00FDCD  4F                 	db	79	;'O'
   976  00FDCE  47                 	db	71	;'G'
   977  00FDCF  53                 	db	83	;'S'
   978  00FDD0  20                 	db	32
   979  00FDD1  20                 	db	32
   980  00FDD2  20                 	db	32
   981  00FDD3  20                 	db	32
   982  00FDD4  20                 	db	32
   983  00FDD5  20                 	db	32
   984  00FDD6  20                 	db	32
   985  00FDD7  20                 	db	32
   986  00FDD8  3C                 	db	60	;'<'
   987  00FDD9  00                 	db	0
   988  00FDDA                     STR_34:
   989  00FDDA  32                 	db	50	;'2'
   990  00FDDB  2E                 	db	46
   991  00FDDC  20                 	db	32
   992  00FDDD  53                 	db	83	;'S'
   993  00FDDE  4F                 	db	79	;'O'
   994  00FDDF  52                 	db	82	;'R'
   995  00FDE0  54                 	db	84	;'T'
   996  00FDE1  20                 	db	32
   997  00FDE2  20                 	db	32
   998  00FDE3  20                 	db	32
   999  00FDE4  20                 	db	32
  1000  00FDE5  20                 	db	32
  1001  00FDE6  20                 	db	32
  1002  00FDE7  20                 	db	32
  1003  00FDE8  20                 	db	32
  1004  00FDE9  3C                 	db	60	;'<'
  1005  00FDEA  00                 	db	0
  1006  00FDEB                     STR_31:
  1007  00FDEB  31                 	db	49	;'1'
  1008  00FDEC  2E                 	db	46
  1009  00FDED  20                 	db	32
  1010  00FDEE  44                 	db	68	;'D'
  1011  00FDEF  41                 	db	65	;'A'
  1012  00FDF0  54                 	db	84	;'T'
  1013  00FDF1  45                 	db	69	;'E'
  1014  00FDF2  2F                 	db	47
  1015  00FDF3  54                 	db	84	;'T'
  1016  00FDF4  49                 	db	73	;'I'
  1017  00FDF5  4D                 	db	77	;'M'
  1018  00FDF6  45                 	db	69	;'E'
  1019  00FDF7  20                 	db	32
  1020  00FDF8  20                 	db	32
  1021  00FDF9  20                 	db	32
  1022  00FDFA  3C                 	db	60	;'<'
  1023  00FDFB  00                 	db	0
  1024  00FDFC                     STR_6:
  1025  00FDFC  50                 	db	80	;'P'
  1026  00FDFD  41                 	db	65	;'A'
  1027  00FDFE  55                 	db	85	;'U'
  1028  00FDFF  53                 	db	83	;'S'
  1029  00FE00  45                 	db	69	;'E'
  1030  00FE01  20                 	db	32
  1031  00FE02  3C                 	db	60	;'<'
  1032  00FE03  20                 	db	32
  1033  00FE04  7C                 	db	124
  1034  00FE05  20                 	db	32
  1035  00FE06  42                 	db	66	;'B'
  1036  00FE07  41                 	db	65	;'A'
  1037  00FE08  43                 	db	67	;'C'
  1038  00FE09  4B                 	db	75	;'K'
  1039  00FE0A  20                 	db	32
  1040  00FE0B  3E                 	db	62	;'>'
  1041  00FE0C  00                 	db	0
  1042  00FE0D                     STR_30:
  1043  00FE0D  50                 	db	80	;'P'
  1044  00FE0E  55                 	db	85	;'U'
  1045  00FE0F  53                 	db	83	;'S'
  1046  00FE10  48                 	db	72	;'H'
  1047  00FE11  20                 	db	32
  1048  00FE12  54                 	db	84	;'T'
  1049  00FE13  4F                 	db	79	;'O'
  1050  00FE14  20                 	db	32
  1051  00FE15  43                 	db	67	;'C'
  1052  00FE16  4F                 	db	79	;'O'
  1053  00FE17  4E                 	db	78	;'N'
  1054  00FE18  54                 	db	84	;'T'
  1055  00FE19  49                 	db	73	;'I'
  1056  00FE1A  4E                 	db	78	;'N'
  1057  00FE1B  55                 	db	85	;'U'
  1058  00FE1C  45                 	db	69	;'E'
  1059  00FE1D  00                 	db	0
  1060  00FE1E                     STR_83:
  1061  00FE1E  4D                 	db	77	;'M'
  1062  00FE1F  41                 	db	65	;'A'
  1063  00FE20  47                 	db	71	;'G'
  1064  00FE21  5F                 	db	95	;'_'
  1065  00FE22  73                 	db	115	;'s'
  1066  00FE23  69                 	db	105	;'i'
  1067  00FE24  67                 	db	103	;'g'
  1068  00FE25  6E                 	db	110	;'n'
  1069  00FE26  61                 	db	97	;'a'
  1070  00FE27  6C                 	db	108	;'l'
  1071  00FE28  3A                 	db	58	;':'
  1072  00FE29  20                 	db	32
  1073  00FE2A  25                 	db	37
  1074  00FE2B  64                 	db	100	;'d'
  1075  00FE2C  20                 	db	32
  1076  00FE2D  00                 	db	0
  1077  00FE2E                     STR_103:
  1078  00FE2E  54                 	db	84	;'T'
  1079  00FE2F  53                 	db	83	;'S'
  1080  00FE30  54                 	db	84	;'T'
  1081  00FE31  3A                 	db	58	;':'
  1082  00FE32  20                 	db	32
  1083  00FE33  54                 	db	84	;'T'
  1084  00FE34  49                 	db	73	;'I'
  1085  00FE35  4C                 	db	76	;'L'
  1086  00FE36  54                 	db	84	;'T'
  1087  00FE37  20                 	db	32
  1088  00FE38  53                 	db	83	;'S'
  1089  00FE39  45                 	db	69	;'E'
  1090  00FE3A  52                 	db	82	;'R'
  1091  00FE3B  56                 	db	86	;'V'
  1092  00FE3C  4F                 	db	79	;'O'
  1093  00FE3D  00                 	db	0
  1094  00FE3E                     STR_4:
  1095  00FE3E  44                 	db	68	;'D'
  1096  00FE3F  49                 	db	73	;'I'
  1097  00FE40  44                 	db	68	;'D'
  1098  00FE41  4E                 	db	78	;'N'
  1099  00FE42  27                 	db	39
  1100  00FE43  54                 	db	84	;'T'
  1101  00FE44  20                 	db	32
  1102  00FE45  43                 	db	67	;'C'
  1103  00FE46  4F                 	db	79	;'O'
  1104  00FE47  4D                 	db	77	;'M'
  1105  00FE48  50                 	db	80	;'P'
  1106  00FE49  4C                 	db	76	;'L'
  1107  00FE4A  45                 	db	69	;'E'
  1108  00FE4B  54                 	db	84	;'T'
  1109  00FE4C  45                 	db	69	;'E'
  1110  00FE4D  00                 	db	0
  1111  00FE4E                     STR_80:
  1112  00FE4E  49                 	db	73	;'I'
  1113  00FE4F  52                 	db	82	;'R'
  1114  00FE50  5F                 	db	95	;'_'
  1115  00FE51  73                 	db	115	;'s'
  1116  00FE52  69                 	db	105	;'i'
  1117  00FE53  67                 	db	103	;'g'
  1118  00FE54  6E                 	db	110	;'n'
  1119  00FE55  61                 	db	97	;'a'
  1120  00FE56  6C                 	db	108	;'l'
  1121  00FE57  3A                 	db	58	;':'
  1122  00FE58  20                 	db	32
  1123  00FE59  25                 	db	37
  1124  00FE5A  64                 	db	100	;'d'
  1125  00FE5B  20                 	db	32
  1126  00FE5C  00                 	db	0
  1127  00FE5D                     STR_109:
  1128  00FE5D  43                 	db	67	;'C'
  1129  00FE5E  41                 	db	65	;'A'
  1130  00FE5F  4D                 	db	77	;'M'
  1131  00FE60  20                 	db	32
  1132  00FE61  44                 	db	68	;'D'
  1133  00FE62  57                 	db	87	;'W'
  1134  00FE63  4E                 	db	78	;'N'
  1135  00FE64  20                 	db	32
  1136  00FE65  7C                 	db	124
  1137  00FE66  52                 	db	82	;'R'
  1138  00FE67  43                 	db	67	;'C'
  1139  00FE68  30                 	db	48	;'0'
  1140  00FE69  3D                 	db	61	;'='
  1141  00FE6A  30                 	db	48	;'0'
  1142  00FE6B  00                 	db	0
  1143  00FE6C                     STR_108:
  1144  00FE6C  43                 	db	67	;'C'
  1145  00FE6D  41                 	db	65	;'A'
  1146  00FE6E  4D                 	db	77	;'M'
  1147  00FE6F  20                 	db	32
  1148  00FE70  55                 	db	85	;'U'
  1149  00FE71  50                 	db	80	;'P'
  1150  00FE72  20                 	db	32
  1151  00FE73  20                 	db	32
  1152  00FE74  7C                 	db	124
  1153  00FE75  52                 	db	82	;'R'
  1154  00FE76  43                 	db	67	;'C'
  1155  00FE77  30                 	db	48	;'0'
  1156  00FE78  3D                 	db	61	;'='
  1157  00FE79  31                 	db	49	;'1'
  1158  00FE7A  00                 	db	0
  1159  00FE7B                     STR_82:
  1160  00FE7B  54                 	db	84	;'T'
  1161  00FE7C  53                 	db	83	;'S'
  1162  00FE7D  54                 	db	84	;'T'
  1163  00FE7E  3A                 	db	58	;':'
  1164  00FE7F  20                 	db	32
  1165  00FE80  4D                 	db	77	;'M'
  1166  00FE81  41                 	db	65	;'A'
  1167  00FE82  47                 	db	71	;'G'
  1168  00FE83  4E                 	db	78	;'N'
  1169  00FE84  45                 	db	69	;'E'
  1170  00FE85  54                 	db	84	;'T'
  1171  00FE86  49                 	db	73	;'I'
  1172  00FE87  53                 	db	83	;'S'
  1173  00FE88  4D                 	db	77	;'M'
  1174  00FE89  00                 	db	0
  1175  00FE8A                     STR_107:
  1176  00FE8A  54                 	db	84	;'T'
  1177  00FE8B  53                 	db	83	;'S'
  1178  00FE8C  54                 	db	84	;'T'
  1179  00FE8D  3A                 	db	58	;':'
  1180  00FE8E  20                 	db	32
  1181  00FE8F  43                 	db	67	;'C'
  1182  00FE90  41                 	db	65	;'A'
  1183  00FE91  4D                 	db	77	;'M'
  1184  00FE92  20                 	db	32
  1185  00FE93  53                 	db	83	;'S'
  1186  00FE94  45                 	db	69	;'E'
  1187  00FE95  52                 	db	82	;'R'
  1188  00FE96  56                 	db	86	;'V'
  1189  00FE97  4F                 	db	79	;'O'
  1190  00FE98  00                 	db	0
  1191  00FE99                     STR_96:
  1192  00FE99  54                 	db	84	;'T'
  1193  00FE9A  53                 	db	83	;'S'
  1194  00FE9B  54                 	db	84	;'T'
  1195  00FE9C  3A                 	db	58	;':'
  1196  00FE9D  20                 	db	32
  1197  00FE9E  50                 	db	80	;'P'
  1198  00FE9F  41                 	db	65	;'A'
  1199  00FEA0  4E                 	db	78	;'N'
  1200  00FEA1  20                 	db	32
  1201  00FEA2  53                 	db	83	;'S'
  1202  00FEA3  45                 	db	69	;'E'
  1203  00FEA4  52                 	db	82	;'R'
  1204  00FEA5  56                 	db	86	;'V'
  1205  00FEA6  4F                 	db	79	;'O'
  1206  00FEA7  00                 	db	0
  1207  00FEA8                     STR_75:
  1208  00FEA8  41                 	db	65	;'A'
  1209  00FEA9  4C                 	db	76	;'L'
  1210  00FEAA  47                 	db	71	;'G'
  1211  00FEAB  34                 	db	52	;'4'
  1212  00FEAC  3A                 	db	58	;':'
  1213  00FEAD  20                 	db	32
  1214  00FEAE  41                 	db	65	;'A'
  1215  00FEAF  4C                 	db	76	;'L'
  1216  00FEB0  4C                 	db	76	;'L'
  1217  00FEB1  20                 	db	32
  1218  00FEB2  43                 	db	67	;'C'
  1219  00FEB3  41                 	db	65	;'A'
  1220  00FEB4  4E                 	db	78	;'N'
  1221  00FEB5  53                 	db	83	;'S'
  1222  00FEB6  00                 	db	0
  1223  00FEB7                     STR_90:
  1224  00FEB7  54                 	db	84	;'T'
  1225  00FEB8  53                 	db	83	;'S'
  1226  00FEB9  54                 	db	84	;'T'
  1227  00FEBA  3A                 	db	58	;':'
  1228  00FEBB  20                 	db	32
  1229  00FEBC  44                 	db	68	;'D'
  1230  00FEBD  43                 	db	67	;'C'
  1231  00FEBE  20                 	db	32
  1232  00FEBF  4D                 	db	77	;'M'
  1233  00FEC0  4F                 	db	79	;'O'
  1234  00FEC1  54                 	db	84	;'T'
  1235  00FEC2  4F                 	db	79	;'O'
  1236  00FEC3  52                 	db	82	;'R'
  1237  00FEC4  53                 	db	83	;'S'
  1238  00FEC5  00                 	db	0
  1239  00FEC6                     STR_70:
  1240  00FEC6  41                 	db	65	;'A'
  1241  00FEC7  4C                 	db	76	;'L'
  1242  00FEC8  47                 	db	71	;'G'
  1243  00FEC9  4F                 	db	79	;'O'
  1244  00FECA  52                 	db	82	;'R'
  1245  00FECB  49                 	db	73	;'I'
  1246  00FECC  54                 	db	84	;'T'
  1247  00FECD  48                 	db	72	;'H'
  1248  00FECE  4D                 	db	77	;'M'
  1249  00FECF  20                 	db	32
  1250  00FED0  54                 	db	84	;'T'
  1251  00FED1  45                 	db	69	;'E'
  1252  00FED2  53                 	db	83	;'S'
  1253  00FED3  54                 	db	84	;'T'
  1254  00FED4  00                 	db	0
  1255  00FED5                     STR_91:
  1256  00FED5  50                 	db	80	;'P'
  1257  00FED6  49                 	db	73	;'I'
  1258  00FED7  4E                 	db	78	;'N'
  1259  00FED8  20                 	db	32
  1260  00FED9  52                 	db	82	;'R'
  1261  00FEDA  41                 	db	65	;'A'
  1262  00FEDB  35                 	db	53	;'5'
  1263  00FEDC  20                 	db	32
  1264  00FEDD  48                 	db	72	;'H'
  1265  00FEDE  49                 	db	73	;'I'
  1266  00FEDF  47                 	db	71	;'G'
  1267  00FEE0  48                 	db	72	;'H'
  1268  00FEE1  2E                 	db	46
  1269  00FEE2  00                 	db	0
  1270  00FEE3                     STR_73:
  1271  00FEE3  41                 	db	65	;'A'
  1272  00FEE4  4C                 	db	76	;'L'
  1273  00FEE5  47                 	db	71	;'G'
  1274  00FEE6  32                 	db	50	;'2'
  1275  00FEE7  3A                 	db	58	;':'
  1276  00FEE8  20                 	db	32
  1277  00FEE9  31                 	db	49	;'1'
  1278  00FEEA  32                 	db	50	;'2'
  1279  00FEEB  20                 	db	32
  1280  00FEEC  43                 	db	67	;'C'
  1281  00FEED  41                 	db	65	;'A'
  1282  00FEEE  4E                 	db	78	;'N'
  1283  00FEEF  53                 	db	83	;'S'
  1284  00FEF0  00                 	db	0
  1285  00FEF1                     STR_76:
  1286  00FEF1  41                 	db	65	;'A'
  1287  00FEF2  4C                 	db	76	;'L'
  1288  00FEF3  47                 	db	71	;'G'
  1289  00FEF4  35                 	db	53	;'5'
  1290  00FEF5  3A                 	db	58	;':'
  1291  00FEF6  20                 	db	32
  1292  00FEF7  4E                 	db	78	;'N'
  1293  00FEF8  4F                 	db	79	;'O'
  1294  00FEF9  20                 	db	32
  1295  00FEFA  43                 	db	67	;'C'
  1296  00FEFB  41                 	db	65	;'A'
  1297  00FEFC  4E                 	db	78	;'N'
  1298  00FEFD  53                 	db	83	;'S'
  1299  00FEFE  00                 	db	0
  1300  00FEFF                     STR_71:
  1301  00FEFF  50                 	db	80	;'P'
  1302  00FF00  55                 	db	85	;'U'
  1303  00FF01  53                 	db	83	;'S'
  1304  00FF02  48                 	db	72	;'H'
  1305  00FF03  20                 	db	32
  1306  00FF04  54                 	db	84	;'T'
  1307  00FF05  4F                 	db	79	;'O'
  1308  00FF06  20                 	db	32
  1309  00FF07  53                 	db	83	;'S'
  1310  00FF08  54                 	db	84	;'T'
  1311  00FF09  41                 	db	65	;'A'
  1312  00FF0A  52                 	db	82	;'R'
  1313  00FF0B  54                 	db	84	;'T'
  1314  00FF0C  00                 	db	0
  1315  00FF0D                     STR_23:
  1316  00FF0D  25                 	db	37
  1317  00FF0E  64                 	db	100	;'d'
  1318  00FF0F  20                 	db	32
  1319  00FF10  4D                 	db	77	;'M'
  1320  00FF11  49                 	db	73	;'I'
  1321  00FF12  4E                 	db	78	;'N'
  1322  00FF13  20                 	db	32
  1323  00FF14  25                 	db	37
  1324  00FF15  64                 	db	100	;'d'
  1325  00FF16  20                 	db	32
  1326  00FF17  53                 	db	83	;'S'
  1327  00FF18  45                 	db	69	;'E'
  1328  00FF19  43                 	db	67	;'C'
  1329  00FF1A  00                 	db	0
  1330  00FF1B                     STR_2:
  1331  00FF1B  54                 	db	84	;'T'
  1332  00FF1C  49                 	db	73	;'I'
  1333  00FF1D  4D                 	db	77	;'M'
  1334  00FF1E  45                 	db	69	;'E'
  1335  00FF1F  3A                 	db	58	;':'
  1336  00FF20  20                 	db	32
  1337  00FF21  25                 	db	37
  1338  00FF22  64                 	db	100	;'d'
  1339  00FF23  3A                 	db	58	;':'
  1340  00FF24  25                 	db	37
  1341  00FF25  30                 	db	48	;'0'
  1342  00FF26  32                 	db	50	;'2'
  1343  00FF27  64                 	db	100	;'d'
  1344  00FF28  00                 	db	0
  1345  00FF29                     STR_79:
  1346  00FF29  54                 	db	84	;'T'
  1347  00FF2A  53                 	db	83	;'S'
  1348  00FF2B  54                 	db	84	;'T'
  1349  00FF2C  3A                 	db	58	;':'
  1350  00FF2D  20                 	db	32
  1351  00FF2E  49                 	db	73	;'I'
  1352  00FF2F  52                 	db	82	;'R'
  1353  00FF30  20                 	db	32
  1354  00FF31  53                 	db	83	;'S'
  1355  00FF32  4E                 	db	78	;'N'
  1356  00FF33  53                 	db	83	;'S'
  1357  00FF34  52                 	db	82	;'R'
  1358  00FF35  00                 	db	0
  1359  00FF36                     STR_113:
  1360  00FF36  53                 	db	83	;'S'
  1361  00FF37  4F                 	db	79	;'O'
  1362  00FF38  4C                 	db	76	;'L'
  1363  00FF39  45                 	db	69	;'E'
  1364  00FF3A  4E                 	db	78	;'N'
  1365  00FF3B  4F                 	db	79	;'O'
  1366  00FF3C  49                 	db	73	;'I'
  1367  00FF3D  44                 	db	68	;'D'
  1368  00FF3E  20                 	db	32
  1369  00FF3F  54                 	db	84	;'T'
  1370  00FF40  53                 	db	83	;'S'
  1371  00FF41  54                 	db	84	;'T'
  1372  00FF42  00                 	db	0
  1373  00FF43                     STR_65:
  1374  00FF43  54                 	db	84	;'T'
  1375  00FF44  49                 	db	73	;'I'
  1376  00FF45  4D                 	db	77	;'M'
  1377  00FF46  45                 	db	69	;'E'
  1378  00FF47  20                 	db	32
  1379  00FF48  25                 	db	37
  1380  00FF49  64                 	db	100	;'d'
  1381  00FF4A  3A                 	db	58	;':'
  1382  00FF4B  25                 	db	37
  1383  00FF4C  30                 	db	48	;'0'
  1384  00FF4D  32                 	db	50	;'2'
  1385  00FF4E  64                 	db	100	;'d'
  1386  00FF4F  00                 	db	0
  1387  00FF50                     STR_74:
  1388  00FF50  41                 	db	65	;'A'
  1389  00FF51  4C                 	db	76	;'L'
  1390  00FF52  47                 	db	71	;'G'
  1391  00FF53  33                 	db	51	;'3'
  1392  00FF54  3A                 	db	58	;':'
  1393  00FF55  20                 	db	32
  1394  00FF56  31                 	db	49	;'1'
  1395  00FF57  20                 	db	32
  1396  00FF58  43                 	db	67	;'C'
  1397  00FF59  41                 	db	65	;'A'
  1398  00FF5A  4E                 	db	78	;'N'
  1399  00FF5B  00                 	db	0
  1400  00FF5C                     STR_93:
  1401  00FF5C  50                 	db	80	;'P'
  1402  00FF5D  49                 	db	73	;'I'
  1403  00FF5E  4E                 	db	78	;'N'
  1404  00FF5F  20                 	db	32
  1405  00FF60  52                 	db	82	;'R'
  1406  00FF61  41                 	db	65	;'A'
  1407  00FF62  33                 	db	51	;'3'
  1408  00FF63  2E                 	db	46
  1409  00FF64  2E                 	db	46
  1410  00FF65  2E                 	db	46
  1411  00FF66  00                 	db	0
  1412  00FF67                     STR_95:
  1413  00FF67  50                 	db	80	;'P'
  1414  00FF68  49                 	db	73	;'I'
  1415  00FF69  4E                 	db	78	;'N'
  1416  00FF6A  20                 	db	32
  1417  00FF6B  52                 	db	82	;'R'
  1418  00FF6C  41                 	db	65	;'A'
  1419  00FF6D  34                 	db	52	;'4'
  1420  00FF6E  2E                 	db	46
  1421  00FF6F  2E                 	db	46
  1422  00FF70  2E                 	db	46
  1423  00FF71  00                 	db	0
  1424  00FF72                     STR_64:
  1425  00FF72  53                 	db	83	;'S'
  1426  00FF73  4F                 	db	79	;'O'
  1427  00FF74  52                 	db	82	;'R'
  1428  00FF75  54                 	db	84	;'T'
  1429  00FF76  49                 	db	73	;'I'
  1430  00FF77  4E                 	db	78	;'N'
  1431  00FF78  47                 	db	71	;'G'
  1432  00FF79  2E                 	db	46
  1433  00FF7A  2E                 	db	46
  1434  00FF7B  2E                 	db	46
  1435  00FF7C  00                 	db	0
  1436  00FF7D                     STR_84:
  1437  00FF7D  54                 	db	84	;'T'
  1438  00FF7E  53                 	db	83	;'S'
  1439  00FF7F  54                 	db	84	;'T'
  1440  00FF80  3A                 	db	58	;':'
  1441  00FF81  20                 	db	32
  1442  00FF82  43                 	db	67	;'C'
  1443  00FF83  4F                 	db	79	;'O'
  1444  00FF84  4E                 	db	78	;'N'
  1445  00FF85  44                 	db	68	;'D'
  1446  00FF86  00                 	db	0
  1447  00FF87                     STR_114:
  1448  00FF87  50                 	db	80	;'P'
  1449  00FF88  55                 	db	85	;'U'
  1450  00FF89  53                 	db	83	;'S'
  1451  00FF8A  48                 	db	72	;'H'
  1452  00FF8B  20                 	db	32
  1453  00FF8C  44                 	db	68	;'D'
  1454  00FF8D  4F                 	db	79	;'O'
  1455  00FF8E  4E                 	db	78	;'N'
  1456  00FF8F  45                 	db	69	;'E'
  1457  00FF90  00                 	db	0
  1458  00FF91                     STR_88:
  1459  00FF91  41                 	db	65	;'A'
  1460  00FF92  43                 	db	67	;'C'
  1461  00FF93  54                 	db	84	;'T'
  1462  00FF94  55                 	db	85	;'U'
  1463  00FF95  41                 	db	65	;'A'
  1464  00FF96  54                 	db	84	;'T'
  1465  00FF97  4F                 	db	79	;'O'
  1466  00FF98  52                 	db	82	;'R'
  1467  00FF99  53                 	db	83	;'S'
  1468  00FF9A  00                 	db	0
  1469  00FF9B                     STR_22:
  1470  00FF9B  44                 	db	68	;'D'
  1471  00FF9C  55                 	db	85	;'U'
  1472  00FF9D  52                 	db	82	;'R'
  1473  00FF9E  41                 	db	65	;'A'
  1474  00FF9F  54                 	db	84	;'T'
  1475  00FFA0  49                 	db	73	;'I'
  1476  00FFA1  4F                 	db	79	;'O'
  1477  00FFA2  4E                 	db	78	;'N'
  1478  00FFA3  3A                 	db	58	;':'
  1479  00FFA4  00                 	db	0
  1480  00FFA5                     STR_86:
  1481  00FFA5  43                 	db	67	;'C'
  1482  00FFA6  4F                 	db	79	;'O'
  1483  00FFA7  4E                 	db	78	;'N'
  1484  00FFA8  44                 	db	68	;'D'
  1485  00FFA9  3A                 	db	58	;':'
  1486  00FFAA  20                 	db	32
  1487  00FFAB  25                 	db	37
  1488  00FFAC  64                 	db	100	;'d'
  1489  00FFAD  00                 	db	0
  1490  00FFAE                     STR_77:
  1491  00FFAE  53                 	db	83	;'S'
  1492  00FFAF  45                 	db	69	;'E'
  1493  00FFB0  4E                 	db	78	;'N'
  1494  00FFB1  53                 	db	83	;'S'
  1495  00FFB2  4F                 	db	79	;'O'
  1496  00FFB3  52                 	db	82	;'R'
  1497  00FFB4  53                 	db	83	;'S'
  1498  00FFB5  00                 	db	0
  1499  00FFB6                     STR_117:
  1500  00FFB6  28                 	db	40
  1501  00FFB7  6E                 	db	110	;'n'
  1502  00FFB8  75                 	db	117	;'u'
  1503  00FFB9  6C                 	db	108	;'l'
  1504  00FFBA  6C                 	db	108	;'l'
  1505  00FFBB  29                 	db	41
  1506  00FFBC  00                 	db	0
  1507  00FFBD                     STR_67:
  1508  00FFBD  46                 	db	70	;'F'
  1509  00FFBE  41                 	db	65	;'A'
  1510  00FFBF  49                 	db	73	;'I'
  1511  00FFC0  4C                 	db	76	;'L'
  1512  00FFC1  45                 	db	69	;'E'
  1513  00FFC2  44                 	db	68	;'D'
  1514  00FFC3  00                 	db	0
  1515  00FFC4                     STR_7:
  1516  00FFC4  53                 	db	83	;'S'
  1517  00FFC5  54                 	db	84	;'T'
  1518  00FFC6  41                 	db	65	;'A'
  1519  00FFC7  52                 	db	82	;'R'
  1520  00FFC8  54                 	db	84	;'T'
  1521  00FFC9  3A                 	db	58	;':'
  1522  00FFCA  00                 	db	0
  1523  00FFCB                     STR_9:
  1524  00FFCB  46                 	db	70	;'F'
  1525  00FFCC  45                 	db	69	;'E'
  1526  00FFCD  42                 	db	66	;'B'
  1527  00FFCE  00                 	db	0
  1528  00FFCF                     STR_19:
  1529  00FFCF  44                 	db	68	;'D'
  1530  00FFD0  45                 	db	69	;'E'
  1531  00FFD1  43                 	db	67	;'C'
  1532  00FFD2  00                 	db	0
  1533  00FFD3                     STR_15:
  1534  00FFD3  41                 	db	65	;'A'
  1535  00FFD4  55                 	db	85	;'U'
  1536  00FFD5  47                 	db	71	;'G'
  1537  00FFD6  00                 	db	0
  1538  00FFD7                     STR_14:
  1539  00FFD7  4A                 	db	74	;'J'
  1540  00FFD8  55                 	db	85	;'U'
  1541  00FFD9  4C                 	db	76	;'L'
  1542  00FFDA  00                 	db	0
  1543  00FFDB                     STR_8:
  1544  00FFDB  4A                 	db	74	;'J'
  1545  00FFDC  41                 	db	65	;'A'
  1546  00FFDD  4E                 	db	78	;'N'
  1547  00FFDE  00                 	db	0
  1548  00FFDF                     STR_13:
  1549  00FFDF  4A                 	db	74	;'J'
  1550  00FFE0  55                 	db	85	;'U'
  1551  00FFE1  4E                 	db	78	;'N'
  1552  00FFE2  00                 	db	0
  1553  00FFE3                     STR_16:
  1554  00FFE3  53                 	db	83	;'S'
  1555  00FFE4  45                 	db	69	;'E'
  1556  00FFE5  50                 	db	80	;'P'
  1557  00FFE6  00                 	db	0
  1558  00FFE7                     STR_10:
  1559  00FFE7  4D                 	db	77	;'M'
  1560  00FFE8  41                 	db	65	;'A'
  1561  00FFE9  52                 	db	82	;'R'
  1562  00FFEA  00                 	db	0
  1563  00FFEB                     STR_11:
  1564  00FFEB  41                 	db	65	;'A'
  1565  00FFEC  50                 	db	80	;'P'
  1566  00FFED  52                 	db	82	;'R'
  1567  00FFEE  00                 	db	0
  1568  00FFEF                     STR_20:
  1569  00FFEF  45                 	db	69	;'E'
  1570  00FFF0  52                 	db	82	;'R'
  1571  00FFF1  52                 	db	82	;'R'
  1572  00FFF2  00                 	db	0
  1573  00FFF3                     STR_17:
  1574  00FFF3  4F                 	db	79	;'O'
  1575  00FFF4  43                 	db	67	;'C'
  1576  00FFF5  54                 	db	84	;'T'
  1577  00FFF6  00                 	db	0
  1578  00FFF7                     STR_18:
  1579  00FFF7  4E                 	db	78	;'N'
  1580  00FFF8  4F                 	db	79	;'O'
  1581  00FFF9  56                 	db	86	;'V'
  1582  00FFFA  00                 	db	0
  1583  00FFFB                     STR_12:
  1584  00FFFB  4D                 	db	77	;'M'
  1585  00FFFC  41                 	db	65	;'A'
  1586  00FFFD  59                 	db	89	;'Y'
  1587  00FFFE  00                 	db	0
  1588  0000                     
  1589                           ; #config settings
  1590  00FFFF  00                 	db	0	; dummy byte at the end
  1591  0000                     
  1592                           	psect	cinit
  1593  00419C                     __pcinit:
  1594                           	opt stack 0
  1595  00419C                     start_initialization:
  1596                           	opt stack 0
  1597  00419C                     __initialization:
  1598                           	opt stack 0
  1599                           
  1600                           ; Initialize objects allocated to BANK1 (8 bytes)
  1601                           ; load TBLPTR registers with __pidataBANK1
  1602  00419C  0EDE               	movlw	low __pidataBANK1
  1603  00419E  6EF6               	movwf	tblptrl,c
  1604  0041A0  0E48               	movlw	high __pidataBANK1
  1605  0041A2  6EF7               	movwf	tblptrh,c
  1606  0041A4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1607  0041A6  6EF8               	movwf	tblptru,c
  1608  0041A8  EE01  F02F         	lfsr	0,__pdataBANK1
  1609  0041AC  EE10 F008          	lfsr	1,8
  1610  0041B0                     copy_data0:
  1611  0041B0  0009               	tblrd		*+
  1612  0041B2  CFF5 FFEE          	movff	tablat,postinc0
  1613  0041B6  50E5               	movf	postdec1,w,c
  1614  0041B8  50E1               	movf	fsr1l,w,c
  1615  0041BA  E1FA               	bnz	copy_data0
  1616                           
  1617                           ; Clear objects allocated to BANK1 (47 bytes)
  1618  0041BC  EE01  F000         	lfsr	0,__pbssBANK1
  1619  0041C0  0E2F               	movlw	47
  1620  0041C2                     clear_0:
  1621  0041C2  6AEE               	clrf	postinc0,c
  1622  0041C4  06E8               	decf	wreg,f,c
  1623  0041C6  E1FD               	bnz	clear_0
  1624                           
  1625                           ; Clear objects allocated to BANK0 (38 bytes)
  1626  0041C8  EE00  F0DA         	lfsr	0,__pbssBANK0
  1627  0041CC  0E26               	movlw	38
  1628  0041CE                     clear_1:
  1629  0041CE  6AEE               	clrf	postinc0,c
  1630  0041D0  06E8               	decf	wreg,f,c
  1631  0041D2  E1FD               	bnz	clear_1
  1632                           
  1633                           ; Clear objects allocated to COMRAM (35 bytes)
  1634  0041D4  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1635  0041D8  0E23               	movlw	35
  1636  0041DA                     clear_2:
  1637  0041DA  6AEE               	clrf	postinc0,c
  1638  0041DC  06E8               	decf	wreg,f,c
  1639  0041DE  E1FD               	bnz	clear_2
  1640  0041E0                     end_of_initialization:
  1641                           	opt stack 0
  1642  0041E0                     __end_of__initialization:
  1643                           	opt stack 0
  1644  0041E0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1645  0041E2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1646  0041E4  0100               	movlb	0
  1647  0041E6  EF5F  F01B         	goto	_main	;jump to C main() function
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657                           	psect	bssCOMRAM
  1658  00005B                     __pbssCOMRAM:
  1659                           	opt stack 0
  1660  00005B                     _back:
  1661                           	opt stack 0
  1662  00005B                     	ds	2
  1663  00005D                     _count_can_no_lab:
  1664                           	opt stack 0
  1665  00005D                     	ds	2
  1666  00005F                     _count_can_w_lab:
  1667                           	opt stack 0
  1668  00005F                     	ds	2
  1669  000061                     _count_pop_no_tab:
  1670                           	opt stack 0
  1671  000061                     	ds	2
  1672  000063                     _count_pop_w_tab:
  1673                           	opt stack 0
  1674  000063                     	ds	2
  1675  000065                     _debug:
  1676                           	opt stack 0
  1677  000065                     	ds	2
  1678  000067                     _down:
  1679                           	opt stack 0
  1680  000067                     	ds	2
  1681  000069                     _enter:
  1682                           	opt stack 0
  1683  000069                     	ds	2
  1684  00006B                     _f_ID_receive:
  1685                           	opt stack 0
  1686  00006B                     	ds	2
  1687  00006D                     _f_can_coming_to_ID:
  1688                           	opt stack 0
  1689  00006D                     	ds	2
  1690  00006F                     _f_can_coming_to_distribution:
  1691                           	opt stack 0
  1692  00006F                     	ds	2
  1693  000071                     _f_lastCan:
  1694                           	opt stack 0
  1695  000071                     	ds	2
  1696  000073                     _first:
  1697                           	opt stack 0
  1698  000073                     	ds	2
  1699  000075                     _firstboot:
  1700                           	opt stack 0
  1701  000075                     	ds	2
  1702  000077                     _up:
  1703                           	opt stack 0
  1704  000077                     	ds	2
  1705  000079                     _was_low_1:
  1706                           	opt stack 0
  1707  000079                     	ds	2
  1708  00007B                     _was_low_3:
  1709                           	opt stack 0
  1710  00007B                     	ds	2
  1711  00007D                     _input:
  1712                           	opt stack 0
  1713  00007D                     	ds	1
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	bssBANK0
  1724  0000DA                     __pbssBANK0:
  1725                           	opt stack 0
  1726  0000DA                     _IR_signal:
  1727                           	opt stack 0
  1728  0000DA                     	ds	2
  1729  0000DC                     _MAG_signal:
  1730                           	opt stack 0
  1731  0000DC                     	ds	2
  1732  0000DE                     _RTCflag:
  1733                           	opt stack 0
  1734  0000DE                     	ds	2
  1735  0000E0                     _cur_state:
  1736                           	opt stack 0
  1737  0000E0                     	ds	2
  1738  0000E2                     _f_loadingNewCan:
  1739                           	opt stack 0
  1740  0000E2                     	ds	2
  1741  0000E4                     _i:
  1742                           	opt stack 0
  1743  0000E4                     	ds	2
  1744  0000E6                     _log:
  1745                           	opt stack 0
  1746  0000E6                     	ds	2
  1747  0000E8                     _log_completion:
  1748                           	opt stack 0
  1749  0000E8                     	ds	2
  1750  0000EA                     _log_count_can_no_lab:
  1751                           	opt stack 0
  1752  0000EA                     	ds	2
  1753  0000EC                     _log_count_can_w_lab:
  1754                           	opt stack 0
  1755  0000EC                     	ds	2
  1756  0000EE                     _log_count_pop_no_tab:
  1757                           	opt stack 0
  1758  0000EE                     	ds	2
  1759  0000F0                     _log_count_pop_w_tab:
  1760                           	opt stack 0
  1761  0000F0                     	ds	2
  1762  0000F2                     _log_count_total:
  1763                           	opt stack 0
  1764  0000F2                     	ds	2
  1765  0000F4                     _log_total_time:
  1766                           	opt stack 0
  1767  0000F4                     	ds	2
  1768  0000F6                     _logstate:
  1769                           	opt stack 0
  1770  0000F6                     	ds	2
  1771  0000F8                     _total_time:
  1772                           	opt stack 0
  1773  0000F8                     	ds	2
  1774  0000FA                     _var:
  1775                           	opt stack 0
  1776  0000FA                     	ds	2
  1777  0000FC                     _machine_state:
  1778                           	opt stack 0
  1779  0000FC                     	ds	1
  1780  0000FD                     _sel:
  1781                           	opt stack 0
  1782  0000FD                     	ds	1
  1783  0000FE                     _count_total:
  1784                           	opt stack 0
  1785  0000FE                     	ds	2
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           fsr1l	equ	0xFE1
  1794                           
  1795                           	psect	bssBANK1
  1796  000100                     __pbssBANK1:
  1797                           	opt stack 0
  1798  000100                     _log_startTime:
  1799                           	opt stack 0
  1800  000100                     	ds	14
  1801  00010E                     _startTime:
  1802                           	opt stack 0
  1803  00010E                     	ds	14
  1804  00011C                     _servoTimes:
  1805                           	opt stack 0
  1806  00011C                     	ds	8
  1807  000124                     _time:
  1808                           	opt stack 0
  1809  000124                     	ds	7
  1810  00012B                     _cur_can:
  1811                           	opt stack 0
  1812  00012B                     	ds	2
  1813  00012D                     _f_can_distributed:
  1814                           	opt stack 0
  1815  00012D                     	ds	2
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           fsr1l	equ	0xFE1
  1824                           
  1825                           	psect	dataBANK1
  1826  00012F                     __pdataBANK1:
  1827                           	opt stack 0
  1828  00012F                     UI@F3225:
  1829                           	opt stack 0
  1830  00012F                     	ds	4
  1831  000133                     printRTC@F3216:
  1832                           	opt stack 0
  1833  000133                     	ds	4
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	cstackBANK0
  1844  000080                     __pcstackBANK0:
  1845                           	opt stack 0
  1846  000080                     ??_delay_ms:
  1847  000080                     ??_PortTests:
  1848  000080                     ??_isdigit:
  1849  000080                     ??_readADC:
  1850  000080                     ??_I2C_Master_Wait:
  1851  000080                     ?___wmul:
  1852                           	opt stack 0
  1853  000080                     ?___awmod:
  1854                           	opt stack 0
  1855  000080                     ?___lwdiv:
  1856                           	opt stack 0
  1857  000080                     ?___lldiv:
  1858                           	opt stack 0
  1859  000080                     lcdNibble@temp:
  1860                           	opt stack 0
  1861  000080                     initTime@m:
  1862                           	opt stack 0
  1863  000080                     updateServoPosition@time_us:
  1864                           	opt stack 0
  1865  000080                     EEPROM_read@address:
  1866                           	opt stack 0
  1867  000080                     ___wmul@multiplier:
  1868                           	opt stack 0
  1869  000080                     ___awmod@dividend:
  1870                           	opt stack 0
  1871  000080                     ___lwdiv@dividend:
  1872                           	opt stack 0
  1873  000080                     strcpy@to:
  1874                           	opt stack 0
  1875  000080                     ___lldiv@dividend:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x0
  1879  000080                     	ds	1
  1880  000081                     readADC@channel:
  1881                           	opt stack 0
  1882  000081                     I2C_Master_Read@a:
  1883                           	opt stack 0
  1884  000081                     lcdNibble@data:
  1885                           	opt stack 0
  1886  000081                     initTime@h:
  1887                           	opt stack 0
  1888  000081                     delay_ms@milliseconds:
  1889                           	opt stack 0
  1890  000081                     _isdigit$1946:
  1891                           	opt stack 0
  1892  000081                     I2C_Master_Write@d:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x1
  1896  000081                     	ds	1
  1897  000082                     ??_readIR:
  1898  000082                     ??_readMAG:
  1899  000082                     I2C_Master_Read@temp:
  1900                           	opt stack 0
  1901  000082                     lcdInst@data:
  1902                           	opt stack 0
  1903  000082                     putch@data:
  1904                           	opt stack 0
  1905  000082                     initTime@w:
  1906                           	opt stack 0
  1907  000082                     isdigit@c:
  1908                           	opt stack 0
  1909  000082                     updateServoPosition@timer:
  1910                           	opt stack 0
  1911  000082                     ___wmul@multiplicand:
  1912                           	opt stack 0
  1913  000082                     ___awmod@divisor:
  1914                           	opt stack 0
  1915  000082                     ___lwdiv@divisor:
  1916                           	opt stack 0
  1917  000082                     strcpy@from:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x2
  1921  000082                     	ds	1
  1922  000083                     ??_initLCD:
  1923  000083                     initTime@DD:
  1924                           	opt stack 0
  1925  000083                     getRTC@i:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3
  1929  000083                     	ds	1
  1930  000084                     ??_updateServoPosition:
  1931  000084                     initTime@MM:
  1932                           	opt stack 0
  1933  000084                     ___awmod@counter:
  1934                           	opt stack 0
  1935  000084                     readIR@res:
  1936                           	opt stack 0
  1937  000084                     readMAG@res:
  1938                           	opt stack 0
  1939  000084                     ___wmul@product:
  1940                           	opt stack 0
  1941  000084                     ___lwdiv@quotient:
  1942                           	opt stack 0
  1943  000084                     strcpy@cp:
  1944                           	opt stack 0
  1945  000084                     ___lldiv@divisor:
  1946                           	opt stack 0
  1947                           
  1948                           ; 4 bytes @ 0x4
  1949  000084                     	ds	1
  1950  000085                     ??_initSortTimer:
  1951  000085                     initTime@YY:
  1952                           	opt stack 0
  1953  000085                     ___awmod@sign:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x5
  1957  000085                     	ds	1
  1958  000086                     ??_getIR:
  1959  000086                     ??_getMAG:
  1960  000086                     ?___awdiv:
  1961                           	opt stack 0
  1962  000086                     initTime@s:
  1963                           	opt stack 0
  1964  000086                     ___lwdiv@counter:
  1965                           	opt stack 0
  1966  000086                     updateServoPosition@my_time:
  1967                           	opt stack 0
  1968  000086                     ___awdiv@dividend:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x6
  1972  000086                     	ds	1
  1973  000087                     ?___lwmod:
  1974                           	opt stack 0
  1975  000087                     ___lwmod@dividend:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x7
  1979  000087                     	ds	1
  1980  000088                     ??_ID:
  1981  000088                     ??_Distribution:
  1982  000088                     ??_initServos:
  1983  000088                     initSortTimer@i:
  1984                           	opt stack 0
  1985  000088                     ___awdiv@divisor:
  1986                           	opt stack 0
  1987  000088                     ___lldiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x8
  1991  000088                     	ds	1
  1992  000089                     ___lwmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x9
  1996  000089                     	ds	1
  1997  00008A                     ___awdiv@counter:
  1998                           	opt stack 0
  1999  00008A                     ID@i:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0xA
  2003  00008A                     	ds	1
  2004  00008B                     ___awdiv@sign:
  2005                           	opt stack 0
  2006  00008B                     ___lwmod@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xB
  2010  00008B                     	ds	1
  2011  00008C                     ___lldiv@counter:
  2012                           	opt stack 0
  2013  00008C                     ___awdiv@quotient:
  2014                           	opt stack 0
  2015  00008C                     ID@sensor_outputs:
  2016                           	opt stack 0
  2017                           
  2018                           ; 6 bytes @ 0xC
  2019  00008C                     	ds	1
  2020  00008D                     I2C_Master_Init@c:
  2021                           	opt stack 0
  2022                           
  2023                           ; 4 bytes @ 0xD
  2024  00008D                     	ds	1
  2025  00008E                     ?_printf:
  2026                           	opt stack 0
  2027  00008E                     printf@f:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0xE
  2031  00008E                     	ds	3
  2032  000091                     ??_I2C_Master_Init:
  2033                           
  2034                           ; 1 bytes @ 0x11
  2035  000091                     	ds	4
  2036  000095                     ??_loadRTC:
  2037                           
  2038                           ; 1 bytes @ 0x15
  2039  000095                     	ds	1
  2040  000096                     loadRTC@i:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x16
  2044  000096                     	ds	4
  2045  00009A                     ??_printf:
  2046                           
  2047                           ; 1 bytes @ 0x1A
  2048  00009A                     	ds	4
  2049  00009E                     printf@prec:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x1E
  2053  00009E                     	ds	1
  2054  00009F                     printf@cp:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x1F
  2058  00009F                     	ds	2
  2059  0000A1                     printf@ap:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x21
  2063  0000A1                     	ds	2
  2064  0000A3                     printf@len:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x23
  2068  0000A3                     	ds	2
  2069  0000A5                     printf@val:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x25
  2073  0000A5                     	ds	2
  2074  0000A7                     printf@flag:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x27
  2078  0000A7                     	ds	1
  2079  0000A8                     printf@c:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x28
  2083  0000A8                     	ds	1
  2084  0000A9                     printf@width:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x29
  2088  0000A9                     	ds	2
  2089  0000AB                     ??_printRTC:
  2090  0000AB                     ??_algorithmTest:
  2091  0000AB                     ??_sensorTest:
  2092  0000AB                     ??_actuatorTest:
  2093  0000AB                     ??_PortTestA5:
  2094  0000AB                     ??_ToggleTestA5:
  2095  0000AB                     ??_SolenoidTestA5:
  2096  0000AB                     ??_BothServos:
  2097  0000AB                     EEPROM_write@address:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x2B
  2101  0000AB                     	ds	1
  2102  0000AC                     ToggleTestA5@on:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x2C
  2106  0000AC                     	ds	1
  2107  0000AD                     EEPROM_write@data:
  2108                           	opt stack 0
  2109  0000AD                     actuatorTest@i_1637:
  2110                           	opt stack 0
  2111  0000AD                     sensorTest@res:
  2112                           	opt stack 0
  2113  0000AD                     SolenoidTestA5@i:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x2D
  2117  0000AD                     	ds	1
  2118  0000AE                     ??_EEPROM_write:
  2119  0000AE                     actuatorTest@i_1644:
  2120                           	opt stack 0
  2121  0000AE                     printRTC@INT_time:
  2122                           	opt stack 0
  2123                           
  2124                           ; 14 bytes @ 0x2E
  2125  0000AE                     	ds	1
  2126  0000AF                     EEPROM_write@i:
  2127                           	opt stack 0
  2128  0000AF                     actuatorTest@i_1645:
  2129                           	opt stack 0
  2130  0000AF                     SolenoidTestA5@i_1690:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x2F
  2134  0000AF                     	ds	1
  2135  0000B0                     EEPROM_write@i_1328:
  2136                           	opt stack 0
  2137  0000B0                     actuatorTest@i_1647:
  2138                           	opt stack 0
  2139  0000B0                     SolenoidTestA5@i_1692:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x30
  2143  0000B0                     	ds	1
  2144  0000B1                     ??_Loading:
  2145  0000B1                     logRun@num:
  2146                           	opt stack 0
  2147  0000B1                     actuatorTest@i_1648:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x31
  2151  0000B1                     	ds	1
  2152  0000B2                     logRun@byte1:
  2153                           	opt stack 0
  2154  0000B2                     actuatorTest@i_1650:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x32
  2158  0000B2                     	ds	1
  2159  0000B3                     logRun@byte2:
  2160                           	opt stack 0
  2161  0000B3                     actuatorTest@i_1651:
  2162                           	opt stack 0
  2163  0000B3                     Loading@addr:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x33
  2167  0000B3                     	ds	1
  2168  0000B4                     logRun@byte3:
  2169                           	opt stack 0
  2170  0000B4                     actuatorTest@i_1653:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x34
  2174  0000B4                     	ds	1
  2175  0000B5                     Loading@byte1:
  2176                           	opt stack 0
  2177  0000B5                     logRun@byte_i:
  2178                           	opt stack 0
  2179  0000B5                     actuatorTest@i_1654:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x35
  2183  0000B5                     	ds	1
  2184  0000B6                     logRun@byte11:
  2185                           	opt stack 0
  2186  0000B6                     actuatorTest@i_1656:
  2187                           	opt stack 0
  2188  0000B6                     Loading@i:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x36
  2192  0000B6                     	ds	1
  2193  0000B7                     actuatorTest@i_1657:
  2194                           	opt stack 0
  2195  0000B7                     logRun@i:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x37
  2199  0000B7                     	ds	1
  2200  0000B8                     actuatorTest@i_1659:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x38
  2204  0000B8                     	ds	1
  2205  0000B9                     actuatorTest@i_1660:
  2206                           	opt stack 0
  2207  0000B9                     logRun@addr:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x39
  2211  0000B9                     	ds	1
  2212  0000BA                     actuatorTest@i_1663:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x3A
  2216  0000BA                     	ds	1
  2217  0000BB                     actuatorTest@i_1664:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x3B
  2221  0000BB                     	ds	1
  2222  0000BC                     actuatorTest@i_1666:
  2223                           	opt stack 0
  2224  0000BC                     printRTC@RTC_month:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x3C
  2228  0000BC                     	ds	1
  2229  0000BD                     actuatorTest@i_1667:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x3D
  2233  0000BD                     	ds	1
  2234  0000BE                     actuatorTest@i_1669:
  2235                           	opt stack 0
  2236  0000BE                     printRTC@month:
  2237                           	opt stack 0
  2238                           
  2239                           ; 4 bytes @ 0x3E
  2240  0000BE                     	ds	1
  2241  0000BF                     actuatorTest@i_1670:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x3F
  2245  0000BF                     	ds	1
  2246  0000C0                     actuatorTest@i_1673:
  2247                           	opt stack 0
  2248                           
  2249                           ; 1 bytes @ 0x40
  2250  0000C0                     	ds	1
  2251  0000C1                     actuatorTest@i_1674:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x41
  2255  0000C1                     	ds	1
  2256  0000C2                     actuatorTest@i_1676:
  2257                           	opt stack 0
  2258  0000C2                     printRTC@i:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x42
  2262  0000C2                     	ds	1
  2263  0000C3                     actuatorTest@i_1677:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x43
  2267  0000C3                     	ds	1
  2268  0000C4                     ??_UI:
  2269  0000C4                     actuatorTest@i:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x44
  2273  0000C4                     	ds	2
  2274  0000C6                     ??_Test:
  2275  0000C6                     _UI$2299:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x46
  2279  0000C6                     	ds	2
  2280  0000C8                     UI@i:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x48
  2284  0000C8                     	ds	1
  2285  0000C9                     UI@i_409:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x49
  2289  0000C9                     	ds	1
  2290  0000CA                     UI@i_412:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x4A
  2294  0000CA                     	ds	1
  2295  0000CB                     UI@i_413:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x4B
  2299  0000CB                     	ds	1
  2300  0000CC                     UI@i_431:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x4C
  2304  0000CC                     	ds	1
  2305  0000CD                     UI@i_432:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x4D
  2309  0000CD                     	ds	1
  2310  0000CE                     UI@i_435:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x4E
  2314  0000CE                     	ds	1
  2315  0000CF                     UI@i_436:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x4F
  2319  0000CF                     	ds	1
  2320  0000D0                     UI@i_439:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x50
  2324  0000D0                     	ds	1
  2325  0000D1                     UI@i_440:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x51
  2329  0000D1                     	ds	1
  2330  0000D2                     UI@i_443:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x52
  2334  0000D2                     	ds	1
  2335  0000D3                     UI@i_444:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x53
  2339  0000D3                     	ds	1
  2340  0000D4                     UI@i_447:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x54
  2344  0000D4                     	ds	1
  2345  0000D5                     UI@i_448:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x55
  2349  0000D5                     	ds	1
  2350  0000D6                     UI@month:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0x56
  2354  0000D6                     	ds	4
  2355  0000DA                     tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postdec1	equ	0xFE5
  2362                           fsr1l	equ	0xFE1
  2363                           
  2364                           ; 1 bytes @ 0x5A
  2365                           
  2366                           	psect	cstackCOMRAM
  2367  000001                     __pcstackCOMRAM:
  2368                           	opt stack 0
  2369  000001                     ??i2_I2C_Master_Wait:
  2370  000001                     ??i2_isdigit:
  2371  000001                     ?i2___wmul:
  2372                           	opt stack 0
  2373  000001                     ?i2___lwmod:
  2374                           	opt stack 0
  2375  000001                     i2lcdNibble@temp:
  2376                           	opt stack 0
  2377  000001                     i2EEPROM_read@address:
  2378                           	opt stack 0
  2379  000001                     i2___wmul@multiplier:
  2380                           	opt stack 0
  2381  000001                     i2___lwmod@dividend:
  2382                           	opt stack 0
  2383  000001                     i2strcpy@to:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x0
  2387  000001                     	ds	1
  2388  000002                     i2I2C_Master_Read@a:
  2389                           	opt stack 0
  2390  000002                     i2lcdNibble@data:
  2391                           	opt stack 0
  2392  000002                     i2_isdigit$1946:
  2393                           	opt stack 0
  2394  000002                     i2I2C_Master_Write@d:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x1
  2398  000002                     	ds	1
  2399  000003                     i2I2C_Master_Read@temp:
  2400                           	opt stack 0
  2401  000003                     i2lcdInst@data:
  2402                           	opt stack 0
  2403  000003                     i2putch@data:
  2404                           	opt stack 0
  2405  000003                     i2isdigit@c:
  2406                           	opt stack 0
  2407  000003                     i2___wmul@multiplicand:
  2408                           	opt stack 0
  2409  000003                     i2___lwmod@divisor:
  2410                           	opt stack 0
  2411  000003                     i2strcpy@from:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x2
  2415  000003                     	ds	1
  2416  000004                     i2getRTC@i:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x3
  2420  000004                     	ds	1
  2421  000005                     i2___lwmod@counter:
  2422                           	opt stack 0
  2423  000005                     i2___wmul@product:
  2424                           	opt stack 0
  2425  000005                     i2strcpy@cp:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x4
  2429  000005                     	ds	1
  2430  000006                     ?i2___lwdiv:
  2431                           	opt stack 0
  2432  000006                     i2___lwdiv@dividend:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x5
  2436  000006                     	ds	1
  2437  000007                     retrieveLog@logNum:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x6
  2441  000007                     	ds	1
  2442  000008                     i2___lwdiv@divisor:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x7
  2446  000008                     	ds	1
  2447  000009                     ??_retrieveLog:
  2448                           
  2449                           ; 1 bytes @ 0x8
  2450  000009                     	ds	1
  2451  00000A                     i2___lwdiv@quotient:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x9
  2455  00000A                     	ds	1
  2456  00000B                     retrieveLog@byte1:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0xA
  2460  00000B                     	ds	1
  2461  00000C                     retrieveLog@byte2:
  2462                           	opt stack 0
  2463  00000C                     i2___lwdiv@counter:
  2464                           	opt stack 0
  2465                           
  2466                           ; 1 bytes @ 0xB
  2467  00000C                     	ds	1
  2468  00000D                     ?i2_printf:
  2469                           	opt stack 0
  2470  00000D                     retrieveLog@byte3:
  2471                           	opt stack 0
  2472  00000D                     i2printf@f:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0xC
  2476  00000D                     	ds	1
  2477  00000E                     retrieveLog@i:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0xD
  2481  00000E                     	ds	2
  2482  000010                     retrieveLog@addr:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0xF
  2486  000010                     	ds	2
  2487  000012                     dispLogs@myLog:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x11
  2491  000012                     	ds	2
  2492  000014                     
  2493                           ; 1 bytes @ 0x13
  2494  000014                     	ds	5
  2495  000019                     ??i2_printf:
  2496                           
  2497                           ; 1 bytes @ 0x18
  2498  000019                     	ds	4
  2499  00001D                     i2printf@prec:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x1C
  2503  00001D                     	ds	1
  2504  00001E                     i2printf@cp:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x1D
  2508  00001E                     	ds	2
  2509  000020                     i2printf@ap:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x1F
  2513  000020                     	ds	2
  2514  000022                     i2printf@len:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x21
  2518  000022                     	ds	2
  2519  000024                     i2printf@val:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x23
  2523  000024                     	ds	2
  2524  000026                     i2printf@flag:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x25
  2528  000026                     	ds	1
  2529  000027                     i2printf@c:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x26
  2533  000027                     	ds	1
  2534  000028                     i2printf@width:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x27
  2538  000028                     	ds	2
  2539  00002A                     ??_printSortTimer:
  2540  00002A                     ??i2_printRTC:
  2541  00002A                     ?_inputHandler:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x29
  2545  00002A                     	ds	2
  2546  00002C                     ??_inputHandler:
  2547                           
  2548                           ; 1 bytes @ 0x2B
  2549  00002C                     	ds	1
  2550  00002D                     printSortTimer@hour:
  2551                           	opt stack 0
  2552  00002D                     i2printRTC@INT_time:
  2553                           	opt stack 0
  2554                           
  2555                           ; 14 bytes @ 0x2C
  2556  00002D                     	ds	2
  2557  00002F                     printSortTimer@curTime:
  2558                           	opt stack 0
  2559                           
  2560                           ; 14 bytes @ 0x2E
  2561  00002F                     	ds	12
  2562  00003B                     i2printRTC@RTC_month:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x3A
  2566  00003B                     	ds	2
  2567  00003D                     printSortTimer@start_sec:
  2568                           	opt stack 0
  2569  00003D                     i2printRTC@month:
  2570                           	opt stack 0
  2571                           
  2572                           ; 4 bytes @ 0x3C
  2573  00003D                     	ds	2
  2574  00003F                     printSortTimer@cur_sec:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x3E
  2578  00003F                     	ds	2
  2579  000041                     printSortTimer@min:
  2580                           	opt stack 0
  2581  000041                     i2printRTC@i:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x40
  2585  000041                     	ds	2
  2586  000043                     ??_updateMenu:
  2587  000043                     printSortTimer@sec:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x42
  2591  000043                     	ds	2
  2592  000045                     _printSortTimer$2419:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x44
  2596  000045                     	ds	2
  2597  000047                     printSortTimer@timeDiff:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x46
  2601  000047                     	ds	2
  2602  000049                     printSortTimer@i:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x48
  2606  000049                     	ds	2
  2607  00004B                     ??_handler:
  2608                           
  2609                           ; 1 bytes @ 0x4A
  2610  00004B                     	ds	16
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           
  2620 ;;
  2621 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2622 ;;
  2623 ;; *************** function _main *****************
  2624 ;; Defined at:
  2625 ;;		line 19 in file "main.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels required when called:   13
  2645 ;; This function calls:
  2646 ;;		_I2C_Master_Init
  2647 ;;		_Test
  2648 ;;		_UI
  2649 ;;		_initLCD
  2650 ;;		_initTime
  2651 ;;		_initUI
  2652 ;;		_logRun
  2653 ;;		_machineConfig
  2654 ;;		_sort
  2655 ;;		_stopSignals
  2656 ;; This function is called by:
  2657 ;;		Startup code after reset
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text0
  2662  0036BE                     __ptext0:
  2663                           	opt stack 0
  2664  0036BE                     _main:
  2665                           	opt stack 18
  2666                           
  2667                           ;main.c: 20: machineConfig();
  2668                           
  2669                           ;incstack = 0
  2670  0036BE  ECF5  F01F         	call	_machineConfig	;wreg free
  2671                           
  2672                           ;main.c: 21: initLCD();
  2673  0036C2  EC41  F021         	call	_initLCD	;wreg free
  2674                           
  2675                           ;main.c: 24: RTCflag = 0;
  2676  0036C6  0E00               	movlw	0
  2677  0036C8  0100               	movlb	0	; () banked
  2678  0036CA  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2679  0036CC  0E00               	movlw	0
  2680  0036CE  6FDE               	movwf	_RTCflag& (0+255),b
  2681                           
  2682                           ;main.c: 25: if(RTCflag){
  2683  0036D0  0100               	movlb	0	; () banked
  2684  0036D2  51DE               	movf	_RTCflag& (0+255),w,b
  2685  0036D4  0100               	movlb	0	; () banked
  2686  0036D6  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2687  0036D8  B4D8               	btfsc	status,2,c
  2688  0036DA  D016               	goto	l8174
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2692  0036DC  0E20               	movlw	32
  2693  0036DE  0100               	movlb	0	; () banked
  2694  0036E0  6F80               	movwf	initTime@m& (0+255),b
  2695  0036E2  0E15               	movlw	21
  2696  0036E4  0100               	movlb	0	; () banked
  2697  0036E6  6F81               	movwf	initTime@h& (0+255),b
  2698  0036E8  0E04               	movlw	4
  2699  0036EA  0100               	movlb	0	; () banked
  2700  0036EC  6F82               	movwf	initTime@w& (0+255),b
  2701  0036EE  0E15               	movlw	21
  2702  0036F0  0100               	movlb	0	; () banked
  2703  0036F2  6F83               	movwf	initTime@DD& (0+255),b
  2704  0036F4  0E03               	movlw	3
  2705  0036F6  0100               	movlb	0	; () banked
  2706  0036F8  6F84               	movwf	initTime@MM& (0+255),b
  2707  0036FA  0E17               	movlw	23
  2708  0036FC  0100               	movlb	0	; () banked
  2709  0036FE  6F85               	movwf	initTime@YY& (0+255),b
  2710  003700  0E42               	movlw	66
  2711  003702  ECF4  F023         	call	_initTime
  2712                           
  2713                           ;main.c: 27: }
  2714  003706  D00B               	goto	l8176
  2715  003708                     l8174:
  2716                           
  2717                           ;main.c: 28: else{
  2718                           ;main.c: 29: I2C_Master_Init(10000);
  2719  003708  0E10               	movlw	16
  2720  00370A  0100               	movlb	0	; () banked
  2721  00370C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2722  00370E  0E27               	movlw	39
  2723  003710  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2724  003712  0E00               	movlw	0
  2725  003714  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2726  003716  0E00               	movlw	0
  2727  003718  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2728  00371A  ECC5  F01F         	call	_I2C_Master_Init	;wreg free
  2729  00371E                     l8176:
  2730                           
  2731                           ;main.c: 30: }
  2732                           ;main.c: 32: initUI();
  2733  00371E  ECFD  F022         	call	_initUI	;wreg free
  2734                           
  2735                           ;main.c: 33: first = 1;
  2736  003722  0E00               	movlw	0
  2737  003724  6E74               	movwf	_first+1,c
  2738  003726  0E01               	movlw	1
  2739  003728  6E73               	movwf	_first,c
  2740                           
  2741                           ;main.c: 44: switch(machine_state){
  2742                           
  2743                           ;main.c: 43: while(1){
  2744  00372A  D017               	goto	l8198
  2745  00372C                     l8180:
  2746                           
  2747                           ;main.c: 46: UI();
  2748  00372C  EC65  F004         	call	_UI	;wreg free
  2749                           
  2750                           ;main.c: 47: break;
  2751  003730  D014               	goto	l8198
  2752  003732                     l8182:
  2753                           
  2754                           ;main.c: 49: sort();
  2755  003732  ECE3  F023         	call	_sort	;wreg free
  2756                           
  2757                           ;main.c: 50: break;
  2758  003736  D011               	goto	l8198
  2759  003738                     l8184:
  2760                           
  2761                           ;main.c: 52: stopSignals();
  2762  003738  EC20  F024         	call	_stopSignals	;wreg free
  2763                           
  2764                           ;main.c: 53: logRun();
  2765  00373C  EC54  F018         	call	_logRun	;wreg free
  2766                           
  2767                           ;main.c: 54: first = 1;
  2768  003740  0E00               	movlw	0
  2769  003742  6E74               	movwf	_first+1,c
  2770  003744  0E01               	movlw	1
  2771  003746  6E73               	movwf	_first,c
  2772                           
  2773                           ;main.c: 55: UI();
  2774  003748  EC65  F004         	call	_UI	;wreg free
  2775                           
  2776                           ;main.c: 56: break;
  2777  00374C  D006               	goto	l8198
  2778  00374E                     l8192:
  2779                           
  2780                           ;main.c: 58: Test();
  2781  00374E  EC7F  F019         	call	_Test	;wreg free
  2782                           
  2783                           ;main.c: 59: break;
  2784  003752  D003               	goto	l8198
  2785  003754                     l8194:
  2786                           
  2787                           ;main.c: 61: stopSignals();
  2788  003754  EC20  F024         	call	_stopSignals	;wreg free
  2789  003758                     l487:
  2790  003758  D7FF               	goto	l487
  2791  00375A                     l8198:
  2792  00375A  0100               	movlb	0	; () banked
  2793  00375C  51FC               	movf	_machine_state& (0+255),w,b
  2794                           
  2795                           ; Switch size 1, requested type "space"
  2796                           ; Number of cases is 5, Range of values is 0 to 4
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte           16     9 (average)
  2800                           ;	Chosen strategy is simple_byte
  2801  00375E  0A00               	xorlw	0	; case 0
  2802  003760  B4D8               	btfsc	status,2,c
  2803  003762  D7E4               	goto	l8180
  2804  003764  0A01               	xorlw	1	; case 1
  2805  003766  B4D8               	btfsc	status,2,c
  2806  003768  D7E4               	goto	l8182
  2807  00376A  0A03               	xorlw	3	; case 2
  2808  00376C  B4D8               	btfsc	status,2,c
  2809  00376E  D7E4               	goto	l8184
  2810  003770  0A01               	xorlw	1	; case 3
  2811  003772  B4D8               	btfsc	status,2,c
  2812  003774  D7EC               	goto	l8192
  2813  003776  0A07               	xorlw	7	; case 4
  2814  003778  B4D8               	btfsc	status,2,c
  2815  00377A  D7EC               	goto	l8194
  2816                           
  2817                           ; BSR set to: 0
  2818                           
  2819                           ; BSR set to: 0
  2820  00377C  D7EE               	goto	l8198
  2821  00377E                     __end_of_main:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           postdec1	equ	0xFE5
  2830                           fsr1l	equ	0xFE1
  2831                           status	equ	0xFD8
  2832                           
  2833 ;; *************** function _stopSignals *****************
  2834 ;; Defined at:
  2835 ;;		line 70 in file "main.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    7
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text1
  2864  004840                     __ptext1:
  2865                           	opt stack 0
  2866  004840                     _stopSignals:
  2867                           	opt stack 23
  2868                           
  2869                           ;main.c: 71: LATA = 0x00;
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;incstack = 0
  2873  004840  0E00               	movlw	0
  2874  004842  6E89               	movwf	3977,c	;volatile
  2875                           
  2876                           ;main.c: 72: LATB = 0x00;
  2877  004844  0E00               	movlw	0
  2878  004846  6E8A               	movwf	3978,c	;volatile
  2879                           
  2880                           ;main.c: 73: LATC = 0x00;
  2881  004848  0E00               	movlw	0
  2882  00484A  6E8B               	movwf	3979,c	;volatile
  2883                           
  2884                           ;main.c: 74: LATD = 0x00;
  2885  00484C  0E00               	movlw	0
  2886  00484E  6E8C               	movwf	3980,c	;volatile
  2887                           
  2888                           ;main.c: 75: LATE = 0x00;
  2889  004850  0E00               	movlw	0
  2890  004852  6E8D               	movwf	3981,c	;volatile
  2891  004854  0012               	return		;funcret
  2892  004856                     __end_of_stopSignals:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _sort *****************
  2905 ;; Defined at:
  2906 ;;		line 55 in file "sort.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:   12
  2927 ;; This function calls:
  2928 ;;		_Distribution
  2929 ;;		_ID
  2930 ;;		_Loading
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text2
  2937  0047C6                     __ptext2:
  2938                           	opt stack 0
  2939  0047C6                     _sort:
  2940                           	opt stack 18
  2941                           
  2942                           ;sort.c: 56: if(machine_state == Sorting_state){
  2943                           
  2944                           ;incstack = 0
  2945  0047C6  0100               	movlb	0	; () banked
  2946  0047C8  05FC               	decf	_machine_state& (0+255),w,b
  2947  0047CA  B4D8               	btfsc	status,2,c
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;sort.c: 57: Loading();
  2951  0047CC  EC7A  F015         	call	_Loading	;wreg free
  2952                           
  2953                           ;sort.c: 58: }
  2954                           ;sort.c: 59: if(machine_state == Sorting_state){
  2955  0047D0  0100               	movlb	0	; () banked
  2956  0047D2  05FC               	decf	_machine_state& (0+255),w,b
  2957  0047D4  B4D8               	btfsc	status,2,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;sort.c: 60: ID();
  2961  0047D6  ECF2  F016         	call	_ID	;wreg free
  2962                           
  2963                           ;sort.c: 61: }
  2964                           ;sort.c: 62: if(machine_state == Sorting_state){
  2965  0047DA  0100               	movlb	0	; () banked
  2966  0047DC  05FC               	decf	_machine_state& (0+255),w,b
  2967  0047DE  A4D8               	btfss	status,2,c
  2968  0047E0  0012               	return	
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;sort.c: 63: Distribution();
  2972  0047E2  ECA5  F017         	call	_Distribution	;wreg free
  2973  0047E6  0012               	return	
  2974  0047E8                     __end_of_sort:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1l	equ	0xFE1
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _Loading *****************
  2987 ;; Defined at:
  2988 ;;		line 67 in file "sort.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  i               2   54[BANK0 ] int 
  2993 ;;  addr            2   51[BANK0 ] unsigned short 
  2994 ;;  byte1           1   53[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;Total ram usage:        7 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:   11
  3011 ;; This function calls:
  3012 ;;		_EEPROM_read
  3013 ;;		_EEPROM_write
  3014 ;;		_delay_ms
  3015 ;;		_getIR
  3016 ;;		_initGlobalVars
  3017 ;;		_initServos
  3018 ;;		_initSortTimer
  3019 ;;		_lcdInst
  3020 ;; This function is called by:
  3021 ;;		_sort
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text3
  3026  002AF4                     __ptext3:
  3027                           	opt stack 0
  3028  002AF4                     _Loading:
  3029                           	opt stack 18
  3030                           
  3031                           ;sort.c: 68: if(first){
  3032                           
  3033                           ;incstack = 0
  3034  002AF4  5073               	movf	_first,w,c
  3035  002AF6  1074               	iorwf	_first+1,w,c
  3036  002AF8  B4D8               	btfsc	status,2,c
  3037  002AFA  D074               	goto	l6448
  3038                           
  3039                           ;sort.c: 69: initGlobalVars();
  3040  002AFC  EC2C  F01F         	call	_initGlobalVars	;wreg free
  3041                           
  3042                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3043  002B00  0E01               	movlw	1
  3044  002B02  EC51  F024         	call	_lcdInst
  3045  002B06  0E68               	movlw	104
  3046  002B08  0100               	movlb	0	; () banked
  3047  002B0A  6FB1               	movwf	??_Loading& (0+255),b
  3048  002B0C  0EE4               	movlw	228
  3049  002B0E                     u7137:
  3050  002B0E  2EE8               	decfsz	wreg,f,c
  3051  002B10  D7FE               	bra	u7137
  3052  002B12  2FB1               	decfsz	??_Loading& (0+255),f,b
  3053  002B14  D7FC               	bra	u7137
  3054  002B16  F000               	nop	
  3055                           
  3056                           ;sort.c: 71: initSortTimer();
  3057  002B18  EC7C  F01C         	call	_initSortTimer	;wreg free
  3058                           
  3059                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3060  002B1C  8A8B               	bsf	3979,5,c	;volatile
  3061                           
  3062                           ;sort.c: 77: sel = EEPROM_read(0);
  3063  002B1E  0E00               	movlw	0
  3064  002B20  0100               	movlb	0	; () banked
  3065  002B22  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3066  002B24  0E00               	movlw	0
  3067  002B26  6F80               	movwf	EEPROM_read@address& (0+255),b
  3068  002B28  EC14  F024         	call	_EEPROM_read	;wreg free
  3069  002B2C  0100               	movlb	0	; () banked
  3070  002B2E  6FFD               	movwf	_sel& (0+255),b
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3074  002B30  0100               	movlb	0	; () banked
  3075  002B32  51FD               	movf	_sel& (0+255),w,b
  3076  002B34  0D0B               	mullw	11
  3077  002B36  0E01               	movlw	1
  3078  002B38  24F3               	addwf	prodl,w,c
  3079  002B3A  0100               	movlb	0	; () banked
  3080  002B3C  6FB3               	movwf	Loading@addr& (0+255),b
  3081  002B3E  0E00               	movlw	0
  3082  002B40  20F4               	addwfc	prodh,w,c
  3083  002B42  0100               	movlb	0	; () banked
  3084  002B44  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3088  002B46  0E7F               	movlw	127
  3089  002B48  0100               	movlb	0	; () banked
  3090  002B4A  6FB5               	movwf	Loading@byte1& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3094  002B4C  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3095  002B50  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3096  002B54  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3097  002B58  EC82  F01A         	call	_EEPROM_write	;wreg free
  3098                           
  3099                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3100  002B5C  9A89               	bcf	3977,5,c	;volatile
  3101                           
  3102                           ;sort.c: 84: for(int i=0; i<46; i++){
  3103  002B5E  0E00               	movlw	0
  3104  002B60  0100               	movlb	0	; () banked
  3105  002B62  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3106  002B64  0E00               	movlw	0
  3107  002B66  6FB6               	movwf	Loading@i& (0+255),b
  3108                           
  3109                           ; BSR set to: 0
  3110  002B68  0100               	movlb	0	; () banked
  3111  002B6A  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3112  002B6C  D008               	goto	l6436
  3113  002B6E  0100               	movlb	0	; () banked
  3114  002B70  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3115  002B72  E126               	bnz	l730
  3116  002B74  0E2E               	movlw	46
  3117  002B76  0100               	movlb	0	; () banked
  3118  002B78  5DB6               	subwf	Loading@i& (0+255),w,b
  3119  002B7A  B0D8               	btfsc	status,0,c
  3120  002B7C  D021               	goto	l730
  3121  002B7E                     l6436:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3125  002B7E  BA89               	btfsc	3977,5,c	;volatile
  3126  002B80  D004               	goto	u4860
  3127  002B82  0100               	movlb	0	; () banked
  3128  002B84  6BB1               	clrf	??_Loading& (0+255),b
  3129  002B86  2BB1               	incf	??_Loading& (0+255),f,b
  3130  002B88  D002               	goto	u4878
  3131  002B8A                     u4860:
  3132  002B8A  0100               	movlb	0	; () banked
  3133  002B8C  6BB1               	clrf	??_Loading& (0+255),b
  3134  002B8E                     u4878:
  3135  002B8E  0100               	movlb	0	; () banked
  3136  002B90  3BB1               	swapf	??_Loading& (0+255),f,b
  3137  002B92  47B1               	rlncf	??_Loading& (0+255),f,b
  3138  002B94  5089               	movf	3977,w,c	;volatile
  3139  002B96  0100               	movlb	0	; () banked
  3140  002B98  19B1               	xorwf	??_Loading& (0+255),w,b
  3141  002B9A  0BDF               	andlw	-33
  3142  002B9C  19B1               	xorwf	??_Loading& (0+255),w,b
  3143  002B9E  6E89               	movwf	3977,c	;volatile
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;sort.c: 86: delay_ms(45-i);
  3147  002BA0  0100               	movlb	0	; () banked
  3148  002BA2  51B6               	movf	Loading@i& (0+255),w,b
  3149  002BA4  0800               	sublw	0
  3150  002BA6  0F2D               	addlw	45
  3151  002BA8  EC83  F023         	call	_delay_ms
  3152  002BAC  0100               	movlb	0	; () banked
  3153  002BAE  4BB6               	infsnz	Loading@i& (0+255),f,b
  3154  002BB0  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3155                           
  3156                           ; BSR set to: 0
  3157  002BB2  0100               	movlb	0	; () banked
  3158  002BB4  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3159  002BB6  D7E3               	goto	l6436
  3160  002BB8  0100               	movlb	0	; () banked
  3161  002BBA  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3162  002BBC  E101               	bnz	u4880
  3163  002BBE  D7DA               	goto	L1
  3164  002BC0                     u4880:
  3165  002BC0                     l730:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;sort.c: 87: }
  3169                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3170  002BC0  8A89               	bsf	3977,5,c	;volatile
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;sort.c: 91: initServos();
  3174  002BC2  EC23  F020         	call	_initServos	;wreg free
  3175                           
  3176                           ;sort.c: 92: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3177  002BC6  0ECB               	movlw	203
  3178  002BC8  0100               	movlb	0	; () banked
  3179  002BCA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3180  002BCC  0EEC               	movlw	236
  3181  002BCE  0100               	movlb	0	; () banked
  3182  002BD0  6FB1               	movwf	??_Loading& (0+255),b
  3183  002BD2  0E84               	movlw	132
  3184  002BD4                     u7147:
  3185  002BD4  2EE8               	decfsz	wreg,f,c
  3186  002BD6  D7FE               	bra	u7147
  3187  002BD8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3188  002BDA  D7FC               	bra	u7147
  3189  002BDC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3190  002BDE  D7FA               	bra	u7147
  3191  002BE0  F000               	nop	
  3192                           
  3193                           ;sort.c: 93: }
  3194  002BE2  0012               	return	
  3195  002BE4                     l6448:
  3196                           
  3197                           ;sort.c: 94: else{
  3198                           ;sort.c: 97: if(!f_loadingNewCan){
  3199  002BE4  0100               	movlb	0	; () banked
  3200  002BE6  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3201  002BE8  0100               	movlb	0	; () banked
  3202  002BEA  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3203  002BEC  A4D8               	btfss	status,2,c
  3204  002BEE  D017               	goto	l6464
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;sort.c: 99: getIR();
  3208  002BF0  EC7B  F020         	call	_getIR	;wreg free
  3209                           
  3210                           ;sort.c: 101: if(!f_loadingNewCan){
  3211  002BF4  0100               	movlb	0	; () banked
  3212  002BF6  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3213  002BF8  0100               	movlb	0	; () banked
  3214  002BFA  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3215  002BFC  B4D8               	btfsc	status,2,c
  3216  002BFE  0012               	return	
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;sort.c: 105: else{
  3220                           ;sort.c: 106: count_total++;
  3221                           
  3222                           ; BSR set to: 0
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;sort.c: 103: }
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;sort.c: 102: return;
  3229  002C00  0100               	movlb	0	; () banked
  3230  002C02  4BFE               	infsnz	_count_total& (0+255),f,b
  3231  002C04  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;sort.c: 107: if(count_total == 12){
  3235  002C06  0E0C               	movlw	12
  3236  002C08  0100               	movlb	0	; () banked
  3237  002C0A  19FE               	xorwf	_count_total& (0+255),w,b
  3238  002C0C  0100               	movlb	0	; () banked
  3239  002C0E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3240  002C10  A4D8               	btfss	status,2,c
  3241  002C12  0012               	return	
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;sort.c: 108: f_lastCan = 1;
  3245  002C14  0E00               	movlw	0
  3246  002C16  6E72               	movwf	_f_lastCan+1,c
  3247  002C18  0E01               	movlw	1
  3248  002C1A  6E71               	movwf	_f_lastCan,c
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;sort.c: 109: }
  3252                           ;sort.c: 110: }
  3253                           ;sort.c: 111: }
  3254                           
  3255                           ; BSR set to: 0
  3256  002C1C  0012               	return	
  3257  002C1E                     l6464:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;sort.c: 114: else if(f_ID_receive){
  3261  002C1E  506B               	movf	_f_ID_receive,w,c
  3262  002C20  106C               	iorwf	_f_ID_receive+1,w,c
  3263  002C22  B4D8               	btfsc	status,2,c
  3264  002C24  0012               	return	
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;sort.c: 115: f_loadingNewCan = 0;
  3268  002C26  0E00               	movlw	0
  3269  002C28  0100               	movlb	0	; () banked
  3270  002C2A  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3271  002C2C  0E00               	movlw	0
  3272  002C2E  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;sort.c: 116: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3276  002C30  0E3D               	movlw	61
  3277  002C32  0100               	movlb	0	; () banked
  3278  002C34  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3279  002C36  0EE1               	movlw	225
  3280  002C38  0100               	movlb	0	; () banked
  3281  002C3A  6FB1               	movwf	??_Loading& (0+255),b
  3282  002C3C  0E3F               	movlw	63
  3283  002C3E                     u7157:
  3284  002C3E  2EE8               	decfsz	wreg,f,c
  3285  002C40  D7FE               	bra	u7157
  3286  002C42  2FB1               	decfsz	??_Loading& (0+255),f,b
  3287  002C44  D7FC               	bra	u7157
  3288  002C46  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3289  002C48  D7FA               	bra	u7157
  3290  002C4A  D000               	nop2	
  3291                           
  3292                           ;sort.c: 117: LATAbits.LATA4 = 1;
  3293  002C4C  8889               	bsf	3977,4,c	;volatile
  3294                           
  3295                           ;sort.c: 118: f_can_coming_to_ID = 1;
  3296  002C4E  0E00               	movlw	0
  3297  002C50  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3298  002C52  0E01               	movlw	1
  3299  002C54  6E6D               	movwf	_f_can_coming_to_ID,c
  3300                           
  3301                           ;sort.c: 119: _delay((unsigned long)((300)*(32000000/4000.0)));
  3302  002C56  0E0D               	movlw	13
  3303  002C58  0100               	movlb	0	; () banked
  3304  002C5A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3305  002C5C  0E2D               	movlw	45
  3306  002C5E  0100               	movlb	0	; () banked
  3307  002C60  6FB1               	movwf	??_Loading& (0+255),b
  3308  002C62  0ED7               	movlw	215
  3309  002C64                     u7167:
  3310  002C64  2EE8               	decfsz	wreg,f,c
  3311  002C66  D7FE               	bra	u7167
  3312  002C68  2FB1               	decfsz	??_Loading& (0+255),f,b
  3313  002C6A  D7FC               	bra	u7167
  3314  002C6C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3315  002C6E  D7FA               	bra	u7167
  3316  002C70  D000               	nop2	
  3317                           
  3318                           ;sort.c: 120: LATAbits.LATA4 = 0;
  3319  002C72  9889               	bcf	3977,4,c	;volatile
  3320  002C74  0012               	return	
  3321  002C76                     __end_of_Loading:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _initSortTimer *****************
  3336 ;; Defined at:
  3337 ;;		line 253 in file "sort.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  i               2    8[BANK0 ] int 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:        5 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:   10
  3358 ;; This function calls:
  3359 ;;		_getRTC
  3360 ;; This function is called by:
  3361 ;;		_Loading
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text4
  3366  0038F8                     __ptext4:
  3367                           	opt stack 0
  3368  0038F8                     _initSortTimer:
  3369                           	opt stack 18
  3370                           
  3371                           ;sort.c: 255: getRTC();
  3372                           
  3373                           ;incstack = 0
  3374  0038F8  ECF7  F01D         	call	_getRTC	;wreg free
  3375                           
  3376                           ;sort.c: 256: for(int i = 0; i < 7; i++){
  3377  0038FC  0E00               	movlw	0
  3378  0038FE  0100               	movlb	0	; () banked
  3379  003900  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3380  003902  0E00               	movlw	0
  3381  003904  6F88               	movwf	initSortTimer@i& (0+255),b
  3382  003906                     l6032:
  3383                           
  3384                           ; BSR set to: 0
  3385  003906  0100               	movlb	0	; () banked
  3386  003908  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3387  00390A  D008               	goto	l6036
  3388  00390C  0100               	movlb	0	; () banked
  3389  00390E  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3390  003910  E140               	bnz	l6042
  3391  003912  0E07               	movlw	7
  3392  003914  0100               	movlb	0	; () banked
  3393  003916  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3394  003918  B0D8               	btfsc	status,0,c
  3395  00391A  D03B               	goto	l6042
  3396  00391C                     l6036:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;sort.c: 257: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3400  00391C  0E24               	movlw	low _time
  3401  00391E  0100               	movlb	0	; () banked
  3402  003920  2588               	addwf	initSortTimer@i& (0+255),w,b
  3403  003922  6ED9               	movwf	fsr2l,c
  3404  003924  0E01               	movlw	high _time
  3405  003926  0100               	movlb	0	; () banked
  3406  003928  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3407  00392A  6EDA               	movwf	fsr2h,c
  3408  00392C  50DF               	movf	indf2,w,c
  3409  00392E  0100               	movlb	0	; () banked
  3410  003930  6F85               	movwf	??_initSortTimer& (0+255),b
  3411  003932  0100               	movlb	0	; () banked
  3412  003934  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3413  003936  0E0F               	movlw	15
  3414  003938  1785               	andwf	??_initSortTimer& (0+255),f,b
  3415  00393A  0E0F               	movlw	15
  3416  00393C  0100               	movlb	0	; () banked
  3417  00393E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3418  003940  0100               	movlb	0	; () banked
  3419  003942  5185               	movf	??_initSortTimer& (0+255),w,b
  3420  003944  0D0A               	mullw	10
  3421  003946  0E24               	movlw	low _time
  3422  003948  0100               	movlb	0	; () banked
  3423  00394A  2588               	addwf	initSortTimer@i& (0+255),w,b
  3424  00394C  6ED9               	movwf	fsr2l,c
  3425  00394E  0E01               	movlw	high _time
  3426  003950  0100               	movlb	0	; () banked
  3427  003952  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3428  003954  6EDA               	movwf	fsr2h,c
  3429  003956  50DF               	movf	indf2,w,c
  3430  003958  0B0F               	andlw	15
  3431  00395A  0100               	movlb	0	; () banked
  3432  00395C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3433  00395E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3434  003960  50F3               	movf	prodl,w,c
  3435  003962  0100               	movlb	0	; () banked
  3436  003964  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3437  003966  50F4               	movf	prodh,w,c
  3438  003968  0100               	movlb	0	; () banked
  3439  00396A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3440  00396C  90D8               	bcf	status,0,c
  3441  00396E  0100               	movlb	0	; () banked
  3442  003970  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3443  003972  6ED9               	movwf	fsr2l,c
  3444  003974  0100               	movlb	0	; () banked
  3445  003976  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3446  003978  6EDA               	movwf	fsr2h,c
  3447  00397A  0E0E               	movlw	low _startTime
  3448  00397C  26D9               	addwf	fsr2l,f,c
  3449  00397E  0E01               	movlw	high _startTime
  3450  003980  22DA               	addwfc	fsr2h,f,c
  3451  003982  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3452  003986  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3453                           
  3454                           ; BSR set to: 0
  3455  00398A  0100               	movlb	0	; () banked
  3456  00398C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3457  00398E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3458  003990  D7BA               	goto	l6032
  3459  003992                     l6042:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;sort.c: 258: }
  3463                           ;sort.c: 260: T0CON = 0b00010111;
  3464  003992  0E17               	movlw	23
  3465  003994  6ED5               	movwf	4053,c	;volatile
  3466                           
  3467                           ;sort.c: 269: TMR0H = 0b10000101;
  3468  003996  0E85               	movlw	133
  3469  003998  6ED7               	movwf	4055,c	;volatile
  3470                           
  3471                           ;sort.c: 270: TMR0L = 0b11101110;
  3472  00399A  0EEE               	movlw	238
  3473  00399C  6ED6               	movwf	4054,c	;volatile
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;sort.c: 271: TMR0ON = 1;
  3477  00399E  8ED5               	bsf	4053,7,c	;volatile
  3478                           
  3479                           ; BSR set to: 0
  3480  0039A0  0012               	return		;funcret
  3481  0039A2                     __end_of_initSortTimer:
  3482                           	opt stack 0
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           postdec1	equ	0xFE5
  3492                           fsr1l	equ	0xFE1
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _initGlobalVars *****************
  3501 ;; Defined at:
  3502 ;;		line 234 in file "sort.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    7
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_Loading
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text5
  3531  003E58                     __ptext5:
  3532                           	opt stack 0
  3533  003E58                     _initGlobalVars:
  3534                           	opt stack 21
  3535                           
  3536                           ;sort.c: 236: first = 0;
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;incstack = 0
  3540  003E58  0E00               	movlw	0
  3541  003E5A  6E74               	movwf	_first+1,c
  3542  003E5C  0E00               	movlw	0
  3543  003E5E  6E73               	movwf	_first,c
  3544                           
  3545                           ;sort.c: 239: f_loadingNewCan = 0;
  3546  003E60  0E00               	movlw	0
  3547  003E62  0100               	movlb	0	; () banked
  3548  003E64  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3549  003E66  0E00               	movlw	0
  3550  003E68  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3551                           
  3552                           ;sort.c: 240: f_lastCan = 0;
  3553  003E6A  0E00               	movlw	0
  3554  003E6C  6E72               	movwf	_f_lastCan+1,c
  3555  003E6E  0E00               	movlw	0
  3556  003E70  6E71               	movwf	_f_lastCan,c
  3557                           
  3558                           ;sort.c: 241: f_ID_receive = 1;
  3559  003E72  0E00               	movlw	0
  3560  003E74  6E6C               	movwf	_f_ID_receive+1,c
  3561  003E76  0E01               	movlw	1
  3562  003E78  6E6B               	movwf	_f_ID_receive,c
  3563                           
  3564                           ;sort.c: 242: f_can_coming_to_ID = 0;
  3565  003E7A  0E00               	movlw	0
  3566  003E7C  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3567  003E7E  0E00               	movlw	0
  3568  003E80  6E6D               	movwf	_f_can_coming_to_ID,c
  3569                           
  3570                           ;sort.c: 243: f_can_coming_to_distribution = 0;
  3571  003E82  0E00               	movlw	0
  3572  003E84  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3573  003E86  0E00               	movlw	0
  3574  003E88  6E6F               	movwf	_f_can_coming_to_distribution,c
  3575                           
  3576                           ;sort.c: 244: f_can_distributed = 0;
  3577  003E8A  0E00               	movlw	0
  3578  003E8C  0101               	movlb	1	; () banked
  3579  003E8E  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3580  003E90  0E00               	movlw	0
  3581  003E92  6F2D               	movwf	_f_can_distributed& (0+255),b
  3582                           
  3583                           ;sort.c: 247: count_total = 0;
  3584  003E94  0E00               	movlw	0
  3585  003E96  0100               	movlb	0	; () banked
  3586  003E98  6FFF               	movwf	(_count_total+1)& (0+255),b
  3587  003E9A  0E00               	movlw	0
  3588  003E9C  6FFE               	movwf	_count_total& (0+255),b
  3589                           
  3590                           ;sort.c: 248: count_pop_no_tab = 0;
  3591  003E9E  0E00               	movlw	0
  3592  003EA0  6E62               	movwf	_count_pop_no_tab+1,c
  3593  003EA2  0E00               	movlw	0
  3594  003EA4  6E61               	movwf	_count_pop_no_tab,c
  3595                           
  3596                           ;sort.c: 249: count_pop_w_tab = 0;
  3597  003EA6  0E00               	movlw	0
  3598  003EA8  6E64               	movwf	_count_pop_w_tab+1,c
  3599  003EAA  0E00               	movlw	0
  3600  003EAC  6E63               	movwf	_count_pop_w_tab,c
  3601                           
  3602                           ;sort.c: 250: count_can_w_lab = 0;
  3603  003EAE  0E00               	movlw	0
  3604  003EB0  6E60               	movwf	_count_can_w_lab+1,c
  3605  003EB2  0E00               	movlw	0
  3606  003EB4  6E5F               	movwf	_count_can_w_lab,c
  3607                           
  3608                           ;sort.c: 251: count_can_no_lab = 0;
  3609  003EB6  0E00               	movlw	0
  3610  003EB8  6E5E               	movwf	_count_can_no_lab+1,c
  3611  003EBA  0E00               	movlw	0
  3612  003EBC  6E5D               	movwf	_count_can_no_lab,c
  3613                           
  3614                           ; BSR set to: 0
  3615  003EBE  0012               	return		;funcret
  3616  003EC0                     __end_of_initGlobalVars:
  3617                           	opt stack 0
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           prodh	equ	0xFF4
  3623                           prodl	equ	0xFF3
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           postdec1	equ	0xFE5
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8
  3634                           
  3635 ;; *************** function _getIR *****************
  3636 ;; Defined at:
  3637 ;;		line 311 in file "sort.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    9
  3658 ;; This function calls:
  3659 ;;		_readIR
  3660 ;; This function is called by:
  3661 ;;		_Loading
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text6
  3666  0040F6                     __ptext6:
  3667                           	opt stack 0
  3668  0040F6                     _getIR:
  3669                           	opt stack 19
  3670                           
  3671                           ;sort.c: 312: readIR();
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;incstack = 0
  3675  0040F6  ECF5  F020         	call	_readIR	;wreg free
  3676                           
  3677                           ;sort.c: 314: if(IR_signal==1){
  3678  0040FA  0100               	movlb	0	; () banked
  3679  0040FC  05DA               	decf	_IR_signal& (0+255),w,b
  3680  0040FE  0100               	movlb	0	; () banked
  3681  004100  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3682  004102  A4D8               	btfss	status,2,c
  3683  004104  0012               	return	
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;sort.c: 315: _delay((unsigned long)((500)*(32000000/4000.0)));
  3687  004106  0E15               	movlw	21
  3688  004108  0100               	movlb	0	; () banked
  3689  00410A  6F87               	movwf	(??_getIR+1)& (0+255),b
  3690  00410C  0E4B               	movlw	75
  3691  00410E  0100               	movlb	0	; () banked
  3692  004110  6F86               	movwf	??_getIR& (0+255),b
  3693  004112  0EBE               	movlw	190
  3694  004114                     u7177:
  3695  004114  2EE8               	decfsz	wreg,f,c
  3696  004116  D7FE               	bra	u7177
  3697  004118  2F86               	decfsz	??_getIR& (0+255),f,b
  3698  00411A  D7FC               	bra	u7177
  3699  00411C  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3700  00411E  D7FA               	bra	u7177
  3701  004120  F000               	nop	
  3702                           
  3703                           ;sort.c: 316: readIR();
  3704  004122  ECF5  F020         	call	_readIR	;wreg free
  3705                           
  3706                           ;sort.c: 317: if(IR_signal==1){
  3707  004126  0100               	movlb	0	; () banked
  3708  004128  05DA               	decf	_IR_signal& (0+255),w,b
  3709  00412A  0100               	movlb	0	; () banked
  3710  00412C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3711  00412E  A4D8               	btfss	status,2,c
  3712  004130  D006               	goto	l6132
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 318: f_loadingNewCan = 1;
  3716  004132  0E00               	movlw	0
  3717  004134  0100               	movlb	0	; () banked
  3718  004136  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3719  004138  0E01               	movlw	1
  3720  00413A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3721                           
  3722                           ;sort.c: 319: }
  3723  00413C  0012               	return	
  3724  00413E                     l6132:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 320: else{
  3728                           ;sort.c: 321: f_loadingNewCan = 0;
  3729  00413E  0E00               	movlw	0
  3730  004140  0100               	movlb	0	; () banked
  3731  004142  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3732  004144  0E00               	movlw	0
  3733  004146  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736  004148  0012               	return	
  3737  00414A                     __end_of_getIR:
  3738                           	opt stack 0
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _readIR *****************
  3757 ;; Defined at:
  3758 ;;		line 23 in file "ADCFunctionality.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  res             2    4[BANK0 ] int 
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;Total ram usage:        4 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    8
  3779 ;; This function calls:
  3780 ;;		_readADC
  3781 ;; This function is called by:
  3782 ;;		_getIR
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text7
  3787  0041EA                     __ptext7:
  3788                           	opt stack 0
  3789  0041EA                     _readIR:
  3790                           	opt stack 19
  3791                           
  3792                           ;ADCFunctionality.c: 24: readADC(0);
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;incstack = 0
  3796  0041EA  0E00               	movlw	0
  3797  0041EC  EC58  F023         	call	_readADC
  3798                           
  3799                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3800  0041F0  50C3               	movf	4035,w,c	;volatile
  3801  0041F2  CFC4 F082          	movff	4036,??_readIR	;volatile
  3802  0041F6  0100               	movlb	0	; () banked
  3803  0041F8  6B83               	clrf	(??_readIR+1)& (0+255),b
  3804  0041FA  C082  F083         	movff	??_readIR,??_readIR+1
  3805  0041FE  0100               	movlb	0	; () banked
  3806  004200  6B82               	clrf	??_readIR& (0+255),b
  3807  004202  0100               	movlb	0	; () banked
  3808  004204  1182               	iorwf	??_readIR& (0+255),w,b
  3809  004206  0100               	movlb	0	; () banked
  3810  004208  6F84               	movwf	readIR@res& (0+255),b
  3811  00420A  0100               	movlb	0	; () banked
  3812  00420C  5183               	movf	(??_readIR+1)& (0+255),w,b
  3813  00420E  0100               	movlb	0	; () banked
  3814  004210  6F85               	movwf	(readIR@res+1)& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  3818  004212  0100               	movlb	0	; () banked
  3819  004214  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3820  004216  D00A               	goto	u3820
  3821  004218  0E21               	movlw	33
  3822  00421A  0100               	movlb	0	; () banked
  3823  00421C  5D84               	subwf	readIR@res& (0+255),w,b
  3824  00421E  0E03               	movlw	3
  3825  004220  0100               	movlb	0	; () banked
  3826  004222  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3827  004224  A0D8               	btfss	status,0,c
  3828  004226  D002               	goto	u3820
  3829  004228  0E01               	movlw	1
  3830  00422A  D001               	goto	u3830
  3831  00422C                     u3820:
  3832  00422C  0E00               	movlw	0
  3833  00422E                     u3830:
  3834  00422E  0100               	movlb	0	; () banked
  3835  004230  6FDA               	movwf	_IR_signal& (0+255),b
  3836  004232  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839  004234  0012               	return		;funcret
  3840  004236                     __end_of_readIR:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           postinc0	equ	0xFEE
  3849                           wreg	equ	0xFE8
  3850                           postdec1	equ	0xFE5
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _delay_ms *****************
  3860 ;; Defined at:
  3861 ;;		line 346 in file "sort.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  milliseconds    1    wreg     unsigned char 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      void 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;Total ram usage:        2 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    7
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_Loading
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text8
  3890  004706                     __ptext8:
  3891                           	opt stack 0
  3892  004706                     _delay_ms:
  3893                           	opt stack 21
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;incstack = 0
  3897                           ;delay_ms@milliseconds stored from wreg
  3898  004706  0100               	movlb	0	; () banked
  3899  004708  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3900                           
  3901                           ;sort.c: 347: while(milliseconds > 0)
  3902  00470A  D00B               	goto	l6104
  3903  00470C                     l6100:
  3904                           
  3905                           ;sort.c: 348: {
  3906                           ;sort.c: 349: milliseconds--;
  3907  00470C  0100               	movlb	0	; () banked
  3908  00470E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 350: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3912  004710  0E0B               	movlw	11
  3913  004712  0100               	movlb	0	; () banked
  3914  004714  6F80               	movwf	??_delay_ms& (0+255),b
  3915  004716  0E47               	movlw	71
  3916  004718                     u7187:
  3917  004718  2EE8               	decfsz	wreg,f,c
  3918  00471A  D7FE               	bra	u7187
  3919  00471C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3920  00471E  D7FC               	bra	u7187
  3921  004720  D000               	nop2	
  3922  004722                     l6104:
  3923  004722  0100               	movlb	0	; () banked
  3924  004724  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3925  004726  0100               	movlb	0	; () banked
  3926  004728  B4D8               	btfsc	status,2,c
  3927  00472A  0012               	return	
  3928  00472C  D7EF               	goto	l6100
  3929  00472E                     __end_of_delay_ms:
  3930                           	opt stack 0
  3931                           tblptru	equ	0xFF8
  3932                           tblptrh	equ	0xFF7
  3933                           tblptrl	equ	0xFF6
  3934                           tablat	equ	0xFF5
  3935                           prodh	equ	0xFF4
  3936                           prodl	equ	0xFF3
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _ID *****************
  3949 ;; Defined at:
  3950 ;;		line 124 in file "sort.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  i               2   10[BANK0 ] int 
  3955 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;Total ram usage:       10 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:   10
  3972 ;; This function calls:
  3973 ;;		_getMAG
  3974 ;; This function is called by:
  3975 ;;		_sort
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text9
  3980  002DE4                     __ptext9:
  3981                           	opt stack 0
  3982  002DE4                     _ID:
  3983                           	opt stack 19
  3984                           
  3985                           ;sort.c: 125: if(f_can_coming_to_ID){
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;incstack = 0
  3989  002DE4  506D               	movf	_f_can_coming_to_ID,w,c
  3990  002DE6  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3991  002DE8  B4D8               	btfsc	status,2,c
  3992  002DEA  0012               	return	
  3993                           
  3994                           ;sort.c: 127: _delay((unsigned long)((750)*(32000000/4000.0)));
  3995  002DEC  0E1F               	movlw	31
  3996  002DEE  0100               	movlb	0	; () banked
  3997  002DF0  6F89               	movwf	(??_ID+1)& (0+255),b
  3998  002DF2  0E71               	movlw	113
  3999  002DF4  0100               	movlb	0	; () banked
  4000  002DF6  6F88               	movwf	??_ID& (0+255),b
  4001  002DF8  0E1E               	movlw	30
  4002  002DFA                     u7197:
  4003  002DFA  2EE8               	decfsz	wreg,f,c
  4004  002DFC  D7FE               	bra	u7197
  4005  002DFE  2F88               	decfsz	??_ID& (0+255),f,b
  4006  002E00  D7FC               	bra	u7197
  4007  002E02  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4008  002E04  D7FA               	bra	u7197
  4009  002E06  F000               	nop	
  4010                           
  4011                           ;sort.c: 132: int sensor_outputs[3];
  4012                           ;sort.c: 136: sensor_outputs[0] = PORTAbits.RA2;
  4013  002E08  A480               	btfss	3968,2,c	;volatile
  4014  002E0A  D004               	goto	u4940
  4015  002E0C  0100               	movlb	0	; () banked
  4016  002E0E  6B88               	clrf	??_ID& (0+255),b
  4017  002E10  2B88               	incf	??_ID& (0+255),f,b
  4018  002E12  D002               	goto	u4948
  4019  002E14                     u4940:
  4020  002E14  0100               	movlb	0	; () banked
  4021  002E16  6B88               	clrf	??_ID& (0+255),b
  4022  002E18                     u4948:
  4023  002E18  0100               	movlb	0	; () banked
  4024  002E1A  5188               	movf	??_ID& (0+255),w,b
  4025  002E1C  0100               	movlb	0	; () banked
  4026  002E1E  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4027  002E20  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;sort.c: 138: if(!sensor_outputs[0]){
  4031  002E22  0100               	movlb	0	; () banked
  4032  002E24  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4033  002E26  0100               	movlb	0	; () banked
  4034  002E28  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4035  002E2A  A4D8               	btfss	status,2,c
  4036  002E2C  D029               	goto	l6498
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 139: getMAG();
  4040  002E2E  ECF3  F021         	call	_getMAG	;wreg free
  4041                           
  4042                           ;sort.c: 140: sensor_outputs[1] = MAG_signal;
  4043  002E32  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4044  002E36  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4045                           
  4046                           ;sort.c: 141: if(!sensor_outputs[1]){
  4047  002E3A  0100               	movlb	0	; () banked
  4048  002E3C  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4049  002E3E  0100               	movlb	0	; () banked
  4050  002E40  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4051  002E42  A4D8               	btfss	status,2,c
  4052  002E44  D01D               	goto	l6498
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 142: LATAbits.LATA3 = 1;
  4056  002E46  8689               	bsf	3977,3,c	;volatile
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;sort.c: 144: _delay((unsigned long)((600)*(32000000/4000.0)));
  4060  002E48  0E19               	movlw	25
  4061  002E4A  0100               	movlb	0	; () banked
  4062  002E4C  6F89               	movwf	(??_ID+1)& (0+255),b
  4063  002E4E  0E5A               	movlw	90
  4064  002E50  0100               	movlb	0	; () banked
  4065  002E52  6F88               	movwf	??_ID& (0+255),b
  4066  002E54  0EB1               	movlw	177
  4067  002E56                     u7207:
  4068  002E56  2EE8               	decfsz	wreg,f,c
  4069  002E58  D7FE               	bra	u7207
  4070  002E5A  2F88               	decfsz	??_ID& (0+255),f,b
  4071  002E5C  D7FC               	bra	u7207
  4072  002E5E  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4073  002E60  D7FA               	bra	u7207
  4074  002E62  D000               	nop2	
  4075                           
  4076                           ;sort.c: 145: sensor_outputs[2] = PORTAbits.RA2;
  4077  002E64  A480               	btfss	3968,2,c	;volatile
  4078  002E66  D004               	goto	u4970
  4079  002E68  0100               	movlb	0	; () banked
  4080  002E6A  6B88               	clrf	??_ID& (0+255),b
  4081  002E6C  2B88               	incf	??_ID& (0+255),f,b
  4082  002E6E  D002               	goto	u4978
  4083  002E70                     u4970:
  4084  002E70  0100               	movlb	0	; () banked
  4085  002E72  6B88               	clrf	??_ID& (0+255),b
  4086  002E74                     u4978:
  4087  002E74  0100               	movlb	0	; () banked
  4088  002E76  5188               	movf	??_ID& (0+255),w,b
  4089  002E78  0100               	movlb	0	; () banked
  4090  002E7A  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4091  002E7C  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;sort.c: 146: LATAbits.LATA3 = 0;
  4095  002E7E  9689               	bcf	3977,3,c	;volatile
  4096  002E80                     l6498:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;sort.c: 147: }
  4100                           ;sort.c: 148: }
  4101                           ;sort.c: 156: if(!sensor_outputs[0]){
  4102  002E80  0100               	movlb	0	; () banked
  4103  002E82  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4104  002E84  0100               	movlb	0	; () banked
  4105  002E86  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4106  002E88  A4D8               	btfss	status,2,c
  4107  002E8A  D021               	goto	l6516
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 157: if(!sensor_outputs[1]){
  4111  002E8C  0100               	movlb	0	; () banked
  4112  002E8E  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4113  002E90  0100               	movlb	0	; () banked
  4114  002E92  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4115  002E94  A4D8               	btfss	status,2,c
  4116  002E96  D014               	goto	l6512
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;sort.c: 158: if(!sensor_outputs[2]){
  4120  002E98  0100               	movlb	0	; () banked
  4121  002E9A  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4122  002E9C  0100               	movlb	0	; () banked
  4123  002E9E  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4124  002EA0  A4D8               	btfss	status,2,c
  4125  002EA2  D007               	goto	l6508
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;sort.c: 159: count_pop_no_tab++;
  4129  002EA4  4A61               	infsnz	_count_pop_no_tab,f,c
  4130  002EA6  2A62               	incf	_count_pop_no_tab+1,f,c
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;sort.c: 160: cur_can = 0;
  4134  002EA8  0E00               	movlw	0
  4135  002EAA  0101               	movlb	1	; () banked
  4136  002EAC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4137  002EAE  0E00               	movlw	0
  4138  002EB0  D014               	goto	L4
  4139  002EB2                     l6508:
  4140                           
  4141                           ;sort.c: 162: else{
  4142                           ;sort.c: 163: count_pop_w_tab++;
  4143  002EB2  4A63               	infsnz	_count_pop_w_tab,f,c
  4144  002EB4  2A64               	incf	_count_pop_w_tab+1,f,c
  4145                           
  4146                           ;sort.c: 164: cur_can = 1;
  4147  002EB6  0E00               	movlw	0
  4148  002EB8  0101               	movlb	1	; () banked
  4149  002EBA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4150  002EBC  0E01               	movlw	1
  4151  002EBE  D00D               	goto	L4
  4152  002EC0                     l6512:
  4153                           
  4154                           ;sort.c: 167: else{
  4155                           ;sort.c: 168: count_can_w_lab++;
  4156  002EC0  4A5F               	infsnz	_count_can_w_lab,f,c
  4157  002EC2  2A60               	incf	_count_can_w_lab+1,f,c
  4158                           
  4159                           ;sort.c: 169: cur_can = 2;
  4160  002EC4  0E00               	movlw	0
  4161  002EC6  0101               	movlb	1	; () banked
  4162  002EC8  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4163  002ECA  0E02               	movlw	2
  4164  002ECC  D006               	goto	L4
  4165  002ECE                     l6516:
  4166                           
  4167                           ;sort.c: 172: else{
  4168                           ;sort.c: 173: count_can_no_lab++;
  4169  002ECE  4A5D               	infsnz	_count_can_no_lab,f,c
  4170  002ED0  2A5E               	incf	_count_can_no_lab+1,f,c
  4171                           
  4172                           ;sort.c: 174: cur_can = 3;
  4173  002ED2  0E00               	movlw	0
  4174  002ED4  0101               	movlb	1	; () banked
  4175  002ED6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4176  002ED8  0E03               	movlw	3
  4177  002EDA                     L4:
  4178  002EDA  6F2B               	movwf	_cur_can& (0+255),b
  4179                           
  4180                           ; BSR set to: 1
  4181                           ;sort.c: 175: }
  4182                           ;sort.c: 179: LATCbits.LATC0 = 1;
  4183                           
  4184                           ; BSR set to: 1
  4185  002EDC  808B               	bsf	3979,0,c	;volatile
  4186                           
  4187                           ; BSR set to: 1
  4188                           ;sort.c: 180: for(int i=0;i<10000;i++)
  4189  002EDE  0E00               	movlw	0
  4190  002EE0  0100               	movlb	0	; () banked
  4191  002EE2  6F8B               	movwf	(ID@i+1)& (0+255),b
  4192  002EE4  0E00               	movlw	0
  4193  002EE6  6F8A               	movwf	ID@i& (0+255),b
  4194  002EE8                     l6524:
  4195                           
  4196                           ; BSR set to: 0
  4197  002EE8  0100               	movlb	0	; () banked
  4198  002EEA  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4199  002EEC  D008               	goto	l750
  4200  002EEE  0E10               	movlw	16
  4201  002EF0  0100               	movlb	0	; () banked
  4202  002EF2  5D8A               	subwf	ID@i& (0+255),w,b
  4203  002EF4  0E27               	movlw	39
  4204  002EF6  0100               	movlb	0	; () banked
  4205  002EF8  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4206  002EFA  B0D8               	btfsc	status,0,c
  4207  002EFC  D00D               	goto	l751
  4208  002EFE                     l750:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;sort.c: 181: {
  4212                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4213  002EFE  808B               	bsf	3979,0,c	;volatile
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;sort.c: 183: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4217  002F00  0E1A               	movlw	26
  4218  002F02                     u7217:
  4219  002F02  2EE8               	decfsz	wreg,f,c
  4220  002F04  D7FE               	bra	u7217
  4221  002F06  D000               	nop2	
  4222                           
  4223                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4224  002F08  908B               	bcf	3979,0,c	;volatile
  4225                           
  4226                           ;sort.c: 185: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4227  002F0A  0EF0               	movlw	240
  4228  002F0C                     u7227:
  4229  002F0C  2EE8               	decfsz	wreg,f,c
  4230  002F0E  D7FE               	bra	u7227
  4231  002F10  0100               	movlb	0	; () banked
  4232  002F12  4B8A               	infsnz	ID@i& (0+255),f,b
  4233  002F14  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4234  002F16  D7E8               	goto	l6524
  4235  002F18                     l751:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;sort.c: 186: }
  4239                           ;sort.c: 187: LATCbits.LATC0 = 0;
  4240  002F18  908B               	bcf	3979,0,c	;volatile
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;sort.c: 189: f_can_coming_to_distribution = 1;
  4244  002F1A  0E00               	movlw	0
  4245  002F1C  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4246  002F1E  0E01               	movlw	1
  4247  002F20  6E6F               	movwf	_f_can_coming_to_distribution,c
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;sort.c: 190: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4251  002F22  0E3D               	movlw	61
  4252  002F24  0100               	movlb	0	; () banked
  4253  002F26  6F89               	movwf	(??_ID+1)& (0+255),b
  4254  002F28  0EE1               	movlw	225
  4255  002F2A  0100               	movlb	0	; () banked
  4256  002F2C  6F88               	movwf	??_ID& (0+255),b
  4257  002F2E  0E3F               	movlw	63
  4258  002F30                     u7237:
  4259  002F30  2EE8               	decfsz	wreg,f,c
  4260  002F32  D7FE               	bra	u7237
  4261  002F34  2F88               	decfsz	??_ID& (0+255),f,b
  4262  002F36  D7FC               	bra	u7237
  4263  002F38  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4264  002F3A  D7FA               	bra	u7237
  4265  002F3C  D000               	nop2	
  4266                           
  4267                           ;sort.c: 191: LATCbits.LATC0 = 1;
  4268  002F3E  808B               	bsf	3979,0,c	;volatile
  4269                           
  4270                           ;sort.c: 193: f_can_coming_to_ID = 0;
  4271  002F40  0E00               	movlw	0
  4272  002F42  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4273  002F44  0E00               	movlw	0
  4274  002F46  6E6D               	movwf	_f_can_coming_to_ID,c
  4275  002F48  0012               	return	
  4276  002F4A                     __end_of_ID:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodh	equ	0xFF4
  4283                           prodl	equ	0xFF3
  4284                           postinc0	equ	0xFEE
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           postdec2	equ	0xFDD
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function _getMAG *****************
  4296 ;; Defined at:
  4297 ;;		line 325 in file "sort.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, status,2, status,0, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:        2 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    9
  4318 ;; This function calls:
  4319 ;;		_readMAG
  4320 ;; This function is called by:
  4321 ;;		_ID
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text10
  4326  0043E6                     __ptext10:
  4327                           	opt stack 0
  4328  0043E6                     _getMAG:
  4329                           	opt stack 19
  4330                           
  4331                           ;sort.c: 326: readMAG();
  4332                           
  4333                           ;incstack = 0
  4334  0043E6  EC1B  F021         	call	_readMAG	;wreg free
  4335                           
  4336                           ;sort.c: 328: if(MAG_signal==1){
  4337  0043EA  0100               	movlb	0	; () banked
  4338  0043EC  05DC               	decf	_MAG_signal& (0+255),w,b
  4339  0043EE  0100               	movlb	0	; () banked
  4340  0043F0  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4341  0043F2  A4D8               	btfss	status,2,c
  4342  0043F4  0012               	return	
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;sort.c: 329: _delay((unsigned long)((500)*(32000000/4000.0)));
  4346  0043F6  0E15               	movlw	21
  4347  0043F8  0100               	movlb	0	; () banked
  4348  0043FA  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4349  0043FC  0E4B               	movlw	75
  4350  0043FE  0100               	movlb	0	; () banked
  4351  004400  6F86               	movwf	??_getMAG& (0+255),b
  4352  004402  0EBE               	movlw	190
  4353  004404                     u7247:
  4354  004404  2EE8               	decfsz	wreg,f,c
  4355  004406  D7FE               	bra	u7247
  4356  004408  2F86               	decfsz	??_getMAG& (0+255),f,b
  4357  00440A  D7FC               	bra	u7247
  4358  00440C  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4359  00440E  D7FA               	bra	u7247
  4360  004410  F000               	nop	
  4361                           
  4362                           ;sort.c: 330: readMAG();
  4363  004412  EC1B  F021         	call	_readMAG	;wreg free
  4364  004416  0012               	return	
  4365  004418                     __end_of_getMAG:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           postdec1	equ	0xFE5
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _Distribution *****************
  4385 ;; Defined at:
  4386 ;;		line 196 in file "sort.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;Total ram usage:        2 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    8
  4407 ;; This function calls:
  4408 ;;		_updateServoPosition
  4409 ;; This function is called by:
  4410 ;;		_sort
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text11
  4415  002F4A                     __ptext11:
  4416                           	opt stack 0
  4417  002F4A                     _Distribution:
  4418                           	opt stack 21
  4419                           
  4420                           ;sort.c: 197: if(f_can_coming_to_distribution){
  4421                           
  4422                           ;incstack = 0
  4423  002F4A  506F               	movf	_f_can_coming_to_distribution,w,c
  4424  002F4C  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4425  002F4E  B4D8               	btfsc	status,2,c
  4426  002F50  0012               	return	
  4427  002F52  D034               	goto	l6556
  4428  002F54                     l6546:
  4429                           
  4430                           ;sort.c: 202: updateServoPosition(500, 1);
  4431  002F54  0E01               	movlw	1
  4432  002F56  0100               	movlb	0	; () banked
  4433  002F58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4434  002F5A  0EF4               	movlw	244
  4435  002F5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4436  002F5E  0E00               	movlw	0
  4437  002F60  0100               	movlb	0	; () banked
  4438  002F62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4439  002F64  0E01               	movlw	1
  4440  002F66  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4441  002F68  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4442                           
  4443                           ;sort.c: 203: break;
  4444  002F6C  D03E               	goto	l6558
  4445  002F6E                     l6548:
  4446                           
  4447                           ;sort.c: 205: updateServoPosition(750, 1);
  4448  002F6E  0E02               	movlw	2
  4449  002F70  0100               	movlb	0	; () banked
  4450  002F72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4451  002F74  0EEE               	movlw	238
  4452  002F76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4453  002F78  0E00               	movlw	0
  4454  002F7A  0100               	movlb	0	; () banked
  4455  002F7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4456  002F7E  0E01               	movlw	1
  4457  002F80  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4458  002F82  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4459                           
  4460                           ;sort.c: 206: break;
  4461  002F86  D031               	goto	l6558
  4462  002F88                     l6550:
  4463                           
  4464                           ;sort.c: 208: updateServoPosition(1700, 1);
  4465  002F88  0E06               	movlw	6
  4466  002F8A  0100               	movlb	0	; () banked
  4467  002F8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4468  002F8E  0EA4               	movlw	164
  4469  002F90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4470  002F92  0E00               	movlw	0
  4471  002F94  0100               	movlb	0	; () banked
  4472  002F96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4473  002F98  0E01               	movlw	1
  4474  002F9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4475  002F9C  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4476                           
  4477                           ;sort.c: 209: break;
  4478  002FA0  D024               	goto	l6558
  4479  002FA2                     l6552:
  4480                           
  4481                           ;sort.c: 211: updateServoPosition(2100, 1);
  4482  002FA2  0E08               	movlw	8
  4483  002FA4  0100               	movlb	0	; () banked
  4484  002FA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4485  002FA8  0E34               	movlw	52
  4486  002FAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4487  002FAC  0E00               	movlw	0
  4488  002FAE  0100               	movlb	0	; () banked
  4489  002FB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4490  002FB2  0E01               	movlw	1
  4491  002FB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4492  002FB6  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4493                           
  4494                           ;sort.c: 215: }
  4495                           
  4496                           ;sort.c: 214: break;
  4497                           
  4498                           ;sort.c: 213: default:
  4499                           
  4500                           ;sort.c: 212: break;
  4501  002FBA  D017               	goto	l6558
  4502  002FBC                     l6556:
  4503  002FBC  C12B  F088         	movff	_cur_can,??_Distribution
  4504  002FC0  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4505                           
  4506                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4507                           ; Switch size 1, requested type "space"
  4508                           ; Number of cases is 1, Range of values is 0 to 0
  4509                           ; switch strategies available:
  4510                           ; Name         Instructions Cycles
  4511                           ; simple_byte            4     3 (average)
  4512                           ;	Chosen strategy is simple_byte
  4513  002FC4  0100               	movlb	0	; () banked
  4514  002FC6  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4515  002FC8  0A00               	xorlw	0	; case 0
  4516  002FCA  A4D8               	btfss	status,2,c
  4517  002FCC  D00E               	goto	l6558
  4518                           
  4519                           ; BSR set to: 0
  4520                           ; Switch size 1, requested type "space"
  4521                           ; Number of cases is 4, Range of values is 0 to 3
  4522                           ; switch strategies available:
  4523                           ; Name         Instructions Cycles
  4524                           ; simple_byte           13     7 (average)
  4525                           ;	Chosen strategy is simple_byte
  4526  002FCE  0100               	movlb	0	; () banked
  4527  002FD0  5188               	movf	??_Distribution& (0+255),w,b
  4528  002FD2  0A00               	xorlw	0	; case 0
  4529  002FD4  B4D8               	btfsc	status,2,c
  4530  002FD6  D7BE               	goto	l6546
  4531  002FD8  0A01               	xorlw	1	; case 1
  4532  002FDA  B4D8               	btfsc	status,2,c
  4533  002FDC  D7C8               	goto	l6548
  4534  002FDE  0A03               	xorlw	3	; case 2
  4535  002FE0  B4D8               	btfsc	status,2,c
  4536  002FE2  D7D2               	goto	l6550
  4537  002FE4  0A01               	xorlw	1	; case 3
  4538  002FE6  B4D8               	btfsc	status,2,c
  4539  002FE8  D7DC               	goto	l6552
  4540  002FEA                     l6558:
  4541                           
  4542                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4543  002FEA  0E3D               	movlw	61
  4544  002FEC  0100               	movlb	0	; () banked
  4545  002FEE  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4546  002FF0  0EE1               	movlw	225
  4547  002FF2  0100               	movlb	0	; () banked
  4548  002FF4  6F88               	movwf	??_Distribution& (0+255),b
  4549  002FF6  0E3F               	movlw	63
  4550  002FF8                     u7257:
  4551  002FF8  2EE8               	decfsz	wreg,f,c
  4552  002FFA  D7FE               	bra	u7257
  4553  002FFC  2F88               	decfsz	??_Distribution& (0+255),f,b
  4554  002FFE  D7FC               	bra	u7257
  4555  003000  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4556  003002  D7FA               	bra	u7257
  4557  003004  D000               	nop2	
  4558                           
  4559                           ;sort.c: 219: updateServoPosition(1350, 3);
  4560  003006  0E05               	movlw	5
  4561  003008  0100               	movlb	0	; () banked
  4562  00300A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4563  00300C  0E46               	movlw	70
  4564  00300E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4565  003010  0E00               	movlw	0
  4566  003012  0100               	movlb	0	; () banked
  4567  003014  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4568  003016  0E03               	movlw	3
  4569  003018  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4570  00301A  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4571                           
  4572                           ;sort.c: 220: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4573  00301E  0E52               	movlw	82
  4574  003020  0100               	movlb	0	; () banked
  4575  003022  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4576  003024  0E2B               	movlw	43
  4577  003026  0100               	movlb	0	; () banked
  4578  003028  6F88               	movwf	??_Distribution& (0+255),b
  4579  00302A  0E00               	movlw	0
  4580  00302C                     u7267:
  4581  00302C  2EE8               	decfsz	wreg,f,c
  4582  00302E  D7FE               	bra	u7267
  4583  003030  2F88               	decfsz	??_Distribution& (0+255),f,b
  4584  003032  D7FC               	bra	u7267
  4585  003034  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4586  003036  D7FA               	bra	u7267
  4587  003038  F000               	nop	
  4588                           
  4589                           ;sort.c: 223: updateServoPosition(1150, 3);
  4590  00303A  0E04               	movlw	4
  4591  00303C  0100               	movlb	0	; () banked
  4592  00303E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4593  003040  0E7E               	movlw	126
  4594  003042  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4595  003044  0E00               	movlw	0
  4596  003046  0100               	movlb	0	; () banked
  4597  003048  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4598  00304A  0E03               	movlw	3
  4599  00304C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4600  00304E  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4601                           
  4602                           ;sort.c: 224: _delay((unsigned long)((750)*(32000000/4000.0)));
  4603  003052  0E1F               	movlw	31
  4604  003054  0100               	movlb	0	; () banked
  4605  003056  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4606  003058  0E71               	movlw	113
  4607  00305A  0100               	movlb	0	; () banked
  4608  00305C  6F88               	movwf	??_Distribution& (0+255),b
  4609  00305E  0E1E               	movlw	30
  4610  003060                     u7277:
  4611  003060  2EE8               	decfsz	wreg,f,c
  4612  003062  D7FE               	bra	u7277
  4613  003064  2F88               	decfsz	??_Distribution& (0+255),f,b
  4614  003066  D7FC               	bra	u7277
  4615  003068  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4616  00306A  D7FA               	bra	u7277
  4617  00306C  F000               	nop	
  4618                           
  4619                           ;sort.c: 225: updateServoPosition(1200, 1);
  4620  00306E  0E04               	movlw	4
  4621  003070  0100               	movlb	0	; () banked
  4622  003072  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4623  003074  0EB0               	movlw	176
  4624  003076  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4625  003078  0E00               	movlw	0
  4626  00307A  0100               	movlb	0	; () banked
  4627  00307C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4628  00307E  0E01               	movlw	1
  4629  003080  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4630  003082  ECB8  F01E         	call	_updateServoPosition	;wreg free
  4631                           
  4632                           ;sort.c: 226: f_can_coming_to_distribution = 0;
  4633  003086  0E00               	movlw	0
  4634  003088  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4635  00308A  0E00               	movlw	0
  4636  00308C  6E6F               	movwf	_f_can_coming_to_distribution,c
  4637                           
  4638                           ;sort.c: 227: f_can_distributed = 1;
  4639  00308E  0E00               	movlw	0
  4640  003090  0101               	movlb	1	; () banked
  4641  003092  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4642  003094  0E01               	movlw	1
  4643  003096  6F2D               	movwf	_f_can_distributed& (0+255),b
  4644                           
  4645                           ; BSR set to: 1
  4646                           ;sort.c: 228: if(f_lastCan == 1){
  4647  003098  0471               	decf	_f_lastCan,w,c
  4648  00309A  1072               	iorwf	_f_lastCan+1,w,c
  4649  00309C  A4D8               	btfss	status,2,c
  4650  00309E  0012               	return	
  4651                           
  4652                           ; BSR set to: 1
  4653                           ;sort.c: 229: machine_state = DoneSorting_state;
  4654  0030A0  0E02               	movlw	2
  4655  0030A2  0100               	movlb	0	; () banked
  4656  0030A4  6FFC               	movwf	_machine_state& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659  0030A6  0012               	return	
  4660  0030A8                     __end_of_Distribution:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           prodh	equ	0xFF4
  4667                           prodl	equ	0xFF3
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           postdec1	equ	0xFE5
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           postinc2	equ	0xFDE
  4674                           postdec2	equ	0xFDD
  4675                           fsr2h	equ	0xFDA
  4676                           fsr2l	equ	0xFD9
  4677                           status	equ	0xFD8
  4678                           
  4679 ;; *************** function _machineConfig *****************
  4680 ;; Defined at:
  4681 ;;		line 15 in file "MachineConfig.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      void 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    7
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_main
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text12
  4710  003FEA                     __ptext12:
  4711                           	opt stack 0
  4712  003FEA                     _machineConfig:
  4713                           	opt stack 23
  4714                           
  4715                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4716                           
  4717                           ;incstack = 0
  4718  003FEA  0EF0               	movlw	240
  4719  003FEC  6ED3               	movwf	4051,c	;volatile
  4720                           
  4721                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4722  003FEE  8C9B               	bsf	3995,6,c	;volatile
  4723                           
  4724                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4725  003FF0  0E07               	movlw	7
  4726  003FF2  6E92               	movwf	3986,c	;volatile
  4727                           
  4728                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4729  003FF4  0EF2               	movlw	242
  4730  003FF6  6E93               	movwf	3987,c	;volatile
  4731                           
  4732                           ;MachineConfig.c: 27: TRISC = 0x00;
  4733  003FF8  0E00               	movlw	0
  4734  003FFA  6E94               	movwf	3988,c	;volatile
  4735                           
  4736                           ;MachineConfig.c: 31: TRISD = 0x00;
  4737  003FFC  0E00               	movlw	0
  4738  003FFE  6E95               	movwf	3989,c	;volatile
  4739                           
  4740                           ;MachineConfig.c: 34: TRISE = 0x00;
  4741  004000  0E00               	movlw	0
  4742  004002  6E96               	movwf	3990,c	;volatile
  4743                           
  4744                           ;MachineConfig.c: 37: LATA = 0x00;
  4745  004004  0E00               	movlw	0
  4746  004006  6E89               	movwf	3977,c	;volatile
  4747                           
  4748                           ;MachineConfig.c: 38: LATB = 0x00;
  4749  004008  0E00               	movlw	0
  4750  00400A  6E8A               	movwf	3978,c	;volatile
  4751                           
  4752                           ;MachineConfig.c: 39: LATC = 0x00;
  4753  00400C  0E00               	movlw	0
  4754  00400E  6E8B               	movwf	3979,c	;volatile
  4755                           
  4756                           ;MachineConfig.c: 40: LATD = 0x00;
  4757  004010  0E00               	movlw	0
  4758  004012  6E8C               	movwf	3980,c	;volatile
  4759                           
  4760                           ;MachineConfig.c: 41: LATE = 0x00;
  4761  004014  0E00               	movlw	0
  4762  004016  6E8D               	movwf	3981,c	;volatile
  4763                           
  4764                           ;MachineConfig.c: 43: nRBPU = 0;
  4765  004018  9EF1               	bcf	intcon2,7,c	;volatile
  4766                           
  4767                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4768  00401A  0E00               	movlw	0
  4769  00401C  6EC2               	movwf	4034,c	;volatile
  4770                           
  4771                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4772  00401E  0E0D               	movlw	13
  4773  004020  6EC1               	movwf	4033,c	;volatile
  4774                           
  4775                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4776  004022  0E00               	movlw	0
  4777  004024  6EB5               	movwf	4021,c	;volatile
  4778                           
  4779                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4780  004026  96B4               	bcf	4020,3,c	;volatile
  4781                           
  4782                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4783  004028  0EB1               	movlw	177
  4784  00402A  6EC0               	movwf	4032,c	;volatile
  4785                           
  4786                           ;MachineConfig.c: 55: INT1IE = 1;
  4787  00402C  86F0               	bsf	intcon3,3,c	;volatile
  4788                           
  4789                           ;MachineConfig.c: 57: TMR0IE = 1;
  4790  00402E  8AF2               	bsf	intcon,5,c	;volatile
  4791                           
  4792                           ;MachineConfig.c: 58: TMR1IE = 1;
  4793  004030  809D               	bsf	3997,0,c	;volatile
  4794                           
  4795                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4796  004032  0EB0               	movlw	176
  4797  004034  6ECD               	movwf	4045,c	;volatile
  4798                           
  4799                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4800  004036  0EB0               	movlw	176
  4801  004038  6EB1               	movwf	4017,c	;volatile
  4802                           
  4803                           ;MachineConfig.c: 61: TMR2IE = 1;
  4804  00403A  829D               	bsf	3997,1,c	;volatile
  4805                           
  4806                           ;MachineConfig.c: 62: TMR3IE = 1;
  4807  00403C  82A0               	bsf	4000,1,c	;volatile
  4808                           
  4809                           ;MachineConfig.c: 63: PEIE = 1;
  4810  00403E  8CF2               	bsf	intcon,6,c	;volatile
  4811                           
  4812                           ;MachineConfig.c: 64: ADIE = 0;
  4813  004040  9C9D               	bcf	3997,6,c	;volatile
  4814                           
  4815                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4816  004042  9EF2               	bcf	intcon,7,c	;volatile
  4817  004044  0012               	return		;funcret
  4818  004046                     __end_of_machineConfig:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           intcon2	equ	0xFF1
  4828                           intcon3	equ	0xFF0
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           postdec1	equ	0xFE5
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _logRun *****************
  4841 ;; Defined at:
  4842 ;;		line 84 in file "EEPROM.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;		None
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4847 ;;  i               2   55[BANK0 ] int 
  4848 ;;  num             1   49[BANK0 ] unsigned char 
  4849 ;;  addr            2   57[BANK0 ] unsigned short 
  4850 ;;  byte11          1   54[BANK0 ] unsigned char 
  4851 ;;  byte3           1   52[BANK0 ] unsigned char 
  4852 ;;  byte2           1   51[BANK0 ] unsigned char 
  4853 ;;  byte1           1   50[BANK0 ] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;Total ram usage:       10 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:   11
  4870 ;; This function calls:
  4871 ;;		_EEPROM_read
  4872 ;;		_EEPROM_write
  4873 ;; This function is called by:
  4874 ;;		_main
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text13
  4879  0030A8                     __ptext13:
  4880                           	opt stack 0
  4881  0030A8                     _logRun:
  4882                           	opt stack 19
  4883                           
  4884                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4885                           
  4886                           ;incstack = 0
  4887  0030A8  0E00               	movlw	0
  4888  0030AA  0100               	movlb	0	; () banked
  4889  0030AC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4890  0030AE  0E00               	movlw	0
  4891  0030B0  6F80               	movwf	EEPROM_read@address& (0+255),b
  4892  0030B2  EC14  F024         	call	_EEPROM_read	;wreg free
  4893  0030B6  0100               	movlb	0	; () banked
  4894  0030B8  6FFD               	movwf	_sel& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4898  0030BA  0100               	movlb	0	; () banked
  4899  0030BC  51FD               	movf	_sel& (0+255),w,b
  4900  0030BE  0D0B               	mullw	11
  4901  0030C0  0E01               	movlw	1
  4902  0030C2  24F3               	addwf	prodl,w,c
  4903  0030C4  0100               	movlb	0	; () banked
  4904  0030C6  6FB9               	movwf	logRun@addr& (0+255),b
  4905  0030C8  0E00               	movlw	0
  4906  0030CA  20F4               	addwfc	prodh,w,c
  4907  0030CC  0100               	movlb	0	; () banked
  4908  0030CE  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;EEPROM.c: 101: if (sel < 3){
  4912  0030D0  0E03               	movlw	3
  4913  0030D2  0100               	movlb	0	; () banked
  4914  0030D4  61FD               	cpfslt	_sel& (0+255),b
  4915  0030D6  D00E               	goto	l8040
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4919  0030D8  0100               	movlb	0	; () banked
  4920  0030DA  29FD               	incf	_sel& (0+255),w,b
  4921  0030DC  0100               	movlb	0	; () banked
  4922  0030DE  6FB1               	movwf	logRun@num& (0+255),b
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4926  0030E0  0E00               	movlw	0
  4927  0030E2  0100               	movlb	0	; () banked
  4928  0030E4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4929  0030E6  0E00               	movlw	0
  4930  0030E8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4931  0030EA  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4932  0030EE  EC82  F01A         	call	_EEPROM_write	;wreg free
  4933                           
  4934                           ;EEPROM.c: 104: }
  4935  0030F2  D00A               	goto	l8042
  4936  0030F4                     l8040:
  4937                           
  4938                           ;EEPROM.c: 105: else{
  4939                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4940  0030F4  0E00               	movlw	0
  4941  0030F6  0100               	movlb	0	; () banked
  4942  0030F8  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4943  0030FA  0E00               	movlw	0
  4944  0030FC  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4945  0030FE  0E00               	movlw	0
  4946  003100  0100               	movlb	0	; () banked
  4947  003102  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4948  003104  EC82  F01A         	call	_EEPROM_write	;wreg free
  4949  003108                     l8042:
  4950                           
  4951                           ;EEPROM.c: 107: }
  4952                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4953  003108  0100               	movlb	0	; () banked
  4954  00310A  51FE               	movf	_count_total& (0+255),w,b
  4955  00310C  0980               	iorlw	128
  4956  00310E  0100               	movlb	0	; () banked
  4957  003110  6FB2               	movwf	logRun@byte1& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4961  003112  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4962  003116  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4963  00311A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4964  00311E  EC82  F01A         	call	_EEPROM_write	;wreg free
  4965                           
  4966                           ;EEPROM.c: 112: addr++;
  4967  003122  0100               	movlb	0	; () banked
  4968  003124  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4969  003126  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4973  003128  3861               	swapf	_count_pop_no_tab,w,c
  4974  00312A  0BF0               	andlw	240
  4975  00312C  1063               	iorwf	_count_pop_w_tab,w,c
  4976  00312E  0100               	movlb	0	; () banked
  4977  003130  6FB3               	movwf	logRun@byte2& (0+255),b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4981  003132  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4982  003136  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4983  00313A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4984  00313E  EC82  F01A         	call	_EEPROM_write	;wreg free
  4985                           
  4986                           ;EEPROM.c: 117: addr++;
  4987  003142  0100               	movlb	0	; () banked
  4988  003144  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4989  003146  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4993  003148  385F               	swapf	_count_can_w_lab,w,c
  4994  00314A  0BF0               	andlw	240
  4995  00314C  105D               	iorwf	_count_can_no_lab,w,c
  4996  00314E  0100               	movlb	0	; () banked
  4997  003150  6FB4               	movwf	logRun@byte3& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5001  003152  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5002  003156  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5003  00315A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5004  00315E  EC82  F01A         	call	_EEPROM_write	;wreg free
  5005                           
  5006                           ;EEPROM.c: 120: addr++;
  5007  003162  0100               	movlb	0	; () banked
  5008  003164  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5009  003166  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5013  003168  0E00               	movlw	0
  5014  00316A  0100               	movlb	0	; () banked
  5015  00316C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5016  00316E  0E00               	movlw	0
  5017  003170  6FB7               	movwf	logRun@i& (0+255),b
  5018                           
  5019                           ; BSR set to: 0
  5020  003172  0100               	movlb	0	; () banked
  5021  003174  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5022  003176  D008               	goto	l8066
  5023  003178  0100               	movlb	0	; () banked
  5024  00317A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5025  00317C  E128               	bnz	l952
  5026  00317E  0E07               	movlw	7
  5027  003180  0100               	movlb	0	; () banked
  5028  003182  5DB7               	subwf	logRun@i& (0+255),w,b
  5029  003184  B0D8               	btfsc	status,0,c
  5030  003186  D023               	goto	l952
  5031  003188                     l8066:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5035  003188  90D8               	bcf	status,0,c
  5036  00318A  0100               	movlb	0	; () banked
  5037  00318C  35B7               	rlcf	logRun@i& (0+255),w,b
  5038  00318E  6ED9               	movwf	fsr2l,c
  5039  003190  0100               	movlb	0	; () banked
  5040  003192  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5041  003194  6EDA               	movwf	fsr2h,c
  5042  003196  0E0E               	movlw	low _startTime
  5043  003198  26D9               	addwf	fsr2l,f,c
  5044  00319A  0E01               	movlw	high _startTime
  5045  00319C  22DA               	addwfc	fsr2h,f,c
  5046  00319E  50DF               	movf	indf2,w,c
  5047  0031A0  0100               	movlb	0	; () banked
  5048  0031A2  6FB5               	movwf	logRun@byte_i& (0+255),b
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5052  0031A4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5053  0031A8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5054  0031AC  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5055  0031B0  EC82  F01A         	call	_EEPROM_write	;wreg free
  5056                           
  5057                           ;EEPROM.c: 126: addr++;
  5058  0031B4  0100               	movlb	0	; () banked
  5059  0031B6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5060  0031B8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5061                           
  5062                           ; BSR set to: 0
  5063  0031BA  0100               	movlb	0	; () banked
  5064  0031BC  4BB7               	infsnz	logRun@i& (0+255),f,b
  5065  0031BE  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5066                           
  5067                           ; BSR set to: 0
  5068  0031C0  0100               	movlb	0	; () banked
  5069  0031C2  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5070  0031C4  D7E1               	goto	l8066
  5071  0031C6  0100               	movlb	0	; () banked
  5072  0031C8  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5073  0031CA  E101               	bnz	u6950
  5074  0031CC  D7D8               	goto	L5
  5075  0031CE                     u6950:
  5076  0031CE                     l952:
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;EEPROM.c: 127: }
  5080                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5081  0031CE  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5085  0031D2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5086  0031D6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5087  0031DA  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5088  0031DE  EC82  F01A         	call	_EEPROM_write	;wreg free
  5089  0031E2  0012               	return		;funcret
  5090  0031E4                     __end_of_logRun:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodh	equ	0xFF4
  5097                           prodl	equ	0xFF3
  5098                           intcon	equ	0xFF2
  5099                           intcon2	equ	0xFF1
  5100                           intcon3	equ	0xFF0
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1l	equ	0xFE1
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _EEPROM_write *****************
  5113 ;; Defined at:
  5114 ;;		line 32 in file "EEPROM.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  address         2   43[BANK0 ] unsigned short 
  5117 ;;  data            1   45[BANK0 ] unsigned char 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  i               1   48[BANK0 ] unsigned char 
  5120 ;;  i               1   47[BANK0 ] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        6 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:   10
  5137 ;; This function calls:
  5138 ;;		_EEPROM_read
  5139 ;;		_lcdInst
  5140 ;;		_printf
  5141 ;; This function is called by:
  5142 ;;		_Loading
  5143 ;;		_logRun
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text14
  5148  003504                     __ptext14:
  5149                           	opt stack 0
  5150  003504                     _EEPROM_write:
  5151                           	opt stack 18
  5152                           
  5153                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5154                           
  5155                           ;incstack = 0
  5156  003504  84A6               	bsf	4006,2,c	;volatile
  5157                           
  5158                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5159  003506  0100               	movlb	0	; () banked
  5160  003508  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5161  00350A  6EAA               	movwf	4010,c	;volatile
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5165  00350C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;EEPROM.c: 39: EEDATA = data;
  5169  003510  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5173  003514  9EA6               	bcf	4006,7,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5177  003516  9CA6               	bcf	4006,6,c	;volatile
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5181  003518  9EF2               	bcf	intcon,7,c	;volatile
  5182                           
  5183                           ;EEPROM.c: 45: EECON2 = 0x55;
  5184  00351A  0E55               	movlw	85
  5185  00351C  6EA7               	movwf	4007,c	;volatile
  5186                           
  5187                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5188  00351E  0EAA               	movlw	170
  5189  003520  6EA7               	movwf	4007,c	;volatile
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5193  003522  82A6               	bsf	4006,1,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5197  003524  8EF2               	bsf	intcon,7,c	;volatile
  5198  003526                     l930:
  5199  003526  A8A1               	btfss	4001,4,c	;volatile
  5200  003528  D7FE               	goto	l930
  5201                           
  5202                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5203  00352A  98A1               	bcf	4001,4,c	;volatile
  5204                           
  5205                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5206  00352C  94A6               	bcf	4006,2,c	;volatile
  5207                           
  5208                           ;EEPROM.c: 57: if(debug){
  5209  00352E  5065               	movf	_debug,w,c
  5210  003530  1066               	iorwf	_debug+1,w,c
  5211  003532  B4D8               	btfsc	status,2,c
  5212  003534  0012               	return	
  5213                           
  5214                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5215  003536  0E01               	movlw	1
  5216  003538  EC51  F024         	call	_lcdInst
  5217  00353C  0E68               	movlw	104
  5218  00353E  0100               	movlb	0	; () banked
  5219  003540  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5220  003542  0EE4               	movlw	228
  5221  003544                     u7287:
  5222  003544  2EE8               	decfsz	wreg,f,c
  5223  003546  D7FE               	bra	u7287
  5224  003548  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5225  00354A  D7FC               	bra	u7287
  5226  00354C  F000               	nop	
  5227                           
  5228                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5229  00354E  0E80               	movlw	128
  5230  003550  EC51  F024         	call	_lcdInst
  5231                           
  5232                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5233  003554  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5234  003558  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5235  00355C  EC14  F024         	call	_EEPROM_read	;wreg free
  5236  003560  0100               	movlb	0	; () banked
  5237  003562  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5238  003564  A4D8               	btfss	status,2,c
  5239  003566  D024               	goto	l6086
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5243  003568  0E48               	movlw	low STR_66
  5244  00356A  0100               	movlb	0	; () banked
  5245  00356C  6F8E               	movwf	printf@f& (0+255),b
  5246  00356E  0EFB               	movlw	high STR_66
  5247  003570  0100               	movlb	0	; () banked
  5248  003572  6F8F               	movwf	(printf@f+1)& (0+255),b
  5249  003574  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5250  003578  0100               	movlb	0	; () banked
  5251  00357A  6B91               	clrf	(?_printf+3)& (0+255),b
  5252  00357C  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5253  003580  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5254  003584  ECB8  F008         	call	_printf	;wreg free
  5255                           
  5256                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5257  003588  0E00               	movlw	0
  5258  00358A  0100               	movlb	0	; () banked
  5259  00358C  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5260  00358E                     l6078:
  5261                           
  5262                           ; BSR set to: 0
  5263  00358E  0E63               	movlw	99
  5264  003590  0100               	movlb	0	; () banked
  5265  003592  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5266  003594  D001               	goto	l6082
  5267  003596  0012               	return	
  5268  003598                     l6082:
  5269                           
  5270                           ; BSR set to: 0
  5271  003598  0E68               	movlw	104
  5272  00359A  0100               	movlb	0	; () banked
  5273  00359C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5274  00359E  0EE4               	movlw	228
  5275  0035A0                     u7297:
  5276  0035A0  2EE8               	decfsz	wreg,f,c
  5277  0035A2  D7FE               	bra	u7297
  5278  0035A4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5279  0035A6  D7FC               	bra	u7297
  5280  0035A8  F000               	nop	
  5281  0035AA  0100               	movlb	0	; () banked
  5282  0035AC  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5283  0035AE  D7EF               	goto	l6078
  5284  0035B0                     l6086:
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5288  0035B0  0EBD               	movlw	low STR_67
  5289  0035B2  0100               	movlb	0	; () banked
  5290  0035B4  6F8E               	movwf	printf@f& (0+255),b
  5291  0035B6  0EFF               	movlw	high STR_67
  5292  0035B8  0100               	movlb	0	; () banked
  5293  0035BA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5294  0035BC  ECB8  F008         	call	_printf	;wreg free
  5295  0035C0  0E00               	movlw	0
  5296  0035C2  0100               	movlb	0	; () banked
  5297  0035C4  6FB0               	movwf	EEPROM_write@i_1328& (0+255),b
  5298  0035C6                     l6090:
  5299                           
  5300                           ; BSR set to: 0
  5301  0035C6  0E63               	movlw	99
  5302  0035C8  0100               	movlb	0	; () banked
  5303  0035CA  65B0               	cpfsgt	EEPROM_write@i_1328& (0+255),b
  5304  0035CC  D001               	goto	l6094
  5305  0035CE  0012               	return	
  5306  0035D0                     l6094:
  5307                           
  5308                           ; BSR set to: 0
  5309  0035D0  0E68               	movlw	104
  5310  0035D2  0100               	movlb	0	; () banked
  5311  0035D4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5312  0035D6  0EE4               	movlw	228
  5313  0035D8                     u7307:
  5314  0035D8  2EE8               	decfsz	wreg,f,c
  5315  0035DA  D7FE               	bra	u7307
  5316  0035DC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5317  0035DE  D7FC               	bra	u7307
  5318  0035E0  F000               	nop	
  5319  0035E2  0100               	movlb	0	; () banked
  5320  0035E4  2BB0               	incf	EEPROM_write@i_1328& (0+255),f,b
  5321  0035E6  D7EF               	goto	l6090
  5322  0035E8                     __end_of_EEPROM_write:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           intcon2	equ	0xFF1
  5332                           intcon3	equ	0xFF0
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec1	equ	0xFE5
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _EEPROM_read *****************
  5345 ;; Defined at:
  5346 ;;		line 68 in file "EEPROM.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  address         2    0[BANK0 ] unsigned short 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      unsigned char 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;Total ram usage:        2 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    7
  5367 ;; This function calls:
  5368 ;;		Nothing
  5369 ;; This function is called by:
  5370 ;;		_Loading
  5371 ;;		_EEPROM_write
  5372 ;;		_logRun
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text15
  5377  004828                     __ptext15:
  5378                           	opt stack 0
  5379  004828                     _EEPROM_read:
  5380                           	opt stack 20
  5381                           
  5382                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5383                           
  5384                           ;incstack = 0
  5385  004828  0100               	movlb	0	; () banked
  5386  00482A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5387  00482C  6EAA               	movwf	4010,c	;volatile
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5391  00482E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5395  004832  9EA6               	bcf	4006,7,c	;volatile
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5399  004834  9CA6               	bcf	4006,6,c	;volatile
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5403  004836  80A6               	bsf	4006,0,c	;volatile
  5404  004838                     l943:
  5405  004838  B0A6               	btfsc	4006,0,c	;volatile
  5406  00483A  D7FE               	goto	l943
  5407                           
  5408                           ;EEPROM.c: 81: return EEDATA;
  5409  00483C  50A8               	movf	4008,w,c	;volatile
  5410  00483E  0012               	return	
  5411  004840                     __end_of_EEPROM_read:
  5412                           	opt stack 0
  5413                           tblptru	equ	0xFF8
  5414                           tblptrh	equ	0xFF7
  5415                           tblptrl	equ	0xFF6
  5416                           tablat	equ	0xFF5
  5417                           prodh	equ	0xFF4
  5418                           prodl	equ	0xFF3
  5419                           intcon	equ	0xFF2
  5420                           intcon2	equ	0xFF1
  5421                           intcon3	equ	0xFF0
  5422                           postinc0	equ	0xFEE
  5423                           wreg	equ	0xFE8
  5424                           postdec1	equ	0xFE5
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           postdec2	equ	0xFDD
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _initUI *****************
  5434 ;; Defined at:
  5435 ;;		line 62 in file "UI.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;Total ram usage:        0 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:   12
  5456 ;; This function calls:
  5457 ;;		_change_state_to_menu_start
  5458 ;;		_loadRTC
  5459 ;; This function is called by:
  5460 ;;		_main
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text16
  5465  0045FA                     __ptext16:
  5466                           	opt stack 0
  5467  0045FA                     _initUI:
  5468                           	opt stack 18
  5469                           
  5470                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5471                           
  5472                           ;incstack = 0
  5473  0045FA  8EF2               	bsf	intcon,7,c	;volatile
  5474                           
  5475                           ;UI.c: 64: machine_state = UI_state;
  5476  0045FC  0E00               	movlw	0
  5477  0045FE  0100               	movlb	0	; () banked
  5478  004600  6FFC               	movwf	_machine_state& (0+255),b
  5479                           
  5480                           ;UI.c: 65: logstate = 0;
  5481  004602  0E00               	movlw	0
  5482  004604  0100               	movlb	0	; () banked
  5483  004606  6FF7               	movwf	(_logstate+1)& (0+255),b
  5484  004608  0E00               	movlw	0
  5485  00460A  6FF6               	movwf	_logstate& (0+255),b
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;UI.c: 67: if(RTCflag){
  5489  00460C  0100               	movlb	0	; () banked
  5490  00460E  51DE               	movf	_RTCflag& (0+255),w,b
  5491  004610  0100               	movlb	0	; () banked
  5492  004612  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5493  004614  A4D8               	btfss	status,2,c
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;UI.c: 68: loadRTC();
  5497  004616  EC6D  F01D         	call	_loadRTC	;wreg free
  5498                           
  5499                           ;UI.c: 69: }
  5500                           ;UI.c: 71: change_state_to_menu_start();
  5501  00461A  EC42  F023         	call	_change_state_to_menu_start	;wreg free
  5502                           
  5503                           ;UI.c: 72: firstboot = 1;
  5504  00461E  0E00               	movlw	0
  5505  004620  6E76               	movwf	_firstboot+1,c
  5506  004622  0E01               	movlw	1
  5507  004624  6E75               	movwf	_firstboot,c
  5508  004626  0012               	return		;funcret
  5509  004628                     __end_of_initUI:
  5510                           	opt stack 0
  5511                           tblptru	equ	0xFF8
  5512                           tblptrh	equ	0xFF7
  5513                           tblptrl	equ	0xFF6
  5514                           tablat	equ	0xFF5
  5515                           prodh	equ	0xFF4
  5516                           prodl	equ	0xFF3
  5517                           intcon	equ	0xFF2
  5518                           intcon2	equ	0xFF1
  5519                           intcon3	equ	0xFF0
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           postdec1	equ	0xFE5
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _loadRTC *****************
  5532 ;; Defined at:
  5533 ;;		line 28 in file "RTC.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  i               2   22[BANK0 ] int 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;Total ram usage:        3 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    9
  5554 ;; This function calls:
  5555 ;;		_I2C_Master_Init
  5556 ;;		_I2C_Master_Start
  5557 ;;		_I2C_Master_Stop
  5558 ;;		_I2C_Master_Write
  5559 ;; This function is called by:
  5560 ;;		_initUI
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text17
  5565  003ADA                     __ptext17:
  5566                           	opt stack 0
  5567  003ADA                     _loadRTC:
  5568                           	opt stack 20
  5569                           
  5570                           ;RTC.c: 30: I2C_Master_Init(10000);
  5571                           
  5572                           ;incstack = 0
  5573  003ADA  0E10               	movlw	16
  5574  003ADC  0100               	movlb	0	; () banked
  5575  003ADE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5576  003AE0  0E27               	movlw	39
  5577  003AE2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5578  003AE4  0E00               	movlw	0
  5579  003AE6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5580  003AE8  0E00               	movlw	0
  5581  003AEA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5582  003AEC  ECC5  F01F         	call	_I2C_Master_Init	;wreg free
  5583                           
  5584                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5585  003AF0  9EF2               	bcf	intcon,7,c	;volatile
  5586                           
  5587                           ;RTC.c: 34: I2C_Master_Start();
  5588  003AF2  EC77  F024         	call	_I2C_Master_Start	;wreg free
  5589                           
  5590                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5591  003AF6  0E00               	movlw	0
  5592  003AF8  0100               	movlb	0	; () banked
  5593  003AFA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5594  003AFC  0ED0               	movlw	208
  5595  003AFE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5596  003B00  EC65  F024         	call	_I2C_Master_Write	;wreg free
  5597                           
  5598                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5599  003B04  0E00               	movlw	0
  5600  003B06  0100               	movlb	0	; () banked
  5601  003B08  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5602  003B0A  0E00               	movlw	0
  5603  003B0C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5604  003B0E  EC65  F024         	call	_I2C_Master_Write	;wreg free
  5605                           
  5606                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5607  003B12  0E00               	movlw	0
  5608  003B14  0100               	movlb	0	; () banked
  5609  003B16  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5610  003B18  0E00               	movlw	0
  5611  003B1A  6F96               	movwf	loadRTC@i& (0+255),b
  5612  003B1C                     l6220:
  5613                           
  5614                           ; BSR set to: 0
  5615  003B1C  0100               	movlb	0	; () banked
  5616  003B1E  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5617  003B20  D008               	goto	l6224
  5618  003B22  0100               	movlb	0	; () banked
  5619  003B24  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5620  003B26  E11B               	bnz	l6230
  5621  003B28  0E07               	movlw	7
  5622  003B2A  0100               	movlb	0	; () banked
  5623  003B2C  5D96               	subwf	loadRTC@i& (0+255),w,b
  5624  003B2E  B0D8               	btfsc	status,0,c
  5625  003B30  D016               	goto	l6230
  5626  003B32                     l6224:
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5630  003B32  0E24               	movlw	low _time
  5631  003B34  0100               	movlb	0	; () banked
  5632  003B36  2596               	addwf	loadRTC@i& (0+255),w,b
  5633  003B38  6ED9               	movwf	fsr2l,c
  5634  003B3A  0E01               	movlw	high _time
  5635  003B3C  0100               	movlb	0	; () banked
  5636  003B3E  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5637  003B40  6EDA               	movwf	fsr2h,c
  5638  003B42  50DF               	movf	indf2,w,c
  5639  003B44  0100               	movlb	0	; () banked
  5640  003B46  6F95               	movwf	??_loadRTC& (0+255),b
  5641  003B48  0100               	movlb	0	; () banked
  5642  003B4A  5195               	movf	??_loadRTC& (0+255),w,b
  5643  003B4C  0100               	movlb	0	; () banked
  5644  003B4E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5645  003B50  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5646  003B52  EC65  F024         	call	_I2C_Master_Write	;wreg free
  5647  003B56  0100               	movlb	0	; () banked
  5648  003B58  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5649  003B5A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5650  003B5C  D7DF               	goto	l6220
  5651  003B5E                     l6230:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;RTC.c: 39: }
  5655                           ;RTC.c: 40: I2C_Master_Stop();
  5656  003B5E  EC73  F024         	call	_I2C_Master_Stop	;wreg free
  5657                           
  5658                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5659  003B62  8EF2               	bsf	intcon,7,c	;volatile
  5660  003B64  0012               	return		;funcret
  5661  003B66                     __end_of_loadRTC:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           intcon2	equ	0xFF1
  5671                           intcon3	equ	0xFF0
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           postdec1	equ	0xFE5
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _I2C_Master_Init *****************
  5684 ;; Defined at:
  5685 ;;		line 15 in file "I2C.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  c               4   13[BANK0 ] const unsigned long 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;Total ram usage:        8 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    8
  5706 ;; This function calls:
  5707 ;;		___lldiv
  5708 ;; This function is called by:
  5709 ;;		_main
  5710 ;;		_loadRTC
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text18
  5715  003F8A                     __ptext18:
  5716                           	opt stack 0
  5717  003F8A                     _I2C_Master_Init:
  5718                           	opt stack 20
  5719                           
  5720                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5721                           
  5722                           ;incstack = 0
  5723  003F8A  0E00               	movlw	0
  5724  003F8C  6EC7               	movwf	4039,c	;volatile
  5725                           
  5726                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5727  003F8E  0E28               	movlw	40
  5728  003F90  6EC6               	movwf	4038,c	;volatile
  5729                           
  5730                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5731  003F92  0E00               	movlw	0
  5732  003F94  6EC5               	movwf	4037,c	;volatile
  5733                           
  5734                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5735  003F96  0E00               	movlw	0
  5736  003F98  0100               	movlb	0	; () banked
  5737  003F9A  6F80               	movwf	___lldiv@dividend& (0+255),b
  5738  003F9C  0E48               	movlw	72
  5739  003F9E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5740  003FA0  0EE8               	movlw	232
  5741  003FA2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5742  003FA4  0E01               	movlw	1
  5743  003FA6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5744  003FA8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5745  003FAC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5746  003FB0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5747  003FB4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5748  003FB8  0E02               	movlw	2
  5749  003FBA                     u4515:
  5750  003FBA  90D8               	bcf	status,0,c
  5751  003FBC  0100               	movlb	0	; () banked
  5752  003FBE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5753  003FC0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5754  003FC2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5755  003FC4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5756  003FC6  2EE8               	decfsz	wreg,f,c
  5757  003FC8  D7F8               	goto	u4515
  5758  003FCA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5759  003FCE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5760  003FD2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5761  003FD6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5762  003FDA  EC1E  F01C         	call	___lldiv	;wreg free
  5763  003FDE  0100               	movlb	0	; () banked
  5764  003FE0  0580               	decf	?___lldiv& (0+255),w,b
  5765  003FE2  6EC8               	movwf	4040,c	;volatile
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;I2C.c: 22: TRISC3 = 1;
  5769  003FE4  8694               	bsf	3988,3,c	;volatile
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;I2C.c: 23: TRISC4 = 1;
  5773  003FE6  8894               	bsf	3988,4,c	;volatile
  5774                           
  5775                           ; BSR set to: 0
  5776  003FE8  0012               	return		;funcret
  5777  003FEA                     __end_of_I2C_Master_Init:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon2	equ	0xFF1
  5787                           intcon3	equ	0xFF0
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           postdec1	equ	0xFE5
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function ___lldiv *****************
  5800 ;; Defined at:
  5801 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  dividend        4    0[BANK0 ] unsigned long 
  5804 ;;  divisor         4    4[BANK0 ] unsigned long 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  quotient        4    8[BANK0 ] unsigned long 
  5807 ;;  counter         1   12[BANK0 ] unsigned char 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  4    0[BANK0 ] unsigned long 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5817 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;Total ram usage:       13 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    7
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		_I2C_Master_Init
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text19
  5832  00383C                     __ptext19:
  5833                           	opt stack 0
  5834  00383C                     ___lldiv:
  5835                           	opt stack 20
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;incstack = 0
  5839  00383C  0E00               	movlw	0
  5840  00383E  0100               	movlb	0	; () banked
  5841  003840  6F88               	movwf	___lldiv@quotient& (0+255),b
  5842  003842  0E00               	movlw	0
  5843  003844  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5844  003846  0E00               	movlw	0
  5845  003848  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5846  00384A  0E00               	movlw	0
  5847  00384C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5848                           
  5849                           ; BSR set to: 0
  5850  00384E  0100               	movlb	0	; () banked
  5851  003850  5184               	movf	___lldiv@divisor& (0+255),w,b
  5852  003852  0100               	movlb	0	; () banked
  5853  003854  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5854  003856  0100               	movlb	0	; () banked
  5855  003858  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5856  00385A  0100               	movlb	0	; () banked
  5857  00385C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5858  00385E  B4D8               	btfsc	status,2,c
  5859  003860  D042               	goto	l1656
  5860                           
  5861                           ; BSR set to: 0
  5862  003862  0E01               	movlw	1
  5863  003864  0100               	movlb	0	; () banked
  5864  003866  6F8C               	movwf	___lldiv@counter& (0+255),b
  5865  003868  D008               	goto	l5656
  5866  00386A                     l5654:
  5867                           
  5868                           ; BSR set to: 0
  5869  00386A  0100               	movlb	0	; () banked
  5870  00386C  90D8               	bcf	status,0,c
  5871  00386E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5872  003870  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5873  003872  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5874  003874  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5875  003876  0100               	movlb	0	; () banked
  5876  003878  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5877  00387A                     l5656:
  5878                           
  5879                           ; BSR set to: 0
  5880  00387A  0100               	movlb	0	; () banked
  5881  00387C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5882  00387E  D7F5               	goto	l5654
  5883  003880                     l5658:
  5884                           
  5885                           ; BSR set to: 0
  5886  003880  0100               	movlb	0	; () banked
  5887  003882  90D8               	bcf	status,0,c
  5888  003884  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5889  003886  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5890  003888  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5891  00388A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5892                           
  5893                           ; BSR set to: 0
  5894  00388C  0100               	movlb	0	; () banked
  5895  00388E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5896  003890  0100               	movlb	0	; () banked
  5897  003892  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5898  003894  0100               	movlb	0	; () banked
  5899  003896  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5900  003898  0100               	movlb	0	; () banked
  5901  00389A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5902  00389C  0100               	movlb	0	; () banked
  5903  00389E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5904  0038A0  0100               	movlb	0	; () banked
  5905  0038A2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5906  0038A4  0100               	movlb	0	; () banked
  5907  0038A6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5908  0038A8  0100               	movlb	0	; () banked
  5909  0038AA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5910  0038AC  A0D8               	btfss	status,0,c
  5911  0038AE  D012               	goto	l5666
  5912                           
  5913                           ; BSR set to: 0
  5914  0038B0  0100               	movlb	0	; () banked
  5915  0038B2  5184               	movf	___lldiv@divisor& (0+255),w,b
  5916  0038B4  0100               	movlb	0	; () banked
  5917  0038B6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5918  0038B8  0100               	movlb	0	; () banked
  5919  0038BA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5920  0038BC  0100               	movlb	0	; () banked
  5921  0038BE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5922  0038C0  0100               	movlb	0	; () banked
  5923  0038C2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5924  0038C4  0100               	movlb	0	; () banked
  5925  0038C6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5926  0038C8  0100               	movlb	0	; () banked
  5927  0038CA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5928  0038CC  0100               	movlb	0	; () banked
  5929  0038CE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5930                           
  5931                           ; BSR set to: 0
  5932  0038D0  0100               	movlb	0	; () banked
  5933  0038D2  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5934  0038D4                     l5666:
  5935                           
  5936                           ; BSR set to: 0
  5937  0038D4  0100               	movlb	0	; () banked
  5938  0038D6  90D8               	bcf	status,0,c
  5939  0038D8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5940  0038DA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5941  0038DC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5942  0038DE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5943                           
  5944                           ; BSR set to: 0
  5945  0038E0  0100               	movlb	0	; () banked
  5946  0038E2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5947  0038E4  D7CD               	goto	l5658
  5948  0038E6                     l1656:
  5949                           
  5950                           ; BSR set to: 0
  5951  0038E6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5952  0038EA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5953  0038EE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5954  0038F2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5955                           
  5956                           ; BSR set to: 0
  5957  0038F6  0012               	return		;funcret
  5958  0038F8                     __end_of___lldiv:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           intcon2	equ	0xFF1
  5968                           intcon3	equ	0xFF0
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           postdec1	equ	0xFE5
  5972                           fsr1l	equ	0xFE1
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           postdec2	equ	0xFDD
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function _change_state_to_menu_start *****************
  5981 ;; Defined at:
  5982 ;;		line 474 in file "UI.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:   11
  6003 ;; This function calls:
  6004 ;;		_lcdInst
  6005 ;;		_printRTC
  6006 ;;		_printf
  6007 ;; This function is called by:
  6008 ;;		_initUI
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text20
  6013  004684                     __ptext20:
  6014                           	opt stack 0
  6015  004684                     _change_state_to_menu_start:
  6016                           	opt stack 18
  6017                           
  6018                           ;UI.c: 475: cur_state = 0;
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022  004684  0E00               	movlw	0
  6023  004686  0100               	movlb	0	; () banked
  6024  004688  6FE1               	movwf	(_cur_state+1)& (0+255),b
  6025  00468A  0E00               	movlw	0
  6026  00468C  6FE0               	movwf	_cur_state& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;UI.c: 477: lcdInst(0b10000000);;
  6030  00468E  0E80               	movlw	128
  6031  004690  EC51  F024         	call	_lcdInst
  6032                           
  6033                           ;UI.c: 478: printRTC();
  6034  004694  ECAE  F00F         	call	_printRTC	;wreg free
  6035                           
  6036                           ;UI.c: 479: lcdInst(0b11000000);;
  6037  004698  0EC0               	movlw	192
  6038  00469A  EC51  F024         	call	_lcdInst
  6039                           
  6040                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6041  00469E  0E0D               	movlw	low STR_30
  6042  0046A0  0100               	movlb	0	; () banked
  6043  0046A2  6F8E               	movwf	printf@f& (0+255),b
  6044  0046A4  0EFE               	movlw	high STR_30
  6045  0046A6  0100               	movlb	0	; () banked
  6046  0046A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6047  0046AA  ECB8  F008         	call	_printf	;wreg free
  6048  0046AE  0012               	return		;funcret
  6049  0046B0                     __end_of_change_state_to_menu_start:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           intcon2	equ	0xFF1
  6059                           intcon3	equ	0xFF0
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _initTime *****************
  6072 ;; Defined at:
  6073 ;;		line 17 in file "RTC.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  s               1    wreg     unsigned char 
  6076 ;;  m               1    0[BANK0 ] unsigned char 
  6077 ;;  h               1    1[BANK0 ] unsigned char 
  6078 ;;  w               1    2[BANK0 ] unsigned char 
  6079 ;;  DD              1    3[BANK0 ] unsigned char 
  6080 ;;  MM              1    4[BANK0 ] unsigned char 
  6081 ;;  YY              1    5[BANK0 ] unsigned char 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  s               1    6[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        7 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    7
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text21
  6108  0047E8                     __ptext21:
  6109                           	opt stack 0
  6110  0047E8                     _initTime:
  6111                           	opt stack 23
  6112                           
  6113                           ;incstack = 0
  6114                           ;initTime@s stored from wreg
  6115  0047E8  0100               	movlb	0	; () banked
  6116  0047EA  6F86               	movwf	initTime@s& (0+255),b
  6117                           
  6118                           ;RTC.c: 19: time[0] = s;
  6119  0047EC  C086  F124         	movff	initTime@s,_time
  6120                           
  6121                           ;RTC.c: 20: time[1] = m;
  6122  0047F0  C080  F125         	movff	initTime@m,_time+1
  6123                           
  6124                           ;RTC.c: 21: time[2] = h;
  6125  0047F4  C081  F126         	movff	initTime@h,_time+2
  6126                           
  6127                           ;RTC.c: 22: time[3] = w;
  6128  0047F8  C082  F127         	movff	initTime@w,_time+3
  6129                           
  6130                           ;RTC.c: 23: time[4] = DD;
  6131  0047FC  C083  F128         	movff	initTime@DD,_time+4
  6132                           
  6133                           ;RTC.c: 24: time[5] = MM;
  6134  004800  C084  F129         	movff	initTime@MM,_time+5
  6135                           
  6136                           ;RTC.c: 25: time[6] = YY;
  6137  004804  C085  F12A         	movff	initTime@YY,_time+6
  6138  004808  0012               	return		;funcret
  6139  00480A                     __end_of_initTime:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           intcon2	equ	0xFF1
  6149                           intcon3	equ	0xFF0
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _initLCD *****************
  6162 ;; Defined at:
  6163 ;;		line 48 in file "lcd.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;		None
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      void 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;Total ram usage:        1 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    9
  6184 ;; This function calls:
  6185 ;;		_lcdInst
  6186 ;; This function is called by:
  6187 ;;		_main
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191                           	psect	text22
  6192  004282                     __ptext22:
  6193                           	opt stack 0
  6194  004282                     _initLCD:
  6195                           	opt stack 21
  6196                           
  6197                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6198                           
  6199                           ;incstack = 0
  6200  004282  0E9C               	movlw	156
  6201  004284  0100               	movlb	0	; () banked
  6202  004286  6F83               	movwf	??_initLCD& (0+255),b
  6203  004288  0ED7               	movlw	215
  6204  00428A                     u7317:
  6205  00428A  2EE8               	decfsz	wreg,f,c
  6206  00428C  D7FE               	bra	u7317
  6207  00428E  2F83               	decfsz	??_initLCD& (0+255),f,b
  6208  004290  D7FC               	bra	u7317
  6209                           
  6210                           ;lcd.c: 50: lcdInst(0b00110011);
  6211  004292  0E33               	movlw	51
  6212  004294  EC51  F024         	call	_lcdInst
  6213                           
  6214                           ;lcd.c: 51: lcdInst(0b00110010);
  6215  004298  0E32               	movlw	50
  6216  00429A  EC51  F024         	call	_lcdInst
  6217                           
  6218                           ;lcd.c: 53: lcdInst(0b00101000);
  6219  00429E  0E28               	movlw	40
  6220  0042A0  EC51  F024         	call	_lcdInst
  6221                           
  6222                           ;lcd.c: 54: lcdInst(0b00001100);
  6223  0042A4  0E0C               	movlw	12
  6224  0042A6  EC51  F024         	call	_lcdInst
  6225                           
  6226                           ;lcd.c: 55: lcdInst(0b00000110);
  6227  0042AA  0E06               	movlw	6
  6228  0042AC  EC51  F024         	call	_lcdInst
  6229                           
  6230                           ;lcd.c: 56: lcdInst(0b00000001);
  6231  0042B0  0E01               	movlw	1
  6232  0042B2  EC51  F024         	call	_lcdInst
  6233                           
  6234                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6235  0042B6  0E9C               	movlw	156
  6236  0042B8  0100               	movlb	0	; () banked
  6237  0042BA  6F83               	movwf	??_initLCD& (0+255),b
  6238  0042BC  0ED7               	movlw	215
  6239  0042BE                     u7327:
  6240  0042BE  2EE8               	decfsz	wreg,f,c
  6241  0042C0  D7FE               	bra	u7327
  6242  0042C2  2F83               	decfsz	??_initLCD& (0+255),f,b
  6243  0042C4  D7FC               	bra	u7327
  6244  0042C6  0012               	return		;funcret
  6245  0042C8                     __end_of_initLCD:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           intcon	equ	0xFF2
  6254                           intcon2	equ	0xFF1
  6255                           intcon3	equ	0xFF0
  6256                           postinc0	equ	0xFEE
  6257                           wreg	equ	0xFE8
  6258                           postdec1	equ	0xFE5
  6259                           fsr1l	equ	0xFE1
  6260                           indf2	equ	0xFDF
  6261                           postinc2	equ	0xFDE
  6262                           postdec2	equ	0xFDD
  6263                           fsr2h	equ	0xFDA
  6264                           fsr2l	equ	0xFD9
  6265                           status	equ	0xFD8
  6266                           
  6267 ;; *************** function _UI *****************
  6268 ;; Defined at:
  6269 ;;		line 76 in file "UI.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;  i               1   73[BANK0 ] unsigned char 
  6274 ;;  i               1   85[BANK0 ] unsigned char 
  6275 ;;  i               1   84[BANK0 ] unsigned char 
  6276 ;;  i               1   83[BANK0 ] unsigned char 
  6277 ;;  i               1   82[BANK0 ] unsigned char 
  6278 ;;  i               1   81[BANK0 ] unsigned char 
  6279 ;;  i               1   80[BANK0 ] unsigned char 
  6280 ;;  i               1   79[BANK0 ] unsigned char 
  6281 ;;  i               1   78[BANK0 ] unsigned char 
  6282 ;;  i               1   77[BANK0 ] unsigned char 
  6283 ;;  i               1   76[BANK0 ] unsigned char 
  6284 ;;  i               1   75[BANK0 ] unsigned char 
  6285 ;;  i               1   74[BANK0 ] unsigned char 
  6286 ;;  month           4   86[BANK0 ] unsigned char [4]
  6287 ;;  i               1   72[BANK0 ] unsigned char 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;Total ram usage:       22 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:   11
  6304 ;; This function calls:
  6305 ;;		___awdiv
  6306 ;;		___awmod
  6307 ;;		_change_state_to_menu_12
  6308 ;;		_change_state_to_menu_22
  6309 ;;		_lcdInst
  6310 ;;		_printRTC
  6311 ;;		_printf
  6312 ;;		_strcpy
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text23
  6319  0008CA                     __ptext23:
  6320                           	opt stack 0
  6321  0008CA                     _UI:
  6322                           	opt stack 19
  6323                           
  6324                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6325                           
  6326                           ;incstack = 0
  6327  0008CA  0E02               	movlw	2
  6328  0008CC  0100               	movlb	0	; () banked
  6329  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6330  0008D0  A4D8               	btfss	status,2,c
  6331  0008D2  D075               	goto	l7468
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6335  0008D4  0E01               	movlw	1
  6336  0008D6  EC51  F024         	call	_lcdInst
  6337  0008DA  0E68               	movlw	104
  6338  0008DC  0100               	movlb	0	; () banked
  6339  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6340  0008E0  0EE4               	movlw	228
  6341  0008E2                     u7337:
  6342  0008E2  2EE8               	decfsz	wreg,f,c
  6343  0008E4  D7FE               	bra	u7337
  6344  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6345  0008E8  D7FC               	bra	u7337
  6346  0008EA  F000               	nop	
  6347                           
  6348                           ;UI.c: 79: lcdInst(0b10000000);;
  6349  0008EC  0E80               	movlw	128
  6350  0008EE  EC51  F024         	call	_lcdInst
  6351                           
  6352                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6353  0008F2  0EB9               	movlw	low STR_1
  6354  0008F4  0100               	movlb	0	; () banked
  6355  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6356  0008F8  0EFB               	movlw	high STR_1
  6357  0008FA  0100               	movlb	0	; () banked
  6358  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6359  0008FE  0E01               	movlw	1
  6360  000900  0100               	movlb	0	; () banked
  6361  000902  25FD               	addwf	_sel& (0+255),w,b
  6362  000904  0100               	movlb	0	; () banked
  6363  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6364  000908  0100               	movlb	0	; () banked
  6365  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6366  00090C  0E00               	movlw	0
  6367  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6368  000910  ECB8  F008         	call	_printf	;wreg free
  6369                           
  6370                           ;UI.c: 81: lcdInst(0b11000000);;
  6371  000914  0EC0               	movlw	192
  6372  000916  EC51  F024         	call	_lcdInst
  6373                           
  6374                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6375  00091A  0E0E               	movlw	14
  6376  00091C  0100               	movlb	0	; () banked
  6377  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6378  000920  0E10               	movlw	16
  6379  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6380  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6381  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6382  00092C  ECD1  F01C         	call	___awmod	;wreg free
  6383  000930  C080  F0C6         	movff	?___awmod,_UI$2299
  6384  000934  C081  F0C7         	movff	?___awmod+1,_UI$2299+1
  6385                           
  6386                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6387  000938  0E1B               	movlw	low STR_2
  6388  00093A  0100               	movlb	0	; () banked
  6389  00093C  6F8E               	movwf	printf@f& (0+255),b
  6390  00093E  0EFF               	movlw	high STR_2
  6391  000940  0100               	movlb	0	; () banked
  6392  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6393  000944  0E0E               	movlw	14
  6394  000946  0100               	movlb	0	; () banked
  6395  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6396  00094A  0E10               	movlw	16
  6397  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6398  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6399  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6400  000956  ECD1  F01C         	call	___awmod	;wreg free
  6401  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6402  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6403  000962  0E00               	movlw	0
  6404  000964  0100               	movlb	0	; () banked
  6405  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6406  000968  0E3C               	movlw	60
  6407  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6408  00096C  ECBF  F01B         	call	___awdiv	;wreg free
  6409  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6410  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6411  000978  C0C6  F080         	movff	_UI$2299,___awmod@dividend
  6412  00097C  C0C7  F081         	movff	_UI$2299+1,___awmod@dividend+1
  6413  000980  0E00               	movlw	0
  6414  000982  0100               	movlb	0	; () banked
  6415  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6416  000986  0E3C               	movlw	60
  6417  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6418  00098A  ECD1  F01C         	call	___awmod	;wreg free
  6419  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6420  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6421  000996  ECB8  F008         	call	_printf	;wreg free
  6422                           
  6423                           ;UI.c: 83: machine_state = UI_state;
  6424  00099A  0E00               	movlw	0
  6425  00099C  0100               	movlb	0	; () banked
  6426  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6427  0009A0                     l180:
  6428  0009A0  A281               	btfss	3969,1,c	;volatile
  6429  0009A2  D7FE               	goto	l180
  6430                           
  6431                           ;UI.c: 86: }
  6432                           ;UI.c: 87: if(cur_state==12){
  6433  0009A4  0E0C               	movlw	12
  6434  0009A6  0100               	movlb	0	; () banked
  6435  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6436  0009AA  0100               	movlb	0	; () banked
  6437  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6438  0009AE  A4D8               	btfss	status,2,c
  6439  0009B0  D003               	goto	l7466
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;UI.c: 88: change_state_to_menu_12();
  6443  0009B2  ECA1  F021         	call	_change_state_to_menu_12	;wreg free
  6444                           
  6445                           ;UI.c: 89: }
  6446  0009B6  D3D5               	goto	l7788
  6447  0009B8                     l7466:
  6448                           
  6449                           ;UI.c: 90: else{
  6450                           ;UI.c: 91: change_state_to_menu_22();
  6451  0009B8  EC85  F021         	call	_change_state_to_menu_22	;wreg free
  6452                           
  6453                           ;UI.c: 92: }
  6454                           ;UI.c: 93: }
  6455  0009BC  D3D2               	goto	l7788
  6456  0009BE                     l7468:
  6457                           
  6458                           ;UI.c: 94: else if(cur_state == 0){
  6459  0009BE  0100               	movlb	0	; () banked
  6460  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6461  0009C2  0100               	movlb	0	; () banked
  6462  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6463  0009C6  A4D8               	btfss	status,2,c
  6464  0009C8  D3CC               	goto	l7788
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6468  0009CA  0E00               	movlw	0
  6469  0009CC  0100               	movlb	0	; () banked
  6470  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6471  0009D0                     l7472:
  6472                           
  6473                           ; BSR set to: 0
  6474  0009D0  0E63               	movlw	99
  6475  0009D2  0100               	movlb	0	; () banked
  6476  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6477  0009D6  D001               	goto	l7476
  6478  0009D8  D00C               	goto	l7480
  6479  0009DA                     l7476:
  6480                           
  6481                           ; BSR set to: 0
  6482  0009DA  0E68               	movlw	104
  6483  0009DC  0100               	movlb	0	; () banked
  6484  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6485  0009E0  0EE4               	movlw	228
  6486  0009E2                     u7347:
  6487  0009E2  2EE8               	decfsz	wreg,f,c
  6488  0009E4  D7FE               	bra	u7347
  6489  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6490  0009E8  D7FC               	bra	u7347
  6491  0009EA  F000               	nop	
  6492  0009EC  0100               	movlb	0	; () banked
  6493  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6494  0009F0  D7EF               	goto	l7472
  6495  0009F2                     l7480:
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;UI.c: 96: if(cur_state == 0){
  6499  0009F2  0100               	movlb	0	; () banked
  6500  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6501  0009F6  0100               	movlb	0	; () banked
  6502  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6503  0009FA  A4D8               	btfss	status,2,c
  6504  0009FC  D3B2               	goto	l7788
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;UI.c: 97: printRTC();
  6508  0009FE  ECAE  F00F         	call	_printRTC	;wreg free
  6509                           
  6510                           ;UI.c: 98: }
  6511                           ;UI.c: 99: }
  6512                           ;UI.c: 100: while(logstate){
  6513  000A02  D3AF               	goto	l7788
  6514  000A04                     l7484:
  6515                           
  6516                           ;UI.c: 102: if(!log_completion){
  6517  000A04  0100               	movlb	0	; () banked
  6518  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6519  000A08  0100               	movlb	0	; () banked
  6520  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6521  000A0C  A4D8               	btfss	status,2,c
  6522  000A0E  D041               	goto	l7514
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6526  000A10  0E01               	movlw	1
  6527  000A12  EC51  F024         	call	_lcdInst
  6528  000A16  0E68               	movlw	104
  6529  000A18  0100               	movlb	0	; () banked
  6530  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6531  000A1C  0EE4               	movlw	228
  6532  000A1E                     u7357:
  6533  000A1E  2EE8               	decfsz	wreg,f,c
  6534  000A20  D7FE               	bra	u7357
  6535  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6536  000A24  D7FC               	bra	u7357
  6537  000A26  F000               	nop	
  6538                           
  6539                           ;UI.c: 104: lcdInst(0b10000000);;
  6540  000A28  0E80               	movlw	128
  6541  000A2A  EC51  F024         	call	_lcdInst
  6542                           
  6543                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6544  000A2E  0EA7               	movlw	low STR_3
  6545  000A30  0100               	movlb	0	; () banked
  6546  000A32  6F8E               	movwf	printf@f& (0+255),b
  6547  000A34  0EFB               	movlw	high STR_3
  6548  000A36  0100               	movlb	0	; () banked
  6549  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6550  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6551  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6552  000A42  ECB8  F008         	call	_printf	;wreg free
  6553                           
  6554                           ;UI.c: 106: lcdInst(0b11000000);;
  6555  000A46  0EC0               	movlw	192
  6556  000A48  EC51  F024         	call	_lcdInst
  6557                           
  6558                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6559  000A4C  0E3E               	movlw	low STR_4
  6560  000A4E  0100               	movlb	0	; () banked
  6561  000A50  6F8E               	movwf	printf@f& (0+255),b
  6562  000A52  0EFE               	movlw	high STR_4
  6563  000A54  0100               	movlb	0	; () banked
  6564  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6565  000A58  ECB8  F008         	call	_printf	;wreg free
  6566  000A5C                     l7498:
  6567  000A5C  0E00               	movlw	0
  6568  000A5E  0100               	movlb	0	; () banked
  6569  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6570  000A62                     l7500:
  6571                           
  6572                           ; BSR set to: 0
  6573  000A62  0E63               	movlw	99
  6574  000A64  0100               	movlb	0	; () banked
  6575  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6576  000A68  D001               	goto	l7504
  6577  000A6A  D00C               	goto	l7508
  6578  000A6C                     l7504:
  6579                           
  6580                           ; BSR set to: 0
  6581  000A6C  0E68               	movlw	104
  6582  000A6E  0100               	movlb	0	; () banked
  6583  000A70  6FC4               	movwf	??_UI& (0+255),b
  6584  000A72  0EE4               	movlw	228
  6585  000A74                     u7367:
  6586  000A74  2EE8               	decfsz	wreg,f,c
  6587  000A76  D7FE               	bra	u7367
  6588  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6589  000A7A  D7FC               	bra	u7367
  6590  000A7C  F000               	nop	
  6591  000A7E  0100               	movlb	0	; () banked
  6592  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6593  000A82  D7EF               	goto	l7500
  6594  000A84                     l7508:
  6595                           
  6596                           ; BSR set to: 0
  6597  000A84  0100               	movlb	0	; () banked
  6598  000A86  51F6               	movf	_logstate& (0+255),w,b
  6599  000A88  0100               	movlb	0	; () banked
  6600  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6601  000A8C  B4D8               	btfsc	status,2,c
  6602  000A8E  0012               	return	
  6603  000A90  D7E5               	goto	l7498
  6604  000A92                     l7514:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;UI.c: 111: else{
  6608                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6609  000A92  0E01               	movlw	1
  6610  000A94  EC51  F024         	call	_lcdInst
  6611  000A98  0E68               	movlw	104
  6612  000A9A  0100               	movlb	0	; () banked
  6613  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6614  000A9E  0EE4               	movlw	228
  6615  000AA0                     u7377:
  6616  000AA0  2EE8               	decfsz	wreg,f,c
  6617  000AA2  D7FE               	bra	u7377
  6618  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6619  000AA6  D7FC               	bra	u7377
  6620  000AA8  F000               	nop	
  6621                           
  6622                           ;UI.c: 113: lcdInst(0b10000000);;
  6623  000AAA  0E80               	movlw	128
  6624  000AAC  EC51  F024         	call	_lcdInst
  6625                           
  6626                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6627  000AB0  0EA7               	movlw	low STR_3
  6628  000AB2  0100               	movlb	0	; () banked
  6629  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6630  000AB6  0EFB               	movlw	high STR_3
  6631  000AB8  0100               	movlb	0	; () banked
  6632  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6633  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6634  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6635  000AC4  ECB8  F008         	call	_printf	;wreg free
  6636                           
  6637                           ;UI.c: 115: lcdInst(0b11000000);;
  6638  000AC8  0EC0               	movlw	192
  6639  000ACA  EC51  F024         	call	_lcdInst
  6640                           
  6641                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6642  000ACE  0EFC               	movlw	low STR_6
  6643  000AD0  0100               	movlb	0	; () banked
  6644  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6645  000AD4  0EFD               	movlw	high STR_6
  6646  000AD6  0100               	movlb	0	; () banked
  6647  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6648  000ADA  ECB8  F008         	call	_printf	;wreg free
  6649                           
  6650                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6651  000ADE  0E00               	movlw	0
  6652  000AE0  0100               	movlb	0	; () banked
  6653  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6654  000AE4                     l7528:
  6655                           
  6656                           ; BSR set to: 0
  6657  000AE4  0E63               	movlw	99
  6658  000AE6  0100               	movlb	0	; () banked
  6659  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6660  000AEA  D001               	goto	l7532
  6661  000AEC  D00C               	goto	l7536
  6662  000AEE                     l7532:
  6663                           
  6664                           ; BSR set to: 0
  6665  000AEE  0E68               	movlw	104
  6666  000AF0  0100               	movlb	0	; () banked
  6667  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6668  000AF4  0EE4               	movlw	228
  6669  000AF6                     u7387:
  6670  000AF6  2EE8               	decfsz	wreg,f,c
  6671  000AF8  D7FE               	bra	u7387
  6672  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6673  000AFC  D7FC               	bra	u7387
  6674  000AFE  F000               	nop	
  6675  000B00  0100               	movlb	0	; () banked
  6676  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6677  000B04  D7EF               	goto	l7528
  6678  000B06                     l7536:
  6679                           
  6680                           ; BSR set to: 0
  6681  000B06  0100               	movlb	0	; () banked
  6682  000B08  51F6               	movf	_logstate& (0+255),w,b
  6683  000B0A  0100               	movlb	0	; () banked
  6684  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6685  000B0E  B4D8               	btfsc	status,2,c
  6686  000B10  0012               	return	
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6690                           
  6691                           ; BSR set to: 0
  6692                           
  6693                           ; BSR set to: 0
  6694  000B12  0E00               	movlw	0
  6695  000B14  0100               	movlb	0	; () banked
  6696  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6697  000B18                     l7542:
  6698                           
  6699                           ; BSR set to: 0
  6700  000B18  0E63               	movlw	99
  6701  000B1A  0100               	movlb	0	; () banked
  6702  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6703  000B1E  D001               	goto	l7546
  6704  000B20  D00C               	goto	l7550
  6705  000B22                     l7546:
  6706                           
  6707                           ; BSR set to: 0
  6708  000B22  0E68               	movlw	104
  6709  000B24  0100               	movlb	0	; () banked
  6710  000B26  6FC4               	movwf	??_UI& (0+255),b
  6711  000B28  0EE4               	movlw	228
  6712  000B2A                     u7397:
  6713  000B2A  2EE8               	decfsz	wreg,f,c
  6714  000B2C  D7FE               	bra	u7397
  6715  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6716  000B30  D7FC               	bra	u7397
  6717  000B32  F000               	nop	
  6718  000B34  0100               	movlb	0	; () banked
  6719  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6720  000B38  D7EF               	goto	l7542
  6721  000B3A                     l7550:
  6722                           
  6723                           ; BSR set to: 0
  6724  000B3A  0100               	movlb	0	; () banked
  6725  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6726  000B3E  0100               	movlb	0	; () banked
  6727  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6728  000B42  B4D8               	btfsc	status,2,c
  6729  000B44  0012               	return	
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6733                           
  6734                           ; BSR set to: 0
  6735                           
  6736                           ; BSR set to: 0
  6737  000B46  0E01               	movlw	1
  6738  000B48  EC51  F024         	call	_lcdInst
  6739  000B4C  0E68               	movlw	104
  6740  000B4E  0100               	movlb	0	; () banked
  6741  000B50  6FC4               	movwf	??_UI& (0+255),b
  6742  000B52  0EE4               	movlw	228
  6743  000B54                     u7407:
  6744  000B54  2EE8               	decfsz	wreg,f,c
  6745  000B56  D7FE               	bra	u7407
  6746  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6747  000B5A  D7FC               	bra	u7407
  6748  000B5C  F000               	nop	
  6749                           
  6750                           ;UI.c: 122: lcdInst(0b10000000);;
  6751  000B5E  0E80               	movlw	128
  6752  000B60  EC51  F024         	call	_lcdInst
  6753                           
  6754                           ;UI.c: 123: printf("START:");
  6755  000B64  0EC4               	movlw	low STR_7
  6756  000B66  0100               	movlb	0	; () banked
  6757  000B68  6F8E               	movwf	printf@f& (0+255),b
  6758  000B6A  0EFF               	movlw	high STR_7
  6759  000B6C  0100               	movlb	0	; () banked
  6760  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6761  000B70  ECB8  F008         	call	_printf	;wreg free
  6762                           
  6763                           ;UI.c: 124: lcdInst(0b11000000);;
  6764  000B74  0EC0               	movlw	192
  6765  000B76  EC51  F024         	call	_lcdInst
  6766                           
  6767                           ;UI.c: 125: char month[] = "MMM";
  6768  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6769  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6770  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6771  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6772                           
  6773                           ;UI.c: 126: switch(log_startTime[5]){
  6774  000B8A  D0C3               	goto	l7594
  6775  000B8C                     l7566:
  6776                           
  6777                           ;UI.c: 128: strcpy(month, "JAN");
  6778  000B8C  0ED6               	movlw	low UI@month
  6779  000B8E  0100               	movlb	0	; () banked
  6780  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6781  000B92  0E00               	movlw	high UI@month
  6782  000B94  0100               	movlb	0	; () banked
  6783  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6784  000B98  0EDB               	movlw	low STR_8
  6785  000B9A  0100               	movlb	0	; () banked
  6786  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6787  000B9E  0EFF               	movlw	high STR_8
  6788  000BA0  0100               	movlb	0	; () banked
  6789  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6790  000BA4  ECBD  F021         	call	_strcpy	;wreg free
  6791                           
  6792                           ;UI.c: 129: break;
  6793  000BA8  D0E6               	goto	l7596
  6794  000BAA                     l7568:
  6795                           
  6796                           ;UI.c: 131: strcpy(month, "FEB");
  6797  000BAA  0ED6               	movlw	low UI@month
  6798  000BAC  0100               	movlb	0	; () banked
  6799  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6800  000BB0  0E00               	movlw	high UI@month
  6801  000BB2  0100               	movlb	0	; () banked
  6802  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6803  000BB6  0ECB               	movlw	low STR_9
  6804  000BB8  0100               	movlb	0	; () banked
  6805  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6806  000BBC  0EFF               	movlw	high STR_9
  6807  000BBE  0100               	movlb	0	; () banked
  6808  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6809  000BC2  ECBD  F021         	call	_strcpy	;wreg free
  6810                           
  6811                           ;UI.c: 132: break;
  6812  000BC6  D0D7               	goto	l7596
  6813  000BC8                     l7570:
  6814                           
  6815                           ;UI.c: 134: strcpy(month, "MAR");
  6816  000BC8  0ED6               	movlw	low UI@month
  6817  000BCA  0100               	movlb	0	; () banked
  6818  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6819  000BCE  0E00               	movlw	high UI@month
  6820  000BD0  0100               	movlb	0	; () banked
  6821  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6822  000BD4  0EE7               	movlw	low STR_10
  6823  000BD6  0100               	movlb	0	; () banked
  6824  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6825  000BDA  0EFF               	movlw	high STR_10
  6826  000BDC  0100               	movlb	0	; () banked
  6827  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6828  000BE0  ECBD  F021         	call	_strcpy	;wreg free
  6829                           
  6830                           ;UI.c: 135: break;
  6831  000BE4  D0C8               	goto	l7596
  6832  000BE6                     l7572:
  6833                           
  6834                           ;UI.c: 137: strcpy(month, "APR");
  6835  000BE6  0ED6               	movlw	low UI@month
  6836  000BE8  0100               	movlb	0	; () banked
  6837  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6838  000BEC  0E00               	movlw	high UI@month
  6839  000BEE  0100               	movlb	0	; () banked
  6840  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6841  000BF2  0EEB               	movlw	low STR_11
  6842  000BF4  0100               	movlb	0	; () banked
  6843  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6844  000BF8  0EFF               	movlw	high STR_11
  6845  000BFA  0100               	movlb	0	; () banked
  6846  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6847  000BFE  ECBD  F021         	call	_strcpy	;wreg free
  6848                           
  6849                           ;UI.c: 138: break;
  6850  000C02  D0B9               	goto	l7596
  6851  000C04                     l7574:
  6852                           
  6853                           ;UI.c: 140: strcpy(month, "MAY");
  6854  000C04  0ED6               	movlw	low UI@month
  6855  000C06  0100               	movlb	0	; () banked
  6856  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6857  000C0A  0E00               	movlw	high UI@month
  6858  000C0C  0100               	movlb	0	; () banked
  6859  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6860  000C10  0EFB               	movlw	low STR_12
  6861  000C12  0100               	movlb	0	; () banked
  6862  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6863  000C16  0EFF               	movlw	high STR_12
  6864  000C18  0100               	movlb	0	; () banked
  6865  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6866  000C1C  ECBD  F021         	call	_strcpy	;wreg free
  6867                           
  6868                           ;UI.c: 141: break;
  6869  000C20  D0AA               	goto	l7596
  6870  000C22                     l7576:
  6871                           
  6872                           ;UI.c: 143: strcpy(month, "JUN");
  6873  000C22  0ED6               	movlw	low UI@month
  6874  000C24  0100               	movlb	0	; () banked
  6875  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6876  000C28  0E00               	movlw	high UI@month
  6877  000C2A  0100               	movlb	0	; () banked
  6878  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6879  000C2E  0EDF               	movlw	low STR_13
  6880  000C30  0100               	movlb	0	; () banked
  6881  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6882  000C34  0EFF               	movlw	high STR_13
  6883  000C36  0100               	movlb	0	; () banked
  6884  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6885  000C3A  ECBD  F021         	call	_strcpy	;wreg free
  6886                           
  6887                           ;UI.c: 144: break;
  6888  000C3E  D09B               	goto	l7596
  6889  000C40                     l7578:
  6890                           
  6891                           ;UI.c: 146: strcpy(month, "JUL");
  6892  000C40  0ED6               	movlw	low UI@month
  6893  000C42  0100               	movlb	0	; () banked
  6894  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6895  000C46  0E00               	movlw	high UI@month
  6896  000C48  0100               	movlb	0	; () banked
  6897  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6898  000C4C  0ED7               	movlw	low STR_14
  6899  000C4E  0100               	movlb	0	; () banked
  6900  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6901  000C52  0EFF               	movlw	high STR_14
  6902  000C54  0100               	movlb	0	; () banked
  6903  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6904  000C58  ECBD  F021         	call	_strcpy	;wreg free
  6905                           
  6906                           ;UI.c: 147: break;
  6907  000C5C  D08C               	goto	l7596
  6908  000C5E                     l7580:
  6909                           
  6910                           ;UI.c: 149: strcpy(month, "AUG");
  6911  000C5E  0ED6               	movlw	low UI@month
  6912  000C60  0100               	movlb	0	; () banked
  6913  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6914  000C64  0E00               	movlw	high UI@month
  6915  000C66  0100               	movlb	0	; () banked
  6916  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6917  000C6A  0ED3               	movlw	low STR_15
  6918  000C6C  0100               	movlb	0	; () banked
  6919  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6920  000C70  0EFF               	movlw	high STR_15
  6921  000C72  0100               	movlb	0	; () banked
  6922  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6923  000C76  ECBD  F021         	call	_strcpy	;wreg free
  6924                           
  6925                           ;UI.c: 150: break;
  6926  000C7A  D07D               	goto	l7596
  6927  000C7C                     l7582:
  6928                           
  6929                           ;UI.c: 152: strcpy(month, "SEP");
  6930  000C7C  0ED6               	movlw	low UI@month
  6931  000C7E  0100               	movlb	0	; () banked
  6932  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6933  000C82  0E00               	movlw	high UI@month
  6934  000C84  0100               	movlb	0	; () banked
  6935  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6936  000C88  0EE3               	movlw	low STR_16
  6937  000C8A  0100               	movlb	0	; () banked
  6938  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6939  000C8E  0EFF               	movlw	high STR_16
  6940  000C90  0100               	movlb	0	; () banked
  6941  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6942  000C94  ECBD  F021         	call	_strcpy	;wreg free
  6943                           
  6944                           ;UI.c: 153: break;
  6945  000C98  D06E               	goto	l7596
  6946  000C9A                     l7584:
  6947                           
  6948                           ;UI.c: 155: strcpy(month, "OCT");
  6949  000C9A  0ED6               	movlw	low UI@month
  6950  000C9C  0100               	movlb	0	; () banked
  6951  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6952  000CA0  0E00               	movlw	high UI@month
  6953  000CA2  0100               	movlb	0	; () banked
  6954  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6955  000CA6  0EF3               	movlw	low STR_17
  6956  000CA8  0100               	movlb	0	; () banked
  6957  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6958  000CAC  0EFF               	movlw	high STR_17
  6959  000CAE  0100               	movlb	0	; () banked
  6960  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6961  000CB2  ECBD  F021         	call	_strcpy	;wreg free
  6962                           
  6963                           ;UI.c: 156: break;
  6964  000CB6  D05F               	goto	l7596
  6965  000CB8                     l7586:
  6966                           
  6967                           ;UI.c: 158: strcpy(month, "NOV");
  6968  000CB8  0ED6               	movlw	low UI@month
  6969  000CBA  0100               	movlb	0	; () banked
  6970  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6971  000CBE  0E00               	movlw	high UI@month
  6972  000CC0  0100               	movlb	0	; () banked
  6973  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6974  000CC4  0EF7               	movlw	low STR_18
  6975  000CC6  0100               	movlb	0	; () banked
  6976  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6977  000CCA  0EFF               	movlw	high STR_18
  6978  000CCC  0100               	movlb	0	; () banked
  6979  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6980  000CD0  ECBD  F021         	call	_strcpy	;wreg free
  6981                           
  6982                           ;UI.c: 159: break;
  6983  000CD4  D050               	goto	l7596
  6984  000CD6                     l7588:
  6985                           
  6986                           ;UI.c: 161: strcpy(month, "DEC");
  6987  000CD6  0ED6               	movlw	low UI@month
  6988  000CD8  0100               	movlb	0	; () banked
  6989  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6990  000CDC  0E00               	movlw	high UI@month
  6991  000CDE  0100               	movlb	0	; () banked
  6992  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6993  000CE2  0ECF               	movlw	low STR_19
  6994  000CE4  0100               	movlb	0	; () banked
  6995  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6996  000CE8  0EFF               	movlw	high STR_19
  6997  000CEA  0100               	movlb	0	; () banked
  6998  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6999  000CEE  ECBD  F021         	call	_strcpy	;wreg free
  7000                           
  7001                           ;UI.c: 162: break;
  7002  000CF2  D041               	goto	l7596
  7003  000CF4                     l7590:
  7004                           
  7005                           ;UI.c: 164: strcpy(month, "ERR");
  7006  000CF4  0ED6               	movlw	low UI@month
  7007  000CF6  0100               	movlb	0	; () banked
  7008  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7009  000CFA  0E00               	movlw	high UI@month
  7010  000CFC  0100               	movlb	0	; () banked
  7011  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7012  000D00  0EEF               	movlw	low STR_20
  7013  000D02  0100               	movlb	0	; () banked
  7014  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7015  000D06  0EFF               	movlw	high STR_20
  7016  000D08  0100               	movlb	0	; () banked
  7017  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7018  000D0C  ECBD  F021         	call	_strcpy	;wreg free
  7019                           
  7020                           ;UI.c: 166: }
  7021                           
  7022                           ;UI.c: 165: break;
  7023  000D10  D032               	goto	l7596
  7024  000D12                     l7594:
  7025  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7026  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7027  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7028                           
  7029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7030                           ; Switch size 1, requested type "space"
  7031                           ; Number of cases is 1, Range of values is 0 to 0
  7032                           ; switch strategies available:
  7033                           ; Name         Instructions Cycles
  7034                           ; simple_byte            4     3 (average)
  7035                           ;	Chosen strategy is simple_byte
  7036  000D1E  0100               	movlb	0	; () banked
  7037  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7038  000D22  0A00               	xorlw	0	; case 0
  7039  000D24  A4D8               	btfss	status,2,c
  7040  000D26  D7E6               	goto	l7590
  7041                           
  7042                           ; BSR set to: 0
  7043                           ; Switch size 1, requested type "space"
  7044                           ; Number of cases is 12, Range of values is 1 to 12
  7045                           ; switch strategies available:
  7046                           ; Name         Instructions Cycles
  7047                           ; simple_byte           37    19 (average)
  7048                           ;	Chosen strategy is simple_byte
  7049  000D28  0100               	movlb	0	; () banked
  7050  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7051  000D2C  0A01               	xorlw	1	; case 1
  7052  000D2E  B4D8               	btfsc	status,2,c
  7053  000D30  D72D               	goto	l7566
  7054  000D32  0A03               	xorlw	3	; case 2
  7055  000D34  B4D8               	btfsc	status,2,c
  7056  000D36  D739               	goto	l7568
  7057  000D38  0A01               	xorlw	1	; case 3
  7058  000D3A  B4D8               	btfsc	status,2,c
  7059  000D3C  D745               	goto	l7570
  7060  000D3E  0A07               	xorlw	7	; case 4
  7061  000D40  B4D8               	btfsc	status,2,c
  7062  000D42  D751               	goto	l7572
  7063  000D44  0A01               	xorlw	1	; case 5
  7064  000D46  B4D8               	btfsc	status,2,c
  7065  000D48  D75D               	goto	l7574
  7066  000D4A  0A03               	xorlw	3	; case 6
  7067  000D4C  B4D8               	btfsc	status,2,c
  7068  000D4E  D769               	goto	l7576
  7069  000D50  0A01               	xorlw	1	; case 7
  7070  000D52  B4D8               	btfsc	status,2,c
  7071  000D54  D775               	goto	l7578
  7072  000D56  0A0F               	xorlw	15	; case 8
  7073  000D58  B4D8               	btfsc	status,2,c
  7074  000D5A  D781               	goto	l7580
  7075  000D5C  0A01               	xorlw	1	; case 9
  7076  000D5E  B4D8               	btfsc	status,2,c
  7077  000D60  D78D               	goto	l7582
  7078  000D62  0A03               	xorlw	3	; case 10
  7079  000D64  B4D8               	btfsc	status,2,c
  7080  000D66  D799               	goto	l7584
  7081  000D68  0A01               	xorlw	1	; case 11
  7082  000D6A  B4D8               	btfsc	status,2,c
  7083  000D6C  D7A5               	goto	l7586
  7084  000D6E  0A07               	xorlw	7	; case 12
  7085  000D70  B4D8               	btfsc	status,2,c
  7086  000D72  D7B1               	goto	l7588
  7087  000D74  D7BF               	goto	l7590
  7088  000D76                     l7596:
  7089                           
  7090                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7091  000D76  0E30               	movlw	low STR_21
  7092  000D78  0100               	movlb	0	; () banked
  7093  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7094  000D7C  0EFB               	movlw	high STR_21
  7095  000D7E  0100               	movlb	0	; () banked
  7096  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7097  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7098  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7099  000D8A  0ED6               	movlw	low UI@month
  7100  000D8C  0100               	movlb	0	; () banked
  7101  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7102  000D90  0E00               	movlw	high UI@month
  7103  000D92  0100               	movlb	0	; () banked
  7104  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7105  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7106  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7107  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7108  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7109  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7110  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7111  000DAE  ECB8  F008         	call	_printf	;wreg free
  7112                           
  7113                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7114  000DB2  0E00               	movlw	0
  7115  000DB4  0100               	movlb	0	; () banked
  7116  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7117  000DB8                     l7600:
  7118                           
  7119                           ; BSR set to: 0
  7120  000DB8  0E63               	movlw	99
  7121  000DBA  0100               	movlb	0	; () banked
  7122  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7123  000DBE  D001               	goto	l7604
  7124  000DC0  D00C               	goto	l7608
  7125  000DC2                     l7604:
  7126                           
  7127                           ; BSR set to: 0
  7128  000DC2  0E68               	movlw	104
  7129  000DC4  0100               	movlb	0	; () banked
  7130  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7131  000DC8  0EE4               	movlw	228
  7132  000DCA                     u7417:
  7133  000DCA  2EE8               	decfsz	wreg,f,c
  7134  000DCC  D7FE               	bra	u7417
  7135  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7136  000DD0  D7FC               	bra	u7417
  7137  000DD2  F000               	nop	
  7138  000DD4  0100               	movlb	0	; () banked
  7139  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7140  000DD8  D7EF               	goto	l7600
  7141  000DDA                     l7608:
  7142                           
  7143                           ; BSR set to: 0
  7144  000DDA  0100               	movlb	0	; () banked
  7145  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7146  000DDE  0100               	movlb	0	; () banked
  7147  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7148  000DE2  B4D8               	btfsc	status,2,c
  7149  000DE4  0012               	return	
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157  000DE6  0E00               	movlw	0
  7158  000DE8  0100               	movlb	0	; () banked
  7159  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7160  000DEC                     l7614:
  7161                           
  7162                           ; BSR set to: 0
  7163  000DEC  0E63               	movlw	99
  7164  000DEE  0100               	movlb	0	; () banked
  7165  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7166  000DF2  D001               	goto	l7618
  7167  000DF4  D00C               	goto	l7622
  7168  000DF6                     l7618:
  7169                           
  7170                           ; BSR set to: 0
  7171  000DF6  0E68               	movlw	104
  7172  000DF8  0100               	movlb	0	; () banked
  7173  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7174  000DFC  0EE4               	movlw	228
  7175  000DFE                     u7427:
  7176  000DFE  2EE8               	decfsz	wreg,f,c
  7177  000E00  D7FE               	bra	u7427
  7178  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7179  000E04  D7FC               	bra	u7427
  7180  000E06  F000               	nop	
  7181  000E08  0100               	movlb	0	; () banked
  7182  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7183  000E0C  D7EF               	goto	l7614
  7184  000E0E                     l7622:
  7185                           
  7186                           ; BSR set to: 0
  7187  000E0E  0100               	movlb	0	; () banked
  7188  000E10  51F6               	movf	_logstate& (0+255),w,b
  7189  000E12  0100               	movlb	0	; () banked
  7190  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7191  000E16  B4D8               	btfsc	status,2,c
  7192  000E18  0012               	return	
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7196                           
  7197                           ; BSR set to: 0
  7198                           
  7199                           ; BSR set to: 0
  7200  000E1A  0E01               	movlw	1
  7201  000E1C  EC51  F024         	call	_lcdInst
  7202  000E20  0E68               	movlw	104
  7203  000E22  0100               	movlb	0	; () banked
  7204  000E24  6FC4               	movwf	??_UI& (0+255),b
  7205  000E26  0EE4               	movlw	228
  7206  000E28                     u7437:
  7207  000E28  2EE8               	decfsz	wreg,f,c
  7208  000E2A  D7FE               	bra	u7437
  7209  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7210  000E2E  D7FC               	bra	u7437
  7211  000E30  F000               	nop	
  7212                           
  7213                           ;UI.c: 173: lcdInst(0b10000000);;
  7214  000E32  0E80               	movlw	128
  7215  000E34  EC51  F024         	call	_lcdInst
  7216                           
  7217                           ;UI.c: 174: printf("DURATION:");
  7218  000E38  0E9B               	movlw	low STR_22
  7219  000E3A  0100               	movlb	0	; () banked
  7220  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7221  000E3E  0EFF               	movlw	high STR_22
  7222  000E40  0100               	movlb	0	; () banked
  7223  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7224  000E44  ECB8  F008         	call	_printf	;wreg free
  7225                           
  7226                           ;UI.c: 175: lcdInst(0b11000000);;
  7227  000E48  0EC0               	movlw	192
  7228  000E4A  EC51  F024         	call	_lcdInst
  7229                           
  7230                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7231  000E4E  0E0E               	movlw	14
  7232  000E50  0100               	movlb	0	; () banked
  7233  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7234  000E54  0E10               	movlw	16
  7235  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7236  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7237  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7238  000E60  ECD1  F01C         	call	___awmod	;wreg free
  7239  000E64  C080  F0C6         	movff	?___awmod,_UI$2299
  7240  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2299+1
  7241                           
  7242                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7243  000E6C  0E0D               	movlw	low STR_23
  7244  000E6E  0100               	movlb	0	; () banked
  7245  000E70  6F8E               	movwf	printf@f& (0+255),b
  7246  000E72  0EFF               	movlw	high STR_23
  7247  000E74  0100               	movlb	0	; () banked
  7248  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7249  000E78  0E0E               	movlw	14
  7250  000E7A  0100               	movlb	0	; () banked
  7251  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7252  000E7E  0E10               	movlw	16
  7253  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7254  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7255  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7256  000E8A  ECD1  F01C         	call	___awmod	;wreg free
  7257  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7258  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7259  000E96  0E00               	movlw	0
  7260  000E98  0100               	movlb	0	; () banked
  7261  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7262  000E9C  0E3C               	movlw	60
  7263  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7264  000EA0  ECBF  F01B         	call	___awdiv	;wreg free
  7265  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7266  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7267  000EAC  C0C6  F080         	movff	_UI$2299,___awmod@dividend
  7268  000EB0  C0C7  F081         	movff	_UI$2299+1,___awmod@dividend+1
  7269  000EB4  0E00               	movlw	0
  7270  000EB6  0100               	movlb	0	; () banked
  7271  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7272  000EBA  0E3C               	movlw	60
  7273  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7274  000EBE  ECD1  F01C         	call	___awmod	;wreg free
  7275  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7276  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7277  000ECA  ECB8  F008         	call	_printf	;wreg free
  7278                           
  7279                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7280  000ECE  0E00               	movlw	0
  7281  000ED0  0100               	movlb	0	; () banked
  7282  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7283  000ED4                     l7642:
  7284                           
  7285                           ; BSR set to: 0
  7286  000ED4  0E63               	movlw	99
  7287  000ED6  0100               	movlb	0	; () banked
  7288  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7289  000EDA  D001               	goto	l7646
  7290  000EDC  D00C               	goto	l7650
  7291  000EDE                     l7646:
  7292                           
  7293                           ; BSR set to: 0
  7294  000EDE  0E68               	movlw	104
  7295  000EE0  0100               	movlb	0	; () banked
  7296  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7297  000EE4  0EE4               	movlw	228
  7298  000EE6                     u7447:
  7299  000EE6  2EE8               	decfsz	wreg,f,c
  7300  000EE8  D7FE               	bra	u7447
  7301  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7302  000EEC  D7FC               	bra	u7447
  7303  000EEE  F000               	nop	
  7304  000EF0  0100               	movlb	0	; () banked
  7305  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7306  000EF4  D7EF               	goto	l7642
  7307  000EF6                     l7650:
  7308                           
  7309                           ; BSR set to: 0
  7310  000EF6  0100               	movlb	0	; () banked
  7311  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7312  000EFA  0100               	movlb	0	; () banked
  7313  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7314  000EFE  B4D8               	btfsc	status,2,c
  7315  000F00  0012               	return	
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7319                           
  7320                           ; BSR set to: 0
  7321                           
  7322                           ; BSR set to: 0
  7323  000F02  0E00               	movlw	0
  7324  000F04  0100               	movlb	0	; () banked
  7325  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7326  000F08                     l7656:
  7327                           
  7328                           ; BSR set to: 0
  7329  000F08  0E63               	movlw	99
  7330  000F0A  0100               	movlb	0	; () banked
  7331  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7332  000F0E  D001               	goto	l7660
  7333  000F10  D00C               	goto	l7664
  7334  000F12                     l7660:
  7335                           
  7336                           ; BSR set to: 0
  7337  000F12  0E68               	movlw	104
  7338  000F14  0100               	movlb	0	; () banked
  7339  000F16  6FC4               	movwf	??_UI& (0+255),b
  7340  000F18  0EE4               	movlw	228
  7341  000F1A                     u7457:
  7342  000F1A  2EE8               	decfsz	wreg,f,c
  7343  000F1C  D7FE               	bra	u7457
  7344  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7345  000F20  D7FC               	bra	u7457
  7346  000F22  F000               	nop	
  7347  000F24  0100               	movlb	0	; () banked
  7348  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7349  000F28  D7EF               	goto	l7656
  7350  000F2A                     l7664:
  7351                           
  7352                           ; BSR set to: 0
  7353  000F2A  0100               	movlb	0	; () banked
  7354  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7355  000F2E  0100               	movlb	0	; () banked
  7356  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7357  000F32  B4D8               	btfsc	status,2,c
  7358  000F34  0012               	return	
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7362                           
  7363                           ; BSR set to: 0
  7364                           
  7365                           ; BSR set to: 0
  7366  000F36  0E01               	movlw	1
  7367  000F38  EC51  F024         	call	_lcdInst
  7368  000F3C  0E68               	movlw	104
  7369  000F3E  0100               	movlb	0	; () banked
  7370  000F40  6FC4               	movwf	??_UI& (0+255),b
  7371  000F42  0EE4               	movlw	228
  7372  000F44                     u7467:
  7373  000F44  2EE8               	decfsz	wreg,f,c
  7374  000F46  D7FE               	bra	u7467
  7375  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7376  000F4A  D7FC               	bra	u7467
  7377  000F4C  F000               	nop	
  7378                           
  7379                           ;UI.c: 182: lcdInst(0b10000000);;
  7380  000F4E  0E80               	movlw	128
  7381  000F50  EC51  F024         	call	_lcdInst
  7382                           
  7383                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7384  000F54  0E52               	movlw	low STR_24
  7385  000F56  0100               	movlb	0	; () banked
  7386  000F58  6F8E               	movwf	printf@f& (0+255),b
  7387  000F5A  0EFD               	movlw	high STR_24
  7388  000F5C  0100               	movlb	0	; () banked
  7389  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7390  000F60  ECB8  F008         	call	_printf	;wreg free
  7391                           
  7392                           ;UI.c: 184: lcdInst(0b11000000);;
  7393  000F64  0EC0               	movlw	192
  7394  000F66  EC51  F024         	call	_lcdInst
  7395                           
  7396                           ;UI.c: 185: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7397  000F6A  0E70               	movlw	low STR_25
  7398  000F6C  0100               	movlb	0	; () banked
  7399  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7400  000F70  0EFB               	movlw	high STR_25
  7401  000F72  0100               	movlb	0	; () banked
  7402  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7403  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7404  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7405  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7406  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7407  000F86  ECB8  F008         	call	_printf	;wreg free
  7408                           
  7409                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7410  000F8A  0E00               	movlw	0
  7411  000F8C  0100               	movlb	0	; () banked
  7412  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7413  000F90                     l7682:
  7414                           
  7415                           ; BSR set to: 0
  7416  000F90  0E63               	movlw	99
  7417  000F92  0100               	movlb	0	; () banked
  7418  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7419  000F96  D001               	goto	l7686
  7420  000F98  D00C               	goto	l7690
  7421  000F9A                     l7686:
  7422                           
  7423                           ; BSR set to: 0
  7424  000F9A  0E68               	movlw	104
  7425  000F9C  0100               	movlb	0	; () banked
  7426  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7427  000FA0  0EE4               	movlw	228
  7428  000FA2                     u7477:
  7429  000FA2  2EE8               	decfsz	wreg,f,c
  7430  000FA4  D7FE               	bra	u7477
  7431  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7432  000FA8  D7FC               	bra	u7477
  7433  000FAA  F000               	nop	
  7434  000FAC  0100               	movlb	0	; () banked
  7435  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7436  000FB0  D7EF               	goto	l7682
  7437  000FB2                     l7690:
  7438                           
  7439                           ; BSR set to: 0
  7440  000FB2  0100               	movlb	0	; () banked
  7441  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7442  000FB6  0100               	movlb	0	; () banked
  7443  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7444  000FBA  B4D8               	btfsc	status,2,c
  7445  000FBC  0012               	return	
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7449                           
  7450                           ; BSR set to: 0
  7451                           
  7452                           ; BSR set to: 0
  7453  000FBE  0E00               	movlw	0
  7454  000FC0  0100               	movlb	0	; () banked
  7455  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7456  000FC4                     l7696:
  7457                           
  7458                           ; BSR set to: 0
  7459  000FC4  0E63               	movlw	99
  7460  000FC6  0100               	movlb	0	; () banked
  7461  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7462  000FCA  D001               	goto	l7700
  7463  000FCC  D00C               	goto	l7704
  7464  000FCE                     l7700:
  7465                           
  7466                           ; BSR set to: 0
  7467  000FCE  0E68               	movlw	104
  7468  000FD0  0100               	movlb	0	; () banked
  7469  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7470  000FD4  0EE4               	movlw	228
  7471  000FD6                     u7487:
  7472  000FD6  2EE8               	decfsz	wreg,f,c
  7473  000FD8  D7FE               	bra	u7487
  7474  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7475  000FDC  D7FC               	bra	u7487
  7476  000FDE  F000               	nop	
  7477  000FE0  0100               	movlb	0	; () banked
  7478  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7479  000FE4  D7EF               	goto	l7696
  7480  000FE6                     l7704:
  7481                           
  7482                           ; BSR set to: 0
  7483  000FE6  0100               	movlb	0	; () banked
  7484  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7485  000FEA  0100               	movlb	0	; () banked
  7486  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7487  000FEE  B4D8               	btfsc	status,2,c
  7488  000FF0  0012               	return	
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7492                           
  7493                           ; BSR set to: 0
  7494                           
  7495                           ; BSR set to: 0
  7496  000FF2  0E01               	movlw	1
  7497  000FF4  EC51  F024         	call	_lcdInst
  7498  000FF8  0E68               	movlw	104
  7499  000FFA  0100               	movlb	0	; () banked
  7500  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7501  000FFE  0EE4               	movlw	228
  7502  001000                     u7497:
  7503  001000  2EE8               	decfsz	wreg,f,c
  7504  001002  D7FE               	bra	u7497
  7505  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7506  001006  D7FC               	bra	u7497
  7507  001008  F000               	nop	
  7508                           
  7509                           ;UI.c: 191: lcdInst(0b10000000);;
  7510  00100A  0E80               	movlw	128
  7511  00100C  EC51  F024         	call	_lcdInst
  7512                           
  7513                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7514  001010  0E63               	movlw	low STR_26
  7515  001012  0100               	movlb	0	; () banked
  7516  001014  6F8E               	movwf	printf@f& (0+255),b
  7517  001016  0EFD               	movlw	high STR_26
  7518  001018  0100               	movlb	0	; () banked
  7519  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7520  00101C  ECB8  F008         	call	_printf	;wreg free
  7521                           
  7522                           ;UI.c: 193: lcdInst(0b11000000);;
  7523  001020  0EC0               	movlw	192
  7524  001022  EC51  F024         	call	_lcdInst
  7525                           
  7526                           ;UI.c: 194: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7527  001026  0E5D               	movlw	low STR_27
  7528  001028  0100               	movlb	0	; () banked
  7529  00102A  6F8E               	movwf	printf@f& (0+255),b
  7530  00102C  0EFB               	movlw	high STR_27
  7531  00102E  0100               	movlb	0	; () banked
  7532  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7533  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7534  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7535  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7536  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7537  001042  ECB8  F008         	call	_printf	;wreg free
  7538                           
  7539                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7540  001046  0E00               	movlw	0
  7541  001048  0100               	movlb	0	; () banked
  7542  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7543  00104C                     l7722:
  7544                           
  7545                           ; BSR set to: 0
  7546  00104C  0E63               	movlw	99
  7547  00104E  0100               	movlb	0	; () banked
  7548  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7549  001052  D001               	goto	l7726
  7550  001054  D00C               	goto	l7730
  7551  001056                     l7726:
  7552                           
  7553                           ; BSR set to: 0
  7554  001056  0E68               	movlw	104
  7555  001058  0100               	movlb	0	; () banked
  7556  00105A  6FC4               	movwf	??_UI& (0+255),b
  7557  00105C  0EE4               	movlw	228
  7558  00105E                     u7507:
  7559  00105E  2EE8               	decfsz	wreg,f,c
  7560  001060  D7FE               	bra	u7507
  7561  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7562  001064  D7FC               	bra	u7507
  7563  001066  F000               	nop	
  7564  001068  0100               	movlb	0	; () banked
  7565  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7566  00106C  D7EF               	goto	l7722
  7567  00106E                     l7730:
  7568                           
  7569                           ; BSR set to: 0
  7570  00106E  0100               	movlb	0	; () banked
  7571  001070  51F6               	movf	_logstate& (0+255),w,b
  7572  001072  0100               	movlb	0	; () banked
  7573  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7574  001076  B4D8               	btfsc	status,2,c
  7575  001078  0012               	return	
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7579                           
  7580                           ; BSR set to: 0
  7581                           
  7582                           ; BSR set to: 0
  7583  00107A  0E00               	movlw	0
  7584  00107C  0100               	movlb	0	; () banked
  7585  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7586  001080                     l7736:
  7587                           
  7588                           ; BSR set to: 0
  7589  001080  0E63               	movlw	99
  7590  001082  0100               	movlb	0	; () banked
  7591  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7592  001086  D001               	goto	l7740
  7593  001088  D00C               	goto	l7744
  7594  00108A                     l7740:
  7595                           
  7596                           ; BSR set to: 0
  7597  00108A  0E68               	movlw	104
  7598  00108C  0100               	movlb	0	; () banked
  7599  00108E  6FC4               	movwf	??_UI& (0+255),b
  7600  001090  0EE4               	movlw	228
  7601  001092                     u7517:
  7602  001092  2EE8               	decfsz	wreg,f,c
  7603  001094  D7FE               	bra	u7517
  7604  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7605  001098  D7FC               	bra	u7517
  7606  00109A  F000               	nop	
  7607  00109C  0100               	movlb	0	; () banked
  7608  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7609  0010A0  D7EF               	goto	l7736
  7610  0010A2                     l7744:
  7611                           
  7612                           ; BSR set to: 0
  7613  0010A2  0100               	movlb	0	; () banked
  7614  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7615  0010A6  0100               	movlb	0	; () banked
  7616  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7617  0010AA  B4D8               	btfsc	status,2,c
  7618  0010AC  0012               	return	
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7622                           
  7623                           ; BSR set to: 0
  7624                           
  7625                           ; BSR set to: 0
  7626  0010AE  0E01               	movlw	1
  7627  0010B0  EC51  F024         	call	_lcdInst
  7628  0010B4  0E68               	movlw	104
  7629  0010B6  0100               	movlb	0	; () banked
  7630  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7631  0010BA  0EE4               	movlw	228
  7632  0010BC                     u7527:
  7633  0010BC  2EE8               	decfsz	wreg,f,c
  7634  0010BE  D7FE               	bra	u7527
  7635  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7636  0010C2  D7FC               	bra	u7527
  7637  0010C4  F000               	nop	
  7638                           
  7639                           ;UI.c: 200: lcdInst(0b10000000);;
  7640  0010C6  0E80               	movlw	128
  7641  0010C8  EC51  F024         	call	_lcdInst
  7642                           
  7643                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7644  0010CC  0E74               	movlw	low STR_28
  7645  0010CE  0100               	movlb	0	; () banked
  7646  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7647  0010D2  0EFD               	movlw	high STR_28
  7648  0010D4  0100               	movlb	0	; () banked
  7649  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7650  0010D8  ECB8  F008         	call	_printf	;wreg free
  7651                           
  7652                           ;UI.c: 202: lcdInst(0b11000000);;
  7653  0010DC  0EC0               	movlw	192
  7654  0010DE  EC51  F024         	call	_lcdInst
  7655                           
  7656                           ;UI.c: 203: printf("%d", log_count_total);
  7657  0010E2  0E6D               	movlw	low (STR_27+16)
  7658  0010E4  0100               	movlb	0	; () banked
  7659  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7660  0010E8  0EFB               	movlw	high (STR_27+16)
  7661  0010EA  0100               	movlb	0	; () banked
  7662  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7663  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7664  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7665  0010F6  ECB8  F008         	call	_printf	;wreg free
  7666                           
  7667                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7668  0010FA  0E00               	movlw	0
  7669  0010FC  0100               	movlb	0	; () banked
  7670  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7671  001100                     l7762:
  7672                           
  7673                           ; BSR set to: 0
  7674  001100  0E63               	movlw	99
  7675  001102  0100               	movlb	0	; () banked
  7676  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7677  001106  D001               	goto	l7766
  7678  001108  D00C               	goto	l7770
  7679  00110A                     l7766:
  7680                           
  7681                           ; BSR set to: 0
  7682  00110A  0E68               	movlw	104
  7683  00110C  0100               	movlb	0	; () banked
  7684  00110E  6FC4               	movwf	??_UI& (0+255),b
  7685  001110  0EE4               	movlw	228
  7686  001112                     u7537:
  7687  001112  2EE8               	decfsz	wreg,f,c
  7688  001114  D7FE               	bra	u7537
  7689  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7690  001118  D7FC               	bra	u7537
  7691  00111A  F000               	nop	
  7692  00111C  0100               	movlb	0	; () banked
  7693  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7694  001120  D7EF               	goto	l7762
  7695  001122                     l7770:
  7696                           
  7697                           ; BSR set to: 0
  7698  001122  0100               	movlb	0	; () banked
  7699  001124  51F6               	movf	_logstate& (0+255),w,b
  7700  001126  0100               	movlb	0	; () banked
  7701  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7702  00112A  B4D8               	btfsc	status,2,c
  7703  00112C  0012               	return	
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7707                           
  7708                           ; BSR set to: 0
  7709                           
  7710                           ; BSR set to: 0
  7711  00112E  0E00               	movlw	0
  7712  001130  0100               	movlb	0	; () banked
  7713  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7714  001134                     l7776:
  7715                           
  7716                           ; BSR set to: 0
  7717  001134  0E63               	movlw	99
  7718  001136  0100               	movlb	0	; () banked
  7719  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7720  00113A  D001               	goto	l7780
  7721  00113C  D00C               	goto	l7784
  7722  00113E                     l7780:
  7723                           
  7724                           ; BSR set to: 0
  7725  00113E  0E68               	movlw	104
  7726  001140  0100               	movlb	0	; () banked
  7727  001142  6FC4               	movwf	??_UI& (0+255),b
  7728  001144  0EE4               	movlw	228
  7729  001146                     u7547:
  7730  001146  2EE8               	decfsz	wreg,f,c
  7731  001148  D7FE               	bra	u7547
  7732  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7733  00114C  D7FC               	bra	u7547
  7734  00114E  F000               	nop	
  7735  001150  0100               	movlb	0	; () banked
  7736  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7737  001154  D7EF               	goto	l7776
  7738  001156                     l7784:
  7739                           
  7740                           ; BSR set to: 0
  7741  001156  0100               	movlb	0	; () banked
  7742  001158  51F6               	movf	_logstate& (0+255),w,b
  7743  00115A  0100               	movlb	0	; () banked
  7744  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7745  00115E  B4D8               	btfsc	status,2,c
  7746  001160  0012               	return	
  7747  001162                     l7788:
  7748  001162  0100               	movlb	0	; () banked
  7749  001164  51F6               	movf	_logstate& (0+255),w,b
  7750  001166  0100               	movlb	0	; () banked
  7751  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7752  00116A  B4D8               	btfsc	status,2,c
  7753  00116C  0012               	return	
  7754  00116E  D44A               	goto	l7484
  7755  001170                     __end_of_UI:
  7756                           	opt stack 0
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           intcon2	equ	0xFF1
  7765                           intcon3	equ	0xFF0
  7766                           postinc0	equ	0xFEE
  7767                           wreg	equ	0xFE8
  7768                           postdec1	equ	0xFE5
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function _printRTC *****************
  7778 ;; Defined at:
  7779 ;;		line 63 in file "RTC.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  i               2   66[BANK0 ] int 
  7784 ;;  INT_time       14   46[BANK0 ] int [7]
  7785 ;;  month           4   62[BANK0 ] unsigned char [4]
  7786 ;;  RTC_month       2   60[BANK0 ] int 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  1    wreg      void 
  7789 ;; Registers used:
  7790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;Total ram usage:       25 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:   10
  7803 ;; This function calls:
  7804 ;;		_getRTC
  7805 ;;		_lcdInst
  7806 ;;		_printf
  7807 ;;		_strcpy
  7808 ;; This function is called by:
  7809 ;;		_UI
  7810 ;;		_change_state_to_menu_start
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text24
  7815  001F5C                     __ptext24:
  7816                           	opt stack 0
  7817  001F5C                     _printRTC:
  7818                           	opt stack 18
  7819                           
  7820                           ;RTC.c: 64: getRTC();
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;incstack = 0
  7824  001F5C  ECF7  F01D         	call	_getRTC	;wreg free
  7825                           
  7826                           ;RTC.c: 65: char month[] = "MMM";
  7827  001F60  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7828  001F64  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7829  001F68  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7830  001F6C  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7831                           
  7832                           ;RTC.c: 66: int INT_time[7];
  7833                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7834  001F70  0E00               	movlw	0
  7835  001F72  0100               	movlb	0	; () banked
  7836  001F74  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7837  001F76  0E00               	movlw	0
  7838  001F78  6FC2               	movwf	printRTC@i& (0+255),b
  7839                           
  7840                           ; BSR set to: 0
  7841  001F7A  0100               	movlb	0	; () banked
  7842  001F7C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7843  001F7E  D008               	goto	l5862
  7844  001F80  0100               	movlb	0	; () banked
  7845  001F82  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7846  001F84  E146               	bnz	l602
  7847  001F86  0E07               	movlw	7
  7848  001F88  0100               	movlb	0	; () banked
  7849  001F8A  5DC2               	subwf	printRTC@i& (0+255),w,b
  7850  001F8C  B0D8               	btfsc	status,0,c
  7851  001F8E  D041               	goto	l602
  7852  001F90                     l5862:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7856  001F90  0E24               	movlw	low _time
  7857  001F92  0100               	movlb	0	; () banked
  7858  001F94  25C2               	addwf	printRTC@i& (0+255),w,b
  7859  001F96  6ED9               	movwf	fsr2l,c
  7860  001F98  0E01               	movlw	high _time
  7861  001F9A  0100               	movlb	0	; () banked
  7862  001F9C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7863  001F9E  6EDA               	movwf	fsr2h,c
  7864  001FA0  50DF               	movf	indf2,w,c
  7865  001FA2  0100               	movlb	0	; () banked
  7866  001FA4  6FAB               	movwf	??_printRTC& (0+255),b
  7867  001FA6  0100               	movlb	0	; () banked
  7868  001FA8  3BAB               	swapf	??_printRTC& (0+255),f,b
  7869  001FAA  0E0F               	movlw	15
  7870  001FAC  17AB               	andwf	??_printRTC& (0+255),f,b
  7871  001FAE  0E0F               	movlw	15
  7872  001FB0  0100               	movlb	0	; () banked
  7873  001FB2  17AB               	andwf	??_printRTC& (0+255),f,b
  7874  001FB4  0100               	movlb	0	; () banked
  7875  001FB6  51AB               	movf	??_printRTC& (0+255),w,b
  7876  001FB8  0D0A               	mullw	10
  7877  001FBA  0E24               	movlw	low _time
  7878  001FBC  0100               	movlb	0	; () banked
  7879  001FBE  25C2               	addwf	printRTC@i& (0+255),w,b
  7880  001FC0  6ED9               	movwf	fsr2l,c
  7881  001FC2  0E01               	movlw	high _time
  7882  001FC4  0100               	movlb	0	; () banked
  7883  001FC6  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7884  001FC8  6EDA               	movwf	fsr2h,c
  7885  001FCA  50DF               	movf	indf2,w,c
  7886  001FCC  0B0F               	andlw	15
  7887  001FCE  0100               	movlb	0	; () banked
  7888  001FD0  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7889  001FD2  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7890  001FD4  50F3               	movf	prodl,w,c
  7891  001FD6  0100               	movlb	0	; () banked
  7892  001FD8  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7893  001FDA  50F4               	movf	prodh,w,c
  7894  001FDC  0100               	movlb	0	; () banked
  7895  001FDE  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7896  001FE0  90D8               	bcf	status,0,c
  7897  001FE2  0100               	movlb	0	; () banked
  7898  001FE4  35C2               	rlcf	printRTC@i& (0+255),w,b
  7899  001FE6  6ED9               	movwf	fsr2l,c
  7900  001FE8  0100               	movlb	0	; () banked
  7901  001FEA  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7902  001FEC  6EDA               	movwf	fsr2h,c
  7903  001FEE  0EAE               	movlw	low printRTC@INT_time
  7904  001FF0  26D9               	addwf	fsr2l,f,c
  7905  001FF2  0E00               	movlw	high printRTC@INT_time
  7906  001FF4  22DA               	addwfc	fsr2h,f,c
  7907  001FF6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7908  001FFA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7909                           
  7910                           ; BSR set to: 0
  7911  001FFE  0100               	movlb	0	; () banked
  7912  002000  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7913  002002  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7914                           
  7915                           ; BSR set to: 0
  7916  002004  0100               	movlb	0	; () banked
  7917  002006  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7918  002008  D7C3               	goto	l5862
  7919  00200A  0100               	movlb	0	; () banked
  7920  00200C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7921  00200E  E101               	bnz	u4530
  7922  002010  D7BA               	goto	L6
  7923  002012                     u4530:
  7924  002012                     l602:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;RTC.c: 69: }
  7928                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7929  002012  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7930  002016  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7931                           
  7932                           ;RTC.c: 71: switch(RTC_month){
  7933  00201A  D0B4               	goto	l5894
  7934  00201C                     l5868:
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;RTC.c: 73: strcpy(month, "JAN");
  7938  00201C  0EBE               	movlw	low printRTC@month
  7939  00201E  0100               	movlb	0	; () banked
  7940  002020  6F80               	movwf	strcpy@to& (0+255),b
  7941  002022  0E00               	movlw	high printRTC@month
  7942  002024  0100               	movlb	0	; () banked
  7943  002026  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7944  002028  0EDB               	movlw	low STR_8
  7945  00202A  0100               	movlb	0	; () banked
  7946  00202C  6F82               	movwf	strcpy@from& (0+255),b
  7947  00202E  0EFF               	movlw	high STR_8
  7948  002030  0100               	movlb	0	; () banked
  7949  002032  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7950  002034  ECBD  F021         	call	_strcpy	;wreg free
  7951                           
  7952                           ;RTC.c: 74: break;
  7953  002038  D0D4               	goto	l5896
  7954  00203A                     l5870:
  7955                           
  7956                           ;RTC.c: 76: strcpy(month, "FEB");
  7957  00203A  0EBE               	movlw	low printRTC@month
  7958  00203C  0100               	movlb	0	; () banked
  7959  00203E  6F80               	movwf	strcpy@to& (0+255),b
  7960  002040  0E00               	movlw	high printRTC@month
  7961  002042  0100               	movlb	0	; () banked
  7962  002044  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7963  002046  0ECB               	movlw	low STR_9
  7964  002048  0100               	movlb	0	; () banked
  7965  00204A  6F82               	movwf	strcpy@from& (0+255),b
  7966  00204C  0EFF               	movlw	high STR_9
  7967  00204E  0100               	movlb	0	; () banked
  7968  002050  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7969  002052  ECBD  F021         	call	_strcpy	;wreg free
  7970                           
  7971                           ;RTC.c: 77: break;
  7972  002056  D0C5               	goto	l5896
  7973  002058                     l5872:
  7974                           
  7975                           ;RTC.c: 79: strcpy(month, "MAR");
  7976  002058  0EBE               	movlw	low printRTC@month
  7977  00205A  0100               	movlb	0	; () banked
  7978  00205C  6F80               	movwf	strcpy@to& (0+255),b
  7979  00205E  0E00               	movlw	high printRTC@month
  7980  002060  0100               	movlb	0	; () banked
  7981  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7982  002064  0EE7               	movlw	low STR_10
  7983  002066  0100               	movlb	0	; () banked
  7984  002068  6F82               	movwf	strcpy@from& (0+255),b
  7985  00206A  0EFF               	movlw	high STR_10
  7986  00206C  0100               	movlb	0	; () banked
  7987  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7988  002070  ECBD  F021         	call	_strcpy	;wreg free
  7989                           
  7990                           ;RTC.c: 80: break;
  7991  002074  D0B6               	goto	l5896
  7992  002076                     l5874:
  7993                           
  7994                           ;RTC.c: 82: strcpy(month, "APR");
  7995  002076  0EBE               	movlw	low printRTC@month
  7996  002078  0100               	movlb	0	; () banked
  7997  00207A  6F80               	movwf	strcpy@to& (0+255),b
  7998  00207C  0E00               	movlw	high printRTC@month
  7999  00207E  0100               	movlb	0	; () banked
  8000  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8001  002082  0EEB               	movlw	low STR_11
  8002  002084  0100               	movlb	0	; () banked
  8003  002086  6F82               	movwf	strcpy@from& (0+255),b
  8004  002088  0EFF               	movlw	high STR_11
  8005  00208A  0100               	movlb	0	; () banked
  8006  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8007  00208E  ECBD  F021         	call	_strcpy	;wreg free
  8008                           
  8009                           ;RTC.c: 83: break;
  8010  002092  D0A7               	goto	l5896
  8011  002094                     l5876:
  8012                           
  8013                           ;RTC.c: 85: strcpy(month, "MAY");
  8014  002094  0EBE               	movlw	low printRTC@month
  8015  002096  0100               	movlb	0	; () banked
  8016  002098  6F80               	movwf	strcpy@to& (0+255),b
  8017  00209A  0E00               	movlw	high printRTC@month
  8018  00209C  0100               	movlb	0	; () banked
  8019  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8020  0020A0  0EFB               	movlw	low STR_12
  8021  0020A2  0100               	movlb	0	; () banked
  8022  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8023  0020A6  0EFF               	movlw	high STR_12
  8024  0020A8  0100               	movlb	0	; () banked
  8025  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8026  0020AC  ECBD  F021         	call	_strcpy	;wreg free
  8027                           
  8028                           ;RTC.c: 86: break;
  8029  0020B0  D098               	goto	l5896
  8030  0020B2                     l5878:
  8031                           
  8032                           ;RTC.c: 88: strcpy(month, "JUN");
  8033  0020B2  0EBE               	movlw	low printRTC@month
  8034  0020B4  0100               	movlb	0	; () banked
  8035  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8036  0020B8  0E00               	movlw	high printRTC@month
  8037  0020BA  0100               	movlb	0	; () banked
  8038  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8039  0020BE  0EDF               	movlw	low STR_13
  8040  0020C0  0100               	movlb	0	; () banked
  8041  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8042  0020C4  0EFF               	movlw	high STR_13
  8043  0020C6  0100               	movlb	0	; () banked
  8044  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8045  0020CA  ECBD  F021         	call	_strcpy	;wreg free
  8046                           
  8047                           ;RTC.c: 89: break;
  8048  0020CE  D089               	goto	l5896
  8049  0020D0                     l5880:
  8050                           
  8051                           ;RTC.c: 91: strcpy(month, "JUL");
  8052  0020D0  0EBE               	movlw	low printRTC@month
  8053  0020D2  0100               	movlb	0	; () banked
  8054  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8055  0020D6  0E00               	movlw	high printRTC@month
  8056  0020D8  0100               	movlb	0	; () banked
  8057  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8058  0020DC  0ED7               	movlw	low STR_14
  8059  0020DE  0100               	movlb	0	; () banked
  8060  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8061  0020E2  0EFF               	movlw	high STR_14
  8062  0020E4  0100               	movlb	0	; () banked
  8063  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8064  0020E8  ECBD  F021         	call	_strcpy	;wreg free
  8065                           
  8066                           ;RTC.c: 92: break;
  8067  0020EC  D07A               	goto	l5896
  8068  0020EE                     l5882:
  8069                           
  8070                           ;RTC.c: 94: strcpy(month, "AUG");
  8071  0020EE  0EBE               	movlw	low printRTC@month
  8072  0020F0  0100               	movlb	0	; () banked
  8073  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8074  0020F4  0E00               	movlw	high printRTC@month
  8075  0020F6  0100               	movlb	0	; () banked
  8076  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8077  0020FA  0ED3               	movlw	low STR_15
  8078  0020FC  0100               	movlb	0	; () banked
  8079  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8080  002100  0EFF               	movlw	high STR_15
  8081  002102  0100               	movlb	0	; () banked
  8082  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8083  002106  ECBD  F021         	call	_strcpy	;wreg free
  8084                           
  8085                           ;RTC.c: 95: break;
  8086  00210A  D06B               	goto	l5896
  8087  00210C                     l5884:
  8088                           
  8089                           ;RTC.c: 97: strcpy(month, "SEP");
  8090  00210C  0EBE               	movlw	low printRTC@month
  8091  00210E  0100               	movlb	0	; () banked
  8092  002110  6F80               	movwf	strcpy@to& (0+255),b
  8093  002112  0E00               	movlw	high printRTC@month
  8094  002114  0100               	movlb	0	; () banked
  8095  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8096  002118  0EE3               	movlw	low STR_16
  8097  00211A  0100               	movlb	0	; () banked
  8098  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8099  00211E  0EFF               	movlw	high STR_16
  8100  002120  0100               	movlb	0	; () banked
  8101  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8102  002124  ECBD  F021         	call	_strcpy	;wreg free
  8103                           
  8104                           ;RTC.c: 98: break;
  8105  002128  D05C               	goto	l5896
  8106  00212A                     l5886:
  8107                           
  8108                           ;RTC.c: 100: strcpy(month, "OCT");
  8109  00212A  0EBE               	movlw	low printRTC@month
  8110  00212C  0100               	movlb	0	; () banked
  8111  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8112  002130  0E00               	movlw	high printRTC@month
  8113  002132  0100               	movlb	0	; () banked
  8114  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8115  002136  0EF3               	movlw	low STR_17
  8116  002138  0100               	movlb	0	; () banked
  8117  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8118  00213C  0EFF               	movlw	high STR_17
  8119  00213E  0100               	movlb	0	; () banked
  8120  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8121  002142  ECBD  F021         	call	_strcpy	;wreg free
  8122                           
  8123                           ;RTC.c: 101: break;
  8124  002146  D04D               	goto	l5896
  8125  002148                     l5888:
  8126                           
  8127                           ;RTC.c: 103: strcpy(month, "NOV");
  8128  002148  0EBE               	movlw	low printRTC@month
  8129  00214A  0100               	movlb	0	; () banked
  8130  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8131  00214E  0E00               	movlw	high printRTC@month
  8132  002150  0100               	movlb	0	; () banked
  8133  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8134  002154  0EF7               	movlw	low STR_18
  8135  002156  0100               	movlb	0	; () banked
  8136  002158  6F82               	movwf	strcpy@from& (0+255),b
  8137  00215A  0EFF               	movlw	high STR_18
  8138  00215C  0100               	movlb	0	; () banked
  8139  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8140  002160  ECBD  F021         	call	_strcpy	;wreg free
  8141                           
  8142                           ;RTC.c: 104: break;
  8143  002164  D03E               	goto	l5896
  8144  002166                     l5890:
  8145                           
  8146                           ;RTC.c: 106: strcpy(month, "DEC");
  8147  002166  0EBE               	movlw	low printRTC@month
  8148  002168  0100               	movlb	0	; () banked
  8149  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8150  00216C  0E00               	movlw	high printRTC@month
  8151  00216E  0100               	movlb	0	; () banked
  8152  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8153  002172  0ECF               	movlw	low STR_19
  8154  002174  0100               	movlb	0	; () banked
  8155  002176  6F82               	movwf	strcpy@from& (0+255),b
  8156  002178  0EFF               	movlw	high STR_19
  8157  00217A  0100               	movlb	0	; () banked
  8158  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8159  00217E  ECBD  F021         	call	_strcpy	;wreg free
  8160                           
  8161                           ;RTC.c: 108: }
  8162                           
  8163                           ;RTC.c: 107: break;
  8164  002182  D02F               	goto	l5896
  8165  002184                     l5894:
  8166  002184  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8167  002188  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8168                           
  8169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8170                           ; Switch size 1, requested type "space"
  8171                           ; Number of cases is 1, Range of values is 0 to 0
  8172                           ; switch strategies available:
  8173                           ; Name         Instructions Cycles
  8174                           ; simple_byte            4     3 (average)
  8175                           ;	Chosen strategy is simple_byte
  8176  00218C  0100               	movlb	0	; () banked
  8177  00218E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8178  002190  0A00               	xorlw	0	; case 0
  8179  002192  A4D8               	btfss	status,2,c
  8180  002194  D026               	goto	l5896
  8181                           
  8182                           ; BSR set to: 0
  8183                           ; Switch size 1, requested type "space"
  8184                           ; Number of cases is 12, Range of values is 1 to 12
  8185                           ; switch strategies available:
  8186                           ; Name         Instructions Cycles
  8187                           ; simple_byte           37    19 (average)
  8188                           ;	Chosen strategy is simple_byte
  8189  002196  0100               	movlb	0	; () banked
  8190  002198  51AB               	movf	??_printRTC& (0+255),w,b
  8191  00219A  0A01               	xorlw	1	; case 1
  8192  00219C  B4D8               	btfsc	status,2,c
  8193  00219E  D73E               	goto	l5868
  8194  0021A0  0A03               	xorlw	3	; case 2
  8195  0021A2  B4D8               	btfsc	status,2,c
  8196  0021A4  D74A               	goto	l5870
  8197  0021A6  0A01               	xorlw	1	; case 3
  8198  0021A8  B4D8               	btfsc	status,2,c
  8199  0021AA  D756               	goto	l5872
  8200  0021AC  0A07               	xorlw	7	; case 4
  8201  0021AE  B4D8               	btfsc	status,2,c
  8202  0021B0  D762               	goto	l5874
  8203  0021B2  0A01               	xorlw	1	; case 5
  8204  0021B4  B4D8               	btfsc	status,2,c
  8205  0021B6  D76E               	goto	l5876
  8206  0021B8  0A03               	xorlw	3	; case 6
  8207  0021BA  B4D8               	btfsc	status,2,c
  8208  0021BC  D77A               	goto	l5878
  8209  0021BE  0A01               	xorlw	1	; case 7
  8210  0021C0  B4D8               	btfsc	status,2,c
  8211  0021C2  D786               	goto	l5880
  8212  0021C4  0A0F               	xorlw	15	; case 8
  8213  0021C6  B4D8               	btfsc	status,2,c
  8214  0021C8  D792               	goto	l5882
  8215  0021CA  0A01               	xorlw	1	; case 9
  8216  0021CC  B4D8               	btfsc	status,2,c
  8217  0021CE  D79E               	goto	l5884
  8218  0021D0  0A03               	xorlw	3	; case 10
  8219  0021D2  B4D8               	btfsc	status,2,c
  8220  0021D4  D7AA               	goto	l5886
  8221  0021D6  0A01               	xorlw	1	; case 11
  8222  0021D8  B4D8               	btfsc	status,2,c
  8223  0021DA  D7B6               	goto	l5888
  8224  0021DC  0A07               	xorlw	7	; case 12
  8225  0021DE  B4D8               	btfsc	status,2,c
  8226  0021E0  D7C2               	goto	l5890
  8227  0021E2                     l5896:
  8228                           
  8229                           ;RTC.c: 109: lcdInst(0b10000000);;
  8230  0021E2  0E80               	movlw	128
  8231  0021E4  EC51  F024         	call	_lcdInst
  8232                           
  8233                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8234  0021E8  0E30               	movlw	low STR_21
  8235  0021EA  0100               	movlb	0	; () banked
  8236  0021EC  6F8E               	movwf	printf@f& (0+255),b
  8237  0021EE  0EFB               	movlw	high STR_21
  8238  0021F0  0100               	movlb	0	; () banked
  8239  0021F2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8240  0021F4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8241  0021F8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8242  0021FC  0EBE               	movlw	low printRTC@month
  8243  0021FE  0100               	movlb	0	; () banked
  8244  002200  6F92               	movwf	(?_printf+4)& (0+255),b
  8245  002202  0E00               	movlw	high printRTC@month
  8246  002204  0100               	movlb	0	; () banked
  8247  002206  6F93               	movwf	(?_printf+5)& (0+255),b
  8248  002208  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8249  00220C  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8250  002210  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8251  002214  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8252  002218  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8253  00221C  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8254  002220  ECB8  F008         	call	_printf	;wreg free
  8255  002224  0012               	return		;funcret
  8256  002226                     __end_of_printRTC:
  8257                           	opt stack 0
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           prodh	equ	0xFF4
  8263                           prodl	equ	0xFF3
  8264                           intcon	equ	0xFF2
  8265                           intcon2	equ	0xFF1
  8266                           intcon3	equ	0xFF0
  8267                           postinc0	equ	0xFEE
  8268                           wreg	equ	0xFE8
  8269                           postdec1	equ	0xFE5
  8270                           fsr1l	equ	0xFE1
  8271                           indf2	equ	0xFDF
  8272                           postinc2	equ	0xFDE
  8273                           postdec2	equ	0xFDD
  8274                           fsr2h	equ	0xFDA
  8275                           fsr2l	equ	0xFD9
  8276                           status	equ	0xFD8
  8277                           
  8278 ;; *************** function _strcpy *****************
  8279 ;; Defined at:
  8280 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8283 ;;		 -> printRTC@month(4), UI@month(4), 
  8284 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8285 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8286 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8287 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8288 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8289 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8290 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8291 ;;		 -> STR_8(4), 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8294 ;;		 -> printRTC@month(4), UI@month(4), 
  8295 ;; Return value:  Size  Location     Type
  8296 ;;                  2    0[BANK0 ] PTR unsigned char 
  8297 ;; Registers used:
  8298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8299 ;; Tracked objects:
  8300 ;;		On entry : 0/0
  8301 ;;		On exit  : 0/0
  8302 ;;		Unchanged: 0/0
  8303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;Total ram usage:        6 bytes
  8309 ;; Hardware stack levels used:    1
  8310 ;; Hardware stack levels required when called:    7
  8311 ;; This function calls:
  8312 ;;		Nothing
  8313 ;; This function is called by:
  8314 ;;		_UI
  8315 ;;		_printRTC
  8316 ;; This function uses a non-reentrant model
  8317 ;;
  8318                           
  8319                           	psect	text25
  8320  00437A                     __ptext25:
  8321                           	opt stack 0
  8322  00437A                     _strcpy:
  8323                           	opt stack 20
  8324                           
  8325                           ;incstack = 0
  8326  00437A  C080  F084         	movff	strcpy@to,strcpy@cp
  8327  00437E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8328  004382  D006               	goto	l5606
  8329  004384                     l5604:
  8330  004384  0100               	movlb	0	; () banked
  8331  004386  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8332  004388  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8333  00438A  0100               	movlb	0	; () banked
  8334  00438C  4B82               	infsnz	strcpy@from& (0+255),f,b
  8335  00438E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8336  004390                     l5606:
  8337  004390  C082  FFF6         	movff	strcpy@from,tblptrl
  8338  004394  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8339  004398                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8340  004398  6AF8               	clrf	tblptru,c
  8341  00439A                     	endif
  8342  00439A                     	if	0	;tblptru may be non-zero
  8343  00439A                     	endif
  8344  00439A  C084  FFD9         	movff	strcpy@cp,fsr2l
  8345  00439E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8346  0043A2  0008               	tblrd		*
  8347  0043A4  CFF5 FFDF          	movff	tablat,indf2
  8348  0043A8  50DF               	movf	indf2,w,c
  8349  0043AA  B4D8               	btfsc	status,2,c
  8350  0043AC  0012               	return	
  8351  0043AE  D7EA               	goto	l5604
  8352  0043B0                     __end_of_strcpy:
  8353                           	opt stack 0
  8354                           tblptru	equ	0xFF8
  8355                           tblptrh	equ	0xFF7
  8356                           tblptrl	equ	0xFF6
  8357                           tablat	equ	0xFF5
  8358                           prodh	equ	0xFF4
  8359                           prodl	equ	0xFF3
  8360                           intcon	equ	0xFF2
  8361                           intcon2	equ	0xFF1
  8362                           intcon3	equ	0xFF0
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _getRTC *****************
  8375 ;; Defined at:
  8376 ;;		line 44 in file "RTC.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  i               2    3[BANK0 ] int 
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      void 
  8383 ;; Registers used:
  8384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;Total ram usage:        2 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    9
  8397 ;; This function calls:
  8398 ;;		_I2C_Master_Read
  8399 ;;		_I2C_Master_Start
  8400 ;;		_I2C_Master_Stop
  8401 ;;		_I2C_Master_Write
  8402 ;; This function is called by:
  8403 ;;		_printRTC
  8404 ;;		_initSortTimer
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           	psect	text26
  8409  003BEE                     __ptext26:
  8410                           	opt stack 0
  8411  003BEE                     _getRTC:
  8412                           	opt stack 18
  8413                           
  8414                           ;RTC.c: 48: I2C_Master_Start();
  8415                           
  8416                           ;incstack = 0
  8417  003BEE  EC77  F024         	call	_I2C_Master_Start	;wreg free
  8418                           
  8419                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8420  003BF2  0E00               	movlw	0
  8421  003BF4  0100               	movlb	0	; () banked
  8422  003BF6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8423  003BF8  0ED0               	movlw	208
  8424  003BFA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8425  003BFC  EC65  F024         	call	_I2C_Master_Write	;wreg free
  8426                           
  8427                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8428  003C00  0E00               	movlw	0
  8429  003C02  0100               	movlb	0	; () banked
  8430  003C04  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8431  003C06  0E00               	movlw	0
  8432  003C08  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8433  003C0A  EC65  F024         	call	_I2C_Master_Write	;wreg free
  8434                           
  8435                           ;RTC.c: 51: I2C_Master_Stop();
  8436  003C0E  EC73  F024         	call	_I2C_Master_Stop	;wreg free
  8437                           
  8438                           ;RTC.c: 54: I2C_Master_Start();
  8439  003C12  EC77  F024         	call	_I2C_Master_Start	;wreg free
  8440                           
  8441                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8442  003C16  0E00               	movlw	0
  8443  003C18  0100               	movlb	0	; () banked
  8444  003C1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8445  003C1C  0ED1               	movlw	209
  8446  003C1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8447  003C20  EC65  F024         	call	_I2C_Master_Write	;wreg free
  8448                           
  8449                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8450  003C24  0E00               	movlw	0
  8451  003C26  0100               	movlb	0	; () banked
  8452  003C28  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8453  003C2A  0E00               	movlw	0
  8454  003C2C  6F83               	movwf	getRTC@i& (0+255),b
  8455  003C2E                     l5612:
  8456                           
  8457                           ; BSR set to: 0
  8458  003C2E  0100               	movlb	0	; () banked
  8459  003C30  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8460  003C32  D008               	goto	l5616
  8461  003C34  0100               	movlb	0	; () banked
  8462  003C36  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8463  003C38  E115               	bnz	l5622
  8464  003C3A  0E06               	movlw	6
  8465  003C3C  0100               	movlb	0	; () banked
  8466  003C3E  5D83               	subwf	getRTC@i& (0+255),w,b
  8467  003C40  B0D8               	btfsc	status,0,c
  8468  003C42  D010               	goto	l5622
  8469  003C44                     l5616:
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8473  003C44  0E24               	movlw	low _time
  8474  003C46  0100               	movlb	0	; () banked
  8475  003C48  2583               	addwf	getRTC@i& (0+255),w,b
  8476  003C4A  6ED9               	movwf	fsr2l,c
  8477  003C4C  0E01               	movlw	high _time
  8478  003C4E  0100               	movlb	0	; () banked
  8479  003C50  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8480  003C52  6EDA               	movwf	fsr2h,c
  8481  003C54  0E01               	movlw	1
  8482  003C56  EC14  F023         	call	_I2C_Master_Read
  8483  003C5A  6EDF               	movwf	indf2,c
  8484  003C5C  0100               	movlb	0	; () banked
  8485  003C5E  4B83               	infsnz	getRTC@i& (0+255),f,b
  8486  003C60  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8487  003C62  D7E5               	goto	l5612
  8488  003C64                     l5622:
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;RTC.c: 58: }
  8492                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8493  003C64  0E00               	movlw	0
  8494  003C66  EC14  F023         	call	_I2C_Master_Read
  8495  003C6A  0101               	movlb	1	; () banked
  8496  003C6C  6F2A               	movwf	(_time+6)& (0+255),b
  8497                           
  8498                           ;RTC.c: 60: I2C_Master_Stop();
  8499  003C6E  EC73  F024         	call	_I2C_Master_Stop	;wreg free
  8500  003C72  0012               	return		;funcret
  8501  003C74                     __end_of_getRTC:
  8502                           	opt stack 0
  8503                           tblptru	equ	0xFF8
  8504                           tblptrh	equ	0xFF7
  8505                           tblptrl	equ	0xFF6
  8506                           tablat	equ	0xFF5
  8507                           prodh	equ	0xFF4
  8508                           prodl	equ	0xFF3
  8509                           intcon	equ	0xFF2
  8510                           intcon2	equ	0xFF1
  8511                           intcon3	equ	0xFF0
  8512                           postinc0	equ	0xFEE
  8513                           wreg	equ	0xFE8
  8514                           postdec1	equ	0xFE5
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8
  8522                           
  8523 ;; *************** function _I2C_Master_Write *****************
  8524 ;; Defined at:
  8525 ;;		line 49 in file "I2C.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  d               2    1[BANK0 ] unsigned int 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;		None
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      void 
  8532 ;; Registers used:
  8533 ;;		wreg, status,2, status,0, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;Total ram usage:        2 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    8
  8546 ;; This function calls:
  8547 ;;		_I2C_Master_Wait
  8548 ;; This function is called by:
  8549 ;;		_loadRTC
  8550 ;;		_getRTC
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           	psect	text27
  8555  0048CA                     __ptext27:
  8556                           	opt stack 0
  8557  0048CA                     _I2C_Master_Write:
  8558                           	opt stack 18
  8559                           
  8560                           ;I2C.c: 51: I2C_Master_Wait();
  8561                           
  8562                           ;incstack = 0
  8563  0048CA  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8564                           
  8565                           ;I2C.c: 52: SSPBUF = d;
  8566  0048CE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8567  0048D2  0012               	return		;funcret
  8568  0048D4                     __end_of_I2C_Master_Write:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           intcon2	equ	0xFF1
  8578                           intcon3	equ	0xFF0
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function _I2C_Master_Stop *****************
  8591 ;; Defined at:
  8592 ;;		line 43 in file "I2C.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;Total ram usage:        0 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    8
  8613 ;; This function calls:
  8614 ;;		_I2C_Master_Wait
  8615 ;; This function is called by:
  8616 ;;		_loadRTC
  8617 ;;		_getRTC
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text28
  8622  0048E6                     __ptext28:
  8623                           	opt stack 0
  8624  0048E6                     _I2C_Master_Stop:
  8625                           	opt stack 18
  8626                           
  8627                           ;I2C.c: 45: I2C_Master_Wait();
  8628                           
  8629                           ;incstack = 0
  8630  0048E6  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8631                           
  8632                           ;I2C.c: 46: PEN = 1;
  8633  0048EA  84C5               	bsf	4037,2,c	;volatile
  8634  0048EC  0012               	return		;funcret
  8635  0048EE                     __end_of_I2C_Master_Stop:
  8636                           	opt stack 0
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           prodh	equ	0xFF4
  8642                           prodl	equ	0xFF3
  8643                           intcon	equ	0xFF2
  8644                           intcon2	equ	0xFF1
  8645                           intcon3	equ	0xFF0
  8646                           postinc0	equ	0xFEE
  8647                           wreg	equ	0xFE8
  8648                           postdec1	equ	0xFE5
  8649                           fsr1l	equ	0xFE1
  8650                           indf2	equ	0xFDF
  8651                           postinc2	equ	0xFDE
  8652                           postdec2	equ	0xFDD
  8653                           fsr2h	equ	0xFDA
  8654                           fsr2l	equ	0xFD9
  8655                           status	equ	0xFD8
  8656                           
  8657 ;; *************** function _I2C_Master_Start *****************
  8658 ;; Defined at:
  8659 ;;		line 31 in file "I2C.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;		None
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, status,0, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8677 ;;Total ram usage:        0 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    8
  8680 ;; This function calls:
  8681 ;;		_I2C_Master_Wait
  8682 ;; This function is called by:
  8683 ;;		_loadRTC
  8684 ;;		_getRTC
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           	psect	text29
  8689  0048EE                     __ptext29:
  8690                           	opt stack 0
  8691  0048EE                     _I2C_Master_Start:
  8692                           	opt stack 18
  8693                           
  8694                           ;I2C.c: 33: I2C_Master_Wait();
  8695                           
  8696                           ;incstack = 0
  8697  0048EE  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8698                           
  8699                           ;I2C.c: 34: SEN = 1;
  8700  0048F2  80C5               	bsf	4037,0,c	;volatile
  8701  0048F4  0012               	return		;funcret
  8702  0048F6                     __end_of_I2C_Master_Start:
  8703                           	opt stack 0
  8704                           tblptru	equ	0xFF8
  8705                           tblptrh	equ	0xFF7
  8706                           tblptrl	equ	0xFF6
  8707                           tablat	equ	0xFF5
  8708                           prodh	equ	0xFF4
  8709                           prodl	equ	0xFF3
  8710                           intcon	equ	0xFF2
  8711                           intcon2	equ	0xFF1
  8712                           intcon3	equ	0xFF0
  8713                           postinc0	equ	0xFEE
  8714                           wreg	equ	0xFE8
  8715                           postdec1	equ	0xFE5
  8716                           fsr1l	equ	0xFE1
  8717                           indf2	equ	0xFDF
  8718                           postinc2	equ	0xFDE
  8719                           postdec2	equ	0xFDD
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           
  8724 ;; *************** function _I2C_Master_Read *****************
  8725 ;; Defined at:
  8726 ;;		line 55 in file "I2C.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;  a               1    wreg     unsigned char 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  a               1    1[BANK0 ] unsigned char 
  8731 ;;  temp            1    2[BANK0 ] unsigned char 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      unsigned char 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2, status,0, cstack
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;Total ram usage:        2 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    8
  8748 ;; This function calls:
  8749 ;;		_I2C_Master_Wait
  8750 ;; This function is called by:
  8751 ;;		_getRTC
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           	psect	text30
  8756  004628                     __ptext30:
  8757                           	opt stack 0
  8758  004628                     _I2C_Master_Read:
  8759                           	opt stack 18
  8760                           
  8761                           ;incstack = 0
  8762                           ;I2C_Master_Read@a stored from wreg
  8763  004628  0100               	movlb	0	; () banked
  8764  00462A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8765                           
  8766                           ;I2C.c: 57: unsigned char temp;
  8767                           ;I2C.c: 58: I2C_Master_Wait();
  8768  00462C  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8769                           
  8770                           ;I2C.c: 59: RCEN = 1;
  8771  004630  86C5               	bsf	4037,3,c	;volatile
  8772                           
  8773                           ;I2C.c: 60: I2C_Master_Wait();
  8774  004632  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8775                           
  8776                           ;I2C.c: 61: temp = SSPBUF;
  8777  004636  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8778                           
  8779                           ;I2C.c: 62: I2C_Master_Wait();
  8780  00463A  EC36  F024         	call	_I2C_Master_Wait	;wreg free
  8781                           
  8782                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8783  00463E  0100               	movlb	0	; () banked
  8784  004640  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8785  004642  0100               	movlb	0	; () banked
  8786  004644  A4D8               	btfss	status,2,c
  8787  004646  D002               	goto	u3620
  8788  004648  8AC5               	bsf	4037,5,c	;volatile
  8789  00464A  D001               	goto	l5300
  8790  00464C                     u3620:
  8791  00464C  9AC5               	bcf	4037,5,c	;volatile
  8792  00464E                     l5300:
  8793                           
  8794                           ;I2C.c: 64: ACKEN = 1;
  8795  00464E  88C5               	bsf	4037,4,c	;volatile
  8796                           
  8797                           ;I2C.c: 65: return temp;
  8798  004650  0100               	movlb	0	; () banked
  8799  004652  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8800  004654  0012               	return	
  8801  004656                     __end_of_I2C_Master_Read:
  8802                           	opt stack 0
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           intcon2	equ	0xFF1
  8811                           intcon3	equ	0xFF0
  8812                           postinc0	equ	0xFEE
  8813                           wreg	equ	0xFE8
  8814                           postdec1	equ	0xFE5
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function _I2C_Master_Wait *****************
  8824 ;; Defined at:
  8825 ;;		line 26 in file "I2C.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:        1 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    7
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_I2C_Master_Start
  8850 ;;		_I2C_Master_Stop
  8851 ;;		_I2C_Master_Write
  8852 ;;		_I2C_Master_Read
  8853 ;;		_I2C_Master_RepeatedStart
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text31
  8858  00486C                     __ptext31:
  8859                           	opt stack 0
  8860  00486C                     _I2C_Master_Wait:
  8861                           	opt stack 18
  8862  00486C                     l66:
  8863  00486C  B4C7               	btfsc	4039,2,c	;volatile
  8864  00486E  D7FE               	goto	l66
  8865  004870  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8866  004874  0E1F               	movlw	31
  8867  004876  0100               	movlb	0	; () banked
  8868  004878  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8869  00487A  B4D8               	btfsc	status,2,c
  8870  00487C  0012               	return	
  8871  00487E  D7F6               	goto	l66
  8872  004880                     __end_of_I2C_Master_Wait:
  8873                           	opt stack 0
  8874                           tblptru	equ	0xFF8
  8875                           tblptrh	equ	0xFF7
  8876                           tblptrl	equ	0xFF6
  8877                           tablat	equ	0xFF5
  8878                           prodh	equ	0xFF4
  8879                           prodl	equ	0xFF3
  8880                           intcon	equ	0xFF2
  8881                           intcon2	equ	0xFF1
  8882                           intcon3	equ	0xFF0
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           postdec1	equ	0xFE5
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _change_state_to_menu_22 *****************
  8895 ;; Defined at:
  8896 ;;		line 498 in file "UI.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:   10
  8917 ;; This function calls:
  8918 ;;		_lcdInst
  8919 ;;		_printf
  8920 ;; This function is called by:
  8921 ;;		_UI
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text32
  8926  00430A                     __ptext32:
  8927                           	opt stack 0
  8928  00430A                     _change_state_to_menu_22:
  8929                           	opt stack 19
  8930                           
  8931                           ;UI.c: 499: cur_state = 22;
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;incstack = 0
  8935  00430A  0E00               	movlw	0
  8936  00430C  0100               	movlb	0	; () banked
  8937  00430E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8938  004310  0E16               	movlw	22
  8939  004312  6FE0               	movwf	_cur_state& (0+255),b
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;UI.c: 501: lcdInst(0b10000000);;
  8943  004314  0E80               	movlw	128
  8944  004316  EC51  F024         	call	_lcdInst
  8945                           
  8946                           ;UI.c: 502: printf("2. SORT        <");
  8947  00431A  0EDA               	movlw	low STR_34
  8948  00431C  0100               	movlb	0	; () banked
  8949  00431E  6F8E               	movwf	printf@f& (0+255),b
  8950  004320  0EFD               	movlw	high STR_34
  8951  004322  0100               	movlb	0	; () banked
  8952  004324  6F8F               	movwf	(printf@f+1)& (0+255),b
  8953  004326  ECB8  F008         	call	_printf	;wreg free
  8954                           
  8955                           ;UI.c: 503: lcdInst(0b11000000);;
  8956  00432A  0EC0               	movlw	192
  8957  00432C  EC51  F024         	call	_lcdInst
  8958                           
  8959                           ;UI.c: 504: printf("3. LOGS         ");
  8960  004330  0E1F               	movlw	low STR_36
  8961  004332  0100               	movlb	0	; () banked
  8962  004334  6F8E               	movwf	printf@f& (0+255),b
  8963  004336  0EFD               	movlw	high STR_36
  8964  004338  0100               	movlb	0	; () banked
  8965  00433A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8966  00433C  ECB8  F008         	call	_printf	;wreg free
  8967  004340  0012               	return		;funcret
  8968  004342                     __end_of_change_state_to_menu_22:
  8969                           	opt stack 0
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           intcon2	equ	0xFF1
  8978                           intcon3	equ	0xFF0
  8979                           postinc0	equ	0xFEE
  8980                           wreg	equ	0xFE8
  8981                           postdec1	equ	0xFE5
  8982                           fsr1l	equ	0xFE1
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function _change_state_to_menu_12 *****************
  8991 ;; Defined at:
  8992 ;;		line 490 in file "UI.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;		None
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;Total ram usage:        0 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:   10
  9013 ;; This function calls:
  9014 ;;		_lcdInst
  9015 ;;		_printf
  9016 ;; This function is called by:
  9017 ;;		_UI
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021                           	psect	text33
  9022  004342                     __ptext33:
  9023                           	opt stack 0
  9024  004342                     _change_state_to_menu_12:
  9025                           	opt stack 19
  9026                           
  9027                           ;UI.c: 491: cur_state = 12;
  9028                           
  9029                           ;incstack = 0
  9030  004342  0E00               	movlw	0
  9031  004344  0100               	movlb	0	; () banked
  9032  004346  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9033  004348  0E0C               	movlw	12
  9034  00434A  6FE0               	movwf	_cur_state& (0+255),b
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;UI.c: 493: lcdInst(0b10000000);;
  9038  00434C  0E80               	movlw	128
  9039  00434E  EC51  F024         	call	_lcdInst
  9040                           
  9041                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9042  004352  0E41               	movlw	low STR_33
  9043  004354  0100               	movlb	0	; () banked
  9044  004356  6F8E               	movwf	printf@f& (0+255),b
  9045  004358  0EFD               	movlw	high STR_33
  9046  00435A  0100               	movlb	0	; () banked
  9047  00435C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9048  00435E  ECB8  F008         	call	_printf	;wreg free
  9049                           
  9050                           ;UI.c: 495: lcdInst(0b11000000);;
  9051  004362  0EC0               	movlw	192
  9052  004364  EC51  F024         	call	_lcdInst
  9053                           
  9054                           ;UI.c: 496: printf("2. SORT        <");
  9055  004368  0EDA               	movlw	low STR_34
  9056  00436A  0100               	movlb	0	; () banked
  9057  00436C  6F8E               	movwf	printf@f& (0+255),b
  9058  00436E  0EFD               	movlw	high STR_34
  9059  004370  0100               	movlb	0	; () banked
  9060  004372  6F8F               	movwf	(printf@f+1)& (0+255),b
  9061  004374  ECB8  F008         	call	_printf	;wreg free
  9062  004378  0012               	return		;funcret
  9063  00437A                     __end_of_change_state_to_menu_12:
  9064                           	opt stack 0
  9065                           tblptru	equ	0xFF8
  9066                           tblptrh	equ	0xFF7
  9067                           tblptrl	equ	0xFF6
  9068                           tablat	equ	0xFF5
  9069                           prodh	equ	0xFF4
  9070                           prodl	equ	0xFF3
  9071                           intcon	equ	0xFF2
  9072                           intcon2	equ	0xFF1
  9073                           intcon3	equ	0xFF0
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085 ;; *************** function ___awmod *****************
  9086 ;; Defined at:
  9087 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  dividend        2    0[BANK0 ] int 
  9090 ;;  divisor         2    2[BANK0 ] int 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  sign            1    5[BANK0 ] unsigned char 
  9093 ;;  counter         1    4[BANK0 ] unsigned char 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  2    0[BANK0 ] int 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;Total ram usage:        6 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    7
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_UI
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text34
  9118  0039A2                     __ptext34:
  9119                           	opt stack 0
  9120  0039A2                     ___awmod:
  9121                           	opt stack 22
  9122                           
  9123                           ;incstack = 0
  9124  0039A2  0E00               	movlw	0
  9125  0039A4  0100               	movlb	0	; () banked
  9126  0039A6  6F85               	movwf	___awmod@sign& (0+255),b
  9127                           
  9128                           ; BSR set to: 0
  9129  0039A8  0100               	movlb	0	; () banked
  9130  0039AA  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9131  0039AC  D008               	goto	l7394
  9132                           
  9133                           ; BSR set to: 0
  9134  0039AE  0100               	movlb	0	; () banked
  9135  0039B0  6D80               	negf	___awmod@dividend& (0+255),b
  9136  0039B2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9137  0039B4  B0D8               	btfsc	status,0,c
  9138  0039B6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9139                           
  9140                           ; BSR set to: 0
  9141  0039B8  0E01               	movlw	1
  9142  0039BA  0100               	movlb	0	; () banked
  9143  0039BC  6F85               	movwf	___awmod@sign& (0+255),b
  9144  0039BE                     l7394:
  9145                           
  9146                           ; BSR set to: 0
  9147  0039BE  0100               	movlb	0	; () banked
  9148  0039C0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9149  0039C2  D005               	goto	l7398
  9150                           
  9151                           ; BSR set to: 0
  9152  0039C4  0100               	movlb	0	; () banked
  9153  0039C6  6D82               	negf	___awmod@divisor& (0+255),b
  9154  0039C8  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9155  0039CA  B0D8               	btfsc	status,0,c
  9156  0039CC  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9157  0039CE                     l7398:
  9158                           
  9159                           ; BSR set to: 0
  9160  0039CE  0100               	movlb	0	; () banked
  9161  0039D0  5182               	movf	___awmod@divisor& (0+255),w,b
  9162  0039D2  0100               	movlb	0	; () banked
  9163  0039D4  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9164  0039D6  B4D8               	btfsc	status,2,c
  9165  0039D8  D026               	goto	l7414
  9166                           
  9167                           ; BSR set to: 0
  9168  0039DA  0E01               	movlw	1
  9169  0039DC  0100               	movlb	0	; () banked
  9170  0039DE  6F84               	movwf	___awmod@counter& (0+255),b
  9171  0039E0  D006               	goto	l7404
  9172  0039E2                     l7402:
  9173                           
  9174                           ; BSR set to: 0
  9175  0039E2  0100               	movlb	0	; () banked
  9176  0039E4  90D8               	bcf	status,0,c
  9177  0039E6  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9178  0039E8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9179  0039EA  0100               	movlb	0	; () banked
  9180  0039EC  2B84               	incf	___awmod@counter& (0+255),f,b
  9181  0039EE                     l7404:
  9182                           
  9183                           ; BSR set to: 0
  9184  0039EE  0100               	movlb	0	; () banked
  9185  0039F0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9186  0039F2  D7F7               	goto	l7402
  9187  0039F4                     l7406:
  9188                           
  9189                           ; BSR set to: 0
  9190  0039F4  0100               	movlb	0	; () banked
  9191  0039F6  5182               	movf	___awmod@divisor& (0+255),w,b
  9192  0039F8  0100               	movlb	0	; () banked
  9193  0039FA  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9194  0039FC  0100               	movlb	0	; () banked
  9195  0039FE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9196  003A00  0100               	movlb	0	; () banked
  9197  003A02  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9198  003A04  A0D8               	btfss	status,0,c
  9199  003A06  D008               	goto	l7410
  9200                           
  9201                           ; BSR set to: 0
  9202  003A08  0100               	movlb	0	; () banked
  9203  003A0A  5182               	movf	___awmod@divisor& (0+255),w,b
  9204  003A0C  0100               	movlb	0	; () banked
  9205  003A0E  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9206  003A10  0100               	movlb	0	; () banked
  9207  003A12  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9208  003A14  0100               	movlb	0	; () banked
  9209  003A16  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9210  003A18                     l7410:
  9211                           
  9212                           ; BSR set to: 0
  9213  003A18  0100               	movlb	0	; () banked
  9214  003A1A  90D8               	bcf	status,0,c
  9215  003A1C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9216  003A1E  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9217                           
  9218                           ; BSR set to: 0
  9219  003A20  0100               	movlb	0	; () banked
  9220  003A22  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9221  003A24  D7E7               	goto	l7406
  9222  003A26                     l7414:
  9223                           
  9224                           ; BSR set to: 0
  9225  003A26  0100               	movlb	0	; () banked
  9226  003A28  5185               	movf	___awmod@sign& (0+255),w,b
  9227  003A2A  0100               	movlb	0	; () banked
  9228  003A2C  B4D8               	btfsc	status,2,c
  9229  003A2E  D005               	goto	l7418
  9230                           
  9231                           ; BSR set to: 0
  9232  003A30  0100               	movlb	0	; () banked
  9233  003A32  6D80               	negf	___awmod@dividend& (0+255),b
  9234  003A34  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9235  003A36  B0D8               	btfsc	status,0,c
  9236  003A38  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9237  003A3A                     l7418:
  9238                           
  9239                           ; BSR set to: 0
  9240  003A3A  C080  F080         	movff	___awmod@dividend,?___awmod
  9241  003A3E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9242  003A42  0012               	return	
  9243  003A44                     __end_of___awmod:
  9244                           	opt stack 0
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           intcon	equ	0xFF2
  9252                           intcon2	equ	0xFF1
  9253                           intcon3	equ	0xFF0
  9254                           postinc0	equ	0xFEE
  9255                           wreg	equ	0xFE8
  9256                           postdec1	equ	0xFE5
  9257                           fsr1l	equ	0xFE1
  9258                           indf2	equ	0xFDF
  9259                           postinc2	equ	0xFDE
  9260                           postdec2	equ	0xFDD
  9261                           fsr2h	equ	0xFDA
  9262                           fsr2l	equ	0xFD9
  9263                           status	equ	0xFD8
  9264                           
  9265 ;; *************** function ___awdiv *****************
  9266 ;; Defined at:
  9267 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  dividend        2    6[BANK0 ] int 
  9270 ;;  divisor         2    8[BANK0 ] int 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  quotient        2   12[BANK0 ] int 
  9273 ;;  sign            1   11[BANK0 ] unsigned char 
  9274 ;;  counter         1   10[BANK0 ] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  2    6[BANK0 ] int 
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;Total ram usage:        8 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    7
  9291 ;; This function calls:
  9292 ;;		Nothing
  9293 ;; This function is called by:
  9294 ;;		_UI
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text35
  9299  00377E                     __ptext35:
  9300                           	opt stack 0
  9301  00377E                     ___awdiv:
  9302                           	opt stack 22
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;incstack = 0
  9306  00377E  0E00               	movlw	0
  9307  003780  0100               	movlb	0	; () banked
  9308  003782  6F8B               	movwf	___awdiv@sign& (0+255),b
  9309                           
  9310                           ; BSR set to: 0
  9311  003784  0100               	movlb	0	; () banked
  9312  003786  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9313  003788  D008               	goto	l7350
  9314                           
  9315                           ; BSR set to: 0
  9316  00378A  0100               	movlb	0	; () banked
  9317  00378C  6D88               	negf	___awdiv@divisor& (0+255),b
  9318  00378E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9319  003790  B0D8               	btfsc	status,0,c
  9320  003792  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9321                           
  9322                           ; BSR set to: 0
  9323  003794  0E01               	movlw	1
  9324  003796  0100               	movlb	0	; () banked
  9325  003798  6F8B               	movwf	___awdiv@sign& (0+255),b
  9326  00379A                     l7350:
  9327                           
  9328                           ; BSR set to: 0
  9329  00379A  0100               	movlb	0	; () banked
  9330  00379C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9331  00379E  D008               	goto	l7356
  9332                           
  9333                           ; BSR set to: 0
  9334  0037A0  0100               	movlb	0	; () banked
  9335  0037A2  6D86               	negf	___awdiv@dividend& (0+255),b
  9336  0037A4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9337  0037A6  B0D8               	btfsc	status,0,c
  9338  0037A8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9339                           
  9340                           ; BSR set to: 0
  9341  0037AA  0E01               	movlw	1
  9342  0037AC  0100               	movlb	0	; () banked
  9343  0037AE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9344  0037B0                     l7356:
  9345                           
  9346                           ; BSR set to: 0
  9347  0037B0  0E00               	movlw	0
  9348  0037B2  0100               	movlb	0	; () banked
  9349  0037B4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9350  0037B6  0E00               	movlw	0
  9351  0037B8  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9352                           
  9353                           ; BSR set to: 0
  9354  0037BA  0100               	movlb	0	; () banked
  9355  0037BC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9356  0037BE  0100               	movlb	0	; () banked
  9357  0037C0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9358  0037C2  B4D8               	btfsc	status,2,c
  9359  0037C4  D02C               	goto	l7378
  9360                           
  9361                           ; BSR set to: 0
  9362  0037C6  0E01               	movlw	1
  9363  0037C8  0100               	movlb	0	; () banked
  9364  0037CA  6F8A               	movwf	___awdiv@counter& (0+255),b
  9365  0037CC  D006               	goto	l7364
  9366  0037CE                     l7362:
  9367                           
  9368                           ; BSR set to: 0
  9369  0037CE  0100               	movlb	0	; () banked
  9370  0037D0  90D8               	bcf	status,0,c
  9371  0037D2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9372  0037D4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9373  0037D6  0100               	movlb	0	; () banked
  9374  0037D8  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9375  0037DA                     l7364:
  9376                           
  9377                           ; BSR set to: 0
  9378  0037DA  0100               	movlb	0	; () banked
  9379  0037DC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9380  0037DE  D7F7               	goto	l7362
  9381  0037E0                     l7366:
  9382                           
  9383                           ; BSR set to: 0
  9384  0037E0  0100               	movlb	0	; () banked
  9385  0037E2  90D8               	bcf	status,0,c
  9386  0037E4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9387  0037E6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9388                           
  9389                           ; BSR set to: 0
  9390  0037E8  0100               	movlb	0	; () banked
  9391  0037EA  5188               	movf	___awdiv@divisor& (0+255),w,b
  9392  0037EC  0100               	movlb	0	; () banked
  9393  0037EE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9394  0037F0  0100               	movlb	0	; () banked
  9395  0037F2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9396  0037F4  0100               	movlb	0	; () banked
  9397  0037F6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9398  0037F8  A0D8               	btfss	status,0,c
  9399  0037FA  D00A               	goto	l7374
  9400                           
  9401                           ; BSR set to: 0
  9402  0037FC  0100               	movlb	0	; () banked
  9403  0037FE  5188               	movf	___awdiv@divisor& (0+255),w,b
  9404  003800  0100               	movlb	0	; () banked
  9405  003802  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9406  003804  0100               	movlb	0	; () banked
  9407  003806  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9408  003808  0100               	movlb	0	; () banked
  9409  00380A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9410                           
  9411                           ; BSR set to: 0
  9412  00380C  0100               	movlb	0	; () banked
  9413  00380E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9414  003810                     l7374:
  9415                           
  9416                           ; BSR set to: 0
  9417  003810  0100               	movlb	0	; () banked
  9418  003812  90D8               	bcf	status,0,c
  9419  003814  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9420  003816  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9421                           
  9422                           ; BSR set to: 0
  9423  003818  0100               	movlb	0	; () banked
  9424  00381A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9425  00381C  D7E1               	goto	l7366
  9426  00381E                     l7378:
  9427                           
  9428                           ; BSR set to: 0
  9429  00381E  0100               	movlb	0	; () banked
  9430  003820  518B               	movf	___awdiv@sign& (0+255),w,b
  9431  003822  0100               	movlb	0	; () banked
  9432  003824  B4D8               	btfsc	status,2,c
  9433  003826  D005               	goto	l7382
  9434                           
  9435                           ; BSR set to: 0
  9436  003828  0100               	movlb	0	; () banked
  9437  00382A  6D8C               	negf	___awdiv@quotient& (0+255),b
  9438  00382C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9439  00382E  B0D8               	btfsc	status,0,c
  9440  003830  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9441  003832                     l7382:
  9442                           
  9443                           ; BSR set to: 0
  9444  003832  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9445  003836  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9446  00383A  0012               	return	
  9447  00383C                     __end_of___awdiv:
  9448                           	opt stack 0
  9449                           tblptru	equ	0xFF8
  9450                           tblptrh	equ	0xFF7
  9451                           tblptrl	equ	0xFF6
  9452                           tablat	equ	0xFF5
  9453                           prodh	equ	0xFF4
  9454                           prodl	equ	0xFF3
  9455                           intcon	equ	0xFF2
  9456                           intcon2	equ	0xFF1
  9457                           intcon3	equ	0xFF0
  9458                           postinc0	equ	0xFEE
  9459                           wreg	equ	0xFE8
  9460                           postdec1	equ	0xFE5
  9461                           fsr1l	equ	0xFE1
  9462                           indf2	equ	0xFDF
  9463                           postinc2	equ	0xFDE
  9464                           postdec2	equ	0xFDD
  9465                           fsr2h	equ	0xFDA
  9466                           fsr2l	equ	0xFD9
  9467                           status	equ	0xFD8
  9468                           
  9469 ;; *************** function _Test *****************
  9470 ;; Defined at:
  9471 ;;		line 28 in file "Test.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;		None
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;		None
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      void 
  9478 ;; Registers used:
  9479 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;Total ram usage:        2 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:   11
  9492 ;; This function calls:
  9493 ;;		_BothServos
  9494 ;;		_EEPROMTest
  9495 ;;		_PortTestA5
  9496 ;;		_PortTests
  9497 ;;		_SolenoidTestA5
  9498 ;;		_ToggleTestA5
  9499 ;;		_actuatorTest
  9500 ;;		_algorithmTest
  9501 ;;		_lcdInst
  9502 ;;		_printf
  9503 ;;		_sensorTest
  9504 ;; This function is called by:
  9505 ;;		_main
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text36
  9510  0032FE                     __ptext36:
  9511                           	opt stack 0
  9512  0032FE                     _Test:
  9513                           	opt stack 19
  9514  0032FE                     
  9515                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9516  0032FE  0E01               	movlw	1
  9517  003300  EC51  F024         	call	_lcdInst
  9518  003304  0E68               	movlw	104
  9519  003306  0100               	movlb	0	; () banked
  9520  003308  6FC6               	movwf	??_Test& (0+255),b
  9521  00330A  0EE4               	movlw	228
  9522  00330C                     u7557:
  9523  00330C  2EE8               	decfsz	wreg,f,c
  9524  00330E  D7FE               	bra	u7557
  9525  003310  2FC6               	decfsz	??_Test& (0+255),f,b
  9526  003312  D7FC               	bra	u7557
  9527  003314  F000               	nop	
  9528  003316  0E80               	movlw	128
  9529  003318  EC51  F024         	call	_lcdInst
  9530                           
  9531                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9532  00331C  0E86               	movlw	low STR_68
  9533  00331E  0100               	movlb	0	; () banked
  9534  003320  6F8E               	movwf	printf@f& (0+255),b
  9535  003322  0EFC               	movlw	high STR_68
  9536  003324  0100               	movlb	0	; () banked
  9537  003326  6F8F               	movwf	(printf@f+1)& (0+255),b
  9538  003328  ECB8  F008         	call	_printf	;wreg free
  9539                           
  9540                           ;Test.c: 33: lcdInst(0b11000000);;
  9541  00332C  0EC0               	movlw	192
  9542  00332E  EC51  F024         	call	_lcdInst
  9543                           
  9544                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9545  003332  0EB9               	movlw	low STR_69
  9546  003334  0100               	movlb	0	; () banked
  9547  003336  6F8E               	movwf	printf@f& (0+255),b
  9548  003338  0EFC               	movlw	high STR_69
  9549  00333A  0100               	movlb	0	; () banked
  9550  00333C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9551  00333E  ECB8  F008         	call	_printf	;wreg free
  9552                           
  9553                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9554  003342  0E05               	movlw	5
  9555  003344  0100               	movlb	0	; () banked
  9556  003346  6FC7               	movwf	(??_Test+1)& (0+255),b
  9557  003348  0E0F               	movlw	15
  9558  00334A  0100               	movlb	0	; () banked
  9559  00334C  6FC6               	movwf	??_Test& (0+255),b
  9560  00334E  0EF1               	movlw	241
  9561  003350                     u7567:
  9562  003350  2EE8               	decfsz	wreg,f,c
  9563  003352  D7FE               	bra	u7567
  9564  003354  2FC6               	decfsz	??_Test& (0+255),f,b
  9565  003356  D7FC               	bra	u7567
  9566  003358  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9567  00335A  D7FA               	bra	u7567
  9568  00335C                     l1040:
  9569  00335C  A281               	btfss	3969,1,c	;volatile
  9570  00335E  D7FE               	goto	l1040
  9571                           
  9572                           ;Test.c: 37: var = PORTB >> 4;
  9573  003360  CF81 F0C6          	movff	3969,??_Test	;volatile
  9574  003364  0100               	movlb	0	; () banked
  9575  003366  3BC6               	swapf	??_Test& (0+255),f,b
  9576  003368  0E0F               	movlw	15
  9577  00336A  17C6               	andwf	??_Test& (0+255),f,b
  9578  00336C  0100               	movlb	0	; () banked
  9579  00336E  51C6               	movf	??_Test& (0+255),w,b
  9580  003370  0100               	movlb	0	; () banked
  9581  003372  6FFA               	movwf	_var& (0+255),b
  9582  003374  6BFB               	clrf	(_var+1)& (0+255),b
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;Test.c: 38: var++;
  9586  003376  0100               	movlb	0	; () banked
  9587  003378  4BFA               	infsnz	_var& (0+255),f,b
  9588  00337A  2BFB               	incf	(_var+1)& (0+255),f,b
  9589  00337C                     l1043:
  9590  00337C  A281               	btfss	3969,1,c	;volatile
  9591  00337E  D01C               	goto	l8116
  9592  003380  D7FD               	goto	l1043
  9593  003382                     l8096:
  9594                           
  9595                           ;Test.c: 42: algorithmTest();
  9596  003382  ECF4  F01A         	call	_algorithmTest	;wreg free
  9597                           
  9598                           ;Test.c: 43: break;
  9599  003386  D7BB               	goto	l8078
  9600  003388                     l8098:
  9601                           
  9602                           ;Test.c: 45: sensorTest();
  9603  003388  EC2F  F00E         	call	_sensorTest	;wreg free
  9604                           
  9605                           ;Test.c: 46: break;
  9606  00338C  D7B8               	goto	l8078
  9607  00338E                     l8100:
  9608                           
  9609                           ;Test.c: 48: actuatorTest();
  9610  00338E  EC09  F000         	call	_actuatorTest	;wreg free
  9611                           
  9612                           ;Test.c: 49: break;
  9613  003392  D7B5               	goto	l8078
  9614  003394                     l8102:
  9615                           
  9616                           ;Test.c: 51: PortTestA5();
  9617  003394  EC22  F01D         	call	_PortTestA5	;wreg free
  9618                           
  9619                           ;Test.c: 52: break;
  9620  003398  D7B2               	goto	l8078
  9621  00339A                     l8104:
  9622                           
  9623                           ;Test.c: 54: ToggleTestA5();
  9624  00339A  ECB3  F01D         	call	_ToggleTestA5	;wreg free
  9625                           
  9626                           ;Test.c: 55: break;
  9627  00339E  D7AF               	goto	l8078
  9628  0033A0                     l8106:
  9629                           
  9630                           ;Test.c: 57: EEPROMTest();
  9631  0033A0  EC83  F024         	call	_EEPROMTest	;wreg free
  9632                           
  9633                           ;Test.c: 58: break;
  9634  0033A4  D7AC               	goto	l8078
  9635  0033A6                     l8108:
  9636                           
  9637                           ;Test.c: 60: SolenoidTestA5();
  9638  0033A6  EC03  F01A         	call	_SolenoidTestA5	;wreg free
  9639                           
  9640                           ;Test.c: 61: break;
  9641  0033AA  D7A9               	goto	l8078
  9642  0033AC                     l8110:
  9643                           
  9644                           ;Test.c: 63: PortTests();
  9645  0033AC  EC3A  F01E         	call	_PortTests	;wreg free
  9646                           
  9647                           ;Test.c: 64: break;
  9648  0033B0  D7A6               	goto	l8078
  9649  0033B2                     l8112:
  9650                           
  9651                           ;Test.c: 66: BothServos();
  9652  0033B2  EC8B  F00C         	call	_BothServos	;wreg free
  9653                           
  9654                           ;Test.c: 70: }
  9655                           
  9656                           ;Test.c: 69: break;
  9657                           
  9658                           ;Test.c: 68: default:
  9659                           
  9660                           ;Test.c: 67: break;
  9661  0033B6  D7A3               	goto	l8078
  9662  0033B8                     l8116:
  9663  0033B8  C0FA  F0C6         	movff	_var,??_Test
  9664  0033BC  C0FB  F0C7         	movff	_var+1,??_Test+1
  9665                           
  9666                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9667                           ; Switch size 1, requested type "space"
  9668                           ; Number of cases is 1, Range of values is 0 to 0
  9669                           ; switch strategies available:
  9670                           ; Name         Instructions Cycles
  9671                           ; simple_byte            4     3 (average)
  9672                           ;	Chosen strategy is simple_byte
  9673  0033C0  0100               	movlb	0	; () banked
  9674  0033C2  51C7               	movf	(??_Test+1)& (0+255),w,b
  9675  0033C4  0A00               	xorlw	0	; case 0
  9676  0033C6  A4D8               	btfss	status,2,c
  9677  0033C8  D79A               	goto	l8078
  9678                           
  9679                           ; BSR set to: 0
  9680                           ; Switch size 1, requested type "space"
  9681                           ; Number of cases is 9, Range of values is 1 to 10
  9682                           ; switch strategies available:
  9683                           ; Name         Instructions Cycles
  9684                           ; simple_byte           28    15 (average)
  9685                           ;	Chosen strategy is simple_byte
  9686  0033CA  0100               	movlb	0	; () banked
  9687  0033CC  51C6               	movf	??_Test& (0+255),w,b
  9688  0033CE  0A01               	xorlw	1	; case 1
  9689  0033D0  B4D8               	btfsc	status,2,c
  9690  0033D2  D7D7               	goto	l8096
  9691  0033D4  0A03               	xorlw	3	; case 2
  9692  0033D6  B4D8               	btfsc	status,2,c
  9693  0033D8  D7D7               	goto	l8098
  9694  0033DA  0A01               	xorlw	1	; case 3
  9695  0033DC  B4D8               	btfsc	status,2,c
  9696  0033DE  D7D7               	goto	l8100
  9697  0033E0  0A06               	xorlw	6	; case 5
  9698  0033E2  B4D8               	btfsc	status,2,c
  9699  0033E4  D7D7               	goto	l8102
  9700  0033E6  0A03               	xorlw	3	; case 6
  9701  0033E8  B4D8               	btfsc	status,2,c
  9702  0033EA  D7D7               	goto	l8104
  9703  0033EC  0A01               	xorlw	1	; case 7
  9704  0033EE  B4D8               	btfsc	status,2,c
  9705  0033F0  D7D7               	goto	l8106
  9706  0033F2  0A0F               	xorlw	15	; case 8
  9707  0033F4  B4D8               	btfsc	status,2,c
  9708  0033F6  D7D7               	goto	l8108
  9709  0033F8  0A01               	xorlw	1	; case 9
  9710  0033FA  B4D8               	btfsc	status,2,c
  9711  0033FC  D7D7               	goto	l8110
  9712  0033FE  0A03               	xorlw	3	; case 10
  9713  003400  B4D8               	btfsc	status,2,c
  9714  003402  D7D7               	goto	l8112
  9715                           
  9716                           ; BSR set to: 0
  9717                           
  9718                           ; BSR set to: 0
  9719  003404  D77C               	goto	l8078
  9720  003406                     __end_of_Test:
  9721                           	opt stack 0
  9722                           tblptru	equ	0xFF8
  9723                           tblptrh	equ	0xFF7
  9724                           tblptrl	equ	0xFF6
  9725                           tablat	equ	0xFF5
  9726                           prodh	equ	0xFF4
  9727                           prodl	equ	0xFF3
  9728                           intcon	equ	0xFF2
  9729                           intcon2	equ	0xFF1
  9730                           intcon3	equ	0xFF0
  9731                           postinc0	equ	0xFEE
  9732                           wreg	equ	0xFE8
  9733                           postdec1	equ	0xFE5
  9734                           fsr1l	equ	0xFE1
  9735                           indf2	equ	0xFDF
  9736                           postinc2	equ	0xFDE
  9737                           postdec2	equ	0xFDD
  9738                           fsr2h	equ	0xFDA
  9739                           fsr2l	equ	0xFD9
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function _sensorTest *****************
  9743 ;; Defined at:
  9744 ;;		line 118 in file "Test.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  res             2   45[BANK0 ] int 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;Total ram usage:        4 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:   10
  9765 ;; This function calls:
  9766 ;;		_lcdInst
  9767 ;;		_printf
  9768 ;;		_readADC
  9769 ;;		_readMAG
  9770 ;; This function is called by:
  9771 ;;		_Test
  9772 ;; This function uses a non-reentrant model
  9773 ;;
  9774                           
  9775                           	psect	text37
  9776  001C5E                     __ptext37:
  9777                           	opt stack 0
  9778  001C5E                     _sensorTest:
  9779                           	opt stack 19
  9780                           
  9781                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;incstack = 0
  9785  001C5E  0E01               	movlw	1
  9786  001C60  EC51  F024         	call	_lcdInst
  9787  001C64  0E68               	movlw	104
  9788  001C66  0100               	movlb	0	; () banked
  9789  001C68  6FAB               	movwf	??_sensorTest& (0+255),b
  9790  001C6A  0EE4               	movlw	228
  9791  001C6C                     u7577:
  9792  001C6C  2EE8               	decfsz	wreg,f,c
  9793  001C6E  D7FE               	bra	u7577
  9794  001C70  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9795  001C72  D7FC               	bra	u7577
  9796  001C74  F000               	nop	
  9797  001C76  0E80               	movlw	128
  9798  001C78  EC51  F024         	call	_lcdInst
  9799                           
  9800                           ;Test.c: 121: printf("SENSORS");
  9801  001C7C  0EAE               	movlw	low STR_77
  9802  001C7E  0100               	movlb	0	; () banked
  9803  001C80  6F8E               	movwf	printf@f& (0+255),b
  9804  001C82  0EFF               	movlw	high STR_77
  9805  001C84  0100               	movlb	0	; () banked
  9806  001C86  6F8F               	movwf	(printf@f+1)& (0+255),b
  9807  001C88  ECB8  F008         	call	_printf	;wreg free
  9808                           
  9809                           ;Test.c: 122: lcdInst(0b11000000);;
  9810  001C8C  0EC0               	movlw	192
  9811  001C8E  EC51  F024         	call	_lcdInst
  9812                           
  9813                           ;Test.c: 123: printf("PUSH TO START");
  9814  001C92  0EFF               	movlw	low STR_71
  9815  001C94  0100               	movlb	0	; () banked
  9816  001C96  6F8E               	movwf	printf@f& (0+255),b
  9817  001C98  0EFE               	movlw	high STR_71
  9818  001C9A  0100               	movlb	0	; () banked
  9819  001C9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9820  001C9E  ECB8  F008         	call	_printf	;wreg free
  9821                           
  9822                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9823  001CA2  0E05               	movlw	5
  9824  001CA4  0100               	movlb	0	; () banked
  9825  001CA6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9826  001CA8  0E0F               	movlw	15
  9827  001CAA  0100               	movlb	0	; () banked
  9828  001CAC  6FAB               	movwf	??_sensorTest& (0+255),b
  9829  001CAE  0EF1               	movlw	241
  9830  001CB0                     u7587:
  9831  001CB0  2EE8               	decfsz	wreg,f,c
  9832  001CB2  D7FE               	bra	u7587
  9833  001CB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9834  001CB6  D7FC               	bra	u7587
  9835  001CB8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9836  001CBA  D7FA               	bra	u7587
  9837  001CBC                     l1072:
  9838  001CBC  A281               	btfss	3969,1,c	;volatile
  9839  001CBE  D7FE               	goto	l1072
  9840  001CC0                     l1075:
  9841  001CC0  B281               	btfsc	3969,1,c	;volatile
  9842  001CC2  D7FE               	goto	l1075
  9843                           
  9844                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9845  001CC4  0E01               	movlw	1
  9846  001CC6  EC51  F024         	call	_lcdInst
  9847  001CCA  0E68               	movlw	104
  9848  001CCC  0100               	movlb	0	; () banked
  9849  001CCE  6FAB               	movwf	??_sensorTest& (0+255),b
  9850  001CD0  0EE4               	movlw	228
  9851  001CD2                     u7597:
  9852  001CD2  2EE8               	decfsz	wreg,f,c
  9853  001CD4  D7FE               	bra	u7597
  9854  001CD6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9855  001CD8  D7FC               	bra	u7597
  9856  001CDA  F000               	nop	
  9857  001CDC  0E80               	movlw	128
  9858  001CDE  EC51  F024         	call	_lcdInst
  9859                           
  9860                           ;Test.c: 132: printf("TST: IR SNSR");
  9861  001CE2  0E29               	movlw	low STR_79
  9862  001CE4  0100               	movlb	0	; () banked
  9863  001CE6  6F8E               	movwf	printf@f& (0+255),b
  9864  001CE8  0EFF               	movlw	high STR_79
  9865  001CEA  0100               	movlb	0	; () banked
  9866  001CEC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9867  001CEE  ECB8  F008         	call	_printf	;wreg free
  9868                           
  9869                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9870  001CF2  0E05               	movlw	5
  9871  001CF4  0100               	movlb	0	; () banked
  9872  001CF6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9873  001CF8  0E0F               	movlw	15
  9874  001CFA  0100               	movlb	0	; () banked
  9875  001CFC  6FAB               	movwf	??_sensorTest& (0+255),b
  9876  001CFE  0EF1               	movlw	241
  9877  001D00                     u7607:
  9878  001D00  2EE8               	decfsz	wreg,f,c
  9879  001D02  D7FE               	bra	u7607
  9880  001D04  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9881  001D06  D7FC               	bra	u7607
  9882  001D08  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9883  001D0A  D7FA               	bra	u7607
  9884                           
  9885                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9886  001D0C  8A8B               	bsf	3979,5,c	;volatile
  9887                           
  9888                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9889  001D0E  D05C               	goto	l6654
  9890  001D10                     l6636:
  9891                           
  9892                           ;Test.c: 136: readADC(0);
  9893  001D10  0E00               	movlw	0
  9894  001D12  EC58  F023         	call	_readADC
  9895                           
  9896                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9897  001D16  50C3               	movf	4035,w,c	;volatile
  9898  001D18  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9899  001D1C  0100               	movlb	0	; () banked
  9900  001D1E  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9901  001D20  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9902  001D24  0100               	movlb	0	; () banked
  9903  001D26  6BAB               	clrf	??_sensorTest& (0+255),b
  9904  001D28  0100               	movlb	0	; () banked
  9905  001D2A  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9906  001D2C  0100               	movlb	0	; () banked
  9907  001D2E  6FAD               	movwf	sensorTest@res& (0+255),b
  9908  001D30  0100               	movlb	0	; () banked
  9909  001D32  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9910  001D34  0100               	movlb	0	; () banked
  9911  001D36  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;Test.c: 138: IR_signal = (res > 800) ? 1 : 0;
  9915  001D38  0100               	movlb	0	; () banked
  9916  001D3A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9917  001D3C  D00A               	goto	u5090
  9918  001D3E  0E21               	movlw	33
  9919  001D40  0100               	movlb	0	; () banked
  9920  001D42  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9921  001D44  0E03               	movlw	3
  9922  001D46  0100               	movlb	0	; () banked
  9923  001D48  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9924  001D4A  A0D8               	btfss	status,0,c
  9925  001D4C  D002               	goto	u5090
  9926  001D4E  0E01               	movlw	1
  9927  001D50  D001               	goto	u5100
  9928  001D52                     u5090:
  9929  001D52  0E00               	movlw	0
  9930  001D54                     u5100:
  9931  001D54  0100               	movlb	0	; () banked
  9932  001D56  6FDA               	movwf	_IR_signal& (0+255),b
  9933  001D58  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9934                           
  9935                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9936  001D5A  0E01               	movlw	1
  9937  001D5C  EC51  F024         	call	_lcdInst
  9938  001D60  0E68               	movlw	104
  9939  001D62  0100               	movlb	0	; () banked
  9940  001D64  6FAB               	movwf	??_sensorTest& (0+255),b
  9941  001D66  0EE4               	movlw	228
  9942  001D68                     u7617:
  9943  001D68  2EE8               	decfsz	wreg,f,c
  9944  001D6A  D7FE               	bra	u7617
  9945  001D6C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9946  001D6E  D7FC               	bra	u7617
  9947  001D70  F000               	nop	
  9948  001D72  0E80               	movlw	128
  9949  001D74  EC51  F024         	call	_lcdInst
  9950                           
  9951                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9952  001D78  0E4E               	movlw	low STR_80
  9953  001D7A  0100               	movlb	0	; () banked
  9954  001D7C  6F8E               	movwf	printf@f& (0+255),b
  9955  001D7E  0EFE               	movlw	high STR_80
  9956  001D80  0100               	movlb	0	; () banked
  9957  001D82  6F8F               	movwf	(printf@f+1)& (0+255),b
  9958  001D84  C0DA  F090         	movff	_IR_signal,?_printf+2
  9959  001D88  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9960  001D8C  ECB8  F008         	call	_printf	;wreg free
  9961                           
  9962                           ;Test.c: 142: lcdInst(0b11000000);;
  9963  001D90  0EC0               	movlw	192
  9964  001D92  EC51  F024         	call	_lcdInst
  9965                           
  9966                           ;Test.c: 143: printf("%d", res);
  9967  001D96  0E6D               	movlw	low (STR_27+16)
  9968  001D98  0100               	movlb	0	; () banked
  9969  001D9A  6F8E               	movwf	printf@f& (0+255),b
  9970  001D9C  0EFB               	movlw	high (STR_27+16)
  9971  001D9E  0100               	movlb	0	; () banked
  9972  001DA0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9973  001DA2  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9974  001DA6  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9975  001DAA  ECB8  F008         	call	_printf	;wreg free
  9976                           
  9977                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9978  001DAE  0E05               	movlw	5
  9979  001DB0  0100               	movlb	0	; () banked
  9980  001DB2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9981  001DB4  0E0F               	movlw	15
  9982  001DB6  0100               	movlb	0	; () banked
  9983  001DB8  6FAB               	movwf	??_sensorTest& (0+255),b
  9984  001DBA  0EF1               	movlw	241
  9985  001DBC                     u7627:
  9986  001DBC  2EE8               	decfsz	wreg,f,c
  9987  001DBE  D7FE               	bra	u7627
  9988  001DC0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9989  001DC2  D7FC               	bra	u7627
  9990  001DC4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9991  001DC6  D7FA               	bra	u7627
  9992  001DC8                     l6654:
  9993  001DC8  A281               	btfss	3969,1,c	;volatile
  9994  001DCA  D7A2               	goto	l6636
  9995                           
  9996                           ;Test.c: 145: }
  9997                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9998  001DCC  9A8B               	bcf	3979,5,c	;volatile
  9999                           
 10000                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10001  001DCE  0E01               	movlw	1
 10002  001DD0  EC51  F024         	call	_lcdInst
 10003  001DD4  0E68               	movlw	104
 10004  001DD6  0100               	movlb	0	; () banked
 10005  001DD8  6FAB               	movwf	??_sensorTest& (0+255),b
 10006  001DDA  0EE4               	movlw	228
 10007  001DDC                     u7637:
 10008  001DDC  2EE8               	decfsz	wreg,f,c
 10009  001DDE  D7FE               	bra	u7637
 10010  001DE0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10011  001DE2  D7FC               	bra	u7637
 10012  001DE4  F000               	nop	
 10013  001DE6  0E80               	movlw	128
 10014  001DE8  EC51  F024         	call	_lcdInst
 10015                           
 10016                           ;Test.c: 154: printf("TST: MAGNETISM");
 10017  001DEC  0E7B               	movlw	low STR_82
 10018  001DEE  0100               	movlb	0	; () banked
 10019  001DF0  6F8E               	movwf	printf@f& (0+255),b
 10020  001DF2  0EFE               	movlw	high STR_82
 10021  001DF4  0100               	movlb	0	; () banked
 10022  001DF6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10023  001DF8  ECB8  F008         	call	_printf	;wreg free
 10024                           
 10025                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
 10026  001DFC  0E05               	movlw	5
 10027  001DFE  0100               	movlb	0	; () banked
 10028  001E00  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10029  001E02  0E0F               	movlw	15
 10030  001E04  0100               	movlb	0	; () banked
 10031  001E06  6FAB               	movwf	??_sensorTest& (0+255),b
 10032  001E08  0EF1               	movlw	241
 10033  001E0A                     u7647:
 10034  001E0A  2EE8               	decfsz	wreg,f,c
 10035  001E0C  D7FE               	bra	u7647
 10036  001E0E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10037  001E10  D7FC               	bra	u7647
 10038  001E12  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10039  001E14  D7FA               	bra	u7647
 10040                           
 10041                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
 10042  001E16  D021               	goto	l6672
 10043  001E18                     l6666:
 10044                           
 10045                           ;Test.c: 157: readMAG();
 10046  001E18  EC1B  F021         	call	_readMAG	;wreg free
 10047                           
 10048                           ;Test.c: 158: lcdInst(0b10000000);;
 10049  001E1C  0E80               	movlw	128
 10050  001E1E  EC51  F024         	call	_lcdInst
 10051                           
 10052                           ;Test.c: 159: lcdInst(0b11000000);;
 10053  001E22  0EC0               	movlw	192
 10054  001E24  EC51  F024         	call	_lcdInst
 10055                           
 10056                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
 10057  001E28  0E1E               	movlw	low STR_83
 10058  001E2A  0100               	movlb	0	; () banked
 10059  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10060  001E2E  0EFE               	movlw	high STR_83
 10061  001E30  0100               	movlb	0	; () banked
 10062  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10063  001E34  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10064  001E38  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10065  001E3C  ECB8  F008         	call	_printf	;wreg free
 10066                           
 10067                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10068  001E40  0E05               	movlw	5
 10069  001E42  0100               	movlb	0	; () banked
 10070  001E44  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10071  001E46  0E0F               	movlw	15
 10072  001E48  0100               	movlb	0	; () banked
 10073  001E4A  6FAB               	movwf	??_sensorTest& (0+255),b
 10074  001E4C  0EF1               	movlw	241
 10075  001E4E                     u7657:
 10076  001E4E  2EE8               	decfsz	wreg,f,c
 10077  001E50  D7FE               	bra	u7657
 10078  001E52  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10079  001E54  D7FC               	bra	u7657
 10080  001E56  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10081  001E58  D7FA               	bra	u7657
 10082  001E5A                     l6672:
 10083  001E5A  A281               	btfss	3969,1,c	;volatile
 10084  001E5C  D7DD               	goto	l6666
 10085                           
 10086                           ;Test.c: 162: }
 10087                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10088  001E5E  0E01               	movlw	1
 10089  001E60  EC51  F024         	call	_lcdInst
 10090  001E64  0E68               	movlw	104
 10091  001E66  0100               	movlb	0	; () banked
 10092  001E68  6FAB               	movwf	??_sensorTest& (0+255),b
 10093  001E6A  0EE4               	movlw	228
 10094  001E6C                     u7667:
 10095  001E6C  2EE8               	decfsz	wreg,f,c
 10096  001E6E  D7FE               	bra	u7667
 10097  001E70  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10098  001E72  D7FC               	bra	u7667
 10099  001E74  F000               	nop	
 10100  001E76  0E80               	movlw	128
 10101  001E78  EC51  F024         	call	_lcdInst
 10102                           
 10103                           ;Test.c: 168: printf("TST: COND");
 10104  001E7C  0E7D               	movlw	low STR_84
 10105  001E7E  0100               	movlb	0	; () banked
 10106  001E80  6F8E               	movwf	printf@f& (0+255),b
 10107  001E82  0EFF               	movlw	high STR_84
 10108  001E84  0100               	movlb	0	; () banked
 10109  001E86  6F8F               	movwf	(printf@f+1)& (0+255),b
 10110  001E88  ECB8  F008         	call	_printf	;wreg free
 10111                           
 10112                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10113  001E8C  0E05               	movlw	5
 10114  001E8E  0100               	movlb	0	; () banked
 10115  001E90  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10116  001E92  0E0F               	movlw	15
 10117  001E94  0100               	movlb	0	; () banked
 10118  001E96  6FAB               	movwf	??_sensorTest& (0+255),b
 10119  001E98  0EF1               	movlw	241
 10120  001E9A                     u7677:
 10121  001E9A  2EE8               	decfsz	wreg,f,c
 10122  001E9C  D7FE               	bra	u7677
 10123  001E9E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10124  001EA0  D7FC               	bra	u7677
 10125  001EA2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10126  001EA4  D7FA               	bra	u7677
 10127  001EA6                     l6684:
 10128                           
 10129                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10130  001EA6  0E01               	movlw	1
 10131  001EA8  EC51  F024         	call	_lcdInst
 10132  001EAC  0E68               	movlw	104
 10133  001EAE  0100               	movlb	0	; () banked
 10134  001EB0  6FAB               	movwf	??_sensorTest& (0+255),b
 10135  001EB2  0EE4               	movlw	228
 10136  001EB4                     u7687:
 10137  001EB4  2EE8               	decfsz	wreg,f,c
 10138  001EB6  D7FE               	bra	u7687
 10139  001EB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10140  001EBA  D7FC               	bra	u7687
 10141  001EBC  F000               	nop	
 10142  001EBE  0E80               	movlw	128
 10143  001EC0  EC51  F024         	call	_lcdInst
 10144                           
 10145                           ;Test.c: 172: printf("TST: COND");
 10146  001EC4  0E7D               	movlw	low STR_84
 10147  001EC6  0100               	movlb	0	; () banked
 10148  001EC8  6F8E               	movwf	printf@f& (0+255),b
 10149  001ECA  0EFF               	movlw	high STR_84
 10150  001ECC  0100               	movlb	0	; () banked
 10151  001ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10152  001ED0  ECB8  F008         	call	_printf	;wreg free
 10153                           
 10154                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
 10155  001ED4  D01B               	goto	l6696
 10156  001ED6                     l6692:
 10157                           
 10158                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10159  001ED6  0E80               	movlw	128
 10160  001ED8  EC51  F024         	call	_lcdInst
 10161  001EDC  0EC0               	movlw	192
 10162  001EDE  EC51  F024         	call	_lcdInst
 10163                           
 10164                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
 10165  001EE2  0EA5               	movlw	low STR_86
 10166  001EE4  0100               	movlb	0	; () banked
 10167  001EE6  6F8E               	movwf	printf@f& (0+255),b
 10168  001EE8  0EFF               	movlw	high STR_86
 10169  001EEA  0100               	movlb	0	; () banked
 10170  001EEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10171  001EEE  A480               	btfss	3968,2,c	;volatile
 10172  001EF0  D004               	goto	u5130
 10173  001EF2  0100               	movlb	0	; () banked
 10174  001EF4  6BAB               	clrf	??_sensorTest& (0+255),b
 10175  001EF6  2BAB               	incf	??_sensorTest& (0+255),f,b
 10176  001EF8  D002               	goto	u5138
 10177  001EFA                     u5130:
 10178  001EFA  0100               	movlb	0	; () banked
 10179  001EFC  6BAB               	clrf	??_sensorTest& (0+255),b
 10180  001EFE                     u5138:
 10181  001EFE  0100               	movlb	0	; () banked
 10182  001F00  51AB               	movf	??_sensorTest& (0+255),w,b
 10183  001F02  0100               	movlb	0	; () banked
 10184  001F04  6F90               	movwf	(?_printf+2)& (0+255),b
 10185  001F06  6B91               	clrf	(?_printf+3)& (0+255),b
 10186  001F08  ECB8  F008         	call	_printf	;wreg free
 10187  001F0C                     l6696:
 10188  001F0C  A281               	btfss	3969,1,c	;volatile
 10189  001F0E  D7E3               	goto	l6692
 10190                           
 10191                           ;Test.c: 179: }
 10192                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10193  001F10  3881               	swapf	3969,w,c	;volatile
 10194  001F12  0B0F               	andlw	15
 10195  001F14  0A0F               	xorlw	15
 10196  001F16  B4D8               	btfsc	status,2,c
 10197  001F18  0012               	return	
 10198                           
 10199                           ;Test.c: 183: else{
 10200                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10201                           
 10202                           ;Test.c: 182: }
 10203                           
 10204                           ;Test.c: 181: break;
 10205  001F1A  8689               	bsf	3977,3,c	;volatile
 10206                           
 10207                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10208  001F1C  D01B               	goto	l6708
 10209  001F1E                     l6704:
 10210                           
 10211                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10212  001F1E  0E80               	movlw	128
 10213  001F20  EC51  F024         	call	_lcdInst
 10214  001F24  0EC0               	movlw	192
 10215  001F26  EC51  F024         	call	_lcdInst
 10216                           
 10217                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10218  001F2A  0EA5               	movlw	low STR_86
 10219  001F2C  0100               	movlb	0	; () banked
 10220  001F2E  6F8E               	movwf	printf@f& (0+255),b
 10221  001F30  0EFF               	movlw	high STR_86
 10222  001F32  0100               	movlb	0	; () banked
 10223  001F34  6F8F               	movwf	(printf@f+1)& (0+255),b
 10224  001F36  A480               	btfss	3968,2,c	;volatile
 10225  001F38  D004               	goto	u5160
 10226  001F3A  0100               	movlb	0	; () banked
 10227  001F3C  6BAB               	clrf	??_sensorTest& (0+255),b
 10228  001F3E  2BAB               	incf	??_sensorTest& (0+255),f,b
 10229  001F40  D002               	goto	u5168
 10230  001F42                     u5160:
 10231  001F42  0100               	movlb	0	; () banked
 10232  001F44  6BAB               	clrf	??_sensorTest& (0+255),b
 10233  001F46                     u5168:
 10234  001F46  0100               	movlb	0	; () banked
 10235  001F48  51AB               	movf	??_sensorTest& (0+255),w,b
 10236  001F4A  0100               	movlb	0	; () banked
 10237  001F4C  6F90               	movwf	(?_printf+2)& (0+255),b
 10238  001F4E  6B91               	clrf	(?_printf+3)& (0+255),b
 10239  001F50  ECB8  F008         	call	_printf	;wreg free
 10240  001F54                     l6708:
 10241  001F54  B281               	btfsc	3969,1,c	;volatile
 10242  001F56  D7E3               	goto	l6704
 10243                           
 10244                           ;Test.c: 189: }
 10245                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10246  001F58  9689               	bcf	3977,3,c	;volatile
 10247  001F5A  D7A5               	goto	l6684
 10248  001F5C                     __end_of_sensorTest:
 10249                           	opt stack 0
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           prodh	equ	0xFF4
 10255                           prodl	equ	0xFF3
 10256                           intcon	equ	0xFF2
 10257                           intcon2	equ	0xFF1
 10258                           intcon3	equ	0xFF0
 10259                           postinc0	equ	0xFEE
 10260                           wreg	equ	0xFE8
 10261                           postdec1	equ	0xFE5
 10262                           fsr1l	equ	0xFE1
 10263                           indf2	equ	0xFDF
 10264                           postinc2	equ	0xFDE
 10265                           postdec2	equ	0xFDD
 10266                           fsr2h	equ	0xFDA
 10267                           fsr2l	equ	0xFD9
 10268                           status	equ	0xFD8
 10269                           
 10270 ;; *************** function _readMAG *****************
 10271 ;; Defined at:
 10272 ;;		line 29 in file "ADCFunctionality.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;		None
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;  res             2    4[BANK0 ] int 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      void 
 10279 ;; Registers used:
 10280 ;;		wreg, status,2, status,0, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10289 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;Total ram usage:        4 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    8
 10293 ;; This function calls:
 10294 ;;		_readADC
 10295 ;; This function is called by:
 10296 ;;		_getMAG
 10297 ;;		_sensorTest
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           	psect	text38
 10302  004236                     __ptext38:
 10303                           	opt stack 0
 10304  004236                     _readMAG:
 10305                           	opt stack 19
 10306                           
 10307                           ;ADCFunctionality.c: 30: readADC(1);
 10308                           
 10309                           ;incstack = 0
 10310  004236  0E01               	movlw	1
 10311  004238  EC58  F023         	call	_readADC
 10312                           
 10313                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10314  00423C  50C3               	movf	4035,w,c	;volatile
 10315  00423E  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10316  004242  0100               	movlb	0	; () banked
 10317  004244  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10318  004246  C082  F083         	movff	??_readMAG,??_readMAG+1
 10319  00424A  0100               	movlb	0	; () banked
 10320  00424C  6B82               	clrf	??_readMAG& (0+255),b
 10321  00424E  0100               	movlb	0	; () banked
 10322  004250  1182               	iorwf	??_readMAG& (0+255),w,b
 10323  004252  0100               	movlb	0	; () banked
 10324  004254  6F84               	movwf	readMAG@res& (0+255),b
 10325  004256  0100               	movlb	0	; () banked
 10326  004258  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10327  00425A  0100               	movlb	0	; () banked
 10328  00425C  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10332  00425E  0100               	movlb	0	; () banked
 10333  004260  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10334  004262  D008               	goto	u3841
 10335  004264  0100               	movlb	0	; () banked
 10336  004266  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10337  004268  E107               	bnz	u3840
 10338  00426A  0E96               	movlw	150
 10339  00426C  0100               	movlb	0	; () banked
 10340  00426E  5D84               	subwf	readMAG@res& (0+255),w,b
 10341  004270  B0D8               	btfsc	status,0,c
 10342  004272  D002               	goto	u3840
 10343  004274                     u3841:
 10344  004274  0E01               	movlw	1
 10345  004276  D001               	goto	u3850
 10346  004278                     u3840:
 10347  004278  0E00               	movlw	0
 10348  00427A                     u3850:
 10349  00427A  0100               	movlb	0	; () banked
 10350  00427C  6FDC               	movwf	_MAG_signal& (0+255),b
 10351  00427E  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10352                           
 10353                           ; BSR set to: 0
 10354  004280  0012               	return		;funcret
 10355  004282                     __end_of_readMAG:
 10356                           	opt stack 0
 10357                           tblptru	equ	0xFF8
 10358                           tblptrh	equ	0xFF7
 10359                           tblptrl	equ	0xFF6
 10360                           tablat	equ	0xFF5
 10361                           prodh	equ	0xFF4
 10362                           prodl	equ	0xFF3
 10363                           intcon	equ	0xFF2
 10364                           intcon2	equ	0xFF1
 10365                           intcon3	equ	0xFF0
 10366                           postinc0	equ	0xFEE
 10367                           wreg	equ	0xFE8
 10368                           postdec1	equ	0xFE5
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           fsr2h	equ	0xFDA
 10374                           fsr2l	equ	0xFD9
 10375                           status	equ	0xFD8
 10376                           
 10377 ;; *************** function _readADC *****************
 10378 ;; Defined at:
 10379 ;;		line 15 in file "ADCFunctionality.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  channel         1    wreg     unsigned char 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  channel         1    1[BANK0 ] unsigned char 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  1    wreg      void 
 10386 ;; Registers used:
 10387 ;;		wreg, status,2, status,0, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;Total ram usage:        2 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    7
 10400 ;; This function calls:
 10401 ;;		Nothing
 10402 ;; This function is called by:
 10403 ;;		_readIR
 10404 ;;		_readMAG
 10405 ;;		_sensorTest
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text39
 10410  0046B0                     __ptext39:
 10411                           	opt stack 0
 10412  0046B0                     _readADC:
 10413                           	opt stack 19
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;incstack = 0
 10417                           ;readADC@channel stored from wreg
 10418  0046B0  0100               	movlb	0	; () banked
 10419  0046B2  6F81               	movwf	readADC@channel& (0+255),b
 10420                           
 10421                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10422  0046B4  0100               	movlb	0	; () banked
 10423  0046B6  4581               	rlncf	readADC@channel& (0+255),w,b
 10424  0046B8  46E8               	rlncf	wreg,f,c
 10425  0046BA  0BFC               	andlw	252
 10426  0046BC  6EC2               	movwf	4034,c	;volatile
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10430  0046BE  80C2               	bsf	4034,0,c	;volatile
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10434  0046C0  82C2               	bsf	4034,1,c	;volatile
 10435                           
 10436                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10437  0046C2  D009               	goto	l5278
 10438  0046C4                     l5276:
 10439  0046C4  0E34               	movlw	52
 10440  0046C6  0100               	movlb	0	; () banked
 10441  0046C8  6F80               	movwf	??_readADC& (0+255),b
 10442  0046CA  0EF1               	movlw	241
 10443  0046CC                     u7697:
 10444  0046CC  2EE8               	decfsz	wreg,f,c
 10445  0046CE  D7FE               	bra	u7697
 10446  0046D0  2F80               	decfsz	??_readADC& (0+255),f,b
 10447  0046D2  D7FC               	bra	u7697
 10448  0046D4  D000               	nop2	
 10449  0046D6                     l5278:
 10450  0046D6  A2C2               	btfss	4034,1,c	;volatile
 10451  0046D8  0012               	return	
 10452  0046DA  D7F4               	goto	l5276
 10453  0046DC                     __end_of_readADC:
 10454                           	opt stack 0
 10455                           tblptru	equ	0xFF8
 10456                           tblptrh	equ	0xFF7
 10457                           tblptrl	equ	0xFF6
 10458                           tablat	equ	0xFF5
 10459                           prodh	equ	0xFF4
 10460                           prodl	equ	0xFF3
 10461                           intcon	equ	0xFF2
 10462                           intcon2	equ	0xFF1
 10463                           intcon3	equ	0xFF0
 10464                           postinc0	equ	0xFEE
 10465                           wreg	equ	0xFE8
 10466                           postdec1	equ	0xFE5
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           fsr2h	equ	0xFDA
 10472                           fsr2l	equ	0xFD9
 10473                           status	equ	0xFD8
 10474                           
 10475 ;; *************** function _algorithmTest *****************
 10476 ;; Defined at:
 10477 ;;		line 74 in file "Test.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;		None
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  1    wreg      void 
 10484 ;; Registers used:
 10485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;Total ram usage:        2 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:   10
 10498 ;; This function calls:
 10499 ;;		_lcdInst
 10500 ;;		_printf
 10501 ;; This function is called by:
 10502 ;;		_Test
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           	psect	text40
 10507  0035E8                     __ptext40:
 10508                           	opt stack 0
 10509  0035E8                     _algorithmTest:
 10510                           	opt stack 19
 10511                           
 10512                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10513                           
 10514                           ;incstack = 0
 10515  0035E8  0E01               	movlw	1
 10516  0035EA  EC51  F024         	call	_lcdInst
 10517  0035EE  0E68               	movlw	104
 10518  0035F0  0100               	movlb	0	; () banked
 10519  0035F2  6FAB               	movwf	??_algorithmTest& (0+255),b
 10520  0035F4  0EE4               	movlw	228
 10521  0035F6                     u7707:
 10522  0035F6  2EE8               	decfsz	wreg,f,c
 10523  0035F8  D7FE               	bra	u7707
 10524  0035FA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10525  0035FC  D7FC               	bra	u7707
 10526  0035FE  F000               	nop	
 10527  003600  0E80               	movlw	128
 10528  003602  EC51  F024         	call	_lcdInst
 10529                           
 10530                           ;Test.c: 77: printf("ALGORITHM TEST");
 10531  003606  0EC6               	movlw	low STR_70
 10532  003608  0100               	movlb	0	; () banked
 10533  00360A  6F8E               	movwf	printf@f& (0+255),b
 10534  00360C  0EFE               	movlw	high STR_70
 10535  00360E  0100               	movlb	0	; () banked
 10536  003610  6F8F               	movwf	(printf@f+1)& (0+255),b
 10537  003612  ECB8  F008         	call	_printf	;wreg free
 10538                           
 10539                           ;Test.c: 78: lcdInst(0b11000000);;
 10540  003616  0EC0               	movlw	192
 10541  003618  EC51  F024         	call	_lcdInst
 10542                           
 10543                           ;Test.c: 79: printf("PUSH TO START");
 10544  00361C  0EFF               	movlw	low STR_71
 10545  00361E  0100               	movlb	0	; () banked
 10546  003620  6F8E               	movwf	printf@f& (0+255),b
 10547  003622  0EFE               	movlw	high STR_71
 10548  003624  0100               	movlb	0	; () banked
 10549  003626  6F8F               	movwf	(printf@f+1)& (0+255),b
 10550  003628  ECB8  F008         	call	_printf	;wreg free
 10551                           
 10552                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10553  00362C  0E05               	movlw	5
 10554  00362E  0100               	movlb	0	; () banked
 10555  003630  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10556  003632  0E0F               	movlw	15
 10557  003634  0100               	movlb	0	; () banked
 10558  003636  6FAB               	movwf	??_algorithmTest& (0+255),b
 10559  003638  0EF1               	movlw	241
 10560  00363A                     u7717:
 10561  00363A  2EE8               	decfsz	wreg,f,c
 10562  00363C  D7FE               	bra	u7717
 10563  00363E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10564  003640  D7FC               	bra	u7717
 10565  003642  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10566  003644  D7FA               	bra	u7717
 10567  003646                     l1063:
 10568  003646  A281               	btfss	3969,1,c	;volatile
 10569  003648  D7FE               	goto	l1063
 10570  00364A                     l1066:
 10571  00364A  B281               	btfsc	3969,1,c	;volatile
 10572  00364C  D7FE               	goto	l1066
 10573                           
 10574                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10575  00364E  0E01               	movlw	1
 10576  003650  EC51  F024         	call	_lcdInst
 10577  003654  0E68               	movlw	104
 10578  003656  0100               	movlb	0	; () banked
 10579  003658  6FAB               	movwf	??_algorithmTest& (0+255),b
 10580  00365A  0EE4               	movlw	228
 10581  00365C                     u7727:
 10582  00365C  2EE8               	decfsz	wreg,f,c
 10583  00365E  D7FE               	bra	u7727
 10584  003660  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10585  003662  D7FC               	bra	u7727
 10586  003664  F000               	nop	
 10587  003666  0E80               	movlw	128
 10588  003668  EC51  F024         	call	_lcdInst
 10589                           
 10590                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10591  00366C  0E75               	movlw	low STR_72
 10592  00366E  0100               	movlb	0	; () banked
 10593  003670  6F8E               	movwf	printf@f& (0+255),b
 10594  003672  0EFC               	movlw	high STR_72
 10595  003674  0100               	movlb	0	; () banked
 10596  003676  6F8F               	movwf	(printf@f+1)& (0+255),b
 10597  003678  ECB8  F008         	call	_printf	;wreg free
 10598                           
 10599                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10600  00367C  0EE3               	movlw	low STR_73
 10601  00367E  0100               	movlb	0	; () banked
 10602  003680  6F8E               	movwf	printf@f& (0+255),b
 10603  003682  0EFE               	movlw	high STR_73
 10604  003684  0100               	movlb	0	; () banked
 10605  003686  6F8F               	movwf	(printf@f+1)& (0+255),b
 10606  003688  ECB8  F008         	call	_printf	;wreg free
 10607                           
 10608                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10609  00368C  0E50               	movlw	low STR_74
 10610  00368E  0100               	movlb	0	; () banked
 10611  003690  6F8E               	movwf	printf@f& (0+255),b
 10612  003692  0EFF               	movlw	high STR_74
 10613  003694  0100               	movlb	0	; () banked
 10614  003696  6F8F               	movwf	(printf@f+1)& (0+255),b
 10615  003698  ECB8  F008         	call	_printf	;wreg free
 10616                           
 10617                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10618  00369C  0EA8               	movlw	low STR_75
 10619  00369E  0100               	movlb	0	; () banked
 10620  0036A0  6F8E               	movwf	printf@f& (0+255),b
 10621  0036A2  0EFE               	movlw	high STR_75
 10622  0036A4  0100               	movlb	0	; () banked
 10623  0036A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10624  0036A8  ECB8  F008         	call	_printf	;wreg free
 10625                           
 10626                           ;Test.c: 115: printf("ALG5: NO CANS");
 10627  0036AC  0EF1               	movlw	low STR_76
 10628  0036AE  0100               	movlb	0	; () banked
 10629  0036B0  6F8E               	movwf	printf@f& (0+255),b
 10630  0036B2  0EFE               	movlw	high STR_76
 10631  0036B4  0100               	movlb	0	; () banked
 10632  0036B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10633  0036B8  ECB8  F008         	call	_printf	;wreg free
 10634  0036BC  0012               	return		;funcret
 10635  0036BE                     __end_of_algorithmTest:
 10636                           	opt stack 0
 10637                           tblptru	equ	0xFF8
 10638                           tblptrh	equ	0xFF7
 10639                           tblptrl	equ	0xFF6
 10640                           tablat	equ	0xFF5
 10641                           prodh	equ	0xFF4
 10642                           prodl	equ	0xFF3
 10643                           intcon	equ	0xFF2
 10644                           intcon2	equ	0xFF1
 10645                           intcon3	equ	0xFF0
 10646                           postinc0	equ	0xFEE
 10647                           wreg	equ	0xFE8
 10648                           postdec1	equ	0xFE5
 10649                           fsr1l	equ	0xFE1
 10650                           indf2	equ	0xFDF
 10651                           postinc2	equ	0xFDE
 10652                           postdec2	equ	0xFDD
 10653                           fsr2h	equ	0xFDA
 10654                           fsr2l	equ	0xFD9
 10655                           status	equ	0xFD8
 10656                           
 10657 ;; *************** function _actuatorTest *****************
 10658 ;; Defined at:
 10659 ;;		line 195 in file "Test.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  i               1   45[BANK0 ] unsigned char 
 10664 ;;  i               1   67[BANK0 ] unsigned char 
 10665 ;;  i               1   66[BANK0 ] unsigned char 
 10666 ;;  i               1   65[BANK0 ] unsigned char 
 10667 ;;  i               1   64[BANK0 ] unsigned char 
 10668 ;;  i               1   63[BANK0 ] unsigned char 
 10669 ;;  i               1   62[BANK0 ] unsigned char 
 10670 ;;  i               1   61[BANK0 ] unsigned char 
 10671 ;;  i               1   60[BANK0 ] unsigned char 
 10672 ;;  i               1   59[BANK0 ] unsigned char 
 10673 ;;  i               1   58[BANK0 ] unsigned char 
 10674 ;;  i               1   57[BANK0 ] unsigned char 
 10675 ;;  i               1   56[BANK0 ] unsigned char 
 10676 ;;  i               1   55[BANK0 ] unsigned char 
 10677 ;;  i               1   54[BANK0 ] unsigned char 
 10678 ;;  i               1   53[BANK0 ] unsigned char 
 10679 ;;  i               1   52[BANK0 ] unsigned char 
 10680 ;;  i               1   51[BANK0 ] unsigned char 
 10681 ;;  i               1   50[BANK0 ] unsigned char 
 10682 ;;  i               1   49[BANK0 ] unsigned char 
 10683 ;;  i               1   48[BANK0 ] unsigned char 
 10684 ;;  i               1   47[BANK0 ] unsigned char 
 10685 ;;  i               1   46[BANK0 ] unsigned char 
 10686 ;;  i               2   68[BANK0 ] int 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;Total ram usage:       27 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:   10
 10703 ;; This function calls:
 10704 ;;		_lcdInst
 10705 ;;		_printf
 10706 ;;		_updateServoPosition
 10707 ;; This function is called by:
 10708 ;;		_Test
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text41
 10713  000012                     __ptext41:
 10714                           	opt stack 0
 10715  000012                     _actuatorTest:
 10716                           	opt stack 19
 10717                           
 10718                           ;Test.c: 197: int i = 0;
 10719                           
 10720                           ;incstack = 0
 10721  000012  0E00               	movlw	0
 10722  000014  0100               	movlb	0	; () banked
 10723  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10724  000018  0E00               	movlw	0
 10725  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10729  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10733  00001E  0E01               	movlw	1
 10734  000020  EC51  F024         	call	_lcdInst
 10735  000024  0E68               	movlw	104
 10736  000026  0100               	movlb	0	; () banked
 10737  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10738  00002A  0EE4               	movlw	228
 10739  00002C                     u7737:
 10740  00002C  2EE8               	decfsz	wreg,f,c
 10741  00002E  D7FE               	bra	u7737
 10742  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10743  000032  D7FC               	bra	u7737
 10744  000034  F000               	nop	
 10745  000036  0E80               	movlw	128
 10746  000038  EC51  F024         	call	_lcdInst
 10747                           
 10748                           ;Test.c: 201: printf("ACTUATORS");
 10749  00003C  0E91               	movlw	low STR_88
 10750  00003E  0100               	movlb	0	; () banked
 10751  000040  6F8E               	movwf	printf@f& (0+255),b
 10752  000042  0EFF               	movlw	high STR_88
 10753  000044  0100               	movlb	0	; () banked
 10754  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10755  000048  ECB8  F008         	call	_printf	;wreg free
 10756                           
 10757                           ;Test.c: 202: lcdInst(0b11000000);;
 10758  00004C  0EC0               	movlw	192
 10759  00004E  EC51  F024         	call	_lcdInst
 10760                           
 10761                           ;Test.c: 203: printf("PUSH TO START");
 10762  000052  0EFF               	movlw	low STR_71
 10763  000054  0100               	movlb	0	; () banked
 10764  000056  6F8E               	movwf	printf@f& (0+255),b
 10765  000058  0EFE               	movlw	high STR_71
 10766  00005A  0100               	movlb	0	; () banked
 10767  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10768  00005E  ECB8  F008         	call	_printf	;wreg free
 10769                           
 10770                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10771  000062  0E05               	movlw	5
 10772  000064  0100               	movlb	0	; () banked
 10773  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10774  000068  0E0F               	movlw	15
 10775  00006A  0100               	movlb	0	; () banked
 10776  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10777  00006E  0EF1               	movlw	241
 10778  000070                     u7747:
 10779  000070  2EE8               	decfsz	wreg,f,c
 10780  000072  D7FE               	bra	u7747
 10781  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10782  000076  D7FC               	bra	u7747
 10783  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10784  00007A  D7FA               	bra	u7747
 10785  00007C                     l1098:
 10786  00007C  A281               	btfss	3969,1,c	;volatile
 10787  00007E  D7FE               	goto	l1098
 10788  000080                     l1101:
 10789  000080  B281               	btfsc	3969,1,c	;volatile
 10790  000082  D7FE               	goto	l1101
 10791                           
 10792                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10793  000084  0E01               	movlw	1
 10794  000086  EC51  F024         	call	_lcdInst
 10795  00008A  0E68               	movlw	104
 10796  00008C  0100               	movlb	0	; () banked
 10797  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10798  000090  0EE4               	movlw	228
 10799  000092                     u7757:
 10800  000092  2EE8               	decfsz	wreg,f,c
 10801  000094  D7FE               	bra	u7757
 10802  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10803  000098  D7FC               	bra	u7757
 10804  00009A  F000               	nop	
 10805  00009C  0E80               	movlw	128
 10806  00009E  EC51  F024         	call	_lcdInst
 10807                           
 10808                           ;Test.c: 212: printf("TST: DC MOTORS");
 10809  0000A2  0EB7               	movlw	low STR_90
 10810  0000A4  0100               	movlb	0	; () banked
 10811  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10812  0000A8  0EFE               	movlw	high STR_90
 10813  0000AA  0100               	movlb	0	; () banked
 10814  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10815  0000AE  ECB8  F008         	call	_printf	;wreg free
 10816                           
 10817                           ;Test.c: 213: lcdInst(0b11000000);;
 10818  0000B2  0EC0               	movlw	192
 10819  0000B4  EC51  F024         	call	_lcdInst
 10820                           
 10821                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10822  0000B8  0ED5               	movlw	low STR_91
 10823  0000BA  0100               	movlb	0	; () banked
 10824  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10825  0000BE  0EFE               	movlw	high STR_91
 10826  0000C0  0100               	movlb	0	; () banked
 10827  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10828  0000C4  ECB8  F008         	call	_printf	;wreg free
 10829                           
 10830                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10831  0000C8  8A89               	bsf	3977,5,c	;volatile
 10832                           
 10833                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10834  0000CA  0E00               	movlw	0
 10835  0000CC  0100               	movlb	0	; () banked
 10836  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10837  0000D0  0E00               	movlw	0
 10838  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10839                           
 10840                           ; BSR set to: 0
 10841  0000D4  0100               	movlb	0	; () banked
 10842  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10843  0000D8  D008               	goto	l6748
 10844  0000DA  0100               	movlb	0	; () banked
 10845  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10846  0000DE  E123               	bnz	l1105
 10847  0000E0  0E05               	movlw	5
 10848  0000E2  0100               	movlb	0	; () banked
 10849  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10850  0000E6  B0D8               	btfsc	status,0,c
 10851  0000E8  D01E               	goto	l1105
 10852  0000EA                     l6748:
 10853                           
 10854                           ; BSR set to: 0
 10855  0000EA  0E00               	movlw	0
 10856  0000EC  0100               	movlb	0	; () banked
 10857  0000EE  6FAD               	movwf	actuatorTest@i_1637& (0+255),b
 10858  0000F0                     l6750:
 10859                           
 10860                           ; BSR set to: 0
 10861  0000F0  0E63               	movlw	99
 10862  0000F2  0100               	movlb	0	; () banked
 10863  0000F4  65AD               	cpfsgt	actuatorTest@i_1637& (0+255),b
 10864  0000F6  D001               	goto	l6754
 10865  0000F8  D00C               	goto	l6758
 10866  0000FA                     l6754:
 10867                           
 10868                           ; BSR set to: 0
 10869  0000FA  0E68               	movlw	104
 10870  0000FC  0100               	movlb	0	; () banked
 10871  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10872  000100  0EE4               	movlw	228
 10873  000102                     u7767:
 10874  000102  2EE8               	decfsz	wreg,f,c
 10875  000104  D7FE               	bra	u7767
 10876  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10877  000108  D7FC               	bra	u7767
 10878  00010A  F000               	nop	
 10879  00010C  0100               	movlb	0	; () banked
 10880  00010E  2BAD               	incf	actuatorTest@i_1637& (0+255),f,b
 10881  000110  D7EF               	goto	l6750
 10882  000112                     l6758:
 10883                           
 10884                           ; BSR set to: 0
 10885  000112  0100               	movlb	0	; () banked
 10886  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10887  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10888                           
 10889                           ; BSR set to: 0
 10890  000118  0100               	movlb	0	; () banked
 10891  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10892  00011C  D7E6               	goto	l6748
 10893  00011E  0100               	movlb	0	; () banked
 10894  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10895  000122  E101               	bnz	u5230
 10896  000124  D7DD               	goto	L7
 10897  000126                     u5230:
 10898  000126                     l1105:
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10902  000126  9A89               	bcf	3977,5,c	;volatile
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10906  000128  0E01               	movlw	1
 10907  00012A  EC51  F024         	call	_lcdInst
 10908  00012E  0E68               	movlw	104
 10909  000130  0100               	movlb	0	; () banked
 10910  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10911  000134  0EE4               	movlw	228
 10912  000136                     u7777:
 10913  000136  2EE8               	decfsz	wreg,f,c
 10914  000138  D7FE               	bra	u7777
 10915  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10916  00013C  D7FC               	bra	u7777
 10917  00013E  F000               	nop	
 10918  000140  0E80               	movlw	128
 10919  000142  EC51  F024         	call	_lcdInst
 10920                           
 10921                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10922  000146  0E97               	movlw	low STR_92
 10923  000148  0100               	movlb	0	; () banked
 10924  00014A  6F8E               	movwf	printf@f& (0+255),b
 10925  00014C  0EFC               	movlw	high STR_92
 10926  00014E  0100               	movlb	0	; () banked
 10927  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10928  000152  ECB8  F008         	call	_printf	;wreg free
 10929                           
 10930                           ;Test.c: 225: lcdInst(0b11000000);;
 10931  000156  0EC0               	movlw	192
 10932  000158  EC51  F024         	call	_lcdInst
 10933                           
 10934                           ;Test.c: 226: printf("PIN RA3...");
 10935  00015C  0E5C               	movlw	low STR_93
 10936  00015E  0100               	movlb	0	; () banked
 10937  000160  6F8E               	movwf	printf@f& (0+255),b
 10938  000162  0EFF               	movlw	high STR_93
 10939  000164  0100               	movlb	0	; () banked
 10940  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10941  000168  ECB8  F008         	call	_printf	;wreg free
 10942                           
 10943                           ;Test.c: 227: for(i=0;i<5;i++){
 10944  00016C  0E00               	movlw	0
 10945  00016E  0100               	movlb	0	; () banked
 10946  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10947  000172  0E00               	movlw	0
 10948  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10949                           
 10950                           ; BSR set to: 0
 10951  000176  0100               	movlb	0	; () banked
 10952  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10953  00017A  D008               	goto	l1108
 10954  00017C  0100               	movlb	0	; () banked
 10955  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10956  000180  E12C               	bnz	l1109
 10957  000182  0E05               	movlw	5
 10958  000184  0100               	movlb	0	; () banked
 10959  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10960  000188  B0D8               	btfsc	status,0,c
 10961  00018A  D027               	goto	l1109
 10962  00018C                     l1108:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10966  00018C  8689               	bsf	3977,3,c	;volatile
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10970  00018E  0E0D               	movlw	13
 10971  000190  0100               	movlb	0	; () banked
 10972  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10973  000194  0E2D               	movlw	45
 10974  000196  0100               	movlb	0	; () banked
 10975  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10976  00019A  0ED7               	movlw	215
 10977  00019C                     u7787:
 10978  00019C  2EE8               	decfsz	wreg,f,c
 10979  00019E  D7FE               	bra	u7787
 10980  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10981  0001A2  D7FC               	bra	u7787
 10982  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10983  0001A6  D7FA               	bra	u7787
 10984  0001A8  D000               	nop2	
 10985                           
 10986                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10987  0001AA  9689               	bcf	3977,3,c	;volatile
 10988                           
 10989                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10990  0001AC  0E1D               	movlw	29
 10991  0001AE  0100               	movlb	0	; () banked
 10992  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10993  0001B2  0E69               	movlw	105
 10994  0001B4  0100               	movlb	0	; () banked
 10995  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10996  0001B8  0EA5               	movlw	165
 10997  0001BA                     u7797:
 10998  0001BA  2EE8               	decfsz	wreg,f,c
 10999  0001BC  D7FE               	bra	u7797
 11000  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11001  0001C0  D7FC               	bra	u7797
 11002  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11003  0001C4  D7FA               	bra	u7797
 11004  0001C6  0100               	movlb	0	; () banked
 11005  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11006  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11007  0001CC  0100               	movlb	0	; () banked
 11008  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11009  0001D0  D7DD               	goto	l1108
 11010  0001D2  0100               	movlb	0	; () banked
 11011  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11012  0001D6  E101               	bnz	u5250
 11013  0001D8  D7D4               	goto	L8
 11014  0001DA                     u5250:
 11015  0001DA                     l1109:
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;Test.c: 232: }
 11019                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 11020  0001DA  9689               	bcf	3977,3,c	;volatile
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11024  0001DC  0E01               	movlw	1
 11025  0001DE  EC51  F024         	call	_lcdInst
 11026  0001E2  0E68               	movlw	104
 11027  0001E4  0100               	movlb	0	; () banked
 11028  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11029  0001E8  0EE4               	movlw	228
 11030  0001EA                     u7807:
 11031  0001EA  2EE8               	decfsz	wreg,f,c
 11032  0001EC  D7FE               	bra	u7807
 11033  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11034  0001F0  D7FC               	bra	u7807
 11035  0001F2  F000               	nop	
 11036  0001F4  0E80               	movlw	128
 11037  0001F6  EC51  F024         	call	_lcdInst
 11038                           
 11039                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 11040  0001FA  0EA8               	movlw	low STR_94
 11041  0001FC  0100               	movlb	0	; () banked
 11042  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11043  000200  0EFC               	movlw	high STR_94
 11044  000202  0100               	movlb	0	; () banked
 11045  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11046  000206  ECB8  F008         	call	_printf	;wreg free
 11047                           
 11048                           ;Test.c: 241: lcdInst(0b11000000);;
 11049  00020A  0EC0               	movlw	192
 11050  00020C  EC51  F024         	call	_lcdInst
 11051                           
 11052                           ;Test.c: 242: printf("PIN RA4...");
 11053  000210  0E67               	movlw	low STR_95
 11054  000212  0100               	movlb	0	; () banked
 11055  000214  6F8E               	movwf	printf@f& (0+255),b
 11056  000216  0EFF               	movlw	high STR_95
 11057  000218  0100               	movlb	0	; () banked
 11058  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11059  00021C  ECB8  F008         	call	_printf	;wreg free
 11060                           
 11061                           ;Test.c: 243: for(i=0;i<5;i++){
 11062  000220  0E00               	movlw	0
 11063  000222  0100               	movlb	0	; () banked
 11064  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11065  000226  0E00               	movlw	0
 11066  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069  00022A  0100               	movlb	0	; () banked
 11070  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11071  00022E  D008               	goto	l1110
 11072  000230  0100               	movlb	0	; () banked
 11073  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11074  000234  E12C               	bnz	l1111
 11075  000236  0E05               	movlw	5
 11076  000238  0100               	movlb	0	; () banked
 11077  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11078  00023C  B0D8               	btfsc	status,0,c
 11079  00023E  D027               	goto	l1111
 11080  000240                     l1110:
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;Test.c: 244: LATAbits.LATA4 = 1;
 11084  000240  8889               	bsf	3977,4,c	;volatile
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 11088  000242  0E0D               	movlw	13
 11089  000244  0100               	movlb	0	; () banked
 11090  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11091  000248  0E2D               	movlw	45
 11092  00024A  0100               	movlb	0	; () banked
 11093  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11094  00024E  0ED7               	movlw	215
 11095  000250                     u7817:
 11096  000250  2EE8               	decfsz	wreg,f,c
 11097  000252  D7FE               	bra	u7817
 11098  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11099  000256  D7FC               	bra	u7817
 11100  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11101  00025A  D7FA               	bra	u7817
 11102  00025C  D000               	nop2	
 11103                           
 11104                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 11105  00025E  9889               	bcf	3977,4,c	;volatile
 11106                           
 11107                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11108  000260  0E1D               	movlw	29
 11109  000262  0100               	movlb	0	; () banked
 11110  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11111  000266  0E69               	movlw	105
 11112  000268  0100               	movlb	0	; () banked
 11113  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11114  00026C  0EA5               	movlw	165
 11115  00026E                     u7827:
 11116  00026E  2EE8               	decfsz	wreg,f,c
 11117  000270  D7FE               	bra	u7827
 11118  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11119  000274  D7FC               	bra	u7827
 11120  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11121  000278  D7FA               	bra	u7827
 11122  00027A  0100               	movlb	0	; () banked
 11123  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11124  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11125  000280  0100               	movlb	0	; () banked
 11126  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11127  000284  D7DD               	goto	l1110
 11128  000286  0100               	movlb	0	; () banked
 11129  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11130  00028A  E101               	bnz	u5270
 11131  00028C  D7D4               	goto	L9
 11132  00028E                     u5270:
 11133  00028E                     l1111:
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;Test.c: 248: }
 11137                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 11138  00028E  9889               	bcf	3977,4,c	;volatile
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11142  000290  0E01               	movlw	1
 11143  000292  EC51  F024         	call	_lcdInst
 11144  000296  0E68               	movlw	104
 11145  000298  0100               	movlb	0	; () banked
 11146  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11147  00029C  0EE4               	movlw	228
 11148  00029E                     u7837:
 11149  00029E  2EE8               	decfsz	wreg,f,c
 11150  0002A0  D7FE               	bra	u7837
 11151  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11152  0002A4  D7FC               	bra	u7837
 11153  0002A6  F000               	nop	
 11154  0002A8  0E80               	movlw	128
 11155  0002AA  EC51  F024         	call	_lcdInst
 11156                           
 11157                           ;Test.c: 253: machine_state = Sorting_state;
 11158  0002AE  0E01               	movlw	1
 11159  0002B0  0100               	movlb	0	; () banked
 11160  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;Test.c: 254: was_low_1 = 0;
 11164  0002B4  0E00               	movlw	0
 11165  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11166  0002B8  0E00               	movlw	0
 11167  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;Test.c: 255: was_low_1 = 0;
 11171  0002BC  0E00               	movlw	0
 11172  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11173  0002C0  0E00               	movlw	0
 11174  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;Test.c: 262: printf("TST: PAN SERVO");
 11178  0002C4  0E99               	movlw	low STR_96
 11179  0002C6  0100               	movlb	0	; () banked
 11180  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11181  0002CA  0EFE               	movlw	high STR_96
 11182  0002CC  0100               	movlb	0	; () banked
 11183  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11184  0002D0  ECB8  F008         	call	_printf	;wreg free
 11185                           
 11186                           ;Test.c: 263: lcdInst(0b11000000);;
 11187  0002D4  0EC0               	movlw	192
 11188  0002D6  EC51  F024         	call	_lcdInst
 11189                           
 11190                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11191  0002DA  0E20               	movlw	low STR_97
 11192  0002DC  0100               	movlb	0	; () banked
 11193  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11194  0002E0  0EFC               	movlw	high STR_97
 11195  0002E2  0100               	movlb	0	; () banked
 11196  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11197  0002E6  ECB8  F008         	call	_printf	;wreg free
 11198                           
 11199                           ;Test.c: 265: updateServoPosition(1200, 1);
 11200  0002EA  0E04               	movlw	4
 11201  0002EC  0100               	movlb	0	; () banked
 11202  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11203  0002F0  0EB0               	movlw	176
 11204  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11205  0002F4  0E00               	movlw	0
 11206  0002F6  0100               	movlb	0	; () banked
 11207  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11208  0002FA  0E01               	movlw	1
 11209  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11210  0002FE  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11211                           
 11212                           ;Test.c: 266: TMR1ON = 1;
 11213  000302  80CD               	bsf	4045,0,c	;volatile
 11214                           
 11215                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11216  000304  0E00               	movlw	0
 11217  000306  0100               	movlb	0	; () banked
 11218  000308  6FAE               	movwf	actuatorTest@i_1644& (0+255),b
 11219  00030A                     l6834:
 11220                           
 11221                           ; BSR set to: 0
 11222  00030A  0E63               	movlw	99
 11223  00030C  0100               	movlb	0	; () banked
 11224  00030E  65AE               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11225  000310  D001               	goto	l6838
 11226  000312  D00C               	goto	l6842
 11227  000314                     l6838:
 11228                           
 11229                           ; BSR set to: 0
 11230  000314  0E68               	movlw	104
 11231  000316  0100               	movlb	0	; () banked
 11232  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11233  00031A  0EE4               	movlw	228
 11234  00031C                     u7847:
 11235  00031C  2EE8               	decfsz	wreg,f,c
 11236  00031E  D7FE               	bra	u7847
 11237  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11238  000322  D7FC               	bra	u7847
 11239  000324  F000               	nop	
 11240  000326  0100               	movlb	0	; () banked
 11241  000328  2BAE               	incf	actuatorTest@i_1644& (0+255),f,b
 11242  00032A  D7EF               	goto	l6834
 11243  00032C                     l6842:
 11244                           
 11245                           ; BSR set to: 0
 11246  00032C  0E00               	movlw	0
 11247  00032E  0100               	movlb	0	; () banked
 11248  000330  6FAF               	movwf	actuatorTest@i_1645& (0+255),b
 11249  000332                     l6844:
 11250                           
 11251                           ; BSR set to: 0
 11252  000332  0E63               	movlw	99
 11253  000334  0100               	movlb	0	; () banked
 11254  000336  65AF               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11255  000338  D001               	goto	l6848
 11256  00033A  D00C               	goto	l6852
 11257  00033C                     l6848:
 11258                           
 11259                           ; BSR set to: 0
 11260  00033C  0E68               	movlw	104
 11261  00033E  0100               	movlb	0	; () banked
 11262  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11263  000342  0EE4               	movlw	228
 11264  000344                     u7857:
 11265  000344  2EE8               	decfsz	wreg,f,c
 11266  000346  D7FE               	bra	u7857
 11267  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11268  00034A  D7FC               	bra	u7857
 11269  00034C  F000               	nop	
 11270  00034E  0100               	movlb	0	; () banked
 11271  000350  2BAF               	incf	actuatorTest@i_1645& (0+255),f,b
 11272  000352  D7EF               	goto	l6844
 11273  000354                     l6852:
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11277  000354  0E80               	movlw	128
 11278  000356  EC51  F024         	call	_lcdInst
 11279  00035A  0EC0               	movlw	192
 11280  00035C  EC51  F024         	call	_lcdInst
 11281                           
 11282                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11283  000360  0E0F               	movlw	low STR_98
 11284  000362  0100               	movlb	0	; () banked
 11285  000364  6F8E               	movwf	printf@f& (0+255),b
 11286  000366  0EFC               	movlw	high STR_98
 11287  000368  0100               	movlb	0	; () banked
 11288  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11289  00036C  ECB8  F008         	call	_printf	;wreg free
 11290                           
 11291                           ;Test.c: 271: updateServoPosition(500, 1);
 11292  000370  0E01               	movlw	1
 11293  000372  0100               	movlb	0	; () banked
 11294  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11295  000376  0EF4               	movlw	244
 11296  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11297  00037A  0E00               	movlw	0
 11298  00037C  0100               	movlb	0	; () banked
 11299  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11300  000380  0E01               	movlw	1
 11301  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11302  000384  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11303                           
 11304                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11305  000388  0E00               	movlw	0
 11306  00038A  0100               	movlb	0	; () banked
 11307  00038C  6FB0               	movwf	actuatorTest@i_1647& (0+255),b
 11308  00038E                     l6860:
 11309                           
 11310                           ; BSR set to: 0
 11311  00038E  0E63               	movlw	99
 11312  000390  0100               	movlb	0	; () banked
 11313  000392  65B0               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11314  000394  D001               	goto	l6864
 11315  000396  D00C               	goto	l6868
 11316  000398                     l6864:
 11317                           
 11318                           ; BSR set to: 0
 11319  000398  0E68               	movlw	104
 11320  00039A  0100               	movlb	0	; () banked
 11321  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11322  00039E  0EE4               	movlw	228
 11323  0003A0                     u7867:
 11324  0003A0  2EE8               	decfsz	wreg,f,c
 11325  0003A2  D7FE               	bra	u7867
 11326  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11327  0003A6  D7FC               	bra	u7867
 11328  0003A8  F000               	nop	
 11329  0003AA  0100               	movlb	0	; () banked
 11330  0003AC  2BB0               	incf	actuatorTest@i_1647& (0+255),f,b
 11331  0003AE  D7EF               	goto	l6860
 11332  0003B0                     l6868:
 11333                           
 11334                           ; BSR set to: 0
 11335  0003B0  0E00               	movlw	0
 11336  0003B2  0100               	movlb	0	; () banked
 11337  0003B4  6FB1               	movwf	actuatorTest@i_1648& (0+255),b
 11338  0003B6                     l6870:
 11339                           
 11340                           ; BSR set to: 0
 11341  0003B6  0E63               	movlw	99
 11342  0003B8  0100               	movlb	0	; () banked
 11343  0003BA  65B1               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11344  0003BC  D001               	goto	l6874
 11345  0003BE  D00C               	goto	l6878
 11346  0003C0                     l6874:
 11347                           
 11348                           ; BSR set to: 0
 11349  0003C0  0E68               	movlw	104
 11350  0003C2  0100               	movlb	0	; () banked
 11351  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11352  0003C6  0EE4               	movlw	228
 11353  0003C8                     u7877:
 11354  0003C8  2EE8               	decfsz	wreg,f,c
 11355  0003CA  D7FE               	bra	u7877
 11356  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11357  0003CE  D7FC               	bra	u7877
 11358  0003D0  F000               	nop	
 11359  0003D2  0100               	movlb	0	; () banked
 11360  0003D4  2BB1               	incf	actuatorTest@i_1648& (0+255),f,b
 11361  0003D6  D7EF               	goto	l6870
 11362  0003D8                     l6878:
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11366  0003D8  0E80               	movlw	128
 11367  0003DA  EC51  F024         	call	_lcdInst
 11368  0003DE  0EC0               	movlw	192
 11369  0003E0  EC51  F024         	call	_lcdInst
 11370                           
 11371                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11372  0003E4  0EED               	movlw	low STR_99
 11373  0003E6  0100               	movlb	0	; () banked
 11374  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11375  0003EA  0EFB               	movlw	high STR_99
 11376  0003EC  0100               	movlb	0	; () banked
 11377  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11378  0003F0  ECB8  F008         	call	_printf	;wreg free
 11379                           
 11380                           ;Test.c: 276: updateServoPosition(2100, 1);
 11381  0003F4  0E08               	movlw	8
 11382  0003F6  0100               	movlb	0	; () banked
 11383  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11384  0003FA  0E34               	movlw	52
 11385  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11386  0003FE  0E00               	movlw	0
 11387  000400  0100               	movlb	0	; () banked
 11388  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11389  000404  0E01               	movlw	1
 11390  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11391  000408  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11392                           
 11393                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11394  00040C  0E00               	movlw	0
 11395  00040E  0100               	movlb	0	; () banked
 11396  000410  6FB2               	movwf	actuatorTest@i_1650& (0+255),b
 11397  000412                     l6886:
 11398                           
 11399                           ; BSR set to: 0
 11400  000412  0E63               	movlw	99
 11401  000414  0100               	movlb	0	; () banked
 11402  000416  65B2               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11403  000418  D001               	goto	l6890
 11404  00041A  D00C               	goto	l6894
 11405  00041C                     l6890:
 11406                           
 11407                           ; BSR set to: 0
 11408  00041C  0E68               	movlw	104
 11409  00041E  0100               	movlb	0	; () banked
 11410  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11411  000422  0EE4               	movlw	228
 11412  000424                     u7887:
 11413  000424  2EE8               	decfsz	wreg,f,c
 11414  000426  D7FE               	bra	u7887
 11415  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11416  00042A  D7FC               	bra	u7887
 11417  00042C  F000               	nop	
 11418  00042E  0100               	movlb	0	; () banked
 11419  000430  2BB2               	incf	actuatorTest@i_1650& (0+255),f,b
 11420  000432  D7EF               	goto	l6886
 11421  000434                     l6894:
 11422                           
 11423                           ; BSR set to: 0
 11424  000434  0E00               	movlw	0
 11425  000436  0100               	movlb	0	; () banked
 11426  000438  6FB3               	movwf	actuatorTest@i_1651& (0+255),b
 11427  00043A                     l6896:
 11428                           
 11429                           ; BSR set to: 0
 11430  00043A  0E63               	movlw	99
 11431  00043C  0100               	movlb	0	; () banked
 11432  00043E  65B3               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11433  000440  D001               	goto	l6900
 11434  000442  D00C               	goto	l6904
 11435  000444                     l6900:
 11436                           
 11437                           ; BSR set to: 0
 11438  000444  0E68               	movlw	104
 11439  000446  0100               	movlb	0	; () banked
 11440  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11441  00044A  0EE4               	movlw	228
 11442  00044C                     u7897:
 11443  00044C  2EE8               	decfsz	wreg,f,c
 11444  00044E  D7FE               	bra	u7897
 11445  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11446  000452  D7FC               	bra	u7897
 11447  000454  F000               	nop	
 11448  000456  0100               	movlb	0	; () banked
 11449  000458  2BB3               	incf	actuatorTest@i_1651& (0+255),f,b
 11450  00045A  D7EF               	goto	l6896
 11451  00045C                     l6904:
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11455  00045C  0E80               	movlw	128
 11456  00045E  EC51  F024         	call	_lcdInst
 11457  000462  0EC0               	movlw	192
 11458  000464  EC51  F024         	call	_lcdInst
 11459                           
 11460                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11461  000468  0E42               	movlw	low STR_100
 11462  00046A  0100               	movlb	0	; () banked
 11463  00046C  6F8E               	movwf	printf@f& (0+255),b
 11464  00046E  0EFC               	movlw	high STR_100
 11465  000470  0100               	movlb	0	; () banked
 11466  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11467  000474  ECB8  F008         	call	_printf	;wreg free
 11468                           
 11469                           ;Test.c: 281: updateServoPosition(1700, 1);
 11470  000478  0E06               	movlw	6
 11471  00047A  0100               	movlb	0	; () banked
 11472  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11473  00047E  0EA4               	movlw	164
 11474  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11475  000482  0E00               	movlw	0
 11476  000484  0100               	movlb	0	; () banked
 11477  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11478  000488  0E01               	movlw	1
 11479  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11480  00048C  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11481                           
 11482                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11483  000490  0E00               	movlw	0
 11484  000492  0100               	movlb	0	; () banked
 11485  000494  6FB4               	movwf	actuatorTest@i_1653& (0+255),b
 11486  000496                     l6912:
 11487                           
 11488                           ; BSR set to: 0
 11489  000496  0E63               	movlw	99
 11490  000498  0100               	movlb	0	; () banked
 11491  00049A  65B4               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11492  00049C  D001               	goto	l6916
 11493  00049E  D00C               	goto	l6920
 11494  0004A0                     l6916:
 11495                           
 11496                           ; BSR set to: 0
 11497  0004A0  0E68               	movlw	104
 11498  0004A2  0100               	movlb	0	; () banked
 11499  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11500  0004A6  0EE4               	movlw	228
 11501  0004A8                     u7907:
 11502  0004A8  2EE8               	decfsz	wreg,f,c
 11503  0004AA  D7FE               	bra	u7907
 11504  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11505  0004AE  D7FC               	bra	u7907
 11506  0004B0  F000               	nop	
 11507  0004B2  0100               	movlb	0	; () banked
 11508  0004B4  2BB4               	incf	actuatorTest@i_1653& (0+255),f,b
 11509  0004B6  D7EF               	goto	l6912
 11510  0004B8                     l6920:
 11511                           
 11512                           ; BSR set to: 0
 11513  0004B8  0E00               	movlw	0
 11514  0004BA  0100               	movlb	0	; () banked
 11515  0004BC  6FB5               	movwf	actuatorTest@i_1654& (0+255),b
 11516  0004BE                     l6922:
 11517                           
 11518                           ; BSR set to: 0
 11519  0004BE  0E63               	movlw	99
 11520  0004C0  0100               	movlb	0	; () banked
 11521  0004C2  65B5               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11522  0004C4  D001               	goto	l6926
 11523  0004C6  D00C               	goto	l6930
 11524  0004C8                     l6926:
 11525                           
 11526                           ; BSR set to: 0
 11527  0004C8  0E68               	movlw	104
 11528  0004CA  0100               	movlb	0	; () banked
 11529  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11530  0004CE  0EE4               	movlw	228
 11531  0004D0                     u7917:
 11532  0004D0  2EE8               	decfsz	wreg,f,c
 11533  0004D2  D7FE               	bra	u7917
 11534  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11535  0004D6  D7FC               	bra	u7917
 11536  0004D8  F000               	nop	
 11537  0004DA  0100               	movlb	0	; () banked
 11538  0004DC  2BB5               	incf	actuatorTest@i_1654& (0+255),f,b
 11539  0004DE  D7EF               	goto	l6922
 11540  0004E0                     l6930:
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11544  0004E0  0E80               	movlw	128
 11545  0004E2  EC51  F024         	call	_lcdInst
 11546  0004E6  0EC0               	movlw	192
 11547  0004E8  EC51  F024         	call	_lcdInst
 11548                           
 11549                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11550  0004EC  0E53               	movlw	low STR_101
 11551  0004EE  0100               	movlb	0	; () banked
 11552  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11553  0004F2  0EFC               	movlw	high STR_101
 11554  0004F4  0100               	movlb	0	; () banked
 11555  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11556  0004F8  ECB8  F008         	call	_printf	;wreg free
 11557                           
 11558                           ;Test.c: 286: updateServoPosition(750, 1);
 11559  0004FC  0E02               	movlw	2
 11560  0004FE  0100               	movlb	0	; () banked
 11561  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11562  000502  0EEE               	movlw	238
 11563  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11564  000506  0E00               	movlw	0
 11565  000508  0100               	movlb	0	; () banked
 11566  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11567  00050C  0E01               	movlw	1
 11568  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11569  000510  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11570                           
 11571                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11572  000514  0E00               	movlw	0
 11573  000516  0100               	movlb	0	; () banked
 11574  000518  6FB6               	movwf	actuatorTest@i_1656& (0+255),b
 11575  00051A                     l6938:
 11576                           
 11577                           ; BSR set to: 0
 11578  00051A  0E63               	movlw	99
 11579  00051C  0100               	movlb	0	; () banked
 11580  00051E  65B6               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11581  000520  D001               	goto	l6942
 11582  000522  D00C               	goto	l6946
 11583  000524                     l6942:
 11584                           
 11585                           ; BSR set to: 0
 11586  000524  0E68               	movlw	104
 11587  000526  0100               	movlb	0	; () banked
 11588  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11589  00052A  0EE4               	movlw	228
 11590  00052C                     u7927:
 11591  00052C  2EE8               	decfsz	wreg,f,c
 11592  00052E  D7FE               	bra	u7927
 11593  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11594  000532  D7FC               	bra	u7927
 11595  000534  F000               	nop	
 11596  000536  0100               	movlb	0	; () banked
 11597  000538  2BB6               	incf	actuatorTest@i_1656& (0+255),f,b
 11598  00053A  D7EF               	goto	l6938
 11599  00053C                     l6946:
 11600                           
 11601                           ; BSR set to: 0
 11602  00053C  0E00               	movlw	0
 11603  00053E  0100               	movlb	0	; () banked
 11604  000540  6FB7               	movwf	actuatorTest@i_1657& (0+255),b
 11605  000542                     l6948:
 11606                           
 11607                           ; BSR set to: 0
 11608  000542  0E63               	movlw	99
 11609  000544  0100               	movlb	0	; () banked
 11610  000546  65B7               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11611  000548  D001               	goto	l6952
 11612  00054A  D00C               	goto	l6956
 11613  00054C                     l6952:
 11614                           
 11615                           ; BSR set to: 0
 11616  00054C  0E68               	movlw	104
 11617  00054E  0100               	movlb	0	; () banked
 11618  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11619  000552  0EE4               	movlw	228
 11620  000554                     u7937:
 11621  000554  2EE8               	decfsz	wreg,f,c
 11622  000556  D7FE               	bra	u7937
 11623  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11624  00055A  D7FC               	bra	u7937
 11625  00055C  F000               	nop	
 11626  00055E  0100               	movlb	0	; () banked
 11627  000560  2BB7               	incf	actuatorTest@i_1657& (0+255),f,b
 11628  000562  D7EF               	goto	l6948
 11629  000564                     l6956:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11633  000564  0E80               	movlw	128
 11634  000566  EC51  F024         	call	_lcdInst
 11635  00056A  0EC0               	movlw	192
 11636  00056C  EC51  F024         	call	_lcdInst
 11637                           
 11638                           ;Test.c: 290: printf("MID -- 2s       ");
 11639  000570  0ECB               	movlw	low STR_102
 11640  000572  0100               	movlb	0	; () banked
 11641  000574  6F8E               	movwf	printf@f& (0+255),b
 11642  000576  0EFB               	movlw	high STR_102
 11643  000578  0100               	movlb	0	; () banked
 11644  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11645  00057C  ECB8  F008         	call	_printf	;wreg free
 11646                           
 11647                           ;Test.c: 291: updateServoPosition(1200, 1);
 11648  000580  0E04               	movlw	4
 11649  000582  0100               	movlb	0	; () banked
 11650  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11651  000586  0EB0               	movlw	176
 11652  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11653  00058A  0E00               	movlw	0
 11654  00058C  0100               	movlb	0	; () banked
 11655  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11656  000590  0E01               	movlw	1
 11657  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11658  000594  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11659                           
 11660                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11661  000598  0E00               	movlw	0
 11662  00059A  0100               	movlb	0	; () banked
 11663  00059C  6FB8               	movwf	actuatorTest@i_1659& (0+255),b
 11664  00059E                     l6964:
 11665                           
 11666                           ; BSR set to: 0
 11667  00059E  0E63               	movlw	99
 11668  0005A0  0100               	movlb	0	; () banked
 11669  0005A2  65B8               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11670  0005A4  D001               	goto	l6968
 11671  0005A6  D00C               	goto	l6972
 11672  0005A8                     l6968:
 11673                           
 11674                           ; BSR set to: 0
 11675  0005A8  0E68               	movlw	104
 11676  0005AA  0100               	movlb	0	; () banked
 11677  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11678  0005AE  0EE4               	movlw	228
 11679  0005B0                     u7947:
 11680  0005B0  2EE8               	decfsz	wreg,f,c
 11681  0005B2  D7FE               	bra	u7947
 11682  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11683  0005B6  D7FC               	bra	u7947
 11684  0005B8  F000               	nop	
 11685  0005BA  0100               	movlb	0	; () banked
 11686  0005BC  2BB8               	incf	actuatorTest@i_1659& (0+255),f,b
 11687  0005BE  D7EF               	goto	l6964
 11688  0005C0                     l6972:
 11689                           
 11690                           ; BSR set to: 0
 11691  0005C0  0E00               	movlw	0
 11692  0005C2  0100               	movlb	0	; () banked
 11693  0005C4  6FB9               	movwf	actuatorTest@i_1660& (0+255),b
 11694  0005C6                     l6974:
 11695                           
 11696                           ; BSR set to: 0
 11697  0005C6  0E63               	movlw	99
 11698  0005C8  0100               	movlb	0	; () banked
 11699  0005CA  65B9               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11700  0005CC  D001               	goto	l6978
 11701  0005CE  D00C               	goto	l1135
 11702  0005D0                     l6978:
 11703                           
 11704                           ; BSR set to: 0
 11705  0005D0  0E68               	movlw	104
 11706  0005D2  0100               	movlb	0	; () banked
 11707  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11708  0005D6  0EE4               	movlw	228
 11709  0005D8                     u7957:
 11710  0005D8  2EE8               	decfsz	wreg,f,c
 11711  0005DA  D7FE               	bra	u7957
 11712  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11713  0005DE  D7FC               	bra	u7957
 11714  0005E0  F000               	nop	
 11715  0005E2  0100               	movlb	0	; () banked
 11716  0005E4  2BB9               	incf	actuatorTest@i_1660& (0+255),f,b
 11717  0005E6  D7EF               	goto	l6974
 11718  0005E8                     l1135:
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;Test.c: 293: TMR1ON = 0;
 11722  0005E8  90CD               	bcf	4045,0,c	;volatile
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;Test.c: 300: printf("TST: TILT SERVO");
 11726  0005EA  0E2E               	movlw	low STR_103
 11727  0005EC  0100               	movlb	0	; () banked
 11728  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11729  0005F0  0EFE               	movlw	high STR_103
 11730  0005F2  0100               	movlb	0	; () banked
 11731  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11732  0005F6  ECB8  F008         	call	_printf	;wreg free
 11733                           
 11734                           ;Test.c: 301: lcdInst(0b11000000);;
 11735  0005FA  0EC0               	movlw	192
 11736  0005FC  EC51  F024         	call	_lcdInst
 11737                           
 11738                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11739  000600  0EFE               	movlw	low STR_104
 11740  000602  0100               	movlb	0	; () banked
 11741  000604  6F8E               	movwf	printf@f& (0+255),b
 11742  000606  0EFB               	movlw	high STR_104
 11743  000608  0100               	movlb	0	; () banked
 11744  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11745  00060C  ECB8  F008         	call	_printf	;wreg free
 11746                           
 11747                           ;Test.c: 303: updateServoPosition(1150, 3);
 11748  000610  0E04               	movlw	4
 11749  000612  0100               	movlb	0	; () banked
 11750  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11751  000616  0E7E               	movlw	126
 11752  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11753  00061A  0E00               	movlw	0
 11754  00061C  0100               	movlb	0	; () banked
 11755  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11756  000620  0E03               	movlw	3
 11757  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11758  000624  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11759                           
 11760                           ;Test.c: 304: TMR3ON = 1;
 11761  000628  80B1               	bsf	4017,0,c	;volatile
 11762                           
 11763                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11764  00062A  0E00               	movlw	0
 11765  00062C  0100               	movlb	0	; () banked
 11766  00062E  6FBA               	movwf	actuatorTest@i_1663& (0+255),b
 11767  000630                     l6992:
 11768                           
 11769                           ; BSR set to: 0
 11770  000630  0E63               	movlw	99
 11771  000632  0100               	movlb	0	; () banked
 11772  000634  65BA               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11773  000636  D001               	goto	l6996
 11774  000638  D00C               	goto	l7000
 11775  00063A                     l6996:
 11776                           
 11777                           ; BSR set to: 0
 11778  00063A  0E68               	movlw	104
 11779  00063C  0100               	movlb	0	; () banked
 11780  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11781  000640  0EE4               	movlw	228
 11782  000642                     u7967:
 11783  000642  2EE8               	decfsz	wreg,f,c
 11784  000644  D7FE               	bra	u7967
 11785  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11786  000648  D7FC               	bra	u7967
 11787  00064A  F000               	nop	
 11788  00064C  0100               	movlb	0	; () banked
 11789  00064E  2BBA               	incf	actuatorTest@i_1663& (0+255),f,b
 11790  000650  D7EF               	goto	l6992
 11791  000652                     l7000:
 11792                           
 11793                           ; BSR set to: 0
 11794  000652  0E00               	movlw	0
 11795  000654  0100               	movlb	0	; () banked
 11796  000656  6FBB               	movwf	actuatorTest@i_1664& (0+255),b
 11797  000658                     l7002:
 11798                           
 11799                           ; BSR set to: 0
 11800  000658  0E63               	movlw	99
 11801  00065A  0100               	movlb	0	; () banked
 11802  00065C  65BB               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11803  00065E  D001               	goto	l7006
 11804  000660  D00C               	goto	l7010
 11805  000662                     l7006:
 11806                           
 11807                           ; BSR set to: 0
 11808  000662  0E68               	movlw	104
 11809  000664  0100               	movlb	0	; () banked
 11810  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11811  000668  0EE4               	movlw	228
 11812  00066A                     u7977:
 11813  00066A  2EE8               	decfsz	wreg,f,c
 11814  00066C  D7FE               	bra	u7977
 11815  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11816  000670  D7FC               	bra	u7977
 11817  000672  F000               	nop	
 11818  000674  0100               	movlb	0	; () banked
 11819  000676  2BBB               	incf	actuatorTest@i_1664& (0+255),f,b
 11820  000678  D7EF               	goto	l7002
 11821  00067A                     l7010:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11825  00067A  0E80               	movlw	128
 11826  00067C  EC51  F024         	call	_lcdInst
 11827  000680  0EC0               	movlw	192
 11828  000682  EC51  F024         	call	_lcdInst
 11829                           
 11830                           ;Test.c: 308: printf("DROP -- 2s      ");
 11831  000686  0EDC               	movlw	low STR_105
 11832  000688  0100               	movlb	0	; () banked
 11833  00068A  6F8E               	movwf	printf@f& (0+255),b
 11834  00068C  0EFB               	movlw	high STR_105
 11835  00068E  0100               	movlb	0	; () banked
 11836  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11837  000692  ECB8  F008         	call	_printf	;wreg free
 11838                           
 11839                           ;Test.c: 309: updateServoPosition(1350, 3);
 11840  000696  0E05               	movlw	5
 11841  000698  0100               	movlb	0	; () banked
 11842  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11843  00069C  0E46               	movlw	70
 11844  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11845  0006A0  0E00               	movlw	0
 11846  0006A2  0100               	movlb	0	; () banked
 11847  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11848  0006A6  0E03               	movlw	3
 11849  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11850  0006AA  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11851                           
 11852                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11853  0006AE  0E00               	movlw	0
 11854  0006B0  0100               	movlb	0	; () banked
 11855  0006B2  6FBC               	movwf	actuatorTest@i_1666& (0+255),b
 11856  0006B4                     l7018:
 11857                           
 11858                           ; BSR set to: 0
 11859  0006B4  0E63               	movlw	99
 11860  0006B6  0100               	movlb	0	; () banked
 11861  0006B8  65BC               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11862  0006BA  D001               	goto	l7022
 11863  0006BC  D00C               	goto	l7026
 11864  0006BE                     l7022:
 11865                           
 11866                           ; BSR set to: 0
 11867  0006BE  0E68               	movlw	104
 11868  0006C0  0100               	movlb	0	; () banked
 11869  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11870  0006C4  0EE4               	movlw	228
 11871  0006C6                     u7987:
 11872  0006C6  2EE8               	decfsz	wreg,f,c
 11873  0006C8  D7FE               	bra	u7987
 11874  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11875  0006CC  D7FC               	bra	u7987
 11876  0006CE  F000               	nop	
 11877  0006D0  0100               	movlb	0	; () banked
 11878  0006D2  2BBC               	incf	actuatorTest@i_1666& (0+255),f,b
 11879  0006D4  D7EF               	goto	l7018
 11880  0006D6                     l7026:
 11881                           
 11882                           ; BSR set to: 0
 11883  0006D6  0E00               	movlw	0
 11884  0006D8  0100               	movlb	0	; () banked
 11885  0006DA  6FBD               	movwf	actuatorTest@i_1667& (0+255),b
 11886  0006DC                     l7028:
 11887                           
 11888                           ; BSR set to: 0
 11889  0006DC  0E63               	movlw	99
 11890  0006DE  0100               	movlb	0	; () banked
 11891  0006E0  65BD               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11892  0006E2  D001               	goto	l7032
 11893  0006E4  D00C               	goto	l7036
 11894  0006E6                     l7032:
 11895                           
 11896                           ; BSR set to: 0
 11897  0006E6  0E68               	movlw	104
 11898  0006E8  0100               	movlb	0	; () banked
 11899  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11900  0006EC  0EE4               	movlw	228
 11901  0006EE                     u7997:
 11902  0006EE  2EE8               	decfsz	wreg,f,c
 11903  0006F0  D7FE               	bra	u7997
 11904  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11905  0006F4  D7FC               	bra	u7997
 11906  0006F6  F000               	nop	
 11907  0006F8  0100               	movlb	0	; () banked
 11908  0006FA  2BBD               	incf	actuatorTest@i_1667& (0+255),f,b
 11909  0006FC  D7EF               	goto	l7028
 11910  0006FE                     l7036:
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11914  0006FE  0E80               	movlw	128
 11915  000700  EC51  F024         	call	_lcdInst
 11916  000704  0EC0               	movlw	192
 11917  000706  EC51  F024         	call	_lcdInst
 11918                           
 11919                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11920  00070A  0EFE               	movlw	low STR_104
 11921  00070C  0100               	movlb	0	; () banked
 11922  00070E  6F8E               	movwf	printf@f& (0+255),b
 11923  000710  0EFB               	movlw	high STR_104
 11924  000712  0100               	movlb	0	; () banked
 11925  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11926  000716  ECB8  F008         	call	_printf	;wreg free
 11927                           
 11928                           ;Test.c: 314: updateServoPosition(1150, 3);
 11929  00071A  0E04               	movlw	4
 11930  00071C  0100               	movlb	0	; () banked
 11931  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11932  000720  0E7E               	movlw	126
 11933  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11934  000724  0E00               	movlw	0
 11935  000726  0100               	movlb	0	; () banked
 11936  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11937  00072A  0E03               	movlw	3
 11938  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11939  00072E  ECB8  F01E         	call	_updateServoPosition	;wreg free
 11940                           
 11941                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11942  000732  0E00               	movlw	0
 11943  000734  0100               	movlb	0	; () banked
 11944  000736  6FBE               	movwf	actuatorTest@i_1669& (0+255),b
 11945  000738                     l7044:
 11946                           
 11947                           ; BSR set to: 0
 11948  000738  0E63               	movlw	99
 11949  00073A  0100               	movlb	0	; () banked
 11950  00073C  65BE               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11951  00073E  D001               	goto	l7048
 11952  000740  D00C               	goto	l7052
 11953  000742                     l7048:
 11954                           
 11955                           ; BSR set to: 0
 11956  000742  0E68               	movlw	104
 11957  000744  0100               	movlb	0	; () banked
 11958  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11959  000748  0EE4               	movlw	228
 11960  00074A                     u8007:
 11961  00074A  2EE8               	decfsz	wreg,f,c
 11962  00074C  D7FE               	bra	u8007
 11963  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11964  000750  D7FC               	bra	u8007
 11965  000752  F000               	nop	
 11966  000754  0100               	movlb	0	; () banked
 11967  000756  2BBE               	incf	actuatorTest@i_1669& (0+255),f,b
 11968  000758  D7EF               	goto	l7044
 11969  00075A                     l7052:
 11970                           
 11971                           ; BSR set to: 0
 11972  00075A  0E00               	movlw	0
 11973  00075C  0100               	movlb	0	; () banked
 11974  00075E  6FBF               	movwf	actuatorTest@i_1670& (0+255),b
 11975  000760                     l7054:
 11976                           
 11977                           ; BSR set to: 0
 11978  000760  0E63               	movlw	99
 11979  000762  0100               	movlb	0	; () banked
 11980  000764  65BF               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11981  000766  D001               	goto	l7058
 11982  000768  D00C               	goto	l1147
 11983  00076A                     l7058:
 11984                           
 11985                           ; BSR set to: 0
 11986  00076A  0E68               	movlw	104
 11987  00076C  0100               	movlb	0	; () banked
 11988  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11989  000770  0EE4               	movlw	228
 11990  000772                     u8017:
 11991  000772  2EE8               	decfsz	wreg,f,c
 11992  000774  D7FE               	bra	u8017
 11993  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11994  000778  D7FC               	bra	u8017
 11995  00077A  F000               	nop	
 11996  00077C  0100               	movlb	0	; () banked
 11997  00077E  2BBF               	incf	actuatorTest@i_1670& (0+255),f,b
 11998  000780  D7EF               	goto	l7054
 11999  000782                     l1147:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;Test.c: 316: TMR3ON = 0;
 12003  000782  90B1               	bcf	4017,0,c	;volatile
 12004                           
 12005                           ;Test.c: 317: (INTCONbits.GIE = 0);
 12006  000784  9EF2               	bcf	intcon,7,c	;volatile
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12010  000786  0E01               	movlw	1
 12011  000788  EC51  F024         	call	_lcdInst
 12012  00078C  0E68               	movlw	104
 12013  00078E  0100               	movlb	0	; () banked
 12014  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12015  000792  0EE4               	movlw	228
 12016  000794                     u8027:
 12017  000794  2EE8               	decfsz	wreg,f,c
 12018  000796  D7FE               	bra	u8027
 12019  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12020  00079A  D7FC               	bra	u8027
 12021  00079C  F000               	nop	
 12022  00079E  0E80               	movlw	128
 12023  0007A0  EC51  F024         	call	_lcdInst
 12024                           
 12025                           ;Test.c: 323: printf("TST: CAM SERVO");
 12026  0007A4  0E8A               	movlw	low STR_107
 12027  0007A6  0100               	movlb	0	; () banked
 12028  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12029  0007AA  0EFE               	movlw	high STR_107
 12030  0007AC  0100               	movlb	0	; () banked
 12031  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12032  0007B0  ECB8  F008         	call	_printf	;wreg free
 12033                           
 12034                           ;Test.c: 324: lcdInst(0b11000000);;
 12035  0007B4  0EC0               	movlw	192
 12036  0007B6  EC51  F024         	call	_lcdInst
 12037                           
 12038                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 12039  0007BA  0E6C               	movlw	low STR_108
 12040  0007BC  0100               	movlb	0	; () banked
 12041  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12042  0007C0  0EFE               	movlw	high STR_108
 12043  0007C2  0100               	movlb	0	; () banked
 12044  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12045  0007C6  ECB8  F008         	call	_printf	;wreg free
 12046                           
 12047                           ;Test.c: 326: LATCbits.LATC0 = 1;
 12048  0007CA  808B               	bsf	3979,0,c	;volatile
 12049                           
 12050                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12051  0007CC  0E00               	movlw	0
 12052  0007CE  0100               	movlb	0	; () banked
 12053  0007D0  6FC0               	movwf	actuatorTest@i_1673& (0+255),b
 12054  0007D2                     l7078:
 12055                           
 12056                           ; BSR set to: 0
 12057  0007D2  0E63               	movlw	99
 12058  0007D4  0100               	movlb	0	; () banked
 12059  0007D6  65C0               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12060  0007D8  D001               	goto	l7082
 12061  0007DA  D00C               	goto	l7086
 12062  0007DC                     l7082:
 12063                           
 12064                           ; BSR set to: 0
 12065  0007DC  0E68               	movlw	104
 12066  0007DE  0100               	movlb	0	; () banked
 12067  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12068  0007E2  0EE4               	movlw	228
 12069  0007E4                     u8037:
 12070  0007E4  2EE8               	decfsz	wreg,f,c
 12071  0007E6  D7FE               	bra	u8037
 12072  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12073  0007EA  D7FC               	bra	u8037
 12074  0007EC  F000               	nop	
 12075  0007EE  0100               	movlb	0	; () banked
 12076  0007F0  2BC0               	incf	actuatorTest@i_1673& (0+255),f,b
 12077  0007F2  D7EF               	goto	l7078
 12078  0007F4                     l7086:
 12079                           
 12080                           ; BSR set to: 0
 12081  0007F4  0E00               	movlw	0
 12082  0007F6  0100               	movlb	0	; () banked
 12083  0007F8  6FC1               	movwf	actuatorTest@i_1674& (0+255),b
 12084  0007FA                     l7088:
 12085                           
 12086                           ; BSR set to: 0
 12087  0007FA  0E63               	movlw	99
 12088  0007FC  0100               	movlb	0	; () banked
 12089  0007FE  65C1               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12090  000800  D001               	goto	l7092
 12091  000802  D00C               	goto	l7096
 12092  000804                     l7092:
 12093                           
 12094                           ; BSR set to: 0
 12095  000804  0E68               	movlw	104
 12096  000806  0100               	movlb	0	; () banked
 12097  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12098  00080A  0EE4               	movlw	228
 12099  00080C                     u8047:
 12100  00080C  2EE8               	decfsz	wreg,f,c
 12101  00080E  D7FE               	bra	u8047
 12102  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12103  000812  D7FC               	bra	u8047
 12104  000814  F000               	nop	
 12105  000816  0100               	movlb	0	; () banked
 12106  000818  2BC1               	incf	actuatorTest@i_1674& (0+255),f,b
 12107  00081A  D7EF               	goto	l7088
 12108  00081C                     l7096:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12112  00081C  0E80               	movlw	128
 12113  00081E  EC51  F024         	call	_lcdInst
 12114  000822  0EC0               	movlw	192
 12115  000824  EC51  F024         	call	_lcdInst
 12116                           
 12117                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 12118  000828  0E5D               	movlw	low STR_109
 12119  00082A  0100               	movlb	0	; () banked
 12120  00082C  6F8E               	movwf	printf@f& (0+255),b
 12121  00082E  0EFE               	movlw	high STR_109
 12122  000830  0100               	movlb	0	; () banked
 12123  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12124  000834  ECB8  F008         	call	_printf	;wreg free
 12125                           
 12126                           ;Test.c: 332: for(i=0;i<10000;i++)
 12127  000838  0E00               	movlw	0
 12128  00083A  0100               	movlb	0	; () banked
 12129  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12130  00083E  0E00               	movlw	0
 12131  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12132  000842                     l7102:
 12133                           
 12134                           ; BSR set to: 0
 12135  000842  0100               	movlb	0	; () banked
 12136  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12137  000846  D008               	goto	l1152
 12138  000848  0E10               	movlw	16
 12139  00084A  0100               	movlb	0	; () banked
 12140  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12141  00084E  0E27               	movlw	39
 12142  000850  0100               	movlb	0	; () banked
 12143  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12144  000854  B0D8               	btfsc	status,0,c
 12145  000856  D00D               	goto	l7112
 12146  000858                     l1152:
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;Test.c: 333: {
 12150                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12151  000858  808B               	bsf	3979,0,c	;volatile
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12155  00085A  0E1A               	movlw	26
 12156  00085C                     u8057:
 12157  00085C  2EE8               	decfsz	wreg,f,c
 12158  00085E  D7FE               	bra	u8057
 12159  000860  D000               	nop2	
 12160                           
 12161                           ;Test.c: 336: LATCbits.LATC0 = 0;
 12162  000862  908B               	bcf	3979,0,c	;volatile
 12163                           
 12164                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12165  000864  0EF0               	movlw	240
 12166  000866                     u8067:
 12167  000866  2EE8               	decfsz	wreg,f,c
 12168  000868  D7FE               	bra	u8067
 12169  00086A  0100               	movlb	0	; () banked
 12170  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12171  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12172  000870  D7E8               	goto	l7102
 12173  000872                     l7112:
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;Test.c: 338: }
 12177                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12178  000872  0E00               	movlw	0
 12179  000874  0100               	movlb	0	; () banked
 12180  000876  6FC2               	movwf	actuatorTest@i_1676& (0+255),b
 12181  000878                     l7114:
 12182                           
 12183                           ; BSR set to: 0
 12184  000878  0E63               	movlw	99
 12185  00087A  0100               	movlb	0	; () banked
 12186  00087C  65C2               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12187  00087E  D001               	goto	l7118
 12188  000880  D00C               	goto	l7122
 12189  000882                     l7118:
 12190                           
 12191                           ; BSR set to: 0
 12192  000882  0E68               	movlw	104
 12193  000884  0100               	movlb	0	; () banked
 12194  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12195  000888  0EE4               	movlw	228
 12196  00088A                     u8077:
 12197  00088A  2EE8               	decfsz	wreg,f,c
 12198  00088C  D7FE               	bra	u8077
 12199  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12200  000890  D7FC               	bra	u8077
 12201  000892  F000               	nop	
 12202  000894  0100               	movlb	0	; () banked
 12203  000896  2BC2               	incf	actuatorTest@i_1676& (0+255),f,b
 12204  000898  D7EF               	goto	l7114
 12205  00089A                     l7122:
 12206                           
 12207                           ; BSR set to: 0
 12208  00089A  0E00               	movlw	0
 12209  00089C  0100               	movlb	0	; () banked
 12210  00089E  6FC3               	movwf	actuatorTest@i_1677& (0+255),b
 12211  0008A0                     l7124:
 12212                           
 12213                           ; BSR set to: 0
 12214  0008A0  0E63               	movlw	99
 12215  0008A2  0100               	movlb	0	; () banked
 12216  0008A4  65C3               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12217  0008A6  D001               	goto	l7128
 12218  0008A8  D00C               	goto	l7132
 12219  0008AA                     l7128:
 12220                           
 12221                           ; BSR set to: 0
 12222  0008AA  0E68               	movlw	104
 12223  0008AC  0100               	movlb	0	; () banked
 12224  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12225  0008B0  0EE4               	movlw	228
 12226  0008B2                     u8087:
 12227  0008B2  2EE8               	decfsz	wreg,f,c
 12228  0008B4  D7FE               	bra	u8087
 12229  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12230  0008B8  D7FC               	bra	u8087
 12231  0008BA  F000               	nop	
 12232  0008BC  0100               	movlb	0	; () banked
 12233  0008BE  2BC3               	incf	actuatorTest@i_1677& (0+255),f,b
 12234  0008C0  D7EF               	goto	l7124
 12235  0008C2                     l7132:
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;Test.c: 341: machine_state = Testing_state;
 12239  0008C2  0E03               	movlw	3
 12240  0008C4  0100               	movlb	0	; () banked
 12241  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12242                           
 12243                           ; BSR set to: 0
 12244  0008C8  0012               	return		;funcret
 12245  0008CA                     __end_of_actuatorTest:
 12246                           	opt stack 0
 12247                           tblptru	equ	0xFF8
 12248                           tblptrh	equ	0xFF7
 12249                           tblptrl	equ	0xFF6
 12250                           tablat	equ	0xFF5
 12251                           prodh	equ	0xFF4
 12252                           prodl	equ	0xFF3
 12253                           intcon	equ	0xFF2
 12254                           intcon2	equ	0xFF1
 12255                           intcon3	equ	0xFF0
 12256                           postinc0	equ	0xFEE
 12257                           wreg	equ	0xFE8
 12258                           postdec1	equ	0xFE5
 12259                           fsr1l	equ	0xFE1
 12260                           indf2	equ	0xFDF
 12261                           postinc2	equ	0xFDE
 12262                           postdec2	equ	0xFDD
 12263                           fsr2h	equ	0xFDA
 12264                           fsr2l	equ	0xFD9
 12265                           status	equ	0xFD8
 12266                           
 12267 ;; *************** function _ToggleTestA5 *****************
 12268 ;; Defined at:
 12269 ;;		line 488 in file "Test.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;		None
 12272 ;; Auto vars:     Size  Location     Type
 12273 ;;  on              2   44[BANK0 ] int 
 12274 ;; Return value:  Size  Location     Type
 12275 ;;                  1    wreg      void 
 12276 ;; Registers used:
 12277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;Total ram usage:        3 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; Hardware stack levels required when called:   10
 12290 ;; This function calls:
 12291 ;;		_lcdInst
 12292 ;;		_printf
 12293 ;; This function is called by:
 12294 ;;		_Test
 12295 ;; This function uses a non-reentrant model
 12296 ;;
 12297                           
 12298                           	psect	text42
 12299  003B66                     __ptext42:
 12300                           	opt stack 0
 12301  003B66                     _ToggleTestA5:
 12302                           	opt stack 19
 12303                           
 12304                           ;Test.c: 489: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;incstack = 0
 12308  003B66  0E01               	movlw	1
 12309  003B68  EC51  F024         	call	_lcdInst
 12310  003B6C  0E68               	movlw	104
 12311  003B6E  0100               	movlb	0	; () banked
 12312  003B70  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12313  003B72  0EE4               	movlw	228
 12314  003B74                     u8097:
 12315  003B74  2EE8               	decfsz	wreg,f,c
 12316  003B76  D7FE               	bra	u8097
 12317  003B78  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12318  003B7A  D7FC               	bra	u8097
 12319  003B7C  F000               	nop	
 12320  003B7E  0E80               	movlw	128
 12321  003B80  EC51  F024         	call	_lcdInst
 12322                           
 12323                           ;Test.c: 490: printf("D WILL RETURN   ");
 12324  003B84  0E31               	movlw	low STR_115
 12325  003B86  0100               	movlb	0	; () banked
 12326  003B88  6F8E               	movwf	printf@f& (0+255),b
 12327  003B8A  0EFC               	movlw	high STR_115
 12328  003B8C  0100               	movlb	0	; () banked
 12329  003B8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12330  003B90  ECB8  F008         	call	_printf	;wreg free
 12331                           
 12332                           ;Test.c: 491: lcdInst(0b11000000);;
 12333  003B94  0EC0               	movlw	192
 12334  003B96  EC51  F024         	call	_lcdInst
 12335                           
 12336                           ;Test.c: 492: printf("ELSE TOGGLES RA5");
 12337  003B9A  0E64               	movlw	low STR_116
 12338  003B9C  0100               	movlb	0	; () banked
 12339  003B9E  6F8E               	movwf	printf@f& (0+255),b
 12340  003BA0  0EFC               	movlw	high STR_116
 12341  003BA2  0100               	movlb	0	; () banked
 12342  003BA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12343  003BA6  ECB8  F008         	call	_printf	;wreg free
 12344                           
 12345                           ;Test.c: 493: int on = 0;
 12346  003BAA  0E00               	movlw	0
 12347  003BAC  0100               	movlb	0	; () banked
 12348  003BAE  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12349  003BB0  0E00               	movlw	0
 12350  003BB2  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12351  003BB4                     l1217:
 12352  003BB4  A281               	btfss	3969,1,c	;volatile
 12353  003BB6  D7FE               	goto	l1217
 12354                           
 12355                           ;Test.c: 498: }
 12356                           ;Test.c: 499: if(PORTB >> 4 == 0b1111){
 12357  003BB8  3881               	swapf	3969,w,c	;volatile
 12358  003BBA  0B0F               	andlw	15
 12359  003BBC  0A0F               	xorlw	15
 12360  003BBE  B4D8               	btfsc	status,2,c
 12361  003BC0  0012               	return	
 12362                           
 12363                           ;Test.c: 502: else{
 12364                           ;Test.c: 503: if(on == 0){
 12365                           
 12366                           ;Test.c: 501: }
 12367                           
 12368                           ;Test.c: 500: break;
 12369  003BC2  0100               	movlb	0	; () banked
 12370  003BC4  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12371  003BC6  0100               	movlb	0	; () banked
 12372  003BC8  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12373  003BCA  A4D8               	btfss	status,2,c
 12374  003BCC  D007               	goto	l7190
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;Test.c: 504: on = 1;
 12378  003BCE  0E00               	movlw	0
 12379  003BD0  0100               	movlb	0	; () banked
 12380  003BD2  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12381  003BD4  0E01               	movlw	1
 12382  003BD6  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;Test.c: 505: LATAbits.LATA5 = 1;
 12386  003BD8  8A89               	bsf	3977,5,c	;volatile
 12387                           
 12388                           ;Test.c: 506: }
 12389  003BDA  D006               	goto	l1225
 12390  003BDC                     l7190:
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;Test.c: 507: else{
 12394                           ;Test.c: 508: on = 0;
 12395  003BDC  0E00               	movlw	0
 12396  003BDE  0100               	movlb	0	; () banked
 12397  003BE0  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12398  003BE2  0E00               	movlw	0
 12399  003BE4  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;Test.c: 509: LATAbits.LATA5 = 0;
 12403  003BE6  9A89               	bcf	3977,5,c	;volatile
 12404  003BE8                     l1225:
 12405  003BE8  A281               	btfss	3969,1,c	;volatile
 12406  003BEA  D7E4               	goto	l1217
 12407  003BEC  D7FD               	goto	l1225
 12408  003BEE                     __end_of_ToggleTestA5:
 12409                           	opt stack 0
 12410                           tblptru	equ	0xFF8
 12411                           tblptrh	equ	0xFF7
 12412                           tblptrl	equ	0xFF6
 12413                           tablat	equ	0xFF5
 12414                           prodh	equ	0xFF4
 12415                           prodl	equ	0xFF3
 12416                           intcon	equ	0xFF2
 12417                           intcon2	equ	0xFF1
 12418                           intcon3	equ	0xFF0
 12419                           postinc0	equ	0xFEE
 12420                           wreg	equ	0xFE8
 12421                           postdec1	equ	0xFE5
 12422                           fsr1l	equ	0xFE1
 12423                           indf2	equ	0xFDF
 12424                           postinc2	equ	0xFDE
 12425                           postdec2	equ	0xFDD
 12426                           fsr2h	equ	0xFDA
 12427                           fsr2l	equ	0xFD9
 12428                           status	equ	0xFD8
 12429                           
 12430 ;; *************** function _SolenoidTestA5 *****************
 12431 ;; Defined at:
 12432 ;;		line 464 in file "Test.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;		None
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  i               1   47[BANK0 ] unsigned char 
 12437 ;;  i               1   48[BANK0 ] unsigned char 
 12438 ;;  i               2   45[BANK0 ] int 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      void 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12451 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12452 ;;Total ram usage:        6 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:   10
 12455 ;; This function calls:
 12456 ;;		_lcdInst
 12457 ;;		_printf
 12458 ;; This function is called by:
 12459 ;;		_Test
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           	psect	text43
 12464  003406                     __ptext43:
 12465                           	opt stack 0
 12466  003406                     _SolenoidTestA5:
 12467                           	opt stack 19
 12468  003406                     
 12469                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12470  003406  0E01               	movlw	1
 12471  003408  EC51  F024         	call	_lcdInst
 12472  00340C  0E68               	movlw	104
 12473  00340E  0100               	movlb	0	; () banked
 12474  003410  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12475  003412  0EE4               	movlw	228
 12476  003414                     u8107:
 12477  003414  2EE8               	decfsz	wreg,f,c
 12478  003416  D7FE               	bra	u8107
 12479  003418  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12480  00341A  D7FC               	bra	u8107
 12481  00341C  F000               	nop	
 12482  00341E  0E80               	movlw	128
 12483  003420  EC51  F024         	call	_lcdInst
 12484                           
 12485                           ;Test.c: 467: printf("SOLENOID TST");
 12486  003424  0E36               	movlw	low STR_113
 12487  003426  0100               	movlb	0	; () banked
 12488  003428  6F8E               	movwf	printf@f& (0+255),b
 12489  00342A  0EFF               	movlw	high STR_113
 12490  00342C  0100               	movlb	0	; () banked
 12491  00342E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12492  003430  ECB8  F008         	call	_printf	;wreg free
 12493                           
 12494                           ;Test.c: 468: lcdInst(0b11000000);;
 12495  003434  0EC0               	movlw	192
 12496  003436  EC51  F024         	call	_lcdInst
 12497  00343A                     l1202:
 12498  00343A  A281               	btfss	3969,1,c	;volatile
 12499  00343C  D7FE               	goto	l1202
 12500                           
 12501                           ;Test.c: 473: }
 12502                           ;Test.c: 475: for(int i = 0; i < 3; i++){
 12503  00343E  0E00               	movlw	0
 12504  003440  0100               	movlb	0	; () banked
 12505  003442  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12506  003444  0E00               	movlw	0
 12507  003446  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12508  003448                     l7206:
 12509                           
 12510                           ; BSR set to: 0
 12511  003448  0100               	movlb	0	; () banked
 12512  00344A  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12513  00344C  D008               	goto	l7210
 12514  00344E  0100               	movlb	0	; () banked
 12515  003450  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12516  003452  E12D               	bnz	l7226
 12517  003454  0E03               	movlw	3
 12518  003456  0100               	movlb	0	; () banked
 12519  003458  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12520  00345A  B0D8               	btfsc	status,0,c
 12521  00345C  D028               	goto	l7226
 12522  00345E                     l7210:
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;Test.c: 476: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12526  00345E  0E00               	movlw	0
 12527  003460  0100               	movlb	0	; () banked
 12528  003462  6FAF               	movwf	SolenoidTestA5@i_1690& (0+255),b
 12529  003464                     l7212:
 12530                           
 12531                           ; BSR set to: 0
 12532  003464  0E63               	movlw	99
 12533  003466  0100               	movlb	0	; () banked
 12534  003468  65AF               	cpfsgt	SolenoidTestA5@i_1690& (0+255),b
 12535  00346A  D001               	goto	l7216
 12536  00346C  D00C               	goto	l1208
 12537  00346E                     l7216:
 12538                           
 12539                           ; BSR set to: 0
 12540  00346E  0E68               	movlw	104
 12541  003470  0100               	movlb	0	; () banked
 12542  003472  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12543  003474  0EE4               	movlw	228
 12544  003476                     u8117:
 12545  003476  2EE8               	decfsz	wreg,f,c
 12546  003478  D7FE               	bra	u8117
 12547  00347A  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12548  00347C  D7FC               	bra	u8117
 12549  00347E  F000               	nop	
 12550  003480  0100               	movlb	0	; () banked
 12551  003482  2BAF               	incf	SolenoidTestA5@i_1690& (0+255),f,b
 12552  003484  D7EF               	goto	l7212
 12553  003486                     l1208:
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;Test.c: 477: LATAbits.LATA5 = 1;
 12557  003486  8A89               	bsf	3977,5,c	;volatile
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;Test.c: 478: _delay((unsigned long)((150)*(32000000/4000.0)));
 12561  003488  0E07               	movlw	7
 12562  00348A  0100               	movlb	0	; () banked
 12563  00348C  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12564  00348E  0E17               	movlw	23
 12565  003490  0100               	movlb	0	; () banked
 12566  003492  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12567  003494  0E6A               	movlw	106
 12568  003496                     u8127:
 12569  003496  2EE8               	decfsz	wreg,f,c
 12570  003498  D7FE               	bra	u8127
 12571  00349A  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12572  00349C  D7FC               	bra	u8127
 12573  00349E  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12574  0034A0  D7FA               	bra	u8127
 12575  0034A2  F000               	nop	
 12576                           
 12577                           ;Test.c: 479: LATAbits.LATA5 = 0;
 12578  0034A4  9A89               	bcf	3977,5,c	;volatile
 12579  0034A6  0100               	movlb	0	; () banked
 12580  0034A8  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12581  0034AA  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12582  0034AC  D7CD               	goto	l7206
 12583  0034AE                     l7226:
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;Test.c: 480: }
 12587                           ;Test.c: 482: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12588  0034AE  0E01               	movlw	1
 12589  0034B0  EC51  F024         	call	_lcdInst
 12590  0034B4  0E68               	movlw	104
 12591  0034B6  0100               	movlb	0	; () banked
 12592  0034B8  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12593  0034BA  0EE4               	movlw	228
 12594  0034BC                     u8137:
 12595  0034BC  2EE8               	decfsz	wreg,f,c
 12596  0034BE  D7FE               	bra	u8137
 12597  0034C0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12598  0034C2  D7FC               	bra	u8137
 12599  0034C4  F000               	nop	
 12600  0034C6  0E80               	movlw	128
 12601  0034C8  EC51  F024         	call	_lcdInst
 12602                           
 12603                           ;Test.c: 483: printf("PUSH DONE");
 12604  0034CC  0E87               	movlw	low STR_114
 12605  0034CE  0100               	movlb	0	; () banked
 12606  0034D0  6F8E               	movwf	printf@f& (0+255),b
 12607  0034D2  0EFF               	movlw	high STR_114
 12608  0034D4  0100               	movlb	0	; () banked
 12609  0034D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12610  0034D8  ECB8  F008         	call	_printf	;wreg free
 12611                           
 12612                           ;Test.c: 484: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12613  0034DC  0E00               	movlw	0
 12614  0034DE  0100               	movlb	0	; () banked
 12615  0034E0  6FB0               	movwf	SolenoidTestA5@i_1692& (0+255),b
 12616  0034E2                     l7236:
 12617                           
 12618                           ; BSR set to: 0
 12619  0034E2  0E63               	movlw	99
 12620  0034E4  0100               	movlb	0	; () banked
 12621  0034E6  65B0               	cpfsgt	SolenoidTestA5@i_1692& (0+255),b
 12622  0034E8  D001               	goto	l7240
 12623  0034EA  D78D               	goto	l7194
 12624  0034EC                     l7240:
 12625                           
 12626                           ; BSR set to: 0
 12627  0034EC  0E68               	movlw	104
 12628  0034EE  0100               	movlb	0	; () banked
 12629  0034F0  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12630  0034F2  0EE4               	movlw	228
 12631  0034F4                     u8147:
 12632  0034F4  2EE8               	decfsz	wreg,f,c
 12633  0034F6  D7FE               	bra	u8147
 12634  0034F8  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12635  0034FA  D7FC               	bra	u8147
 12636  0034FC  F000               	nop	
 12637  0034FE  0100               	movlb	0	; () banked
 12638  003500  2BB0               	incf	SolenoidTestA5@i_1692& (0+255),f,b
 12639  003502  D7EF               	goto	l7236
 12640  003504                     __end_of_SolenoidTestA5:
 12641                           	opt stack 0
 12642                           tblptru	equ	0xFF8
 12643                           tblptrh	equ	0xFF7
 12644                           tblptrl	equ	0xFF6
 12645                           tablat	equ	0xFF5
 12646                           prodh	equ	0xFF4
 12647                           prodl	equ	0xFF3
 12648                           intcon	equ	0xFF2
 12649                           intcon2	equ	0xFF1
 12650                           intcon3	equ	0xFF0
 12651                           postinc0	equ	0xFEE
 12652                           wreg	equ	0xFE8
 12653                           postdec1	equ	0xFE5
 12654                           fsr1l	equ	0xFE1
 12655                           indf2	equ	0xFDF
 12656                           postinc2	equ	0xFDE
 12657                           postdec2	equ	0xFDD
 12658                           fsr2h	equ	0xFDA
 12659                           fsr2l	equ	0xFD9
 12660                           status	equ	0xFD8
 12661                           
 12662 ;; *************** function _PortTests *****************
 12663 ;; Defined at:
 12664 ;;		line 396 in file "Test.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;		None
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;		None
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      void 
 12671 ;; Registers used:
 12672 ;;		wreg, status,2, status,0
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12682 ;;Total ram usage:        2 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    7
 12685 ;; This function calls:
 12686 ;;		Nothing
 12687 ;; This function is called by:
 12688 ;;		_Test
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692                           	psect	text44
 12693  003C74                     __ptext44:
 12694                           	opt stack 0
 12695  003C74                     _PortTests:
 12696                           	opt stack 22
 12697  003C74                     l1165:
 12698  003C74  A281               	btfss	3969,1,c	;volatile
 12699  003C76  D7FE               	goto	l1165
 12700                           
 12701                           ;Test.c: 400: var = PORTB >> 4;
 12702  003C78  CF81 F080          	movff	3969,??_PortTests	;volatile
 12703  003C7C  0100               	movlb	0	; () banked
 12704  003C7E  3B80               	swapf	??_PortTests& (0+255),f,b
 12705  003C80  0E0F               	movlw	15
 12706  003C82  1780               	andwf	??_PortTests& (0+255),f,b
 12707  003C84  0100               	movlb	0	; () banked
 12708  003C86  5180               	movf	??_PortTests& (0+255),w,b
 12709  003C88  0100               	movlb	0	; () banked
 12710  003C8A  6FFA               	movwf	_var& (0+255),b
 12711  003C8C  6BFB               	clrf	(_var+1)& (0+255),b
 12712                           
 12713                           ;Test.c: 401: switch(var){
 12714  003C8E  D00C               	goto	l7248
 12715  003C90                     l1169:
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;Test.c: 403: LATEbits.LATE0 = 1;
 12719  003C90  808D               	bsf	3981,0,c	;volatile
 12720                           
 12721                           ;Test.c: 404: break;
 12722  003C92  D027               	goto	l1177
 12723  003C94                     l1171:
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;Test.c: 406: LATEbits.LATE1 = 1;
 12727  003C94  828D               	bsf	3981,1,c	;volatile
 12728                           
 12729                           ;Test.c: 407: break;
 12730  003C96  D025               	goto	l1177
 12731  003C98                     l1172:
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;Test.c: 409: LATDbits.LATD0 = 1;
 12735  003C98  808C               	bsf	3980,0,c	;volatile
 12736                           
 12737                           ;Test.c: 410: break;
 12738  003C9A  D023               	goto	l1177
 12739  003C9C                     l1173:
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;Test.c: 412: LATAbits.LATA3 = 1;
 12743  003C9C  8689               	bsf	3977,3,c	;volatile
 12744                           
 12745                           ;Test.c: 413: break;
 12746  003C9E  D021               	goto	l1177
 12747  003CA0                     l1174:
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;Test.c: 415: LATAbits.LATA4 = 1;
 12751  003CA0  8889               	bsf	3977,4,c	;volatile
 12752                           
 12753                           ;Test.c: 416: break;
 12754  003CA2  D01F               	goto	l1177
 12755  003CA4                     l1175:
 12756                           
 12757                           ; BSR set to: 0
 12758                           ;Test.c: 418: LATAbits.LATA5 = 1;
 12759  003CA4  8A89               	bsf	3977,5,c	;volatile
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;Test.c: 422: }
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;Test.c: 421: break;
 12766                           
 12767                           ;Test.c: 420: default:
 12768                           
 12769                           ;Test.c: 419: break;
 12770  003CA6  D01D               	goto	l1177
 12771  003CA8                     l7248:
 12772                           
 12773                           ; BSR set to: 0
 12774  003CA8  C0FA  F080         	movff	_var,??_PortTests
 12775  003CAC  C0FB  F081         	movff	_var+1,??_PortTests+1
 12776                           
 12777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12778                           ; Switch size 1, requested type "space"
 12779                           ; Number of cases is 1, Range of values is 0 to 0
 12780                           ; switch strategies available:
 12781                           ; Name         Instructions Cycles
 12782                           ; simple_byte            4     3 (average)
 12783                           ;	Chosen strategy is simple_byte
 12784  003CB0  0100               	movlb	0	; () banked
 12785  003CB2  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12786  003CB4  0A00               	xorlw	0	; case 0
 12787  003CB6  A4D8               	btfss	status,2,c
 12788  003CB8  D014               	goto	l1177
 12789                           
 12790                           ; BSR set to: 0
 12791                           ; Switch size 1, requested type "space"
 12792                           ; Number of cases is 6, Range of values is 0 to 5
 12793                           ; switch strategies available:
 12794                           ; Name         Instructions Cycles
 12795                           ; simple_byte           19    10 (average)
 12796                           ;	Chosen strategy is simple_byte
 12797  003CBA  0100               	movlb	0	; () banked
 12798  003CBC  5180               	movf	??_PortTests& (0+255),w,b
 12799  003CBE  0A00               	xorlw	0	; case 0
 12800  003CC0  B4D8               	btfsc	status,2,c
 12801  003CC2  D7E6               	goto	l1169
 12802  003CC4  0A01               	xorlw	1	; case 1
 12803  003CC6  B4D8               	btfsc	status,2,c
 12804  003CC8  D7E5               	goto	l1171
 12805  003CCA  0A03               	xorlw	3	; case 2
 12806  003CCC  B4D8               	btfsc	status,2,c
 12807  003CCE  D7E4               	goto	l1172
 12808  003CD0  0A01               	xorlw	1	; case 3
 12809  003CD2  B4D8               	btfsc	status,2,c
 12810  003CD4  D7E3               	goto	l1173
 12811  003CD6  0A07               	xorlw	7	; case 4
 12812  003CD8  B4D8               	btfsc	status,2,c
 12813  003CDA  D7E2               	goto	l1174
 12814  003CDC  0A01               	xorlw	1	; case 5
 12815  003CDE  B4D8               	btfsc	status,2,c
 12816  003CE0  D7E1               	goto	l1175
 12817  003CE2                     l1177:
 12818  003CE2  B281               	btfsc	3969,1,c	;volatile
 12819  003CE4  D7FE               	goto	l1177
 12820                           
 12821                           ;Test.c: 424: __nop();
 12822  003CE6  F000               	nop	
 12823                           
 12824                           ;Test.c: 425: __nop();
 12825  003CE8  F000               	nop	
 12826                           
 12827                           ;Test.c: 426: LATA = 0x00;
 12828  003CEA  0E00               	movlw	0
 12829  003CEC  6E89               	movwf	3977,c	;volatile
 12830                           
 12831                           ;Test.c: 427: LATE = 0x00;
 12832  003CEE  0E00               	movlw	0
 12833  003CF0  6E8D               	movwf	3981,c	;volatile
 12834                           
 12835                           ;Test.c: 428: LATD = 0x00; }
 12836  003CF2  0E00               	movlw	0
 12837  003CF4  6E8C               	movwf	3980,c	;volatile
 12838  003CF6  D7BE               	goto	l1165
 12839  003CF8                     __end_of_PortTests:
 12840                           	opt stack 0
 12841                           tblptru	equ	0xFF8
 12842                           tblptrh	equ	0xFF7
 12843                           tblptrl	equ	0xFF6
 12844                           tablat	equ	0xFF5
 12845                           prodh	equ	0xFF4
 12846                           prodl	equ	0xFF3
 12847                           intcon	equ	0xFF2
 12848                           intcon2	equ	0xFF1
 12849                           intcon3	equ	0xFF0
 12850                           postinc0	equ	0xFEE
 12851                           wreg	equ	0xFE8
 12852                           postdec1	equ	0xFE5
 12853                           fsr1l	equ	0xFE1
 12854                           indf2	equ	0xFDF
 12855                           postinc2	equ	0xFDE
 12856                           postdec2	equ	0xFDD
 12857                           fsr2h	equ	0xFDA
 12858                           fsr2l	equ	0xFD9
 12859                           status	equ	0xFD8
 12860                           
 12861 ;; *************** function _PortTestA5 *****************
 12862 ;; Defined at:
 12863 ;;		line 431 in file "Test.c"
 12864 ;; Parameters:    Size  Location     Type
 12865 ;;		None
 12866 ;; Auto vars:     Size  Location     Type
 12867 ;;		None
 12868 ;; Return value:  Size  Location     Type
 12869 ;;                  1    wreg      void 
 12870 ;; Registers used:
 12871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12872 ;; Tracked objects:
 12873 ;;		On entry : 0/0
 12874 ;;		On exit  : 0/0
 12875 ;;		Unchanged: 0/0
 12876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12881 ;;Total ram usage:        1 bytes
 12882 ;; Hardware stack levels used:    1
 12883 ;; Hardware stack levels required when called:   10
 12884 ;; This function calls:
 12885 ;;		_lcdInst
 12886 ;;		_printf
 12887 ;; This function is called by:
 12888 ;;		_Test
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text45
 12893  003A44                     __ptext45:
 12894                           	opt stack 0
 12895  003A44                     _PortTestA5:
 12896                           	opt stack 19
 12897                           
 12898                           ;Test.c: 432: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12899                           
 12900                           ;incstack = 0
 12901  003A44  0E01               	movlw	1
 12902  003A46  EC51  F024         	call	_lcdInst
 12903  003A4A  0E68               	movlw	104
 12904  003A4C  0100               	movlb	0	; () banked
 12905  003A4E  6FAB               	movwf	??_PortTestA5& (0+255),b
 12906  003A50  0EE4               	movlw	228
 12907  003A52                     u8157:
 12908  003A52  2EE8               	decfsz	wreg,f,c
 12909  003A54  D7FE               	bra	u8157
 12910  003A56  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12911  003A58  D7FC               	bra	u8157
 12912  003A5A  F000               	nop	
 12913  003A5C  0E80               	movlw	128
 12914  003A5E  EC51  F024         	call	_lcdInst
 12915                           
 12916                           ;Test.c: 433: printf("D WILL RETURN    ");
 12917  003A62  0E83               	movlw	low STR_111
 12918  003A64  0100               	movlb	0	; () banked
 12919  003A66  6F8E               	movwf	printf@f& (0+255),b
 12920  003A68  0EFB               	movlw	high STR_111
 12921  003A6A  0100               	movlb	0	; () banked
 12922  003A6C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12923  003A6E  ECB8  F008         	call	_printf	;wreg free
 12924                           
 12925                           ;Test.c: 434: lcdInst(0b11000000);;
 12926  003A72  0EC0               	movlw	192
 12927  003A74  EC51  F024         	call	_lcdInst
 12928                           
 12929                           ;Test.c: 435: printf("OTHER SETS RA5   ");
 12930  003A78  0E95               	movlw	low STR_112
 12931  003A7A  0100               	movlb	0	; () banked
 12932  003A7C  6F8E               	movwf	printf@f& (0+255),b
 12933  003A7E  0EFB               	movlw	high STR_112
 12934  003A80  0100               	movlb	0	; () banked
 12935  003A82  6F8F               	movwf	(printf@f+1)& (0+255),b
 12936  003A84  ECB8  F008         	call	_printf	;wreg free
 12937  003A88                     l1186:
 12938  003A88  A281               	btfss	3969,1,c	;volatile
 12939  003A8A  D7FE               	goto	l1186
 12940                           
 12941                           ;Test.c: 440: }
 12942                           ;Test.c: 441: if(PORTB >> 4 == 0b1111){
 12943  003A8C  3881               	swapf	3969,w,c	;volatile
 12944  003A8E  0B0F               	andlw	15
 12945  003A90  0A0F               	xorlw	15
 12946  003A92  B4D8               	btfsc	status,2,c
 12947  003A94  0012               	return	
 12948                           
 12949                           ;Test.c: 444: else{
 12950                           ;Test.c: 445: LATAbits.LATA5 = 1;
 12951                           
 12952                           ;Test.c: 443: }
 12953                           
 12954                           ;Test.c: 442: break;
 12955  003A96  8A89               	bsf	3977,5,c	;volatile
 12956  003A98                     l1192:
 12957  003A98  B281               	btfsc	3969,1,c	;volatile
 12958  003A9A  D7FE               	goto	l1192
 12959                           
 12960                           ;Test.c: 448: }
 12961                           ;Test.c: 451: for(i=0;i<10000;i++)
 12962  003A9C  0E00               	movlw	0
 12963  003A9E  0100               	movlb	0	; () banked
 12964  003AA0  6FE5               	movwf	(_i+1)& (0+255),b
 12965  003AA2  0E00               	movlw	0
 12966  003AA4  6FE4               	movwf	_i& (0+255),b
 12967  003AA6                     l7154:
 12968                           
 12969                           ; BSR set to: 0
 12970  003AA6  0100               	movlb	0	; () banked
 12971  003AA8  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12972  003AAA  D008               	goto	l1195
 12973  003AAC  0E10               	movlw	16
 12974  003AAE  0100               	movlb	0	; () banked
 12975  003AB0  5DE4               	subwf	_i& (0+255),w,b
 12976  003AB2  0E27               	movlw	39
 12977  003AB4  0100               	movlb	0	; () banked
 12978  003AB6  59E5               	subwfb	(_i+1)& (0+255),w,b
 12979  003AB8  B0D8               	btfsc	status,0,c
 12980  003ABA  D00D               	goto	l1196
 12981  003ABC                     l1195:
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;Test.c: 452: {
 12985                           ;Test.c: 453: LATAbits.LATA5 = 1;
 12986  003ABC  8A89               	bsf	3977,5,c	;volatile
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;Test.c: 454: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12990  003ABE  0E1A               	movlw	26
 12991  003AC0                     u8167:
 12992  003AC0  2EE8               	decfsz	wreg,f,c
 12993  003AC2  D7FE               	bra	u8167
 12994  003AC4  D000               	nop2	
 12995                           
 12996                           ;Test.c: 455: LATAbits.LATA5 = 0;
 12997  003AC6  9A89               	bcf	3977,5,c	;volatile
 12998                           
 12999                           ;Test.c: 456: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13000  003AC8  0EF0               	movlw	240
 13001  003ACA                     u8177:
 13002  003ACA  2EE8               	decfsz	wreg,f,c
 13003  003ACC  D7FE               	bra	u8177
 13004  003ACE  0100               	movlb	0	; () banked
 13005  003AD0  4BE4               	infsnz	_i& (0+255),f,b
 13006  003AD2  2BE5               	incf	(_i+1)& (0+255),f,b
 13007  003AD4  D7E8               	goto	l7154
 13008  003AD6                     l1196:
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;Test.c: 457: }
 13012                           ;Test.c: 459: LATAbits.LATA5 = 0;
 13013  003AD6  9A89               	bcf	3977,5,c	;volatile
 13014                           
 13015                           ; BSR set to: 0
 13016                           
 13017                           ; BSR set to: 0
 13018  003AD8  D7D7               	goto	l1186
 13019  003ADA                     __end_of_PortTestA5:
 13020                           	opt stack 0
 13021                           tblptru	equ	0xFF8
 13022                           tblptrh	equ	0xFF7
 13023                           tblptrl	equ	0xFF6
 13024                           tablat	equ	0xFF5
 13025                           prodh	equ	0xFF4
 13026                           prodl	equ	0xFF3
 13027                           intcon	equ	0xFF2
 13028                           intcon2	equ	0xFF1
 13029                           intcon3	equ	0xFF0
 13030                           postinc0	equ	0xFEE
 13031                           wreg	equ	0xFE8
 13032                           postdec1	equ	0xFE5
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           fsr2h	equ	0xFDA
 13038                           fsr2l	equ	0xFD9
 13039                           status	equ	0xFD8
 13040                           
 13041 ;; *************** function _EEPROMTest *****************
 13042 ;; Defined at:
 13043 ;;		line 516 in file "Test.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;		None
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;		None
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      void 
 13050 ;; Registers used:
 13051 ;;		None
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;Total ram usage:        0 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    7
 13064 ;; This function calls:
 13065 ;;		Nothing
 13066 ;; This function is called by:
 13067 ;;		_Test
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text46
 13072  004906                     __ptext46:
 13073                           	opt stack 0
 13074  004906                     _EEPROMTest:
 13075                           	opt stack 22
 13076                           
 13077                           ;incstack = 0
 13078  004906  0012               	return		;funcret
 13079  004908                     __end_of_EEPROMTest:
 13080                           	opt stack 0
 13081                           tblptru	equ	0xFF8
 13082                           tblptrh	equ	0xFF7
 13083                           tblptrl	equ	0xFF6
 13084                           tablat	equ	0xFF5
 13085                           prodh	equ	0xFF4
 13086                           prodl	equ	0xFF3
 13087                           intcon	equ	0xFF2
 13088                           intcon2	equ	0xFF1
 13089                           intcon3	equ	0xFF0
 13090                           postinc0	equ	0xFEE
 13091                           wreg	equ	0xFE8
 13092                           postdec1	equ	0xFE5
 13093                           fsr1l	equ	0xFE1
 13094                           indf2	equ	0xFDF
 13095                           postinc2	equ	0xFDE
 13096                           postdec2	equ	0xFDD
 13097                           fsr2h	equ	0xFDA
 13098                           fsr2l	equ	0xFD9
 13099                           status	equ	0xFD8
 13100                           
 13101 ;; *************** function _BothServos *****************
 13102 ;; Defined at:
 13103 ;;		line 344 in file "Test.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;		None
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;		None
 13108 ;; Return value:  Size  Location     Type
 13109 ;;                  1    wreg      void 
 13110 ;; Registers used:
 13111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13120 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13121 ;;Total ram usage:        2 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; Hardware stack levels required when called:   10
 13124 ;; This function calls:
 13125 ;;		_initServos
 13126 ;;		_lcdInst
 13127 ;;		_printf
 13128 ;;		_updateServoPosition
 13129 ;; This function is called by:
 13130 ;;		_Test
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           	psect	text47
 13135  001916                     __ptext47:
 13136                           	opt stack 0
 13137  001916                     _BothServos:
 13138                           	opt stack 19
 13139                           
 13140                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13141                           
 13142                           ;incstack = 0
 13143  001916  0E01               	movlw	1
 13144  001918  EC51  F024         	call	_lcdInst
 13145  00191C  0E68               	movlw	104
 13146  00191E  0100               	movlb	0	; () banked
 13147  001920  6FAB               	movwf	??_BothServos& (0+255),b
 13148  001922  0EE4               	movlw	228
 13149  001924                     u8187:
 13150  001924  2EE8               	decfsz	wreg,f,c
 13151  001926  D7FE               	bra	u8187
 13152  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13153  00192A  D7FC               	bra	u8187
 13154  00192C  F000               	nop	
 13155  00192E  0E80               	movlw	128
 13156  001930  EC51  F024         	call	_lcdInst
 13157                           
 13158                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 13159  001934  0ECA               	movlw	low STR_110
 13160  001936  0100               	movlb	0	; () banked
 13161  001938  6F8E               	movwf	printf@f& (0+255),b
 13162  00193A  0EFC               	movlw	high STR_110
 13163  00193C  0100               	movlb	0	; () banked
 13164  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13165  001940  ECB8  F008         	call	_printf	;wreg free
 13166                           
 13167                           ;Test.c: 347: TMR1ON = 1;
 13168  001944  80CD               	bsf	4045,0,c	;volatile
 13169                           
 13170                           ;Test.c: 348: TMR3ON = 1;
 13171  001946  80B1               	bsf	4017,0,c	;volatile
 13172                           
 13173                           ;Test.c: 349: machine_state = Sorting_state;
 13174  001948  0E01               	movlw	1
 13175  00194A  0100               	movlb	0	; () banked
 13176  00194C  6FFC               	movwf	_machine_state& (0+255),b
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;Test.c: 350: was_low_1 = 0;
 13180  00194E  0E00               	movlw	0
 13181  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 13182  001952  0E00               	movlw	0
 13183  001954  6E79               	movwf	_was_low_1,c	;volatile
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;Test.c: 351: was_low_1 = 0;
 13187  001956  0E00               	movlw	0
 13188  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 13189  00195A  0E00               	movlw	0
 13190  00195C  6E79               	movwf	_was_low_1,c	;volatile
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;Test.c: 357: initServos();
 13194  00195E  EC23  F020         	call	_initServos	;wreg free
 13195                           
 13196                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13197  001962  0E3D               	movlw	61
 13198  001964  0100               	movlb	0	; () banked
 13199  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13200  001968  0EE1               	movlw	225
 13201  00196A  0100               	movlb	0	; () banked
 13202  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 13203  00196E  0E3F               	movlw	63
 13204  001970                     u8197:
 13205  001970  2EE8               	decfsz	wreg,f,c
 13206  001972  D7FE               	bra	u8197
 13207  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13208  001976  D7FC               	bra	u8197
 13209  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13210  00197A  D7FA               	bra	u8197
 13211  00197C  D000               	nop2	
 13212                           
 13213                           ;Test.c: 359: updateServoPosition(500, 1);
 13214  00197E  0E01               	movlw	1
 13215  001980  0100               	movlb	0	; () banked
 13216  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13217  001984  0EF4               	movlw	244
 13218  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13219  001988  0E00               	movlw	0
 13220  00198A  0100               	movlb	0	; () banked
 13221  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13222  00198E  0E01               	movlw	1
 13223  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13224  001992  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13225                           
 13226                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 13227  001996  0E1F               	movlw	31
 13228  001998  0100               	movlb	0	; () banked
 13229  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13230  00199C  0E71               	movlw	113
 13231  00199E  0100               	movlb	0	; () banked
 13232  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 13233  0019A2  0E1E               	movlw	30
 13234  0019A4                     u8207:
 13235  0019A4  2EE8               	decfsz	wreg,f,c
 13236  0019A6  D7FE               	bra	u8207
 13237  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13238  0019AA  D7FC               	bra	u8207
 13239  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13240  0019AE  D7FA               	bra	u8207
 13241  0019B0  F000               	nop	
 13242                           
 13243                           ;Test.c: 361: updateServoPosition(1350, 3);
 13244  0019B2  0E05               	movlw	5
 13245  0019B4  0100               	movlb	0	; () banked
 13246  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13247  0019B8  0E46               	movlw	70
 13248  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13249  0019BC  0E00               	movlw	0
 13250  0019BE  0100               	movlb	0	; () banked
 13251  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13252  0019C2  0E03               	movlw	3
 13253  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13254  0019C6  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13255                           
 13256                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13257  0019CA  0E52               	movlw	82
 13258  0019CC  0100               	movlb	0	; () banked
 13259  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13260  0019D0  0E2B               	movlw	43
 13261  0019D2  0100               	movlb	0	; () banked
 13262  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 13263  0019D6  0E00               	movlw	0
 13264  0019D8                     u8217:
 13265  0019D8  2EE8               	decfsz	wreg,f,c
 13266  0019DA  D7FE               	bra	u8217
 13267  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13268  0019DE  D7FC               	bra	u8217
 13269  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13270  0019E2  D7FA               	bra	u8217
 13271  0019E4  F000               	nop	
 13272                           
 13273                           ;Test.c: 363: updateServoPosition(1150, 3);
 13274  0019E6  0E04               	movlw	4
 13275  0019E8  0100               	movlb	0	; () banked
 13276  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13277  0019EC  0E7E               	movlw	126
 13278  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13279  0019F0  0E00               	movlw	0
 13280  0019F2  0100               	movlb	0	; () banked
 13281  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13282  0019F6  0E03               	movlw	3
 13283  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13284  0019FA  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13285                           
 13286                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 13287  0019FE  0E1F               	movlw	31
 13288  001A00  0100               	movlb	0	; () banked
 13289  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13290  001A04  0E71               	movlw	113
 13291  001A06  0100               	movlb	0	; () banked
 13292  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 13293  001A0A  0E1E               	movlw	30
 13294  001A0C                     u8227:
 13295  001A0C  2EE8               	decfsz	wreg,f,c
 13296  001A0E  D7FE               	bra	u8227
 13297  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13298  001A12  D7FC               	bra	u8227
 13299  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13300  001A16  D7FA               	bra	u8227
 13301  001A18  F000               	nop	
 13302                           
 13303                           ;Test.c: 366: updateServoPosition(750, 1);
 13304  001A1A  0E02               	movlw	2
 13305  001A1C  0100               	movlb	0	; () banked
 13306  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13307  001A20  0EEE               	movlw	238
 13308  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13309  001A24  0E00               	movlw	0
 13310  001A26  0100               	movlb	0	; () banked
 13311  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13312  001A2A  0E01               	movlw	1
 13313  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13314  001A2E  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13315                           
 13316                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13317  001A32  0E1F               	movlw	31
 13318  001A34  0100               	movlb	0	; () banked
 13319  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13320  001A38  0E71               	movlw	113
 13321  001A3A  0100               	movlb	0	; () banked
 13322  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13323  001A3E  0E1E               	movlw	30
 13324  001A40                     u8237:
 13325  001A40  2EE8               	decfsz	wreg,f,c
 13326  001A42  D7FE               	bra	u8237
 13327  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13328  001A46  D7FC               	bra	u8237
 13329  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13330  001A4A  D7FA               	bra	u8237
 13331  001A4C  F000               	nop	
 13332                           
 13333                           ;Test.c: 368: updateServoPosition(1350, 3);
 13334  001A4E  0E05               	movlw	5
 13335  001A50  0100               	movlb	0	; () banked
 13336  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13337  001A54  0E46               	movlw	70
 13338  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13339  001A58  0E00               	movlw	0
 13340  001A5A  0100               	movlb	0	; () banked
 13341  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13342  001A5E  0E03               	movlw	3
 13343  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13344  001A62  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13345                           
 13346                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13347  001A66  0E52               	movlw	82
 13348  001A68  0100               	movlb	0	; () banked
 13349  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13350  001A6C  0E2B               	movlw	43
 13351  001A6E  0100               	movlb	0	; () banked
 13352  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13353  001A72  0E00               	movlw	0
 13354  001A74                     u8247:
 13355  001A74  2EE8               	decfsz	wreg,f,c
 13356  001A76  D7FE               	bra	u8247
 13357  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13358  001A7A  D7FC               	bra	u8247
 13359  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13360  001A7E  D7FA               	bra	u8247
 13361  001A80  F000               	nop	
 13362                           
 13363                           ;Test.c: 370: updateServoPosition(1150, 3);
 13364  001A82  0E04               	movlw	4
 13365  001A84  0100               	movlb	0	; () banked
 13366  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13367  001A88  0E7E               	movlw	126
 13368  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13369  001A8C  0E00               	movlw	0
 13370  001A8E  0100               	movlb	0	; () banked
 13371  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13372  001A92  0E03               	movlw	3
 13373  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13374  001A96  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13375                           
 13376                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13377  001A9A  0E1F               	movlw	31
 13378  001A9C  0100               	movlb	0	; () banked
 13379  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13380  001AA0  0E71               	movlw	113
 13381  001AA2  0100               	movlb	0	; () banked
 13382  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13383  001AA6  0E1E               	movlw	30
 13384  001AA8                     u8257:
 13385  001AA8  2EE8               	decfsz	wreg,f,c
 13386  001AAA  D7FE               	bra	u8257
 13387  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13388  001AAE  D7FC               	bra	u8257
 13389  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13390  001AB2  D7FA               	bra	u8257
 13391  001AB4  F000               	nop	
 13392                           
 13393                           ;Test.c: 373: updateServoPosition(1200, 1);
 13394  001AB6  0E04               	movlw	4
 13395  001AB8  0100               	movlb	0	; () banked
 13396  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13397  001ABC  0EB0               	movlw	176
 13398  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13399  001AC0  0E00               	movlw	0
 13400  001AC2  0100               	movlb	0	; () banked
 13401  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13402  001AC6  0E01               	movlw	1
 13403  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13404  001ACA  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13405                           
 13406                           ;Test.c: 374: updateServoPosition(1150, 3);
 13407  001ACE  0E04               	movlw	4
 13408  001AD0  0100               	movlb	0	; () banked
 13409  001AD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13410  001AD4  0E7E               	movlw	126
 13411  001AD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13412  001AD8  0E00               	movlw	0
 13413  001ADA  0100               	movlb	0	; () banked
 13414  001ADC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13415  001ADE  0E03               	movlw	3
 13416  001AE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13417  001AE2  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13418                           
 13419                           ;Test.c: 375: _delay((unsigned long)((750)*(32000000/4000.0)));
 13420  001AE6  0E1F               	movlw	31
 13421  001AE8  0100               	movlb	0	; () banked
 13422  001AEA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13423  001AEC  0E71               	movlw	113
 13424  001AEE  0100               	movlb	0	; () banked
 13425  001AF0  6FAB               	movwf	??_BothServos& (0+255),b
 13426  001AF2  0E1E               	movlw	30
 13427  001AF4                     u8267:
 13428  001AF4  2EE8               	decfsz	wreg,f,c
 13429  001AF6  D7FE               	bra	u8267
 13430  001AF8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13431  001AFA  D7FC               	bra	u8267
 13432  001AFC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13433  001AFE  D7FA               	bra	u8267
 13434  001B00  F000               	nop	
 13435                           
 13436                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13437  001B02  0E1F               	movlw	31
 13438  001B04  0100               	movlb	0	; () banked
 13439  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13440  001B08  0E71               	movlw	113
 13441  001B0A  0100               	movlb	0	; () banked
 13442  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13443  001B0E  0E1E               	movlw	30
 13444  001B10                     u8277:
 13445  001B10  2EE8               	decfsz	wreg,f,c
 13446  001B12  D7FE               	bra	u8277
 13447  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13448  001B16  D7FC               	bra	u8277
 13449  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13450  001B1A  D7FA               	bra	u8277
 13451  001B1C  F000               	nop	
 13452                           
 13453                           ;Test.c: 378: updateServoPosition(1700, 1);
 13454  001B1E  0E06               	movlw	6
 13455  001B20  0100               	movlb	0	; () banked
 13456  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13457  001B24  0EA4               	movlw	164
 13458  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13459  001B28  0E00               	movlw	0
 13460  001B2A  0100               	movlb	0	; () banked
 13461  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13462  001B2E  0E01               	movlw	1
 13463  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13464  001B32  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13465                           
 13466                           ;Test.c: 379: _delay((unsigned long)((750)*(32000000/4000.0)));
 13467  001B36  0E1F               	movlw	31
 13468  001B38  0100               	movlb	0	; () banked
 13469  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13470  001B3C  0E71               	movlw	113
 13471  001B3E  0100               	movlb	0	; () banked
 13472  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13473  001B42  0E1E               	movlw	30
 13474  001B44                     u8287:
 13475  001B44  2EE8               	decfsz	wreg,f,c
 13476  001B46  D7FE               	bra	u8287
 13477  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13478  001B4A  D7FC               	bra	u8287
 13479  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13480  001B4E  D7FA               	bra	u8287
 13481  001B50  F000               	nop	
 13482                           
 13483                           ;Test.c: 380: updateServoPosition(1350, 3);
 13484  001B52  0E05               	movlw	5
 13485  001B54  0100               	movlb	0	; () banked
 13486  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13487  001B58  0E46               	movlw	70
 13488  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13489  001B5C  0E00               	movlw	0
 13490  001B5E  0100               	movlb	0	; () banked
 13491  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13492  001B62  0E03               	movlw	3
 13493  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13494  001B66  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13495                           
 13496                           ;Test.c: 381: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13497  001B6A  0E52               	movlw	82
 13498  001B6C  0100               	movlb	0	; () banked
 13499  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13500  001B70  0E2B               	movlw	43
 13501  001B72  0100               	movlb	0	; () banked
 13502  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13503  001B76  0E00               	movlw	0
 13504  001B78                     u8297:
 13505  001B78  2EE8               	decfsz	wreg,f,c
 13506  001B7A  D7FE               	bra	u8297
 13507  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13508  001B7E  D7FC               	bra	u8297
 13509  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13510  001B82  D7FA               	bra	u8297
 13511  001B84  F000               	nop	
 13512                           
 13513                           ;Test.c: 382: updateServoPosition(1150, 3);
 13514  001B86  0E04               	movlw	4
 13515  001B88  0100               	movlb	0	; () banked
 13516  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13517  001B8C  0E7E               	movlw	126
 13518  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13519  001B90  0E00               	movlw	0
 13520  001B92  0100               	movlb	0	; () banked
 13521  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13522  001B96  0E03               	movlw	3
 13523  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13524  001B9A  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13525                           
 13526                           ;Test.c: 383: _delay((unsigned long)((750)*(32000000/4000.0)));
 13527  001B9E  0E1F               	movlw	31
 13528  001BA0  0100               	movlb	0	; () banked
 13529  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13530  001BA4  0E71               	movlw	113
 13531  001BA6  0100               	movlb	0	; () banked
 13532  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13533  001BAA  0E1E               	movlw	30
 13534  001BAC                     u8307:
 13535  001BAC  2EE8               	decfsz	wreg,f,c
 13536  001BAE  D7FE               	bra	u8307
 13537  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13538  001BB2  D7FC               	bra	u8307
 13539  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13540  001BB6  D7FA               	bra	u8307
 13541  001BB8  F000               	nop	
 13542                           
 13543                           ;Test.c: 385: updateServoPosition(2100, 1);
 13544  001BBA  0E08               	movlw	8
 13545  001BBC  0100               	movlb	0	; () banked
 13546  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13547  001BC0  0E34               	movlw	52
 13548  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13549  001BC4  0E00               	movlw	0
 13550  001BC6  0100               	movlb	0	; () banked
 13551  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13552  001BCA  0E01               	movlw	1
 13553  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13554  001BCE  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13555                           
 13556                           ;Test.c: 386: _delay((unsigned long)((750)*(32000000/4000.0)));
 13557  001BD2  0E1F               	movlw	31
 13558  001BD4  0100               	movlb	0	; () banked
 13559  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13560  001BD8  0E71               	movlw	113
 13561  001BDA  0100               	movlb	0	; () banked
 13562  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13563  001BDE  0E1E               	movlw	30
 13564  001BE0                     u8317:
 13565  001BE0  2EE8               	decfsz	wreg,f,c
 13566  001BE2  D7FE               	bra	u8317
 13567  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13568  001BE6  D7FC               	bra	u8317
 13569  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13570  001BEA  D7FA               	bra	u8317
 13571  001BEC  F000               	nop	
 13572                           
 13573                           ;Test.c: 387: updateServoPosition(1350, 3);
 13574  001BEE  0E05               	movlw	5
 13575  001BF0  0100               	movlb	0	; () banked
 13576  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13577  001BF4  0E46               	movlw	70
 13578  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13579  001BF8  0E00               	movlw	0
 13580  001BFA  0100               	movlb	0	; () banked
 13581  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13582  001BFE  0E03               	movlw	3
 13583  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13584  001C02  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13585                           
 13586                           ;Test.c: 388: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13587  001C06  0E52               	movlw	82
 13588  001C08  0100               	movlb	0	; () banked
 13589  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13590  001C0C  0E2B               	movlw	43
 13591  001C0E  0100               	movlb	0	; () banked
 13592  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13593  001C12  0E00               	movlw	0
 13594  001C14                     u8327:
 13595  001C14  2EE8               	decfsz	wreg,f,c
 13596  001C16  D7FE               	bra	u8327
 13597  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13598  001C1A  D7FC               	bra	u8327
 13599  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13600  001C1E  D7FA               	bra	u8327
 13601  001C20  F000               	nop	
 13602                           
 13603                           ;Test.c: 389: updateServoPosition(1150, 3);
 13604  001C22  0E04               	movlw	4
 13605  001C24  0100               	movlb	0	; () banked
 13606  001C26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13607  001C28  0E7E               	movlw	126
 13608  001C2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13609  001C2C  0E00               	movlw	0
 13610  001C2E  0100               	movlb	0	; () banked
 13611  001C30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13612  001C32  0E03               	movlw	3
 13613  001C34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13614  001C36  ECB8  F01E         	call	_updateServoPosition	;wreg free
 13615                           
 13616                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 13617  001C3A  0E1F               	movlw	31
 13618  001C3C  0100               	movlb	0	; () banked
 13619  001C3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13620  001C40  0E71               	movlw	113
 13621  001C42  0100               	movlb	0	; () banked
 13622  001C44  6FAB               	movwf	??_BothServos& (0+255),b
 13623  001C46  0E1E               	movlw	30
 13624  001C48                     u8337:
 13625  001C48  2EE8               	decfsz	wreg,f,c
 13626  001C4A  D7FE               	bra	u8337
 13627  001C4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13628  001C4E  D7FC               	bra	u8337
 13629  001C50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13630  001C52  D7FA               	bra	u8337
 13631  001C54  F000               	nop	
 13632                           
 13633                           ;Test.c: 392: TMR1ON = 0;
 13634  001C56  90CD               	bcf	4045,0,c	;volatile
 13635                           
 13636                           ;Test.c: 393: TMR3ON = 0;
 13637  001C58  90B1               	bcf	4017,0,c	;volatile
 13638                           
 13639                           ;Test.c: 394: (INTCONbits.GIE = 0);
 13640  001C5A  9EF2               	bcf	intcon,7,c	;volatile
 13641  001C5C  0012               	return		;funcret
 13642  001C5E                     __end_of_BothServos:
 13643                           	opt stack 0
 13644                           tblptru	equ	0xFF8
 13645                           tblptrh	equ	0xFF7
 13646                           tblptrl	equ	0xFF6
 13647                           tablat	equ	0xFF5
 13648                           prodh	equ	0xFF4
 13649                           prodl	equ	0xFF3
 13650                           intcon	equ	0xFF2
 13651                           intcon2	equ	0xFF1
 13652                           intcon3	equ	0xFF0
 13653                           postinc0	equ	0xFEE
 13654                           wreg	equ	0xFE8
 13655                           postdec1	equ	0xFE5
 13656                           fsr1l	equ	0xFE1
 13657                           indf2	equ	0xFDF
 13658                           postinc2	equ	0xFDE
 13659                           postdec2	equ	0xFDD
 13660                           fsr2h	equ	0xFDA
 13661                           fsr2l	equ	0xFD9
 13662                           status	equ	0xFD8
 13663                           
 13664 ;; *************** function _printf *****************
 13665 ;; Defined at:
 13666 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13669 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 13670 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 13671 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 13672 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 13673 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 13674 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 13675 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 13676 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 13677 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13678 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13679 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13680 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13681 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13682 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13683 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13684 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13685 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13686 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13687 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13688 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13689 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13690 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13691 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  tmpval          4    0        struct .
 13694 ;;  width           2   41[BANK0 ] int 
 13695 ;;  val             2   37[BANK0 ] unsigned int 
 13696 ;;  len             2   35[BANK0 ] unsigned int 
 13697 ;;  ap              2   33[BANK0 ] PTR void [1]
 13698 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13699 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13700 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 13701 ;;  c               1   40[BANK0 ] char 
 13702 ;;  flag            1   39[BANK0 ] unsigned char 
 13703 ;;  prec            1   30[BANK0 ] char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  2   14[BANK0 ] int 
 13706 ;; Registers used:
 13707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13713 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;Total ram usage:       29 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    9
 13720 ;; This function calls:
 13721 ;;		___lwdiv
 13722 ;;		___lwmod
 13723 ;;		___wmul
 13724 ;;		_isdigit
 13725 ;;		_putch
 13726 ;; This function is called by:
 13727 ;;		_UI
 13728 ;;		_change_state_to_menu_start
 13729 ;;		_change_state_to_menu_12
 13730 ;;		_change_state_to_menu_22
 13731 ;;		_printRTC
 13732 ;;		_EEPROM_write
 13733 ;;		_Test
 13734 ;;		_algorithmTest
 13735 ;;		_sensorTest
 13736 ;;		_actuatorTest
 13737 ;;		_BothServos
 13738 ;;		_PortTestA5
 13739 ;;		_SolenoidTestA5
 13740 ;;		_ToggleTestA5
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           	psect	text48
 13745  001170                     __ptext48:
 13746                           	opt stack 0
 13747  001170                     _printf:
 13748                           	opt stack 18
 13749                           
 13750                           ;doprnt.c: 466: va_list ap;
 13751                           ;doprnt.c: 499: signed char c;
 13752                           ;doprnt.c: 501: int width;
 13753                           ;doprnt.c: 506: signed char prec;
 13754                           ;doprnt.c: 508: unsigned char flag;
 13755                           ;doprnt.c: 523: union {
 13756                           ;doprnt.c: 524: unsigned long vd;
 13757                           ;doprnt.c: 525: double integ;
 13758                           ;doprnt.c: 526: } tmpval;
 13759                           ;doprnt.c: 528: unsigned int val;
 13760                           ;doprnt.c: 529: unsigned len;
 13761                           ;doprnt.c: 530: const char * cp;
 13762                           ;doprnt.c: 533: *ap = __va_start();
 13763                           
 13764                           ;incstack = 0
 13765  001170  0E90               	movlw	low (?_printf+2)
 13766  001172  0100               	movlb	0	; () banked
 13767  001174  6FA1               	movwf	printf@ap& (0+255),b
 13768  001176  0E00               	movlw	high (?_printf+2)
 13769  001178  0100               	movlb	0	; () banked
 13770  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13771                           
 13772                           ;doprnt.c: 536: while(c = *f++) {
 13773  00117C  D205               	goto	l5600
 13774  00117E                     l5470:
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;doprnt.c: 538: if(c != '%')
 13778  00117E  0E25               	movlw	37
 13779  001180  0100               	movlb	0	; () banked
 13780  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13781  001184  B4D8               	btfsc	status,2,c
 13782  001186  D005               	goto	l5474
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;doprnt.c: 540: {
 13786                           ;doprnt.c: 541: (putch(c) );
 13787  001188  0100               	movlb	0	; () banked
 13788  00118A  51A8               	movf	printf@c& (0+255),w,b
 13789  00118C  EC49  F024         	call	_putch
 13790                           
 13791                           ;doprnt.c: 542: continue;
 13792  001190  D1FB               	goto	l5600
 13793  001192                     l5474:
 13794                           
 13795                           ;doprnt.c: 543: }
 13796                           ;doprnt.c: 546: width = 0;
 13797  001192  0E00               	movlw	0
 13798  001194  0100               	movlb	0	; () banked
 13799  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13800  001198  0E00               	movlw	0
 13801  00119A  6FA9               	movwf	printf@width& (0+255),b
 13802                           
 13803                           ;doprnt.c: 548: flag = 0;
 13804  00119C  0E00               	movlw	0
 13805  00119E  0100               	movlb	0	; () banked
 13806  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;doprnt.c: 551: switch(*f) {
 13810                           
 13811                           ;doprnt.c: 550: for(;;) {
 13812  0011A2  D005               	goto	l5480
 13813  0011A4                     l5476:
 13814                           
 13815                           ;doprnt.c: 580: flag |= 0x04;
 13816  0011A4  0100               	movlb	0	; () banked
 13817  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13818                           
 13819                           ;doprnt.c: 581: f++;
 13820  0011A8  0100               	movlb	0	; () banked
 13821  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13822  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13823  0011AE                     l5480:
 13824  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13825  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13826  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13827  0011B6  6AF8               	clrf	tblptru,c
 13828  0011B8                     	endif
 13829  0011B8                     	if	0	;tblptru may be non-zero
 13830  0011B8                     	endif
 13831  0011B8  0008               	tblrd		*
 13832  0011BA  50F5               	movf	tablat,w,c
 13833                           
 13834                           ; Switch size 1, requested type "space"
 13835                           ; Number of cases is 1, Range of values is 48 to 48
 13836                           ; switch strategies available:
 13837                           ; Name         Instructions Cycles
 13838                           ; simple_byte            4     3 (average)
 13839                           ;	Chosen strategy is simple_byte
 13840  0011BC  0A30               	xorlw	48	; case 48
 13841  0011BE  B4D8               	btfsc	status,2,c
 13842  0011C0  D7F1               	goto	l5476
 13843                           
 13844                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13845                           
 13846                           ;doprnt.c: 586: }
 13847                           
 13848                           ;doprnt.c: 585: break;
 13849  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13850  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13851  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13852  0011CA  6AF8               	clrf	tblptru,c
 13853  0011CC                     	endif
 13854  0011CC                     	if	0	;tblptru may be non-zero
 13855  0011CC                     	endif
 13856  0011CC  0008               	tblrd		*
 13857  0011CE  50F5               	movf	tablat,w,c
 13858  0011D0  EC6E  F023         	call	_isdigit
 13859  0011D4  A0D8               	btfss	status,0,c
 13860  0011D6  D0D2               	goto	l5528
 13861                           
 13862                           ;doprnt.c: 598: width = 0;
 13863  0011D8  0E00               	movlw	0
 13864  0011DA  0100               	movlb	0	; () banked
 13865  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13866  0011DE  0E00               	movlw	0
 13867  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13868  0011E2                     l5486:
 13869                           
 13870                           ;doprnt.c: 600: width *= 10;
 13871  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13872  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13873  0011EA  0E00               	movlw	0
 13874  0011EC  0100               	movlb	0	; () banked
 13875  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13876  0011F0  0E0A               	movlw	10
 13877  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13878  0011F4  ECD8  F021         	call	___wmul	;wreg free
 13879  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13880  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13881                           
 13882                           ;doprnt.c: 601: width += *f++ - '0';
 13883  001200  0ED0               	movlw	208
 13884  001202  0100               	movlb	0	; () banked
 13885  001204  6F9A               	movwf	??_printf& (0+255),b
 13886  001206  0EFF               	movlw	255
 13887  001208  0100               	movlb	0	; () banked
 13888  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13889  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13890  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13891  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13892  001214  6AF8               	clrf	tblptru,c
 13893  001216                     	endif
 13894  001216                     	if	0	;tblptru may be non-zero
 13895  001216                     	endif
 13896  001216  0008               	tblrd		*
 13897  001218  50F5               	movf	tablat,w,c
 13898  00121A  0100               	movlb	0	; () banked
 13899  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13900  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13901  001220  0100               	movlb	0	; () banked
 13902  001222  519A               	movf	??_printf& (0+255),w,b
 13903  001224  0100               	movlb	0	; () banked
 13904  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13905  001228  0100               	movlb	0	; () banked
 13906  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13907  00122C  0100               	movlb	0	; () banked
 13908  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13909  001230  0100               	movlb	0	; () banked
 13910  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13911  001234  0100               	movlb	0	; () banked
 13912  001236  27A9               	addwf	printf@width& (0+255),f,b
 13913  001238  0100               	movlb	0	; () banked
 13914  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13915  00123C  0100               	movlb	0	; () banked
 13916  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13917                           
 13918                           ; BSR set to: 0
 13919  001240  0100               	movlb	0	; () banked
 13920  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13921  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13925  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13926  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13927  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13928  00124E  6AF8               	clrf	tblptru,c
 13929  001250                     	endif
 13930  001250                     	if	0	;tblptru may be non-zero
 13931  001250                     	endif
 13932  001250  0008               	tblrd		*
 13933  001252  50F5               	movf	tablat,w,c
 13934  001254  EC6E  F023         	call	_isdigit
 13935  001258  A0D8               	btfss	status,0,c
 13936  00125A  D090               	goto	l5528
 13937  00125C  D7C2               	goto	l5486
 13938  00125E                     l5494:
 13939                           
 13940                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13941  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13942  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13943  001266  CFDE F09F          	movff	postinc2,printf@cp
 13944  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13945  00126E  0E02               	movlw	2
 13946  001270  0100               	movlb	0	; () banked
 13947  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13948  001274  0E00               	movlw	0
 13949  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;doprnt.c: 740: if(!cp)
 13953  001278  0100               	movlb	0	; () banked
 13954  00127A  519F               	movf	printf@cp& (0+255),w,b
 13955  00127C  0100               	movlb	0	; () banked
 13956  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13957  001280  A4D8               	btfss	status,2,c
 13958  001282  D006               	goto	l5502
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;doprnt.c: 741: cp = "(null)";
 13962  001284  0EB6               	movlw	low STR_117
 13963  001286  0100               	movlb	0	; () banked
 13964  001288  6F9F               	movwf	printf@cp& (0+255),b
 13965  00128A  0EFF               	movlw	high STR_117
 13966  00128C  0100               	movlb	0	; () banked
 13967  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13968  001290                     l5502:
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;doprnt.c: 745: len = 0;
 13972  001290  0E00               	movlw	0
 13973  001292  0100               	movlb	0	; () banked
 13974  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13975  001296  0E00               	movlw	0
 13976  001298  6FA3               	movwf	printf@len& (0+255),b
 13977                           
 13978                           ;doprnt.c: 746: while(cp[len])
 13979  00129A  D003               	goto	l5506
 13980  00129C                     l5504:
 13981                           
 13982                           ;doprnt.c: 747: len++;
 13983  00129C  0100               	movlb	0	; () banked
 13984  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13985  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13986  0012A2                     l5506:
 13987                           
 13988                           ; BSR set to: 0
 13989  0012A2  0100               	movlb	0	; () banked
 13990  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13991  0012A6  0100               	movlb	0	; () banked
 13992  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13993  0012AA  0100               	movlb	0	; () banked
 13994  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13995  0012AE  0100               	movlb	0	; () banked
 13996  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13997  0012B2  0100               	movlb	0	; () banked
 13998  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13999  0012B6  0100               	movlb	0	; () banked
 14000  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14001  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14002  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14003  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14004  0012C4  6EF8               	movwf	tblptru,c
 14005  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14006  0012C8  64F7               	cpfsgt	tblptrh,c
 14007  0012CA  D003               	bra	u3907
 14008  0012CC  0008               	tblrd		*
 14009  0012CE  50F5               	movf	tablat,w,c
 14010  0012D0  D005               	bra	u3900
 14011  0012D2                     u3907:
 14012  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14013  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14014  0012DA  50EF               	movf	indf0,w,c
 14015  0012DC                     u3900:
 14016  0012DC  0900               	iorlw	0
 14017  0012DE  A4D8               	btfss	status,2,c
 14018  0012E0  D7DD               	goto	l5504
 14019                           
 14020                           ;doprnt.c: 757: if(width > len)
 14021  0012E2  0100               	movlb	0	; () banked
 14022  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14023  0012E6  0100               	movlb	0	; () banked
 14024  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14025  0012EA  0100               	movlb	0	; () banked
 14026  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14027  0012EE  0100               	movlb	0	; () banked
 14028  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14029  0012F2  B0D8               	btfsc	status,0,c
 14030  0012F4  D009               	goto	l5512
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;doprnt.c: 758: width -= len;
 14034  0012F6  0100               	movlb	0	; () banked
 14035  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14036  0012FA  0100               	movlb	0	; () banked
 14037  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14038  0012FE  0100               	movlb	0	; () banked
 14039  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14040  001302  0100               	movlb	0	; () banked
 14041  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14042  001306  D009               	goto	l5516
 14043  001308                     l5512:
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;doprnt.c: 759: else
 14047                           ;doprnt.c: 760: width = 0;
 14048  001308  0E00               	movlw	0
 14049  00130A  0100               	movlb	0	; () banked
 14050  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14051  00130E  0E00               	movlw	0
 14052  001310  6FA9               	movwf	printf@width& (0+255),b
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;doprnt.c: 764: while(width--)
 14056  001312  D003               	goto	l5516
 14057  001314                     l5514:
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;doprnt.c: 765: (putch(' ') );
 14061  001314  0E20               	movlw	32
 14062  001316  EC49  F024         	call	_putch
 14063  00131A                     l5516:
 14064  00131A  0100               	movlb	0	; () banked
 14065  00131C  07A9               	decf	printf@width& (0+255),f,b
 14066  00131E  A0D8               	btfss	status,0,c
 14067  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14068  001322  0100               	movlb	0	; () banked
 14069  001324  29A9               	incf	printf@width& (0+255),w,b
 14070  001326  E1F6               	bnz	l5514
 14071  001328  0100               	movlb	0	; () banked
 14072  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14073  00132C  B4D8               	btfsc	status,2,c
 14074  00132E  D017               	goto	l5522
 14075  001330  D7F1               	goto	l5514
 14076  001332                     l5518:
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;doprnt.c: 768: (putch(*cp++) );
 14080  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14081  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14082  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14083  00133C  6EF8               	movwf	tblptru,c
 14084  00133E  0E0F               	movlw	(high __ramtop+-1)
 14085  001340  64F7               	cpfsgt	tblptrh,c
 14086  001342  D003               	bra	u3947
 14087  001344  0008               	tblrd		*
 14088  001346  50F5               	movf	tablat,w,c
 14089  001348  D005               	bra	u3940
 14090  00134A                     u3947:
 14091  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14092  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14093  001352  50EF               	movf	indf0,w,c
 14094  001354                     u3940:
 14095  001354  EC49  F024         	call	_putch
 14096  001358  0100               	movlb	0	; () banked
 14097  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14098  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14099  00135E                     l5522:
 14100                           
 14101                           ; BSR set to: 0
 14102  00135E  0100               	movlb	0	; () banked
 14103  001360  07A3               	decf	printf@len& (0+255),f,b
 14104  001362  A0D8               	btfss	status,0,c
 14105  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14106  001366  0100               	movlb	0	; () banked
 14107  001368  29A3               	incf	printf@len& (0+255),w,b
 14108  00136A  E1E3               	bnz	l5518
 14109  00136C  0100               	movlb	0	; () banked
 14110  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14111  001370  B4D8               	btfsc	status,2,c
 14112  001372  D10A               	goto	l5600
 14113  001374  D7DE               	goto	l5518
 14114  001376                     l5524:
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;doprnt.c: 818: flag |= 0x40;
 14118  001376  0100               	movlb	0	; () banked
 14119  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;doprnt.c: 822: }
 14123                           
 14124                           ;doprnt.c: 819: break;
 14125  00137A  D01D               	goto	l1262
 14126  00137C                     l5528:
 14127  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14128  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14129  001384  0100               	movlb	0	; () banked
 14130  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14131  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14132  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14133  00138A  6AF8               	clrf	tblptru,c
 14134  00138C                     	endif
 14135  00138C                     	if	0	;tblptru may be non-zero
 14136  00138C                     	endif
 14137  00138C  0008               	tblrd		*
 14138  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14139  001392  0100               	movlb	0	; () banked
 14140  001394  51A8               	movf	printf@c& (0+255),w,b
 14141                           
 14142                           ; Switch size 1, requested type "space"
 14143                           ; Number of cases is 5, Range of values is 0 to 117
 14144                           ; switch strategies available:
 14145                           ; Name         Instructions Cycles
 14146                           ; simple_byte           16     9 (average)
 14147                           ;	Chosen strategy is simple_byte
 14148  001396  0A00               	xorlw	0	; case 0
 14149  001398  B4D8               	btfsc	status,2,c
 14150  00139A  0012               	return	
 14151  00139C  0A64               	xorlw	100	; case 100
 14152  00139E  B4D8               	btfsc	status,2,c
 14153  0013A0  D00A               	goto	l1262
 14154  0013A2  0A0D               	xorlw	13	; case 105
 14155  0013A4  B4D8               	btfsc	status,2,c
 14156  0013A6  D007               	goto	l1262
 14157  0013A8  0A1A               	xorlw	26	; case 115
 14158  0013AA  B4D8               	btfsc	status,2,c
 14159  0013AC  D758               	goto	l5494
 14160  0013AE  0A06               	xorlw	6	; case 117
 14161  0013B0  B4D8               	btfsc	status,2,c
 14162  0013B2  D7E1               	goto	l5524
 14163  0013B4  D0E9               	goto	l5600
 14164  0013B6                     l1262:
 14165                           
 14166                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14167  0013B6  0100               	movlb	0	; () banked
 14168  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14169  0013BA  D019               	goto	l5540
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;doprnt.c: 1253: {
 14173                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14174  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14175  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14176  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14177  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14178                           
 14179                           ; BSR set to: 0
 14180  0013CC  0E02               	movlw	2
 14181  0013CE  0100               	movlb	0	; () banked
 14182  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14183  0013D2  0E00               	movlw	0
 14184  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;doprnt.c: 1261: if((int)val < 0) {
 14188  0013D6  0100               	movlb	0	; () banked
 14189  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14190  0013DA  D016               	goto	l5544
 14191                           
 14192                           ; BSR set to: 0
 14193                           ;doprnt.c: 1262: flag |= 0x03;
 14194  0013DC  0E03               	movlw	3
 14195  0013DE  0100               	movlb	0	; () banked
 14196  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14197                           
 14198                           ; BSR set to: 0
 14199                           ;doprnt.c: 1263: val = -val;
 14200  0013E2  0100               	movlb	0	; () banked
 14201  0013E4  6DA5               	negf	printf@val& (0+255),b
 14202  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14203  0013E8  B0D8               	btfsc	status,0,c
 14204  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;doprnt.c: 1264: }
 14208                           ;doprnt.c: 1266: }
 14209  0013EC  D00D               	goto	l5544
 14210  0013EE                     l5540:
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;doprnt.c: 1268: else
 14214                           ;doprnt.c: 1273: {
 14215                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14216  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14217  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14218  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14219  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14220                           
 14221                           ; BSR set to: 0
 14222  0013FE  0E02               	movlw	2
 14223  001400  0100               	movlb	0	; () banked
 14224  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14225  001404  0E00               	movlw	0
 14226  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14227  001408                     l5544:
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;doprnt.c: 1287: }
 14231                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14232  001408  0E01               	movlw	1
 14233  00140A  0100               	movlb	0	; () banked
 14234  00140C  6FA8               	movwf	printf@c& (0+255),b
 14235  00140E                     l5546:
 14236                           
 14237                           ; BSR set to: 0
 14238  00140E  0E05               	movlw	5
 14239  001410  0100               	movlb	0	; () banked
 14240  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14241  001414  B4D8               	btfsc	status,2,c
 14242  001416  D019               	goto	l5558
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;doprnt.c: 1306: if(val < dpowers[c])
 14246                           
 14247                           ; BSR set to: 0
 14248                           
 14249                           ; BSR set to: 0
 14250  001418  0100               	movlb	0	; () banked
 14251  00141A  51A8               	movf	printf@c& (0+255),w,b
 14252  00141C  0D02               	mullw	2
 14253  00141E  0E26               	movlw	low _dpowers
 14254  001420  24F3               	addwf	prodl,w,c
 14255  001422  6EF6               	movwf	tblptrl,c
 14256  001424  0EFB               	movlw	high _dpowers
 14257  001426  20F4               	addwfc	prodh,w,c
 14258  001428  6EF7               	movwf	tblptrh,c
 14259  00142A                     	if	1	;There are 3 active tblptr bytes
 14260  00142A  6AF8               	clrf	tblptru,c
 14261  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14262  00142E  22F8               	addwfc	tblptru,f,c
 14263  001430                     	endif
 14264  001430  0009               	tblrd		*+
 14265  001432  50F5               	movf	tablat,w,c
 14266  001434  0100               	movlb	0	; () banked
 14267  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14268  001438  0009               	tblrd		*+
 14269  00143A  50F5               	movf	tablat,w,c
 14270  00143C  0100               	movlb	0	; () banked
 14271  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14272  001440  A0D8               	btfss	status,0,c
 14273  001442  D003               	goto	l5558
 14274                           
 14275                           ; BSR set to: 0
 14276                           
 14277                           ; BSR set to: 0
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;doprnt.c: 1307: break;
 14281  001444  0100               	movlb	0	; () banked
 14282  001446  2BA8               	incf	printf@c& (0+255),f,b
 14283  001448  D7E2               	goto	l5546
 14284  00144A                     l5558:
 14285                           
 14286                           ; BSR set to: 0
 14287                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14288  00144A  0100               	movlb	0	; () banked
 14289  00144C  51A9               	movf	printf@width& (0+255),w,b
 14290  00144E  0100               	movlb	0	; () banked
 14291  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14292  001452  B4D8               	btfsc	status,2,c
 14293  001454  D00B               	goto	l5564
 14294                           
 14295                           ; BSR set to: 0
 14296  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14297  00145A  0E03               	movlw	3
 14298  00145C  0100               	movlb	0	; () banked
 14299  00145E  179A               	andwf	??_printf& (0+255),f,b
 14300  001460  B4D8               	btfsc	status,2,c
 14301  001462  D004               	goto	l5564
 14302                           
 14303                           ; BSR set to: 0
 14304                           ;doprnt.c: 1346: width--;
 14305  001464  0100               	movlb	0	; () banked
 14306  001466  07A9               	decf	printf@width& (0+255),f,b
 14307  001468  A0D8               	btfss	status,0,c
 14308  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14309  00146C                     l5564:
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;doprnt.c: 1381: if(width > c)
 14313  00146C  0E80               	movlw	128
 14314  00146E  0100               	movlb	0	; () banked
 14315  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14316  001472  0E7F               	movlw	127
 14317  001474  0100               	movlb	0	; () banked
 14318  001476  6F9A               	movwf	??_printf& (0+255),b
 14319  001478  0100               	movlb	0	; () banked
 14320  00147A  51A9               	movf	printf@width& (0+255),w,b
 14321  00147C  0100               	movlb	0	; () banked
 14322  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14323  001480  0100               	movlb	0	; () banked
 14324  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14325  001484  0A80               	xorlw	128
 14326  001486  0100               	movlb	0	; () banked
 14327  001488  599A               	subwfb	??_printf& (0+255),w,b
 14328  00148A  B0D8               	btfsc	status,0,c
 14329  00148C  D00B               	goto	l5568
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;doprnt.c: 1382: width -= c;
 14333  00148E  0100               	movlb	0	; () banked
 14334  001490  51A8               	movf	printf@c& (0+255),w,b
 14335  001492  0100               	movlb	0	; () banked
 14336  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14337  001496  0E00               	movlw	0
 14338  001498  0100               	movlb	0	; () banked
 14339  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14340  00149C  0EFF               	movlw	255
 14341  00149E  0100               	movlb	0	; () banked
 14342  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14343  0014A2  D005               	goto	l5570
 14344  0014A4                     l5568:
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;doprnt.c: 1383: else
 14348                           ;doprnt.c: 1384: width = 0;
 14349  0014A4  0E00               	movlw	0
 14350  0014A6  0100               	movlb	0	; () banked
 14351  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14352  0014AA  0E00               	movlw	0
 14353  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14354  0014AE                     l5570:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;doprnt.c: 1387: if(flag & 0x04) {
 14358  0014AE  0100               	movlb	0	; () banked
 14359  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14360  0014B2  D018               	goto	l5582
 14361                           
 14362                           ; BSR set to: 0
 14363                           ;doprnt.c: 1392: if(flag & 0x03)
 14364  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14365  0014B8  0E03               	movlw	3
 14366  0014BA  0100               	movlb	0	; () banked
 14367  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14368  0014BE  B4D8               	btfsc	status,2,c
 14369  0014C0  D003               	goto	l5576
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;doprnt.c: 1393: (putch('-') );
 14373  0014C2  0E2D               	movlw	45
 14374  0014C4  EC49  F024         	call	_putch
 14375  0014C8                     l5576:
 14376                           
 14377                           ;doprnt.c: 1415: if(width)
 14378  0014C8  0100               	movlb	0	; () banked
 14379  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14380  0014CC  0100               	movlb	0	; () banked
 14381  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14382  0014D0  B4D8               	btfsc	status,2,c
 14383  0014D2  D025               	goto	l5592
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;doprnt.c: 1417: (putch('0') );
 14387                           
 14388                           ; BSR set to: 0
 14389                           
 14390                           ;doprnt.c: 1416: do
 14391  0014D4  0E30               	movlw	48
 14392  0014D6  EC49  F024         	call	_putch
 14393                           
 14394                           ;doprnt.c: 1418: while(--width);
 14395  0014DA  0100               	movlb	0	; () banked
 14396  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14397  0014DE  A0D8               	btfss	status,0,c
 14398  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14399  0014E2  D7F2               	goto	l5576
 14400  0014E4                     l5582:
 14401                           
 14402                           ; BSR set to: 0
 14403                           ;doprnt.c: 1422: {
 14404                           ;doprnt.c: 1424: if(width
 14405                           ;doprnt.c: 1428: )
 14406  0014E4  0100               	movlb	0	; () banked
 14407  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14408  0014E8  0100               	movlb	0	; () banked
 14409  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14410  0014EC  B4D8               	btfsc	status,2,c
 14411  0014EE  D00D               	goto	l5588
 14412  0014F0                     l5584:
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;doprnt.c: 1430: (putch(' ') );
 14416  0014F0  0E20               	movlw	32
 14417  0014F2  EC49  F024         	call	_putch
 14418                           
 14419                           ;doprnt.c: 1431: while(--width);
 14420  0014F6  0100               	movlb	0	; () banked
 14421  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14422  0014FA  A0D8               	btfss	status,0,c
 14423  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14424  0014FE  0100               	movlb	0	; () banked
 14425  001500  51A9               	movf	printf@width& (0+255),w,b
 14426  001502  0100               	movlb	0	; () banked
 14427  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14428  001506  A4D8               	btfss	status,2,c
 14429  001508  D7F3               	goto	l5584
 14430  00150A                     l5588:
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;doprnt.c: 1438: if(flag & 0x03)
 14434  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14435  00150E  0E03               	movlw	3
 14436  001510  0100               	movlb	0	; () banked
 14437  001512  179A               	andwf	??_printf& (0+255),f,b
 14438  001514  B4D8               	btfsc	status,2,c
 14439  001516  D003               	goto	l5592
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;doprnt.c: 1439: (putch('-') );
 14443  001518  0E2D               	movlw	45
 14444  00151A  EC49  F024         	call	_putch
 14445  00151E                     l5592:
 14446                           
 14447                           ;doprnt.c: 1469: }
 14448                           ;doprnt.c: 1472: prec = c;
 14449  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14450                           
 14451                           ;doprnt.c: 1474: while(prec--) {
 14452  001522  D02C               	goto	l5598
 14453  001524                     l5594:
 14454                           
 14455                           ;doprnt.c: 1478: {
 14456                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14457  001524  0100               	movlb	0	; () banked
 14458  001526  519E               	movf	printf@prec& (0+255),w,b
 14459  001528  0D02               	mullw	2
 14460  00152A  0E26               	movlw	low _dpowers
 14461  00152C  24F3               	addwf	prodl,w,c
 14462  00152E  6EF6               	movwf	tblptrl,c
 14463  001530  0EFB               	movlw	high _dpowers
 14464  001532  20F4               	addwfc	prodh,w,c
 14465  001534  6EF7               	movwf	tblptrh,c
 14466  001536                     	if	1	;There are 3 active tblptr bytes
 14467  001536  6AF8               	clrf	tblptru,c
 14468  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14469  00153A  22F8               	addwfc	tblptru,f,c
 14470  00153C                     	endif
 14471  00153C  0009               	tblrd		*+
 14472  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14473  001542  000A               	tblrd		*-
 14474  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14475  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14476  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14477  001550  EC7C  F01E         	call	___lwdiv	;wreg free
 14478  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14479  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14480  00155C  0E00               	movlw	0
 14481  00155E  0100               	movlb	0	; () banked
 14482  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14483  001562  0E0A               	movlw	10
 14484  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14485  001566  EC94  F01F         	call	___lwmod	;wreg free
 14486  00156A  0100               	movlb	0	; () banked
 14487  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14488  00156E  0F30               	addlw	48
 14489  001570  0100               	movlb	0	; () banked
 14490  001572  6FA8               	movwf	printf@c& (0+255),b
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;doprnt.c: 1523: }
 14494                           ;doprnt.c: 1524: (putch(c) );
 14495  001574  0100               	movlb	0	; () banked
 14496  001576  51A8               	movf	printf@c& (0+255),w,b
 14497  001578  EC49  F024         	call	_putch
 14498  00157C                     l5598:
 14499  00157C  0100               	movlb	0	; () banked
 14500  00157E  079E               	decf	printf@prec& (0+255),f,b
 14501  001580  0100               	movlb	0	; () banked
 14502  001582  299E               	incf	printf@prec& (0+255),w,b
 14503  001584  A4D8               	btfss	status,2,c
 14504  001586  D7CE               	goto	l5594
 14505  001588                     l5600:
 14506  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14507  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14508  001590  0100               	movlb	0	; () banked
 14509  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14510  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14511  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14512  001596  6AF8               	clrf	tblptru,c
 14513  001598                     	endif
 14514  001598                     	if	0	;tblptru may be non-zero
 14515  001598                     	endif
 14516  001598  0008               	tblrd		*
 14517  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14518  00159E  0100               	movlb	0	; () banked
 14519  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14520  0015A2  B4D8               	btfsc	status,2,c
 14521  0015A4  0012               	return	
 14522  0015A6  D5EB               	goto	l5470
 14523  0015A8                     __end_of_printf:
 14524                           	opt stack 0
 14525                           tblptru	equ	0xFF8
 14526                           tblptrh	equ	0xFF7
 14527                           tblptrl	equ	0xFF6
 14528                           tablat	equ	0xFF5
 14529                           prodh	equ	0xFF4
 14530                           prodl	equ	0xFF3
 14531                           intcon	equ	0xFF2
 14532                           intcon2	equ	0xFF1
 14533                           intcon3	equ	0xFF0
 14534                           indf0	equ	0xFEF
 14535                           postinc0	equ	0xFEE
 14536                           fsr0h	equ	0xFEA
 14537                           fsr0l	equ	0xFE9
 14538                           wreg	equ	0xFE8
 14539                           postdec1	equ	0xFE5
 14540                           fsr1l	equ	0xFE1
 14541                           indf2	equ	0xFDF
 14542                           postinc2	equ	0xFDE
 14543                           postdec2	equ	0xFDD
 14544                           fsr2h	equ	0xFDA
 14545                           fsr2l	equ	0xFD9
 14546                           status	equ	0xFD8
 14547                           
 14548 ;; *************** function _putch *****************
 14549 ;; Defined at:
 14550 ;;		line 20 in file "lcd.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;  data            1    wreg     unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;  data            1    2[BANK0 ] unsigned char 
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  1    wreg      void 
 14557 ;; Registers used:
 14558 ;;		wreg, status,2, status,0, cstack
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14568 ;;Total ram usage:        1 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    8
 14571 ;; This function calls:
 14572 ;;		_lcdNibble
 14573 ;; This function is called by:
 14574 ;;		_printf
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           	psect	text49
 14579  004892                     __ptext49:
 14580                           	opt stack 0
 14581  004892                     _putch:
 14582                           	opt stack 18
 14583                           
 14584                           ;incstack = 0
 14585                           ;putch@data stored from wreg
 14586  004892  0100               	movlb	0	; () banked
 14587  004894  6F82               	movwf	putch@data& (0+255),b
 14588                           
 14589                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14590  004896  848C               	bsf	3980,2,c	;volatile
 14591                           
 14592                           ;lcd.c: 22: lcdNibble(data);
 14593  004898  0100               	movlb	0	; () banked
 14594  00489A  5182               	movf	putch@data& (0+255),w,b
 14595  00489C  EC60  F01F         	call	_lcdNibble
 14596  0048A0  0012               	return		;funcret
 14597  0048A2                     __end_of_putch:
 14598                           	opt stack 0
 14599                           tblptru	equ	0xFF8
 14600                           tblptrh	equ	0xFF7
 14601                           tblptrl	equ	0xFF6
 14602                           tablat	equ	0xFF5
 14603                           prodh	equ	0xFF4
 14604                           prodl	equ	0xFF3
 14605                           intcon	equ	0xFF2
 14606                           intcon2	equ	0xFF1
 14607                           intcon3	equ	0xFF0
 14608                           indf0	equ	0xFEF
 14609                           postinc0	equ	0xFEE
 14610                           fsr0h	equ	0xFEA
 14611                           fsr0l	equ	0xFE9
 14612                           wreg	equ	0xFE8
 14613                           postdec1	equ	0xFE5
 14614                           fsr1l	equ	0xFE1
 14615                           indf2	equ	0xFDF
 14616                           postinc2	equ	0xFDE
 14617                           postdec2	equ	0xFDD
 14618                           fsr2h	equ	0xFDA
 14619                           fsr2l	equ	0xFD9
 14620                           status	equ	0xFD8
 14621                           
 14622 ;; *************** function _isdigit *****************
 14623 ;; Defined at:
 14624 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  c               1    wreg     unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  c               1    2[BANK0 ] unsigned char 
 14629 ;; Return value:  Size  Location     Type
 14630 ;;		None               void
 14631 ;; Registers used:
 14632 ;;		wreg, status,2, status,0
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14641 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14642 ;;Total ram usage:        3 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    7
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		_printf
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           	psect	text50
 14653  0046DC                     __ptext50:
 14654                           	opt stack 0
 14655  0046DC                     _isdigit:
 14656                           	opt stack 19
 14657                           
 14658                           ;incstack = 0
 14659                           ;isdigit@c stored from wreg
 14660  0046DC  0100               	movlb	0	; () banked
 14661  0046DE  6F82               	movwf	isdigit@c& (0+255),b
 14662  0046E0  0E00               	movlw	0
 14663  0046E2  0100               	movlb	0	; () banked
 14664  0046E4  6F81               	movwf	_isdigit$1946& (0+255),b
 14665                           
 14666                           ; BSR set to: 0
 14667  0046E6  0E3A               	movlw	58
 14668  0046E8  0100               	movlb	0	; () banked
 14669  0046EA  6182               	cpfslt	isdigit@c& (0+255),b
 14670  0046EC  D007               	goto	l5318
 14671                           
 14672                           ; BSR set to: 0
 14673  0046EE  0E2F               	movlw	47
 14674  0046F0  0100               	movlb	0	; () banked
 14675  0046F2  6582               	cpfsgt	isdigit@c& (0+255),b
 14676  0046F4  D003               	goto	l5318
 14677                           
 14678                           ; BSR set to: 0
 14679  0046F6  0E01               	movlw	1
 14680  0046F8  0100               	movlb	0	; () banked
 14681  0046FA  6F81               	movwf	_isdigit$1946& (0+255),b
 14682  0046FC                     l5318:
 14683                           
 14684                           ; BSR set to: 0
 14685  0046FC  C081  F080         	movff	_isdigit$1946,??_isdigit
 14686  004700  0100               	movlb	0	; () banked
 14687  004702  3180               	rrcf	??_isdigit& (0+255),w,b
 14688  004704  0012               	return	
 14689  004706                     __end_of_isdigit:
 14690                           	opt stack 0
 14691                           tblptru	equ	0xFF8
 14692                           tblptrh	equ	0xFF7
 14693                           tblptrl	equ	0xFF6
 14694                           tablat	equ	0xFF5
 14695                           prodh	equ	0xFF4
 14696                           prodl	equ	0xFF3
 14697                           intcon	equ	0xFF2
 14698                           intcon2	equ	0xFF1
 14699                           intcon3	equ	0xFF0
 14700                           indf0	equ	0xFEF
 14701                           postinc0	equ	0xFEE
 14702                           fsr0h	equ	0xFEA
 14703                           fsr0l	equ	0xFE9
 14704                           wreg	equ	0xFE8
 14705                           postdec1	equ	0xFE5
 14706                           fsr1l	equ	0xFE1
 14707                           indf2	equ	0xFDF
 14708                           postinc2	equ	0xFDE
 14709                           postdec2	equ	0xFDD
 14710                           fsr2h	equ	0xFDA
 14711                           fsr2l	equ	0xFD9
 14712                           status	equ	0xFD8
 14713                           
 14714 ;; *************** function ___wmul *****************
 14715 ;; Defined at:
 14716 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14719 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  product         2    4[BANK0 ] unsigned int 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;                  2    0[BANK0 ] unsigned int 
 14724 ;; Registers used:
 14725 ;;		wreg, status,2, status,0, prodl, prodh
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14731 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14734 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14735 ;;Total ram usage:        6 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    7
 14738 ;; This function calls:
 14739 ;;		Nothing
 14740 ;; This function is called by:
 14741 ;;		_printf
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           	psect	text51
 14746  0043B0                     __ptext51:
 14747                           	opt stack 0
 14748  0043B0                     ___wmul:
 14749                           	opt stack 19
 14750                           
 14751                           ; BSR set to: 0
 14752                           ;incstack = 0
 14753  0043B0  0100               	movlb	0	; () banked
 14754  0043B2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14755  0043B4  0100               	movlb	0	; () banked
 14756  0043B6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14757  0043B8  CFF3 F084          	movff	prodl,___wmul@product
 14758  0043BC  CFF4 F085          	movff	prodh,___wmul@product+1
 14759  0043C0  0100               	movlb	0	; () banked
 14760  0043C2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14761  0043C4  0100               	movlb	0	; () banked
 14762  0043C6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14763  0043C8  50F3               	movf	prodl,w,c
 14764  0043CA  0100               	movlb	0	; () banked
 14765  0043CC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14766  0043CE  0100               	movlb	0	; () banked
 14767  0043D0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14768  0043D2  0100               	movlb	0	; () banked
 14769  0043D4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14770  0043D6  50F3               	movf	prodl,w,c
 14771  0043D8  0100               	movlb	0	; () banked
 14772  0043DA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14773                           
 14774                           ; BSR set to: 0
 14775  0043DC  C084  F080         	movff	___wmul@product,?___wmul
 14776  0043E0  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14777  0043E4  0012               	return	
 14778  0043E6                     __end_of___wmul:
 14779                           	opt stack 0
 14780                           tblptru	equ	0xFF8
 14781                           tblptrh	equ	0xFF7
 14782                           tblptrl	equ	0xFF6
 14783                           tablat	equ	0xFF5
 14784                           prodh	equ	0xFF4
 14785                           prodl	equ	0xFF3
 14786                           intcon	equ	0xFF2
 14787                           intcon2	equ	0xFF1
 14788                           intcon3	equ	0xFF0
 14789                           indf0	equ	0xFEF
 14790                           postinc0	equ	0xFEE
 14791                           fsr0h	equ	0xFEA
 14792                           fsr0l	equ	0xFE9
 14793                           wreg	equ	0xFE8
 14794                           postdec1	equ	0xFE5
 14795                           fsr1l	equ	0xFE1
 14796                           indf2	equ	0xFDF
 14797                           postinc2	equ	0xFDE
 14798                           postdec2	equ	0xFDD
 14799                           fsr2h	equ	0xFDA
 14800                           fsr2l	equ	0xFD9
 14801                           status	equ	0xFD8
 14802                           
 14803 ;; *************** function ___lwmod *****************
 14804 ;; Defined at:
 14805 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  dividend        2    7[BANK0 ] unsigned int 
 14808 ;;  divisor         2    9[BANK0 ] unsigned int 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;  counter         1   11[BANK0 ] unsigned char 
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  2    7[BANK0 ] unsigned int 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, status,0
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;Total ram usage:        5 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    7
 14827 ;; This function calls:
 14828 ;;		Nothing
 14829 ;; This function is called by:
 14830 ;;		_printf
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           	psect	text52
 14835  003F28                     __ptext52:
 14836                           	opt stack 0
 14837  003F28                     ___lwmod:
 14838                           	opt stack 19
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;incstack = 0
 14842  003F28  0100               	movlb	0	; () banked
 14843  003F2A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14844  003F2C  0100               	movlb	0	; () banked
 14845  003F2E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14846  003F30  B4D8               	btfsc	status,2,c
 14847  003F32  D026               	goto	l1719
 14848                           
 14849                           ; BSR set to: 0
 14850  003F34  0E01               	movlw	1
 14851  003F36  0100               	movlb	0	; () banked
 14852  003F38  6F8B               	movwf	___lwmod@counter& (0+255),b
 14853  003F3A  D006               	goto	l5356
 14854  003F3C                     l5354:
 14855                           
 14856                           ; BSR set to: 0
 14857  003F3C  0100               	movlb	0	; () banked
 14858  003F3E  90D8               	bcf	status,0,c
 14859  003F40  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14860  003F42  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14861  003F44  0100               	movlb	0	; () banked
 14862  003F46  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14863  003F48                     l5356:
 14864                           
 14865                           ; BSR set to: 0
 14866  003F48  0100               	movlb	0	; () banked
 14867  003F4A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14868  003F4C  D7F7               	goto	l5354
 14869  003F4E                     l5358:
 14870                           
 14871                           ; BSR set to: 0
 14872  003F4E  0100               	movlb	0	; () banked
 14873  003F50  5189               	movf	___lwmod@divisor& (0+255),w,b
 14874  003F52  0100               	movlb	0	; () banked
 14875  003F54  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14876  003F56  0100               	movlb	0	; () banked
 14877  003F58  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14878  003F5A  0100               	movlb	0	; () banked
 14879  003F5C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14880  003F5E  A0D8               	btfss	status,0,c
 14881  003F60  D008               	goto	l5362
 14882                           
 14883                           ; BSR set to: 0
 14884  003F62  0100               	movlb	0	; () banked
 14885  003F64  5189               	movf	___lwmod@divisor& (0+255),w,b
 14886  003F66  0100               	movlb	0	; () banked
 14887  003F68  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14888  003F6A  0100               	movlb	0	; () banked
 14889  003F6C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14890  003F6E  0100               	movlb	0	; () banked
 14891  003F70  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14892  003F72                     l5362:
 14893                           
 14894                           ; BSR set to: 0
 14895  003F72  0100               	movlb	0	; () banked
 14896  003F74  90D8               	bcf	status,0,c
 14897  003F76  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14898  003F78  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14899                           
 14900                           ; BSR set to: 0
 14901  003F7A  0100               	movlb	0	; () banked
 14902  003F7C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14903  003F7E  D7E7               	goto	l5358
 14904  003F80                     l1719:
 14905                           
 14906                           ; BSR set to: 0
 14907  003F80  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14908  003F84  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14909                           
 14910                           ; BSR set to: 0
 14911  003F88  0012               	return		;funcret
 14912  003F8A                     __end_of___lwmod:
 14913                           	opt stack 0
 14914                           tblptru	equ	0xFF8
 14915                           tblptrh	equ	0xFF7
 14916                           tblptrl	equ	0xFF6
 14917                           tablat	equ	0xFF5
 14918                           prodh	equ	0xFF4
 14919                           prodl	equ	0xFF3
 14920                           intcon	equ	0xFF2
 14921                           intcon2	equ	0xFF1
 14922                           intcon3	equ	0xFF0
 14923                           indf0	equ	0xFEF
 14924                           postinc0	equ	0xFEE
 14925                           fsr0h	equ	0xFEA
 14926                           fsr0l	equ	0xFE9
 14927                           wreg	equ	0xFE8
 14928                           postdec1	equ	0xFE5
 14929                           fsr1l	equ	0xFE1
 14930                           indf2	equ	0xFDF
 14931                           postinc2	equ	0xFDE
 14932                           postdec2	equ	0xFDD
 14933                           fsr2h	equ	0xFDA
 14934                           fsr2l	equ	0xFD9
 14935                           status	equ	0xFD8
 14936                           
 14937 ;; *************** function ___lwdiv *****************
 14938 ;; Defined at:
 14939 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14940 ;; Parameters:    Size  Location     Type
 14941 ;;  dividend        2    0[BANK0 ] unsigned int 
 14942 ;;  divisor         2    2[BANK0 ] unsigned int 
 14943 ;; Auto vars:     Size  Location     Type
 14944 ;;  quotient        2    4[BANK0 ] unsigned int 
 14945 ;;  counter         1    6[BANK0 ] unsigned char 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  2    0[BANK0 ] unsigned int 
 14948 ;; Registers used:
 14949 ;;		wreg, status,2, status,0
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14958 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14959 ;;Total ram usage:        7 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    7
 14962 ;; This function calls:
 14963 ;;		Nothing
 14964 ;; This function is called by:
 14965 ;;		_printf
 14966 ;; This function uses a non-reentrant model
 14967 ;;
 14968                           
 14969                           	psect	text53
 14970  003CF8                     __ptext53:
 14971                           	opt stack 0
 14972  003CF8                     ___lwdiv:
 14973                           	opt stack 19
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;incstack = 0
 14977  003CF8  0E00               	movlw	0
 14978  003CFA  0100               	movlb	0	; () banked
 14979  003CFC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14980  003CFE  0E00               	movlw	0
 14981  003D00  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14982                           
 14983                           ; BSR set to: 0
 14984  003D02  0100               	movlb	0	; () banked
 14985  003D04  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14986  003D06  0100               	movlb	0	; () banked
 14987  003D08  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14988  003D0A  B4D8               	btfsc	status,2,c
 14989  003D0C  D02C               	goto	l1709
 14990                           
 14991                           ; BSR set to: 0
 14992  003D0E  0E01               	movlw	1
 14993  003D10  0100               	movlb	0	; () banked
 14994  003D12  6F86               	movwf	___lwdiv@counter& (0+255),b
 14995  003D14  D006               	goto	l5336
 14996  003D16                     l5334:
 14997                           
 14998                           ; BSR set to: 0
 14999  003D16  0100               	movlb	0	; () banked
 15000  003D18  90D8               	bcf	status,0,c
 15001  003D1A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15002  003D1C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15003  003D1E  0100               	movlb	0	; () banked
 15004  003D20  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15005  003D22                     l5336:
 15006                           
 15007                           ; BSR set to: 0
 15008  003D22  0100               	movlb	0	; () banked
 15009  003D24  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15010  003D26  D7F7               	goto	l5334
 15011  003D28                     l5338:
 15012                           
 15013                           ; BSR set to: 0
 15014  003D28  0100               	movlb	0	; () banked
 15015  003D2A  90D8               	bcf	status,0,c
 15016  003D2C  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15017  003D2E  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15018                           
 15019                           ; BSR set to: 0
 15020  003D30  0100               	movlb	0	; () banked
 15021  003D32  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15022  003D34  0100               	movlb	0	; () banked
 15023  003D36  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15024  003D38  0100               	movlb	0	; () banked
 15025  003D3A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15026  003D3C  0100               	movlb	0	; () banked
 15027  003D3E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15028  003D40  A0D8               	btfss	status,0,c
 15029  003D42  D00A               	goto	l5346
 15030                           
 15031                           ; BSR set to: 0
 15032  003D44  0100               	movlb	0	; () banked
 15033  003D46  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15034  003D48  0100               	movlb	0	; () banked
 15035  003D4A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15036  003D4C  0100               	movlb	0	; () banked
 15037  003D4E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15038  003D50  0100               	movlb	0	; () banked
 15039  003D52  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15040                           
 15041                           ; BSR set to: 0
 15042  003D54  0100               	movlb	0	; () banked
 15043  003D56  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15044  003D58                     l5346:
 15045                           
 15046                           ; BSR set to: 0
 15047  003D58  0100               	movlb	0	; () banked
 15048  003D5A  90D8               	bcf	status,0,c
 15049  003D5C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15050  003D5E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15051                           
 15052                           ; BSR set to: 0
 15053  003D60  0100               	movlb	0	; () banked
 15054  003D62  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15055  003D64  D7E1               	goto	l5338
 15056  003D66                     l1709:
 15057                           
 15058                           ; BSR set to: 0
 15059  003D66  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15060  003D6A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15061                           
 15062                           ; BSR set to: 0
 15063  003D6E  0012               	return		;funcret
 15064  003D70                     __end_of___lwdiv:
 15065                           	opt stack 0
 15066                           tblptru	equ	0xFF8
 15067                           tblptrh	equ	0xFF7
 15068                           tblptrl	equ	0xFF6
 15069                           tablat	equ	0xFF5
 15070                           prodh	equ	0xFF4
 15071                           prodl	equ	0xFF3
 15072                           intcon	equ	0xFF2
 15073                           intcon2	equ	0xFF1
 15074                           intcon3	equ	0xFF0
 15075                           indf0	equ	0xFEF
 15076                           postinc0	equ	0xFEE
 15077                           fsr0h	equ	0xFEA
 15078                           fsr0l	equ	0xFE9
 15079                           wreg	equ	0xFE8
 15080                           postdec1	equ	0xFE5
 15081                           fsr1l	equ	0xFE1
 15082                           indf2	equ	0xFDF
 15083                           postinc2	equ	0xFDE
 15084                           postdec2	equ	0xFDD
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           
 15089 ;; *************** function _lcdInst *****************
 15090 ;; Defined at:
 15091 ;;		line 15 in file "lcd.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;  data            1    wreg     unsigned char 
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;  data            1    2[BANK0 ] unsigned char 
 15096 ;; Return value:  Size  Location     Type
 15097 ;;                  1    wreg      void 
 15098 ;; Registers used:
 15099 ;;		wreg, status,2, status,0, cstack
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : 0/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;Total ram usage:        1 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    8
 15112 ;; This function calls:
 15113 ;;		_lcdNibble
 15114 ;; This function is called by:
 15115 ;;		_UI
 15116 ;;		_change_state_to_menu_start
 15117 ;;		_change_state_to_menu_12
 15118 ;;		_change_state_to_menu_22
 15119 ;;		_initLCD
 15120 ;;		_printRTC
 15121 ;;		_Loading
 15122 ;;		_EEPROM_write
 15123 ;;		_Test
 15124 ;;		_algorithmTest
 15125 ;;		_sensorTest
 15126 ;;		_actuatorTest
 15127 ;;		_BothServos
 15128 ;;		_PortTestA5
 15129 ;;		_SolenoidTestA5
 15130 ;;		_ToggleTestA5
 15131 ;; This function uses a non-reentrant model
 15132 ;;
 15133                           
 15134                           	psect	text54
 15135  0048A2                     __ptext54:
 15136                           	opt stack 0
 15137  0048A2                     _lcdInst:
 15138                           	opt stack 20
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;incstack = 0
 15142                           ;lcdInst@data stored from wreg
 15143  0048A2  0100               	movlb	0	; () banked
 15144  0048A4  6F82               	movwf	lcdInst@data& (0+255),b
 15145                           
 15146                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15147  0048A6  948C               	bcf	3980,2,c	;volatile
 15148                           
 15149                           ;lcd.c: 17: lcdNibble(data);
 15150  0048A8  0100               	movlb	0	; () banked
 15151  0048AA  5182               	movf	lcdInst@data& (0+255),w,b
 15152  0048AC  EC60  F01F         	call	_lcdNibble
 15153  0048B0  0012               	return		;funcret
 15154  0048B2                     __end_of_lcdInst:
 15155                           	opt stack 0
 15156                           tblptru	equ	0xFF8
 15157                           tblptrh	equ	0xFF7
 15158                           tblptrl	equ	0xFF6
 15159                           tablat	equ	0xFF5
 15160                           prodh	equ	0xFF4
 15161                           prodl	equ	0xFF3
 15162                           intcon	equ	0xFF2
 15163                           intcon2	equ	0xFF1
 15164                           intcon3	equ	0xFF0
 15165                           indf0	equ	0xFEF
 15166                           postinc0	equ	0xFEE
 15167                           fsr0h	equ	0xFEA
 15168                           fsr0l	equ	0xFE9
 15169                           wreg	equ	0xFE8
 15170                           postdec1	equ	0xFE5
 15171                           fsr1l	equ	0xFE1
 15172                           indf2	equ	0xFDF
 15173                           postinc2	equ	0xFDE
 15174                           postdec2	equ	0xFDD
 15175                           fsr2h	equ	0xFDA
 15176                           fsr2l	equ	0xFD9
 15177                           status	equ	0xFD8
 15178                           
 15179 ;; *************** function _lcdNibble *****************
 15180 ;; Defined at:
 15181 ;;		line 25 in file "lcd.c"
 15182 ;; Parameters:    Size  Location     Type
 15183 ;;  data            1    wreg     unsigned char 
 15184 ;; Auto vars:     Size  Location     Type
 15185 ;;  data            1    1[BANK0 ] unsigned char 
 15186 ;;  temp            1    0[BANK0 ] unsigned char 
 15187 ;; Return value:  Size  Location     Type
 15188 ;;                  1    wreg      void 
 15189 ;; Registers used:
 15190 ;;		wreg, status,2, status,0
 15191 ;; Tracked objects:
 15192 ;;		On entry : 0/0
 15193 ;;		On exit  : 0/0
 15194 ;;		Unchanged: 0/0
 15195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15200 ;;Total ram usage:        2 bytes
 15201 ;; Hardware stack levels used:    1
 15202 ;; Hardware stack levels required when called:    7
 15203 ;; This function calls:
 15204 ;;		Nothing
 15205 ;; This function is called by:
 15206 ;;		_lcdInst
 15207 ;;		_putch
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           	psect	text55
 15212  003EC0                     __ptext55:
 15213                           	opt stack 0
 15214  003EC0                     _lcdNibble:
 15215                           	opt stack 20
 15216                           
 15217                           ;incstack = 0
 15218                           ;lcdNibble@data stored from wreg
 15219  003EC0  0100               	movlb	0	; () banked
 15220  003EC2  6F81               	movwf	lcdNibble@data& (0+255),b
 15221                           
 15222                           ;lcd.c: 27: char temp = data & 0xF0;
 15223  003EC4  0100               	movlb	0	; () banked
 15224  003EC6  5181               	movf	lcdNibble@data& (0+255),w,b
 15225  003EC8  0BF0               	andlw	240
 15226  003ECA  0100               	movlb	0	; () banked
 15227  003ECC  6F80               	movwf	lcdNibble@temp& (0+255),b
 15228                           
 15229                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15230  003ECE  508C               	movf	3980,w,c	;volatile
 15231  003ED0  0B0F               	andlw	15
 15232  003ED2  6E8C               	movwf	3980,c	;volatile
 15233                           
 15234                           ;lcd.c: 29: LATD = temp | LATD;
 15235  003ED4  0100               	movlb	0	; () banked
 15236  003ED6  5180               	movf	lcdNibble@temp& (0+255),w,b
 15237  003ED8  108C               	iorwf	3980,w,c	;volatile
 15238  003EDA  6E8C               	movwf	3980,c	;volatile
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15242  003EDC  868C               	bsf	3980,3,c	;volatile
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15246  003EDE  0E42               	movlw	66
 15247  003EE0                     u8347:
 15248  003EE0  2EE8               	decfsz	wreg,f,c
 15249  003EE2  D7FE               	bra	u8347
 15250  003EE4  D000               	nop2	
 15251                           
 15252                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15253  003EE6  968C               	bcf	3980,3,c	;volatile
 15254                           
 15255                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15256  003EE8  0E42               	movlw	66
 15257  003EEA                     u8357:
 15258  003EEA  2EE8               	decfsz	wreg,f,c
 15259  003EEC  D7FE               	bra	u8357
 15260  003EEE  D000               	nop2	
 15261                           
 15262                           ;lcd.c: 36: data = data << 4;
 15263  003EF0  0100               	movlb	0	; () banked
 15264  003EF2  3981               	swapf	lcdNibble@data& (0+255),w,b
 15265  003EF4  0BF0               	andlw	240
 15266  003EF6  0100               	movlb	0	; () banked
 15267  003EF8  6F81               	movwf	lcdNibble@data& (0+255),b
 15268                           
 15269                           ;lcd.c: 38: temp = data & 0xF0;
 15270  003EFA  0100               	movlb	0	; () banked
 15271  003EFC  5181               	movf	lcdNibble@data& (0+255),w,b
 15272  003EFE  0BF0               	andlw	240
 15273  003F00  0100               	movlb	0	; () banked
 15274  003F02  6F80               	movwf	lcdNibble@temp& (0+255),b
 15275                           
 15276                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15277  003F04  508C               	movf	3980,w,c	;volatile
 15278  003F06  0B0F               	andlw	15
 15279  003F08  6E8C               	movwf	3980,c	;volatile
 15280                           
 15281                           ;lcd.c: 40: LATD = temp | LATD;
 15282  003F0A  0100               	movlb	0	; () banked
 15283  003F0C  5180               	movf	lcdNibble@temp& (0+255),w,b
 15284  003F0E  108C               	iorwf	3980,w,c	;volatile
 15285  003F10  6E8C               	movwf	3980,c	;volatile
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15289  003F12  868C               	bsf	3980,3,c	;volatile
 15290                           
 15291                           ; BSR set to: 0
 15292                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15293  003F14  0E42               	movlw	66
 15294  003F16                     u8367:
 15295  003F16  2EE8               	decfsz	wreg,f,c
 15296  003F18  D7FE               	bra	u8367
 15297  003F1A  D000               	nop2	
 15298                           
 15299                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15300  003F1C  968C               	bcf	3980,3,c	;volatile
 15301                           
 15302                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15303  003F1E  0E42               	movlw	66
 15304  003F20                     u8377:
 15305  003F20  2EE8               	decfsz	wreg,f,c
 15306  003F22  D7FE               	bra	u8377
 15307  003F24  D000               	nop2	
 15308  003F26  0012               	return		;funcret
 15309  003F28                     __end_of_lcdNibble:
 15310                           	opt stack 0
 15311                           tblptru	equ	0xFF8
 15312                           tblptrh	equ	0xFF7
 15313                           tblptrl	equ	0xFF6
 15314                           tablat	equ	0xFF5
 15315                           prodh	equ	0xFF4
 15316                           prodl	equ	0xFF3
 15317                           intcon	equ	0xFF2
 15318                           intcon2	equ	0xFF1
 15319                           intcon3	equ	0xFF0
 15320                           indf0	equ	0xFEF
 15321                           postinc0	equ	0xFEE
 15322                           fsr0h	equ	0xFEA
 15323                           fsr0l	equ	0xFE9
 15324                           wreg	equ	0xFE8
 15325                           postdec1	equ	0xFE5
 15326                           fsr1l	equ	0xFE1
 15327                           indf2	equ	0xFDF
 15328                           postinc2	equ	0xFDE
 15329                           postdec2	equ	0xFDD
 15330                           fsr2h	equ	0xFDA
 15331                           fsr2l	equ	0xFD9
 15332                           status	equ	0xFD8
 15333                           
 15334 ;; *************** function _initServos *****************
 15335 ;; Defined at:
 15336 ;;		line 273 in file "sort.c"
 15337 ;; Parameters:    Size  Location     Type
 15338 ;;		None
 15339 ;; Auto vars:     Size  Location     Type
 15340 ;;		None
 15341 ;; Return value:  Size  Location     Type
 15342 ;;                  1    wreg      void 
 15343 ;; Registers used:
 15344 ;;		wreg, status,2, status,0, cstack
 15345 ;; Tracked objects:
 15346 ;;		On entry : 0/0
 15347 ;;		On exit  : 0/0
 15348 ;;		Unchanged: 0/0
 15349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15354 ;;Total ram usage:        1 bytes
 15355 ;; Hardware stack levels used:    1
 15356 ;; Hardware stack levels required when called:    8
 15357 ;; This function calls:
 15358 ;;		_updateServoPosition
 15359 ;; This function is called by:
 15360 ;;		_Loading
 15361 ;;		_BothServos
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           	psect	text56
 15366  004046                     __ptext56:
 15367                           	opt stack 0
 15368  004046                     _initServos:
 15369                           	opt stack 20
 15370                           
 15371                           ;sort.c: 274: updateServoPosition(1200, 1);
 15372                           
 15373                           ;incstack = 0
 15374  004046  0E04               	movlw	4
 15375  004048  0100               	movlb	0	; () banked
 15376  00404A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15377  00404C  0EB0               	movlw	176
 15378  00404E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15379  004050  0E00               	movlw	0
 15380  004052  0100               	movlb	0	; () banked
 15381  004054  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15382  004056  0E01               	movlw	1
 15383  004058  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15384  00405A  ECB8  F01E         	call	_updateServoPosition	;wreg free
 15385                           
 15386                           ;sort.c: 275: updateServoPosition(1150, 3);
 15387  00405E  0E04               	movlw	4
 15388  004060  0100               	movlb	0	; () banked
 15389  004062  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15390  004064  0E7E               	movlw	126
 15391  004066  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15392  004068  0E00               	movlw	0
 15393  00406A  0100               	movlb	0	; () banked
 15394  00406C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15395  00406E  0E03               	movlw	3
 15396  004070  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15397  004072  ECB8  F01E         	call	_updateServoPosition	;wreg free
 15398                           
 15399                           ;sort.c: 276: TMR1ON = 1;
 15400  004076  80CD               	bsf	4045,0,c	;volatile
 15401                           
 15402                           ;sort.c: 277: was_low_1 = 0;
 15403  004078  0E00               	movlw	0
 15404  00407A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15405  00407C  0E00               	movlw	0
 15406  00407E  6E79               	movwf	_was_low_1,c	;volatile
 15407                           
 15408                           ;sort.c: 278: _delay((unsigned long)((5)*(32000000/4000.0)));
 15409  004080  0E34               	movlw	52
 15410  004082  0100               	movlb	0	; () banked
 15411  004084  6F88               	movwf	??_initServos& (0+255),b
 15412  004086  0EF1               	movlw	241
 15413  004088                     u8387:
 15414  004088  2EE8               	decfsz	wreg,f,c
 15415  00408A  D7FE               	bra	u8387
 15416  00408C  2F88               	decfsz	??_initServos& (0+255),f,b
 15417  00408E  D7FC               	bra	u8387
 15418  004090  D000               	nop2	
 15419                           
 15420                           ;sort.c: 279: TMR3ON = 1;
 15421  004092  80B1               	bsf	4017,0,c	;volatile
 15422                           
 15423                           ;sort.c: 280: was_low_3 = 0;
 15424  004094  0E00               	movlw	0
 15425  004096  6E7C               	movwf	_was_low_3+1,c	;volatile
 15426  004098  0E00               	movlw	0
 15427  00409A  6E7B               	movwf	_was_low_3,c	;volatile
 15428                           
 15429                           ;sort.c: 282: LATCbits.LATC0 = 1;
 15430  00409C  808B               	bsf	3979,0,c	;volatile
 15431  00409E  0012               	return		;funcret
 15432  0040A0                     __end_of_initServos:
 15433                           	opt stack 0
 15434                           tblptru	equ	0xFF8
 15435                           tblptrh	equ	0xFF7
 15436                           tblptrl	equ	0xFF6
 15437                           tablat	equ	0xFF5
 15438                           prodh	equ	0xFF4
 15439                           prodl	equ	0xFF3
 15440                           intcon	equ	0xFF2
 15441                           intcon2	equ	0xFF1
 15442                           intcon3	equ	0xFF0
 15443                           indf0	equ	0xFEF
 15444                           postinc0	equ	0xFEE
 15445                           fsr0h	equ	0xFEA
 15446                           fsr0l	equ	0xFE9
 15447                           wreg	equ	0xFE8
 15448                           postdec1	equ	0xFE5
 15449                           fsr1l	equ	0xFE1
 15450                           indf2	equ	0xFDF
 15451                           postinc2	equ	0xFDE
 15452                           postdec2	equ	0xFDD
 15453                           fsr2h	equ	0xFDA
 15454                           fsr2l	equ	0xFD9
 15455                           status	equ	0xFD8
 15456                           
 15457 ;; *************** function _updateServoPosition *****************
 15458 ;; Defined at:
 15459 ;;		line 334 in file "sort.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;  time_us         2    0[BANK0 ] int 
 15462 ;;  timer           2    2[BANK0 ] int 
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;  my_time         2    6[BANK0 ] unsigned int 
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      void 
 15467 ;; Registers used:
 15468 ;;		wreg, status,2, status,0
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15475 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15477 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15478 ;;Total ram usage:        8 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    7
 15481 ;; This function calls:
 15482 ;;		Nothing
 15483 ;; This function is called by:
 15484 ;;		_Distribution
 15485 ;;		_initServos
 15486 ;;		_actuatorTest
 15487 ;;		_BothServos
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491                           	psect	text57
 15492  003D70                     __ptext57:
 15493                           	opt stack 0
 15494  003D70                     _updateServoPosition:
 15495                           	opt stack 20
 15496                           
 15497                           ;sort.c: 335: unsigned int my_time = 65535 - time_us;
 15498                           
 15499                           ;incstack = 0
 15500  003D70  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15501  003D74  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15502  003D78  0100               	movlb	0	; () banked
 15503  003D7A  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15504  003D7C  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15505  003D7E  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15506  003D80  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15507  003D82  0EFF               	movlw	255
 15508  003D84  0100               	movlb	0	; () banked
 15509  003D86  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15510  003D88  0100               	movlb	0	; () banked
 15511  003D8A  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15512  003D8C  0EFF               	movlw	255
 15513  003D8E  0100               	movlb	0	; () banked
 15514  003D90  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15515  003D92  0100               	movlb	0	; () banked
 15516  003D94  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15517                           
 15518                           ;sort.c: 336: switch(timer){
 15519  003D96  D015               	goto	l5642
 15520  003D98                     l5640:
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;sort.c: 338: servoTimes[0] = my_time >> 8;
 15524  003D98  0100               	movlb	0	; () banked
 15525  003D9A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15526  003D9C  0101               	movlb	1	; () banked
 15527  003D9E  6F1C               	movwf	_servoTimes& (0+255),b
 15528  003DA0  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15529                           
 15530                           ;sort.c: 339: servoTimes[1] = my_time & 0xFF;
 15531  003DA2  0100               	movlb	0	; () banked
 15532  003DA4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15533  003DA6  0101               	movlb	1	; () banked
 15534  003DA8  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15535  003DAA  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15536  003DAC                     l796:
 15537                           
 15538                           ;sort.c: 341: servoTimes[2] = my_time >> 8;
 15539  003DAC  0100               	movlb	0	; () banked
 15540  003DAE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15541  003DB0  0101               	movlb	1	; () banked
 15542  003DB2  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15543  003DB4  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15544                           
 15545                           ;sort.c: 342: servoTimes[3] = my_time & 0xFF;
 15546  003DB6  0100               	movlb	0	; () banked
 15547  003DB8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15548  003DBA  0101               	movlb	1	; () banked
 15549  003DBC  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15550  003DBE  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15551                           
 15552                           ;sort.c: 343: }
 15553  003DC0  0012               	return	
 15554  003DC2                     l5642:
 15555  003DC2  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15556  003DC6  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15557                           
 15558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15559                           ; Switch size 1, requested type "space"
 15560                           ; Number of cases is 1, Range of values is 0 to 0
 15561                           ; switch strategies available:
 15562                           ; Name         Instructions Cycles
 15563                           ; simple_byte            4     3 (average)
 15564                           ;	Chosen strategy is simple_byte
 15565  003DCA  0100               	movlb	0	; () banked
 15566  003DCC  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15567  003DCE  0A00               	xorlw	0	; case 0
 15568  003DD0  A4D8               	btfss	status,2,c
 15569  003DD2  0012               	return	
 15570                           
 15571                           ; BSR set to: 0
 15572                           ; Switch size 1, requested type "space"
 15573                           ; Number of cases is 2, Range of values is 1 to 3
 15574                           ; switch strategies available:
 15575                           ; Name         Instructions Cycles
 15576                           ; simple_byte            7     4 (average)
 15577                           ;	Chosen strategy is simple_byte
 15578  003DD4  0100               	movlb	0	; () banked
 15579  003DD6  5184               	movf	??_updateServoPosition& (0+255),w,b
 15580  003DD8  0A01               	xorlw	1	; case 1
 15581  003DDA  B4D8               	btfsc	status,2,c
 15582  003DDC  D7DD               	goto	l5640
 15583  003DDE  0A02               	xorlw	2	; case 3
 15584  003DE0  A4D8               	btfss	status,2,c
 15585  003DE2  0012               	return	
 15586  003DE4  D7E3               	goto	l796
 15587  003DE6                     __end_of_updateServoPosition:
 15588                           	opt stack 0
 15589                           tblptru	equ	0xFF8
 15590                           tblptrh	equ	0xFF7
 15591                           tblptrl	equ	0xFF6
 15592                           tablat	equ	0xFF5
 15593                           prodh	equ	0xFF4
 15594                           prodl	equ	0xFF3
 15595                           intcon	equ	0xFF2
 15596                           intcon2	equ	0xFF1
 15597                           intcon3	equ	0xFF0
 15598                           indf0	equ	0xFEF
 15599                           postinc0	equ	0xFEE
 15600                           fsr0h	equ	0xFEA
 15601                           fsr0l	equ	0xFE9
 15602                           wreg	equ	0xFE8
 15603                           postdec1	equ	0xFE5
 15604                           fsr1l	equ	0xFE1
 15605                           indf2	equ	0xFDF
 15606                           postinc2	equ	0xFDE
 15607                           postdec2	equ	0xFDD
 15608                           fsr2h	equ	0xFDA
 15609                           fsr2l	equ	0xFD9
 15610                           status	equ	0xFD8
 15611                           
 15612 ;; *************** function _handler *****************
 15613 ;; Defined at:
 15614 ;;		line 16 in file "interruptHandler.c"
 15615 ;; Parameters:    Size  Location     Type
 15616 ;;		None
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;		None
 15619 ;; Return value:  Size  Location     Type
 15620 ;;                  1    wreg      void 
 15621 ;; Registers used:
 15622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15623 ;; Tracked objects:
 15624 ;;		On entry : 0/0
 15625 ;;		On exit  : 0/0
 15626 ;;		Unchanged: 0/0
 15627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15630 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15631 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;Total ram usage:       16 bytes
 15633 ;; Hardware stack levels used:    1
 15634 ;; Hardware stack levels required when called:    6
 15635 ;; This function calls:
 15636 ;;		_printSortTimer
 15637 ;;		_updateMenu
 15638 ;; This function is called by:
 15639 ;;		Interrupt level 2
 15640 ;; This function uses a non-reentrant model
 15641 ;;
 15642                           
 15643                           	psect	intcode
 15644  000008                     __pintcode:
 15645                           	opt stack 0
 15646  000008                     _handler:
 15647                           	opt stack 18
 15648                           
 15649                           ;incstack = 0
 15650  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15651  00000A  ED3B  F016         	call	int_func,f	;refresh shadow registers
 15652                           tblptru	equ	0xFF8
 15653                           tblptrh	equ	0xFF7
 15654                           tblptrl	equ	0xFF6
 15655                           tablat	equ	0xFF5
 15656                           prodh	equ	0xFF4
 15657                           prodl	equ	0xFF3
 15658                           intcon	equ	0xFF2
 15659                           intcon2	equ	0xFF1
 15660                           intcon3	equ	0xFF0
 15661                           indf0	equ	0xFEF
 15662                           postinc0	equ	0xFEE
 15663                           fsr0h	equ	0xFEA
 15664                           fsr0l	equ	0xFE9
 15665                           wreg	equ	0xFE8
 15666                           postdec1	equ	0xFE5
 15667                           fsr1l	equ	0xFE1
 15668                           indf2	equ	0xFDF
 15669                           postinc2	equ	0xFDE
 15670                           postdec2	equ	0xFDD
 15671                           fsr2h	equ	0xFDA
 15672                           fsr2l	equ	0xFD9
 15673                           status	equ	0xFD8
 15674                           
 15675                           	psect	intcode_body
 15676  002C76                     __pintcode_body:
 15677                           	opt stack 18
 15678  002C76                     int_func:
 15679                           	opt stack 18
 15680  002C76  0006               	pop		; remove dummy address from shadow register refresh
 15681  002C78  CFFA F04D          	movff	pclath,??_handler+2
 15682  002C7C  CFFB F04E          	movff	pclatu,??_handler+3
 15683  002C80  CFE9 F04F          	movff	fsr0l,??_handler+4
 15684  002C84  CFEA F050          	movff	fsr0h,??_handler+5
 15685  002C88  CFE1 F051          	movff	fsr1l,??_handler+6
 15686  002C8C  CFE2 F052          	movff	fsr1h,??_handler+7
 15687  002C90  CFD9 F053          	movff	fsr2l,??_handler+8
 15688  002C94  CFDA F054          	movff	fsr2h,??_handler+9
 15689  002C98  CFF3 F055          	movff	prodl,??_handler+10
 15690  002C9C  CFF4 F056          	movff	prodh,??_handler+11
 15691  002CA0  CFF6 F057          	movff	tblptrl,??_handler+12
 15692  002CA4  CFF7 F058          	movff	tblptrh,??_handler+13
 15693  002CA8  CFF8 F059          	movff	tblptru,??_handler+14
 15694  002CAC  CFF5 F05A          	movff	tablat,??_handler+15
 15695                           
 15696                           ;interruptHandler.c: 18: if(INT1IF){
 15697  002CB0  A0F0               	btfss	intcon3,0,c	;volatile
 15698  002CB2  D020               	goto	i2l8214
 15699                           
 15700                           ;interruptHandler.c: 19: INT1IF = 0;
 15701  002CB4  90F0               	bcf	intcon3,0,c	;volatile
 15702                           
 15703                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15704  002CB6  0100               	movlb	0	; () banked
 15705  002CB8  51FC               	movf	_machine_state& (0+255),w,b
 15706  002CBA  A4D8               	btfss	status,2,c
 15707  002CBC  D01B               	goto	i2l8214
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15711  002CBE  3881               	swapf	3969,w,c	;volatile
 15712  002CC0  0B0F               	andlw	15
 15713  002CC2  0B0F               	andlw	15
 15714  002CC4  6E4B               	movwf	??_handler& (0+255),c
 15715  002CC6  6A4C               	clrf	(??_handler+1)& (0+255),c
 15716  002CC8  0E15               	movlw	low _keys
 15717  002CCA  244B               	addwf	??_handler,w,c
 15718  002CCC  6EF6               	movwf	tblptrl,c
 15719  002CCE  0EFB               	movlw	high _keys
 15720  002CD0  204C               	addwfc	??_handler+1,w,c
 15721  002CD2  6EF7               	movwf	tblptrh,c
 15722  002CD4                     	if	1	;There are 3 active tblptr bytes
 15723  002CD4  6AF8               	clrf	tblptru,c
 15724  002CD6  0E00               	movlw	low (__mediumconst shr (0+16))
 15725  002CD8  22F8               	addwfc	tblptru,f,c
 15726  002CDA                     	endif
 15727  002CDA  0008               	tblrd		*
 15728  002CDC  CFF5 F07D          	movff	tablat,_input	;volatile
 15729                           
 15730                           ; BSR set to: 0
 15731                           ;interruptHandler.c: 23: if(input == '*'){
 15732  002CE0  0E2A               	movlw	42
 15733  002CE2  187D               	xorwf	_input,w,c	;volatile
 15734  002CE4  A4D8               	btfss	status,2,c
 15735  002CE6  D004               	goto	i2l8212
 15736                           
 15737                           ; BSR set to: 0
 15738                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15739  002CE8  0E03               	movlw	3
 15740  002CEA  0100               	movlb	0	; () banked
 15741  002CEC  6FFC               	movwf	_machine_state& (0+255),b
 15742                           
 15743                           ;interruptHandler.c: 25: }
 15744  002CEE  D002               	goto	i2l8214
 15745  002CF0                     i2l8212:
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;interruptHandler.c: 26: else{
 15749                           ;interruptHandler.c: 27: updateMenu();
 15750  002CF0  EC13  F011         	call	_updateMenu	;wreg free
 15751  002CF4                     i2l8214:
 15752                           
 15753                           ;interruptHandler.c: 28: }
 15754                           ;interruptHandler.c: 29: }
 15755                           ;interruptHandler.c: 30: }
 15756                           ;interruptHandler.c: 33: if(TMR0IF){
 15757  002CF4  A4F2               	btfss	intcon,2,c	;volatile
 15758  002CF6  D00C               	goto	i2l8228
 15759                           
 15760                           ;interruptHandler.c: 34: TMR0IF = 0;
 15761  002CF8  94F2               	bcf	intcon,2,c	;volatile
 15762                           
 15763                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15764  002CFA  0100               	movlb	0	; () banked
 15765  002CFC  05FC               	decf	_machine_state& (0+255),w,b
 15766  002CFE  A4D8               	btfss	status,2,c
 15767  002D00  D007               	goto	i2l8228
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;interruptHandler.c: 36: printSortTimer();
 15771  002D02  EC8E  F013         	call	_printSortTimer	;wreg free
 15772                           
 15773                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15774  002D06  0E85               	movlw	133
 15775  002D08  6ED7               	movwf	4055,c	;volatile
 15776                           
 15777                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15778  002D0A  0EEE               	movlw	238
 15779  002D0C  6ED6               	movwf	4054,c	;volatile
 15780                           
 15781                           ;interruptHandler.c: 40: TMR0ON = 1;
 15782  002D0E  8ED5               	bsf	4053,7,c	;volatile
 15783  002D10                     i2l8228:
 15784                           
 15785                           ;interruptHandler.c: 41: }
 15786                           ;interruptHandler.c: 42: }
 15787                           ;interruptHandler.c: 45: if(TMR1IF){
 15788  002D10  A09E               	btfss	3998,0,c	;volatile
 15789  002D12  D024               	goto	i2l8252
 15790                           
 15791                           ;interruptHandler.c: 46: TMR1IF = 0;
 15792  002D14  909E               	bcf	3998,0,c	;volatile
 15793                           
 15794                           ;interruptHandler.c: 47: TMR1ON = 0;
 15795  002D16  90CD               	bcf	4045,0,c	;volatile
 15796                           
 15797                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15798  002D18  0100               	movlb	0	; () banked
 15799  002D1A  05FC               	decf	_machine_state& (0+255),w,b
 15800  002D1C  A4D8               	btfss	status,2,c
 15801  002D1E  D01E               	goto	i2l8252
 15802                           
 15803                           ; BSR set to: 0
 15804                           ;interruptHandler.c: 49: if(was_low_1){
 15805  002D20  5079               	movf	_was_low_1,w,c	;volatile
 15806  002D22  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15807  002D24  B4D8               	btfsc	status,2,c
 15808  002D26  D00A               	goto	i2l861
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15812  002D28  828B               	bsf	3979,1,c	;volatile
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;interruptHandler.c: 51: was_low_1 = 0;
 15816  002D2A  0E00               	movlw	0
 15817  002D2C  6E7A               	movwf	_was_low_1+1,c	;volatile
 15818  002D2E  0E00               	movlw	0
 15819  002D30  6E79               	movwf	_was_low_1,c	;volatile
 15820                           
 15821                           ; BSR set to: 0
 15822                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15823  002D32  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15827  002D36  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15828                           
 15829                           ;interruptHandler.c: 54: }
 15830  002D3A  D00F               	goto	i2l8250
 15831  002D3C                     i2l861:
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;interruptHandler.c: 55: else{
 15835                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15836  002D3C  928B               	bcf	3979,1,c	;volatile
 15837                           
 15838                           ; BSR set to: 0
 15839                           ;interruptHandler.c: 57: was_low_1 = 1;
 15840  002D3E  0E00               	movlw	0
 15841  002D40  6E7A               	movwf	_was_low_1+1,c	;volatile
 15842  002D42  0E01               	movlw	1
 15843  002D44  6E79               	movwf	_was_low_1,c	;volatile
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15847  002D46  0101               	movlb	1	; () banked
 15848  002D48  511C               	movf	_servoTimes& (0+255),w,b
 15849  002D4A  0800               	sublw	0
 15850  002D4C  0F20               	addlw	32
 15851  002D4E  6ECF               	movwf	4047,c	;volatile
 15852                           
 15853                           ; BSR set to: 1
 15854                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15855  002D50  0101               	movlb	1	; () banked
 15856  002D52  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15857  002D54  0800               	sublw	0
 15858  002D56  0F20               	addlw	32
 15859  002D58  6ECE               	movwf	4046,c	;volatile
 15860  002D5A                     i2l8250:
 15861                           
 15862                           ;interruptHandler.c: 60: }
 15863                           ;interruptHandler.c: 61: TMR1ON = 1;
 15864  002D5A  80CD               	bsf	4045,0,c	;volatile
 15865  002D5C                     i2l8252:
 15866                           
 15867                           ;interruptHandler.c: 62: }
 15868                           ;interruptHandler.c: 63: }
 15869                           ;interruptHandler.c: 65: if(TMR3IF){
 15870  002D5C  A2A1               	btfss	4001,1,c	;volatile
 15871  002D5E  D024               	goto	i2l867
 15872                           
 15873                           ;interruptHandler.c: 66: TMR3IF = 0;
 15874  002D60  92A1               	bcf	4001,1,c	;volatile
 15875                           
 15876                           ;interruptHandler.c: 67: TMR3ON = 0;
 15877  002D62  90B1               	bcf	4017,0,c	;volatile
 15878                           
 15879                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15880  002D64  0100               	movlb	0	; () banked
 15881  002D66  05FC               	decf	_machine_state& (0+255),w,b
 15882  002D68  A4D8               	btfss	status,2,c
 15883  002D6A  D01E               	goto	i2l867
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;interruptHandler.c: 69: if(was_low_3){
 15887  002D6C  507B               	movf	_was_low_3,w,c	;volatile
 15888  002D6E  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15889  002D70  B4D8               	btfsc	status,2,c
 15890  002D72  D00A               	goto	i2l865
 15891                           
 15892                           ; BSR set to: 0
 15893                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15894  002D74  848B               	bsf	3979,2,c	;volatile
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;interruptHandler.c: 71: was_low_3 = 0;
 15898  002D76  0E00               	movlw	0
 15899  002D78  6E7C               	movwf	_was_low_3+1,c	;volatile
 15900  002D7A  0E00               	movlw	0
 15901  002D7C  6E7B               	movwf	_was_low_3,c	;volatile
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15905  002D7E  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15909  002D82  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15910                           
 15911                           ;interruptHandler.c: 74: }
 15912  002D86  D00F               	goto	i2l8274
 15913  002D88                     i2l865:
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;interruptHandler.c: 75: else{
 15917                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15918  002D88  948B               	bcf	3979,2,c	;volatile
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;interruptHandler.c: 77: was_low_3 = 1;
 15922  002D8A  0E00               	movlw	0
 15923  002D8C  6E7C               	movwf	_was_low_3+1,c	;volatile
 15924  002D8E  0E01               	movlw	1
 15925  002D90  6E7B               	movwf	_was_low_3,c	;volatile
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15929  002D92  0101               	movlb	1	; () banked
 15930  002D94  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15931  002D96  0800               	sublw	0
 15932  002D98  0F20               	addlw	32
 15933  002D9A  6EB3               	movwf	4019,c	;volatile
 15934                           
 15935                           ; BSR set to: 1
 15936                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15937  002D9C  0101               	movlb	1	; () banked
 15938  002D9E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15939  002DA0  0800               	sublw	0
 15940  002DA2  0F20               	addlw	32
 15941  002DA4  6EB2               	movwf	4018,c	;volatile
 15942  002DA6                     i2l8274:
 15943                           
 15944                           ;interruptHandler.c: 80: }
 15945                           ;interruptHandler.c: 81: TMR3ON = 1;
 15946  002DA6  80B1               	bsf	4017,0,c	;volatile
 15947  002DA8                     i2l867:
 15948  002DA8  C05A  FFF5         	movff	??_handler+15,tablat
 15949  002DAC  C059  FFF8         	movff	??_handler+14,tblptru
 15950  002DB0  C058  FFF7         	movff	??_handler+13,tblptrh
 15951  002DB4  C057  FFF6         	movff	??_handler+12,tblptrl
 15952  002DB8  C056  FFF4         	movff	??_handler+11,prodh
 15953  002DBC  C055  FFF3         	movff	??_handler+10,prodl
 15954  002DC0  C054  FFDA         	movff	??_handler+9,fsr2h
 15955  002DC4  C053  FFD9         	movff	??_handler+8,fsr2l
 15956  002DC8  C052  FFE2         	movff	??_handler+7,fsr1h
 15957  002DCC  C051  FFE1         	movff	??_handler+6,fsr1l
 15958  002DD0  C050  FFEA         	movff	??_handler+5,fsr0h
 15959  002DD4  C04F  FFE9         	movff	??_handler+4,fsr0l
 15960  002DD8  C04E  FFFB         	movff	??_handler+3,pclatu
 15961  002DDC  C04D  FFFA         	movff	??_handler+2,pclath
 15962  002DE0  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15963  002DE2  0011               	retfie		f
 15964  002DE4                     __end_of_handler:
 15965                           	opt stack 0
 15966                           pclatu	equ	0xFFB
 15967                           pclath	equ	0xFFA
 15968                           tblptru	equ	0xFF8
 15969                           tblptrh	equ	0xFF7
 15970                           tblptrl	equ	0xFF6
 15971                           tablat	equ	0xFF5
 15972                           prodh	equ	0xFF4
 15973                           prodl	equ	0xFF3
 15974                           intcon	equ	0xFF2
 15975                           intcon2	equ	0xFF1
 15976                           intcon3	equ	0xFF0
 15977                           indf0	equ	0xFEF
 15978                           postinc0	equ	0xFEE
 15979                           fsr0h	equ	0xFEA
 15980                           fsr0l	equ	0xFE9
 15981                           wreg	equ	0xFE8
 15982                           postdec1	equ	0xFE5
 15983                           fsr1h	equ	0xFE2
 15984                           fsr1l	equ	0xFE1
 15985                           indf2	equ	0xFDF
 15986                           postinc2	equ	0xFDE
 15987                           postdec2	equ	0xFDD
 15988                           fsr2h	equ	0xFDA
 15989                           fsr2l	equ	0xFD9
 15990                           status	equ	0xFD8
 15991                           
 15992 ;; *************** function _updateMenu *****************
 15993 ;; Defined at:
 15994 ;;		line 213 in file "UI.c"
 15995 ;; Parameters:    Size  Location     Type
 15996 ;;		None
 15997 ;; Auto vars:     Size  Location     Type
 15998 ;;		None
 15999 ;; Return value:  Size  Location     Type
 16000 ;;                  1    wreg      void 
 16001 ;; Registers used:
 16002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16003 ;; Tracked objects:
 16004 ;;		On entry : 0/0
 16005 ;;		On exit  : 0/0
 16006 ;;		Unchanged: 0/0
 16007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;Total ram usage:        2 bytes
 16013 ;; Hardware stack levels used:    1
 16014 ;; Hardware stack levels required when called:    5
 16015 ;; This function calls:
 16016 ;;		_change_state_to_logs_11
 16017 ;;		_change_state_to_logs_12
 16018 ;;		_change_state_to_logs_22
 16019 ;;		_change_state_to_logs_23
 16020 ;;		_change_state_to_logs_33
 16021 ;;		_change_state_to_logs_34
 16022 ;;		_change_state_to_menu_11
 16023 ;;		_change_state_to_menu_23
 16024 ;;		_dispLogs
 16025 ;;		_inputHandler
 16026 ;;		i2_change_state_to_menu_12
 16027 ;;		i2_change_state_to_menu_22
 16028 ;;		i2_change_state_to_menu_start
 16029 ;; This function is called by:
 16030 ;;		_handler
 16031 ;; This function uses a non-reentrant model
 16032 ;;
 16033                           
 16034                           	psect	text59
 16035  002226                     __ptext59:
 16036                           	opt stack 0
 16037  002226                     _updateMenu:
 16038                           	opt stack 18
 16039                           
 16040                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16041                           
 16042                           ;incstack = 0
 16043  002226  0E00               	movlw	0
 16044  002228  6E78               	movwf	_up+1,c
 16045  00222A  0E00               	movlw	0
 16046  00222C  6E77               	movwf	_up,c
 16047  00222E  0E00               	movlw	0
 16048  002230  6E68               	movwf	_down+1,c
 16049  002232  0E00               	movlw	0
 16050  002234  6E67               	movwf	_down,c
 16051  002236  0E00               	movlw	0
 16052  002238  6E6A               	movwf	_enter+1,c
 16053  00223A  0E00               	movlw	0
 16054  00223C  6E69               	movwf	_enter,c
 16055  00223E  0E00               	movlw	0
 16056  002240  6E5C               	movwf	_back+1,c
 16057  002242  0E00               	movlw	0
 16058  002244  6E5B               	movwf	_back,c
 16059                           
 16060                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16061  002246  9EF2               	bcf	intcon,7,c	;volatile
 16062                           
 16063                           ;UI.c: 217: if (inputHandler()
 16064                           ;UI.c: 220: ){
 16065  002248  EC87  F014         	call	_inputHandler	;wreg free
 16066  00224C  502A               	movf	?_inputHandler,w,c
 16067  00224E  102B               	iorwf	?_inputHandler+1,w,c
 16068  002250  A4D8               	btfss	status,2,c
 16069  002252  D112               	goto	i2l7950
 16070  002254  D146               	goto	i2l257
 16071  002256                     i2l7802:
 16072                           
 16073                           ;UI.c: 224: change_state_to_menu_11();
 16074  002256  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 16075                           
 16076                           ;UI.c: 225: break;
 16077  00225A  D143               	goto	i2l257
 16078  00225C                     i2l7804:
 16079                           
 16080                           ;UI.c: 228: if(up){
 16081  00225C  5077               	movf	_up,w,c
 16082  00225E  1078               	iorwf	_up+1,w,c
 16083  002260  B4D8               	btfsc	status,2,c
 16084  002262  D003               	goto	i2l7808
 16085                           
 16086                           ;UI.c: 229: change_state_to_menu_23();
 16087  002264  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16088                           
 16089                           ;UI.c: 230: }
 16090  002268  D13C               	goto	i2l257
 16091  00226A                     i2l7808:
 16092                           
 16093                           ;UI.c: 231: else if(down){
 16094  00226A  5067               	movf	_down,w,c
 16095  00226C  1068               	iorwf	_down+1,w,c
 16096  00226E  B4D8               	btfsc	status,2,c
 16097  002270  D003               	goto	i2l7812
 16098                           
 16099                           ;UI.c: 232: change_state_to_menu_12();
 16100  002272  EC3D  F022         	call	i2_change_state_to_menu_12	;wreg free
 16101                           
 16102                           ;UI.c: 233: }
 16103  002276  D135               	goto	i2l257
 16104  002278                     i2l7812:
 16105                           
 16106                           ;UI.c: 234: else if(enter){
 16107  002278  5069               	movf	_enter,w,c
 16108  00227A  106A               	iorwf	_enter+1,w,c
 16109  00227C  B4D8               	btfsc	status,2,c
 16110  00227E  D131               	goto	i2l257
 16111                           
 16112                           ;UI.c: 235: change_state_to_menu_start();
 16113  002280  EC97  F023         	call	i2_change_state_to_menu_start	;wreg free
 16114                           
 16115                           ;UI.c: 236: }
 16116                           ;UI.c: 237: break;
 16117  002284  D12E               	goto	i2l257
 16118  002286                     i2l7816:
 16119                           
 16120                           ;UI.c: 240: if(up){
 16121  002286  5077               	movf	_up,w,c
 16122  002288  1078               	iorwf	_up+1,w,c
 16123  00228A  B4D8               	btfsc	status,2,c
 16124  00228C  D003               	goto	i2l7820
 16125                           
 16126                           ;UI.c: 241: change_state_to_menu_11();
 16127  00228E  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 16128                           
 16129                           ;UI.c: 242: }
 16130  002292  D127               	goto	i2l257
 16131  002294                     i2l7820:
 16132                           
 16133                           ;UI.c: 243: else if(down){
 16134  002294  5067               	movf	_down,w,c
 16135  002296  1068               	iorwf	_down+1,w,c
 16136  002298  B4D8               	btfsc	status,2,c
 16137  00229A  D011               	goto	i2l7836
 16138                           
 16139                           ;UI.c: 244: change_state_to_menu_23();
 16140  00229C  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16141                           
 16142                           ;UI.c: 245: }
 16143  0022A0  D120               	goto	i2l257
 16144  0022A2                     i2l7828:
 16145                           
 16146                           ;UI.c: 252: if(up){
 16147  0022A2  5077               	movf	_up,w,c
 16148  0022A4  1078               	iorwf	_up+1,w,c
 16149  0022A6  B4D8               	btfsc	status,2,c
 16150  0022A8  D003               	goto	i2l7832
 16151                           
 16152                           ;UI.c: 253: change_state_to_menu_11();
 16153  0022AA  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 16154                           
 16155                           ;UI.c: 254: }
 16156  0022AE  D119               	goto	i2l257
 16157  0022B0                     i2l7832:
 16158                           
 16159                           ;UI.c: 255: else if(down){
 16160  0022B0  5067               	movf	_down,w,c
 16161  0022B2  1068               	iorwf	_down+1,w,c
 16162  0022B4  B4D8               	btfsc	status,2,c
 16163  0022B6  D003               	goto	i2l7836
 16164                           
 16165                           ;UI.c: 256: change_state_to_menu_23();
 16166  0022B8  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16167                           
 16168                           ;UI.c: 257: }
 16169  0022BC  D112               	goto	i2l257
 16170  0022BE                     i2l7836:
 16171                           
 16172                           ;UI.c: 258: else if(enter){
 16173  0022BE  5069               	movf	_enter,w,c
 16174  0022C0  106A               	iorwf	_enter+1,w,c
 16175  0022C2  B4D8               	btfsc	status,2,c
 16176  0022C4  D10E               	goto	i2l257
 16177                           
 16178                           ;UI.c: 259: machine_state = Sorting_state;
 16179  0022C6  0E01               	movlw	1
 16180  0022C8  0100               	movlb	0	; () banked
 16181  0022CA  6FFC               	movwf	_machine_state& (0+255),b
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;UI.c: 260: }
 16185                           ;UI.c: 261: break;
 16186                           
 16187                           ; BSR set to: 0
 16188                           
 16189                           ; BSR set to: 0
 16190  0022CC  D10A               	goto	i2l257
 16191  0022CE                     i2l7840:
 16192                           
 16193                           ;UI.c: 264: if(up){
 16194  0022CE  5077               	movf	_up,w,c
 16195  0022D0  1078               	iorwf	_up+1,w,c
 16196  0022D2  B4D8               	btfsc	status,2,c
 16197  0022D4  D003               	goto	i2l7844
 16198                           
 16199                           ;UI.c: 265: change_state_to_menu_22();
 16200  0022D6  EC25  F022         	call	i2_change_state_to_menu_22	;wreg free
 16201                           
 16202                           ;UI.c: 266: }
 16203  0022DA  D103               	goto	i2l257
 16204  0022DC                     i2l7844:
 16205                           
 16206                           ;UI.c: 267: else if(down){
 16207  0022DC  5067               	movf	_down,w,c
 16208  0022DE  1068               	iorwf	_down+1,w,c
 16209  0022E0  B4D8               	btfsc	status,2,c
 16210  0022E2  D003               	goto	i2l7848
 16211                           
 16212                           ;UI.c: 268: change_state_to_menu_11();
 16213  0022E4  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 16214                           
 16215                           ;UI.c: 269: }
 16216  0022E8  D0FC               	goto	i2l257
 16217  0022EA                     i2l7848:
 16218                           
 16219                           ;UI.c: 270: else if(enter){
 16220  0022EA  5069               	movf	_enter,w,c
 16221  0022EC  106A               	iorwf	_enter+1,w,c
 16222  0022EE  B4D8               	btfsc	status,2,c
 16223  0022F0  D0F8               	goto	i2l257
 16224                           
 16225                           ;UI.c: 271: change_state_to_logs_11();
 16226  0022F2  ECE5  F022         	call	_change_state_to_logs_11	;wreg free
 16227                           
 16228                           ;UI.c: 272: }
 16229                           ;UI.c: 273: break;
 16230  0022F6  D0F5               	goto	i2l257
 16231  0022F8                     i2l7852:
 16232                           
 16233                           ;UI.c: 276: if(up){
 16234  0022F8  5077               	movf	_up,w,c
 16235  0022FA  1078               	iorwf	_up+1,w,c
 16236  0022FC  B4D8               	btfsc	status,2,c
 16237  0022FE  D003               	goto	i2l7856
 16238                           
 16239                           ;UI.c: 277: change_state_to_logs_34();
 16240  002300  EC85  F022         	call	_change_state_to_logs_34	;wreg free
 16241                           
 16242                           ;UI.c: 278: }
 16243  002304  D0EE               	goto	i2l257
 16244  002306                     i2l7856:
 16245                           
 16246                           ;UI.c: 279: else if(down){
 16247  002306  5067               	movf	_down,w,c
 16248  002308  1068               	iorwf	_down+1,w,c
 16249  00230A  B4D8               	btfsc	status,2,c
 16250  00230C  D003               	goto	i2l7860
 16251                           
 16252                           ;UI.c: 280: change_state_to_logs_12();
 16253  00230E  ECCD  F022         	call	_change_state_to_logs_12	;wreg free
 16254                           
 16255                           ;UI.c: 281: }
 16256  002312  D0E7               	goto	i2l257
 16257  002314                     i2l7860:
 16258                           
 16259                           ;UI.c: 282: else if(enter){
 16260  002314  5069               	movf	_enter,w,c
 16261  002316  106A               	iorwf	_enter+1,w,c
 16262  002318  B4D8               	btfsc	status,2,c
 16263  00231A  D007               	goto	i2l7864
 16264                           
 16265                           ;UI.c: 283: dispLogs(1);
 16266  00231C  0E00               	movlw	0
 16267  00231E  6E13               	movwf	dispLogs@myLog+1,c
 16268  002320  0E01               	movlw	1
 16269  002322  6E12               	movwf	dispLogs@myLog,c
 16270  002324  ECD1  F023         	call	_dispLogs	;wreg free
 16271                           
 16272                           ;UI.c: 284: }
 16273  002328  D0DC               	goto	i2l257
 16274  00232A                     i2l7864:
 16275                           
 16276                           ;UI.c: 285: else if(back){
 16277  00232A  505B               	movf	_back,w,c
 16278  00232C  105C               	iorwf	_back+1,w,c
 16279  00232E  B4D8               	btfsc	status,2,c
 16280  002330  D0D8               	goto	i2l257
 16281                           
 16282                           ;UI.c: 286: change_state_to_menu_23();
 16283  002332  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16284                           
 16285                           ;UI.c: 287: }
 16286                           ;UI.c: 288: break;
 16287  002336  D0D5               	goto	i2l257
 16288  002338                     i2l7868:
 16289                           
 16290                           ;UI.c: 291: if(up){
 16291  002338  5077               	movf	_up,w,c
 16292  00233A  1078               	iorwf	_up+1,w,c
 16293  00233C  B4D8               	btfsc	status,2,c
 16294  00233E  D003               	goto	i2l7872
 16295                           
 16296                           ;UI.c: 292: change_state_to_logs_11();
 16297  002340  ECE5  F022         	call	_change_state_to_logs_11	;wreg free
 16298                           
 16299                           ;UI.c: 293: }
 16300  002344  D0CE               	goto	i2l257
 16301  002346                     i2l7872:
 16302                           
 16303                           ;UI.c: 294: else if(down){
 16304  002346  5067               	movf	_down,w,c
 16305  002348  1068               	iorwf	_down+1,w,c
 16306  00234A  B4D8               	btfsc	status,2,c
 16307  00234C  D003               	goto	i2l7876
 16308                           
 16309                           ;UI.c: 295: change_state_to_logs_23();
 16310  00234E  EC2B  F023         	call	_change_state_to_logs_23	;wreg free
 16311                           
 16312                           ;UI.c: 296: }
 16313  002352  D0C7               	goto	i2l257
 16314  002354                     i2l7876:
 16315                           
 16316                           ;UI.c: 297: else if(enter){
 16317  002354  5069               	movf	_enter,w,c
 16318  002356  106A               	iorwf	_enter+1,w,c
 16319  002358  B4D8               	btfsc	status,2,c
 16320  00235A  D007               	goto	i2l7880
 16321                           
 16322                           ;UI.c: 298: dispLogs(2);
 16323  00235C  0E00               	movlw	0
 16324  00235E  6E13               	movwf	dispLogs@myLog+1,c
 16325  002360  0E02               	movlw	2
 16326  002362  6E12               	movwf	dispLogs@myLog,c
 16327  002364  ECD1  F023         	call	_dispLogs	;wreg free
 16328                           
 16329                           ;UI.c: 299: }
 16330  002368  D0BC               	goto	i2l257
 16331  00236A                     i2l7880:
 16332                           
 16333                           ;UI.c: 300: else if(back){
 16334  00236A  505B               	movf	_back,w,c
 16335  00236C  105C               	iorwf	_back+1,w,c
 16336  00236E  B4D8               	btfsc	status,2,c
 16337  002370  D0B8               	goto	i2l257
 16338                           
 16339                           ;UI.c: 301: change_state_to_menu_23();
 16340  002372  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16341                           
 16342                           ;UI.c: 302: }
 16343                           ;UI.c: 303: break;
 16344  002376  D0B5               	goto	i2l257
 16345  002378                     i2l7884:
 16346                           
 16347                           ;UI.c: 306: if(up){
 16348  002378  5077               	movf	_up,w,c
 16349  00237A  1078               	iorwf	_up+1,w,c
 16350  00237C  B4D8               	btfsc	status,2,c
 16351  00237E  D003               	goto	i2l7888
 16352                           
 16353                           ;UI.c: 307: change_state_to_logs_11();
 16354  002380  ECE5  F022         	call	_change_state_to_logs_11	;wreg free
 16355                           
 16356                           ;UI.c: 308: }
 16357  002384  D0AE               	goto	i2l257
 16358  002386                     i2l7888:
 16359                           
 16360                           ;UI.c: 309: else if(down){
 16361  002386  5067               	movf	_down,w,c
 16362  002388  1068               	iorwf	_down+1,w,c
 16363  00238A  B4D8               	btfsc	status,2,c
 16364  00238C  D003               	goto	i2l7892
 16365                           
 16366                           ;UI.c: 310: change_state_to_logs_23();
 16367  00238E  EC2B  F023         	call	_change_state_to_logs_23	;wreg free
 16368                           
 16369                           ;UI.c: 311: }
 16370  002392  D0A7               	goto	i2l257
 16371  002394                     i2l7892:
 16372                           
 16373                           ;UI.c: 312: else if(enter){
 16374  002394  5069               	movf	_enter,w,c
 16375  002396  106A               	iorwf	_enter+1,w,c
 16376  002398  B4D8               	btfsc	status,2,c
 16377  00239A  D007               	goto	i2l7896
 16378                           
 16379                           ;UI.c: 313: dispLogs(2);
 16380  00239C  0E00               	movlw	0
 16381  00239E  6E13               	movwf	dispLogs@myLog+1,c
 16382  0023A0  0E02               	movlw	2
 16383  0023A2  6E12               	movwf	dispLogs@myLog,c
 16384  0023A4  ECD1  F023         	call	_dispLogs	;wreg free
 16385                           
 16386                           ;UI.c: 314: }
 16387  0023A8  D09C               	goto	i2l257
 16388  0023AA                     i2l7896:
 16389                           
 16390                           ;UI.c: 315: else if(back){
 16391  0023AA  505B               	movf	_back,w,c
 16392  0023AC  105C               	iorwf	_back+1,w,c
 16393  0023AE  B4D8               	btfsc	status,2,c
 16394  0023B0  D098               	goto	i2l257
 16395                           
 16396                           ;UI.c: 316: change_state_to_menu_23();
 16397  0023B2  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16398                           
 16399                           ;UI.c: 317: }
 16400                           ;UI.c: 318: break;
 16401  0023B6  D095               	goto	i2l257
 16402  0023B8                     i2l7900:
 16403                           
 16404                           ;UI.c: 321: if(up){
 16405  0023B8  5077               	movf	_up,w,c
 16406  0023BA  1078               	iorwf	_up+1,w,c
 16407  0023BC  B4D8               	btfsc	status,2,c
 16408  0023BE  D003               	goto	i2l7904
 16409                           
 16410                           ;UI.c: 322: change_state_to_logs_22();
 16411  0023C0  ECB5  F022         	call	_change_state_to_logs_22	;wreg free
 16412                           
 16413                           ;UI.c: 323: }
 16414  0023C4  D08E               	goto	i2l257
 16415  0023C6                     i2l7904:
 16416                           
 16417                           ;UI.c: 324: else if(down){
 16418  0023C6  5067               	movf	_down,w,c
 16419  0023C8  1068               	iorwf	_down+1,w,c
 16420  0023CA  B4D8               	btfsc	status,2,c
 16421  0023CC  D003               	goto	i2l7908
 16422                           
 16423                           ;UI.c: 325: change_state_to_logs_34();
 16424  0023CE  EC85  F022         	call	_change_state_to_logs_34	;wreg free
 16425                           
 16426                           ;UI.c: 326: }
 16427  0023D2  D087               	goto	i2l257
 16428  0023D4                     i2l7908:
 16429                           
 16430                           ;UI.c: 327: else if(enter){
 16431  0023D4  5069               	movf	_enter,w,c
 16432  0023D6  106A               	iorwf	_enter+1,w,c
 16433  0023D8  B4D8               	btfsc	status,2,c
 16434  0023DA  D007               	goto	i2l7912
 16435                           
 16436                           ;UI.c: 328: dispLogs(3);
 16437  0023DC  0E00               	movlw	0
 16438  0023DE  6E13               	movwf	dispLogs@myLog+1,c
 16439  0023E0  0E03               	movlw	3
 16440  0023E2  6E12               	movwf	dispLogs@myLog,c
 16441  0023E4  ECD1  F023         	call	_dispLogs	;wreg free
 16442                           
 16443                           ;UI.c: 329: }
 16444  0023E8  D07C               	goto	i2l257
 16445  0023EA                     i2l7912:
 16446                           
 16447                           ;UI.c: 330: else if(back){
 16448  0023EA  505B               	movf	_back,w,c
 16449  0023EC  105C               	iorwf	_back+1,w,c
 16450  0023EE  B4D8               	btfsc	status,2,c
 16451  0023F0  D078               	goto	i2l257
 16452                           
 16453                           ;UI.c: 331: change_state_to_menu_23();
 16454  0023F2  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16455                           
 16456                           ;UI.c: 332: }
 16457                           ;UI.c: 333: break;
 16458  0023F6  D075               	goto	i2l257
 16459  0023F8                     i2l7916:
 16460                           
 16461                           ;UI.c: 336: if(up){
 16462  0023F8  5077               	movf	_up,w,c
 16463  0023FA  1078               	iorwf	_up+1,w,c
 16464  0023FC  B4D8               	btfsc	status,2,c
 16465  0023FE  D003               	goto	i2l7920
 16466                           
 16467                           ;UI.c: 337: change_state_to_logs_22();
 16468  002400  ECB5  F022         	call	_change_state_to_logs_22	;wreg free
 16469                           
 16470                           ;UI.c: 338: }
 16471  002404  D06E               	goto	i2l257
 16472  002406                     i2l7920:
 16473                           
 16474                           ;UI.c: 339: else if(down){
 16475  002406  5067               	movf	_down,w,c
 16476  002408  1068               	iorwf	_down+1,w,c
 16477  00240A  B4D8               	btfsc	status,2,c
 16478  00240C  D003               	goto	i2l7924
 16479                           
 16480                           ;UI.c: 340: change_state_to_logs_34();
 16481  00240E  EC85  F022         	call	_change_state_to_logs_34	;wreg free
 16482                           
 16483                           ;UI.c: 341: }
 16484  002412  D067               	goto	i2l257
 16485  002414                     i2l7924:
 16486                           
 16487                           ;UI.c: 342: else if(enter){
 16488  002414  5069               	movf	_enter,w,c
 16489  002416  106A               	iorwf	_enter+1,w,c
 16490  002418  B4D8               	btfsc	status,2,c
 16491  00241A  D007               	goto	i2l7928
 16492                           
 16493                           ;UI.c: 343: dispLogs(3);
 16494  00241C  0E00               	movlw	0
 16495  00241E  6E13               	movwf	dispLogs@myLog+1,c
 16496  002420  0E03               	movlw	3
 16497  002422  6E12               	movwf	dispLogs@myLog,c
 16498  002424  ECD1  F023         	call	_dispLogs	;wreg free
 16499                           
 16500                           ;UI.c: 344: }
 16501  002428  D05C               	goto	i2l257
 16502  00242A                     i2l7928:
 16503                           
 16504                           ;UI.c: 345: else if(back){
 16505  00242A  505B               	movf	_back,w,c
 16506  00242C  105C               	iorwf	_back+1,w,c
 16507  00242E  B4D8               	btfsc	status,2,c
 16508  002430  D058               	goto	i2l257
 16509                           
 16510                           ;UI.c: 346: change_state_to_menu_23();
 16511  002432  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16512                           
 16513                           ;UI.c: 347: }
 16514                           ;UI.c: 348: break;
 16515  002436  D055               	goto	i2l257
 16516  002438                     i2l7932:
 16517                           
 16518                           ;UI.c: 351: if(up){
 16519  002438  5077               	movf	_up,w,c
 16520  00243A  1078               	iorwf	_up+1,w,c
 16521  00243C  B4D8               	btfsc	status,2,c
 16522  00243E  D003               	goto	i2l7936
 16523                           
 16524                           ;UI.c: 352: change_state_to_logs_33();
 16525  002440  EC9D  F022         	call	_change_state_to_logs_33	;wreg free
 16526                           
 16527                           ;UI.c: 353: }
 16528  002444  D04E               	goto	i2l257
 16529  002446                     i2l7936:
 16530                           
 16531                           ;UI.c: 354: else if(down){
 16532  002446  5067               	movf	_down,w,c
 16533  002448  1068               	iorwf	_down+1,w,c
 16534  00244A  B4D8               	btfsc	status,2,c
 16535  00244C  D003               	goto	i2l7940
 16536                           
 16537                           ;UI.c: 355: change_state_to_logs_11();
 16538  00244E  ECE5  F022         	call	_change_state_to_logs_11	;wreg free
 16539                           
 16540                           ;UI.c: 356: }
 16541  002452  D047               	goto	i2l257
 16542  002454                     i2l7940:
 16543                           
 16544                           ;UI.c: 357: else if(enter){
 16545  002454  5069               	movf	_enter,w,c
 16546  002456  106A               	iorwf	_enter+1,w,c
 16547  002458  B4D8               	btfsc	status,2,c
 16548  00245A  D007               	goto	i2l7944
 16549                           
 16550                           ;UI.c: 358: dispLogs(4);
 16551  00245C  0E00               	movlw	0
 16552  00245E  6E13               	movwf	dispLogs@myLog+1,c
 16553  002460  0E04               	movlw	4
 16554  002462  6E12               	movwf	dispLogs@myLog,c
 16555  002464  ECD1  F023         	call	_dispLogs	;wreg free
 16556                           
 16557                           ;UI.c: 359: }
 16558  002468  D03C               	goto	i2l257
 16559  00246A                     i2l7944:
 16560                           
 16561                           ;UI.c: 360: else if(back){
 16562  00246A  505B               	movf	_back,w,c
 16563  00246C  105C               	iorwf	_back+1,w,c
 16564  00246E  B4D8               	btfsc	status,2,c
 16565  002470  D038               	goto	i2l257
 16566                           
 16567                           ;UI.c: 361: change_state_to_menu_23();
 16568  002472  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 16569                           
 16570                           ;UI.c: 367: }
 16571                           
 16572                           ;UI.c: 366: break;
 16573                           
 16574                           ;UI.c: 365: default:
 16575                           
 16576                           ;UI.c: 362: }
 16577                           ;UI.c: 363: break;
 16578  002476  D035               	goto	i2l257
 16579  002478                     i2l7950:
 16580  002478  C0E0  F043         	movff	_cur_state,??_updateMenu
 16581  00247C  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16582                           
 16583                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16584                           ; Switch size 1, requested type "space"
 16585                           ; Number of cases is 3, Range of values is 0 to 4
 16586                           ; switch strategies available:
 16587                           ; Name         Instructions Cycles
 16588                           ; simple_byte           10     6 (average)
 16589                           ;	Chosen strategy is simple_byte
 16590  002480  5044               	movf	??_updateMenu+1,w,c
 16591  002482  0A00               	xorlw	0	; case 0
 16592  002484  B4D8               	btfsc	status,2,c
 16593  002486  D007               	goto	i2l8538
 16594  002488  0A03               	xorlw	3	; case 3
 16595  00248A  B4D8               	btfsc	status,2,c
 16596  00248C  D015               	goto	i2l8540
 16597  00248E  0A07               	xorlw	7	; case 4
 16598  002490  B4D8               	btfsc	status,2,c
 16599  002492  D020               	goto	i2l8542
 16600  002494  D026               	goto	i2l257
 16601  002496                     i2l8538:
 16602                           
 16603                           ; Switch size 1, requested type "space"
 16604                           ; Number of cases is 5, Range of values is 0 to 23
 16605                           ; switch strategies available:
 16606                           ; Name         Instructions Cycles
 16607                           ; simple_byte           16     9 (average)
 16608                           ;	Chosen strategy is simple_byte
 16609  002496  5043               	movf	??_updateMenu,w,c
 16610  002498  0A00               	xorlw	0	; case 0
 16611  00249A  B4D8               	btfsc	status,2,c
 16612  00249C  D6DC               	goto	i2l7802
 16613  00249E  0A0B               	xorlw	11	; case 11
 16614  0024A0  B4D8               	btfsc	status,2,c
 16615  0024A2  D6DC               	goto	i2l7804
 16616  0024A4  0A07               	xorlw	7	; case 12
 16617  0024A6  B4D8               	btfsc	status,2,c
 16618  0024A8  D6EE               	goto	i2l7816
 16619  0024AA  0A1A               	xorlw	26	; case 22
 16620  0024AC  B4D8               	btfsc	status,2,c
 16621  0024AE  D6F9               	goto	i2l7828
 16622  0024B0  0A01               	xorlw	1	; case 23
 16623  0024B2  B4D8               	btfsc	status,2,c
 16624  0024B4  D70C               	goto	i2l7840
 16625  0024B6  D015               	goto	i2l257
 16626  0024B8                     i2l8540:
 16627                           
 16628                           ; Switch size 1, requested type "space"
 16629                           ; Number of cases is 4, Range of values is 243 to 255
 16630                           ; switch strategies available:
 16631                           ; Name         Instructions Cycles
 16632                           ; simple_byte           13     7 (average)
 16633                           ;	Chosen strategy is simple_byte
 16634  0024B8  5043               	movf	??_updateMenu,w,c
 16635  0024BA  0AF3               	xorlw	243	; case 243
 16636  0024BC  B4D8               	btfsc	status,2,c
 16637  0024BE  D71C               	goto	i2l7852
 16638  0024C0  0A07               	xorlw	7	; case 244
 16639  0024C2  B4D8               	btfsc	status,2,c
 16640  0024C4  D739               	goto	i2l7868
 16641  0024C6  0A0A               	xorlw	10	; case 254
 16642  0024C8  B4D8               	btfsc	status,2,c
 16643  0024CA  D756               	goto	i2l7884
 16644  0024CC  0A01               	xorlw	1	; case 255
 16645  0024CE  B4D8               	btfsc	status,2,c
 16646  0024D0  D773               	goto	i2l7900
 16647  0024D2  D007               	goto	i2l257
 16648  0024D4                     i2l8542:
 16649                           
 16650                           ; Switch size 1, requested type "space"
 16651                           ; Number of cases is 2, Range of values is 9 to 10
 16652                           ; switch strategies available:
 16653                           ; Name         Instructions Cycles
 16654                           ; simple_byte            7     4 (average)
 16655                           ;	Chosen strategy is simple_byte
 16656  0024D4  5043               	movf	??_updateMenu,w,c
 16657  0024D6  0A09               	xorlw	9	; case 9
 16658  0024D8  B4D8               	btfsc	status,2,c
 16659  0024DA  D78E               	goto	i2l7916
 16660  0024DC  0A03               	xorlw	3	; case 10
 16661  0024DE  B4D8               	btfsc	status,2,c
 16662  0024E0  D7AB               	goto	i2l7932
 16663  0024E2                     i2l257:
 16664                           
 16665                           ;UI.c: 368: }
 16666                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16667  0024E2  8EF2               	bsf	intcon,7,c	;volatile
 16668  0024E4  0012               	return		;funcret
 16669  0024E6                     __end_of_updateMenu:
 16670                           	opt stack 0
 16671                           pclatu	equ	0xFFB
 16672                           pclath	equ	0xFFA
 16673                           tblptru	equ	0xFF8
 16674                           tblptrh	equ	0xFF7
 16675                           tblptrl	equ	0xFF6
 16676                           tablat	equ	0xFF5
 16677                           prodh	equ	0xFF4
 16678                           prodl	equ	0xFF3
 16679                           intcon	equ	0xFF2
 16680                           intcon2	equ	0xFF1
 16681                           intcon3	equ	0xFF0
 16682                           indf0	equ	0xFEF
 16683                           postinc0	equ	0xFEE
 16684                           fsr0h	equ	0xFEA
 16685                           fsr0l	equ	0xFE9
 16686                           wreg	equ	0xFE8
 16687                           postdec1	equ	0xFE5
 16688                           fsr1h	equ	0xFE2
 16689                           fsr1l	equ	0xFE1
 16690                           indf2	equ	0xFDF
 16691                           postinc2	equ	0xFDE
 16692                           postdec2	equ	0xFDD
 16693                           fsr2h	equ	0xFDA
 16694                           fsr2l	equ	0xFD9
 16695                           status	equ	0xFD8
 16696                           
 16697 ;; *************** function i2_change_state_to_menu_start *****************
 16698 ;; Defined at:
 16699 ;;		line 474 in file "UI.c"
 16700 ;; Parameters:    Size  Location     Type
 16701 ;;		None
 16702 ;; Auto vars:     Size  Location     Type
 16703 ;;		None
 16704 ;; Return value:  Size  Location     Type
 16705 ;;                  1    wreg      void 
 16706 ;; Registers used:
 16707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;Total ram usage:        0 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; Hardware stack levels required when called:    4
 16720 ;; This function calls:
 16721 ;;		i2_lcdInst
 16722 ;;		i2_printRTC
 16723 ;;		i2_printf
 16724 ;; This function is called by:
 16725 ;;		_updateMenu
 16726 ;; This function uses a non-reentrant model
 16727 ;;
 16728                           
 16729                           	psect	text60
 16730  00472E                     __ptext60:
 16731                           	opt stack 0
 16732  00472E                     i2_change_state_to_menu_start:
 16733                           	opt stack 18
 16734                           
 16735                           ;UI.c: 475: cur_state = 0;
 16736                           
 16737                           ;incstack = 0
 16738  00472E  0E00               	movlw	0
 16739  004730  0100               	movlb	0	; () banked
 16740  004732  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16741  004734  0E00               	movlw	0
 16742  004736  6FE0               	movwf	_cur_state& (0+255),b
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;UI.c: 477: lcdInst(0b10000000);;
 16746  004738  0E80               	movlw	128
 16747  00473A  EC5F  F024         	call	i2_lcdInst
 16748                           
 16749                           ;UI.c: 478: printRTC();
 16750  00473E  EC73  F012         	call	i2_printRTC	;wreg free
 16751                           
 16752                           ;UI.c: 479: lcdInst(0b11000000);;
 16753  004742  0EC0               	movlw	192
 16754  004744  EC5F  F024         	call	i2_lcdInst
 16755                           
 16756                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16757  004748  0E0D               	movlw	low STR_30
 16758  00474A  6E0D               	movwf	i2printf@f,c
 16759  00474C  0EFE               	movlw	high STR_30
 16760  00474E  6E0E               	movwf	i2printf@f+1,c
 16761  004750  ECD4  F00A         	call	i2_printf	;wreg free
 16762  004754  0012               	return		;funcret
 16763  004756                     __end_ofi2_change_state_to_menu_start:
 16764                           	opt stack 0
 16765                           pclatu	equ	0xFFB
 16766                           pclath	equ	0xFFA
 16767                           tblptru	equ	0xFF8
 16768                           tblptrh	equ	0xFF7
 16769                           tblptrl	equ	0xFF6
 16770                           tablat	equ	0xFF5
 16771                           prodh	equ	0xFF4
 16772                           prodl	equ	0xFF3
 16773                           intcon	equ	0xFF2
 16774                           intcon2	equ	0xFF1
 16775                           intcon3	equ	0xFF0
 16776                           indf0	equ	0xFEF
 16777                           postinc0	equ	0xFEE
 16778                           fsr0h	equ	0xFEA
 16779                           fsr0l	equ	0xFE9
 16780                           wreg	equ	0xFE8
 16781                           postdec1	equ	0xFE5
 16782                           fsr1h	equ	0xFE2
 16783                           fsr1l	equ	0xFE1
 16784                           indf2	equ	0xFDF
 16785                           postinc2	equ	0xFDE
 16786                           postdec2	equ	0xFDD
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function i2_printRTC *****************
 16792 ;; Defined at:
 16793 ;;		line 63 in file "RTC.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;		None
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;  printRTC       14   44[COMRAM] int [7]
 16798 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16799 ;;  printRTC        2   64[COMRAM] int 
 16800 ;;  printRTC        2   58[COMRAM] int 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  1    wreg      void 
 16803 ;; Registers used:
 16804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;Total ram usage:       25 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    3
 16817 ;; This function calls:
 16818 ;;		i2_getRTC
 16819 ;;		i2_lcdInst
 16820 ;;		i2_printf
 16821 ;;		i2_strcpy
 16822 ;; This function is called by:
 16823 ;;		i2_change_state_to_menu_start
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text61
 16828  0024E6                     __ptext61:
 16829                           	opt stack 0
 16830  0024E6                     i2_printRTC:
 16831                           	opt stack 18
 16832                           
 16833                           ;RTC.c: 64: getRTC();
 16834                           
 16835                           ;incstack = 0
 16836  0024E6  ECF3  F01E         	call	i2_getRTC	;wreg free
 16837                           
 16838                           ;RTC.c: 65: char month[] = "MMM";
 16839  0024EA  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16840  0024EE  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16841  0024F2  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16842  0024F6  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16843                           
 16844                           ;RTC.c: 66: int INT_time[7];
 16845                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16846  0024FA  0E00               	movlw	0
 16847  0024FC  6E42               	movwf	i2printRTC@i+1,c
 16848  0024FE  0E00               	movlw	0
 16849  002500  6E41               	movwf	i2printRTC@i,c
 16850  002502  BE42               	btfsc	i2printRTC@i+1,7,c
 16851  002504  D006               	goto	i2l6172
 16852  002506  5042               	movf	i2printRTC@i+1,w,c
 16853  002508  E135               	bnz	i2l602
 16854  00250A  0E07               	movlw	7
 16855  00250C  5C41               	subwf	i2printRTC@i,w,c
 16856  00250E  B0D8               	btfsc	status,0,c
 16857  002510  D031               	goto	i2l602
 16858  002512                     i2l6172:
 16859                           
 16860                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16861  002512  0E24               	movlw	low _time
 16862  002514  2441               	addwf	i2printRTC@i,w,c
 16863  002516  6ED9               	movwf	fsr2l,c
 16864  002518  0E01               	movlw	high _time
 16865  00251A  2042               	addwfc	i2printRTC@i+1,w,c
 16866  00251C  6EDA               	movwf	fsr2h,c
 16867  00251E  50DF               	movf	indf2,w,c
 16868  002520  6E2A               	movwf	??i2_printRTC& (0+255),c
 16869  002522  3A2A               	swapf	??i2_printRTC,f,c
 16870  002524  0E0F               	movlw	15
 16871  002526  162A               	andwf	??i2_printRTC,f,c
 16872  002528  0E0F               	movlw	15
 16873  00252A  162A               	andwf	??i2_printRTC,f,c
 16874  00252C  502A               	movf	??i2_printRTC,w,c
 16875  00252E  0D0A               	mullw	10
 16876  002530  0E24               	movlw	low _time
 16877  002532  2441               	addwf	i2printRTC@i,w,c
 16878  002534  6ED9               	movwf	fsr2l,c
 16879  002536  0E01               	movlw	high _time
 16880  002538  2042               	addwfc	i2printRTC@i+1,w,c
 16881  00253A  6EDA               	movwf	fsr2h,c
 16882  00253C  50DF               	movf	indf2,w,c
 16883  00253E  0B0F               	andlw	15
 16884  002540  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16885  002542  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16886  002544  50F3               	movf	prodl,w,c
 16887  002546  262B               	addwf	??i2_printRTC+1,f,c
 16888  002548  50F4               	movf	prodh,w,c
 16889  00254A  222C               	addwfc	??i2_printRTC+2,f,c
 16890  00254C  90D8               	bcf	status,0,c
 16891  00254E  3441               	rlcf	i2printRTC@i,w,c
 16892  002550  6ED9               	movwf	fsr2l,c
 16893  002552  3442               	rlcf	i2printRTC@i+1,w,c
 16894  002554  6EDA               	movwf	fsr2h,c
 16895  002556  0E2D               	movlw	low i2printRTC@INT_time
 16896  002558  26D9               	addwf	fsr2l,f,c
 16897  00255A  0E00               	movlw	high i2printRTC@INT_time
 16898  00255C  22DA               	addwfc	fsr2h,f,c
 16899  00255E  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16900  002562  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16901  002566  4A41               	infsnz	i2printRTC@i,f,c
 16902  002568  2A42               	incf	i2printRTC@i+1,f,c
 16903  00256A  BE42               	btfsc	i2printRTC@i+1,7,c
 16904  00256C  D7D2               	goto	i2l6172
 16905  00256E  5042               	movf	i2printRTC@i+1,w,c
 16906  002570  E101               	bnz	i2u470_40
 16907  002572  D7CB               	goto	L10
 16908  002574                     i2u470_40:
 16909  002574                     i2l602:
 16910                           
 16911                           ;RTC.c: 69: }
 16912                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16913  002574  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16914  002578  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16915                           
 16916                           ;RTC.c: 71: switch(RTC_month){
 16917  00257C  D084               	goto	i2l6204
 16918  00257E                     i2l6178:
 16919                           
 16920                           ;RTC.c: 73: strcpy(month, "JAN");
 16921  00257E  0E3D               	movlw	low i2printRTC@month
 16922  002580  6E01               	movwf	i2strcpy@to,c
 16923  002582  0E00               	movlw	high i2printRTC@month
 16924  002584  6E02               	movwf	i2strcpy@to+1,c
 16925  002586  0EDB               	movlw	low STR_8
 16926  002588  6E03               	movwf	i2strcpy@from,c
 16927  00258A  0EFF               	movlw	high STR_8
 16928  00258C  6E04               	movwf	i2strcpy@from+1,c
 16929  00258E  EC0C  F022         	call	i2_strcpy	;wreg free
 16930                           
 16931                           ;RTC.c: 74: break;
 16932  002592  D0A6               	goto	i2l6206
 16933  002594                     i2l6180:
 16934                           
 16935                           ;RTC.c: 76: strcpy(month, "FEB");
 16936  002594  0E3D               	movlw	low i2printRTC@month
 16937  002596  6E01               	movwf	i2strcpy@to,c
 16938  002598  0E00               	movlw	high i2printRTC@month
 16939  00259A  6E02               	movwf	i2strcpy@to+1,c
 16940  00259C  0ECB               	movlw	low STR_9
 16941  00259E  6E03               	movwf	i2strcpy@from,c
 16942  0025A0  0EFF               	movlw	high STR_9
 16943  0025A2  6E04               	movwf	i2strcpy@from+1,c
 16944  0025A4  EC0C  F022         	call	i2_strcpy	;wreg free
 16945                           
 16946                           ;RTC.c: 77: break;
 16947  0025A8  D09B               	goto	i2l6206
 16948  0025AA                     i2l6182:
 16949                           
 16950                           ;RTC.c: 79: strcpy(month, "MAR");
 16951  0025AA  0E3D               	movlw	low i2printRTC@month
 16952  0025AC  6E01               	movwf	i2strcpy@to,c
 16953  0025AE  0E00               	movlw	high i2printRTC@month
 16954  0025B0  6E02               	movwf	i2strcpy@to+1,c
 16955  0025B2  0EE7               	movlw	low STR_10
 16956  0025B4  6E03               	movwf	i2strcpy@from,c
 16957  0025B6  0EFF               	movlw	high STR_10
 16958  0025B8  6E04               	movwf	i2strcpy@from+1,c
 16959  0025BA  EC0C  F022         	call	i2_strcpy	;wreg free
 16960                           
 16961                           ;RTC.c: 80: break;
 16962  0025BE  D090               	goto	i2l6206
 16963  0025C0                     i2l6184:
 16964                           
 16965                           ;RTC.c: 82: strcpy(month, "APR");
 16966  0025C0  0E3D               	movlw	low i2printRTC@month
 16967  0025C2  6E01               	movwf	i2strcpy@to,c
 16968  0025C4  0E00               	movlw	high i2printRTC@month
 16969  0025C6  6E02               	movwf	i2strcpy@to+1,c
 16970  0025C8  0EEB               	movlw	low STR_11
 16971  0025CA  6E03               	movwf	i2strcpy@from,c
 16972  0025CC  0EFF               	movlw	high STR_11
 16973  0025CE  6E04               	movwf	i2strcpy@from+1,c
 16974  0025D0  EC0C  F022         	call	i2_strcpy	;wreg free
 16975                           
 16976                           ;RTC.c: 83: break;
 16977  0025D4  D085               	goto	i2l6206
 16978  0025D6                     i2l6186:
 16979                           
 16980                           ;RTC.c: 85: strcpy(month, "MAY");
 16981  0025D6  0E3D               	movlw	low i2printRTC@month
 16982  0025D8  6E01               	movwf	i2strcpy@to,c
 16983  0025DA  0E00               	movlw	high i2printRTC@month
 16984  0025DC  6E02               	movwf	i2strcpy@to+1,c
 16985  0025DE  0EFB               	movlw	low STR_12
 16986  0025E0  6E03               	movwf	i2strcpy@from,c
 16987  0025E2  0EFF               	movlw	high STR_12
 16988  0025E4  6E04               	movwf	i2strcpy@from+1,c
 16989  0025E6  EC0C  F022         	call	i2_strcpy	;wreg free
 16990                           
 16991                           ;RTC.c: 86: break;
 16992  0025EA  D07A               	goto	i2l6206
 16993  0025EC                     i2l6188:
 16994                           
 16995                           ;RTC.c: 88: strcpy(month, "JUN");
 16996  0025EC  0E3D               	movlw	low i2printRTC@month
 16997  0025EE  6E01               	movwf	i2strcpy@to,c
 16998  0025F0  0E00               	movlw	high i2printRTC@month
 16999  0025F2  6E02               	movwf	i2strcpy@to+1,c
 17000  0025F4  0EDF               	movlw	low STR_13
 17001  0025F6  6E03               	movwf	i2strcpy@from,c
 17002  0025F8  0EFF               	movlw	high STR_13
 17003  0025FA  6E04               	movwf	i2strcpy@from+1,c
 17004  0025FC  EC0C  F022         	call	i2_strcpy	;wreg free
 17005                           
 17006                           ;RTC.c: 89: break;
 17007  002600  D06F               	goto	i2l6206
 17008  002602                     i2l6190:
 17009                           
 17010                           ;RTC.c: 91: strcpy(month, "JUL");
 17011  002602  0E3D               	movlw	low i2printRTC@month
 17012  002604  6E01               	movwf	i2strcpy@to,c
 17013  002606  0E00               	movlw	high i2printRTC@month
 17014  002608  6E02               	movwf	i2strcpy@to+1,c
 17015  00260A  0ED7               	movlw	low STR_14
 17016  00260C  6E03               	movwf	i2strcpy@from,c
 17017  00260E  0EFF               	movlw	high STR_14
 17018  002610  6E04               	movwf	i2strcpy@from+1,c
 17019  002612  EC0C  F022         	call	i2_strcpy	;wreg free
 17020                           
 17021                           ;RTC.c: 92: break;
 17022  002616  D064               	goto	i2l6206
 17023  002618                     i2l6192:
 17024                           
 17025                           ;RTC.c: 94: strcpy(month, "AUG");
 17026  002618  0E3D               	movlw	low i2printRTC@month
 17027  00261A  6E01               	movwf	i2strcpy@to,c
 17028  00261C  0E00               	movlw	high i2printRTC@month
 17029  00261E  6E02               	movwf	i2strcpy@to+1,c
 17030  002620  0ED3               	movlw	low STR_15
 17031  002622  6E03               	movwf	i2strcpy@from,c
 17032  002624  0EFF               	movlw	high STR_15
 17033  002626  6E04               	movwf	i2strcpy@from+1,c
 17034  002628  EC0C  F022         	call	i2_strcpy	;wreg free
 17035                           
 17036                           ;RTC.c: 95: break;
 17037  00262C  D059               	goto	i2l6206
 17038  00262E                     i2l6194:
 17039                           
 17040                           ;RTC.c: 97: strcpy(month, "SEP");
 17041  00262E  0E3D               	movlw	low i2printRTC@month
 17042  002630  6E01               	movwf	i2strcpy@to,c
 17043  002632  0E00               	movlw	high i2printRTC@month
 17044  002634  6E02               	movwf	i2strcpy@to+1,c
 17045  002636  0EE3               	movlw	low STR_16
 17046  002638  6E03               	movwf	i2strcpy@from,c
 17047  00263A  0EFF               	movlw	high STR_16
 17048  00263C  6E04               	movwf	i2strcpy@from+1,c
 17049  00263E  EC0C  F022         	call	i2_strcpy	;wreg free
 17050                           
 17051                           ;RTC.c: 98: break;
 17052  002642  D04E               	goto	i2l6206
 17053  002644                     i2l6196:
 17054                           
 17055                           ;RTC.c: 100: strcpy(month, "OCT");
 17056  002644  0E3D               	movlw	low i2printRTC@month
 17057  002646  6E01               	movwf	i2strcpy@to,c
 17058  002648  0E00               	movlw	high i2printRTC@month
 17059  00264A  6E02               	movwf	i2strcpy@to+1,c
 17060  00264C  0EF3               	movlw	low STR_17
 17061  00264E  6E03               	movwf	i2strcpy@from,c
 17062  002650  0EFF               	movlw	high STR_17
 17063  002652  6E04               	movwf	i2strcpy@from+1,c
 17064  002654  EC0C  F022         	call	i2_strcpy	;wreg free
 17065                           
 17066                           ;RTC.c: 101: break;
 17067  002658  D043               	goto	i2l6206
 17068  00265A                     i2l6198:
 17069                           
 17070                           ;RTC.c: 103: strcpy(month, "NOV");
 17071  00265A  0E3D               	movlw	low i2printRTC@month
 17072  00265C  6E01               	movwf	i2strcpy@to,c
 17073  00265E  0E00               	movlw	high i2printRTC@month
 17074  002660  6E02               	movwf	i2strcpy@to+1,c
 17075  002662  0EF7               	movlw	low STR_18
 17076  002664  6E03               	movwf	i2strcpy@from,c
 17077  002666  0EFF               	movlw	high STR_18
 17078  002668  6E04               	movwf	i2strcpy@from+1,c
 17079  00266A  EC0C  F022         	call	i2_strcpy	;wreg free
 17080                           
 17081                           ;RTC.c: 104: break;
 17082  00266E  D038               	goto	i2l6206
 17083  002670                     i2l6200:
 17084                           
 17085                           ;RTC.c: 106: strcpy(month, "DEC");
 17086  002670  0E3D               	movlw	low i2printRTC@month
 17087  002672  6E01               	movwf	i2strcpy@to,c
 17088  002674  0E00               	movlw	high i2printRTC@month
 17089  002676  6E02               	movwf	i2strcpy@to+1,c
 17090  002678  0ECF               	movlw	low STR_19
 17091  00267A  6E03               	movwf	i2strcpy@from,c
 17092  00267C  0EFF               	movlw	high STR_19
 17093  00267E  6E04               	movwf	i2strcpy@from+1,c
 17094  002680  EC0C  F022         	call	i2_strcpy	;wreg free
 17095                           
 17096                           ;RTC.c: 108: }
 17097                           
 17098                           ;RTC.c: 107: break;
 17099  002684  D02D               	goto	i2l6206
 17100  002686                     i2l6204:
 17101  002686  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17102  00268A  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17103                           
 17104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17105                           ; Switch size 1, requested type "space"
 17106                           ; Number of cases is 1, Range of values is 0 to 0
 17107                           ; switch strategies available:
 17108                           ; Name         Instructions Cycles
 17109                           ; simple_byte            4     3 (average)
 17110                           ;	Chosen strategy is simple_byte
 17111  00268E  502B               	movf	??i2_printRTC+1,w,c
 17112  002690  0A00               	xorlw	0	; case 0
 17113  002692  A4D8               	btfss	status,2,c
 17114  002694  D025               	goto	i2l6206
 17115                           
 17116                           ; Switch size 1, requested type "space"
 17117                           ; Number of cases is 12, Range of values is 1 to 12
 17118                           ; switch strategies available:
 17119                           ; Name         Instructions Cycles
 17120                           ; simple_byte           37    19 (average)
 17121                           ;	Chosen strategy is simple_byte
 17122  002696  502A               	movf	??i2_printRTC,w,c
 17123  002698  0A01               	xorlw	1	; case 1
 17124  00269A  B4D8               	btfsc	status,2,c
 17125  00269C  D770               	goto	i2l6178
 17126  00269E  0A03               	xorlw	3	; case 2
 17127  0026A0  B4D8               	btfsc	status,2,c
 17128  0026A2  D778               	goto	i2l6180
 17129  0026A4  0A01               	xorlw	1	; case 3
 17130  0026A6  B4D8               	btfsc	status,2,c
 17131  0026A8  D780               	goto	i2l6182
 17132  0026AA  0A07               	xorlw	7	; case 4
 17133  0026AC  B4D8               	btfsc	status,2,c
 17134  0026AE  D788               	goto	i2l6184
 17135  0026B0  0A01               	xorlw	1	; case 5
 17136  0026B2  B4D8               	btfsc	status,2,c
 17137  0026B4  D790               	goto	i2l6186
 17138  0026B6  0A03               	xorlw	3	; case 6
 17139  0026B8  B4D8               	btfsc	status,2,c
 17140  0026BA  D798               	goto	i2l6188
 17141  0026BC  0A01               	xorlw	1	; case 7
 17142  0026BE  B4D8               	btfsc	status,2,c
 17143  0026C0  D7A0               	goto	i2l6190
 17144  0026C2  0A0F               	xorlw	15	; case 8
 17145  0026C4  B4D8               	btfsc	status,2,c
 17146  0026C6  D7A8               	goto	i2l6192
 17147  0026C8  0A01               	xorlw	1	; case 9
 17148  0026CA  B4D8               	btfsc	status,2,c
 17149  0026CC  D7B0               	goto	i2l6194
 17150  0026CE  0A03               	xorlw	3	; case 10
 17151  0026D0  B4D8               	btfsc	status,2,c
 17152  0026D2  D7B8               	goto	i2l6196
 17153  0026D4  0A01               	xorlw	1	; case 11
 17154  0026D6  B4D8               	btfsc	status,2,c
 17155  0026D8  D7C0               	goto	i2l6198
 17156  0026DA  0A07               	xorlw	7	; case 12
 17157  0026DC  B4D8               	btfsc	status,2,c
 17158  0026DE  D7C8               	goto	i2l6200
 17159  0026E0                     i2l6206:
 17160                           
 17161                           ;RTC.c: 109: lcdInst(0b10000000);;
 17162  0026E0  0E80               	movlw	128
 17163  0026E2  EC5F  F024         	call	i2_lcdInst
 17164                           
 17165                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17166  0026E6  0E30               	movlw	low STR_21
 17167  0026E8  6E0D               	movwf	i2printf@f,c
 17168  0026EA  0EFB               	movlw	high STR_21
 17169  0026EC  6E0E               	movwf	i2printf@f+1,c
 17170  0026EE  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17171  0026F2  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17172  0026F6  0E3D               	movlw	low i2printRTC@month
 17173  0026F8  6E11               	movwf	?i2_printf+4,c
 17174  0026FA  0E00               	movlw	high i2printRTC@month
 17175  0026FC  6E12               	movwf	?i2_printf+5,c
 17176  0026FE  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17177  002702  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17178  002706  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17179  00270A  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17180  00270E  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17181  002712  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17182  002716  ECD4  F00A         	call	i2_printf	;wreg free
 17183  00271A  0012               	return		;funcret
 17184  00271C                     __end_ofi2_printRTC:
 17185                           	opt stack 0
 17186                           pclatu	equ	0xFFB
 17187                           pclath	equ	0xFFA
 17188                           tblptru	equ	0xFF8
 17189                           tblptrh	equ	0xFF7
 17190                           tblptrl	equ	0xFF6
 17191                           tablat	equ	0xFF5
 17192                           prodh	equ	0xFF4
 17193                           prodl	equ	0xFF3
 17194                           intcon	equ	0xFF2
 17195                           intcon2	equ	0xFF1
 17196                           intcon3	equ	0xFF0
 17197                           indf0	equ	0xFEF
 17198                           postinc0	equ	0xFEE
 17199                           fsr0h	equ	0xFEA
 17200                           fsr0l	equ	0xFE9
 17201                           wreg	equ	0xFE8
 17202                           postdec1	equ	0xFE5
 17203                           fsr1h	equ	0xFE2
 17204                           fsr1l	equ	0xFE1
 17205                           indf2	equ	0xFDF
 17206                           postinc2	equ	0xFDE
 17207                           postdec2	equ	0xFDD
 17208                           fsr2h	equ	0xFDA
 17209                           fsr2l	equ	0xFD9
 17210                           status	equ	0xFD8
 17211                           
 17212 ;; *************** function i2_strcpy *****************
 17213 ;; Defined at:
 17214 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17215 ;; Parameters:    Size  Location     Type
 17216 ;;  to              2    0[COMRAM] PTR unsigned char 
 17217 ;;		 -> printRTC@month(4), UI@month(4), 
 17218 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17219 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17220 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17221 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17222 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17223 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17224 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17225 ;;		 -> STR_8(4), 
 17226 ;; Auto vars:     Size  Location     Type
 17227 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17228 ;;		 -> printRTC@month(4), UI@month(4), 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  2    0[COMRAM] PTR unsigned char 
 17231 ;; Registers used:
 17232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17242 ;;Total ram usage:        6 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; This function calls:
 17245 ;;		Nothing
 17246 ;; This function is called by:
 17247 ;;		i2_printRTC
 17248 ;; This function uses a non-reentrant model
 17249 ;;
 17250                           
 17251                           	psect	text62
 17252  004418                     __ptext62:
 17253                           	opt stack 0
 17254  004418                     i2_strcpy:
 17255                           	opt stack 20
 17256                           
 17257                           ;incstack = 0
 17258  004418  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17259  00441C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17260  004420  D004               	goto	i2l5842
 17261  004422                     i2l5840:
 17262  004422  4A05               	infsnz	i2strcpy@cp,f,c
 17263  004424  2A06               	incf	i2strcpy@cp+1,f,c
 17264  004426  4A03               	infsnz	i2strcpy@from,f,c
 17265  004428  2A04               	incf	i2strcpy@from+1,f,c
 17266  00442A                     i2l5842:
 17267  00442A  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17268  00442E  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17269  004432                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17270  004432  6AF8               	clrf	tblptru,c
 17271  004434                     	endif
 17272  004434                     	if	0	;tblptru may be non-zero
 17273  004434                     	endif
 17274  004434  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17275  004438  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17276  00443C  0008               	tblrd		*
 17277  00443E  CFF5 FFDF          	movff	tablat,indf2
 17278  004442  50DF               	movf	indf2,w,c
 17279  004444  B4D8               	btfsc	status,2,c
 17280  004446  0012               	return	
 17281  004448  D7EC               	goto	i2l5840
 17282  00444A                     __end_ofi2_strcpy:
 17283                           	opt stack 0
 17284                           pclatu	equ	0xFFB
 17285                           pclath	equ	0xFFA
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           intcon2	equ	0xFF1
 17294                           intcon3	equ	0xFF0
 17295                           indf0	equ	0xFEF
 17296                           postinc0	equ	0xFEE
 17297                           fsr0h	equ	0xFEA
 17298                           fsr0l	equ	0xFE9
 17299                           wreg	equ	0xFE8
 17300                           postdec1	equ	0xFE5
 17301                           fsr1h	equ	0xFE2
 17302                           fsr1l	equ	0xFE1
 17303                           indf2	equ	0xFDF
 17304                           postinc2	equ	0xFDE
 17305                           postdec2	equ	0xFDD
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310 ;; *************** function _inputHandler *****************
 17311 ;; Defined at:
 17312 ;;		line 372 in file "UI.c"
 17313 ;; Parameters:    Size  Location     Type
 17314 ;;		None
 17315 ;; Auto vars:     Size  Location     Type
 17316 ;;		None
 17317 ;; Return value:  Size  Location     Type
 17318 ;;                  2   41[COMRAM] int 
 17319 ;; Registers used:
 17320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17321 ;; Tracked objects:
 17322 ;;		On entry : 0/0
 17323 ;;		On exit  : 0/0
 17324 ;;		Unchanged: 0/0
 17325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;Total ram usage:        4 bytes
 17331 ;; Hardware stack levels used:    1
 17332 ;; Hardware stack levels required when called:    4
 17333 ;; This function calls:
 17334 ;;		_change_state_to_logs_11
 17335 ;;		_change_state_to_logs_12
 17336 ;;		_change_state_to_logs_22
 17337 ;;		_change_state_to_logs_23
 17338 ;;		_change_state_to_logs_33
 17339 ;;		_change_state_to_logs_34
 17340 ;;		_change_state_to_menu_11
 17341 ;;		_change_state_to_menu_23
 17342 ;;		i2_change_state_to_menu_12
 17343 ;;		i2_change_state_to_menu_22
 17344 ;; This function is called by:
 17345 ;;		_updateMenu
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           	psect	text63
 17350  00290E                     __ptext63:
 17351                           	opt stack 0
 17352  00290E                     _inputHandler:
 17353                           	opt stack 18
 17354                           
 17355                           ;UI.c: 377: if(firstboot){
 17356                           
 17357                           ;incstack = 0
 17358  00290E  5075               	movf	_firstboot,w,c
 17359  002910  1076               	iorwf	_firstboot+1,w,c
 17360  002912  B4D8               	btfsc	status,2,c
 17361  002914  D00B               	goto	i2l6274
 17362                           
 17363                           ;UI.c: 378: change_state_to_menu_11();
 17364  002916  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 17365                           
 17366                           ;UI.c: 379: firstboot = 0;
 17367  00291A  0E00               	movlw	0
 17368  00291C  6E76               	movwf	_firstboot+1,c
 17369  00291E  0E00               	movlw	0
 17370  002920  6E75               	movwf	_firstboot,c
 17371                           
 17372                           ;UI.c: 380: return 0;
 17373  002922  0E00               	movlw	0
 17374  002924  6E2B               	movwf	?_inputHandler+1,c
 17375  002926  0E00               	movlw	0
 17376  002928  6E2A               	movwf	?_inputHandler,c
 17377  00292A  0012               	return	
 17378  00292C                     i2l6274:
 17379                           
 17380                           ;UI.c: 381: }
 17381                           ;UI.c: 382: if (logstate){
 17382  00292C  0100               	movlb	0	; () banked
 17383  00292E  51F6               	movf	_logstate& (0+255),w,b
 17384  002930  0100               	movlb	0	; () banked
 17385  002932  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17386  002934  B4D8               	btfsc	status,2,c
 17387  002936  D0C7               	goto	i2l6392
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17391  002938  0E43               	movlw	67
 17392  00293A  187D               	xorwf	_input,w,c	;volatile
 17393  00293C  A4D8               	btfss	status,2,c
 17394  00293E  D012               	goto	i2l6292
 17395                           
 17396                           ; BSR set to: 0
 17397  002940  B281               	btfsc	3969,1,c	;volatile
 17398  002942  D009               	goto	i2l6284
 17399  002944  D00F               	goto	i2l6292
 17400  002946                     i2l6282:
 17401                           
 17402                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17403  002946  0E68               	movlw	104
 17404  002948  6E2C               	movwf	??_inputHandler& (0+255),c
 17405  00294A  0EE4               	movlw	228
 17406  00294C                     i2u839_47:
 17407  00294C  2EE8               	decfsz	wreg,f,c
 17408  00294E  D7FE               	bra	i2u839_47
 17409  002950  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17410  002952  D7FC               	bra	i2u839_47
 17411  002954  D000               	nop2	
 17412  002956                     i2l6284:
 17413  002956  B281               	btfsc	3969,1,c	;volatile
 17414  002958  D7F6               	goto	i2l6282
 17415  00295A                     i2l6286:
 17416                           
 17417                           ;UI.c: 387: }
 17418                           ;UI.c: 388: return 0;
 17419  00295A  0E00               	movlw	0
 17420  00295C  6E2B               	movwf	?_inputHandler+1,c
 17421  00295E  0E00               	movlw	0
 17422  002960  6E2A               	movwf	?_inputHandler,c
 17423  002962  0012               	return	
 17424  002964                     i2l6292:
 17425                           
 17426                           ;UI.c: 390: else if (input == 'D'){
 17427  002964  0E44               	movlw	68
 17428  002966  187D               	xorwf	_input,w,c	;volatile
 17429  002968  A4D8               	btfss	status,2,c
 17430  00296A  D7F7               	goto	i2l6286
 17431                           
 17432                           ;UI.c: 392: logstate = 0;
 17433  00296C  0E00               	movlw	0
 17434  00296E  0100               	movlb	0	; () banked
 17435  002970  6FF7               	movwf	(_logstate+1)& (0+255),b
 17436  002972  0E00               	movlw	0
 17437  002974  6FF6               	movwf	_logstate& (0+255),b
 17438                           
 17439                           ;UI.c: 393: switch(cur_state){
 17440  002976  D012               	goto	i2l6310
 17441  002978                     i2l6296:
 17442                           
 17443                           ;UI.c: 395: change_state_to_logs_11();
 17444  002978  ECE5  F022         	call	_change_state_to_logs_11	;wreg free
 17445                           
 17446                           ;UI.c: 396: break;
 17447  00297C  D7EE               	goto	i2l6286
 17448  00297E                     i2l6298:
 17449                           
 17450                           ;UI.c: 398: change_state_to_logs_12();
 17451  00297E  ECCD  F022         	call	_change_state_to_logs_12	;wreg free
 17452                           
 17453                           ;UI.c: 399: break;
 17454  002982  D7EB               	goto	i2l6286
 17455  002984                     i2l6300:
 17456                           
 17457                           ;UI.c: 401: change_state_to_logs_22();
 17458  002984  ECB5  F022         	call	_change_state_to_logs_22	;wreg free
 17459                           
 17460                           ;UI.c: 402: break;
 17461  002988  D7E8               	goto	i2l6286
 17462  00298A                     i2l6302:
 17463                           
 17464                           ;UI.c: 404: change_state_to_logs_23();
 17465  00298A  EC2B  F023         	call	_change_state_to_logs_23	;wreg free
 17466                           
 17467                           ;UI.c: 405: break;
 17468  00298E  D7E5               	goto	i2l6286
 17469  002990                     i2l6304:
 17470                           
 17471                           ;UI.c: 407: change_state_to_logs_33();
 17472  002990  EC9D  F022         	call	_change_state_to_logs_33	;wreg free
 17473                           
 17474                           ;UI.c: 408: break;
 17475  002994  D7E2               	goto	i2l6286
 17476  002996                     i2l6306:
 17477                           
 17478                           ;UI.c: 410: change_state_to_logs_34();
 17479  002996  EC85  F022         	call	_change_state_to_logs_34	;wreg free
 17480                           
 17481                           ;UI.c: 412: }
 17482                           
 17483                           ;UI.c: 411: break;
 17484  00299A  D7DF               	goto	i2l6286
 17485  00299C                     i2l6310:
 17486  00299C  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17487  0029A0  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17488                           
 17489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17490                           ; Switch size 1, requested type "space"
 17491                           ; Number of cases is 2, Range of values is 3 to 4
 17492                           ; switch strategies available:
 17493                           ; Name         Instructions Cycles
 17494                           ; simple_byte            7     4 (average)
 17495                           ;	Chosen strategy is simple_byte
 17496  0029A4  502D               	movf	??_inputHandler+1,w,c
 17497  0029A6  0A03               	xorlw	3	; case 3
 17498  0029A8  B4D8               	btfsc	status,2,c
 17499  0029AA  D004               	goto	i2l8546
 17500  0029AC  0A07               	xorlw	7	; case 4
 17501  0029AE  B4D8               	btfsc	status,2,c
 17502  0029B0  D00F               	goto	i2l8548
 17503  0029B2  D7D3               	goto	i2l6286
 17504  0029B4                     i2l8546:
 17505                           
 17506                           ; Switch size 1, requested type "space"
 17507                           ; Number of cases is 4, Range of values is 243 to 255
 17508                           ; switch strategies available:
 17509                           ; Name         Instructions Cycles
 17510                           ; simple_byte           13     7 (average)
 17511                           ;	Chosen strategy is simple_byte
 17512  0029B4  502C               	movf	??_inputHandler,w,c
 17513  0029B6  0AF3               	xorlw	243	; case 243
 17514  0029B8  B4D8               	btfsc	status,2,c
 17515  0029BA  D7DE               	goto	i2l6296
 17516  0029BC  0A07               	xorlw	7	; case 244
 17517  0029BE  B4D8               	btfsc	status,2,c
 17518  0029C0  D7DE               	goto	i2l6298
 17519  0029C2  0A0A               	xorlw	10	; case 254
 17520  0029C4  B4D8               	btfsc	status,2,c
 17521  0029C6  D7DE               	goto	i2l6300
 17522  0029C8  0A01               	xorlw	1	; case 255
 17523  0029CA  B4D8               	btfsc	status,2,c
 17524  0029CC  D7DE               	goto	i2l6302
 17525  0029CE  D7C5               	goto	i2l6286
 17526  0029D0                     i2l8548:
 17527                           
 17528                           ; Switch size 1, requested type "space"
 17529                           ; Number of cases is 2, Range of values is 9 to 10
 17530                           ; switch strategies available:
 17531                           ; Name         Instructions Cycles
 17532                           ; simple_byte            7     4 (average)
 17533                           ;	Chosen strategy is simple_byte
 17534  0029D0  502C               	movf	??_inputHandler,w,c
 17535  0029D2  0A09               	xorlw	9	; case 9
 17536  0029D4  B4D8               	btfsc	status,2,c
 17537  0029D6  D7DC               	goto	i2l6304
 17538  0029D8  0A03               	xorlw	3	; case 10
 17539  0029DA  B4D8               	btfsc	status,2,c
 17540  0029DC  D7DC               	goto	i2l6306
 17541  0029DE  D7BD               	goto	i2l6286
 17542  0029E0                     i2l6322:
 17543                           
 17544                           ;UI.c: 422: if(cur_state == 11){
 17545  0029E0  0E0B               	movlw	11
 17546  0029E2  0100               	movlb	0	; () banked
 17547  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17548  0029E6  0100               	movlb	0	; () banked
 17549  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17550  0029EA  A4D8               	btfss	status,2,c
 17551  0029EC  D005               	goto	i2l6330
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;UI.c: 423: return 0;
 17555  0029EE  0E00               	movlw	0
 17556  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17557  0029F2  0E00               	movlw	0
 17558  0029F4  6E2A               	movwf	?_inputHandler,c
 17559                           
 17560                           ; BSR set to: 0
 17561  0029F6  0012               	return	
 17562  0029F8                     i2l6330:
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;UI.c: 425: else{
 17566                           ;UI.c: 426: change_state_to_menu_11();
 17567  0029F8  EC6D  F022         	call	_change_state_to_menu_11	;wreg free
 17568                           
 17569                           ;UI.c: 427: }
 17570                           ;UI.c: 428: return 0;
 17571  0029FC  0E00               	movlw	0
 17572  0029FE  6E2B               	movwf	?_inputHandler+1,c
 17573  002A00  0E00               	movlw	0
 17574  002A02  6E2A               	movwf	?_inputHandler,c
 17575  002A04  0012               	return	
 17576  002A06                     i2l6336:
 17577                           
 17578                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17579  002A06  0E16               	movlw	22
 17580  002A08  0100               	movlb	0	; () banked
 17581  002A0A  19E0               	xorwf	_cur_state& (0+255),w,b
 17582  002A0C  0100               	movlb	0	; () banked
 17583  002A0E  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17584  002A10  B4D8               	btfsc	status,2,c
 17585  002A12  D007               	goto	i2l6340
 17586                           
 17587                           ; BSR set to: 0
 17588  002A14  0E0C               	movlw	12
 17589  002A16  0100               	movlb	0	; () banked
 17590  002A18  19E0               	xorwf	_cur_state& (0+255),w,b
 17591  002A1A  0100               	movlb	0	; () banked
 17592  002A1C  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17593  002A1E  A4D8               	btfss	status,2,c
 17594  002A20  D005               	goto	i2l6346
 17595  002A22                     i2l6340:
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;UI.c: 431: return 0;
 17599  002A22  0E00               	movlw	0
 17600  002A24  6E2B               	movwf	?_inputHandler+1,c
 17601  002A26  0E00               	movlw	0
 17602  002A28  6E2A               	movwf	?_inputHandler,c
 17603                           
 17604                           ; BSR set to: 0
 17605  002A2A  0012               	return	
 17606  002A2C                     i2l6346:
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;UI.c: 433: else if(cur_state == 23){
 17610  002A2C  0E17               	movlw	23
 17611  002A2E  0100               	movlb	0	; () banked
 17612  002A30  19E0               	xorwf	_cur_state& (0+255),w,b
 17613  002A32  0100               	movlb	0	; () banked
 17614  002A34  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17615  002A36  A4D8               	btfss	status,2,c
 17616  002A38  D003               	goto	i2l6350
 17617                           
 17618                           ; BSR set to: 0
 17619                           ;UI.c: 434: change_state_to_menu_22();
 17620  002A3A  EC25  F022         	call	i2_change_state_to_menu_22	;wreg free
 17621                           
 17622                           ;UI.c: 435: }
 17623  002A3E  D002               	goto	i2l6352
 17624  002A40                     i2l6350:
 17625                           
 17626                           ;UI.c: 436: else{
 17627                           ;UI.c: 437: change_state_to_menu_12();
 17628  002A40  EC3D  F022         	call	i2_change_state_to_menu_12	;wreg free
 17629  002A44                     i2l6352:
 17630                           
 17631                           ;UI.c: 438: }
 17632                           ;UI.c: 439: return 0;
 17633  002A44  0E00               	movlw	0
 17634  002A46  6E2B               	movwf	?_inputHandler+1,c
 17635  002A48  0E00               	movlw	0
 17636  002A4A  6E2A               	movwf	?_inputHandler,c
 17637  002A4C  0012               	return	
 17638  002A4E                     i2l6356:
 17639                           
 17640                           ;UI.c: 441: if(cur_state == 23){
 17641  002A4E  0E17               	movlw	23
 17642  002A50  0100               	movlb	0	; () banked
 17643  002A52  19E0               	xorwf	_cur_state& (0+255),w,b
 17644  002A54  0100               	movlb	0	; () banked
 17645  002A56  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17646  002A58  A4D8               	btfss	status,2,c
 17647  002A5A  D005               	goto	i2l6364
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;UI.c: 442: return 0;
 17651  002A5C  0E00               	movlw	0
 17652  002A5E  6E2B               	movwf	?_inputHandler+1,c
 17653  002A60  0E00               	movlw	0
 17654  002A62  6E2A               	movwf	?_inputHandler,c
 17655                           
 17656                           ; BSR set to: 0
 17657  002A64  0012               	return	
 17658  002A66                     i2l6364:
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;UI.c: 444: else{
 17662                           ;UI.c: 445: change_state_to_menu_23();
 17663  002A66  EC55  F022         	call	_change_state_to_menu_23	;wreg free
 17664                           
 17665                           ;UI.c: 446: }
 17666                           ;UI.c: 447: return 0;
 17667  002A6A  0E00               	movlw	0
 17668  002A6C  6E2B               	movwf	?_inputHandler+1,c
 17669  002A6E  0E00               	movlw	0
 17670  002A70  6E2A               	movwf	?_inputHandler,c
 17671  002A72  0012               	return	
 17672  002A74                     i2l6370:
 17673                           
 17674                           ;UI.c: 450: up = 1;
 17675  002A74  0E00               	movlw	0
 17676  002A76  6E78               	movwf	_up+1,c
 17677  002A78  0E01               	movlw	1
 17678  002A7A  6E77               	movwf	_up,c
 17679                           
 17680                           ;UI.c: 451: return 1;
 17681  002A7C  0E00               	movlw	0
 17682  002A7E  6E2B               	movwf	?_inputHandler+1,c
 17683  002A80  0E01               	movlw	1
 17684  002A82  6E2A               	movwf	?_inputHandler,c
 17685  002A84  0012               	return	
 17686  002A86                     i2l6374:
 17687                           
 17688                           ;UI.c: 453: down = 1;
 17689  002A86  0E00               	movlw	0
 17690  002A88  6E68               	movwf	_down+1,c
 17691  002A8A  0E01               	movlw	1
 17692  002A8C  6E67               	movwf	_down,c
 17693                           
 17694                           ;UI.c: 454: return 1;
 17695  002A8E  0E00               	movlw	0
 17696  002A90  6E2B               	movwf	?_inputHandler+1,c
 17697  002A92  0E01               	movlw	1
 17698  002A94  6E2A               	movwf	?_inputHandler,c
 17699  002A96  0012               	return	
 17700  002A98                     i2l6378:
 17701                           
 17702                           ;UI.c: 456: enter = 1;
 17703  002A98  0E00               	movlw	0
 17704  002A9A  6E6A               	movwf	_enter+1,c
 17705  002A9C  0E01               	movlw	1
 17706  002A9E  6E69               	movwf	_enter,c
 17707                           
 17708                           ;UI.c: 457: return 1;
 17709  002AA0  0E00               	movlw	0
 17710  002AA2  6E2B               	movwf	?_inputHandler+1,c
 17711  002AA4  0E01               	movlw	1
 17712  002AA6  6E2A               	movwf	?_inputHandler,c
 17713  002AA8  0012               	return	
 17714  002AAA                     i2l6382:
 17715                           
 17716                           ;UI.c: 459: back = 1;
 17717  002AAA  0E00               	movlw	0
 17718  002AAC  6E5C               	movwf	_back+1,c
 17719  002AAE  0E01               	movlw	1
 17720  002AB0  6E5B               	movwf	_back,c
 17721                           
 17722                           ;UI.c: 460: return 1;
 17723  002AB2  0E00               	movlw	0
 17724  002AB4  6E2B               	movwf	?_inputHandler+1,c
 17725  002AB6  0E01               	movlw	1
 17726  002AB8  6E2A               	movwf	?_inputHandler,c
 17727  002ABA  0012               	return	
 17728  002ABC                     i2l6386:
 17729                           
 17730                           ;UI.c: 463: return 1;
 17731  002ABC  0E00               	movlw	0
 17732  002ABE  6E2B               	movwf	?_inputHandler+1,c
 17733  002AC0  0E01               	movlw	1
 17734  002AC2  6E2A               	movwf	?_inputHandler,c
 17735                           
 17736                           ;UI.c: 464: }
 17737  002AC4  0012               	return	
 17738  002AC6                     i2l6392:
 17739  002AC6  507D               	movf	_input,w,c	;volatile
 17740                           
 17741                           ; Switch size 1, requested type "space"
 17742                           ; Number of cases is 7, Range of values is 49 to 68
 17743                           ; switch strategies available:
 17744                           ; Name         Instructions Cycles
 17745                           ; simple_byte           22    12 (average)
 17746                           ;	Chosen strategy is simple_byte
 17747  002AC8  0A31               	xorlw	49	; case 49
 17748  002ACA  B4D8               	btfsc	status,2,c
 17749  002ACC  D789               	goto	i2l6322
 17750  002ACE  0A03               	xorlw	3	; case 50
 17751  002AD0  B4D8               	btfsc	status,2,c
 17752  002AD2  D799               	goto	i2l6336
 17753  002AD4  0A01               	xorlw	1	; case 51
 17754  002AD6  B4D8               	btfsc	status,2,c
 17755  002AD8  D7BA               	goto	i2l6356
 17756  002ADA  0A72               	xorlw	114	; case 65
 17757  002ADC  B4D8               	btfsc	status,2,c
 17758  002ADE  D7CA               	goto	i2l6370
 17759  002AE0  0A03               	xorlw	3	; case 66
 17760  002AE2  B4D8               	btfsc	status,2,c
 17761  002AE4  D7D0               	goto	i2l6374
 17762  002AE6  0A01               	xorlw	1	; case 67
 17763  002AE8  B4D8               	btfsc	status,2,c
 17764  002AEA  D7D6               	goto	i2l6378
 17765  002AEC  0A07               	xorlw	7	; case 68
 17766  002AEE  B4D8               	btfsc	status,2,c
 17767  002AF0  D7DC               	goto	i2l6382
 17768  002AF2  D7E4               	goto	i2l6386
 17769  002AF4                     __end_of_inputHandler:
 17770                           	opt stack 0
 17771                           pclatu	equ	0xFFB
 17772                           pclath	equ	0xFFA
 17773                           tblptru	equ	0xFF8
 17774                           tblptrh	equ	0xFF7
 17775                           tblptrl	equ	0xFF6
 17776                           tablat	equ	0xFF5
 17777                           prodh	equ	0xFF4
 17778                           prodl	equ	0xFF3
 17779                           intcon	equ	0xFF2
 17780                           intcon2	equ	0xFF1
 17781                           intcon3	equ	0xFF0
 17782                           indf0	equ	0xFEF
 17783                           postinc0	equ	0xFEE
 17784                           fsr0h	equ	0xFEA
 17785                           fsr0l	equ	0xFE9
 17786                           wreg	equ	0xFE8
 17787                           postdec1	equ	0xFE5
 17788                           fsr1h	equ	0xFE2
 17789                           fsr1l	equ	0xFE1
 17790                           indf2	equ	0xFDF
 17791                           postinc2	equ	0xFDE
 17792                           postdec2	equ	0xFDD
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function i2_change_state_to_menu_22 *****************
 17798 ;; Defined at:
 17799 ;;		line 498 in file "UI.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;		None
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;		None
 17804 ;; Return value:  Size  Location     Type
 17805 ;;                  1    wreg      void 
 17806 ;; Registers used:
 17807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17817 ;;Total ram usage:        0 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    3
 17820 ;; This function calls:
 17821 ;;		i2_lcdInst
 17822 ;;		i2_printf
 17823 ;; This function is called by:
 17824 ;;		_updateMenu
 17825 ;;		_inputHandler
 17826 ;; This function uses a non-reentrant model
 17827 ;;
 17828                           
 17829                           	psect	text64
 17830  00444A                     __ptext64:
 17831                           	opt stack 0
 17832  00444A                     i2_change_state_to_menu_22:
 17833                           	opt stack 19
 17834                           
 17835                           ;UI.c: 499: cur_state = 22;
 17836                           
 17837                           ;incstack = 0
 17838  00444A  0E00               	movlw	0
 17839  00444C  0100               	movlb	0	; () banked
 17840  00444E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17841  004450  0E16               	movlw	22
 17842  004452  6FE0               	movwf	_cur_state& (0+255),b
 17843                           
 17844                           ; BSR set to: 0
 17845                           ;UI.c: 501: lcdInst(0b10000000);;
 17846  004454  0E80               	movlw	128
 17847  004456  EC5F  F024         	call	i2_lcdInst
 17848                           
 17849                           ;UI.c: 502: printf("2. SORT        <");
 17850  00445A  0EDA               	movlw	low STR_34
 17851  00445C  6E0D               	movwf	i2printf@f,c
 17852  00445E  0EFD               	movlw	high STR_34
 17853  004460  6E0E               	movwf	i2printf@f+1,c
 17854  004462  ECD4  F00A         	call	i2_printf	;wreg free
 17855                           
 17856                           ;UI.c: 503: lcdInst(0b11000000);;
 17857  004466  0EC0               	movlw	192
 17858  004468  EC5F  F024         	call	i2_lcdInst
 17859                           
 17860                           ;UI.c: 504: printf("3. LOGS         ");
 17861  00446C  0E1F               	movlw	low STR_36
 17862  00446E  6E0D               	movwf	i2printf@f,c
 17863  004470  0EFD               	movlw	high STR_36
 17864  004472  6E0E               	movwf	i2printf@f+1,c
 17865  004474  ECD4  F00A         	call	i2_printf	;wreg free
 17866  004478  0012               	return		;funcret
 17867  00447A                     __end_ofi2_change_state_to_menu_22:
 17868                           	opt stack 0
 17869                           pclatu	equ	0xFFB
 17870                           pclath	equ	0xFFA
 17871                           tblptru	equ	0xFF8
 17872                           tblptrh	equ	0xFF7
 17873                           tblptrl	equ	0xFF6
 17874                           tablat	equ	0xFF5
 17875                           prodh	equ	0xFF4
 17876                           prodl	equ	0xFF3
 17877                           intcon	equ	0xFF2
 17878                           intcon2	equ	0xFF1
 17879                           intcon3	equ	0xFF0
 17880                           indf0	equ	0xFEF
 17881                           postinc0	equ	0xFEE
 17882                           fsr0h	equ	0xFEA
 17883                           fsr0l	equ	0xFE9
 17884                           wreg	equ	0xFE8
 17885                           postdec1	equ	0xFE5
 17886                           fsr1h	equ	0xFE2
 17887                           fsr1l	equ	0xFE1
 17888                           indf2	equ	0xFDF
 17889                           postinc2	equ	0xFDE
 17890                           postdec2	equ	0xFDD
 17891                           fsr2h	equ	0xFDA
 17892                           fsr2l	equ	0xFD9
 17893                           status	equ	0xFD8
 17894                           
 17895 ;; *************** function i2_change_state_to_menu_12 *****************
 17896 ;; Defined at:
 17897 ;;		line 490 in file "UI.c"
 17898 ;; Parameters:    Size  Location     Type
 17899 ;;		None
 17900 ;; Auto vars:     Size  Location     Type
 17901 ;;		None
 17902 ;; Return value:  Size  Location     Type
 17903 ;;                  1    wreg      void 
 17904 ;; Registers used:
 17905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17906 ;; Tracked objects:
 17907 ;;		On entry : 0/0
 17908 ;;		On exit  : 0/0
 17909 ;;		Unchanged: 0/0
 17910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17915 ;;Total ram usage:        0 bytes
 17916 ;; Hardware stack levels used:    1
 17917 ;; Hardware stack levels required when called:    3
 17918 ;; This function calls:
 17919 ;;		i2_lcdInst
 17920 ;;		i2_printf
 17921 ;; This function is called by:
 17922 ;;		_updateMenu
 17923 ;;		_inputHandler
 17924 ;; This function uses a non-reentrant model
 17925 ;;
 17926                           
 17927                           	psect	text65
 17928  00447A                     __ptext65:
 17929                           	opt stack 0
 17930  00447A                     i2_change_state_to_menu_12:
 17931                           	opt stack 19
 17932                           
 17933                           ;UI.c: 491: cur_state = 12;
 17934                           
 17935                           ;incstack = 0
 17936  00447A  0E00               	movlw	0
 17937  00447C  0100               	movlb	0	; () banked
 17938  00447E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17939  004480  0E0C               	movlw	12
 17940  004482  6FE0               	movwf	_cur_state& (0+255),b
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;UI.c: 493: lcdInst(0b10000000);;
 17944  004484  0E80               	movlw	128
 17945  004486  EC5F  F024         	call	i2_lcdInst
 17946                           
 17947                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17948  00448A  0E41               	movlw	low STR_33
 17949  00448C  6E0D               	movwf	i2printf@f,c
 17950  00448E  0EFD               	movlw	high STR_33
 17951  004490  6E0E               	movwf	i2printf@f+1,c
 17952  004492  ECD4  F00A         	call	i2_printf	;wreg free
 17953                           
 17954                           ;UI.c: 495: lcdInst(0b11000000);;
 17955  004496  0EC0               	movlw	192
 17956  004498  EC5F  F024         	call	i2_lcdInst
 17957                           
 17958                           ;UI.c: 496: printf("2. SORT        <");
 17959  00449C  0EDA               	movlw	low STR_34
 17960  00449E  6E0D               	movwf	i2printf@f,c
 17961  0044A0  0EFD               	movlw	high STR_34
 17962  0044A2  6E0E               	movwf	i2printf@f+1,c
 17963  0044A4  ECD4  F00A         	call	i2_printf	;wreg free
 17964  0044A8  0012               	return		;funcret
 17965  0044AA                     __end_ofi2_change_state_to_menu_12:
 17966                           	opt stack 0
 17967                           pclatu	equ	0xFFB
 17968                           pclath	equ	0xFFA
 17969                           tblptru	equ	0xFF8
 17970                           tblptrh	equ	0xFF7
 17971                           tblptrl	equ	0xFF6
 17972                           tablat	equ	0xFF5
 17973                           prodh	equ	0xFF4
 17974                           prodl	equ	0xFF3
 17975                           intcon	equ	0xFF2
 17976                           intcon2	equ	0xFF1
 17977                           intcon3	equ	0xFF0
 17978                           indf0	equ	0xFEF
 17979                           postinc0	equ	0xFEE
 17980                           fsr0h	equ	0xFEA
 17981                           fsr0l	equ	0xFE9
 17982                           wreg	equ	0xFE8
 17983                           postdec1	equ	0xFE5
 17984                           fsr1h	equ	0xFE2
 17985                           fsr1l	equ	0xFE1
 17986                           indf2	equ	0xFDF
 17987                           postinc2	equ	0xFDE
 17988                           postdec2	equ	0xFDD
 17989                           fsr2h	equ	0xFDA
 17990                           fsr2l	equ	0xFD9
 17991                           status	equ	0xFD8
 17992                           
 17993 ;; *************** function _change_state_to_menu_23 *****************
 17994 ;; Defined at:
 17995 ;;		line 506 in file "UI.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;		None
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;		None
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;Total ram usage:        0 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    3
 18016 ;; This function calls:
 18017 ;;		i2_lcdInst
 18018 ;;		i2_printf
 18019 ;; This function is called by:
 18020 ;;		_updateMenu
 18021 ;;		_inputHandler
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           	psect	text66
 18026  0044AA                     __ptext66:
 18027                           	opt stack 0
 18028  0044AA                     _change_state_to_menu_23:
 18029                           	opt stack 18
 18030                           
 18031                           ;UI.c: 507: cur_state = 23;
 18032                           
 18033                           ;incstack = 0
 18034  0044AA  0E00               	movlw	0
 18035  0044AC  0100               	movlb	0	; () banked
 18036  0044AE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18037  0044B0  0E17               	movlw	23
 18038  0044B2  6FE0               	movwf	_cur_state& (0+255),b
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;UI.c: 509: lcdInst(0b10000000);;
 18042  0044B4  0E80               	movlw	128
 18043  0044B6  EC5F  F024         	call	i2_lcdInst
 18044                           
 18045                           ;UI.c: 510: printf("2. SORT         ");
 18046  0044BA  0E30               	movlw	low STR_32
 18047  0044BC  6E0D               	movwf	i2printf@f,c
 18048  0044BE  0EFD               	movlw	high STR_32
 18049  0044C0  6E0E               	movwf	i2printf@f+1,c
 18050  0044C2  ECD4  F00A         	call	i2_printf	;wreg free
 18051                           
 18052                           ;UI.c: 511: lcdInst(0b11000000);;
 18053  0044C6  0EC0               	movlw	192
 18054  0044C8  EC5F  F024         	call	i2_lcdInst
 18055                           
 18056                           ;UI.c: 512: printf("3. LOGS        <");
 18057  0044CC  0EC9               	movlw	low STR_38
 18058  0044CE  6E0D               	movwf	i2printf@f,c
 18059  0044D0  0EFD               	movlw	high STR_38
 18060  0044D2  6E0E               	movwf	i2printf@f+1,c
 18061  0044D4  ECD4  F00A         	call	i2_printf	;wreg free
 18062  0044D8  0012               	return		;funcret
 18063  0044DA                     __end_of_change_state_to_menu_23:
 18064                           	opt stack 0
 18065                           pclatu	equ	0xFFB
 18066                           pclath	equ	0xFFA
 18067                           tblptru	equ	0xFF8
 18068                           tblptrh	equ	0xFF7
 18069                           tblptrl	equ	0xFF6
 18070                           tablat	equ	0xFF5
 18071                           prodh	equ	0xFF4
 18072                           prodl	equ	0xFF3
 18073                           intcon	equ	0xFF2
 18074                           intcon2	equ	0xFF1
 18075                           intcon3	equ	0xFF0
 18076                           indf0	equ	0xFEF
 18077                           postinc0	equ	0xFEE
 18078                           fsr0h	equ	0xFEA
 18079                           fsr0l	equ	0xFE9
 18080                           wreg	equ	0xFE8
 18081                           postdec1	equ	0xFE5
 18082                           fsr1h	equ	0xFE2
 18083                           fsr1l	equ	0xFE1
 18084                           indf2	equ	0xFDF
 18085                           postinc2	equ	0xFDE
 18086                           postdec2	equ	0xFDD
 18087                           fsr2h	equ	0xFDA
 18088                           fsr2l	equ	0xFD9
 18089                           status	equ	0xFD8
 18090                           
 18091 ;; *************** function _change_state_to_menu_11 *****************
 18092 ;; Defined at:
 18093 ;;		line 482 in file "UI.c"
 18094 ;; Parameters:    Size  Location     Type
 18095 ;;		None
 18096 ;; Auto vars:     Size  Location     Type
 18097 ;;		None
 18098 ;; Return value:  Size  Location     Type
 18099 ;;                  1    wreg      void 
 18100 ;; Registers used:
 18101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18102 ;; Tracked objects:
 18103 ;;		On entry : 0/0
 18104 ;;		On exit  : 0/0
 18105 ;;		Unchanged: 0/0
 18106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18111 ;;Total ram usage:        0 bytes
 18112 ;; Hardware stack levels used:    1
 18113 ;; Hardware stack levels required when called:    3
 18114 ;; This function calls:
 18115 ;;		i2_lcdInst
 18116 ;;		i2_printf
 18117 ;; This function is called by:
 18118 ;;		_updateMenu
 18119 ;;		_inputHandler
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123                           	psect	text67
 18124  0044DA                     __ptext67:
 18125                           	opt stack 0
 18126  0044DA                     _change_state_to_menu_11:
 18127                           	opt stack 18
 18128                           
 18129                           ;UI.c: 483: cur_state = 11;
 18130                           
 18131                           ;incstack = 0
 18132  0044DA  0E00               	movlw	0
 18133  0044DC  0100               	movlb	0	; () banked
 18134  0044DE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18135  0044E0  0E0B               	movlw	11
 18136  0044E2  6FE0               	movwf	_cur_state& (0+255),b
 18137                           
 18138                           ; BSR set to: 0
 18139                           ;UI.c: 485: lcdInst(0b10000000);;
 18140  0044E4  0E80               	movlw	128
 18141  0044E6  EC5F  F024         	call	i2_lcdInst
 18142                           
 18143                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18144  0044EA  0EEB               	movlw	low STR_31
 18145  0044EC  6E0D               	movwf	i2printf@f,c
 18146  0044EE  0EFD               	movlw	high STR_31
 18147  0044F0  6E0E               	movwf	i2printf@f+1,c
 18148  0044F2  ECD4  F00A         	call	i2_printf	;wreg free
 18149                           
 18150                           ;UI.c: 487: lcdInst(0b11000000);;
 18151  0044F6  0EC0               	movlw	192
 18152  0044F8  EC5F  F024         	call	i2_lcdInst
 18153                           
 18154                           ;UI.c: 488: printf("2. SORT         ");
 18155  0044FC  0E30               	movlw	low STR_32
 18156  0044FE  6E0D               	movwf	i2printf@f,c
 18157  004500  0EFD               	movlw	high STR_32
 18158  004502  6E0E               	movwf	i2printf@f+1,c
 18159  004504  ECD4  F00A         	call	i2_printf	;wreg free
 18160  004508  0012               	return		;funcret
 18161  00450A                     __end_of_change_state_to_menu_11:
 18162                           	opt stack 0
 18163                           pclatu	equ	0xFFB
 18164                           pclath	equ	0xFFA
 18165                           tblptru	equ	0xFF8
 18166                           tblptrh	equ	0xFF7
 18167                           tblptrl	equ	0xFF6
 18168                           tablat	equ	0xFF5
 18169                           prodh	equ	0xFF4
 18170                           prodl	equ	0xFF3
 18171                           intcon	equ	0xFF2
 18172                           intcon2	equ	0xFF1
 18173                           intcon3	equ	0xFF0
 18174                           indf0	equ	0xFEF
 18175                           postinc0	equ	0xFEE
 18176                           fsr0h	equ	0xFEA
 18177                           fsr0l	equ	0xFE9
 18178                           wreg	equ	0xFE8
 18179                           postdec1	equ	0xFE5
 18180                           fsr1h	equ	0xFE2
 18181                           fsr1l	equ	0xFE1
 18182                           indf2	equ	0xFDF
 18183                           postinc2	equ	0xFDE
 18184                           postdec2	equ	0xFDD
 18185                           fsr2h	equ	0xFDA
 18186                           fsr2l	equ	0xFD9
 18187                           status	equ	0xFD8
 18188                           
 18189 ;; *************** function _change_state_to_logs_34 *****************
 18190 ;; Defined at:
 18191 ;;		line 549 in file "UI.c"
 18192 ;; Parameters:    Size  Location     Type
 18193 ;;		None
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;		None
 18196 ;; Return value:  Size  Location     Type
 18197 ;;                  1    wreg      void 
 18198 ;; Registers used:
 18199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;Total ram usage:        0 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    3
 18212 ;; This function calls:
 18213 ;;		i2_lcdInst
 18214 ;;		i2_printf
 18215 ;; This function is called by:
 18216 ;;		_updateMenu
 18217 ;;		_inputHandler
 18218 ;; This function uses a non-reentrant model
 18219 ;;
 18220                           
 18221                           	psect	text68
 18222  00450A                     __ptext68:
 18223                           	opt stack 0
 18224  00450A                     _change_state_to_logs_34:
 18225                           	opt stack 18
 18226                           
 18227                           ;UI.c: 550: cur_state = 1034;
 18228                           
 18229                           ;incstack = 0
 18230  00450A  0E04               	movlw	4
 18231  00450C  0100               	movlb	0	; () banked
 18232  00450E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18233  004510  0E0A               	movlw	10
 18234  004512  6FE0               	movwf	_cur_state& (0+255),b
 18235                           
 18236                           ; BSR set to: 0
 18237                           ;UI.c: 551: lcdInst(0b10000000);;
 18238  004514  0E80               	movlw	128
 18239  004516  EC5F  F024         	call	i2_lcdInst
 18240                           
 18241                           ;UI.c: 552: printf("LOG 3           ");
 18242  00451A  0EFD               	movlw	low STR_44
 18243  00451C  6E0D               	movwf	i2printf@f,c
 18244  00451E  0EFC               	movlw	high STR_44
 18245  004520  6E0E               	movwf	i2printf@f+1,c
 18246  004522  ECD4  F00A         	call	i2_printf	;wreg free
 18247                           
 18248                           ;UI.c: 553: lcdInst(0b11000000);;
 18249  004526  0EC0               	movlw	192
 18250  004528  EC5F  F024         	call	i2_lcdInst
 18251                           
 18252                           ;UI.c: 554: printf("LOG 4          <");
 18253  00452C  0EB8               	movlw	low STR_50
 18254  00452E  6E0D               	movwf	i2printf@f,c
 18255  004530  0EFD               	movlw	high STR_50
 18256  004532  6E0E               	movwf	i2printf@f+1,c
 18257  004534  ECD4  F00A         	call	i2_printf	;wreg free
 18258  004538  0012               	return		;funcret
 18259  00453A                     __end_of_change_state_to_logs_34:
 18260                           	opt stack 0
 18261                           pclatu	equ	0xFFB
 18262                           pclath	equ	0xFFA
 18263                           tblptru	equ	0xFF8
 18264                           tblptrh	equ	0xFF7
 18265                           tblptrl	equ	0xFF6
 18266                           tablat	equ	0xFF5
 18267                           prodh	equ	0xFF4
 18268                           prodl	equ	0xFF3
 18269                           intcon	equ	0xFF2
 18270                           intcon2	equ	0xFF1
 18271                           intcon3	equ	0xFF0
 18272                           indf0	equ	0xFEF
 18273                           postinc0	equ	0xFEE
 18274                           fsr0h	equ	0xFEA
 18275                           fsr0l	equ	0xFE9
 18276                           wreg	equ	0xFE8
 18277                           postdec1	equ	0xFE5
 18278                           fsr1h	equ	0xFE2
 18279                           fsr1l	equ	0xFE1
 18280                           indf2	equ	0xFDF
 18281                           postinc2	equ	0xFDE
 18282                           postdec2	equ	0xFDD
 18283                           fsr2h	equ	0xFDA
 18284                           fsr2l	equ	0xFD9
 18285                           status	equ	0xFD8
 18286                           
 18287 ;; *************** function _change_state_to_logs_33 *****************
 18288 ;; Defined at:
 18289 ;;		line 542 in file "UI.c"
 18290 ;; Parameters:    Size  Location     Type
 18291 ;;		None
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;		None
 18294 ;; Return value:  Size  Location     Type
 18295 ;;                  1    wreg      void 
 18296 ;; Registers used:
 18297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18298 ;; Tracked objects:
 18299 ;;		On entry : 0/0
 18300 ;;		On exit  : 0/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;Total ram usage:        0 bytes
 18308 ;; Hardware stack levels used:    1
 18309 ;; Hardware stack levels required when called:    3
 18310 ;; This function calls:
 18311 ;;		i2_lcdInst
 18312 ;;		i2_printf
 18313 ;; This function is called by:
 18314 ;;		_updateMenu
 18315 ;;		_inputHandler
 18316 ;; This function uses a non-reentrant model
 18317 ;;
 18318                           
 18319                           	psect	text69
 18320  00453A                     __ptext69:
 18321                           	opt stack 0
 18322  00453A                     _change_state_to_logs_33:
 18323                           	opt stack 18
 18324                           
 18325                           ;UI.c: 543: cur_state = 1033;
 18326                           
 18327                           ;incstack = 0
 18328  00453A  0E04               	movlw	4
 18329  00453C  0100               	movlb	0	; () banked
 18330  00453E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18331  004540  0E09               	movlw	9
 18332  004542  6FE0               	movwf	_cur_state& (0+255),b
 18333                           
 18334                           ; BSR set to: 0
 18335                           ;UI.c: 544: lcdInst(0b10000000);;
 18336  004544  0E80               	movlw	128
 18337  004546  EC5F  F024         	call	i2_lcdInst
 18338                           
 18339                           ;UI.c: 545: printf("LOG 3          <");
 18340  00454A  0EA7               	movlw	low STR_46
 18341  00454C  6E0D               	movwf	i2printf@f,c
 18342  00454E  0EFD               	movlw	high STR_46
 18343  004550  6E0E               	movwf	i2printf@f+1,c
 18344  004552  ECD4  F00A         	call	i2_printf	;wreg free
 18345                           
 18346                           ;UI.c: 546: lcdInst(0b11000000);;
 18347  004556  0EC0               	movlw	192
 18348  004558  EC5F  F024         	call	i2_lcdInst
 18349                           
 18350                           ;UI.c: 547: printf("LOG 4           ");
 18351  00455C  0E0E               	movlw	low STR_48
 18352  00455E  6E0D               	movwf	i2printf@f,c
 18353  004560  0EFD               	movlw	high STR_48
 18354  004562  6E0E               	movwf	i2printf@f+1,c
 18355  004564  ECD4  F00A         	call	i2_printf	;wreg free
 18356  004568  0012               	return		;funcret
 18357  00456A                     __end_of_change_state_to_logs_33:
 18358                           	opt stack 0
 18359                           pclatu	equ	0xFFB
 18360                           pclath	equ	0xFFA
 18361                           tblptru	equ	0xFF8
 18362                           tblptrh	equ	0xFF7
 18363                           tblptrl	equ	0xFF6
 18364                           tablat	equ	0xFF5
 18365                           prodh	equ	0xFF4
 18366                           prodl	equ	0xFF3
 18367                           intcon	equ	0xFF2
 18368                           intcon2	equ	0xFF1
 18369                           intcon3	equ	0xFF0
 18370                           indf0	equ	0xFEF
 18371                           postinc0	equ	0xFEE
 18372                           fsr0h	equ	0xFEA
 18373                           fsr0l	equ	0xFE9
 18374                           wreg	equ	0xFE8
 18375                           postdec1	equ	0xFE5
 18376                           fsr1h	equ	0xFE2
 18377                           fsr1l	equ	0xFE1
 18378                           indf2	equ	0xFDF
 18379                           postinc2	equ	0xFDE
 18380                           postdec2	equ	0xFDD
 18381                           fsr2h	equ	0xFDA
 18382                           fsr2l	equ	0xFD9
 18383                           status	equ	0xFD8
 18384                           
 18385 ;; *************** function _change_state_to_logs_23 *****************
 18386 ;; Defined at:
 18387 ;;		line 535 in file "UI.c"
 18388 ;; Parameters:    Size  Location     Type
 18389 ;;		None
 18390 ;; Auto vars:     Size  Location     Type
 18391 ;;		None
 18392 ;; Return value:  Size  Location     Type
 18393 ;;                  1    wreg      void 
 18394 ;; Registers used:
 18395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18396 ;; Tracked objects:
 18397 ;;		On entry : 0/0
 18398 ;;		On exit  : 0/0
 18399 ;;		Unchanged: 0/0
 18400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;Total ram usage:        0 bytes
 18406 ;; Hardware stack levels used:    1
 18407 ;; Hardware stack levels required when called:    3
 18408 ;; This function calls:
 18409 ;;		i2_lcdInst
 18410 ;;		i2_printf
 18411 ;; This function is called by:
 18412 ;;		_updateMenu
 18413 ;;		_inputHandler
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           	psect	text70
 18418  004656                     __ptext70:
 18419                           	opt stack 0
 18420  004656                     _change_state_to_logs_23:
 18421                           	opt stack 18
 18422                           
 18423                           ;UI.c: 536: cur_state = 1023;
 18424                           
 18425                           ;incstack = 0
 18426  004656  0E03               	movlw	3
 18427  004658  0100               	movlb	0	; () banked
 18428  00465A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18429  00465C  69E0               	setf	_cur_state& (0+255),b
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;UI.c: 537: lcdInst(0b10000000);;
 18433  00465E  0E80               	movlw	128
 18434  004660  EC5F  F024         	call	i2_lcdInst
 18435                           
 18436                           ;UI.c: 538: printf("LOG 2           ");
 18437  004664  0EEC               	movlw	low STR_40
 18438  004666  6E0D               	movwf	i2printf@f,c
 18439  004668  0EFC               	movlw	high STR_40
 18440  00466A  6E0E               	movwf	i2printf@f+1,c
 18441  00466C  ECD4  F00A         	call	i2_printf	;wreg free
 18442                           
 18443                           ;UI.c: 539: lcdInst(0b11000000);;
 18444  004670  0EC0               	movlw	192
 18445  004672  EC5F  F024         	call	i2_lcdInst
 18446                           
 18447                           ;UI.c: 540: printf("LOG 3          <");
 18448  004676  0EA7               	movlw	low STR_46
 18449  004678  6E0D               	movwf	i2printf@f,c
 18450  00467A  0EFD               	movlw	high STR_46
 18451  00467C  6E0E               	movwf	i2printf@f+1,c
 18452  00467E  ECD4  F00A         	call	i2_printf	;wreg free
 18453  004682  0012               	return		;funcret
 18454  004684                     __end_of_change_state_to_logs_23:
 18455                           	opt stack 0
 18456                           pclatu	equ	0xFFB
 18457                           pclath	equ	0xFFA
 18458                           tblptru	equ	0xFF8
 18459                           tblptrh	equ	0xFF7
 18460                           tblptrl	equ	0xFF6
 18461                           tablat	equ	0xFF5
 18462                           prodh	equ	0xFF4
 18463                           prodl	equ	0xFF3
 18464                           intcon	equ	0xFF2
 18465                           intcon2	equ	0xFF1
 18466                           intcon3	equ	0xFF0
 18467                           indf0	equ	0xFEF
 18468                           postinc0	equ	0xFEE
 18469                           fsr0h	equ	0xFEA
 18470                           fsr0l	equ	0xFE9
 18471                           wreg	equ	0xFE8
 18472                           postdec1	equ	0xFE5
 18473                           fsr1h	equ	0xFE2
 18474                           fsr1l	equ	0xFE1
 18475                           indf2	equ	0xFDF
 18476                           postinc2	equ	0xFDE
 18477                           postdec2	equ	0xFDD
 18478                           fsr2h	equ	0xFDA
 18479                           fsr2l	equ	0xFD9
 18480                           status	equ	0xFD8
 18481                           
 18482 ;; *************** function _change_state_to_logs_22 *****************
 18483 ;; Defined at:
 18484 ;;		line 528 in file "UI.c"
 18485 ;; Parameters:    Size  Location     Type
 18486 ;;		None
 18487 ;; Auto vars:     Size  Location     Type
 18488 ;;		None
 18489 ;; Return value:  Size  Location     Type
 18490 ;;                  1    wreg      void 
 18491 ;; Registers used:
 18492 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18493 ;; Tracked objects:
 18494 ;;		On entry : 0/0
 18495 ;;		On exit  : 0/0
 18496 ;;		Unchanged: 0/0
 18497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18502 ;;Total ram usage:        0 bytes
 18503 ;; Hardware stack levels used:    1
 18504 ;; Hardware stack levels required when called:    3
 18505 ;; This function calls:
 18506 ;;		i2_lcdInst
 18507 ;;		i2_printf
 18508 ;; This function is called by:
 18509 ;;		_updateMenu
 18510 ;;		_inputHandler
 18511 ;; This function uses a non-reentrant model
 18512 ;;
 18513                           
 18514                           	psect	text71
 18515  00456A                     __ptext71:
 18516                           	opt stack 0
 18517  00456A                     _change_state_to_logs_22:
 18518                           	opt stack 18
 18519                           
 18520                           ;UI.c: 529: cur_state = 1022;
 18521                           
 18522                           ;incstack = 0
 18523  00456A  0E03               	movlw	3
 18524  00456C  0100               	movlb	0	; () banked
 18525  00456E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18526  004570  0EFE               	movlw	254
 18527  004572  6FE0               	movwf	_cur_state& (0+255),b
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;UI.c: 530: lcdInst(0b10000000);;
 18531  004574  0E80               	movlw	128
 18532  004576  EC5F  F024         	call	i2_lcdInst
 18533                           
 18534                           ;UI.c: 531: printf("LOG 2          <");
 18535  00457A  0E96               	movlw	low STR_42
 18536  00457C  6E0D               	movwf	i2printf@f,c
 18537  00457E  0EFD               	movlw	high STR_42
 18538  004580  6E0E               	movwf	i2printf@f+1,c
 18539  004582  ECD4  F00A         	call	i2_printf	;wreg free
 18540                           
 18541                           ;UI.c: 532: lcdInst(0b11000000);;
 18542  004586  0EC0               	movlw	192
 18543  004588  EC5F  F024         	call	i2_lcdInst
 18544                           
 18545                           ;UI.c: 533: printf("LOG 3           ");
 18546  00458C  0EFD               	movlw	low STR_44
 18547  00458E  6E0D               	movwf	i2printf@f,c
 18548  004590  0EFC               	movlw	high STR_44
 18549  004592  6E0E               	movwf	i2printf@f+1,c
 18550  004594  ECD4  F00A         	call	i2_printf	;wreg free
 18551  004598  0012               	return		;funcret
 18552  00459A                     __end_of_change_state_to_logs_22:
 18553                           	opt stack 0
 18554                           pclatu	equ	0xFFB
 18555                           pclath	equ	0xFFA
 18556                           tblptru	equ	0xFF8
 18557                           tblptrh	equ	0xFF7
 18558                           tblptrl	equ	0xFF6
 18559                           tablat	equ	0xFF5
 18560                           prodh	equ	0xFF4
 18561                           prodl	equ	0xFF3
 18562                           intcon	equ	0xFF2
 18563                           intcon2	equ	0xFF1
 18564                           intcon3	equ	0xFF0
 18565                           indf0	equ	0xFEF
 18566                           postinc0	equ	0xFEE
 18567                           fsr0h	equ	0xFEA
 18568                           fsr0l	equ	0xFE9
 18569                           wreg	equ	0xFE8
 18570                           postdec1	equ	0xFE5
 18571                           fsr1h	equ	0xFE2
 18572                           fsr1l	equ	0xFE1
 18573                           indf2	equ	0xFDF
 18574                           postinc2	equ	0xFDE
 18575                           postdec2	equ	0xFDD
 18576                           fsr2h	equ	0xFDA
 18577                           fsr2l	equ	0xFD9
 18578                           status	equ	0xFD8
 18579                           
 18580 ;; *************** function _change_state_to_logs_12 *****************
 18581 ;; Defined at:
 18582 ;;		line 521 in file "UI.c"
 18583 ;; Parameters:    Size  Location     Type
 18584 ;;		None
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;		None
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  1    wreg      void 
 18589 ;; Registers used:
 18590 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;Total ram usage:        0 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    3
 18603 ;; This function calls:
 18604 ;;		i2_lcdInst
 18605 ;;		i2_printf
 18606 ;; This function is called by:
 18607 ;;		_updateMenu
 18608 ;;		_inputHandler
 18609 ;; This function uses a non-reentrant model
 18610 ;;
 18611                           
 18612                           	psect	text72
 18613  00459A                     __ptext72:
 18614                           	opt stack 0
 18615  00459A                     _change_state_to_logs_12:
 18616                           	opt stack 18
 18617                           
 18618                           ;UI.c: 522: cur_state = 1012;
 18619                           
 18620                           ;incstack = 0
 18621  00459A  0E03               	movlw	3
 18622  00459C  0100               	movlb	0	; () banked
 18623  00459E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18624  0045A0  0EF4               	movlw	244
 18625  0045A2  6FE0               	movwf	_cur_state& (0+255),b
 18626                           
 18627                           ; BSR set to: 0
 18628                           ;UI.c: 523: lcdInst(0b10000000);;
 18629  0045A4  0E80               	movlw	128
 18630  0045A6  EC5F  F024         	call	i2_lcdInst
 18631                           
 18632                           ;UI.c: 524: printf("LOG 1           ");
 18633  0045AA  0EDB               	movlw	low STR_41
 18634  0045AC  6E0D               	movwf	i2printf@f,c
 18635  0045AE  0EFC               	movlw	high STR_41
 18636  0045B0  6E0E               	movwf	i2printf@f+1,c
 18637  0045B2  ECD4  F00A         	call	i2_printf	;wreg free
 18638                           
 18639                           ;UI.c: 525: lcdInst(0b11000000);;
 18640  0045B6  0EC0               	movlw	192
 18641  0045B8  EC5F  F024         	call	i2_lcdInst
 18642                           
 18643                           ;UI.c: 526: printf("LOG 2          <");
 18644  0045BC  0E96               	movlw	low STR_42
 18645  0045BE  6E0D               	movwf	i2printf@f,c
 18646  0045C0  0EFD               	movlw	high STR_42
 18647  0045C2  6E0E               	movwf	i2printf@f+1,c
 18648  0045C4  ECD4  F00A         	call	i2_printf	;wreg free
 18649  0045C8  0012               	return		;funcret
 18650  0045CA                     __end_of_change_state_to_logs_12:
 18651                           	opt stack 0
 18652                           pclatu	equ	0xFFB
 18653                           pclath	equ	0xFFA
 18654                           tblptru	equ	0xFF8
 18655                           tblptrh	equ	0xFF7
 18656                           tblptrl	equ	0xFF6
 18657                           tablat	equ	0xFF5
 18658                           prodh	equ	0xFF4
 18659                           prodl	equ	0xFF3
 18660                           intcon	equ	0xFF2
 18661                           intcon2	equ	0xFF1
 18662                           intcon3	equ	0xFF0
 18663                           indf0	equ	0xFEF
 18664                           postinc0	equ	0xFEE
 18665                           fsr0h	equ	0xFEA
 18666                           fsr0l	equ	0xFE9
 18667                           wreg	equ	0xFE8
 18668                           postdec1	equ	0xFE5
 18669                           fsr1h	equ	0xFE2
 18670                           fsr1l	equ	0xFE1
 18671                           indf2	equ	0xFDF
 18672                           postinc2	equ	0xFDE
 18673                           postdec2	equ	0xFDD
 18674                           fsr2h	equ	0xFDA
 18675                           fsr2l	equ	0xFD9
 18676                           status	equ	0xFD8
 18677                           
 18678 ;; *************** function _change_state_to_logs_11 *****************
 18679 ;; Defined at:
 18680 ;;		line 514 in file "UI.c"
 18681 ;; Parameters:    Size  Location     Type
 18682 ;;		None
 18683 ;; Auto vars:     Size  Location     Type
 18684 ;;		None
 18685 ;; Return value:  Size  Location     Type
 18686 ;;                  1    wreg      void 
 18687 ;; Registers used:
 18688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18689 ;; Tracked objects:
 18690 ;;		On entry : 0/0
 18691 ;;		On exit  : 0/0
 18692 ;;		Unchanged: 0/0
 18693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18698 ;;Total ram usage:        0 bytes
 18699 ;; Hardware stack levels used:    1
 18700 ;; Hardware stack levels required when called:    3
 18701 ;; This function calls:
 18702 ;;		i2_lcdInst
 18703 ;;		i2_printf
 18704 ;; This function is called by:
 18705 ;;		_updateMenu
 18706 ;;		_inputHandler
 18707 ;; This function uses a non-reentrant model
 18708 ;;
 18709                           
 18710                           	psect	text73
 18711  0045CA                     __ptext73:
 18712                           	opt stack 0
 18713  0045CA                     _change_state_to_logs_11:
 18714                           	opt stack 18
 18715                           
 18716                           ;UI.c: 515: cur_state = 1011;
 18717                           
 18718                           ;incstack = 0
 18719  0045CA  0E03               	movlw	3
 18720  0045CC  0100               	movlb	0	; () banked
 18721  0045CE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18722  0045D0  0EF3               	movlw	243
 18723  0045D2  6FE0               	movwf	_cur_state& (0+255),b
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;UI.c: 516: lcdInst(0b10000000);;
 18727  0045D4  0E80               	movlw	128
 18728  0045D6  EC5F  F024         	call	i2_lcdInst
 18729                           
 18730                           ;UI.c: 517: printf("LOG 1          <");
 18731  0045DA  0E85               	movlw	low STR_39
 18732  0045DC  6E0D               	movwf	i2printf@f,c
 18733  0045DE  0EFD               	movlw	high STR_39
 18734  0045E0  6E0E               	movwf	i2printf@f+1,c
 18735  0045E2  ECD4  F00A         	call	i2_printf	;wreg free
 18736                           
 18737                           ;UI.c: 518: lcdInst(0b11000000);;
 18738  0045E6  0EC0               	movlw	192
 18739  0045E8  EC5F  F024         	call	i2_lcdInst
 18740                           
 18741                           ;UI.c: 519: printf("LOG 2           ");
 18742  0045EC  0EEC               	movlw	low STR_40
 18743  0045EE  6E0D               	movwf	i2printf@f,c
 18744  0045F0  0EFC               	movlw	high STR_40
 18745  0045F2  6E0E               	movwf	i2printf@f+1,c
 18746  0045F4  ECD4  F00A         	call	i2_printf	;wreg free
 18747  0045F8  0012               	return		;funcret
 18748  0045FA                     __end_of_change_state_to_logs_11:
 18749                           	opt stack 0
 18750                           pclatu	equ	0xFFB
 18751                           pclath	equ	0xFFA
 18752                           tblptru	equ	0xFF8
 18753                           tblptrh	equ	0xFF7
 18754                           tblptrl	equ	0xFF6
 18755                           tablat	equ	0xFF5
 18756                           prodh	equ	0xFF4
 18757                           prodl	equ	0xFF3
 18758                           intcon	equ	0xFF2
 18759                           intcon2	equ	0xFF1
 18760                           intcon3	equ	0xFF0
 18761                           indf0	equ	0xFEF
 18762                           postinc0	equ	0xFEE
 18763                           fsr0h	equ	0xFEA
 18764                           fsr0l	equ	0xFE9
 18765                           wreg	equ	0xFE8
 18766                           postdec1	equ	0xFE5
 18767                           fsr1h	equ	0xFE2
 18768                           fsr1l	equ	0xFE1
 18769                           indf2	equ	0xFDF
 18770                           postinc2	equ	0xFDE
 18771                           postdec2	equ	0xFDD
 18772                           fsr2h	equ	0xFDA
 18773                           fsr2l	equ	0xFD9
 18774                           status	equ	0xFD8
 18775                           
 18776 ;; *************** function _dispLogs *****************
 18777 ;; Defined at:
 18778 ;;		line 467 in file "UI.c"
 18779 ;; Parameters:    Size  Location     Type
 18780 ;;  myLog           2   17[COMRAM] int 
 18781 ;; Auto vars:     Size  Location     Type
 18782 ;;		None
 18783 ;; Return value:  Size  Location     Type
 18784 ;;                  1    wreg      void 
 18785 ;; Registers used:
 18786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18787 ;; Tracked objects:
 18788 ;;		On entry : 0/0
 18789 ;;		On exit  : 0/0
 18790 ;;		Unchanged: 0/0
 18791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18796 ;;Total ram usage:        2 bytes
 18797 ;; Hardware stack levels used:    1
 18798 ;; Hardware stack levels required when called:    2
 18799 ;; This function calls:
 18800 ;;		_retrieveLog
 18801 ;; This function is called by:
 18802 ;;		_updateMenu
 18803 ;; This function uses a non-reentrant model
 18804 ;;
 18805                           
 18806                           	psect	text74
 18807  0047A2                     __ptext74:
 18808                           	opt stack 0
 18809  0047A2                     _dispLogs:
 18810                           	opt stack 20
 18811                           
 18812                           ;UI.c: 468: logstate = 1;
 18813                           
 18814                           ;incstack = 0
 18815  0047A2  0E00               	movlw	0
 18816  0047A4  0100               	movlb	0	; () banked
 18817  0047A6  6FF7               	movwf	(_logstate+1)& (0+255),b
 18818  0047A8  0E01               	movlw	1
 18819  0047AA  6FF6               	movwf	_logstate& (0+255),b
 18820                           
 18821                           ; BSR set to: 0
 18822                           ;UI.c: 469: log = myLog;
 18823  0047AC  C012  F0E6         	movff	dispLogs@myLog,_log
 18824  0047B0  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18825                           
 18826                           ; BSR set to: 0
 18827                           ;UI.c: 470: retrieveLog(myLog - 1);
 18828  0047B4  0EFF               	movlw	255
 18829  0047B6  2412               	addwf	dispLogs@myLog,w,c
 18830  0047B8  6E07               	movwf	retrieveLog@logNum,c
 18831  0047BA  0EFF               	movlw	255
 18832  0047BC  2013               	addwfc	dispLogs@myLog+1,w,c
 18833  0047BE  6E08               	movwf	retrieveLog@logNum+1,c
 18834  0047C0  ECF2  F018         	call	_retrieveLog	;wreg free
 18835  0047C4  0012               	return		;funcret
 18836  0047C6                     __end_of_dispLogs:
 18837                           	opt stack 0
 18838                           pclatu	equ	0xFFB
 18839                           pclath	equ	0xFFA
 18840                           tblptru	equ	0xFF8
 18841                           tblptrh	equ	0xFF7
 18842                           tblptrl	equ	0xFF6
 18843                           tablat	equ	0xFF5
 18844                           prodh	equ	0xFF4
 18845                           prodl	equ	0xFF3
 18846                           intcon	equ	0xFF2
 18847                           intcon2	equ	0xFF1
 18848                           intcon3	equ	0xFF0
 18849                           indf0	equ	0xFEF
 18850                           postinc0	equ	0xFEE
 18851                           fsr0h	equ	0xFEA
 18852                           fsr0l	equ	0xFE9
 18853                           wreg	equ	0xFE8
 18854                           postdec1	equ	0xFE5
 18855                           fsr1h	equ	0xFE2
 18856                           fsr1l	equ	0xFE1
 18857                           indf2	equ	0xFDF
 18858                           postinc2	equ	0xFDE
 18859                           postdec2	equ	0xFDD
 18860                           fsr2h	equ	0xFDA
 18861                           fsr2l	equ	0xFD9
 18862                           status	equ	0xFD8
 18863                           
 18864 ;; *************** function _retrieveLog *****************
 18865 ;; Defined at:
 18866 ;;		line 134 in file "EEPROM.c"
 18867 ;; Parameters:    Size  Location     Type
 18868 ;;  logNum          2    6[COMRAM] int 
 18869 ;; Auto vars:     Size  Location     Type
 18870 ;;  i               2   13[COMRAM] int 
 18871 ;;  addr            2   15[COMRAM] unsigned short 
 18872 ;;  byte3           1   12[COMRAM] unsigned char 
 18873 ;;  byte2           1   11[COMRAM] unsigned char 
 18874 ;;  byte1           1   10[COMRAM] unsigned char 
 18875 ;; Return value:  Size  Location     Type
 18876 ;;                  1    wreg      void 
 18877 ;; Registers used:
 18878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18879 ;; Tracked objects:
 18880 ;;		On entry : 0/0
 18881 ;;		On exit  : 0/0
 18882 ;;		Unchanged: 0/0
 18883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18888 ;;Total ram usage:       11 bytes
 18889 ;; Hardware stack levels used:    1
 18890 ;; Hardware stack levels required when called:    1
 18891 ;; This function calls:
 18892 ;;		i2_EEPROM_read
 18893 ;;		i2___wmul
 18894 ;; This function is called by:
 18895 ;;		_dispLogs
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text75
 18900  0031E4                     __ptext75:
 18901                           	opt stack 0
 18902  0031E4                     _retrieveLog:
 18903                           	opt stack 20
 18904                           
 18905                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18906                           
 18907                           ;incstack = 0
 18908  0031E4  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18909  0031E8  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18910  0031EC  0E00               	movlw	0
 18911  0031EE  6E04               	movwf	i2___wmul@multiplicand+1,c
 18912  0031F0  0E0B               	movlw	11
 18913  0031F2  6E03               	movwf	i2___wmul@multiplicand,c
 18914  0031F4  ECAB  F023         	call	i2___wmul	;wreg free
 18915  0031F8  0E01               	movlw	1
 18916  0031FA  2401               	addwf	?i2___wmul,w,c
 18917  0031FC  6E10               	movwf	retrieveLog@addr,c
 18918  0031FE  0E00               	movlw	0
 18919  003200  2002               	addwfc	?i2___wmul+1,w,c
 18920  003202  6E11               	movwf	retrieveLog@addr+1,c
 18921                           
 18922                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18923  003204  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18924  003208  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18925  00320C  EC2B  F024         	call	i2_EEPROM_read	;wreg free
 18926  003210  6E0B               	movwf	retrieveLog@byte1,c
 18927                           
 18928                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18929  003212  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18930  003216  0E80               	movlw	128
 18931  003218  1609               	andwf	??_retrieveLog,f,c
 18932  00321A  5009               	movf	??_retrieveLog,w,c
 18933  00321C  0100               	movlb	0	; () banked
 18934  00321E  6FE8               	movwf	_log_completion& (0+255),b
 18935  003220  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18939  003222  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18940  003226  0E0F               	movlw	15
 18941  003228  1609               	andwf	??_retrieveLog,f,c
 18942  00322A  5009               	movf	??_retrieveLog,w,c
 18943  00322C  0100               	movlb	0	; () banked
 18944  00322E  6FF2               	movwf	_log_count_total& (0+255),b
 18945  003230  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18946                           
 18947                           ; BSR set to: 0
 18948                           ;EEPROM.c: 146: addr++;
 18949  003232  4A10               	infsnz	retrieveLog@addr,f,c
 18950  003234  2A11               	incf	retrieveLog@addr+1,f,c
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18954  003236  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18955  00323A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18956  00323E  EC2B  F024         	call	i2_EEPROM_read	;wreg free
 18957  003242  6E0C               	movwf	retrieveLog@byte2,c
 18958                           
 18959                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18960  003244  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18961  003248  0EF0               	movlw	240
 18962  00324A  1609               	andwf	??_retrieveLog,f,c
 18963  00324C  5009               	movf	??_retrieveLog,w,c
 18964  00324E  0100               	movlb	0	; () banked
 18965  003250  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18966  003252  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18967                           
 18968                           ; BSR set to: 0
 18969                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18970  003254  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18971  003258  0E0F               	movlw	15
 18972  00325A  1609               	andwf	??_retrieveLog,f,c
 18973  00325C  5009               	movf	??_retrieveLog,w,c
 18974  00325E  0100               	movlb	0	; () banked
 18975  003260  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18976  003262  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18977                           
 18978                           ; BSR set to: 0
 18979                           ;EEPROM.c: 152: addr++;
 18980  003264  4A10               	infsnz	retrieveLog@addr,f,c
 18981  003266  2A11               	incf	retrieveLog@addr+1,f,c
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18985  003268  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18986  00326C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18987  003270  EC2B  F024         	call	i2_EEPROM_read	;wreg free
 18988  003274  6E0D               	movwf	retrieveLog@byte3,c
 18989                           
 18990                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18991  003276  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18992  00327A  0EF0               	movlw	240
 18993  00327C  1609               	andwf	??_retrieveLog,f,c
 18994  00327E  5009               	movf	??_retrieveLog,w,c
 18995  003280  0100               	movlb	0	; () banked
 18996  003282  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18997  003284  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19001  003286  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19002  00328A  0E0F               	movlw	15
 19003  00328C  1609               	andwf	??_retrieveLog,f,c
 19004  00328E  5009               	movf	??_retrieveLog,w,c
 19005  003290  0100               	movlb	0	; () banked
 19006  003292  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 19007  003294  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19008                           
 19009                           ; BSR set to: 0
 19010                           ;EEPROM.c: 156: addr++;
 19011  003296  4A10               	infsnz	retrieveLog@addr,f,c
 19012  003298  2A11               	incf	retrieveLog@addr+1,f,c
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19016  00329A  0E00               	movlw	0
 19017  00329C  6E0F               	movwf	retrieveLog@i+1,c
 19018  00329E  0E00               	movlw	0
 19019  0032A0  6E0E               	movwf	retrieveLog@i,c
 19020  0032A2                     i2l6012:
 19021                           
 19022                           ; BSR set to: 0
 19023  0032A2  BE0F               	btfsc	retrieveLog@i+1,7,c
 19024  0032A4  D006               	goto	i2l6016
 19025  0032A6  500F               	movf	retrieveLog@i+1,w,c
 19026  0032A8  E11E               	bnz	i2l6024
 19027  0032AA  0E07               	movlw	7
 19028  0032AC  5C0E               	subwf	retrieveLog@i,w,c
 19029  0032AE  B0D8               	btfsc	status,0,c
 19030  0032B0  D01A               	goto	i2l6024
 19031  0032B2                     i2l6016:
 19032                           
 19033                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19034  0032B2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19035  0032B6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19036  0032BA  EC2B  F024         	call	i2_EEPROM_read	;wreg free
 19037  0032BE  6E09               	movwf	??_retrieveLog& (0+255),c
 19038  0032C0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19039  0032C2  90D8               	bcf	status,0,c
 19040  0032C4  340E               	rlcf	retrieveLog@i,w,c
 19041  0032C6  6ED9               	movwf	fsr2l,c
 19042  0032C8  340F               	rlcf	retrieveLog@i+1,w,c
 19043  0032CA  6EDA               	movwf	fsr2h,c
 19044  0032CC  0E00               	movlw	low _log_startTime
 19045  0032CE  26D9               	addwf	fsr2l,f,c
 19046  0032D0  0E01               	movlw	high _log_startTime
 19047  0032D2  22DA               	addwfc	fsr2h,f,c
 19048  0032D4  C009  FFDE         	movff	??_retrieveLog,postinc2
 19049  0032D8  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19050                           
 19051                           ;EEPROM.c: 161: addr++;
 19052  0032DC  4A10               	infsnz	retrieveLog@addr,f,c
 19053  0032DE  2A11               	incf	retrieveLog@addr+1,f,c
 19054  0032E0  4A0E               	infsnz	retrieveLog@i,f,c
 19055  0032E2  2A0F               	incf	retrieveLog@i+1,f,c
 19056  0032E4  D7DE               	goto	i2l6012
 19057  0032E6                     i2l6024:
 19058                           
 19059                           ;EEPROM.c: 162: }
 19060                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19061  0032E6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19062  0032EA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19063  0032EE  EC2B  F024         	call	i2_EEPROM_read	;wreg free
 19064  0032F2  6E09               	movwf	??_retrieveLog& (0+255),c
 19065  0032F4  5009               	movf	??_retrieveLog,w,c
 19066  0032F6  0100               	movlb	0	; () banked
 19067  0032F8  6FF4               	movwf	_log_total_time& (0+255),b
 19068  0032FA  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19069                           
 19070                           ; BSR set to: 0
 19071  0032FC  0012               	return		;funcret
 19072  0032FE                     __end_of_retrieveLog:
 19073                           	opt stack 0
 19074                           pclatu	equ	0xFFB
 19075                           pclath	equ	0xFFA
 19076                           tblptru	equ	0xFF8
 19077                           tblptrh	equ	0xFF7
 19078                           tblptrl	equ	0xFF6
 19079                           tablat	equ	0xFF5
 19080                           prodh	equ	0xFF4
 19081                           prodl	equ	0xFF3
 19082                           intcon	equ	0xFF2
 19083                           intcon2	equ	0xFF1
 19084                           intcon3	equ	0xFF0
 19085                           indf0	equ	0xFEF
 19086                           postinc0	equ	0xFEE
 19087                           fsr0h	equ	0xFEA
 19088                           fsr0l	equ	0xFE9
 19089                           wreg	equ	0xFE8
 19090                           postdec1	equ	0xFE5
 19091                           fsr1h	equ	0xFE2
 19092                           fsr1l	equ	0xFE1
 19093                           indf2	equ	0xFDF
 19094                           postinc2	equ	0xFDE
 19095                           postdec2	equ	0xFDD
 19096                           fsr2h	equ	0xFDA
 19097                           fsr2l	equ	0xFD9
 19098                           status	equ	0xFD8
 19099                           
 19100 ;; *************** function i2_EEPROM_read *****************
 19101 ;; Defined at:
 19102 ;;		line 68 in file "EEPROM.c"
 19103 ;; Parameters:    Size  Location     Type
 19104 ;;  address         2    0[COMRAM] unsigned short 
 19105 ;; Auto vars:     Size  Location     Type
 19106 ;;		None
 19107 ;; Return value:  Size  Location     Type
 19108 ;;                  1    wreg      unsigned char 
 19109 ;; Registers used:
 19110 ;;		wreg, status,2
 19111 ;; Tracked objects:
 19112 ;;		On entry : 0/0
 19113 ;;		On exit  : 0/0
 19114 ;;		Unchanged: 0/0
 19115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19120 ;;Total ram usage:        2 bytes
 19121 ;; Hardware stack levels used:    1
 19122 ;; This function calls:
 19123 ;;		Nothing
 19124 ;; This function is called by:
 19125 ;;		_retrieveLog
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           	psect	text76
 19130  004856                     __ptext76:
 19131                           	opt stack 0
 19132  004856                     i2_EEPROM_read:
 19133                           	opt stack 20
 19134                           
 19135                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19136                           
 19137                           ; BSR set to: 0
 19138                           ;incstack = 0
 19139  004856  5002               	movf	i2EEPROM_read@address+1,w,c
 19140  004858  6EAA               	movwf	4010,c	;volatile
 19141                           
 19142                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19143  00485A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19144                           
 19145                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19146  00485E  9EA6               	bcf	4006,7,c	;volatile
 19147                           
 19148                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19149  004860  9CA6               	bcf	4006,6,c	;volatile
 19150                           
 19151                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19152  004862  80A6               	bsf	4006,0,c	;volatile
 19153  004864                     i2l943:
 19154  004864  B0A6               	btfsc	4006,0,c	;volatile
 19155  004866  D7FE               	goto	i2l943
 19156                           
 19157                           ;EEPROM.c: 81: return EEDATA;
 19158  004868  50A8               	movf	4008,w,c	;volatile
 19159  00486A  0012               	return	
 19160  00486C                     __end_ofi2_EEPROM_read:
 19161                           	opt stack 0
 19162                           pclatu	equ	0xFFB
 19163                           pclath	equ	0xFFA
 19164                           tblptru	equ	0xFF8
 19165                           tblptrh	equ	0xFF7
 19166                           tblptrl	equ	0xFF6
 19167                           tablat	equ	0xFF5
 19168                           prodh	equ	0xFF4
 19169                           prodl	equ	0xFF3
 19170                           intcon	equ	0xFF2
 19171                           intcon2	equ	0xFF1
 19172                           intcon3	equ	0xFF0
 19173                           indf0	equ	0xFEF
 19174                           postinc0	equ	0xFEE
 19175                           fsr0h	equ	0xFEA
 19176                           fsr0l	equ	0xFE9
 19177                           wreg	equ	0xFE8
 19178                           postdec1	equ	0xFE5
 19179                           fsr1h	equ	0xFE2
 19180                           fsr1l	equ	0xFE1
 19181                           indf2	equ	0xFDF
 19182                           postinc2	equ	0xFDE
 19183                           postdec2	equ	0xFDD
 19184                           fsr2h	equ	0xFDA
 19185                           fsr2l	equ	0xFD9
 19186                           status	equ	0xFD8
 19187                           
 19188 ;; *************** function _printSortTimer *****************
 19189 ;; Defined at:
 19190 ;;		line 284 in file "sort.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;		None
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;  i               2   72[COMRAM] int 
 19195 ;;  curTime        14   46[COMRAM] int [7]
 19196 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19197 ;;  sec             2   66[COMRAM] int 
 19198 ;;  min             2   64[COMRAM] int 
 19199 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19200 ;;  start_sec       2   60[COMRAM] unsigned int 
 19201 ;;  hour            2   44[COMRAM] int 
 19202 ;; Return value:  Size  Location     Type
 19203 ;;                  1    wreg      void 
 19204 ;; Registers used:
 19205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19212 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19213 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19215 ;;Total ram usage:       33 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    3
 19218 ;; This function calls:
 19219 ;;		i2___lwdiv
 19220 ;;		i2___lwmod
 19221 ;;		i2___wmul
 19222 ;;		i2_getRTC
 19223 ;;		i2_lcdInst
 19224 ;;		i2_printf
 19225 ;; This function is called by:
 19226 ;;		_handler
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           	psect	text77
 19231  00271C                     __ptext77:
 19232                           	opt stack 0
 19233  00271C                     _printSortTimer:
 19234                           	opt stack 20
 19235                           
 19236                           ;sort.c: 285: getRTC();
 19237                           
 19238                           ;incstack = 0
 19239  00271C  ECF3  F01E         	call	i2_getRTC	;wreg free
 19240                           
 19241                           ;sort.c: 286: int curTime[7];
 19242                           ;sort.c: 287: for(int i = 0; i < 7; i++){
 19243  002720  0E00               	movlw	0
 19244  002722  6E4A               	movwf	printSortTimer@i+1,c
 19245  002724  0E00               	movlw	0
 19246  002726  6E49               	movwf	printSortTimer@i,c
 19247  002728                     i2l8126:
 19248  002728  BE4A               	btfsc	printSortTimer@i+1,7,c
 19249  00272A  D006               	goto	i2l8130
 19250  00272C  504A               	movf	printSortTimer@i+1,w,c
 19251  00272E  E131               	bnz	i2l8136
 19252  002730  0E07               	movlw	7
 19253  002732  5C49               	subwf	printSortTimer@i,w,c
 19254  002734  B0D8               	btfsc	status,0,c
 19255  002736  D02D               	goto	i2l8136
 19256  002738                     i2l8130:
 19257                           
 19258                           ;sort.c: 288: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19259  002738  0E24               	movlw	low _time
 19260  00273A  2449               	addwf	printSortTimer@i,w,c
 19261  00273C  6ED9               	movwf	fsr2l,c
 19262  00273E  0E01               	movlw	high _time
 19263  002740  204A               	addwfc	printSortTimer@i+1,w,c
 19264  002742  6EDA               	movwf	fsr2h,c
 19265  002744  50DF               	movf	indf2,w,c
 19266  002746  6E2A               	movwf	??_printSortTimer& (0+255),c
 19267  002748  3A2A               	swapf	??_printSortTimer,f,c
 19268  00274A  0E0F               	movlw	15
 19269  00274C  162A               	andwf	??_printSortTimer,f,c
 19270  00274E  0E0F               	movlw	15
 19271  002750  162A               	andwf	??_printSortTimer,f,c
 19272  002752  502A               	movf	??_printSortTimer,w,c
 19273  002754  0D0A               	mullw	10
 19274  002756  0E24               	movlw	low _time
 19275  002758  2449               	addwf	printSortTimer@i,w,c
 19276  00275A  6ED9               	movwf	fsr2l,c
 19277  00275C  0E01               	movlw	high _time
 19278  00275E  204A               	addwfc	printSortTimer@i+1,w,c
 19279  002760  6EDA               	movwf	fsr2h,c
 19280  002762  50DF               	movf	indf2,w,c
 19281  002764  0B0F               	andlw	15
 19282  002766  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19283  002768  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19284  00276A  50F3               	movf	prodl,w,c
 19285  00276C  262B               	addwf	??_printSortTimer+1,f,c
 19286  00276E  50F4               	movf	prodh,w,c
 19287  002770  222C               	addwfc	??_printSortTimer+2,f,c
 19288  002772  90D8               	bcf	status,0,c
 19289  002774  3449               	rlcf	printSortTimer@i,w,c
 19290  002776  6ED9               	movwf	fsr2l,c
 19291  002778  344A               	rlcf	printSortTimer@i+1,w,c
 19292  00277A  6EDA               	movwf	fsr2h,c
 19293  00277C  0E2F               	movlw	low printSortTimer@curTime
 19294  00277E  26D9               	addwf	fsr2l,f,c
 19295  002780  0E00               	movlw	high printSortTimer@curTime
 19296  002782  22DA               	addwfc	fsr2h,f,c
 19297  002784  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19298  002788  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19299  00278C  4A49               	infsnz	printSortTimer@i,f,c
 19300  00278E  2A4A               	incf	printSortTimer@i+1,f,c
 19301  002790  D7CB               	goto	i2l8126
 19302  002792                     i2l8136:
 19303                           
 19304                           ;sort.c: 289: }
 19305                           ;sort.c: 290: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19306  002792  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19307  002796  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19308  00279A  0E00               	movlw	0
 19309  00279C  6E04               	movwf	i2___wmul@multiplicand+1,c
 19310  00279E  0E3C               	movlw	60
 19311  0027A0  6E03               	movwf	i2___wmul@multiplicand,c
 19312  0027A2  ECAB  F023         	call	i2___wmul	;wreg free
 19313  0027A6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19314  0027AA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19315  0027AE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19316  0027B2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19317  0027B6  0E0E               	movlw	14
 19318  0027B8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19319  0027BA  0E10               	movlw	16
 19320  0027BC  6E03               	movwf	i2___wmul@multiplicand,c
 19321  0027BE  ECAB  F023         	call	i2___wmul	;wreg free
 19322  0027C2  5001               	movf	?i2___wmul,w,c
 19323  0027C4  262A               	addwf	??_printSortTimer,f,c
 19324  0027C6  5002               	movf	?i2___wmul+1,w,c
 19325  0027C8  222B               	addwfc	??_printSortTimer+1,f,c
 19326  0027CA  0101               	movlb	1	; () banked
 19327  0027CC  510E               	movf	_startTime& (0+255),w,b
 19328  0027CE  242A               	addwf	??_printSortTimer,w,c
 19329  0027D0  6E3D               	movwf	printSortTimer@start_sec,c
 19330  0027D2  0101               	movlb	1	; () banked
 19331  0027D4  510F               	movf	(_startTime+1)& (0+255),w,b
 19332  0027D6  202B               	addwfc	??_printSortTimer+1,w,c
 19333  0027D8  6E3E               	movwf	printSortTimer@start_sec+1,c
 19334                           
 19335                           ;sort.c: 291: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19336  0027DA  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19337  0027DE  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19338  0027E2  0E00               	movlw	0
 19339  0027E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 19340  0027E6  0E3C               	movlw	60
 19341  0027E8  6E03               	movwf	i2___wmul@multiplicand,c
 19342  0027EA  ECAB  F023         	call	i2___wmul	;wreg free
 19343  0027EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19344  0027F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19345  0027F6  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19346  0027FA  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19347  0027FE  0E0E               	movlw	14
 19348  002800  6E04               	movwf	i2___wmul@multiplicand+1,c
 19349  002802  0E10               	movlw	16
 19350  002804  6E03               	movwf	i2___wmul@multiplicand,c
 19351  002806  ECAB  F023         	call	i2___wmul	;wreg free
 19352  00280A  5001               	movf	?i2___wmul,w,c
 19353  00280C  262A               	addwf	??_printSortTimer,f,c
 19354  00280E  5002               	movf	?i2___wmul+1,w,c
 19355  002810  222B               	addwfc	??_printSortTimer+1,f,c
 19356  002812  502F               	movf	printSortTimer@curTime,w,c
 19357  002814  242A               	addwf	??_printSortTimer,w,c
 19358  002816  6E3F               	movwf	printSortTimer@cur_sec,c
 19359  002818  5030               	movf	printSortTimer@curTime+1,w,c
 19360  00281A  202B               	addwfc	??_printSortTimer+1,w,c
 19361  00281C  6E40               	movwf	printSortTimer@cur_sec+1,c
 19362                           
 19363                           ;sort.c: 292: unsigned int timeDiff = cur_sec - start_sec;
 19364  00281E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19365  002822  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19366  002826  1E2A               	comf	??_printSortTimer,f,c
 19367  002828  1E2B               	comf	??_printSortTimer+1,f,c
 19368  00282A  4A2A               	infsnz	??_printSortTimer,f,c
 19369  00282C  2A2B               	incf	??_printSortTimer+1,f,c
 19370  00282E  503F               	movf	printSortTimer@cur_sec,w,c
 19371  002830  242A               	addwf	??_printSortTimer,w,c
 19372  002832  6E47               	movwf	printSortTimer@timeDiff,c
 19373  002834  5040               	movf	printSortTimer@cur_sec+1,w,c
 19374  002836  202B               	addwfc	??_printSortTimer+1,w,c
 19375  002838  6E48               	movwf	printSortTimer@timeDiff+1,c
 19376                           
 19377                           ;sort.c: 294: total_time = timeDiff;
 19378  00283A  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19379  00283E  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19380                           
 19381                           ;sort.c: 296: if(timeDiff >= 179){
 19382  002842  5048               	movf	printSortTimer@timeDiff+1,w,c
 19383  002844  E104               	bnz	i2u700_40
 19384  002846  0EB3               	movlw	179
 19385  002848  5C47               	subwf	printSortTimer@timeDiff,w,c
 19386  00284A  A0D8               	btfss	status,0,c
 19387  00284C  D003               	goto	i2l8146
 19388  00284E                     i2u700_40:
 19389                           
 19390                           ;sort.c: 297: machine_state = DoneSorting_state;
 19391  00284E  0E02               	movlw	2
 19392  002850  0100               	movlb	0	; () banked
 19393  002852  6FFC               	movwf	_machine_state& (0+255),b
 19394  002854                     i2l8146:
 19395                           
 19396                           ;sort.c: 299: }
 19397                           ;sort.c: 301: int hour = timeDiff / 3600;
 19398  002854  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19399  002858  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19400  00285C  0E0E               	movlw	14
 19401  00285E  6E09               	movwf	i2___lwdiv@divisor+1,c
 19402  002860  0E10               	movlw	16
 19403  002862  6E08               	movwf	i2___lwdiv@divisor,c
 19404  002864  ECA5  F020         	call	i2___lwdiv	;wreg free
 19405  002868  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19406  00286C  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19407                           
 19408                           ;sort.c: 302: int min = (timeDiff % 3600) / 60;
 19409  002870  0E0E               	movlw	14
 19410  002872  6E04               	movwf	i2___lwmod@divisor+1,c
 19411  002874  0E10               	movlw	16
 19412  002876  6E03               	movwf	i2___lwmod@divisor,c
 19413  002878  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19414  00287C  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19415  002880  EC64  F021         	call	i2___lwmod	;wreg free
 19416  002884  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19417  002888  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19418  00288C  0E00               	movlw	0
 19419  00288E  6E09               	movwf	i2___lwdiv@divisor+1,c
 19420  002890  0E3C               	movlw	60
 19421  002892  6E08               	movwf	i2___lwdiv@divisor,c
 19422  002894  ECA5  F020         	call	i2___lwdiv	;wreg free
 19423  002898  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19424  00289C  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19425                           
 19426                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19427  0028A0  0E0E               	movlw	14
 19428  0028A2  6E04               	movwf	i2___lwmod@divisor+1,c
 19429  0028A4  0E10               	movlw	16
 19430  0028A6  6E03               	movwf	i2___lwmod@divisor,c
 19431  0028A8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19432  0028AC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19433  0028B0  EC64  F021         	call	i2___lwmod	;wreg free
 19434  0028B4  C001  F045         	movff	?i2___lwmod,_printSortTimer$2419
 19435  0028B8  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2419+1
 19436                           
 19437                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19438  0028BC  C045  F001         	movff	_printSortTimer$2419,i2___lwmod@dividend
 19439  0028C0  C046  F002         	movff	_printSortTimer$2419+1,i2___lwmod@dividend+1
 19440  0028C4  0E00               	movlw	0
 19441  0028C6  6E04               	movwf	i2___lwmod@divisor+1,c
 19442  0028C8  0E3C               	movlw	60
 19443  0028CA  6E03               	movwf	i2___lwmod@divisor,c
 19444  0028CC  EC64  F021         	call	i2___lwmod	;wreg free
 19445  0028D0  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19446  0028D4  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19447                           
 19448                           ;sort.c: 305: lcdInst(0b10000000);;
 19449  0028D8  0E80               	movlw	128
 19450  0028DA  EC5F  F024         	call	i2_lcdInst
 19451                           
 19452                           ;sort.c: 306: printf("SORTING...");
 19453  0028DE  0E72               	movlw	low STR_64
 19454  0028E0  6E0D               	movwf	i2printf@f,c
 19455  0028E2  0EFF               	movlw	high STR_64
 19456  0028E4  6E0E               	movwf	i2printf@f+1,c
 19457  0028E6  ECD4  F00A         	call	i2_printf	;wreg free
 19458                           
 19459                           ;sort.c: 307: lcdInst(0b11000000);;
 19460  0028EA  0EC0               	movlw	192
 19461  0028EC  EC5F  F024         	call	i2_lcdInst
 19462                           
 19463                           ;sort.c: 308: printf("TIME %d:%02d", min, sec);
 19464  0028F0  0E43               	movlw	low STR_65
 19465  0028F2  6E0D               	movwf	i2printf@f,c
 19466  0028F4  0EFF               	movlw	high STR_65
 19467  0028F6  6E0E               	movwf	i2printf@f+1,c
 19468  0028F8  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19469  0028FC  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19470  002900  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19471  002904  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19472  002908  ECD4  F00A         	call	i2_printf	;wreg free
 19473  00290C  0012               	return		;funcret
 19474  00290E                     __end_of_printSortTimer:
 19475                           	opt stack 0
 19476                           pclatu	equ	0xFFB
 19477                           pclath	equ	0xFFA
 19478                           tblptru	equ	0xFF8
 19479                           tblptrh	equ	0xFF7
 19480                           tblptrl	equ	0xFF6
 19481                           tablat	equ	0xFF5
 19482                           prodh	equ	0xFF4
 19483                           prodl	equ	0xFF3
 19484                           intcon	equ	0xFF2
 19485                           intcon2	equ	0xFF1
 19486                           intcon3	equ	0xFF0
 19487                           indf0	equ	0xFEF
 19488                           postinc0	equ	0xFEE
 19489                           fsr0h	equ	0xFEA
 19490                           fsr0l	equ	0xFE9
 19491                           wreg	equ	0xFE8
 19492                           postdec1	equ	0xFE5
 19493                           fsr1h	equ	0xFE2
 19494                           fsr1l	equ	0xFE1
 19495                           indf2	equ	0xFDF
 19496                           postinc2	equ	0xFDE
 19497                           postdec2	equ	0xFDD
 19498                           fsr2h	equ	0xFDA
 19499                           fsr2l	equ	0xFD9
 19500                           status	equ	0xFD8
 19501                           
 19502 ;; *************** function i2_printf *****************
 19503 ;; Defined at:
 19504 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19505 ;; Parameters:    Size  Location     Type
 19506 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19507 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 19508 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 19509 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 19510 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 19511 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 19512 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 19513 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 19514 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 19515 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 19516 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 19517 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 19518 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 19519 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 19520 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 19521 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 19522 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 19523 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 19524 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 19525 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 19526 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 19527 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 19528 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 19529 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 19530 ;; Auto vars:     Size  Location     Type
 19531 ;;  printf          4    0        struct .
 19532 ;;  printf          2   39[COMRAM] int 
 19533 ;;  printf          2   35[COMRAM] unsigned int 
 19534 ;;  printf          2   33[COMRAM] unsigned int 
 19535 ;;  printf          2   31[COMRAM] PTR void [1]
 19536 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19537 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19538 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 19539 ;;  printf          1   38[COMRAM] char 
 19540 ;;  printf          1   37[COMRAM] unsigned char 
 19541 ;;  printf          1   28[COMRAM] char 
 19542 ;; Return value:  Size  Location     Type
 19543 ;;                  2   12[COMRAM] int 
 19544 ;; Registers used:
 19545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19546 ;; Tracked objects:
 19547 ;;		On entry : 0/0
 19548 ;;		On exit  : 0/0
 19549 ;;		Unchanged: 0/0
 19550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19551 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19552 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19553 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;Total ram usage:       29 bytes
 19556 ;; Hardware stack levels used:    1
 19557 ;; Hardware stack levels required when called:    2
 19558 ;; This function calls:
 19559 ;;		i2___lwdiv
 19560 ;;		i2___lwmod
 19561 ;;		i2___wmul
 19562 ;;		i2_isdigit
 19563 ;;		i2_putch
 19564 ;; This function is called by:
 19565 ;;		_change_state_to_menu_11
 19566 ;;		_change_state_to_menu_23
 19567 ;;		_change_state_to_logs_11
 19568 ;;		_change_state_to_logs_12
 19569 ;;		_change_state_to_logs_22
 19570 ;;		_change_state_to_logs_23
 19571 ;;		_change_state_to_logs_33
 19572 ;;		_change_state_to_logs_34
 19573 ;;		_printSortTimer
 19574 ;;		i2_change_state_to_menu_start
 19575 ;;		i2_change_state_to_menu_12
 19576 ;;		i2_change_state_to_menu_22
 19577 ;;		i2_printRTC
 19578 ;; This function uses a non-reentrant model
 19579 ;;
 19580                           
 19581                           	psect	text78
 19582  0015A8                     __ptext78:
 19583                           	opt stack 0
 19584  0015A8                     i2_printf:
 19585                           	opt stack 19
 19586                           
 19587                           ;doprnt.c: 466: va_list ap;
 19588                           ;doprnt.c: 499: signed char c;
 19589                           ;doprnt.c: 501: int width;
 19590                           ;doprnt.c: 506: signed char prec;
 19591                           ;doprnt.c: 508: unsigned char flag;
 19592                           ;doprnt.c: 523: union {
 19593                           ;doprnt.c: 524: unsigned long vd;
 19594                           ;doprnt.c: 525: double integ;
 19595                           ;doprnt.c: 526: } tmpval;
 19596                           ;doprnt.c: 528: unsigned int val;
 19597                           ;doprnt.c: 529: unsigned len;
 19598                           ;doprnt.c: 530: const char * cp;
 19599                           ;doprnt.c: 533: *ap = __va_start();
 19600                           
 19601                           ;incstack = 0
 19602  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19603  0015AA  6E20               	movwf	i2printf@ap,c
 19604  0015AC  0E00               	movlw	high (?i2_printf+2)
 19605  0015AE  6E21               	movwf	i2printf@ap+1,c
 19606                           
 19607                           ;doprnt.c: 536: while(c = *f++) {
 19608  0015B0  D1A4               	goto	i2l5836
 19609  0015B2                     i2l5706:
 19610                           
 19611                           ;doprnt.c: 538: if(c != '%')
 19612  0015B2  0E25               	movlw	37
 19613  0015B4  1827               	xorwf	i2printf@c,w,c
 19614  0015B6  B4D8               	btfsc	status,2,c
 19615  0015B8  D004               	goto	i2l5710
 19616                           
 19617                           ;doprnt.c: 540: {
 19618                           ;doprnt.c: 541: (putch(c) );
 19619  0015BA  5027               	movf	i2printf@c,w,c
 19620  0015BC  EC59  F024         	call	i2_putch
 19621                           
 19622                           ;doprnt.c: 542: continue;
 19623  0015C0  D19C               	goto	i2l5836
 19624  0015C2                     i2l5710:
 19625                           
 19626                           ;doprnt.c: 543: }
 19627                           ;doprnt.c: 546: width = 0;
 19628  0015C2  0E00               	movlw	0
 19629  0015C4  6E29               	movwf	i2printf@width+1,c
 19630  0015C6  0E00               	movlw	0
 19631  0015C8  6E28               	movwf	i2printf@width,c
 19632                           
 19633                           ;doprnt.c: 548: flag = 0;
 19634  0015CA  0E00               	movlw	0
 19635  0015CC  6E26               	movwf	i2printf@flag,c
 19636                           
 19637                           ;doprnt.c: 551: switch(*f) {
 19638                           
 19639                           ;doprnt.c: 550: for(;;) {
 19640  0015CE  D003               	goto	i2l5716
 19641  0015D0                     i2l5712:
 19642                           
 19643                           ;doprnt.c: 580: flag |= 0x04;
 19644  0015D0  8426               	bsf	i2printf@flag,2,c
 19645                           
 19646                           ;doprnt.c: 581: f++;
 19647  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19648  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19649  0015D6                     i2l5716:
 19650  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19651  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19652  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19653  0015DE  6AF8               	clrf	tblptru,c
 19654  0015E0                     	endif
 19655  0015E0                     	if	0	;tblptru may be non-zero
 19656  0015E0                     	endif
 19657  0015E0  0008               	tblrd		*
 19658  0015E2  50F5               	movf	tablat,w,c
 19659                           
 19660                           ; Switch size 1, requested type "space"
 19661                           ; Number of cases is 1, Range of values is 48 to 48
 19662                           ; switch strategies available:
 19663                           ; Name         Instructions Cycles
 19664                           ; simple_byte            4     3 (average)
 19665                           ;	Chosen strategy is simple_byte
 19666  0015E4  0A30               	xorlw	48	; case 48
 19667  0015E6  B4D8               	btfsc	status,2,c
 19668  0015E8  D7F3               	goto	i2l5712
 19669                           
 19670                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19671                           
 19672                           ;doprnt.c: 586: }
 19673                           
 19674                           ;doprnt.c: 585: break;
 19675  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19676  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19677  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19678  0015F2  6AF8               	clrf	tblptru,c
 19679  0015F4                     	endif
 19680  0015F4                     	if	0	;tblptru may be non-zero
 19681  0015F4                     	endif
 19682  0015F4  0008               	tblrd		*
 19683  0015F6  50F5               	movf	tablat,w,c
 19684  0015F8  EC05  F024         	call	i2_isdigit
 19685  0015FC  A0D8               	btfss	status,0,c
 19686  0015FE  D0A6               	goto	i2l5764
 19687                           
 19688                           ;doprnt.c: 598: width = 0;
 19689  001600  0E00               	movlw	0
 19690  001602  6E29               	movwf	i2printf@width+1,c
 19691  001604  0E00               	movlw	0
 19692  001606  6E28               	movwf	i2printf@width,c
 19693  001608                     i2l5722:
 19694                           
 19695                           ;doprnt.c: 600: width *= 10;
 19696  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19697  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19698  001610  0E00               	movlw	0
 19699  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19700  001614  0E0A               	movlw	10
 19701  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19702  001618  ECAB  F023         	call	i2___wmul	;wreg free
 19703  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19704  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19705                           
 19706                           ;doprnt.c: 601: width += *f++ - '0';
 19707  001624  0ED0               	movlw	208
 19708  001626  6E19               	movwf	??i2_printf& (0+255),c
 19709  001628  0EFF               	movlw	255
 19710  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19711  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19712  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19713  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19714  001634  6AF8               	clrf	tblptru,c
 19715  001636                     	endif
 19716  001636                     	if	0	;tblptru may be non-zero
 19717  001636                     	endif
 19718  001636  0008               	tblrd		*
 19719  001638  50F5               	movf	tablat,w,c
 19720  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19721  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19722  00163E  5019               	movf	??i2_printf,w,c
 19723  001640  261B               	addwf	??i2_printf+2,f,c
 19724  001642  501A               	movf	??i2_printf+1,w,c
 19725  001644  221C               	addwfc	??i2_printf+3,f,c
 19726  001646  501B               	movf	??i2_printf+2,w,c
 19727  001648  2628               	addwf	i2printf@width,f,c
 19728  00164A  501C               	movf	??i2_printf+3,w,c
 19729  00164C  2229               	addwfc	i2printf@width+1,f,c
 19730  00164E  4A0D               	infsnz	i2printf@f,f,c
 19731  001650  2A0E               	incf	i2printf@f+1,f,c
 19732                           
 19733                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19734  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19735  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19736  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19737  00165A  6AF8               	clrf	tblptru,c
 19738  00165C                     	endif
 19739  00165C                     	if	0	;tblptru may be non-zero
 19740  00165C                     	endif
 19741  00165C  0008               	tblrd		*
 19742  00165E  50F5               	movf	tablat,w,c
 19743  001660  EC05  F024         	call	i2_isdigit
 19744  001664  A0D8               	btfss	status,0,c
 19745  001666  D072               	goto	i2l5764
 19746  001668  D7CF               	goto	i2l5722
 19747  00166A                     i2l5730:
 19748                           
 19749                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19750  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19751  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19752  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19753  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19754  00167A  0E02               	movlw	2
 19755  00167C  2620               	addwf	i2printf@ap,f,c
 19756  00167E  0E00               	movlw	0
 19757  001680  2221               	addwfc	i2printf@ap+1,f,c
 19758                           
 19759                           ;doprnt.c: 740: if(!cp)
 19760  001682  501E               	movf	i2printf@cp,w,c
 19761  001684  101F               	iorwf	i2printf@cp+1,w,c
 19762  001686  A4D8               	btfss	status,2,c
 19763  001688  D004               	goto	i2l5738
 19764                           
 19765                           ;doprnt.c: 741: cp = "(null)";
 19766  00168A  0EB6               	movlw	low STR_117
 19767  00168C  6E1E               	movwf	i2printf@cp,c
 19768  00168E  0EFF               	movlw	high STR_117
 19769  001690  6E1F               	movwf	i2printf@cp+1,c
 19770  001692                     i2l5738:
 19771                           
 19772                           ;doprnt.c: 745: len = 0;
 19773  001692  0E00               	movlw	0
 19774  001694  6E23               	movwf	i2printf@len+1,c
 19775  001696  0E00               	movlw	0
 19776  001698  6E22               	movwf	i2printf@len,c
 19777                           
 19778                           ;doprnt.c: 746: while(cp[len])
 19779  00169A  D002               	goto	i2l5742
 19780  00169C                     i2l5740:
 19781                           
 19782                           ;doprnt.c: 747: len++;
 19783  00169C  4A22               	infsnz	i2printf@len,f,c
 19784  00169E  2A23               	incf	i2printf@len+1,f,c
 19785  0016A0                     i2l5742:
 19786  0016A0  5022               	movf	i2printf@len,w,c
 19787  0016A2  241E               	addwf	i2printf@cp,w,c
 19788  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19789  0016A6  5023               	movf	i2printf@len+1,w,c
 19790  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19791  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19792  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19793  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19794  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19795  0016B6  6EF8               	movwf	tblptru,c
 19796  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19797  0016BA  64F7               	cpfsgt	tblptrh,c
 19798  0016BC  D003               	bra	i2u427_47
 19799  0016BE  0008               	tblrd		*
 19800  0016C0  50F5               	movf	tablat,w,c
 19801  0016C2  D005               	bra	i2u427_40
 19802  0016C4                     i2u427_47:
 19803  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19804  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19805  0016CC  50EF               	movf	indf0,w,c
 19806  0016CE                     i2u427_40:
 19807  0016CE  0900               	iorlw	0
 19808  0016D0  A4D8               	btfss	status,2,c
 19809  0016D2  D7E4               	goto	i2l5740
 19810                           
 19811                           ;doprnt.c: 757: if(width > len)
 19812  0016D4  5028               	movf	i2printf@width,w,c
 19813  0016D6  5C22               	subwf	i2printf@len,w,c
 19814  0016D8  5029               	movf	i2printf@width+1,w,c
 19815  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19816  0016DC  B0D8               	btfsc	status,0,c
 19817  0016DE  D005               	goto	i2l5748
 19818                           
 19819                           ;doprnt.c: 758: width -= len;
 19820  0016E0  5022               	movf	i2printf@len,w,c
 19821  0016E2  5E28               	subwf	i2printf@width,f,c
 19822  0016E4  5023               	movf	i2printf@len+1,w,c
 19823  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19824  0016E8  D008               	goto	i2l5752
 19825  0016EA                     i2l5748:
 19826                           
 19827                           ;doprnt.c: 759: else
 19828                           ;doprnt.c: 760: width = 0;
 19829  0016EA  0E00               	movlw	0
 19830  0016EC  6E29               	movwf	i2printf@width+1,c
 19831  0016EE  0E00               	movlw	0
 19832  0016F0  6E28               	movwf	i2printf@width,c
 19833                           
 19834                           ;doprnt.c: 764: while(width--)
 19835  0016F2  D003               	goto	i2l5752
 19836  0016F4                     i2l5750:
 19837                           
 19838                           ;doprnt.c: 765: (putch(' ') );
 19839  0016F4  0E20               	movlw	32
 19840  0016F6  EC59  F024         	call	i2_putch
 19841  0016FA                     i2l5752:
 19842  0016FA  0628               	decf	i2printf@width,f,c
 19843  0016FC  A0D8               	btfss	status,0,c
 19844  0016FE  0629               	decf	i2printf@width+1,f,c
 19845  001700  2828               	incf	i2printf@width,w,c
 19846  001702  E1F8               	bnz	i2l5750
 19847  001704  2829               	incf	i2printf@width+1,w,c
 19848  001706  B4D8               	btfsc	status,2,c
 19849  001708  D016               	goto	i2l5758
 19850  00170A  D7F4               	goto	i2l5750
 19851  00170C                     i2l5754:
 19852                           
 19853                           ;doprnt.c: 768: (putch(*cp++) );
 19854  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19855  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19856  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19857  001716  6EF8               	movwf	tblptru,c
 19858  001718  0E0F               	movlw	(high __ramtop+-1)
 19859  00171A  64F7               	cpfsgt	tblptrh,c
 19860  00171C  D003               	bra	i2u431_47
 19861  00171E  0008               	tblrd		*
 19862  001720  50F5               	movf	tablat,w,c
 19863  001722  D005               	bra	i2u431_40
 19864  001724                     i2u431_47:
 19865  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19866  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19867  00172C  50EF               	movf	indf0,w,c
 19868  00172E                     i2u431_40:
 19869  00172E  EC59  F024         	call	i2_putch
 19870  001732  4A1E               	infsnz	i2printf@cp,f,c
 19871  001734  2A1F               	incf	i2printf@cp+1,f,c
 19872  001736                     i2l5758:
 19873  001736  0622               	decf	i2printf@len,f,c
 19874  001738  A0D8               	btfss	status,0,c
 19875  00173A  0623               	decf	i2printf@len+1,f,c
 19876  00173C  2822               	incf	i2printf@len,w,c
 19877  00173E  E1E6               	bnz	i2l5754
 19878  001740  2823               	incf	i2printf@len+1,w,c
 19879  001742  B4D8               	btfsc	status,2,c
 19880  001744  D0DA               	goto	i2l5836
 19881  001746  D7E2               	goto	i2l5754
 19882  001748                     i2l5760:
 19883                           
 19884                           ;doprnt.c: 818: flag |= 0x40;
 19885  001748  8C26               	bsf	i2printf@flag,6,c
 19886                           
 19887                           ;doprnt.c: 822: }
 19888                           
 19889                           ;doprnt.c: 819: break;
 19890  00174A  D01B               	goto	i2l1262
 19891  00174C                     i2l5764:
 19892  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19893  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19894  001754  4A0D               	infsnz	i2printf@f,f,c
 19895  001756  2A0E               	incf	i2printf@f+1,f,c
 19896  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19897  001758  6AF8               	clrf	tblptru,c
 19898  00175A                     	endif
 19899  00175A                     	if	0	;tblptru may be non-zero
 19900  00175A                     	endif
 19901  00175A  0008               	tblrd		*
 19902  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19903  001760  5027               	movf	i2printf@c,w,c
 19904                           
 19905                           ; Switch size 1, requested type "space"
 19906                           ; Number of cases is 5, Range of values is 0 to 117
 19907                           ; switch strategies available:
 19908                           ; Name         Instructions Cycles
 19909                           ; simple_byte           16     9 (average)
 19910                           ;	Chosen strategy is simple_byte
 19911  001762  0A00               	xorlw	0	; case 0
 19912  001764  B4D8               	btfsc	status,2,c
 19913  001766  0012               	return	
 19914  001768  0A64               	xorlw	100	; case 100
 19915  00176A  B4D8               	btfsc	status,2,c
 19916  00176C  D00A               	goto	i2l1262
 19917  00176E  0A0D               	xorlw	13	; case 105
 19918  001770  B4D8               	btfsc	status,2,c
 19919  001772  D007               	goto	i2l1262
 19920  001774  0A1A               	xorlw	26	; case 115
 19921  001776  B4D8               	btfsc	status,2,c
 19922  001778  D778               	goto	i2l5730
 19923  00177A  0A06               	xorlw	6	; case 117
 19924  00177C  B4D8               	btfsc	status,2,c
 19925  00177E  D7E4               	goto	i2l5760
 19926  001780  D0BC               	goto	i2l5836
 19927  001782                     i2l1262:
 19928                           
 19929                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19930  001782  BC26               	btfsc	i2printf@flag,6,c
 19931  001784  D015               	goto	i2l5776
 19932                           
 19933                           ;doprnt.c: 1253: {
 19934                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19935  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19936  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19937  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19938  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19939  001796  0E02               	movlw	2
 19940  001798  2620               	addwf	i2printf@ap,f,c
 19941  00179A  0E00               	movlw	0
 19942  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19943                           
 19944                           ;doprnt.c: 1261: if((int)val < 0) {
 19945  00179E  AE25               	btfss	i2printf@val+1,7,c
 19946  0017A0  D013               	goto	i2l5780
 19947                           
 19948                           ;doprnt.c: 1262: flag |= 0x03;
 19949  0017A2  0E03               	movlw	3
 19950  0017A4  1226               	iorwf	i2printf@flag,f,c
 19951                           
 19952                           ;doprnt.c: 1263: val = -val;
 19953  0017A6  6C24               	negf	i2printf@val,c
 19954  0017A8  1E25               	comf	i2printf@val+1,f,c
 19955  0017AA  B0D8               	btfsc	status,0,c
 19956  0017AC  2A25               	incf	i2printf@val+1,f,c
 19957                           
 19958                           ;doprnt.c: 1264: }
 19959                           ;doprnt.c: 1266: }
 19960  0017AE  D00C               	goto	i2l5780
 19961  0017B0                     i2l5776:
 19962                           
 19963                           ;doprnt.c: 1268: else
 19964                           ;doprnt.c: 1273: {
 19965                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19966  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19967  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19968  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19969  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19970  0017C0  0E02               	movlw	2
 19971  0017C2  2620               	addwf	i2printf@ap,f,c
 19972  0017C4  0E00               	movlw	0
 19973  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19974  0017C8                     i2l5780:
 19975                           
 19976                           ;doprnt.c: 1287: }
 19977                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19978  0017C8  0E01               	movlw	1
 19979  0017CA  6E27               	movwf	i2printf@c,c
 19980  0017CC                     i2l5782:
 19981  0017CC  0E05               	movlw	5
 19982  0017CE  1827               	xorwf	i2printf@c,w,c
 19983  0017D0  B4D8               	btfsc	status,2,c
 19984  0017D2  D015               	goto	i2l5794
 19985                           
 19986                           ;doprnt.c: 1306: if(val < dpowers[c])
 19987  0017D4  5027               	movf	i2printf@c,w,c
 19988  0017D6  0D02               	mullw	2
 19989  0017D8  0E26               	movlw	low _dpowers
 19990  0017DA  24F3               	addwf	prodl,w,c
 19991  0017DC  6EF6               	movwf	tblptrl,c
 19992  0017DE  0EFB               	movlw	high _dpowers
 19993  0017E0  20F4               	addwfc	prodh,w,c
 19994  0017E2  6EF7               	movwf	tblptrh,c
 19995  0017E4                     	if	1	;There are 3 active tblptr bytes
 19996  0017E4  6AF8               	clrf	tblptru,c
 19997  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19998  0017E8  22F8               	addwfc	tblptru,f,c
 19999  0017EA                     	endif
 20000  0017EA  0009               	tblrd		*+
 20001  0017EC  50F5               	movf	tablat,w,c
 20002  0017EE  5C24               	subwf	i2printf@val,w,c
 20003  0017F0  0009               	tblrd		*+
 20004  0017F2  50F5               	movf	tablat,w,c
 20005  0017F4  5825               	subwfb	i2printf@val+1,w,c
 20006  0017F6  A0D8               	btfss	status,0,c
 20007  0017F8  D002               	goto	i2l5794
 20008                           
 20009                           ;doprnt.c: 1307: break;
 20010  0017FA  2A27               	incf	i2printf@c,f,c
 20011  0017FC  D7E7               	goto	i2l5782
 20012  0017FE                     i2l5794:
 20013                           
 20014                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20015  0017FE  5028               	movf	i2printf@width,w,c
 20016  001800  1029               	iorwf	i2printf@width+1,w,c
 20017  001802  B4D8               	btfsc	status,2,c
 20018  001804  D009               	goto	i2l5800
 20019  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 20020  00180A  0E03               	movlw	3
 20021  00180C  1619               	andwf	??i2_printf,f,c
 20022  00180E  B4D8               	btfsc	status,2,c
 20023  001810  D003               	goto	i2l5800
 20024                           
 20025                           ;doprnt.c: 1346: width--;
 20026  001812  0628               	decf	i2printf@width,f,c
 20027  001814  A0D8               	btfss	status,0,c
 20028  001816  0629               	decf	i2printf@width+1,f,c
 20029  001818                     i2l5800:
 20030                           
 20031                           ;doprnt.c: 1381: if(width > c)
 20032  001818  0E80               	movlw	128
 20033  00181A  BE27               	btfsc	i2printf@c,7,c
 20034  00181C  0E7F               	movlw	127
 20035  00181E  6E19               	movwf	??i2_printf& (0+255),c
 20036  001820  5028               	movf	i2printf@width,w,c
 20037  001822  5C27               	subwf	i2printf@c,w,c
 20038  001824  5029               	movf	i2printf@width+1,w,c
 20039  001826  0A80               	xorlw	128
 20040  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 20041  00182A  B0D8               	btfsc	status,0,c
 20042  00182C  D007               	goto	i2l5804
 20043                           
 20044                           ;doprnt.c: 1382: width -= c;
 20045  00182E  5027               	movf	i2printf@c,w,c
 20046  001830  5E28               	subwf	i2printf@width,f,c
 20047  001832  0E00               	movlw	0
 20048  001834  BE27               	btfsc	i2printf@c,7,c
 20049  001836  0EFF               	movlw	255
 20050  001838  5A29               	subwfb	i2printf@width+1,f,c
 20051  00183A  D004               	goto	i2l5806
 20052  00183C                     i2l5804:
 20053                           
 20054                           ;doprnt.c: 1383: else
 20055                           ;doprnt.c: 1384: width = 0;
 20056  00183C  0E00               	movlw	0
 20057  00183E  6E29               	movwf	i2printf@width+1,c
 20058  001840  0E00               	movlw	0
 20059  001842  6E28               	movwf	i2printf@width,c
 20060  001844                     i2l5806:
 20061                           
 20062                           ;doprnt.c: 1387: if(flag & 0x04) {
 20063  001844  A426               	btfss	i2printf@flag,2,c
 20064  001846  D014               	goto	i2l5818
 20065                           
 20066                           ;doprnt.c: 1392: if(flag & 0x03)
 20067  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 20068  00184C  0E03               	movlw	3
 20069  00184E  1619               	andwf	??i2_printf,f,c
 20070  001850  B4D8               	btfsc	status,2,c
 20071  001852  D003               	goto	i2l5812
 20072                           
 20073                           ;doprnt.c: 1393: (putch('-') );
 20074  001854  0E2D               	movlw	45
 20075  001856  EC59  F024         	call	i2_putch
 20076  00185A                     i2l5812:
 20077                           
 20078                           ;doprnt.c: 1415: if(width)
 20079  00185A  5028               	movf	i2printf@width,w,c
 20080  00185C  1029               	iorwf	i2printf@width+1,w,c
 20081  00185E  B4D8               	btfsc	status,2,c
 20082  001860  D01E               	goto	i2l5828
 20083                           
 20084                           ;doprnt.c: 1417: (putch('0') );
 20085                           
 20086                           ;doprnt.c: 1416: do
 20087  001862  0E30               	movlw	48
 20088  001864  EC59  F024         	call	i2_putch
 20089                           
 20090                           ;doprnt.c: 1418: while(--width);
 20091  001868  0628               	decf	i2printf@width,f,c
 20092  00186A  A0D8               	btfss	status,0,c
 20093  00186C  0629               	decf	i2printf@width+1,f,c
 20094  00186E  D7F5               	goto	i2l5812
 20095  001870                     i2l5818:
 20096                           
 20097                           ;doprnt.c: 1422: {
 20098                           ;doprnt.c: 1424: if(width
 20099                           ;doprnt.c: 1428: )
 20100  001870  5028               	movf	i2printf@width,w,c
 20101  001872  1029               	iorwf	i2printf@width+1,w,c
 20102  001874  B4D8               	btfsc	status,2,c
 20103  001876  D00A               	goto	i2l5824
 20104  001878                     i2l5820:
 20105                           
 20106                           ;doprnt.c: 1430: (putch(' ') );
 20107  001878  0E20               	movlw	32
 20108  00187A  EC59  F024         	call	i2_putch
 20109                           
 20110                           ;doprnt.c: 1431: while(--width);
 20111  00187E  0628               	decf	i2printf@width,f,c
 20112  001880  A0D8               	btfss	status,0,c
 20113  001882  0629               	decf	i2printf@width+1,f,c
 20114  001884  5028               	movf	i2printf@width,w,c
 20115  001886  1029               	iorwf	i2printf@width+1,w,c
 20116  001888  A4D8               	btfss	status,2,c
 20117  00188A  D7F6               	goto	i2l5820
 20118  00188C                     i2l5824:
 20119                           
 20120                           ;doprnt.c: 1438: if(flag & 0x03)
 20121  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 20122  001890  0E03               	movlw	3
 20123  001892  1619               	andwf	??i2_printf,f,c
 20124  001894  B4D8               	btfsc	status,2,c
 20125  001896  D003               	goto	i2l5828
 20126                           
 20127                           ;doprnt.c: 1439: (putch('-') );
 20128  001898  0E2D               	movlw	45
 20129  00189A  EC59  F024         	call	i2_putch
 20130  00189E                     i2l5828:
 20131                           
 20132                           ;doprnt.c: 1469: }
 20133                           ;doprnt.c: 1472: prec = c;
 20134  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 20135                           
 20136                           ;doprnt.c: 1474: while(prec--) {
 20137  0018A2  D027               	goto	i2l5834
 20138  0018A4                     i2l5830:
 20139                           
 20140                           ;doprnt.c: 1478: {
 20141                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20142  0018A4  501D               	movf	i2printf@prec,w,c
 20143  0018A6  0D02               	mullw	2
 20144  0018A8  0E26               	movlw	low _dpowers
 20145  0018AA  24F3               	addwf	prodl,w,c
 20146  0018AC  6EF6               	movwf	tblptrl,c
 20147  0018AE  0EFB               	movlw	high _dpowers
 20148  0018B0  20F4               	addwfc	prodh,w,c
 20149  0018B2  6EF7               	movwf	tblptrh,c
 20150  0018B4                     	if	1	;There are 3 active tblptr bytes
 20151  0018B4  6AF8               	clrf	tblptru,c
 20152  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 20153  0018B8  22F8               	addwfc	tblptru,f,c
 20154  0018BA                     	endif
 20155  0018BA  0009               	tblrd		*+
 20156  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20157  0018C0  000A               	tblrd		*-
 20158  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20159  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20160  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20161  0018CE  ECA5  F020         	call	i2___lwdiv	;wreg free
 20162  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20163  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20164  0018DA  0E00               	movlw	0
 20165  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 20166  0018DE  0E0A               	movlw	10
 20167  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 20168  0018E2  EC64  F021         	call	i2___lwmod	;wreg free
 20169  0018E6  5001               	movf	?i2___lwmod,w,c
 20170  0018E8  0F30               	addlw	48
 20171  0018EA  6E27               	movwf	i2printf@c,c
 20172                           
 20173                           ;doprnt.c: 1523: }
 20174                           ;doprnt.c: 1524: (putch(c) );
 20175  0018EC  5027               	movf	i2printf@c,w,c
 20176  0018EE  EC59  F024         	call	i2_putch
 20177  0018F2                     i2l5834:
 20178  0018F2  061D               	decf	i2printf@prec,f,c
 20179  0018F4  281D               	incf	i2printf@prec,w,c
 20180  0018F6  A4D8               	btfss	status,2,c
 20181  0018F8  D7D5               	goto	i2l5830
 20182  0018FA                     i2l5836:
 20183  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 20184  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20185  001902  4A0D               	infsnz	i2printf@f,f,c
 20186  001904  2A0E               	incf	i2printf@f+1,f,c
 20187  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20188  001906  6AF8               	clrf	tblptru,c
 20189  001908                     	endif
 20190  001908                     	if	0	;tblptru may be non-zero
 20191  001908                     	endif
 20192  001908  0008               	tblrd		*
 20193  00190A  CFF5 F027          	movff	tablat,i2printf@c
 20194  00190E  5027               	movf	i2printf@c,w,c
 20195  001910  B4D8               	btfsc	status,2,c
 20196  001912  0012               	return	
 20197  001914  D64E               	goto	i2l5706
 20198  001916                     __end_ofi2_printf:
 20199                           	opt stack 0
 20200                           pclatu	equ	0xFFB
 20201                           pclath	equ	0xFFA
 20202                           tblptru	equ	0xFF8
 20203                           tblptrh	equ	0xFF7
 20204                           tblptrl	equ	0xFF6
 20205                           tablat	equ	0xFF5
 20206                           prodh	equ	0xFF4
 20207                           prodl	equ	0xFF3
 20208                           intcon	equ	0xFF2
 20209                           intcon2	equ	0xFF1
 20210                           intcon3	equ	0xFF0
 20211                           indf0	equ	0xFEF
 20212                           postinc0	equ	0xFEE
 20213                           fsr0h	equ	0xFEA
 20214                           fsr0l	equ	0xFE9
 20215                           wreg	equ	0xFE8
 20216                           postdec1	equ	0xFE5
 20217                           fsr1h	equ	0xFE2
 20218                           fsr1l	equ	0xFE1
 20219                           indf2	equ	0xFDF
 20220                           postinc2	equ	0xFDE
 20221                           postdec2	equ	0xFDD
 20222                           fsr2h	equ	0xFDA
 20223                           fsr2l	equ	0xFD9
 20224                           status	equ	0xFD8
 20225                           
 20226 ;; *************** function i2_putch *****************
 20227 ;; Defined at:
 20228 ;;		line 20 in file "lcd.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;  data            1    wreg     unsigned char 
 20231 ;; Auto vars:     Size  Location     Type
 20232 ;;  data            1    2[COMRAM] unsigned char 
 20233 ;; Return value:  Size  Location     Type
 20234 ;;                  1    wreg      void 
 20235 ;; Registers used:
 20236 ;;		wreg, status,2, status,0, cstack
 20237 ;; Tracked objects:
 20238 ;;		On entry : 0/0
 20239 ;;		On exit  : 0/0
 20240 ;;		Unchanged: 0/0
 20241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;Total ram usage:        1 bytes
 20247 ;; Hardware stack levels used:    1
 20248 ;; Hardware stack levels required when called:    1
 20249 ;; This function calls:
 20250 ;;		i2_lcdNibble
 20251 ;; This function is called by:
 20252 ;;		i2_printf
 20253 ;; This function uses a non-reentrant model
 20254 ;;
 20255                           
 20256                           	psect	text79
 20257  0048B2                     __ptext79:
 20258                           	opt stack 0
 20259  0048B2                     i2_putch:
 20260                           	opt stack 19
 20261                           
 20262                           ;incstack = 0
 20263                           ;i2putch@data stored from wreg
 20264  0048B2  6E03               	movwf	i2putch@data,c
 20265                           
 20266                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20267  0048B4  848C               	bsf	3980,2,c	;volatile
 20268                           
 20269                           ;lcd.c: 22: lcdNibble(data);
 20270  0048B6  5003               	movf	i2putch@data,w,c
 20271  0048B8  EC50  F020         	call	i2_lcdNibble
 20272  0048BC  0012               	return		;funcret
 20273  0048BE                     __end_ofi2_putch:
 20274                           	opt stack 0
 20275                           pclatu	equ	0xFFB
 20276                           pclath	equ	0xFFA
 20277                           tblptru	equ	0xFF8
 20278                           tblptrh	equ	0xFF7
 20279                           tblptrl	equ	0xFF6
 20280                           tablat	equ	0xFF5
 20281                           prodh	equ	0xFF4
 20282                           prodl	equ	0xFF3
 20283                           intcon	equ	0xFF2
 20284                           intcon2	equ	0xFF1
 20285                           intcon3	equ	0xFF0
 20286                           indf0	equ	0xFEF
 20287                           postinc0	equ	0xFEE
 20288                           fsr0h	equ	0xFEA
 20289                           fsr0l	equ	0xFE9
 20290                           wreg	equ	0xFE8
 20291                           postdec1	equ	0xFE5
 20292                           fsr1h	equ	0xFE2
 20293                           fsr1l	equ	0xFE1
 20294                           indf2	equ	0xFDF
 20295                           postinc2	equ	0xFDE
 20296                           postdec2	equ	0xFDD
 20297                           fsr2h	equ	0xFDA
 20298                           fsr2l	equ	0xFD9
 20299                           status	equ	0xFD8
 20300                           
 20301 ;; *************** function i2_isdigit *****************
 20302 ;; Defined at:
 20303 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20304 ;; Parameters:    Size  Location     Type
 20305 ;;  c               1    wreg     unsigned char 
 20306 ;; Auto vars:     Size  Location     Type
 20307 ;;  c               1    2[COMRAM] unsigned char 
 20308 ;; Return value:  Size  Location     Type
 20309 ;;		None               void
 20310 ;; Registers used:
 20311 ;;		wreg, status,2, status,0
 20312 ;; Tracked objects:
 20313 ;;		On entry : 0/0
 20314 ;;		On exit  : 0/0
 20315 ;;		Unchanged: 0/0
 20316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20320 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20321 ;;Total ram usage:        3 bytes
 20322 ;; Hardware stack levels used:    1
 20323 ;; This function calls:
 20324 ;;		Nothing
 20325 ;; This function is called by:
 20326 ;;		i2_printf
 20327 ;; This function uses a non-reentrant model
 20328 ;;
 20329                           
 20330                           	psect	text80
 20331  00480A                     __ptext80:
 20332                           	opt stack 0
 20333  00480A                     i2_isdigit:
 20334                           	opt stack 20
 20335                           
 20336                           ;incstack = 0
 20337                           ;i2isdigit@c stored from wreg
 20338  00480A  6E03               	movwf	i2isdigit@c,c
 20339  00480C  0E00               	movlw	0
 20340  00480E  6E02               	movwf	i2_isdigit$1946,c
 20341  004810  0E3A               	movlw	58
 20342  004812  6003               	cpfslt	i2isdigit@c,c
 20343  004814  D005               	goto	i2l5410
 20344  004816  0E2F               	movlw	47
 20345  004818  6403               	cpfsgt	i2isdigit@c,c
 20346  00481A  D002               	goto	i2l5410
 20347  00481C  0E01               	movlw	1
 20348  00481E  6E02               	movwf	i2_isdigit$1946,c
 20349  004820                     i2l5410:
 20350  004820  C002  F001         	movff	i2_isdigit$1946,??i2_isdigit
 20351  004824  3001               	rrcf	??i2_isdigit,w,c
 20352  004826  0012               	return	
 20353  004828                     __end_ofi2_isdigit:
 20354                           	opt stack 0
 20355                           pclatu	equ	0xFFB
 20356                           pclath	equ	0xFFA
 20357                           tblptru	equ	0xFF8
 20358                           tblptrh	equ	0xFF7
 20359                           tblptrl	equ	0xFF6
 20360                           tablat	equ	0xFF5
 20361                           prodh	equ	0xFF4
 20362                           prodl	equ	0xFF3
 20363                           intcon	equ	0xFF2
 20364                           intcon2	equ	0xFF1
 20365                           intcon3	equ	0xFF0
 20366                           indf0	equ	0xFEF
 20367                           postinc0	equ	0xFEE
 20368                           fsr0h	equ	0xFEA
 20369                           fsr0l	equ	0xFE9
 20370                           wreg	equ	0xFE8
 20371                           postdec1	equ	0xFE5
 20372                           fsr1h	equ	0xFE2
 20373                           fsr1l	equ	0xFE1
 20374                           indf2	equ	0xFDF
 20375                           postinc2	equ	0xFDE
 20376                           postdec2	equ	0xFDD
 20377                           fsr2h	equ	0xFDA
 20378                           fsr2l	equ	0xFD9
 20379                           status	equ	0xFD8
 20380                           
 20381 ;; *************** function i2___wmul *****************
 20382 ;; Defined at:
 20383 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20384 ;; Parameters:    Size  Location     Type
 20385 ;;  multiplier      2    0[COMRAM] unsigned int 
 20386 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20387 ;; Auto vars:     Size  Location     Type
 20388 ;;  __wmul          2    4[COMRAM] unsigned int 
 20389 ;; Return value:  Size  Location     Type
 20390 ;;                  2    0[COMRAM] unsigned int 
 20391 ;; Registers used:
 20392 ;;		wreg, status,2, status,0, prodl, prodh
 20393 ;; Tracked objects:
 20394 ;;		On entry : 0/0
 20395 ;;		On exit  : 0/0
 20396 ;;		Unchanged: 0/0
 20397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20398 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20401 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20402 ;;Total ram usage:        6 bytes
 20403 ;; Hardware stack levels used:    1
 20404 ;; This function calls:
 20405 ;;		Nothing
 20406 ;; This function is called by:
 20407 ;;		_printSortTimer
 20408 ;;		_retrieveLog
 20409 ;;		i2_printf
 20410 ;; This function uses a non-reentrant model
 20411 ;;
 20412                           
 20413                           	psect	text81
 20414  004756                     __ptext81:
 20415                           	opt stack 0
 20416  004756                     i2___wmul:
 20417                           	opt stack 20
 20418                           
 20419                           ;incstack = 0
 20420  004756  5001               	movf	i2___wmul@multiplier,w,c
 20421  004758  0203               	mulwf	i2___wmul@multiplicand,c
 20422  00475A  CFF3 F005          	movff	prodl,i2___wmul@product
 20423  00475E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20424  004762  5001               	movf	i2___wmul@multiplier,w,c
 20425  004764  0204               	mulwf	i2___wmul@multiplicand+1,c
 20426  004766  50F3               	movf	prodl,w,c
 20427  004768  2606               	addwf	i2___wmul@product+1,f,c
 20428  00476A  5002               	movf	i2___wmul@multiplier+1,w,c
 20429  00476C  0203               	mulwf	i2___wmul@multiplicand,c
 20430  00476E  50F3               	movf	prodl,w,c
 20431  004770  2606               	addwf	i2___wmul@product+1,f,c
 20432  004772  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20433  004776  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20434  00477A  0012               	return	
 20435  00477C                     __end_ofi2___wmul:
 20436                           	opt stack 0
 20437                           pclatu	equ	0xFFB
 20438                           pclath	equ	0xFFA
 20439                           tblptru	equ	0xFF8
 20440                           tblptrh	equ	0xFF7
 20441                           tblptrl	equ	0xFF6
 20442                           tablat	equ	0xFF5
 20443                           prodh	equ	0xFF4
 20444                           prodl	equ	0xFF3
 20445                           intcon	equ	0xFF2
 20446                           intcon2	equ	0xFF1
 20447                           intcon3	equ	0xFF0
 20448                           indf0	equ	0xFEF
 20449                           postinc0	equ	0xFEE
 20450                           fsr0h	equ	0xFEA
 20451                           fsr0l	equ	0xFE9
 20452                           wreg	equ	0xFE8
 20453                           postdec1	equ	0xFE5
 20454                           fsr1h	equ	0xFE2
 20455                           fsr1l	equ	0xFE1
 20456                           indf2	equ	0xFDF
 20457                           postinc2	equ	0xFDE
 20458                           postdec2	equ	0xFDD
 20459                           fsr2h	equ	0xFDA
 20460                           fsr2l	equ	0xFD9
 20461                           status	equ	0xFD8
 20462                           
 20463 ;; *************** function i2___lwmod *****************
 20464 ;; Defined at:
 20465 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20466 ;; Parameters:    Size  Location     Type
 20467 ;;  dividend        2    0[COMRAM] unsigned int 
 20468 ;;  divisor         2    2[COMRAM] unsigned int 
 20469 ;; Auto vars:     Size  Location     Type
 20470 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20471 ;; Return value:  Size  Location     Type
 20472 ;;                  2    0[COMRAM] unsigned int 
 20473 ;; Registers used:
 20474 ;;		wreg, status,2, status,0
 20475 ;; Tracked objects:
 20476 ;;		On entry : 0/0
 20477 ;;		On exit  : 0/0
 20478 ;;		Unchanged: 0/0
 20479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20483 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20484 ;;Total ram usage:        5 bytes
 20485 ;; Hardware stack levels used:    1
 20486 ;; This function calls:
 20487 ;;		Nothing
 20488 ;; This function is called by:
 20489 ;;		_printSortTimer
 20490 ;;		i2_printf
 20491 ;; This function uses a non-reentrant model
 20492 ;;
 20493                           
 20494                           	psect	text82
 20495  0042C8                     __ptext82:
 20496                           	opt stack 0
 20497  0042C8                     i2___lwmod:
 20498                           	opt stack 20
 20499                           
 20500                           ;incstack = 0
 20501  0042C8  5003               	movf	i2___lwmod@divisor,w,c
 20502  0042CA  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20503  0042CC  B4D8               	btfsc	status,2,c
 20504  0042CE  D018               	goto	i2l1719
 20505  0042D0  0E01               	movlw	1
 20506  0042D2  6E05               	movwf	i2___lwmod@counter,c
 20507  0042D4  D004               	goto	i2l5442
 20508  0042D6                     i2l5440:
 20509  0042D6  90D8               	bcf	status,0,c
 20510  0042D8  3603               	rlcf	i2___lwmod@divisor,f,c
 20511  0042DA  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20512  0042DC  2A05               	incf	i2___lwmod@counter,f,c
 20513  0042DE                     i2l5442:
 20514  0042DE  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20515  0042E0  D7FA               	goto	i2l5440
 20516  0042E2                     i2l5444:
 20517  0042E2  5003               	movf	i2___lwmod@divisor,w,c
 20518  0042E4  5C01               	subwf	i2___lwmod@dividend,w,c
 20519  0042E6  5004               	movf	i2___lwmod@divisor+1,w,c
 20520  0042E8  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20521  0042EA  A0D8               	btfss	status,0,c
 20522  0042EC  D004               	goto	i2l5448
 20523  0042EE  5003               	movf	i2___lwmod@divisor,w,c
 20524  0042F0  5E01               	subwf	i2___lwmod@dividend,f,c
 20525  0042F2  5004               	movf	i2___lwmod@divisor+1,w,c
 20526  0042F4  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20527  0042F6                     i2l5448:
 20528  0042F6  90D8               	bcf	status,0,c
 20529  0042F8  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20530  0042FA  3203               	rrcf	i2___lwmod@divisor,f,c
 20531  0042FC  2E05               	decfsz	i2___lwmod@counter,f,c
 20532  0042FE  D7F1               	goto	i2l5444
 20533  004300                     i2l1719:
 20534  004300  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20535  004304  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20536  004308  0012               	return		;funcret
 20537  00430A                     __end_ofi2___lwmod:
 20538                           	opt stack 0
 20539                           pclatu	equ	0xFFB
 20540                           pclath	equ	0xFFA
 20541                           tblptru	equ	0xFF8
 20542                           tblptrh	equ	0xFF7
 20543                           tblptrl	equ	0xFF6
 20544                           tablat	equ	0xFF5
 20545                           prodh	equ	0xFF4
 20546                           prodl	equ	0xFF3
 20547                           intcon	equ	0xFF2
 20548                           intcon2	equ	0xFF1
 20549                           intcon3	equ	0xFF0
 20550                           indf0	equ	0xFEF
 20551                           postinc0	equ	0xFEE
 20552                           fsr0h	equ	0xFEA
 20553                           fsr0l	equ	0xFE9
 20554                           wreg	equ	0xFE8
 20555                           postdec1	equ	0xFE5
 20556                           fsr1h	equ	0xFE2
 20557                           fsr1l	equ	0xFE1
 20558                           indf2	equ	0xFDF
 20559                           postinc2	equ	0xFDE
 20560                           postdec2	equ	0xFDD
 20561                           fsr2h	equ	0xFDA
 20562                           fsr2l	equ	0xFD9
 20563                           status	equ	0xFD8
 20564                           
 20565 ;; *************** function i2___lwdiv *****************
 20566 ;; Defined at:
 20567 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20568 ;; Parameters:    Size  Location     Type
 20569 ;;  dividend        2    5[COMRAM] unsigned int 
 20570 ;;  divisor         2    7[COMRAM] unsigned int 
 20571 ;; Auto vars:     Size  Location     Type
 20572 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20573 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20574 ;; Return value:  Size  Location     Type
 20575 ;;                  2    5[COMRAM] unsigned int 
 20576 ;; Registers used:
 20577 ;;		wreg, status,2, status,0
 20578 ;; Tracked objects:
 20579 ;;		On entry : 0/0
 20580 ;;		On exit  : 0/0
 20581 ;;		Unchanged: 0/0
 20582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20584 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20586 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20587 ;;Total ram usage:        7 bytes
 20588 ;; Hardware stack levels used:    1
 20589 ;; This function calls:
 20590 ;;		Nothing
 20591 ;; This function is called by:
 20592 ;;		_printSortTimer
 20593 ;;		i2_printf
 20594 ;; This function uses a non-reentrant model
 20595 ;;
 20596                           
 20597                           	psect	text83
 20598  00414A                     __ptext83:
 20599                           	opt stack 0
 20600  00414A                     i2___lwdiv:
 20601                           	opt stack 20
 20602                           
 20603                           ;incstack = 0
 20604  00414A  0E00               	movlw	0
 20605  00414C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20606  00414E  0E00               	movlw	0
 20607  004150  6E0A               	movwf	i2___lwdiv@quotient,c
 20608  004152  5008               	movf	i2___lwdiv@divisor,w,c
 20609  004154  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20610  004156  B4D8               	btfsc	status,2,c
 20611  004158  D01C               	goto	i2l1709
 20612  00415A  0E01               	movlw	1
 20613  00415C  6E0C               	movwf	i2___lwdiv@counter,c
 20614  00415E  D004               	goto	i2l5422
 20615  004160                     i2l5420:
 20616  004160  90D8               	bcf	status,0,c
 20617  004162  3608               	rlcf	i2___lwdiv@divisor,f,c
 20618  004164  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20619  004166  2A0C               	incf	i2___lwdiv@counter,f,c
 20620  004168                     i2l5422:
 20621  004168  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20622  00416A  D7FA               	goto	i2l5420
 20623  00416C                     i2l5424:
 20624  00416C  90D8               	bcf	status,0,c
 20625  00416E  360A               	rlcf	i2___lwdiv@quotient,f,c
 20626  004170  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20627  004172  5008               	movf	i2___lwdiv@divisor,w,c
 20628  004174  5C06               	subwf	i2___lwdiv@dividend,w,c
 20629  004176  5009               	movf	i2___lwdiv@divisor+1,w,c
 20630  004178  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20631  00417A  A0D8               	btfss	status,0,c
 20632  00417C  D005               	goto	i2l5432
 20633  00417E  5008               	movf	i2___lwdiv@divisor,w,c
 20634  004180  5E06               	subwf	i2___lwdiv@dividend,f,c
 20635  004182  5009               	movf	i2___lwdiv@divisor+1,w,c
 20636  004184  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20637  004186  800A               	bsf	i2___lwdiv@quotient,0,c
 20638  004188                     i2l5432:
 20639  004188  90D8               	bcf	status,0,c
 20640  00418A  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20641  00418C  3208               	rrcf	i2___lwdiv@divisor,f,c
 20642  00418E  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20643  004190  D7ED               	goto	i2l5424
 20644  004192                     i2l1709:
 20645  004192  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20646  004196  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20647  00419A  0012               	return		;funcret
 20648  00419C                     __end_ofi2___lwdiv:
 20649                           	opt stack 0
 20650                           pclatu	equ	0xFFB
 20651                           pclath	equ	0xFFA
 20652                           tblptru	equ	0xFF8
 20653                           tblptrh	equ	0xFF7
 20654                           tblptrl	equ	0xFF6
 20655                           tablat	equ	0xFF5
 20656                           prodh	equ	0xFF4
 20657                           prodl	equ	0xFF3
 20658                           intcon	equ	0xFF2
 20659                           intcon2	equ	0xFF1
 20660                           intcon3	equ	0xFF0
 20661                           indf0	equ	0xFEF
 20662                           postinc0	equ	0xFEE
 20663                           fsr0h	equ	0xFEA
 20664                           fsr0l	equ	0xFE9
 20665                           wreg	equ	0xFE8
 20666                           postdec1	equ	0xFE5
 20667                           fsr1h	equ	0xFE2
 20668                           fsr1l	equ	0xFE1
 20669                           indf2	equ	0xFDF
 20670                           postinc2	equ	0xFDE
 20671                           postdec2	equ	0xFDD
 20672                           fsr2h	equ	0xFDA
 20673                           fsr2l	equ	0xFD9
 20674                           status	equ	0xFD8
 20675                           
 20676 ;; *************** function i2_lcdInst *****************
 20677 ;; Defined at:
 20678 ;;		line 15 in file "lcd.c"
 20679 ;; Parameters:    Size  Location     Type
 20680 ;;  data            1    wreg     unsigned char 
 20681 ;; Auto vars:     Size  Location     Type
 20682 ;;  data            1    2[COMRAM] unsigned char 
 20683 ;; Return value:  Size  Location     Type
 20684 ;;                  1    wreg      void 
 20685 ;; Registers used:
 20686 ;;		wreg, status,2, status,0, cstack
 20687 ;; Tracked objects:
 20688 ;;		On entry : 0/0
 20689 ;;		On exit  : 0/0
 20690 ;;		Unchanged: 0/0
 20691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;Total ram usage:        1 bytes
 20697 ;; Hardware stack levels used:    1
 20698 ;; Hardware stack levels required when called:    1
 20699 ;; This function calls:
 20700 ;;		i2_lcdNibble
 20701 ;; This function is called by:
 20702 ;;		_change_state_to_menu_11
 20703 ;;		_change_state_to_menu_23
 20704 ;;		_change_state_to_logs_11
 20705 ;;		_change_state_to_logs_12
 20706 ;;		_change_state_to_logs_22
 20707 ;;		_change_state_to_logs_23
 20708 ;;		_change_state_to_logs_33
 20709 ;;		_change_state_to_logs_34
 20710 ;;		_printSortTimer
 20711 ;;		i2_change_state_to_menu_start
 20712 ;;		i2_change_state_to_menu_12
 20713 ;;		i2_change_state_to_menu_22
 20714 ;;		i2_printRTC
 20715 ;; This function uses a non-reentrant model
 20716 ;;
 20717                           
 20718                           	psect	text84
 20719  0048BE                     __ptext84:
 20720                           	opt stack 0
 20721  0048BE                     i2_lcdInst:
 20722                           	opt stack 19
 20723                           
 20724                           ;incstack = 0
 20725                           ;i2lcdInst@data stored from wreg
 20726  0048BE  6E03               	movwf	i2lcdInst@data,c
 20727                           
 20728                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20729  0048C0  948C               	bcf	3980,2,c	;volatile
 20730                           
 20731                           ;lcd.c: 17: lcdNibble(data);
 20732  0048C2  5003               	movf	i2lcdInst@data,w,c
 20733  0048C4  EC50  F020         	call	i2_lcdNibble
 20734  0048C8  0012               	return		;funcret
 20735  0048CA                     __end_ofi2_lcdInst:
 20736                           	opt stack 0
 20737                           pclatu	equ	0xFFB
 20738                           pclath	equ	0xFFA
 20739                           tblptru	equ	0xFF8
 20740                           tblptrh	equ	0xFF7
 20741                           tblptrl	equ	0xFF6
 20742                           tablat	equ	0xFF5
 20743                           prodh	equ	0xFF4
 20744                           prodl	equ	0xFF3
 20745                           intcon	equ	0xFF2
 20746                           intcon2	equ	0xFF1
 20747                           intcon3	equ	0xFF0
 20748                           indf0	equ	0xFEF
 20749                           postinc0	equ	0xFEE
 20750                           fsr0h	equ	0xFEA
 20751                           fsr0l	equ	0xFE9
 20752                           wreg	equ	0xFE8
 20753                           postdec1	equ	0xFE5
 20754                           fsr1h	equ	0xFE2
 20755                           fsr1l	equ	0xFE1
 20756                           indf2	equ	0xFDF
 20757                           postinc2	equ	0xFDE
 20758                           postdec2	equ	0xFDD
 20759                           fsr2h	equ	0xFDA
 20760                           fsr2l	equ	0xFD9
 20761                           status	equ	0xFD8
 20762                           
 20763 ;; *************** function i2_lcdNibble *****************
 20764 ;; Defined at:
 20765 ;;		line 25 in file "lcd.c"
 20766 ;; Parameters:    Size  Location     Type
 20767 ;;  data            1    wreg     unsigned char 
 20768 ;; Auto vars:     Size  Location     Type
 20769 ;;  data            1    1[COMRAM] unsigned char 
 20770 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20771 ;; Return value:  Size  Location     Type
 20772 ;;                  1    wreg      void 
 20773 ;; Registers used:
 20774 ;;		wreg, status,2, status,0
 20775 ;; Tracked objects:
 20776 ;;		On entry : 0/0
 20777 ;;		On exit  : 0/0
 20778 ;;		Unchanged: 0/0
 20779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;Total ram usage:        2 bytes
 20785 ;; Hardware stack levels used:    1
 20786 ;; This function calls:
 20787 ;;		Nothing
 20788 ;; This function is called by:
 20789 ;;		i2_lcdInst
 20790 ;;		i2_putch
 20791 ;; This function uses a non-reentrant model
 20792 ;;
 20793                           
 20794                           	psect	text85
 20795  0040A0                     __ptext85:
 20796                           	opt stack 0
 20797  0040A0                     i2_lcdNibble:
 20798                           	opt stack 19
 20799                           
 20800                           ;incstack = 0
 20801                           ;i2lcdNibble@data stored from wreg
 20802  0040A0  6E02               	movwf	i2lcdNibble@data,c
 20803                           
 20804                           ;lcd.c: 27: char temp = data & 0xF0;
 20805  0040A2  5002               	movf	i2lcdNibble@data,w,c
 20806  0040A4  0BF0               	andlw	240
 20807  0040A6  6E01               	movwf	i2lcdNibble@temp,c
 20808                           
 20809                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20810  0040A8  508C               	movf	3980,w,c	;volatile
 20811  0040AA  0B0F               	andlw	15
 20812  0040AC  6E8C               	movwf	3980,c	;volatile
 20813                           
 20814                           ;lcd.c: 29: LATD = temp | LATD;
 20815  0040AE  5001               	movf	i2lcdNibble@temp,w,c
 20816  0040B0  108C               	iorwf	3980,w,c	;volatile
 20817  0040B2  6E8C               	movwf	3980,c	;volatile
 20818                           
 20819                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20820  0040B4  868C               	bsf	3980,3,c	;volatile
 20821                           
 20822                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20823  0040B6  0E42               	movlw	66
 20824  0040B8                     i2u840_47:
 20825  0040B8  2EE8               	decfsz	wreg,f,c
 20826  0040BA  D7FE               	bra	i2u840_47
 20827  0040BC  D000               	nop2	
 20828                           
 20829                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20830  0040BE  968C               	bcf	3980,3,c	;volatile
 20831                           
 20832                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20833  0040C0  0E42               	movlw	66
 20834  0040C2                     i2u841_47:
 20835  0040C2  2EE8               	decfsz	wreg,f,c
 20836  0040C4  D7FE               	bra	i2u841_47
 20837  0040C6  D000               	nop2	
 20838                           
 20839                           ;lcd.c: 36: data = data << 4;
 20840  0040C8  3802               	swapf	i2lcdNibble@data,w,c
 20841  0040CA  0BF0               	andlw	240
 20842  0040CC  6E02               	movwf	i2lcdNibble@data,c
 20843                           
 20844                           ;lcd.c: 38: temp = data & 0xF0;
 20845  0040CE  5002               	movf	i2lcdNibble@data,w,c
 20846  0040D0  0BF0               	andlw	240
 20847  0040D2  6E01               	movwf	i2lcdNibble@temp,c
 20848                           
 20849                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20850  0040D4  508C               	movf	3980,w,c	;volatile
 20851  0040D6  0B0F               	andlw	15
 20852  0040D8  6E8C               	movwf	3980,c	;volatile
 20853                           
 20854                           ;lcd.c: 40: LATD = temp | LATD;
 20855  0040DA  5001               	movf	i2lcdNibble@temp,w,c
 20856  0040DC  108C               	iorwf	3980,w,c	;volatile
 20857  0040DE  6E8C               	movwf	3980,c	;volatile
 20858                           
 20859                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20860  0040E0  868C               	bsf	3980,3,c	;volatile
 20861                           
 20862                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20863  0040E2  0E42               	movlw	66
 20864  0040E4                     i2u842_47:
 20865  0040E4  2EE8               	decfsz	wreg,f,c
 20866  0040E6  D7FE               	bra	i2u842_47
 20867  0040E8  D000               	nop2	
 20868                           
 20869                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20870  0040EA  968C               	bcf	3980,3,c	;volatile
 20871                           
 20872                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20873  0040EC  0E42               	movlw	66
 20874  0040EE                     i2u843_47:
 20875  0040EE  2EE8               	decfsz	wreg,f,c
 20876  0040F0  D7FE               	bra	i2u843_47
 20877  0040F2  D000               	nop2	
 20878  0040F4  0012               	return		;funcret
 20879  0040F6                     __end_ofi2_lcdNibble:
 20880                           	opt stack 0
 20881                           pclatu	equ	0xFFB
 20882                           pclath	equ	0xFFA
 20883                           tblptru	equ	0xFF8
 20884                           tblptrh	equ	0xFF7
 20885                           tblptrl	equ	0xFF6
 20886                           tablat	equ	0xFF5
 20887                           prodh	equ	0xFF4
 20888                           prodl	equ	0xFF3
 20889                           intcon	equ	0xFF2
 20890                           intcon2	equ	0xFF1
 20891                           intcon3	equ	0xFF0
 20892                           indf0	equ	0xFEF
 20893                           postinc0	equ	0xFEE
 20894                           fsr0h	equ	0xFEA
 20895                           fsr0l	equ	0xFE9
 20896                           wreg	equ	0xFE8
 20897                           postdec1	equ	0xFE5
 20898                           fsr1h	equ	0xFE2
 20899                           fsr1l	equ	0xFE1
 20900                           indf2	equ	0xFDF
 20901                           postinc2	equ	0xFDE
 20902                           postdec2	equ	0xFDD
 20903                           fsr2h	equ	0xFDA
 20904                           fsr2l	equ	0xFD9
 20905                           status	equ	0xFD8
 20906                           
 20907 ;; *************** function i2_getRTC *****************
 20908 ;; Defined at:
 20909 ;;		line 44 in file "RTC.c"
 20910 ;; Parameters:    Size  Location     Type
 20911 ;;		None
 20912 ;; Auto vars:     Size  Location     Type
 20913 ;;  getRTC          2    3[COMRAM] int 
 20914 ;; Return value:  Size  Location     Type
 20915 ;;                  1    wreg      void 
 20916 ;; Registers used:
 20917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20918 ;; Tracked objects:
 20919 ;;		On entry : 0/0
 20920 ;;		On exit  : 0/0
 20921 ;;		Unchanged: 0/0
 20922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20927 ;;Total ram usage:        2 bytes
 20928 ;; Hardware stack levels used:    1
 20929 ;; Hardware stack levels required when called:    2
 20930 ;; This function calls:
 20931 ;;		i2_I2C_Master_Read
 20932 ;;		i2_I2C_Master_Start
 20933 ;;		i2_I2C_Master_Stop
 20934 ;;		i2_I2C_Master_Write
 20935 ;; This function is called by:
 20936 ;;		_printSortTimer
 20937 ;;		i2_printRTC
 20938 ;; This function uses a non-reentrant model
 20939 ;;
 20940                           
 20941                           	psect	text86
 20942  003DE6                     __ptext86:
 20943                           	opt stack 0
 20944  003DE6                     i2_getRTC:
 20945                           	opt stack 18
 20946                           
 20947                           ;RTC.c: 48: I2C_Master_Start();
 20948                           
 20949                           ;incstack = 0
 20950  003DE6  EC7F  F024         	call	i2_I2C_Master_Start	;wreg free
 20951                           
 20952                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20953  003DEA  0E00               	movlw	0
 20954  003DEC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20955  003DEE  0ED0               	movlw	208
 20956  003DF0  6E02               	movwf	i2I2C_Master_Write@d,c
 20957  003DF2  EC6A  F024         	call	i2_I2C_Master_Write	;wreg free
 20958                           
 20959                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20960  003DF6  0E00               	movlw	0
 20961  003DF8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20962  003DFA  0E00               	movlw	0
 20963  003DFC  6E02               	movwf	i2I2C_Master_Write@d,c
 20964  003DFE  EC6A  F024         	call	i2_I2C_Master_Write	;wreg free
 20965                           
 20966                           ;RTC.c: 51: I2C_Master_Stop();
 20967  003E02  EC7B  F024         	call	i2_I2C_Master_Stop	;wreg free
 20968                           
 20969                           ;RTC.c: 54: I2C_Master_Start();
 20970  003E06  EC7F  F024         	call	i2_I2C_Master_Start	;wreg free
 20971                           
 20972                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20973  003E0A  0E00               	movlw	0
 20974  003E0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20975  003E0E  0ED1               	movlw	209
 20976  003E10  6E02               	movwf	i2I2C_Master_Write@d,c
 20977  003E12  EC6A  F024         	call	i2_I2C_Master_Write	;wreg free
 20978                           
 20979                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20980  003E16  0E00               	movlw	0
 20981  003E18  6E05               	movwf	i2getRTC@i+1,c
 20982  003E1A  0E00               	movlw	0
 20983  003E1C  6E04               	movwf	i2getRTC@i,c
 20984  003E1E                     i2l5678:
 20985  003E1E  BE05               	btfsc	i2getRTC@i+1,7,c
 20986  003E20  D006               	goto	i2l5682
 20987  003E22  5005               	movf	i2getRTC@i+1,w,c
 20988  003E24  E111               	bnz	i2l5688
 20989  003E26  0E06               	movlw	6
 20990  003E28  5C04               	subwf	i2getRTC@i,w,c
 20991  003E2A  B0D8               	btfsc	status,0,c
 20992  003E2C  D00D               	goto	i2l5688
 20993  003E2E                     i2l5682:
 20994                           
 20995                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20996  003E2E  0E24               	movlw	low _time
 20997  003E30  2404               	addwf	i2getRTC@i,w,c
 20998  003E32  6ED9               	movwf	fsr2l,c
 20999  003E34  0E01               	movlw	high _time
 21000  003E36  2005               	addwfc	i2getRTC@i+1,w,c
 21001  003E38  6EDA               	movwf	fsr2h,c
 21002  003E3A  0E01               	movlw	1
 21003  003E3C  ECBE  F023         	call	i2_I2C_Master_Read
 21004  003E40  6EDF               	movwf	indf2,c
 21005  003E42  4A04               	infsnz	i2getRTC@i,f,c
 21006  003E44  2A05               	incf	i2getRTC@i+1,f,c
 21007  003E46  D7EB               	goto	i2l5678
 21008  003E48                     i2l5688:
 21009                           
 21010                           ;RTC.c: 58: }
 21011                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21012  003E48  0E00               	movlw	0
 21013  003E4A  ECBE  F023         	call	i2_I2C_Master_Read
 21014  003E4E  0101               	movlb	1	; () banked
 21015  003E50  6F2A               	movwf	(_time+6)& (0+255),b
 21016                           
 21017                           ;RTC.c: 60: I2C_Master_Stop();
 21018  003E52  EC7B  F024         	call	i2_I2C_Master_Stop	;wreg free
 21019  003E56  0012               	return		;funcret
 21020  003E58                     __end_ofi2_getRTC:
 21021                           	opt stack 0
 21022                           pclatu	equ	0xFFB
 21023                           pclath	equ	0xFFA
 21024                           tblptru	equ	0xFF8
 21025                           tblptrh	equ	0xFF7
 21026                           tblptrl	equ	0xFF6
 21027                           tablat	equ	0xFF5
 21028                           prodh	equ	0xFF4
 21029                           prodl	equ	0xFF3
 21030                           intcon	equ	0xFF2
 21031                           intcon2	equ	0xFF1
 21032                           intcon3	equ	0xFF0
 21033                           indf0	equ	0xFEF
 21034                           postinc0	equ	0xFEE
 21035                           fsr0h	equ	0xFEA
 21036                           fsr0l	equ	0xFE9
 21037                           wreg	equ	0xFE8
 21038                           postdec1	equ	0xFE5
 21039                           fsr1h	equ	0xFE2
 21040                           fsr1l	equ	0xFE1
 21041                           indf2	equ	0xFDF
 21042                           postinc2	equ	0xFDE
 21043                           postdec2	equ	0xFDD
 21044                           fsr2h	equ	0xFDA
 21045                           fsr2l	equ	0xFD9
 21046                           status	equ	0xFD8
 21047                           
 21048 ;; *************** function i2_I2C_Master_Write *****************
 21049 ;; Defined at:
 21050 ;;		line 49 in file "I2C.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;  d               2    1[COMRAM] unsigned int 
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;		None
 21055 ;; Return value:  Size  Location     Type
 21056 ;;                  1    wreg      void 
 21057 ;; Registers used:
 21058 ;;		wreg, status,2, status,0, cstack
 21059 ;; Tracked objects:
 21060 ;;		On entry : 0/0
 21061 ;;		On exit  : 0/0
 21062 ;;		Unchanged: 0/0
 21063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21064 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;Total ram usage:        2 bytes
 21069 ;; Hardware stack levels used:    1
 21070 ;; Hardware stack levels required when called:    1
 21071 ;; This function calls:
 21072 ;;		i2_I2C_Master_Wait
 21073 ;; This function is called by:
 21074 ;;		i2_getRTC
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           	psect	text87
 21079  0048D4                     __ptext87:
 21080                           	opt stack 0
 21081  0048D4                     i2_I2C_Master_Write:
 21082                           	opt stack 18
 21083                           
 21084                           ;I2C.c: 51: I2C_Master_Wait();
 21085                           
 21086                           ;incstack = 0
 21087  0048D4  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21088                           
 21089                           ;I2C.c: 52: SSPBUF = d;
 21090  0048D8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21091  0048DC  0012               	return		;funcret
 21092  0048DE                     __end_ofi2_I2C_Master_Write:
 21093                           	opt stack 0
 21094                           pclatu	equ	0xFFB
 21095                           pclath	equ	0xFFA
 21096                           tblptru	equ	0xFF8
 21097                           tblptrh	equ	0xFF7
 21098                           tblptrl	equ	0xFF6
 21099                           tablat	equ	0xFF5
 21100                           prodh	equ	0xFF4
 21101                           prodl	equ	0xFF3
 21102                           intcon	equ	0xFF2
 21103                           intcon2	equ	0xFF1
 21104                           intcon3	equ	0xFF0
 21105                           indf0	equ	0xFEF
 21106                           postinc0	equ	0xFEE
 21107                           fsr0h	equ	0xFEA
 21108                           fsr0l	equ	0xFE9
 21109                           wreg	equ	0xFE8
 21110                           postdec1	equ	0xFE5
 21111                           fsr1h	equ	0xFE2
 21112                           fsr1l	equ	0xFE1
 21113                           indf2	equ	0xFDF
 21114                           postinc2	equ	0xFDE
 21115                           postdec2	equ	0xFDD
 21116                           fsr2h	equ	0xFDA
 21117                           fsr2l	equ	0xFD9
 21118                           status	equ	0xFD8
 21119                           
 21120 ;; *************** function i2_I2C_Master_Stop *****************
 21121 ;; Defined at:
 21122 ;;		line 43 in file "I2C.c"
 21123 ;; Parameters:    Size  Location     Type
 21124 ;;		None
 21125 ;; Auto vars:     Size  Location     Type
 21126 ;;		None
 21127 ;; Return value:  Size  Location     Type
 21128 ;;                  1    wreg      void 
 21129 ;; Registers used:
 21130 ;;		wreg, status,2, status,0, cstack
 21131 ;; Tracked objects:
 21132 ;;		On entry : 0/0
 21133 ;;		On exit  : 0/0
 21134 ;;		Unchanged: 0/0
 21135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;Total ram usage:        0 bytes
 21141 ;; Hardware stack levels used:    1
 21142 ;; Hardware stack levels required when called:    1
 21143 ;; This function calls:
 21144 ;;		i2_I2C_Master_Wait
 21145 ;; This function is called by:
 21146 ;;		i2_getRTC
 21147 ;; This function uses a non-reentrant model
 21148 ;;
 21149                           
 21150                           	psect	text88
 21151  0048F6                     __ptext88:
 21152                           	opt stack 0
 21153  0048F6                     i2_I2C_Master_Stop:
 21154                           	opt stack 18
 21155                           
 21156                           ;I2C.c: 45: I2C_Master_Wait();
 21157                           
 21158                           ;incstack = 0
 21159  0048F6  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21160                           
 21161                           ;I2C.c: 46: PEN = 1;
 21162  0048FA  84C5               	bsf	4037,2,c	;volatile
 21163  0048FC  0012               	return		;funcret
 21164  0048FE                     __end_ofi2_I2C_Master_Stop:
 21165                           	opt stack 0
 21166                           pclatu	equ	0xFFB
 21167                           pclath	equ	0xFFA
 21168                           tblptru	equ	0xFF8
 21169                           tblptrh	equ	0xFF7
 21170                           tblptrl	equ	0xFF6
 21171                           tablat	equ	0xFF5
 21172                           prodh	equ	0xFF4
 21173                           prodl	equ	0xFF3
 21174                           intcon	equ	0xFF2
 21175                           intcon2	equ	0xFF1
 21176                           intcon3	equ	0xFF0
 21177                           indf0	equ	0xFEF
 21178                           postinc0	equ	0xFEE
 21179                           fsr0h	equ	0xFEA
 21180                           fsr0l	equ	0xFE9
 21181                           wreg	equ	0xFE8
 21182                           postdec1	equ	0xFE5
 21183                           fsr1h	equ	0xFE2
 21184                           fsr1l	equ	0xFE1
 21185                           indf2	equ	0xFDF
 21186                           postinc2	equ	0xFDE
 21187                           postdec2	equ	0xFDD
 21188                           fsr2h	equ	0xFDA
 21189                           fsr2l	equ	0xFD9
 21190                           status	equ	0xFD8
 21191                           
 21192 ;; *************** function i2_I2C_Master_Start *****************
 21193 ;; Defined at:
 21194 ;;		line 31 in file "I2C.c"
 21195 ;; Parameters:    Size  Location     Type
 21196 ;;		None
 21197 ;; Auto vars:     Size  Location     Type
 21198 ;;		None
 21199 ;; Return value:  Size  Location     Type
 21200 ;;                  1    wreg      void 
 21201 ;; Registers used:
 21202 ;;		wreg, status,2, status,0, cstack
 21203 ;; Tracked objects:
 21204 ;;		On entry : 0/0
 21205 ;;		On exit  : 0/0
 21206 ;;		Unchanged: 0/0
 21207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21212 ;;Total ram usage:        0 bytes
 21213 ;; Hardware stack levels used:    1
 21214 ;; Hardware stack levels required when called:    1
 21215 ;; This function calls:
 21216 ;;		i2_I2C_Master_Wait
 21217 ;; This function is called by:
 21218 ;;		i2_getRTC
 21219 ;; This function uses a non-reentrant model
 21220 ;;
 21221                           
 21222                           	psect	text89
 21223  0048FE                     __ptext89:
 21224                           	opt stack 0
 21225  0048FE                     i2_I2C_Master_Start:
 21226                           	opt stack 18
 21227                           
 21228                           ;I2C.c: 33: I2C_Master_Wait();
 21229                           
 21230                           ;incstack = 0
 21231  0048FE  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21232                           
 21233                           ;I2C.c: 34: SEN = 1;
 21234  004902  80C5               	bsf	4037,0,c	;volatile
 21235  004904  0012               	return		;funcret
 21236  004906                     __end_ofi2_I2C_Master_Start:
 21237                           	opt stack 0
 21238                           pclatu	equ	0xFFB
 21239                           pclath	equ	0xFFA
 21240                           tblptru	equ	0xFF8
 21241                           tblptrh	equ	0xFF7
 21242                           tblptrl	equ	0xFF6
 21243                           tablat	equ	0xFF5
 21244                           prodh	equ	0xFF4
 21245                           prodl	equ	0xFF3
 21246                           intcon	equ	0xFF2
 21247                           intcon2	equ	0xFF1
 21248                           intcon3	equ	0xFF0
 21249                           indf0	equ	0xFEF
 21250                           postinc0	equ	0xFEE
 21251                           fsr0h	equ	0xFEA
 21252                           fsr0l	equ	0xFE9
 21253                           wreg	equ	0xFE8
 21254                           postdec1	equ	0xFE5
 21255                           fsr1h	equ	0xFE2
 21256                           fsr1l	equ	0xFE1
 21257                           indf2	equ	0xFDF
 21258                           postinc2	equ	0xFDE
 21259                           postdec2	equ	0xFDD
 21260                           fsr2h	equ	0xFDA
 21261                           fsr2l	equ	0xFD9
 21262                           status	equ	0xFD8
 21263                           
 21264 ;; *************** function i2_I2C_Master_Read *****************
 21265 ;; Defined at:
 21266 ;;		line 55 in file "I2C.c"
 21267 ;; Parameters:    Size  Location     Type
 21268 ;;  a               1    wreg     unsigned char 
 21269 ;; Auto vars:     Size  Location     Type
 21270 ;;  a               1    1[COMRAM] unsigned char 
 21271 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21272 ;; Return value:  Size  Location     Type
 21273 ;;                  1    wreg      unsigned char 
 21274 ;; Registers used:
 21275 ;;		wreg, status,2, status,0, cstack
 21276 ;; Tracked objects:
 21277 ;;		On entry : 0/0
 21278 ;;		On exit  : 0/0
 21279 ;;		Unchanged: 0/0
 21280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21285 ;;Total ram usage:        2 bytes
 21286 ;; Hardware stack levels used:    1
 21287 ;; Hardware stack levels required when called:    1
 21288 ;; This function calls:
 21289 ;;		i2_I2C_Master_Wait
 21290 ;; This function is called by:
 21291 ;;		i2_getRTC
 21292 ;; This function uses a non-reentrant model
 21293 ;;
 21294                           
 21295                           	psect	text90
 21296  00477C                     __ptext90:
 21297                           	opt stack 0
 21298  00477C                     i2_I2C_Master_Read:
 21299                           	opt stack 18
 21300                           
 21301                           ;incstack = 0
 21302                           ;i2I2C_Master_Read@a stored from wreg
 21303  00477C  6E02               	movwf	i2I2C_Master_Read@a,c
 21304                           
 21305                           ;I2C.c: 57: unsigned char temp;
 21306                           ;I2C.c: 58: I2C_Master_Wait();
 21307  00477E  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21308                           
 21309                           ;I2C.c: 59: RCEN = 1;
 21310  004782  86C5               	bsf	4037,3,c	;volatile
 21311                           
 21312                           ;I2C.c: 60: I2C_Master_Wait();
 21313  004784  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21314                           
 21315                           ;I2C.c: 61: temp = SSPBUF;
 21316  004788  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21317                           
 21318                           ;I2C.c: 62: I2C_Master_Wait();
 21319  00478C  EC40  F024         	call	i2_I2C_Master_Wait	;wreg free
 21320                           
 21321                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21322  004790  5002               	movf	i2I2C_Master_Read@a,w,c
 21323  004792  A4D8               	btfss	status,2,c
 21324  004794  D002               	goto	i2u372_40
 21325  004796  8AC5               	bsf	4037,5,c	;volatile
 21326  004798  D001               	goto	i2l5386
 21327  00479A                     i2u372_40:
 21328  00479A  9AC5               	bcf	4037,5,c	;volatile
 21329  00479C                     i2l5386:
 21330                           
 21331                           ;I2C.c: 64: ACKEN = 1;
 21332  00479C  88C5               	bsf	4037,4,c	;volatile
 21333                           
 21334                           ;I2C.c: 65: return temp;
 21335  00479E  5003               	movf	i2I2C_Master_Read@temp,w,c
 21336  0047A0  0012               	return	
 21337  0047A2                     __end_ofi2_I2C_Master_Read:
 21338                           	opt stack 0
 21339                           pclatu	equ	0xFFB
 21340                           pclath	equ	0xFFA
 21341                           tblptru	equ	0xFF8
 21342                           tblptrh	equ	0xFF7
 21343                           tblptrl	equ	0xFF6
 21344                           tablat	equ	0xFF5
 21345                           prodh	equ	0xFF4
 21346                           prodl	equ	0xFF3
 21347                           intcon	equ	0xFF2
 21348                           intcon2	equ	0xFF1
 21349                           intcon3	equ	0xFF0
 21350                           indf0	equ	0xFEF
 21351                           postinc0	equ	0xFEE
 21352                           fsr0h	equ	0xFEA
 21353                           fsr0l	equ	0xFE9
 21354                           wreg	equ	0xFE8
 21355                           postdec1	equ	0xFE5
 21356                           fsr1h	equ	0xFE2
 21357                           fsr1l	equ	0xFE1
 21358                           indf2	equ	0xFDF
 21359                           postinc2	equ	0xFDE
 21360                           postdec2	equ	0xFDD
 21361                           fsr2h	equ	0xFDA
 21362                           fsr2l	equ	0xFD9
 21363                           status	equ	0xFD8
 21364                           
 21365 ;; *************** function i2_I2C_Master_Wait *****************
 21366 ;; Defined at:
 21367 ;;		line 26 in file "I2C.c"
 21368 ;; Parameters:    Size  Location     Type
 21369 ;;		None
 21370 ;; Auto vars:     Size  Location     Type
 21371 ;;		None
 21372 ;; Return value:  Size  Location     Type
 21373 ;;                  1    wreg      void 
 21374 ;; Registers used:
 21375 ;;		wreg, status,2, status,0
 21376 ;; Tracked objects:
 21377 ;;		On entry : 0/0
 21378 ;;		On exit  : 0/0
 21379 ;;		Unchanged: 0/0
 21380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21385 ;;Total ram usage:        1 bytes
 21386 ;; Hardware stack levels used:    1
 21387 ;; This function calls:
 21388 ;;		Nothing
 21389 ;; This function is called by:
 21390 ;;		i2_I2C_Master_Start
 21391 ;;		i2_I2C_Master_Stop
 21392 ;;		i2_I2C_Master_Write
 21393 ;;		i2_I2C_Master_Read
 21394 ;; This function uses a non-reentrant model
 21395 ;;
 21396                           
 21397                           	psect	text91
 21398  004880                     __ptext91:
 21399                           	opt stack 0
 21400  004880                     i2_I2C_Master_Wait:
 21401                           	opt stack 18
 21402  004880                     i2l66:
 21403  004880  B4C7               	btfsc	4039,2,c	;volatile
 21404  004882  D7FE               	goto	i2l66
 21405  004884  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21406  004888  0E1F               	movlw	31
 21407  00488A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21408  00488C  B4D8               	btfsc	status,2,c
 21409  00488E  0012               	return	
 21410  004890  D7F7               	goto	i2l66
 21411  004892                     __end_ofi2_I2C_Master_Wait:
 21412                           	opt stack 0
 21413                           pclatu	equ	0xFFB
 21414                           pclath	equ	0xFFA
 21415                           tblptru	equ	0xFF8
 21416                           tblptrh	equ	0xFF7
 21417                           tblptrl	equ	0xFF6
 21418                           tablat	equ	0xFF5
 21419                           prodh	equ	0xFF4
 21420                           prodl	equ	0xFF3
 21421                           intcon	equ	0xFF2
 21422                           intcon2	equ	0xFF1
 21423                           intcon3	equ	0xFF0
 21424                           indf0	equ	0xFEF
 21425                           postinc0	equ	0xFEE
 21426                           fsr0h	equ	0xFEA
 21427                           fsr0l	equ	0xFE9
 21428                           wreg	equ	0xFE8
 21429                           postdec1	equ	0xFE5
 21430                           fsr1h	equ	0xFE2
 21431                           fsr1l	equ	0xFE1
 21432                           indf2	equ	0xFDF
 21433                           postinc2	equ	0xFDE
 21434                           postdec2	equ	0xFDD
 21435                           fsr2h	equ	0xFDA
 21436                           fsr2l	equ	0xFD9
 21437                           status	equ	0xFD8
 21438                           pclatu	equ	0xFFB
 21439                           pclath	equ	0xFFA
 21440                           tblptru	equ	0xFF8
 21441                           tblptrh	equ	0xFF7
 21442                           tblptrl	equ	0xFF6
 21443                           tablat	equ	0xFF5
 21444                           prodh	equ	0xFF4
 21445                           prodl	equ	0xFF3
 21446                           intcon	equ	0xFF2
 21447                           intcon2	equ	0xFF1
 21448                           intcon3	equ	0xFF0
 21449                           indf0	equ	0xFEF
 21450                           postinc0	equ	0xFEE
 21451                           fsr0h	equ	0xFEA
 21452                           fsr0l	equ	0xFE9
 21453                           wreg	equ	0xFE8
 21454                           postdec1	equ	0xFE5
 21455                           fsr1h	equ	0xFE2
 21456                           fsr1l	equ	0xFE1
 21457                           indf2	equ	0xFDF
 21458                           postinc2	equ	0xFDE
 21459                           postdec2	equ	0xFDD
 21460                           fsr2h	equ	0xFDA
 21461                           fsr2l	equ	0xFD9
 21462                           status	equ	0xFD8
 21463                           
 21464                           	psect	rparam
 21465  0000                     pclatu	equ	0xFFB
 21466                           pclath	equ	0xFFA
 21467                           tblptru	equ	0xFF8
 21468                           tblptrh	equ	0xFF7
 21469                           tblptrl	equ	0xFF6
 21470                           tablat	equ	0xFF5
 21471                           prodh	equ	0xFF4
 21472                           prodl	equ	0xFF3
 21473                           intcon	equ	0xFF2
 21474                           intcon2	equ	0xFF1
 21475                           intcon3	equ	0xFF0
 21476                           indf0	equ	0xFEF
 21477                           postinc0	equ	0xFEE
 21478                           fsr0h	equ	0xFEA
 21479                           fsr0l	equ	0xFE9
 21480                           wreg	equ	0xFE8
 21481                           postdec1	equ	0xFE5
 21482                           fsr1h	equ	0xFE2
 21483                           fsr1l	equ	0xFE1
 21484                           indf2	equ	0xFDF
 21485                           postinc2	equ	0xFDE
 21486                           postdec2	equ	0xFDD
 21487                           fsr2h	equ	0xFDA
 21488                           fsr2l	equ	0xFD9
 21489                           status	equ	0xFD8
 21490                           
 21491                           	psect	temp
 21492  00007E                     btemp:
 21493                           	opt stack 0
 21494  00007E                     	ds	1
 21495  0000                     int$flags	set	btemp
 21496                           pclatu	equ	0xFFB
 21497                           pclath	equ	0xFFA
 21498                           tblptru	equ	0xFF8
 21499                           tblptrh	equ	0xFF7
 21500                           tblptrl	equ	0xFF6
 21501                           tablat	equ	0xFF5
 21502                           prodh	equ	0xFF4
 21503                           prodl	equ	0xFF3
 21504                           intcon	equ	0xFF2
 21505                           intcon2	equ	0xFF1
 21506                           intcon3	equ	0xFF0
 21507                           indf0	equ	0xFEF
 21508                           postinc0	equ	0xFEE
 21509                           fsr0h	equ	0xFEA
 21510                           fsr0l	equ	0xFE9
 21511                           wreg	equ	0xFE8
 21512                           postdec1	equ	0xFE5
 21513                           fsr1h	equ	0xFE2
 21514                           fsr1l	equ	0xFE1
 21515                           indf2	equ	0xFDF
 21516                           postinc2	equ	0xFDE
 21517                           postdec2	equ	0xFDD
 21518                           fsr2h	equ	0xFDA
 21519                           fsr2l	equ	0xFD9
 21520                           status	equ	0xFD8


Data Sizes:
    Strings     1231
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_117(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[10]), STR_113(CODE[13]), 
		 -> STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), 
		 -> STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), 
		 -> STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  178628
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20124
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15642
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4229
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10786
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10039
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12711
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   80949
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8455
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8343
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13815
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8368
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8481
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8343
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16801
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8208
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4229
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4229
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 17:01:32 2017

                                    _i 00E4                     i2_I2C_Master_Start 48FE  
                   i2_I2C_Master_Write 48D4                                     l66 486C  
                                   _ID 2DE4                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 2012                                    l730 2BC0  
                                  l750 2EFE                                    l751 2F18  
                                  l487 3758                                    l930 3526  
                                  l943 4838                                    l952 31CE  
                                  l796 3DAC                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 450A        __end_of_change_state_to_menu_12 437A  
      __end_of_change_state_to_menu_22 4342        __end_of_change_state_to_menu_23 44DA  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 45FA        __end_of_change_state_to_logs_12 45CA  
      __end_of_change_state_to_logs_22 459A        __end_of_change_state_to_logs_23 4684  
      __end_of_change_state_to_logs_33 456A        __end_of_change_state_to_logs_34 453A  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1101 0080                                   l1110 0240  
                                 l1111 028E                                   l1040 335C  
                                 l1105 0126                                   l1202 343A  
                                 l1043 337C                                   l1108 018C  
                                 l1109 01DA                                   l1135 05E8  
                                 l1063 3646                                   l1208 3486  
                                 l1152 0858                                   l1072 1CBC  
                                 l1225 3BE8                                   l1217 3BB4  
                                 l1066 364A                                   l1171 3C94  
                                 l1147 0782                                   l1075 1CC0  
                                 l1172 3C98                                   l1173 3C9C  
                                 l1165 3C74                                   l1262 13B6  
                                 l1174 3CA0                                   l1175 3CA4  
                                 l1192 3A98                                   l1177 3CE2  
                                 l1169 3C90                                   l1186 3A88  
                                 l1098 007C                                   l1195 3ABC  
                                 l1196 3AD6                                   l1709 3D66  
                                 l1719 3F80                                   l1656 38E6  
                                 l5300 464E                                   l6100 470C  
                                 l7000 0652                                   l6104 4722  
                                 l6032 3906                                   l7010 067A  
                                 l7002 0658                                   l6042 3992  
                                 l6220 3B1C                                   l6132 413E  
                                 l6036 391C                                   l5334 3D16  
                                 l5318 46FC                                   l5502 1290  
                                 l7102 0842                                   l7022 06BE  
                                 l7006 0662                                   l6230 3B5E  
                                 l5336 3D22                                   l5512 1308  
                                 l5504 129C                                   l5600 1588  
                                 l7112 0872                                   l7032 06E6  
                                 l6224 3B32                                   l5346 3D58  
                                 l5338 3D28                                   l5362 3F72  
                                 l5354 3F3C                                   l5522 135E  
                                 l5514 1314                                   l5506 12A2  
                                 l7210 345E                                   l7122 089A  
                                 l7114 0878                                   l7026 06D6  
                                 l7018 06B4                                   l6090 35C6  
                                 l6082 3598                                   l5356 3F48  
                                 l5540 13EE                                   l5524 1376  
                                 l5516 131A                                   l7212 3464  
                                 l7132 08C2                                   l7124 08A0  
                                 l7052 075A                                   l7044 0738  
                                 l7036 06FE                                   l7028 06DC  
                                 l5276 46C4                                   l8100 338E  
                                 l5612 3C2E                                   l5604 4384  
                                 l5358 3F4E                                   l5518 1332  
                                 l5470 117E                                   l7206 3448  
                                 l7118 0882                                   l7054 0760  
                                 l5278 46D6                                   l8110 33AC  
                                 l8102 3394                                   l5622 3C64  
                                 l5606 4390                                   l6094 35D0  
                                 l6078 358E                                   l6086 35B0  
                                 l5640 3D98                                   l5544 1408  
                                 l5528 137C                                   l5480 11AE  
                                 l7240 34EC                                   l7216 346E  
                                 l7128 08AA                                   l7048 0742  
                                 l8112 33B2                                   l8104 339A  
                                 l5616 3C44                                   l8040 30F4  
                                 l6512 2EC0                                   l5642 3DC2  
                                 l5570 14AE                                   l5546 140E  
                                 l5474 1192                                   l7154 3AA6  
                                 l7226 34AE                                   l7082 07DC  
                                 l7058 076A                                   l8106 33A0  
                                 l7410 3A18                                   l7402 39E2  
                                 l8042 3108                                   l5564 146C  
                                 l5476 11A4                                   l7236 34E2  
                                 l7092 0804                                   l8108 33A6  
                                 l8116 33B8                                   l7404 39EE  
                                 l7500 0A62                                   l6524 2EE8  
                                 l6508 2EB2                                   l6516 2ECE  
                                 l6436 2B7E                                   l5582 14E4  
                                 l5558 144A                                   l5494 125E  
                                 l5486 11E2                                   l7190 3BDC  
                                 l7086 07F4                                   l7078 07D2  
                                 l7350 379A                                   l7406 39F4  
                                 l7414 3A26                                   l5654 386A  
                                 l6550 2F88                                   _ADIE 007CEE  
                                 l5584 14F0                                   l5592 151E  
                                 l5576 14C8                                   l5568 14A4  
                                 l7248 3CA8                                   l7096 081C  
                                 l7088 07FA                                   l6704 1F1E  
                                 l7600 0DB8                                   l7504 0A6C  
                                 l5656 387A                                   l6552 2FA2  
                                 l6464 2C1E                                   l6448 2BE4  
                                 l5594 1524                                   l7194 3406  
                                 l7362 37CE                                   l7418 3A3A  
                                 l7514 0A92                                   l5666 38D4  
                                 l5658 3880                                   l8066 3188  
                                 l6546 2F54                                   l5588 150A  
                                 l6900 0444                                   l6708 1F54  
                                 l6636 1D10                                   l7364 37DA  
                                 l7356 37B0                                   l7700 0FCE  
                                 l7604 0DC2                                   l7532 0AEE  
                                 l7508 0A84                                   l6548 2F6E  
                                 l6556 2FBC                                   l8180 372C  
                                 l5598 157C                                   l6750 00F0  
                                 l6654 1DC8                                   l8078 32FE  
                                 l7382 3832                                   l7374 3810  
                                 l7366 37E0                                   l5870 203A  
                                 l5862 1F90                                   l7622 0E0E  
                                 l7614 0DEC                                   l7550 0B3A  
                                 l7542 0B18                                   l6558 2FEA  
                                 l8182 3732                                   l8174 3708  
                                 l6920 04B8                                   l6912 0496  
                                 l6904 045C                                   l6672 1E5A  
                                 l8096 3382                                   l5880 20D0  
                                 l5872 2058                                   l7704 0FE6  
                                 l7608 0DDA                                   l7536 0B06  
                                 l7528 0AE4                                   l7480 09F2  
                                 l7472 09D0                                   l8192 374E  
                                 l8184 3738                                   l8176 371E  
                                 l6930 04E0                                   l6922 04BE  
                                 l6842 032C                                   l6834 030A  
                                 l6754 00FA                                   l6666 1E18  
                                 l8098 3388                                   l7378 381E  
                                 l7394 39BE                                   l5890 2166  
                                 l5882 20EE                                   l5874 2076  
                                 l7730 106E                                   l7722 104C  
                                 l7650 0EF6                                   l7642 0ED4  
                                 l7618 0DF6                                   l7570 0BC8  
                                 l7546 0B22                                   l7466 09B8  
                                 l6498 2E80                                   l8194 3754  
                                 l6916 04A0                                   l6860 038E  
                                 l6852 0354                                   l6844 0332  
                                 l6748 00EA                                   l6692 1ED6  
                                 l6684 1EA6                                   l5884 210C  
                                 l5876 2094                                   l5868 201C  
                                 l7740 108A                                   l7660 0F12  
                                 l7580 0C5E                                   l7572 0BE6  
                                 l7484 0A04                                   l7476 09DA  
                                 l7468 09BE                                   l6942 0524  
                                 l6926 04C8                                   l6870 03B6  
                                 l6838 0314                                   l6758 0112  
                                 l7398 39CE                                   l5886 212A  
                                 l5878 20B2                                   l5894 2184  
                                 l7726 1056                                   l7646 0EDE  
                                 l7590 0CF4                                   l7582 0C7C  
                                 l7574 0C04                                   l7566 0B8C  
                                 l8198 375A                                   l6952 054C  
                                 l6864 0398                                   l6848 033C  
                                 l6696 1F0C                                   l5888 2148  
                                 l5896 21E2                                   l7744 10A2  
                                 l7736 1080                                   l7664 0F2A  
                                 l7656 0F08                                   l7584 0C9A  
                                 l7576 0C22                                   l7568 0BAA  
                                 l6946 053C                                   l6938 051A  
                                 l6890 041C                                   l6874 03C0  
                                 l7770 1122                                   l7762 1100  
                                 l7690 0FB2                                   l7682 0F90  
                                 l7586 0CB8                                   l7578 0C40  
                                 l7594 0D12                                   l7498 0A5C  
                                 l6972 05C0                                   l6964 059E  
                                 l6956 0564                                   l6948 0542  
                                 l6868 03B0                                   l7780 113E  
                                 l7588 0CD6                                   l7596 0D76  
                                 l6974 05C6                                   l6894 0434  
                                 l6886 0412                                   l6878 03D8  
                                 l7766 110A                                   l7686 0F9A  
                                 l6992 0630                                   l6968 05A8  
                                 l6896 043A                                   l7784 1156  
                                 l7776 1134                                   l7696 0FC4  
                                 l6978 05D0                                   l6996 063A  
                                 l7788 1162                                   STR_1 FBB9  
                                 STR_2 FF1B                                   STR_3 FBA7  
                                 STR_4 FE3E                                   STR_5 FBA7  
                                 STR_6 FDFC                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5100 1D54  
                                 u5130 1EFA                                   u3620 464C  
                                 u5230 0126                                   u5160 1F42  
                                 u5250 01DA                                   u5138 1EFE  
                                 u5090 1D52                                   u4530 2012  
                                 u4515 3FBA                                   _PEIE 007F96  
                                 u3900 12DC                                   u3820 422C  
                                 u5270 028E                                   u3830 422E  
                                 u3840 4278                                   u5168 1F46  
                                 u3841 4274                                   u3850 427A  
                                 u3907 12D2                                   u3940 1354  
                                 _RCEN 007E2B                                   u8007 074A  
                                 u7207 2E56                                   u8017 0772  
                                 u7217 2F02                                   u7137 2B0E  
                                 u3947 134A                                   u8107 3414  
                                 u8027 0794                                   u7307 35D8  
                                 u7227 2F0C                                   u7147 2BD4  
                                 u4940 2E14                                   u4860 2B8A  
                                 u8117 3476                                   u8037 07E4  
                                 u7317 428A                                   u7237 2F30  
                                 u7157 2C3E                                   u8207 19A4  
                                 u8127 3496                                   u8047 080C  
                                 u7407 0B54                                   u7327 42BE  
                                 u7247 4404                                   u7167 2C64  
                                 u4880 2BC0                                   u8217 19D8  
                                 u8137 34BC                                   u8057 085C  
                                 u7417 0DCA                                   u7337 08E2  
                                 u7257 2FF8                                   u7177 4114  
                                 i2l66 4880                                   u4970 2E70  
                                 u8307 1BAC                                   u8227 1A0C  
                                 u8147 34F4                                   u8067 0866  
                                 u7507 105E                                   u7427 0DFE  
                                 u7347 09E2                                   u7267 302C  
                                 u7187 4718                                   u4948 2E18  
                                 u8317 1BE0                                   u8237 1A40  
                                 u8157 3A52                                   u8077 088A  
                                 u7517 1092                                   u7437 0E28  
                                 u7357 0A1E                                   u7277 3060  
                                 u7197 2DFA                                   u4878 2B8E  
                                 u8327 1C14                                   u8247 1A74  
                                 u8167 3AC0                                   u8087 08B2  
                                 u7607 1D00                                   u7527 10BC  
                                 u7447 0EE6                                   u7367 0A74  
                                 u7287 3544                                   u8337 1C48  
                                 u8257 1AA8                                   u8177 3ACA  
                                 u8097 3B74                                   u7617 1D68  
                                 u7537 1112                                   u7457 0F1A  
                                 u7377 0AA0                                   u7297 35A0  
                                 u4978 2E74                                   u8347 3EE0  
                                 u8267 1AF4                                   u8187 1924  
                                 u7707 35F6                                   u7627 1DBC  
                                 u7547 1146                                   u7467 0F44  
                                 u7387 0AF6                                   u8357 3EEA  
                                 u8277 1B10                                   u8197 1970  
                                 u7717 363A                                   u7637 1DDC  
                                 u7557 330C                                   u7477 0FA2  
                                 u7397 0B2A                                   u6950 31CE  
                                 u8367 3F16                                   u8287 1B44  
                                 u7807 01EA                                   u7727 365C  
                                 u7647 1E0A                                   u7567 3350  
                                 u7487 0FD6                                   u8377 3F20  
                                 u8297 1B78                                   u7817 0250  
                                 u7737 002C                                   u7657 1E4E  
                                 u7577 1C6C                                   u7497 1000  
                                 u8387 4088                                   u7907 04A8  
                                 u7827 026E                                   u7747 0070  
                                 u7667 1E6C                                   u7587 1CB0  
                                 u7917 04D0                                   u7837 029E  
                                 u7757 0092                                   u7677 1E9A  
                                 u7597 1CD2                                   u7927 052C  
                                 u7847 031C                                   u7767 0102  
                                 u7687 1EB4                                   u7937 0554  
                                 u7857 0344                                   u7777 0136  
                                 u7697 46CC                                   u7947 05B0  
                                 u7867 03A0                                   u7787 019C  
                                 u7957 05D8                                   u7877 03C8  
                                 u7797 01BA                                   u7967 0642  
                                 u7887 0424                                   u7977 066A  
                                 u7897 044C                                   u7987 06C6  
                                 u7997 06EE                                   _RSEN 007E29  
                          _stopSignals 4840                                   _Test 32FE  
                                 _back 005B                                   _main 36BE  
                                 _down 0067                                   _keys FB15  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 47C6                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 48BE                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 24E6                            i2_lcdNibble 40A0  
                      __end_of_Loading 2C76                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 35E8  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 383C  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB30                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0D  
                                STR_15 FFD3                                  STR_23 FF0D  
                                STR_31 FDEB                                  STR_16 FFE3  
                                STR_24 FD52                                  STR_32 FD30  
                                STR_40 FCEC                                  STR_17 FFF3  
                                STR_33 FD41                                  STR_41 FCDB  
                                STR_25 FB70                                  STR_18 FFF7  
                                STR_34 FDDA                                  STR_50 FDB8  
                                STR_42 FD96                                  STR_26 FD63  
                                STR_43 FD96                                  STR_35 FDDA  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FB5D                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD74  
                                STR_36 FD1F                                  STR_44 FCFD  
                      __end_of___awmod 3A44                                  STR_45 FCEC  
                                STR_37 FD30                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FB6D  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEC6                                  STR_38 FDC9  
                                STR_46 FDA7                                  STR_47 FDA7  
                                STR_55 FFFB                                  STR_63 FB30  
                                STR_71 FEFF                                  STR_39 FD85  
                                STR_56 FFDF                                  STR_64 FF72  
                                STR_80 FE4E                                  STR_48 FD0E  
                                STR_72 FC75                                  STR_49 FCFD  
                                STR_57 FFD7                                  STR_81 FB6D  
                                STR_65 FF43                                  STR_73 FEE3  
                                STR_58 FFD3                                  STR_74 FF50  
                                STR_90 FEB7                                  STR_82 FE7B  
                                STR_66 FB48                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FED5  
                                STR_75 FEA8                                  STR_83 FE1E  
                                STR_84 FF7D                                  STR_76 FEF1  
                                STR_92 FC97                                  STR_68 FC86  
                                STR_85 FF7D                                  STR_77 FFAE  
                                STR_93 FF5C                                  STR_69 FCB9  
                                STR_78 FEFF                                  STR_86 FFA5  
                                STR_94 FCA8                                  STR_87 FFA5  
                                STR_95 FF67                                  STR_79 FF29  
                                STR_88 FF91                                  STR_96 FE99  
                                STR_89 FEFF                                  STR_97 FC20  
                                STR_98 FC0F                                  STR_99 FBED  
                                ?_sort 0001                        __end_of___lldiv 38F8  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3D70                        __end_of___lwmod 3F8A  
                                i2l257 24E2                                  i2l602 2574  
                                i2l861 2D3C                                  i2l943 4864  
                                i2l865 2D88                                  i2l867 2DA8  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1916  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 48B2  
                      __end_of_handler 2DE4                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 46DC                        __end_of_initLCD 42C8  
                       __CFG_EBTRB$OFF 000000                                  _debug 0065  
                           i2isdigit@c 0003                                  _getIR 40F6  
                      __end_of_loadRTC 3B66                        __end_of_readMAG 4282  
                      __end_of_dpowers FB30                                  _first 0073  
                                _enter 0069                        __end_of_isdigit 4706  
                                _input 007D                                  _putch 4892  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 477C                       __end_ofi2_getRTC 3E58  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1916                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 444A  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 419C  
                         __end_of_Test 3406                     __size_ofi2_lcdInst 000C  
                         __end_of_main 377E                           __end_of_keys FB26  
                         __end_of_sort 47E8                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC42                                 STR_101 FC53  
                               STR_110 FCCA                                 STR_102 FBCB  
                               STR_103 FE2E                                 STR_111 FB83  
                               STR_104 FBFE                                 STR_112 FB95  
                               STR_113 FF36                                 STR_105 FBDC  
                               STR_106 FBFE                                 STR_114 FF87  
                               _ADRESH 000FC4                                 STR_107 FE8A  
                               STR_115 FC31                                 STR_108 FE6C  
                               STR_116 FC64                                 _EEADRH 000FAA  
                               STR_117 FFB6                                 STR_109 FE5D  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 447A              i2_change_state_to_menu_22 444A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1262 1782  
                               i2l1709 4192                                 i2l1719 4300  
                               i2l6012 32A2                                 i2l6024 32E6  
                               i2l6016 32B2                                 i2l6200 2670  
                               i2l5410 4820                                 i2l5420 4160  
                               i2l6300 2984                                 i2l6204 2686  
                               i2l5422 4168                                 i2l6302 298A  
                               i2l6310 299C                                 i2l6206 26E0  
                               i2l5432 4188                                 i2l5424 416C  
                               i2l5440 42D6                                 i2l6304 2990  
                               i2l5442 42DE                                 i2l6330 29F8  
                               i2l6322 29E0                                 i2l6306 2996  
                               i2l5444 42E2                                 i2l6340 2A22  
                               i2l6180 2594                                 i2l6172 2512  
                               i2l5710 15C2                                 i2l6350 2A40  
                               i2l6190 2602                                 i2l6182 25AA  
                               i2l5448 42F6                                 i2l5800 1818  
                               i2l5712 15D0                                 i2l6352 2A44  
                               i2l6336 2A06                                 i2l6192 2618  
                               i2l6184 25C0                                 i2l5386 479C  
                               i2l5730 166A                                 i2l5722 1608  
                               i2l5706 15B2                                 i2l8130 2738  
                               i2l6370 2A74                                 i2l6346 2A2C  
                               i2l6282 2946                                 i2l6274 292C  
                               i2l6194 262E                                 i2l6186 25D6  
                               i2l6178 257E                                 i2l5820 1878  
                               i2l5812 185A                                 i2l5804 183C  
                               i2l5740 169C                                 i2l5716 15D6  
                               i2l6364 2A66                                 i2l6356 2A4E  
                               i2l6284 2956                                 i2l6292 2964  
                               i2l6196 2644                                 i2l6188 25EC  
                               i2l8212 2CF0                                 i2l5830 18A4  
                               i2l5806 1844                                 i2l5750 16F4  
                               i2l5742 16A0                                 i2l8126 2728  
                               i2l6382 2AAA                                 i2l6374 2A86  
                               i2l6286 295A                                 i2l6198 265A  
                               i2l8214 2CF4                                 i2l5824 188C  
                               i2l5760 1748                                 i2l5752 16FA  
                               i2l8136 2792                                 i2l6296 2978  
                               i2l6392 2AC6                                 i2l5840 4422  
                               i2l5682 3E2E                                 i2l5834 18F2  
                               i2l5818 1870                                 i2l5754 170C  
                               i2l5738 1692                                 i2l8146 2854  
                               i2l6386 2ABC                                 i2l6378 2A98  
                               i2l6298 297E                                 i2l5842 442A  
                               i2l8250 2D5A                                 i2l5828 189E  
                               i2l5780 17C8                                 i2l5748 16EA  
                               i2l5764 174C                                 i2l5836 18FA  
                               i2l8252 2D5C                                 i2l8228 2D10  
                               i2l5678 3E1E                                 i2l5782 17CC  
                               i2l5758 1736                                 i2l5688 3E48  
                               i2l5776 17B0                                 i2l5794 17FE  
                               i2l7802 2256                                 i2l8274 2DA6  
                               i2l8540 24B8                                 i2l7900 23B8  
                               i2l7820 2294                                 i2l7812 2278  
                               i2l7804 225C                                 i2l8542 24D4  
                               i2l7920 2406                                 i2l7912 23EA  
                               i2l7904 23C6                                 i2l7840 22CE  
                               i2l7832 22B0                                 i2l7816 2286  
                               i2l7808 226A                                 i2l8546 29B4  
                               i2l8538 2496                                 i2l8548 29D0  
                               i2l7940 2454                                 i2l7932 2438  
                               i2l7924 2414                                 i2l7916 23F8  
                               i2l7908 23D4                                 i2l7860 2314  
                               i2l7852 22F8                                 i2l7844 22DC  
                               i2l7836 22BE                                 i2l7828 22A2  
                               i2l7950 2478                                 i2l7944 246A  
                               i2l7936 2446                                 i2l7928 242A  
                               i2l7880 236A                                 i2l7872 2346  
                               i2l7864 232A                                 i2l7856 2306  
                               i2l7848 22EA                                 i2l7892 2394  
                               i2l7884 2378                                 i2l7876 2354  
                               i2l7868 2338                                 i2l7896 23AA  
                               i2l7888 2386                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 472E                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 47C6                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 30A8  
                               ___wmul 43B0                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 43E6  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3BEE                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 480A  
                               _initUI 45FA                                 _readIR 41EA  
                               _logRun 30A8                                 clear_0 41C2  
                               clear_1 41CE                                 clear_2 41DA  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3A44                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 437A  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4756  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 472E                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 419C  
                     __end_of_printRTC 2226                           __mediumconst FB14  
                    __end_ofi2___lwmod 430A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 36BE  
                    __end_ofi2_lcdInst 48CA                      __end_ofi2_isdigit 4828  
                           __accesstop 0080                __end_of__initialization 41E0  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4856                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4908  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 48DE                          __end_of_getIR 414A  
                          i2printRTC@i 0041                          _initSortTimer 38F8  
          __end_of_updateServoPosition 3DE6                          __end_of_putch 48A2  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2F4A                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 46B0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4684                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3504  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0348                      __end_of_PortTests 3CF8  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2299 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 48B2                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 015E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3F28                                _Loading 2AF4  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 377E  
                              ___awmod 39A2                             _initServos 4046  
                              ___lldiv 383C                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3CF8  
                              ___lwmod 3F28                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 419C                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3E58  
                              _lcdInst 48A2                                _handler 0008  
                              __ptext0 36BE                                __ptext1 4840  
                              __ptext2 47C6                                __ptext3 2AF4  
                              __ptext4 38F8                                __ptext5 3E58  
                              __ptext6 40F6                                __ptext7 41EA  
                              __ptext8 4706                                __ptext9 2DE4  
                      __size_of_printf 0438                                _readADC 46B0  
                      __size_of_strcpy 0036                                _initLCD 4282  
                              _cur_can 012B                                _loadRTC 3ADA  
                              _readMAG 4236                                _dpowers FB26  
                   actuatorTest@i_1650 00B2                     actuatorTest@i_1651 00B3  
                   actuatorTest@i_1660 00B9                     actuatorTest@i_1644 00AE  
                   actuatorTest@i_1653 00B4                     actuatorTest@i_1645 00AF  
                   actuatorTest@i_1637 00AD                     actuatorTest@i_1670 00BF  
                   actuatorTest@i_1654 00B5                     actuatorTest@i_1663 00BA  
                   actuatorTest@i_1647 00B0                     actuatorTest@i_1664 00BB  
                   actuatorTest@i_1656 00B6                     actuatorTest@i_1648 00B1  
                   actuatorTest@i_1673 00C0                     actuatorTest@i_1657 00B7  
                   actuatorTest@i_1674 00C1                     actuatorTest@i_1666 00BC  
                   actuatorTest@i_1667 00BD                     actuatorTest@i_1659 00B8  
                   actuatorTest@i_1676 00C2                     actuatorTest@i_1677 00C3  
                   actuatorTest@i_1669 00BE                                _isdigit 46DC  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2F4A  
                       __pintcode_body 2C76                   end_of_initialization 41E0  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                   SolenoidTestA5@i_1690 00AF  
                 SolenoidTestA5@i_1692 00B0                                int_func 2C76  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3EC0                             _sensorTest 1C5E  
              __size_of_SolenoidTestA5 00FE                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2AF4                           ??_BothServos 00AB  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 4046  
                           _updateMenu 2226                      i2_I2C_Master_Read 477C  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4880  
                    i2_I2C_Master_Stop 48F6                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 414A  
                            i2___lwmod 42C8                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 271C                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 48BE                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 480A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C5E  
                  __end_of_EEPROM_read 4840                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 43E6  
                       __end_of_getMAG 4418                         __end_of_getRTC 3C74  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4628  
                       __end_of_readIR 4236                         __end_of_logRun 31E4  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 43B0  
            __end_ofi2_I2C_Master_Read 47A2              __end_ofi2_I2C_Master_Wait 4892  
                         i2printf@prec 001D                    start_initialization 419C  
            __end_ofi2_I2C_Master_Stop 48FE                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1328 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3C74                            ?_sensorTest 0001  
                          __pdataBANK1 012F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2419 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1946 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 4828                     __end_of_PortTestA5 3ADA  
                     _I2C_Master_Start 48EE                              _f_lastCan 0071  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 48CA                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 3BEE                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB14                              _lcdNibble 3EC0  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                         _SolenoidTestA5 3406  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00E0                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 35E8  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0166  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4906  
           __end_ofi2_I2C_Master_Write 48DE                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 290E  
                          ??i2_isdigit 0001                               i2u431_40 172E  
                             i2u431_47 1724                               i2u427_40 16CE  
                             _PIR2bits 000FA1                               i2u427_47 16C4  
                             i2u372_40 479A                               i2u700_40 284E  
                             i2u470_40 2574                               i2u840_47 40B8  
                             i2u841_47 40C2                               i2u842_47 40E4  
                             i2u843_47 40EE                               i2u839_47 294C  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 3504  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4756  
                        lcdNibble@data 0081                               i2_getRTC 3DE6  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 15A8                               i2_strcpy 4418  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 41B0                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 486C                            _count_total 00FE  
                     ??_initGlobalVars 0080                        SolenoidTestA5@i 00AD  
                             __Hrparam 0000                       __size_of_Loading 0182  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                        ?_SolenoidTestA5 0001  
                __end_of_initSortTimer 39A2                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 44DA  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4342  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 430A  
              _change_state_to_menu_23 44AA                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 45CA                _change_state_to_logs_12 459A  
              _change_state_to_logs_22 456A                _change_state_to_logs_23 4656  
              _change_state_to_logs_33 453A                _change_state_to_logs_34 450A  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2DDC                             _EEPROMTest 4906  
                      _I2C_Master_Init 3F8A                       __size_of_readADC 002C  
                      _I2C_Master_Read 4628                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 486C  
                      _I2C_Master_Stop 48E6                       __size_of_isdigit 002A  
                             _delay_ms 4706                         _printSortTimer 271C  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 32FE                               __ptext10 43E6  
                             __ptext11 2F4A                               __ptext20 4684  
                             __ptext12 3FEA                               __ptext21 47E8  
                             __ptext13 30A8                               __ptext30 4628  
                             __ptext22 4282                               __ptext14 3504  
                             __ptext31 486C                               __ptext23 08CA  
                             __ptext15 4828                               __ptext40 35E8  
                             __ptext32 430A                               __ptext24 1F5C  
                             __ptext16 45FA                               __ptext41 0012  
                             __ptext33 4342                               __ptext25 437A  
                             __ptext17 3ADA                               __ptext50 46DC  
                             __ptext42 3B66                               __ptext34 39A2  
                             __ptext26 3BEE                               __ptext18 3F8A  
                             __ptext51 43B0                               __ptext43 3406  
                             __ptext35 377E                               __ptext27 48CA  
                             __ptext19 383C                               __ptext60 472E  
                             __ptext52 3F28                               __ptext44 3C74  
                             __ptext36 32FE                               __ptext28 48E6  
                             __ptext61 24E6                               __ptext53 3CF8  
                             __ptext45 3A44                               __ptext37 1C5E  
                             __ptext29 48EE                               __ptext70 4656  
                             __ptext62 4418                               __ptext54 48A2  
                             __ptext46 4906                               __ptext38 4236  
                             __ptext71 456A                               __ptext63 290E  
                             __ptext55 3EC0                               __ptext47 1916  
                             __ptext39 46B0                               __ptext80 480A  
                             __ptext72 459A                               __ptext64 444A  
                             __ptext56 4046                               __ptext48 1170  
                             __ptext81 4756                               __ptext73 45CA  
                             __ptext65 447A                               __ptext57 3D70  
                             __ptext49 4892                               __ptext90 477C  
                             __ptext82 42C8                               __ptext74 47A2  
                             __ptext66 44AA                               __ptext91 4880  
                             __ptext83 414A                               __ptext75 31E4  
                             __ptext67 44DA                               __ptext59 2226  
                             __ptext84 48BE                               __ptext76 4856  
                             __ptext68 450A                               __ptext85 40A0  
                             __ptext77 271C                               __ptext69 453A  
                             __ptext86 3DE6                               __ptext78 15A8  
                             __ptext87 48D4                               __ptext79 48B2  
                             __ptext88 48F6                               __ptext89 48FE  
                             _dispLogs 47A2                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1946 0002  
                   __end_of_initServos 40A0                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 47E8  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3D70                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F5C  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 44AA      __end_ofi2_change_state_to_menu_22 447A  
                             loadRTC@i 0096                 __end_of_printSortTimer 290E  
                            putch@data 0082               __end_of_I2C_Master_Start 48F6  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 48D4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3B66                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F5C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4856  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 24E6                __end_of_I2C_Master_Init 3FEA  
              __end_of_I2C_Master_Read 4656                __end_of_I2C_Master_Wait 4880  
              __end_of_I2C_Master_Stop 48EE                            lcdInst@data 0082  
                        printRTC@F3216 0133                           retrieveLog@i 000E  
                          _retrieveLog 31E4                    __end_ofi2_lcdNibble 40F6  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012D                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3FEA  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
