

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 16:15:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   110                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   111                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   112  0000                     
   113                           ; Version 1.40
   114                           ; Generated 01/12/2016 GMT
   115                           ; 
   116                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC18F4620 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     
   148                           	psect	idataBANK1
   149  00516C                     __pidataBANK1:
   150                           	opt stack 0
   151                           
   152                           ;initializer for UI@F3228
   153  00516C  4D                 	db	77
   154  00516D  4D                 	db	77
   155  00516E  4D                 	db	77
   156  00516F  00                 	db	0
   157                           
   158                           ;initializer for printRTC@F3219
   159  005170  4D                 	db	77
   160  005171  4D                 	db	77
   161  005172  4D                 	db	77
   162  005173  00                 	db	0
   163                           
   164                           	psect	mediumconst
   165  00FAEE                     __pmediumconst:
   166                           	opt stack 0
   167  00FAEE  00                 	db	0
   168  00FAEF                     _keys:
   169                           	opt stack 0
   170  00FAEF  31                 	db	49
   171  00FAF0  32                 	db	50
   172  00FAF1  33                 	db	51
   173  00FAF2  41                 	db	65
   174  00FAF3  34                 	db	52
   175  00FAF4  35                 	db	53
   176  00FAF5  36                 	db	54
   177  00FAF6  42                 	db	66
   178  00FAF7  37                 	db	55
   179  00FAF8  38                 	db	56
   180  00FAF9  39                 	db	57
   181  00FAFA  43                 	db	67
   182  00FAFB  2A                 	db	42
   183  00FAFC  30                 	db	48
   184  00FAFD  23                 	db	35
   185  00FAFE  44                 	db	68
   186  00FAFF  00                 	db	0
   187  00FB00                     __end_of_keys:
   188                           	opt stack 0
   189  00FB00                     _dpowers:
   190                           	opt stack 0
   191  00FB00  0001               	dw	1
   192  00FB02  000A               	dw	10
   193  00FB04  0064               	dw	100
   194  00FB06  03E8               	dw	1000
   195  00FB08  2710               	dw	10000
   196  00FB0A                     __end_of_dpowers:
   197                           	opt stack 0
   198  0000                     _ADCON0	set	4034
   199  0000                     _ADCON0bits	set	4034
   200  0000                     _ADCON1	set	4033
   201  0000                     _ADCON2	set	4032
   202  0000                     _ADRESH	set	4036
   203  0000                     _ADRESL	set	4035
   204  0000                     _CMCONbits	set	4020
   205  0000                     _CVRCON	set	4021
   206  0000                     _EEADR	set	4009
   207  0000                     _EEADRH	set	4010
   208  0000                     _EECON1bits	set	4006
   209  0000                     _EECON2	set	4007
   210  0000                     _EEDATA	set	4008
   211  0000                     _INTCONbits	set	4082
   212  0000                     _LATA	set	3977
   213  0000                     _LATAbits	set	3977
   214  0000                     _LATB	set	3978
   215  0000                     _LATC	set	3979
   216  0000                     _LATCbits	set	3979
   217  0000                     _LATD	set	3980
   218  0000                     _LATDbits	set	3980
   219  0000                     _LATE	set	3981
   220  0000                     _LATEbits	set	3981
   221  0000                     _OSCCON	set	4051
   222  0000                     _OSCTUNEbits	set	3995
   223  0000                     _PIR2bits	set	4001
   224  0000                     _PORTAbits	set	3968
   225  0000                     _PORTB	set	3969
   226  0000                     _PORTBbits	set	3969
   227  0000                     _SSPADD	set	4040
   228  0000                     _SSPBUF	set	4041
   229  0000                     _SSPCON1	set	4038
   230  0000                     _SSPCON2	set	4037
   231  0000                     _SSPSTAT	set	4039
   232  0000                     _T0CON	set	4053
   233  0000                     _T1CON	set	4045
   234  0000                     _T3CON	set	4017
   235  0000                     _TMR0H	set	4055
   236  0000                     _TMR0L	set	4054
   237  0000                     _TMR1H	set	4047
   238  0000                     _TMR1L	set	4046
   239  0000                     _TMR3H	set	4019
   240  0000                     _TMR3L	set	4018
   241  0000                     _TRISA	set	3986
   242  0000                     _TRISB	set	3987
   243  0000                     _TRISC	set	3988
   244  0000                     _TRISD	set	3989
   245  0000                     _TRISE	set	3990
   246  0000                     _ACKDT	set	32301
   247  0000                     _ACKEN	set	32300
   248  0000                     _ADIE	set	31982
   249  0000                     _INT1IE	set	32643
   250  0000                     _INT1IF	set	32640
   251  0000                     _PEIE	set	32662
   252  0000                     _PEN	set	32298
   253  0000                     _RCEN	set	32299
   254  0000                     _RSEN	set	32297
   255  0000                     _SEN	set	32296
   256  0000                     _TMR0IE	set	32661
   257  0000                     _TMR0IF	set	32658
   258  0000                     _TMR0ON	set	32431
   259  0000                     _TMR1IE	set	31976
   260  0000                     _TMR1IF	set	31984
   261  0000                     _TMR1ON	set	32360
   262  0000                     _TMR2IE	set	31977
   263  0000                     _TMR3IE	set	32001
   264  0000                     _TMR3IF	set	32009
   265  0000                     _TMR3ON	set	32136
   266  0000                     _TRISC3	set	31907
   267  0000                     _TRISC4	set	31908
   268  0000                     _nRBPU	set	32655
   269  00FB0A                     STR_21:
   270  00FB0A  25                 	db	37
   271  00FB0B  30                 	db	48	;'0'
   272  00FB0C  32                 	db	50	;'2'
   273  00FB0D  64                 	db	100	;'d'
   274  00FB0E  25                 	db	37
   275  00FB0F  73                 	db	115	;'s'
   276  00FB10  20                 	db	32
   277  00FB11  7C                 	db	124
   278  00FB12  20                 	db	32
   279  00FB13  25                 	db	37
   280  00FB14  30                 	db	48	;'0'
   281  00FB15  32                 	db	50	;'2'
   282  00FB16  64                 	db	100	;'d'
   283  00FB17  3A                 	db	58	;':'
   284  00FB18  25                 	db	37
   285  00FB19  30                 	db	48	;'0'
   286  00FB1A  32                 	db	50	;'2'
   287  00FB1B  64                 	db	100	;'d'
   288  00FB1C  3A                 	db	58	;':'
   289  00FB1D  25                 	db	37
   290  00FB1E  30                 	db	48	;'0'
   291  00FB1F  32                 	db	50	;'2'
   292  00FB20  64                 	db	100	;'d'
   293  00FB21  00                 	db	0
   294  00FB22                     STR_66:
   295  00FB22  28                 	db	40
   296  00FB23  64                 	db	100	;'d'
   297  00FB24  61                 	db	97	;'a'
   298  00FB25  74                 	db	116	;'t'
   299  00FB26  61                 	db	97	;'a'
   300  00FB27  3A                 	db	58	;':'
   301  00FB28  20                 	db	32
   302  00FB29  25                 	db	37
   303  00FB2A  75                 	db	117	;'u'
   304  00FB2B  2C                 	db	44
   305  00FB2C  20                 	db	32
   306  00FB2D  61                 	db	97	;'a'
   307  00FB2E  64                 	db	100	;'d'
   308  00FB2F  64                 	db	100	;'d'
   309  00FB30  72                 	db	114	;'r'
   310  00FB31  3A                 	db	58	;':'
   311  00FB32  20                 	db	32
   312  00FB33  25                 	db	37
   313  00FB34  75                 	db	117	;'u'
   314  00FB35  29                 	db	41
   315  00FB36  00                 	db	0
   316  00FB37                     STR_111:
   317  00FB37  44                 	db	68	;'D'
   318  00FB38  20                 	db	32
   319  00FB39  57                 	db	87	;'W'
   320  00FB3A  49                 	db	73	;'I'
   321  00FB3B  4C                 	db	76	;'L'
   322  00FB3C  4C                 	db	76	;'L'
   323  00FB3D  20                 	db	32
   324  00FB3E  52                 	db	82	;'R'
   325  00FB3F  45                 	db	69	;'E'
   326  00FB40  54                 	db	84	;'T'
   327  00FB41  55                 	db	85	;'U'
   328  00FB42  52                 	db	82	;'R'
   329  00FB43  4E                 	db	78	;'N'
   330  00FB44  20                 	db	32
   331  00FB45  20                 	db	32
   332  00FB46  20                 	db	32
   333  00FB47  20                 	db	32
   334  00FB48  00                 	db	0
   335  00FB49                     STR_112:
   336  00FB49  4F                 	db	79	;'O'
   337  00FB4A  54                 	db	84	;'T'
   338  00FB4B  48                 	db	72	;'H'
   339  00FB4C  45                 	db	69	;'E'
   340  00FB4D  52                 	db	82	;'R'
   341  00FB4E  20                 	db	32
   342  00FB4F  53                 	db	83	;'S'
   343  00FB50  45                 	db	69	;'E'
   344  00FB51  54                 	db	84	;'T'
   345  00FB52  53                 	db	83	;'S'
   346  00FB53  20                 	db	32
   347  00FB54  52                 	db	82	;'R'
   348  00FB55  41                 	db	65	;'A'
   349  00FB56  35                 	db	53	;'5'
   350  00FB57  20                 	db	32
   351  00FB58  20                 	db	32
   352  00FB59  20                 	db	32
   353  00FB5A  00                 	db	0
   354  00FB5B                     STR_120:
   355  00FB5B  53                 	db	83	;'S'
   356  00FB5C  3A                 	db	58	;':'
   357  00FB5D  20                 	db	32
   358  00FB5E  44                 	db	68	;'D'
   359  00FB5F  20                 	db	32
   360  00FB60  57                 	db	87	;'W'
   361  00FB61  49                 	db	73	;'I'
   362  00FB62  4C                 	db	76	;'L'
   363  00FB63  4C                 	db	76	;'L'
   364  00FB64  20                 	db	32
   365  00FB65  52                 	db	82	;'R'
   366  00FB66  45                 	db	69	;'E'
   367  00FB67  54                 	db	84	;'T'
   368  00FB68  55                 	db	85	;'U'
   369  00FB69  52                 	db	82	;'R'
   370  00FB6A  4E                 	db	78	;'N'
   371  00FB6B  20                 	db	32
   372  00FB6C  00                 	db	0
   373  00FB6D                     STR_123:
   374  00FB6D  4F                 	db	79	;'O'
   375  00FB6E  54                 	db	84	;'T'
   376  00FB6F  48                 	db	72	;'H'
   377  00FB70  45                 	db	69	;'E'
   378  00FB71  52                 	db	82	;'R'
   379  00FB72  3A                 	db	58	;':'
   380  00FB73  20                 	db	32
   381  00FB74  43                 	db	67	;'C'
   382  00FB75  41                 	db	65	;'A'
   383  00FB76  4D                 	db	77	;'M'
   384  00FB77  20                 	db	32
   385  00FB78  54                 	db	84	;'T'
   386  00FB79  4F                 	db	79	;'O'
   387  00FB7A  47                 	db	71	;'G'
   388  00FB7B  47                 	db	71	;'G'
   389  00FB7C  4C                 	db	76	;'L'
   390  00FB7D  45                 	db	69	;'E'
   391  00FB7E  00                 	db	0
   392  00FB7F                     STR_122:
   393  00FB7F  44                 	db	68	;'D'
   394  00FB80  3A                 	db	58	;':'
   395  00FB81  20                 	db	32
   396  00FB82  52                 	db	82	;'R'
   397  00FB83  45                 	db	69	;'E'
   398  00FB84  54                 	db	84	;'T'
   399  00FB85  7C                 	db	124
   400  00FB86  32                 	db	50	;'2'
   401  00FB87  3A                 	db	58	;':'
   402  00FB88  20                 	db	32
   403  00FB89  43                 	db	67	;'C'
   404  00FB8A  4F                 	db	79	;'O'
   405  00FB8B  4E                 	db	78	;'N'
   406  00FB8C  44                 	db	68	;'D'
   407  00FB8D  20                 	db	32
   408  00FB8E  25                 	db	37
   409  00FB8F  64                 	db	100	;'d'
   410  00FB90  00                 	db	0
   411  00FB91                     STR_3:
   412  00FB91  2D                 	db	45
   413  00FB92  2D                 	db	45
   414  00FB93  20                 	db	32
   415  00FB94  4C                 	db	76	;'L'
   416  00FB95  4F                 	db	79	;'O'
   417  00FB96  47                 	db	71	;'G'
   418  00FB97  20                 	db	32
   419  00FB98  25                 	db	37
   420  00FB99  32                 	db	50	;'2'
   421  00FB9A  64                 	db	100	;'d'
   422  00FB9B  20                 	db	32
   423  00FB9C  48                 	db	72	;'H'
   424  00FB9D  45                 	db	69	;'E'
   425  00FB9E  52                 	db	82	;'R'
   426  00FB9F  45                 	db	69	;'E'
   427  00FBA0  2D                 	db	45
   428  00FBA1  2D                 	db	45
   429  00FBA2  00                 	db	0
   430  00FBA3                     STR_1:
   431  00FBA3  52                 	db	82	;'R'
   432  00FBA4  45                 	db	69	;'E'
   433  00FBA5  53                 	db	83	;'S'
   434  00FBA6  55                 	db	85	;'U'
   435  00FBA7  4C                 	db	76	;'L'
   436  00FBA8  54                 	db	84	;'T'
   437  00FBA9  53                 	db	83	;'S'
   438  00FBAA  20                 	db	32
   439  00FBAB  49                 	db	73	;'I'
   440  00FBAC  4E                 	db	78	;'N'
   441  00FBAD  20                 	db	32
   442  00FBAE  4C                 	db	76	;'L'
   443  00FBAF  4F                 	db	79	;'O'
   444  00FBB0  47                 	db	71	;'G'
   445  00FBB1  20                 	db	32
   446  00FBB2  25                 	db	37
   447  00FBB3  64                 	db	100	;'d'
   448  00FBB4  00                 	db	0
   449  00FBB5                     STR_102:
   450  00FBB5  4D                 	db	77	;'M'
   451  00FBB6  49                 	db	73	;'I'
   452  00FBB7  44                 	db	68	;'D'
   453  00FBB8  20                 	db	32
   454  00FBB9  2D                 	db	45
   455  00FBBA  2D                 	db	45
   456  00FBBB  20                 	db	32
   457  00FBBC  32                 	db	50	;'2'
   458  00FBBD  73                 	db	115	;'s'
   459  00FBBE  20                 	db	32
   460  00FBBF  20                 	db	32
   461  00FBC0  20                 	db	32
   462  00FBC1  20                 	db	32
   463  00FBC2  20                 	db	32
   464  00FBC3  20                 	db	32
   465  00FBC4  20                 	db	32
   466  00FBC5  00                 	db	0
   467  00FBC6                     STR_105:
   468  00FBC6  44                 	db	68	;'D'
   469  00FBC7  52                 	db	82	;'R'
   470  00FBC8  4F                 	db	79	;'O'
   471  00FBC9  50                 	db	80	;'P'
   472  00FBCA  20                 	db	32
   473  00FBCB  2D                 	db	45
   474  00FBCC  2D                 	db	45
   475  00FBCD  20                 	db	32
   476  00FBCE  32                 	db	50	;'2'
   477  00FBCF  73                 	db	115	;'s'
   478  00FBD0  20                 	db	32
   479  00FBD1  20                 	db	32
   480  00FBD2  20                 	db	32
   481  00FBD3  20                 	db	32
   482  00FBD4  20                 	db	32
   483  00FBD5  20                 	db	32
   484  00FBD6  00                 	db	0
   485  00FBD7                     STR_99:
   486  00FBD7  4C                 	db	76	;'L'
   487  00FBD8  45                 	db	69	;'E'
   488  00FBD9  46                 	db	70	;'F'
   489  00FBDA  54                 	db	84	;'T'
   490  00FBDB  20                 	db	32
   491  00FBDC  2D                 	db	45
   492  00FBDD  2D                 	db	45
   493  00FBDE  20                 	db	32
   494  00FBDF  32                 	db	50	;'2'
   495  00FBE0  73                 	db	115	;'s'
   496  00FBE1  20                 	db	32
   497  00FBE2  20                 	db	32
   498  00FBE3  20                 	db	32
   499  00FBE4  20                 	db	32
   500  00FBE5  20                 	db	32
   501  00FBE6  20                 	db	32
   502  00FBE7  00                 	db	0
   503  00FBE8                     STR_104:
   504  00FBE8  4C                 	db	76	;'L'
   505  00FBE9  45                 	db	69	;'E'
   506  00FBEA  56                 	db	86	;'V'
   507  00FBEB  45                 	db	69	;'E'
   508  00FBEC  4C                 	db	76	;'L'
   509  00FBED  20                 	db	32
   510  00FBEE  2D                 	db	45
   511  00FBEF  2D                 	db	45
   512  00FBF0  20                 	db	32
   513  00FBF1  32                 	db	50	;'2'
   514  00FBF2  73                 	db	115	;'s'
   515  00FBF3  20                 	db	32
   516  00FBF4  20                 	db	32
   517  00FBF5  20                 	db	32
   518  00FBF6  20                 	db	32
   519  00FBF7  20                 	db	32
   520  00FBF8  00                 	db	0
   521  00FBF9                     STR_98:
   522  00FBF9  52                 	db	82	;'R'
   523  00FBFA  49                 	db	73	;'I'
   524  00FBFB  47                 	db	71	;'G'
   525  00FBFC  48                 	db	72	;'H'
   526  00FBFD  54                 	db	84	;'T'
   527  00FBFE  20                 	db	32
   528  00FBFF  2D                 	db	45
   529  00FC00  2D                 	db	45
   530  00FC01  20                 	db	32
   531  00FC02  32                 	db	50	;'2'
   532  00FC03  73                 	db	115	;'s'
   533  00FC04  20                 	db	32
   534  00FC05  20                 	db	32
   535  00FC06  20                 	db	32
   536  00FC07  20                 	db	32
   537  00FC08  20                 	db	32
   538  00FC09  00                 	db	0
   539  00FC0A                     STR_97:
   540  00FC0A  4D                 	db	77	;'M'
   541  00FC0B  49                 	db	73	;'I'
   542  00FC0C  44                 	db	68	;'D'
   543  00FC0D  44                 	db	68	;'D'
   544  00FC0E  4C                 	db	76	;'L'
   545  00FC0F  45                 	db	69	;'E'
   546  00FC10  20                 	db	32
   547  00FC11  2D                 	db	45
   548  00FC12  2D                 	db	45
   549  00FC13  20                 	db	32
   550  00FC14  32                 	db	50	;'2'
   551  00FC15  73                 	db	115	;'s'
   552  00FC16  20                 	db	32
   553  00FC17  20                 	db	32
   554  00FC18  20                 	db	32
   555  00FC19  20                 	db	32
   556  00FC1A  00                 	db	0
   557  00FC1B  44                 	db	68	;'D'
   558  00FC1C  20                 	db	32
   559  00FC1D  57                 	db	87	;'W'
   560  00FC1E  49                 	db	73	;'I'
   561  00FC1F  4C                 	db	76	;'L'
   562  00FC20  4C                 	db	76	;'L'
   563  00FC21  20                 	db	32
   564  00FC22  52                 	db	82	;'R'
   565  00FC23  45                 	db	69	;'E'
   566  00FC24  54                 	db	84	;'T'
   567  00FC25  55                 	db	85	;'U'
   568  00FC26  52                 	db	82	;'R'
   569  00FC27  4E                 	db	78	;'N'
   570  00FC28  20                 	db	32
   571  00FC29  20                 	db	32
   572  00FC2A  20                 	db	32
   573  00FC2B  00                 	db	0
   574  00FC2C                     STR_100:
   575  00FC2C  4D                 	db	77	;'M'
   576  00FC2D  49                 	db	73	;'I'
   577  00FC2E  44                 	db	68	;'D'
   578  00FC2F  2D                 	db	45
   579  00FC30  4C                 	db	76	;'L'
   580  00FC31  45                 	db	69	;'E'
   581  00FC32  46                 	db	70	;'F'
   582  00FC33  54                 	db	84	;'T'
   583  00FC34  20                 	db	32
   584  00FC35  2D                 	db	45
   585  00FC36  2D                 	db	45
   586  00FC37  20                 	db	32
   587  00FC38  32                 	db	50	;'2'
   588  00FC39  73                 	db	115	;'s'
   589  00FC3A  20                 	db	32
   590  00FC3B  20                 	db	32
   591  00FC3C  00                 	db	0
   592  00FC3D                     STR_101:
   593  00FC3D  4D                 	db	77	;'M'
   594  00FC3E  49                 	db	73	;'I'
   595  00FC3F  44                 	db	68	;'D'
   596  00FC40  2D                 	db	45
   597  00FC41  52                 	db	82	;'R'
   598  00FC42  49                 	db	73	;'I'
   599  00FC43  47                 	db	71	;'G'
   600  00FC44  48                 	db	72	;'H'
   601  00FC45  54                 	db	84	;'T'
   602  00FC46  20                 	db	32
   603  00FC47  2D                 	db	45
   604  00FC48  2D                 	db	45
   605  00FC49  20                 	db	32
   606  00FC4A  32                 	db	50	;'2'
   607  00FC4B  73                 	db	115	;'s'
   608  00FC4C  20                 	db	32
   609  00FC4D  00                 	db	0
   610  00FC4E  45                 	db	69	;'E'
   611  00FC4F  4C                 	db	76	;'L'
   612  00FC50  53                 	db	83	;'S'
   613  00FC51  45                 	db	69	;'E'
   614  00FC52  20                 	db	32
   615  00FC53  54                 	db	84	;'T'
   616  00FC54  4F                 	db	79	;'O'
   617  00FC55  47                 	db	71	;'G'
   618  00FC56  47                 	db	71	;'G'
   619  00FC57  4C                 	db	76	;'L'
   620  00FC58  45                 	db	69	;'E'
   621  00FC59  53                 	db	83	;'S'
   622  00FC5A  20                 	db	32
   623  00FC5B  52                 	db	82	;'R'
   624  00FC5C  41                 	db	65	;'A'
   625  00FC5D  35                 	db	53	;'5'
   626  00FC5E  00                 	db	0
   627  00FC5F                     STR_72:
   628  00FC5F  41                 	db	65	;'A'
   629  00FC60  4C                 	db	76	;'L'
   630  00FC61  47                 	db	71	;'G'
   631  00FC62  31                 	db	49	;'1'
   632  00FC63  3A                 	db	58	;':'
   633  00FC64  20                 	db	32
   634  00FC65  39                 	db	57	;'9'
   635  00FC66  20                 	db	32
   636  00FC67  50                 	db	80	;'P'
   637  00FC68  4F                 	db	79	;'O'
   638  00FC69  50                 	db	80	;'P'
   639  00FC6A  4E                 	db	78	;'N'
   640  00FC6B  4F                 	db	79	;'O'
   641  00FC6C  54                 	db	84	;'T'
   642  00FC6D  41                 	db	65	;'A'
   643  00FC6E  42                 	db	66	;'B'
   644  00FC6F  00                 	db	0
   645  00FC70                     STR_92:
   646  00FC70  54                 	db	84	;'T'
   647  00FC71  53                 	db	83	;'S'
   648  00FC72  54                 	db	84	;'T'
   649  00FC73  3A                 	db	58	;':'
   650  00FC74  20                 	db	32
   651  00FC75  43                 	db	67	;'C'
   652  00FC76  4F                 	db	79	;'O'
   653  00FC77  4E                 	db	78	;'N'
   654  00FC78  44                 	db	68	;'D'
   655  00FC79  20                 	db	32
   656  00FC7A  53                 	db	83	;'S'
   657  00FC7B  4F                 	db	79	;'O'
   658  00FC7C  4C                 	db	76	;'L'
   659  00FC7D  4E                 	db	78	;'N'
   660  00FC7E  27                 	db	39
   661  00FC7F  44                 	db	68	;'D'
   662  00FC80  00                 	db	0
   663  00FC81                     STR_94:
   664  00FC81  54                 	db	84	;'T'
   665  00FC82  53                 	db	83	;'S'
   666  00FC83  54                 	db	84	;'T'
   667  00FC84  3A                 	db	58	;':'
   668  00FC85  20                 	db	32
   669  00FC86  50                 	db	80	;'P'
   670  00FC87  55                 	db	85	;'U'
   671  00FC88  53                 	db	83	;'S'
   672  00FC89  48                 	db	72	;'H'
   673  00FC8A  20                 	db	32
   674  00FC8B  53                 	db	83	;'S'
   675  00FC8C  4F                 	db	79	;'O'
   676  00FC8D  4C                 	db	76	;'L'
   677  00FC8E  4E                 	db	78	;'N'
   678  00FC8F  27                 	db	39
   679  00FC90  44                 	db	68	;'D'
   680  00FC91  00                 	db	0
   681  00FC92                     STR_68:
   682  00FC92  32                 	db	50	;'2'
   683  00FC93  2E                 	db	46
   684  00FC94  53                 	db	83	;'S'
   685  00FC95  4E                 	db	78	;'N'
   686  00FC96  52                 	db	82	;'R'
   687  00FC97  7C                 	db	124
   688  00FC98  34                 	db	52	;'4'
   689  00FC99  2E                 	db	46
   690  00FC9A  48                 	db	72	;'H'
   691  00FC9B  49                 	db	73	;'I'
   692  00FC9C  7C                 	db	124
   693  00FC9D  35                 	db	53	;'5'
   694  00FC9E  2E                 	db	46
   695  00FC9F  4D                 	db	77	;'M'
   696  00FCA0  45                 	db	69	;'E'
   697  00FCA1  44                 	db	68	;'D'
   698  00FCA2  00                 	db	0
   699  00FCA3                     STR_69:
   700  00FCA3  42                 	db	66	;'B'
   701  00FCA4  2E                 	db	46
   702  00FCA5  50                 	db	80	;'P'
   703  00FCA6  53                 	db	83	;'S'
   704  00FCA7  48                 	db	72	;'H'
   705  00FCA8  7C                 	db	124
   706  00FCA9  38                 	db	56	;'8'
   707  00FCAA  2E                 	db	46
   708  00FCAB  53                 	db	83	;'S'
   709  00FCAC  56                 	db	86	;'V'
   710  00FCAD  7C                 	db	124
   711  00FCAE  39                 	db	57	;'9'
   712  00FCAF  2E                 	db	46
   713  00FCB0  42                 	db	66	;'B'
   714  00FCB1  4C                 	db	76	;'L'
   715  00FCB2  4B                 	db	75	;'K'
   716  00FCB3  00                 	db	0
   717  00FCB4                     STR_110:
   718  00FCB4  54                 	db	84	;'T'
   719  00FCB5  53                 	db	83	;'S'
   720  00FCB6  54                 	db	84	;'T'
   721  00FCB7  3A                 	db	58	;':'
   722  00FCB8  20                 	db	32
   723  00FCB9  42                 	db	66	;'B'
   724  00FCBA  4F                 	db	79	;'O'
   725  00FCBB  54                 	db	84	;'T'
   726  00FCBC  48                 	db	72	;'H'
   727  00FCBD  20                 	db	32
   728  00FCBE  53                 	db	83	;'S'
   729  00FCBF  45                 	db	69	;'E'
   730  00FCC0  52                 	db	82	;'R'
   731  00FCC1  56                 	db	86	;'V'
   732  00FCC2  4F                 	db	79	;'O'
   733  00FCC3  53                 	db	83	;'S'
   734  00FCC4  00                 	db	0
   735  00FCC5                     STR_41:
   736  00FCC5  4C                 	db	76	;'L'
   737  00FCC6  4F                 	db	79	;'O'
   738  00FCC7  47                 	db	71	;'G'
   739  00FCC8  20                 	db	32
   740  00FCC9  31                 	db	49	;'1'
   741  00FCCA  20                 	db	32
   742  00FCCB  20                 	db	32
   743  00FCCC  20                 	db	32
   744  00FCCD  20                 	db	32
   745  00FCCE  20                 	db	32
   746  00FCCF  20                 	db	32
   747  00FCD0  20                 	db	32
   748  00FCD1  20                 	db	32
   749  00FCD2  20                 	db	32
   750  00FCD3  20                 	db	32
   751  00FCD4  20                 	db	32
   752  00FCD5  00                 	db	0
   753  00FCD6                     STR_40:
   754  00FCD6  4C                 	db	76	;'L'
   755  00FCD7  4F                 	db	79	;'O'
   756  00FCD8  47                 	db	71	;'G'
   757  00FCD9  20                 	db	32
   758  00FCDA  32                 	db	50	;'2'
   759  00FCDB  20                 	db	32
   760  00FCDC  20                 	db	32
   761  00FCDD  20                 	db	32
   762  00FCDE  20                 	db	32
   763  00FCDF  20                 	db	32
   764  00FCE0  20                 	db	32
   765  00FCE1  20                 	db	32
   766  00FCE2  20                 	db	32
   767  00FCE3  20                 	db	32
   768  00FCE4  20                 	db	32
   769  00FCE5  20                 	db	32
   770  00FCE6  00                 	db	0
   771  00FCE7                     STR_44:
   772  00FCE7  4C                 	db	76	;'L'
   773  00FCE8  4F                 	db	79	;'O'
   774  00FCE9  47                 	db	71	;'G'
   775  00FCEA  20                 	db	32
   776  00FCEB  33                 	db	51	;'3'
   777  00FCEC  20                 	db	32
   778  00FCED  20                 	db	32
   779  00FCEE  20                 	db	32
   780  00FCEF  20                 	db	32
   781  00FCF0  20                 	db	32
   782  00FCF1  20                 	db	32
   783  00FCF2  20                 	db	32
   784  00FCF3  20                 	db	32
   785  00FCF4  20                 	db	32
   786  00FCF5  20                 	db	32
   787  00FCF6  20                 	db	32
   788  00FCF7  00                 	db	0
   789  00FCF8                     STR_48:
   790  00FCF8  4C                 	db	76	;'L'
   791  00FCF9  4F                 	db	79	;'O'
   792  00FCFA  47                 	db	71	;'G'
   793  00FCFB  20                 	db	32
   794  00FCFC  34                 	db	52	;'4'
   795  00FCFD  20                 	db	32
   796  00FCFE  20                 	db	32
   797  00FCFF  20                 	db	32
   798  00FD00  20                 	db	32
   799  00FD01  20                 	db	32
   800  00FD02  20                 	db	32
   801  00FD03  20                 	db	32
   802  00FD04  20                 	db	32
   803  00FD05  20                 	db	32
   804  00FD06  20                 	db	32
   805  00FD07  20                 	db	32
   806  00FD08  00                 	db	0
   807  00FD09                     STR_36:
   808  00FD09  33                 	db	51	;'3'
   809  00FD0A  2E                 	db	46
   810  00FD0B  20                 	db	32
   811  00FD0C  4C                 	db	76	;'L'
   812  00FD0D  4F                 	db	79	;'O'
   813  00FD0E  47                 	db	71	;'G'
   814  00FD0F  53                 	db	83	;'S'
   815  00FD10  20                 	db	32
   816  00FD11  20                 	db	32
   817  00FD12  20                 	db	32
   818  00FD13  20                 	db	32
   819  00FD14  20                 	db	32
   820  00FD15  20                 	db	32
   821  00FD16  20                 	db	32
   822  00FD17  20                 	db	32
   823  00FD18  20                 	db	32
   824  00FD19  00                 	db	0
   825  00FD1A                     STR_32:
   826  00FD1A  32                 	db	50	;'2'
   827  00FD1B  2E                 	db	46
   828  00FD1C  20                 	db	32
   829  00FD1D  53                 	db	83	;'S'
   830  00FD1E  4F                 	db	79	;'O'
   831  00FD1F  52                 	db	82	;'R'
   832  00FD20  54                 	db	84	;'T'
   833  00FD21  20                 	db	32
   834  00FD22  20                 	db	32
   835  00FD23  20                 	db	32
   836  00FD24  20                 	db	32
   837  00FD25  20                 	db	32
   838  00FD26  20                 	db	32
   839  00FD27  20                 	db	32
   840  00FD28  20                 	db	32
   841  00FD29  20                 	db	32
   842  00FD2A  00                 	db	0
   843  00FD2B                     STR_33:
   844  00FD2B  31                 	db	49	;'1'
   845  00FD2C  2E                 	db	46
   846  00FD2D  20                 	db	32
   847  00FD2E  44                 	db	68	;'D'
   848  00FD2F  41                 	db	65	;'A'
   849  00FD30  54                 	db	84	;'T'
   850  00FD31  45                 	db	69	;'E'
   851  00FD32  2F                 	db	47
   852  00FD33  54                 	db	84	;'T'
   853  00FD34  49                 	db	73	;'I'
   854  00FD35  4D                 	db	77	;'M'
   855  00FD36  45                 	db	69	;'E'
   856  00FD37  20                 	db	32
   857  00FD38  20                 	db	32
   858  00FD39  20                 	db	32
   859  00FD3A  20                 	db	32
   860  00FD3B  00                 	db	0
   861  00FD3C                     STR_24:
   862  00FD3C  20                 	db	32
   863  00FD3D  2D                 	db	45
   864  00FD3E  2D                 	db	45
   865  00FD3F  20                 	db	32
   866  00FD40  50                 	db	80	;'P'
   867  00FD41  4F                 	db	79	;'O'
   868  00FD42  50                 	db	80	;'P'
   869  00FD43  20                 	db	32
   870  00FD44  20                 	db	32
   871  00FD45  43                 	db	67	;'C'
   872  00FD46  41                 	db	65	;'A'
   873  00FD47  4E                 	db	78	;'N'
   874  00FD48  20                 	db	32
   875  00FD49  2D                 	db	45
   876  00FD4A  2D                 	db	45
   877  00FD4B  20                 	db	32
   878  00FD4C  00                 	db	0
   879  00FD4D                     STR_26:
   880  00FD4D  20                 	db	32
   881  00FD4E  2D                 	db	45
   882  00FD4F  2D                 	db	45
   883  00FD50  20                 	db	32
   884  00FD51  53                 	db	83	;'S'
   885  00FD52  4F                 	db	79	;'O'
   886  00FD53  55                 	db	85	;'U'
   887  00FD54  50                 	db	80	;'P'
   888  00FD55  20                 	db	32
   889  00FD56  43                 	db	67	;'C'
   890  00FD57  41                 	db	65	;'A'
   891  00FD58  4E                 	db	78	;'N'
   892  00FD59  20                 	db	32
   893  00FD5A  2D                 	db	45
   894  00FD5B  2D                 	db	45
   895  00FD5C  20                 	db	32
   896  00FD5D  00                 	db	0
   897  00FD5E                     STR_28:
   898  00FD5E  2D                 	db	45
   899  00FD5F  2D                 	db	45
   900  00FD60  20                 	db	32
   901  00FD61  54                 	db	84	;'T'
   902  00FD62  4F                 	db	79	;'O'
   903  00FD63  54                 	db	84	;'T'
   904  00FD64  41                 	db	65	;'A'
   905  00FD65  4C                 	db	76	;'L'
   906  00FD66  20                 	db	32
   907  00FD67  43                 	db	67	;'C'
   908  00FD68  41                 	db	65	;'A'
   909  00FD69  4E                 	db	78	;'N'
   910  00FD6A  53                 	db	83	;'S'
   911  00FD6B  20                 	db	32
   912  00FD6C  2D                 	db	45
   913  00FD6D  2D                 	db	45
   914  00FD6E  00                 	db	0
   915  00FD6F                     STR_39:
   916  00FD6F  4C                 	db	76	;'L'
   917  00FD70  4F                 	db	79	;'O'
   918  00FD71  47                 	db	71	;'G'
   919  00FD72  20                 	db	32
   920  00FD73  31                 	db	49	;'1'
   921  00FD74  20                 	db	32
   922  00FD75  20                 	db	32
   923  00FD76  20                 	db	32
   924  00FD77  20                 	db	32
   925  00FD78  20                 	db	32
   926  00FD79  20                 	db	32
   927  00FD7A  20                 	db	32
   928  00FD7B  20                 	db	32
   929  00FD7C  20                 	db	32
   930  00FD7D  20                 	db	32
   931  00FD7E  3C                 	db	60	;'<'
   932  00FD7F  00                 	db	0
   933  00FD80                     STR_42:
   934  00FD80  4C                 	db	76	;'L'
   935  00FD81  4F                 	db	79	;'O'
   936  00FD82  47                 	db	71	;'G'
   937  00FD83  20                 	db	32
   938  00FD84  32                 	db	50	;'2'
   939  00FD85  20                 	db	32
   940  00FD86  20                 	db	32
   941  00FD87  20                 	db	32
   942  00FD88  20                 	db	32
   943  00FD89  20                 	db	32
   944  00FD8A  20                 	db	32
   945  00FD8B  20                 	db	32
   946  00FD8C  20                 	db	32
   947  00FD8D  20                 	db	32
   948  00FD8E  20                 	db	32
   949  00FD8F  3C                 	db	60	;'<'
   950  00FD90  00                 	db	0
   951  00FD91                     STR_46:
   952  00FD91  4C                 	db	76	;'L'
   953  00FD92  4F                 	db	79	;'O'
   954  00FD93  47                 	db	71	;'G'
   955  00FD94  20                 	db	32
   956  00FD95  33                 	db	51	;'3'
   957  00FD96  20                 	db	32
   958  00FD97  20                 	db	32
   959  00FD98  20                 	db	32
   960  00FD99  20                 	db	32
   961  00FD9A  20                 	db	32
   962  00FD9B  20                 	db	32
   963  00FD9C  20                 	db	32
   964  00FD9D  20                 	db	32
   965  00FD9E  20                 	db	32
   966  00FD9F  20                 	db	32
   967  00FDA0  3C                 	db	60	;'<'
   968  00FDA1  00                 	db	0
   969  00FDA2                     STR_50:
   970  00FDA2  4C                 	db	76	;'L'
   971  00FDA3  4F                 	db	79	;'O'
   972  00FDA4  47                 	db	71	;'G'
   973  00FDA5  20                 	db	32
   974  00FDA6  34                 	db	52	;'4'
   975  00FDA7  20                 	db	32
   976  00FDA8  20                 	db	32
   977  00FDA9  20                 	db	32
   978  00FDAA  20                 	db	32
   979  00FDAB  20                 	db	32
   980  00FDAC  20                 	db	32
   981  00FDAD  20                 	db	32
   982  00FDAE  20                 	db	32
   983  00FDAF  20                 	db	32
   984  00FDB0  20                 	db	32
   985  00FDB1  3C                 	db	60	;'<'
   986  00FDB2  00                 	db	0
   987  00FDB3                     STR_38:
   988  00FDB3  33                 	db	51	;'3'
   989  00FDB4  2E                 	db	46
   990  00FDB5  20                 	db	32
   991  00FDB6  4C                 	db	76	;'L'
   992  00FDB7  4F                 	db	79	;'O'
   993  00FDB8  47                 	db	71	;'G'
   994  00FDB9  53                 	db	83	;'S'
   995  00FDBA  20                 	db	32
   996  00FDBB  20                 	db	32
   997  00FDBC  20                 	db	32
   998  00FDBD  20                 	db	32
   999  00FDBE  20                 	db	32
  1000  00FDBF  20                 	db	32
  1001  00FDC0  20                 	db	32
  1002  00FDC1  20                 	db	32
  1003  00FDC2  3C                 	db	60	;'<'
  1004  00FDC3  00                 	db	0
  1005  00FDC4                     STR_34:
  1006  00FDC4  32                 	db	50	;'2'
  1007  00FDC5  2E                 	db	46
  1008  00FDC6  20                 	db	32
  1009  00FDC7  53                 	db	83	;'S'
  1010  00FDC8  4F                 	db	79	;'O'
  1011  00FDC9  52                 	db	82	;'R'
  1012  00FDCA  54                 	db	84	;'T'
  1013  00FDCB  20                 	db	32
  1014  00FDCC  20                 	db	32
  1015  00FDCD  20                 	db	32
  1016  00FDCE  20                 	db	32
  1017  00FDCF  20                 	db	32
  1018  00FDD0  20                 	db	32
  1019  00FDD1  20                 	db	32
  1020  00FDD2  20                 	db	32
  1021  00FDD3  3C                 	db	60	;'<'
  1022  00FDD4  00                 	db	0
  1023  00FDD5                     STR_31:
  1024  00FDD5  31                 	db	49	;'1'
  1025  00FDD6  2E                 	db	46
  1026  00FDD7  20                 	db	32
  1027  00FDD8  44                 	db	68	;'D'
  1028  00FDD9  41                 	db	65	;'A'
  1029  00FDDA  54                 	db	84	;'T'
  1030  00FDDB  45                 	db	69	;'E'
  1031  00FDDC  2F                 	db	47
  1032  00FDDD  54                 	db	84	;'T'
  1033  00FDDE  49                 	db	73	;'I'
  1034  00FDDF  4D                 	db	77	;'M'
  1035  00FDE0  45                 	db	69	;'E'
  1036  00FDE1  20                 	db	32
  1037  00FDE2  20                 	db	32
  1038  00FDE3  20                 	db	32
  1039  00FDE4  3C                 	db	60	;'<'
  1040  00FDE5  00                 	db	0
  1041  00FDE6                     STR_6:
  1042  00FDE6  50                 	db	80	;'P'
  1043  00FDE7  41                 	db	65	;'A'
  1044  00FDE8  55                 	db	85	;'U'
  1045  00FDE9  53                 	db	83	;'S'
  1046  00FDEA  45                 	db	69	;'E'
  1047  00FDEB  20                 	db	32
  1048  00FDEC  3C                 	db	60	;'<'
  1049  00FDED  20                 	db	32
  1050  00FDEE  7C                 	db	124
  1051  00FDEF  20                 	db	32
  1052  00FDF0  42                 	db	66	;'B'
  1053  00FDF1  41                 	db	65	;'A'
  1054  00FDF2  43                 	db	67	;'C'
  1055  00FDF3  4B                 	db	75	;'K'
  1056  00FDF4  20                 	db	32
  1057  00FDF5  3E                 	db	62	;'>'
  1058  00FDF6  00                 	db	0
  1059  00FDF7                     STR_30:
  1060  00FDF7  50                 	db	80	;'P'
  1061  00FDF8  55                 	db	85	;'U'
  1062  00FDF9  53                 	db	83	;'S'
  1063  00FDFA  48                 	db	72	;'H'
  1064  00FDFB  20                 	db	32
  1065  00FDFC  54                 	db	84	;'T'
  1066  00FDFD  4F                 	db	79	;'O'
  1067  00FDFE  20                 	db	32
  1068  00FDFF  43                 	db	67	;'C'
  1069  00FE00  4F                 	db	79	;'O'
  1070  00FE01  4E                 	db	78	;'N'
  1071  00FE02  54                 	db	84	;'T'
  1072  00FE03  49                 	db	73	;'I'
  1073  00FE04  4E                 	db	78	;'N'
  1074  00FE05  55                 	db	85	;'U'
  1075  00FE06  45                 	db	69	;'E'
  1076  00FE07  00                 	db	0
  1077  00FE08                     STR_27:
  1078  00FE08  4E                 	db	78	;'N'
  1079  00FE09  4C                 	db	76	;'L'
  1080  00FE0A  41                 	db	65	;'A'
  1081  00FE0B  42                 	db	66	;'B'
  1082  00FE0C  3A                 	db	58	;':'
  1083  00FE0D  20                 	db	32
  1084  00FE0E  25                 	db	37
  1085  00FE0F  64                 	db	100	;'d'
  1086  00FE10  7C                 	db	124
  1087  00FE11  4C                 	db	76	;'L'
  1088  00FE12  41                 	db	65	;'A'
  1089  00FE13  42                 	db	66	;'B'
  1090  00FE14  3A                 	db	58	;':'
  1091  00FE15  20                 	db	32
  1092  00FE16  25                 	db	37
  1093  00FE17  64                 	db	100	;'d'
  1094  00FE18  00                 	db	0
  1095  00FE19                     STR_25:
  1096  00FE19  4E                 	db	78	;'N'
  1097  00FE1A  54                 	db	84	;'T'
  1098  00FE1B  41                 	db	65	;'A'
  1099  00FE1C  42                 	db	66	;'B'
  1100  00FE1D  3A                 	db	58	;':'
  1101  00FE1E  20                 	db	32
  1102  00FE1F  25                 	db	37
  1103  00FE20  64                 	db	100	;'d'
  1104  00FE21  7C                 	db	124
  1105  00FE22  54                 	db	84	;'T'
  1106  00FE23  41                 	db	65	;'A'
  1107  00FE24  42                 	db	66	;'B'
  1108  00FE25  3A                 	db	58	;':'
  1109  00FE26  20                 	db	32
  1110  00FE27  25                 	db	37
  1111  00FE28  64                 	db	100	;'d'
  1112  00FE29  00                 	db	0
  1113  00FE2A                     STR_83:
  1114  00FE2A  4D                 	db	77	;'M'
  1115  00FE2B  41                 	db	65	;'A'
  1116  00FE2C  47                 	db	71	;'G'
  1117  00FE2D  5F                 	db	95	;'_'
  1118  00FE2E  73                 	db	115	;'s'
  1119  00FE2F  69                 	db	105	;'i'
  1120  00FE30  67                 	db	103	;'g'
  1121  00FE31  6E                 	db	110	;'n'
  1122  00FE32  61                 	db	97	;'a'
  1123  00FE33  6C                 	db	108	;'l'
  1124  00FE34  3A                 	db	58	;':'
  1125  00FE35  20                 	db	32
  1126  00FE36  25                 	db	37
  1127  00FE37  64                 	db	100	;'d'
  1128  00FE38  20                 	db	32
  1129  00FE39  00                 	db	0
  1130  00FE3A                     STR_103:
  1131  00FE3A  54                 	db	84	;'T'
  1132  00FE3B  53                 	db	83	;'S'
  1133  00FE3C  54                 	db	84	;'T'
  1134  00FE3D  3A                 	db	58	;':'
  1135  00FE3E  20                 	db	32
  1136  00FE3F  54                 	db	84	;'T'
  1137  00FE40  49                 	db	73	;'I'
  1138  00FE41  4C                 	db	76	;'L'
  1139  00FE42  54                 	db	84	;'T'
  1140  00FE43  20                 	db	32
  1141  00FE44  53                 	db	83	;'S'
  1142  00FE45  45                 	db	69	;'E'
  1143  00FE46  52                 	db	82	;'R'
  1144  00FE47  56                 	db	86	;'V'
  1145  00FE48  4F                 	db	79	;'O'
  1146  00FE49  00                 	db	0
  1147  00FE4A                     STR_4:
  1148  00FE4A  44                 	db	68	;'D'
  1149  00FE4B  49                 	db	73	;'I'
  1150  00FE4C  44                 	db	68	;'D'
  1151  00FE4D  4E                 	db	78	;'N'
  1152  00FE4E  27                 	db	39
  1153  00FE4F  54                 	db	84	;'T'
  1154  00FE50  20                 	db	32
  1155  00FE51  43                 	db	67	;'C'
  1156  00FE52  4F                 	db	79	;'O'
  1157  00FE53  4D                 	db	77	;'M'
  1158  00FE54  50                 	db	80	;'P'
  1159  00FE55  4C                 	db	76	;'L'
  1160  00FE56  45                 	db	69	;'E'
  1161  00FE57  54                 	db	84	;'T'
  1162  00FE58  45                 	db	69	;'E'
  1163  00FE59  00                 	db	0
  1164  00FE5A                     STR_80:
  1165  00FE5A  49                 	db	73	;'I'
  1166  00FE5B  52                 	db	82	;'R'
  1167  00FE5C  5F                 	db	95	;'_'
  1168  00FE5D  73                 	db	115	;'s'
  1169  00FE5E  69                 	db	105	;'i'
  1170  00FE5F  67                 	db	103	;'g'
  1171  00FE60  6E                 	db	110	;'n'
  1172  00FE61  61                 	db	97	;'a'
  1173  00FE62  6C                 	db	108	;'l'
  1174  00FE63  3A                 	db	58	;':'
  1175  00FE64  20                 	db	32
  1176  00FE65  25                 	db	37
  1177  00FE66  64                 	db	100	;'d'
  1178  00FE67  20                 	db	32
  1179  00FE68  00                 	db	0
  1180  00FE69                     STR_109:
  1181  00FE69  43                 	db	67	;'C'
  1182  00FE6A  41                 	db	65	;'A'
  1183  00FE6B  4D                 	db	77	;'M'
  1184  00FE6C  20                 	db	32
  1185  00FE6D  44                 	db	68	;'D'
  1186  00FE6E  57                 	db	87	;'W'
  1187  00FE6F  4E                 	db	78	;'N'
  1188  00FE70  20                 	db	32
  1189  00FE71  7C                 	db	124
  1190  00FE72  52                 	db	82	;'R'
  1191  00FE73  43                 	db	67	;'C'
  1192  00FE74  30                 	db	48	;'0'
  1193  00FE75  3D                 	db	61	;'='
  1194  00FE76  30                 	db	48	;'0'
  1195  00FE77  00                 	db	0
  1196  00FE78                     STR_108:
  1197  00FE78  43                 	db	67	;'C'
  1198  00FE79  41                 	db	65	;'A'
  1199  00FE7A  4D                 	db	77	;'M'
  1200  00FE7B  20                 	db	32
  1201  00FE7C  55                 	db	85	;'U'
  1202  00FE7D  50                 	db	80	;'P'
  1203  00FE7E  20                 	db	32
  1204  00FE7F  20                 	db	32
  1205  00FE80  7C                 	db	124
  1206  00FE81  52                 	db	82	;'R'
  1207  00FE82  43                 	db	67	;'C'
  1208  00FE83  30                 	db	48	;'0'
  1209  00FE84  3D                 	db	61	;'='
  1210  00FE85  31                 	db	49	;'1'
  1211  00FE86  00                 	db	0
  1212  00FE87                     STR_82:
  1213  00FE87  54                 	db	84	;'T'
  1214  00FE88  53                 	db	83	;'S'
  1215  00FE89  54                 	db	84	;'T'
  1216  00FE8A  3A                 	db	58	;':'
  1217  00FE8B  20                 	db	32
  1218  00FE8C  4D                 	db	77	;'M'
  1219  00FE8D  41                 	db	65	;'A'
  1220  00FE8E  47                 	db	71	;'G'
  1221  00FE8F  4E                 	db	78	;'N'
  1222  00FE90  45                 	db	69	;'E'
  1223  00FE91  54                 	db	84	;'T'
  1224  00FE92  49                 	db	73	;'I'
  1225  00FE93  53                 	db	83	;'S'
  1226  00FE94  4D                 	db	77	;'M'
  1227  00FE95  00                 	db	0
  1228  00FE96                     STR_107:
  1229  00FE96  54                 	db	84	;'T'
  1230  00FE97  53                 	db	83	;'S'
  1231  00FE98  54                 	db	84	;'T'
  1232  00FE99  3A                 	db	58	;':'
  1233  00FE9A  20                 	db	32
  1234  00FE9B  43                 	db	67	;'C'
  1235  00FE9C  41                 	db	65	;'A'
  1236  00FE9D  4D                 	db	77	;'M'
  1237  00FE9E  20                 	db	32
  1238  00FE9F  53                 	db	83	;'S'
  1239  00FEA0  45                 	db	69	;'E'
  1240  00FEA1  52                 	db	82	;'R'
  1241  00FEA2  56                 	db	86	;'V'
  1242  00FEA3  4F                 	db	79	;'O'
  1243  00FEA4  00                 	db	0
  1244  00FEA5                     STR_96:
  1245  00FEA5  54                 	db	84	;'T'
  1246  00FEA6  53                 	db	83	;'S'
  1247  00FEA7  54                 	db	84	;'T'
  1248  00FEA8  3A                 	db	58	;':'
  1249  00FEA9  20                 	db	32
  1250  00FEAA  50                 	db	80	;'P'
  1251  00FEAB  41                 	db	65	;'A'
  1252  00FEAC  4E                 	db	78	;'N'
  1253  00FEAD  20                 	db	32
  1254  00FEAE  53                 	db	83	;'S'
  1255  00FEAF  45                 	db	69	;'E'
  1256  00FEB0  52                 	db	82	;'R'
  1257  00FEB1  56                 	db	86	;'V'
  1258  00FEB2  4F                 	db	79	;'O'
  1259  00FEB3  00                 	db	0
  1260  00FEB4                     STR_75:
  1261  00FEB4  41                 	db	65	;'A'
  1262  00FEB5  4C                 	db	76	;'L'
  1263  00FEB6  47                 	db	71	;'G'
  1264  00FEB7  34                 	db	52	;'4'
  1265  00FEB8  3A                 	db	58	;':'
  1266  00FEB9  20                 	db	32
  1267  00FEBA  41                 	db	65	;'A'
  1268  00FEBB  4C                 	db	76	;'L'
  1269  00FEBC  4C                 	db	76	;'L'
  1270  00FEBD  20                 	db	32
  1271  00FEBE  43                 	db	67	;'C'
  1272  00FEBF  41                 	db	65	;'A'
  1273  00FEC0  4E                 	db	78	;'N'
  1274  00FEC1  53                 	db	83	;'S'
  1275  00FEC2  00                 	db	0
  1276  00FEC3                     STR_90:
  1277  00FEC3  54                 	db	84	;'T'
  1278  00FEC4  53                 	db	83	;'S'
  1279  00FEC5  54                 	db	84	;'T'
  1280  00FEC6  3A                 	db	58	;':'
  1281  00FEC7  20                 	db	32
  1282  00FEC8  44                 	db	68	;'D'
  1283  00FEC9  43                 	db	67	;'C'
  1284  00FECA  20                 	db	32
  1285  00FECB  4D                 	db	77	;'M'
  1286  00FECC  4F                 	db	79	;'O'
  1287  00FECD  54                 	db	84	;'T'
  1288  00FECE  4F                 	db	79	;'O'
  1289  00FECF  52                 	db	82	;'R'
  1290  00FED0  53                 	db	83	;'S'
  1291  00FED1  00                 	db	0
  1292  00FED2                     STR_70:
  1293  00FED2  41                 	db	65	;'A'
  1294  00FED3  4C                 	db	76	;'L'
  1295  00FED4  47                 	db	71	;'G'
  1296  00FED5  4F                 	db	79	;'O'
  1297  00FED6  52                 	db	82	;'R'
  1298  00FED7  49                 	db	73	;'I'
  1299  00FED8  54                 	db	84	;'T'
  1300  00FED9  48                 	db	72	;'H'
  1301  00FEDA  4D                 	db	77	;'M'
  1302  00FEDB  20                 	db	32
  1303  00FEDC  54                 	db	84	;'T'
  1304  00FEDD  45                 	db	69	;'E'
  1305  00FEDE  53                 	db	83	;'S'
  1306  00FEDF  54                 	db	84	;'T'
  1307  00FEE0  00                 	db	0
  1308  00FEE1                     STR_91:
  1309  00FEE1  50                 	db	80	;'P'
  1310  00FEE2  49                 	db	73	;'I'
  1311  00FEE3  4E                 	db	78	;'N'
  1312  00FEE4  20                 	db	32
  1313  00FEE5  52                 	db	82	;'R'
  1314  00FEE6  41                 	db	65	;'A'
  1315  00FEE7  35                 	db	53	;'5'
  1316  00FEE8  20                 	db	32
  1317  00FEE9  48                 	db	72	;'H'
  1318  00FEEA  49                 	db	73	;'I'
  1319  00FEEB  47                 	db	71	;'G'
  1320  00FEEC  48                 	db	72	;'H'
  1321  00FEED  2E                 	db	46
  1322  00FEEE  00                 	db	0
  1323  00FEEF                     STR_73:
  1324  00FEEF  41                 	db	65	;'A'
  1325  00FEF0  4C                 	db	76	;'L'
  1326  00FEF1  47                 	db	71	;'G'
  1327  00FEF2  32                 	db	50	;'2'
  1328  00FEF3  3A                 	db	58	;':'
  1329  00FEF4  20                 	db	32
  1330  00FEF5  31                 	db	49	;'1'
  1331  00FEF6  32                 	db	50	;'2'
  1332  00FEF7  20                 	db	32
  1333  00FEF8  43                 	db	67	;'C'
  1334  00FEF9  41                 	db	65	;'A'
  1335  00FEFA  4E                 	db	78	;'N'
  1336  00FEFB  53                 	db	83	;'S'
  1337  00FEFC  00                 	db	0
  1338  00FEFD                     STR_76:
  1339  00FEFD  41                 	db	65	;'A'
  1340  00FEFE  4C                 	db	76	;'L'
  1341  00FEFF  47                 	db	71	;'G'
  1342  00FF00  35                 	db	53	;'5'
  1343  00FF01  3A                 	db	58	;':'
  1344  00FF02  20                 	db	32
  1345  00FF03  4E                 	db	78	;'N'
  1346  00FF04  4F                 	db	79	;'O'
  1347  00FF05  20                 	db	32
  1348  00FF06  43                 	db	67	;'C'
  1349  00FF07  41                 	db	65	;'A'
  1350  00FF08  4E                 	db	78	;'N'
  1351  00FF09  53                 	db	83	;'S'
  1352  00FF0A  00                 	db	0
  1353  00FF0B                     STR_71:
  1354  00FF0B  50                 	db	80	;'P'
  1355  00FF0C  55                 	db	85	;'U'
  1356  00FF0D  53                 	db	83	;'S'
  1357  00FF0E  48                 	db	72	;'H'
  1358  00FF0F  20                 	db	32
  1359  00FF10  54                 	db	84	;'T'
  1360  00FF11  4F                 	db	79	;'O'
  1361  00FF12  20                 	db	32
  1362  00FF13  53                 	db	83	;'S'
  1363  00FF14  54                 	db	84	;'T'
  1364  00FF15  41                 	db	65	;'A'
  1365  00FF16  52                 	db	82	;'R'
  1366  00FF17  54                 	db	84	;'T'
  1367  00FF18  00                 	db	0
  1368  00FF19                     STR_23:
  1369  00FF19  25                 	db	37
  1370  00FF1A  64                 	db	100	;'d'
  1371  00FF1B  20                 	db	32
  1372  00FF1C  4D                 	db	77	;'M'
  1373  00FF1D  49                 	db	73	;'I'
  1374  00FF1E  4E                 	db	78	;'N'
  1375  00FF1F  20                 	db	32
  1376  00FF20  25                 	db	37
  1377  00FF21  64                 	db	100	;'d'
  1378  00FF22  20                 	db	32
  1379  00FF23  53                 	db	83	;'S'
  1380  00FF24  45                 	db	69	;'E'
  1381  00FF25  43                 	db	67	;'C'
  1382  00FF26  00                 	db	0
  1383  00FF27                     STR_2:
  1384  00FF27  54                 	db	84	;'T'
  1385  00FF28  49                 	db	73	;'I'
  1386  00FF29  4D                 	db	77	;'M'
  1387  00FF2A  45                 	db	69	;'E'
  1388  00FF2B  3A                 	db	58	;':'
  1389  00FF2C  20                 	db	32
  1390  00FF2D  25                 	db	37
  1391  00FF2E  64                 	db	100	;'d'
  1392  00FF2F  3A                 	db	58	;':'
  1393  00FF30  25                 	db	37
  1394  00FF31  30                 	db	48	;'0'
  1395  00FF32  32                 	db	50	;'2'
  1396  00FF33  64                 	db	100	;'d'
  1397  00FF34  00                 	db	0
  1398  00FF35                     STR_79:
  1399  00FF35  54                 	db	84	;'T'
  1400  00FF36  53                 	db	83	;'S'
  1401  00FF37  54                 	db	84	;'T'
  1402  00FF38  3A                 	db	58	;':'
  1403  00FF39  20                 	db	32
  1404  00FF3A  49                 	db	73	;'I'
  1405  00FF3B  52                 	db	82	;'R'
  1406  00FF3C  20                 	db	32
  1407  00FF3D  53                 	db	83	;'S'
  1408  00FF3E  4E                 	db	78	;'N'
  1409  00FF3F  53                 	db	83	;'S'
  1410  00FF40  52                 	db	82	;'R'
  1411  00FF41  00                 	db	0
  1412  00FF42                     STR_65:
  1413  00FF42  54                 	db	84	;'T'
  1414  00FF43  49                 	db	73	;'I'
  1415  00FF44  4D                 	db	77	;'M'
  1416  00FF45  45                 	db	69	;'E'
  1417  00FF46  20                 	db	32
  1418  00FF47  25                 	db	37
  1419  00FF48  64                 	db	100	;'d'
  1420  00FF49  3A                 	db	58	;':'
  1421  00FF4A  25                 	db	37
  1422  00FF4B  30                 	db	48	;'0'
  1423  00FF4C  32                 	db	50	;'2'
  1424  00FF4D  64                 	db	100	;'d'
  1425  00FF4E  00                 	db	0
  1426  00FF4F                     STR_74:
  1427  00FF4F  41                 	db	65	;'A'
  1428  00FF50  4C                 	db	76	;'L'
  1429  00FF51  47                 	db	71	;'G'
  1430  00FF52  33                 	db	51	;'3'
  1431  00FF53  3A                 	db	58	;':'
  1432  00FF54  20                 	db	32
  1433  00FF55  31                 	db	49	;'1'
  1434  00FF56  20                 	db	32
  1435  00FF57  43                 	db	67	;'C'
  1436  00FF58  41                 	db	65	;'A'
  1437  00FF59  4E                 	db	78	;'N'
  1438  00FF5A  00                 	db	0
  1439  00FF5B                     STR_93:
  1440  00FF5B  50                 	db	80	;'P'
  1441  00FF5C  49                 	db	73	;'I'
  1442  00FF5D  4E                 	db	78	;'N'
  1443  00FF5E  20                 	db	32
  1444  00FF5F  52                 	db	82	;'R'
  1445  00FF60  41                 	db	65	;'A'
  1446  00FF61  33                 	db	51	;'3'
  1447  00FF62  2E                 	db	46
  1448  00FF63  2E                 	db	46
  1449  00FF64  2E                 	db	46
  1450  00FF65  00                 	db	0
  1451  00FF66                     STR_95:
  1452  00FF66  50                 	db	80	;'P'
  1453  00FF67  49                 	db	73	;'I'
  1454  00FF68  4E                 	db	78	;'N'
  1455  00FF69  20                 	db	32
  1456  00FF6A  52                 	db	82	;'R'
  1457  00FF6B  41                 	db	65	;'A'
  1458  00FF6C  34                 	db	52	;'4'
  1459  00FF6D  2E                 	db	46
  1460  00FF6E  2E                 	db	46
  1461  00FF6F  2E                 	db	46
  1462  00FF70  00                 	db	0
  1463  00FF71                     STR_113:
  1464  00FF71  50                 	db	80	;'P'
  1465  00FF72  55                 	db	85	;'U'
  1466  00FF73  53                 	db	83	;'S'
  1467  00FF74  48                 	db	72	;'H'
  1468  00FF75  45                 	db	69	;'E'
  1469  00FF76  52                 	db	82	;'R'
  1470  00FF77  20                 	db	32
  1471  00FF78  54                 	db	84	;'T'
  1472  00FF79  53                 	db	83	;'S'
  1473  00FF7A  54                 	db	84	;'T'
  1474  00FF7B  00                 	db	0
  1475  00FF7C                     STR_64:
  1476  00FF7C  53                 	db	83	;'S'
  1477  00FF7D  4F                 	db	79	;'O'
  1478  00FF7E  52                 	db	82	;'R'
  1479  00FF7F  54                 	db	84	;'T'
  1480  00FF80  49                 	db	73	;'I'
  1481  00FF81  4E                 	db	78	;'N'
  1482  00FF82  47                 	db	71	;'G'
  1483  00FF83  2E                 	db	46
  1484  00FF84  2E                 	db	46
  1485  00FF85  2E                 	db	46
  1486  00FF86  00                 	db	0
  1487  00FF87                     STR_84:
  1488  00FF87  54                 	db	84	;'T'
  1489  00FF88  53                 	db	83	;'S'
  1490  00FF89  54                 	db	84	;'T'
  1491  00FF8A  3A                 	db	58	;':'
  1492  00FF8B  20                 	db	32
  1493  00FF8C  43                 	db	67	;'C'
  1494  00FF8D  4F                 	db	79	;'O'
  1495  00FF8E  4E                 	db	78	;'N'
  1496  00FF8F  44                 	db	68	;'D'
  1497  00FF90  00                 	db	0
  1498  00FF91                     STR_88:
  1499  00FF91  41                 	db	65	;'A'
  1500  00FF92  43                 	db	67	;'C'
  1501  00FF93  54                 	db	84	;'T'
  1502  00FF94  55                 	db	85	;'U'
  1503  00FF95  41                 	db	65	;'A'
  1504  00FF96  54                 	db	84	;'T'
  1505  00FF97  4F                 	db	79	;'O'
  1506  00FF98  52                 	db	82	;'R'
  1507  00FF99  53                 	db	83	;'S'
  1508  00FF9A  00                 	db	0
  1509  00FF9B                     STR_22:
  1510  00FF9B  44                 	db	68	;'D'
  1511  00FF9C  55                 	db	85	;'U'
  1512  00FF9D  52                 	db	82	;'R'
  1513  00FF9E  41                 	db	65	;'A'
  1514  00FF9F  54                 	db	84	;'T'
  1515  00FFA0  49                 	db	73	;'I'
  1516  00FFA1  4F                 	db	79	;'O'
  1517  00FFA2  4E                 	db	78	;'N'
  1518  00FFA3  3A                 	db	58	;':'
  1519  00FFA4  00                 	db	0
  1520  00FFA5                     STR_86:
  1521  00FFA5  43                 	db	67	;'C'
  1522  00FFA6  4F                 	db	79	;'O'
  1523  00FFA7  4E                 	db	78	;'N'
  1524  00FFA8  44                 	db	68	;'D'
  1525  00FFA9  3A                 	db	58	;':'
  1526  00FFAA  20                 	db	32
  1527  00FFAB  25                 	db	37
  1528  00FFAC  64                 	db	100	;'d'
  1529  00FFAD  00                 	db	0
  1530  00FFAE                     STR_77:
  1531  00FFAE  53                 	db	83	;'S'
  1532  00FFAF  45                 	db	69	;'E'
  1533  00FFB0  4E                 	db	78	;'N'
  1534  00FFB1  53                 	db	83	;'S'
  1535  00FFB2  4F                 	db	79	;'O'
  1536  00FFB3  52                 	db	82	;'R'
  1537  00FFB4  53                 	db	83	;'S'
  1538  00FFB5  00                 	db	0
  1539  00FFB6                     STR_126:
  1540  00FFB6  28                 	db	40
  1541  00FFB7  6E                 	db	110	;'n'
  1542  00FFB8  75                 	db	117	;'u'
  1543  00FFB9  6C                 	db	108	;'l'
  1544  00FFBA  6C                 	db	108	;'l'
  1545  00FFBB  29                 	db	41
  1546  00FFBC  00                 	db	0
  1547  00FFBD                     STR_67:
  1548  00FFBD  46                 	db	70	;'F'
  1549  00FFBE  41                 	db	65	;'A'
  1550  00FFBF  49                 	db	73	;'I'
  1551  00FFC0  4C                 	db	76	;'L'
  1552  00FFC1  45                 	db	69	;'E'
  1553  00FFC2  44                 	db	68	;'D'
  1554  00FFC3  00                 	db	0
  1555  00FFC4                     STR_7:
  1556  00FFC4  53                 	db	83	;'S'
  1557  00FFC5  54                 	db	84	;'T'
  1558  00FFC6  41                 	db	65	;'A'
  1559  00FFC7  52                 	db	82	;'R'
  1560  00FFC8  54                 	db	84	;'T'
  1561  00FFC9  3A                 	db	58	;':'
  1562  00FFCA  00                 	db	0
  1563  00FFCB                     STR_9:
  1564  00FFCB  46                 	db	70	;'F'
  1565  00FFCC  45                 	db	69	;'E'
  1566  00FFCD  42                 	db	66	;'B'
  1567  00FFCE  00                 	db	0
  1568  00FFCF                     STR_19:
  1569  00FFCF  44                 	db	68	;'D'
  1570  00FFD0  45                 	db	69	;'E'
  1571  00FFD1  43                 	db	67	;'C'
  1572  00FFD2  00                 	db	0
  1573  00FFD3                     STR_15:
  1574  00FFD3  41                 	db	65	;'A'
  1575  00FFD4  55                 	db	85	;'U'
  1576  00FFD5  47                 	db	71	;'G'
  1577  00FFD6  00                 	db	0
  1578  00FFD7                     STR_14:
  1579  00FFD7  4A                 	db	74	;'J'
  1580  00FFD8  55                 	db	85	;'U'
  1581  00FFD9  4C                 	db	76	;'L'
  1582  00FFDA  00                 	db	0
  1583  00FFDB                     STR_8:
  1584  00FFDB  4A                 	db	74	;'J'
  1585  00FFDC  41                 	db	65	;'A'
  1586  00FFDD  4E                 	db	78	;'N'
  1587  00FFDE  00                 	db	0
  1588  00FFDF                     STR_13:
  1589  00FFDF  4A                 	db	74	;'J'
  1590  00FFE0  55                 	db	85	;'U'
  1591  00FFE1  4E                 	db	78	;'N'
  1592  00FFE2  00                 	db	0
  1593  00FFE3                     STR_16:
  1594  00FFE3  53                 	db	83	;'S'
  1595  00FFE4  45                 	db	69	;'E'
  1596  00FFE5  50                 	db	80	;'P'
  1597  00FFE6  00                 	db	0
  1598  00FFE7                     STR_10:
  1599  00FFE7  4D                 	db	77	;'M'
  1600  00FFE8  41                 	db	65	;'A'
  1601  00FFE9  52                 	db	82	;'R'
  1602  00FFEA  00                 	db	0
  1603  00FFEB                     STR_11:
  1604  00FFEB  41                 	db	65	;'A'
  1605  00FFEC  50                 	db	80	;'P'
  1606  00FFED  52                 	db	82	;'R'
  1607  00FFEE  00                 	db	0
  1608  00FFEF                     STR_20:
  1609  00FFEF  45                 	db	69	;'E'
  1610  00FFF0  52                 	db	82	;'R'
  1611  00FFF1  52                 	db	82	;'R'
  1612  00FFF2  00                 	db	0
  1613  00FFF3                     STR_17:
  1614  00FFF3  4F                 	db	79	;'O'
  1615  00FFF4  43                 	db	67	;'C'
  1616  00FFF5  54                 	db	84	;'T'
  1617  00FFF6  00                 	db	0
  1618  00FFF7                     STR_18:
  1619  00FFF7  4E                 	db	78	;'N'
  1620  00FFF8  4F                 	db	79	;'O'
  1621  00FFF9  56                 	db	86	;'V'
  1622  00FFFA  00                 	db	0
  1623  00FFFB                     STR_12:
  1624  00FFFB  4D                 	db	77	;'M'
  1625  00FFFC  41                 	db	65	;'A'
  1626  00FFFD  59                 	db	89	;'Y'
  1627  00FFFE  00                 	db	0
  1628  0000                     
  1629                           ; #config settings
  1630  00FFFF  00                 	db	0	; dummy byte at the end
  1631  0000                     
  1632                           	psect	cinit
  1633  004A0A                     __pcinit:
  1634                           	opt stack 0
  1635  004A0A                     start_initialization:
  1636                           	opt stack 0
  1637  004A0A                     __initialization:
  1638                           	opt stack 0
  1639                           
  1640                           ; Initialize objects allocated to BANK1 (8 bytes)
  1641                           ; load TBLPTR registers with __pidataBANK1
  1642  004A0A  0E6C               	movlw	low __pidataBANK1
  1643  004A0C  6EF6               	movwf	tblptrl,c
  1644  004A0E  0E51               	movlw	high __pidataBANK1
  1645  004A10  6EF7               	movwf	tblptrh,c
  1646  004A12  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1647  004A14  6EF8               	movwf	tblptru,c
  1648  004A16  EE01  F037         	lfsr	0,__pdataBANK1
  1649  004A1A  EE10 F008          	lfsr	1,8
  1650  004A1E                     copy_data0:
  1651  004A1E  0009               	tblrd		*+
  1652  004A20  CFF5 FFEE          	movff	tablat,postinc0
  1653  004A24  50E5               	movf	postdec1,w,c
  1654  004A26  50E1               	movf	fsr1l,w,c
  1655  004A28  E1FA               	bnz	copy_data0
  1656                           
  1657                           ; Clear objects allocated to BANK1 (55 bytes)
  1658  004A2A  EE01  F000         	lfsr	0,__pbssBANK1
  1659  004A2E  0E37               	movlw	55
  1660  004A30                     clear_0:
  1661  004A30  6AEE               	clrf	postinc0,c
  1662  004A32  06E8               	decf	wreg,f,c
  1663  004A34  E1FD               	bnz	clear_0
  1664                           
  1665                           ; Clear objects allocated to BANK0 (38 bytes)
  1666  004A36  EE00  F0DA         	lfsr	0,__pbssBANK0
  1667  004A3A  0E26               	movlw	38
  1668  004A3C                     clear_1:
  1669  004A3C  6AEE               	clrf	postinc0,c
  1670  004A3E  06E8               	decf	wreg,f,c
  1671  004A40  E1FD               	bnz	clear_1
  1672                           
  1673                           ; Clear objects allocated to COMRAM (35 bytes)
  1674  004A42  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1675  004A46  0E23               	movlw	35
  1676  004A48                     clear_2:
  1677  004A48  6AEE               	clrf	postinc0,c
  1678  004A4A  06E8               	decf	wreg,f,c
  1679  004A4C  E1FD               	bnz	clear_2
  1680  004A4E                     end_of_initialization:
  1681                           	opt stack 0
  1682  004A4E                     __end_of__initialization:
  1683                           	opt stack 0
  1684  004A4E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1685  004A50  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1686  004A52  0100               	movlb	0
  1687  004A54  EF99  F01F         	goto	_main	;jump to C main() function
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1l	equ	0xFE1
  1696                           
  1697                           	psect	bssCOMRAM
  1698  00005B                     __pbssCOMRAM:
  1699                           	opt stack 0
  1700  00005B                     _back:
  1701                           	opt stack 0
  1702  00005B                     	ds	2
  1703  00005D                     _debug:
  1704                           	opt stack 0
  1705  00005D                     	ds	2
  1706  00005F                     _down:
  1707                           	opt stack 0
  1708  00005F                     	ds	2
  1709  000061                     _enter:
  1710                           	opt stack 0
  1711  000061                     	ds	2
  1712  000063                     _f_ID_receive:
  1713                           	opt stack 0
  1714  000063                     	ds	2
  1715  000065                     _f_can_coming_to_ID:
  1716                           	opt stack 0
  1717  000065                     	ds	2
  1718  000067                     _f_can_coming_to_distribution:
  1719                           	opt stack 0
  1720  000067                     	ds	2
  1721  000069                     _f_most_recent_sort_time:
  1722                           	opt stack 0
  1723  000069                     	ds	2
  1724  00006B                     _first:
  1725                           	opt stack 0
  1726  00006B                     	ds	2
  1727  00006D                     _firstboot:
  1728                           	opt stack 0
  1729  00006D                     	ds	2
  1730  00006F                     _log_count_can_no_lab:
  1731                           	opt stack 0
  1732  00006F                     	ds	2
  1733  000071                     _log_count_can_w_lab:
  1734                           	opt stack 0
  1735  000071                     	ds	2
  1736  000073                     _log_count_total:
  1737                           	opt stack 0
  1738  000073                     	ds	2
  1739  000075                     _most_recent_sort_time:
  1740                           	opt stack 0
  1741  000075                     	ds	2
  1742  000077                     _up:
  1743                           	opt stack 0
  1744  000077                     	ds	2
  1745  000079                     _was_low_1:
  1746                           	opt stack 0
  1747  000079                     	ds	2
  1748  00007B                     _was_low_3:
  1749                           	opt stack 0
  1750  00007B                     	ds	2
  1751  00007D                     _input:
  1752                           	opt stack 0
  1753  00007D                     	ds	1
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1l	equ	0xFE1
  1762                           
  1763                           	psect	bssBANK0
  1764  0000DA                     __pbssBANK0:
  1765                           	opt stack 0
  1766  0000DA                     _sensor_outputs:
  1767                           	opt stack 0
  1768  0000DA                     	ds	4
  1769  0000DE                     _IR_signal:
  1770                           	opt stack 0
  1771  0000DE                     	ds	2
  1772  0000E0                     _MAG_signal:
  1773                           	opt stack 0
  1774  0000E0                     	ds	2
  1775  0000E2                     _RTCflag:
  1776                           	opt stack 0
  1777  0000E2                     	ds	2
  1778  0000E4                     _cur_can:
  1779                           	opt stack 0
  1780  0000E4                     	ds	2
  1781  0000E6                     _cur_state:
  1782                           	opt stack 0
  1783  0000E6                     	ds	2
  1784  0000E8                     _f_lastCan:
  1785                           	opt stack 0
  1786  0000E8                     	ds	2
  1787  0000EA                     _f_loadingNewCan:
  1788                           	opt stack 0
  1789  0000EA                     	ds	2
  1790  0000EC                     _log:
  1791                           	opt stack 0
  1792  0000EC                     	ds	2
  1793  0000EE                     _log_completion:
  1794                           	opt stack 0
  1795  0000EE                     	ds	2
  1796  0000F0                     _log_count_pop_no_tab:
  1797                           	opt stack 0
  1798  0000F0                     	ds	2
  1799  0000F2                     _log_count_pop_w_tab:
  1800                           	opt stack 0
  1801  0000F2                     	ds	2
  1802  0000F4                     _log_total_time:
  1803                           	opt stack 0
  1804  0000F4                     	ds	2
  1805  0000F6                     _logstate:
  1806                           	opt stack 0
  1807  0000F6                     	ds	2
  1808  0000F8                     _total_time:
  1809                           	opt stack 0
  1810  0000F8                     	ds	2
  1811  0000FA                     _var:
  1812                           	opt stack 0
  1813  0000FA                     	ds	2
  1814  0000FC                     _machine_state:
  1815                           	opt stack 0
  1816  0000FC                     	ds	1
  1817  0000FD                     _sel:
  1818                           	opt stack 0
  1819  0000FD                     	ds	1
  1820  0000FE                     _count_total:
  1821                           	opt stack 0
  1822  0000FE                     	ds	2
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           
  1832                           	psect	bssBANK1
  1833  000100                     __pbssBANK1:
  1834                           	opt stack 0
  1835  000100                     _log_startTime:
  1836                           	opt stack 0
  1837  000100                     	ds	14
  1838  00010E                     _startTime:
  1839                           	opt stack 0
  1840  00010E                     	ds	14
  1841  00011C                     _servoTimes:
  1842                           	opt stack 0
  1843  00011C                     	ds	8
  1844  000124                     _time:
  1845                           	opt stack 0
  1846  000124                     	ds	7
  1847  00012B                     _count_can_no_lab:
  1848                           	opt stack 0
  1849  00012B                     	ds	2
  1850  00012D                     _count_can_w_lab:
  1851                           	opt stack 0
  1852  00012D                     	ds	2
  1853  00012F                     _count_pop_no_tab:
  1854                           	opt stack 0
  1855  00012F                     	ds	2
  1856  000131                     _count_pop_w_tab:
  1857                           	opt stack 0
  1858  000131                     	ds	2
  1859  000133                     _f_can_distributed:
  1860                           	opt stack 0
  1861  000133                     	ds	2
  1862  000135                     _i:
  1863                           	opt stack 0
  1864  000135                     	ds	2
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           
  1874                           	psect	dataBANK1
  1875  000137                     __pdataBANK1:
  1876                           	opt stack 0
  1877  000137                     UI@F3228:
  1878                           	opt stack 0
  1879  000137                     	ds	4
  1880  00013B                     printRTC@F3219:
  1881                           	opt stack 0
  1882  00013B                     	ds	4
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892                           	psect	cstackBANK0
  1893  000080                     __pcstackBANK0:
  1894                           	opt stack 0
  1895  000080                     ??_delay_ms:
  1896  000080                     ??_PortTests:
  1897  000080                     ??_isdigit:
  1898  000080                     ??_readADC:
  1899  000080                     ??_I2C_Master_Wait:
  1900  000080                     ?___wmul:
  1901                           	opt stack 0
  1902  000080                     ?___awmod:
  1903                           	opt stack 0
  1904  000080                     ?___lwdiv:
  1905                           	opt stack 0
  1906  000080                     ?___lldiv:
  1907                           	opt stack 0
  1908  000080                     lcdNibble@temp:
  1909                           	opt stack 0
  1910  000080                     initTime@m:
  1911                           	opt stack 0
  1912  000080                     updateServoPosition@time_us:
  1913                           	opt stack 0
  1914  000080                     EEPROM_read@address:
  1915                           	opt stack 0
  1916  000080                     ___wmul@multiplier:
  1917                           	opt stack 0
  1918  000080                     ___awmod@dividend:
  1919                           	opt stack 0
  1920  000080                     ___lwdiv@dividend:
  1921                           	opt stack 0
  1922  000080                     strcpy@to:
  1923                           	opt stack 0
  1924  000080                     ___lldiv@dividend:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x0
  1928  000080                     	ds	1
  1929  000081                     readADC@channel:
  1930                           	opt stack 0
  1931  000081                     I2C_Master_Read@a:
  1932                           	opt stack 0
  1933  000081                     lcdNibble@data:
  1934                           	opt stack 0
  1935  000081                     initTime@h:
  1936                           	opt stack 0
  1937  000081                     delay_ms@milliseconds:
  1938                           	opt stack 0
  1939  000081                     _isdigit$1978:
  1940                           	opt stack 0
  1941  000081                     I2C_Master_Write@d:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x1
  1945  000081                     	ds	1
  1946  000082                     ??_ID:
  1947  000082                     ??_readIR:
  1948  000082                     ??_readMAG:
  1949  000082                     I2C_Master_Read@temp:
  1950                           	opt stack 0
  1951  000082                     lcdInst@data:
  1952                           	opt stack 0
  1953  000082                     putch@data:
  1954                           	opt stack 0
  1955  000082                     initTime@w:
  1956                           	opt stack 0
  1957  000082                     isdigit@c:
  1958                           	opt stack 0
  1959  000082                     updateServoPosition@timer:
  1960                           	opt stack 0
  1961  000082                     ___wmul@multiplicand:
  1962                           	opt stack 0
  1963  000082                     ___awmod@divisor:
  1964                           	opt stack 0
  1965  000082                     ___lwdiv@divisor:
  1966                           	opt stack 0
  1967  000082                     strcpy@from:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x2
  1971  000082                     	ds	1
  1972  000083                     ??_initLCD:
  1973  000083                     initTime@DD:
  1974                           	opt stack 0
  1975  000083                     getRTC@i:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x3
  1979  000083                     	ds	1
  1980  000084                     ??_updateServoPosition:
  1981  000084                     initTime@MM:
  1982                           	opt stack 0
  1983  000084                     ___awmod@counter:
  1984                           	opt stack 0
  1985  000084                     readIR@res:
  1986                           	opt stack 0
  1987  000084                     readMAG@res:
  1988                           	opt stack 0
  1989  000084                     ID@i:
  1990                           	opt stack 0
  1991  000084                     ___wmul@product:
  1992                           	opt stack 0
  1993  000084                     ___lwdiv@quotient:
  1994                           	opt stack 0
  1995  000084                     strcpy@cp:
  1996                           	opt stack 0
  1997  000084                     ___lldiv@divisor:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0x4
  2001  000084                     	ds	1
  2002  000085                     ??_initSortTimer:
  2003  000085                     initTime@YY:
  2004                           	opt stack 0
  2005  000085                     ___awmod@sign:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x5
  2009  000085                     	ds	1
  2010  000086                     ??_getIR:
  2011  000086                     ??_getMAG:
  2012  000086                     ?___awdiv:
  2013                           	opt stack 0
  2014  000086                     initTime@s:
  2015                           	opt stack 0
  2016  000086                     ___lwdiv@counter:
  2017                           	opt stack 0
  2018  000086                     ID@i_1120:
  2019                           	opt stack 0
  2020  000086                     updateServoPosition@my_time:
  2021                           	opt stack 0
  2022  000086                     ___awdiv@dividend:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x6
  2026  000086                     	ds	1
  2027  000087                     ?___lwmod:
  2028                           	opt stack 0
  2029  000087                     getIR@i:
  2030                           	opt stack 0
  2031  000087                     ___lwmod@dividend:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x7
  2035  000087                     	ds	1
  2036  000088                     ??_Distribution:
  2037  000088                     ??_initServos:
  2038  000088                     initSortTimer@i:
  2039                           	opt stack 0
  2040  000088                     ___awdiv@divisor:
  2041                           	opt stack 0
  2042  000088                     ___lldiv@quotient:
  2043                           	opt stack 0
  2044                           
  2045                           ; 4 bytes @ 0x8
  2046  000088                     	ds	1
  2047  000089                     ___lwmod@divisor:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x9
  2051  000089                     	ds	1
  2052  00008A                     ___awdiv@counter:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0xA
  2056  00008A                     	ds	1
  2057  00008B                     ___awdiv@sign:
  2058                           	opt stack 0
  2059  00008B                     ___lwmod@counter:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0xB
  2063  00008B                     	ds	1
  2064  00008C                     ___lldiv@counter:
  2065                           	opt stack 0
  2066  00008C                     ___awdiv@quotient:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0xC
  2070  00008C                     	ds	1
  2071  00008D                     I2C_Master_Init@c:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0xD
  2075  00008D                     	ds	1
  2076  00008E                     ?_printf:
  2077                           	opt stack 0
  2078  00008E                     printf@f:
  2079                           	opt stack 0
  2080                           
  2081                           ; 2 bytes @ 0xE
  2082  00008E                     	ds	3
  2083  000091                     ??_I2C_Master_Init:
  2084                           
  2085                           ; 1 bytes @ 0x11
  2086  000091                     	ds	4
  2087  000095                     ??_loadRTC:
  2088                           
  2089                           ; 1 bytes @ 0x15
  2090  000095                     	ds	1
  2091  000096                     loadRTC@i:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x16
  2095  000096                     	ds	4
  2096  00009A                     ??_printf:
  2097                           
  2098                           ; 1 bytes @ 0x1A
  2099  00009A                     	ds	4
  2100  00009E                     printf@prec:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x1E
  2104  00009E                     	ds	1
  2105  00009F                     printf@cp:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x1F
  2109  00009F                     	ds	2
  2110  0000A1                     printf@ap:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x21
  2114  0000A1                     	ds	2
  2115  0000A3                     printf@len:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x23
  2119  0000A3                     	ds	2
  2120  0000A5                     printf@val:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x25
  2124  0000A5                     	ds	2
  2125  0000A7                     printf@flag:
  2126                           	opt stack 0
  2127                           
  2128                           ; 1 bytes @ 0x27
  2129  0000A7                     	ds	1
  2130  0000A8                     printf@c:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x28
  2134  0000A8                     	ds	1
  2135  0000A9                     printf@width:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x29
  2139  0000A9                     	ds	2
  2140  0000AB                     ??_printRTC:
  2141  0000AB                     ??_algorithmTest:
  2142  0000AB                     ??_sensorTest:
  2143  0000AB                     ??_actuatorTest:
  2144  0000AB                     ??_PortTestA5:
  2145  0000AB                     ??_SpeedTest:
  2146  0000AB                     ??_PusherTest:
  2147  0000AB                     ??_BothServos:
  2148  0000AB                     ??_BlockerTest:
  2149  0000AB                     EEPROM_write@address:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x2B
  2153  0000AB                     	ds	1
  2154  0000AC                     BlockerTest@i:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x2C
  2158  0000AC                     	ds	1
  2159  0000AD                     EEPROM_write@data:
  2160                           	opt stack 0
  2161  0000AD                     actuatorTest@i_1654:
  2162                           	opt stack 0
  2163  0000AD                     sensorTest@res:
  2164                           	opt stack 0
  2165  0000AD                     PusherTest@res:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x2D
  2169  0000AD                     	ds	1
  2170  0000AE                     ??_EEPROM_write:
  2171  0000AE                     actuatorTest@i_1661:
  2172                           	opt stack 0
  2173  0000AE                     BlockerTest@cam_flag:
  2174                           	opt stack 0
  2175  0000AE                     printRTC@INT_time:
  2176                           	opt stack 0
  2177                           
  2178                           ; 14 bytes @ 0x2E
  2179  0000AE                     	ds	1
  2180  0000AF                     EEPROM_write@i:
  2181                           	opt stack 0
  2182  0000AF                     actuatorTest@i_1662:
  2183                           	opt stack 0
  2184  0000AF                     PusherTest@res_1709:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x2F
  2188  0000AF                     	ds	1
  2189  0000B0                     EEPROM_write@i_1340:
  2190                           	opt stack 0
  2191  0000B0                     actuatorTest@i_1664:
  2192                           	opt stack 0
  2193  0000B0                     BlockerTest@cond_flag:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x30
  2197  0000B0                     	ds	1
  2198  0000B1                     ??_Loading:
  2199  0000B1                     logRun@num:
  2200                           	opt stack 0
  2201  0000B1                     actuatorTest@i_1665:
  2202                           	opt stack 0
  2203  0000B1                     PusherTest@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x31
  2207  0000B1                     	ds	1
  2208  0000B2                     logRun@byte1:
  2209                           	opt stack 0
  2210  0000B2                     actuatorTest@i_1667:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x32
  2214  0000B2                     	ds	1
  2215  0000B3                     logRun@byte2:
  2216                           	opt stack 0
  2217  0000B3                     actuatorTest@i_1668:
  2218                           	opt stack 0
  2219  0000B3                     Loading@addr:
  2220                           	opt stack 0
  2221  0000B3                     PusherTest@i_1713:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x33
  2225  0000B3                     	ds	1
  2226  0000B4                     logRun@byte3:
  2227                           	opt stack 0
  2228  0000B4                     actuatorTest@i_1670:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x34
  2232  0000B4                     	ds	1
  2233  0000B5                     Loading@byte1:
  2234                           	opt stack 0
  2235  0000B5                     logRun@byte_i:
  2236                           	opt stack 0
  2237  0000B5                     actuatorTest@i_1671:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x35
  2241  0000B5                     	ds	1
  2242  0000B6                     logRun@byte11:
  2243                           	opt stack 0
  2244  0000B6                     actuatorTest@i_1673:
  2245                           	opt stack 0
  2246  0000B6                     Loading@i_1103:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x36
  2250  0000B6                     	ds	1
  2251  0000B7                     actuatorTest@i_1674:
  2252                           	opt stack 0
  2253  0000B7                     logRun@i:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x37
  2257  0000B7                     	ds	1
  2258  0000B8                     actuatorTest@i_1676:
  2259                           	opt stack 0
  2260  0000B8                     Loading@i_1104:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x38
  2264  0000B8                     	ds	1
  2265  0000B9                     actuatorTest@i_1677:
  2266                           	opt stack 0
  2267  0000B9                     logRun@addr:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x39
  2271  0000B9                     	ds	1
  2272  0000BA                     actuatorTest@i_1680:
  2273                           	opt stack 0
  2274  0000BA                     Loading@i_1106:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x3A
  2278  0000BA                     	ds	1
  2279  0000BB                     actuatorTest@i_1681:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x3B
  2283  0000BB                     	ds	1
  2284  0000BC                     actuatorTest@i_1683:
  2285                           	opt stack 0
  2286  0000BC                     printRTC@RTC_month:
  2287                           	opt stack 0
  2288  0000BC                     Loading@i_1107:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x3C
  2292  0000BC                     	ds	1
  2293  0000BD                     actuatorTest@i_1684:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x3D
  2297  0000BD                     	ds	1
  2298  0000BE                     actuatorTest@i_1686:
  2299                           	opt stack 0
  2300  0000BE                     Loading@i_1109:
  2301                           	opt stack 0
  2302  0000BE                     printRTC@month:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x3E
  2306  0000BE                     	ds	1
  2307  0000BF                     actuatorTest@i_1687:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x3F
  2311  0000BF                     	ds	1
  2312  0000C0                     actuatorTest@i_1690:
  2313                           	opt stack 0
  2314  0000C0                     Loading@j:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x40
  2318  0000C0                     	ds	1
  2319  0000C1                     actuatorTest@i_1691:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x41
  2323  0000C1                     	ds	1
  2324  0000C2                     actuatorTest@i_1693:
  2325                           	opt stack 0
  2326  0000C2                     printRTC@i:
  2327                           	opt stack 0
  2328  0000C2                     Loading@i:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x42
  2332  0000C2                     	ds	1
  2333  0000C3                     actuatorTest@i_1694:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x43
  2337  0000C3                     	ds	1
  2338  0000C4                     ??_UI:
  2339  0000C4                     actuatorTest@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x44
  2343  0000C4                     	ds	2
  2344  0000C6                     ??_Test:
  2345  0000C6                     _UI$2334:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x46
  2349  0000C6                     	ds	2
  2350  0000C8                     UI@i:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x48
  2354  0000C8                     	ds	1
  2355  0000C9                     UI@i_409:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x49
  2359  0000C9                     	ds	1
  2360  0000CA                     UI@i_412:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x4A
  2364  0000CA                     	ds	1
  2365  0000CB                     UI@i_413:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x4B
  2369  0000CB                     	ds	1
  2370  0000CC                     UI@i_431:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x4C
  2374  0000CC                     	ds	1
  2375  0000CD                     UI@i_432:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x4D
  2379  0000CD                     	ds	1
  2380  0000CE                     UI@i_435:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4E
  2384  0000CE                     	ds	1
  2385  0000CF                     UI@i_436:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x4F
  2389  0000CF                     	ds	1
  2390  0000D0                     UI@i_439:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x50
  2394  0000D0                     	ds	1
  2395  0000D1                     UI@i_440:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x51
  2399  0000D1                     	ds	1
  2400  0000D2                     UI@i_443:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x52
  2404  0000D2                     	ds	1
  2405  0000D3                     UI@i_444:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x53
  2409  0000D3                     	ds	1
  2410  0000D4                     UI@i_447:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x54
  2414  0000D4                     	ds	1
  2415  0000D5                     UI@i_448:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x55
  2419  0000D5                     	ds	1
  2420  0000D6                     UI@month:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x56
  2424  0000D6                     	ds	4
  2425  0000DA                     tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           postinc0	equ	0xFEE
  2430                           wreg	equ	0xFE8
  2431                           postdec1	equ	0xFE5
  2432                           fsr1l	equ	0xFE1
  2433                           
  2434                           ; 1 bytes @ 0x5A
  2435                           
  2436                           	psect	cstackCOMRAM
  2437  000001                     __pcstackCOMRAM:
  2438                           	opt stack 0
  2439  000001                     ??i2_I2C_Master_Wait:
  2440  000001                     ??i2_delay_ms:
  2441  000001                     ??i2_isdigit:
  2442  000001                     ?i2___wmul:
  2443                           	opt stack 0
  2444  000001                     ?i2___lwmod:
  2445                           	opt stack 0
  2446  000001                     i2lcdNibble@temp:
  2447                           	opt stack 0
  2448  000001                     i2EEPROM_read@address:
  2449                           	opt stack 0
  2450  000001                     i2___wmul@multiplier:
  2451                           	opt stack 0
  2452  000001                     i2___lwmod@dividend:
  2453                           	opt stack 0
  2454  000001                     i2strcpy@to:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x0
  2458  000001                     	ds	1
  2459  000002                     i2I2C_Master_Read@a:
  2460                           	opt stack 0
  2461  000002                     i2lcdNibble@data:
  2462                           	opt stack 0
  2463  000002                     i2delay_ms@milliseconds:
  2464                           	opt stack 0
  2465  000002                     i2_isdigit$1978:
  2466                           	opt stack 0
  2467  000002                     i2I2C_Master_Write@d:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x1
  2471  000002                     	ds	1
  2472  000003                     i2I2C_Master_Read@temp:
  2473                           	opt stack 0
  2474  000003                     i2lcdInst@data:
  2475                           	opt stack 0
  2476  000003                     i2putch@data:
  2477                           	opt stack 0
  2478  000003                     i2isdigit@c:
  2479                           	opt stack 0
  2480  000003                     i2___wmul@multiplicand:
  2481                           	opt stack 0
  2482  000003                     i2___lwmod@divisor:
  2483                           	opt stack 0
  2484  000003                     i2strcpy@from:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x2
  2488  000003                     	ds	1
  2489  000004                     i2getRTC@i:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x3
  2493  000004                     	ds	1
  2494  000005                     i2___lwmod@counter:
  2495                           	opt stack 0
  2496  000005                     i2___wmul@product:
  2497                           	opt stack 0
  2498  000005                     i2strcpy@cp:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x4
  2502  000005                     	ds	1
  2503  000006                     ?i2___lwdiv:
  2504                           	opt stack 0
  2505  000006                     i2___lwdiv@dividend:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x5
  2509  000006                     	ds	1
  2510  000007                     retrieveLog@logNum:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x6
  2514  000007                     	ds	1
  2515  000008                     i2___lwdiv@divisor:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x7
  2519  000008                     	ds	1
  2520  000009                     ??_retrieveLog:
  2521                           
  2522                           ; 1 bytes @ 0x8
  2523  000009                     	ds	1
  2524  00000A                     i2___lwdiv@quotient:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x9
  2528  00000A                     	ds	1
  2529  00000B                     retrieveLog@byte1:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0xA
  2533  00000B                     	ds	1
  2534  00000C                     retrieveLog@byte2:
  2535                           	opt stack 0
  2536  00000C                     i2___lwdiv@counter:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0xB
  2540  00000C                     	ds	1
  2541  00000D                     ?i2_printf:
  2542                           	opt stack 0
  2543  00000D                     retrieveLog@byte3:
  2544                           	opt stack 0
  2545  00000D                     i2printf@f:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0xC
  2549  00000D                     	ds	1
  2550  00000E                     retrieveLog@i:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0xD
  2554  00000E                     	ds	2
  2555  000010                     retrieveLog@addr:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0xF
  2559  000010                     	ds	2
  2560  000012                     dispLogs@myLog:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x11
  2564  000012                     	ds	2
  2565  000014                     
  2566                           ; 1 bytes @ 0x13
  2567  000014                     	ds	5
  2568  000019                     ??i2_printf:
  2569                           
  2570                           ; 1 bytes @ 0x18
  2571  000019                     	ds	4
  2572  00001D                     i2printf@prec:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x1C
  2576  00001D                     	ds	1
  2577  00001E                     i2printf@cp:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x1D
  2581  00001E                     	ds	2
  2582  000020                     i2printf@ap:
  2583                           	opt stack 0
  2584                           
  2585                           ; 2 bytes @ 0x1F
  2586  000020                     	ds	2
  2587  000022                     i2printf@len:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x21
  2591  000022                     	ds	2
  2592  000024                     i2printf@val:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x23
  2596  000024                     	ds	2
  2597  000026                     i2printf@flag:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x25
  2601  000026                     	ds	1
  2602  000027                     i2printf@c:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x26
  2606  000027                     	ds	1
  2607  000028                     i2printf@width:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x27
  2611  000028                     	ds	2
  2612  00002A                     ??_printSortTimer:
  2613  00002A                     ??i2_printRTC:
  2614  00002A                     ?_inputHandler:
  2615                           	opt stack 0
  2616                           
  2617                           ; 2 bytes @ 0x29
  2618  00002A                     	ds	2
  2619  00002C                     ??_inputHandler:
  2620                           
  2621                           ; 1 bytes @ 0x2B
  2622  00002C                     	ds	1
  2623  00002D                     printSortTimer@curTime:
  2624                           	opt stack 0
  2625  00002D                     i2printRTC@INT_time:
  2626                           	opt stack 0
  2627                           
  2628                           ; 14 bytes @ 0x2C
  2629  00002D                     	ds	14
  2630  00003B                     printSortTimer@start_sec:
  2631                           	opt stack 0
  2632  00003B                     i2printRTC@RTC_month:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x3A
  2636  00003B                     	ds	2
  2637  00003D                     printSortTimer@cur_sec:
  2638                           	opt stack 0
  2639  00003D                     i2printRTC@month:
  2640                           	opt stack 0
  2641                           
  2642                           ; 4 bytes @ 0x3C
  2643  00003D                     	ds	2
  2644  00003F                     printSortTimer@min:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x3E
  2648  00003F                     	ds	2
  2649  000041                     printSortTimer@sec:
  2650                           	opt stack 0
  2651  000041                     i2printRTC@i:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x40
  2655  000041                     	ds	2
  2656  000043                     ??_updateMenu:
  2657  000043                     _printSortTimer$2459:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x42
  2661  000043                     	ds	2
  2662  000045                     printSortTimer@timeDiff:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x44
  2666  000045                     	ds	2
  2667  000047                     printSortTimer@i_1132:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x46
  2671  000047                     	ds	2
  2672  000049                     printSortTimer@i:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x48
  2676  000049                     	ds	2
  2677  00004B                     ??_handler:
  2678                           
  2679                           ; 1 bytes @ 0x4A
  2680  00004B                     	ds	16
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           
  2690 ;;
  2691 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2692 ;;
  2693 ;; *************** function _main *****************
  2694 ;; Defined at:
  2695 ;;		line 19 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;		None
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;Total ram usage:        0 bytes
  2714 ;; Hardware stack levels required when called:   13
  2715 ;; This function calls:
  2716 ;;		_I2C_Master_Init
  2717 ;;		_Test
  2718 ;;		_UI
  2719 ;;		_initLCD
  2720 ;;		_initTime
  2721 ;;		_initUI
  2722 ;;		_logRun
  2723 ;;		_machineConfig
  2724 ;;		_sort
  2725 ;;		_stopSignals
  2726 ;; This function is called by:
  2727 ;;		Startup code after reset
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text0
  2732  003F32                     __ptext0:
  2733                           	opt stack 0
  2734  003F32                     _main:
  2735                           	opt stack 18
  2736                           
  2737                           ;main.c: 20: machineConfig();
  2738                           
  2739                           ;incstack = 0
  2740  003F32  EC28  F024         	call	_machineConfig	;wreg free
  2741                           
  2742                           ;main.c: 21: initLCD();
  2743  003F36  EC78  F025         	call	_initLCD	;wreg free
  2744                           
  2745                           ;main.c: 24: RTCflag = 0;
  2746  003F3A  0E00               	movlw	0
  2747  003F3C  0100               	movlb	0	; () banked
  2748  003F3E  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2749  003F40  0E00               	movlw	0
  2750  003F42  6FE2               	movwf	_RTCflag& (0+255),b
  2751                           
  2752                           ;main.c: 25: if(RTCflag){
  2753  003F44  0100               	movlb	0	; () banked
  2754  003F46  51E2               	movf	_RTCflag& (0+255),w,b
  2755  003F48  0100               	movlb	0	; () banked
  2756  003F4A  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2757  003F4C  B4D8               	btfsc	status,2,c
  2758  003F4E  D016               	goto	l9007
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2762  003F50  0E20               	movlw	32
  2763  003F52  0100               	movlb	0	; () banked
  2764  003F54  6F80               	movwf	initTime@m& (0+255),b
  2765  003F56  0E15               	movlw	21
  2766  003F58  0100               	movlb	0	; () banked
  2767  003F5A  6F81               	movwf	initTime@h& (0+255),b
  2768  003F5C  0E04               	movlw	4
  2769  003F5E  0100               	movlb	0	; () banked
  2770  003F60  6F82               	movwf	initTime@w& (0+255),b
  2771  003F62  0E15               	movlw	21
  2772  003F64  0100               	movlb	0	; () banked
  2773  003F66  6F83               	movwf	initTime@DD& (0+255),b
  2774  003F68  0E03               	movlw	3
  2775  003F6A  0100               	movlb	0	; () banked
  2776  003F6C  6F84               	movwf	initTime@MM& (0+255),b
  2777  003F6E  0E17               	movlw	23
  2778  003F70  0100               	movlb	0	; () banked
  2779  003F72  6F85               	movwf	initTime@YY& (0+255),b
  2780  003F74  0E42               	movlw	66
  2781  003F76  EC2B  F028         	call	_initTime
  2782                           
  2783                           ;main.c: 27: }
  2784  003F7A  D00B               	goto	l9009
  2785  003F7C                     l9007:
  2786                           
  2787                           ;main.c: 28: else{
  2788                           ;main.c: 29: I2C_Master_Init(10000);
  2789  003F7C  0E10               	movlw	16
  2790  003F7E  0100               	movlb	0	; () banked
  2791  003F80  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2792  003F82  0E27               	movlw	39
  2793  003F84  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2794  003F86  0E00               	movlw	0
  2795  003F88  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2796  003F8A  0E00               	movlw	0
  2797  003F8C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2798  003F8E  ECF8  F023         	call	_I2C_Master_Init	;wreg free
  2799  003F92                     l9009:
  2800                           
  2801                           ;main.c: 30: }
  2802                           ;main.c: 32: initUI();
  2803  003F92  EC34  F027         	call	_initUI	;wreg free
  2804                           
  2805                           ;main.c: 33: first = 1;
  2806  003F96  0E00               	movlw	0
  2807  003F98  6E6C               	movwf	_first+1,c
  2808  003F9A  0E01               	movlw	1
  2809  003F9C  6E6B               	movwf	_first,c
  2810                           
  2811                           ;main.c: 44: switch(machine_state){
  2812                           
  2813                           ;main.c: 43: while(1){
  2814  003F9E  D017               	goto	l9031
  2815  003FA0                     l9013:
  2816                           
  2817                           ;main.c: 46: UI();
  2818  003FA0  EC65  F004         	call	_UI	;wreg free
  2819                           
  2820                           ;main.c: 47: break;
  2821  003FA4  D014               	goto	l9031
  2822  003FA6                     l9015:
  2823                           
  2824                           ;main.c: 49: sort();
  2825  003FA6  EC1A  F028         	call	_sort	;wreg free
  2826                           
  2827                           ;main.c: 50: break;
  2828  003FAA  D011               	goto	l9031
  2829  003FAC                     l9017:
  2830                           
  2831                           ;main.c: 52: stopSignals();
  2832  003FAC  EC59  F028         	call	_stopSignals	;wreg free
  2833                           
  2834                           ;main.c: 53: logRun();
  2835  003FB0  EC00  F01D         	call	_logRun	;wreg free
  2836                           
  2837                           ;main.c: 54: first = 1;
  2838  003FB4  0E00               	movlw	0
  2839  003FB6  6E6C               	movwf	_first+1,c
  2840  003FB8  0E01               	movlw	1
  2841  003FBA  6E6B               	movwf	_first,c
  2842                           
  2843                           ;main.c: 55: UI();
  2844  003FBC  EC65  F004         	call	_UI	;wreg free
  2845                           
  2846                           ;main.c: 56: break;
  2847  003FC0  D006               	goto	l9031
  2848  003FC2                     l9025:
  2849                           
  2850                           ;main.c: 58: Test();
  2851  003FC2  EC32  F01E         	call	_Test	;wreg free
  2852                           
  2853                           ;main.c: 59: break;
  2854  003FC6  D003               	goto	l9031
  2855  003FC8                     l9027:
  2856                           
  2857                           ;main.c: 61: stopSignals();
  2858  003FC8  EC59  F028         	call	_stopSignals	;wreg free
  2859  003FCC                     l491:
  2860  003FCC  D7FF               	goto	l491
  2861  003FCE                     l9031:
  2862  003FCE  0100               	movlb	0	; () banked
  2863  003FD0  51FC               	movf	_machine_state& (0+255),w,b
  2864                           
  2865                           ; Switch size 1, requested type "space"
  2866                           ; Number of cases is 5, Range of values is 0 to 4
  2867                           ; switch strategies available:
  2868                           ; Name         Instructions Cycles
  2869                           ; simple_byte           16     9 (average)
  2870                           ;	Chosen strategy is simple_byte
  2871  003FD2  0A00               	xorlw	0	; case 0
  2872  003FD4  B4D8               	btfsc	status,2,c
  2873  003FD6  D7E4               	goto	l9013
  2874  003FD8  0A01               	xorlw	1	; case 1
  2875  003FDA  B4D8               	btfsc	status,2,c
  2876  003FDC  D7E4               	goto	l9015
  2877  003FDE  0A03               	xorlw	3	; case 2
  2878  003FE0  B4D8               	btfsc	status,2,c
  2879  003FE2  D7E4               	goto	l9017
  2880  003FE4  0A01               	xorlw	1	; case 3
  2881  003FE6  B4D8               	btfsc	status,2,c
  2882  003FE8  D7EC               	goto	l9025
  2883  003FEA  0A07               	xorlw	7	; case 4
  2884  003FEC  B4D8               	btfsc	status,2,c
  2885  003FEE  D7EC               	goto	l9027
  2886                           
  2887                           ; BSR set to: 0
  2888                           
  2889                           ; BSR set to: 0
  2890  003FF0  D7EE               	goto	l9031
  2891  003FF2                     __end_of_main:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _stopSignals *****************
  2904 ;; Defined at:
  2905 ;;		line 70 in file "main.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    7
  2926 ;; This function calls:
  2927 ;;		Nothing
  2928 ;; This function is called by:
  2929 ;;		_main
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text1
  2934  0050B2                     __ptext1:
  2935                           	opt stack 0
  2936  0050B2                     _stopSignals:
  2937                           	opt stack 23
  2938                           
  2939                           ;main.c: 71: LATA = 0x00;
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;incstack = 0
  2943  0050B2  0E00               	movlw	0
  2944  0050B4  6E89               	movwf	3977,c	;volatile
  2945                           
  2946                           ;main.c: 72: LATB = 0x00;
  2947  0050B6  0E00               	movlw	0
  2948  0050B8  6E8A               	movwf	3978,c	;volatile
  2949                           
  2950                           ;main.c: 73: LATC = 0x00;
  2951  0050BA  0E00               	movlw	0
  2952  0050BC  6E8B               	movwf	3979,c	;volatile
  2953                           
  2954                           ;main.c: 74: LATD = 0x00;
  2955  0050BE  0E00               	movlw	0
  2956  0050C0  6E8C               	movwf	3980,c	;volatile
  2957                           
  2958                           ;main.c: 75: LATE = 0x00;
  2959  0050C2  0E00               	movlw	0
  2960  0050C4  6E8D               	movwf	3981,c	;volatile
  2961                           
  2962                           ;main.c: 76: TMR1ON = 0;
  2963  0050C6  90CD               	bcf	4045,0,c	;volatile
  2964                           
  2965                           ;main.c: 77: TMR3ON = 0;
  2966  0050C8  90B1               	bcf	4017,0,c	;volatile
  2967  0050CA  0012               	return		;funcret
  2968  0050CC                     __end_of_stopSignals:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           postdec1	equ	0xFE5
  2977                           fsr1l	equ	0xFE1
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _sort *****************
  2981 ;; Defined at:
  2982 ;;		line 58 in file "sort.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;Total ram usage:        0 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:   12
  3003 ;; This function calls:
  3004 ;;		_Distribution
  3005 ;;		_ID
  3006 ;;		_Loading
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text2
  3013  005034                     __ptext2:
  3014                           	opt stack 0
  3015  005034                     _sort:
  3016                           	opt stack 18
  3017                           
  3018                           ;sort.c: 59: if(machine_state == Sorting_state){
  3019                           
  3020                           ;incstack = 0
  3021  005034  0100               	movlb	0	; () banked
  3022  005036  05FC               	decf	_machine_state& (0+255),w,b
  3023  005038  B4D8               	btfsc	status,2,c
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;sort.c: 60: Loading();
  3027  00503A  ECB8  F008         	call	_Loading	;wreg free
  3028                           
  3029                           ;sort.c: 61: }
  3030                           ;sort.c: 62: if(machine_state == Sorting_state){
  3031  00503E  0100               	movlb	0	; () banked
  3032  005040  05FC               	decf	_machine_state& (0+255),w,b
  3033  005042  B4D8               	btfsc	status,2,c
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;sort.c: 63: ID();
  3037  005044  EC68  F018         	call	_ID	;wreg free
  3038                           
  3039                           ;sort.c: 64: }
  3040                           ;sort.c: 65: if(machine_state == Sorting_state){
  3041  005048  0100               	movlb	0	; () banked
  3042  00504A  05FC               	decf	_machine_state& (0+255),w,b
  3043  00504C  A4D8               	btfss	status,2,c
  3044  00504E  0012               	return	
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;sort.c: 66: Distribution();
  3048  005050  EC7D  F019         	call	_Distribution	;wreg free
  3049  005054  0012               	return	
  3050  005056                     __end_of_sort:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1l	equ	0xFE1
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _Loading *****************
  3063 ;; Defined at:
  3064 ;;		line 70 in file "sort.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  i               2   62[BANK0 ] int 
  3069 ;;  i               2   60[BANK0 ] int 
  3070 ;;  i               2   58[BANK0 ] int 
  3071 ;;  i               2   56[BANK0 ] int 
  3072 ;;  i               2   54[BANK0 ] int 
  3073 ;;  j               2   64[BANK0 ] int 
  3074 ;;  i               2   66[BANK0 ] int 
  3075 ;;  addr            2   51[BANK0 ] unsigned short 
  3076 ;;  byte1           1   53[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;Total ram usage:       19 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:   11
  3093 ;; This function calls:
  3094 ;;		_EEPROM_read
  3095 ;;		_EEPROM_write
  3096 ;;		_delay_ms
  3097 ;;		_getIR
  3098 ;;		_getMAG
  3099 ;;		_initGlobalVars
  3100 ;;		_initServos
  3101 ;;		_initSortTimer
  3102 ;;		_lcdInst
  3103 ;;		_readIR
  3104 ;; This function is called by:
  3105 ;;		_sort
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text3
  3110  001170                     __ptext3:
  3111                           	opt stack 0
  3112  001170                     _Loading:
  3113                           	opt stack 18
  3114                           
  3115                           ;sort.c: 71: if(first){
  3116                           
  3117                           ;incstack = 0
  3118  001170  506B               	movf	_first,w,c
  3119  001172  106C               	iorwf	_first+1,w,c
  3120  001174  B4D8               	btfsc	status,2,c
  3121  001176  D066               	goto	l6969
  3122                           
  3123                           ;sort.c: 72: initGlobalVars();
  3124  001178  EC69  F022         	call	_initGlobalVars	;wreg free
  3125                           
  3126                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3127  00117C  0E01               	movlw	1
  3128  00117E  EC98  F028         	call	_lcdInst
  3129  001182  0E68               	movlw	104
  3130  001184  0100               	movlb	0	; () banked
  3131  001186  6FB1               	movwf	??_Loading& (0+255),b
  3132  001188  0EE4               	movlw	228
  3133  00118A                     u8417:
  3134  00118A  2EE8               	decfsz	wreg,f,c
  3135  00118C  D7FE               	bra	u8417
  3136  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3137  001190  D7FC               	bra	u8417
  3138  001192  F000               	nop	
  3139                           
  3140                           ;sort.c: 74: initSortTimer();
  3141  001194  ECB6  F020         	call	_initSortTimer	;wreg free
  3142                           
  3143                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3144  001198  8A8B               	bsf	3979,5,c	;volatile
  3145                           
  3146                           ;sort.c: 80: sel = EEPROM_read(0);
  3147  00119A  0E00               	movlw	0
  3148  00119C  0100               	movlb	0	; () banked
  3149  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3150  0011A0  0E00               	movlw	0
  3151  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3152  0011A4  EC66  F028         	call	_EEPROM_read	;wreg free
  3153  0011A8  0100               	movlb	0	; () banked
  3154  0011AA  6FFD               	movwf	_sel& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3158  0011AC  0100               	movlb	0	; () banked
  3159  0011AE  51FD               	movf	_sel& (0+255),w,b
  3160  0011B0  0D0B               	mullw	11
  3161  0011B2  0E01               	movlw	1
  3162  0011B4  24F3               	addwf	prodl,w,c
  3163  0011B6  0100               	movlb	0	; () banked
  3164  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3165  0011BA  0E00               	movlw	0
  3166  0011BC  20F4               	addwfc	prodh,w,c
  3167  0011BE  0100               	movlb	0	; () banked
  3168  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3172  0011C2  0E7F               	movlw	127
  3173  0011C4  0100               	movlb	0	; () banked
  3174  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3178  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3179  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3180  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3181  0011D4  ECBC  F01E         	call	_EEPROM_write	;wreg free
  3182                           
  3183                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3184  0011D8  9A89               	bcf	3977,5,c	;volatile
  3185                           
  3186                           ;sort.c: 88: for(int i=0; i<46; i++){
  3187  0011DA  0E00               	movlw	0
  3188  0011DC  0100               	movlb	0	; () banked
  3189  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3190  0011E0  0E00               	movlw	0
  3191  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3192                           
  3193                           ; BSR set to: 0
  3194  0011E4  0100               	movlb	0	; () banked
  3195  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3196  0011E8  D008               	goto	l6959
  3197  0011EA  0100               	movlb	0	; () banked
  3198  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3199  0011EE  E126               	bnz	l740
  3200  0011F0  0E2E               	movlw	46
  3201  0011F2  0100               	movlb	0	; () banked
  3202  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3203  0011F6  B0D8               	btfsc	status,0,c
  3204  0011F8  D021               	goto	l740
  3205  0011FA                     l6959:
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3209  0011FA  BA89               	btfsc	3977,5,c	;volatile
  3210  0011FC  D004               	goto	u5520
  3211  0011FE  0100               	movlb	0	; () banked
  3212  001200  6BB1               	clrf	??_Loading& (0+255),b
  3213  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3214  001204  D002               	goto	u5538
  3215  001206                     u5520:
  3216  001206  0100               	movlb	0	; () banked
  3217  001208  6BB1               	clrf	??_Loading& (0+255),b
  3218  00120A                     u5538:
  3219  00120A  0100               	movlb	0	; () banked
  3220  00120C  3BB1               	swapf	??_Loading& (0+255),f,b
  3221  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3222  001210  5089               	movf	3977,w,c	;volatile
  3223  001212  0100               	movlb	0	; () banked
  3224  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3225  001216  0BDF               	andlw	-33
  3226  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3227  00121A  6E89               	movwf	3977,c	;volatile
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 90: delay_ms(45-i);
  3231  00121C  0100               	movlb	0	; () banked
  3232  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3233  001220  0800               	sublw	0
  3234  001222  0F2D               	addlw	45
  3235  001224  ECBA  F027         	call	_delay_ms
  3236  001228  0100               	movlb	0	; () banked
  3237  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3238  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241  00122E  0100               	movlb	0	; () banked
  3242  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3243  001232  D7E3               	goto	l6959
  3244  001234  0100               	movlb	0	; () banked
  3245  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3246  001238  E101               	bnz	u5540
  3247  00123A  D7DA               	goto	L1
  3248  00123C                     u5540:
  3249  00123C                     l740:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;sort.c: 91: }
  3253                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3254  00123C  8A89               	bsf	3977,5,c	;volatile
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sort.c: 95: initServos();
  3258  00123E  EC84  F024         	call	_initServos	;wreg free
  3259                           
  3260                           ;sort.c: 96: }
  3261  001242  0012               	return	
  3262  001244                     l6969:
  3263                           
  3264                           ;sort.c: 97: else{
  3265                           ;sort.c: 100: if(!f_loadingNewCan){
  3266  001244  0100               	movlb	0	; () banked
  3267  001246  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3268  001248  0100               	movlb	0	; () banked
  3269  00124A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3270  00124C  A4D8               	btfss	status,2,c
  3271  00124E  D018               	goto	l6985
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;sort.c: 102: getIR();
  3275  001250  EC21  F023         	call	_getIR	;wreg free
  3276                           
  3277                           ;sort.c: 104: if(!f_loadingNewCan){
  3278  001254  0100               	movlb	0	; () banked
  3279  001256  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3280  001258  0100               	movlb	0	; () banked
  3281  00125A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3282  00125C  B4D8               	btfsc	status,2,c
  3283  00125E  0012               	return	
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 108: else{
  3287                           ;sort.c: 109: count_total++;
  3288                           
  3289                           ; BSR set to: 0
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 106: }
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 105: return;
  3296  001260  0100               	movlb	0	; () banked
  3297  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3298  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;sort.c: 110: if(count_total == 12){
  3302  001266  0E0C               	movlw	12
  3303  001268  0100               	movlb	0	; () banked
  3304  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3305  00126C  0100               	movlb	0	; () banked
  3306  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3307  001270  A4D8               	btfss	status,2,c
  3308  001272  0012               	return	
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;sort.c: 111: f_lastCan = 1;
  3312  001274  0E00               	movlw	0
  3313  001276  0100               	movlb	0	; () banked
  3314  001278  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3315  00127A  0E01               	movlw	1
  3316  00127C  6FE8               	movwf	_f_lastCan& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 112: }
  3320                           ;sort.c: 113: }
  3321                           ;sort.c: 114: }
  3322                           
  3323                           ; BSR set to: 0
  3324  00127E  0012               	return	
  3325  001280                     l6985:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;sort.c: 117: else if(f_ID_receive){
  3329  001280  5063               	movf	_f_ID_receive,w,c
  3330  001282  1064               	iorwf	_f_ID_receive+1,w,c
  3331  001284  B4D8               	btfsc	status,2,c
  3332  001286  0012               	return	
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;sort.c: 118: f_loadingNewCan = 0;
  3336  001288  0E00               	movlw	0
  3337  00128A  0100               	movlb	0	; () banked
  3338  00128C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3339  00128E  0E00               	movlw	0
  3340  001290  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 119: _delay((unsigned long)((750)*(32000000/4000.0)));
  3344  001292  0E1F               	movlw	31
  3345  001294  0100               	movlb	0	; () banked
  3346  001296  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3347  001298  0E71               	movlw	113
  3348  00129A  0100               	movlb	0	; () banked
  3349  00129C  6FB1               	movwf	??_Loading& (0+255),b
  3350  00129E  0E1E               	movlw	30
  3351  0012A0                     u8427:
  3352  0012A0  2EE8               	decfsz	wreg,f,c
  3353  0012A2  D7FE               	bra	u8427
  3354  0012A4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3355  0012A6  D7FC               	bra	u8427
  3356  0012A8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3357  0012AA  D7FA               	bra	u8427
  3358  0012AC  F000               	nop	
  3359                           
  3360                           ;sort.c: 120: LATAbits.LATA5 = 0;
  3361  0012AE  9A89               	bcf	3977,5,c	;volatile
  3362                           
  3363                           ;sort.c: 124: getMAG();
  3364  0012B0  EC2A  F026         	call	_getMAG	;wreg free
  3365                           
  3366                           ;sort.c: 125: sensor_outputs[0] = MAG_signal;
  3367  0012B4  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3368  0012B8  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3369                           
  3370                           ;sort.c: 127: if(sensor_outputs[0]){
  3371  0012BC  0100               	movlb	0	; () banked
  3372  0012BE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3373  0012C0  0100               	movlb	0	; () banked
  3374  0012C2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3375  0012C4  B4D8               	btfsc	status,2,c
  3376  0012C6  D01D               	goto	l7011
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sort.c: 128: for(int i = 0; i<2500; i++){
  3380  0012C8  0E00               	movlw	0
  3381  0012CA  0100               	movlb	0	; () banked
  3382  0012CC  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3383  0012CE  0E00               	movlw	0
  3384  0012D0  6FB6               	movwf	Loading@i_1103& (0+255),b
  3385  0012D2                     l7001:
  3386                           
  3387                           ; BSR set to: 0
  3388  0012D2  0100               	movlb	0	; () banked
  3389  0012D4  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3390  0012D6  D008               	goto	l750
  3391  0012D8  0EC4               	movlw	196
  3392  0012DA  0100               	movlb	0	; () banked
  3393  0012DC  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3394  0012DE  0E09               	movlw	9
  3395  0012E0  0100               	movlb	0	; () banked
  3396  0012E2  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3397  0012E4  B0D8               	btfsc	status,0,c
  3398  0012E6  D02A               	goto	l7023
  3399  0012E8                     l750:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3403  0012E8  8889               	bsf	3977,4,c	;volatile
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;sort.c: 130: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3407  0012EA  0EC8               	movlw	200
  3408  0012EC                     u8437:
  3409  0012EC  2EE8               	decfsz	wreg,f,c
  3410  0012EE  D7FE               	bra	u8437
  3411                           
  3412                           ;sort.c: 131: LATAbits.LATA4 = 0;
  3413  0012F0  9889               	bcf	3977,4,c	;volatile
  3414                           
  3415                           ;sort.c: 132: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3416  0012F2  0E42               	movlw	66
  3417  0012F4                     u8447:
  3418  0012F4  2EE8               	decfsz	wreg,f,c
  3419  0012F6  D7FE               	bra	u8447
  3420  0012F8  D000               	nop2	
  3421  0012FA  0100               	movlb	0	; () banked
  3422  0012FC  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3423  0012FE  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3424  001300  D7E8               	goto	l7001
  3425  001302                     l7011:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;sort.c: 135: else{
  3429                           ;sort.c: 136: for(int i = 0; i<2500; i++){
  3430  001302  0E00               	movlw	0
  3431  001304  0100               	movlb	0	; () banked
  3432  001306  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3433  001308  0E00               	movlw	0
  3434  00130A  6FB8               	movwf	Loading@i_1104& (0+255),b
  3435  00130C                     l7013:
  3436                           
  3437                           ; BSR set to: 0
  3438  00130C  0100               	movlb	0	; () banked
  3439  00130E  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3440  001310  D008               	goto	l753
  3441  001312  0EC4               	movlw	196
  3442  001314  0100               	movlb	0	; () banked
  3443  001316  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3444  001318  0E09               	movlw	9
  3445  00131A  0100               	movlb	0	; () banked
  3446  00131C  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3447  00131E  B0D8               	btfsc	status,0,c
  3448  001320  D00D               	goto	l7023
  3449  001322                     l753:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;sort.c: 137: LATAbits.LATA4 = 1;
  3453  001322  8889               	bsf	3977,4,c	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;sort.c: 138: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3457  001324  0E9A               	movlw	154
  3458  001326                     u8457:
  3459  001326  2EE8               	decfsz	wreg,f,c
  3460  001328  D7FE               	bra	u8457
  3461  00132A  D000               	nop2	
  3462                           
  3463                           ;sort.c: 139: LATAbits.LATA4 = 0;
  3464  00132C  9889               	bcf	3977,4,c	;volatile
  3465                           
  3466                           ;sort.c: 140: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3467  00132E  0E70               	movlw	112
  3468  001330                     u8467:
  3469  001330  2EE8               	decfsz	wreg,f,c
  3470  001332  D7FE               	bra	u8467
  3471  001334  0100               	movlb	0	; () banked
  3472  001336  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3473  001338  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3474  00133A  D7E8               	goto	l7013
  3475  00133C                     l7023:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 141: }
  3479                           ;sort.c: 142: }
  3480                           ;sort.c: 144: _delay((unsigned long)((350)*(32000000/4000.0)));
  3481  00133C  0E0F               	movlw	15
  3482  00133E  0100               	movlb	0	; () banked
  3483  001340  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3484  001342  0E35               	movlw	53
  3485  001344  0100               	movlb	0	; () banked
  3486  001346  6FB1               	movwf	??_Loading& (0+255),b
  3487  001348  0E51               	movlw	81
  3488  00134A                     u8477:
  3489  00134A  2EE8               	decfsz	wreg,f,c
  3490  00134C  D7FE               	bra	u8477
  3491  00134E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3492  001350  D7FC               	bra	u8477
  3493  001352  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3494  001354  D7FA               	bra	u8477
  3495                           
  3496                           ;sort.c: 146: readIR();
  3497  001356  EC2C  F025         	call	_readIR	;wreg free
  3498                           
  3499                           ;sort.c: 147: if(IR_signal==1){
  3500  00135A  0100               	movlb	0	; () banked
  3501  00135C  05DE               	decf	_IR_signal& (0+255),w,b
  3502  00135E  0100               	movlb	0	; () banked
  3503  001360  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3504  001362  A4D8               	btfss	status,2,c
  3505  001364  D147               	goto	l7141
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;sort.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  3509  001366  0E05               	movlw	5
  3510  001368  0100               	movlb	0	; () banked
  3511  00136A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3512  00136C  0E0F               	movlw	15
  3513  00136E  0100               	movlb	0	; () banked
  3514  001370  6FB1               	movwf	??_Loading& (0+255),b
  3515  001372  0EF1               	movlw	241
  3516  001374                     u8487:
  3517  001374  2EE8               	decfsz	wreg,f,c
  3518  001376  D7FE               	bra	u8487
  3519  001378  2FB1               	decfsz	??_Loading& (0+255),f,b
  3520  00137A  D7FC               	bra	u8487
  3521  00137C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3522  00137E  D7FA               	bra	u8487
  3523                           
  3524                           ;sort.c: 149: readIR();
  3525  001380  EC2C  F025         	call	_readIR	;wreg free
  3526                           
  3527                           ;sort.c: 150: if(IR_signal==1){
  3528  001384  0100               	movlb	0	; () banked
  3529  001386  05DE               	decf	_IR_signal& (0+255),w,b
  3530  001388  0100               	movlb	0	; () banked
  3531  00138A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3532  00138C  A4D8               	btfss	status,2,c
  3533  00138E  D040               	goto	l7061
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;sort.c: 151: if(sensor_outputs[0]){
  3537  001390  0100               	movlb	0	; () banked
  3538  001392  51DA               	movf	_sensor_outputs& (0+255),w,b
  3539  001394  0100               	movlb	0	; () banked
  3540  001396  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3541  001398  B4D8               	btfsc	status,2,c
  3542  00139A  D01D               	goto	l7049
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;sort.c: 152: for(int i = 0; i<2500; i++){
  3546  00139C  0E00               	movlw	0
  3547  00139E  0100               	movlb	0	; () banked
  3548  0013A0  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3549  0013A2  0E00               	movlw	0
  3550  0013A4  6FBA               	movwf	Loading@i_1106& (0+255),b
  3551  0013A6                     l7039:
  3552                           
  3553                           ; BSR set to: 0
  3554  0013A6  0100               	movlb	0	; () banked
  3555  0013A8  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3556  0013AA  D008               	goto	l758
  3557  0013AC  0EC4               	movlw	196
  3558  0013AE  0100               	movlb	0	; () banked
  3559  0013B0  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3560  0013B2  0E09               	movlw	9
  3561  0013B4  0100               	movlb	0	; () banked
  3562  0013B6  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3563  0013B8  B0D8               	btfsc	status,0,c
  3564  0013BA  D02A               	goto	l7061
  3565  0013BC                     l758:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3569  0013BC  8889               	bsf	3977,4,c	;volatile
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3573  0013BE  0EC8               	movlw	200
  3574  0013C0                     u8497:
  3575  0013C0  2EE8               	decfsz	wreg,f,c
  3576  0013C2  D7FE               	bra	u8497
  3577                           
  3578                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3579  0013C4  9889               	bcf	3977,4,c	;volatile
  3580                           
  3581                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3582  0013C6  0E42               	movlw	66
  3583  0013C8                     u8507:
  3584  0013C8  2EE8               	decfsz	wreg,f,c
  3585  0013CA  D7FE               	bra	u8507
  3586  0013CC  D000               	nop2	
  3587  0013CE  0100               	movlb	0	; () banked
  3588  0013D0  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3589  0013D2  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3590  0013D4  D7E8               	goto	l7039
  3591  0013D6                     l7049:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;sort.c: 159: else{
  3595                           ;sort.c: 160: for(int i = 0; i<2500; i++){
  3596  0013D6  0E00               	movlw	0
  3597  0013D8  0100               	movlb	0	; () banked
  3598  0013DA  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3599  0013DC  0E00               	movlw	0
  3600  0013DE  6FBC               	movwf	Loading@i_1107& (0+255),b
  3601  0013E0                     l7051:
  3602                           
  3603                           ; BSR set to: 0
  3604  0013E0  0100               	movlb	0	; () banked
  3605  0013E2  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3606  0013E4  D008               	goto	l761
  3607  0013E6  0EC4               	movlw	196
  3608  0013E8  0100               	movlb	0	; () banked
  3609  0013EA  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3610  0013EC  0E09               	movlw	9
  3611  0013EE  0100               	movlb	0	; () banked
  3612  0013F0  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3613  0013F2  B0D8               	btfsc	status,0,c
  3614  0013F4  D00D               	goto	l7061
  3615  0013F6                     l761:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3619  0013F6  8889               	bsf	3977,4,c	;volatile
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3623  0013F8  0E9A               	movlw	154
  3624  0013FA                     u8517:
  3625  0013FA  2EE8               	decfsz	wreg,f,c
  3626  0013FC  D7FE               	bra	u8517
  3627  0013FE  D000               	nop2	
  3628                           
  3629                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3630  001400  9889               	bcf	3977,4,c	;volatile
  3631                           
  3632                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3633  001402  0E70               	movlw	112
  3634  001404                     u8527:
  3635  001404  2EE8               	decfsz	wreg,f,c
  3636  001406  D7FE               	bra	u8527
  3637  001408  0100               	movlb	0	; () banked
  3638  00140A  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3639  00140C  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3640  00140E  D7E8               	goto	l7051
  3641  001410                     l7061:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;sort.c: 165: }
  3645                           ;sort.c: 166: }
  3646                           ;sort.c: 167: }
  3647                           ;sort.c: 169: _delay((unsigned long)((350)*(32000000/4000.0)));
  3648  001410  0E0F               	movlw	15
  3649  001412  0100               	movlb	0	; () banked
  3650  001414  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3651  001416  0E35               	movlw	53
  3652  001418  0100               	movlb	0	; () banked
  3653  00141A  6FB1               	movwf	??_Loading& (0+255),b
  3654  00141C  0E51               	movlw	81
  3655  00141E                     u8537:
  3656  00141E  2EE8               	decfsz	wreg,f,c
  3657  001420  D7FE               	bra	u8537
  3658  001422  2FB1               	decfsz	??_Loading& (0+255),f,b
  3659  001424  D7FC               	bra	u8537
  3660  001426  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3661  001428  D7FA               	bra	u8537
  3662                           
  3663                           ;sort.c: 171: int j = 1;
  3664  00142A  0E00               	movlw	0
  3665  00142C  0100               	movlb	0	; () banked
  3666  00142E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3667  001430  0E01               	movlw	1
  3668  001432  6FC0               	movwf	Loading@j& (0+255),b
  3669                           
  3670                           ;sort.c: 172: while(IR_signal == 1){
  3671  001434  D0D8               	goto	l7139
  3672  001436                     l7065:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;sort.c: 173: readIR();
  3676  001436  EC2C  F025         	call	_readIR	;wreg free
  3677                           
  3678                           ;sort.c: 174: if(j == 10){
  3679  00143A  0E0A               	movlw	10
  3680  00143C  0100               	movlb	0	; () banked
  3681  00143E  19C0               	xorwf	Loading@j& (0+255),w,b
  3682  001440  0100               	movlb	0	; () banked
  3683  001442  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3684  001444  A4D8               	btfss	status,2,c
  3685  001446  D016               	goto	l7073
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 175: LATAbits.LATA5 = !LATAbits.LATA5;
  3689  001448  BA89               	btfsc	3977,5,c	;volatile
  3690  00144A  D004               	goto	u5720
  3691  00144C  0100               	movlb	0	; () banked
  3692  00144E  6BB1               	clrf	??_Loading& (0+255),b
  3693  001450  2BB1               	incf	??_Loading& (0+255),f,b
  3694  001452  D002               	goto	u5738
  3695  001454                     u5720:
  3696  001454  0100               	movlb	0	; () banked
  3697  001456  6BB1               	clrf	??_Loading& (0+255),b
  3698  001458                     u5738:
  3699  001458  0100               	movlb	0	; () banked
  3700  00145A  3BB1               	swapf	??_Loading& (0+255),f,b
  3701  00145C  47B1               	rlncf	??_Loading& (0+255),f,b
  3702  00145E  5089               	movf	3977,w,c	;volatile
  3703  001460  0100               	movlb	0	; () banked
  3704  001462  19B1               	xorwf	??_Loading& (0+255),w,b
  3705  001464  0BDF               	andlw	-33
  3706  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3707  001468  6E89               	movwf	3977,c	;volatile
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;sort.c: 176: j = 0;
  3711  00146A  0E00               	movlw	0
  3712  00146C  0100               	movlb	0	; () banked
  3713  00146E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3714  001470  0E00               	movlw	0
  3715  001472  6FC0               	movwf	Loading@j& (0+255),b
  3716  001474                     l7073:
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 177: }
  3720                           ;sort.c: 178: if(IR_signal==1){
  3721  001474  0100               	movlb	0	; () banked
  3722  001476  05DE               	decf	_IR_signal& (0+255),w,b
  3723  001478  0100               	movlb	0	; () banked
  3724  00147A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3725  00147C  A4D8               	btfss	status,2,c
  3726  00147E  D098               	goto	l7127
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3730  001480  0E0F               	movlw	15
  3731  001482  0100               	movlb	0	; () banked
  3732  001484  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3733  001486  0E35               	movlw	53
  3734  001488  0100               	movlb	0	; () banked
  3735  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3736  00148C  0E51               	movlw	81
  3737  00148E                     u8547:
  3738  00148E  2EE8               	decfsz	wreg,f,c
  3739  001490  D7FE               	bra	u8547
  3740  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3741  001494  D7FC               	bra	u8547
  3742  001496  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3743  001498  D7FA               	bra	u8547
  3744                           
  3745                           ;sort.c: 180: readIR();
  3746  00149A  EC2C  F025         	call	_readIR	;wreg free
  3747                           
  3748                           ;sort.c: 181: if(IR_signal==1){
  3749  00149E  0100               	movlb	0	; () banked
  3750  0014A0  05DE               	decf	_IR_signal& (0+255),w,b
  3751  0014A2  0100               	movlb	0	; () banked
  3752  0014A4  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3753  0014A6  A4D8               	btfss	status,2,c
  3754  0014A8  D07F               	goto	l767
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;sort.c: 182: if(sensor_outputs[0]){
  3758  0014AA  0100               	movlb	0	; () banked
  3759  0014AC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3760  0014AE  0100               	movlb	0	; () banked
  3761  0014B0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3762  0014B2  B4D8               	btfsc	status,2,c
  3763  0014B4  D011               	goto	l7089
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;sort.c: 183: LATAbits.LATA4 = 1;
  3767  0014B6  8889               	bsf	3977,4,c	;volatile
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 184: _delay((unsigned long)((250)*(32000000/4000.0)));
  3771  0014B8  0E0B               	movlw	11
  3772  0014BA  0100               	movlb	0	; () banked
  3773  0014BC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3774  0014BE  0E26               	movlw	38
  3775  0014C0  0100               	movlb	0	; () banked
  3776  0014C2  6FB1               	movwf	??_Loading& (0+255),b
  3777  0014C4  0E5D               	movlw	93
  3778  0014C6                     u8557:
  3779  0014C6  2EE8               	decfsz	wreg,f,c
  3780  0014C8  D7FE               	bra	u8557
  3781  0014CA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3782  0014CC  D7FC               	bra	u8557
  3783  0014CE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3784  0014D0  D7FA               	bra	u8557
  3785  0014D2  D000               	nop2	
  3786                           
  3787                           ;sort.c: 185: LATAbits.LATA4 = 0;
  3788  0014D4  9889               	bcf	3977,4,c	;volatile
  3789                           
  3790                           ;sort.c: 186: }
  3791  0014D6  D068               	goto	l767
  3792  0014D8                     l7089:
  3793                           
  3794                           ;sort.c: 187: else{
  3795                           ;sort.c: 188: for(int i = 0; i<2500; i++){
  3796  0014D8  0E00               	movlw	0
  3797  0014DA  0100               	movlb	0	; () banked
  3798  0014DC  6FBF               	movwf	(Loading@i_1109+1)& (0+255),b
  3799  0014DE  0E00               	movlw	0
  3800  0014E0  6FBE               	movwf	Loading@i_1109& (0+255),b
  3801  0014E2                     l7091:
  3802                           
  3803                           ; BSR set to: 0
  3804  0014E2  0100               	movlb	0	; () banked
  3805  0014E4  BFBF               	btfsc	(Loading@i_1109+1)& (0+255),7,b
  3806  0014E6  D041               	goto	l7119
  3807  0014E8  0EC4               	movlw	196
  3808  0014EA  0100               	movlb	0	; () banked
  3809  0014EC  5DBE               	subwf	Loading@i_1109& (0+255),w,b
  3810  0014EE  0E09               	movlw	9
  3811  0014F0  0100               	movlb	0	; () banked
  3812  0014F2  59BF               	subwfb	(Loading@i_1109+1)& (0+255),w,b
  3813  0014F4  B0D8               	btfsc	status,0,c
  3814  0014F6  D058               	goto	l767
  3815  0014F8  D038               	goto	l7119
  3816  0014FA                     l773:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;sort.c: 191: LATAbits.LATA4 = 1;
  3820  0014FA  8889               	bsf	3977,4,c	;volatile
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;sort.c: 192: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3824  0014FC  0EC8               	movlw	200
  3825  0014FE                     u8567:
  3826  0014FE  2EE8               	decfsz	wreg,f,c
  3827  001500  D7FE               	bra	u8567
  3828                           
  3829                           ;sort.c: 193: LATAbits.LATA4 = 0;
  3830  001502  9889               	bcf	3977,4,c	;volatile
  3831                           
  3832                           ;sort.c: 194: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3833  001504  0E42               	movlw	66
  3834  001506                     u8577:
  3835  001506  2EE8               	decfsz	wreg,f,c
  3836  001508  D7FE               	bra	u8577
  3837  00150A  D01C               	goto	L2
  3838  00150C                     l775:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3842  00150C  8889               	bsf	3977,4,c	;volatile
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;sort.c: 198: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3846  00150E  0ED5               	movlw	213
  3847  001510                     u8587:
  3848  001510  2EE8               	decfsz	wreg,f,c
  3849  001512  D7FE               	bra	u8587
  3850  001514  F000               	nop	
  3851                           
  3852                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3853  001516  9889               	bcf	3977,4,c	;volatile
  3854                           
  3855                           ;sort.c: 200: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3856  001518  0E35               	movlw	53
  3857  00151A                     u8597:
  3858  00151A  2EE8               	decfsz	wreg,f,c
  3859  00151C  D7FE               	bra	u8597
  3860  00151E  D01D               	goto	L3
  3861  001520                     l776:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3865  001520  8889               	bsf	3977,4,c	;volatile
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 204: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3869  001522  0EE2               	movlw	226
  3870  001524                     u8607:
  3871  001524  2EE8               	decfsz	wreg,f,c
  3872  001526  D7FE               	bra	u8607
  3873  001528  D000               	nop2	
  3874                           
  3875                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3876  00152A  9889               	bcf	3977,4,c	;volatile
  3877                           
  3878                           ;sort.c: 206: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3879  00152C  0E28               	movlw	40
  3880  00152E                     u8617:
  3881  00152E  2EE8               	decfsz	wreg,f,c
  3882  001530  D7FE               	bra	u8617
  3883                           
  3884                           ;sort.c: 207: break;
  3885  001532  D036               	goto	l7121
  3886  001534                     l777:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3890  001534  8889               	bsf	3977,4,c	;volatile
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;sort.c: 210: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3894  001536  0EF0               	movlw	240
  3895  001538                     u8627:
  3896  001538  2EE8               	decfsz	wreg,f,c
  3897  00153A  D7FE               	bra	u8627
  3898                           
  3899                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3900  00153C  9889               	bcf	3977,4,c	;volatile
  3901                           
  3902                           ;sort.c: 212: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3903  00153E  0E1A               	movlw	26
  3904  001540                     u8637:
  3905  001540  2EE8               	decfsz	wreg,f,c
  3906  001542  D7FE               	bra	u8637
  3907  001544                     L2:
  3908  001544  D000               	nop2	
  3909                           
  3910                           ;sort.c: 213: break;
  3911  001546  D02C               	goto	l7121
  3912  001548                     l778:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3916  001548  8889               	bsf	3977,4,c	;volatile
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 216: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3920  00154A  0EFD               	movlw	253
  3921  00154C                     u8647:
  3922  00154C  2EE8               	decfsz	wreg,f,c
  3923  00154E  D7FE               	bra	u8647
  3924  001550  F000               	nop	
  3925                           
  3926                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3927  001552  9889               	bcf	3977,4,c	;volatile
  3928                           
  3929                           ;sort.c: 218: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3930  001554  0E0D               	movlw	13
  3931  001556                     u8657:
  3932  001556  2EE8               	decfsz	wreg,f,c
  3933  001558  D7FE               	bra	u8657
  3934  00155A                     L3:
  3935  00155A  F000               	nop	
  3936                           
  3937                           ;sort.c: 219: break;
  3938  00155C  D021               	goto	l7121
  3939  00155E                     l779:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3943  00155E  8889               	bsf	3977,4,c	;volatile
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;sort.c: 222: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3947  001560  0EA0               	movlw	160
  3948  001562                     u8667:
  3949  001562  D000               	nop2	
  3950  001564  2EE8               	decfsz	wreg,f,c
  3951  001566  D7FD               	bra	u8667
  3952                           
  3953                           ;sort.c: 224: }
  3954                           
  3955                           ;sort.c: 223: break;
  3956  001568  D01B               	goto	l7121
  3957  00156A                     l7119:
  3958  00156A  C0C0  F0B1         	movff	Loading@j,??_Loading
  3959  00156E  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3960                           
  3961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3962                           ; Switch size 1, requested type "space"
  3963                           ; Number of cases is 1, Range of values is 0 to 0
  3964                           ; switch strategies available:
  3965                           ; Name         Instructions Cycles
  3966                           ; simple_byte            4     3 (average)
  3967                           ;	Chosen strategy is simple_byte
  3968  001572  0100               	movlb	0	; () banked
  3969  001574  51B2               	movf	(??_Loading+1)& (0+255),w,b
  3970  001576  0A00               	xorlw	0	; case 0
  3971  001578  A4D8               	btfss	status,2,c
  3972  00157A  D7F1               	goto	l779
  3973                           
  3974                           ; BSR set to: 0
  3975                           ; Switch size 1, requested type "space"
  3976                           ; Number of cases is 5, Range of values is 1 to 5
  3977                           ; switch strategies available:
  3978                           ; Name         Instructions Cycles
  3979                           ; simple_byte           16     9 (average)
  3980                           ;	Chosen strategy is simple_byte
  3981  00157C  0100               	movlb	0	; () banked
  3982  00157E  51B1               	movf	??_Loading& (0+255),w,b
  3983  001580  0A01               	xorlw	1	; case 1
  3984  001582  B4D8               	btfsc	status,2,c
  3985  001584  D7BA               	goto	l773
  3986  001586  0A03               	xorlw	3	; case 2
  3987  001588  B4D8               	btfsc	status,2,c
  3988  00158A  D7C0               	goto	l775
  3989  00158C  0A01               	xorlw	1	; case 3
  3990  00158E  B4D8               	btfsc	status,2,c
  3991  001590  D7C7               	goto	l776
  3992  001592  0A07               	xorlw	7	; case 4
  3993  001594  B4D8               	btfsc	status,2,c
  3994  001596  D7CE               	goto	l777
  3995  001598  0A01               	xorlw	1	; case 5
  3996  00159A  B4D8               	btfsc	status,2,c
  3997  00159C  D7D5               	goto	l778
  3998  00159E  D7DF               	goto	l779
  3999  0015A0                     l7121:
  4000  0015A0  0100               	movlb	0	; () banked
  4001  0015A2  4BBE               	infsnz	Loading@i_1109& (0+255),f,b
  4002  0015A4  2BBF               	incf	(Loading@i_1109+1)& (0+255),f,b
  4003  0015A6  D79D               	goto	l7091
  4004  0015A8                     l767:
  4005                           
  4006                           ;sort.c: 225: }
  4007                           ;sort.c: 226: }
  4008                           ;sort.c: 227: }
  4009                           ;sort.c: 228: LATAbits.LATA4 = 0;
  4010  0015A8  9889               	bcf	3977,4,c	;volatile
  4011                           
  4012                           ;sort.c: 229: j++;
  4013  0015AA  0100               	movlb	0	; () banked
  4014  0015AC  4BC0               	infsnz	Loading@j& (0+255),f,b
  4015  0015AE  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4016  0015B0                     l7127:
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;sort.c: 230: }
  4020                           ;sort.c: 232: if(!IR_signal){
  4021  0015B0  0100               	movlb	0	; () banked
  4022  0015B2  51DE               	movf	_IR_signal& (0+255),w,b
  4023  0015B4  0100               	movlb	0	; () banked
  4024  0015B6  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4025  0015B8  A4D8               	btfss	status,2,c
  4026  0015BA  D015               	goto	l7139
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;sort.c: 233: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4030  0015BC  0E29               	movlw	41
  4031  0015BE  0100               	movlb	0	; () banked
  4032  0015C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4033  0015C2  0E96               	movlw	150
  4034  0015C4  0100               	movlb	0	; () banked
  4035  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  4036  0015C8  0E7F               	movlw	127
  4037  0015CA                     u8677:
  4038  0015CA  2EE8               	decfsz	wreg,f,c
  4039  0015CC  D7FE               	bra	u8677
  4040  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4041  0015D0  D7FC               	bra	u8677
  4042  0015D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4043  0015D4  D7FA               	bra	u8677
  4044                           
  4045                           ;sort.c: 234: readIR();
  4046  0015D6  EC2C  F025         	call	_readIR	;wreg free
  4047                           
  4048                           ;sort.c: 235: if(IR_signal==1){
  4049  0015DA  0100               	movlb	0	; () banked
  4050  0015DC  05DE               	decf	_IR_signal& (0+255),w,b
  4051  0015DE  0100               	movlb	0	; () banked
  4052  0015E0  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4053  0015E2  A4D8               	btfss	status,2,c
  4054  0015E4  D006               	goto	l783
  4055  0015E6                     l7139:
  4056                           
  4057                           ; BSR set to: 0
  4058  0015E6  0100               	movlb	0	; () banked
  4059  0015E8  05DE               	decf	_IR_signal& (0+255),w,b
  4060  0015EA  0100               	movlb	0	; () banked
  4061  0015EC  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4062  0015EE  B4D8               	btfsc	status,2,c
  4063  0015F0  D722               	goto	l7065
  4064  0015F2                     l783:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;sort.c: 240: }
  4068                           ;sort.c: 241: }
  4069                           ;sort.c: 242: }
  4070                           ;sort.c: 243: LATAbits.LATA5 = 0;
  4071  0015F2  9A89               	bcf	3977,5,c	;volatile
  4072  0015F4                     l7141:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 244: }
  4076                           ;sort.c: 245: f_can_coming_to_ID = 1;
  4077  0015F4  0E00               	movlw	0
  4078  0015F6  6E66               	movwf	_f_can_coming_to_ID+1,c
  4079  0015F8  0E01               	movlw	1
  4080  0015FA  6E65               	movwf	_f_can_coming_to_ID,c
  4081                           
  4082                           ; BSR set to: 0
  4083                           
  4084                           ; BSR set to: 0
  4085  0015FC  0012               	return	
  4086  0015FE                     __end_of_Loading:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           prodh	equ	0xFF4
  4093                           prodl	equ	0xFF3
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1l	equ	0xFE1
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _initSortTimer *****************
  4101 ;; Defined at:
  4102 ;;		line 414 in file "sort.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  i               2    8[BANK0 ] int 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;Total ram usage:        5 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:   10
  4123 ;; This function calls:
  4124 ;;		_getRTC
  4125 ;; This function is called by:
  4126 ;;		_Loading
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text4
  4131  00416C                     __ptext4:
  4132                           	opt stack 0
  4133  00416C                     _initSortTimer:
  4134                           	opt stack 18
  4135                           
  4136                           ;sort.c: 416: getRTC();
  4137                           
  4138                           ;incstack = 0
  4139  00416C  ECA2  F021         	call	_getRTC	;wreg free
  4140                           
  4141                           ;sort.c: 417: for(int i = 0; i < 7; i++){
  4142  004170  0E00               	movlw	0
  4143  004172  0100               	movlb	0	; () banked
  4144  004174  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4145  004176  0E00               	movlw	0
  4146  004178  6F88               	movwf	initSortTimer@i& (0+255),b
  4147  00417A                     l6543:
  4148                           
  4149                           ; BSR set to: 0
  4150  00417A  0100               	movlb	0	; () banked
  4151  00417C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4152  00417E  D008               	goto	l6547
  4153  004180  0100               	movlb	0	; () banked
  4154  004182  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4155  004184  E140               	bnz	l6553
  4156  004186  0E07               	movlw	7
  4157  004188  0100               	movlb	0	; () banked
  4158  00418A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4159  00418C  B0D8               	btfsc	status,0,c
  4160  00418E  D03B               	goto	l6553
  4161  004190                     l6547:
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;sort.c: 418: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4165  004190  0E24               	movlw	low _time
  4166  004192  0100               	movlb	0	; () banked
  4167  004194  2588               	addwf	initSortTimer@i& (0+255),w,b
  4168  004196  6ED9               	movwf	fsr2l,c
  4169  004198  0E01               	movlw	high _time
  4170  00419A  0100               	movlb	0	; () banked
  4171  00419C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4172  00419E  6EDA               	movwf	fsr2h,c
  4173  0041A0  50DF               	movf	indf2,w,c
  4174  0041A2  0100               	movlb	0	; () banked
  4175  0041A4  6F85               	movwf	??_initSortTimer& (0+255),b
  4176  0041A6  0100               	movlb	0	; () banked
  4177  0041A8  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4178  0041AA  0E0F               	movlw	15
  4179  0041AC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4180  0041AE  0E0F               	movlw	15
  4181  0041B0  0100               	movlb	0	; () banked
  4182  0041B2  1785               	andwf	??_initSortTimer& (0+255),f,b
  4183  0041B4  0100               	movlb	0	; () banked
  4184  0041B6  5185               	movf	??_initSortTimer& (0+255),w,b
  4185  0041B8  0D0A               	mullw	10
  4186  0041BA  0E24               	movlw	low _time
  4187  0041BC  0100               	movlb	0	; () banked
  4188  0041BE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4189  0041C0  6ED9               	movwf	fsr2l,c
  4190  0041C2  0E01               	movlw	high _time
  4191  0041C4  0100               	movlb	0	; () banked
  4192  0041C6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4193  0041C8  6EDA               	movwf	fsr2h,c
  4194  0041CA  50DF               	movf	indf2,w,c
  4195  0041CC  0B0F               	andlw	15
  4196  0041CE  0100               	movlb	0	; () banked
  4197  0041D0  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4198  0041D2  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4199  0041D4  50F3               	movf	prodl,w,c
  4200  0041D6  0100               	movlb	0	; () banked
  4201  0041D8  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4202  0041DA  50F4               	movf	prodh,w,c
  4203  0041DC  0100               	movlb	0	; () banked
  4204  0041DE  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4205  0041E0  90D8               	bcf	status,0,c
  4206  0041E2  0100               	movlb	0	; () banked
  4207  0041E4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4208  0041E6  6ED9               	movwf	fsr2l,c
  4209  0041E8  0100               	movlb	0	; () banked
  4210  0041EA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4211  0041EC  6EDA               	movwf	fsr2h,c
  4212  0041EE  0E0E               	movlw	low _startTime
  4213  0041F0  26D9               	addwf	fsr2l,f,c
  4214  0041F2  0E01               	movlw	high _startTime
  4215  0041F4  22DA               	addwfc	fsr2h,f,c
  4216  0041F6  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4217  0041FA  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4218                           
  4219                           ; BSR set to: 0
  4220  0041FE  0100               	movlb	0	; () banked
  4221  004200  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4222  004202  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4223  004204  D7BA               	goto	l6543
  4224  004206                     l6553:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;sort.c: 419: }
  4228                           ;sort.c: 421: T0CON = 0b00010111;
  4229  004206  0E17               	movlw	23
  4230  004208  6ED5               	movwf	4053,c	;volatile
  4231                           
  4232                           ;sort.c: 430: TMR0H = 0b10000101;
  4233  00420A  0E85               	movlw	133
  4234  00420C  6ED7               	movwf	4055,c	;volatile
  4235                           
  4236                           ;sort.c: 431: TMR0L = 0b11101110;
  4237  00420E  0EEE               	movlw	238
  4238  004210  6ED6               	movwf	4054,c	;volatile
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;sort.c: 432: TMR0ON = 1;
  4242  004212  8ED5               	bsf	4053,7,c	;volatile
  4243                           
  4244                           ; BSR set to: 0
  4245  004214  0012               	return		;funcret
  4246  004216                     __end_of_initSortTimer:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postdec1	equ	0xFE5
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _initGlobalVars *****************
  4266 ;; Defined at:
  4267 ;;		line 391 in file "sort.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;Total ram usage:        0 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    7
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_Loading
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text5
  4296  0044D2                     __ptext5:
  4297                           	opt stack 0
  4298  0044D2                     _initGlobalVars:
  4299                           	opt stack 21
  4300                           
  4301                           ;sort.c: 393: first = 0;
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;incstack = 0
  4305  0044D2  0E00               	movlw	0
  4306  0044D4  6E6C               	movwf	_first+1,c
  4307  0044D6  0E00               	movlw	0
  4308  0044D8  6E6B               	movwf	_first,c
  4309                           
  4310                           ;sort.c: 396: f_loadingNewCan = 0;
  4311  0044DA  0E00               	movlw	0
  4312  0044DC  0100               	movlb	0	; () banked
  4313  0044DE  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4314  0044E0  0E00               	movlw	0
  4315  0044E2  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4316                           
  4317                           ;sort.c: 397: f_lastCan = 0;
  4318  0044E4  0E00               	movlw	0
  4319  0044E6  0100               	movlb	0	; () banked
  4320  0044E8  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  4321  0044EA  0E00               	movlw	0
  4322  0044EC  6FE8               	movwf	_f_lastCan& (0+255),b
  4323                           
  4324                           ;sort.c: 398: f_ID_receive = 1;
  4325  0044EE  0E00               	movlw	0
  4326  0044F0  6E64               	movwf	_f_ID_receive+1,c
  4327  0044F2  0E01               	movlw	1
  4328  0044F4  6E63               	movwf	_f_ID_receive,c
  4329                           
  4330                           ;sort.c: 399: f_can_coming_to_ID = 0;
  4331  0044F6  0E00               	movlw	0
  4332  0044F8  6E66               	movwf	_f_can_coming_to_ID+1,c
  4333  0044FA  0E00               	movlw	0
  4334  0044FC  6E65               	movwf	_f_can_coming_to_ID,c
  4335                           
  4336                           ;sort.c: 400: f_can_coming_to_distribution = 0;
  4337  0044FE  0E00               	movlw	0
  4338  004500  6E68               	movwf	_f_can_coming_to_distribution+1,c
  4339  004502  0E00               	movlw	0
  4340  004504  6E67               	movwf	_f_can_coming_to_distribution,c
  4341                           
  4342                           ;sort.c: 401: f_can_distributed = 0;
  4343  004506  0E00               	movlw	0
  4344  004508  0101               	movlb	1	; () banked
  4345  00450A  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4346  00450C  0E00               	movlw	0
  4347  00450E  6F33               	movwf	_f_can_distributed& (0+255),b
  4348                           
  4349                           ;sort.c: 402: f_most_recent_sort_time = 0;
  4350  004510  0E00               	movlw	0
  4351  004512  6E6A               	movwf	_f_most_recent_sort_time+1,c
  4352  004514  0E00               	movlw	0
  4353  004516  6E69               	movwf	_f_most_recent_sort_time,c
  4354                           
  4355                           ;sort.c: 405: count_total = 0;
  4356  004518  0E00               	movlw	0
  4357  00451A  0100               	movlb	0	; () banked
  4358  00451C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4359  00451E  0E00               	movlw	0
  4360  004520  6FFE               	movwf	_count_total& (0+255),b
  4361                           
  4362                           ;sort.c: 406: count_pop_no_tab = 0;
  4363  004522  0E00               	movlw	0
  4364  004524  0101               	movlb	1	; () banked
  4365  004526  6F30               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4366  004528  0E00               	movlw	0
  4367  00452A  6F2F               	movwf	_count_pop_no_tab& (0+255),b
  4368                           
  4369                           ;sort.c: 407: count_pop_w_tab = 0;
  4370  00452C  0E00               	movlw	0
  4371  00452E  0101               	movlb	1	; () banked
  4372  004530  6F32               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4373  004532  0E00               	movlw	0
  4374  004534  6F31               	movwf	_count_pop_w_tab& (0+255),b
  4375                           
  4376                           ;sort.c: 408: count_can_w_lab = 0;
  4377  004536  0E00               	movlw	0
  4378  004538  0101               	movlb	1	; () banked
  4379  00453A  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4380  00453C  0E00               	movlw	0
  4381  00453E  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4382                           
  4383                           ;sort.c: 409: count_can_no_lab = 0;
  4384  004540  0E00               	movlw	0
  4385  004542  0101               	movlb	1	; () banked
  4386  004544  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4387  004546  0E00               	movlw	0
  4388  004548  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4389                           
  4390                           ;sort.c: 412: most_recent_sort_time = 999;
  4391  00454A  0E03               	movlw	3
  4392  00454C  6E76               	movwf	_most_recent_sort_time+1,c
  4393  00454E  0EE7               	movlw	231
  4394  004550  6E75               	movwf	_most_recent_sort_time,c
  4395                           
  4396                           ; BSR set to: 1
  4397  004552  0012               	return		;funcret
  4398  004554                     __end_of_initGlobalVars:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           postdec1	equ	0xFE5
  4409                           fsr1l	equ	0xFE1
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function _getMAG *****************
  4418 ;; Defined at:
  4419 ;;		line 502 in file "sort.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;Total ram usage:        2 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    9
  4440 ;; This function calls:
  4441 ;;		_readMAG
  4442 ;; This function is called by:
  4443 ;;		_Loading
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text6
  4448  004C54                     __ptext6:
  4449                           	opt stack 0
  4450  004C54                     _getMAG:
  4451                           	opt stack 19
  4452                           
  4453                           ;sort.c: 503: readMAG();
  4454                           
  4455                           ; BSR set to: 1
  4456                           ;incstack = 0
  4457  004C54  EC52  F025         	call	_readMAG	;wreg free
  4458                           
  4459                           ;sort.c: 505: if(MAG_signal==1){
  4460  004C58  0100               	movlb	0	; () banked
  4461  004C5A  05E0               	decf	_MAG_signal& (0+255),w,b
  4462  004C5C  0100               	movlb	0	; () banked
  4463  004C5E  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4464  004C60  A4D8               	btfss	status,2,c
  4465  004C62  0012               	return	
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;sort.c: 506: _delay((unsigned long)((500)*(32000000/4000.0)));
  4469  004C64  0E15               	movlw	21
  4470  004C66  0100               	movlb	0	; () banked
  4471  004C68  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4472  004C6A  0E4B               	movlw	75
  4473  004C6C  0100               	movlb	0	; () banked
  4474  004C6E  6F86               	movwf	??_getMAG& (0+255),b
  4475  004C70  0EBE               	movlw	190
  4476  004C72                     u8687:
  4477  004C72  2EE8               	decfsz	wreg,f,c
  4478  004C74  D7FE               	bra	u8687
  4479  004C76  2F86               	decfsz	??_getMAG& (0+255),f,b
  4480  004C78  D7FC               	bra	u8687
  4481  004C7A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4482  004C7C  D7FA               	bra	u8687
  4483  004C7E  F000               	nop	
  4484                           
  4485                           ;sort.c: 507: readMAG();
  4486  004C80  EC52  F025         	call	_readMAG	;wreg free
  4487  004C84  0012               	return	
  4488  004C86                     __end_of_getMAG:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           postdec1	equ	0xFE5
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _getIR *****************
  4508 ;; Defined at:
  4509 ;;		line 486 in file "sort.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  i               2    7[BANK0 ] int 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        3 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    9
  4530 ;; This function calls:
  4531 ;;		_readIR
  4532 ;; This function is called by:
  4533 ;;		_Loading
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text7
  4538  004642                     __ptext7:
  4539                           	opt stack 0
  4540  004642                     _getIR:
  4541                           	opt stack 19
  4542                           
  4543                           ;sort.c: 487: readIR();
  4544                           
  4545                           ;incstack = 0
  4546  004642  EC2C  F025         	call	_readIR	;wreg free
  4547                           
  4548                           ;sort.c: 488: for(int i = 0; i < 150; i++){
  4549  004646  0E00               	movlw	0
  4550  004648  0100               	movlb	0	; () banked
  4551  00464A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4552  00464C  0E00               	movlw	0
  4553  00464E  6F87               	movwf	getIR@i& (0+255),b
  4554  004650                     l6635:
  4555                           
  4556                           ; BSR set to: 0
  4557  004650  0100               	movlb	0	; () banked
  4558  004652  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4559  004654  D008               	goto	l6639
  4560  004656  0100               	movlb	0	; () banked
  4561  004658  5188               	movf	(getIR@i+1)& (0+255),w,b
  4562  00465A  E11A               	bnz	l6651
  4563  00465C  0E96               	movlw	150
  4564  00465E  0100               	movlb	0	; () banked
  4565  004660  5D87               	subwf	getIR@i& (0+255),w,b
  4566  004662  B0D8               	btfsc	status,0,c
  4567  004664  D015               	goto	l6651
  4568  004666                     l6639:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;sort.c: 489: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4572  004666  0E06               	movlw	6
  4573  004668  0100               	movlb	0	; () banked
  4574  00466A  6F86               	movwf	??_getIR& (0+255),b
  4575  00466C  0E30               	movlw	48
  4576  00466E                     u8697:
  4577  00466E  2EE8               	decfsz	wreg,f,c
  4578  004670  D7FE               	bra	u8697
  4579  004672  2F86               	decfsz	??_getIR& (0+255),f,b
  4580  004674  D7FC               	bra	u8697
  4581  004676  F000               	nop	
  4582                           
  4583                           ;sort.c: 490: readIR();
  4584  004678  EC2C  F025         	call	_readIR	;wreg free
  4585                           
  4586                           ;sort.c: 491: if(!IR_signal){
  4587  00467C  0100               	movlb	0	; () banked
  4588  00467E  51DE               	movf	_IR_signal& (0+255),w,b
  4589  004680  0100               	movlb	0	; () banked
  4590  004682  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4591  004684  B4D8               	btfsc	status,2,c
  4592  004686  D004               	goto	l6651
  4593                           
  4594                           ; BSR set to: 0
  4595                           
  4596                           ; BSR set to: 0
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;sort.c: 492: break;
  4600  004688  0100               	movlb	0	; () banked
  4601  00468A  4B87               	infsnz	getIR@i& (0+255),f,b
  4602  00468C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4603  00468E  D7E0               	goto	l6635
  4604  004690                     l6651:
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;sort.c: 493: }
  4608                           ;sort.c: 494: }
  4609                           ;sort.c: 495: if(IR_signal==1){
  4610  004690  0100               	movlb	0	; () banked
  4611  004692  05DE               	decf	_IR_signal& (0+255),w,b
  4612  004694  0100               	movlb	0	; () banked
  4613  004696  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4614  004698  A4D8               	btfss	status,2,c
  4615  00469A  D006               	goto	l6655
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;sort.c: 496: f_loadingNewCan = 1;
  4619  00469C  0E00               	movlw	0
  4620  00469E  0100               	movlb	0	; () banked
  4621  0046A0  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4622  0046A2  0E01               	movlw	1
  4623  0046A4  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4624                           
  4625                           ;sort.c: 497: }
  4626  0046A6  0012               	return	
  4627  0046A8                     l6655:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;sort.c: 498: else{
  4631                           ;sort.c: 499: f_loadingNewCan = 0;
  4632  0046A8  0E00               	movlw	0
  4633  0046AA  0100               	movlb	0	; () banked
  4634  0046AC  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4635  0046AE  0E00               	movlw	0
  4636  0046B0  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4637  0046B2  0012               	return	
  4638  0046B4                     __end_of_getIR:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           postdec1	equ	0xFE5
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _readIR *****************
  4658 ;; Defined at:
  4659 ;;		line 23 in file "ADCFunctionality.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  res             2    4[BANK0 ] int 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;Total ram usage:        4 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    8
  4680 ;; This function calls:
  4681 ;;		_readADC
  4682 ;; This function is called by:
  4683 ;;		_Loading
  4684 ;;		_getIR
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text8
  4689  004A58                     __ptext8:
  4690                           	opt stack 0
  4691  004A58                     _readIR:
  4692                           	opt stack 20
  4693                           
  4694                           ;ADCFunctionality.c: 24: readADC(0);
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;incstack = 0
  4698  004A58  0E00               	movlw	0
  4699  004A5A  EC8F  F027         	call	_readADC
  4700                           
  4701                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4702  004A5E  50C3               	movf	4035,w,c	;volatile
  4703  004A60  CFC4 F082          	movff	4036,??_readIR	;volatile
  4704  004A64  0100               	movlb	0	; () banked
  4705  004A66  6B83               	clrf	(??_readIR+1)& (0+255),b
  4706  004A68  C082  F083         	movff	??_readIR,??_readIR+1
  4707  004A6C  0100               	movlb	0	; () banked
  4708  004A6E  6B82               	clrf	??_readIR& (0+255),b
  4709  004A70  0100               	movlb	0	; () banked
  4710  004A72  1182               	iorwf	??_readIR& (0+255),w,b
  4711  004A74  0100               	movlb	0	; () banked
  4712  004A76  6F84               	movwf	readIR@res& (0+255),b
  4713  004A78  0100               	movlb	0	; () banked
  4714  004A7A  5183               	movf	(??_readIR+1)& (0+255),w,b
  4715  004A7C  0100               	movlb	0	; () banked
  4716  004A7E  6F85               	movwf	(readIR@res+1)& (0+255),b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4720  004A80  0100               	movlb	0	; () banked
  4721  004A82  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4722  004A84  D00A               	goto	u4460
  4723  004A86  0E21               	movlw	33
  4724  004A88  0100               	movlb	0	; () banked
  4725  004A8A  5D84               	subwf	readIR@res& (0+255),w,b
  4726  004A8C  0E03               	movlw	3
  4727  004A8E  0100               	movlb	0	; () banked
  4728  004A90  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4729  004A92  A0D8               	btfss	status,0,c
  4730  004A94  D002               	goto	u4460
  4731  004A96  0E01               	movlw	1
  4732  004A98  D001               	goto	u4470
  4733  004A9A                     u4460:
  4734  004A9A  0E00               	movlw	0
  4735  004A9C                     u4470:
  4736  004A9C  0100               	movlb	0	; () banked
  4737  004A9E  6FDE               	movwf	_IR_signal& (0+255),b
  4738  004AA0  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741  004AA2  0012               	return		;funcret
  4742  004AA4                     __end_of_readIR:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function _ID *****************
  4762 ;; Defined at:
  4763 ;;		line 249 in file "sort.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  i               2    6[BANK0 ] int 
  4768 ;;  i               2    4[BANK0 ] int 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;Total ram usage:        6 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    8
  4785 ;; This function calls:
  4786 ;;		_delay_ms
  4787 ;; This function is called by:
  4788 ;;		_sort
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text9
  4793  0030D0                     __ptext9:
  4794                           	opt stack 0
  4795  0030D0                     _ID:
  4796                           	opt stack 21
  4797                           
  4798                           ;sort.c: 250: if(f_can_coming_to_ID){
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;incstack = 0
  4802  0030D0  5065               	movf	_f_can_coming_to_ID,w,c
  4803  0030D2  1066               	iorwf	_f_can_coming_to_ID+1,w,c
  4804  0030D4  B4D8               	btfsc	status,2,c
  4805  0030D6  0012               	return	
  4806                           
  4807                           ;sort.c: 252: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4808  0030D8  0E3D               	movlw	61
  4809  0030DA  0100               	movlb	0	; () banked
  4810  0030DC  6F83               	movwf	(??_ID+1)& (0+255),b
  4811  0030DE  0EE1               	movlw	225
  4812  0030E0  0100               	movlb	0	; () banked
  4813  0030E2  6F82               	movwf	??_ID& (0+255),b
  4814  0030E4  0E3F               	movlw	63
  4815  0030E6                     u8707:
  4816  0030E6  2EE8               	decfsz	wreg,f,c
  4817  0030E8  D7FE               	bra	u8707
  4818  0030EA  2F82               	decfsz	??_ID& (0+255),f,b
  4819  0030EC  D7FC               	bra	u8707
  4820  0030EE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4821  0030F0  D7FA               	bra	u8707
  4822  0030F2  D000               	nop2	
  4823                           
  4824                           ;sort.c: 254: LATAbits.LATA3 = 1;
  4825  0030F4  8689               	bsf	3977,3,c	;volatile
  4826                           
  4827                           ;sort.c: 255: _delay((unsigned long)((600)*(32000000/4000.0)));
  4828  0030F6  0E19               	movlw	25
  4829  0030F8  0100               	movlb	0	; () banked
  4830  0030FA  6F83               	movwf	(??_ID+1)& (0+255),b
  4831  0030FC  0E5A               	movlw	90
  4832  0030FE  0100               	movlb	0	; () banked
  4833  003100  6F82               	movwf	??_ID& (0+255),b
  4834  003102  0EB1               	movlw	177
  4835  003104                     u8717:
  4836  003104  2EE8               	decfsz	wreg,f,c
  4837  003106  D7FE               	bra	u8717
  4838  003108  2F82               	decfsz	??_ID& (0+255),f,b
  4839  00310A  D7FC               	bra	u8717
  4840  00310C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4841  00310E  D7FA               	bra	u8717
  4842  003110  D000               	nop2	
  4843                           
  4844                           ;sort.c: 256: sensor_outputs[1] = PORTAbits.RA2;
  4845  003112  A480               	btfss	3968,2,c	;volatile
  4846  003114  D004               	goto	u5830
  4847  003116  0100               	movlb	0	; () banked
  4848  003118  6B82               	clrf	??_ID& (0+255),b
  4849  00311A  2B82               	incf	??_ID& (0+255),f,b
  4850  00311C  D002               	goto	u5838
  4851  00311E                     u5830:
  4852  00311E  0100               	movlb	0	; () banked
  4853  003120  6B82               	clrf	??_ID& (0+255),b
  4854  003122                     u5838:
  4855  003122  0100               	movlb	0	; () banked
  4856  003124  5182               	movf	??_ID& (0+255),w,b
  4857  003126  0100               	movlb	0	; () banked
  4858  003128  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4859  00312A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;sort.c: 257: LATAbits.LATA3 = 0;
  4863  00312C  9689               	bcf	3977,3,c	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;sort.c: 259: _delay((unsigned long)((200)*(32000000/4000.0)));
  4867  00312E  0E09               	movlw	9
  4868  003130  0100               	movlb	0	; () banked
  4869  003132  6F83               	movwf	(??_ID+1)& (0+255),b
  4870  003134  0E1E               	movlw	30
  4871  003136  0100               	movlb	0	; () banked
  4872  003138  6F82               	movwf	??_ID& (0+255),b
  4873  00313A  0EE4               	movlw	228
  4874  00313C                     u8727:
  4875  00313C  2EE8               	decfsz	wreg,f,c
  4876  00313E  D7FE               	bra	u8727
  4877  003140  2F82               	decfsz	??_ID& (0+255),f,b
  4878  003142  D7FC               	bra	u8727
  4879  003144  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4880  003146  D7FA               	bra	u8727
  4881  003148  F000               	nop	
  4882                           
  4883                           ;sort.c: 260: LATAbits.LATA3 = 1;
  4884  00314A  8689               	bsf	3977,3,c	;volatile
  4885                           
  4886                           ;sort.c: 261: _delay((unsigned long)((600)*(32000000/4000.0)));
  4887  00314C  0E19               	movlw	25
  4888  00314E  0100               	movlb	0	; () banked
  4889  003150  6F83               	movwf	(??_ID+1)& (0+255),b
  4890  003152  0E5A               	movlw	90
  4891  003154  0100               	movlb	0	; () banked
  4892  003156  6F82               	movwf	??_ID& (0+255),b
  4893  003158  0EB1               	movlw	177
  4894  00315A                     u8737:
  4895  00315A  2EE8               	decfsz	wreg,f,c
  4896  00315C  D7FE               	bra	u8737
  4897  00315E  2F82               	decfsz	??_ID& (0+255),f,b
  4898  003160  D7FC               	bra	u8737
  4899  003162  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4900  003164  D7FA               	bra	u8737
  4901  003166  D000               	nop2	
  4902                           
  4903                           ;sort.c: 262: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4904  003168  A480               	btfss	3968,2,c	;volatile
  4905  00316A  D004               	goto	u5840
  4906  00316C  0100               	movlb	0	; () banked
  4907  00316E  6B82               	clrf	??_ID& (0+255),b
  4908  003170  2B82               	incf	??_ID& (0+255),f,b
  4909  003172  D002               	goto	u5848
  4910  003174                     u5840:
  4911  003174  0100               	movlb	0	; () banked
  4912  003176  6B82               	clrf	??_ID& (0+255),b
  4913  003178                     u5848:
  4914  003178  0100               	movlb	0	; () banked
  4915  00317A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4916  00317C  0100               	movlb	0	; () banked
  4917  00317E  1182               	iorwf	??_ID& (0+255),w,b
  4918  003180  0100               	movlb	0	; () banked
  4919  003182  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4920  003184  0100               	movlb	0	; () banked
  4921  003186  51DD               	movf	(_sensor_outputs+3)& (0+255),w,b
  4922  003188  0100               	movlb	0	; () banked
  4923  00318A  6FDD               	movwf	(_sensor_outputs+3)& (0+255),b
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;sort.c: 270: if(!sensor_outputs[0]){
  4927  00318C  0100               	movlb	0	; () banked
  4928  00318E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4929  003190  0100               	movlb	0	; () banked
  4930  003192  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4931  003194  A4D8               	btfss	status,2,c
  4932  003196  D016               	goto	l7179
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 271: if(!sensor_outputs[1]){
  4936  003198  0100               	movlb	0	; () banked
  4937  00319A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4938  00319C  0100               	movlb	0	; () banked
  4939  00319E  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4940  0031A0  A4D8               	btfss	status,2,c
  4941  0031A2  D008               	goto	l7175
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;sort.c: 272: count_pop_no_tab++;
  4945  0031A4  0101               	movlb	1	; () banked
  4946  0031A6  4B2F               	infsnz	_count_pop_no_tab& (0+255),f,b
  4947  0031A8  2B30               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  4948                           
  4949                           ; BSR set to: 1
  4950                           ;sort.c: 273: cur_can = 0;
  4951  0031AA  0E00               	movlw	0
  4952  0031AC  0100               	movlb	0	; () banked
  4953  0031AE  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4954  0031B0  0E00               	movlw	0
  4955  0031B2  D007               	goto	L4
  4956  0031B4                     l7175:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;sort.c: 275: else{
  4960                           ;sort.c: 276: count_pop_w_tab++;
  4961  0031B4  0101               	movlb	1	; () banked
  4962  0031B6  4B31               	infsnz	_count_pop_w_tab& (0+255),f,b
  4963  0031B8  2B32               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  4964                           
  4965                           ; BSR set to: 1
  4966                           ;sort.c: 277: cur_can = 1;
  4967  0031BA  0E00               	movlw	0
  4968  0031BC  0100               	movlb	0	; () banked
  4969  0031BE  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4970  0031C0  0E01               	movlw	1
  4971  0031C2                     L4:
  4972  0031C2  6FE4               	movwf	_cur_can& (0+255),b
  4973  0031C4                     l7179:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;sort.c: 278: }
  4977                           ;sort.c: 279: }
  4978                           ;sort.c: 280: if(sensor_outputs[0]){
  4979  0031C4  0100               	movlb	0	; () banked
  4980  0031C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  4981  0031C8  0100               	movlb	0	; () banked
  4982  0031CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4983  0031CC  B4D8               	btfsc	status,2,c
  4984  0031CE  D016               	goto	l7191
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 281: if(!sensor_outputs[1]){
  4988  0031D0  0100               	movlb	0	; () banked
  4989  0031D2  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4990  0031D4  0100               	movlb	0	; () banked
  4991  0031D6  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4992  0031D8  A4D8               	btfss	status,2,c
  4993  0031DA  D008               	goto	l7187
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;sort.c: 282: count_can_w_lab++;
  4997  0031DC  0101               	movlb	1	; () banked
  4998  0031DE  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4999  0031E0  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5000                           
  5001                           ; BSR set to: 1
  5002                           ;sort.c: 283: cur_can = 2;
  5003  0031E2  0E00               	movlw	0
  5004  0031E4  0100               	movlb	0	; () banked
  5005  0031E6  6FE5               	movwf	(_cur_can+1)& (0+255),b
  5006  0031E8  0E02               	movlw	2
  5007  0031EA  D007               	goto	L5
  5008  0031EC                     l7187:
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;sort.c: 285: else{
  5012                           ;sort.c: 286: count_can_no_lab++;
  5013  0031EC  0101               	movlb	1	; () banked
  5014  0031EE  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  5015  0031F0  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;sort.c: 287: cur_can = 3;
  5019  0031F2  0E00               	movlw	0
  5020  0031F4  0100               	movlb	0	; () banked
  5021  0031F6  6FE5               	movwf	(_cur_can+1)& (0+255),b
  5022  0031F8  0E03               	movlw	3
  5023  0031FA                     L5:
  5024  0031FA  6FE4               	movwf	_cur_can& (0+255),b
  5025  0031FC                     l7191:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;sort.c: 288: }
  5029                           ;sort.c: 289: }
  5030                           ;sort.c: 290: LATAbits.LATA3 = 0;
  5031  0031FC  9689               	bcf	3977,3,c	;volatile
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;sort.c: 291: _delay((unsigned long)((200)*(32000000/4000.0)));
  5035  0031FE  0E09               	movlw	9
  5036  003200  0100               	movlb	0	; () banked
  5037  003202  6F83               	movwf	(??_ID+1)& (0+255),b
  5038  003204  0E1E               	movlw	30
  5039  003206  0100               	movlb	0	; () banked
  5040  003208  6F82               	movwf	??_ID& (0+255),b
  5041  00320A  0EE4               	movlw	228
  5042  00320C                     u8747:
  5043  00320C  2EE8               	decfsz	wreg,f,c
  5044  00320E  D7FE               	bra	u8747
  5045  003210  2F82               	decfsz	??_ID& (0+255),f,b
  5046  003212  D7FC               	bra	u8747
  5047  003214  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5048  003216  D7FA               	bra	u8747
  5049  003218  F000               	nop	
  5050                           
  5051                           ;sort.c: 292: LATAbits.LATA3 = 1;
  5052  00321A  8689               	bsf	3977,3,c	;volatile
  5053                           
  5054                           ;sort.c: 295: for(int i=0;i<10000;i++)
  5055  00321C  0E00               	movlw	0
  5056  00321E  0100               	movlb	0	; () banked
  5057  003220  6F85               	movwf	(ID@i+1)& (0+255),b
  5058  003222  0E00               	movlw	0
  5059  003224  6F84               	movwf	ID@i& (0+255),b
  5060  003226  0100               	movlb	0	; () banked
  5061  003228  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5062  00322A  D008               	goto	l793
  5063  00322C  0E10               	movlw	16
  5064  00322E  0100               	movlb	0	; () banked
  5065  003230  5D84               	subwf	ID@i& (0+255),w,b
  5066  003232  0E27               	movlw	39
  5067  003234  0100               	movlb	0	; () banked
  5068  003236  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5069  003238  B0D8               	btfsc	status,0,c
  5070  00323A  D00D               	goto	l794
  5071  00323C                     l793:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;sort.c: 296: {
  5075                           ;sort.c: 297: LATCbits.LATC0 = 1;
  5076  00323C  808B               	bsf	3979,0,c	;volatile
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;sort.c: 298: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5080  00323E  0E1A               	movlw	26
  5081  003240                     u8757:
  5082  003240  2EE8               	decfsz	wreg,f,c
  5083  003242  D7FE               	bra	u8757
  5084  003244  D000               	nop2	
  5085                           
  5086                           ;sort.c: 299: LATCbits.LATC0 = 0;
  5087  003246  908B               	bcf	3979,0,c	;volatile
  5088                           
  5089                           ;sort.c: 300: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5090  003248  0EF0               	movlw	240
  5091  00324A                     u8767:
  5092  00324A  2EE8               	decfsz	wreg,f,c
  5093  00324C  D7FE               	bra	u8767
  5094  00324E  0100               	movlb	0	; () banked
  5095  003250  4B84               	infsnz	ID@i& (0+255),f,b
  5096  003252  2B85               	incf	(ID@i+1)& (0+255),f,b
  5097  003254  D7E8               	goto	L6
  5098  003256                     l794:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;sort.c: 301: }
  5102                           ;sort.c: 302: LATCbits.LATC0 = 0;
  5103  003256  908B               	bcf	3979,0,c	;volatile
  5104                           
  5105                           ;sort.c: 304: LATAbits.LATA3 = 0;
  5106  003258  9689               	bcf	3977,3,c	;volatile
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;sort.c: 308: f_can_coming_to_distribution = 1;
  5110  00325A  0E00               	movlw	0
  5111  00325C  6E68               	movwf	_f_can_coming_to_distribution+1,c
  5112  00325E  0E01               	movlw	1
  5113  003260  6E67               	movwf	_f_can_coming_to_distribution,c
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;sort.c: 309: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5117  003262  0E3D               	movlw	61
  5118  003264  0100               	movlb	0	; () banked
  5119  003266  6F83               	movwf	(??_ID+1)& (0+255),b
  5120  003268  0EE1               	movlw	225
  5121  00326A  0100               	movlb	0	; () banked
  5122  00326C  6F82               	movwf	??_ID& (0+255),b
  5123  00326E  0E3F               	movlw	63
  5124  003270                     u8777:
  5125  003270  2EE8               	decfsz	wreg,f,c
  5126  003272  D7FE               	bra	u8777
  5127  003274  2F82               	decfsz	??_ID& (0+255),f,b
  5128  003276  D7FC               	bra	u8777
  5129  003278  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5130  00327A  D7FA               	bra	u8777
  5131  00327C  D000               	nop2	
  5132                           
  5133                           ;sort.c: 310: LATCbits.LATC0 = 1;
  5134  00327E  808B               	bsf	3979,0,c	;volatile
  5135                           
  5136                           ;sort.c: 313: if(!f_lastCan){
  5137  003280  0100               	movlb	0	; () banked
  5138  003282  51E8               	movf	_f_lastCan& (0+255),w,b
  5139  003284  0100               	movlb	0	; () banked
  5140  003286  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5141  003288  A4D8               	btfss	status,2,c
  5142  00328A  D032               	goto	l7229
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;sort.c: 314: for(int i=0; i<46; i++){
  5146  00328C  0E00               	movlw	0
  5147  00328E  0100               	movlb	0	; () banked
  5148  003290  6F87               	movwf	(ID@i_1120+1)& (0+255),b
  5149  003292  0E00               	movlw	0
  5150  003294  6F86               	movwf	ID@i_1120& (0+255),b
  5151                           
  5152                           ; BSR set to: 0
  5153  003296  0100               	movlb	0	; () banked
  5154  003298  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5155  00329A  D008               	goto	l7221
  5156  00329C  0100               	movlb	0	; () banked
  5157  00329E  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5158  0032A0  E126               	bnz	l797
  5159  0032A2  0E2E               	movlw	46
  5160  0032A4  0100               	movlb	0	; () banked
  5161  0032A6  5D86               	subwf	ID@i_1120& (0+255),w,b
  5162  0032A8  B0D8               	btfsc	status,0,c
  5163  0032AA  D021               	goto	l797
  5164  0032AC                     l7221:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;sort.c: 315: LATAbits.LATA5 = !LATAbits.LATA5;
  5168  0032AC  BA89               	btfsc	3977,5,c	;volatile
  5169  0032AE  D004               	goto	u5930
  5170  0032B0  0100               	movlb	0	; () banked
  5171  0032B2  6B82               	clrf	??_ID& (0+255),b
  5172  0032B4  2B82               	incf	??_ID& (0+255),f,b
  5173  0032B6  D002               	goto	u5948
  5174  0032B8                     u5930:
  5175  0032B8  0100               	movlb	0	; () banked
  5176  0032BA  6B82               	clrf	??_ID& (0+255),b
  5177  0032BC                     u5948:
  5178  0032BC  0100               	movlb	0	; () banked
  5179  0032BE  3B82               	swapf	??_ID& (0+255),f,b
  5180  0032C0  4782               	rlncf	??_ID& (0+255),f,b
  5181  0032C2  5089               	movf	3977,w,c	;volatile
  5182  0032C4  0100               	movlb	0	; () banked
  5183  0032C6  1982               	xorwf	??_ID& (0+255),w,b
  5184  0032C8  0BDF               	andlw	-33
  5185  0032CA  1982               	xorwf	??_ID& (0+255),w,b
  5186  0032CC  6E89               	movwf	3977,c	;volatile
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;sort.c: 316: delay_ms(45-i);
  5190  0032CE  0100               	movlb	0	; () banked
  5191  0032D0  5186               	movf	ID@i_1120& (0+255),w,b
  5192  0032D2  0800               	sublw	0
  5193  0032D4  0F2D               	addlw	45
  5194  0032D6  ECBA  F027         	call	_delay_ms
  5195  0032DA  0100               	movlb	0	; () banked
  5196  0032DC  4B86               	infsnz	ID@i_1120& (0+255),f,b
  5197  0032DE  2B87               	incf	(ID@i_1120+1)& (0+255),f,b
  5198                           
  5199                           ; BSR set to: 0
  5200  0032E0  0100               	movlb	0	; () banked
  5201  0032E2  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5202  0032E4  D7E3               	goto	l7221
  5203  0032E6  0100               	movlb	0	; () banked
  5204  0032E8  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5205  0032EA  E101               	bnz	u5950
  5206  0032EC  D7DA               	goto	L7
  5207  0032EE                     u5950:
  5208  0032EE                     l797:
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;sort.c: 317: }
  5212                           ;sort.c: 318: LATAbits.LATA5 = 1;
  5213  0032EE  8A89               	bsf	3977,5,c	;volatile
  5214  0032F0                     l7229:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;sort.c: 319: }
  5218                           ;sort.c: 321: f_can_coming_to_ID = 0;
  5219  0032F0  0E00               	movlw	0
  5220  0032F2  6E66               	movwf	_f_can_coming_to_ID+1,c
  5221  0032F4  0E00               	movlw	0
  5222  0032F6  6E65               	movwf	_f_can_coming_to_ID,c
  5223  0032F8  0012               	return	
  5224  0032FA                     __end_of_ID:
  5225                           	opt stack 0
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           postdec1	equ	0xFE5
  5235                           fsr1l	equ	0xFE1
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _delay_ms *****************
  5244 ;; Defined at:
  5245 ;;		line 523 in file "sort.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;  milliseconds    1    wreg     unsigned char 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;Total ram usage:        2 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    7
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_Loading
  5270 ;;		_ID
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text10
  5275  004F74                     __ptext10:
  5276                           	opt stack 0
  5277  004F74                     _delay_ms:
  5278                           	opt stack 21
  5279                           
  5280                           ;incstack = 0
  5281                           ;delay_ms@milliseconds stored from wreg
  5282  004F74  0100               	movlb	0	; () banked
  5283  004F76  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5284                           
  5285                           ;sort.c: 524: while(milliseconds > 0)
  5286  004F78  D00B               	goto	l6615
  5287  004F7A                     l6611:
  5288                           
  5289                           ;sort.c: 525: {
  5290                           ;sort.c: 526: milliseconds--;
  5291  004F7A  0100               	movlb	0	; () banked
  5292  004F7C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;sort.c: 527: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5296  004F7E  0E0B               	movlw	11
  5297  004F80  0100               	movlb	0	; () banked
  5298  004F82  6F80               	movwf	??_delay_ms& (0+255),b
  5299  004F84  0E47               	movlw	71
  5300  004F86                     u8787:
  5301  004F86  2EE8               	decfsz	wreg,f,c
  5302  004F88  D7FE               	bra	u8787
  5303  004F8A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5304  004F8C  D7FC               	bra	u8787
  5305  004F8E  D000               	nop2	
  5306  004F90                     l6615:
  5307  004F90  0100               	movlb	0	; () banked
  5308  004F92  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5309  004F94  0100               	movlb	0	; () banked
  5310  004F96  B4D8               	btfsc	status,2,c
  5311  004F98  0012               	return	
  5312  004F9A  D7EF               	goto	l6611
  5313  004F9C                     __end_of_delay_ms:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           postinc0	equ	0xFEE
  5322                           wreg	equ	0xFE8
  5323                           postdec1	equ	0xFE5
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function _Distribution *****************
  5333 ;; Defined at:
  5334 ;;		line 324 in file "sort.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    8
  5355 ;; This function calls:
  5356 ;;		_updateServoPosition
  5357 ;; This function is called by:
  5358 ;;		_sort
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text11
  5363  0032FA                     __ptext11:
  5364                           	opt stack 0
  5365  0032FA                     _Distribution:
  5366                           	opt stack 21
  5367                           
  5368                           ;sort.c: 325: if(f_can_coming_to_distribution){
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;incstack = 0
  5372  0032FA  5067               	movf	_f_can_coming_to_distribution,w,c
  5373  0032FC  1068               	iorwf	_f_can_coming_to_distribution+1,w,c
  5374  0032FE  B4D8               	btfsc	status,2,c
  5375  003300  0012               	return	
  5376  003302  D034               	goto	l7245
  5377  003304                     l7235:
  5378                           
  5379                           ;sort.c: 335: updateServoPosition(500, 1);
  5380  003304  0E01               	movlw	1
  5381  003306  0100               	movlb	0	; () banked
  5382  003308  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5383  00330A  0EF4               	movlw	244
  5384  00330C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5385  00330E  0E00               	movlw	0
  5386  003310  0100               	movlb	0	; () banked
  5387  003312  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5388  003314  0E01               	movlw	1
  5389  003316  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5390  003318  ECE6  F022         	call	_updateServoPosition	;wreg free
  5391                           
  5392                           ;sort.c: 336: break;
  5393  00331C  D03E               	goto	l7247
  5394  00331E                     l7237:
  5395                           
  5396                           ;sort.c: 338: updateServoPosition(850, 1);
  5397  00331E  0E03               	movlw	3
  5398  003320  0100               	movlb	0	; () banked
  5399  003322  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5400  003324  0E52               	movlw	82
  5401  003326  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5402  003328  0E00               	movlw	0
  5403  00332A  0100               	movlb	0	; () banked
  5404  00332C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5405  00332E  0E01               	movlw	1
  5406  003330  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5407  003332  ECE6  F022         	call	_updateServoPosition	;wreg free
  5408                           
  5409                           ;sort.c: 339: break;
  5410  003336  D031               	goto	l7247
  5411  003338                     l7239:
  5412                           
  5413                           ;sort.c: 341: updateServoPosition(1670, 1);
  5414  003338  0E06               	movlw	6
  5415  00333A  0100               	movlb	0	; () banked
  5416  00333C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5417  00333E  0E86               	movlw	134
  5418  003340  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5419  003342  0E00               	movlw	0
  5420  003344  0100               	movlb	0	; () banked
  5421  003346  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5422  003348  0E01               	movlw	1
  5423  00334A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5424  00334C  ECE6  F022         	call	_updateServoPosition	;wreg free
  5425                           
  5426                           ;sort.c: 342: break;
  5427  003350  D024               	goto	l7247
  5428  003352                     l7241:
  5429                           
  5430                           ;sort.c: 344: updateServoPosition(2400, 1);
  5431  003352  0E09               	movlw	9
  5432  003354  0100               	movlb	0	; () banked
  5433  003356  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5434  003358  0E60               	movlw	96
  5435  00335A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5436  00335C  0E00               	movlw	0
  5437  00335E  0100               	movlb	0	; () banked
  5438  003360  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5439  003362  0E01               	movlw	1
  5440  003364  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5441  003366  ECE6  F022         	call	_updateServoPosition	;wreg free
  5442                           
  5443                           ;sort.c: 348: }
  5444                           
  5445                           ;sort.c: 347: break;
  5446                           
  5447                           ;sort.c: 346: default:
  5448                           
  5449                           ;sort.c: 345: break;
  5450  00336A  D017               	goto	l7247
  5451  00336C                     l7245:
  5452  00336C  C0E4  F088         	movff	_cur_can,??_Distribution
  5453  003370  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5454                           
  5455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5456                           ; Switch size 1, requested type "space"
  5457                           ; Number of cases is 1, Range of values is 0 to 0
  5458                           ; switch strategies available:
  5459                           ; Name         Instructions Cycles
  5460                           ; simple_byte            4     3 (average)
  5461                           ;	Chosen strategy is simple_byte
  5462  003374  0100               	movlb	0	; () banked
  5463  003376  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5464  003378  0A00               	xorlw	0	; case 0
  5465  00337A  A4D8               	btfss	status,2,c
  5466  00337C  D00E               	goto	l7247
  5467                           
  5468                           ; BSR set to: 0
  5469                           ; Switch size 1, requested type "space"
  5470                           ; Number of cases is 4, Range of values is 0 to 3
  5471                           ; switch strategies available:
  5472                           ; Name         Instructions Cycles
  5473                           ; simple_byte           13     7 (average)
  5474                           ;	Chosen strategy is simple_byte
  5475  00337E  0100               	movlb	0	; () banked
  5476  003380  5188               	movf	??_Distribution& (0+255),w,b
  5477  003382  0A00               	xorlw	0	; case 0
  5478  003384  B4D8               	btfsc	status,2,c
  5479  003386  D7BE               	goto	l7235
  5480  003388  0A01               	xorlw	1	; case 1
  5481  00338A  B4D8               	btfsc	status,2,c
  5482  00338C  D7C8               	goto	l7237
  5483  00338E  0A03               	xorlw	3	; case 2
  5484  003390  B4D8               	btfsc	status,2,c
  5485  003392  D7D2               	goto	l7239
  5486  003394  0A01               	xorlw	1	; case 3
  5487  003396  B4D8               	btfsc	status,2,c
  5488  003398  D7DC               	goto	l7241
  5489  00339A                     l7247:
  5490                           
  5491                           ;sort.c: 349: updateServoPosition(1050, 3);
  5492  00339A  0E04               	movlw	4
  5493  00339C  0100               	movlb	0	; () banked
  5494  00339E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5495  0033A0  0E1A               	movlw	26
  5496  0033A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5497  0033A4  0E00               	movlw	0
  5498  0033A6  0100               	movlb	0	; () banked
  5499  0033A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5500  0033AA  0E03               	movlw	3
  5501  0033AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5502  0033AE  ECE6  F022         	call	_updateServoPosition	;wreg free
  5503                           
  5504                           ;sort.c: 350: _delay((unsigned long)((750)*(32000000/4000.0)));
  5505  0033B2  0E1F               	movlw	31
  5506  0033B4  0100               	movlb	0	; () banked
  5507  0033B6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5508  0033B8  0E71               	movlw	113
  5509  0033BA  0100               	movlb	0	; () banked
  5510  0033BC  6F88               	movwf	??_Distribution& (0+255),b
  5511  0033BE  0E1E               	movlw	30
  5512  0033C0                     u8797:
  5513  0033C0  2EE8               	decfsz	wreg,f,c
  5514  0033C2  D7FE               	bra	u8797
  5515  0033C4  2F88               	decfsz	??_Distribution& (0+255),f,b
  5516  0033C6  D7FC               	bra	u8797
  5517  0033C8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5518  0033CA  D7FA               	bra	u8797
  5519  0033CC  F000               	nop	
  5520                           
  5521                           ;sort.c: 358: switch(cur_can){
  5522  0033CE  D034               	goto	l7261
  5523  0033D0                     l7251:
  5524                           
  5525                           ;sort.c: 360: updateServoPosition(1260, 3);
  5526  0033D0  0E04               	movlw	4
  5527  0033D2  0100               	movlb	0	; () banked
  5528  0033D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5529  0033D6  0EEC               	movlw	236
  5530  0033D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5531  0033DA  0E00               	movlw	0
  5532  0033DC  0100               	movlb	0	; () banked
  5533  0033DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5534  0033E0  0E03               	movlw	3
  5535  0033E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5536  0033E4  ECE6  F022         	call	_updateServoPosition	;wreg free
  5537                           
  5538                           ;sort.c: 361: break;
  5539  0033E8  D03E               	goto	l7263
  5540  0033EA                     l7253:
  5541                           
  5542                           ;sort.c: 363: updateServoPosition(1260, 3);
  5543  0033EA  0E04               	movlw	4
  5544  0033EC  0100               	movlb	0	; () banked
  5545  0033EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5546  0033F0  0EEC               	movlw	236
  5547  0033F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5548  0033F4  0E00               	movlw	0
  5549  0033F6  0100               	movlb	0	; () banked
  5550  0033F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5551  0033FA  0E03               	movlw	3
  5552  0033FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5553  0033FE  ECE6  F022         	call	_updateServoPosition	;wreg free
  5554                           
  5555                           ;sort.c: 364: break;
  5556  003402  D031               	goto	l7263
  5557  003404                     l7255:
  5558                           
  5559                           ;sort.c: 366: updateServoPosition(1390, 3);
  5560  003404  0E05               	movlw	5
  5561  003406  0100               	movlb	0	; () banked
  5562  003408  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5563  00340A  0E6E               	movlw	110
  5564  00340C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5565  00340E  0E00               	movlw	0
  5566  003410  0100               	movlb	0	; () banked
  5567  003412  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5568  003414  0E03               	movlw	3
  5569  003416  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5570  003418  ECE6  F022         	call	_updateServoPosition	;wreg free
  5571                           
  5572                           ;sort.c: 367: break;
  5573  00341C  D024               	goto	l7263
  5574  00341E                     l7257:
  5575                           
  5576                           ;sort.c: 369: updateServoPosition(1390, 3);
  5577  00341E  0E05               	movlw	5
  5578  003420  0100               	movlb	0	; () banked
  5579  003422  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5580  003424  0E6E               	movlw	110
  5581  003426  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5582  003428  0E00               	movlw	0
  5583  00342A  0100               	movlb	0	; () banked
  5584  00342C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5585  00342E  0E03               	movlw	3
  5586  003430  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5587  003432  ECE6  F022         	call	_updateServoPosition	;wreg free
  5588                           
  5589                           ;sort.c: 373: }
  5590                           
  5591                           ;sort.c: 372: break;
  5592                           
  5593                           ;sort.c: 371: default:
  5594                           
  5595                           ;sort.c: 370: break;
  5596  003436  D017               	goto	l7263
  5597  003438                     l7261:
  5598  003438  C0E4  F088         	movff	_cur_can,??_Distribution
  5599  00343C  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5600                           
  5601                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5602                           ; Switch size 1, requested type "space"
  5603                           ; Number of cases is 1, Range of values is 0 to 0
  5604                           ; switch strategies available:
  5605                           ; Name         Instructions Cycles
  5606                           ; simple_byte            4     3 (average)
  5607                           ;	Chosen strategy is simple_byte
  5608  003440  0100               	movlb	0	; () banked
  5609  003442  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5610  003444  0A00               	xorlw	0	; case 0
  5611  003446  A4D8               	btfss	status,2,c
  5612  003448  D00E               	goto	l7263
  5613                           
  5614                           ; BSR set to: 0
  5615                           ; Switch size 1, requested type "space"
  5616                           ; Number of cases is 4, Range of values is 0 to 3
  5617                           ; switch strategies available:
  5618                           ; Name         Instructions Cycles
  5619                           ; simple_byte           13     7 (average)
  5620                           ;	Chosen strategy is simple_byte
  5621  00344A  0100               	movlb	0	; () banked
  5622  00344C  5188               	movf	??_Distribution& (0+255),w,b
  5623  00344E  0A00               	xorlw	0	; case 0
  5624  003450  B4D8               	btfsc	status,2,c
  5625  003452  D7BE               	goto	l7251
  5626  003454  0A01               	xorlw	1	; case 1
  5627  003456  B4D8               	btfsc	status,2,c
  5628  003458  D7C8               	goto	l7253
  5629  00345A  0A03               	xorlw	3	; case 2
  5630  00345C  B4D8               	btfsc	status,2,c
  5631  00345E  D7D2               	goto	l7255
  5632  003460  0A01               	xorlw	1	; case 3
  5633  003462  B4D8               	btfsc	status,2,c
  5634  003464  D7DC               	goto	l7257
  5635  003466                     l7263:
  5636                           
  5637                           ;sort.c: 374: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5638  003466  0E66               	movlw	102
  5639  003468  0100               	movlb	0	; () banked
  5640  00346A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5641  00346C  0E76               	movlw	118
  5642  00346E  0100               	movlb	0	; () banked
  5643  003470  6F88               	movwf	??_Distribution& (0+255),b
  5644  003472  0EC1               	movlw	193
  5645  003474                     u8807:
  5646  003474  2EE8               	decfsz	wreg,f,c
  5647  003476  D7FE               	bra	u8807
  5648  003478  2F88               	decfsz	??_Distribution& (0+255),f,b
  5649  00347A  D7FC               	bra	u8807
  5650  00347C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5651  00347E  D7FA               	bra	u8807
  5652                           
  5653                           ;sort.c: 377: updateServoPosition(1050, 3);
  5654  003480  0E04               	movlw	4
  5655  003482  0100               	movlb	0	; () banked
  5656  003484  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5657  003486  0E1A               	movlw	26
  5658  003488  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5659  00348A  0E00               	movlw	0
  5660  00348C  0100               	movlb	0	; () banked
  5661  00348E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5662  003490  0E03               	movlw	3
  5663  003492  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5664  003494  ECE6  F022         	call	_updateServoPosition	;wreg free
  5665                           
  5666                           ;sort.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
  5667  003498  0E1F               	movlw	31
  5668  00349A  0100               	movlb	0	; () banked
  5669  00349C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5670  00349E  0E71               	movlw	113
  5671  0034A0  0100               	movlb	0	; () banked
  5672  0034A2  6F88               	movwf	??_Distribution& (0+255),b
  5673  0034A4  0E1E               	movlw	30
  5674  0034A6                     u8817:
  5675  0034A6  2EE8               	decfsz	wreg,f,c
  5676  0034A8  D7FE               	bra	u8817
  5677  0034AA  2F88               	decfsz	??_Distribution& (0+255),f,b
  5678  0034AC  D7FC               	bra	u8817
  5679  0034AE  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5680  0034B0  D7FA               	bra	u8817
  5681  0034B2  F000               	nop	
  5682                           
  5683                           ;sort.c: 379: updateServoPosition(1200, 1);
  5684  0034B4  0E04               	movlw	4
  5685  0034B6  0100               	movlb	0	; () banked
  5686  0034B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5687  0034BA  0EB0               	movlw	176
  5688  0034BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5689  0034BE  0E00               	movlw	0
  5690  0034C0  0100               	movlb	0	; () banked
  5691  0034C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5692  0034C4  0E01               	movlw	1
  5693  0034C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5694  0034C8  ECE6  F022         	call	_updateServoPosition	;wreg free
  5695                           
  5696                           ;sort.c: 380: updateServoPosition(1050, 3);
  5697  0034CC  0E04               	movlw	4
  5698  0034CE  0100               	movlb	0	; () banked
  5699  0034D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5700  0034D2  0E1A               	movlw	26
  5701  0034D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5702  0034D6  0E00               	movlw	0
  5703  0034D8  0100               	movlb	0	; () banked
  5704  0034DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5705  0034DC  0E03               	movlw	3
  5706  0034DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5707  0034E0  ECE6  F022         	call	_updateServoPosition	;wreg free
  5708                           
  5709                           ;sort.c: 382: f_can_coming_to_distribution = 0;
  5710  0034E4  0E00               	movlw	0
  5711  0034E6  6E68               	movwf	_f_can_coming_to_distribution+1,c
  5712  0034E8  0E00               	movlw	0
  5713  0034EA  6E67               	movwf	_f_can_coming_to_distribution,c
  5714                           
  5715                           ;sort.c: 383: f_can_distributed = 1;
  5716  0034EC  0E00               	movlw	0
  5717  0034EE  0101               	movlb	1	; () banked
  5718  0034F0  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  5719  0034F2  0E01               	movlw	1
  5720  0034F4  6F33               	movwf	_f_can_distributed& (0+255),b
  5721                           
  5722                           ; BSR set to: 1
  5723                           ;sort.c: 384: f_most_recent_sort_time = 1;
  5724  0034F6  0E00               	movlw	0
  5725  0034F8  6E6A               	movwf	_f_most_recent_sort_time+1,c
  5726  0034FA  0E01               	movlw	1
  5727  0034FC  6E69               	movwf	_f_most_recent_sort_time,c
  5728                           
  5729                           ; BSR set to: 1
  5730                           ;sort.c: 385: if(f_lastCan == 1){
  5731  0034FE  0100               	movlb	0	; () banked
  5732  003500  05E8               	decf	_f_lastCan& (0+255),w,b
  5733  003502  0100               	movlb	0	; () banked
  5734  003504  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5735  003506  A4D8               	btfss	status,2,c
  5736  003508  0012               	return	
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;sort.c: 386: machine_state = DoneSorting_state;
  5740  00350A  0E02               	movlw	2
  5741  00350C  0100               	movlb	0	; () banked
  5742  00350E  6FFC               	movwf	_machine_state& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745  003510  0012               	return	
  5746  003512                     __end_of_Distribution:
  5747                           	opt stack 0
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           postinc0	equ	0xFEE
  5755                           wreg	equ	0xFE8
  5756                           postdec1	equ	0xFE5
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _machineConfig *****************
  5766 ;; Defined at:
  5767 ;;		line 15 in file "MachineConfig.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        0 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    7
  5788 ;; This function calls:
  5789 ;;		Nothing
  5790 ;; This function is called by:
  5791 ;;		_main
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text12
  5796  004850                     __ptext12:
  5797                           	opt stack 0
  5798  004850                     _machineConfig:
  5799                           	opt stack 23
  5800                           
  5801                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5802                           
  5803                           ;incstack = 0
  5804  004850  0EF0               	movlw	240
  5805  004852  6ED3               	movwf	4051,c	;volatile
  5806                           
  5807                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5808  004854  8C9B               	bsf	3995,6,c	;volatile
  5809                           
  5810                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5811  004856  0E07               	movlw	7
  5812  004858  6E92               	movwf	3986,c	;volatile
  5813                           
  5814                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5815  00485A  0EF2               	movlw	242
  5816  00485C  6E93               	movwf	3987,c	;volatile
  5817                           
  5818                           ;MachineConfig.c: 27: TRISC = 0x00;
  5819  00485E  0E00               	movlw	0
  5820  004860  6E94               	movwf	3988,c	;volatile
  5821                           
  5822                           ;MachineConfig.c: 31: TRISD = 0x00;
  5823  004862  0E00               	movlw	0
  5824  004864  6E95               	movwf	3989,c	;volatile
  5825                           
  5826                           ;MachineConfig.c: 34: TRISE = 0x00;
  5827  004866  0E00               	movlw	0
  5828  004868  6E96               	movwf	3990,c	;volatile
  5829                           
  5830                           ;MachineConfig.c: 37: LATA = 0x00;
  5831  00486A  0E00               	movlw	0
  5832  00486C  6E89               	movwf	3977,c	;volatile
  5833                           
  5834                           ;MachineConfig.c: 38: LATB = 0x00;
  5835  00486E  0E00               	movlw	0
  5836  004870  6E8A               	movwf	3978,c	;volatile
  5837                           
  5838                           ;MachineConfig.c: 39: LATC = 0x00;
  5839  004872  0E00               	movlw	0
  5840  004874  6E8B               	movwf	3979,c	;volatile
  5841                           
  5842                           ;MachineConfig.c: 40: LATD = 0x00;
  5843  004876  0E00               	movlw	0
  5844  004878  6E8C               	movwf	3980,c	;volatile
  5845                           
  5846                           ;MachineConfig.c: 41: LATE = 0x00;
  5847  00487A  0E00               	movlw	0
  5848  00487C  6E8D               	movwf	3981,c	;volatile
  5849                           
  5850                           ;MachineConfig.c: 43: nRBPU = 0;
  5851  00487E  9EF1               	bcf	intcon2,7,c	;volatile
  5852                           
  5853                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5854  004880  0E00               	movlw	0
  5855  004882  6EC2               	movwf	4034,c	;volatile
  5856                           
  5857                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5858  004884  0E0D               	movlw	13
  5859  004886  6EC1               	movwf	4033,c	;volatile
  5860                           
  5861                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5862  004888  0E00               	movlw	0
  5863  00488A  6EB5               	movwf	4021,c	;volatile
  5864                           
  5865                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5866  00488C  96B4               	bcf	4020,3,c	;volatile
  5867                           
  5868                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5869  00488E  0EB1               	movlw	177
  5870  004890  6EC0               	movwf	4032,c	;volatile
  5871                           
  5872                           ;MachineConfig.c: 55: INT1IE = 1;
  5873  004892  86F0               	bsf	intcon3,3,c	;volatile
  5874                           
  5875                           ;MachineConfig.c: 57: TMR0IE = 1;
  5876  004894  8AF2               	bsf	intcon,5,c	;volatile
  5877                           
  5878                           ;MachineConfig.c: 58: TMR1IE = 1;
  5879  004896  809D               	bsf	3997,0,c	;volatile
  5880                           
  5881                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5882  004898  0EB0               	movlw	176
  5883  00489A  6ECD               	movwf	4045,c	;volatile
  5884                           
  5885                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5886  00489C  0EB0               	movlw	176
  5887  00489E  6EB1               	movwf	4017,c	;volatile
  5888                           
  5889                           ;MachineConfig.c: 61: TMR2IE = 1;
  5890  0048A0  829D               	bsf	3997,1,c	;volatile
  5891                           
  5892                           ;MachineConfig.c: 62: TMR3IE = 1;
  5893  0048A2  82A0               	bsf	4000,1,c	;volatile
  5894                           
  5895                           ;MachineConfig.c: 63: PEIE = 1;
  5896  0048A4  8CF2               	bsf	intcon,6,c	;volatile
  5897                           
  5898                           ;MachineConfig.c: 64: ADIE = 0;
  5899  0048A6  9C9D               	bcf	3997,6,c	;volatile
  5900                           
  5901                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5902  0048A8  9EF2               	bcf	intcon,7,c	;volatile
  5903  0048AA  0012               	return		;funcret
  5904  0048AC                     __end_of_machineConfig:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           intcon2	equ	0xFF1
  5914                           intcon3	equ	0xFF0
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           postdec1	equ	0xFE5
  5918                           fsr1l	equ	0xFE1
  5919                           indf2	equ	0xFDF
  5920                           postinc2	equ	0xFDE
  5921                           postdec2	equ	0xFDD
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _logRun *****************
  5927 ;; Defined at:
  5928 ;;		line 84 in file "EEPROM.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5933 ;;  i               2   55[BANK0 ] int 
  5934 ;;  num             1   49[BANK0 ] unsigned char 
  5935 ;;  addr            2   57[BANK0 ] unsigned short 
  5936 ;;  byte11          1   54[BANK0 ] unsigned char 
  5937 ;;  byte3           1   52[BANK0 ] unsigned char 
  5938 ;;  byte2           1   51[BANK0 ] unsigned char 
  5939 ;;  byte1           1   50[BANK0 ] unsigned char 
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;Total ram usage:       10 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:   11
  5956 ;; This function calls:
  5957 ;;		_EEPROM_read
  5958 ;;		_EEPROM_write
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text13
  5965  003A00                     __ptext13:
  5966                           	opt stack 0
  5967  003A00                     _logRun:
  5968                           	opt stack 19
  5969                           
  5970                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5971                           
  5972                           ;incstack = 0
  5973  003A00  0E00               	movlw	0
  5974  003A02  0100               	movlb	0	; () banked
  5975  003A04  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5976  003A06  0E00               	movlw	0
  5977  003A08  6F80               	movwf	EEPROM_read@address& (0+255),b
  5978  003A0A  EC66  F028         	call	_EEPROM_read	;wreg free
  5979  003A0E  0100               	movlb	0	; () banked
  5980  003A10  6FFD               	movwf	_sel& (0+255),b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5984  003A12  0100               	movlb	0	; () banked
  5985  003A14  51FD               	movf	_sel& (0+255),w,b
  5986  003A16  0D0B               	mullw	11
  5987  003A18  0E01               	movlw	1
  5988  003A1A  24F3               	addwf	prodl,w,c
  5989  003A1C  0100               	movlb	0	; () banked
  5990  003A1E  6FB9               	movwf	logRun@addr& (0+255),b
  5991  003A20  0E00               	movlw	0
  5992  003A22  20F4               	addwfc	prodh,w,c
  5993  003A24  0100               	movlb	0	; () banked
  5994  003A26  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;EEPROM.c: 101: if (sel < 3){
  5998  003A28  0E03               	movlw	3
  5999  003A2A  0100               	movlb	0	; () banked
  6000  003A2C  61FD               	cpfslt	_sel& (0+255),b
  6001  003A2E  D00E               	goto	l8845
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6005  003A30  0100               	movlb	0	; () banked
  6006  003A32  29FD               	incf	_sel& (0+255),w,b
  6007  003A34  0100               	movlb	0	; () banked
  6008  003A36  6FB1               	movwf	logRun@num& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6012  003A38  0E00               	movlw	0
  6013  003A3A  0100               	movlb	0	; () banked
  6014  003A3C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6015  003A3E  0E00               	movlw	0
  6016  003A40  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6017  003A42  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6018  003A46  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6019                           
  6020                           ;EEPROM.c: 104: }
  6021  003A4A  D00A               	goto	l8847
  6022  003A4C                     l8845:
  6023                           
  6024                           ;EEPROM.c: 105: else{
  6025                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6026  003A4C  0E00               	movlw	0
  6027  003A4E  0100               	movlb	0	; () banked
  6028  003A50  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6029  003A52  0E00               	movlw	0
  6030  003A54  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6031  003A56  0E00               	movlw	0
  6032  003A58  0100               	movlb	0	; () banked
  6033  003A5A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6034  003A5C  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6035  003A60                     l8847:
  6036                           
  6037                           ;EEPROM.c: 107: }
  6038                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6039  003A60  0100               	movlb	0	; () banked
  6040  003A62  51FE               	movf	_count_total& (0+255),w,b
  6041  003A64  0980               	iorlw	128
  6042  003A66  0100               	movlb	0	; () banked
  6043  003A68  6FB2               	movwf	logRun@byte1& (0+255),b
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6047  003A6A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6048  003A6E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6049  003A72  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6050  003A76  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6051                           
  6052                           ;EEPROM.c: 112: addr++;
  6053  003A7A  0100               	movlb	0	; () banked
  6054  003A7C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6055  003A7E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6059  003A80  0101               	movlb	1	; () banked
  6060  003A82  392F               	swapf	_count_pop_no_tab& (0+255),w,b
  6061  003A84  0BF0               	andlw	240
  6062  003A86  0101               	movlb	1	; () banked
  6063  003A88  1131               	iorwf	_count_pop_w_tab& (0+255),w,b
  6064  003A8A  0100               	movlb	0	; () banked
  6065  003A8C  6FB3               	movwf	logRun@byte2& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6069  003A8E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6070  003A92  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6071  003A96  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6072  003A9A  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6073                           
  6074                           ;EEPROM.c: 117: addr++;
  6075  003A9E  0100               	movlb	0	; () banked
  6076  003AA0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6077  003AA2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6081  003AA4  0101               	movlb	1	; () banked
  6082  003AA6  392D               	swapf	_count_can_w_lab& (0+255),w,b
  6083  003AA8  0BF0               	andlw	240
  6084  003AAA  0101               	movlb	1	; () banked
  6085  003AAC  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  6086  003AAE  0100               	movlb	0	; () banked
  6087  003AB0  6FB4               	movwf	logRun@byte3& (0+255),b
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6091  003AB2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6092  003AB6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6093  003ABA  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6094  003ABE  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6095                           
  6096                           ;EEPROM.c: 120: addr++;
  6097  003AC2  0100               	movlb	0	; () banked
  6098  003AC4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6099  003AC6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6103  003AC8  0E00               	movlw	0
  6104  003ACA  0100               	movlb	0	; () banked
  6105  003ACC  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6106  003ACE  0E00               	movlw	0
  6107  003AD0  6FB7               	movwf	logRun@i& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110  003AD2  0100               	movlb	0	; () banked
  6111  003AD4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6112  003AD6  D008               	goto	l8871
  6113  003AD8  0100               	movlb	0	; () banked
  6114  003ADA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6115  003ADC  E128               	bnz	l1015
  6116  003ADE  0E07               	movlw	7
  6117  003AE0  0100               	movlb	0	; () banked
  6118  003AE2  5DB7               	subwf	logRun@i& (0+255),w,b
  6119  003AE4  B0D8               	btfsc	status,0,c
  6120  003AE6  D023               	goto	l1015
  6121  003AE8                     l8871:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6125  003AE8  90D8               	bcf	status,0,c
  6126  003AEA  0100               	movlb	0	; () banked
  6127  003AEC  35B7               	rlcf	logRun@i& (0+255),w,b
  6128  003AEE  6ED9               	movwf	fsr2l,c
  6129  003AF0  0100               	movlb	0	; () banked
  6130  003AF2  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6131  003AF4  6EDA               	movwf	fsr2h,c
  6132  003AF6  0E0E               	movlw	low _startTime
  6133  003AF8  26D9               	addwf	fsr2l,f,c
  6134  003AFA  0E01               	movlw	high _startTime
  6135  003AFC  22DA               	addwfc	fsr2h,f,c
  6136  003AFE  50DF               	movf	indf2,w,c
  6137  003B00  0100               	movlb	0	; () banked
  6138  003B02  6FB5               	movwf	logRun@byte_i& (0+255),b
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6142  003B04  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6143  003B08  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6144  003B0C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6145  003B10  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6146                           
  6147                           ;EEPROM.c: 126: addr++;
  6148  003B14  0100               	movlb	0	; () banked
  6149  003B16  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6150  003B18  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6151                           
  6152                           ; BSR set to: 0
  6153  003B1A  0100               	movlb	0	; () banked
  6154  003B1C  4BB7               	infsnz	logRun@i& (0+255),f,b
  6155  003B1E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6156                           
  6157                           ; BSR set to: 0
  6158  003B20  0100               	movlb	0	; () banked
  6159  003B22  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6160  003B24  D7E1               	goto	l8871
  6161  003B26  0100               	movlb	0	; () banked
  6162  003B28  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6163  003B2A  E101               	bnz	u8120
  6164  003B2C  D7D8               	goto	L8
  6165  003B2E                     u8120:
  6166  003B2E                     l1015:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;EEPROM.c: 127: }
  6170                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6171  003B2E  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6175  003B32  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6176  003B36  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6177  003B3A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6178  003B3E  ECBC  F01E         	call	_EEPROM_write	;wreg free
  6179  003B42  0012               	return		;funcret
  6180  003B44                     __end_of_logRun:
  6181                           	opt stack 0
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           intcon	equ	0xFF2
  6189                           intcon2	equ	0xFF1
  6190                           intcon3	equ	0xFF0
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1l	equ	0xFE1
  6195                           indf2	equ	0xFDF
  6196                           postinc2	equ	0xFDE
  6197                           postdec2	equ	0xFDD
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _EEPROM_write *****************
  6203 ;; Defined at:
  6204 ;;		line 32 in file "EEPROM.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  address         2   43[BANK0 ] unsigned short 
  6207 ;;  data            1   45[BANK0 ] unsigned char 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  i               1   48[BANK0 ] unsigned char 
  6210 ;;  i               1   47[BANK0 ] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      void 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6220 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;Total ram usage:        6 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:   10
  6227 ;; This function calls:
  6228 ;;		_EEPROM_read
  6229 ;;		_lcdInst
  6230 ;;		_printf
  6231 ;; This function is called by:
  6232 ;;		_Loading
  6233 ;;		_logRun
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text14
  6238  003D78                     __ptext14:
  6239                           	opt stack 0
  6240  003D78                     _EEPROM_write:
  6241                           	opt stack 18
  6242                           
  6243                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6244                           
  6245                           ;incstack = 0
  6246  003D78  84A6               	bsf	4006,2,c	;volatile
  6247                           
  6248                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6249  003D7A  0100               	movlb	0	; () banked
  6250  003D7C  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6251  003D7E  6EAA               	movwf	4010,c	;volatile
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6255  003D80  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;EEPROM.c: 39: EEDATA = data;
  6259  003D84  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6263  003D88  9EA6               	bcf	4006,7,c	;volatile
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6267  003D8A  9CA6               	bcf	4006,6,c	;volatile
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6271  003D8C  9EF2               	bcf	intcon,7,c	;volatile
  6272                           
  6273                           ;EEPROM.c: 45: EECON2 = 0x55;
  6274  003D8E  0E55               	movlw	85
  6275  003D90  6EA7               	movwf	4007,c	;volatile
  6276                           
  6277                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6278  003D92  0EAA               	movlw	170
  6279  003D94  6EA7               	movwf	4007,c	;volatile
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6283  003D96  82A6               	bsf	4006,1,c	;volatile
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6287  003D98  8EF2               	bsf	intcon,7,c	;volatile
  6288  003D9A                     l993:
  6289  003D9A  A8A1               	btfss	4001,4,c	;volatile
  6290  003D9C  D7FE               	goto	l993
  6291                           
  6292                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6293  003D9E  98A1               	bcf	4001,4,c	;volatile
  6294                           
  6295                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6296  003DA0  94A6               	bcf	4006,2,c	;volatile
  6297                           
  6298                           ;EEPROM.c: 57: if(debug){
  6299  003DA2  505D               	movf	_debug,w,c
  6300  003DA4  105E               	iorwf	_debug+1,w,c
  6301  003DA6  B4D8               	btfsc	status,2,c
  6302  003DA8  0012               	return	
  6303                           
  6304                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6305  003DAA  0E01               	movlw	1
  6306  003DAC  EC98  F028         	call	_lcdInst
  6307  003DB0  0E68               	movlw	104
  6308  003DB2  0100               	movlb	0	; () banked
  6309  003DB4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6310  003DB6  0EE4               	movlw	228
  6311  003DB8                     u8827:
  6312  003DB8  2EE8               	decfsz	wreg,f,c
  6313  003DBA  D7FE               	bra	u8827
  6314  003DBC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6315  003DBE  D7FC               	bra	u8827
  6316  003DC0  F000               	nop	
  6317                           
  6318                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6319  003DC2  0E80               	movlw	128
  6320  003DC4  EC98  F028         	call	_lcdInst
  6321                           
  6322                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6323  003DC8  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6324  003DCC  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6325  003DD0  EC66  F028         	call	_EEPROM_read	;wreg free
  6326  003DD4  0100               	movlb	0	; () banked
  6327  003DD6  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6328  003DD8  A4D8               	btfss	status,2,c
  6329  003DDA  D024               	goto	l6597
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6333  003DDC  0E22               	movlw	low STR_66
  6334  003DDE  0100               	movlb	0	; () banked
  6335  003DE0  6F8E               	movwf	printf@f& (0+255),b
  6336  003DE2  0EFB               	movlw	high STR_66
  6337  003DE4  0100               	movlb	0	; () banked
  6338  003DE6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6339  003DE8  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6340  003DEC  0100               	movlb	0	; () banked
  6341  003DEE  6B91               	clrf	(?_printf+3)& (0+255),b
  6342  003DF0  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6343  003DF4  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6344  003DF8  ECFF  F00A         	call	_printf	;wreg free
  6345                           
  6346                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6347  003DFC  0E00               	movlw	0
  6348  003DFE  0100               	movlb	0	; () banked
  6349  003E00  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6350  003E02                     l6589:
  6351                           
  6352                           ; BSR set to: 0
  6353  003E02  0E63               	movlw	99
  6354  003E04  0100               	movlb	0	; () banked
  6355  003E06  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6356  003E08  D001               	goto	l6593
  6357  003E0A  0012               	return	
  6358  003E0C                     l6593:
  6359                           
  6360                           ; BSR set to: 0
  6361  003E0C  0E68               	movlw	104
  6362  003E0E  0100               	movlb	0	; () banked
  6363  003E10  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6364  003E12  0EE4               	movlw	228
  6365  003E14                     u8837:
  6366  003E14  2EE8               	decfsz	wreg,f,c
  6367  003E16  D7FE               	bra	u8837
  6368  003E18  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6369  003E1A  D7FC               	bra	u8837
  6370  003E1C  F000               	nop	
  6371  003E1E  0100               	movlb	0	; () banked
  6372  003E20  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6373  003E22  D7EF               	goto	l6589
  6374  003E24                     l6597:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6378  003E24  0EBD               	movlw	low STR_67
  6379  003E26  0100               	movlb	0	; () banked
  6380  003E28  6F8E               	movwf	printf@f& (0+255),b
  6381  003E2A  0EFF               	movlw	high STR_67
  6382  003E2C  0100               	movlb	0	; () banked
  6383  003E2E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6384  003E30  ECFF  F00A         	call	_printf	;wreg free
  6385  003E34  0E00               	movlw	0
  6386  003E36  0100               	movlb	0	; () banked
  6387  003E38  6FB0               	movwf	EEPROM_write@i_1340& (0+255),b
  6388  003E3A                     l6601:
  6389                           
  6390                           ; BSR set to: 0
  6391  003E3A  0E63               	movlw	99
  6392  003E3C  0100               	movlb	0	; () banked
  6393  003E3E  65B0               	cpfsgt	EEPROM_write@i_1340& (0+255),b
  6394  003E40  D001               	goto	l6605
  6395  003E42  0012               	return	
  6396  003E44                     l6605:
  6397                           
  6398                           ; BSR set to: 0
  6399  003E44  0E68               	movlw	104
  6400  003E46  0100               	movlb	0	; () banked
  6401  003E48  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6402  003E4A  0EE4               	movlw	228
  6403  003E4C                     u8847:
  6404  003E4C  2EE8               	decfsz	wreg,f,c
  6405  003E4E  D7FE               	bra	u8847
  6406  003E50  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6407  003E52  D7FC               	bra	u8847
  6408  003E54  F000               	nop	
  6409  003E56  0100               	movlb	0	; () banked
  6410  003E58  2BB0               	incf	EEPROM_write@i_1340& (0+255),f,b
  6411  003E5A  D7EF               	goto	l6601
  6412  003E5C                     __end_of_EEPROM_write:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           intcon2	equ	0xFF1
  6422                           intcon3	equ	0xFF0
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           postdec1	equ	0xFE5
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _EEPROM_read *****************
  6435 ;; Defined at:
  6436 ;;		line 68 in file "EEPROM.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  address         2    0[BANK0 ] unsigned short 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      unsigned char 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;Total ram usage:        2 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    7
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_Loading
  6461 ;;		_EEPROM_write
  6462 ;;		_logRun
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text15
  6467  0050CC                     __ptext15:
  6468                           	opt stack 0
  6469  0050CC                     _EEPROM_read:
  6470                           	opt stack 20
  6471                           
  6472                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6473                           
  6474                           ;incstack = 0
  6475  0050CC  0100               	movlb	0	; () banked
  6476  0050CE  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6477  0050D0  6EAA               	movwf	4010,c	;volatile
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6481  0050D2  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6485  0050D6  9EA6               	bcf	4006,7,c	;volatile
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6489  0050D8  9CA6               	bcf	4006,6,c	;volatile
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6493  0050DA  80A6               	bsf	4006,0,c	;volatile
  6494  0050DC                     l1006:
  6495  0050DC  B0A6               	btfsc	4006,0,c	;volatile
  6496  0050DE  D7FE               	goto	l1006
  6497                           
  6498                           ;EEPROM.c: 81: return EEDATA;
  6499  0050E0  50A8               	movf	4008,w,c	;volatile
  6500  0050E2  0012               	return	
  6501  0050E4                     __end_of_EEPROM_read:
  6502                           	opt stack 0
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           intcon2	equ	0xFF1
  6511                           intcon3	equ	0xFF0
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _initUI *****************
  6524 ;; Defined at:
  6525 ;;		line 62 in file "UI.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:   12
  6546 ;; This function calls:
  6547 ;;		_change_state_to_menu_start
  6548 ;;		_loadRTC
  6549 ;; This function is called by:
  6550 ;;		_main
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text16
  6555  004E68                     __ptext16:
  6556                           	opt stack 0
  6557  004E68                     _initUI:
  6558                           	opt stack 18
  6559                           
  6560                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6561                           
  6562                           ;incstack = 0
  6563  004E68  8EF2               	bsf	intcon,7,c	;volatile
  6564                           
  6565                           ;UI.c: 64: machine_state = UI_state;
  6566  004E6A  0E00               	movlw	0
  6567  004E6C  0100               	movlb	0	; () banked
  6568  004E6E  6FFC               	movwf	_machine_state& (0+255),b
  6569                           
  6570                           ;UI.c: 65: logstate = 0;
  6571  004E70  0E00               	movlw	0
  6572  004E72  0100               	movlb	0	; () banked
  6573  004E74  6FF7               	movwf	(_logstate+1)& (0+255),b
  6574  004E76  0E00               	movlw	0
  6575  004E78  6FF6               	movwf	_logstate& (0+255),b
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;UI.c: 67: if(RTCflag){
  6579  004E7A  0100               	movlb	0	; () banked
  6580  004E7C  51E2               	movf	_RTCflag& (0+255),w,b
  6581  004E7E  0100               	movlb	0	; () banked
  6582  004E80  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6583  004E82  A4D8               	btfss	status,2,c
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;UI.c: 68: loadRTC();
  6587  004E84  EC5C  F021         	call	_loadRTC	;wreg free
  6588                           
  6589                           ;UI.c: 69: }
  6590                           ;UI.c: 71: change_state_to_menu_start();
  6591  004E88  EC79  F027         	call	_change_state_to_menu_start	;wreg free
  6592                           
  6593                           ;UI.c: 72: firstboot = 1;
  6594  004E8C  0E00               	movlw	0
  6595  004E8E  6E6E               	movwf	_firstboot+1,c
  6596  004E90  0E01               	movlw	1
  6597  004E92  6E6D               	movwf	_firstboot,c
  6598  004E94  0012               	return		;funcret
  6599  004E96                     __end_of_initUI:
  6600                           	opt stack 0
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodh	equ	0xFF4
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           intcon2	equ	0xFF1
  6609                           intcon3	equ	0xFF0
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           postdec1	equ	0xFE5
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           postdec2	equ	0xFDD
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;; *************** function _loadRTC *****************
  6622 ;; Defined at:
  6623 ;;		line 28 in file "RTC.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  i               2   22[BANK0 ] int 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;Total ram usage:        3 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    9
  6644 ;; This function calls:
  6645 ;;		_I2C_Master_Init
  6646 ;;		_I2C_Master_Start
  6647 ;;		_I2C_Master_Stop
  6648 ;;		_I2C_Master_Write
  6649 ;; This function is called by:
  6650 ;;		_initUI
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           	psect	text17
  6655  0042B8                     __ptext17:
  6656                           	opt stack 0
  6657  0042B8                     _loadRTC:
  6658                           	opt stack 20
  6659                           
  6660                           ;RTC.c: 30: I2C_Master_Init(10000);
  6661                           
  6662                           ;incstack = 0
  6663  0042B8  0E10               	movlw	16
  6664  0042BA  0100               	movlb	0	; () banked
  6665  0042BC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6666  0042BE  0E27               	movlw	39
  6667  0042C0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6668  0042C2  0E00               	movlw	0
  6669  0042C4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6670  0042C6  0E00               	movlw	0
  6671  0042C8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6672  0042CA  ECF8  F023         	call	_I2C_Master_Init	;wreg free
  6673                           
  6674                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6675  0042CE  9EF2               	bcf	intcon,7,c	;volatile
  6676                           
  6677                           ;RTC.c: 34: I2C_Master_Start();
  6678  0042D0  ECBE  F028         	call	_I2C_Master_Start	;wreg free
  6679                           
  6680                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6681  0042D4  0E00               	movlw	0
  6682  0042D6  0100               	movlb	0	; () banked
  6683  0042D8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6684  0042DA  0ED0               	movlw	208
  6685  0042DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6686  0042DE  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  6687                           
  6688                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6689  0042E2  0E00               	movlw	0
  6690  0042E4  0100               	movlb	0	; () banked
  6691  0042E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6692  0042E8  0E00               	movlw	0
  6693  0042EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6694  0042EC  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  6695                           
  6696                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6697  0042F0  0E00               	movlw	0
  6698  0042F2  0100               	movlb	0	; () banked
  6699  0042F4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6700  0042F6  0E00               	movlw	0
  6701  0042F8  6F96               	movwf	loadRTC@i& (0+255),b
  6702  0042FA                     l6743:
  6703                           
  6704                           ; BSR set to: 0
  6705  0042FA  0100               	movlb	0	; () banked
  6706  0042FC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6707  0042FE  D008               	goto	l6747
  6708  004300  0100               	movlb	0	; () banked
  6709  004302  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6710  004304  E11B               	bnz	l6753
  6711  004306  0E07               	movlw	7
  6712  004308  0100               	movlb	0	; () banked
  6713  00430A  5D96               	subwf	loadRTC@i& (0+255),w,b
  6714  00430C  B0D8               	btfsc	status,0,c
  6715  00430E  D016               	goto	l6753
  6716  004310                     l6747:
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6720  004310  0E24               	movlw	low _time
  6721  004312  0100               	movlb	0	; () banked
  6722  004314  2596               	addwf	loadRTC@i& (0+255),w,b
  6723  004316  6ED9               	movwf	fsr2l,c
  6724  004318  0E01               	movlw	high _time
  6725  00431A  0100               	movlb	0	; () banked
  6726  00431C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6727  00431E  6EDA               	movwf	fsr2h,c
  6728  004320  50DF               	movf	indf2,w,c
  6729  004322  0100               	movlb	0	; () banked
  6730  004324  6F95               	movwf	??_loadRTC& (0+255),b
  6731  004326  0100               	movlb	0	; () banked
  6732  004328  5195               	movf	??_loadRTC& (0+255),w,b
  6733  00432A  0100               	movlb	0	; () banked
  6734  00432C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6735  00432E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6736  004330  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  6737  004334  0100               	movlb	0	; () banked
  6738  004336  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6739  004338  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6740  00433A  D7DF               	goto	l6743
  6741  00433C                     l6753:
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;RTC.c: 39: }
  6745                           ;RTC.c: 40: I2C_Master_Stop();
  6746  00433C  ECBA  F028         	call	_I2C_Master_Stop	;wreg free
  6747                           
  6748                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6749  004340  8EF2               	bsf	intcon,7,c	;volatile
  6750  004342  0012               	return		;funcret
  6751  004344                     __end_of_loadRTC:
  6752                           	opt stack 0
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           intcon	equ	0xFF2
  6760                           intcon2	equ	0xFF1
  6761                           intcon3	equ	0xFF0
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _I2C_Master_Init *****************
  6774 ;; Defined at:
  6775 ;;		line 15 in file "I2C.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  c               4   13[BANK0 ] const unsigned long 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;Total ram usage:        8 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    8
  6796 ;; This function calls:
  6797 ;;		___lldiv
  6798 ;; This function is called by:
  6799 ;;		_main
  6800 ;;		_loadRTC
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text18
  6805  0047F0                     __ptext18:
  6806                           	opt stack 0
  6807  0047F0                     _I2C_Master_Init:
  6808                           	opt stack 20
  6809                           
  6810                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6811                           
  6812                           ;incstack = 0
  6813  0047F0  0E00               	movlw	0
  6814  0047F2  6EC7               	movwf	4039,c	;volatile
  6815                           
  6816                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6817  0047F4  0E28               	movlw	40
  6818  0047F6  6EC6               	movwf	4038,c	;volatile
  6819                           
  6820                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6821  0047F8  0E00               	movlw	0
  6822  0047FA  6EC5               	movwf	4037,c	;volatile
  6823                           
  6824                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6825  0047FC  0E00               	movlw	0
  6826  0047FE  0100               	movlb	0	; () banked
  6827  004800  6F80               	movwf	___lldiv@dividend& (0+255),b
  6828  004802  0E48               	movlw	72
  6829  004804  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6830  004806  0EE8               	movlw	232
  6831  004808  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6832  00480A  0E01               	movlw	1
  6833  00480C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6834  00480E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6835  004812  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6836  004816  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6837  00481A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6838  00481E  0E02               	movlw	2
  6839  004820                     u5155:
  6840  004820  90D8               	bcf	status,0,c
  6841  004822  0100               	movlb	0	; () banked
  6842  004824  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6843  004826  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6844  004828  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6845  00482A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6846  00482C  2EE8               	decfsz	wreg,f,c
  6847  00482E  D7F8               	goto	u5155
  6848  004830  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6849  004834  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6850  004838  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6851  00483C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6852  004840  EC58  F020         	call	___lldiv	;wreg free
  6853  004844  0100               	movlb	0	; () banked
  6854  004846  0580               	decf	?___lldiv& (0+255),w,b
  6855  004848  6EC8               	movwf	4040,c	;volatile
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;I2C.c: 22: TRISC3 = 1;
  6859  00484A  8694               	bsf	3988,3,c	;volatile
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;I2C.c: 23: TRISC4 = 1;
  6863  00484C  8894               	bsf	3988,4,c	;volatile
  6864                           
  6865                           ; BSR set to: 0
  6866  00484E  0012               	return		;funcret
  6867  004850                     __end_of_I2C_Master_Init:
  6868                           	opt stack 0
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           intcon2	equ	0xFF1
  6877                           intcon3	equ	0xFF0
  6878                           postinc0	equ	0xFEE
  6879                           wreg	equ	0xFE8
  6880                           postdec1	equ	0xFE5
  6881                           fsr1l	equ	0xFE1
  6882                           indf2	equ	0xFDF
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function ___lldiv *****************
  6890 ;; Defined at:
  6891 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  dividend        4    0[BANK0 ] unsigned long 
  6894 ;;  divisor         4    4[BANK0 ] unsigned long 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;  quotient        4    8[BANK0 ] unsigned long 
  6897 ;;  counter         1   12[BANK0 ] unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  4    0[BANK0 ] unsigned long 
  6900 ;; Registers used:
  6901 ;;		wreg, status,2, status,0
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6907 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;Total ram usage:       13 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    7
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_I2C_Master_Init
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text19
  6922  0040B0                     __ptext19:
  6923                           	opt stack 0
  6924  0040B0                     ___lldiv:
  6925                           	opt stack 20
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;incstack = 0
  6929  0040B0  0E00               	movlw	0
  6930  0040B2  0100               	movlb	0	; () banked
  6931  0040B4  6F88               	movwf	___lldiv@quotient& (0+255),b
  6932  0040B6  0E00               	movlw	0
  6933  0040B8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6934  0040BA  0E00               	movlw	0
  6935  0040BC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6936  0040BE  0E00               	movlw	0
  6937  0040C0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6938                           
  6939                           ; BSR set to: 0
  6940  0040C2  0100               	movlb	0	; () banked
  6941  0040C4  5184               	movf	___lldiv@divisor& (0+255),w,b
  6942  0040C6  0100               	movlb	0	; () banked
  6943  0040C8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6944  0040CA  0100               	movlb	0	; () banked
  6945  0040CC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6946  0040CE  0100               	movlb	0	; () banked
  6947  0040D0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6948  0040D2  B4D8               	btfsc	status,2,c
  6949  0040D4  D042               	goto	l1765
  6950                           
  6951                           ; BSR set to: 0
  6952  0040D6  0E01               	movlw	1
  6953  0040D8  0100               	movlb	0	; () banked
  6954  0040DA  6F8C               	movwf	___lldiv@counter& (0+255),b
  6955  0040DC  D008               	goto	l6167
  6956  0040DE                     l6165:
  6957                           
  6958                           ; BSR set to: 0
  6959  0040DE  0100               	movlb	0	; () banked
  6960  0040E0  90D8               	bcf	status,0,c
  6961  0040E2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6962  0040E4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6963  0040E6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6964  0040E8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6965  0040EA  0100               	movlb	0	; () banked
  6966  0040EC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6967  0040EE                     l6167:
  6968                           
  6969                           ; BSR set to: 0
  6970  0040EE  0100               	movlb	0	; () banked
  6971  0040F0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6972  0040F2  D7F5               	goto	l6165
  6973  0040F4                     l6169:
  6974                           
  6975                           ; BSR set to: 0
  6976  0040F4  0100               	movlb	0	; () banked
  6977  0040F6  90D8               	bcf	status,0,c
  6978  0040F8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6979  0040FA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6980  0040FC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6981  0040FE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6982                           
  6983                           ; BSR set to: 0
  6984  004100  0100               	movlb	0	; () banked
  6985  004102  5184               	movf	___lldiv@divisor& (0+255),w,b
  6986  004104  0100               	movlb	0	; () banked
  6987  004106  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6988  004108  0100               	movlb	0	; () banked
  6989  00410A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6990  00410C  0100               	movlb	0	; () banked
  6991  00410E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6992  004110  0100               	movlb	0	; () banked
  6993  004112  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6994  004114  0100               	movlb	0	; () banked
  6995  004116  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6996  004118  0100               	movlb	0	; () banked
  6997  00411A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6998  00411C  0100               	movlb	0	; () banked
  6999  00411E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7000  004120  A0D8               	btfss	status,0,c
  7001  004122  D012               	goto	l6177
  7002                           
  7003                           ; BSR set to: 0
  7004  004124  0100               	movlb	0	; () banked
  7005  004126  5184               	movf	___lldiv@divisor& (0+255),w,b
  7006  004128  0100               	movlb	0	; () banked
  7007  00412A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7008  00412C  0100               	movlb	0	; () banked
  7009  00412E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7010  004130  0100               	movlb	0	; () banked
  7011  004132  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7012  004134  0100               	movlb	0	; () banked
  7013  004136  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7014  004138  0100               	movlb	0	; () banked
  7015  00413A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7016  00413C  0100               	movlb	0	; () banked
  7017  00413E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7018  004140  0100               	movlb	0	; () banked
  7019  004142  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7020                           
  7021                           ; BSR set to: 0
  7022  004144  0100               	movlb	0	; () banked
  7023  004146  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7024  004148                     l6177:
  7025                           
  7026                           ; BSR set to: 0
  7027  004148  0100               	movlb	0	; () banked
  7028  00414A  90D8               	bcf	status,0,c
  7029  00414C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7030  00414E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7031  004150  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7032  004152  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7033                           
  7034                           ; BSR set to: 0
  7035  004154  0100               	movlb	0	; () banked
  7036  004156  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7037  004158  D7CD               	goto	l6169
  7038  00415A                     l1765:
  7039                           
  7040                           ; BSR set to: 0
  7041  00415A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7042  00415E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7043  004162  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7044  004166  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7045                           
  7046                           ; BSR set to: 0
  7047  00416A  0012               	return		;funcret
  7048  00416C                     __end_of___lldiv:
  7049                           	opt stack 0
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           intcon2	equ	0xFF1
  7058                           intcon3	equ	0xFF0
  7059                           postinc0	equ	0xFEE
  7060                           wreg	equ	0xFE8
  7061                           postdec1	equ	0xFE5
  7062                           fsr1l	equ	0xFE1
  7063                           indf2	equ	0xFDF
  7064                           postinc2	equ	0xFDE
  7065                           postdec2	equ	0xFDD
  7066                           fsr2h	equ	0xFDA
  7067                           fsr2l	equ	0xFD9
  7068                           status	equ	0xFD8
  7069                           
  7070 ;; *************** function _change_state_to_menu_start *****************
  7071 ;; Defined at:
  7072 ;;		line 474 in file "UI.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;		None
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;		None
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      void 
  7079 ;; Registers used:
  7080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;Total ram usage:        0 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:   11
  7093 ;; This function calls:
  7094 ;;		_lcdInst
  7095 ;;		_printRTC
  7096 ;;		_printf
  7097 ;; This function is called by:
  7098 ;;		_initUI
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text20
  7103  004EF2                     __ptext20:
  7104                           	opt stack 0
  7105  004EF2                     _change_state_to_menu_start:
  7106                           	opt stack 18
  7107                           
  7108                           ;UI.c: 475: cur_state = 0;
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;incstack = 0
  7112  004EF2  0E00               	movlw	0
  7113  004EF4  0100               	movlb	0	; () banked
  7114  004EF6  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7115  004EF8  0E00               	movlw	0
  7116  004EFA  6FE6               	movwf	_cur_state& (0+255),b
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;UI.c: 477: lcdInst(0b10000000);;
  7120  004EFC  0E80               	movlw	128
  7121  004EFE  EC98  F028         	call	_lcdInst
  7122                           
  7123                           ;UI.c: 478: printRTC();
  7124  004F02  EC13  F012         	call	_printRTC	;wreg free
  7125                           
  7126                           ;UI.c: 479: lcdInst(0b11000000);;
  7127  004F06  0EC0               	movlw	192
  7128  004F08  EC98  F028         	call	_lcdInst
  7129                           
  7130                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7131  004F0C  0EF7               	movlw	low STR_30
  7132  004F0E  0100               	movlb	0	; () banked
  7133  004F10  6F8E               	movwf	printf@f& (0+255),b
  7134  004F12  0EFD               	movlw	high STR_30
  7135  004F14  0100               	movlb	0	; () banked
  7136  004F16  6F8F               	movwf	(printf@f+1)& (0+255),b
  7137  004F18  ECFF  F00A         	call	_printf	;wreg free
  7138  004F1C  0012               	return		;funcret
  7139  004F1E                     __end_of_change_state_to_menu_start:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           intcon2	equ	0xFF1
  7149                           intcon3	equ	0xFF0
  7150                           postinc0	equ	0xFEE
  7151                           wreg	equ	0xFE8
  7152                           postdec1	equ	0xFE5
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _initTime *****************
  7162 ;; Defined at:
  7163 ;;		line 17 in file "RTC.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  s               1    wreg     unsigned char 
  7166 ;;  m               1    0[BANK0 ] unsigned char 
  7167 ;;  h               1    1[BANK0 ] unsigned char 
  7168 ;;  w               1    2[BANK0 ] unsigned char 
  7169 ;;  DD              1    3[BANK0 ] unsigned char 
  7170 ;;  MM              1    4[BANK0 ] unsigned char 
  7171 ;;  YY              1    5[BANK0 ] unsigned char 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  s               1    6[BANK0 ] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7183 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;Total ram usage:        7 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    7
  7190 ;; This function calls:
  7191 ;;		Nothing
  7192 ;; This function is called by:
  7193 ;;		_main
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text21
  7198  005056                     __ptext21:
  7199                           	opt stack 0
  7200  005056                     _initTime:
  7201                           	opt stack 23
  7202                           
  7203                           ;incstack = 0
  7204                           ;initTime@s stored from wreg
  7205  005056  0100               	movlb	0	; () banked
  7206  005058  6F86               	movwf	initTime@s& (0+255),b
  7207                           
  7208                           ;RTC.c: 19: time[0] = s;
  7209  00505A  C086  F124         	movff	initTime@s,_time
  7210                           
  7211                           ;RTC.c: 20: time[1] = m;
  7212  00505E  C080  F125         	movff	initTime@m,_time+1
  7213                           
  7214                           ;RTC.c: 21: time[2] = h;
  7215  005062  C081  F126         	movff	initTime@h,_time+2
  7216                           
  7217                           ;RTC.c: 22: time[3] = w;
  7218  005066  C082  F127         	movff	initTime@w,_time+3
  7219                           
  7220                           ;RTC.c: 23: time[4] = DD;
  7221  00506A  C083  F128         	movff	initTime@DD,_time+4
  7222                           
  7223                           ;RTC.c: 24: time[5] = MM;
  7224  00506E  C084  F129         	movff	initTime@MM,_time+5
  7225                           
  7226                           ;RTC.c: 25: time[6] = YY;
  7227  005072  C085  F12A         	movff	initTime@YY,_time+6
  7228  005076  0012               	return		;funcret
  7229  005078                     __end_of_initTime:
  7230                           	opt stack 0
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           intcon	equ	0xFF2
  7238                           intcon2	equ	0xFF1
  7239                           intcon3	equ	0xFF0
  7240                           postinc0	equ	0xFEE
  7241                           wreg	equ	0xFE8
  7242                           postdec1	equ	0xFE5
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _initLCD *****************
  7252 ;; Defined at:
  7253 ;;		line 48 in file "lcd.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;		None
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;		None
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        1 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    9
  7274 ;; This function calls:
  7275 ;;		_lcdInst
  7276 ;; This function is called by:
  7277 ;;		_main
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text22
  7282  004AF0                     __ptext22:
  7283                           	opt stack 0
  7284  004AF0                     _initLCD:
  7285                           	opt stack 21
  7286                           
  7287                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7288                           
  7289                           ;incstack = 0
  7290  004AF0  0E9C               	movlw	156
  7291  004AF2  0100               	movlb	0	; () banked
  7292  004AF4  6F83               	movwf	??_initLCD& (0+255),b
  7293  004AF6  0ED7               	movlw	215
  7294  004AF8                     u8857:
  7295  004AF8  2EE8               	decfsz	wreg,f,c
  7296  004AFA  D7FE               	bra	u8857
  7297  004AFC  2F83               	decfsz	??_initLCD& (0+255),f,b
  7298  004AFE  D7FC               	bra	u8857
  7299                           
  7300                           ;lcd.c: 50: lcdInst(0b00110011);
  7301  004B00  0E33               	movlw	51
  7302  004B02  EC98  F028         	call	_lcdInst
  7303                           
  7304                           ;lcd.c: 51: lcdInst(0b00110010);
  7305  004B06  0E32               	movlw	50
  7306  004B08  EC98  F028         	call	_lcdInst
  7307                           
  7308                           ;lcd.c: 53: lcdInst(0b00101000);
  7309  004B0C  0E28               	movlw	40
  7310  004B0E  EC98  F028         	call	_lcdInst
  7311                           
  7312                           ;lcd.c: 54: lcdInst(0b00001100);
  7313  004B12  0E0C               	movlw	12
  7314  004B14  EC98  F028         	call	_lcdInst
  7315                           
  7316                           ;lcd.c: 55: lcdInst(0b00000110);
  7317  004B18  0E06               	movlw	6
  7318  004B1A  EC98  F028         	call	_lcdInst
  7319                           
  7320                           ;lcd.c: 56: lcdInst(0b00000001);
  7321  004B1E  0E01               	movlw	1
  7322  004B20  EC98  F028         	call	_lcdInst
  7323                           
  7324                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7325  004B24  0E9C               	movlw	156
  7326  004B26  0100               	movlb	0	; () banked
  7327  004B28  6F83               	movwf	??_initLCD& (0+255),b
  7328  004B2A  0ED7               	movlw	215
  7329  004B2C                     u8867:
  7330  004B2C  2EE8               	decfsz	wreg,f,c
  7331  004B2E  D7FE               	bra	u8867
  7332  004B30  2F83               	decfsz	??_initLCD& (0+255),f,b
  7333  004B32  D7FC               	bra	u8867
  7334  004B34  0012               	return		;funcret
  7335  004B36                     __end_of_initLCD:
  7336                           	opt stack 0
  7337                           tblptru	equ	0xFF8
  7338                           tblptrh	equ	0xFF7
  7339                           tblptrl	equ	0xFF6
  7340                           tablat	equ	0xFF5
  7341                           prodh	equ	0xFF4
  7342                           prodl	equ	0xFF3
  7343                           intcon	equ	0xFF2
  7344                           intcon2	equ	0xFF1
  7345                           intcon3	equ	0xFF0
  7346                           postinc0	equ	0xFEE
  7347                           wreg	equ	0xFE8
  7348                           postdec1	equ	0xFE5
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _UI *****************
  7358 ;; Defined at:
  7359 ;;		line 76 in file "UI.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  i               1   73[BANK0 ] unsigned char 
  7364 ;;  i               1   85[BANK0 ] unsigned char 
  7365 ;;  i               1   84[BANK0 ] unsigned char 
  7366 ;;  i               1   83[BANK0 ] unsigned char 
  7367 ;;  i               1   82[BANK0 ] unsigned char 
  7368 ;;  i               1   81[BANK0 ] unsigned char 
  7369 ;;  i               1   80[BANK0 ] unsigned char 
  7370 ;;  i               1   79[BANK0 ] unsigned char 
  7371 ;;  i               1   78[BANK0 ] unsigned char 
  7372 ;;  i               1   77[BANK0 ] unsigned char 
  7373 ;;  i               1   76[BANK0 ] unsigned char 
  7374 ;;  i               1   75[BANK0 ] unsigned char 
  7375 ;;  i               1   74[BANK0 ] unsigned char 
  7376 ;;  month           4   86[BANK0 ] unsigned char [4]
  7377 ;;  i               1   72[BANK0 ] unsigned char 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;Total ram usage:       22 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:   11
  7394 ;; This function calls:
  7395 ;;		___awdiv
  7396 ;;		___awmod
  7397 ;;		_change_state_to_menu_12
  7398 ;;		_change_state_to_menu_22
  7399 ;;		_lcdInst
  7400 ;;		_printRTC
  7401 ;;		_printf
  7402 ;;		_strcpy
  7403 ;; This function is called by:
  7404 ;;		_main
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text23
  7409  0008CA                     __ptext23:
  7410                           	opt stack 0
  7411  0008CA                     _UI:
  7412                           	opt stack 19
  7413                           
  7414                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7415                           
  7416                           ;incstack = 0
  7417  0008CA  0E02               	movlw	2
  7418  0008CC  0100               	movlb	0	; () banked
  7419  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7420  0008D0  A4D8               	btfss	status,2,c
  7421  0008D2  D075               	goto	l8269
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7425  0008D4  0E01               	movlw	1
  7426  0008D6  EC98  F028         	call	_lcdInst
  7427  0008DA  0E68               	movlw	104
  7428  0008DC  0100               	movlb	0	; () banked
  7429  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7430  0008E0  0EE4               	movlw	228
  7431  0008E2                     u8877:
  7432  0008E2  2EE8               	decfsz	wreg,f,c
  7433  0008E4  D7FE               	bra	u8877
  7434  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7435  0008E8  D7FC               	bra	u8877
  7436  0008EA  F000               	nop	
  7437                           
  7438                           ;UI.c: 79: lcdInst(0b10000000);;
  7439  0008EC  0E80               	movlw	128
  7440  0008EE  EC98  F028         	call	_lcdInst
  7441                           
  7442                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7443  0008F2  0EA3               	movlw	low STR_1
  7444  0008F4  0100               	movlb	0	; () banked
  7445  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7446  0008F8  0EFB               	movlw	high STR_1
  7447  0008FA  0100               	movlb	0	; () banked
  7448  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7449  0008FE  0E01               	movlw	1
  7450  000900  0100               	movlb	0	; () banked
  7451  000902  25FD               	addwf	_sel& (0+255),w,b
  7452  000904  0100               	movlb	0	; () banked
  7453  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7454  000908  0100               	movlb	0	; () banked
  7455  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7456  00090C  0E00               	movlw	0
  7457  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7458  000910  ECFF  F00A         	call	_printf	;wreg free
  7459                           
  7460                           ;UI.c: 81: lcdInst(0b11000000);;
  7461  000914  0EC0               	movlw	192
  7462  000916  EC98  F028         	call	_lcdInst
  7463                           
  7464                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7465  00091A  0E0E               	movlw	14
  7466  00091C  0100               	movlb	0	; () banked
  7467  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7468  000920  0E10               	movlw	16
  7469  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7470  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7471  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7472  00092C  EC0B  F021         	call	___awmod	;wreg free
  7473  000930  C080  F0C6         	movff	?___awmod,_UI$2334
  7474  000934  C081  F0C7         	movff	?___awmod+1,_UI$2334+1
  7475                           
  7476                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7477  000938  0E27               	movlw	low STR_2
  7478  00093A  0100               	movlb	0	; () banked
  7479  00093C  6F8E               	movwf	printf@f& (0+255),b
  7480  00093E  0EFF               	movlw	high STR_2
  7481  000940  0100               	movlb	0	; () banked
  7482  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7483  000944  0E0E               	movlw	14
  7484  000946  0100               	movlb	0	; () banked
  7485  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7486  00094A  0E10               	movlw	16
  7487  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7488  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7489  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7490  000956  EC0B  F021         	call	___awmod	;wreg free
  7491  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7492  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7493  000962  0E00               	movlw	0
  7494  000964  0100               	movlb	0	; () banked
  7495  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7496  000968  0E3C               	movlw	60
  7497  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7498  00096C  ECF9  F01F         	call	___awdiv	;wreg free
  7499  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7500  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7501  000978  C0C6  F080         	movff	_UI$2334,___awmod@dividend
  7502  00097C  C0C7  F081         	movff	_UI$2334+1,___awmod@dividend+1
  7503  000980  0E00               	movlw	0
  7504  000982  0100               	movlb	0	; () banked
  7505  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7506  000986  0E3C               	movlw	60
  7507  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7508  00098A  EC0B  F021         	call	___awmod	;wreg free
  7509  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7510  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7511  000996  ECFF  F00A         	call	_printf	;wreg free
  7512                           
  7513                           ;UI.c: 83: machine_state = UI_state;
  7514  00099A  0E00               	movlw	0
  7515  00099C  0100               	movlb	0	; () banked
  7516  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7517  0009A0                     l180:
  7518  0009A0  A281               	btfss	3969,1,c	;volatile
  7519  0009A2  D7FE               	goto	l180
  7520                           
  7521                           ;UI.c: 86: }
  7522                           ;UI.c: 87: if(cur_state==12){
  7523  0009A4  0E0C               	movlw	12
  7524  0009A6  0100               	movlb	0	; () banked
  7525  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7526  0009AA  0100               	movlb	0	; () banked
  7527  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7528  0009AE  A4D8               	btfss	status,2,c
  7529  0009B0  D003               	goto	l8267
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;UI.c: 88: change_state_to_menu_12();
  7533  0009B2  ECD8  F025         	call	_change_state_to_menu_12	;wreg free
  7534                           
  7535                           ;UI.c: 89: }
  7536  0009B6  D3D5               	goto	l8589
  7537  0009B8                     l8267:
  7538                           
  7539                           ;UI.c: 90: else{
  7540                           ;UI.c: 91: change_state_to_menu_22();
  7541  0009B8  ECBC  F025         	call	_change_state_to_menu_22	;wreg free
  7542                           
  7543                           ;UI.c: 92: }
  7544                           ;UI.c: 93: }
  7545  0009BC  D3D2               	goto	l8589
  7546  0009BE                     l8269:
  7547                           
  7548                           ;UI.c: 94: else if(cur_state == 0){
  7549  0009BE  0100               	movlb	0	; () banked
  7550  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7551  0009C2  0100               	movlb	0	; () banked
  7552  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7553  0009C6  A4D8               	btfss	status,2,c
  7554  0009C8  D3CC               	goto	l8589
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7558  0009CA  0E00               	movlw	0
  7559  0009CC  0100               	movlb	0	; () banked
  7560  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7561  0009D0                     l8273:
  7562                           
  7563                           ; BSR set to: 0
  7564  0009D0  0E63               	movlw	99
  7565  0009D2  0100               	movlb	0	; () banked
  7566  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7567  0009D6  D001               	goto	l8277
  7568  0009D8  D00C               	goto	l8281
  7569  0009DA                     l8277:
  7570                           
  7571                           ; BSR set to: 0
  7572  0009DA  0E68               	movlw	104
  7573  0009DC  0100               	movlb	0	; () banked
  7574  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7575  0009E0  0EE4               	movlw	228
  7576  0009E2                     u8887:
  7577  0009E2  2EE8               	decfsz	wreg,f,c
  7578  0009E4  D7FE               	bra	u8887
  7579  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7580  0009E8  D7FC               	bra	u8887
  7581  0009EA  F000               	nop	
  7582  0009EC  0100               	movlb	0	; () banked
  7583  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7584  0009F0  D7EF               	goto	l8273
  7585  0009F2                     l8281:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;UI.c: 96: if(cur_state == 0){
  7589  0009F2  0100               	movlb	0	; () banked
  7590  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7591  0009F6  0100               	movlb	0	; () banked
  7592  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7593  0009FA  A4D8               	btfss	status,2,c
  7594  0009FC  D3B2               	goto	l8589
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;UI.c: 97: printRTC();
  7598  0009FE  EC13  F012         	call	_printRTC	;wreg free
  7599                           
  7600                           ;UI.c: 98: }
  7601                           ;UI.c: 99: }
  7602                           ;UI.c: 100: while(logstate){
  7603  000A02  D3AF               	goto	l8589
  7604  000A04                     l8285:
  7605                           
  7606                           ;UI.c: 102: if(!log_completion){
  7607  000A04  0100               	movlb	0	; () banked
  7608  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7609  000A08  0100               	movlb	0	; () banked
  7610  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7611  000A0C  A4D8               	btfss	status,2,c
  7612  000A0E  D041               	goto	l8315
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7616  000A10  0E01               	movlw	1
  7617  000A12  EC98  F028         	call	_lcdInst
  7618  000A16  0E68               	movlw	104
  7619  000A18  0100               	movlb	0	; () banked
  7620  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7621  000A1C  0EE4               	movlw	228
  7622  000A1E                     u8897:
  7623  000A1E  2EE8               	decfsz	wreg,f,c
  7624  000A20  D7FE               	bra	u8897
  7625  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7626  000A24  D7FC               	bra	u8897
  7627  000A26  F000               	nop	
  7628                           
  7629                           ;UI.c: 104: lcdInst(0b10000000);;
  7630  000A28  0E80               	movlw	128
  7631  000A2A  EC98  F028         	call	_lcdInst
  7632                           
  7633                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7634  000A2E  0E91               	movlw	low STR_3
  7635  000A30  0100               	movlb	0	; () banked
  7636  000A32  6F8E               	movwf	printf@f& (0+255),b
  7637  000A34  0EFB               	movlw	high STR_3
  7638  000A36  0100               	movlb	0	; () banked
  7639  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7640  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7641  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7642  000A42  ECFF  F00A         	call	_printf	;wreg free
  7643                           
  7644                           ;UI.c: 106: lcdInst(0b11000000);;
  7645  000A46  0EC0               	movlw	192
  7646  000A48  EC98  F028         	call	_lcdInst
  7647                           
  7648                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7649  000A4C  0E4A               	movlw	low STR_4
  7650  000A4E  0100               	movlb	0	; () banked
  7651  000A50  6F8E               	movwf	printf@f& (0+255),b
  7652  000A52  0EFE               	movlw	high STR_4
  7653  000A54  0100               	movlb	0	; () banked
  7654  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7655  000A58  ECFF  F00A         	call	_printf	;wreg free
  7656  000A5C                     l8299:
  7657  000A5C  0E00               	movlw	0
  7658  000A5E  0100               	movlb	0	; () banked
  7659  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7660  000A62                     l8301:
  7661                           
  7662                           ; BSR set to: 0
  7663  000A62  0E63               	movlw	99
  7664  000A64  0100               	movlb	0	; () banked
  7665  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7666  000A68  D001               	goto	l8305
  7667  000A6A  D00C               	goto	l8309
  7668  000A6C                     l8305:
  7669                           
  7670                           ; BSR set to: 0
  7671  000A6C  0E68               	movlw	104
  7672  000A6E  0100               	movlb	0	; () banked
  7673  000A70  6FC4               	movwf	??_UI& (0+255),b
  7674  000A72  0EE4               	movlw	228
  7675  000A74                     u8907:
  7676  000A74  2EE8               	decfsz	wreg,f,c
  7677  000A76  D7FE               	bra	u8907
  7678  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7679  000A7A  D7FC               	bra	u8907
  7680  000A7C  F000               	nop	
  7681  000A7E  0100               	movlb	0	; () banked
  7682  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7683  000A82  D7EF               	goto	l8301
  7684  000A84                     l8309:
  7685                           
  7686                           ; BSR set to: 0
  7687  000A84  0100               	movlb	0	; () banked
  7688  000A86  51F6               	movf	_logstate& (0+255),w,b
  7689  000A88  0100               	movlb	0	; () banked
  7690  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7691  000A8C  B4D8               	btfsc	status,2,c
  7692  000A8E  0012               	return	
  7693  000A90  D7E5               	goto	l8299
  7694  000A92                     l8315:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;UI.c: 111: else{
  7698                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7699  000A92  0E01               	movlw	1
  7700  000A94  EC98  F028         	call	_lcdInst
  7701  000A98  0E68               	movlw	104
  7702  000A9A  0100               	movlb	0	; () banked
  7703  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7704  000A9E  0EE4               	movlw	228
  7705  000AA0                     u8917:
  7706  000AA0  2EE8               	decfsz	wreg,f,c
  7707  000AA2  D7FE               	bra	u8917
  7708  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7709  000AA6  D7FC               	bra	u8917
  7710  000AA8  F000               	nop	
  7711                           
  7712                           ;UI.c: 113: lcdInst(0b10000000);;
  7713  000AAA  0E80               	movlw	128
  7714  000AAC  EC98  F028         	call	_lcdInst
  7715                           
  7716                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7717  000AB0  0E91               	movlw	low STR_3
  7718  000AB2  0100               	movlb	0	; () banked
  7719  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7720  000AB6  0EFB               	movlw	high STR_3
  7721  000AB8  0100               	movlb	0	; () banked
  7722  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7723  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7724  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7725  000AC4  ECFF  F00A         	call	_printf	;wreg free
  7726                           
  7727                           ;UI.c: 115: lcdInst(0b11000000);;
  7728  000AC8  0EC0               	movlw	192
  7729  000ACA  EC98  F028         	call	_lcdInst
  7730                           
  7731                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7732  000ACE  0EE6               	movlw	low STR_6
  7733  000AD0  0100               	movlb	0	; () banked
  7734  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7735  000AD4  0EFD               	movlw	high STR_6
  7736  000AD6  0100               	movlb	0	; () banked
  7737  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7738  000ADA  ECFF  F00A         	call	_printf	;wreg free
  7739                           
  7740                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7741  000ADE  0E00               	movlw	0
  7742  000AE0  0100               	movlb	0	; () banked
  7743  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7744  000AE4                     l8329:
  7745                           
  7746                           ; BSR set to: 0
  7747  000AE4  0E63               	movlw	99
  7748  000AE6  0100               	movlb	0	; () banked
  7749  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7750  000AEA  D001               	goto	l8333
  7751  000AEC  D00C               	goto	l8337
  7752  000AEE                     l8333:
  7753                           
  7754                           ; BSR set to: 0
  7755  000AEE  0E68               	movlw	104
  7756  000AF0  0100               	movlb	0	; () banked
  7757  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7758  000AF4  0EE4               	movlw	228
  7759  000AF6                     u8927:
  7760  000AF6  2EE8               	decfsz	wreg,f,c
  7761  000AF8  D7FE               	bra	u8927
  7762  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7763  000AFC  D7FC               	bra	u8927
  7764  000AFE  F000               	nop	
  7765  000B00  0100               	movlb	0	; () banked
  7766  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7767  000B04  D7EF               	goto	l8329
  7768  000B06                     l8337:
  7769                           
  7770                           ; BSR set to: 0
  7771  000B06  0100               	movlb	0	; () banked
  7772  000B08  51F6               	movf	_logstate& (0+255),w,b
  7773  000B0A  0100               	movlb	0	; () banked
  7774  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7775  000B0E  B4D8               	btfsc	status,2,c
  7776  000B10  0012               	return	
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7780                           
  7781                           ; BSR set to: 0
  7782                           
  7783                           ; BSR set to: 0
  7784  000B12  0E00               	movlw	0
  7785  000B14  0100               	movlb	0	; () banked
  7786  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7787  000B18                     l8343:
  7788                           
  7789                           ; BSR set to: 0
  7790  000B18  0E63               	movlw	99
  7791  000B1A  0100               	movlb	0	; () banked
  7792  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7793  000B1E  D001               	goto	l8347
  7794  000B20  D00C               	goto	l8351
  7795  000B22                     l8347:
  7796                           
  7797                           ; BSR set to: 0
  7798  000B22  0E68               	movlw	104
  7799  000B24  0100               	movlb	0	; () banked
  7800  000B26  6FC4               	movwf	??_UI& (0+255),b
  7801  000B28  0EE4               	movlw	228
  7802  000B2A                     u8937:
  7803  000B2A  2EE8               	decfsz	wreg,f,c
  7804  000B2C  D7FE               	bra	u8937
  7805  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7806  000B30  D7FC               	bra	u8937
  7807  000B32  F000               	nop	
  7808  000B34  0100               	movlb	0	; () banked
  7809  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7810  000B38  D7EF               	goto	l8343
  7811  000B3A                     l8351:
  7812                           
  7813                           ; BSR set to: 0
  7814  000B3A  0100               	movlb	0	; () banked
  7815  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7816  000B3E  0100               	movlb	0	; () banked
  7817  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7818  000B42  B4D8               	btfsc	status,2,c
  7819  000B44  0012               	return	
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7823                           
  7824                           ; BSR set to: 0
  7825                           
  7826                           ; BSR set to: 0
  7827  000B46  0E01               	movlw	1
  7828  000B48  EC98  F028         	call	_lcdInst
  7829  000B4C  0E68               	movlw	104
  7830  000B4E  0100               	movlb	0	; () banked
  7831  000B50  6FC4               	movwf	??_UI& (0+255),b
  7832  000B52  0EE4               	movlw	228
  7833  000B54                     u8947:
  7834  000B54  2EE8               	decfsz	wreg,f,c
  7835  000B56  D7FE               	bra	u8947
  7836  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7837  000B5A  D7FC               	bra	u8947
  7838  000B5C  F000               	nop	
  7839                           
  7840                           ;UI.c: 122: lcdInst(0b10000000);;
  7841  000B5E  0E80               	movlw	128
  7842  000B60  EC98  F028         	call	_lcdInst
  7843                           
  7844                           ;UI.c: 123: printf("START:");
  7845  000B64  0EC4               	movlw	low STR_7
  7846  000B66  0100               	movlb	0	; () banked
  7847  000B68  6F8E               	movwf	printf@f& (0+255),b
  7848  000B6A  0EFF               	movlw	high STR_7
  7849  000B6C  0100               	movlb	0	; () banked
  7850  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7851  000B70  ECFF  F00A         	call	_printf	;wreg free
  7852                           
  7853                           ;UI.c: 124: lcdInst(0b11000000);;
  7854  000B74  0EC0               	movlw	192
  7855  000B76  EC98  F028         	call	_lcdInst
  7856                           
  7857                           ;UI.c: 125: char month[] = "MMM";
  7858  000B7A  C137  F0D6         	movff	UI@F3228,UI@month
  7859  000B7E  C138  F0D7         	movff	UI@F3228+1,UI@month+1
  7860  000B82  C139  F0D8         	movff	UI@F3228+2,UI@month+2
  7861  000B86  C13A  F0D9         	movff	UI@F3228+3,UI@month+3
  7862                           
  7863                           ;UI.c: 126: switch(log_startTime[5]){
  7864  000B8A  D0C3               	goto	l8395
  7865  000B8C                     l8367:
  7866                           
  7867                           ;UI.c: 128: strcpy(month, "JAN");
  7868  000B8C  0ED6               	movlw	low UI@month
  7869  000B8E  0100               	movlb	0	; () banked
  7870  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7871  000B92  0E00               	movlw	high UI@month
  7872  000B94  0100               	movlb	0	; () banked
  7873  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7874  000B98  0EDB               	movlw	low STR_8
  7875  000B9A  0100               	movlb	0	; () banked
  7876  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7877  000B9E  0EFF               	movlw	high STR_8
  7878  000BA0  0100               	movlb	0	; () banked
  7879  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7880  000BA4  ECF4  F025         	call	_strcpy	;wreg free
  7881                           
  7882                           ;UI.c: 129: break;
  7883  000BA8  D0E6               	goto	l8397
  7884  000BAA                     l8369:
  7885                           
  7886                           ;UI.c: 131: strcpy(month, "FEB");
  7887  000BAA  0ED6               	movlw	low UI@month
  7888  000BAC  0100               	movlb	0	; () banked
  7889  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7890  000BB0  0E00               	movlw	high UI@month
  7891  000BB2  0100               	movlb	0	; () banked
  7892  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7893  000BB6  0ECB               	movlw	low STR_9
  7894  000BB8  0100               	movlb	0	; () banked
  7895  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7896  000BBC  0EFF               	movlw	high STR_9
  7897  000BBE  0100               	movlb	0	; () banked
  7898  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7899  000BC2  ECF4  F025         	call	_strcpy	;wreg free
  7900                           
  7901                           ;UI.c: 132: break;
  7902  000BC6  D0D7               	goto	l8397
  7903  000BC8                     l8371:
  7904                           
  7905                           ;UI.c: 134: strcpy(month, "MAR");
  7906  000BC8  0ED6               	movlw	low UI@month
  7907  000BCA  0100               	movlb	0	; () banked
  7908  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7909  000BCE  0E00               	movlw	high UI@month
  7910  000BD0  0100               	movlb	0	; () banked
  7911  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7912  000BD4  0EE7               	movlw	low STR_10
  7913  000BD6  0100               	movlb	0	; () banked
  7914  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7915  000BDA  0EFF               	movlw	high STR_10
  7916  000BDC  0100               	movlb	0	; () banked
  7917  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7918  000BE0  ECF4  F025         	call	_strcpy	;wreg free
  7919                           
  7920                           ;UI.c: 135: break;
  7921  000BE4  D0C8               	goto	l8397
  7922  000BE6                     l8373:
  7923                           
  7924                           ;UI.c: 137: strcpy(month, "APR");
  7925  000BE6  0ED6               	movlw	low UI@month
  7926  000BE8  0100               	movlb	0	; () banked
  7927  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7928  000BEC  0E00               	movlw	high UI@month
  7929  000BEE  0100               	movlb	0	; () banked
  7930  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7931  000BF2  0EEB               	movlw	low STR_11
  7932  000BF4  0100               	movlb	0	; () banked
  7933  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7934  000BF8  0EFF               	movlw	high STR_11
  7935  000BFA  0100               	movlb	0	; () banked
  7936  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7937  000BFE  ECF4  F025         	call	_strcpy	;wreg free
  7938                           
  7939                           ;UI.c: 138: break;
  7940  000C02  D0B9               	goto	l8397
  7941  000C04                     l8375:
  7942                           
  7943                           ;UI.c: 140: strcpy(month, "MAY");
  7944  000C04  0ED6               	movlw	low UI@month
  7945  000C06  0100               	movlb	0	; () banked
  7946  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7947  000C0A  0E00               	movlw	high UI@month
  7948  000C0C  0100               	movlb	0	; () banked
  7949  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7950  000C10  0EFB               	movlw	low STR_12
  7951  000C12  0100               	movlb	0	; () banked
  7952  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7953  000C16  0EFF               	movlw	high STR_12
  7954  000C18  0100               	movlb	0	; () banked
  7955  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7956  000C1C  ECF4  F025         	call	_strcpy	;wreg free
  7957                           
  7958                           ;UI.c: 141: break;
  7959  000C20  D0AA               	goto	l8397
  7960  000C22                     l8377:
  7961                           
  7962                           ;UI.c: 143: strcpy(month, "JUN");
  7963  000C22  0ED6               	movlw	low UI@month
  7964  000C24  0100               	movlb	0	; () banked
  7965  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7966  000C28  0E00               	movlw	high UI@month
  7967  000C2A  0100               	movlb	0	; () banked
  7968  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7969  000C2E  0EDF               	movlw	low STR_13
  7970  000C30  0100               	movlb	0	; () banked
  7971  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7972  000C34  0EFF               	movlw	high STR_13
  7973  000C36  0100               	movlb	0	; () banked
  7974  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7975  000C3A  ECF4  F025         	call	_strcpy	;wreg free
  7976                           
  7977                           ;UI.c: 144: break;
  7978  000C3E  D09B               	goto	l8397
  7979  000C40                     l8379:
  7980                           
  7981                           ;UI.c: 146: strcpy(month, "JUL");
  7982  000C40  0ED6               	movlw	low UI@month
  7983  000C42  0100               	movlb	0	; () banked
  7984  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7985  000C46  0E00               	movlw	high UI@month
  7986  000C48  0100               	movlb	0	; () banked
  7987  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7988  000C4C  0ED7               	movlw	low STR_14
  7989  000C4E  0100               	movlb	0	; () banked
  7990  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7991  000C52  0EFF               	movlw	high STR_14
  7992  000C54  0100               	movlb	0	; () banked
  7993  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7994  000C58  ECF4  F025         	call	_strcpy	;wreg free
  7995                           
  7996                           ;UI.c: 147: break;
  7997  000C5C  D08C               	goto	l8397
  7998  000C5E                     l8381:
  7999                           
  8000                           ;UI.c: 149: strcpy(month, "AUG");
  8001  000C5E  0ED6               	movlw	low UI@month
  8002  000C60  0100               	movlb	0	; () banked
  8003  000C62  6F80               	movwf	strcpy@to& (0+255),b
  8004  000C64  0E00               	movlw	high UI@month
  8005  000C66  0100               	movlb	0	; () banked
  8006  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8007  000C6A  0ED3               	movlw	low STR_15
  8008  000C6C  0100               	movlb	0	; () banked
  8009  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  8010  000C70  0EFF               	movlw	high STR_15
  8011  000C72  0100               	movlb	0	; () banked
  8012  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8013  000C76  ECF4  F025         	call	_strcpy	;wreg free
  8014                           
  8015                           ;UI.c: 150: break;
  8016  000C7A  D07D               	goto	l8397
  8017  000C7C                     l8383:
  8018                           
  8019                           ;UI.c: 152: strcpy(month, "SEP");
  8020  000C7C  0ED6               	movlw	low UI@month
  8021  000C7E  0100               	movlb	0	; () banked
  8022  000C80  6F80               	movwf	strcpy@to& (0+255),b
  8023  000C82  0E00               	movlw	high UI@month
  8024  000C84  0100               	movlb	0	; () banked
  8025  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8026  000C88  0EE3               	movlw	low STR_16
  8027  000C8A  0100               	movlb	0	; () banked
  8028  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  8029  000C8E  0EFF               	movlw	high STR_16
  8030  000C90  0100               	movlb	0	; () banked
  8031  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8032  000C94  ECF4  F025         	call	_strcpy	;wreg free
  8033                           
  8034                           ;UI.c: 153: break;
  8035  000C98  D06E               	goto	l8397
  8036  000C9A                     l8385:
  8037                           
  8038                           ;UI.c: 155: strcpy(month, "OCT");
  8039  000C9A  0ED6               	movlw	low UI@month
  8040  000C9C  0100               	movlb	0	; () banked
  8041  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  8042  000CA0  0E00               	movlw	high UI@month
  8043  000CA2  0100               	movlb	0	; () banked
  8044  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8045  000CA6  0EF3               	movlw	low STR_17
  8046  000CA8  0100               	movlb	0	; () banked
  8047  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  8048  000CAC  0EFF               	movlw	high STR_17
  8049  000CAE  0100               	movlb	0	; () banked
  8050  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8051  000CB2  ECF4  F025         	call	_strcpy	;wreg free
  8052                           
  8053                           ;UI.c: 156: break;
  8054  000CB6  D05F               	goto	l8397
  8055  000CB8                     l8387:
  8056                           
  8057                           ;UI.c: 158: strcpy(month, "NOV");
  8058  000CB8  0ED6               	movlw	low UI@month
  8059  000CBA  0100               	movlb	0	; () banked
  8060  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  8061  000CBE  0E00               	movlw	high UI@month
  8062  000CC0  0100               	movlb	0	; () banked
  8063  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8064  000CC4  0EF7               	movlw	low STR_18
  8065  000CC6  0100               	movlb	0	; () banked
  8066  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  8067  000CCA  0EFF               	movlw	high STR_18
  8068  000CCC  0100               	movlb	0	; () banked
  8069  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8070  000CD0  ECF4  F025         	call	_strcpy	;wreg free
  8071                           
  8072                           ;UI.c: 159: break;
  8073  000CD4  D050               	goto	l8397
  8074  000CD6                     l8389:
  8075                           
  8076                           ;UI.c: 161: strcpy(month, "DEC");
  8077  000CD6  0ED6               	movlw	low UI@month
  8078  000CD8  0100               	movlb	0	; () banked
  8079  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  8080  000CDC  0E00               	movlw	high UI@month
  8081  000CDE  0100               	movlb	0	; () banked
  8082  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8083  000CE2  0ECF               	movlw	low STR_19
  8084  000CE4  0100               	movlb	0	; () banked
  8085  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  8086  000CE8  0EFF               	movlw	high STR_19
  8087  000CEA  0100               	movlb	0	; () banked
  8088  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8089  000CEE  ECF4  F025         	call	_strcpy	;wreg free
  8090                           
  8091                           ;UI.c: 162: break;
  8092  000CF2  D041               	goto	l8397
  8093  000CF4                     l8391:
  8094                           
  8095                           ;UI.c: 164: strcpy(month, "ERR");
  8096  000CF4  0ED6               	movlw	low UI@month
  8097  000CF6  0100               	movlb	0	; () banked
  8098  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  8099  000CFA  0E00               	movlw	high UI@month
  8100  000CFC  0100               	movlb	0	; () banked
  8101  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8102  000D00  0EEF               	movlw	low STR_20
  8103  000D02  0100               	movlb	0	; () banked
  8104  000D04  6F82               	movwf	strcpy@from& (0+255),b
  8105  000D06  0EFF               	movlw	high STR_20
  8106  000D08  0100               	movlb	0	; () banked
  8107  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8108  000D0C  ECF4  F025         	call	_strcpy	;wreg free
  8109                           
  8110                           ;UI.c: 166: }
  8111                           
  8112                           ;UI.c: 165: break;
  8113  000D10  D032               	goto	l8397
  8114  000D12                     l8395:
  8115  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  8116  000D16  CFDE F0C4          	movff	postinc2,??_UI
  8117  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  8118                           
  8119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8120                           ; Switch size 1, requested type "space"
  8121                           ; Number of cases is 1, Range of values is 0 to 0
  8122                           ; switch strategies available:
  8123                           ; Name         Instructions Cycles
  8124                           ; simple_byte            4     3 (average)
  8125                           ;	Chosen strategy is simple_byte
  8126  000D1E  0100               	movlb	0	; () banked
  8127  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  8128  000D22  0A00               	xorlw	0	; case 0
  8129  000D24  A4D8               	btfss	status,2,c
  8130  000D26  D7E6               	goto	l8391
  8131                           
  8132                           ; BSR set to: 0
  8133                           ; Switch size 1, requested type "space"
  8134                           ; Number of cases is 12, Range of values is 1 to 12
  8135                           ; switch strategies available:
  8136                           ; Name         Instructions Cycles
  8137                           ; simple_byte           37    19 (average)
  8138                           ;	Chosen strategy is simple_byte
  8139  000D28  0100               	movlb	0	; () banked
  8140  000D2A  51C4               	movf	??_UI& (0+255),w,b
  8141  000D2C  0A01               	xorlw	1	; case 1
  8142  000D2E  B4D8               	btfsc	status,2,c
  8143  000D30  D72D               	goto	l8367
  8144  000D32  0A03               	xorlw	3	; case 2
  8145  000D34  B4D8               	btfsc	status,2,c
  8146  000D36  D739               	goto	l8369
  8147  000D38  0A01               	xorlw	1	; case 3
  8148  000D3A  B4D8               	btfsc	status,2,c
  8149  000D3C  D745               	goto	l8371
  8150  000D3E  0A07               	xorlw	7	; case 4
  8151  000D40  B4D8               	btfsc	status,2,c
  8152  000D42  D751               	goto	l8373
  8153  000D44  0A01               	xorlw	1	; case 5
  8154  000D46  B4D8               	btfsc	status,2,c
  8155  000D48  D75D               	goto	l8375
  8156  000D4A  0A03               	xorlw	3	; case 6
  8157  000D4C  B4D8               	btfsc	status,2,c
  8158  000D4E  D769               	goto	l8377
  8159  000D50  0A01               	xorlw	1	; case 7
  8160  000D52  B4D8               	btfsc	status,2,c
  8161  000D54  D775               	goto	l8379
  8162  000D56  0A0F               	xorlw	15	; case 8
  8163  000D58  B4D8               	btfsc	status,2,c
  8164  000D5A  D781               	goto	l8381
  8165  000D5C  0A01               	xorlw	1	; case 9
  8166  000D5E  B4D8               	btfsc	status,2,c
  8167  000D60  D78D               	goto	l8383
  8168  000D62  0A03               	xorlw	3	; case 10
  8169  000D64  B4D8               	btfsc	status,2,c
  8170  000D66  D799               	goto	l8385
  8171  000D68  0A01               	xorlw	1	; case 11
  8172  000D6A  B4D8               	btfsc	status,2,c
  8173  000D6C  D7A5               	goto	l8387
  8174  000D6E  0A07               	xorlw	7	; case 12
  8175  000D70  B4D8               	btfsc	status,2,c
  8176  000D72  D7B1               	goto	l8389
  8177  000D74  D7BF               	goto	l8391
  8178  000D76                     l8397:
  8179                           
  8180                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8181  000D76  0E0A               	movlw	low STR_21
  8182  000D78  0100               	movlb	0	; () banked
  8183  000D7A  6F8E               	movwf	printf@f& (0+255),b
  8184  000D7C  0EFB               	movlw	high STR_21
  8185  000D7E  0100               	movlb	0	; () banked
  8186  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  8187  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  8188  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  8189  000D8A  0ED6               	movlw	low UI@month
  8190  000D8C  0100               	movlb	0	; () banked
  8191  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  8192  000D90  0E00               	movlw	high UI@month
  8193  000D92  0100               	movlb	0	; () banked
  8194  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  8195  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  8196  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  8197  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  8198  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  8199  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  8200  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  8201  000DAE  ECFF  F00A         	call	_printf	;wreg free
  8202                           
  8203                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8204  000DB2  0E00               	movlw	0
  8205  000DB4  0100               	movlb	0	; () banked
  8206  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  8207  000DB8                     l8401:
  8208                           
  8209                           ; BSR set to: 0
  8210  000DB8  0E63               	movlw	99
  8211  000DBA  0100               	movlb	0	; () banked
  8212  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  8213  000DBE  D001               	goto	l8405
  8214  000DC0  D00C               	goto	l8409
  8215  000DC2                     l8405:
  8216                           
  8217                           ; BSR set to: 0
  8218  000DC2  0E68               	movlw	104
  8219  000DC4  0100               	movlb	0	; () banked
  8220  000DC6  6FC4               	movwf	??_UI& (0+255),b
  8221  000DC8  0EE4               	movlw	228
  8222  000DCA                     u8957:
  8223  000DCA  2EE8               	decfsz	wreg,f,c
  8224  000DCC  D7FE               	bra	u8957
  8225  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  8226  000DD0  D7FC               	bra	u8957
  8227  000DD2  F000               	nop	
  8228  000DD4  0100               	movlb	0	; () banked
  8229  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  8230  000DD8  D7EF               	goto	l8401
  8231  000DDA                     l8409:
  8232                           
  8233                           ; BSR set to: 0
  8234  000DDA  0100               	movlb	0	; () banked
  8235  000DDC  51F6               	movf	_logstate& (0+255),w,b
  8236  000DDE  0100               	movlb	0	; () banked
  8237  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8238  000DE2  B4D8               	btfsc	status,2,c
  8239  000DE4  0012               	return	
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8243                           
  8244                           ; BSR set to: 0
  8245                           
  8246                           ; BSR set to: 0
  8247  000DE6  0E00               	movlw	0
  8248  000DE8  0100               	movlb	0	; () banked
  8249  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  8250  000DEC                     l8415:
  8251                           
  8252                           ; BSR set to: 0
  8253  000DEC  0E63               	movlw	99
  8254  000DEE  0100               	movlb	0	; () banked
  8255  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  8256  000DF2  D001               	goto	l8419
  8257  000DF4  D00C               	goto	l8423
  8258  000DF6                     l8419:
  8259                           
  8260                           ; BSR set to: 0
  8261  000DF6  0E68               	movlw	104
  8262  000DF8  0100               	movlb	0	; () banked
  8263  000DFA  6FC4               	movwf	??_UI& (0+255),b
  8264  000DFC  0EE4               	movlw	228
  8265  000DFE                     u8967:
  8266  000DFE  2EE8               	decfsz	wreg,f,c
  8267  000E00  D7FE               	bra	u8967
  8268  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  8269  000E04  D7FC               	bra	u8967
  8270  000E06  F000               	nop	
  8271  000E08  0100               	movlb	0	; () banked
  8272  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  8273  000E0C  D7EF               	goto	l8415
  8274  000E0E                     l8423:
  8275                           
  8276                           ; BSR set to: 0
  8277  000E0E  0100               	movlb	0	; () banked
  8278  000E10  51F6               	movf	_logstate& (0+255),w,b
  8279  000E12  0100               	movlb	0	; () banked
  8280  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8281  000E16  B4D8               	btfsc	status,2,c
  8282  000E18  0012               	return	
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8286                           
  8287                           ; BSR set to: 0
  8288                           
  8289                           ; BSR set to: 0
  8290  000E1A  0E01               	movlw	1
  8291  000E1C  EC98  F028         	call	_lcdInst
  8292  000E20  0E68               	movlw	104
  8293  000E22  0100               	movlb	0	; () banked
  8294  000E24  6FC4               	movwf	??_UI& (0+255),b
  8295  000E26  0EE4               	movlw	228
  8296  000E28                     u8977:
  8297  000E28  2EE8               	decfsz	wreg,f,c
  8298  000E2A  D7FE               	bra	u8977
  8299  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  8300  000E2E  D7FC               	bra	u8977
  8301  000E30  F000               	nop	
  8302                           
  8303                           ;UI.c: 173: lcdInst(0b10000000);;
  8304  000E32  0E80               	movlw	128
  8305  000E34  EC98  F028         	call	_lcdInst
  8306                           
  8307                           ;UI.c: 174: printf("DURATION:");
  8308  000E38  0E9B               	movlw	low STR_22
  8309  000E3A  0100               	movlb	0	; () banked
  8310  000E3C  6F8E               	movwf	printf@f& (0+255),b
  8311  000E3E  0EFF               	movlw	high STR_22
  8312  000E40  0100               	movlb	0	; () banked
  8313  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8314  000E44  ECFF  F00A         	call	_printf	;wreg free
  8315                           
  8316                           ;UI.c: 175: lcdInst(0b11000000);;
  8317  000E48  0EC0               	movlw	192
  8318  000E4A  EC98  F028         	call	_lcdInst
  8319                           
  8320                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8321  000E4E  0E0E               	movlw	14
  8322  000E50  0100               	movlb	0	; () banked
  8323  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8324  000E54  0E10               	movlw	16
  8325  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  8326  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8327  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8328  000E60  EC0B  F021         	call	___awmod	;wreg free
  8329  000E64  C080  F0C6         	movff	?___awmod,_UI$2334
  8330  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2334+1
  8331                           
  8332                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8333  000E6C  0E19               	movlw	low STR_23
  8334  000E6E  0100               	movlb	0	; () banked
  8335  000E70  6F8E               	movwf	printf@f& (0+255),b
  8336  000E72  0EFF               	movlw	high STR_23
  8337  000E74  0100               	movlb	0	; () banked
  8338  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  8339  000E78  0E0E               	movlw	14
  8340  000E7A  0100               	movlb	0	; () banked
  8341  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8342  000E7E  0E10               	movlw	16
  8343  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  8344  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8345  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8346  000E8A  EC0B  F021         	call	___awmod	;wreg free
  8347  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  8348  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8349  000E96  0E00               	movlw	0
  8350  000E98  0100               	movlb	0	; () banked
  8351  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8352  000E9C  0E3C               	movlw	60
  8353  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  8354  000EA0  ECF9  F01F         	call	___awdiv	;wreg free
  8355  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  8356  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  8357  000EAC  C0C6  F080         	movff	_UI$2334,___awmod@dividend
  8358  000EB0  C0C7  F081         	movff	_UI$2334+1,___awmod@dividend+1
  8359  000EB4  0E00               	movlw	0
  8360  000EB6  0100               	movlb	0	; () banked
  8361  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8362  000EBA  0E3C               	movlw	60
  8363  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8364  000EBE  EC0B  F021         	call	___awmod	;wreg free
  8365  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  8366  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  8367  000ECA  ECFF  F00A         	call	_printf	;wreg free
  8368                           
  8369                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8370  000ECE  0E00               	movlw	0
  8371  000ED0  0100               	movlb	0	; () banked
  8372  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  8373  000ED4                     l8443:
  8374                           
  8375                           ; BSR set to: 0
  8376  000ED4  0E63               	movlw	99
  8377  000ED6  0100               	movlb	0	; () banked
  8378  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  8379  000EDA  D001               	goto	l8447
  8380  000EDC  D00C               	goto	l8451
  8381  000EDE                     l8447:
  8382                           
  8383                           ; BSR set to: 0
  8384  000EDE  0E68               	movlw	104
  8385  000EE0  0100               	movlb	0	; () banked
  8386  000EE2  6FC4               	movwf	??_UI& (0+255),b
  8387  000EE4  0EE4               	movlw	228
  8388  000EE6                     u8987:
  8389  000EE6  2EE8               	decfsz	wreg,f,c
  8390  000EE8  D7FE               	bra	u8987
  8391  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  8392  000EEC  D7FC               	bra	u8987
  8393  000EEE  F000               	nop	
  8394  000EF0  0100               	movlb	0	; () banked
  8395  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  8396  000EF4  D7EF               	goto	l8443
  8397  000EF6                     l8451:
  8398                           
  8399                           ; BSR set to: 0
  8400  000EF6  0100               	movlb	0	; () banked
  8401  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8402  000EFA  0100               	movlb	0	; () banked
  8403  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8404  000EFE  B4D8               	btfsc	status,2,c
  8405  000F00  0012               	return	
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8409                           
  8410                           ; BSR set to: 0
  8411                           
  8412                           ; BSR set to: 0
  8413  000F02  0E00               	movlw	0
  8414  000F04  0100               	movlb	0	; () banked
  8415  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8416  000F08                     l8457:
  8417                           
  8418                           ; BSR set to: 0
  8419  000F08  0E63               	movlw	99
  8420  000F0A  0100               	movlb	0	; () banked
  8421  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8422  000F0E  D001               	goto	l8461
  8423  000F10  D00C               	goto	l8465
  8424  000F12                     l8461:
  8425                           
  8426                           ; BSR set to: 0
  8427  000F12  0E68               	movlw	104
  8428  000F14  0100               	movlb	0	; () banked
  8429  000F16  6FC4               	movwf	??_UI& (0+255),b
  8430  000F18  0EE4               	movlw	228
  8431  000F1A                     u8997:
  8432  000F1A  2EE8               	decfsz	wreg,f,c
  8433  000F1C  D7FE               	bra	u8997
  8434  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8435  000F20  D7FC               	bra	u8997
  8436  000F22  F000               	nop	
  8437  000F24  0100               	movlb	0	; () banked
  8438  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8439  000F28  D7EF               	goto	l8457
  8440  000F2A                     l8465:
  8441                           
  8442                           ; BSR set to: 0
  8443  000F2A  0100               	movlb	0	; () banked
  8444  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8445  000F2E  0100               	movlb	0	; () banked
  8446  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8447  000F32  B4D8               	btfsc	status,2,c
  8448  000F34  0012               	return	
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  000F36  0E01               	movlw	1
  8457  000F38  EC98  F028         	call	_lcdInst
  8458  000F3C  0E68               	movlw	104
  8459  000F3E  0100               	movlb	0	; () banked
  8460  000F40  6FC4               	movwf	??_UI& (0+255),b
  8461  000F42  0EE4               	movlw	228
  8462  000F44                     u9007:
  8463  000F44  2EE8               	decfsz	wreg,f,c
  8464  000F46  D7FE               	bra	u9007
  8465  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8466  000F4A  D7FC               	bra	u9007
  8467  000F4C  F000               	nop	
  8468                           
  8469                           ;UI.c: 182: lcdInst(0b10000000);;
  8470  000F4E  0E80               	movlw	128
  8471  000F50  EC98  F028         	call	_lcdInst
  8472                           
  8473                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8474  000F54  0E3C               	movlw	low STR_24
  8475  000F56  0100               	movlb	0	; () banked
  8476  000F58  6F8E               	movwf	printf@f& (0+255),b
  8477  000F5A  0EFD               	movlw	high STR_24
  8478  000F5C  0100               	movlb	0	; () banked
  8479  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8480  000F60  ECFF  F00A         	call	_printf	;wreg free
  8481                           
  8482                           ;UI.c: 184: lcdInst(0b11000000);;
  8483  000F64  0EC0               	movlw	192
  8484  000F66  EC98  F028         	call	_lcdInst
  8485                           
  8486                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8487  000F6A  0E19               	movlw	low STR_25
  8488  000F6C  0100               	movlb	0	; () banked
  8489  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8490  000F70  0EFE               	movlw	high STR_25
  8491  000F72  0100               	movlb	0	; () banked
  8492  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8493  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8494  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8495  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8496  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8497  000F86  ECFF  F00A         	call	_printf	;wreg free
  8498                           
  8499                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8500  000F8A  0E00               	movlw	0
  8501  000F8C  0100               	movlb	0	; () banked
  8502  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8503  000F90                     l8483:
  8504                           
  8505                           ; BSR set to: 0
  8506  000F90  0E63               	movlw	99
  8507  000F92  0100               	movlb	0	; () banked
  8508  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8509  000F96  D001               	goto	l8487
  8510  000F98  D00C               	goto	l8491
  8511  000F9A                     l8487:
  8512                           
  8513                           ; BSR set to: 0
  8514  000F9A  0E68               	movlw	104
  8515  000F9C  0100               	movlb	0	; () banked
  8516  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8517  000FA0  0EE4               	movlw	228
  8518  000FA2                     u9017:
  8519  000FA2  2EE8               	decfsz	wreg,f,c
  8520  000FA4  D7FE               	bra	u9017
  8521  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8522  000FA8  D7FC               	bra	u9017
  8523  000FAA  F000               	nop	
  8524  000FAC  0100               	movlb	0	; () banked
  8525  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8526  000FB0  D7EF               	goto	l8483
  8527  000FB2                     l8491:
  8528                           
  8529                           ; BSR set to: 0
  8530  000FB2  0100               	movlb	0	; () banked
  8531  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8532  000FB6  0100               	movlb	0	; () banked
  8533  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8534  000FBA  B4D8               	btfsc	status,2,c
  8535  000FBC  0012               	return	
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8539                           
  8540                           ; BSR set to: 0
  8541                           
  8542                           ; BSR set to: 0
  8543  000FBE  0E00               	movlw	0
  8544  000FC0  0100               	movlb	0	; () banked
  8545  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8546  000FC4                     l8497:
  8547                           
  8548                           ; BSR set to: 0
  8549  000FC4  0E63               	movlw	99
  8550  000FC6  0100               	movlb	0	; () banked
  8551  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8552  000FCA  D001               	goto	l8501
  8553  000FCC  D00C               	goto	l8505
  8554  000FCE                     l8501:
  8555                           
  8556                           ; BSR set to: 0
  8557  000FCE  0E68               	movlw	104
  8558  000FD0  0100               	movlb	0	; () banked
  8559  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8560  000FD4  0EE4               	movlw	228
  8561  000FD6                     u9027:
  8562  000FD6  2EE8               	decfsz	wreg,f,c
  8563  000FD8  D7FE               	bra	u9027
  8564  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8565  000FDC  D7FC               	bra	u9027
  8566  000FDE  F000               	nop	
  8567  000FE0  0100               	movlb	0	; () banked
  8568  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8569  000FE4  D7EF               	goto	l8497
  8570  000FE6                     l8505:
  8571                           
  8572                           ; BSR set to: 0
  8573  000FE6  0100               	movlb	0	; () banked
  8574  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8575  000FEA  0100               	movlb	0	; () banked
  8576  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8577  000FEE  B4D8               	btfsc	status,2,c
  8578  000FF0  0012               	return	
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  000FF2  0E01               	movlw	1
  8587  000FF4  EC98  F028         	call	_lcdInst
  8588  000FF8  0E68               	movlw	104
  8589  000FFA  0100               	movlb	0	; () banked
  8590  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8591  000FFE  0EE4               	movlw	228
  8592  001000                     u9037:
  8593  001000  2EE8               	decfsz	wreg,f,c
  8594  001002  D7FE               	bra	u9037
  8595  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8596  001006  D7FC               	bra	u9037
  8597  001008  F000               	nop	
  8598                           
  8599                           ;UI.c: 191: lcdInst(0b10000000);;
  8600  00100A  0E80               	movlw	128
  8601  00100C  EC98  F028         	call	_lcdInst
  8602                           
  8603                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8604  001010  0E4D               	movlw	low STR_26
  8605  001012  0100               	movlb	0	; () banked
  8606  001014  6F8E               	movwf	printf@f& (0+255),b
  8607  001016  0EFD               	movlw	high STR_26
  8608  001018  0100               	movlb	0	; () banked
  8609  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8610  00101C  ECFF  F00A         	call	_printf	;wreg free
  8611                           
  8612                           ;UI.c: 193: lcdInst(0b11000000);;
  8613  001020  0EC0               	movlw	192
  8614  001022  EC98  F028         	call	_lcdInst
  8615                           
  8616                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8617  001026  0E08               	movlw	low STR_27
  8618  001028  0100               	movlb	0	; () banked
  8619  00102A  6F8E               	movwf	printf@f& (0+255),b
  8620  00102C  0EFE               	movlw	high STR_27
  8621  00102E  0100               	movlb	0	; () banked
  8622  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8623  001032  C06F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8624  001036  C070  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8625  00103A  C071  F092         	movff	_log_count_can_w_lab,?_printf+4
  8626  00103E  C072  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8627  001042  ECFF  F00A         	call	_printf	;wreg free
  8628                           
  8629                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8630  001046  0E00               	movlw	0
  8631  001048  0100               	movlb	0	; () banked
  8632  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8633  00104C                     l8523:
  8634                           
  8635                           ; BSR set to: 0
  8636  00104C  0E63               	movlw	99
  8637  00104E  0100               	movlb	0	; () banked
  8638  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8639  001052  D001               	goto	l8527
  8640  001054  D00C               	goto	l8531
  8641  001056                     l8527:
  8642                           
  8643                           ; BSR set to: 0
  8644  001056  0E68               	movlw	104
  8645  001058  0100               	movlb	0	; () banked
  8646  00105A  6FC4               	movwf	??_UI& (0+255),b
  8647  00105C  0EE4               	movlw	228
  8648  00105E                     u9047:
  8649  00105E  2EE8               	decfsz	wreg,f,c
  8650  001060  D7FE               	bra	u9047
  8651  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8652  001064  D7FC               	bra	u9047
  8653  001066  F000               	nop	
  8654  001068  0100               	movlb	0	; () banked
  8655  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8656  00106C  D7EF               	goto	l8523
  8657  00106E                     l8531:
  8658                           
  8659                           ; BSR set to: 0
  8660  00106E  0100               	movlb	0	; () banked
  8661  001070  51F6               	movf	_logstate& (0+255),w,b
  8662  001072  0100               	movlb	0	; () banked
  8663  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8664  001076  B4D8               	btfsc	status,2,c
  8665  001078  0012               	return	
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8669                           
  8670                           ; BSR set to: 0
  8671                           
  8672                           ; BSR set to: 0
  8673  00107A  0E00               	movlw	0
  8674  00107C  0100               	movlb	0	; () banked
  8675  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8676  001080                     l8537:
  8677                           
  8678                           ; BSR set to: 0
  8679  001080  0E63               	movlw	99
  8680  001082  0100               	movlb	0	; () banked
  8681  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8682  001086  D001               	goto	l8541
  8683  001088  D00C               	goto	l8545
  8684  00108A                     l8541:
  8685                           
  8686                           ; BSR set to: 0
  8687  00108A  0E68               	movlw	104
  8688  00108C  0100               	movlb	0	; () banked
  8689  00108E  6FC4               	movwf	??_UI& (0+255),b
  8690  001090  0EE4               	movlw	228
  8691  001092                     u9057:
  8692  001092  2EE8               	decfsz	wreg,f,c
  8693  001094  D7FE               	bra	u9057
  8694  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8695  001098  D7FC               	bra	u9057
  8696  00109A  F000               	nop	
  8697  00109C  0100               	movlb	0	; () banked
  8698  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8699  0010A0  D7EF               	goto	l8537
  8700  0010A2                     l8545:
  8701                           
  8702                           ; BSR set to: 0
  8703  0010A2  0100               	movlb	0	; () banked
  8704  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8705  0010A6  0100               	movlb	0	; () banked
  8706  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8707  0010AA  B4D8               	btfsc	status,2,c
  8708  0010AC  0012               	return	
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8712                           
  8713                           ; BSR set to: 0
  8714                           
  8715                           ; BSR set to: 0
  8716  0010AE  0E01               	movlw	1
  8717  0010B0  EC98  F028         	call	_lcdInst
  8718  0010B4  0E68               	movlw	104
  8719  0010B6  0100               	movlb	0	; () banked
  8720  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8721  0010BA  0EE4               	movlw	228
  8722  0010BC                     u9067:
  8723  0010BC  2EE8               	decfsz	wreg,f,c
  8724  0010BE  D7FE               	bra	u9067
  8725  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8726  0010C2  D7FC               	bra	u9067
  8727  0010C4  F000               	nop	
  8728                           
  8729                           ;UI.c: 200: lcdInst(0b10000000);;
  8730  0010C6  0E80               	movlw	128
  8731  0010C8  EC98  F028         	call	_lcdInst
  8732                           
  8733                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8734  0010CC  0E5E               	movlw	low STR_28
  8735  0010CE  0100               	movlb	0	; () banked
  8736  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8737  0010D2  0EFD               	movlw	high STR_28
  8738  0010D4  0100               	movlb	0	; () banked
  8739  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8740  0010D8  ECFF  F00A         	call	_printf	;wreg free
  8741                           
  8742                           ;UI.c: 202: lcdInst(0b11000000);;
  8743  0010DC  0EC0               	movlw	192
  8744  0010DE  EC98  F028         	call	_lcdInst
  8745                           
  8746                           ;UI.c: 203: printf("%d", log_count_total);
  8747  0010E2  0E16               	movlw	low (STR_27+14)
  8748  0010E4  0100               	movlb	0	; () banked
  8749  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8750  0010E8  0EFE               	movlw	high (STR_27+14)
  8751  0010EA  0100               	movlb	0	; () banked
  8752  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8753  0010EE  C073  F090         	movff	_log_count_total,?_printf+2
  8754  0010F2  C074  F091         	movff	_log_count_total+1,?_printf+3
  8755  0010F6  ECFF  F00A         	call	_printf	;wreg free
  8756                           
  8757                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8758  0010FA  0E00               	movlw	0
  8759  0010FC  0100               	movlb	0	; () banked
  8760  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8761  001100                     l8563:
  8762                           
  8763                           ; BSR set to: 0
  8764  001100  0E63               	movlw	99
  8765  001102  0100               	movlb	0	; () banked
  8766  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8767  001106  D001               	goto	l8567
  8768  001108  D00C               	goto	l8571
  8769  00110A                     l8567:
  8770                           
  8771                           ; BSR set to: 0
  8772  00110A  0E68               	movlw	104
  8773  00110C  0100               	movlb	0	; () banked
  8774  00110E  6FC4               	movwf	??_UI& (0+255),b
  8775  001110  0EE4               	movlw	228
  8776  001112                     u9077:
  8777  001112  2EE8               	decfsz	wreg,f,c
  8778  001114  D7FE               	bra	u9077
  8779  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8780  001118  D7FC               	bra	u9077
  8781  00111A  F000               	nop	
  8782  00111C  0100               	movlb	0	; () banked
  8783  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8784  001120  D7EF               	goto	l8563
  8785  001122                     l8571:
  8786                           
  8787                           ; BSR set to: 0
  8788  001122  0100               	movlb	0	; () banked
  8789  001124  51F6               	movf	_logstate& (0+255),w,b
  8790  001126  0100               	movlb	0	; () banked
  8791  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8792  00112A  B4D8               	btfsc	status,2,c
  8793  00112C  0012               	return	
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8797                           
  8798                           ; BSR set to: 0
  8799                           
  8800                           ; BSR set to: 0
  8801  00112E  0E00               	movlw	0
  8802  001130  0100               	movlb	0	; () banked
  8803  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8804  001134                     l8577:
  8805                           
  8806                           ; BSR set to: 0
  8807  001134  0E63               	movlw	99
  8808  001136  0100               	movlb	0	; () banked
  8809  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8810  00113A  D001               	goto	l8581
  8811  00113C  D00C               	goto	l8585
  8812  00113E                     l8581:
  8813                           
  8814                           ; BSR set to: 0
  8815  00113E  0E68               	movlw	104
  8816  001140  0100               	movlb	0	; () banked
  8817  001142  6FC4               	movwf	??_UI& (0+255),b
  8818  001144  0EE4               	movlw	228
  8819  001146                     u9087:
  8820  001146  2EE8               	decfsz	wreg,f,c
  8821  001148  D7FE               	bra	u9087
  8822  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8823  00114C  D7FC               	bra	u9087
  8824  00114E  F000               	nop	
  8825  001150  0100               	movlb	0	; () banked
  8826  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8827  001154  D7EF               	goto	l8577
  8828  001156                     l8585:
  8829                           
  8830                           ; BSR set to: 0
  8831  001156  0100               	movlb	0	; () banked
  8832  001158  51F6               	movf	_logstate& (0+255),w,b
  8833  00115A  0100               	movlb	0	; () banked
  8834  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8835  00115E  B4D8               	btfsc	status,2,c
  8836  001160  0012               	return	
  8837  001162                     l8589:
  8838  001162  0100               	movlb	0	; () banked
  8839  001164  51F6               	movf	_logstate& (0+255),w,b
  8840  001166  0100               	movlb	0	; () banked
  8841  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8842  00116A  B4D8               	btfsc	status,2,c
  8843  00116C  0012               	return	
  8844  00116E  D44A               	goto	l8285
  8845  001170                     __end_of_UI:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           intcon2	equ	0xFF1
  8855                           intcon3	equ	0xFF0
  8856                           postinc0	equ	0xFEE
  8857                           wreg	equ	0xFE8
  8858                           postdec1	equ	0xFE5
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _printRTC *****************
  8868 ;; Defined at:
  8869 ;;		line 63 in file "RTC.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  i               2   66[BANK0 ] int 
  8874 ;;  INT_time       14   46[BANK0 ] int [7]
  8875 ;;  month           4   62[BANK0 ] unsigned char [4]
  8876 ;;  RTC_month       2   60[BANK0 ] int 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;Total ram usage:       25 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:   10
  8893 ;; This function calls:
  8894 ;;		_getRTC
  8895 ;;		_lcdInst
  8896 ;;		_printf
  8897 ;;		_strcpy
  8898 ;; This function is called by:
  8899 ;;		_UI
  8900 ;;		_change_state_to_menu_start
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text24
  8905  002426                     __ptext24:
  8906                           	opt stack 0
  8907  002426                     _printRTC:
  8908                           	opt stack 18
  8909                           
  8910                           ;RTC.c: 64: getRTC();
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;incstack = 0
  8914  002426  ECA2  F021         	call	_getRTC	;wreg free
  8915                           
  8916                           ;RTC.c: 65: char month[] = "MMM";
  8917  00242A  C13B  F0BE         	movff	printRTC@F3219,printRTC@month
  8918  00242E  C13C  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8919  002432  C13D  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8920  002436  C13E  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8921                           
  8922                           ;RTC.c: 66: int INT_time[7];
  8923                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8924  00243A  0E00               	movlw	0
  8925  00243C  0100               	movlb	0	; () banked
  8926  00243E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8927  002440  0E00               	movlw	0
  8928  002442  6FC2               	movwf	printRTC@i& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931  002444  0100               	movlb	0	; () banked
  8932  002446  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8933  002448  D008               	goto	l6373
  8934  00244A  0100               	movlb	0	; () banked
  8935  00244C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8936  00244E  E146               	bnz	l606
  8937  002450  0E07               	movlw	7
  8938  002452  0100               	movlb	0	; () banked
  8939  002454  5DC2               	subwf	printRTC@i& (0+255),w,b
  8940  002456  B0D8               	btfsc	status,0,c
  8941  002458  D041               	goto	l606
  8942  00245A                     l6373:
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8946  00245A  0E24               	movlw	low _time
  8947  00245C  0100               	movlb	0	; () banked
  8948  00245E  25C2               	addwf	printRTC@i& (0+255),w,b
  8949  002460  6ED9               	movwf	fsr2l,c
  8950  002462  0E01               	movlw	high _time
  8951  002464  0100               	movlb	0	; () banked
  8952  002466  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8953  002468  6EDA               	movwf	fsr2h,c
  8954  00246A  50DF               	movf	indf2,w,c
  8955  00246C  0100               	movlb	0	; () banked
  8956  00246E  6FAB               	movwf	??_printRTC& (0+255),b
  8957  002470  0100               	movlb	0	; () banked
  8958  002472  3BAB               	swapf	??_printRTC& (0+255),f,b
  8959  002474  0E0F               	movlw	15
  8960  002476  17AB               	andwf	??_printRTC& (0+255),f,b
  8961  002478  0E0F               	movlw	15
  8962  00247A  0100               	movlb	0	; () banked
  8963  00247C  17AB               	andwf	??_printRTC& (0+255),f,b
  8964  00247E  0100               	movlb	0	; () banked
  8965  002480  51AB               	movf	??_printRTC& (0+255),w,b
  8966  002482  0D0A               	mullw	10
  8967  002484  0E24               	movlw	low _time
  8968  002486  0100               	movlb	0	; () banked
  8969  002488  25C2               	addwf	printRTC@i& (0+255),w,b
  8970  00248A  6ED9               	movwf	fsr2l,c
  8971  00248C  0E01               	movlw	high _time
  8972  00248E  0100               	movlb	0	; () banked
  8973  002490  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8974  002492  6EDA               	movwf	fsr2h,c
  8975  002494  50DF               	movf	indf2,w,c
  8976  002496  0B0F               	andlw	15
  8977  002498  0100               	movlb	0	; () banked
  8978  00249A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8979  00249C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8980  00249E  50F3               	movf	prodl,w,c
  8981  0024A0  0100               	movlb	0	; () banked
  8982  0024A2  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8983  0024A4  50F4               	movf	prodh,w,c
  8984  0024A6  0100               	movlb	0	; () banked
  8985  0024A8  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8986  0024AA  90D8               	bcf	status,0,c
  8987  0024AC  0100               	movlb	0	; () banked
  8988  0024AE  35C2               	rlcf	printRTC@i& (0+255),w,b
  8989  0024B0  6ED9               	movwf	fsr2l,c
  8990  0024B2  0100               	movlb	0	; () banked
  8991  0024B4  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8992  0024B6  6EDA               	movwf	fsr2h,c
  8993  0024B8  0EAE               	movlw	low printRTC@INT_time
  8994  0024BA  26D9               	addwf	fsr2l,f,c
  8995  0024BC  0E00               	movlw	high printRTC@INT_time
  8996  0024BE  22DA               	addwfc	fsr2h,f,c
  8997  0024C0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8998  0024C4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8999                           
  9000                           ; BSR set to: 0
  9001  0024C8  0100               	movlb	0	; () banked
  9002  0024CA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9003  0024CC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9004                           
  9005                           ; BSR set to: 0
  9006  0024CE  0100               	movlb	0	; () banked
  9007  0024D0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9008  0024D2  D7C3               	goto	l6373
  9009  0024D4  0100               	movlb	0	; () banked
  9010  0024D6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9011  0024D8  E101               	bnz	u5170
  9012  0024DA  D7BA               	goto	L9
  9013  0024DC                     u5170:
  9014  0024DC                     l606:
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;RTC.c: 69: }
  9018                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9019  0024DC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9020  0024E0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9021                           
  9022                           ;RTC.c: 71: switch(RTC_month){
  9023  0024E4  D0B4               	goto	l6405
  9024  0024E6                     l6379:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;RTC.c: 73: strcpy(month, "JAN");
  9028  0024E6  0EBE               	movlw	low printRTC@month
  9029  0024E8  0100               	movlb	0	; () banked
  9030  0024EA  6F80               	movwf	strcpy@to& (0+255),b
  9031  0024EC  0E00               	movlw	high printRTC@month
  9032  0024EE  0100               	movlb	0	; () banked
  9033  0024F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9034  0024F2  0EDB               	movlw	low STR_8
  9035  0024F4  0100               	movlb	0	; () banked
  9036  0024F6  6F82               	movwf	strcpy@from& (0+255),b
  9037  0024F8  0EFF               	movlw	high STR_8
  9038  0024FA  0100               	movlb	0	; () banked
  9039  0024FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9040  0024FE  ECF4  F025         	call	_strcpy	;wreg free
  9041                           
  9042                           ;RTC.c: 74: break;
  9043  002502  D0D4               	goto	l6407
  9044  002504                     l6381:
  9045                           
  9046                           ;RTC.c: 76: strcpy(month, "FEB");
  9047  002504  0EBE               	movlw	low printRTC@month
  9048  002506  0100               	movlb	0	; () banked
  9049  002508  6F80               	movwf	strcpy@to& (0+255),b
  9050  00250A  0E00               	movlw	high printRTC@month
  9051  00250C  0100               	movlb	0	; () banked
  9052  00250E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9053  002510  0ECB               	movlw	low STR_9
  9054  002512  0100               	movlb	0	; () banked
  9055  002514  6F82               	movwf	strcpy@from& (0+255),b
  9056  002516  0EFF               	movlw	high STR_9
  9057  002518  0100               	movlb	0	; () banked
  9058  00251A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9059  00251C  ECF4  F025         	call	_strcpy	;wreg free
  9060                           
  9061                           ;RTC.c: 77: break;
  9062  002520  D0C5               	goto	l6407
  9063  002522                     l6383:
  9064                           
  9065                           ;RTC.c: 79: strcpy(month, "MAR");
  9066  002522  0EBE               	movlw	low printRTC@month
  9067  002524  0100               	movlb	0	; () banked
  9068  002526  6F80               	movwf	strcpy@to& (0+255),b
  9069  002528  0E00               	movlw	high printRTC@month
  9070  00252A  0100               	movlb	0	; () banked
  9071  00252C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9072  00252E  0EE7               	movlw	low STR_10
  9073  002530  0100               	movlb	0	; () banked
  9074  002532  6F82               	movwf	strcpy@from& (0+255),b
  9075  002534  0EFF               	movlw	high STR_10
  9076  002536  0100               	movlb	0	; () banked
  9077  002538  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9078  00253A  ECF4  F025         	call	_strcpy	;wreg free
  9079                           
  9080                           ;RTC.c: 80: break;
  9081  00253E  D0B6               	goto	l6407
  9082  002540                     l6385:
  9083                           
  9084                           ;RTC.c: 82: strcpy(month, "APR");
  9085  002540  0EBE               	movlw	low printRTC@month
  9086  002542  0100               	movlb	0	; () banked
  9087  002544  6F80               	movwf	strcpy@to& (0+255),b
  9088  002546  0E00               	movlw	high printRTC@month
  9089  002548  0100               	movlb	0	; () banked
  9090  00254A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9091  00254C  0EEB               	movlw	low STR_11
  9092  00254E  0100               	movlb	0	; () banked
  9093  002550  6F82               	movwf	strcpy@from& (0+255),b
  9094  002552  0EFF               	movlw	high STR_11
  9095  002554  0100               	movlb	0	; () banked
  9096  002556  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9097  002558  ECF4  F025         	call	_strcpy	;wreg free
  9098                           
  9099                           ;RTC.c: 83: break;
  9100  00255C  D0A7               	goto	l6407
  9101  00255E                     l6387:
  9102                           
  9103                           ;RTC.c: 85: strcpy(month, "MAY");
  9104  00255E  0EBE               	movlw	low printRTC@month
  9105  002560  0100               	movlb	0	; () banked
  9106  002562  6F80               	movwf	strcpy@to& (0+255),b
  9107  002564  0E00               	movlw	high printRTC@month
  9108  002566  0100               	movlb	0	; () banked
  9109  002568  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9110  00256A  0EFB               	movlw	low STR_12
  9111  00256C  0100               	movlb	0	; () banked
  9112  00256E  6F82               	movwf	strcpy@from& (0+255),b
  9113  002570  0EFF               	movlw	high STR_12
  9114  002572  0100               	movlb	0	; () banked
  9115  002574  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9116  002576  ECF4  F025         	call	_strcpy	;wreg free
  9117                           
  9118                           ;RTC.c: 86: break;
  9119  00257A  D098               	goto	l6407
  9120  00257C                     l6389:
  9121                           
  9122                           ;RTC.c: 88: strcpy(month, "JUN");
  9123  00257C  0EBE               	movlw	low printRTC@month
  9124  00257E  0100               	movlb	0	; () banked
  9125  002580  6F80               	movwf	strcpy@to& (0+255),b
  9126  002582  0E00               	movlw	high printRTC@month
  9127  002584  0100               	movlb	0	; () banked
  9128  002586  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9129  002588  0EDF               	movlw	low STR_13
  9130  00258A  0100               	movlb	0	; () banked
  9131  00258C  6F82               	movwf	strcpy@from& (0+255),b
  9132  00258E  0EFF               	movlw	high STR_13
  9133  002590  0100               	movlb	0	; () banked
  9134  002592  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9135  002594  ECF4  F025         	call	_strcpy	;wreg free
  9136                           
  9137                           ;RTC.c: 89: break;
  9138  002598  D089               	goto	l6407
  9139  00259A                     l6391:
  9140                           
  9141                           ;RTC.c: 91: strcpy(month, "JUL");
  9142  00259A  0EBE               	movlw	low printRTC@month
  9143  00259C  0100               	movlb	0	; () banked
  9144  00259E  6F80               	movwf	strcpy@to& (0+255),b
  9145  0025A0  0E00               	movlw	high printRTC@month
  9146  0025A2  0100               	movlb	0	; () banked
  9147  0025A4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9148  0025A6  0ED7               	movlw	low STR_14
  9149  0025A8  0100               	movlb	0	; () banked
  9150  0025AA  6F82               	movwf	strcpy@from& (0+255),b
  9151  0025AC  0EFF               	movlw	high STR_14
  9152  0025AE  0100               	movlb	0	; () banked
  9153  0025B0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9154  0025B2  ECF4  F025         	call	_strcpy	;wreg free
  9155                           
  9156                           ;RTC.c: 92: break;
  9157  0025B6  D07A               	goto	l6407
  9158  0025B8                     l6393:
  9159                           
  9160                           ;RTC.c: 94: strcpy(month, "AUG");
  9161  0025B8  0EBE               	movlw	low printRTC@month
  9162  0025BA  0100               	movlb	0	; () banked
  9163  0025BC  6F80               	movwf	strcpy@to& (0+255),b
  9164  0025BE  0E00               	movlw	high printRTC@month
  9165  0025C0  0100               	movlb	0	; () banked
  9166  0025C2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9167  0025C4  0ED3               	movlw	low STR_15
  9168  0025C6  0100               	movlb	0	; () banked
  9169  0025C8  6F82               	movwf	strcpy@from& (0+255),b
  9170  0025CA  0EFF               	movlw	high STR_15
  9171  0025CC  0100               	movlb	0	; () banked
  9172  0025CE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9173  0025D0  ECF4  F025         	call	_strcpy	;wreg free
  9174                           
  9175                           ;RTC.c: 95: break;
  9176  0025D4  D06B               	goto	l6407
  9177  0025D6                     l6395:
  9178                           
  9179                           ;RTC.c: 97: strcpy(month, "SEP");
  9180  0025D6  0EBE               	movlw	low printRTC@month
  9181  0025D8  0100               	movlb	0	; () banked
  9182  0025DA  6F80               	movwf	strcpy@to& (0+255),b
  9183  0025DC  0E00               	movlw	high printRTC@month
  9184  0025DE  0100               	movlb	0	; () banked
  9185  0025E0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9186  0025E2  0EE3               	movlw	low STR_16
  9187  0025E4  0100               	movlb	0	; () banked
  9188  0025E6  6F82               	movwf	strcpy@from& (0+255),b
  9189  0025E8  0EFF               	movlw	high STR_16
  9190  0025EA  0100               	movlb	0	; () banked
  9191  0025EC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9192  0025EE  ECF4  F025         	call	_strcpy	;wreg free
  9193                           
  9194                           ;RTC.c: 98: break;
  9195  0025F2  D05C               	goto	l6407
  9196  0025F4                     l6397:
  9197                           
  9198                           ;RTC.c: 100: strcpy(month, "OCT");
  9199  0025F4  0EBE               	movlw	low printRTC@month
  9200  0025F6  0100               	movlb	0	; () banked
  9201  0025F8  6F80               	movwf	strcpy@to& (0+255),b
  9202  0025FA  0E00               	movlw	high printRTC@month
  9203  0025FC  0100               	movlb	0	; () banked
  9204  0025FE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9205  002600  0EF3               	movlw	low STR_17
  9206  002602  0100               	movlb	0	; () banked
  9207  002604  6F82               	movwf	strcpy@from& (0+255),b
  9208  002606  0EFF               	movlw	high STR_17
  9209  002608  0100               	movlb	0	; () banked
  9210  00260A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9211  00260C  ECF4  F025         	call	_strcpy	;wreg free
  9212                           
  9213                           ;RTC.c: 101: break;
  9214  002610  D04D               	goto	l6407
  9215  002612                     l6399:
  9216                           
  9217                           ;RTC.c: 103: strcpy(month, "NOV");
  9218  002612  0EBE               	movlw	low printRTC@month
  9219  002614  0100               	movlb	0	; () banked
  9220  002616  6F80               	movwf	strcpy@to& (0+255),b
  9221  002618  0E00               	movlw	high printRTC@month
  9222  00261A  0100               	movlb	0	; () banked
  9223  00261C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9224  00261E  0EF7               	movlw	low STR_18
  9225  002620  0100               	movlb	0	; () banked
  9226  002622  6F82               	movwf	strcpy@from& (0+255),b
  9227  002624  0EFF               	movlw	high STR_18
  9228  002626  0100               	movlb	0	; () banked
  9229  002628  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9230  00262A  ECF4  F025         	call	_strcpy	;wreg free
  9231                           
  9232                           ;RTC.c: 104: break;
  9233  00262E  D03E               	goto	l6407
  9234  002630                     l6401:
  9235                           
  9236                           ;RTC.c: 106: strcpy(month, "DEC");
  9237  002630  0EBE               	movlw	low printRTC@month
  9238  002632  0100               	movlb	0	; () banked
  9239  002634  6F80               	movwf	strcpy@to& (0+255),b
  9240  002636  0E00               	movlw	high printRTC@month
  9241  002638  0100               	movlb	0	; () banked
  9242  00263A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9243  00263C  0ECF               	movlw	low STR_19
  9244  00263E  0100               	movlb	0	; () banked
  9245  002640  6F82               	movwf	strcpy@from& (0+255),b
  9246  002642  0EFF               	movlw	high STR_19
  9247  002644  0100               	movlb	0	; () banked
  9248  002646  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9249  002648  ECF4  F025         	call	_strcpy	;wreg free
  9250                           
  9251                           ;RTC.c: 108: }
  9252                           
  9253                           ;RTC.c: 107: break;
  9254  00264C  D02F               	goto	l6407
  9255  00264E                     l6405:
  9256  00264E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9257  002652  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9258                           
  9259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9260                           ; Switch size 1, requested type "space"
  9261                           ; Number of cases is 1, Range of values is 0 to 0
  9262                           ; switch strategies available:
  9263                           ; Name         Instructions Cycles
  9264                           ; simple_byte            4     3 (average)
  9265                           ;	Chosen strategy is simple_byte
  9266  002656  0100               	movlb	0	; () banked
  9267  002658  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9268  00265A  0A00               	xorlw	0	; case 0
  9269  00265C  A4D8               	btfss	status,2,c
  9270  00265E  D026               	goto	l6407
  9271                           
  9272                           ; BSR set to: 0
  9273                           ; Switch size 1, requested type "space"
  9274                           ; Number of cases is 12, Range of values is 1 to 12
  9275                           ; switch strategies available:
  9276                           ; Name         Instructions Cycles
  9277                           ; simple_byte           37    19 (average)
  9278                           ;	Chosen strategy is simple_byte
  9279  002660  0100               	movlb	0	; () banked
  9280  002662  51AB               	movf	??_printRTC& (0+255),w,b
  9281  002664  0A01               	xorlw	1	; case 1
  9282  002666  B4D8               	btfsc	status,2,c
  9283  002668  D73E               	goto	l6379
  9284  00266A  0A03               	xorlw	3	; case 2
  9285  00266C  B4D8               	btfsc	status,2,c
  9286  00266E  D74A               	goto	l6381
  9287  002670  0A01               	xorlw	1	; case 3
  9288  002672  B4D8               	btfsc	status,2,c
  9289  002674  D756               	goto	l6383
  9290  002676  0A07               	xorlw	7	; case 4
  9291  002678  B4D8               	btfsc	status,2,c
  9292  00267A  D762               	goto	l6385
  9293  00267C  0A01               	xorlw	1	; case 5
  9294  00267E  B4D8               	btfsc	status,2,c
  9295  002680  D76E               	goto	l6387
  9296  002682  0A03               	xorlw	3	; case 6
  9297  002684  B4D8               	btfsc	status,2,c
  9298  002686  D77A               	goto	l6389
  9299  002688  0A01               	xorlw	1	; case 7
  9300  00268A  B4D8               	btfsc	status,2,c
  9301  00268C  D786               	goto	l6391
  9302  00268E  0A0F               	xorlw	15	; case 8
  9303  002690  B4D8               	btfsc	status,2,c
  9304  002692  D792               	goto	l6393
  9305  002694  0A01               	xorlw	1	; case 9
  9306  002696  B4D8               	btfsc	status,2,c
  9307  002698  D79E               	goto	l6395
  9308  00269A  0A03               	xorlw	3	; case 10
  9309  00269C  B4D8               	btfsc	status,2,c
  9310  00269E  D7AA               	goto	l6397
  9311  0026A0  0A01               	xorlw	1	; case 11
  9312  0026A2  B4D8               	btfsc	status,2,c
  9313  0026A4  D7B6               	goto	l6399
  9314  0026A6  0A07               	xorlw	7	; case 12
  9315  0026A8  B4D8               	btfsc	status,2,c
  9316  0026AA  D7C2               	goto	l6401
  9317  0026AC                     l6407:
  9318                           
  9319                           ;RTC.c: 109: lcdInst(0b10000000);;
  9320  0026AC  0E80               	movlw	128
  9321  0026AE  EC98  F028         	call	_lcdInst
  9322                           
  9323                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9324  0026B2  0E0A               	movlw	low STR_21
  9325  0026B4  0100               	movlb	0	; () banked
  9326  0026B6  6F8E               	movwf	printf@f& (0+255),b
  9327  0026B8  0EFB               	movlw	high STR_21
  9328  0026BA  0100               	movlb	0	; () banked
  9329  0026BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9330  0026BE  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9331  0026C2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9332  0026C6  0EBE               	movlw	low printRTC@month
  9333  0026C8  0100               	movlb	0	; () banked
  9334  0026CA  6F92               	movwf	(?_printf+4)& (0+255),b
  9335  0026CC  0E00               	movlw	high printRTC@month
  9336  0026CE  0100               	movlb	0	; () banked
  9337  0026D0  6F93               	movwf	(?_printf+5)& (0+255),b
  9338  0026D2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9339  0026D6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9340  0026DA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9341  0026DE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9342  0026E2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9343  0026E6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9344  0026EA  ECFF  F00A         	call	_printf	;wreg free
  9345  0026EE  0012               	return		;funcret
  9346  0026F0                     __end_of_printRTC:
  9347                           	opt stack 0
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           intcon	equ	0xFF2
  9355                           intcon2	equ	0xFF1
  9356                           intcon3	equ	0xFF0
  9357                           postinc0	equ	0xFEE
  9358                           wreg	equ	0xFE8
  9359                           postdec1	equ	0xFE5
  9360                           fsr1l	equ	0xFE1
  9361                           indf2	equ	0xFDF
  9362                           postinc2	equ	0xFDE
  9363                           postdec2	equ	0xFDD
  9364                           fsr2h	equ	0xFDA
  9365                           fsr2l	equ	0xFD9
  9366                           status	equ	0xFD8
  9367                           
  9368 ;; *************** function _strcpy *****************
  9369 ;; Defined at:
  9370 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9373 ;;		 -> printRTC@month(4), UI@month(4), 
  9374 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9375 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9376 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9377 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9378 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9379 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9380 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9381 ;;		 -> STR_8(4), 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9384 ;;		 -> printRTC@month(4), UI@month(4), 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    0[BANK0 ] PTR unsigned char 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    7
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_UI
  9405 ;;		_printRTC
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text25
  9410  004BE8                     __ptext25:
  9411                           	opt stack 0
  9412  004BE8                     _strcpy:
  9413                           	opt stack 20
  9414                           
  9415                           ;incstack = 0
  9416  004BE8  C080  F084         	movff	strcpy@to,strcpy@cp
  9417  004BEC  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9418  004BF0  D006               	goto	l6117
  9419  004BF2                     l6115:
  9420  004BF2  0100               	movlb	0	; () banked
  9421  004BF4  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9422  004BF6  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9423  004BF8  0100               	movlb	0	; () banked
  9424  004BFA  4B82               	infsnz	strcpy@from& (0+255),f,b
  9425  004BFC  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9426  004BFE                     l6117:
  9427  004BFE  C082  FFF6         	movff	strcpy@from,tblptrl
  9428  004C02  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9429  004C06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9430  004C06  6AF8               	clrf	tblptru,c
  9431  004C08                     	endif
  9432  004C08                     	if	0	;tblptru may be non-zero
  9433  004C08                     	endif
  9434  004C08  C084  FFD9         	movff	strcpy@cp,fsr2l
  9435  004C0C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9436  004C10  0008               	tblrd		*
  9437  004C12  CFF5 FFDF          	movff	tablat,indf2
  9438  004C16  50DF               	movf	indf2,w,c
  9439  004C18  B4D8               	btfsc	status,2,c
  9440  004C1A  0012               	return	
  9441  004C1C  D7EA               	goto	l6115
  9442  004C1E                     __end_of_strcpy:
  9443                           	opt stack 0
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           intcon3	equ	0xFF0
  9453                           postinc0	equ	0xFEE
  9454                           wreg	equ	0xFE8
  9455                           postdec1	equ	0xFE5
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _getRTC *****************
  9465 ;; Defined at:
  9466 ;;		line 44 in file "RTC.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  i               2    3[BANK0 ] int 
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      void 
  9473 ;; Registers used:
  9474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;Total ram usage:        2 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    9
  9487 ;; This function calls:
  9488 ;;		_I2C_Master_Read
  9489 ;;		_I2C_Master_Start
  9490 ;;		_I2C_Master_Stop
  9491 ;;		_I2C_Master_Write
  9492 ;; This function is called by:
  9493 ;;		_printRTC
  9494 ;;		_initSortTimer
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text26
  9499  004344                     __ptext26:
  9500                           	opt stack 0
  9501  004344                     _getRTC:
  9502                           	opt stack 18
  9503                           
  9504                           ;RTC.c: 48: I2C_Master_Start();
  9505                           
  9506                           ;incstack = 0
  9507  004344  ECBE  F028         	call	_I2C_Master_Start	;wreg free
  9508                           
  9509                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9510  004348  0E00               	movlw	0
  9511  00434A  0100               	movlb	0	; () banked
  9512  00434C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9513  00434E  0ED0               	movlw	208
  9514  004350  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9515  004352  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  9516                           
  9517                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9518  004356  0E00               	movlw	0
  9519  004358  0100               	movlb	0	; () banked
  9520  00435A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9521  00435C  0E00               	movlw	0
  9522  00435E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9523  004360  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  9524                           
  9525                           ;RTC.c: 51: I2C_Master_Stop();
  9526  004364  ECBA  F028         	call	_I2C_Master_Stop	;wreg free
  9527                           
  9528                           ;RTC.c: 54: I2C_Master_Start();
  9529  004368  ECBE  F028         	call	_I2C_Master_Start	;wreg free
  9530                           
  9531                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9532  00436C  0E00               	movlw	0
  9533  00436E  0100               	movlb	0	; () banked
  9534  004370  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9535  004372  0ED1               	movlw	209
  9536  004374  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9537  004376  ECAC  F028         	call	_I2C_Master_Write	;wreg free
  9538                           
  9539                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9540  00437A  0E00               	movlw	0
  9541  00437C  0100               	movlb	0	; () banked
  9542  00437E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9543  004380  0E00               	movlw	0
  9544  004382  6F83               	movwf	getRTC@i& (0+255),b
  9545  004384                     l6123:
  9546                           
  9547                           ; BSR set to: 0
  9548  004384  0100               	movlb	0	; () banked
  9549  004386  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9550  004388  D008               	goto	l6127
  9551  00438A  0100               	movlb	0	; () banked
  9552  00438C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9553  00438E  E115               	bnz	l6133
  9554  004390  0E06               	movlw	6
  9555  004392  0100               	movlb	0	; () banked
  9556  004394  5D83               	subwf	getRTC@i& (0+255),w,b
  9557  004396  B0D8               	btfsc	status,0,c
  9558  004398  D010               	goto	l6133
  9559  00439A                     l6127:
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9563  00439A  0E24               	movlw	low _time
  9564  00439C  0100               	movlb	0	; () banked
  9565  00439E  2583               	addwf	getRTC@i& (0+255),w,b
  9566  0043A0  6ED9               	movwf	fsr2l,c
  9567  0043A2  0E01               	movlw	high _time
  9568  0043A4  0100               	movlb	0	; () banked
  9569  0043A6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9570  0043A8  6EDA               	movwf	fsr2h,c
  9571  0043AA  0E01               	movlw	1
  9572  0043AC  EC4B  F027         	call	_I2C_Master_Read
  9573  0043B0  6EDF               	movwf	indf2,c
  9574  0043B2  0100               	movlb	0	; () banked
  9575  0043B4  4B83               	infsnz	getRTC@i& (0+255),f,b
  9576  0043B6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9577  0043B8  D7E5               	goto	l6123
  9578  0043BA                     l6133:
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;RTC.c: 58: }
  9582                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9583  0043BA  0E00               	movlw	0
  9584  0043BC  EC4B  F027         	call	_I2C_Master_Read
  9585  0043C0  0101               	movlb	1	; () banked
  9586  0043C2  6F2A               	movwf	(_time+6)& (0+255),b
  9587                           
  9588                           ;RTC.c: 60: I2C_Master_Stop();
  9589  0043C4  ECBA  F028         	call	_I2C_Master_Stop	;wreg free
  9590  0043C8  0012               	return		;funcret
  9591  0043CA                     __end_of_getRTC:
  9592                           	opt stack 0
  9593                           tblptru	equ	0xFF8
  9594                           tblptrh	equ	0xFF7
  9595                           tblptrl	equ	0xFF6
  9596                           tablat	equ	0xFF5
  9597                           prodh	equ	0xFF4
  9598                           prodl	equ	0xFF3
  9599                           intcon	equ	0xFF2
  9600                           intcon2	equ	0xFF1
  9601                           intcon3	equ	0xFF0
  9602                           postinc0	equ	0xFEE
  9603                           wreg	equ	0xFE8
  9604                           postdec1	equ	0xFE5
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _I2C_Master_Write *****************
  9614 ;; Defined at:
  9615 ;;		line 49 in file "I2C.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  d               2    1[BANK0 ] unsigned int 
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      void 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;Total ram usage:        2 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    8
  9636 ;; This function calls:
  9637 ;;		_I2C_Master_Wait
  9638 ;; This function is called by:
  9639 ;;		_loadRTC
  9640 ;;		_getRTC
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text27
  9645  005158                     __ptext27:
  9646                           	opt stack 0
  9647  005158                     _I2C_Master_Write:
  9648                           	opt stack 18
  9649                           
  9650                           ;I2C.c: 51: I2C_Master_Wait();
  9651                           
  9652                           ;incstack = 0
  9653  005158  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9654                           
  9655                           ;I2C.c: 52: SSPBUF = d;
  9656  00515C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9657  005160  0012               	return		;funcret
  9658  005162                     __end_of_I2C_Master_Write:
  9659                           	opt stack 0
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           intcon	equ	0xFF2
  9667                           intcon2	equ	0xFF1
  9668                           intcon3	equ	0xFF0
  9669                           postinc0	equ	0xFEE
  9670                           wreg	equ	0xFE8
  9671                           postdec1	equ	0xFE5
  9672                           fsr1l	equ	0xFE1
  9673                           indf2	equ	0xFDF
  9674                           postinc2	equ	0xFDE
  9675                           postdec2	equ	0xFDD
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _I2C_Master_Stop *****************
  9681 ;; Defined at:
  9682 ;;		line 43 in file "I2C.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2, status,0, cstack
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    8
  9703 ;; This function calls:
  9704 ;;		_I2C_Master_Wait
  9705 ;; This function is called by:
  9706 ;;		_loadRTC
  9707 ;;		_getRTC
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text28
  9712  005174                     __ptext28:
  9713                           	opt stack 0
  9714  005174                     _I2C_Master_Stop:
  9715                           	opt stack 18
  9716                           
  9717                           ;I2C.c: 45: I2C_Master_Wait();
  9718                           
  9719                           ;incstack = 0
  9720  005174  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9721                           
  9722                           ;I2C.c: 46: PEN = 1;
  9723  005178  84C5               	bsf	4037,2,c	;volatile
  9724  00517A  0012               	return		;funcret
  9725  00517C                     __end_of_I2C_Master_Stop:
  9726                           	opt stack 0
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           intcon	equ	0xFF2
  9734                           intcon2	equ	0xFF1
  9735                           intcon3	equ	0xFF0
  9736                           postinc0	equ	0xFEE
  9737                           wreg	equ	0xFE8
  9738                           postdec1	equ	0xFE5
  9739                           fsr1l	equ	0xFE1
  9740                           indf2	equ	0xFDF
  9741                           postinc2	equ	0xFDE
  9742                           postdec2	equ	0xFDD
  9743                           fsr2h	equ	0xFDA
  9744                           fsr2l	equ	0xFD9
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function _I2C_Master_Start *****************
  9748 ;; Defined at:
  9749 ;;		line 31 in file "I2C.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    8
  9770 ;; This function calls:
  9771 ;;		_I2C_Master_Wait
  9772 ;; This function is called by:
  9773 ;;		_loadRTC
  9774 ;;		_getRTC
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           	psect	text29
  9779  00517C                     __ptext29:
  9780                           	opt stack 0
  9781  00517C                     _I2C_Master_Start:
  9782                           	opt stack 18
  9783                           
  9784                           ;I2C.c: 33: I2C_Master_Wait();
  9785                           
  9786                           ;incstack = 0
  9787  00517C  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9788                           
  9789                           ;I2C.c: 34: SEN = 1;
  9790  005180  80C5               	bsf	4037,0,c	;volatile
  9791  005182  0012               	return		;funcret
  9792  005184                     __end_of_I2C_Master_Start:
  9793                           	opt stack 0
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           intcon2	equ	0xFF1
  9802                           intcon3	equ	0xFF0
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function _I2C_Master_Read *****************
  9815 ;; Defined at:
  9816 ;;		line 55 in file "I2C.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  a               1    wreg     unsigned char 
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;  a               1    1[BANK0 ] unsigned char 
  9821 ;;  temp            1    2[BANK0 ] unsigned char 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      unsigned char 
  9824 ;; Registers used:
  9825 ;;		wreg, status,2, status,0, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;Total ram usage:        2 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    8
  9838 ;; This function calls:
  9839 ;;		_I2C_Master_Wait
  9840 ;; This function is called by:
  9841 ;;		_getRTC
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text30
  9846  004E96                     __ptext30:
  9847                           	opt stack 0
  9848  004E96                     _I2C_Master_Read:
  9849                           	opt stack 18
  9850                           
  9851                           ;incstack = 0
  9852                           ;I2C_Master_Read@a stored from wreg
  9853  004E96  0100               	movlb	0	; () banked
  9854  004E98  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9855                           
  9856                           ;I2C.c: 57: unsigned char temp;
  9857                           ;I2C.c: 58: I2C_Master_Wait();
  9858  004E9A  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9859                           
  9860                           ;I2C.c: 59: RCEN = 1;
  9861  004E9E  86C5               	bsf	4037,3,c	;volatile
  9862                           
  9863                           ;I2C.c: 60: I2C_Master_Wait();
  9864  004EA0  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9865                           
  9866                           ;I2C.c: 61: temp = SSPBUF;
  9867  004EA4  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9868                           
  9869                           ;I2C.c: 62: I2C_Master_Wait();
  9870  004EA8  EC7D  F028         	call	_I2C_Master_Wait	;wreg free
  9871                           
  9872                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9873  004EAC  0100               	movlb	0	; () banked
  9874  004EAE  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9875  004EB0  0100               	movlb	0	; () banked
  9876  004EB2  A4D8               	btfss	status,2,c
  9877  004EB4  D002               	goto	u4260
  9878  004EB6  8AC5               	bsf	4037,5,c	;volatile
  9879  004EB8  D001               	goto	l5811
  9880  004EBA                     u4260:
  9881  004EBA  9AC5               	bcf	4037,5,c	;volatile
  9882  004EBC                     l5811:
  9883                           
  9884                           ;I2C.c: 64: ACKEN = 1;
  9885  004EBC  88C5               	bsf	4037,4,c	;volatile
  9886                           
  9887                           ;I2C.c: 65: return temp;
  9888  004EBE  0100               	movlb	0	; () banked
  9889  004EC0  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9890  004EC2  0012               	return	
  9891  004EC4                     __end_of_I2C_Master_Read:
  9892                           	opt stack 0
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           intcon2	equ	0xFF1
  9901                           intcon3	equ	0xFF0
  9902                           postinc0	equ	0xFEE
  9903                           wreg	equ	0xFE8
  9904                           postdec1	equ	0xFE5
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           fsr2h	equ	0xFDA
  9910                           fsr2l	equ	0xFD9
  9911                           status	equ	0xFD8
  9912                           
  9913 ;; *************** function _I2C_Master_Wait *****************
  9914 ;; Defined at:
  9915 ;;		line 26 in file "I2C.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;		None
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  1    wreg      void 
  9922 ;; Registers used:
  9923 ;;		wreg, status,2, status,0
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;Total ram usage:        1 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    7
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_I2C_Master_Start
  9940 ;;		_I2C_Master_Stop
  9941 ;;		_I2C_Master_Write
  9942 ;;		_I2C_Master_Read
  9943 ;;		_I2C_Master_RepeatedStart
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           	psect	text31
  9948  0050FA                     __ptext31:
  9949                           	opt stack 0
  9950  0050FA                     _I2C_Master_Wait:
  9951                           	opt stack 18
  9952  0050FA                     l66:
  9953  0050FA  B4C7               	btfsc	4039,2,c	;volatile
  9954  0050FC  D7FE               	goto	l66
  9955  0050FE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9956  005102  0E1F               	movlw	31
  9957  005104  0100               	movlb	0	; () banked
  9958  005106  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9959  005108  B4D8               	btfsc	status,2,c
  9960  00510A  0012               	return	
  9961  00510C  D7F6               	goto	l66
  9962  00510E                     __end_of_I2C_Master_Wait:
  9963                           	opt stack 0
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           intcon2	equ	0xFF1
  9972                           intcon3	equ	0xFF0
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           postdec1	equ	0xFE5
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _change_state_to_menu_22 *****************
  9985 ;; Defined at:
  9986 ;;		line 498 in file "UI.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;Total ram usage:        0 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:   10
 10007 ;; This function calls:
 10008 ;;		_lcdInst
 10009 ;;		_printf
 10010 ;; This function is called by:
 10011 ;;		_UI
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text32
 10016  004B78                     __ptext32:
 10017                           	opt stack 0
 10018  004B78                     _change_state_to_menu_22:
 10019                           	opt stack 19
 10020                           
 10021                           ;UI.c: 499: cur_state = 22;
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;incstack = 0
 10025  004B78  0E00               	movlw	0
 10026  004B7A  0100               	movlb	0	; () banked
 10027  004B7C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 10028  004B7E  0E16               	movlw	22
 10029  004B80  6FE6               	movwf	_cur_state& (0+255),b
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;UI.c: 501: lcdInst(0b10000000);;
 10033  004B82  0E80               	movlw	128
 10034  004B84  EC98  F028         	call	_lcdInst
 10035                           
 10036                           ;UI.c: 502: printf("2. SORT        <");
 10037  004B88  0EC4               	movlw	low STR_34
 10038  004B8A  0100               	movlb	0	; () banked
 10039  004B8C  6F8E               	movwf	printf@f& (0+255),b
 10040  004B8E  0EFD               	movlw	high STR_34
 10041  004B90  0100               	movlb	0	; () banked
 10042  004B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10043  004B94  ECFF  F00A         	call	_printf	;wreg free
 10044                           
 10045                           ;UI.c: 503: lcdInst(0b11000000);;
 10046  004B98  0EC0               	movlw	192
 10047  004B9A  EC98  F028         	call	_lcdInst
 10048                           
 10049                           ;UI.c: 504: printf("3. LOGS         ");
 10050  004B9E  0E09               	movlw	low STR_36
 10051  004BA0  0100               	movlb	0	; () banked
 10052  004BA2  6F8E               	movwf	printf@f& (0+255),b
 10053  004BA4  0EFD               	movlw	high STR_36
 10054  004BA6  0100               	movlb	0	; () banked
 10055  004BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10056  004BAA  ECFF  F00A         	call	_printf	;wreg free
 10057  004BAE  0012               	return		;funcret
 10058  004BB0                     __end_of_change_state_to_menu_22:
 10059                           	opt stack 0
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           intcon3	equ	0xFF0
 10069                           postinc0	equ	0xFEE
 10070                           wreg	equ	0xFE8
 10071                           postdec1	equ	0xFE5
 10072                           fsr1l	equ	0xFE1
 10073                           indf2	equ	0xFDF
 10074                           postinc2	equ	0xFDE
 10075                           postdec2	equ	0xFDD
 10076                           fsr2h	equ	0xFDA
 10077                           fsr2l	equ	0xFD9
 10078                           status	equ	0xFD8
 10079                           
 10080 ;; *************** function _change_state_to_menu_12 *****************
 10081 ;; Defined at:
 10082 ;;		line 490 in file "UI.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;Total ram usage:        0 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:   10
 10103 ;; This function calls:
 10104 ;;		_lcdInst
 10105 ;;		_printf
 10106 ;; This function is called by:
 10107 ;;		_UI
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text33
 10112  004BB0                     __ptext33:
 10113                           	opt stack 0
 10114  004BB0                     _change_state_to_menu_12:
 10115                           	opt stack 19
 10116                           
 10117                           ;UI.c: 491: cur_state = 12;
 10118                           
 10119                           ;incstack = 0
 10120  004BB0  0E00               	movlw	0
 10121  004BB2  0100               	movlb	0	; () banked
 10122  004BB4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 10123  004BB6  0E0C               	movlw	12
 10124  004BB8  6FE6               	movwf	_cur_state& (0+255),b
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;UI.c: 493: lcdInst(0b10000000);;
 10128  004BBA  0E80               	movlw	128
 10129  004BBC  EC98  F028         	call	_lcdInst
 10130                           
 10131                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10132  004BC0  0E2B               	movlw	low STR_33
 10133  004BC2  0100               	movlb	0	; () banked
 10134  004BC4  6F8E               	movwf	printf@f& (0+255),b
 10135  004BC6  0EFD               	movlw	high STR_33
 10136  004BC8  0100               	movlb	0	; () banked
 10137  004BCA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10138  004BCC  ECFF  F00A         	call	_printf	;wreg free
 10139                           
 10140                           ;UI.c: 495: lcdInst(0b11000000);;
 10141  004BD0  0EC0               	movlw	192
 10142  004BD2  EC98  F028         	call	_lcdInst
 10143                           
 10144                           ;UI.c: 496: printf("2. SORT        <");
 10145  004BD6  0EC4               	movlw	low STR_34
 10146  004BD8  0100               	movlb	0	; () banked
 10147  004BDA  6F8E               	movwf	printf@f& (0+255),b
 10148  004BDC  0EFD               	movlw	high STR_34
 10149  004BDE  0100               	movlb	0	; () banked
 10150  004BE0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10151  004BE2  ECFF  F00A         	call	_printf	;wreg free
 10152  004BE6  0012               	return		;funcret
 10153  004BE8                     __end_of_change_state_to_menu_12:
 10154                           	opt stack 0
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           prodh	equ	0xFF4
 10160                           prodl	equ	0xFF3
 10161                           intcon	equ	0xFF2
 10162                           intcon2	equ	0xFF1
 10163                           intcon3	equ	0xFF0
 10164                           postinc0	equ	0xFEE
 10165                           wreg	equ	0xFE8
 10166                           postdec1	equ	0xFE5
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function ___awmod *****************
 10176 ;; Defined at:
 10177 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;  dividend        2    0[BANK0 ] int 
 10180 ;;  divisor         2    2[BANK0 ] int 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  sign            1    5[BANK0 ] unsigned char 
 10183 ;;  counter         1    4[BANK0 ] unsigned char 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  2    0[BANK0 ] int 
 10186 ;; Registers used:
 10187 ;;		wreg, status,2, status,0
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;Total ram usage:        6 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    7
 10200 ;; This function calls:
 10201 ;;		Nothing
 10202 ;; This function is called by:
 10203 ;;		_UI
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text34
 10208  004216                     __ptext34:
 10209                           	opt stack 0
 10210  004216                     ___awmod:
 10211                           	opt stack 22
 10212                           
 10213                           ;incstack = 0
 10214  004216  0E00               	movlw	0
 10215  004218  0100               	movlb	0	; () banked
 10216  00421A  6F85               	movwf	___awmod@sign& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219  00421C  0100               	movlb	0	; () banked
 10220  00421E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10221  004220  D008               	goto	l8187
 10222                           
 10223                           ; BSR set to: 0
 10224  004222  0100               	movlb	0	; () banked
 10225  004224  6D80               	negf	___awmod@dividend& (0+255),b
 10226  004226  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10227  004228  B0D8               	btfsc	status,0,c
 10228  00422A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  00422C  0E01               	movlw	1
 10232  00422E  0100               	movlb	0	; () banked
 10233  004230  6F85               	movwf	___awmod@sign& (0+255),b
 10234  004232                     l8187:
 10235                           
 10236                           ; BSR set to: 0
 10237  004232  0100               	movlb	0	; () banked
 10238  004234  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10239  004236  D005               	goto	l8191
 10240                           
 10241                           ; BSR set to: 0
 10242  004238  0100               	movlb	0	; () banked
 10243  00423A  6D82               	negf	___awmod@divisor& (0+255),b
 10244  00423C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10245  00423E  B0D8               	btfsc	status,0,c
 10246  004240  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10247  004242                     l8191:
 10248                           
 10249                           ; BSR set to: 0
 10250  004242  0100               	movlb	0	; () banked
 10251  004244  5182               	movf	___awmod@divisor& (0+255),w,b
 10252  004246  0100               	movlb	0	; () banked
 10253  004248  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10254  00424A  B4D8               	btfsc	status,2,c
 10255  00424C  D026               	goto	l8207
 10256                           
 10257                           ; BSR set to: 0
 10258  00424E  0E01               	movlw	1
 10259  004250  0100               	movlb	0	; () banked
 10260  004252  6F84               	movwf	___awmod@counter& (0+255),b
 10261  004254  D006               	goto	l8197
 10262  004256                     l8195:
 10263                           
 10264                           ; BSR set to: 0
 10265  004256  0100               	movlb	0	; () banked
 10266  004258  90D8               	bcf	status,0,c
 10267  00425A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10268  00425C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10269  00425E  0100               	movlb	0	; () banked
 10270  004260  2B84               	incf	___awmod@counter& (0+255),f,b
 10271  004262                     l8197:
 10272                           
 10273                           ; BSR set to: 0
 10274  004262  0100               	movlb	0	; () banked
 10275  004264  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10276  004266  D7F7               	goto	l8195
 10277  004268                     l8199:
 10278                           
 10279                           ; BSR set to: 0
 10280  004268  0100               	movlb	0	; () banked
 10281  00426A  5182               	movf	___awmod@divisor& (0+255),w,b
 10282  00426C  0100               	movlb	0	; () banked
 10283  00426E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10284  004270  0100               	movlb	0	; () banked
 10285  004272  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10286  004274  0100               	movlb	0	; () banked
 10287  004276  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10288  004278  A0D8               	btfss	status,0,c
 10289  00427A  D008               	goto	l8203
 10290                           
 10291                           ; BSR set to: 0
 10292  00427C  0100               	movlb	0	; () banked
 10293  00427E  5182               	movf	___awmod@divisor& (0+255),w,b
 10294  004280  0100               	movlb	0	; () banked
 10295  004282  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10296  004284  0100               	movlb	0	; () banked
 10297  004286  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10298  004288  0100               	movlb	0	; () banked
 10299  00428A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10300  00428C                     l8203:
 10301                           
 10302                           ; BSR set to: 0
 10303  00428C  0100               	movlb	0	; () banked
 10304  00428E  90D8               	bcf	status,0,c
 10305  004290  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10306  004292  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10307                           
 10308                           ; BSR set to: 0
 10309  004294  0100               	movlb	0	; () banked
 10310  004296  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10311  004298  D7E7               	goto	l8199
 10312  00429A                     l8207:
 10313                           
 10314                           ; BSR set to: 0
 10315  00429A  0100               	movlb	0	; () banked
 10316  00429C  5185               	movf	___awmod@sign& (0+255),w,b
 10317  00429E  0100               	movlb	0	; () banked
 10318  0042A0  B4D8               	btfsc	status,2,c
 10319  0042A2  D005               	goto	l8211
 10320                           
 10321                           ; BSR set to: 0
 10322  0042A4  0100               	movlb	0	; () banked
 10323  0042A6  6D80               	negf	___awmod@dividend& (0+255),b
 10324  0042A8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10325  0042AA  B0D8               	btfsc	status,0,c
 10326  0042AC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10327  0042AE                     l8211:
 10328                           
 10329                           ; BSR set to: 0
 10330  0042AE  C080  F080         	movff	___awmod@dividend,?___awmod
 10331  0042B2  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10332  0042B6  0012               	return	
 10333  0042B8                     __end_of___awmod:
 10334                           	opt stack 0
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           intcon	equ	0xFF2
 10342                           intcon2	equ	0xFF1
 10343                           intcon3	equ	0xFF0
 10344                           postinc0	equ	0xFEE
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           fsr2h	equ	0xFDA
 10352                           fsr2l	equ	0xFD9
 10353                           status	equ	0xFD8
 10354                           
 10355 ;; *************** function ___awdiv *****************
 10356 ;; Defined at:
 10357 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  dividend        2    6[BANK0 ] int 
 10360 ;;  divisor         2    8[BANK0 ] int 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  quotient        2   12[BANK0 ] int 
 10363 ;;  sign            1   11[BANK0 ] unsigned char 
 10364 ;;  counter         1   10[BANK0 ] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  2    6[BANK0 ] int 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;Total ram usage:        8 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    7
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_UI
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           	psect	text35
 10389  003FF2                     __ptext35:
 10390                           	opt stack 0
 10391  003FF2                     ___awdiv:
 10392                           	opt stack 22
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;incstack = 0
 10396  003FF2  0E00               	movlw	0
 10397  003FF4  0100               	movlb	0	; () banked
 10398  003FF6  6F8B               	movwf	___awdiv@sign& (0+255),b
 10399                           
 10400                           ; BSR set to: 0
 10401  003FF8  0100               	movlb	0	; () banked
 10402  003FFA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10403  003FFC  D008               	goto	l8143
 10404                           
 10405                           ; BSR set to: 0
 10406  003FFE  0100               	movlb	0	; () banked
 10407  004000  6D88               	negf	___awdiv@divisor& (0+255),b
 10408  004002  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10409  004004  B0D8               	btfsc	status,0,c
 10410  004006  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413  004008  0E01               	movlw	1
 10414  00400A  0100               	movlb	0	; () banked
 10415  00400C  6F8B               	movwf	___awdiv@sign& (0+255),b
 10416  00400E                     l8143:
 10417                           
 10418                           ; BSR set to: 0
 10419  00400E  0100               	movlb	0	; () banked
 10420  004010  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10421  004012  D008               	goto	l8149
 10422                           
 10423                           ; BSR set to: 0
 10424  004014  0100               	movlb	0	; () banked
 10425  004016  6D86               	negf	___awdiv@dividend& (0+255),b
 10426  004018  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10427  00401A  B0D8               	btfsc	status,0,c
 10428  00401C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10429                           
 10430                           ; BSR set to: 0
 10431  00401E  0E01               	movlw	1
 10432  004020  0100               	movlb	0	; () banked
 10433  004022  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10434  004024                     l8149:
 10435                           
 10436                           ; BSR set to: 0
 10437  004024  0E00               	movlw	0
 10438  004026  0100               	movlb	0	; () banked
 10439  004028  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10440  00402A  0E00               	movlw	0
 10441  00402C  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10442                           
 10443                           ; BSR set to: 0
 10444  00402E  0100               	movlb	0	; () banked
 10445  004030  5188               	movf	___awdiv@divisor& (0+255),w,b
 10446  004032  0100               	movlb	0	; () banked
 10447  004034  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10448  004036  B4D8               	btfsc	status,2,c
 10449  004038  D02C               	goto	l8171
 10450                           
 10451                           ; BSR set to: 0
 10452  00403A  0E01               	movlw	1
 10453  00403C  0100               	movlb	0	; () banked
 10454  00403E  6F8A               	movwf	___awdiv@counter& (0+255),b
 10455  004040  D006               	goto	l8157
 10456  004042                     l8155:
 10457                           
 10458                           ; BSR set to: 0
 10459  004042  0100               	movlb	0	; () banked
 10460  004044  90D8               	bcf	status,0,c
 10461  004046  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10462  004048  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10463  00404A  0100               	movlb	0	; () banked
 10464  00404C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10465  00404E                     l8157:
 10466                           
 10467                           ; BSR set to: 0
 10468  00404E  0100               	movlb	0	; () banked
 10469  004050  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10470  004052  D7F7               	goto	l8155
 10471  004054                     l8159:
 10472                           
 10473                           ; BSR set to: 0
 10474  004054  0100               	movlb	0	; () banked
 10475  004056  90D8               	bcf	status,0,c
 10476  004058  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10477  00405A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10478                           
 10479                           ; BSR set to: 0
 10480  00405C  0100               	movlb	0	; () banked
 10481  00405E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10482  004060  0100               	movlb	0	; () banked
 10483  004062  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10484  004064  0100               	movlb	0	; () banked
 10485  004066  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10486  004068  0100               	movlb	0	; () banked
 10487  00406A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10488  00406C  A0D8               	btfss	status,0,c
 10489  00406E  D00A               	goto	l8167
 10490                           
 10491                           ; BSR set to: 0
 10492  004070  0100               	movlb	0	; () banked
 10493  004072  5188               	movf	___awdiv@divisor& (0+255),w,b
 10494  004074  0100               	movlb	0	; () banked
 10495  004076  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10496  004078  0100               	movlb	0	; () banked
 10497  00407A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10498  00407C  0100               	movlb	0	; () banked
 10499  00407E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10500                           
 10501                           ; BSR set to: 0
 10502  004080  0100               	movlb	0	; () banked
 10503  004082  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10504  004084                     l8167:
 10505                           
 10506                           ; BSR set to: 0
 10507  004084  0100               	movlb	0	; () banked
 10508  004086  90D8               	bcf	status,0,c
 10509  004088  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10510  00408A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10511                           
 10512                           ; BSR set to: 0
 10513  00408C  0100               	movlb	0	; () banked
 10514  00408E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10515  004090  D7E1               	goto	l8159
 10516  004092                     l8171:
 10517                           
 10518                           ; BSR set to: 0
 10519  004092  0100               	movlb	0	; () banked
 10520  004094  518B               	movf	___awdiv@sign& (0+255),w,b
 10521  004096  0100               	movlb	0	; () banked
 10522  004098  B4D8               	btfsc	status,2,c
 10523  00409A  D005               	goto	l8175
 10524                           
 10525                           ; BSR set to: 0
 10526  00409C  0100               	movlb	0	; () banked
 10527  00409E  6D8C               	negf	___awdiv@quotient& (0+255),b
 10528  0040A0  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10529  0040A2  B0D8               	btfsc	status,0,c
 10530  0040A4  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10531  0040A6                     l8175:
 10532                           
 10533                           ; BSR set to: 0
 10534  0040A6  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10535  0040AA  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10536  0040AE  0012               	return	
 10537  0040B0                     __end_of___awdiv:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           intcon2	equ	0xFF1
 10547                           intcon3	equ	0xFF0
 10548                           postinc0	equ	0xFEE
 10549                           wreg	equ	0xFE8
 10550                           postdec1	equ	0xFE5
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _Test *****************
 10560 ;; Defined at:
 10561 ;;		line 30 in file "Test.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;		None
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;		None
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:        2 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:   11
 10582 ;; This function calls:
 10583 ;;		_BlockerTest
 10584 ;;		_BothServos
 10585 ;;		_EEPROMTest
 10586 ;;		_PortTestA5
 10587 ;;		_PortTests
 10588 ;;		_PusherTest
 10589 ;;		_SpeedTest
 10590 ;;		_actuatorTest
 10591 ;;		_algorithmTest
 10592 ;;		_lcdInst
 10593 ;;		_printf
 10594 ;;		_sensorTest
 10595 ;; This function is called by:
 10596 ;;		_main
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600                           	psect	text36
 10601  003C64                     __ptext36:
 10602                           	opt stack 0
 10603  003C64                     _Test:
 10604                           	opt stack 19
 10605  003C64                     
 10606                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10607  003C64  0E01               	movlw	1
 10608  003C66  EC98  F028         	call	_lcdInst
 10609  003C6A  0E68               	movlw	104
 10610  003C6C  0100               	movlb	0	; () banked
 10611  003C6E  6FC6               	movwf	??_Test& (0+255),b
 10612  003C70  0EE4               	movlw	228
 10613  003C72                     u9097:
 10614  003C72  2EE8               	decfsz	wreg,f,c
 10615  003C74  D7FE               	bra	u9097
 10616  003C76  2FC6               	decfsz	??_Test& (0+255),f,b
 10617  003C78  D7FC               	bra	u9097
 10618  003C7A  F000               	nop	
 10619  003C7C  0E80               	movlw	128
 10620  003C7E  EC98  F028         	call	_lcdInst
 10621                           
 10622                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10623  003C82  0E92               	movlw	low STR_68
 10624  003C84  0100               	movlb	0	; () banked
 10625  003C86  6F8E               	movwf	printf@f& (0+255),b
 10626  003C88  0EFC               	movlw	high STR_68
 10627  003C8A  0100               	movlb	0	; () banked
 10628  003C8C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10629  003C8E  ECFF  F00A         	call	_printf	;wreg free
 10630                           
 10631                           ;Test.c: 35: lcdInst(0b11000000);;
 10632  003C92  0EC0               	movlw	192
 10633  003C94  EC98  F028         	call	_lcdInst
 10634                           
 10635                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10636  003C98  0EA3               	movlw	low STR_69
 10637  003C9A  0100               	movlb	0	; () banked
 10638  003C9C  6F8E               	movwf	printf@f& (0+255),b
 10639  003C9E  0EFC               	movlw	high STR_69
 10640  003CA0  0100               	movlb	0	; () banked
 10641  003CA2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10642  003CA4  ECFF  F00A         	call	_printf	;wreg free
 10643                           
 10644                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10645  003CA8  0E05               	movlw	5
 10646  003CAA  0100               	movlb	0	; () banked
 10647  003CAC  6FC7               	movwf	(??_Test+1)& (0+255),b
 10648  003CAE  0E0F               	movlw	15
 10649  003CB0  0100               	movlb	0	; () banked
 10650  003CB2  6FC6               	movwf	??_Test& (0+255),b
 10651  003CB4  0EF1               	movlw	241
 10652  003CB6                     u9107:
 10653  003CB6  2EE8               	decfsz	wreg,f,c
 10654  003CB8  D7FE               	bra	u9107
 10655  003CBA  2FC6               	decfsz	??_Test& (0+255),f,b
 10656  003CBC  D7FC               	bra	u9107
 10657  003CBE  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10658  003CC0  D7FA               	bra	u9107
 10659  003CC2                     l1107:
 10660  003CC2  A281               	btfss	3969,1,c	;volatile
 10661  003CC4  D7FE               	goto	l1107
 10662                           
 10663                           ;Test.c: 39: var = PORTB >> 4;
 10664  003CC6  CF81 F0C6          	movff	3969,??_Test	;volatile
 10665  003CCA  0100               	movlb	0	; () banked
 10666  003CCC  3BC6               	swapf	??_Test& (0+255),f,b
 10667  003CCE  0E0F               	movlw	15
 10668  003CD0  17C6               	andwf	??_Test& (0+255),f,b
 10669  003CD2  0100               	movlb	0	; () banked
 10670  003CD4  51C6               	movf	??_Test& (0+255),w,b
 10671  003CD6  0100               	movlb	0	; () banked
 10672  003CD8  6FFA               	movwf	_var& (0+255),b
 10673  003CDA  6BFB               	clrf	(_var+1)& (0+255),b
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;Test.c: 40: var++;
 10677  003CDC  0100               	movlb	0	; () banked
 10678  003CDE  4BFA               	infsnz	_var& (0+255),f,b
 10679  003CE0  2BFB               	incf	(_var+1)& (0+255),f,b
 10680  003CE2                     l1110:
 10681  003CE2  A281               	btfss	3969,1,c	;volatile
 10682  003CE4  D01F               	goto	l8923
 10683  003CE6  D7FD               	goto	l1110
 10684  003CE8                     l8901:
 10685                           
 10686                           ;Test.c: 44: algorithmTest();
 10687  003CE8  EC2E  F01F         	call	_algorithmTest	;wreg free
 10688                           
 10689                           ;Test.c: 45: break;
 10690  003CEC  D7BB               	goto	l8883
 10691  003CEE                     l8903:
 10692                           
 10693                           ;Test.c: 47: sensorTest();
 10694  003CEE  EC94  F010         	call	_sensorTest	;wreg free
 10695                           
 10696                           ;Test.c: 48: break;
 10697  003CF2  D7B8               	goto	l8883
 10698  003CF4                     l8905:
 10699                           
 10700                           ;Test.c: 50: actuatorTest();
 10701  003CF4  EC09  F000         	call	_actuatorTest	;wreg free
 10702                           
 10703                           ;Test.c: 51: break;
 10704  003CF8  D7B5               	goto	l8883
 10705  003CFA                     l8907:
 10706                           
 10707                           ;Test.c: 53: PortTestA5();
 10708  003CFA  EC56  F024         	call	_PortTestA5	;wreg free
 10709                           
 10710                           ;Test.c: 54: break;
 10711  003CFE  D7B2               	goto	l8883
 10712  003D00                     l8909:
 10713                           
 10714                           ;Test.c: 57: SpeedTest();
 10715  003D00  ECE5  F021         	call	_SpeedTest	;wreg free
 10716                           
 10717                           ;Test.c: 58: break;
 10718  003D04  D7AF               	goto	l8883
 10719  003D06                     l8911:
 10720                           
 10721                           ;Test.c: 60: EEPROMTest();
 10722  003D06  ECCA  F028         	call	_EEPROMTest	;wreg free
 10723                           
 10724                           ;Test.c: 61: break;
 10725  003D0A  D7AC               	goto	l8883
 10726  003D0C                     l8913:
 10727                           
 10728                           ;Test.c: 63: PusherTest();
 10729  003D0C  EC29  F016         	call	_PusherTest	;wreg free
 10730                           
 10731                           ;Test.c: 64: break;
 10732  003D10  D7A9               	goto	l8883
 10733  003D12                     l8915:
 10734                           
 10735                           ;Test.c: 66: PortTests();
 10736  003D12  EC27  F022         	call	_PortTests	;wreg free
 10737                           
 10738                           ;Test.c: 67: break;
 10739  003D16  D7A6               	goto	l8883
 10740  003D18                     l8917:
 10741                           
 10742                           ;Test.c: 69: BothServos();
 10743  003D18  EC1B  F00D         	call	_BothServos	;wreg free
 10744                           
 10745                           ;Test.c: 70: break;
 10746  003D1C  D7A3               	goto	l8883
 10747  003D1E                     l8919:
 10748                           
 10749                           ;Test.c: 72: BlockerTest();
 10750  003D1E  EC7C  F01B         	call	_BlockerTest	;wreg free
 10751                           
 10752                           ;Test.c: 76: }
 10753                           
 10754                           ;Test.c: 75: break;
 10755                           
 10756                           ;Test.c: 74: default:
 10757                           
 10758                           ;Test.c: 73: break;
 10759  003D22  D7A0               	goto	l8883
 10760  003D24                     l8923:
 10761  003D24  C0FA  F0C6         	movff	_var,??_Test
 10762  003D28  C0FB  F0C7         	movff	_var+1,??_Test+1
 10763                           
 10764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10765                           ; Switch size 1, requested type "space"
 10766                           ; Number of cases is 1, Range of values is 0 to 0
 10767                           ; switch strategies available:
 10768                           ; Name         Instructions Cycles
 10769                           ; simple_byte            4     3 (average)
 10770                           ;	Chosen strategy is simple_byte
 10771  003D2C  0100               	movlb	0	; () banked
 10772  003D2E  51C7               	movf	(??_Test+1)& (0+255),w,b
 10773  003D30  0A00               	xorlw	0	; case 0
 10774  003D32  A4D8               	btfss	status,2,c
 10775  003D34  D797               	goto	l8883
 10776                           
 10777                           ; BSR set to: 0
 10778                           ; Switch size 1, requested type "space"
 10779                           ; Number of cases is 10, Range of values is 1 to 11
 10780                           ; switch strategies available:
 10781                           ; Name         Instructions Cycles
 10782                           ; simple_byte           31    16 (average)
 10783                           ;	Chosen strategy is simple_byte
 10784  003D36  0100               	movlb	0	; () banked
 10785  003D38  51C6               	movf	??_Test& (0+255),w,b
 10786  003D3A  0A01               	xorlw	1	; case 1
 10787  003D3C  B4D8               	btfsc	status,2,c
 10788  003D3E  D7D4               	goto	l8901
 10789  003D40  0A03               	xorlw	3	; case 2
 10790  003D42  B4D8               	btfsc	status,2,c
 10791  003D44  D7D4               	goto	l8903
 10792  003D46  0A01               	xorlw	1	; case 3
 10793  003D48  B4D8               	btfsc	status,2,c
 10794  003D4A  D7D4               	goto	l8905
 10795  003D4C  0A06               	xorlw	6	; case 5
 10796  003D4E  B4D8               	btfsc	status,2,c
 10797  003D50  D7D4               	goto	l8907
 10798  003D52  0A03               	xorlw	3	; case 6
 10799  003D54  B4D8               	btfsc	status,2,c
 10800  003D56  D7D4               	goto	l8909
 10801  003D58  0A01               	xorlw	1	; case 7
 10802  003D5A  B4D8               	btfsc	status,2,c
 10803  003D5C  D7D4               	goto	l8911
 10804  003D5E  0A0F               	xorlw	15	; case 8
 10805  003D60  B4D8               	btfsc	status,2,c
 10806  003D62  D7D4               	goto	l8913
 10807  003D64  0A01               	xorlw	1	; case 9
 10808  003D66  B4D8               	btfsc	status,2,c
 10809  003D68  D7D4               	goto	l8915
 10810  003D6A  0A03               	xorlw	3	; case 10
 10811  003D6C  B4D8               	btfsc	status,2,c
 10812  003D6E  D7D4               	goto	l8917
 10813  003D70  0A01               	xorlw	1	; case 11
 10814  003D72  B4D8               	btfsc	status,2,c
 10815  003D74  D7D4               	goto	l8919
 10816                           
 10817                           ; BSR set to: 0
 10818                           
 10819                           ; BSR set to: 0
 10820  003D76  D776               	goto	l8883
 10821  003D78                     __end_of_Test:
 10822                           	opt stack 0
 10823                           tblptru	equ	0xFF8
 10824                           tblptrh	equ	0xFF7
 10825                           tblptrl	equ	0xFF6
 10826                           tablat	equ	0xFF5
 10827                           prodh	equ	0xFF4
 10828                           prodl	equ	0xFF3
 10829                           intcon	equ	0xFF2
 10830                           intcon2	equ	0xFF1
 10831                           intcon3	equ	0xFF0
 10832                           postinc0	equ	0xFEE
 10833                           wreg	equ	0xFE8
 10834                           postdec1	equ	0xFE5
 10835                           fsr1l	equ	0xFE1
 10836                           indf2	equ	0xFDF
 10837                           postinc2	equ	0xFDE
 10838                           postdec2	equ	0xFDD
 10839                           fsr2h	equ	0xFDA
 10840                           fsr2l	equ	0xFD9
 10841                           status	equ	0xFD8
 10842                           
 10843 ;; *************** function _sensorTest *****************
 10844 ;; Defined at:
 10845 ;;		line 124 in file "Test.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  res             2   45[BANK0 ] int 
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;Total ram usage:        4 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:   10
 10866 ;; This function calls:
 10867 ;;		_lcdInst
 10868 ;;		_printf
 10869 ;;		_readADC
 10870 ;;		_readMAG
 10871 ;; This function is called by:
 10872 ;;		_Test
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           	psect	text37
 10877  002128                     __ptext37:
 10878                           	opt stack 0
 10879  002128                     _sensorTest:
 10880                           	opt stack 19
 10881                           
 10882                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;incstack = 0
 10886  002128  0E01               	movlw	1
 10887  00212A  EC98  F028         	call	_lcdInst
 10888  00212E  0E68               	movlw	104
 10889  002130  0100               	movlb	0	; () banked
 10890  002132  6FAB               	movwf	??_sensorTest& (0+255),b
 10891  002134  0EE4               	movlw	228
 10892  002136                     u9117:
 10893  002136  2EE8               	decfsz	wreg,f,c
 10894  002138  D7FE               	bra	u9117
 10895  00213A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10896  00213C  D7FC               	bra	u9117
 10897  00213E  F000               	nop	
 10898  002140  0E80               	movlw	128
 10899  002142  EC98  F028         	call	_lcdInst
 10900                           
 10901                           ;Test.c: 127: printf("SENSORS");
 10902  002146  0EAE               	movlw	low STR_77
 10903  002148  0100               	movlb	0	; () banked
 10904  00214A  6F8E               	movwf	printf@f& (0+255),b
 10905  00214C  0EFF               	movlw	high STR_77
 10906  00214E  0100               	movlb	0	; () banked
 10907  002150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10908  002152  ECFF  F00A         	call	_printf	;wreg free
 10909                           
 10910                           ;Test.c: 128: lcdInst(0b11000000);;
 10911  002156  0EC0               	movlw	192
 10912  002158  EC98  F028         	call	_lcdInst
 10913                           
 10914                           ;Test.c: 129: printf("PUSH TO START");
 10915  00215C  0E0B               	movlw	low STR_71
 10916  00215E  0100               	movlb	0	; () banked
 10917  002160  6F8E               	movwf	printf@f& (0+255),b
 10918  002162  0EFF               	movlw	high STR_71
 10919  002164  0100               	movlb	0	; () banked
 10920  002166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10921  002168  ECFF  F00A         	call	_printf	;wreg free
 10922                           
 10923                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10924  00216C  0E05               	movlw	5
 10925  00216E  0100               	movlb	0	; () banked
 10926  002170  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10927  002172  0E0F               	movlw	15
 10928  002174  0100               	movlb	0	; () banked
 10929  002176  6FAB               	movwf	??_sensorTest& (0+255),b
 10930  002178  0EF1               	movlw	241
 10931  00217A                     u9127:
 10932  00217A  2EE8               	decfsz	wreg,f,c
 10933  00217C  D7FE               	bra	u9127
 10934  00217E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10935  002180  D7FC               	bra	u9127
 10936  002182  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10937  002184  D7FA               	bra	u9127
 10938  002186                     l1140:
 10939  002186  A281               	btfss	3969,1,c	;volatile
 10940  002188  D7FE               	goto	l1140
 10941  00218A                     l1143:
 10942  00218A  B281               	btfsc	3969,1,c	;volatile
 10943  00218C  D7FE               	goto	l1143
 10944                           
 10945                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10946  00218E  0E01               	movlw	1
 10947  002190  EC98  F028         	call	_lcdInst
 10948  002194  0E68               	movlw	104
 10949  002196  0100               	movlb	0	; () banked
 10950  002198  6FAB               	movwf	??_sensorTest& (0+255),b
 10951  00219A  0EE4               	movlw	228
 10952  00219C                     u9137:
 10953  00219C  2EE8               	decfsz	wreg,f,c
 10954  00219E  D7FE               	bra	u9137
 10955  0021A0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10956  0021A2  D7FC               	bra	u9137
 10957  0021A4  F000               	nop	
 10958  0021A6  0E80               	movlw	128
 10959  0021A8  EC98  F028         	call	_lcdInst
 10960                           
 10961                           ;Test.c: 138: printf("TST: IR SNSR");
 10962  0021AC  0E35               	movlw	low STR_79
 10963  0021AE  0100               	movlb	0	; () banked
 10964  0021B0  6F8E               	movwf	printf@f& (0+255),b
 10965  0021B2  0EFF               	movlw	high STR_79
 10966  0021B4  0100               	movlb	0	; () banked
 10967  0021B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10968  0021B8  ECFF  F00A         	call	_printf	;wreg free
 10969                           
 10970                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10971  0021BC  0E05               	movlw	5
 10972  0021BE  0100               	movlb	0	; () banked
 10973  0021C0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10974  0021C2  0E0F               	movlw	15
 10975  0021C4  0100               	movlb	0	; () banked
 10976  0021C6  6FAB               	movwf	??_sensorTest& (0+255),b
 10977  0021C8  0EF1               	movlw	241
 10978  0021CA                     u9147:
 10979  0021CA  2EE8               	decfsz	wreg,f,c
 10980  0021CC  D7FE               	bra	u9147
 10981  0021CE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10982  0021D0  D7FC               	bra	u9147
 10983  0021D2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10984  0021D4  D7FA               	bra	u9147
 10985                           
 10986                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10987  0021D6  8A8B               	bsf	3979,5,c	;volatile
 10988                           
 10989                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10990  0021D8  D05C               	goto	l7361
 10991  0021DA                     l7343:
 10992                           
 10993                           ;Test.c: 143: readADC(0);
 10994  0021DA  0E00               	movlw	0
 10995  0021DC  EC8F  F027         	call	_readADC
 10996                           
 10997                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10998  0021E0  50C3               	movf	4035,w,c	;volatile
 10999  0021E2  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11000  0021E6  0100               	movlb	0	; () banked
 11001  0021E8  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11002  0021EA  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11003  0021EE  0100               	movlb	0	; () banked
 11004  0021F0  6BAB               	clrf	??_sensorTest& (0+255),b
 11005  0021F2  0100               	movlb	0	; () banked
 11006  0021F4  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11007  0021F6  0100               	movlb	0	; () banked
 11008  0021F8  6FAD               	movwf	sensorTest@res& (0+255),b
 11009  0021FA  0100               	movlb	0	; () banked
 11010  0021FC  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11011  0021FE  0100               	movlb	0	; () banked
 11012  002200  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 11016  002202  0100               	movlb	0	; () banked
 11017  002204  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11018  002206  D00A               	goto	u6020
 11019  002208  0E21               	movlw	33
 11020  00220A  0100               	movlb	0	; () banked
 11021  00220C  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11022  00220E  0E03               	movlw	3
 11023  002210  0100               	movlb	0	; () banked
 11024  002212  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11025  002214  A0D8               	btfss	status,0,c
 11026  002216  D002               	goto	u6020
 11027  002218  0E01               	movlw	1
 11028  00221A  D001               	goto	u6030
 11029  00221C                     u6020:
 11030  00221C  0E00               	movlw	0
 11031  00221E                     u6030:
 11032  00221E  0100               	movlb	0	; () banked
 11033  002220  6FDE               	movwf	_IR_signal& (0+255),b
 11034  002222  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 11035                           
 11036                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11037  002224  0E01               	movlw	1
 11038  002226  EC98  F028         	call	_lcdInst
 11039  00222A  0E68               	movlw	104
 11040  00222C  0100               	movlb	0	; () banked
 11041  00222E  6FAB               	movwf	??_sensorTest& (0+255),b
 11042  002230  0EE4               	movlw	228
 11043  002232                     u9157:
 11044  002232  2EE8               	decfsz	wreg,f,c
 11045  002234  D7FE               	bra	u9157
 11046  002236  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11047  002238  D7FC               	bra	u9157
 11048  00223A  F000               	nop	
 11049  00223C  0E80               	movlw	128
 11050  00223E  EC98  F028         	call	_lcdInst
 11051                           
 11052                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 11053  002242  0E5A               	movlw	low STR_80
 11054  002244  0100               	movlb	0	; () banked
 11055  002246  6F8E               	movwf	printf@f& (0+255),b
 11056  002248  0EFE               	movlw	high STR_80
 11057  00224A  0100               	movlb	0	; () banked
 11058  00224C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11059  00224E  C0DE  F090         	movff	_IR_signal,?_printf+2
 11060  002252  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 11061  002256  ECFF  F00A         	call	_printf	;wreg free
 11062                           
 11063                           ;Test.c: 149: lcdInst(0b11000000);;
 11064  00225A  0EC0               	movlw	192
 11065  00225C  EC98  F028         	call	_lcdInst
 11066                           
 11067                           ;Test.c: 150: printf("%d", res);
 11068  002260  0E16               	movlw	low (STR_27+14)
 11069  002262  0100               	movlb	0	; () banked
 11070  002264  6F8E               	movwf	printf@f& (0+255),b
 11071  002266  0EFE               	movlw	high (STR_27+14)
 11072  002268  0100               	movlb	0	; () banked
 11073  00226A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11074  00226C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11075  002270  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11076  002274  ECFF  F00A         	call	_printf	;wreg free
 11077                           
 11078                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11079  002278  0E05               	movlw	5
 11080  00227A  0100               	movlb	0	; () banked
 11081  00227C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11082  00227E  0E0F               	movlw	15
 11083  002280  0100               	movlb	0	; () banked
 11084  002282  6FAB               	movwf	??_sensorTest& (0+255),b
 11085  002284  0EF1               	movlw	241
 11086  002286                     u9167:
 11087  002286  2EE8               	decfsz	wreg,f,c
 11088  002288  D7FE               	bra	u9167
 11089  00228A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11090  00228C  D7FC               	bra	u9167
 11091  00228E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11092  002290  D7FA               	bra	u9167
 11093  002292                     l7361:
 11094  002292  A281               	btfss	3969,1,c	;volatile
 11095  002294  D7A2               	goto	l7343
 11096                           
 11097                           ;Test.c: 152: }
 11098                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11099  002296  9A8B               	bcf	3979,5,c	;volatile
 11100                           
 11101                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11102  002298  0E01               	movlw	1
 11103  00229A  EC98  F028         	call	_lcdInst
 11104  00229E  0E68               	movlw	104
 11105  0022A0  0100               	movlb	0	; () banked
 11106  0022A2  6FAB               	movwf	??_sensorTest& (0+255),b
 11107  0022A4  0EE4               	movlw	228
 11108  0022A6                     u9177:
 11109  0022A6  2EE8               	decfsz	wreg,f,c
 11110  0022A8  D7FE               	bra	u9177
 11111  0022AA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11112  0022AC  D7FC               	bra	u9177
 11113  0022AE  F000               	nop	
 11114  0022B0  0E80               	movlw	128
 11115  0022B2  EC98  F028         	call	_lcdInst
 11116                           
 11117                           ;Test.c: 162: printf("TST: MAGNETISM");
 11118  0022B6  0E87               	movlw	low STR_82
 11119  0022B8  0100               	movlb	0	; () banked
 11120  0022BA  6F8E               	movwf	printf@f& (0+255),b
 11121  0022BC  0EFE               	movlw	high STR_82
 11122  0022BE  0100               	movlb	0	; () banked
 11123  0022C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11124  0022C2  ECFF  F00A         	call	_printf	;wreg free
 11125                           
 11126                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11127  0022C6  0E05               	movlw	5
 11128  0022C8  0100               	movlb	0	; () banked
 11129  0022CA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11130  0022CC  0E0F               	movlw	15
 11131  0022CE  0100               	movlb	0	; () banked
 11132  0022D0  6FAB               	movwf	??_sensorTest& (0+255),b
 11133  0022D2  0EF1               	movlw	241
 11134  0022D4                     u9187:
 11135  0022D4  2EE8               	decfsz	wreg,f,c
 11136  0022D6  D7FE               	bra	u9187
 11137  0022D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11138  0022DA  D7FC               	bra	u9187
 11139  0022DC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11140  0022DE  D7FA               	bra	u9187
 11141                           
 11142                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11143  0022E0  D021               	goto	l7379
 11144  0022E2                     l7373:
 11145                           
 11146                           ;Test.c: 165: readMAG();
 11147  0022E2  EC52  F025         	call	_readMAG	;wreg free
 11148                           
 11149                           ;Test.c: 166: lcdInst(0b10000000);;
 11150  0022E6  0E80               	movlw	128
 11151  0022E8  EC98  F028         	call	_lcdInst
 11152                           
 11153                           ;Test.c: 167: lcdInst(0b11000000);;
 11154  0022EC  0EC0               	movlw	192
 11155  0022EE  EC98  F028         	call	_lcdInst
 11156                           
 11157                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11158  0022F2  0E2A               	movlw	low STR_83
 11159  0022F4  0100               	movlb	0	; () banked
 11160  0022F6  6F8E               	movwf	printf@f& (0+255),b
 11161  0022F8  0EFE               	movlw	high STR_83
 11162  0022FA  0100               	movlb	0	; () banked
 11163  0022FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11164  0022FE  C0E0  F090         	movff	_MAG_signal,?_printf+2
 11165  002302  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 11166  002306  ECFF  F00A         	call	_printf	;wreg free
 11167                           
 11168                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11169  00230A  0E05               	movlw	5
 11170  00230C  0100               	movlb	0	; () banked
 11171  00230E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11172  002310  0E0F               	movlw	15
 11173  002312  0100               	movlb	0	; () banked
 11174  002314  6FAB               	movwf	??_sensorTest& (0+255),b
 11175  002316  0EF1               	movlw	241
 11176  002318                     u9197:
 11177  002318  2EE8               	decfsz	wreg,f,c
 11178  00231A  D7FE               	bra	u9197
 11179  00231C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11180  00231E  D7FC               	bra	u9197
 11181  002320  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11182  002322  D7FA               	bra	u9197
 11183  002324                     l7379:
 11184  002324  A281               	btfss	3969,1,c	;volatile
 11185  002326  D7DD               	goto	l7373
 11186                           
 11187                           ;Test.c: 170: }
 11188                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11189  002328  0E01               	movlw	1
 11190  00232A  EC98  F028         	call	_lcdInst
 11191  00232E  0E68               	movlw	104
 11192  002330  0100               	movlb	0	; () banked
 11193  002332  6FAB               	movwf	??_sensorTest& (0+255),b
 11194  002334  0EE4               	movlw	228
 11195  002336                     u9207:
 11196  002336  2EE8               	decfsz	wreg,f,c
 11197  002338  D7FE               	bra	u9207
 11198  00233A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11199  00233C  D7FC               	bra	u9207
 11200  00233E  F000               	nop	
 11201  002340  0E80               	movlw	128
 11202  002342  EC98  F028         	call	_lcdInst
 11203                           
 11204                           ;Test.c: 176: printf("TST: COND");
 11205  002346  0E87               	movlw	low STR_84
 11206  002348  0100               	movlb	0	; () banked
 11207  00234A  6F8E               	movwf	printf@f& (0+255),b
 11208  00234C  0EFF               	movlw	high STR_84
 11209  00234E  0100               	movlb	0	; () banked
 11210  002350  6F8F               	movwf	(printf@f+1)& (0+255),b
 11211  002352  ECFF  F00A         	call	_printf	;wreg free
 11212                           
 11213                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11214  002356  0E05               	movlw	5
 11215  002358  0100               	movlb	0	; () banked
 11216  00235A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11217  00235C  0E0F               	movlw	15
 11218  00235E  0100               	movlb	0	; () banked
 11219  002360  6FAB               	movwf	??_sensorTest& (0+255),b
 11220  002362  0EF1               	movlw	241
 11221  002364                     u9217:
 11222  002364  2EE8               	decfsz	wreg,f,c
 11223  002366  D7FE               	bra	u9217
 11224  002368  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11225  00236A  D7FC               	bra	u9217
 11226  00236C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11227  00236E  D7FA               	bra	u9217
 11228  002370                     l7391:
 11229                           
 11230                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11231  002370  0E01               	movlw	1
 11232  002372  EC98  F028         	call	_lcdInst
 11233  002376  0E68               	movlw	104
 11234  002378  0100               	movlb	0	; () banked
 11235  00237A  6FAB               	movwf	??_sensorTest& (0+255),b
 11236  00237C  0EE4               	movlw	228
 11237  00237E                     u9227:
 11238  00237E  2EE8               	decfsz	wreg,f,c
 11239  002380  D7FE               	bra	u9227
 11240  002382  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11241  002384  D7FC               	bra	u9227
 11242  002386  F000               	nop	
 11243  002388  0E80               	movlw	128
 11244  00238A  EC98  F028         	call	_lcdInst
 11245                           
 11246                           ;Test.c: 180: printf("TST: COND");
 11247  00238E  0E87               	movlw	low STR_84
 11248  002390  0100               	movlb	0	; () banked
 11249  002392  6F8E               	movwf	printf@f& (0+255),b
 11250  002394  0EFF               	movlw	high STR_84
 11251  002396  0100               	movlb	0	; () banked
 11252  002398  6F8F               	movwf	(printf@f+1)& (0+255),b
 11253  00239A  ECFF  F00A         	call	_printf	;wreg free
 11254                           
 11255                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11256  00239E  D01B               	goto	l7403
 11257  0023A0                     l7399:
 11258                           
 11259                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11260  0023A0  0E80               	movlw	128
 11261  0023A2  EC98  F028         	call	_lcdInst
 11262  0023A6  0EC0               	movlw	192
 11263  0023A8  EC98  F028         	call	_lcdInst
 11264                           
 11265                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11266  0023AC  0EA5               	movlw	low STR_86
 11267  0023AE  0100               	movlb	0	; () banked
 11268  0023B0  6F8E               	movwf	printf@f& (0+255),b
 11269  0023B2  0EFF               	movlw	high STR_86
 11270  0023B4  0100               	movlb	0	; () banked
 11271  0023B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11272  0023B8  A480               	btfss	3968,2,c	;volatile
 11273  0023BA  D004               	goto	u6060
 11274  0023BC  0100               	movlb	0	; () banked
 11275  0023BE  6BAB               	clrf	??_sensorTest& (0+255),b
 11276  0023C0  2BAB               	incf	??_sensorTest& (0+255),f,b
 11277  0023C2  D002               	goto	u6068
 11278  0023C4                     u6060:
 11279  0023C4  0100               	movlb	0	; () banked
 11280  0023C6  6BAB               	clrf	??_sensorTest& (0+255),b
 11281  0023C8                     u6068:
 11282  0023C8  0100               	movlb	0	; () banked
 11283  0023CA  51AB               	movf	??_sensorTest& (0+255),w,b
 11284  0023CC  0100               	movlb	0	; () banked
 11285  0023CE  6F90               	movwf	(?_printf+2)& (0+255),b
 11286  0023D0  6B91               	clrf	(?_printf+3)& (0+255),b
 11287  0023D2  ECFF  F00A         	call	_printf	;wreg free
 11288  0023D6                     l7403:
 11289  0023D6  A281               	btfss	3969,1,c	;volatile
 11290  0023D8  D7E3               	goto	l7399
 11291                           
 11292                           ;Test.c: 187: }
 11293                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11294  0023DA  3881               	swapf	3969,w,c	;volatile
 11295  0023DC  0B0F               	andlw	15
 11296  0023DE  0A0F               	xorlw	15
 11297  0023E0  B4D8               	btfsc	status,2,c
 11298  0023E2  0012               	return	
 11299                           
 11300                           ;Test.c: 191: else{
 11301                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11302                           
 11303                           ;Test.c: 190: }
 11304                           
 11305                           ;Test.c: 189: break;
 11306  0023E4  8689               	bsf	3977,3,c	;volatile
 11307                           
 11308                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11309  0023E6  D01B               	goto	l7415
 11310  0023E8                     l7411:
 11311                           
 11312                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11313  0023E8  0E80               	movlw	128
 11314  0023EA  EC98  F028         	call	_lcdInst
 11315  0023EE  0EC0               	movlw	192
 11316  0023F0  EC98  F028         	call	_lcdInst
 11317                           
 11318                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11319  0023F4  0EA5               	movlw	low STR_86
 11320  0023F6  0100               	movlb	0	; () banked
 11321  0023F8  6F8E               	movwf	printf@f& (0+255),b
 11322  0023FA  0EFF               	movlw	high STR_86
 11323  0023FC  0100               	movlb	0	; () banked
 11324  0023FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11325  002400  A480               	btfss	3968,2,c	;volatile
 11326  002402  D004               	goto	u6090
 11327  002404  0100               	movlb	0	; () banked
 11328  002406  6BAB               	clrf	??_sensorTest& (0+255),b
 11329  002408  2BAB               	incf	??_sensorTest& (0+255),f,b
 11330  00240A  D002               	goto	u6098
 11331  00240C                     u6090:
 11332  00240C  0100               	movlb	0	; () banked
 11333  00240E  6BAB               	clrf	??_sensorTest& (0+255),b
 11334  002410                     u6098:
 11335  002410  0100               	movlb	0	; () banked
 11336  002412  51AB               	movf	??_sensorTest& (0+255),w,b
 11337  002414  0100               	movlb	0	; () banked
 11338  002416  6F90               	movwf	(?_printf+2)& (0+255),b
 11339  002418  6B91               	clrf	(?_printf+3)& (0+255),b
 11340  00241A  ECFF  F00A         	call	_printf	;wreg free
 11341  00241E                     l7415:
 11342  00241E  B281               	btfsc	3969,1,c	;volatile
 11343  002420  D7E3               	goto	l7411
 11344                           
 11345                           ;Test.c: 197: }
 11346                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11347  002422  9689               	bcf	3977,3,c	;volatile
 11348  002424  D7A5               	goto	l7391
 11349  002426                     __end_of_sensorTest:
 11350                           	opt stack 0
 11351                           tblptru	equ	0xFF8
 11352                           tblptrh	equ	0xFF7
 11353                           tblptrl	equ	0xFF6
 11354                           tablat	equ	0xFF5
 11355                           prodh	equ	0xFF4
 11356                           prodl	equ	0xFF3
 11357                           intcon	equ	0xFF2
 11358                           intcon2	equ	0xFF1
 11359                           intcon3	equ	0xFF0
 11360                           postinc0	equ	0xFEE
 11361                           wreg	equ	0xFE8
 11362                           postdec1	equ	0xFE5
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371 ;; *************** function _readMAG *****************
 11372 ;; Defined at:
 11373 ;;		line 29 in file "ADCFunctionality.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;		None
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  res             2    4[BANK0 ] int 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  1    wreg      void 
 11380 ;; Registers used:
 11381 ;;		wreg, status,2, status,0, cstack
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        4 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    8
 11394 ;; This function calls:
 11395 ;;		_readADC
 11396 ;; This function is called by:
 11397 ;;		_getMAG
 11398 ;;		_sensorTest
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           	psect	text38
 11403  004AA4                     __ptext38:
 11404                           	opt stack 0
 11405  004AA4                     _readMAG:
 11406                           	opt stack 19
 11407                           
 11408                           ;ADCFunctionality.c: 30: readADC(1);
 11409                           
 11410                           ;incstack = 0
 11411  004AA4  0E01               	movlw	1
 11412  004AA6  EC8F  F027         	call	_readADC
 11413                           
 11414                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11415  004AAA  50C3               	movf	4035,w,c	;volatile
 11416  004AAC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11417  004AB0  0100               	movlb	0	; () banked
 11418  004AB2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11419  004AB4  C082  F083         	movff	??_readMAG,??_readMAG+1
 11420  004AB8  0100               	movlb	0	; () banked
 11421  004ABA  6B82               	clrf	??_readMAG& (0+255),b
 11422  004ABC  0100               	movlb	0	; () banked
 11423  004ABE  1182               	iorwf	??_readMAG& (0+255),w,b
 11424  004AC0  0100               	movlb	0	; () banked
 11425  004AC2  6F84               	movwf	readMAG@res& (0+255),b
 11426  004AC4  0100               	movlb	0	; () banked
 11427  004AC6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11428  004AC8  0100               	movlb	0	; () banked
 11429  004ACA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11433  004ACC  0100               	movlb	0	; () banked
 11434  004ACE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11435  004AD0  D008               	goto	u4481
 11436  004AD2  0100               	movlb	0	; () banked
 11437  004AD4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11438  004AD6  E107               	bnz	u4480
 11439  004AD8  0E96               	movlw	150
 11440  004ADA  0100               	movlb	0	; () banked
 11441  004ADC  5D84               	subwf	readMAG@res& (0+255),w,b
 11442  004ADE  B0D8               	btfsc	status,0,c
 11443  004AE0  D002               	goto	u4480
 11444  004AE2                     u4481:
 11445  004AE2  0E01               	movlw	1
 11446  004AE4  D001               	goto	u4490
 11447  004AE6                     u4480:
 11448  004AE6  0E00               	movlw	0
 11449  004AE8                     u4490:
 11450  004AE8  0100               	movlb	0	; () banked
 11451  004AEA  6FE0               	movwf	_MAG_signal& (0+255),b
 11452  004AEC  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11453                           
 11454                           ; BSR set to: 0
 11455  004AEE  0012               	return		;funcret
 11456  004AF0                     __end_of_readMAG:
 11457                           	opt stack 0
 11458                           tblptru	equ	0xFF8
 11459                           tblptrh	equ	0xFF7
 11460                           tblptrl	equ	0xFF6
 11461                           tablat	equ	0xFF5
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           intcon	equ	0xFF2
 11465                           intcon2	equ	0xFF1
 11466                           intcon3	equ	0xFF0
 11467                           postinc0	equ	0xFEE
 11468                           wreg	equ	0xFE8
 11469                           postdec1	equ	0xFE5
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           fsr2h	equ	0xFDA
 11475                           fsr2l	equ	0xFD9
 11476                           status	equ	0xFD8
 11477                           
 11478 ;; *************** function _algorithmTest *****************
 11479 ;; Defined at:
 11480 ;;		line 80 in file "Test.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;Total ram usage:        2 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:   10
 11501 ;; This function calls:
 11502 ;;		_lcdInst
 11503 ;;		_printf
 11504 ;; This function is called by:
 11505 ;;		_Test
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text39
 11510  003E5C                     __ptext39:
 11511                           	opt stack 0
 11512  003E5C                     _algorithmTest:
 11513                           	opt stack 19
 11514                           
 11515                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;incstack = 0
 11519  003E5C  0E01               	movlw	1
 11520  003E5E  EC98  F028         	call	_lcdInst
 11521  003E62  0E68               	movlw	104
 11522  003E64  0100               	movlb	0	; () banked
 11523  003E66  6FAB               	movwf	??_algorithmTest& (0+255),b
 11524  003E68  0EE4               	movlw	228
 11525  003E6A                     u9237:
 11526  003E6A  2EE8               	decfsz	wreg,f,c
 11527  003E6C  D7FE               	bra	u9237
 11528  003E6E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11529  003E70  D7FC               	bra	u9237
 11530  003E72  F000               	nop	
 11531  003E74  0E80               	movlw	128
 11532  003E76  EC98  F028         	call	_lcdInst
 11533                           
 11534                           ;Test.c: 83: printf("ALGORITHM TEST");
 11535  003E7A  0ED2               	movlw	low STR_70
 11536  003E7C  0100               	movlb	0	; () banked
 11537  003E7E  6F8E               	movwf	printf@f& (0+255),b
 11538  003E80  0EFE               	movlw	high STR_70
 11539  003E82  0100               	movlb	0	; () banked
 11540  003E84  6F8F               	movwf	(printf@f+1)& (0+255),b
 11541  003E86  ECFF  F00A         	call	_printf	;wreg free
 11542                           
 11543                           ;Test.c: 84: lcdInst(0b11000000);;
 11544  003E8A  0EC0               	movlw	192
 11545  003E8C  EC98  F028         	call	_lcdInst
 11546                           
 11547                           ;Test.c: 85: printf("PUSH TO START");
 11548  003E90  0E0B               	movlw	low STR_71
 11549  003E92  0100               	movlb	0	; () banked
 11550  003E94  6F8E               	movwf	printf@f& (0+255),b
 11551  003E96  0EFF               	movlw	high STR_71
 11552  003E98  0100               	movlb	0	; () banked
 11553  003E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11554  003E9C  ECFF  F00A         	call	_printf	;wreg free
 11555                           
 11556                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11557  003EA0  0E05               	movlw	5
 11558  003EA2  0100               	movlb	0	; () banked
 11559  003EA4  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11560  003EA6  0E0F               	movlw	15
 11561  003EA8  0100               	movlb	0	; () banked
 11562  003EAA  6FAB               	movwf	??_algorithmTest& (0+255),b
 11563  003EAC  0EF1               	movlw	241
 11564  003EAE                     u9247:
 11565  003EAE  2EE8               	decfsz	wreg,f,c
 11566  003EB0  D7FE               	bra	u9247
 11567  003EB2  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11568  003EB4  D7FC               	bra	u9247
 11569  003EB6  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11570  003EB8  D7FA               	bra	u9247
 11571  003EBA                     l1131:
 11572  003EBA  A281               	btfss	3969,1,c	;volatile
 11573  003EBC  D7FE               	goto	l1131
 11574  003EBE                     l1134:
 11575  003EBE  B281               	btfsc	3969,1,c	;volatile
 11576  003EC0  D7FE               	goto	l1134
 11577                           
 11578                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11579  003EC2  0E01               	movlw	1
 11580  003EC4  EC98  F028         	call	_lcdInst
 11581  003EC8  0E68               	movlw	104
 11582  003ECA  0100               	movlb	0	; () banked
 11583  003ECC  6FAB               	movwf	??_algorithmTest& (0+255),b
 11584  003ECE  0EE4               	movlw	228
 11585  003ED0                     u9257:
 11586  003ED0  2EE8               	decfsz	wreg,f,c
 11587  003ED2  D7FE               	bra	u9257
 11588  003ED4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11589  003ED6  D7FC               	bra	u9257
 11590  003ED8  F000               	nop	
 11591  003EDA  0E80               	movlw	128
 11592  003EDC  EC98  F028         	call	_lcdInst
 11593                           
 11594                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11595  003EE0  0E5F               	movlw	low STR_72
 11596  003EE2  0100               	movlb	0	; () banked
 11597  003EE4  6F8E               	movwf	printf@f& (0+255),b
 11598  003EE6  0EFC               	movlw	high STR_72
 11599  003EE8  0100               	movlb	0	; () banked
 11600  003EEA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11601  003EEC  ECFF  F00A         	call	_printf	;wreg free
 11602                           
 11603                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11604  003EF0  0EEF               	movlw	low STR_73
 11605  003EF2  0100               	movlb	0	; () banked
 11606  003EF4  6F8E               	movwf	printf@f& (0+255),b
 11607  003EF6  0EFE               	movlw	high STR_73
 11608  003EF8  0100               	movlb	0	; () banked
 11609  003EFA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11610  003EFC  ECFF  F00A         	call	_printf	;wreg free
 11611                           
 11612                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11613  003F00  0E4F               	movlw	low STR_74
 11614  003F02  0100               	movlb	0	; () banked
 11615  003F04  6F8E               	movwf	printf@f& (0+255),b
 11616  003F06  0EFF               	movlw	high STR_74
 11617  003F08  0100               	movlb	0	; () banked
 11618  003F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11619  003F0C  ECFF  F00A         	call	_printf	;wreg free
 11620                           
 11621                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11622  003F10  0EB4               	movlw	low STR_75
 11623  003F12  0100               	movlb	0	; () banked
 11624  003F14  6F8E               	movwf	printf@f& (0+255),b
 11625  003F16  0EFE               	movlw	high STR_75
 11626  003F18  0100               	movlb	0	; () banked
 11627  003F1A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11628  003F1C  ECFF  F00A         	call	_printf	;wreg free
 11629                           
 11630                           ;Test.c: 121: printf("ALG5: NO CANS");
 11631  003F20  0EFD               	movlw	low STR_76
 11632  003F22  0100               	movlb	0	; () banked
 11633  003F24  6F8E               	movwf	printf@f& (0+255),b
 11634  003F26  0EFE               	movlw	high STR_76
 11635  003F28  0100               	movlb	0	; () banked
 11636  003F2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11637  003F2C  ECFF  F00A         	call	_printf	;wreg free
 11638  003F30  0012               	return		;funcret
 11639  003F32                     __end_of_algorithmTest:
 11640                           	opt stack 0
 11641                           tblptru	equ	0xFF8
 11642                           tblptrh	equ	0xFF7
 11643                           tblptrl	equ	0xFF6
 11644                           tablat	equ	0xFF5
 11645                           prodh	equ	0xFF4
 11646                           prodl	equ	0xFF3
 11647                           intcon	equ	0xFF2
 11648                           intcon2	equ	0xFF1
 11649                           intcon3	equ	0xFF0
 11650                           postinc0	equ	0xFEE
 11651                           wreg	equ	0xFE8
 11652                           postdec1	equ	0xFE5
 11653                           fsr1l	equ	0xFE1
 11654                           indf2	equ	0xFDF
 11655                           postinc2	equ	0xFDE
 11656                           postdec2	equ	0xFDD
 11657                           fsr2h	equ	0xFDA
 11658                           fsr2l	equ	0xFD9
 11659                           status	equ	0xFD8
 11660                           
 11661 ;; *************** function _actuatorTest *****************
 11662 ;; Defined at:
 11663 ;;		line 203 in file "Test.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;		None
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  i               1   45[BANK0 ] unsigned char 
 11668 ;;  i               1   67[BANK0 ] unsigned char 
 11669 ;;  i               1   66[BANK0 ] unsigned char 
 11670 ;;  i               1   65[BANK0 ] unsigned char 
 11671 ;;  i               1   64[BANK0 ] unsigned char 
 11672 ;;  i               1   63[BANK0 ] unsigned char 
 11673 ;;  i               1   62[BANK0 ] unsigned char 
 11674 ;;  i               1   61[BANK0 ] unsigned char 
 11675 ;;  i               1   60[BANK0 ] unsigned char 
 11676 ;;  i               1   59[BANK0 ] unsigned char 
 11677 ;;  i               1   58[BANK0 ] unsigned char 
 11678 ;;  i               1   57[BANK0 ] unsigned char 
 11679 ;;  i               1   56[BANK0 ] unsigned char 
 11680 ;;  i               1   55[BANK0 ] unsigned char 
 11681 ;;  i               1   54[BANK0 ] unsigned char 
 11682 ;;  i               1   53[BANK0 ] unsigned char 
 11683 ;;  i               1   52[BANK0 ] unsigned char 
 11684 ;;  i               1   51[BANK0 ] unsigned char 
 11685 ;;  i               1   50[BANK0 ] unsigned char 
 11686 ;;  i               1   49[BANK0 ] unsigned char 
 11687 ;;  i               1   48[BANK0 ] unsigned char 
 11688 ;;  i               1   47[BANK0 ] unsigned char 
 11689 ;;  i               1   46[BANK0 ] unsigned char 
 11690 ;;  i               2   68[BANK0 ] int 
 11691 ;; Return value:  Size  Location     Type
 11692 ;;                  1    wreg      void 
 11693 ;; Registers used:
 11694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11695 ;; Tracked objects:
 11696 ;;		On entry : 0/0
 11697 ;;		On exit  : 0/0
 11698 ;;		Unchanged: 0/0
 11699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;Total ram usage:       27 bytes
 11705 ;; Hardware stack levels used:    1
 11706 ;; Hardware stack levels required when called:   10
 11707 ;; This function calls:
 11708 ;;		_lcdInst
 11709 ;;		_printf
 11710 ;;		_updateServoPosition
 11711 ;; This function is called by:
 11712 ;;		_Test
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text40
 11717  000012                     __ptext40:
 11718                           	opt stack 0
 11719  000012                     _actuatorTest:
 11720                           	opt stack 19
 11721                           
 11722                           ;Test.c: 205: int i = 0;
 11723                           
 11724                           ;incstack = 0
 11725  000012  0E00               	movlw	0
 11726  000014  0100               	movlb	0	; () banked
 11727  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11728  000018  0E00               	movlw	0
 11729  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11733  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11737  00001E  0E01               	movlw	1
 11738  000020  EC98  F028         	call	_lcdInst
 11739  000024  0E68               	movlw	104
 11740  000026  0100               	movlb	0	; () banked
 11741  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11742  00002A  0EE4               	movlw	228
 11743  00002C                     u9267:
 11744  00002C  2EE8               	decfsz	wreg,f,c
 11745  00002E  D7FE               	bra	u9267
 11746  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11747  000032  D7FC               	bra	u9267
 11748  000034  F000               	nop	
 11749  000036  0E80               	movlw	128
 11750  000038  EC98  F028         	call	_lcdInst
 11751                           
 11752                           ;Test.c: 209: printf("ACTUATORS");
 11753  00003C  0E91               	movlw	low STR_88
 11754  00003E  0100               	movlb	0	; () banked
 11755  000040  6F8E               	movwf	printf@f& (0+255),b
 11756  000042  0EFF               	movlw	high STR_88
 11757  000044  0100               	movlb	0	; () banked
 11758  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11759  000048  ECFF  F00A         	call	_printf	;wreg free
 11760                           
 11761                           ;Test.c: 210: lcdInst(0b11000000);;
 11762  00004C  0EC0               	movlw	192
 11763  00004E  EC98  F028         	call	_lcdInst
 11764                           
 11765                           ;Test.c: 211: printf("PUSH TO START");
 11766  000052  0E0B               	movlw	low STR_71
 11767  000054  0100               	movlb	0	; () banked
 11768  000056  6F8E               	movwf	printf@f& (0+255),b
 11769  000058  0EFF               	movlw	high STR_71
 11770  00005A  0100               	movlb	0	; () banked
 11771  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11772  00005E  ECFF  F00A         	call	_printf	;wreg free
 11773                           
 11774                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11775  000062  0E05               	movlw	5
 11776  000064  0100               	movlb	0	; () banked
 11777  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11778  000068  0E0F               	movlw	15
 11779  00006A  0100               	movlb	0	; () banked
 11780  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11781  00006E  0EF1               	movlw	241
 11782  000070                     u9277:
 11783  000070  2EE8               	decfsz	wreg,f,c
 11784  000072  D7FE               	bra	u9277
 11785  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11786  000076  D7FC               	bra	u9277
 11787  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11788  00007A  D7FA               	bra	u9277
 11789  00007C                     l1166:
 11790  00007C  A281               	btfss	3969,1,c	;volatile
 11791  00007E  D7FE               	goto	l1166
 11792  000080                     l1169:
 11793  000080  B281               	btfsc	3969,1,c	;volatile
 11794  000082  D7FE               	goto	l1169
 11795                           
 11796                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11797  000084  0E01               	movlw	1
 11798  000086  EC98  F028         	call	_lcdInst
 11799  00008A  0E68               	movlw	104
 11800  00008C  0100               	movlb	0	; () banked
 11801  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11802  000090  0EE4               	movlw	228
 11803  000092                     u9287:
 11804  000092  2EE8               	decfsz	wreg,f,c
 11805  000094  D7FE               	bra	u9287
 11806  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11807  000098  D7FC               	bra	u9287
 11808  00009A  F000               	nop	
 11809  00009C  0E80               	movlw	128
 11810  00009E  EC98  F028         	call	_lcdInst
 11811                           
 11812                           ;Test.c: 220: printf("TST: DC MOTORS");
 11813  0000A2  0EC3               	movlw	low STR_90
 11814  0000A4  0100               	movlb	0	; () banked
 11815  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11816  0000A8  0EFE               	movlw	high STR_90
 11817  0000AA  0100               	movlb	0	; () banked
 11818  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11819  0000AE  ECFF  F00A         	call	_printf	;wreg free
 11820                           
 11821                           ;Test.c: 221: lcdInst(0b11000000);;
 11822  0000B2  0EC0               	movlw	192
 11823  0000B4  EC98  F028         	call	_lcdInst
 11824                           
 11825                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11826  0000B8  0EE1               	movlw	low STR_91
 11827  0000BA  0100               	movlb	0	; () banked
 11828  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11829  0000BE  0EFE               	movlw	high STR_91
 11830  0000C0  0100               	movlb	0	; () banked
 11831  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11832  0000C4  ECFF  F00A         	call	_printf	;wreg free
 11833                           
 11834                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11835  0000C8  8A89               	bsf	3977,5,c	;volatile
 11836                           
 11837                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11838  0000CA  0E00               	movlw	0
 11839  0000CC  0100               	movlb	0	; () banked
 11840  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11841  0000D0  0E00               	movlw	0
 11842  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11843                           
 11844                           ; BSR set to: 0
 11845  0000D4  0100               	movlb	0	; () banked
 11846  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11847  0000D8  D008               	goto	l7455
 11848  0000DA  0100               	movlb	0	; () banked
 11849  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11850  0000DE  E123               	bnz	l1173
 11851  0000E0  0E05               	movlw	5
 11852  0000E2  0100               	movlb	0	; () banked
 11853  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11854  0000E6  B0D8               	btfsc	status,0,c
 11855  0000E8  D01E               	goto	l1173
 11856  0000EA                     l7455:
 11857                           
 11858                           ; BSR set to: 0
 11859  0000EA  0E00               	movlw	0
 11860  0000EC  0100               	movlb	0	; () banked
 11861  0000EE  6FAD               	movwf	actuatorTest@i_1654& (0+255),b
 11862  0000F0                     l7457:
 11863                           
 11864                           ; BSR set to: 0
 11865  0000F0  0E63               	movlw	99
 11866  0000F2  0100               	movlb	0	; () banked
 11867  0000F4  65AD               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11868  0000F6  D001               	goto	l7461
 11869  0000F8  D00C               	goto	l7465
 11870  0000FA                     l7461:
 11871                           
 11872                           ; BSR set to: 0
 11873  0000FA  0E68               	movlw	104
 11874  0000FC  0100               	movlb	0	; () banked
 11875  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11876  000100  0EE4               	movlw	228
 11877  000102                     u9297:
 11878  000102  2EE8               	decfsz	wreg,f,c
 11879  000104  D7FE               	bra	u9297
 11880  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11881  000108  D7FC               	bra	u9297
 11882  00010A  F000               	nop	
 11883  00010C  0100               	movlb	0	; () banked
 11884  00010E  2BAD               	incf	actuatorTest@i_1654& (0+255),f,b
 11885  000110  D7EF               	goto	l7457
 11886  000112                     l7465:
 11887                           
 11888                           ; BSR set to: 0
 11889  000112  0100               	movlb	0	; () banked
 11890  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11891  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11892                           
 11893                           ; BSR set to: 0
 11894  000118  0100               	movlb	0	; () banked
 11895  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11896  00011C  D7E6               	goto	l7455
 11897  00011E  0100               	movlb	0	; () banked
 11898  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11899  000122  E101               	bnz	u6160
 11900  000124  D7DD               	goto	L10
 11901  000126                     u6160:
 11902  000126                     l1173:
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11906  000126  9A89               	bcf	3977,5,c	;volatile
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11910  000128  0E01               	movlw	1
 11911  00012A  EC98  F028         	call	_lcdInst
 11912  00012E  0E68               	movlw	104
 11913  000130  0100               	movlb	0	; () banked
 11914  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11915  000134  0EE4               	movlw	228
 11916  000136                     u9307:
 11917  000136  2EE8               	decfsz	wreg,f,c
 11918  000138  D7FE               	bra	u9307
 11919  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11920  00013C  D7FC               	bra	u9307
 11921  00013E  F000               	nop	
 11922  000140  0E80               	movlw	128
 11923  000142  EC98  F028         	call	_lcdInst
 11924                           
 11925                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11926  000146  0E70               	movlw	low STR_92
 11927  000148  0100               	movlb	0	; () banked
 11928  00014A  6F8E               	movwf	printf@f& (0+255),b
 11929  00014C  0EFC               	movlw	high STR_92
 11930  00014E  0100               	movlb	0	; () banked
 11931  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11932  000152  ECFF  F00A         	call	_printf	;wreg free
 11933                           
 11934                           ;Test.c: 233: lcdInst(0b11000000);;
 11935  000156  0EC0               	movlw	192
 11936  000158  EC98  F028         	call	_lcdInst
 11937                           
 11938                           ;Test.c: 234: printf("PIN RA3...");
 11939  00015C  0E5B               	movlw	low STR_93
 11940  00015E  0100               	movlb	0	; () banked
 11941  000160  6F8E               	movwf	printf@f& (0+255),b
 11942  000162  0EFF               	movlw	high STR_93
 11943  000164  0100               	movlb	0	; () banked
 11944  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11945  000168  ECFF  F00A         	call	_printf	;wreg free
 11946                           
 11947                           ;Test.c: 235: for(i=0;i<5;i++){
 11948  00016C  0E00               	movlw	0
 11949  00016E  0100               	movlb	0	; () banked
 11950  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11951  000172  0E00               	movlw	0
 11952  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11953                           
 11954                           ; BSR set to: 0
 11955  000176  0100               	movlb	0	; () banked
 11956  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11957  00017A  D008               	goto	l1176
 11958  00017C  0100               	movlb	0	; () banked
 11959  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11960  000180  E12C               	bnz	l1177
 11961  000182  0E05               	movlw	5
 11962  000184  0100               	movlb	0	; () banked
 11963  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11964  000188  B0D8               	btfsc	status,0,c
 11965  00018A  D027               	goto	l1177
 11966  00018C                     l1176:
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11970  00018C  8689               	bsf	3977,3,c	;volatile
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11974  00018E  0E0D               	movlw	13
 11975  000190  0100               	movlb	0	; () banked
 11976  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11977  000194  0E2D               	movlw	45
 11978  000196  0100               	movlb	0	; () banked
 11979  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11980  00019A  0ED7               	movlw	215
 11981  00019C                     u9317:
 11982  00019C  2EE8               	decfsz	wreg,f,c
 11983  00019E  D7FE               	bra	u9317
 11984  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11985  0001A2  D7FC               	bra	u9317
 11986  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11987  0001A6  D7FA               	bra	u9317
 11988  0001A8  D000               	nop2	
 11989                           
 11990                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11991  0001AA  9689               	bcf	3977,3,c	;volatile
 11992                           
 11993                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11994  0001AC  0E1D               	movlw	29
 11995  0001AE  0100               	movlb	0	; () banked
 11996  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11997  0001B2  0E69               	movlw	105
 11998  0001B4  0100               	movlb	0	; () banked
 11999  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12000  0001B8  0EA5               	movlw	165
 12001  0001BA                     u9327:
 12002  0001BA  2EE8               	decfsz	wreg,f,c
 12003  0001BC  D7FE               	bra	u9327
 12004  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12005  0001C0  D7FC               	bra	u9327
 12006  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12007  0001C4  D7FA               	bra	u9327
 12008  0001C6  0100               	movlb	0	; () banked
 12009  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12010  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12011  0001CC  0100               	movlb	0	; () banked
 12012  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12013  0001D0  D7DD               	goto	l1176
 12014  0001D2  0100               	movlb	0	; () banked
 12015  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12016  0001D6  E101               	bnz	u6180
 12017  0001D8  D7D4               	goto	L11
 12018  0001DA                     u6180:
 12019  0001DA                     l1177:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;Test.c: 240: }
 12023                           ;Test.c: 241: LATAbits.LATA3 = !1;
 12024  0001DA  9689               	bcf	3977,3,c	;volatile
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12028  0001DC  0E01               	movlw	1
 12029  0001DE  EC98  F028         	call	_lcdInst
 12030  0001E2  0E68               	movlw	104
 12031  0001E4  0100               	movlb	0	; () banked
 12032  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12033  0001E8  0EE4               	movlw	228
 12034  0001EA                     u9337:
 12035  0001EA  2EE8               	decfsz	wreg,f,c
 12036  0001EC  D7FE               	bra	u9337
 12037  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12038  0001F0  D7FC               	bra	u9337
 12039  0001F2  F000               	nop	
 12040  0001F4  0E80               	movlw	128
 12041  0001F6  EC98  F028         	call	_lcdInst
 12042                           
 12043                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 12044  0001FA  0E81               	movlw	low STR_94
 12045  0001FC  0100               	movlb	0	; () banked
 12046  0001FE  6F8E               	movwf	printf@f& (0+255),b
 12047  000200  0EFC               	movlw	high STR_94
 12048  000202  0100               	movlb	0	; () banked
 12049  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 12050  000206  ECFF  F00A         	call	_printf	;wreg free
 12051                           
 12052                           ;Test.c: 249: lcdInst(0b11000000);;
 12053  00020A  0EC0               	movlw	192
 12054  00020C  EC98  F028         	call	_lcdInst
 12055                           
 12056                           ;Test.c: 250: printf("PIN RA4...");
 12057  000210  0E66               	movlw	low STR_95
 12058  000212  0100               	movlb	0	; () banked
 12059  000214  6F8E               	movwf	printf@f& (0+255),b
 12060  000216  0EFF               	movlw	high STR_95
 12061  000218  0100               	movlb	0	; () banked
 12062  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12063  00021C  ECFF  F00A         	call	_printf	;wreg free
 12064                           
 12065                           ;Test.c: 251: for(i=0;i<5;i++){
 12066  000220  0E00               	movlw	0
 12067  000222  0100               	movlb	0	; () banked
 12068  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12069  000226  0E00               	movlw	0
 12070  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12071                           
 12072                           ; BSR set to: 0
 12073  00022A  0100               	movlb	0	; () banked
 12074  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12075  00022E  D008               	goto	l1178
 12076  000230  0100               	movlb	0	; () banked
 12077  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12078  000234  E12C               	bnz	l1179
 12079  000236  0E05               	movlw	5
 12080  000238  0100               	movlb	0	; () banked
 12081  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12082  00023C  B0D8               	btfsc	status,0,c
 12083  00023E  D027               	goto	l1179
 12084  000240                     l1178:
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12088  000240  8889               	bsf	3977,4,c	;volatile
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12092  000242  0E0D               	movlw	13
 12093  000244  0100               	movlb	0	; () banked
 12094  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12095  000248  0E2D               	movlw	45
 12096  00024A  0100               	movlb	0	; () banked
 12097  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12098  00024E  0ED7               	movlw	215
 12099  000250                     u9347:
 12100  000250  2EE8               	decfsz	wreg,f,c
 12101  000252  D7FE               	bra	u9347
 12102  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12103  000256  D7FC               	bra	u9347
 12104  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12105  00025A  D7FA               	bra	u9347
 12106  00025C  D000               	nop2	
 12107                           
 12108                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12109  00025E  9889               	bcf	3977,4,c	;volatile
 12110                           
 12111                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12112  000260  0E1D               	movlw	29
 12113  000262  0100               	movlb	0	; () banked
 12114  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12115  000266  0E69               	movlw	105
 12116  000268  0100               	movlb	0	; () banked
 12117  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12118  00026C  0EA5               	movlw	165
 12119  00026E                     u9357:
 12120  00026E  2EE8               	decfsz	wreg,f,c
 12121  000270  D7FE               	bra	u9357
 12122  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12123  000274  D7FC               	bra	u9357
 12124  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12125  000278  D7FA               	bra	u9357
 12126  00027A  0100               	movlb	0	; () banked
 12127  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12128  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12129  000280  0100               	movlb	0	; () banked
 12130  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12131  000284  D7DD               	goto	l1178
 12132  000286  0100               	movlb	0	; () banked
 12133  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12134  00028A  E101               	bnz	u6200
 12135  00028C  D7D4               	goto	L12
 12136  00028E                     u6200:
 12137  00028E                     l1179:
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;Test.c: 256: }
 12141                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12142  00028E  9889               	bcf	3977,4,c	;volatile
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12146  000290  0E01               	movlw	1
 12147  000292  EC98  F028         	call	_lcdInst
 12148  000296  0E68               	movlw	104
 12149  000298  0100               	movlb	0	; () banked
 12150  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12151  00029C  0EE4               	movlw	228
 12152  00029E                     u9367:
 12153  00029E  2EE8               	decfsz	wreg,f,c
 12154  0002A0  D7FE               	bra	u9367
 12155  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12156  0002A4  D7FC               	bra	u9367
 12157  0002A6  F000               	nop	
 12158  0002A8  0E80               	movlw	128
 12159  0002AA  EC98  F028         	call	_lcdInst
 12160                           
 12161                           ;Test.c: 261: machine_state = Sorting_state;
 12162  0002AE  0E01               	movlw	1
 12163  0002B0  0100               	movlb	0	; () banked
 12164  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;Test.c: 262: was_low_1 = 0;
 12168  0002B4  0E00               	movlw	0
 12169  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12170  0002B8  0E00               	movlw	0
 12171  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;Test.c: 263: was_low_1 = 0;
 12175  0002BC  0E00               	movlw	0
 12176  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12177  0002C0  0E00               	movlw	0
 12178  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;Test.c: 270: printf("TST: PAN SERVO");
 12182  0002C4  0EA5               	movlw	low STR_96
 12183  0002C6  0100               	movlb	0	; () banked
 12184  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12185  0002CA  0EFE               	movlw	high STR_96
 12186  0002CC  0100               	movlb	0	; () banked
 12187  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12188  0002D0  ECFF  F00A         	call	_printf	;wreg free
 12189                           
 12190                           ;Test.c: 271: lcdInst(0b11000000);;
 12191  0002D4  0EC0               	movlw	192
 12192  0002D6  EC98  F028         	call	_lcdInst
 12193                           
 12194                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12195  0002DA  0E0A               	movlw	low STR_97
 12196  0002DC  0100               	movlb	0	; () banked
 12197  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12198  0002E0  0EFC               	movlw	high STR_97
 12199  0002E2  0100               	movlb	0	; () banked
 12200  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12201  0002E6  ECFF  F00A         	call	_printf	;wreg free
 12202                           
 12203                           ;Test.c: 273: updateServoPosition(1200, 1);
 12204  0002EA  0E04               	movlw	4
 12205  0002EC  0100               	movlb	0	; () banked
 12206  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12207  0002F0  0EB0               	movlw	176
 12208  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12209  0002F4  0E00               	movlw	0
 12210  0002F6  0100               	movlb	0	; () banked
 12211  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12212  0002FA  0E01               	movlw	1
 12213  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12214  0002FE  ECE6  F022         	call	_updateServoPosition	;wreg free
 12215                           
 12216                           ;Test.c: 274: TMR1ON = 1;
 12217  000302  80CD               	bsf	4045,0,c	;volatile
 12218                           
 12219                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12220  000304  0E00               	movlw	0
 12221  000306  0100               	movlb	0	; () banked
 12222  000308  6FAE               	movwf	actuatorTest@i_1661& (0+255),b
 12223  00030A                     l7541:
 12224                           
 12225                           ; BSR set to: 0
 12226  00030A  0E63               	movlw	99
 12227  00030C  0100               	movlb	0	; () banked
 12228  00030E  65AE               	cpfsgt	actuatorTest@i_1661& (0+255),b
 12229  000310  D001               	goto	l7545
 12230  000312  D00C               	goto	l7549
 12231  000314                     l7545:
 12232                           
 12233                           ; BSR set to: 0
 12234  000314  0E68               	movlw	104
 12235  000316  0100               	movlb	0	; () banked
 12236  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12237  00031A  0EE4               	movlw	228
 12238  00031C                     u9377:
 12239  00031C  2EE8               	decfsz	wreg,f,c
 12240  00031E  D7FE               	bra	u9377
 12241  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12242  000322  D7FC               	bra	u9377
 12243  000324  F000               	nop	
 12244  000326  0100               	movlb	0	; () banked
 12245  000328  2BAE               	incf	actuatorTest@i_1661& (0+255),f,b
 12246  00032A  D7EF               	goto	l7541
 12247  00032C                     l7549:
 12248                           
 12249                           ; BSR set to: 0
 12250  00032C  0E00               	movlw	0
 12251  00032E  0100               	movlb	0	; () banked
 12252  000330  6FAF               	movwf	actuatorTest@i_1662& (0+255),b
 12253  000332                     l7551:
 12254                           
 12255                           ; BSR set to: 0
 12256  000332  0E63               	movlw	99
 12257  000334  0100               	movlb	0	; () banked
 12258  000336  65AF               	cpfsgt	actuatorTest@i_1662& (0+255),b
 12259  000338  D001               	goto	l7555
 12260  00033A  D00C               	goto	l7559
 12261  00033C                     l7555:
 12262                           
 12263                           ; BSR set to: 0
 12264  00033C  0E68               	movlw	104
 12265  00033E  0100               	movlb	0	; () banked
 12266  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12267  000342  0EE4               	movlw	228
 12268  000344                     u9387:
 12269  000344  2EE8               	decfsz	wreg,f,c
 12270  000346  D7FE               	bra	u9387
 12271  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12272  00034A  D7FC               	bra	u9387
 12273  00034C  F000               	nop	
 12274  00034E  0100               	movlb	0	; () banked
 12275  000350  2BAF               	incf	actuatorTest@i_1662& (0+255),f,b
 12276  000352  D7EF               	goto	l7551
 12277  000354                     l7559:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12281  000354  0E80               	movlw	128
 12282  000356  EC98  F028         	call	_lcdInst
 12283  00035A  0EC0               	movlw	192
 12284  00035C  EC98  F028         	call	_lcdInst
 12285                           
 12286                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12287  000360  0EF9               	movlw	low STR_98
 12288  000362  0100               	movlb	0	; () banked
 12289  000364  6F8E               	movwf	printf@f& (0+255),b
 12290  000366  0EFB               	movlw	high STR_98
 12291  000368  0100               	movlb	0	; () banked
 12292  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12293  00036C  ECFF  F00A         	call	_printf	;wreg free
 12294                           
 12295                           ;Test.c: 279: updateServoPosition(500, 1);
 12296  000370  0E01               	movlw	1
 12297  000372  0100               	movlb	0	; () banked
 12298  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12299  000376  0EF4               	movlw	244
 12300  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12301  00037A  0E00               	movlw	0
 12302  00037C  0100               	movlb	0	; () banked
 12303  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12304  000380  0E01               	movlw	1
 12305  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12306  000384  ECE6  F022         	call	_updateServoPosition	;wreg free
 12307                           
 12308                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12309  000388  0E00               	movlw	0
 12310  00038A  0100               	movlb	0	; () banked
 12311  00038C  6FB0               	movwf	actuatorTest@i_1664& (0+255),b
 12312  00038E                     l7567:
 12313                           
 12314                           ; BSR set to: 0
 12315  00038E  0E63               	movlw	99
 12316  000390  0100               	movlb	0	; () banked
 12317  000392  65B0               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12318  000394  D001               	goto	l7571
 12319  000396  D00C               	goto	l7575
 12320  000398                     l7571:
 12321                           
 12322                           ; BSR set to: 0
 12323  000398  0E68               	movlw	104
 12324  00039A  0100               	movlb	0	; () banked
 12325  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12326  00039E  0EE4               	movlw	228
 12327  0003A0                     u9397:
 12328  0003A0  2EE8               	decfsz	wreg,f,c
 12329  0003A2  D7FE               	bra	u9397
 12330  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12331  0003A6  D7FC               	bra	u9397
 12332  0003A8  F000               	nop	
 12333  0003AA  0100               	movlb	0	; () banked
 12334  0003AC  2BB0               	incf	actuatorTest@i_1664& (0+255),f,b
 12335  0003AE  D7EF               	goto	l7567
 12336  0003B0                     l7575:
 12337                           
 12338                           ; BSR set to: 0
 12339  0003B0  0E00               	movlw	0
 12340  0003B2  0100               	movlb	0	; () banked
 12341  0003B4  6FB1               	movwf	actuatorTest@i_1665& (0+255),b
 12342  0003B6                     l7577:
 12343                           
 12344                           ; BSR set to: 0
 12345  0003B6  0E63               	movlw	99
 12346  0003B8  0100               	movlb	0	; () banked
 12347  0003BA  65B1               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12348  0003BC  D001               	goto	l7581
 12349  0003BE  D00C               	goto	l7585
 12350  0003C0                     l7581:
 12351                           
 12352                           ; BSR set to: 0
 12353  0003C0  0E68               	movlw	104
 12354  0003C2  0100               	movlb	0	; () banked
 12355  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12356  0003C6  0EE4               	movlw	228
 12357  0003C8                     u9407:
 12358  0003C8  2EE8               	decfsz	wreg,f,c
 12359  0003CA  D7FE               	bra	u9407
 12360  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12361  0003CE  D7FC               	bra	u9407
 12362  0003D0  F000               	nop	
 12363  0003D2  0100               	movlb	0	; () banked
 12364  0003D4  2BB1               	incf	actuatorTest@i_1665& (0+255),f,b
 12365  0003D6  D7EF               	goto	l7577
 12366  0003D8                     l7585:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12370  0003D8  0E80               	movlw	128
 12371  0003DA  EC98  F028         	call	_lcdInst
 12372  0003DE  0EC0               	movlw	192
 12373  0003E0  EC98  F028         	call	_lcdInst
 12374                           
 12375                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12376  0003E4  0ED7               	movlw	low STR_99
 12377  0003E6  0100               	movlb	0	; () banked
 12378  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12379  0003EA  0EFB               	movlw	high STR_99
 12380  0003EC  0100               	movlb	0	; () banked
 12381  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12382  0003F0  ECFF  F00A         	call	_printf	;wreg free
 12383                           
 12384                           ;Test.c: 284: updateServoPosition(2400, 1);
 12385  0003F4  0E09               	movlw	9
 12386  0003F6  0100               	movlb	0	; () banked
 12387  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12388  0003FA  0E60               	movlw	96
 12389  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12390  0003FE  0E00               	movlw	0
 12391  000400  0100               	movlb	0	; () banked
 12392  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12393  000404  0E01               	movlw	1
 12394  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12395  000408  ECE6  F022         	call	_updateServoPosition	;wreg free
 12396                           
 12397                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12398  00040C  0E00               	movlw	0
 12399  00040E  0100               	movlb	0	; () banked
 12400  000410  6FB2               	movwf	actuatorTest@i_1667& (0+255),b
 12401  000412                     l7593:
 12402                           
 12403                           ; BSR set to: 0
 12404  000412  0E63               	movlw	99
 12405  000414  0100               	movlb	0	; () banked
 12406  000416  65B2               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12407  000418  D001               	goto	l7597
 12408  00041A  D00C               	goto	l7601
 12409  00041C                     l7597:
 12410                           
 12411                           ; BSR set to: 0
 12412  00041C  0E68               	movlw	104
 12413  00041E  0100               	movlb	0	; () banked
 12414  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12415  000422  0EE4               	movlw	228
 12416  000424                     u9417:
 12417  000424  2EE8               	decfsz	wreg,f,c
 12418  000426  D7FE               	bra	u9417
 12419  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12420  00042A  D7FC               	bra	u9417
 12421  00042C  F000               	nop	
 12422  00042E  0100               	movlb	0	; () banked
 12423  000430  2BB2               	incf	actuatorTest@i_1667& (0+255),f,b
 12424  000432  D7EF               	goto	l7593
 12425  000434                     l7601:
 12426                           
 12427                           ; BSR set to: 0
 12428  000434  0E00               	movlw	0
 12429  000436  0100               	movlb	0	; () banked
 12430  000438  6FB3               	movwf	actuatorTest@i_1668& (0+255),b
 12431  00043A                     l7603:
 12432                           
 12433                           ; BSR set to: 0
 12434  00043A  0E63               	movlw	99
 12435  00043C  0100               	movlb	0	; () banked
 12436  00043E  65B3               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12437  000440  D001               	goto	l7607
 12438  000442  D00C               	goto	l7611
 12439  000444                     l7607:
 12440                           
 12441                           ; BSR set to: 0
 12442  000444  0E68               	movlw	104
 12443  000446  0100               	movlb	0	; () banked
 12444  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12445  00044A  0EE4               	movlw	228
 12446  00044C                     u9427:
 12447  00044C  2EE8               	decfsz	wreg,f,c
 12448  00044E  D7FE               	bra	u9427
 12449  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12450  000452  D7FC               	bra	u9427
 12451  000454  F000               	nop	
 12452  000456  0100               	movlb	0	; () banked
 12453  000458  2BB3               	incf	actuatorTest@i_1668& (0+255),f,b
 12454  00045A  D7EF               	goto	l7603
 12455  00045C                     l7611:
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12459  00045C  0E80               	movlw	128
 12460  00045E  EC98  F028         	call	_lcdInst
 12461  000462  0EC0               	movlw	192
 12462  000464  EC98  F028         	call	_lcdInst
 12463                           
 12464                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12465  000468  0E2C               	movlw	low STR_100
 12466  00046A  0100               	movlb	0	; () banked
 12467  00046C  6F8E               	movwf	printf@f& (0+255),b
 12468  00046E  0EFC               	movlw	high STR_100
 12469  000470  0100               	movlb	0	; () banked
 12470  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12471  000474  ECFF  F00A         	call	_printf	;wreg free
 12472                           
 12473                           ;Test.c: 289: updateServoPosition(1670, 1);
 12474  000478  0E06               	movlw	6
 12475  00047A  0100               	movlb	0	; () banked
 12476  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12477  00047E  0E86               	movlw	134
 12478  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12479  000482  0E00               	movlw	0
 12480  000484  0100               	movlb	0	; () banked
 12481  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12482  000488  0E01               	movlw	1
 12483  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12484  00048C  ECE6  F022         	call	_updateServoPosition	;wreg free
 12485                           
 12486                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12487  000490  0E00               	movlw	0
 12488  000492  0100               	movlb	0	; () banked
 12489  000494  6FB4               	movwf	actuatorTest@i_1670& (0+255),b
 12490  000496                     l7619:
 12491                           
 12492                           ; BSR set to: 0
 12493  000496  0E63               	movlw	99
 12494  000498  0100               	movlb	0	; () banked
 12495  00049A  65B4               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12496  00049C  D001               	goto	l7623
 12497  00049E  D00C               	goto	l7627
 12498  0004A0                     l7623:
 12499                           
 12500                           ; BSR set to: 0
 12501  0004A0  0E68               	movlw	104
 12502  0004A2  0100               	movlb	0	; () banked
 12503  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12504  0004A6  0EE4               	movlw	228
 12505  0004A8                     u9437:
 12506  0004A8  2EE8               	decfsz	wreg,f,c
 12507  0004AA  D7FE               	bra	u9437
 12508  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12509  0004AE  D7FC               	bra	u9437
 12510  0004B0  F000               	nop	
 12511  0004B2  0100               	movlb	0	; () banked
 12512  0004B4  2BB4               	incf	actuatorTest@i_1670& (0+255),f,b
 12513  0004B6  D7EF               	goto	l7619
 12514  0004B8                     l7627:
 12515                           
 12516                           ; BSR set to: 0
 12517  0004B8  0E00               	movlw	0
 12518  0004BA  0100               	movlb	0	; () banked
 12519  0004BC  6FB5               	movwf	actuatorTest@i_1671& (0+255),b
 12520  0004BE                     l7629:
 12521                           
 12522                           ; BSR set to: 0
 12523  0004BE  0E63               	movlw	99
 12524  0004C0  0100               	movlb	0	; () banked
 12525  0004C2  65B5               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12526  0004C4  D001               	goto	l7633
 12527  0004C6  D00C               	goto	l7637
 12528  0004C8                     l7633:
 12529                           
 12530                           ; BSR set to: 0
 12531  0004C8  0E68               	movlw	104
 12532  0004CA  0100               	movlb	0	; () banked
 12533  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12534  0004CE  0EE4               	movlw	228
 12535  0004D0                     u9447:
 12536  0004D0  2EE8               	decfsz	wreg,f,c
 12537  0004D2  D7FE               	bra	u9447
 12538  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12539  0004D6  D7FC               	bra	u9447
 12540  0004D8  F000               	nop	
 12541  0004DA  0100               	movlb	0	; () banked
 12542  0004DC  2BB5               	incf	actuatorTest@i_1671& (0+255),f,b
 12543  0004DE  D7EF               	goto	l7629
 12544  0004E0                     l7637:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12548  0004E0  0E80               	movlw	128
 12549  0004E2  EC98  F028         	call	_lcdInst
 12550  0004E6  0EC0               	movlw	192
 12551  0004E8  EC98  F028         	call	_lcdInst
 12552                           
 12553                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12554  0004EC  0E3D               	movlw	low STR_101
 12555  0004EE  0100               	movlb	0	; () banked
 12556  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12557  0004F2  0EFC               	movlw	high STR_101
 12558  0004F4  0100               	movlb	0	; () banked
 12559  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12560  0004F8  ECFF  F00A         	call	_printf	;wreg free
 12561                           
 12562                           ;Test.c: 294: updateServoPosition(850, 1);
 12563  0004FC  0E03               	movlw	3
 12564  0004FE  0100               	movlb	0	; () banked
 12565  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12566  000502  0E52               	movlw	82
 12567  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12568  000506  0E00               	movlw	0
 12569  000508  0100               	movlb	0	; () banked
 12570  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12571  00050C  0E01               	movlw	1
 12572  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12573  000510  ECE6  F022         	call	_updateServoPosition	;wreg free
 12574                           
 12575                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12576  000514  0E00               	movlw	0
 12577  000516  0100               	movlb	0	; () banked
 12578  000518  6FB6               	movwf	actuatorTest@i_1673& (0+255),b
 12579  00051A                     l7645:
 12580                           
 12581                           ; BSR set to: 0
 12582  00051A  0E63               	movlw	99
 12583  00051C  0100               	movlb	0	; () banked
 12584  00051E  65B6               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12585  000520  D001               	goto	l7649
 12586  000522  D00C               	goto	l7653
 12587  000524                     l7649:
 12588                           
 12589                           ; BSR set to: 0
 12590  000524  0E68               	movlw	104
 12591  000526  0100               	movlb	0	; () banked
 12592  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12593  00052A  0EE4               	movlw	228
 12594  00052C                     u9457:
 12595  00052C  2EE8               	decfsz	wreg,f,c
 12596  00052E  D7FE               	bra	u9457
 12597  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12598  000532  D7FC               	bra	u9457
 12599  000534  F000               	nop	
 12600  000536  0100               	movlb	0	; () banked
 12601  000538  2BB6               	incf	actuatorTest@i_1673& (0+255),f,b
 12602  00053A  D7EF               	goto	l7645
 12603  00053C                     l7653:
 12604                           
 12605                           ; BSR set to: 0
 12606  00053C  0E00               	movlw	0
 12607  00053E  0100               	movlb	0	; () banked
 12608  000540  6FB7               	movwf	actuatorTest@i_1674& (0+255),b
 12609  000542                     l7655:
 12610                           
 12611                           ; BSR set to: 0
 12612  000542  0E63               	movlw	99
 12613  000544  0100               	movlb	0	; () banked
 12614  000546  65B7               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12615  000548  D001               	goto	l7659
 12616  00054A  D00C               	goto	l7663
 12617  00054C                     l7659:
 12618                           
 12619                           ; BSR set to: 0
 12620  00054C  0E68               	movlw	104
 12621  00054E  0100               	movlb	0	; () banked
 12622  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12623  000552  0EE4               	movlw	228
 12624  000554                     u9467:
 12625  000554  2EE8               	decfsz	wreg,f,c
 12626  000556  D7FE               	bra	u9467
 12627  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12628  00055A  D7FC               	bra	u9467
 12629  00055C  F000               	nop	
 12630  00055E  0100               	movlb	0	; () banked
 12631  000560  2BB7               	incf	actuatorTest@i_1674& (0+255),f,b
 12632  000562  D7EF               	goto	l7655
 12633  000564                     l7663:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12637  000564  0E80               	movlw	128
 12638  000566  EC98  F028         	call	_lcdInst
 12639  00056A  0EC0               	movlw	192
 12640  00056C  EC98  F028         	call	_lcdInst
 12641                           
 12642                           ;Test.c: 298: printf("MID -- 2s       ");
 12643  000570  0EB5               	movlw	low STR_102
 12644  000572  0100               	movlb	0	; () banked
 12645  000574  6F8E               	movwf	printf@f& (0+255),b
 12646  000576  0EFB               	movlw	high STR_102
 12647  000578  0100               	movlb	0	; () banked
 12648  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12649  00057C  ECFF  F00A         	call	_printf	;wreg free
 12650                           
 12651                           ;Test.c: 299: updateServoPosition(1200, 1);
 12652  000580  0E04               	movlw	4
 12653  000582  0100               	movlb	0	; () banked
 12654  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12655  000586  0EB0               	movlw	176
 12656  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12657  00058A  0E00               	movlw	0
 12658  00058C  0100               	movlb	0	; () banked
 12659  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12660  000590  0E01               	movlw	1
 12661  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12662  000594  ECE6  F022         	call	_updateServoPosition	;wreg free
 12663                           
 12664                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12665  000598  0E00               	movlw	0
 12666  00059A  0100               	movlb	0	; () banked
 12667  00059C  6FB8               	movwf	actuatorTest@i_1676& (0+255),b
 12668  00059E                     l7671:
 12669                           
 12670                           ; BSR set to: 0
 12671  00059E  0E63               	movlw	99
 12672  0005A0  0100               	movlb	0	; () banked
 12673  0005A2  65B8               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12674  0005A4  D001               	goto	l7675
 12675  0005A6  D00C               	goto	l7679
 12676  0005A8                     l7675:
 12677                           
 12678                           ; BSR set to: 0
 12679  0005A8  0E68               	movlw	104
 12680  0005AA  0100               	movlb	0	; () banked
 12681  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12682  0005AE  0EE4               	movlw	228
 12683  0005B0                     u9477:
 12684  0005B0  2EE8               	decfsz	wreg,f,c
 12685  0005B2  D7FE               	bra	u9477
 12686  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12687  0005B6  D7FC               	bra	u9477
 12688  0005B8  F000               	nop	
 12689  0005BA  0100               	movlb	0	; () banked
 12690  0005BC  2BB8               	incf	actuatorTest@i_1676& (0+255),f,b
 12691  0005BE  D7EF               	goto	l7671
 12692  0005C0                     l7679:
 12693                           
 12694                           ; BSR set to: 0
 12695  0005C0  0E00               	movlw	0
 12696  0005C2  0100               	movlb	0	; () banked
 12697  0005C4  6FB9               	movwf	actuatorTest@i_1677& (0+255),b
 12698  0005C6                     l7681:
 12699                           
 12700                           ; BSR set to: 0
 12701  0005C6  0E63               	movlw	99
 12702  0005C8  0100               	movlb	0	; () banked
 12703  0005CA  65B9               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12704  0005CC  D001               	goto	l7685
 12705  0005CE  D00C               	goto	l1203
 12706  0005D0                     l7685:
 12707                           
 12708                           ; BSR set to: 0
 12709  0005D0  0E68               	movlw	104
 12710  0005D2  0100               	movlb	0	; () banked
 12711  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12712  0005D6  0EE4               	movlw	228
 12713  0005D8                     u9487:
 12714  0005D8  2EE8               	decfsz	wreg,f,c
 12715  0005DA  D7FE               	bra	u9487
 12716  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12717  0005DE  D7FC               	bra	u9487
 12718  0005E0  F000               	nop	
 12719  0005E2  0100               	movlb	0	; () banked
 12720  0005E4  2BB9               	incf	actuatorTest@i_1677& (0+255),f,b
 12721  0005E6  D7EF               	goto	l7681
 12722  0005E8                     l1203:
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;Test.c: 301: TMR1ON = 0;
 12726  0005E8  90CD               	bcf	4045,0,c	;volatile
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;Test.c: 308: printf("TST: TILT SERVO");
 12730  0005EA  0E3A               	movlw	low STR_103
 12731  0005EC  0100               	movlb	0	; () banked
 12732  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12733  0005F0  0EFE               	movlw	high STR_103
 12734  0005F2  0100               	movlb	0	; () banked
 12735  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12736  0005F6  ECFF  F00A         	call	_printf	;wreg free
 12737                           
 12738                           ;Test.c: 309: lcdInst(0b11000000);;
 12739  0005FA  0EC0               	movlw	192
 12740  0005FC  EC98  F028         	call	_lcdInst
 12741                           
 12742                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12743  000600  0EE8               	movlw	low STR_104
 12744  000602  0100               	movlb	0	; () banked
 12745  000604  6F8E               	movwf	printf@f& (0+255),b
 12746  000606  0EFB               	movlw	high STR_104
 12747  000608  0100               	movlb	0	; () banked
 12748  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12749  00060C  ECFF  F00A         	call	_printf	;wreg free
 12750                           
 12751                           ;Test.c: 311: updateServoPosition(1050, 3);
 12752  000610  0E04               	movlw	4
 12753  000612  0100               	movlb	0	; () banked
 12754  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12755  000616  0E1A               	movlw	26
 12756  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12757  00061A  0E00               	movlw	0
 12758  00061C  0100               	movlb	0	; () banked
 12759  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12760  000620  0E03               	movlw	3
 12761  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12762  000624  ECE6  F022         	call	_updateServoPosition	;wreg free
 12763                           
 12764                           ;Test.c: 312: TMR3ON = 1;
 12765  000628  80B1               	bsf	4017,0,c	;volatile
 12766                           
 12767                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12768  00062A  0E00               	movlw	0
 12769  00062C  0100               	movlb	0	; () banked
 12770  00062E  6FBA               	movwf	actuatorTest@i_1680& (0+255),b
 12771  000630                     l7699:
 12772                           
 12773                           ; BSR set to: 0
 12774  000630  0E63               	movlw	99
 12775  000632  0100               	movlb	0	; () banked
 12776  000634  65BA               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12777  000636  D001               	goto	l7703
 12778  000638  D00C               	goto	l7707
 12779  00063A                     l7703:
 12780                           
 12781                           ; BSR set to: 0
 12782  00063A  0E68               	movlw	104
 12783  00063C  0100               	movlb	0	; () banked
 12784  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12785  000640  0EE4               	movlw	228
 12786  000642                     u9497:
 12787  000642  2EE8               	decfsz	wreg,f,c
 12788  000644  D7FE               	bra	u9497
 12789  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12790  000648  D7FC               	bra	u9497
 12791  00064A  F000               	nop	
 12792  00064C  0100               	movlb	0	; () banked
 12793  00064E  2BBA               	incf	actuatorTest@i_1680& (0+255),f,b
 12794  000650  D7EF               	goto	l7699
 12795  000652                     l7707:
 12796                           
 12797                           ; BSR set to: 0
 12798  000652  0E00               	movlw	0
 12799  000654  0100               	movlb	0	; () banked
 12800  000656  6FBB               	movwf	actuatorTest@i_1681& (0+255),b
 12801  000658                     l7709:
 12802                           
 12803                           ; BSR set to: 0
 12804  000658  0E63               	movlw	99
 12805  00065A  0100               	movlb	0	; () banked
 12806  00065C  65BB               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12807  00065E  D001               	goto	l7713
 12808  000660  D00C               	goto	l7717
 12809  000662                     l7713:
 12810                           
 12811                           ; BSR set to: 0
 12812  000662  0E68               	movlw	104
 12813  000664  0100               	movlb	0	; () banked
 12814  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12815  000668  0EE4               	movlw	228
 12816  00066A                     u9507:
 12817  00066A  2EE8               	decfsz	wreg,f,c
 12818  00066C  D7FE               	bra	u9507
 12819  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12820  000670  D7FC               	bra	u9507
 12821  000672  F000               	nop	
 12822  000674  0100               	movlb	0	; () banked
 12823  000676  2BBB               	incf	actuatorTest@i_1681& (0+255),f,b
 12824  000678  D7EF               	goto	l7709
 12825  00067A                     l7717:
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12829  00067A  0E80               	movlw	128
 12830  00067C  EC98  F028         	call	_lcdInst
 12831  000680  0EC0               	movlw	192
 12832  000682  EC98  F028         	call	_lcdInst
 12833                           
 12834                           ;Test.c: 316: printf("DROP -- 2s      ");
 12835  000686  0EC6               	movlw	low STR_105
 12836  000688  0100               	movlb	0	; () banked
 12837  00068A  6F8E               	movwf	printf@f& (0+255),b
 12838  00068C  0EFB               	movlw	high STR_105
 12839  00068E  0100               	movlb	0	; () banked
 12840  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12841  000692  ECFF  F00A         	call	_printf	;wreg free
 12842                           
 12843                           ;Test.c: 317: updateServoPosition(1260, 3);
 12844  000696  0E04               	movlw	4
 12845  000698  0100               	movlb	0	; () banked
 12846  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12847  00069C  0EEC               	movlw	236
 12848  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12849  0006A0  0E00               	movlw	0
 12850  0006A2  0100               	movlb	0	; () banked
 12851  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12852  0006A6  0E03               	movlw	3
 12853  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12854  0006AA  ECE6  F022         	call	_updateServoPosition	;wreg free
 12855                           
 12856                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12857  0006AE  0E00               	movlw	0
 12858  0006B0  0100               	movlb	0	; () banked
 12859  0006B2  6FBC               	movwf	actuatorTest@i_1683& (0+255),b
 12860  0006B4                     l7725:
 12861                           
 12862                           ; BSR set to: 0
 12863  0006B4  0E63               	movlw	99
 12864  0006B6  0100               	movlb	0	; () banked
 12865  0006B8  65BC               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12866  0006BA  D001               	goto	l7729
 12867  0006BC  D00C               	goto	l7733
 12868  0006BE                     l7729:
 12869                           
 12870                           ; BSR set to: 0
 12871  0006BE  0E68               	movlw	104
 12872  0006C0  0100               	movlb	0	; () banked
 12873  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12874  0006C4  0EE4               	movlw	228
 12875  0006C6                     u9517:
 12876  0006C6  2EE8               	decfsz	wreg,f,c
 12877  0006C8  D7FE               	bra	u9517
 12878  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12879  0006CC  D7FC               	bra	u9517
 12880  0006CE  F000               	nop	
 12881  0006D0  0100               	movlb	0	; () banked
 12882  0006D2  2BBC               	incf	actuatorTest@i_1683& (0+255),f,b
 12883  0006D4  D7EF               	goto	l7725
 12884  0006D6                     l7733:
 12885                           
 12886                           ; BSR set to: 0
 12887  0006D6  0E00               	movlw	0
 12888  0006D8  0100               	movlb	0	; () banked
 12889  0006DA  6FBD               	movwf	actuatorTest@i_1684& (0+255),b
 12890  0006DC                     l7735:
 12891                           
 12892                           ; BSR set to: 0
 12893  0006DC  0E63               	movlw	99
 12894  0006DE  0100               	movlb	0	; () banked
 12895  0006E0  65BD               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12896  0006E2  D001               	goto	l7739
 12897  0006E4  D00C               	goto	l7743
 12898  0006E6                     l7739:
 12899                           
 12900                           ; BSR set to: 0
 12901  0006E6  0E68               	movlw	104
 12902  0006E8  0100               	movlb	0	; () banked
 12903  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12904  0006EC  0EE4               	movlw	228
 12905  0006EE                     u9527:
 12906  0006EE  2EE8               	decfsz	wreg,f,c
 12907  0006F0  D7FE               	bra	u9527
 12908  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12909  0006F4  D7FC               	bra	u9527
 12910  0006F6  F000               	nop	
 12911  0006F8  0100               	movlb	0	; () banked
 12912  0006FA  2BBD               	incf	actuatorTest@i_1684& (0+255),f,b
 12913  0006FC  D7EF               	goto	l7735
 12914  0006FE                     l7743:
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12918  0006FE  0E80               	movlw	128
 12919  000700  EC98  F028         	call	_lcdInst
 12920  000704  0EC0               	movlw	192
 12921  000706  EC98  F028         	call	_lcdInst
 12922                           
 12923                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12924  00070A  0EE8               	movlw	low STR_104
 12925  00070C  0100               	movlb	0	; () banked
 12926  00070E  6F8E               	movwf	printf@f& (0+255),b
 12927  000710  0EFB               	movlw	high STR_104
 12928  000712  0100               	movlb	0	; () banked
 12929  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12930  000716  ECFF  F00A         	call	_printf	;wreg free
 12931                           
 12932                           ;Test.c: 322: updateServoPosition(1050, 3);
 12933  00071A  0E04               	movlw	4
 12934  00071C  0100               	movlb	0	; () banked
 12935  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12936  000720  0E1A               	movlw	26
 12937  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12938  000724  0E00               	movlw	0
 12939  000726  0100               	movlb	0	; () banked
 12940  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12941  00072A  0E03               	movlw	3
 12942  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12943  00072E  ECE6  F022         	call	_updateServoPosition	;wreg free
 12944                           
 12945                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12946  000732  0E00               	movlw	0
 12947  000734  0100               	movlb	0	; () banked
 12948  000736  6FBE               	movwf	actuatorTest@i_1686& (0+255),b
 12949  000738                     l7751:
 12950                           
 12951                           ; BSR set to: 0
 12952  000738  0E63               	movlw	99
 12953  00073A  0100               	movlb	0	; () banked
 12954  00073C  65BE               	cpfsgt	actuatorTest@i_1686& (0+255),b
 12955  00073E  D001               	goto	l7755
 12956  000740  D00C               	goto	l7759
 12957  000742                     l7755:
 12958                           
 12959                           ; BSR set to: 0
 12960  000742  0E68               	movlw	104
 12961  000744  0100               	movlb	0	; () banked
 12962  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12963  000748  0EE4               	movlw	228
 12964  00074A                     u9537:
 12965  00074A  2EE8               	decfsz	wreg,f,c
 12966  00074C  D7FE               	bra	u9537
 12967  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12968  000750  D7FC               	bra	u9537
 12969  000752  F000               	nop	
 12970  000754  0100               	movlb	0	; () banked
 12971  000756  2BBE               	incf	actuatorTest@i_1686& (0+255),f,b
 12972  000758  D7EF               	goto	l7751
 12973  00075A                     l7759:
 12974                           
 12975                           ; BSR set to: 0
 12976  00075A  0E00               	movlw	0
 12977  00075C  0100               	movlb	0	; () banked
 12978  00075E  6FBF               	movwf	actuatorTest@i_1687& (0+255),b
 12979  000760                     l7761:
 12980                           
 12981                           ; BSR set to: 0
 12982  000760  0E63               	movlw	99
 12983  000762  0100               	movlb	0	; () banked
 12984  000764  65BF               	cpfsgt	actuatorTest@i_1687& (0+255),b
 12985  000766  D001               	goto	l7765
 12986  000768  D00C               	goto	l1215
 12987  00076A                     l7765:
 12988                           
 12989                           ; BSR set to: 0
 12990  00076A  0E68               	movlw	104
 12991  00076C  0100               	movlb	0	; () banked
 12992  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12993  000770  0EE4               	movlw	228
 12994  000772                     u9547:
 12995  000772  2EE8               	decfsz	wreg,f,c
 12996  000774  D7FE               	bra	u9547
 12997  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12998  000778  D7FC               	bra	u9547
 12999  00077A  F000               	nop	
 13000  00077C  0100               	movlb	0	; () banked
 13001  00077E  2BBF               	incf	actuatorTest@i_1687& (0+255),f,b
 13002  000780  D7EF               	goto	l7761
 13003  000782                     l1215:
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;Test.c: 324: TMR3ON = 0;
 13007  000782  90B1               	bcf	4017,0,c	;volatile
 13008                           
 13009                           ;Test.c: 325: (INTCONbits.GIE = 0);
 13010  000784  9EF2               	bcf	intcon,7,c	;volatile
 13011                           
 13012                           ; BSR set to: 0
 13013                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13014  000786  0E01               	movlw	1
 13015  000788  EC98  F028         	call	_lcdInst
 13016  00078C  0E68               	movlw	104
 13017  00078E  0100               	movlb	0	; () banked
 13018  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 13019  000792  0EE4               	movlw	228
 13020  000794                     u9557:
 13021  000794  2EE8               	decfsz	wreg,f,c
 13022  000796  D7FE               	bra	u9557
 13023  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13024  00079A  D7FC               	bra	u9557
 13025  00079C  F000               	nop	
 13026  00079E  0E80               	movlw	128
 13027  0007A0  EC98  F028         	call	_lcdInst
 13028                           
 13029                           ;Test.c: 331: printf("TST: CAM SERVO");
 13030  0007A4  0E96               	movlw	low STR_107
 13031  0007A6  0100               	movlb	0	; () banked
 13032  0007A8  6F8E               	movwf	printf@f& (0+255),b
 13033  0007AA  0EFE               	movlw	high STR_107
 13034  0007AC  0100               	movlb	0	; () banked
 13035  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13036  0007B0  ECFF  F00A         	call	_printf	;wreg free
 13037                           
 13038                           ;Test.c: 332: lcdInst(0b11000000);;
 13039  0007B4  0EC0               	movlw	192
 13040  0007B6  EC98  F028         	call	_lcdInst
 13041                           
 13042                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 13043  0007BA  0E78               	movlw	low STR_108
 13044  0007BC  0100               	movlb	0	; () banked
 13045  0007BE  6F8E               	movwf	printf@f& (0+255),b
 13046  0007C0  0EFE               	movlw	high STR_108
 13047  0007C2  0100               	movlb	0	; () banked
 13048  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13049  0007C6  ECFF  F00A         	call	_printf	;wreg free
 13050                           
 13051                           ;Test.c: 334: LATCbits.LATC0 = 1;
 13052  0007CA  808B               	bsf	3979,0,c	;volatile
 13053                           
 13054                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13055  0007CC  0E00               	movlw	0
 13056  0007CE  0100               	movlb	0	; () banked
 13057  0007D0  6FC0               	movwf	actuatorTest@i_1690& (0+255),b
 13058  0007D2                     l7785:
 13059                           
 13060                           ; BSR set to: 0
 13061  0007D2  0E63               	movlw	99
 13062  0007D4  0100               	movlb	0	; () banked
 13063  0007D6  65C0               	cpfsgt	actuatorTest@i_1690& (0+255),b
 13064  0007D8  D001               	goto	l7789
 13065  0007DA  D00C               	goto	l7793
 13066  0007DC                     l7789:
 13067                           
 13068                           ; BSR set to: 0
 13069  0007DC  0E68               	movlw	104
 13070  0007DE  0100               	movlb	0	; () banked
 13071  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13072  0007E2  0EE4               	movlw	228
 13073  0007E4                     u9567:
 13074  0007E4  2EE8               	decfsz	wreg,f,c
 13075  0007E6  D7FE               	bra	u9567
 13076  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13077  0007EA  D7FC               	bra	u9567
 13078  0007EC  F000               	nop	
 13079  0007EE  0100               	movlb	0	; () banked
 13080  0007F0  2BC0               	incf	actuatorTest@i_1690& (0+255),f,b
 13081  0007F2  D7EF               	goto	l7785
 13082  0007F4                     l7793:
 13083                           
 13084                           ; BSR set to: 0
 13085  0007F4  0E00               	movlw	0
 13086  0007F6  0100               	movlb	0	; () banked
 13087  0007F8  6FC1               	movwf	actuatorTest@i_1691& (0+255),b
 13088  0007FA                     l7795:
 13089                           
 13090                           ; BSR set to: 0
 13091  0007FA  0E63               	movlw	99
 13092  0007FC  0100               	movlb	0	; () banked
 13093  0007FE  65C1               	cpfsgt	actuatorTest@i_1691& (0+255),b
 13094  000800  D001               	goto	l7799
 13095  000802  D00C               	goto	l7803
 13096  000804                     l7799:
 13097                           
 13098                           ; BSR set to: 0
 13099  000804  0E68               	movlw	104
 13100  000806  0100               	movlb	0	; () banked
 13101  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13102  00080A  0EE4               	movlw	228
 13103  00080C                     u9577:
 13104  00080C  2EE8               	decfsz	wreg,f,c
 13105  00080E  D7FE               	bra	u9577
 13106  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13107  000812  D7FC               	bra	u9577
 13108  000814  F000               	nop	
 13109  000816  0100               	movlb	0	; () banked
 13110  000818  2BC1               	incf	actuatorTest@i_1691& (0+255),f,b
 13111  00081A  D7EF               	goto	l7795
 13112  00081C                     l7803:
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13116  00081C  0E80               	movlw	128
 13117  00081E  EC98  F028         	call	_lcdInst
 13118  000822  0EC0               	movlw	192
 13119  000824  EC98  F028         	call	_lcdInst
 13120                           
 13121                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13122  000828  0E69               	movlw	low STR_109
 13123  00082A  0100               	movlb	0	; () banked
 13124  00082C  6F8E               	movwf	printf@f& (0+255),b
 13125  00082E  0EFE               	movlw	high STR_109
 13126  000830  0100               	movlb	0	; () banked
 13127  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13128  000834  ECFF  F00A         	call	_printf	;wreg free
 13129                           
 13130                           ;Test.c: 340: for(i=0;i<10000;i++)
 13131  000838  0E00               	movlw	0
 13132  00083A  0100               	movlb	0	; () banked
 13133  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13134  00083E  0E00               	movlw	0
 13135  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13136  000842                     l7809:
 13137                           
 13138                           ; BSR set to: 0
 13139  000842  0100               	movlb	0	; () banked
 13140  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13141  000846  D008               	goto	l1220
 13142  000848  0E10               	movlw	16
 13143  00084A  0100               	movlb	0	; () banked
 13144  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13145  00084E  0E27               	movlw	39
 13146  000850  0100               	movlb	0	; () banked
 13147  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13148  000854  B0D8               	btfsc	status,0,c
 13149  000856  D00D               	goto	l7819
 13150  000858                     l1220:
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;Test.c: 341: {
 13154                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13155  000858  808B               	bsf	3979,0,c	;volatile
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13159  00085A  0E1A               	movlw	26
 13160  00085C                     u9587:
 13161  00085C  2EE8               	decfsz	wreg,f,c
 13162  00085E  D7FE               	bra	u9587
 13163  000860  D000               	nop2	
 13164                           
 13165                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13166  000862  908B               	bcf	3979,0,c	;volatile
 13167                           
 13168                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13169  000864  0EF0               	movlw	240
 13170  000866                     u9597:
 13171  000866  2EE8               	decfsz	wreg,f,c
 13172  000868  D7FE               	bra	u9597
 13173  00086A  0100               	movlb	0	; () banked
 13174  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13175  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13176  000870  D7E8               	goto	l7809
 13177  000872                     l7819:
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;Test.c: 346: }
 13181                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13182  000872  0E00               	movlw	0
 13183  000874  0100               	movlb	0	; () banked
 13184  000876  6FC2               	movwf	actuatorTest@i_1693& (0+255),b
 13185  000878                     l7821:
 13186                           
 13187                           ; BSR set to: 0
 13188  000878  0E63               	movlw	99
 13189  00087A  0100               	movlb	0	; () banked
 13190  00087C  65C2               	cpfsgt	actuatorTest@i_1693& (0+255),b
 13191  00087E  D001               	goto	l7825
 13192  000880  D00C               	goto	l7829
 13193  000882                     l7825:
 13194                           
 13195                           ; BSR set to: 0
 13196  000882  0E68               	movlw	104
 13197  000884  0100               	movlb	0	; () banked
 13198  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13199  000888  0EE4               	movlw	228
 13200  00088A                     u9607:
 13201  00088A  2EE8               	decfsz	wreg,f,c
 13202  00088C  D7FE               	bra	u9607
 13203  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13204  000890  D7FC               	bra	u9607
 13205  000892  F000               	nop	
 13206  000894  0100               	movlb	0	; () banked
 13207  000896  2BC2               	incf	actuatorTest@i_1693& (0+255),f,b
 13208  000898  D7EF               	goto	l7821
 13209  00089A                     l7829:
 13210                           
 13211                           ; BSR set to: 0
 13212  00089A  0E00               	movlw	0
 13213  00089C  0100               	movlb	0	; () banked
 13214  00089E  6FC3               	movwf	actuatorTest@i_1694& (0+255),b
 13215  0008A0                     l7831:
 13216                           
 13217                           ; BSR set to: 0
 13218  0008A0  0E63               	movlw	99
 13219  0008A2  0100               	movlb	0	; () banked
 13220  0008A4  65C3               	cpfsgt	actuatorTest@i_1694& (0+255),b
 13221  0008A6  D001               	goto	l7835
 13222  0008A8  D00C               	goto	l7839
 13223  0008AA                     l7835:
 13224                           
 13225                           ; BSR set to: 0
 13226  0008AA  0E68               	movlw	104
 13227  0008AC  0100               	movlb	0	; () banked
 13228  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13229  0008B0  0EE4               	movlw	228
 13230  0008B2                     u9617:
 13231  0008B2  2EE8               	decfsz	wreg,f,c
 13232  0008B4  D7FE               	bra	u9617
 13233  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13234  0008B8  D7FC               	bra	u9617
 13235  0008BA  F000               	nop	
 13236  0008BC  0100               	movlb	0	; () banked
 13237  0008BE  2BC3               	incf	actuatorTest@i_1694& (0+255),f,b
 13238  0008C0  D7EF               	goto	l7831
 13239  0008C2                     l7839:
 13240                           
 13241                           ; BSR set to: 0
 13242                           ;Test.c: 349: machine_state = Testing_state;
 13243  0008C2  0E03               	movlw	3
 13244  0008C4  0100               	movlb	0	; () banked
 13245  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13246                           
 13247                           ; BSR set to: 0
 13248  0008C8  0012               	return		;funcret
 13249  0008CA                     __end_of_actuatorTest:
 13250                           	opt stack 0
 13251                           tblptru	equ	0xFF8
 13252                           tblptrh	equ	0xFF7
 13253                           tblptrl	equ	0xFF6
 13254                           tablat	equ	0xFF5
 13255                           prodh	equ	0xFF4
 13256                           prodl	equ	0xFF3
 13257                           intcon	equ	0xFF2
 13258                           intcon2	equ	0xFF1
 13259                           intcon3	equ	0xFF0
 13260                           postinc0	equ	0xFEE
 13261                           wreg	equ	0xFE8
 13262                           postdec1	equ	0xFE5
 13263                           fsr1l	equ	0xFE1
 13264                           indf2	equ	0xFDF
 13265                           postinc2	equ	0xFDE
 13266                           postdec2	equ	0xFDD
 13267                           fsr2h	equ	0xFDA
 13268                           fsr2l	equ	0xFD9
 13269                           status	equ	0xFD8
 13270                           
 13271 ;; *************** function _SpeedTest *****************
 13272 ;; Defined at:
 13273 ;;		line 549 in file "Test.c"
 13274 ;; Parameters:    Size  Location     Type
 13275 ;;		None
 13276 ;; Auto vars:     Size  Location     Type
 13277 ;;		None
 13278 ;; Return value:  Size  Location     Type
 13279 ;;                  1    wreg      void 
 13280 ;; Registers used:
 13281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13282 ;; Tracked objects:
 13283 ;;		On entry : 0/0
 13284 ;;		On exit  : 0/0
 13285 ;;		Unchanged: 0/0
 13286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;Total ram usage:        1 bytes
 13292 ;; Hardware stack levels used:    1
 13293 ;; Hardware stack levels required when called:   10
 13294 ;; This function calls:
 13295 ;;		_lcdInst
 13296 ;;		_printf
 13297 ;; This function is called by:
 13298 ;;		_Test
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           	psect	text41
 13303  0043CA                     __ptext41:
 13304                           	opt stack 0
 13305  0043CA                     _SpeedTest:
 13306                           	opt stack 19
 13307                           
 13308                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;incstack = 0
 13312  0043CA  0E01               	movlw	1
 13313  0043CC  EC98  F028         	call	_lcdInst
 13314  0043D0  0E68               	movlw	104
 13315  0043D2  0100               	movlb	0	; () banked
 13316  0043D4  6FAB               	movwf	??_SpeedTest& (0+255),b
 13317  0043D6  0EE4               	movlw	228
 13318  0043D8                     u9627:
 13319  0043D8  2EE8               	decfsz	wreg,f,c
 13320  0043DA  D7FE               	bra	u9627
 13321  0043DC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13322  0043DE  D7FC               	bra	u9627
 13323  0043E0  F000               	nop	
 13324  0043E2  0E80               	movlw	128
 13325  0043E4  EC98  F028         	call	_lcdInst
 13326                           
 13327                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13328  0043E8  0E5B               	movlw	low STR_120
 13329  0043EA  0100               	movlb	0	; () banked
 13330  0043EC  6F8E               	movwf	printf@f& (0+255),b
 13331  0043EE  0EFB               	movlw	high STR_120
 13332  0043F0  0100               	movlb	0	; () banked
 13333  0043F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13334  0043F4  ECFF  F00A         	call	_printf	;wreg free
 13335                           
 13336                           ;Test.c: 553: lcdInst(0b11000000);;
 13337  0043F8  0EC0               	movlw	192
 13338  0043FA  EC98  F028         	call	_lcdInst
 13339                           
 13340                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13341  0043FE  0E49               	movlw	low STR_112
 13342  004400  0100               	movlb	0	; () banked
 13343  004402  6F8E               	movwf	printf@f& (0+255),b
 13344  004404  0EFB               	movlw	high STR_112
 13345  004406  0100               	movlb	0	; () banked
 13346  004408  6F8F               	movwf	(printf@f+1)& (0+255),b
 13347  00440A  ECFF  F00A         	call	_printf	;wreg free
 13348  00440E                     l1306:
 13349  00440E  A281               	btfss	3969,1,c	;volatile
 13350  004410  D7FE               	goto	l1306
 13351                           
 13352                           ;Test.c: 559: }
 13353                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13354  004412  3881               	swapf	3969,w,c	;volatile
 13355  004414  0B0F               	andlw	15
 13356  004416  0A0F               	xorlw	15
 13357  004418  B4D8               	btfsc	status,2,c
 13358  00441A  0012               	return	
 13359  00441C  D014               	goto	l7881
 13360  00441E                     l1313:
 13361                           
 13362                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13363  00441E  8A89               	bsf	3977,5,c	;volatile
 13364                           
 13365                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13366  004420  0E34               	movlw	52
 13367  004422  0100               	movlb	0	; () banked
 13368  004424  6FAB               	movwf	??_SpeedTest& (0+255),b
 13369  004426  0EF1               	movlw	241
 13370  004428                     u9637:
 13371  004428  2EE8               	decfsz	wreg,f,c
 13372  00442A  D7FE               	bra	u9637
 13373  00442C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13374  00442E  D7FC               	bra	u9637
 13375  004430  D000               	nop2	
 13376                           
 13377                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13378  004432  9A89               	bcf	3977,5,c	;volatile
 13379                           
 13380                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13381  004434  0E34               	movlw	52
 13382  004436  0100               	movlb	0	; () banked
 13383  004438  6FAB               	movwf	??_SpeedTest& (0+255),b
 13384  00443A  0EF1               	movlw	241
 13385  00443C                     u9647:
 13386  00443C  2EE8               	decfsz	wreg,f,c
 13387  00443E  D7FE               	bra	u9647
 13388  004440  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13389  004442  D7FC               	bra	u9647
 13390  004444  D000               	nop2	
 13391  004446                     l7881:
 13392  004446  B281               	btfsc	3969,1,c	;volatile
 13393  004448  D7EA               	goto	l1313
 13394                           
 13395                           ;Test.c: 571: }
 13396                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13397  00444A  9A89               	bcf	3977,5,c	;volatile
 13398  00444C  D7E0               	goto	l1306
 13399  00444E                     __end_of_SpeedTest:
 13400                           	opt stack 0
 13401                           tblptru	equ	0xFF8
 13402                           tblptrh	equ	0xFF7
 13403                           tblptrl	equ	0xFF6
 13404                           tablat	equ	0xFF5
 13405                           prodh	equ	0xFF4
 13406                           prodl	equ	0xFF3
 13407                           intcon	equ	0xFF2
 13408                           intcon2	equ	0xFF1
 13409                           intcon3	equ	0xFF0
 13410                           postinc0	equ	0xFEE
 13411                           wreg	equ	0xFE8
 13412                           postdec1	equ	0xFE5
 13413                           fsr1l	equ	0xFE1
 13414                           indf2	equ	0xFDF
 13415                           postinc2	equ	0xFDE
 13416                           postdec2	equ	0xFDD
 13417                           fsr2h	equ	0xFDA
 13418                           fsr2l	equ	0xFD9
 13419                           status	equ	0xFD8
 13420                           
 13421 ;; *************** function _PusherTest *****************
 13422 ;; Defined at:
 13423 ;;		line 467 in file "Test.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;		None
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;  i               2   51[BANK0 ] int 
 13428 ;;  i               2   49[BANK0 ] int 
 13429 ;;  res             2   47[BANK0 ] int 
 13430 ;;  res             2   45[BANK0 ] int 
 13431 ;; Return value:  Size  Location     Type
 13432 ;;                  1    wreg      void 
 13433 ;; Registers used:
 13434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/0
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13443 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;Total ram usage:       10 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:   10
 13447 ;; This function calls:
 13448 ;;		_lcdInst
 13449 ;;		_printf
 13450 ;;		_readADC
 13451 ;; This function is called by:
 13452 ;;		_Test
 13453 ;; This function uses a non-reentrant model
 13454 ;;
 13455                           
 13456                           	psect	text42
 13457  002C52                     __ptext42:
 13458                           	opt stack 0
 13459  002C52                     _PusherTest:
 13460                           	opt stack 19
 13461                           
 13462                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13463                           
 13464                           ;incstack = 0
 13465  002C52  0E01               	movlw	1
 13466  002C54  EC98  F028         	call	_lcdInst
 13467  002C58  0E68               	movlw	104
 13468  002C5A  0100               	movlb	0	; () banked
 13469  002C5C  6FAB               	movwf	??_PusherTest& (0+255),b
 13470  002C5E  0EE4               	movlw	228
 13471  002C60                     u9657:
 13472  002C60  2EE8               	decfsz	wreg,f,c
 13473  002C62  D7FE               	bra	u9657
 13474  002C64  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13475  002C66  D7FC               	bra	u9657
 13476  002C68  F000               	nop	
 13477  002C6A  0E80               	movlw	128
 13478  002C6C  EC98  F028         	call	_lcdInst
 13479                           
 13480                           ;Test.c: 469: printf("PUSHER TST");
 13481  002C70  0E71               	movlw	low STR_113
 13482  002C72  0100               	movlb	0	; () banked
 13483  002C74  6F8E               	movwf	printf@f& (0+255),b
 13484  002C76  0EFF               	movlw	high STR_113
 13485  002C78  0100               	movlb	0	; () banked
 13486  002C7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13487  002C7C  ECFF  F00A         	call	_printf	;wreg free
 13488                           
 13489                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13490  002C80  8A8B               	bsf	3979,5,c	;volatile
 13491                           
 13492                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13493  002C82  D05C               	goto	l7911
 13494  002C84                     l7893:
 13495                           
 13496                           ;Test.c: 473: readADC(0);
 13497  002C84  0E00               	movlw	0
 13498  002C86  EC8F  F027         	call	_readADC
 13499                           
 13500                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13501  002C8A  50C3               	movf	4035,w,c	;volatile
 13502  002C8C  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13503  002C90  0100               	movlb	0	; () banked
 13504  002C92  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13505  002C94  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13506  002C98  0100               	movlb	0	; () banked
 13507  002C9A  6BAB               	clrf	??_PusherTest& (0+255),b
 13508  002C9C  0100               	movlb	0	; () banked
 13509  002C9E  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13510  002CA0  0100               	movlb	0	; () banked
 13511  002CA2  6FAD               	movwf	PusherTest@res& (0+255),b
 13512  002CA4  0100               	movlb	0	; () banked
 13513  002CA6  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13514  002CA8  0100               	movlb	0	; () banked
 13515  002CAA  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13519  002CAC  0100               	movlb	0	; () banked
 13520  002CAE  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13521  002CB0  D00A               	goto	u6730
 13522  002CB2  0E21               	movlw	33
 13523  002CB4  0100               	movlb	0	; () banked
 13524  002CB6  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13525  002CB8  0E03               	movlw	3
 13526  002CBA  0100               	movlb	0	; () banked
 13527  002CBC  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13528  002CBE  A0D8               	btfss	status,0,c
 13529  002CC0  D002               	goto	u6730
 13530  002CC2  0E01               	movlw	1
 13531  002CC4  D001               	goto	u6740
 13532  002CC6                     u6730:
 13533  002CC6  0E00               	movlw	0
 13534  002CC8                     u6740:
 13535  002CC8  0100               	movlb	0	; () banked
 13536  002CCA  6FDE               	movwf	_IR_signal& (0+255),b
 13537  002CCC  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13538                           
 13539                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13540  002CCE  0E01               	movlw	1
 13541  002CD0  EC98  F028         	call	_lcdInst
 13542  002CD4  0E68               	movlw	104
 13543  002CD6  0100               	movlb	0	; () banked
 13544  002CD8  6FAB               	movwf	??_PusherTest& (0+255),b
 13545  002CDA  0EE4               	movlw	228
 13546  002CDC                     u9667:
 13547  002CDC  2EE8               	decfsz	wreg,f,c
 13548  002CDE  D7FE               	bra	u9667
 13549  002CE0  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13550  002CE2  D7FC               	bra	u9667
 13551  002CE4  F000               	nop	
 13552  002CE6  0E80               	movlw	128
 13553  002CE8  EC98  F028         	call	_lcdInst
 13554                           
 13555                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13556  002CEC  0E5A               	movlw	low STR_80
 13557  002CEE  0100               	movlb	0	; () banked
 13558  002CF0  6F8E               	movwf	printf@f& (0+255),b
 13559  002CF2  0EFE               	movlw	high STR_80
 13560  002CF4  0100               	movlb	0	; () banked
 13561  002CF6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13562  002CF8  C0DE  F090         	movff	_IR_signal,?_printf+2
 13563  002CFC  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13564  002D00  ECFF  F00A         	call	_printf	;wreg free
 13565                           
 13566                           ;Test.c: 479: lcdInst(0b11000000);;
 13567  002D04  0EC0               	movlw	192
 13568  002D06  EC98  F028         	call	_lcdInst
 13569                           
 13570                           ;Test.c: 480: printf("%d", res);
 13571  002D0A  0E16               	movlw	low (STR_27+14)
 13572  002D0C  0100               	movlb	0	; () banked
 13573  002D0E  6F8E               	movwf	printf@f& (0+255),b
 13574  002D10  0EFE               	movlw	high (STR_27+14)
 13575  002D12  0100               	movlb	0	; () banked
 13576  002D14  6F8F               	movwf	(printf@f+1)& (0+255),b
 13577  002D16  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13578  002D1A  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13579  002D1E  ECFF  F00A         	call	_printf	;wreg free
 13580                           
 13581                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13582  002D22  0E05               	movlw	5
 13583  002D24  0100               	movlb	0	; () banked
 13584  002D26  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13585  002D28  0E0F               	movlw	15
 13586  002D2A  0100               	movlb	0	; () banked
 13587  002D2C  6FAB               	movwf	??_PusherTest& (0+255),b
 13588  002D2E  0EF1               	movlw	241
 13589  002D30                     u9677:
 13590  002D30  2EE8               	decfsz	wreg,f,c
 13591  002D32  D7FE               	bra	u9677
 13592  002D34  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13593  002D36  D7FC               	bra	u9677
 13594  002D38  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13595  002D3A  D7FA               	bra	u9677
 13596  002D3C                     l7911:
 13597  002D3C  B281               	btfsc	3969,1,c	;volatile
 13598  002D3E  D05D               	goto	l7931
 13599  002D40  D7A1               	goto	l7893
 13600  002D42                     l7913:
 13601                           
 13602                           ;Test.c: 487: readADC(0);
 13603  002D42  0E00               	movlw	0
 13604  002D44  EC8F  F027         	call	_readADC
 13605                           
 13606                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13607  002D48  50C3               	movf	4035,w,c	;volatile
 13608  002D4A  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13609  002D4E  0100               	movlb	0	; () banked
 13610  002D50  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13611  002D52  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13612  002D56  0100               	movlb	0	; () banked
 13613  002D58  6BAB               	clrf	??_PusherTest& (0+255),b
 13614  002D5A  0100               	movlb	0	; () banked
 13615  002D5C  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13616  002D5E  0100               	movlb	0	; () banked
 13617  002D60  6FAF               	movwf	PusherTest@res_1709& (0+255),b
 13618  002D62  0100               	movlb	0	; () banked
 13619  002D64  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13620  002D66  0100               	movlb	0	; () banked
 13621  002D68  6FB0               	movwf	(PusherTest@res_1709+1)& (0+255),b
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13625  002D6A  0100               	movlb	0	; () banked
 13626  002D6C  BFB0               	btfsc	(PusherTest@res_1709+1)& (0+255),7,b
 13627  002D6E  D00A               	goto	u6760
 13628  002D70  0E21               	movlw	33
 13629  002D72  0100               	movlb	0	; () banked
 13630  002D74  5DAF               	subwf	PusherTest@res_1709& (0+255),w,b
 13631  002D76  0E03               	movlw	3
 13632  002D78  0100               	movlb	0	; () banked
 13633  002D7A  59B0               	subwfb	(PusherTest@res_1709+1)& (0+255),w,b
 13634  002D7C  A0D8               	btfss	status,0,c
 13635  002D7E  D002               	goto	u6760
 13636  002D80  0E01               	movlw	1
 13637  002D82  D001               	goto	u6770
 13638  002D84                     u6760:
 13639  002D84  0E00               	movlw	0
 13640  002D86                     u6770:
 13641  002D86  0100               	movlb	0	; () banked
 13642  002D88  6FDE               	movwf	_IR_signal& (0+255),b
 13643  002D8A  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13644                           
 13645                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13646  002D8C  0E01               	movlw	1
 13647  002D8E  EC98  F028         	call	_lcdInst
 13648  002D92  0E68               	movlw	104
 13649  002D94  0100               	movlb	0	; () banked
 13650  002D96  6FAB               	movwf	??_PusherTest& (0+255),b
 13651  002D98  0EE4               	movlw	228
 13652  002D9A                     u9687:
 13653  002D9A  2EE8               	decfsz	wreg,f,c
 13654  002D9C  D7FE               	bra	u9687
 13655  002D9E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13656  002DA0  D7FC               	bra	u9687
 13657  002DA2  F000               	nop	
 13658  002DA4  0E80               	movlw	128
 13659  002DA6  EC98  F028         	call	_lcdInst
 13660                           
 13661                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13662  002DAA  0E5A               	movlw	low STR_80
 13663  002DAC  0100               	movlb	0	; () banked
 13664  002DAE  6F8E               	movwf	printf@f& (0+255),b
 13665  002DB0  0EFE               	movlw	high STR_80
 13666  002DB2  0100               	movlb	0	; () banked
 13667  002DB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13668  002DB6  C0DE  F090         	movff	_IR_signal,?_printf+2
 13669  002DBA  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13670  002DBE  ECFF  F00A         	call	_printf	;wreg free
 13671                           
 13672                           ;Test.c: 492: lcdInst(0b11000000);;
 13673  002DC2  0EC0               	movlw	192
 13674  002DC4  EC98  F028         	call	_lcdInst
 13675                           
 13676                           ;Test.c: 493: printf("%d", res);
 13677  002DC8  0E16               	movlw	low (STR_27+14)
 13678  002DCA  0100               	movlb	0	; () banked
 13679  002DCC  6F8E               	movwf	printf@f& (0+255),b
 13680  002DCE  0EFE               	movlw	high (STR_27+14)
 13681  002DD0  0100               	movlb	0	; () banked
 13682  002DD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13683  002DD4  C0AF  F090         	movff	PusherTest@res_1709,?_printf+2
 13684  002DD8  C0B0  F091         	movff	PusherTest@res_1709+1,?_printf+3
 13685  002DDC  ECFF  F00A         	call	_printf	;wreg free
 13686                           
 13687                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13688  002DE0  0E05               	movlw	5
 13689  002DE2  0100               	movlb	0	; () banked
 13690  002DE4  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13691  002DE6  0E0F               	movlw	15
 13692  002DE8  0100               	movlb	0	; () banked
 13693  002DEA  6FAB               	movwf	??_PusherTest& (0+255),b
 13694  002DEC  0EF1               	movlw	241
 13695  002DEE                     u9697:
 13696  002DEE  2EE8               	decfsz	wreg,f,c
 13697  002DF0  D7FE               	bra	u9697
 13698  002DF2  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13699  002DF4  D7FC               	bra	u9697
 13700  002DF6  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13701  002DF8  D7FA               	bra	u9697
 13702  002DFA                     l7931:
 13703  002DFA  A281               	btfss	3969,1,c	;volatile
 13704  002DFC  D7A2               	goto	l7913
 13705                           
 13706                           ;Test.c: 495: }
 13707                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13708  002DFE  3881               	swapf	3969,w,c	;volatile
 13709  002E00  0B0F               	andlw	15
 13710  002E02  0A0F               	xorlw	15
 13711  002E04  B4D8               	btfsc	status,2,c
 13712  002E06  D047               	goto	l1275
 13713                           
 13714                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13715                           
 13716                           ;Test.c: 498: }
 13717                           
 13718                           ;Test.c: 497: break;
 13719  002E08  3881               	swapf	3969,w,c	;volatile
 13720  002E0A  0B0F               	andlw	15
 13721  002E0C  0A05               	xorlw	5
 13722  002E0E  A4D8               	btfss	status,2,c
 13723  002E10  D01D               	goto	l7953
 13724                           
 13725                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13726  002E12  0E00               	movlw	0
 13727  002E14  0100               	movlb	0	; () banked
 13728  002E16  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13729  002E18  0E00               	movlw	0
 13730  002E1A  6FB1               	movwf	PusherTest@i& (0+255),b
 13731  002E1C                     l7943:
 13732                           
 13733                           ; BSR set to: 0
 13734  002E1C  0100               	movlb	0	; () banked
 13735  002E1E  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13736  002E20  D008               	goto	l1278
 13737  002E22  0EB8               	movlw	184
 13738  002E24  0100               	movlb	0	; () banked
 13739  002E26  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13740  002E28  0E0B               	movlw	11
 13741  002E2A  0100               	movlb	0	; () banked
 13742  002E2C  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13743  002E2E  B0D8               	btfsc	status,0,c
 13744  002E30  D02F               	goto	l1284
 13745  002E32                     l1278:
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13749  002E32  8889               	bsf	3977,4,c	;volatile
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13753  002E34  0EC8               	movlw	200
 13754  002E36                     u9707:
 13755  002E36  2EE8               	decfsz	wreg,f,c
 13756  002E38  D7FE               	bra	u9707
 13757                           
 13758                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13759  002E3A  9889               	bcf	3977,4,c	;volatile
 13760                           
 13761                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13762  002E3C  0E42               	movlw	66
 13763  002E3E                     u9717:
 13764  002E3E  2EE8               	decfsz	wreg,f,c
 13765  002E40  D7FE               	bra	u9717
 13766  002E42  D000               	nop2	
 13767  002E44  0100               	movlb	0	; () banked
 13768  002E46  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13769  002E48  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13770  002E4A  D7E8               	goto	l7943
 13771  002E4C                     l7953:
 13772                           
 13773                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13774  002E4C  3881               	swapf	3969,w,c	;volatile
 13775  002E4E  0B0F               	andlw	15
 13776  002E50  0A06               	xorlw	6
 13777  002E52  A4D8               	btfss	status,2,c
 13778  002E54  D01D               	goto	l1284
 13779                           
 13780                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13781  002E56  0E00               	movlw	0
 13782  002E58  0100               	movlb	0	; () banked
 13783  002E5A  6FB4               	movwf	(PusherTest@i_1713+1)& (0+255),b
 13784  002E5C  0E00               	movlw	0
 13785  002E5E  6FB3               	movwf	PusherTest@i_1713& (0+255),b
 13786  002E60                     l7957:
 13787                           
 13788                           ; BSR set to: 0
 13789  002E60  0100               	movlb	0	; () banked
 13790  002E62  BFB4               	btfsc	(PusherTest@i_1713+1)& (0+255),7,b
 13791  002E64  D008               	goto	l1282
 13792  002E66  0EB8               	movlw	184
 13793  002E68  0100               	movlb	0	; () banked
 13794  002E6A  5DB3               	subwf	PusherTest@i_1713& (0+255),w,b
 13795  002E6C  0E0B               	movlw	11
 13796  002E6E  0100               	movlb	0	; () banked
 13797  002E70  59B4               	subwfb	(PusherTest@i_1713+1)& (0+255),w,b
 13798  002E72  B0D8               	btfsc	status,0,c
 13799  002E74  D00D               	goto	l1284
 13800  002E76                     l1282:
 13801                           
 13802                           ; BSR set to: 0
 13803                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13804  002E76  8889               	bsf	3977,4,c	;volatile
 13805                           
 13806                           ; BSR set to: 0
 13807                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13808  002E78  0E9A               	movlw	154
 13809  002E7A                     u9727:
 13810  002E7A  2EE8               	decfsz	wreg,f,c
 13811  002E7C  D7FE               	bra	u9727
 13812  002E7E  D000               	nop2	
 13813                           
 13814                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13815  002E80  9889               	bcf	3977,4,c	;volatile
 13816                           
 13817                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13818  002E82  0E70               	movlw	112
 13819  002E84                     u9737:
 13820  002E84  2EE8               	decfsz	wreg,f,c
 13821  002E86  D7FE               	bra	u9737
 13822  002E88  0100               	movlb	0	; () banked
 13823  002E8A  4BB3               	infsnz	PusherTest@i_1713& (0+255),f,b
 13824  002E8C  2BB4               	incf	(PusherTest@i_1713+1)& (0+255),f,b
 13825  002E8E  D7E8               	goto	l7957
 13826  002E90                     l1284:
 13827  002E90  A281               	btfss	3969,1,c	;volatile
 13828  002E92  D7B3               	goto	l7931
 13829  002E94  D7FD               	goto	l1284
 13830  002E96                     l1275:
 13831                           
 13832                           ;Test.c: 519: }
 13833                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13834  002E96  9A8B               	bcf	3979,5,c	;volatile
 13835  002E98  0012               	return		;funcret
 13836  002E9A                     __end_of_PusherTest:
 13837                           	opt stack 0
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           intcon2	equ	0xFF1
 13846                           intcon3	equ	0xFF0
 13847                           postinc0	equ	0xFEE
 13848                           wreg	equ	0xFE8
 13849                           postdec1	equ	0xFE5
 13850                           fsr1l	equ	0xFE1
 13851                           indf2	equ	0xFDF
 13852                           postinc2	equ	0xFDE
 13853                           postdec2	equ	0xFDD
 13854                           fsr2h	equ	0xFDA
 13855                           fsr2l	equ	0xFD9
 13856                           status	equ	0xFD8
 13857                           
 13858 ;; *************** function _readADC *****************
 13859 ;; Defined at:
 13860 ;;		line 15 in file "ADCFunctionality.c"
 13861 ;; Parameters:    Size  Location     Type
 13862 ;;  channel         1    wreg     unsigned char 
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;  channel         1    1[BANK0 ] unsigned char 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      void 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0, cstack
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;Total ram usage:        2 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; Hardware stack levels required when called:    7
 13881 ;; This function calls:
 13882 ;;		Nothing
 13883 ;; This function is called by:
 13884 ;;		_readIR
 13885 ;;		_readMAG
 13886 ;;		_sensorTest
 13887 ;;		_PusherTest
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text43
 13892  004F1E                     __ptext43:
 13893                           	opt stack 0
 13894  004F1E                     _readADC:
 13895                           	opt stack 20
 13896                           
 13897                           ;incstack = 0
 13898                           ;readADC@channel stored from wreg
 13899  004F1E  0100               	movlb	0	; () banked
 13900  004F20  6F81               	movwf	readADC@channel& (0+255),b
 13901                           
 13902                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13903  004F22  0100               	movlb	0	; () banked
 13904  004F24  4581               	rlncf	readADC@channel& (0+255),w,b
 13905  004F26  46E8               	rlncf	wreg,f,c
 13906  004F28  0BFC               	andlw	252
 13907  004F2A  6EC2               	movwf	4034,c	;volatile
 13908                           
 13909                           ; BSR set to: 0
 13910                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13911  004F2C  80C2               	bsf	4034,0,c	;volatile
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13915  004F2E  82C2               	bsf	4034,1,c	;volatile
 13916                           
 13917                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13918  004F30  D009               	goto	l5789
 13919  004F32                     l5787:
 13920  004F32  0E34               	movlw	52
 13921  004F34  0100               	movlb	0	; () banked
 13922  004F36  6F80               	movwf	??_readADC& (0+255),b
 13923  004F38  0EF1               	movlw	241
 13924  004F3A                     u9747:
 13925  004F3A  2EE8               	decfsz	wreg,f,c
 13926  004F3C  D7FE               	bra	u9747
 13927  004F3E  2F80               	decfsz	??_readADC& (0+255),f,b
 13928  004F40  D7FC               	bra	u9747
 13929  004F42  D000               	nop2	
 13930  004F44                     l5789:
 13931  004F44  A2C2               	btfss	4034,1,c	;volatile
 13932  004F46  0012               	return	
 13933  004F48  D7F4               	goto	l5787
 13934  004F4A                     __end_of_readADC:
 13935                           	opt stack 0
 13936                           tblptru	equ	0xFF8
 13937                           tblptrh	equ	0xFF7
 13938                           tblptrl	equ	0xFF6
 13939                           tablat	equ	0xFF5
 13940                           prodh	equ	0xFF4
 13941                           prodl	equ	0xFF3
 13942                           intcon	equ	0xFF2
 13943                           intcon2	equ	0xFF1
 13944                           intcon3	equ	0xFF0
 13945                           postinc0	equ	0xFEE
 13946                           wreg	equ	0xFE8
 13947                           postdec1	equ	0xFE5
 13948                           fsr1l	equ	0xFE1
 13949                           indf2	equ	0xFDF
 13950                           postinc2	equ	0xFDE
 13951                           postdec2	equ	0xFDD
 13952                           fsr2h	equ	0xFDA
 13953                           fsr2l	equ	0xFD9
 13954                           status	equ	0xFD8
 13955                           
 13956 ;; *************** function _PortTests *****************
 13957 ;; Defined at:
 13958 ;;		line 409 in file "Test.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;		None
 13961 ;; Auto vars:     Size  Location     Type
 13962 ;;		None
 13963 ;; Return value:  Size  Location     Type
 13964 ;;                  1    wreg      void 
 13965 ;; Registers used:
 13966 ;;		wreg, status,2, status,0
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;Total ram usage:        2 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    7
 13979 ;; This function calls:
 13980 ;;		Nothing
 13981 ;; This function is called by:
 13982 ;;		_Test
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           	psect	text44
 13987  00444E                     __ptext44:
 13988                           	opt stack 0
 13989  00444E                     _PortTests:
 13990                           	opt stack 22
 13991  00444E                     l1233:
 13992  00444E  A281               	btfss	3969,1,c	;volatile
 13993  004450  D7FE               	goto	l1233
 13994                           
 13995                           ;Test.c: 413: var = PORTB >> 4;
 13996  004452  CF81 F080          	movff	3969,??_PortTests	;volatile
 13997  004456  0100               	movlb	0	; () banked
 13998  004458  3B80               	swapf	??_PortTests& (0+255),f,b
 13999  00445A  0E0F               	movlw	15
 14000  00445C  1780               	andwf	??_PortTests& (0+255),f,b
 14001  00445E  0100               	movlb	0	; () banked
 14002  004460  5180               	movf	??_PortTests& (0+255),w,b
 14003  004462  0100               	movlb	0	; () banked
 14004  004464  6FFA               	movwf	_var& (0+255),b
 14005  004466  6BFB               	clrf	(_var+1)& (0+255),b
 14006                           
 14007                           ;Test.c: 414: switch(var){
 14008  004468  D00C               	goto	l7971
 14009  00446A                     l1237:
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;Test.c: 416: LATEbits.LATE0 = 1;
 14013  00446A  808D               	bsf	3981,0,c	;volatile
 14014                           
 14015                           ;Test.c: 417: break;
 14016  00446C  D027               	goto	l1245
 14017  00446E                     l1239:
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;Test.c: 419: LATEbits.LATE1 = 1;
 14021  00446E  828D               	bsf	3981,1,c	;volatile
 14022                           
 14023                           ;Test.c: 420: break;
 14024  004470  D025               	goto	l1245
 14025  004472                     l1240:
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;Test.c: 422: LATDbits.LATD0 = 1;
 14029  004472  808C               	bsf	3980,0,c	;volatile
 14030                           
 14031                           ;Test.c: 423: break;
 14032  004474  D023               	goto	l1245
 14033  004476                     l1241:
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;Test.c: 425: LATAbits.LATA3 = 1;
 14037  004476  8689               	bsf	3977,3,c	;volatile
 14038                           
 14039                           ;Test.c: 426: break;
 14040  004478  D021               	goto	l1245
 14041  00447A                     l1242:
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;Test.c: 428: LATAbits.LATA4 = 1;
 14045  00447A  8889               	bsf	3977,4,c	;volatile
 14046                           
 14047                           ;Test.c: 429: break;
 14048  00447C  D01F               	goto	l1245
 14049  00447E                     l1243:
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;Test.c: 431: LATAbits.LATA5 = 1;
 14053  00447E  8A89               	bsf	3977,5,c	;volatile
 14054                           
 14055                           ; BSR set to: 0
 14056                           ;Test.c: 435: }
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;Test.c: 434: break;
 14060                           
 14061                           ;Test.c: 433: default:
 14062                           
 14063                           ;Test.c: 432: break;
 14064  004480  D01D               	goto	l1245
 14065  004482                     l7971:
 14066                           
 14067                           ; BSR set to: 0
 14068  004482  C0FA  F080         	movff	_var,??_PortTests
 14069  004486  C0FB  F081         	movff	_var+1,??_PortTests+1
 14070                           
 14071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14072                           ; Switch size 1, requested type "space"
 14073                           ; Number of cases is 1, Range of values is 0 to 0
 14074                           ; switch strategies available:
 14075                           ; Name         Instructions Cycles
 14076                           ; simple_byte            4     3 (average)
 14077                           ;	Chosen strategy is simple_byte
 14078  00448A  0100               	movlb	0	; () banked
 14079  00448C  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14080  00448E  0A00               	xorlw	0	; case 0
 14081  004490  A4D8               	btfss	status,2,c
 14082  004492  D014               	goto	l1245
 14083                           
 14084                           ; BSR set to: 0
 14085                           ; Switch size 1, requested type "space"
 14086                           ; Number of cases is 6, Range of values is 0 to 5
 14087                           ; switch strategies available:
 14088                           ; Name         Instructions Cycles
 14089                           ; simple_byte           19    10 (average)
 14090                           ;	Chosen strategy is simple_byte
 14091  004494  0100               	movlb	0	; () banked
 14092  004496  5180               	movf	??_PortTests& (0+255),w,b
 14093  004498  0A00               	xorlw	0	; case 0
 14094  00449A  B4D8               	btfsc	status,2,c
 14095  00449C  D7E6               	goto	l1237
 14096  00449E  0A01               	xorlw	1	; case 1
 14097  0044A0  B4D8               	btfsc	status,2,c
 14098  0044A2  D7E5               	goto	l1239
 14099  0044A4  0A03               	xorlw	3	; case 2
 14100  0044A6  B4D8               	btfsc	status,2,c
 14101  0044A8  D7E4               	goto	l1240
 14102  0044AA  0A01               	xorlw	1	; case 3
 14103  0044AC  B4D8               	btfsc	status,2,c
 14104  0044AE  D7E3               	goto	l1241
 14105  0044B0  0A07               	xorlw	7	; case 4
 14106  0044B2  B4D8               	btfsc	status,2,c
 14107  0044B4  D7E2               	goto	l1242
 14108  0044B6  0A01               	xorlw	1	; case 5
 14109  0044B8  B4D8               	btfsc	status,2,c
 14110  0044BA  D7E1               	goto	l1243
 14111  0044BC                     l1245:
 14112  0044BC  B281               	btfsc	3969,1,c	;volatile
 14113  0044BE  D7FE               	goto	l1245
 14114                           
 14115                           ;Test.c: 437: __nop();
 14116  0044C0  F000               	nop	
 14117                           
 14118                           ;Test.c: 438: __nop();
 14119  0044C2  F000               	nop	
 14120                           
 14121                           ;Test.c: 439: LATA = 0x00;
 14122  0044C4  0E00               	movlw	0
 14123  0044C6  6E89               	movwf	3977,c	;volatile
 14124                           
 14125                           ;Test.c: 440: LATE = 0x00;
 14126  0044C8  0E00               	movlw	0
 14127  0044CA  6E8D               	movwf	3981,c	;volatile
 14128                           
 14129                           ;Test.c: 441: LATD = 0x00; }
 14130  0044CC  0E00               	movlw	0
 14131  0044CE  6E8C               	movwf	3980,c	;volatile
 14132  0044D0  D7BE               	goto	l1233
 14133  0044D2                     __end_of_PortTests:
 14134                           	opt stack 0
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           intcon2	equ	0xFF1
 14143                           intcon3	equ	0xFF0
 14144                           postinc0	equ	0xFEE
 14145                           wreg	equ	0xFE8
 14146                           postdec1	equ	0xFE5
 14147                           fsr1l	equ	0xFE1
 14148                           indf2	equ	0xFDF
 14149                           postinc2	equ	0xFDE
 14150                           postdec2	equ	0xFDD
 14151                           fsr2h	equ	0xFDA
 14152                           fsr2l	equ	0xFD9
 14153                           status	equ	0xFD8
 14154                           
 14155 ;; *************** function _PortTestA5 *****************
 14156 ;; Defined at:
 14157 ;;		line 444 in file "Test.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;		None
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;		None
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  1    wreg      void 
 14164 ;; Registers used:
 14165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;Total ram usage:        1 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:   10
 14178 ;; This function calls:
 14179 ;;		_lcdInst
 14180 ;;		_printf
 14181 ;; This function is called by:
 14182 ;;		_Test
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           	psect	text45
 14187  0048AC                     __ptext45:
 14188                           	opt stack 0
 14189  0048AC                     _PortTestA5:
 14190                           	opt stack 19
 14191                           
 14192                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14193                           
 14194                           ;incstack = 0
 14195  0048AC  0E01               	movlw	1
 14196  0048AE  EC98  F028         	call	_lcdInst
 14197  0048B2  0E68               	movlw	104
 14198  0048B4  0100               	movlb	0	; () banked
 14199  0048B6  6FAB               	movwf	??_PortTestA5& (0+255),b
 14200  0048B8  0EE4               	movlw	228
 14201  0048BA                     u9757:
 14202  0048BA  2EE8               	decfsz	wreg,f,c
 14203  0048BC  D7FE               	bra	u9757
 14204  0048BE  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14205  0048C0  D7FC               	bra	u9757
 14206  0048C2  F000               	nop	
 14207  0048C4  0E80               	movlw	128
 14208  0048C6  EC98  F028         	call	_lcdInst
 14209                           
 14210                           ;Test.c: 446: printf("D WILL RETURN    ");
 14211  0048CA  0E37               	movlw	low STR_111
 14212  0048CC  0100               	movlb	0	; () banked
 14213  0048CE  6F8E               	movwf	printf@f& (0+255),b
 14214  0048D0  0EFB               	movlw	high STR_111
 14215  0048D2  0100               	movlb	0	; () banked
 14216  0048D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14217  0048D6  ECFF  F00A         	call	_printf	;wreg free
 14218                           
 14219                           ;Test.c: 447: lcdInst(0b11000000);;
 14220  0048DA  0EC0               	movlw	192
 14221  0048DC  EC98  F028         	call	_lcdInst
 14222                           
 14223                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14224  0048E0  0E49               	movlw	low STR_112
 14225  0048E2  0100               	movlb	0	; () banked
 14226  0048E4  6F8E               	movwf	printf@f& (0+255),b
 14227  0048E6  0EFB               	movlw	high STR_112
 14228  0048E8  0100               	movlb	0	; () banked
 14229  0048EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14230  0048EC  ECFF  F00A         	call	_printf	;wreg free
 14231  0048F0                     l1254:
 14232  0048F0  A281               	btfss	3969,1,c	;volatile
 14233  0048F2  D7FE               	goto	l1254
 14234                           
 14235                           ;Test.c: 453: }
 14236                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14237  0048F4  3881               	swapf	3969,w,c	;volatile
 14238  0048F6  0B0F               	andlw	15
 14239  0048F8  0A0F               	xorlw	15
 14240  0048FA  B4D8               	btfsc	status,2,c
 14241  0048FC  0012               	return	
 14242                           
 14243                           ;Test.c: 457: else{
 14244                           ;Test.c: 458: LATAbits.LATA5 = 1;
 14245                           
 14246                           ;Test.c: 456: }
 14247                           
 14248                           ;Test.c: 455: break;
 14249  0048FE  8A89               	bsf	3977,5,c	;volatile
 14250  004900                     l1260:
 14251  004900  B281               	btfsc	3969,1,c	;volatile
 14252  004902  D7FE               	goto	l1260
 14253                           
 14254                           ;Test.c: 461: }
 14255                           ;Test.c: 462: LATAbits.LATA5 = 0;
 14256  004904  9A89               	bcf	3977,5,c	;volatile
 14257  004906  D7F4               	goto	l1254
 14258  004908                     __end_of_PortTestA5:
 14259                           	opt stack 0
 14260                           tblptru	equ	0xFF8
 14261                           tblptrh	equ	0xFF7
 14262                           tblptrl	equ	0xFF6
 14263                           tablat	equ	0xFF5
 14264                           prodh	equ	0xFF4
 14265                           prodl	equ	0xFF3
 14266                           intcon	equ	0xFF2
 14267                           intcon2	equ	0xFF1
 14268                           intcon3	equ	0xFF0
 14269                           postinc0	equ	0xFEE
 14270                           wreg	equ	0xFE8
 14271                           postdec1	equ	0xFE5
 14272                           fsr1l	equ	0xFE1
 14273                           indf2	equ	0xFDF
 14274                           postinc2	equ	0xFDE
 14275                           postdec2	equ	0xFDD
 14276                           fsr2h	equ	0xFDA
 14277                           fsr2l	equ	0xFD9
 14278                           status	equ	0xFD8
 14279                           
 14280 ;; *************** function _EEPROMTest *****************
 14281 ;; Defined at:
 14282 ;;		line 577 in file "Test.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;		None
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;		None
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  1    wreg      void 
 14289 ;; Registers used:
 14290 ;;		None
 14291 ;; Tracked objects:
 14292 ;;		On entry : 0/0
 14293 ;;		On exit  : 0/0
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14300 ;;Total ram usage:        0 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; Hardware stack levels required when called:    7
 14303 ;; This function calls:
 14304 ;;		Nothing
 14305 ;; This function is called by:
 14306 ;;		_Test
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text46
 14311  005194                     __ptext46:
 14312                           	opt stack 0
 14313  005194                     _EEPROMTest:
 14314                           	opt stack 22
 14315                           
 14316                           ;incstack = 0
 14317  005194  0012               	return		;funcret
 14318  005196                     __end_of_EEPROMTest:
 14319                           	opt stack 0
 14320                           tblptru	equ	0xFF8
 14321                           tblptrh	equ	0xFF7
 14322                           tblptrl	equ	0xFF6
 14323                           tablat	equ	0xFF5
 14324                           prodh	equ	0xFF4
 14325                           prodl	equ	0xFF3
 14326                           intcon	equ	0xFF2
 14327                           intcon2	equ	0xFF1
 14328                           intcon3	equ	0xFF0
 14329                           postinc0	equ	0xFEE
 14330                           wreg	equ	0xFE8
 14331                           postdec1	equ	0xFE5
 14332                           fsr1l	equ	0xFE1
 14333                           indf2	equ	0xFDF
 14334                           postinc2	equ	0xFDE
 14335                           postdec2	equ	0xFDD
 14336                           fsr2h	equ	0xFDA
 14337                           fsr2l	equ	0xFD9
 14338                           status	equ	0xFD8
 14339                           
 14340 ;; *************** function _BothServos *****************
 14341 ;; Defined at:
 14342 ;;		line 352 in file "Test.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14360 ;;Total ram usage:        2 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:   10
 14363 ;; This function calls:
 14364 ;;		_initServos
 14365 ;;		_lcdInst
 14366 ;;		_printf
 14367 ;;		_updateServoPosition
 14368 ;; This function is called by:
 14369 ;;		_Test
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text47
 14374  001A36                     __ptext47:
 14375                           	opt stack 0
 14376  001A36                     _BothServos:
 14377                           	opt stack 19
 14378                           
 14379                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14380                           
 14381                           ;incstack = 0
 14382  001A36  0E01               	movlw	1
 14383  001A38  EC98  F028         	call	_lcdInst
 14384  001A3C  0E68               	movlw	104
 14385  001A3E  0100               	movlb	0	; () banked
 14386  001A40  6FAB               	movwf	??_BothServos& (0+255),b
 14387  001A42  0EE4               	movlw	228
 14388  001A44                     u9767:
 14389  001A44  2EE8               	decfsz	wreg,f,c
 14390  001A46  D7FE               	bra	u9767
 14391  001A48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14392  001A4A  D7FC               	bra	u9767
 14393  001A4C  F000               	nop	
 14394  001A4E  0E80               	movlw	128
 14395  001A50  EC98  F028         	call	_lcdInst
 14396                           
 14397                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14398  001A54  0EB4               	movlw	low STR_110
 14399  001A56  0100               	movlb	0	; () banked
 14400  001A58  6F8E               	movwf	printf@f& (0+255),b
 14401  001A5A  0EFC               	movlw	high STR_110
 14402  001A5C  0100               	movlb	0	; () banked
 14403  001A5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14404  001A60  ECFF  F00A         	call	_printf	;wreg free
 14405                           
 14406                           ;Test.c: 355: TMR1ON = 1;
 14407  001A64  80CD               	bsf	4045,0,c	;volatile
 14408                           
 14409                           ;Test.c: 356: TMR3ON = 1;
 14410  001A66  80B1               	bsf	4017,0,c	;volatile
 14411                           
 14412                           ;Test.c: 357: machine_state = Sorting_state;
 14413  001A68  0E01               	movlw	1
 14414  001A6A  0100               	movlb	0	; () banked
 14415  001A6C  6FFC               	movwf	_machine_state& (0+255),b
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;Test.c: 358: was_low_1 = 0;
 14419  001A6E  0E00               	movlw	0
 14420  001A70  6E7A               	movwf	_was_low_1+1,c	;volatile
 14421  001A72  0E00               	movlw	0
 14422  001A74  6E79               	movwf	_was_low_1,c	;volatile
 14423                           
 14424                           ; BSR set to: 0
 14425                           ;Test.c: 359: was_low_3 = 0;
 14426  001A76  0E00               	movlw	0
 14427  001A78  6E7C               	movwf	_was_low_3+1,c	;volatile
 14428  001A7A  0E00               	movlw	0
 14429  001A7C  6E7B               	movwf	_was_low_3,c	;volatile
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;Test.c: 365: initServos();
 14433  001A7E  EC84  F024         	call	_initServos	;wreg free
 14434                           
 14435                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14436  001A82  0E3D               	movlw	61
 14437  001A84  0100               	movlb	0	; () banked
 14438  001A86  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14439  001A88  0EE1               	movlw	225
 14440  001A8A  0100               	movlb	0	; () banked
 14441  001A8C  6FAB               	movwf	??_BothServos& (0+255),b
 14442  001A8E  0E3F               	movlw	63
 14443  001A90                     u9777:
 14444  001A90  2EE8               	decfsz	wreg,f,c
 14445  001A92  D7FE               	bra	u9777
 14446  001A94  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14447  001A96  D7FC               	bra	u9777
 14448  001A98  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14449  001A9A  D7FA               	bra	u9777
 14450  001A9C  D000               	nop2	
 14451                           
 14452                           ;Test.c: 368: updateServoPosition(500, 1);
 14453  001A9E  0E01               	movlw	1
 14454  001AA0  0100               	movlb	0	; () banked
 14455  001AA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14456  001AA4  0EF4               	movlw	244
 14457  001AA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14458  001AA8  0E00               	movlw	0
 14459  001AAA  0100               	movlb	0	; () banked
 14460  001AAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14461  001AAE  0E01               	movlw	1
 14462  001AB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14463  001AB2  ECE6  F022         	call	_updateServoPosition	;wreg free
 14464                           
 14465                           ;Test.c: 369: updateServoPosition(1050, 3);
 14466  001AB6  0E04               	movlw	4
 14467  001AB8  0100               	movlb	0	; () banked
 14468  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14469  001ABC  0E1A               	movlw	26
 14470  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14471  001AC0  0E00               	movlw	0
 14472  001AC2  0100               	movlb	0	; () banked
 14473  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14474  001AC6  0E03               	movlw	3
 14475  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14476  001ACA  ECE6  F022         	call	_updateServoPosition	;wreg free
 14477                           
 14478                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14479  001ACE  0E1F               	movlw	31
 14480  001AD0  0100               	movlb	0	; () banked
 14481  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14482  001AD4  0E71               	movlw	113
 14483  001AD6  0100               	movlb	0	; () banked
 14484  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 14485  001ADA  0E1E               	movlw	30
 14486  001ADC                     u9787:
 14487  001ADC  2EE8               	decfsz	wreg,f,c
 14488  001ADE  D7FE               	bra	u9787
 14489  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14490  001AE2  D7FC               	bra	u9787
 14491  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14492  001AE6  D7FA               	bra	u9787
 14493  001AE8  F000               	nop	
 14494                           
 14495                           ;Test.c: 371: updateServoPosition(1260, 3);
 14496  001AEA  0E04               	movlw	4
 14497  001AEC  0100               	movlb	0	; () banked
 14498  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14499  001AF0  0EEC               	movlw	236
 14500  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14501  001AF4  0E00               	movlw	0
 14502  001AF6  0100               	movlb	0	; () banked
 14503  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14504  001AFA  0E03               	movlw	3
 14505  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14506  001AFE  ECE6  F022         	call	_updateServoPosition	;wreg free
 14507                           
 14508                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14509  001B02  0E66               	movlw	102
 14510  001B04  0100               	movlb	0	; () banked
 14511  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14512  001B08  0E76               	movlw	118
 14513  001B0A  0100               	movlb	0	; () banked
 14514  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 14515  001B0E  0EC1               	movlw	193
 14516  001B10                     u9797:
 14517  001B10  2EE8               	decfsz	wreg,f,c
 14518  001B12  D7FE               	bra	u9797
 14519  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14520  001B16  D7FC               	bra	u9797
 14521  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14522  001B1A  D7FA               	bra	u9797
 14523                           
 14524                           ;Test.c: 373: updateServoPosition(1050, 3);
 14525  001B1C  0E04               	movlw	4
 14526  001B1E  0100               	movlb	0	; () banked
 14527  001B20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14528  001B22  0E1A               	movlw	26
 14529  001B24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14530  001B26  0E00               	movlw	0
 14531  001B28  0100               	movlb	0	; () banked
 14532  001B2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14533  001B2C  0E03               	movlw	3
 14534  001B2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14535  001B30  ECE6  F022         	call	_updateServoPosition	;wreg free
 14536                           
 14537                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14538  001B34  0E1F               	movlw	31
 14539  001B36  0100               	movlb	0	; () banked
 14540  001B38  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14541  001B3A  0E71               	movlw	113
 14542  001B3C  0100               	movlb	0	; () banked
 14543  001B3E  6FAB               	movwf	??_BothServos& (0+255),b
 14544  001B40  0E1E               	movlw	30
 14545  001B42                     u9807:
 14546  001B42  2EE8               	decfsz	wreg,f,c
 14547  001B44  D7FE               	bra	u9807
 14548  001B46  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14549  001B48  D7FC               	bra	u9807
 14550  001B4A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14551  001B4C  D7FA               	bra	u9807
 14552  001B4E  F000               	nop	
 14553                           
 14554                           ;Test.c: 376: updateServoPosition(850, 1);
 14555  001B50  0E03               	movlw	3
 14556  001B52  0100               	movlb	0	; () banked
 14557  001B54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14558  001B56  0E52               	movlw	82
 14559  001B58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14560  001B5A  0E00               	movlw	0
 14561  001B5C  0100               	movlb	0	; () banked
 14562  001B5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14563  001B60  0E01               	movlw	1
 14564  001B62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14565  001B64  ECE6  F022         	call	_updateServoPosition	;wreg free
 14566                           
 14567                           ;Test.c: 377: updateServoPosition(1050, 3);
 14568  001B68  0E04               	movlw	4
 14569  001B6A  0100               	movlb	0	; () banked
 14570  001B6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14571  001B6E  0E1A               	movlw	26
 14572  001B70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14573  001B72  0E00               	movlw	0
 14574  001B74  0100               	movlb	0	; () banked
 14575  001B76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14576  001B78  0E03               	movlw	3
 14577  001B7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14578  001B7C  ECE6  F022         	call	_updateServoPosition	;wreg free
 14579                           
 14580                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14581  001B80  0E1F               	movlw	31
 14582  001B82  0100               	movlb	0	; () banked
 14583  001B84  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14584  001B86  0E71               	movlw	113
 14585  001B88  0100               	movlb	0	; () banked
 14586  001B8A  6FAB               	movwf	??_BothServos& (0+255),b
 14587  001B8C  0E1E               	movlw	30
 14588  001B8E                     u9817:
 14589  001B8E  2EE8               	decfsz	wreg,f,c
 14590  001B90  D7FE               	bra	u9817
 14591  001B92  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14592  001B94  D7FC               	bra	u9817
 14593  001B96  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14594  001B98  D7FA               	bra	u9817
 14595  001B9A  F000               	nop	
 14596                           
 14597                           ;Test.c: 379: updateServoPosition(1260, 3);
 14598  001B9C  0E04               	movlw	4
 14599  001B9E  0100               	movlb	0	; () banked
 14600  001BA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14601  001BA2  0EEC               	movlw	236
 14602  001BA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14603  001BA6  0E00               	movlw	0
 14604  001BA8  0100               	movlb	0	; () banked
 14605  001BAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14606  001BAC  0E03               	movlw	3
 14607  001BAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14608  001BB0  ECE6  F022         	call	_updateServoPosition	;wreg free
 14609                           
 14610                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14611  001BB4  0E66               	movlw	102
 14612  001BB6  0100               	movlb	0	; () banked
 14613  001BB8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14614  001BBA  0E76               	movlw	118
 14615  001BBC  0100               	movlb	0	; () banked
 14616  001BBE  6FAB               	movwf	??_BothServos& (0+255),b
 14617  001BC0  0EC1               	movlw	193
 14618  001BC2                     u9827:
 14619  001BC2  2EE8               	decfsz	wreg,f,c
 14620  001BC4  D7FE               	bra	u9827
 14621  001BC6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14622  001BC8  D7FC               	bra	u9827
 14623  001BCA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14624  001BCC  D7FA               	bra	u9827
 14625                           
 14626                           ;Test.c: 381: updateServoPosition(1050, 3);
 14627  001BCE  0E04               	movlw	4
 14628  001BD0  0100               	movlb	0	; () banked
 14629  001BD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14630  001BD4  0E1A               	movlw	26
 14631  001BD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14632  001BD8  0E00               	movlw	0
 14633  001BDA  0100               	movlb	0	; () banked
 14634  001BDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14635  001BDE  0E03               	movlw	3
 14636  001BE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14637  001BE2  ECE6  F022         	call	_updateServoPosition	;wreg free
 14638                           
 14639                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14640  001BE6  0E1F               	movlw	31
 14641  001BE8  0100               	movlb	0	; () banked
 14642  001BEA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14643  001BEC  0E71               	movlw	113
 14644  001BEE  0100               	movlb	0	; () banked
 14645  001BF0  6FAB               	movwf	??_BothServos& (0+255),b
 14646  001BF2  0E1E               	movlw	30
 14647  001BF4                     u9837:
 14648  001BF4  2EE8               	decfsz	wreg,f,c
 14649  001BF6  D7FE               	bra	u9837
 14650  001BF8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14651  001BFA  D7FC               	bra	u9837
 14652  001BFC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14653  001BFE  D7FA               	bra	u9837
 14654  001C00  F000               	nop	
 14655                           
 14656                           ;Test.c: 384: updateServoPosition(1200, 1);
 14657  001C02  0E04               	movlw	4
 14658  001C04  0100               	movlb	0	; () banked
 14659  001C06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14660  001C08  0EB0               	movlw	176
 14661  001C0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14662  001C0C  0E00               	movlw	0
 14663  001C0E  0100               	movlb	0	; () banked
 14664  001C10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14665  001C12  0E01               	movlw	1
 14666  001C14  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14667  001C16  ECE6  F022         	call	_updateServoPosition	;wreg free
 14668                           
 14669                           ;Test.c: 385: updateServoPosition(1050, 3);
 14670  001C1A  0E04               	movlw	4
 14671  001C1C  0100               	movlb	0	; () banked
 14672  001C1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14673  001C20  0E1A               	movlw	26
 14674  001C22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14675  001C24  0E00               	movlw	0
 14676  001C26  0100               	movlb	0	; () banked
 14677  001C28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14678  001C2A  0E03               	movlw	3
 14679  001C2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14680  001C2E  ECE6  F022         	call	_updateServoPosition	;wreg free
 14681                           
 14682                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14683  001C32  0E3D               	movlw	61
 14684  001C34  0100               	movlb	0	; () banked
 14685  001C36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14686  001C38  0EE1               	movlw	225
 14687  001C3A  0100               	movlb	0	; () banked
 14688  001C3C  6FAB               	movwf	??_BothServos& (0+255),b
 14689  001C3E  0E3F               	movlw	63
 14690  001C40                     u9847:
 14691  001C40  2EE8               	decfsz	wreg,f,c
 14692  001C42  D7FE               	bra	u9847
 14693  001C44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14694  001C46  D7FC               	bra	u9847
 14695  001C48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14696  001C4A  D7FA               	bra	u9847
 14697  001C4C  D000               	nop2	
 14698                           
 14699                           ;Test.c: 388: updateServoPosition(1670, 1);
 14700  001C4E  0E06               	movlw	6
 14701  001C50  0100               	movlb	0	; () banked
 14702  001C52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14703  001C54  0E86               	movlw	134
 14704  001C56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14705  001C58  0E00               	movlw	0
 14706  001C5A  0100               	movlb	0	; () banked
 14707  001C5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14708  001C5E  0E01               	movlw	1
 14709  001C60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14710  001C62  ECE6  F022         	call	_updateServoPosition	;wreg free
 14711                           
 14712                           ;Test.c: 389: updateServoPosition(1050, 3);
 14713  001C66  0E04               	movlw	4
 14714  001C68  0100               	movlb	0	; () banked
 14715  001C6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14716  001C6C  0E1A               	movlw	26
 14717  001C6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14718  001C70  0E00               	movlw	0
 14719  001C72  0100               	movlb	0	; () banked
 14720  001C74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14721  001C76  0E03               	movlw	3
 14722  001C78  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14723  001C7A  ECE6  F022         	call	_updateServoPosition	;wreg free
 14724                           
 14725                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14726  001C7E  0E1F               	movlw	31
 14727  001C80  0100               	movlb	0	; () banked
 14728  001C82  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14729  001C84  0E71               	movlw	113
 14730  001C86  0100               	movlb	0	; () banked
 14731  001C88  6FAB               	movwf	??_BothServos& (0+255),b
 14732  001C8A  0E1E               	movlw	30
 14733  001C8C                     u9857:
 14734  001C8C  2EE8               	decfsz	wreg,f,c
 14735  001C8E  D7FE               	bra	u9857
 14736  001C90  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14737  001C92  D7FC               	bra	u9857
 14738  001C94  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14739  001C96  D7FA               	bra	u9857
 14740  001C98  F000               	nop	
 14741                           
 14742                           ;Test.c: 391: updateServoPosition(1390, 3);
 14743  001C9A  0E05               	movlw	5
 14744  001C9C  0100               	movlb	0	; () banked
 14745  001C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14746  001CA0  0E6E               	movlw	110
 14747  001CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14748  001CA4  0E00               	movlw	0
 14749  001CA6  0100               	movlb	0	; () banked
 14750  001CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14751  001CAA  0E03               	movlw	3
 14752  001CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14753  001CAE  ECE6  F022         	call	_updateServoPosition	;wreg free
 14754                           
 14755                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14756  001CB2  0E66               	movlw	102
 14757  001CB4  0100               	movlb	0	; () banked
 14758  001CB6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14759  001CB8  0E76               	movlw	118
 14760  001CBA  0100               	movlb	0	; () banked
 14761  001CBC  6FAB               	movwf	??_BothServos& (0+255),b
 14762  001CBE  0EC1               	movlw	193
 14763  001CC0                     u9867:
 14764  001CC0  2EE8               	decfsz	wreg,f,c
 14765  001CC2  D7FE               	bra	u9867
 14766  001CC4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14767  001CC6  D7FC               	bra	u9867
 14768  001CC8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14769  001CCA  D7FA               	bra	u9867
 14770                           
 14771                           ;Test.c: 393: updateServoPosition(1050, 3);
 14772  001CCC  0E04               	movlw	4
 14773  001CCE  0100               	movlb	0	; () banked
 14774  001CD0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14775  001CD2  0E1A               	movlw	26
 14776  001CD4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14777  001CD6  0E00               	movlw	0
 14778  001CD8  0100               	movlb	0	; () banked
 14779  001CDA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14780  001CDC  0E03               	movlw	3
 14781  001CDE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14782  001CE0  ECE6  F022         	call	_updateServoPosition	;wreg free
 14783                           
 14784                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14785  001CE4  0E1F               	movlw	31
 14786  001CE6  0100               	movlb	0	; () banked
 14787  001CE8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14788  001CEA  0E71               	movlw	113
 14789  001CEC  0100               	movlb	0	; () banked
 14790  001CEE  6FAB               	movwf	??_BothServos& (0+255),b
 14791  001CF0  0E1E               	movlw	30
 14792  001CF2                     u9877:
 14793  001CF2  2EE8               	decfsz	wreg,f,c
 14794  001CF4  D7FE               	bra	u9877
 14795  001CF6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14796  001CF8  D7FC               	bra	u9877
 14797  001CFA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14798  001CFC  D7FA               	bra	u9877
 14799  001CFE  F000               	nop	
 14800                           
 14801                           ;Test.c: 396: updateServoPosition(2400, 1);
 14802  001D00  0E09               	movlw	9
 14803  001D02  0100               	movlb	0	; () banked
 14804  001D04  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14805  001D06  0E60               	movlw	96
 14806  001D08  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14807  001D0A  0E00               	movlw	0
 14808  001D0C  0100               	movlb	0	; () banked
 14809  001D0E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14810  001D10  0E01               	movlw	1
 14811  001D12  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14812  001D14  ECE6  F022         	call	_updateServoPosition	;wreg free
 14813                           
 14814                           ;Test.c: 397: updateServoPosition(1050, 3);
 14815  001D18  0E04               	movlw	4
 14816  001D1A  0100               	movlb	0	; () banked
 14817  001D1C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14818  001D1E  0E1A               	movlw	26
 14819  001D20  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14820  001D22  0E00               	movlw	0
 14821  001D24  0100               	movlb	0	; () banked
 14822  001D26  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14823  001D28  0E03               	movlw	3
 14824  001D2A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14825  001D2C  ECE6  F022         	call	_updateServoPosition	;wreg free
 14826                           
 14827                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14828  001D30  0E1F               	movlw	31
 14829  001D32  0100               	movlb	0	; () banked
 14830  001D34  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14831  001D36  0E71               	movlw	113
 14832  001D38  0100               	movlb	0	; () banked
 14833  001D3A  6FAB               	movwf	??_BothServos& (0+255),b
 14834  001D3C  0E1E               	movlw	30
 14835  001D3E                     u9887:
 14836  001D3E  2EE8               	decfsz	wreg,f,c
 14837  001D40  D7FE               	bra	u9887
 14838  001D42  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14839  001D44  D7FC               	bra	u9887
 14840  001D46  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14841  001D48  D7FA               	bra	u9887
 14842  001D4A  F000               	nop	
 14843                           
 14844                           ;Test.c: 399: updateServoPosition(1390, 3);
 14845  001D4C  0E05               	movlw	5
 14846  001D4E  0100               	movlb	0	; () banked
 14847  001D50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14848  001D52  0E6E               	movlw	110
 14849  001D54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14850  001D56  0E00               	movlw	0
 14851  001D58  0100               	movlb	0	; () banked
 14852  001D5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14853  001D5C  0E03               	movlw	3
 14854  001D5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14855  001D60  ECE6  F022         	call	_updateServoPosition	;wreg free
 14856                           
 14857                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14858  001D64  0E66               	movlw	102
 14859  001D66  0100               	movlb	0	; () banked
 14860  001D68  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14861  001D6A  0E76               	movlw	118
 14862  001D6C  0100               	movlb	0	; () banked
 14863  001D6E  6FAB               	movwf	??_BothServos& (0+255),b
 14864  001D70  0EC1               	movlw	193
 14865  001D72                     u9897:
 14866  001D72  2EE8               	decfsz	wreg,f,c
 14867  001D74  D7FE               	bra	u9897
 14868  001D76  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14869  001D78  D7FC               	bra	u9897
 14870  001D7A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14871  001D7C  D7FA               	bra	u9897
 14872                           
 14873                           ;Test.c: 401: updateServoPosition(1050, 3);
 14874  001D7E  0E04               	movlw	4
 14875  001D80  0100               	movlb	0	; () banked
 14876  001D82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14877  001D84  0E1A               	movlw	26
 14878  001D86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14879  001D88  0E00               	movlw	0
 14880  001D8A  0100               	movlb	0	; () banked
 14881  001D8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14882  001D8E  0E03               	movlw	3
 14883  001D90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14884  001D92  ECE6  F022         	call	_updateServoPosition	;wreg free
 14885                           
 14886                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14887  001D96  0E1F               	movlw	31
 14888  001D98  0100               	movlb	0	; () banked
 14889  001D9A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14890  001D9C  0E71               	movlw	113
 14891  001D9E  0100               	movlb	0	; () banked
 14892  001DA0  6FAB               	movwf	??_BothServos& (0+255),b
 14893  001DA2  0E1E               	movlw	30
 14894  001DA4                     u9907:
 14895  001DA4  2EE8               	decfsz	wreg,f,c
 14896  001DA6  D7FE               	bra	u9907
 14897  001DA8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14898  001DAA  D7FC               	bra	u9907
 14899  001DAC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14900  001DAE  D7FA               	bra	u9907
 14901  001DB0  F000               	nop	
 14902                           
 14903                           ;Test.c: 404: TMR1ON = 0;
 14904  001DB2  90CD               	bcf	4045,0,c	;volatile
 14905                           
 14906                           ;Test.c: 405: TMR3ON = 0;
 14907  001DB4  90B1               	bcf	4017,0,c	;volatile
 14908                           
 14909                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14910  001DB6  9EF2               	bcf	intcon,7,c	;volatile
 14911  001DB8  0012               	return		;funcret
 14912  001DBA                     __end_of_BothServos:
 14913                           	opt stack 0
 14914                           tblptru	equ	0xFF8
 14915                           tblptrh	equ	0xFF7
 14916                           tblptrl	equ	0xFF6
 14917                           tablat	equ	0xFF5
 14918                           prodh	equ	0xFF4
 14919                           prodl	equ	0xFF3
 14920                           intcon	equ	0xFF2
 14921                           intcon2	equ	0xFF1
 14922                           intcon3	equ	0xFF0
 14923                           postinc0	equ	0xFEE
 14924                           wreg	equ	0xFE8
 14925                           postdec1	equ	0xFE5
 14926                           fsr1l	equ	0xFE1
 14927                           indf2	equ	0xFDF
 14928                           postinc2	equ	0xFDE
 14929                           postdec2	equ	0xFDD
 14930                           fsr2h	equ	0xFDA
 14931                           fsr2l	equ	0xFD9
 14932                           status	equ	0xFD8
 14933                           
 14934 ;; *************** function _initServos *****************
 14935 ;; Defined at:
 14936 ;;		line 434 in file "sort.c"
 14937 ;; Parameters:    Size  Location     Type
 14938 ;;		None
 14939 ;; Auto vars:     Size  Location     Type
 14940 ;;		None
 14941 ;; Return value:  Size  Location     Type
 14942 ;;                  1    wreg      void 
 14943 ;; Registers used:
 14944 ;;		wreg, status,2, status,0, cstack
 14945 ;; Tracked objects:
 14946 ;;		On entry : 0/0
 14947 ;;		On exit  : 0/0
 14948 ;;		Unchanged: 0/0
 14949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;Total ram usage:        1 bytes
 14955 ;; Hardware stack levels used:    1
 14956 ;; Hardware stack levels required when called:    8
 14957 ;; This function calls:
 14958 ;;		_updateServoPosition
 14959 ;; This function is called by:
 14960 ;;		_Loading
 14961 ;;		_BothServos
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text48
 14966  004908                     __ptext48:
 14967                           	opt stack 0
 14968  004908                     _initServos:
 14969                           	opt stack 20
 14970                           
 14971                           ;sort.c: 435: updateServoPosition(1200, 1);
 14972                           
 14973                           ;incstack = 0
 14974  004908  0E04               	movlw	4
 14975  00490A  0100               	movlb	0	; () banked
 14976  00490C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14977  00490E  0EB0               	movlw	176
 14978  004910  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14979  004912  0E00               	movlw	0
 14980  004914  0100               	movlb	0	; () banked
 14981  004916  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14982  004918  0E01               	movlw	1
 14983  00491A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14984  00491C  ECE6  F022         	call	_updateServoPosition	;wreg free
 14985                           
 14986                           ;sort.c: 436: updateServoPosition(1050, 3);
 14987  004920  0E04               	movlw	4
 14988  004922  0100               	movlb	0	; () banked
 14989  004924  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14990  004926  0E1A               	movlw	26
 14991  004928  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14992  00492A  0E00               	movlw	0
 14993  00492C  0100               	movlb	0	; () banked
 14994  00492E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14995  004930  0E03               	movlw	3
 14996  004932  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14997  004934  ECE6  F022         	call	_updateServoPosition	;wreg free
 14998                           
 14999                           ;sort.c: 437: TMR1ON = 1;
 15000  004938  80CD               	bsf	4045,0,c	;volatile
 15001                           
 15002                           ;sort.c: 438: was_low_1 = 0;
 15003  00493A  0E00               	movlw	0
 15004  00493C  6E7A               	movwf	_was_low_1+1,c	;volatile
 15005  00493E  0E00               	movlw	0
 15006  004940  6E79               	movwf	_was_low_1,c	;volatile
 15007                           
 15008                           ;sort.c: 439: _delay((unsigned long)((5)*(32000000/4000.0)));
 15009  004942  0E34               	movlw	52
 15010  004944  0100               	movlb	0	; () banked
 15011  004946  6F88               	movwf	??_initServos& (0+255),b
 15012  004948  0EF1               	movlw	241
 15013  00494A                     u9917:
 15014  00494A  2EE8               	decfsz	wreg,f,c
 15015  00494C  D7FE               	bra	u9917
 15016  00494E  2F88               	decfsz	??_initServos& (0+255),f,b
 15017  004950  D7FC               	bra	u9917
 15018  004952  D000               	nop2	
 15019                           
 15020                           ;sort.c: 440: TMR3ON = 1;
 15021  004954  80B1               	bsf	4017,0,c	;volatile
 15022                           
 15023                           ;sort.c: 441: was_low_3 = 0;
 15024  004956  0E00               	movlw	0
 15025  004958  6E7C               	movwf	_was_low_3+1,c	;volatile
 15026  00495A  0E00               	movlw	0
 15027  00495C  6E7B               	movwf	_was_low_3,c	;volatile
 15028                           
 15029                           ;sort.c: 443: LATCbits.LATC0 = 1;
 15030  00495E  808B               	bsf	3979,0,c	;volatile
 15031  004960  0012               	return		;funcret
 15032  004962                     __end_of_initServos:
 15033                           	opt stack 0
 15034                           tblptru	equ	0xFF8
 15035                           tblptrh	equ	0xFF7
 15036                           tblptrl	equ	0xFF6
 15037                           tablat	equ	0xFF5
 15038                           prodh	equ	0xFF4
 15039                           prodl	equ	0xFF3
 15040                           intcon	equ	0xFF2
 15041                           intcon2	equ	0xFF1
 15042                           intcon3	equ	0xFF0
 15043                           postinc0	equ	0xFEE
 15044                           wreg	equ	0xFE8
 15045                           postdec1	equ	0xFE5
 15046                           fsr1l	equ	0xFE1
 15047                           indf2	equ	0xFDF
 15048                           postinc2	equ	0xFDE
 15049                           postdec2	equ	0xFDD
 15050                           fsr2h	equ	0xFDA
 15051                           fsr2l	equ	0xFD9
 15052                           status	equ	0xFD8
 15053                           
 15054 ;; *************** function _updateServoPosition *****************
 15055 ;; Defined at:
 15056 ;;		line 511 in file "sort.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;  time_us         2    0[BANK0 ] int 
 15059 ;;  timer           2    2[BANK0 ] int 
 15060 ;; Auto vars:     Size  Location     Type
 15061 ;;  my_time         2    6[BANK0 ] unsigned int 
 15062 ;; Return value:  Size  Location     Type
 15063 ;;                  1    wreg      void 
 15064 ;; Registers used:
 15065 ;;		wreg, status,2, status,0
 15066 ;; Tracked objects:
 15067 ;;		On entry : 0/0
 15068 ;;		On exit  : 0/0
 15069 ;;		Unchanged: 0/0
 15070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15071 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15072 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15075 ;;Total ram usage:        8 bytes
 15076 ;; Hardware stack levels used:    1
 15077 ;; Hardware stack levels required when called:    7
 15078 ;; This function calls:
 15079 ;;		Nothing
 15080 ;; This function is called by:
 15081 ;;		_Distribution
 15082 ;;		_initServos
 15083 ;;		_actuatorTest
 15084 ;;		_BothServos
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           	psect	text49
 15089  0045CC                     __ptext49:
 15090                           	opt stack 0
 15091  0045CC                     _updateServoPosition:
 15092                           	opt stack 20
 15093                           
 15094                           ;sort.c: 512: unsigned int my_time = 65535 - time_us;
 15095                           
 15096                           ;incstack = 0
 15097  0045CC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15098  0045D0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15099  0045D4  0100               	movlb	0	; () banked
 15100  0045D6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15101  0045D8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15102  0045DA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15103  0045DC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15104  0045DE  0EFF               	movlw	255
 15105  0045E0  0100               	movlb	0	; () banked
 15106  0045E2  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15107  0045E4  0100               	movlb	0	; () banked
 15108  0045E6  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15109  0045E8  0EFF               	movlw	255
 15110  0045EA  0100               	movlb	0	; () banked
 15111  0045EC  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15112  0045EE  0100               	movlb	0	; () banked
 15113  0045F0  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15114                           
 15115                           ;sort.c: 513: switch(timer){
 15116  0045F2  D015               	goto	l6153
 15117  0045F4                     l6151:
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;sort.c: 515: servoTimes[0] = my_time >> 8;
 15121  0045F4  0100               	movlb	0	; () banked
 15122  0045F6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15123  0045F8  0101               	movlb	1	; () banked
 15124  0045FA  6F1C               	movwf	_servoTimes& (0+255),b
 15125  0045FC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15126                           
 15127                           ;sort.c: 516: servoTimes[1] = my_time & 0xFF;
 15128  0045FE  0100               	movlb	0	; () banked
 15129  004600  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15130  004602  0101               	movlb	1	; () banked
 15131  004604  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15132  004606  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15133  004608                     l857:
 15134                           
 15135                           ;sort.c: 518: servoTimes[2] = my_time >> 8;
 15136  004608  0100               	movlb	0	; () banked
 15137  00460A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15138  00460C  0101               	movlb	1	; () banked
 15139  00460E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15140  004610  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15141                           
 15142                           ;sort.c: 519: servoTimes[3] = my_time & 0xFF;
 15143  004612  0100               	movlb	0	; () banked
 15144  004614  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15145  004616  0101               	movlb	1	; () banked
 15146  004618  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15147  00461A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15148                           
 15149                           ;sort.c: 520: }
 15150  00461C  0012               	return	
 15151  00461E                     l6153:
 15152  00461E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15153  004622  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15154                           
 15155                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15156                           ; Switch size 1, requested type "space"
 15157                           ; Number of cases is 1, Range of values is 0 to 0
 15158                           ; switch strategies available:
 15159                           ; Name         Instructions Cycles
 15160                           ; simple_byte            4     3 (average)
 15161                           ;	Chosen strategy is simple_byte
 15162  004626  0100               	movlb	0	; () banked
 15163  004628  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15164  00462A  0A00               	xorlw	0	; case 0
 15165  00462C  A4D8               	btfss	status,2,c
 15166  00462E  0012               	return	
 15167                           
 15168                           ; BSR set to: 0
 15169                           ; Switch size 1, requested type "space"
 15170                           ; Number of cases is 2, Range of values is 1 to 3
 15171                           ; switch strategies available:
 15172                           ; Name         Instructions Cycles
 15173                           ; simple_byte            7     4 (average)
 15174                           ;	Chosen strategy is simple_byte
 15175  004630  0100               	movlb	0	; () banked
 15176  004632  5184               	movf	??_updateServoPosition& (0+255),w,b
 15177  004634  0A01               	xorlw	1	; case 1
 15178  004636  B4D8               	btfsc	status,2,c
 15179  004638  D7DD               	goto	l6151
 15180  00463A  0A02               	xorlw	2	; case 3
 15181  00463C  A4D8               	btfss	status,2,c
 15182  00463E  0012               	return	
 15183  004640  D7E3               	goto	l857
 15184  004642                     __end_of_updateServoPosition:
 15185                           	opt stack 0
 15186                           tblptru	equ	0xFF8
 15187                           tblptrh	equ	0xFF7
 15188                           tblptrl	equ	0xFF6
 15189                           tablat	equ	0xFF5
 15190                           prodh	equ	0xFF4
 15191                           prodl	equ	0xFF3
 15192                           intcon	equ	0xFF2
 15193                           intcon2	equ	0xFF1
 15194                           intcon3	equ	0xFF0
 15195                           postinc0	equ	0xFEE
 15196                           wreg	equ	0xFE8
 15197                           postdec1	equ	0xFE5
 15198                           fsr1l	equ	0xFE1
 15199                           indf2	equ	0xFDF
 15200                           postinc2	equ	0xFDE
 15201                           postdec2	equ	0xFDD
 15202                           fsr2h	equ	0xFDA
 15203                           fsr2l	equ	0xFD9
 15204                           status	equ	0xFD8
 15205                           
 15206 ;; *************** function _BlockerTest *****************
 15207 ;; Defined at:
 15208 ;;		line 589 in file "Test.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;  i               2   44[BANK0 ] int 
 15213 ;;  cond_flag       2   48[BANK0 ] int 
 15214 ;;  cam_flag        2   46[BANK0 ] int 
 15215 ;; Return value:  Size  Location     Type
 15216 ;;                  1    wreg      void 
 15217 ;; Registers used:
 15218 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15225 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15227 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15228 ;;Total ram usage:        7 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:   10
 15231 ;; This function calls:
 15232 ;;		_lcdInst
 15233 ;;		_printf
 15234 ;; This function is called by:
 15235 ;;		_Test
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           	psect	text50
 15240  0036F8                     __ptext50:
 15241                           	opt stack 0
 15242  0036F8                     _BlockerTest:
 15243                           	opt stack 19
 15244                           
 15245                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15246                           
 15247                           ;incstack = 0
 15248  0036F8  0E01               	movlw	1
 15249  0036FA  EC98  F028         	call	_lcdInst
 15250  0036FE  0E68               	movlw	104
 15251  003700  0100               	movlb	0	; () banked
 15252  003702  6FAB               	movwf	??_BlockerTest& (0+255),b
 15253  003704  0EE4               	movlw	228
 15254  003706                     u9927:
 15255  003706  2EE8               	decfsz	wreg,f,c
 15256  003708  D7FE               	bra	u9927
 15257  00370A  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15258  00370C  D7FC               	bra	u9927
 15259  00370E  F000               	nop	
 15260  003710  0E80               	movlw	128
 15261  003712  EC98  F028         	call	_lcdInst
 15262                           
 15263                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15264  003716  0E7F               	movlw	low STR_122
 15265  003718  0100               	movlb	0	; () banked
 15266  00371A  6F8E               	movwf	printf@f& (0+255),b
 15267  00371C  0EFB               	movlw	high STR_122
 15268  00371E  0100               	movlb	0	; () banked
 15269  003720  6F8F               	movwf	(printf@f+1)& (0+255),b
 15270  003722  A480               	btfss	3968,2,c	;volatile
 15271  003724  D004               	goto	u6890
 15272  003726  0100               	movlb	0	; () banked
 15273  003728  6BAB               	clrf	??_BlockerTest& (0+255),b
 15274  00372A  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15275  00372C  D002               	goto	u6898
 15276  00372E                     u6890:
 15277  00372E  0100               	movlb	0	; () banked
 15278  003730  6BAB               	clrf	??_BlockerTest& (0+255),b
 15279  003732                     u6898:
 15280  003732  0100               	movlb	0	; () banked
 15281  003734  51AB               	movf	??_BlockerTest& (0+255),w,b
 15282  003736  0100               	movlb	0	; () banked
 15283  003738  6F90               	movwf	(?_printf+2)& (0+255),b
 15284  00373A  6B91               	clrf	(?_printf+3)& (0+255),b
 15285  00373C  ECFF  F00A         	call	_printf	;wreg free
 15286                           
 15287                           ;Test.c: 592: lcdInst(0b11000000);;
 15288  003740  0EC0               	movlw	192
 15289  003742  EC98  F028         	call	_lcdInst
 15290                           
 15291                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15292  003746  0E6D               	movlw	low STR_123
 15293  003748  0100               	movlb	0	; () banked
 15294  00374A  6F8E               	movwf	printf@f& (0+255),b
 15295  00374C  0EFB               	movlw	high STR_123
 15296  00374E  0100               	movlb	0	; () banked
 15297  003750  6F8F               	movwf	(printf@f+1)& (0+255),b
 15298  003752  ECFF  F00A         	call	_printf	;wreg free
 15299                           
 15300                           ;Test.c: 594: int cam_flag = 1;
 15301  003756  0E00               	movlw	0
 15302  003758  0100               	movlb	0	; () banked
 15303  00375A  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15304  00375C  0E01               	movlw	1
 15305  00375E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15306                           
 15307                           ; BSR set to: 0
 15308                           ;Test.c: 595: int cond_flag = 0;
 15309  003760  0E00               	movlw	0
 15310  003762  0100               	movlb	0	; () banked
 15311  003764  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15312  003766  0E00               	movlw	0
 15313  003768  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15317                           
 15318                           ;Test.c: 596: while(1){
 15319  00376A  D018               	goto	l8091
 15320  00376C                     l8087:
 15321                           
 15322                           ;Test.c: 598: lcdInst(0b10000000);;
 15323  00376C  0E80               	movlw	128
 15324  00376E  EC98  F028         	call	_lcdInst
 15325                           
 15326                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15327  003772  0E7F               	movlw	low STR_122
 15328  003774  0100               	movlb	0	; () banked
 15329  003776  6F8E               	movwf	printf@f& (0+255),b
 15330  003778  0EFB               	movlw	high STR_122
 15331  00377A  0100               	movlb	0	; () banked
 15332  00377C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15333  00377E  A480               	btfss	3968,2,c	;volatile
 15334  003780  D004               	goto	u6900
 15335  003782  0100               	movlb	0	; () banked
 15336  003784  6BAB               	clrf	??_BlockerTest& (0+255),b
 15337  003786  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15338  003788  D002               	goto	u6908
 15339  00378A                     u6900:
 15340  00378A  0100               	movlb	0	; () banked
 15341  00378C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15342  00378E                     u6908:
 15343  00378E  0100               	movlb	0	; () banked
 15344  003790  51AB               	movf	??_BlockerTest& (0+255),w,b
 15345  003792  0100               	movlb	0	; () banked
 15346  003794  6F90               	movwf	(?_printf+2)& (0+255),b
 15347  003796  6B91               	clrf	(?_printf+3)& (0+255),b
 15348  003798  ECFF  F00A         	call	_printf	;wreg free
 15349  00379C                     l8091:
 15350  00379C  A281               	btfss	3969,1,c	;volatile
 15351  00379E  D7E6               	goto	l8087
 15352                           
 15353                           ;Test.c: 600: }
 15354                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15355  0037A0  3881               	swapf	3969,w,c	;volatile
 15356  0037A2  0B0F               	andlw	15
 15357  0037A4  0A0F               	xorlw	15
 15358  0037A6  B4D8               	btfsc	status,2,c
 15359  0037A8  0012               	return	
 15360                           
 15361                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15362                           
 15363                           ;Test.c: 603: }
 15364                           
 15365                           ;Test.c: 602: break;
 15366  0037AA  3881               	swapf	3969,w,c	;volatile
 15367  0037AC  0B0F               	andlw	15
 15368  0037AE  06E8               	decf	wreg,f,c
 15369  0037B0  A4D8               	btfss	status,2,c
 15370  0037B2  D016               	goto	l8109
 15371                           
 15372                           ;Test.c: 605: if(cond_flag){
 15373  0037B4  0100               	movlb	0	; () banked
 15374  0037B6  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15375  0037B8  0100               	movlb	0	; () banked
 15376  0037BA  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15377  0037BC  B4D8               	btfsc	status,2,c
 15378  0037BE  D007               	goto	l1330
 15379                           
 15380                           ; BSR set to: 0
 15381                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15382  0037C0  8689               	bsf	3977,3,c	;volatile
 15383  0037C2  D006               	goto	l8107
 15384  0037C4                     u6951:
 15385  0037C4  0E01               	movlw	1
 15386  0037C6                     u6960:
 15387  0037C6  0100               	movlb	0	; () banked
 15388  0037C8  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15389  0037CA  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15390                           
 15391                           ;Test.c: 608: }
 15392  0037CC  D054               	goto	l8133
 15393  0037CE                     l1330:
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;Test.c: 609: else{
 15397                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15398  0037CE  9689               	bcf	3977,3,c	;volatile
 15399  0037D0                     l8107:
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;Test.c: 611: cond_flag = !cond_flag;
 15403  0037D0  0100               	movlb	0	; () banked
 15404  0037D2  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15405  0037D4  0100               	movlb	0	; () banked
 15406  0037D6  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15407  0037D8  B4D8               	btfsc	status,2,c
 15408  0037DA  D7F4               	goto	u6951
 15409  0037DC  0E00               	movlw	0
 15410  0037DE  D7F3               	goto	u6960
 15411  0037E0                     l8109:
 15412                           
 15413                           ;Test.c: 614: else{
 15414                           ;Test.c: 615: if(cam_flag){
 15415  0037E0  0100               	movlb	0	; () banked
 15416  0037E2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15417  0037E4  0100               	movlb	0	; () banked
 15418  0037E6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15419  0037E8  B4D8               	btfsc	status,2,c
 15420  0037EA  D007               	goto	l8115
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15424  0037EC  808B               	bsf	3979,0,c	;volatile
 15425  0037EE  D023               	goto	l8127
 15426  0037F0                     u7001:
 15427  0037F0  0E01               	movlw	1
 15428  0037F2                     u7010:
 15429  0037F2  0100               	movlb	0	; () banked
 15430  0037F4  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15431  0037F6  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15432                           
 15433                           ;Test.c: 618: }
 15434  0037F8  D03E               	goto	l8133
 15435  0037FA                     l8115:
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;Test.c: 619: else{
 15439                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15440  0037FA  0E00               	movlw	0
 15441  0037FC  0100               	movlb	0	; () banked
 15442  0037FE  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15443  003800  0E00               	movlw	0
 15444  003802  6FAC               	movwf	BlockerTest@i& (0+255),b
 15445  003804                     l8117:
 15446                           
 15447                           ; BSR set to: 0
 15448  003804  0100               	movlb	0	; () banked
 15449  003806  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15450  003808  D008               	goto	l1335
 15451  00380A  0E88               	movlw	136
 15452  00380C  0100               	movlb	0	; () banked
 15453  00380E  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15454  003810  0E13               	movlw	19
 15455  003812  0100               	movlb	0	; () banked
 15456  003814  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15457  003816  B0D8               	btfsc	status,0,c
 15458  003818  D00D               	goto	l1336
 15459  00381A                     l1335:
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;Test.c: 621: {
 15463                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15464  00381A  808B               	bsf	3979,0,c	;volatile
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15468  00381C  0E1A               	movlw	26
 15469  00381E                     u9937:
 15470  00381E  2EE8               	decfsz	wreg,f,c
 15471  003820  D7FE               	bra	u9937
 15472  003822  D000               	nop2	
 15473                           
 15474                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15475  003824  908B               	bcf	3979,0,c	;volatile
 15476                           
 15477                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15478  003826  0EF0               	movlw	240
 15479  003828                     u9947:
 15480  003828  2EE8               	decfsz	wreg,f,c
 15481  00382A  D7FE               	bra	u9947
 15482  00382C  0100               	movlb	0	; () banked
 15483  00382E  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15484  003830  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15485  003832  D7E8               	goto	l8117
 15486  003834                     l1336:
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;Test.c: 626: }
 15490                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15491  003834  908B               	bcf	3979,0,c	;volatile
 15492  003836                     l8127:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;Test.c: 628: cam_flag = !cam_flag;
 15496  003836  0100               	movlb	0	; () banked
 15497  003838  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15498  00383A  0100               	movlb	0	; () banked
 15499  00383C  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15500  00383E  B4D8               	btfsc	status,2,c
 15501  003840  D7D7               	goto	u7001
 15502  003842  0E00               	movlw	0
 15503  003844  D7D6               	goto	u7010
 15504  003846                     l8129:
 15505                           
 15506                           ;Test.c: 633: lcdInst(0b10000000);;
 15507  003846  0E80               	movlw	128
 15508  003848  EC98  F028         	call	_lcdInst
 15509                           
 15510                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15511  00384C  0E7F               	movlw	low STR_122
 15512  00384E  0100               	movlb	0	; () banked
 15513  003850  6F8E               	movwf	printf@f& (0+255),b
 15514  003852  0EFB               	movlw	high STR_122
 15515  003854  0100               	movlb	0	; () banked
 15516  003856  6F8F               	movwf	(printf@f+1)& (0+255),b
 15517  003858  A480               	btfss	3968,2,c	;volatile
 15518  00385A  D004               	goto	u7060
 15519  00385C  0100               	movlb	0	; () banked
 15520  00385E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15521  003860  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15522  003862  D002               	goto	u7068
 15523  003864                     u7060:
 15524  003864  0100               	movlb	0	; () banked
 15525  003866  6BAB               	clrf	??_BlockerTest& (0+255),b
 15526  003868                     u7068:
 15527  003868  0100               	movlb	0	; () banked
 15528  00386A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15529  00386C  0100               	movlb	0	; () banked
 15530  00386E  6F90               	movwf	(?_printf+2)& (0+255),b
 15531  003870  6B91               	clrf	(?_printf+3)& (0+255),b
 15532  003872  ECFF  F00A         	call	_printf	;wreg free
 15533  003876                     l8133:
 15534  003876  A281               	btfss	3969,1,c	;volatile
 15535  003878  D791               	goto	l8091
 15536  00387A  D7E5               	goto	l8129
 15537  00387C                     __end_of_BlockerTest:
 15538                           	opt stack 0
 15539                           tblptru	equ	0xFF8
 15540                           tblptrh	equ	0xFF7
 15541                           tblptrl	equ	0xFF6
 15542                           tablat	equ	0xFF5
 15543                           prodh	equ	0xFF4
 15544                           prodl	equ	0xFF3
 15545                           intcon	equ	0xFF2
 15546                           intcon2	equ	0xFF1
 15547                           intcon3	equ	0xFF0
 15548                           postinc0	equ	0xFEE
 15549                           wreg	equ	0xFE8
 15550                           postdec1	equ	0xFE5
 15551                           fsr1l	equ	0xFE1
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           fsr2h	equ	0xFDA
 15556                           fsr2l	equ	0xFD9
 15557                           status	equ	0xFD8
 15558                           
 15559 ;; *************** function _printf *****************
 15560 ;; Defined at:
 15561 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15562 ;; Parameters:    Size  Location     Type
 15563 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15564 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15565 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15566 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15567 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15568 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15569 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15570 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15571 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15572 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15573 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15574 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15575 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15576 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15577 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15578 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15579 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15580 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15581 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15582 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15583 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15584 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15585 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15586 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15587 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15588 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;  tmpval          4    0        struct .
 15591 ;;  width           2   41[BANK0 ] int 
 15592 ;;  val             2   37[BANK0 ] unsigned int 
 15593 ;;  len             2   35[BANK0 ] unsigned int 
 15594 ;;  ap              2   33[BANK0 ] PTR void [1]
 15595 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15596 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15597 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15598 ;;  c               1   40[BANK0 ] char 
 15599 ;;  flag            1   39[BANK0 ] unsigned char 
 15600 ;;  prec            1   30[BANK0 ] char 
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  2   14[BANK0 ] int 
 15603 ;; Registers used:
 15604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15610 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15611 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15612 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;Total ram usage:       29 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    9
 15617 ;; This function calls:
 15618 ;;		___lwdiv
 15619 ;;		___lwmod
 15620 ;;		___wmul
 15621 ;;		_isdigit
 15622 ;;		_putch
 15623 ;; This function is called by:
 15624 ;;		_UI
 15625 ;;		_change_state_to_menu_start
 15626 ;;		_change_state_to_menu_12
 15627 ;;		_change_state_to_menu_22
 15628 ;;		_printRTC
 15629 ;;		_EEPROM_write
 15630 ;;		_Test
 15631 ;;		_algorithmTest
 15632 ;;		_sensorTest
 15633 ;;		_actuatorTest
 15634 ;;		_BothServos
 15635 ;;		_PortTestA5
 15636 ;;		_PusherTest
 15637 ;;		_SpeedTest
 15638 ;;		_BlockerTest
 15639 ;;		_ToggleTestA5
 15640 ;; This function uses a non-reentrant model
 15641 ;;
 15642                           
 15643                           	psect	text51
 15644  0015FE                     __ptext51:
 15645                           	opt stack 0
 15646  0015FE                     _printf:
 15647                           	opt stack 18
 15648                           
 15649                           ;doprnt.c: 466: va_list ap;
 15650                           ;doprnt.c: 499: signed char c;
 15651                           ;doprnt.c: 501: int width;
 15652                           ;doprnt.c: 506: signed char prec;
 15653                           ;doprnt.c: 508: unsigned char flag;
 15654                           ;doprnt.c: 523: union {
 15655                           ;doprnt.c: 524: unsigned long vd;
 15656                           ;doprnt.c: 525: double integ;
 15657                           ;doprnt.c: 526: } tmpval;
 15658                           ;doprnt.c: 528: unsigned int val;
 15659                           ;doprnt.c: 529: unsigned len;
 15660                           ;doprnt.c: 530: const char * cp;
 15661                           ;doprnt.c: 533: *ap = __va_start();
 15662                           
 15663                           ;incstack = 0
 15664  0015FE  0E90               	movlw	low (?_printf+2)
 15665  001600  0100               	movlb	0	; () banked
 15666  001602  6FA1               	movwf	printf@ap& (0+255),b
 15667  001604  0E00               	movlw	high (?_printf+2)
 15668  001606  0100               	movlb	0	; () banked
 15669  001608  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15670                           
 15671                           ;doprnt.c: 536: while(c = *f++) {
 15672  00160A  D205               	goto	l6111
 15673  00160C                     l5981:
 15674                           
 15675                           ; BSR set to: 0
 15676                           ;doprnt.c: 538: if(c != '%')
 15677  00160C  0E25               	movlw	37
 15678  00160E  0100               	movlb	0	; () banked
 15679  001610  19A8               	xorwf	printf@c& (0+255),w,b
 15680  001612  B4D8               	btfsc	status,2,c
 15681  001614  D005               	goto	l5985
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;doprnt.c: 540: {
 15685                           ;doprnt.c: 541: (putch(c) );
 15686  001616  0100               	movlb	0	; () banked
 15687  001618  51A8               	movf	printf@c& (0+255),w,b
 15688  00161A  EC90  F028         	call	_putch
 15689                           
 15690                           ;doprnt.c: 542: continue;
 15691  00161E  D1FB               	goto	l6111
 15692  001620                     l5985:
 15693                           
 15694                           ;doprnt.c: 543: }
 15695                           ;doprnt.c: 546: width = 0;
 15696  001620  0E00               	movlw	0
 15697  001622  0100               	movlb	0	; () banked
 15698  001624  6FAA               	movwf	(printf@width+1)& (0+255),b
 15699  001626  0E00               	movlw	0
 15700  001628  6FA9               	movwf	printf@width& (0+255),b
 15701                           
 15702                           ;doprnt.c: 548: flag = 0;
 15703  00162A  0E00               	movlw	0
 15704  00162C  0100               	movlb	0	; () banked
 15705  00162E  6FA7               	movwf	printf@flag& (0+255),b
 15706                           
 15707                           ; BSR set to: 0
 15708                           ;doprnt.c: 551: switch(*f) {
 15709                           
 15710                           ;doprnt.c: 550: for(;;) {
 15711  001630  D005               	goto	l5991
 15712  001632                     l5987:
 15713                           
 15714                           ;doprnt.c: 580: flag |= 0x04;
 15715  001632  0100               	movlb	0	; () banked
 15716  001634  85A7               	bsf	printf@flag& (0+255),2,b
 15717                           
 15718                           ;doprnt.c: 581: f++;
 15719  001636  0100               	movlb	0	; () banked
 15720  001638  4B8E               	infsnz	printf@f& (0+255),f,b
 15721  00163A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15722  00163C                     l5991:
 15723  00163C  C08E  FFF6         	movff	printf@f,tblptrl
 15724  001640  C08F  FFF7         	movff	printf@f+1,tblptrh
 15725  001644                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15726  001644  6AF8               	clrf	tblptru,c
 15727  001646                     	endif
 15728  001646                     	if	0	;tblptru may be non-zero
 15729  001646                     	endif
 15730  001646  0008               	tblrd		*
 15731  001648  50F5               	movf	tablat,w,c
 15732                           
 15733                           ; Switch size 1, requested type "space"
 15734                           ; Number of cases is 1, Range of values is 48 to 48
 15735                           ; switch strategies available:
 15736                           ; Name         Instructions Cycles
 15737                           ; simple_byte            4     3 (average)
 15738                           ;	Chosen strategy is simple_byte
 15739  00164A  0A30               	xorlw	48	; case 48
 15740  00164C  B4D8               	btfsc	status,2,c
 15741  00164E  D7F1               	goto	l5987
 15742                           
 15743                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15744                           
 15745                           ;doprnt.c: 586: }
 15746                           
 15747                           ;doprnt.c: 585: break;
 15748  001650  C08E  FFF6         	movff	printf@f,tblptrl
 15749  001654  C08F  FFF7         	movff	printf@f+1,tblptrh
 15750  001658                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15751  001658  6AF8               	clrf	tblptru,c
 15752  00165A                     	endif
 15753  00165A                     	if	0	;tblptru may be non-zero
 15754  00165A                     	endif
 15755  00165A  0008               	tblrd		*
 15756  00165C  50F5               	movf	tablat,w,c
 15757  00165E  ECA5  F027         	call	_isdigit
 15758  001662  A0D8               	btfss	status,0,c
 15759  001664  D0D2               	goto	l6039
 15760                           
 15761                           ;doprnt.c: 598: width = 0;
 15762  001666  0E00               	movlw	0
 15763  001668  0100               	movlb	0	; () banked
 15764  00166A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15765  00166C  0E00               	movlw	0
 15766  00166E  6FA9               	movwf	printf@width& (0+255),b
 15767  001670                     l5997:
 15768                           
 15769                           ;doprnt.c: 600: width *= 10;
 15770  001670  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15771  001674  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15772  001678  0E00               	movlw	0
 15773  00167A  0100               	movlb	0	; () banked
 15774  00167C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15775  00167E  0E0A               	movlw	10
 15776  001680  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15777  001682  EC0F  F026         	call	___wmul	;wreg free
 15778  001686  C080  F0A9         	movff	?___wmul,printf@width
 15779  00168A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15780                           
 15781                           ;doprnt.c: 601: width += *f++ - '0';
 15782  00168E  0ED0               	movlw	208
 15783  001690  0100               	movlb	0	; () banked
 15784  001692  6F9A               	movwf	??_printf& (0+255),b
 15785  001694  0EFF               	movlw	255
 15786  001696  0100               	movlb	0	; () banked
 15787  001698  6F9B               	movwf	(??_printf+1)& (0+255),b
 15788  00169A  C08E  FFF6         	movff	printf@f,tblptrl
 15789  00169E  C08F  FFF7         	movff	printf@f+1,tblptrh
 15790  0016A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15791  0016A2  6AF8               	clrf	tblptru,c
 15792  0016A4                     	endif
 15793  0016A4                     	if	0	;tblptru may be non-zero
 15794  0016A4                     	endif
 15795  0016A4  0008               	tblrd		*
 15796  0016A6  50F5               	movf	tablat,w,c
 15797  0016A8  0100               	movlb	0	; () banked
 15798  0016AA  6F9C               	movwf	(??_printf+2)& (0+255),b
 15799  0016AC  6B9D               	clrf	(??_printf+3)& (0+255),b
 15800  0016AE  0100               	movlb	0	; () banked
 15801  0016B0  519A               	movf	??_printf& (0+255),w,b
 15802  0016B2  0100               	movlb	0	; () banked
 15803  0016B4  279C               	addwf	(??_printf+2)& (0+255),f,b
 15804  0016B6  0100               	movlb	0	; () banked
 15805  0016B8  519B               	movf	(??_printf+1)& (0+255),w,b
 15806  0016BA  0100               	movlb	0	; () banked
 15807  0016BC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15808  0016BE  0100               	movlb	0	; () banked
 15809  0016C0  519C               	movf	(??_printf+2)& (0+255),w,b
 15810  0016C2  0100               	movlb	0	; () banked
 15811  0016C4  27A9               	addwf	printf@width& (0+255),f,b
 15812  0016C6  0100               	movlb	0	; () banked
 15813  0016C8  519D               	movf	(??_printf+3)& (0+255),w,b
 15814  0016CA  0100               	movlb	0	; () banked
 15815  0016CC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15816                           
 15817                           ; BSR set to: 0
 15818  0016CE  0100               	movlb	0	; () banked
 15819  0016D0  4B8E               	infsnz	printf@f& (0+255),f,b
 15820  0016D2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15824  0016D4  C08E  FFF6         	movff	printf@f,tblptrl
 15825  0016D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 15826  0016DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15827  0016DC  6AF8               	clrf	tblptru,c
 15828  0016DE                     	endif
 15829  0016DE                     	if	0	;tblptru may be non-zero
 15830  0016DE                     	endif
 15831  0016DE  0008               	tblrd		*
 15832  0016E0  50F5               	movf	tablat,w,c
 15833  0016E2  ECA5  F027         	call	_isdigit
 15834  0016E6  A0D8               	btfss	status,0,c
 15835  0016E8  D090               	goto	l6039
 15836  0016EA  D7C2               	goto	l5997
 15837  0016EC                     l6005:
 15838                           
 15839                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15840  0016EC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15841  0016F0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15842  0016F4  CFDE F09F          	movff	postinc2,printf@cp
 15843  0016F8  CFDD F0A0          	movff	postdec2,printf@cp+1
 15844  0016FC  0E02               	movlw	2
 15845  0016FE  0100               	movlb	0	; () banked
 15846  001700  27A1               	addwf	printf@ap& (0+255),f,b
 15847  001702  0E00               	movlw	0
 15848  001704  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15849                           
 15850                           ; BSR set to: 0
 15851                           ;doprnt.c: 740: if(!cp)
 15852  001706  0100               	movlb	0	; () banked
 15853  001708  519F               	movf	printf@cp& (0+255),w,b
 15854  00170A  0100               	movlb	0	; () banked
 15855  00170C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15856  00170E  A4D8               	btfss	status,2,c
 15857  001710  D006               	goto	l6013
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;doprnt.c: 741: cp = "(null)";
 15861  001712  0EB6               	movlw	low STR_126
 15862  001714  0100               	movlb	0	; () banked
 15863  001716  6F9F               	movwf	printf@cp& (0+255),b
 15864  001718  0EFF               	movlw	high STR_126
 15865  00171A  0100               	movlb	0	; () banked
 15866  00171C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15867  00171E                     l6013:
 15868                           
 15869                           ; BSR set to: 0
 15870                           ;doprnt.c: 745: len = 0;
 15871  00171E  0E00               	movlw	0
 15872  001720  0100               	movlb	0	; () banked
 15873  001722  6FA4               	movwf	(printf@len+1)& (0+255),b
 15874  001724  0E00               	movlw	0
 15875  001726  6FA3               	movwf	printf@len& (0+255),b
 15876                           
 15877                           ;doprnt.c: 746: while(cp[len])
 15878  001728  D003               	goto	l6017
 15879  00172A                     l6015:
 15880                           
 15881                           ;doprnt.c: 747: len++;
 15882  00172A  0100               	movlb	0	; () banked
 15883  00172C  4BA3               	infsnz	printf@len& (0+255),f,b
 15884  00172E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15885  001730                     l6017:
 15886                           
 15887                           ; BSR set to: 0
 15888  001730  0100               	movlb	0	; () banked
 15889  001732  51A3               	movf	printf@len& (0+255),w,b
 15890  001734  0100               	movlb	0	; () banked
 15891  001736  259F               	addwf	printf@cp& (0+255),w,b
 15892  001738  0100               	movlb	0	; () banked
 15893  00173A  6F9A               	movwf	??_printf& (0+255),b
 15894  00173C  0100               	movlb	0	; () banked
 15895  00173E  51A4               	movf	(printf@len+1)& (0+255),w,b
 15896  001740  0100               	movlb	0	; () banked
 15897  001742  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15898  001744  0100               	movlb	0	; () banked
 15899  001746  6F9B               	movwf	(??_printf+1)& (0+255),b
 15900  001748  C09A  FFF6         	movff	??_printf,tblptrl
 15901  00174C  C09B  FFF7         	movff	??_printf+1,tblptrh
 15902  001750  0E00               	movlw	low (__mediumconst shr (0+16))
 15903  001752  6EF8               	movwf	tblptru,c
 15904  001754  0E0F               	movlw	(high __ramtop+-1)
 15905  001756  64F7               	cpfsgt	tblptrh,c
 15906  001758  D003               	bra	u4547
 15907  00175A  0008               	tblrd		*
 15908  00175C  50F5               	movf	tablat,w,c
 15909  00175E  D005               	bra	u4540
 15910  001760                     u4547:
 15911  001760  CFF6 FFE9          	movff	tblptrl,fsr0l
 15912  001764  CFF7 FFEA          	movff	tblptrh,fsr0h
 15913  001768  50EF               	movf	indf0,w,c
 15914  00176A                     u4540:
 15915  00176A  0900               	iorlw	0
 15916  00176C  A4D8               	btfss	status,2,c
 15917  00176E  D7DD               	goto	l6015
 15918                           
 15919                           ;doprnt.c: 757: if(width > len)
 15920  001770  0100               	movlb	0	; () banked
 15921  001772  51A9               	movf	printf@width& (0+255),w,b
 15922  001774  0100               	movlb	0	; () banked
 15923  001776  5DA3               	subwf	printf@len& (0+255),w,b
 15924  001778  0100               	movlb	0	; () banked
 15925  00177A  51AA               	movf	(printf@width+1)& (0+255),w,b
 15926  00177C  0100               	movlb	0	; () banked
 15927  00177E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15928  001780  B0D8               	btfsc	status,0,c
 15929  001782  D009               	goto	l6023
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;doprnt.c: 758: width -= len;
 15933  001784  0100               	movlb	0	; () banked
 15934  001786  51A3               	movf	printf@len& (0+255),w,b
 15935  001788  0100               	movlb	0	; () banked
 15936  00178A  5FA9               	subwf	printf@width& (0+255),f,b
 15937  00178C  0100               	movlb	0	; () banked
 15938  00178E  51A4               	movf	(printf@len+1)& (0+255),w,b
 15939  001790  0100               	movlb	0	; () banked
 15940  001792  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15941  001794  D009               	goto	l6027
 15942  001796                     l6023:
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;doprnt.c: 759: else
 15946                           ;doprnt.c: 760: width = 0;
 15947  001796  0E00               	movlw	0
 15948  001798  0100               	movlb	0	; () banked
 15949  00179A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15950  00179C  0E00               	movlw	0
 15951  00179E  6FA9               	movwf	printf@width& (0+255),b
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;doprnt.c: 764: while(width--)
 15955  0017A0  D003               	goto	l6027
 15956  0017A2                     l6025:
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;doprnt.c: 765: (putch(' ') );
 15960  0017A2  0E20               	movlw	32
 15961  0017A4  EC90  F028         	call	_putch
 15962  0017A8                     l6027:
 15963  0017A8  0100               	movlb	0	; () banked
 15964  0017AA  07A9               	decf	printf@width& (0+255),f,b
 15965  0017AC  A0D8               	btfss	status,0,c
 15966  0017AE  07AA               	decf	(printf@width+1)& (0+255),f,b
 15967  0017B0  0100               	movlb	0	; () banked
 15968  0017B2  29A9               	incf	printf@width& (0+255),w,b
 15969  0017B4  E1F6               	bnz	l6025
 15970  0017B6  0100               	movlb	0	; () banked
 15971  0017B8  29AA               	incf	(printf@width+1)& (0+255),w,b
 15972  0017BA  B4D8               	btfsc	status,2,c
 15973  0017BC  D017               	goto	l6033
 15974  0017BE  D7F1               	goto	l6025
 15975  0017C0                     l6029:
 15976                           
 15977                           ; BSR set to: 0
 15978                           ;doprnt.c: 768: (putch(*cp++) );
 15979  0017C0  C09F  FFF6         	movff	printf@cp,tblptrl
 15980  0017C4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15981  0017C8  0E00               	movlw	low (__mediumconst shr (0+16))
 15982  0017CA  6EF8               	movwf	tblptru,c
 15983  0017CC  0E0F               	movlw	(high __ramtop+-1)
 15984  0017CE  64F7               	cpfsgt	tblptrh,c
 15985  0017D0  D003               	bra	u4587
 15986  0017D2  0008               	tblrd		*
 15987  0017D4  50F5               	movf	tablat,w,c
 15988  0017D6  D005               	bra	u4580
 15989  0017D8                     u4587:
 15990  0017D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15991  0017DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15992  0017E0  50EF               	movf	indf0,w,c
 15993  0017E2                     u4580:
 15994  0017E2  EC90  F028         	call	_putch
 15995  0017E6  0100               	movlb	0	; () banked
 15996  0017E8  4B9F               	infsnz	printf@cp& (0+255),f,b
 15997  0017EA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15998  0017EC                     l6033:
 15999                           
 16000                           ; BSR set to: 0
 16001  0017EC  0100               	movlb	0	; () banked
 16002  0017EE  07A3               	decf	printf@len& (0+255),f,b
 16003  0017F0  A0D8               	btfss	status,0,c
 16004  0017F2  07A4               	decf	(printf@len+1)& (0+255),f,b
 16005  0017F4  0100               	movlb	0	; () banked
 16006  0017F6  29A3               	incf	printf@len& (0+255),w,b
 16007  0017F8  E1E3               	bnz	l6029
 16008  0017FA  0100               	movlb	0	; () banked
 16009  0017FC  29A4               	incf	(printf@len+1)& (0+255),w,b
 16010  0017FE  B4D8               	btfsc	status,2,c
 16011  001800  D10A               	goto	l6111
 16012  001802  D7DE               	goto	l6029
 16013  001804                     l6035:
 16014                           
 16015                           ; BSR set to: 0
 16016                           ;doprnt.c: 818: flag |= 0x40;
 16017  001804  0100               	movlb	0	; () banked
 16018  001806  8DA7               	bsf	printf@flag& (0+255),6,b
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;doprnt.c: 822: }
 16022                           
 16023                           ;doprnt.c: 819: break;
 16024  001808  D01D               	goto	l1371
 16025  00180A                     l6039:
 16026  00180A  C08E  FFF6         	movff	printf@f,tblptrl
 16027  00180E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16028  001812  0100               	movlb	0	; () banked
 16029  001814  4B8E               	infsnz	printf@f& (0+255),f,b
 16030  001816  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16031  001818                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16032  001818  6AF8               	clrf	tblptru,c
 16033  00181A                     	endif
 16034  00181A                     	if	0	;tblptru may be non-zero
 16035  00181A                     	endif
 16036  00181A  0008               	tblrd		*
 16037  00181C  CFF5 F0A8          	movff	tablat,printf@c
 16038  001820  0100               	movlb	0	; () banked
 16039  001822  51A8               	movf	printf@c& (0+255),w,b
 16040                           
 16041                           ; Switch size 1, requested type "space"
 16042                           ; Number of cases is 5, Range of values is 0 to 117
 16043                           ; switch strategies available:
 16044                           ; Name         Instructions Cycles
 16045                           ; simple_byte           16     9 (average)
 16046                           ;	Chosen strategy is simple_byte
 16047  001824  0A00               	xorlw	0	; case 0
 16048  001826  B4D8               	btfsc	status,2,c
 16049  001828  0012               	return	
 16050  00182A  0A64               	xorlw	100	; case 100
 16051  00182C  B4D8               	btfsc	status,2,c
 16052  00182E  D00A               	goto	l1371
 16053  001830  0A0D               	xorlw	13	; case 105
 16054  001832  B4D8               	btfsc	status,2,c
 16055  001834  D007               	goto	l1371
 16056  001836  0A1A               	xorlw	26	; case 115
 16057  001838  B4D8               	btfsc	status,2,c
 16058  00183A  D758               	goto	l6005
 16059  00183C  0A06               	xorlw	6	; case 117
 16060  00183E  B4D8               	btfsc	status,2,c
 16061  001840  D7E1               	goto	l6035
 16062  001842  D0E9               	goto	l6111
 16063  001844                     l1371:
 16064                           
 16065                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16066  001844  0100               	movlb	0	; () banked
 16067  001846  BDA7               	btfsc	printf@flag& (0+255),6,b
 16068  001848  D019               	goto	l6051
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;doprnt.c: 1253: {
 16072                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16073  00184A  C0A1  FFD9         	movff	printf@ap,fsr2l
 16074  00184E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16075  001852  CFDE F0A5          	movff	postinc2,printf@val
 16076  001856  CFDD F0A6          	movff	postdec2,printf@val+1
 16077                           
 16078                           ; BSR set to: 0
 16079  00185A  0E02               	movlw	2
 16080  00185C  0100               	movlb	0	; () banked
 16081  00185E  27A1               	addwf	printf@ap& (0+255),f,b
 16082  001860  0E00               	movlw	0
 16083  001862  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16084                           
 16085                           ; BSR set to: 0
 16086                           ;doprnt.c: 1261: if((int)val < 0) {
 16087  001864  0100               	movlb	0	; () banked
 16088  001866  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16089  001868  D016               	goto	l6055
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;doprnt.c: 1262: flag |= 0x03;
 16093  00186A  0E03               	movlw	3
 16094  00186C  0100               	movlb	0	; () banked
 16095  00186E  13A7               	iorwf	printf@flag& (0+255),f,b
 16096                           
 16097                           ; BSR set to: 0
 16098                           ;doprnt.c: 1263: val = -val;
 16099  001870  0100               	movlb	0	; () banked
 16100  001872  6DA5               	negf	printf@val& (0+255),b
 16101  001874  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16102  001876  B0D8               	btfsc	status,0,c
 16103  001878  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;doprnt.c: 1264: }
 16107                           ;doprnt.c: 1266: }
 16108  00187A  D00D               	goto	l6055
 16109  00187C                     l6051:
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;doprnt.c: 1268: else
 16113                           ;doprnt.c: 1273: {
 16114                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16115  00187C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16116  001880  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16117  001884  CFDE F0A5          	movff	postinc2,printf@val
 16118  001888  CFDD F0A6          	movff	postdec2,printf@val+1
 16119                           
 16120                           ; BSR set to: 0
 16121  00188C  0E02               	movlw	2
 16122  00188E  0100               	movlb	0	; () banked
 16123  001890  27A1               	addwf	printf@ap& (0+255),f,b
 16124  001892  0E00               	movlw	0
 16125  001894  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16126  001896                     l6055:
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;doprnt.c: 1287: }
 16130                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16131  001896  0E01               	movlw	1
 16132  001898  0100               	movlb	0	; () banked
 16133  00189A  6FA8               	movwf	printf@c& (0+255),b
 16134  00189C                     l6057:
 16135                           
 16136                           ; BSR set to: 0
 16137  00189C  0E05               	movlw	5
 16138  00189E  0100               	movlb	0	; () banked
 16139  0018A0  19A8               	xorwf	printf@c& (0+255),w,b
 16140  0018A2  B4D8               	btfsc	status,2,c
 16141  0018A4  D019               	goto	l6069
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;doprnt.c: 1306: if(val < dpowers[c])
 16145                           
 16146                           ; BSR set to: 0
 16147                           
 16148                           ; BSR set to: 0
 16149  0018A6  0100               	movlb	0	; () banked
 16150  0018A8  51A8               	movf	printf@c& (0+255),w,b
 16151  0018AA  0D02               	mullw	2
 16152  0018AC  0E00               	movlw	low _dpowers
 16153  0018AE  24F3               	addwf	prodl,w,c
 16154  0018B0  6EF6               	movwf	tblptrl,c
 16155  0018B2  0EFB               	movlw	high _dpowers
 16156  0018B4  20F4               	addwfc	prodh,w,c
 16157  0018B6  6EF7               	movwf	tblptrh,c
 16158  0018B8                     	if	1	;There are 3 active tblptr bytes
 16159  0018B8  6AF8               	clrf	tblptru,c
 16160  0018BA  0E00               	movlw	low (__mediumconst shr (0+16))
 16161  0018BC  22F8               	addwfc	tblptru,f,c
 16162  0018BE                     	endif
 16163  0018BE  0009               	tblrd		*+
 16164  0018C0  50F5               	movf	tablat,w,c
 16165  0018C2  0100               	movlb	0	; () banked
 16166  0018C4  5DA5               	subwf	printf@val& (0+255),w,b
 16167  0018C6  0009               	tblrd		*+
 16168  0018C8  50F5               	movf	tablat,w,c
 16169  0018CA  0100               	movlb	0	; () banked
 16170  0018CC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16171  0018CE  A0D8               	btfss	status,0,c
 16172  0018D0  D003               	goto	l6069
 16173                           
 16174                           ; BSR set to: 0
 16175                           
 16176                           ; BSR set to: 0
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;doprnt.c: 1307: break;
 16180  0018D2  0100               	movlb	0	; () banked
 16181  0018D4  2BA8               	incf	printf@c& (0+255),f,b
 16182  0018D6  D7E2               	goto	l6057
 16183  0018D8                     l6069:
 16184                           
 16185                           ; BSR set to: 0
 16186                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16187  0018D8  0100               	movlb	0	; () banked
 16188  0018DA  51A9               	movf	printf@width& (0+255),w,b
 16189  0018DC  0100               	movlb	0	; () banked
 16190  0018DE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16191  0018E0  B4D8               	btfsc	status,2,c
 16192  0018E2  D00B               	goto	l6075
 16193                           
 16194                           ; BSR set to: 0
 16195  0018E4  C0A7  F09A         	movff	printf@flag,??_printf
 16196  0018E8  0E03               	movlw	3
 16197  0018EA  0100               	movlb	0	; () banked
 16198  0018EC  179A               	andwf	??_printf& (0+255),f,b
 16199  0018EE  B4D8               	btfsc	status,2,c
 16200  0018F0  D004               	goto	l6075
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;doprnt.c: 1346: width--;
 16204  0018F2  0100               	movlb	0	; () banked
 16205  0018F4  07A9               	decf	printf@width& (0+255),f,b
 16206  0018F6  A0D8               	btfss	status,0,c
 16207  0018F8  07AA               	decf	(printf@width+1)& (0+255),f,b
 16208  0018FA                     l6075:
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;doprnt.c: 1381: if(width > c)
 16212  0018FA  0E80               	movlw	128
 16213  0018FC  0100               	movlb	0	; () banked
 16214  0018FE  BFA8               	btfsc	printf@c& (0+255),7,b
 16215  001900  0E7F               	movlw	127
 16216  001902  0100               	movlb	0	; () banked
 16217  001904  6F9A               	movwf	??_printf& (0+255),b
 16218  001906  0100               	movlb	0	; () banked
 16219  001908  51A9               	movf	printf@width& (0+255),w,b
 16220  00190A  0100               	movlb	0	; () banked
 16221  00190C  5DA8               	subwf	printf@c& (0+255),w,b
 16222  00190E  0100               	movlb	0	; () banked
 16223  001910  51AA               	movf	(printf@width+1)& (0+255),w,b
 16224  001912  0A80               	xorlw	128
 16225  001914  0100               	movlb	0	; () banked
 16226  001916  599A               	subwfb	??_printf& (0+255),w,b
 16227  001918  B0D8               	btfsc	status,0,c
 16228  00191A  D00B               	goto	l6079
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;doprnt.c: 1382: width -= c;
 16232  00191C  0100               	movlb	0	; () banked
 16233  00191E  51A8               	movf	printf@c& (0+255),w,b
 16234  001920  0100               	movlb	0	; () banked
 16235  001922  5FA9               	subwf	printf@width& (0+255),f,b
 16236  001924  0E00               	movlw	0
 16237  001926  0100               	movlb	0	; () banked
 16238  001928  BFA8               	btfsc	printf@c& (0+255),7,b
 16239  00192A  0EFF               	movlw	255
 16240  00192C  0100               	movlb	0	; () banked
 16241  00192E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16242  001930  D005               	goto	l6081
 16243  001932                     l6079:
 16244                           
 16245                           ; BSR set to: 0
 16246                           ;doprnt.c: 1383: else
 16247                           ;doprnt.c: 1384: width = 0;
 16248  001932  0E00               	movlw	0
 16249  001934  0100               	movlb	0	; () banked
 16250  001936  6FAA               	movwf	(printf@width+1)& (0+255),b
 16251  001938  0E00               	movlw	0
 16252  00193A  6FA9               	movwf	printf@width& (0+255),b
 16253  00193C                     l6081:
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;doprnt.c: 1387: if(flag & 0x04) {
 16257  00193C  0100               	movlb	0	; () banked
 16258  00193E  A5A7               	btfss	printf@flag& (0+255),2,b
 16259  001940  D018               	goto	l6093
 16260                           
 16261                           ; BSR set to: 0
 16262                           ;doprnt.c: 1392: if(flag & 0x03)
 16263  001942  C0A7  F09A         	movff	printf@flag,??_printf
 16264  001946  0E03               	movlw	3
 16265  001948  0100               	movlb	0	; () banked
 16266  00194A  179A               	andwf	??_printf& (0+255),f,b
 16267  00194C  B4D8               	btfsc	status,2,c
 16268  00194E  D003               	goto	l6087
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;doprnt.c: 1393: (putch('-') );
 16272  001950  0E2D               	movlw	45
 16273  001952  EC90  F028         	call	_putch
 16274  001956                     l6087:
 16275                           
 16276                           ;doprnt.c: 1415: if(width)
 16277  001956  0100               	movlb	0	; () banked
 16278  001958  51A9               	movf	printf@width& (0+255),w,b
 16279  00195A  0100               	movlb	0	; () banked
 16280  00195C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16281  00195E  B4D8               	btfsc	status,2,c
 16282  001960  D025               	goto	l6103
 16283                           
 16284                           ; BSR set to: 0
 16285                           ;doprnt.c: 1417: (putch('0') );
 16286                           
 16287                           ; BSR set to: 0
 16288                           
 16289                           ;doprnt.c: 1416: do
 16290  001962  0E30               	movlw	48
 16291  001964  EC90  F028         	call	_putch
 16292                           
 16293                           ;doprnt.c: 1418: while(--width);
 16294  001968  0100               	movlb	0	; () banked
 16295  00196A  07A9               	decf	printf@width& (0+255),f,b
 16296  00196C  A0D8               	btfss	status,0,c
 16297  00196E  07AA               	decf	(printf@width+1)& (0+255),f,b
 16298  001970  D7F2               	goto	l6087
 16299  001972                     l6093:
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;doprnt.c: 1422: {
 16303                           ;doprnt.c: 1424: if(width
 16304                           ;doprnt.c: 1428: )
 16305  001972  0100               	movlb	0	; () banked
 16306  001974  51A9               	movf	printf@width& (0+255),w,b
 16307  001976  0100               	movlb	0	; () banked
 16308  001978  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16309  00197A  B4D8               	btfsc	status,2,c
 16310  00197C  D00D               	goto	l6099
 16311  00197E                     l6095:
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;doprnt.c: 1430: (putch(' ') );
 16315  00197E  0E20               	movlw	32
 16316  001980  EC90  F028         	call	_putch
 16317                           
 16318                           ;doprnt.c: 1431: while(--width);
 16319  001984  0100               	movlb	0	; () banked
 16320  001986  07A9               	decf	printf@width& (0+255),f,b
 16321  001988  A0D8               	btfss	status,0,c
 16322  00198A  07AA               	decf	(printf@width+1)& (0+255),f,b
 16323  00198C  0100               	movlb	0	; () banked
 16324  00198E  51A9               	movf	printf@width& (0+255),w,b
 16325  001990  0100               	movlb	0	; () banked
 16326  001992  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16327  001994  A4D8               	btfss	status,2,c
 16328  001996  D7F3               	goto	l6095
 16329  001998                     l6099:
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;doprnt.c: 1438: if(flag & 0x03)
 16333  001998  C0A7  F09A         	movff	printf@flag,??_printf
 16334  00199C  0E03               	movlw	3
 16335  00199E  0100               	movlb	0	; () banked
 16336  0019A0  179A               	andwf	??_printf& (0+255),f,b
 16337  0019A2  B4D8               	btfsc	status,2,c
 16338  0019A4  D003               	goto	l6103
 16339                           
 16340                           ; BSR set to: 0
 16341                           ;doprnt.c: 1439: (putch('-') );
 16342  0019A6  0E2D               	movlw	45
 16343  0019A8  EC90  F028         	call	_putch
 16344  0019AC                     l6103:
 16345                           
 16346                           ;doprnt.c: 1469: }
 16347                           ;doprnt.c: 1472: prec = c;
 16348  0019AC  C0A8  F09E         	movff	printf@c,printf@prec
 16349                           
 16350                           ;doprnt.c: 1474: while(prec--) {
 16351  0019B0  D02C               	goto	l6109
 16352  0019B2                     l6105:
 16353                           
 16354                           ;doprnt.c: 1478: {
 16355                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16356  0019B2  0100               	movlb	0	; () banked
 16357  0019B4  519E               	movf	printf@prec& (0+255),w,b
 16358  0019B6  0D02               	mullw	2
 16359  0019B8  0E00               	movlw	low _dpowers
 16360  0019BA  24F3               	addwf	prodl,w,c
 16361  0019BC  6EF6               	movwf	tblptrl,c
 16362  0019BE  0EFB               	movlw	high _dpowers
 16363  0019C0  20F4               	addwfc	prodh,w,c
 16364  0019C2  6EF7               	movwf	tblptrh,c
 16365  0019C4                     	if	1	;There are 3 active tblptr bytes
 16366  0019C4  6AF8               	clrf	tblptru,c
 16367  0019C6  0E00               	movlw	low (__mediumconst shr (0+16))
 16368  0019C8  22F8               	addwfc	tblptru,f,c
 16369  0019CA                     	endif
 16370  0019CA  0009               	tblrd		*+
 16371  0019CC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16372  0019D0  000A               	tblrd		*-
 16373  0019D2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16374  0019D6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16375  0019DA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16376  0019DE  ECAA  F022         	call	___lwdiv	;wreg free
 16377  0019E2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16378  0019E6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16379  0019EA  0E00               	movlw	0
 16380  0019EC  0100               	movlb	0	; () banked
 16381  0019EE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16382  0019F0  0E0A               	movlw	10
 16383  0019F2  6F89               	movwf	___lwmod@divisor& (0+255),b
 16384  0019F4  ECC7  F023         	call	___lwmod	;wreg free
 16385  0019F8  0100               	movlb	0	; () banked
 16386  0019FA  5187               	movf	?___lwmod& (0+255),w,b
 16387  0019FC  0F30               	addlw	48
 16388  0019FE  0100               	movlb	0	; () banked
 16389  001A00  6FA8               	movwf	printf@c& (0+255),b
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;doprnt.c: 1523: }
 16393                           ;doprnt.c: 1524: (putch(c) );
 16394  001A02  0100               	movlb	0	; () banked
 16395  001A04  51A8               	movf	printf@c& (0+255),w,b
 16396  001A06  EC90  F028         	call	_putch
 16397  001A0A                     l6109:
 16398  001A0A  0100               	movlb	0	; () banked
 16399  001A0C  079E               	decf	printf@prec& (0+255),f,b
 16400  001A0E  0100               	movlb	0	; () banked
 16401  001A10  299E               	incf	printf@prec& (0+255),w,b
 16402  001A12  A4D8               	btfss	status,2,c
 16403  001A14  D7CE               	goto	l6105
 16404  001A16                     l6111:
 16405  001A16  C08E  FFF6         	movff	printf@f,tblptrl
 16406  001A1A  C08F  FFF7         	movff	printf@f+1,tblptrh
 16407  001A1E  0100               	movlb	0	; () banked
 16408  001A20  4B8E               	infsnz	printf@f& (0+255),f,b
 16409  001A22  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16410  001A24                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16411  001A24  6AF8               	clrf	tblptru,c
 16412  001A26                     	endif
 16413  001A26                     	if	0	;tblptru may be non-zero
 16414  001A26                     	endif
 16415  001A26  0008               	tblrd		*
 16416  001A28  CFF5 F0A8          	movff	tablat,printf@c
 16417  001A2C  0100               	movlb	0	; () banked
 16418  001A2E  51A8               	movf	printf@c& (0+255),w,b
 16419  001A30  B4D8               	btfsc	status,2,c
 16420  001A32  0012               	return	
 16421  001A34  D5EB               	goto	l5981
 16422  001A36                     __end_of_printf:
 16423                           	opt stack 0
 16424                           tblptru	equ	0xFF8
 16425                           tblptrh	equ	0xFF7
 16426                           tblptrl	equ	0xFF6
 16427                           tablat	equ	0xFF5
 16428                           prodh	equ	0xFF4
 16429                           prodl	equ	0xFF3
 16430                           intcon	equ	0xFF2
 16431                           intcon2	equ	0xFF1
 16432                           intcon3	equ	0xFF0
 16433                           indf0	equ	0xFEF
 16434                           postinc0	equ	0xFEE
 16435                           fsr0h	equ	0xFEA
 16436                           fsr0l	equ	0xFE9
 16437                           wreg	equ	0xFE8
 16438                           postdec1	equ	0xFE5
 16439                           fsr1l	equ	0xFE1
 16440                           indf2	equ	0xFDF
 16441                           postinc2	equ	0xFDE
 16442                           postdec2	equ	0xFDD
 16443                           fsr2h	equ	0xFDA
 16444                           fsr2l	equ	0xFD9
 16445                           status	equ	0xFD8
 16446                           
 16447 ;; *************** function _putch *****************
 16448 ;; Defined at:
 16449 ;;		line 20 in file "lcd.c"
 16450 ;; Parameters:    Size  Location     Type
 16451 ;;  data            1    wreg     unsigned char 
 16452 ;; Auto vars:     Size  Location     Type
 16453 ;;  data            1    2[BANK0 ] unsigned char 
 16454 ;; Return value:  Size  Location     Type
 16455 ;;                  1    wreg      void 
 16456 ;; Registers used:
 16457 ;;		wreg, status,2, status,0, cstack
 16458 ;; Tracked objects:
 16459 ;;		On entry : 0/0
 16460 ;;		On exit  : 0/0
 16461 ;;		Unchanged: 0/0
 16462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16466 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16467 ;;Total ram usage:        1 bytes
 16468 ;; Hardware stack levels used:    1
 16469 ;; Hardware stack levels required when called:    8
 16470 ;; This function calls:
 16471 ;;		_lcdNibble
 16472 ;; This function is called by:
 16473 ;;		_printf
 16474 ;; This function uses a non-reentrant model
 16475 ;;
 16476                           
 16477                           	psect	text52
 16478  005120                     __ptext52:
 16479                           	opt stack 0
 16480  005120                     _putch:
 16481                           	opt stack 18
 16482                           
 16483                           ;incstack = 0
 16484                           ;putch@data stored from wreg
 16485  005120  0100               	movlb	0	; () banked
 16486  005122  6F82               	movwf	putch@data& (0+255),b
 16487                           
 16488                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16489  005124  848C               	bsf	3980,2,c	;volatile
 16490                           
 16491                           ;lcd.c: 22: lcdNibble(data);
 16492  005126  0100               	movlb	0	; () banked
 16493  005128  5182               	movf	putch@data& (0+255),w,b
 16494  00512A  EC93  F023         	call	_lcdNibble
 16495  00512E  0012               	return		;funcret
 16496  005130                     __end_of_putch:
 16497                           	opt stack 0
 16498                           tblptru	equ	0xFF8
 16499                           tblptrh	equ	0xFF7
 16500                           tblptrl	equ	0xFF6
 16501                           tablat	equ	0xFF5
 16502                           prodh	equ	0xFF4
 16503                           prodl	equ	0xFF3
 16504                           intcon	equ	0xFF2
 16505                           intcon2	equ	0xFF1
 16506                           intcon3	equ	0xFF0
 16507                           indf0	equ	0xFEF
 16508                           postinc0	equ	0xFEE
 16509                           fsr0h	equ	0xFEA
 16510                           fsr0l	equ	0xFE9
 16511                           wreg	equ	0xFE8
 16512                           postdec1	equ	0xFE5
 16513                           fsr1l	equ	0xFE1
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           fsr2h	equ	0xFDA
 16518                           fsr2l	equ	0xFD9
 16519                           status	equ	0xFD8
 16520                           
 16521 ;; *************** function _isdigit *****************
 16522 ;; Defined at:
 16523 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;  c               1    wreg     unsigned char 
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  c               1    2[BANK0 ] unsigned char 
 16528 ;; Return value:  Size  Location     Type
 16529 ;;		None               void
 16530 ;; Registers used:
 16531 ;;		wreg, status,2, status,0
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;Total ram usage:        3 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:    7
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		_printf
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           	psect	text53
 16552  004F4A                     __ptext53:
 16553                           	opt stack 0
 16554  004F4A                     _isdigit:
 16555                           	opt stack 19
 16556                           
 16557                           ;incstack = 0
 16558                           ;isdigit@c stored from wreg
 16559  004F4A  0100               	movlb	0	; () banked
 16560  004F4C  6F82               	movwf	isdigit@c& (0+255),b
 16561  004F4E  0E00               	movlw	0
 16562  004F50  0100               	movlb	0	; () banked
 16563  004F52  6F81               	movwf	_isdigit$1978& (0+255),b
 16564                           
 16565                           ; BSR set to: 0
 16566  004F54  0E3A               	movlw	58
 16567  004F56  0100               	movlb	0	; () banked
 16568  004F58  6182               	cpfslt	isdigit@c& (0+255),b
 16569  004F5A  D007               	goto	l5829
 16570                           
 16571                           ; BSR set to: 0
 16572  004F5C  0E2F               	movlw	47
 16573  004F5E  0100               	movlb	0	; () banked
 16574  004F60  6582               	cpfsgt	isdigit@c& (0+255),b
 16575  004F62  D003               	goto	l5829
 16576                           
 16577                           ; BSR set to: 0
 16578  004F64  0E01               	movlw	1
 16579  004F66  0100               	movlb	0	; () banked
 16580  004F68  6F81               	movwf	_isdigit$1978& (0+255),b
 16581  004F6A                     l5829:
 16582                           
 16583                           ; BSR set to: 0
 16584  004F6A  C081  F080         	movff	_isdigit$1978,??_isdigit
 16585  004F6E  0100               	movlb	0	; () banked
 16586  004F70  3180               	rrcf	??_isdigit& (0+255),w,b
 16587  004F72  0012               	return	
 16588  004F74                     __end_of_isdigit:
 16589                           	opt stack 0
 16590                           tblptru	equ	0xFF8
 16591                           tblptrh	equ	0xFF7
 16592                           tblptrl	equ	0xFF6
 16593                           tablat	equ	0xFF5
 16594                           prodh	equ	0xFF4
 16595                           prodl	equ	0xFF3
 16596                           intcon	equ	0xFF2
 16597                           intcon2	equ	0xFF1
 16598                           intcon3	equ	0xFF0
 16599                           indf0	equ	0xFEF
 16600                           postinc0	equ	0xFEE
 16601                           fsr0h	equ	0xFEA
 16602                           fsr0l	equ	0xFE9
 16603                           wreg	equ	0xFE8
 16604                           postdec1	equ	0xFE5
 16605                           fsr1l	equ	0xFE1
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           fsr2h	equ	0xFDA
 16610                           fsr2l	equ	0xFD9
 16611                           status	equ	0xFD8
 16612                           
 16613 ;; *************** function ___wmul *****************
 16614 ;; Defined at:
 16615 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16616 ;; Parameters:    Size  Location     Type
 16617 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16618 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16619 ;; Auto vars:     Size  Location     Type
 16620 ;;  product         2    4[BANK0 ] unsigned int 
 16621 ;; Return value:  Size  Location     Type
 16622 ;;                  2    0[BANK0 ] unsigned int 
 16623 ;; Registers used:
 16624 ;;		wreg, status,2, status,0, prodl, prodh
 16625 ;; Tracked objects:
 16626 ;;		On entry : 0/0
 16627 ;;		On exit  : 0/0
 16628 ;;		Unchanged: 0/0
 16629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16630 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;Total ram usage:        6 bytes
 16635 ;; Hardware stack levels used:    1
 16636 ;; Hardware stack levels required when called:    7
 16637 ;; This function calls:
 16638 ;;		Nothing
 16639 ;; This function is called by:
 16640 ;;		_printf
 16641 ;; This function uses a non-reentrant model
 16642 ;;
 16643                           
 16644                           	psect	text54
 16645  004C1E                     __ptext54:
 16646                           	opt stack 0
 16647  004C1E                     ___wmul:
 16648                           	opt stack 19
 16649                           
 16650                           ; BSR set to: 0
 16651                           ;incstack = 0
 16652  004C1E  0100               	movlb	0	; () banked
 16653  004C20  5180               	movf	___wmul@multiplier& (0+255),w,b
 16654  004C22  0100               	movlb	0	; () banked
 16655  004C24  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16656  004C26  CFF3 F084          	movff	prodl,___wmul@product
 16657  004C2A  CFF4 F085          	movff	prodh,___wmul@product+1
 16658  004C2E  0100               	movlb	0	; () banked
 16659  004C30  5180               	movf	___wmul@multiplier& (0+255),w,b
 16660  004C32  0100               	movlb	0	; () banked
 16661  004C34  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16662  004C36  50F3               	movf	prodl,w,c
 16663  004C38  0100               	movlb	0	; () banked
 16664  004C3A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16665  004C3C  0100               	movlb	0	; () banked
 16666  004C3E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16667  004C40  0100               	movlb	0	; () banked
 16668  004C42  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16669  004C44  50F3               	movf	prodl,w,c
 16670  004C46  0100               	movlb	0	; () banked
 16671  004C48  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16672                           
 16673                           ; BSR set to: 0
 16674  004C4A  C084  F080         	movff	___wmul@product,?___wmul
 16675  004C4E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16676  004C52  0012               	return	
 16677  004C54                     __end_of___wmul:
 16678                           	opt stack 0
 16679                           tblptru	equ	0xFF8
 16680                           tblptrh	equ	0xFF7
 16681                           tblptrl	equ	0xFF6
 16682                           tablat	equ	0xFF5
 16683                           prodh	equ	0xFF4
 16684                           prodl	equ	0xFF3
 16685                           intcon	equ	0xFF2
 16686                           intcon2	equ	0xFF1
 16687                           intcon3	equ	0xFF0
 16688                           indf0	equ	0xFEF
 16689                           postinc0	equ	0xFEE
 16690                           fsr0h	equ	0xFEA
 16691                           fsr0l	equ	0xFE9
 16692                           wreg	equ	0xFE8
 16693                           postdec1	equ	0xFE5
 16694                           fsr1l	equ	0xFE1
 16695                           indf2	equ	0xFDF
 16696                           postinc2	equ	0xFDE
 16697                           postdec2	equ	0xFDD
 16698                           fsr2h	equ	0xFDA
 16699                           fsr2l	equ	0xFD9
 16700                           status	equ	0xFD8
 16701                           
 16702 ;; *************** function ___lwmod *****************
 16703 ;; Defined at:
 16704 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16705 ;; Parameters:    Size  Location     Type
 16706 ;;  dividend        2    7[BANK0 ] unsigned int 
 16707 ;;  divisor         2    9[BANK0 ] unsigned int 
 16708 ;; Auto vars:     Size  Location     Type
 16709 ;;  counter         1   11[BANK0 ] unsigned char 
 16710 ;; Return value:  Size  Location     Type
 16711 ;;                  2    7[BANK0 ] unsigned int 
 16712 ;; Registers used:
 16713 ;;		wreg, status,2, status,0
 16714 ;; Tracked objects:
 16715 ;;		On entry : 0/0
 16716 ;;		On exit  : 0/0
 16717 ;;		Unchanged: 0/0
 16718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16719 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16722 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16723 ;;Total ram usage:        5 bytes
 16724 ;; Hardware stack levels used:    1
 16725 ;; Hardware stack levels required when called:    7
 16726 ;; This function calls:
 16727 ;;		Nothing
 16728 ;; This function is called by:
 16729 ;;		_printf
 16730 ;; This function uses a non-reentrant model
 16731 ;;
 16732                           
 16733                           	psect	text55
 16734  00478E                     __ptext55:
 16735                           	opt stack 0
 16736  00478E                     ___lwmod:
 16737                           	opt stack 19
 16738                           
 16739                           ; BSR set to: 0
 16740                           ;incstack = 0
 16741  00478E  0100               	movlb	0	; () banked
 16742  004790  5189               	movf	___lwmod@divisor& (0+255),w,b
 16743  004792  0100               	movlb	0	; () banked
 16744  004794  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16745  004796  B4D8               	btfsc	status,2,c
 16746  004798  D026               	goto	l1828
 16747                           
 16748                           ; BSR set to: 0
 16749  00479A  0E01               	movlw	1
 16750  00479C  0100               	movlb	0	; () banked
 16751  00479E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16752  0047A0  D006               	goto	l5867
 16753  0047A2                     l5865:
 16754                           
 16755                           ; BSR set to: 0
 16756  0047A2  0100               	movlb	0	; () banked
 16757  0047A4  90D8               	bcf	status,0,c
 16758  0047A6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16759  0047A8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16760  0047AA  0100               	movlb	0	; () banked
 16761  0047AC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16762  0047AE                     l5867:
 16763                           
 16764                           ; BSR set to: 0
 16765  0047AE  0100               	movlb	0	; () banked
 16766  0047B0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16767  0047B2  D7F7               	goto	l5865
 16768  0047B4                     l5869:
 16769                           
 16770                           ; BSR set to: 0
 16771  0047B4  0100               	movlb	0	; () banked
 16772  0047B6  5189               	movf	___lwmod@divisor& (0+255),w,b
 16773  0047B8  0100               	movlb	0	; () banked
 16774  0047BA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16775  0047BC  0100               	movlb	0	; () banked
 16776  0047BE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16777  0047C0  0100               	movlb	0	; () banked
 16778  0047C2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16779  0047C4  A0D8               	btfss	status,0,c
 16780  0047C6  D008               	goto	l5873
 16781                           
 16782                           ; BSR set to: 0
 16783  0047C8  0100               	movlb	0	; () banked
 16784  0047CA  5189               	movf	___lwmod@divisor& (0+255),w,b
 16785  0047CC  0100               	movlb	0	; () banked
 16786  0047CE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16787  0047D0  0100               	movlb	0	; () banked
 16788  0047D2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16789  0047D4  0100               	movlb	0	; () banked
 16790  0047D6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16791  0047D8                     l5873:
 16792                           
 16793                           ; BSR set to: 0
 16794  0047D8  0100               	movlb	0	; () banked
 16795  0047DA  90D8               	bcf	status,0,c
 16796  0047DC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16797  0047DE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16798                           
 16799                           ; BSR set to: 0
 16800  0047E0  0100               	movlb	0	; () banked
 16801  0047E2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16802  0047E4  D7E7               	goto	l5869
 16803  0047E6                     l1828:
 16804                           
 16805                           ; BSR set to: 0
 16806  0047E6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16807  0047EA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16808                           
 16809                           ; BSR set to: 0
 16810  0047EE  0012               	return		;funcret
 16811  0047F0                     __end_of___lwmod:
 16812                           	opt stack 0
 16813                           tblptru	equ	0xFF8
 16814                           tblptrh	equ	0xFF7
 16815                           tblptrl	equ	0xFF6
 16816                           tablat	equ	0xFF5
 16817                           prodh	equ	0xFF4
 16818                           prodl	equ	0xFF3
 16819                           intcon	equ	0xFF2
 16820                           intcon2	equ	0xFF1
 16821                           intcon3	equ	0xFF0
 16822                           indf0	equ	0xFEF
 16823                           postinc0	equ	0xFEE
 16824                           fsr0h	equ	0xFEA
 16825                           fsr0l	equ	0xFE9
 16826                           wreg	equ	0xFE8
 16827                           postdec1	equ	0xFE5
 16828                           fsr1l	equ	0xFE1
 16829                           indf2	equ	0xFDF
 16830                           postinc2	equ	0xFDE
 16831                           postdec2	equ	0xFDD
 16832                           fsr2h	equ	0xFDA
 16833                           fsr2l	equ	0xFD9
 16834                           status	equ	0xFD8
 16835                           
 16836 ;; *************** function ___lwdiv *****************
 16837 ;; Defined at:
 16838 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;  dividend        2    0[BANK0 ] unsigned int 
 16841 ;;  divisor         2    2[BANK0 ] unsigned int 
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;  quotient        2    4[BANK0 ] unsigned int 
 16844 ;;  counter         1    6[BANK0 ] unsigned char 
 16845 ;; Return value:  Size  Location     Type
 16846 ;;                  2    0[BANK0 ] unsigned int 
 16847 ;; Registers used:
 16848 ;;		wreg, status,2, status,0
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;Total ram usage:        7 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; Hardware stack levels required when called:    7
 16861 ;; This function calls:
 16862 ;;		Nothing
 16863 ;; This function is called by:
 16864 ;;		_printf
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           	psect	text56
 16869  004554                     __ptext56:
 16870                           	opt stack 0
 16871  004554                     ___lwdiv:
 16872                           	opt stack 19
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;incstack = 0
 16876  004554  0E00               	movlw	0
 16877  004556  0100               	movlb	0	; () banked
 16878  004558  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16879  00455A  0E00               	movlw	0
 16880  00455C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16881                           
 16882                           ; BSR set to: 0
 16883  00455E  0100               	movlb	0	; () banked
 16884  004560  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16885  004562  0100               	movlb	0	; () banked
 16886  004564  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16887  004566  B4D8               	btfsc	status,2,c
 16888  004568  D02C               	goto	l1818
 16889                           
 16890                           ; BSR set to: 0
 16891  00456A  0E01               	movlw	1
 16892  00456C  0100               	movlb	0	; () banked
 16893  00456E  6F86               	movwf	___lwdiv@counter& (0+255),b
 16894  004570  D006               	goto	l5847
 16895  004572                     l5845:
 16896                           
 16897                           ; BSR set to: 0
 16898  004572  0100               	movlb	0	; () banked
 16899  004574  90D8               	bcf	status,0,c
 16900  004576  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16901  004578  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16902  00457A  0100               	movlb	0	; () banked
 16903  00457C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16904  00457E                     l5847:
 16905                           
 16906                           ; BSR set to: 0
 16907  00457E  0100               	movlb	0	; () banked
 16908  004580  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16909  004582  D7F7               	goto	l5845
 16910  004584                     l5849:
 16911                           
 16912                           ; BSR set to: 0
 16913  004584  0100               	movlb	0	; () banked
 16914  004586  90D8               	bcf	status,0,c
 16915  004588  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16916  00458A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16917                           
 16918                           ; BSR set to: 0
 16919  00458C  0100               	movlb	0	; () banked
 16920  00458E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16921  004590  0100               	movlb	0	; () banked
 16922  004592  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16923  004594  0100               	movlb	0	; () banked
 16924  004596  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16925  004598  0100               	movlb	0	; () banked
 16926  00459A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16927  00459C  A0D8               	btfss	status,0,c
 16928  00459E  D00A               	goto	l5857
 16929                           
 16930                           ; BSR set to: 0
 16931  0045A0  0100               	movlb	0	; () banked
 16932  0045A2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16933  0045A4  0100               	movlb	0	; () banked
 16934  0045A6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16935  0045A8  0100               	movlb	0	; () banked
 16936  0045AA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16937  0045AC  0100               	movlb	0	; () banked
 16938  0045AE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16939                           
 16940                           ; BSR set to: 0
 16941  0045B0  0100               	movlb	0	; () banked
 16942  0045B2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16943  0045B4                     l5857:
 16944                           
 16945                           ; BSR set to: 0
 16946  0045B4  0100               	movlb	0	; () banked
 16947  0045B6  90D8               	bcf	status,0,c
 16948  0045B8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16949  0045BA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16950                           
 16951                           ; BSR set to: 0
 16952  0045BC  0100               	movlb	0	; () banked
 16953  0045BE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16954  0045C0  D7E1               	goto	l5849
 16955  0045C2                     l1818:
 16956                           
 16957                           ; BSR set to: 0
 16958  0045C2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16959  0045C6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16960                           
 16961                           ; BSR set to: 0
 16962  0045CA  0012               	return		;funcret
 16963  0045CC                     __end_of___lwdiv:
 16964                           	opt stack 0
 16965                           tblptru	equ	0xFF8
 16966                           tblptrh	equ	0xFF7
 16967                           tblptrl	equ	0xFF6
 16968                           tablat	equ	0xFF5
 16969                           prodh	equ	0xFF4
 16970                           prodl	equ	0xFF3
 16971                           intcon	equ	0xFF2
 16972                           intcon2	equ	0xFF1
 16973                           intcon3	equ	0xFF0
 16974                           indf0	equ	0xFEF
 16975                           postinc0	equ	0xFEE
 16976                           fsr0h	equ	0xFEA
 16977                           fsr0l	equ	0xFE9
 16978                           wreg	equ	0xFE8
 16979                           postdec1	equ	0xFE5
 16980                           fsr1l	equ	0xFE1
 16981                           indf2	equ	0xFDF
 16982                           postinc2	equ	0xFDE
 16983                           postdec2	equ	0xFDD
 16984                           fsr2h	equ	0xFDA
 16985                           fsr2l	equ	0xFD9
 16986                           status	equ	0xFD8
 16987                           
 16988 ;; *************** function _lcdInst *****************
 16989 ;; Defined at:
 16990 ;;		line 15 in file "lcd.c"
 16991 ;; Parameters:    Size  Location     Type
 16992 ;;  data            1    wreg     unsigned char 
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;  data            1    2[BANK0 ] unsigned char 
 16995 ;; Return value:  Size  Location     Type
 16996 ;;                  1    wreg      void 
 16997 ;; Registers used:
 16998 ;;		wreg, status,2, status,0, cstack
 16999 ;; Tracked objects:
 17000 ;;		On entry : 0/0
 17001 ;;		On exit  : 0/0
 17002 ;;		Unchanged: 0/0
 17003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17008 ;;Total ram usage:        1 bytes
 17009 ;; Hardware stack levels used:    1
 17010 ;; Hardware stack levels required when called:    8
 17011 ;; This function calls:
 17012 ;;		_lcdNibble
 17013 ;; This function is called by:
 17014 ;;		_UI
 17015 ;;		_change_state_to_menu_start
 17016 ;;		_change_state_to_menu_12
 17017 ;;		_change_state_to_menu_22
 17018 ;;		_initLCD
 17019 ;;		_printRTC
 17020 ;;		_Loading
 17021 ;;		_EEPROM_write
 17022 ;;		_Test
 17023 ;;		_algorithmTest
 17024 ;;		_sensorTest
 17025 ;;		_actuatorTest
 17026 ;;		_BothServos
 17027 ;;		_PortTestA5
 17028 ;;		_PusherTest
 17029 ;;		_SpeedTest
 17030 ;;		_BlockerTest
 17031 ;;		_ToggleTestA5
 17032 ;; This function uses a non-reentrant model
 17033 ;;
 17034                           
 17035                           	psect	text57
 17036  005130                     __ptext57:
 17037                           	opt stack 0
 17038  005130                     _lcdInst:
 17039                           	opt stack 20
 17040                           
 17041                           ; BSR set to: 0
 17042                           ;incstack = 0
 17043                           ;lcdInst@data stored from wreg
 17044  005130  0100               	movlb	0	; () banked
 17045  005132  6F82               	movwf	lcdInst@data& (0+255),b
 17046                           
 17047                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17048  005134  948C               	bcf	3980,2,c	;volatile
 17049                           
 17050                           ;lcd.c: 17: lcdNibble(data);
 17051  005136  0100               	movlb	0	; () banked
 17052  005138  5182               	movf	lcdInst@data& (0+255),w,b
 17053  00513A  EC93  F023         	call	_lcdNibble
 17054  00513E  0012               	return		;funcret
 17055  005140                     __end_of_lcdInst:
 17056                           	opt stack 0
 17057                           tblptru	equ	0xFF8
 17058                           tblptrh	equ	0xFF7
 17059                           tblptrl	equ	0xFF6
 17060                           tablat	equ	0xFF5
 17061                           prodh	equ	0xFF4
 17062                           prodl	equ	0xFF3
 17063                           intcon	equ	0xFF2
 17064                           intcon2	equ	0xFF1
 17065                           intcon3	equ	0xFF0
 17066                           indf0	equ	0xFEF
 17067                           postinc0	equ	0xFEE
 17068                           fsr0h	equ	0xFEA
 17069                           fsr0l	equ	0xFE9
 17070                           wreg	equ	0xFE8
 17071                           postdec1	equ	0xFE5
 17072                           fsr1l	equ	0xFE1
 17073                           indf2	equ	0xFDF
 17074                           postinc2	equ	0xFDE
 17075                           postdec2	equ	0xFDD
 17076                           fsr2h	equ	0xFDA
 17077                           fsr2l	equ	0xFD9
 17078                           status	equ	0xFD8
 17079                           
 17080 ;; *************** function _lcdNibble *****************
 17081 ;; Defined at:
 17082 ;;		line 25 in file "lcd.c"
 17083 ;; Parameters:    Size  Location     Type
 17084 ;;  data            1    wreg     unsigned char 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;  data            1    1[BANK0 ] unsigned char 
 17087 ;;  temp            1    0[BANK0 ] unsigned char 
 17088 ;; Return value:  Size  Location     Type
 17089 ;;                  1    wreg      void 
 17090 ;; Registers used:
 17091 ;;		wreg, status,2, status,0
 17092 ;; Tracked objects:
 17093 ;;		On entry : 0/0
 17094 ;;		On exit  : 0/0
 17095 ;;		Unchanged: 0/0
 17096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17101 ;;Total ram usage:        2 bytes
 17102 ;; Hardware stack levels used:    1
 17103 ;; Hardware stack levels required when called:    7
 17104 ;; This function calls:
 17105 ;;		Nothing
 17106 ;; This function is called by:
 17107 ;;		_lcdInst
 17108 ;;		_putch
 17109 ;; This function uses a non-reentrant model
 17110 ;;
 17111                           
 17112                           	psect	text58
 17113  004726                     __ptext58:
 17114                           	opt stack 0
 17115  004726                     _lcdNibble:
 17116                           	opt stack 20
 17117                           
 17118                           ;incstack = 0
 17119                           ;lcdNibble@data stored from wreg
 17120  004726  0100               	movlb	0	; () banked
 17121  004728  6F81               	movwf	lcdNibble@data& (0+255),b
 17122                           
 17123                           ;lcd.c: 27: char temp = data & 0xF0;
 17124  00472A  0100               	movlb	0	; () banked
 17125  00472C  5181               	movf	lcdNibble@data& (0+255),w,b
 17126  00472E  0BF0               	andlw	240
 17127  004730  0100               	movlb	0	; () banked
 17128  004732  6F80               	movwf	lcdNibble@temp& (0+255),b
 17129                           
 17130                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17131  004734  508C               	movf	3980,w,c	;volatile
 17132  004736  0B0F               	andlw	15
 17133  004738  6E8C               	movwf	3980,c	;volatile
 17134                           
 17135                           ;lcd.c: 29: LATD = temp | LATD;
 17136  00473A  0100               	movlb	0	; () banked
 17137  00473C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17138  00473E  108C               	iorwf	3980,w,c	;volatile
 17139  004740  6E8C               	movwf	3980,c	;volatile
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17143  004742  868C               	bsf	3980,3,c	;volatile
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17147  004744  0E42               	movlw	66
 17148  004746                     u9957:
 17149  004746  2EE8               	decfsz	wreg,f,c
 17150  004748  D7FE               	bra	u9957
 17151  00474A  D000               	nop2	
 17152                           
 17153                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17154  00474C  968C               	bcf	3980,3,c	;volatile
 17155                           
 17156                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17157  00474E  0E42               	movlw	66
 17158  004750                     u9967:
 17159  004750  2EE8               	decfsz	wreg,f,c
 17160  004752  D7FE               	bra	u9967
 17161  004754  D000               	nop2	
 17162                           
 17163                           ;lcd.c: 36: data = data << 4;
 17164  004756  0100               	movlb	0	; () banked
 17165  004758  3981               	swapf	lcdNibble@data& (0+255),w,b
 17166  00475A  0BF0               	andlw	240
 17167  00475C  0100               	movlb	0	; () banked
 17168  00475E  6F81               	movwf	lcdNibble@data& (0+255),b
 17169                           
 17170                           ;lcd.c: 38: temp = data & 0xF0;
 17171  004760  0100               	movlb	0	; () banked
 17172  004762  5181               	movf	lcdNibble@data& (0+255),w,b
 17173  004764  0BF0               	andlw	240
 17174  004766  0100               	movlb	0	; () banked
 17175  004768  6F80               	movwf	lcdNibble@temp& (0+255),b
 17176                           
 17177                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17178  00476A  508C               	movf	3980,w,c	;volatile
 17179  00476C  0B0F               	andlw	15
 17180  00476E  6E8C               	movwf	3980,c	;volatile
 17181                           
 17182                           ;lcd.c: 40: LATD = temp | LATD;
 17183  004770  0100               	movlb	0	; () banked
 17184  004772  5180               	movf	lcdNibble@temp& (0+255),w,b
 17185  004774  108C               	iorwf	3980,w,c	;volatile
 17186  004776  6E8C               	movwf	3980,c	;volatile
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17190  004778  868C               	bsf	3980,3,c	;volatile
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17194  00477A  0E42               	movlw	66
 17195  00477C                     u9977:
 17196  00477C  2EE8               	decfsz	wreg,f,c
 17197  00477E  D7FE               	bra	u9977
 17198  004780  D000               	nop2	
 17199                           
 17200                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17201  004782  968C               	bcf	3980,3,c	;volatile
 17202                           
 17203                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17204  004784  0E42               	movlw	66
 17205  004786                     u9987:
 17206  004786  2EE8               	decfsz	wreg,f,c
 17207  004788  D7FE               	bra	u9987
 17208  00478A  D000               	nop2	
 17209  00478C  0012               	return		;funcret
 17210  00478E                     __end_of_lcdNibble:
 17211                           	opt stack 0
 17212                           tblptru	equ	0xFF8
 17213                           tblptrh	equ	0xFF7
 17214                           tblptrl	equ	0xFF6
 17215                           tablat	equ	0xFF5
 17216                           prodh	equ	0xFF4
 17217                           prodl	equ	0xFF3
 17218                           intcon	equ	0xFF2
 17219                           intcon2	equ	0xFF1
 17220                           intcon3	equ	0xFF0
 17221                           indf0	equ	0xFEF
 17222                           postinc0	equ	0xFEE
 17223                           fsr0h	equ	0xFEA
 17224                           fsr0l	equ	0xFE9
 17225                           wreg	equ	0xFE8
 17226                           postdec1	equ	0xFE5
 17227                           fsr1l	equ	0xFE1
 17228                           indf2	equ	0xFDF
 17229                           postinc2	equ	0xFDE
 17230                           postdec2	equ	0xFDD
 17231                           fsr2h	equ	0xFDA
 17232                           fsr2l	equ	0xFD9
 17233                           status	equ	0xFD8
 17234                           
 17235 ;; *************** function _handler *****************
 17236 ;; Defined at:
 17237 ;;		line 16 in file "interruptHandler.c"
 17238 ;; Parameters:    Size  Location     Type
 17239 ;;		None
 17240 ;; Auto vars:     Size  Location     Type
 17241 ;;		None
 17242 ;; Return value:  Size  Location     Type
 17243 ;;                  1    wreg      void 
 17244 ;; Registers used:
 17245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17246 ;; Tracked objects:
 17247 ;;		On entry : 0/0
 17248 ;;		On exit  : 0/0
 17249 ;;		Unchanged: 0/0
 17250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17253 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17254 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17255 ;;Total ram usage:       16 bytes
 17256 ;; Hardware stack levels used:    1
 17257 ;; Hardware stack levels required when called:    6
 17258 ;; This function calls:
 17259 ;;		_printSortTimer
 17260 ;;		_updateMenu
 17261 ;; This function is called by:
 17262 ;;		Interrupt level 2
 17263 ;; This function uses a non-reentrant model
 17264 ;;
 17265                           
 17266                           	psect	intcode
 17267  000008                     __pintcode:
 17268                           	opt stack 0
 17269  000008                     _handler:
 17270                           	opt stack 18
 17271                           
 17272                           ;incstack = 0
 17273  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17274  00000A  ED3E  F01C         	call	int_func,f	;refresh shadow registers
 17275                           tblptru	equ	0xFF8
 17276                           tblptrh	equ	0xFF7
 17277                           tblptrl	equ	0xFF6
 17278                           tablat	equ	0xFF5
 17279                           prodh	equ	0xFF4
 17280                           prodl	equ	0xFF3
 17281                           intcon	equ	0xFF2
 17282                           intcon2	equ	0xFF1
 17283                           intcon3	equ	0xFF0
 17284                           indf0	equ	0xFEF
 17285                           postinc0	equ	0xFEE
 17286                           fsr0h	equ	0xFEA
 17287                           fsr0l	equ	0xFE9
 17288                           wreg	equ	0xFE8
 17289                           postdec1	equ	0xFE5
 17290                           fsr1l	equ	0xFE1
 17291                           indf2	equ	0xFDF
 17292                           postinc2	equ	0xFDE
 17293                           postdec2	equ	0xFDD
 17294                           fsr2h	equ	0xFDA
 17295                           fsr2l	equ	0xFD9
 17296                           status	equ	0xFD8
 17297                           
 17298                           	psect	intcode_body
 17299  00387C                     __pintcode_body:
 17300                           	opt stack 18
 17301  00387C                     int_func:
 17302                           	opt stack 18
 17303  00387C  0006               	pop		; remove dummy address from shadow register refresh
 17304  00387E  CFFA F04D          	movff	pclath,??_handler+2
 17305  003882  CFFB F04E          	movff	pclatu,??_handler+3
 17306  003886  CFE9 F04F          	movff	fsr0l,??_handler+4
 17307  00388A  CFEA F050          	movff	fsr0h,??_handler+5
 17308  00388E  CFE1 F051          	movff	fsr1l,??_handler+6
 17309  003892  CFE2 F052          	movff	fsr1h,??_handler+7
 17310  003896  CFD9 F053          	movff	fsr2l,??_handler+8
 17311  00389A  CFDA F054          	movff	fsr2h,??_handler+9
 17312  00389E  CFF3 F055          	movff	prodl,??_handler+10
 17313  0038A2  CFF4 F056          	movff	prodh,??_handler+11
 17314  0038A6  CFF6 F057          	movff	tblptrl,??_handler+12
 17315  0038AA  CFF7 F058          	movff	tblptrh,??_handler+13
 17316  0038AE  CFF8 F059          	movff	tblptru,??_handler+14
 17317  0038B2  CFF5 F05A          	movff	tablat,??_handler+15
 17318                           
 17319                           ;interruptHandler.c: 18: if(INT1IF){
 17320  0038B6  A0F0               	btfss	intcon3,0,c	;volatile
 17321  0038B8  D02B               	goto	i2l9053
 17322                           
 17323                           ;interruptHandler.c: 19: INT1IF = 0;
 17324  0038BA  90F0               	bcf	intcon3,0,c	;volatile
 17325                           
 17326                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17327  0038BC  0100               	movlb	0	; () banked
 17328  0038BE  51FC               	movf	_machine_state& (0+255),w,b
 17329  0038C0  A4D8               	btfss	status,2,c
 17330  0038C2  D01B               	goto	i2l9047
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17334  0038C4  3881               	swapf	3969,w,c	;volatile
 17335  0038C6  0B0F               	andlw	15
 17336  0038C8  0B0F               	andlw	15
 17337  0038CA  6E4B               	movwf	??_handler& (0+255),c
 17338  0038CC  6A4C               	clrf	(??_handler+1)& (0+255),c
 17339  0038CE  0EEF               	movlw	low _keys
 17340  0038D0  244B               	addwf	??_handler,w,c
 17341  0038D2  6EF6               	movwf	tblptrl,c
 17342  0038D4  0EFA               	movlw	high _keys
 17343  0038D6  204C               	addwfc	??_handler+1,w,c
 17344  0038D8  6EF7               	movwf	tblptrh,c
 17345  0038DA                     	if	1	;There are 3 active tblptr bytes
 17346  0038DA  6AF8               	clrf	tblptru,c
 17347  0038DC  0E00               	movlw	low (__mediumconst shr (0+16))
 17348  0038DE  22F8               	addwfc	tblptru,f,c
 17349  0038E0                     	endif
 17350  0038E0  0008               	tblrd		*
 17351  0038E2  CFF5 F07D          	movff	tablat,_input	;volatile
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;interruptHandler.c: 23: if(input == '*'){
 17355  0038E6  0E2A               	movlw	42
 17356  0038E8  187D               	xorwf	_input,w,c	;volatile
 17357  0038EA  A4D8               	btfss	status,2,c
 17358  0038EC  D004               	goto	i2l9045
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17362  0038EE  0E03               	movlw	3
 17363  0038F0  0100               	movlb	0	; () banked
 17364  0038F2  6FFC               	movwf	_machine_state& (0+255),b
 17365                           
 17366                           ;interruptHandler.c: 25: }
 17367  0038F4  D002               	goto	i2l9047
 17368  0038F6                     i2l9045:
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;interruptHandler.c: 26: else{
 17372                           ;interruptHandler.c: 27: updateMenu();
 17373  0038F6  EC78  F013         	call	_updateMenu	;wreg free
 17374  0038FA                     i2l9047:
 17375                           
 17376                           ;interruptHandler.c: 28: }
 17377                           ;interruptHandler.c: 29: }
 17378                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17379  0038FA  0100               	movlb	0	; () banked
 17380  0038FC  05FC               	decf	_machine_state& (0+255),w,b
 17381  0038FE  A4D8               	btfss	status,2,c
 17382  003900  D007               	goto	i2l9053
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;interruptHandler.c: 31: if(input == '*'){
 17386  003902  0E2A               	movlw	42
 17387  003904  187D               	xorwf	_input,w,c	;volatile
 17388  003906  A4D8               	btfss	status,2,c
 17389  003908  D003               	goto	i2l9053
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17393  00390A  0E02               	movlw	2
 17394  00390C  0100               	movlb	0	; () banked
 17395  00390E  6FFC               	movwf	_machine_state& (0+255),b
 17396  003910                     i2l9053:
 17397                           
 17398                           ;interruptHandler.c: 33: }
 17399                           ;interruptHandler.c: 34: }
 17400                           ;interruptHandler.c: 35: }
 17401                           ;interruptHandler.c: 38: if(TMR0IF){
 17402  003910  A4F2               	btfss	intcon,2,c	;volatile
 17403  003912  D00C               	goto	i2l9067
 17404                           
 17405                           ;interruptHandler.c: 39: TMR0IF = 0;
 17406  003914  94F2               	bcf	intcon,2,c	;volatile
 17407                           
 17408                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17409  003916  0100               	movlb	0	; () banked
 17410  003918  05FC               	decf	_machine_state& (0+255),w,b
 17411  00391A  A4D8               	btfss	status,2,c
 17412  00391C  D007               	goto	i2l9067
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;interruptHandler.c: 41: printSortTimer();
 17416  00391E  ECD8  F014         	call	_printSortTimer	;wreg free
 17417                           
 17418                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17419  003922  0E85               	movlw	133
 17420  003924  6ED7               	movwf	4055,c	;volatile
 17421                           
 17422                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17423  003926  0EEE               	movlw	238
 17424  003928  6ED6               	movwf	4054,c	;volatile
 17425                           
 17426                           ;interruptHandler.c: 45: TMR0ON = 1;
 17427  00392A  8ED5               	bsf	4053,7,c	;volatile
 17428  00392C                     i2l9067:
 17429                           
 17430                           ;interruptHandler.c: 46: }
 17431                           ;interruptHandler.c: 47: }
 17432                           ;interruptHandler.c: 50: if(TMR1IF){
 17433  00392C  A09E               	btfss	3998,0,c	;volatile
 17434  00392E  D024               	goto	i2l9091
 17435                           
 17436                           ;interruptHandler.c: 51: TMR1IF = 0;
 17437  003930  909E               	bcf	3998,0,c	;volatile
 17438                           
 17439                           ;interruptHandler.c: 52: TMR1ON = 0;
 17440  003932  90CD               	bcf	4045,0,c	;volatile
 17441                           
 17442                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17443  003934  0100               	movlb	0	; () banked
 17444  003936  05FC               	decf	_machine_state& (0+255),w,b
 17445  003938  A4D8               	btfss	status,2,c
 17446  00393A  D01E               	goto	i2l9091
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;interruptHandler.c: 54: if(was_low_1){
 17450  00393C  5079               	movf	_was_low_1,w,c	;volatile
 17451  00393E  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17452  003940  B4D8               	btfsc	status,2,c
 17453  003942  D00A               	goto	i2l924
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17457  003944  828B               	bsf	3979,1,c	;volatile
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;interruptHandler.c: 56: was_low_1 = 0;
 17461  003946  0E00               	movlw	0
 17462  003948  6E7A               	movwf	_was_low_1+1,c	;volatile
 17463  00394A  0E00               	movlw	0
 17464  00394C  6E79               	movwf	_was_low_1,c	;volatile
 17465                           
 17466                           ; BSR set to: 0
 17467                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17468  00394E  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17472  003952  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17473                           
 17474                           ;interruptHandler.c: 59: }
 17475  003956  D00F               	goto	i2l9089
 17476  003958                     i2l924:
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;interruptHandler.c: 60: else{
 17480                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17481  003958  928B               	bcf	3979,1,c	;volatile
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;interruptHandler.c: 62: was_low_1 = 1;
 17485  00395A  0E00               	movlw	0
 17486  00395C  6E7A               	movwf	_was_low_1+1,c	;volatile
 17487  00395E  0E01               	movlw	1
 17488  003960  6E79               	movwf	_was_low_1,c	;volatile
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17492  003962  0101               	movlb	1	; () banked
 17493  003964  511C               	movf	_servoTimes& (0+255),w,b
 17494  003966  0800               	sublw	0
 17495  003968  0F20               	addlw	32
 17496  00396A  6ECF               	movwf	4047,c	;volatile
 17497                           
 17498                           ; BSR set to: 1
 17499                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17500  00396C  0101               	movlb	1	; () banked
 17501  00396E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17502  003970  0800               	sublw	0
 17503  003972  0F20               	addlw	32
 17504  003974  6ECE               	movwf	4046,c	;volatile
 17505  003976                     i2l9089:
 17506                           
 17507                           ;interruptHandler.c: 65: }
 17508                           ;interruptHandler.c: 66: TMR1ON = 1;
 17509  003976  80CD               	bsf	4045,0,c	;volatile
 17510  003978                     i2l9091:
 17511                           
 17512                           ;interruptHandler.c: 67: }
 17513                           ;interruptHandler.c: 68: }
 17514                           ;interruptHandler.c: 70: if(TMR3IF){
 17515  003978  A2A1               	btfss	4001,1,c	;volatile
 17516  00397A  D024               	goto	i2l930
 17517                           
 17518                           ;interruptHandler.c: 71: TMR3IF = 0;
 17519  00397C  92A1               	bcf	4001,1,c	;volatile
 17520                           
 17521                           ;interruptHandler.c: 72: TMR3ON = 0;
 17522  00397E  90B1               	bcf	4017,0,c	;volatile
 17523                           
 17524                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17525  003980  0100               	movlb	0	; () banked
 17526  003982  05FC               	decf	_machine_state& (0+255),w,b
 17527  003984  A4D8               	btfss	status,2,c
 17528  003986  D01E               	goto	i2l930
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;interruptHandler.c: 74: if(was_low_3){
 17532  003988  507B               	movf	_was_low_3,w,c	;volatile
 17533  00398A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17534  00398C  B4D8               	btfsc	status,2,c
 17535  00398E  D00A               	goto	i2l928
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17539  003990  848B               	bsf	3979,2,c	;volatile
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;interruptHandler.c: 76: was_low_3 = 0;
 17543  003992  0E00               	movlw	0
 17544  003994  6E7C               	movwf	_was_low_3+1,c	;volatile
 17545  003996  0E00               	movlw	0
 17546  003998  6E7B               	movwf	_was_low_3,c	;volatile
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17550  00399A  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17554  00399E  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17555                           
 17556                           ;interruptHandler.c: 79: }
 17557  0039A2  D00F               	goto	i2l9113
 17558  0039A4                     i2l928:
 17559                           
 17560                           ; BSR set to: 0
 17561                           ;interruptHandler.c: 80: else{
 17562                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17563  0039A4  948B               	bcf	3979,2,c	;volatile
 17564                           
 17565                           ; BSR set to: 0
 17566                           ;interruptHandler.c: 82: was_low_3 = 1;
 17567  0039A6  0E00               	movlw	0
 17568  0039A8  6E7C               	movwf	_was_low_3+1,c	;volatile
 17569  0039AA  0E01               	movlw	1
 17570  0039AC  6E7B               	movwf	_was_low_3,c	;volatile
 17571                           
 17572                           ; BSR set to: 0
 17573                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17574  0039AE  0101               	movlb	1	; () banked
 17575  0039B0  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17576  0039B2  0800               	sublw	0
 17577  0039B4  0F20               	addlw	32
 17578  0039B6  6EB3               	movwf	4019,c	;volatile
 17579                           
 17580                           ; BSR set to: 1
 17581                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17582  0039B8  0101               	movlb	1	; () banked
 17583  0039BA  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17584  0039BC  0800               	sublw	0
 17585  0039BE  0F20               	addlw	32
 17586  0039C0  6EB2               	movwf	4018,c	;volatile
 17587  0039C2                     i2l9113:
 17588                           
 17589                           ;interruptHandler.c: 85: }
 17590                           ;interruptHandler.c: 86: TMR3ON = 1;
 17591  0039C2  80B1               	bsf	4017,0,c	;volatile
 17592  0039C4                     i2l930:
 17593  0039C4  C05A  FFF5         	movff	??_handler+15,tablat
 17594  0039C8  C059  FFF8         	movff	??_handler+14,tblptru
 17595  0039CC  C058  FFF7         	movff	??_handler+13,tblptrh
 17596  0039D0  C057  FFF6         	movff	??_handler+12,tblptrl
 17597  0039D4  C056  FFF4         	movff	??_handler+11,prodh
 17598  0039D8  C055  FFF3         	movff	??_handler+10,prodl
 17599  0039DC  C054  FFDA         	movff	??_handler+9,fsr2h
 17600  0039E0  C053  FFD9         	movff	??_handler+8,fsr2l
 17601  0039E4  C052  FFE2         	movff	??_handler+7,fsr1h
 17602  0039E8  C051  FFE1         	movff	??_handler+6,fsr1l
 17603  0039EC  C050  FFEA         	movff	??_handler+5,fsr0h
 17604  0039F0  C04F  FFE9         	movff	??_handler+4,fsr0l
 17605  0039F4  C04E  FFFB         	movff	??_handler+3,pclatu
 17606  0039F8  C04D  FFFA         	movff	??_handler+2,pclath
 17607  0039FC  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17608  0039FE  0011               	retfie		f
 17609  003A00                     __end_of_handler:
 17610                           	opt stack 0
 17611                           pclatu	equ	0xFFB
 17612                           pclath	equ	0xFFA
 17613                           tblptru	equ	0xFF8
 17614                           tblptrh	equ	0xFF7
 17615                           tblptrl	equ	0xFF6
 17616                           tablat	equ	0xFF5
 17617                           prodh	equ	0xFF4
 17618                           prodl	equ	0xFF3
 17619                           intcon	equ	0xFF2
 17620                           intcon2	equ	0xFF1
 17621                           intcon3	equ	0xFF0
 17622                           indf0	equ	0xFEF
 17623                           postinc0	equ	0xFEE
 17624                           fsr0h	equ	0xFEA
 17625                           fsr0l	equ	0xFE9
 17626                           wreg	equ	0xFE8
 17627                           postdec1	equ	0xFE5
 17628                           fsr1h	equ	0xFE2
 17629                           fsr1l	equ	0xFE1
 17630                           indf2	equ	0xFDF
 17631                           postinc2	equ	0xFDE
 17632                           postdec2	equ	0xFDD
 17633                           fsr2h	equ	0xFDA
 17634                           fsr2l	equ	0xFD9
 17635                           status	equ	0xFD8
 17636                           
 17637 ;; *************** function _updateMenu *****************
 17638 ;; Defined at:
 17639 ;;		line 213 in file "UI.c"
 17640 ;; Parameters:    Size  Location     Type
 17641 ;;		None
 17642 ;; Auto vars:     Size  Location     Type
 17643 ;;		None
 17644 ;; Return value:  Size  Location     Type
 17645 ;;                  1    wreg      void 
 17646 ;; Registers used:
 17647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17657 ;;Total ram usage:        2 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; Hardware stack levels required when called:    5
 17660 ;; This function calls:
 17661 ;;		_change_state_to_logs_11
 17662 ;;		_change_state_to_logs_12
 17663 ;;		_change_state_to_logs_22
 17664 ;;		_change_state_to_logs_23
 17665 ;;		_change_state_to_logs_33
 17666 ;;		_change_state_to_logs_34
 17667 ;;		_change_state_to_menu_11
 17668 ;;		_change_state_to_menu_23
 17669 ;;		_dispLogs
 17670 ;;		_inputHandler
 17671 ;;		i2_change_state_to_menu_12
 17672 ;;		i2_change_state_to_menu_22
 17673 ;;		i2_change_state_to_menu_start
 17674 ;; This function is called by:
 17675 ;;		_handler
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           	psect	text60
 17680  0026F0                     __ptext60:
 17681                           	opt stack 0
 17682  0026F0                     _updateMenu:
 17683                           	opt stack 18
 17684                           
 17685                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17686                           
 17687                           ;incstack = 0
 17688  0026F0  0E00               	movlw	0
 17689  0026F2  6E78               	movwf	_up+1,c
 17690  0026F4  0E00               	movlw	0
 17691  0026F6  6E77               	movwf	_up,c
 17692  0026F8  0E00               	movlw	0
 17693  0026FA  6E60               	movwf	_down+1,c
 17694  0026FC  0E00               	movlw	0
 17695  0026FE  6E5F               	movwf	_down,c
 17696  002700  0E00               	movlw	0
 17697  002702  6E62               	movwf	_enter+1,c
 17698  002704  0E00               	movlw	0
 17699  002706  6E61               	movwf	_enter,c
 17700  002708  0E00               	movlw	0
 17701  00270A  6E5C               	movwf	_back+1,c
 17702  00270C  0E00               	movlw	0
 17703  00270E  6E5B               	movwf	_back,c
 17704                           
 17705                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17706  002710  9EF2               	bcf	intcon,7,c	;volatile
 17707                           
 17708                           ;UI.c: 217: if (inputHandler()
 17709                           ;UI.c: 220: ){
 17710  002712  EC89  F01A         	call	_inputHandler	;wreg free
 17711  002716  502A               	movf	?_inputHandler,w,c
 17712  002718  102B               	iorwf	?_inputHandler+1,w,c
 17713  00271A  A4D8               	btfss	status,2,c
 17714  00271C  D112               	goto	i2l8751
 17715  00271E  D146               	goto	i2l257
 17716  002720                     i2l8603:
 17717                           
 17718                           ;UI.c: 224: change_state_to_menu_11();
 17719  002720  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 17720                           
 17721                           ;UI.c: 225: break;
 17722  002724  D143               	goto	i2l257
 17723  002726                     i2l8605:
 17724                           
 17725                           ;UI.c: 228: if(up){
 17726  002726  5077               	movf	_up,w,c
 17727  002728  1078               	iorwf	_up+1,w,c
 17728  00272A  B4D8               	btfsc	status,2,c
 17729  00272C  D003               	goto	i2l8609
 17730                           
 17731                           ;UI.c: 229: change_state_to_menu_23();
 17732  00272E  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 17733                           
 17734                           ;UI.c: 230: }
 17735  002732  D13C               	goto	i2l257
 17736  002734                     i2l8609:
 17737                           
 17738                           ;UI.c: 231: else if(down){
 17739  002734  505F               	movf	_down,w,c
 17740  002736  1060               	iorwf	_down+1,w,c
 17741  002738  B4D8               	btfsc	status,2,c
 17742  00273A  D003               	goto	i2l8613
 17743                           
 17744                           ;UI.c: 232: change_state_to_menu_12();
 17745  00273C  EC74  F026         	call	i2_change_state_to_menu_12	;wreg free
 17746                           
 17747                           ;UI.c: 233: }
 17748  002740  D135               	goto	i2l257
 17749  002742                     i2l8613:
 17750                           
 17751                           ;UI.c: 234: else if(enter){
 17752  002742  5061               	movf	_enter,w,c
 17753  002744  1062               	iorwf	_enter+1,w,c
 17754  002746  B4D8               	btfsc	status,2,c
 17755  002748  D131               	goto	i2l257
 17756                           
 17757                           ;UI.c: 235: change_state_to_menu_start();
 17758  00274A  ECCE  F027         	call	i2_change_state_to_menu_start	;wreg free
 17759                           
 17760                           ;UI.c: 236: }
 17761                           ;UI.c: 237: break;
 17762  00274E  D12E               	goto	i2l257
 17763  002750                     i2l8617:
 17764                           
 17765                           ;UI.c: 240: if(up){
 17766  002750  5077               	movf	_up,w,c
 17767  002752  1078               	iorwf	_up+1,w,c
 17768  002754  B4D8               	btfsc	status,2,c
 17769  002756  D003               	goto	i2l8621
 17770                           
 17771                           ;UI.c: 241: change_state_to_menu_11();
 17772  002758  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 17773                           
 17774                           ;UI.c: 242: }
 17775  00275C  D127               	goto	i2l257
 17776  00275E                     i2l8621:
 17777                           
 17778                           ;UI.c: 243: else if(down){
 17779  00275E  505F               	movf	_down,w,c
 17780  002760  1060               	iorwf	_down+1,w,c
 17781  002762  B4D8               	btfsc	status,2,c
 17782  002764  D011               	goto	i2l8637
 17783                           
 17784                           ;UI.c: 244: change_state_to_menu_23();
 17785  002766  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 17786                           
 17787                           ;UI.c: 245: }
 17788  00276A  D120               	goto	i2l257
 17789  00276C                     i2l8629:
 17790                           
 17791                           ;UI.c: 252: if(up){
 17792  00276C  5077               	movf	_up,w,c
 17793  00276E  1078               	iorwf	_up+1,w,c
 17794  002770  B4D8               	btfsc	status,2,c
 17795  002772  D003               	goto	i2l8633
 17796                           
 17797                           ;UI.c: 253: change_state_to_menu_11();
 17798  002774  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 17799                           
 17800                           ;UI.c: 254: }
 17801  002778  D119               	goto	i2l257
 17802  00277A                     i2l8633:
 17803                           
 17804                           ;UI.c: 255: else if(down){
 17805  00277A  505F               	movf	_down,w,c
 17806  00277C  1060               	iorwf	_down+1,w,c
 17807  00277E  B4D8               	btfsc	status,2,c
 17808  002780  D003               	goto	i2l8637
 17809                           
 17810                           ;UI.c: 256: change_state_to_menu_23();
 17811  002782  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 17812                           
 17813                           ;UI.c: 257: }
 17814  002786  D112               	goto	i2l257
 17815  002788                     i2l8637:
 17816                           
 17817                           ;UI.c: 258: else if(enter){
 17818  002788  5061               	movf	_enter,w,c
 17819  00278A  1062               	iorwf	_enter+1,w,c
 17820  00278C  B4D8               	btfsc	status,2,c
 17821  00278E  D10E               	goto	i2l257
 17822                           
 17823                           ;UI.c: 259: machine_state = Sorting_state;
 17824  002790  0E01               	movlw	1
 17825  002792  0100               	movlb	0	; () banked
 17826  002794  6FFC               	movwf	_machine_state& (0+255),b
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;UI.c: 260: }
 17830                           ;UI.c: 261: break;
 17831                           
 17832                           ; BSR set to: 0
 17833                           
 17834                           ; BSR set to: 0
 17835  002796  D10A               	goto	i2l257
 17836  002798                     i2l8641:
 17837                           
 17838                           ;UI.c: 264: if(up){
 17839  002798  5077               	movf	_up,w,c
 17840  00279A  1078               	iorwf	_up+1,w,c
 17841  00279C  B4D8               	btfsc	status,2,c
 17842  00279E  D003               	goto	i2l8645
 17843                           
 17844                           ;UI.c: 265: change_state_to_menu_22();
 17845  0027A0  EC5C  F026         	call	i2_change_state_to_menu_22	;wreg free
 17846                           
 17847                           ;UI.c: 266: }
 17848  0027A4  D103               	goto	i2l257
 17849  0027A6                     i2l8645:
 17850                           
 17851                           ;UI.c: 267: else if(down){
 17852  0027A6  505F               	movf	_down,w,c
 17853  0027A8  1060               	iorwf	_down+1,w,c
 17854  0027AA  B4D8               	btfsc	status,2,c
 17855  0027AC  D003               	goto	i2l8649
 17856                           
 17857                           ;UI.c: 268: change_state_to_menu_11();
 17858  0027AE  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 17859                           
 17860                           ;UI.c: 269: }
 17861  0027B2  D0FC               	goto	i2l257
 17862  0027B4                     i2l8649:
 17863                           
 17864                           ;UI.c: 270: else if(enter){
 17865  0027B4  5061               	movf	_enter,w,c
 17866  0027B6  1062               	iorwf	_enter+1,w,c
 17867  0027B8  B4D8               	btfsc	status,2,c
 17868  0027BA  D0F8               	goto	i2l257
 17869                           
 17870                           ;UI.c: 271: change_state_to_logs_11();
 17871  0027BC  EC1C  F027         	call	_change_state_to_logs_11	;wreg free
 17872                           
 17873                           ;UI.c: 272: }
 17874                           ;UI.c: 273: break;
 17875  0027C0  D0F5               	goto	i2l257
 17876  0027C2                     i2l8653:
 17877                           
 17878                           ;UI.c: 276: if(up){
 17879  0027C2  5077               	movf	_up,w,c
 17880  0027C4  1078               	iorwf	_up+1,w,c
 17881  0027C6  B4D8               	btfsc	status,2,c
 17882  0027C8  D003               	goto	i2l8657
 17883                           
 17884                           ;UI.c: 277: change_state_to_logs_34();
 17885  0027CA  ECBC  F026         	call	_change_state_to_logs_34	;wreg free
 17886                           
 17887                           ;UI.c: 278: }
 17888  0027CE  D0EE               	goto	i2l257
 17889  0027D0                     i2l8657:
 17890                           
 17891                           ;UI.c: 279: else if(down){
 17892  0027D0  505F               	movf	_down,w,c
 17893  0027D2  1060               	iorwf	_down+1,w,c
 17894  0027D4  B4D8               	btfsc	status,2,c
 17895  0027D6  D003               	goto	i2l8661
 17896                           
 17897                           ;UI.c: 280: change_state_to_logs_12();
 17898  0027D8  EC04  F027         	call	_change_state_to_logs_12	;wreg free
 17899                           
 17900                           ;UI.c: 281: }
 17901  0027DC  D0E7               	goto	i2l257
 17902  0027DE                     i2l8661:
 17903                           
 17904                           ;UI.c: 282: else if(enter){
 17905  0027DE  5061               	movf	_enter,w,c
 17906  0027E0  1062               	iorwf	_enter+1,w,c
 17907  0027E2  B4D8               	btfsc	status,2,c
 17908  0027E4  D007               	goto	i2l8665
 17909                           
 17910                           ;UI.c: 283: dispLogs(1);
 17911  0027E6  0E00               	movlw	0
 17912  0027E8  6E13               	movwf	dispLogs@myLog+1,c
 17913  0027EA  0E01               	movlw	1
 17914  0027EC  6E12               	movwf	dispLogs@myLog,c
 17915  0027EE  EC08  F028         	call	_dispLogs	;wreg free
 17916                           
 17917                           ;UI.c: 284: }
 17918  0027F2  D0DC               	goto	i2l257
 17919  0027F4                     i2l8665:
 17920                           
 17921                           ;UI.c: 285: else if(back){
 17922  0027F4  505B               	movf	_back,w,c
 17923  0027F6  105C               	iorwf	_back+1,w,c
 17924  0027F8  B4D8               	btfsc	status,2,c
 17925  0027FA  D0D8               	goto	i2l257
 17926                           
 17927                           ;UI.c: 286: change_state_to_menu_23();
 17928  0027FC  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 17929                           
 17930                           ;UI.c: 287: }
 17931                           ;UI.c: 288: break;
 17932  002800  D0D5               	goto	i2l257
 17933  002802                     i2l8669:
 17934                           
 17935                           ;UI.c: 291: if(up){
 17936  002802  5077               	movf	_up,w,c
 17937  002804  1078               	iorwf	_up+1,w,c
 17938  002806  B4D8               	btfsc	status,2,c
 17939  002808  D003               	goto	i2l8673
 17940                           
 17941                           ;UI.c: 292: change_state_to_logs_11();
 17942  00280A  EC1C  F027         	call	_change_state_to_logs_11	;wreg free
 17943                           
 17944                           ;UI.c: 293: }
 17945  00280E  D0CE               	goto	i2l257
 17946  002810                     i2l8673:
 17947                           
 17948                           ;UI.c: 294: else if(down){
 17949  002810  505F               	movf	_down,w,c
 17950  002812  1060               	iorwf	_down+1,w,c
 17951  002814  B4D8               	btfsc	status,2,c
 17952  002816  D003               	goto	i2l8677
 17953                           
 17954                           ;UI.c: 295: change_state_to_logs_23();
 17955  002818  EC62  F027         	call	_change_state_to_logs_23	;wreg free
 17956                           
 17957                           ;UI.c: 296: }
 17958  00281C  D0C7               	goto	i2l257
 17959  00281E                     i2l8677:
 17960                           
 17961                           ;UI.c: 297: else if(enter){
 17962  00281E  5061               	movf	_enter,w,c
 17963  002820  1062               	iorwf	_enter+1,w,c
 17964  002822  B4D8               	btfsc	status,2,c
 17965  002824  D007               	goto	i2l8681
 17966                           
 17967                           ;UI.c: 298: dispLogs(2);
 17968  002826  0E00               	movlw	0
 17969  002828  6E13               	movwf	dispLogs@myLog+1,c
 17970  00282A  0E02               	movlw	2
 17971  00282C  6E12               	movwf	dispLogs@myLog,c
 17972  00282E  EC08  F028         	call	_dispLogs	;wreg free
 17973                           
 17974                           ;UI.c: 299: }
 17975  002832  D0BC               	goto	i2l257
 17976  002834                     i2l8681:
 17977                           
 17978                           ;UI.c: 300: else if(back){
 17979  002834  505B               	movf	_back,w,c
 17980  002836  105C               	iorwf	_back+1,w,c
 17981  002838  B4D8               	btfsc	status,2,c
 17982  00283A  D0B8               	goto	i2l257
 17983                           
 17984                           ;UI.c: 301: change_state_to_menu_23();
 17985  00283C  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 17986                           
 17987                           ;UI.c: 302: }
 17988                           ;UI.c: 303: break;
 17989  002840  D0B5               	goto	i2l257
 17990  002842                     i2l8685:
 17991                           
 17992                           ;UI.c: 306: if(up){
 17993  002842  5077               	movf	_up,w,c
 17994  002844  1078               	iorwf	_up+1,w,c
 17995  002846  B4D8               	btfsc	status,2,c
 17996  002848  D003               	goto	i2l8689
 17997                           
 17998                           ;UI.c: 307: change_state_to_logs_11();
 17999  00284A  EC1C  F027         	call	_change_state_to_logs_11	;wreg free
 18000                           
 18001                           ;UI.c: 308: }
 18002  00284E  D0AE               	goto	i2l257
 18003  002850                     i2l8689:
 18004                           
 18005                           ;UI.c: 309: else if(down){
 18006  002850  505F               	movf	_down,w,c
 18007  002852  1060               	iorwf	_down+1,w,c
 18008  002854  B4D8               	btfsc	status,2,c
 18009  002856  D003               	goto	i2l8693
 18010                           
 18011                           ;UI.c: 310: change_state_to_logs_23();
 18012  002858  EC62  F027         	call	_change_state_to_logs_23	;wreg free
 18013                           
 18014                           ;UI.c: 311: }
 18015  00285C  D0A7               	goto	i2l257
 18016  00285E                     i2l8693:
 18017                           
 18018                           ;UI.c: 312: else if(enter){
 18019  00285E  5061               	movf	_enter,w,c
 18020  002860  1062               	iorwf	_enter+1,w,c
 18021  002862  B4D8               	btfsc	status,2,c
 18022  002864  D007               	goto	i2l8697
 18023                           
 18024                           ;UI.c: 313: dispLogs(2);
 18025  002866  0E00               	movlw	0
 18026  002868  6E13               	movwf	dispLogs@myLog+1,c
 18027  00286A  0E02               	movlw	2
 18028  00286C  6E12               	movwf	dispLogs@myLog,c
 18029  00286E  EC08  F028         	call	_dispLogs	;wreg free
 18030                           
 18031                           ;UI.c: 314: }
 18032  002872  D09C               	goto	i2l257
 18033  002874                     i2l8697:
 18034                           
 18035                           ;UI.c: 315: else if(back){
 18036  002874  505B               	movf	_back,w,c
 18037  002876  105C               	iorwf	_back+1,w,c
 18038  002878  B4D8               	btfsc	status,2,c
 18039  00287A  D098               	goto	i2l257
 18040                           
 18041                           ;UI.c: 316: change_state_to_menu_23();
 18042  00287C  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 18043                           
 18044                           ;UI.c: 317: }
 18045                           ;UI.c: 318: break;
 18046  002880  D095               	goto	i2l257
 18047  002882                     i2l8701:
 18048                           
 18049                           ;UI.c: 321: if(up){
 18050  002882  5077               	movf	_up,w,c
 18051  002884  1078               	iorwf	_up+1,w,c
 18052  002886  B4D8               	btfsc	status,2,c
 18053  002888  D003               	goto	i2l8705
 18054                           
 18055                           ;UI.c: 322: change_state_to_logs_22();
 18056  00288A  ECEC  F026         	call	_change_state_to_logs_22	;wreg free
 18057                           
 18058                           ;UI.c: 323: }
 18059  00288E  D08E               	goto	i2l257
 18060  002890                     i2l8705:
 18061                           
 18062                           ;UI.c: 324: else if(down){
 18063  002890  505F               	movf	_down,w,c
 18064  002892  1060               	iorwf	_down+1,w,c
 18065  002894  B4D8               	btfsc	status,2,c
 18066  002896  D003               	goto	i2l8709
 18067                           
 18068                           ;UI.c: 325: change_state_to_logs_34();
 18069  002898  ECBC  F026         	call	_change_state_to_logs_34	;wreg free
 18070                           
 18071                           ;UI.c: 326: }
 18072  00289C  D087               	goto	i2l257
 18073  00289E                     i2l8709:
 18074                           
 18075                           ;UI.c: 327: else if(enter){
 18076  00289E  5061               	movf	_enter,w,c
 18077  0028A0  1062               	iorwf	_enter+1,w,c
 18078  0028A2  B4D8               	btfsc	status,2,c
 18079  0028A4  D007               	goto	i2l8713
 18080                           
 18081                           ;UI.c: 328: dispLogs(3);
 18082  0028A6  0E00               	movlw	0
 18083  0028A8  6E13               	movwf	dispLogs@myLog+1,c
 18084  0028AA  0E03               	movlw	3
 18085  0028AC  6E12               	movwf	dispLogs@myLog,c
 18086  0028AE  EC08  F028         	call	_dispLogs	;wreg free
 18087                           
 18088                           ;UI.c: 329: }
 18089  0028B2  D07C               	goto	i2l257
 18090  0028B4                     i2l8713:
 18091                           
 18092                           ;UI.c: 330: else if(back){
 18093  0028B4  505B               	movf	_back,w,c
 18094  0028B6  105C               	iorwf	_back+1,w,c
 18095  0028B8  B4D8               	btfsc	status,2,c
 18096  0028BA  D078               	goto	i2l257
 18097                           
 18098                           ;UI.c: 331: change_state_to_menu_23();
 18099  0028BC  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 18100                           
 18101                           ;UI.c: 332: }
 18102                           ;UI.c: 333: break;
 18103  0028C0  D075               	goto	i2l257
 18104  0028C2                     i2l8717:
 18105                           
 18106                           ;UI.c: 336: if(up){
 18107  0028C2  5077               	movf	_up,w,c
 18108  0028C4  1078               	iorwf	_up+1,w,c
 18109  0028C6  B4D8               	btfsc	status,2,c
 18110  0028C8  D003               	goto	i2l8721
 18111                           
 18112                           ;UI.c: 337: change_state_to_logs_22();
 18113  0028CA  ECEC  F026         	call	_change_state_to_logs_22	;wreg free
 18114                           
 18115                           ;UI.c: 338: }
 18116  0028CE  D06E               	goto	i2l257
 18117  0028D0                     i2l8721:
 18118                           
 18119                           ;UI.c: 339: else if(down){
 18120  0028D0  505F               	movf	_down,w,c
 18121  0028D2  1060               	iorwf	_down+1,w,c
 18122  0028D4  B4D8               	btfsc	status,2,c
 18123  0028D6  D003               	goto	i2l8725
 18124                           
 18125                           ;UI.c: 340: change_state_to_logs_34();
 18126  0028D8  ECBC  F026         	call	_change_state_to_logs_34	;wreg free
 18127                           
 18128                           ;UI.c: 341: }
 18129  0028DC  D067               	goto	i2l257
 18130  0028DE                     i2l8725:
 18131                           
 18132                           ;UI.c: 342: else if(enter){
 18133  0028DE  5061               	movf	_enter,w,c
 18134  0028E0  1062               	iorwf	_enter+1,w,c
 18135  0028E2  B4D8               	btfsc	status,2,c
 18136  0028E4  D007               	goto	i2l8729
 18137                           
 18138                           ;UI.c: 343: dispLogs(3);
 18139  0028E6  0E00               	movlw	0
 18140  0028E8  6E13               	movwf	dispLogs@myLog+1,c
 18141  0028EA  0E03               	movlw	3
 18142  0028EC  6E12               	movwf	dispLogs@myLog,c
 18143  0028EE  EC08  F028         	call	_dispLogs	;wreg free
 18144                           
 18145                           ;UI.c: 344: }
 18146  0028F2  D05C               	goto	i2l257
 18147  0028F4                     i2l8729:
 18148                           
 18149                           ;UI.c: 345: else if(back){
 18150  0028F4  505B               	movf	_back,w,c
 18151  0028F6  105C               	iorwf	_back+1,w,c
 18152  0028F8  B4D8               	btfsc	status,2,c
 18153  0028FA  D058               	goto	i2l257
 18154                           
 18155                           ;UI.c: 346: change_state_to_menu_23();
 18156  0028FC  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 18157                           
 18158                           ;UI.c: 347: }
 18159                           ;UI.c: 348: break;
 18160  002900  D055               	goto	i2l257
 18161  002902                     i2l8733:
 18162                           
 18163                           ;UI.c: 351: if(up){
 18164  002902  5077               	movf	_up,w,c
 18165  002904  1078               	iorwf	_up+1,w,c
 18166  002906  B4D8               	btfsc	status,2,c
 18167  002908  D003               	goto	i2l8737
 18168                           
 18169                           ;UI.c: 352: change_state_to_logs_33();
 18170  00290A  ECD4  F026         	call	_change_state_to_logs_33	;wreg free
 18171                           
 18172                           ;UI.c: 353: }
 18173  00290E  D04E               	goto	i2l257
 18174  002910                     i2l8737:
 18175                           
 18176                           ;UI.c: 354: else if(down){
 18177  002910  505F               	movf	_down,w,c
 18178  002912  1060               	iorwf	_down+1,w,c
 18179  002914  B4D8               	btfsc	status,2,c
 18180  002916  D003               	goto	i2l8741
 18181                           
 18182                           ;UI.c: 355: change_state_to_logs_11();
 18183  002918  EC1C  F027         	call	_change_state_to_logs_11	;wreg free
 18184                           
 18185                           ;UI.c: 356: }
 18186  00291C  D047               	goto	i2l257
 18187  00291E                     i2l8741:
 18188                           
 18189                           ;UI.c: 357: else if(enter){
 18190  00291E  5061               	movf	_enter,w,c
 18191  002920  1062               	iorwf	_enter+1,w,c
 18192  002922  B4D8               	btfsc	status,2,c
 18193  002924  D007               	goto	i2l8745
 18194                           
 18195                           ;UI.c: 358: dispLogs(4);
 18196  002926  0E00               	movlw	0
 18197  002928  6E13               	movwf	dispLogs@myLog+1,c
 18198  00292A  0E04               	movlw	4
 18199  00292C  6E12               	movwf	dispLogs@myLog,c
 18200  00292E  EC08  F028         	call	_dispLogs	;wreg free
 18201                           
 18202                           ;UI.c: 359: }
 18203  002932  D03C               	goto	i2l257
 18204  002934                     i2l8745:
 18205                           
 18206                           ;UI.c: 360: else if(back){
 18207  002934  505B               	movf	_back,w,c
 18208  002936  105C               	iorwf	_back+1,w,c
 18209  002938  B4D8               	btfsc	status,2,c
 18210  00293A  D038               	goto	i2l257
 18211                           
 18212                           ;UI.c: 361: change_state_to_menu_23();
 18213  00293C  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 18214                           
 18215                           ;UI.c: 367: }
 18216                           
 18217                           ;UI.c: 366: break;
 18218                           
 18219                           ;UI.c: 365: default:
 18220                           
 18221                           ;UI.c: 362: }
 18222                           ;UI.c: 363: break;
 18223  002940  D035               	goto	i2l257
 18224  002942                     i2l8751:
 18225  002942  C0E6  F043         	movff	_cur_state,??_updateMenu
 18226  002946  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 18227                           
 18228                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18229                           ; Switch size 1, requested type "space"
 18230                           ; Number of cases is 3, Range of values is 0 to 4
 18231                           ; switch strategies available:
 18232                           ; Name         Instructions Cycles
 18233                           ; simple_byte           10     6 (average)
 18234                           ;	Chosen strategy is simple_byte
 18235  00294A  5044               	movf	??_updateMenu+1,w,c
 18236  00294C  0A00               	xorlw	0	; case 0
 18237  00294E  B4D8               	btfsc	status,2,c
 18238  002950  D007               	goto	i2l9455
 18239  002952  0A03               	xorlw	3	; case 3
 18240  002954  B4D8               	btfsc	status,2,c
 18241  002956  D015               	goto	i2l9457
 18242  002958  0A07               	xorlw	7	; case 4
 18243  00295A  B4D8               	btfsc	status,2,c
 18244  00295C  D020               	goto	i2l9459
 18245  00295E  D026               	goto	i2l257
 18246  002960                     i2l9455:
 18247                           
 18248                           ; Switch size 1, requested type "space"
 18249                           ; Number of cases is 5, Range of values is 0 to 23
 18250                           ; switch strategies available:
 18251                           ; Name         Instructions Cycles
 18252                           ; simple_byte           16     9 (average)
 18253                           ;	Chosen strategy is simple_byte
 18254  002960  5043               	movf	??_updateMenu,w,c
 18255  002962  0A00               	xorlw	0	; case 0
 18256  002964  B4D8               	btfsc	status,2,c
 18257  002966  D6DC               	goto	i2l8603
 18258  002968  0A0B               	xorlw	11	; case 11
 18259  00296A  B4D8               	btfsc	status,2,c
 18260  00296C  D6DC               	goto	i2l8605
 18261  00296E  0A07               	xorlw	7	; case 12
 18262  002970  B4D8               	btfsc	status,2,c
 18263  002972  D6EE               	goto	i2l8617
 18264  002974  0A1A               	xorlw	26	; case 22
 18265  002976  B4D8               	btfsc	status,2,c
 18266  002978  D6F9               	goto	i2l8629
 18267  00297A  0A01               	xorlw	1	; case 23
 18268  00297C  B4D8               	btfsc	status,2,c
 18269  00297E  D70C               	goto	i2l8641
 18270  002980  D015               	goto	i2l257
 18271  002982                     i2l9457:
 18272                           
 18273                           ; Switch size 1, requested type "space"
 18274                           ; Number of cases is 4, Range of values is 243 to 255
 18275                           ; switch strategies available:
 18276                           ; Name         Instructions Cycles
 18277                           ; simple_byte           13     7 (average)
 18278                           ;	Chosen strategy is simple_byte
 18279  002982  5043               	movf	??_updateMenu,w,c
 18280  002984  0AF3               	xorlw	243	; case 243
 18281  002986  B4D8               	btfsc	status,2,c
 18282  002988  D71C               	goto	i2l8653
 18283  00298A  0A07               	xorlw	7	; case 244
 18284  00298C  B4D8               	btfsc	status,2,c
 18285  00298E  D739               	goto	i2l8669
 18286  002990  0A0A               	xorlw	10	; case 254
 18287  002992  B4D8               	btfsc	status,2,c
 18288  002994  D756               	goto	i2l8685
 18289  002996  0A01               	xorlw	1	; case 255
 18290  002998  B4D8               	btfsc	status,2,c
 18291  00299A  D773               	goto	i2l8701
 18292  00299C  D007               	goto	i2l257
 18293  00299E                     i2l9459:
 18294                           
 18295                           ; Switch size 1, requested type "space"
 18296                           ; Number of cases is 2, Range of values is 9 to 10
 18297                           ; switch strategies available:
 18298                           ; Name         Instructions Cycles
 18299                           ; simple_byte            7     4 (average)
 18300                           ;	Chosen strategy is simple_byte
 18301  00299E  5043               	movf	??_updateMenu,w,c
 18302  0029A0  0A09               	xorlw	9	; case 9
 18303  0029A2  B4D8               	btfsc	status,2,c
 18304  0029A4  D78E               	goto	i2l8717
 18305  0029A6  0A03               	xorlw	3	; case 10
 18306  0029A8  B4D8               	btfsc	status,2,c
 18307  0029AA  D7AB               	goto	i2l8733
 18308  0029AC                     i2l257:
 18309                           
 18310                           ;UI.c: 368: }
 18311                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18312  0029AC  8EF2               	bsf	intcon,7,c	;volatile
 18313  0029AE  0012               	return		;funcret
 18314  0029B0                     __end_of_updateMenu:
 18315                           	opt stack 0
 18316                           pclatu	equ	0xFFB
 18317                           pclath	equ	0xFFA
 18318                           tblptru	equ	0xFF8
 18319                           tblptrh	equ	0xFF7
 18320                           tblptrl	equ	0xFF6
 18321                           tablat	equ	0xFF5
 18322                           prodh	equ	0xFF4
 18323                           prodl	equ	0xFF3
 18324                           intcon	equ	0xFF2
 18325                           intcon2	equ	0xFF1
 18326                           intcon3	equ	0xFF0
 18327                           indf0	equ	0xFEF
 18328                           postinc0	equ	0xFEE
 18329                           fsr0h	equ	0xFEA
 18330                           fsr0l	equ	0xFE9
 18331                           wreg	equ	0xFE8
 18332                           postdec1	equ	0xFE5
 18333                           fsr1h	equ	0xFE2
 18334                           fsr1l	equ	0xFE1
 18335                           indf2	equ	0xFDF
 18336                           postinc2	equ	0xFDE
 18337                           postdec2	equ	0xFDD
 18338                           fsr2h	equ	0xFDA
 18339                           fsr2l	equ	0xFD9
 18340                           status	equ	0xFD8
 18341                           
 18342 ;; *************** function i2_change_state_to_menu_start *****************
 18343 ;; Defined at:
 18344 ;;		line 474 in file "UI.c"
 18345 ;; Parameters:    Size  Location     Type
 18346 ;;		None
 18347 ;; Auto vars:     Size  Location     Type
 18348 ;;		None
 18349 ;; Return value:  Size  Location     Type
 18350 ;;                  1    wreg      void 
 18351 ;; Registers used:
 18352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18353 ;; Tracked objects:
 18354 ;;		On entry : 0/0
 18355 ;;		On exit  : 0/0
 18356 ;;		Unchanged: 0/0
 18357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18362 ;;Total ram usage:        0 bytes
 18363 ;; Hardware stack levels used:    1
 18364 ;; Hardware stack levels required when called:    4
 18365 ;; This function calls:
 18366 ;;		i2_lcdInst
 18367 ;;		i2_printRTC
 18368 ;;		i2_printf
 18369 ;; This function is called by:
 18370 ;;		_updateMenu
 18371 ;; This function uses a non-reentrant model
 18372 ;;
 18373                           
 18374                           	psect	text61
 18375  004F9C                     __ptext61:
 18376                           	opt stack 0
 18377  004F9C                     i2_change_state_to_menu_start:
 18378                           	opt stack 18
 18379                           
 18380                           ;UI.c: 475: cur_state = 0;
 18381                           
 18382                           ;incstack = 0
 18383  004F9C  0E00               	movlw	0
 18384  004F9E  0100               	movlb	0	; () banked
 18385  004FA0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18386  004FA2  0E00               	movlw	0
 18387  004FA4  6FE6               	movwf	_cur_state& (0+255),b
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;UI.c: 477: lcdInst(0b10000000);;
 18391  004FA6  0E80               	movlw	128
 18392  004FA8  ECA6  F028         	call	i2_lcdInst
 18393                           
 18394                           ;UI.c: 478: printRTC();
 18395  004FAC  EC4D  F017         	call	i2_printRTC	;wreg free
 18396                           
 18397                           ;UI.c: 479: lcdInst(0b11000000);;
 18398  004FB0  0EC0               	movlw	192
 18399  004FB2  ECA6  F028         	call	i2_lcdInst
 18400                           
 18401                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18402  004FB6  0EF7               	movlw	low STR_30
 18403  004FB8  6E0D               	movwf	i2printf@f,c
 18404  004FBA  0EFD               	movlw	high STR_30
 18405  004FBC  6E0E               	movwf	i2printf@f+1,c
 18406  004FBE  ECDD  F00E         	call	i2_printf	;wreg free
 18407  004FC2  0012               	return		;funcret
 18408  004FC4                     __end_ofi2_change_state_to_menu_start:
 18409                           	opt stack 0
 18410                           pclatu	equ	0xFFB
 18411                           pclath	equ	0xFFA
 18412                           tblptru	equ	0xFF8
 18413                           tblptrh	equ	0xFF7
 18414                           tblptrl	equ	0xFF6
 18415                           tablat	equ	0xFF5
 18416                           prodh	equ	0xFF4
 18417                           prodl	equ	0xFF3
 18418                           intcon	equ	0xFF2
 18419                           intcon2	equ	0xFF1
 18420                           intcon3	equ	0xFF0
 18421                           indf0	equ	0xFEF
 18422                           postinc0	equ	0xFEE
 18423                           fsr0h	equ	0xFEA
 18424                           fsr0l	equ	0xFE9
 18425                           wreg	equ	0xFE8
 18426                           postdec1	equ	0xFE5
 18427                           fsr1h	equ	0xFE2
 18428                           fsr1l	equ	0xFE1
 18429                           indf2	equ	0xFDF
 18430                           postinc2	equ	0xFDE
 18431                           postdec2	equ	0xFDD
 18432                           fsr2h	equ	0xFDA
 18433                           fsr2l	equ	0xFD9
 18434                           status	equ	0xFD8
 18435                           
 18436 ;; *************** function i2_printRTC *****************
 18437 ;; Defined at:
 18438 ;;		line 63 in file "RTC.c"
 18439 ;; Parameters:    Size  Location     Type
 18440 ;;		None
 18441 ;; Auto vars:     Size  Location     Type
 18442 ;;  printRTC       14   44[COMRAM] int [7]
 18443 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18444 ;;  printRTC        2   64[COMRAM] int 
 18445 ;;  printRTC        2   58[COMRAM] int 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  1    wreg      void 
 18448 ;; Registers used:
 18449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18457 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;Total ram usage:       25 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    3
 18462 ;; This function calls:
 18463 ;;		i2_getRTC
 18464 ;;		i2_lcdInst
 18465 ;;		i2_printf
 18466 ;;		i2_strcpy
 18467 ;; This function is called by:
 18468 ;;		i2_change_state_to_menu_start
 18469 ;; This function uses a non-reentrant model
 18470 ;;
 18471                           
 18472                           	psect	text62
 18473  002E9A                     __ptext62:
 18474                           	opt stack 0
 18475  002E9A                     i2_printRTC:
 18476                           	opt stack 18
 18477                           
 18478                           ;RTC.c: 64: getRTC();
 18479                           
 18480                           ;incstack = 0
 18481  002E9A  EC5A  F023         	call	i2_getRTC	;wreg free
 18482                           
 18483                           ;RTC.c: 65: char month[] = "MMM";
 18484  002E9E  C13B  F03D         	movff	printRTC@F3219,i2printRTC@month
 18485  002EA2  C13C  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18486  002EA6  C13D  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18487  002EAA  C13E  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18488                           
 18489                           ;RTC.c: 66: int INT_time[7];
 18490                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18491  002EAE  0E00               	movlw	0
 18492  002EB0  6E42               	movwf	i2printRTC@i+1,c
 18493  002EB2  0E00               	movlw	0
 18494  002EB4  6E41               	movwf	i2printRTC@i,c
 18495  002EB6  BE42               	btfsc	i2printRTC@i+1,7,c
 18496  002EB8  D006               	goto	i2l6695
 18497  002EBA  5042               	movf	i2printRTC@i+1,w,c
 18498  002EBC  E135               	bnz	i2l606
 18499  002EBE  0E07               	movlw	7
 18500  002EC0  5C41               	subwf	i2printRTC@i,w,c
 18501  002EC2  B0D8               	btfsc	status,0,c
 18502  002EC4  D031               	goto	i2l606
 18503  002EC6                     i2l6695:
 18504                           
 18505                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18506  002EC6  0E24               	movlw	low _time
 18507  002EC8  2441               	addwf	i2printRTC@i,w,c
 18508  002ECA  6ED9               	movwf	fsr2l,c
 18509  002ECC  0E01               	movlw	high _time
 18510  002ECE  2042               	addwfc	i2printRTC@i+1,w,c
 18511  002ED0  6EDA               	movwf	fsr2h,c
 18512  002ED2  50DF               	movf	indf2,w,c
 18513  002ED4  6E2A               	movwf	??i2_printRTC& (0+255),c
 18514  002ED6  3A2A               	swapf	??i2_printRTC,f,c
 18515  002ED8  0E0F               	movlw	15
 18516  002EDA  162A               	andwf	??i2_printRTC,f,c
 18517  002EDC  0E0F               	movlw	15
 18518  002EDE  162A               	andwf	??i2_printRTC,f,c
 18519  002EE0  502A               	movf	??i2_printRTC,w,c
 18520  002EE2  0D0A               	mullw	10
 18521  002EE4  0E24               	movlw	low _time
 18522  002EE6  2441               	addwf	i2printRTC@i,w,c
 18523  002EE8  6ED9               	movwf	fsr2l,c
 18524  002EEA  0E01               	movlw	high _time
 18525  002EEC  2042               	addwfc	i2printRTC@i+1,w,c
 18526  002EEE  6EDA               	movwf	fsr2h,c
 18527  002EF0  50DF               	movf	indf2,w,c
 18528  002EF2  0B0F               	andlw	15
 18529  002EF4  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18530  002EF6  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18531  002EF8  50F3               	movf	prodl,w,c
 18532  002EFA  262B               	addwf	??i2_printRTC+1,f,c
 18533  002EFC  50F4               	movf	prodh,w,c
 18534  002EFE  222C               	addwfc	??i2_printRTC+2,f,c
 18535  002F00  90D8               	bcf	status,0,c
 18536  002F02  3441               	rlcf	i2printRTC@i,w,c
 18537  002F04  6ED9               	movwf	fsr2l,c
 18538  002F06  3442               	rlcf	i2printRTC@i+1,w,c
 18539  002F08  6EDA               	movwf	fsr2h,c
 18540  002F0A  0E2D               	movlw	low i2printRTC@INT_time
 18541  002F0C  26D9               	addwf	fsr2l,f,c
 18542  002F0E  0E00               	movlw	high i2printRTC@INT_time
 18543  002F10  22DA               	addwfc	fsr2h,f,c
 18544  002F12  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18545  002F16  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18546  002F1A  4A41               	infsnz	i2printRTC@i,f,c
 18547  002F1C  2A42               	incf	i2printRTC@i+1,f,c
 18548  002F1E  BE42               	btfsc	i2printRTC@i+1,7,c
 18549  002F20  D7D2               	goto	i2l6695
 18550  002F22  5042               	movf	i2printRTC@i+1,w,c
 18551  002F24  E101               	bnz	i2u536_40
 18552  002F26  D7CB               	goto	L13
 18553  002F28                     i2u536_40:
 18554  002F28                     i2l606:
 18555                           
 18556                           ;RTC.c: 69: }
 18557                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18558  002F28  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18559  002F2C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18560                           
 18561                           ;RTC.c: 71: switch(RTC_month){
 18562  002F30  D084               	goto	i2l6727
 18563  002F32                     i2l6701:
 18564                           
 18565                           ;RTC.c: 73: strcpy(month, "JAN");
 18566  002F32  0E3D               	movlw	low i2printRTC@month
 18567  002F34  6E01               	movwf	i2strcpy@to,c
 18568  002F36  0E00               	movlw	high i2printRTC@month
 18569  002F38  6E02               	movwf	i2strcpy@to+1,c
 18570  002F3A  0EDB               	movlw	low STR_8
 18571  002F3C  6E03               	movwf	i2strcpy@from,c
 18572  002F3E  0EFF               	movlw	high STR_8
 18573  002F40  6E04               	movwf	i2strcpy@from+1,c
 18574  002F42  EC43  F026         	call	i2_strcpy	;wreg free
 18575                           
 18576                           ;RTC.c: 74: break;
 18577  002F46  D0A6               	goto	i2l6729
 18578  002F48                     i2l6703:
 18579                           
 18580                           ;RTC.c: 76: strcpy(month, "FEB");
 18581  002F48  0E3D               	movlw	low i2printRTC@month
 18582  002F4A  6E01               	movwf	i2strcpy@to,c
 18583  002F4C  0E00               	movlw	high i2printRTC@month
 18584  002F4E  6E02               	movwf	i2strcpy@to+1,c
 18585  002F50  0ECB               	movlw	low STR_9
 18586  002F52  6E03               	movwf	i2strcpy@from,c
 18587  002F54  0EFF               	movlw	high STR_9
 18588  002F56  6E04               	movwf	i2strcpy@from+1,c
 18589  002F58  EC43  F026         	call	i2_strcpy	;wreg free
 18590                           
 18591                           ;RTC.c: 77: break;
 18592  002F5C  D09B               	goto	i2l6729
 18593  002F5E                     i2l6705:
 18594                           
 18595                           ;RTC.c: 79: strcpy(month, "MAR");
 18596  002F5E  0E3D               	movlw	low i2printRTC@month
 18597  002F60  6E01               	movwf	i2strcpy@to,c
 18598  002F62  0E00               	movlw	high i2printRTC@month
 18599  002F64  6E02               	movwf	i2strcpy@to+1,c
 18600  002F66  0EE7               	movlw	low STR_10
 18601  002F68  6E03               	movwf	i2strcpy@from,c
 18602  002F6A  0EFF               	movlw	high STR_10
 18603  002F6C  6E04               	movwf	i2strcpy@from+1,c
 18604  002F6E  EC43  F026         	call	i2_strcpy	;wreg free
 18605                           
 18606                           ;RTC.c: 80: break;
 18607  002F72  D090               	goto	i2l6729
 18608  002F74                     i2l6707:
 18609                           
 18610                           ;RTC.c: 82: strcpy(month, "APR");
 18611  002F74  0E3D               	movlw	low i2printRTC@month
 18612  002F76  6E01               	movwf	i2strcpy@to,c
 18613  002F78  0E00               	movlw	high i2printRTC@month
 18614  002F7A  6E02               	movwf	i2strcpy@to+1,c
 18615  002F7C  0EEB               	movlw	low STR_11
 18616  002F7E  6E03               	movwf	i2strcpy@from,c
 18617  002F80  0EFF               	movlw	high STR_11
 18618  002F82  6E04               	movwf	i2strcpy@from+1,c
 18619  002F84  EC43  F026         	call	i2_strcpy	;wreg free
 18620                           
 18621                           ;RTC.c: 83: break;
 18622  002F88  D085               	goto	i2l6729
 18623  002F8A                     i2l6709:
 18624                           
 18625                           ;RTC.c: 85: strcpy(month, "MAY");
 18626  002F8A  0E3D               	movlw	low i2printRTC@month
 18627  002F8C  6E01               	movwf	i2strcpy@to,c
 18628  002F8E  0E00               	movlw	high i2printRTC@month
 18629  002F90  6E02               	movwf	i2strcpy@to+1,c
 18630  002F92  0EFB               	movlw	low STR_12
 18631  002F94  6E03               	movwf	i2strcpy@from,c
 18632  002F96  0EFF               	movlw	high STR_12
 18633  002F98  6E04               	movwf	i2strcpy@from+1,c
 18634  002F9A  EC43  F026         	call	i2_strcpy	;wreg free
 18635                           
 18636                           ;RTC.c: 86: break;
 18637  002F9E  D07A               	goto	i2l6729
 18638  002FA0                     i2l6711:
 18639                           
 18640                           ;RTC.c: 88: strcpy(month, "JUN");
 18641  002FA0  0E3D               	movlw	low i2printRTC@month
 18642  002FA2  6E01               	movwf	i2strcpy@to,c
 18643  002FA4  0E00               	movlw	high i2printRTC@month
 18644  002FA6  6E02               	movwf	i2strcpy@to+1,c
 18645  002FA8  0EDF               	movlw	low STR_13
 18646  002FAA  6E03               	movwf	i2strcpy@from,c
 18647  002FAC  0EFF               	movlw	high STR_13
 18648  002FAE  6E04               	movwf	i2strcpy@from+1,c
 18649  002FB0  EC43  F026         	call	i2_strcpy	;wreg free
 18650                           
 18651                           ;RTC.c: 89: break;
 18652  002FB4  D06F               	goto	i2l6729
 18653  002FB6                     i2l6713:
 18654                           
 18655                           ;RTC.c: 91: strcpy(month, "JUL");
 18656  002FB6  0E3D               	movlw	low i2printRTC@month
 18657  002FB8  6E01               	movwf	i2strcpy@to,c
 18658  002FBA  0E00               	movlw	high i2printRTC@month
 18659  002FBC  6E02               	movwf	i2strcpy@to+1,c
 18660  002FBE  0ED7               	movlw	low STR_14
 18661  002FC0  6E03               	movwf	i2strcpy@from,c
 18662  002FC2  0EFF               	movlw	high STR_14
 18663  002FC4  6E04               	movwf	i2strcpy@from+1,c
 18664  002FC6  EC43  F026         	call	i2_strcpy	;wreg free
 18665                           
 18666                           ;RTC.c: 92: break;
 18667  002FCA  D064               	goto	i2l6729
 18668  002FCC                     i2l6715:
 18669                           
 18670                           ;RTC.c: 94: strcpy(month, "AUG");
 18671  002FCC  0E3D               	movlw	low i2printRTC@month
 18672  002FCE  6E01               	movwf	i2strcpy@to,c
 18673  002FD0  0E00               	movlw	high i2printRTC@month
 18674  002FD2  6E02               	movwf	i2strcpy@to+1,c
 18675  002FD4  0ED3               	movlw	low STR_15
 18676  002FD6  6E03               	movwf	i2strcpy@from,c
 18677  002FD8  0EFF               	movlw	high STR_15
 18678  002FDA  6E04               	movwf	i2strcpy@from+1,c
 18679  002FDC  EC43  F026         	call	i2_strcpy	;wreg free
 18680                           
 18681                           ;RTC.c: 95: break;
 18682  002FE0  D059               	goto	i2l6729
 18683  002FE2                     i2l6717:
 18684                           
 18685                           ;RTC.c: 97: strcpy(month, "SEP");
 18686  002FE2  0E3D               	movlw	low i2printRTC@month
 18687  002FE4  6E01               	movwf	i2strcpy@to,c
 18688  002FE6  0E00               	movlw	high i2printRTC@month
 18689  002FE8  6E02               	movwf	i2strcpy@to+1,c
 18690  002FEA  0EE3               	movlw	low STR_16
 18691  002FEC  6E03               	movwf	i2strcpy@from,c
 18692  002FEE  0EFF               	movlw	high STR_16
 18693  002FF0  6E04               	movwf	i2strcpy@from+1,c
 18694  002FF2  EC43  F026         	call	i2_strcpy	;wreg free
 18695                           
 18696                           ;RTC.c: 98: break;
 18697  002FF6  D04E               	goto	i2l6729
 18698  002FF8                     i2l6719:
 18699                           
 18700                           ;RTC.c: 100: strcpy(month, "OCT");
 18701  002FF8  0E3D               	movlw	low i2printRTC@month
 18702  002FFA  6E01               	movwf	i2strcpy@to,c
 18703  002FFC  0E00               	movlw	high i2printRTC@month
 18704  002FFE  6E02               	movwf	i2strcpy@to+1,c
 18705  003000  0EF3               	movlw	low STR_17
 18706  003002  6E03               	movwf	i2strcpy@from,c
 18707  003004  0EFF               	movlw	high STR_17
 18708  003006  6E04               	movwf	i2strcpy@from+1,c
 18709  003008  EC43  F026         	call	i2_strcpy	;wreg free
 18710                           
 18711                           ;RTC.c: 101: break;
 18712  00300C  D043               	goto	i2l6729
 18713  00300E                     i2l6721:
 18714                           
 18715                           ;RTC.c: 103: strcpy(month, "NOV");
 18716  00300E  0E3D               	movlw	low i2printRTC@month
 18717  003010  6E01               	movwf	i2strcpy@to,c
 18718  003012  0E00               	movlw	high i2printRTC@month
 18719  003014  6E02               	movwf	i2strcpy@to+1,c
 18720  003016  0EF7               	movlw	low STR_18
 18721  003018  6E03               	movwf	i2strcpy@from,c
 18722  00301A  0EFF               	movlw	high STR_18
 18723  00301C  6E04               	movwf	i2strcpy@from+1,c
 18724  00301E  EC43  F026         	call	i2_strcpy	;wreg free
 18725                           
 18726                           ;RTC.c: 104: break;
 18727  003022  D038               	goto	i2l6729
 18728  003024                     i2l6723:
 18729                           
 18730                           ;RTC.c: 106: strcpy(month, "DEC");
 18731  003024  0E3D               	movlw	low i2printRTC@month
 18732  003026  6E01               	movwf	i2strcpy@to,c
 18733  003028  0E00               	movlw	high i2printRTC@month
 18734  00302A  6E02               	movwf	i2strcpy@to+1,c
 18735  00302C  0ECF               	movlw	low STR_19
 18736  00302E  6E03               	movwf	i2strcpy@from,c
 18737  003030  0EFF               	movlw	high STR_19
 18738  003032  6E04               	movwf	i2strcpy@from+1,c
 18739  003034  EC43  F026         	call	i2_strcpy	;wreg free
 18740                           
 18741                           ;RTC.c: 108: }
 18742                           
 18743                           ;RTC.c: 107: break;
 18744  003038  D02D               	goto	i2l6729
 18745  00303A                     i2l6727:
 18746  00303A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18747  00303E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18748                           
 18749                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18750                           ; Switch size 1, requested type "space"
 18751                           ; Number of cases is 1, Range of values is 0 to 0
 18752                           ; switch strategies available:
 18753                           ; Name         Instructions Cycles
 18754                           ; simple_byte            4     3 (average)
 18755                           ;	Chosen strategy is simple_byte
 18756  003042  502B               	movf	??i2_printRTC+1,w,c
 18757  003044  0A00               	xorlw	0	; case 0
 18758  003046  A4D8               	btfss	status,2,c
 18759  003048  D025               	goto	i2l6729
 18760                           
 18761                           ; Switch size 1, requested type "space"
 18762                           ; Number of cases is 12, Range of values is 1 to 12
 18763                           ; switch strategies available:
 18764                           ; Name         Instructions Cycles
 18765                           ; simple_byte           37    19 (average)
 18766                           ;	Chosen strategy is simple_byte
 18767  00304A  502A               	movf	??i2_printRTC,w,c
 18768  00304C  0A01               	xorlw	1	; case 1
 18769  00304E  B4D8               	btfsc	status,2,c
 18770  003050  D770               	goto	i2l6701
 18771  003052  0A03               	xorlw	3	; case 2
 18772  003054  B4D8               	btfsc	status,2,c
 18773  003056  D778               	goto	i2l6703
 18774  003058  0A01               	xorlw	1	; case 3
 18775  00305A  B4D8               	btfsc	status,2,c
 18776  00305C  D780               	goto	i2l6705
 18777  00305E  0A07               	xorlw	7	; case 4
 18778  003060  B4D8               	btfsc	status,2,c
 18779  003062  D788               	goto	i2l6707
 18780  003064  0A01               	xorlw	1	; case 5
 18781  003066  B4D8               	btfsc	status,2,c
 18782  003068  D790               	goto	i2l6709
 18783  00306A  0A03               	xorlw	3	; case 6
 18784  00306C  B4D8               	btfsc	status,2,c
 18785  00306E  D798               	goto	i2l6711
 18786  003070  0A01               	xorlw	1	; case 7
 18787  003072  B4D8               	btfsc	status,2,c
 18788  003074  D7A0               	goto	i2l6713
 18789  003076  0A0F               	xorlw	15	; case 8
 18790  003078  B4D8               	btfsc	status,2,c
 18791  00307A  D7A8               	goto	i2l6715
 18792  00307C  0A01               	xorlw	1	; case 9
 18793  00307E  B4D8               	btfsc	status,2,c
 18794  003080  D7B0               	goto	i2l6717
 18795  003082  0A03               	xorlw	3	; case 10
 18796  003084  B4D8               	btfsc	status,2,c
 18797  003086  D7B8               	goto	i2l6719
 18798  003088  0A01               	xorlw	1	; case 11
 18799  00308A  B4D8               	btfsc	status,2,c
 18800  00308C  D7C0               	goto	i2l6721
 18801  00308E  0A07               	xorlw	7	; case 12
 18802  003090  B4D8               	btfsc	status,2,c
 18803  003092  D7C8               	goto	i2l6723
 18804  003094                     i2l6729:
 18805                           
 18806                           ;RTC.c: 109: lcdInst(0b10000000);;
 18807  003094  0E80               	movlw	128
 18808  003096  ECA6  F028         	call	i2_lcdInst
 18809                           
 18810                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18811  00309A  0E0A               	movlw	low STR_21
 18812  00309C  6E0D               	movwf	i2printf@f,c
 18813  00309E  0EFB               	movlw	high STR_21
 18814  0030A0  6E0E               	movwf	i2printf@f+1,c
 18815  0030A2  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18816  0030A6  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18817  0030AA  0E3D               	movlw	low i2printRTC@month
 18818  0030AC  6E11               	movwf	?i2_printf+4,c
 18819  0030AE  0E00               	movlw	high i2printRTC@month
 18820  0030B0  6E12               	movwf	?i2_printf+5,c
 18821  0030B2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18822  0030B6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18823  0030BA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18824  0030BE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18825  0030C2  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18826  0030C6  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18827  0030CA  ECDD  F00E         	call	i2_printf	;wreg free
 18828  0030CE  0012               	return		;funcret
 18829  0030D0                     __end_ofi2_printRTC:
 18830                           	opt stack 0
 18831                           pclatu	equ	0xFFB
 18832                           pclath	equ	0xFFA
 18833                           tblptru	equ	0xFF8
 18834                           tblptrh	equ	0xFF7
 18835                           tblptrl	equ	0xFF6
 18836                           tablat	equ	0xFF5
 18837                           prodh	equ	0xFF4
 18838                           prodl	equ	0xFF3
 18839                           intcon	equ	0xFF2
 18840                           intcon2	equ	0xFF1
 18841                           intcon3	equ	0xFF0
 18842                           indf0	equ	0xFEF
 18843                           postinc0	equ	0xFEE
 18844                           fsr0h	equ	0xFEA
 18845                           fsr0l	equ	0xFE9
 18846                           wreg	equ	0xFE8
 18847                           postdec1	equ	0xFE5
 18848                           fsr1h	equ	0xFE2
 18849                           fsr1l	equ	0xFE1
 18850                           indf2	equ	0xFDF
 18851                           postinc2	equ	0xFDE
 18852                           postdec2	equ	0xFDD
 18853                           fsr2h	equ	0xFDA
 18854                           fsr2l	equ	0xFD9
 18855                           status	equ	0xFD8
 18856                           
 18857 ;; *************** function i2_strcpy *****************
 18858 ;; Defined at:
 18859 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;  to              2    0[COMRAM] PTR unsigned char 
 18862 ;;		 -> printRTC@month(4), UI@month(4), 
 18863 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18864 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18865 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18866 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18867 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18868 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18869 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18870 ;;		 -> STR_8(4), 
 18871 ;; Auto vars:     Size  Location     Type
 18872 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18873 ;;		 -> printRTC@month(4), UI@month(4), 
 18874 ;; Return value:  Size  Location     Type
 18875 ;;                  2    0[COMRAM] PTR unsigned char 
 18876 ;; Registers used:
 18877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18878 ;; Tracked objects:
 18879 ;;		On entry : 0/0
 18880 ;;		On exit  : 0/0
 18881 ;;		Unchanged: 0/0
 18882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18886 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;Total ram usage:        6 bytes
 18888 ;; Hardware stack levels used:    1
 18889 ;; This function calls:
 18890 ;;		Nothing
 18891 ;; This function is called by:
 18892 ;;		i2_printRTC
 18893 ;; This function uses a non-reentrant model
 18894 ;;
 18895                           
 18896                           	psect	text63
 18897  004C86                     __ptext63:
 18898                           	opt stack 0
 18899  004C86                     i2_strcpy:
 18900                           	opt stack 20
 18901                           
 18902                           ;incstack = 0
 18903  004C86  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18904  004C8A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18905  004C8E  D004               	goto	i2l6353
 18906  004C90                     i2l6351:
 18907  004C90  4A05               	infsnz	i2strcpy@cp,f,c
 18908  004C92  2A06               	incf	i2strcpy@cp+1,f,c
 18909  004C94  4A03               	infsnz	i2strcpy@from,f,c
 18910  004C96  2A04               	incf	i2strcpy@from+1,f,c
 18911  004C98                     i2l6353:
 18912  004C98  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18913  004C9C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18914  004CA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18915  004CA0  6AF8               	clrf	tblptru,c
 18916  004CA2                     	endif
 18917  004CA2                     	if	0	;tblptru may be non-zero
 18918  004CA2                     	endif
 18919  004CA2  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18920  004CA6  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18921  004CAA  0008               	tblrd		*
 18922  004CAC  CFF5 FFDF          	movff	tablat,indf2
 18923  004CB0  50DF               	movf	indf2,w,c
 18924  004CB2  B4D8               	btfsc	status,2,c
 18925  004CB4  0012               	return	
 18926  004CB6  D7EC               	goto	i2l6351
 18927  004CB8                     __end_ofi2_strcpy:
 18928                           	opt stack 0
 18929                           pclatu	equ	0xFFB
 18930                           pclath	equ	0xFFA
 18931                           tblptru	equ	0xFF8
 18932                           tblptrh	equ	0xFF7
 18933                           tblptrl	equ	0xFF6
 18934                           tablat	equ	0xFF5
 18935                           prodh	equ	0xFF4
 18936                           prodl	equ	0xFF3
 18937                           intcon	equ	0xFF2
 18938                           intcon2	equ	0xFF1
 18939                           intcon3	equ	0xFF0
 18940                           indf0	equ	0xFEF
 18941                           postinc0	equ	0xFEE
 18942                           fsr0h	equ	0xFEA
 18943                           fsr0l	equ	0xFE9
 18944                           wreg	equ	0xFE8
 18945                           postdec1	equ	0xFE5
 18946                           fsr1h	equ	0xFE2
 18947                           fsr1l	equ	0xFE1
 18948                           indf2	equ	0xFDF
 18949                           postinc2	equ	0xFDE
 18950                           postdec2	equ	0xFDD
 18951                           fsr2h	equ	0xFDA
 18952                           fsr2l	equ	0xFD9
 18953                           status	equ	0xFD8
 18954                           
 18955 ;; *************** function _inputHandler *****************
 18956 ;; Defined at:
 18957 ;;		line 372 in file "UI.c"
 18958 ;; Parameters:    Size  Location     Type
 18959 ;;		None
 18960 ;; Auto vars:     Size  Location     Type
 18961 ;;		None
 18962 ;; Return value:  Size  Location     Type
 18963 ;;                  2   41[COMRAM] int 
 18964 ;; Registers used:
 18965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18966 ;; Tracked objects:
 18967 ;;		On entry : 0/0
 18968 ;;		On exit  : 0/0
 18969 ;;		Unchanged: 0/0
 18970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18973 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18974 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18975 ;;Total ram usage:        4 bytes
 18976 ;; Hardware stack levels used:    1
 18977 ;; Hardware stack levels required when called:    4
 18978 ;; This function calls:
 18979 ;;		_change_state_to_logs_11
 18980 ;;		_change_state_to_logs_12
 18981 ;;		_change_state_to_logs_22
 18982 ;;		_change_state_to_logs_23
 18983 ;;		_change_state_to_logs_33
 18984 ;;		_change_state_to_logs_34
 18985 ;;		_change_state_to_menu_11
 18986 ;;		_change_state_to_menu_23
 18987 ;;		i2_change_state_to_menu_12
 18988 ;;		i2_change_state_to_menu_22
 18989 ;; This function is called by:
 18990 ;;		_updateMenu
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           	psect	text64
 18995  003512                     __ptext64:
 18996                           	opt stack 0
 18997  003512                     _inputHandler:
 18998                           	opt stack 18
 18999                           
 19000                           ;UI.c: 377: if(firstboot){
 19001                           
 19002                           ;incstack = 0
 19003  003512  506D               	movf	_firstboot,w,c
 19004  003514  106E               	iorwf	_firstboot+1,w,c
 19005  003516  B4D8               	btfsc	status,2,c
 19006  003518  D00B               	goto	i2l6797
 19007                           
 19008                           ;UI.c: 378: change_state_to_menu_11();
 19009  00351A  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 19010                           
 19011                           ;UI.c: 379: firstboot = 0;
 19012  00351E  0E00               	movlw	0
 19013  003520  6E6E               	movwf	_firstboot+1,c
 19014  003522  0E00               	movlw	0
 19015  003524  6E6D               	movwf	_firstboot,c
 19016                           
 19017                           ;UI.c: 380: return 0;
 19018  003526  0E00               	movlw	0
 19019  003528  6E2B               	movwf	?_inputHandler+1,c
 19020  00352A  0E00               	movlw	0
 19021  00352C  6E2A               	movwf	?_inputHandler,c
 19022  00352E  0012               	return	
 19023  003530                     i2l6797:
 19024                           
 19025                           ;UI.c: 381: }
 19026                           ;UI.c: 382: if (logstate){
 19027  003530  0100               	movlb	0	; () banked
 19028  003532  51F6               	movf	_logstate& (0+255),w,b
 19029  003534  0100               	movlb	0	; () banked
 19030  003536  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19031  003538  B4D8               	btfsc	status,2,c
 19032  00353A  D0C7               	goto	i2l6915
 19033                           
 19034                           ; BSR set to: 0
 19035                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19036  00353C  0E43               	movlw	67
 19037  00353E  187D               	xorwf	_input,w,c	;volatile
 19038  003540  A4D8               	btfss	status,2,c
 19039  003542  D012               	goto	i2l6815
 19040                           
 19041                           ; BSR set to: 0
 19042  003544  B281               	btfsc	3969,1,c	;volatile
 19043  003546  D009               	goto	i2l6807
 19044  003548  D00F               	goto	i2l6815
 19045  00354A                     i2l6805:
 19046                           
 19047                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19048  00354A  0E68               	movlw	104
 19049  00354C  6E2C               	movwf	??_inputHandler& (0+255),c
 19050  00354E  0EE4               	movlw	228
 19051  003550                     i2u999_47:
 19052  003550  2EE8               	decfsz	wreg,f,c
 19053  003552  D7FE               	bra	i2u999_47
 19054  003554  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19055  003556  D7FC               	bra	i2u999_47
 19056  003558  D000               	nop2	
 19057  00355A                     i2l6807:
 19058  00355A  B281               	btfsc	3969,1,c	;volatile
 19059  00355C  D7F6               	goto	i2l6805
 19060  00355E                     i2l6809:
 19061                           
 19062                           ;UI.c: 387: }
 19063                           ;UI.c: 388: return 0;
 19064  00355E  0E00               	movlw	0
 19065  003560  6E2B               	movwf	?_inputHandler+1,c
 19066  003562  0E00               	movlw	0
 19067  003564  6E2A               	movwf	?_inputHandler,c
 19068  003566  0012               	return	
 19069  003568                     i2l6815:
 19070                           
 19071                           ;UI.c: 390: else if (input == 'D'){
 19072  003568  0E44               	movlw	68
 19073  00356A  187D               	xorwf	_input,w,c	;volatile
 19074  00356C  A4D8               	btfss	status,2,c
 19075  00356E  D7F7               	goto	i2l6809
 19076                           
 19077                           ;UI.c: 392: logstate = 0;
 19078  003570  0E00               	movlw	0
 19079  003572  0100               	movlb	0	; () banked
 19080  003574  6FF7               	movwf	(_logstate+1)& (0+255),b
 19081  003576  0E00               	movlw	0
 19082  003578  6FF6               	movwf	_logstate& (0+255),b
 19083                           
 19084                           ;UI.c: 393: switch(cur_state){
 19085  00357A  D012               	goto	i2l6833
 19086  00357C                     i2l6819:
 19087                           
 19088                           ;UI.c: 395: change_state_to_logs_11();
 19089  00357C  EC1C  F027         	call	_change_state_to_logs_11	;wreg free
 19090                           
 19091                           ;UI.c: 396: break;
 19092  003580  D7EE               	goto	i2l6809
 19093  003582                     i2l6821:
 19094                           
 19095                           ;UI.c: 398: change_state_to_logs_12();
 19096  003582  EC04  F027         	call	_change_state_to_logs_12	;wreg free
 19097                           
 19098                           ;UI.c: 399: break;
 19099  003586  D7EB               	goto	i2l6809
 19100  003588                     i2l6823:
 19101                           
 19102                           ;UI.c: 401: change_state_to_logs_22();
 19103  003588  ECEC  F026         	call	_change_state_to_logs_22	;wreg free
 19104                           
 19105                           ;UI.c: 402: break;
 19106  00358C  D7E8               	goto	i2l6809
 19107  00358E                     i2l6825:
 19108                           
 19109                           ;UI.c: 404: change_state_to_logs_23();
 19110  00358E  EC62  F027         	call	_change_state_to_logs_23	;wreg free
 19111                           
 19112                           ;UI.c: 405: break;
 19113  003592  D7E5               	goto	i2l6809
 19114  003594                     i2l6827:
 19115                           
 19116                           ;UI.c: 407: change_state_to_logs_33();
 19117  003594  ECD4  F026         	call	_change_state_to_logs_33	;wreg free
 19118                           
 19119                           ;UI.c: 408: break;
 19120  003598  D7E2               	goto	i2l6809
 19121  00359A                     i2l6829:
 19122                           
 19123                           ;UI.c: 410: change_state_to_logs_34();
 19124  00359A  ECBC  F026         	call	_change_state_to_logs_34	;wreg free
 19125                           
 19126                           ;UI.c: 412: }
 19127                           
 19128                           ;UI.c: 411: break;
 19129  00359E  D7DF               	goto	i2l6809
 19130  0035A0                     i2l6833:
 19131  0035A0  C0E6  F02C         	movff	_cur_state,??_inputHandler
 19132  0035A4  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 19133                           
 19134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19135                           ; Switch size 1, requested type "space"
 19136                           ; Number of cases is 2, Range of values is 3 to 4
 19137                           ; switch strategies available:
 19138                           ; Name         Instructions Cycles
 19139                           ; simple_byte            7     4 (average)
 19140                           ;	Chosen strategy is simple_byte
 19141  0035A8  502D               	movf	??_inputHandler+1,w,c
 19142  0035AA  0A03               	xorlw	3	; case 3
 19143  0035AC  B4D8               	btfsc	status,2,c
 19144  0035AE  D004               	goto	i2l9463
 19145  0035B0  0A07               	xorlw	7	; case 4
 19146  0035B2  B4D8               	btfsc	status,2,c
 19147  0035B4  D00F               	goto	i2l9465
 19148  0035B6  D7D3               	goto	i2l6809
 19149  0035B8                     i2l9463:
 19150                           
 19151                           ; Switch size 1, requested type "space"
 19152                           ; Number of cases is 4, Range of values is 243 to 255
 19153                           ; switch strategies available:
 19154                           ; Name         Instructions Cycles
 19155                           ; simple_byte           13     7 (average)
 19156                           ;	Chosen strategy is simple_byte
 19157  0035B8  502C               	movf	??_inputHandler,w,c
 19158  0035BA  0AF3               	xorlw	243	; case 243
 19159  0035BC  B4D8               	btfsc	status,2,c
 19160  0035BE  D7DE               	goto	i2l6819
 19161  0035C0  0A07               	xorlw	7	; case 244
 19162  0035C2  B4D8               	btfsc	status,2,c
 19163  0035C4  D7DE               	goto	i2l6821
 19164  0035C6  0A0A               	xorlw	10	; case 254
 19165  0035C8  B4D8               	btfsc	status,2,c
 19166  0035CA  D7DE               	goto	i2l6823
 19167  0035CC  0A01               	xorlw	1	; case 255
 19168  0035CE  B4D8               	btfsc	status,2,c
 19169  0035D0  D7DE               	goto	i2l6825
 19170  0035D2  D7C5               	goto	i2l6809
 19171  0035D4                     i2l9465:
 19172                           
 19173                           ; Switch size 1, requested type "space"
 19174                           ; Number of cases is 2, Range of values is 9 to 10
 19175                           ; switch strategies available:
 19176                           ; Name         Instructions Cycles
 19177                           ; simple_byte            7     4 (average)
 19178                           ;	Chosen strategy is simple_byte
 19179  0035D4  502C               	movf	??_inputHandler,w,c
 19180  0035D6  0A09               	xorlw	9	; case 9
 19181  0035D8  B4D8               	btfsc	status,2,c
 19182  0035DA  D7DC               	goto	i2l6827
 19183  0035DC  0A03               	xorlw	3	; case 10
 19184  0035DE  B4D8               	btfsc	status,2,c
 19185  0035E0  D7DC               	goto	i2l6829
 19186  0035E2  D7BD               	goto	i2l6809
 19187  0035E4                     i2l6845:
 19188                           
 19189                           ;UI.c: 422: if(cur_state == 11){
 19190  0035E4  0E0B               	movlw	11
 19191  0035E6  0100               	movlb	0	; () banked
 19192  0035E8  19E6               	xorwf	_cur_state& (0+255),w,b
 19193  0035EA  0100               	movlb	0	; () banked
 19194  0035EC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19195  0035EE  A4D8               	btfss	status,2,c
 19196  0035F0  D005               	goto	i2l6853
 19197                           
 19198                           ; BSR set to: 0
 19199                           ;UI.c: 423: return 0;
 19200  0035F2  0E00               	movlw	0
 19201  0035F4  6E2B               	movwf	?_inputHandler+1,c
 19202  0035F6  0E00               	movlw	0
 19203  0035F8  6E2A               	movwf	?_inputHandler,c
 19204                           
 19205                           ; BSR set to: 0
 19206  0035FA  0012               	return	
 19207  0035FC                     i2l6853:
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;UI.c: 425: else{
 19211                           ;UI.c: 426: change_state_to_menu_11();
 19212  0035FC  ECA4  F026         	call	_change_state_to_menu_11	;wreg free
 19213                           
 19214                           ;UI.c: 427: }
 19215                           ;UI.c: 428: return 0;
 19216  003600  0E00               	movlw	0
 19217  003602  6E2B               	movwf	?_inputHandler+1,c
 19218  003604  0E00               	movlw	0
 19219  003606  6E2A               	movwf	?_inputHandler,c
 19220  003608  0012               	return	
 19221  00360A                     i2l6859:
 19222                           
 19223                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19224  00360A  0E16               	movlw	22
 19225  00360C  0100               	movlb	0	; () banked
 19226  00360E  19E6               	xorwf	_cur_state& (0+255),w,b
 19227  003610  0100               	movlb	0	; () banked
 19228  003612  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19229  003614  B4D8               	btfsc	status,2,c
 19230  003616  D007               	goto	i2l6863
 19231                           
 19232                           ; BSR set to: 0
 19233  003618  0E0C               	movlw	12
 19234  00361A  0100               	movlb	0	; () banked
 19235  00361C  19E6               	xorwf	_cur_state& (0+255),w,b
 19236  00361E  0100               	movlb	0	; () banked
 19237  003620  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19238  003622  A4D8               	btfss	status,2,c
 19239  003624  D005               	goto	i2l6869
 19240  003626                     i2l6863:
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;UI.c: 431: return 0;
 19244  003626  0E00               	movlw	0
 19245  003628  6E2B               	movwf	?_inputHandler+1,c
 19246  00362A  0E00               	movlw	0
 19247  00362C  6E2A               	movwf	?_inputHandler,c
 19248                           
 19249                           ; BSR set to: 0
 19250  00362E  0012               	return	
 19251  003630                     i2l6869:
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;UI.c: 433: else if(cur_state == 23){
 19255  003630  0E17               	movlw	23
 19256  003632  0100               	movlb	0	; () banked
 19257  003634  19E6               	xorwf	_cur_state& (0+255),w,b
 19258  003636  0100               	movlb	0	; () banked
 19259  003638  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19260  00363A  A4D8               	btfss	status,2,c
 19261  00363C  D003               	goto	i2l6873
 19262                           
 19263                           ; BSR set to: 0
 19264                           ;UI.c: 434: change_state_to_menu_22();
 19265  00363E  EC5C  F026         	call	i2_change_state_to_menu_22	;wreg free
 19266                           
 19267                           ;UI.c: 435: }
 19268  003642  D002               	goto	i2l6875
 19269  003644                     i2l6873:
 19270                           
 19271                           ;UI.c: 436: else{
 19272                           ;UI.c: 437: change_state_to_menu_12();
 19273  003644  EC74  F026         	call	i2_change_state_to_menu_12	;wreg free
 19274  003648                     i2l6875:
 19275                           
 19276                           ;UI.c: 438: }
 19277                           ;UI.c: 439: return 0;
 19278  003648  0E00               	movlw	0
 19279  00364A  6E2B               	movwf	?_inputHandler+1,c
 19280  00364C  0E00               	movlw	0
 19281  00364E  6E2A               	movwf	?_inputHandler,c
 19282  003650  0012               	return	
 19283  003652                     i2l6879:
 19284                           
 19285                           ;UI.c: 441: if(cur_state == 23){
 19286  003652  0E17               	movlw	23
 19287  003654  0100               	movlb	0	; () banked
 19288  003656  19E6               	xorwf	_cur_state& (0+255),w,b
 19289  003658  0100               	movlb	0	; () banked
 19290  00365A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19291  00365C  A4D8               	btfss	status,2,c
 19292  00365E  D005               	goto	i2l6887
 19293                           
 19294                           ; BSR set to: 0
 19295                           ;UI.c: 442: return 0;
 19296  003660  0E00               	movlw	0
 19297  003662  6E2B               	movwf	?_inputHandler+1,c
 19298  003664  0E00               	movlw	0
 19299  003666  6E2A               	movwf	?_inputHandler,c
 19300                           
 19301                           ; BSR set to: 0
 19302  003668  0012               	return	
 19303  00366A                     i2l6887:
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;UI.c: 444: else{
 19307                           ;UI.c: 445: change_state_to_menu_23();
 19308  00366A  EC8C  F026         	call	_change_state_to_menu_23	;wreg free
 19309                           
 19310                           ;UI.c: 446: }
 19311                           ;UI.c: 447: return 0;
 19312  00366E  0E00               	movlw	0
 19313  003670  6E2B               	movwf	?_inputHandler+1,c
 19314  003672  0E00               	movlw	0
 19315  003674  6E2A               	movwf	?_inputHandler,c
 19316  003676  0012               	return	
 19317  003678                     i2l6893:
 19318                           
 19319                           ;UI.c: 450: up = 1;
 19320  003678  0E00               	movlw	0
 19321  00367A  6E78               	movwf	_up+1,c
 19322  00367C  0E01               	movlw	1
 19323  00367E  6E77               	movwf	_up,c
 19324                           
 19325                           ;UI.c: 451: return 1;
 19326  003680  0E00               	movlw	0
 19327  003682  6E2B               	movwf	?_inputHandler+1,c
 19328  003684  0E01               	movlw	1
 19329  003686  6E2A               	movwf	?_inputHandler,c
 19330  003688  0012               	return	
 19331  00368A                     i2l6897:
 19332                           
 19333                           ;UI.c: 453: down = 1;
 19334  00368A  0E00               	movlw	0
 19335  00368C  6E60               	movwf	_down+1,c
 19336  00368E  0E01               	movlw	1
 19337  003690  6E5F               	movwf	_down,c
 19338                           
 19339                           ;UI.c: 454: return 1;
 19340  003692  0E00               	movlw	0
 19341  003694  6E2B               	movwf	?_inputHandler+1,c
 19342  003696  0E01               	movlw	1
 19343  003698  6E2A               	movwf	?_inputHandler,c
 19344  00369A  0012               	return	
 19345  00369C                     i2l6901:
 19346                           
 19347                           ;UI.c: 456: enter = 1;
 19348  00369C  0E00               	movlw	0
 19349  00369E  6E62               	movwf	_enter+1,c
 19350  0036A0  0E01               	movlw	1
 19351  0036A2  6E61               	movwf	_enter,c
 19352                           
 19353                           ;UI.c: 457: return 1;
 19354  0036A4  0E00               	movlw	0
 19355  0036A6  6E2B               	movwf	?_inputHandler+1,c
 19356  0036A8  0E01               	movlw	1
 19357  0036AA  6E2A               	movwf	?_inputHandler,c
 19358  0036AC  0012               	return	
 19359  0036AE                     i2l6905:
 19360                           
 19361                           ;UI.c: 459: back = 1;
 19362  0036AE  0E00               	movlw	0
 19363  0036B0  6E5C               	movwf	_back+1,c
 19364  0036B2  0E01               	movlw	1
 19365  0036B4  6E5B               	movwf	_back,c
 19366                           
 19367                           ;UI.c: 460: return 1;
 19368  0036B6  0E00               	movlw	0
 19369  0036B8  6E2B               	movwf	?_inputHandler+1,c
 19370  0036BA  0E01               	movlw	1
 19371  0036BC  6E2A               	movwf	?_inputHandler,c
 19372  0036BE  0012               	return	
 19373  0036C0                     i2l6909:
 19374                           
 19375                           ;UI.c: 463: return 1;
 19376  0036C0  0E00               	movlw	0
 19377  0036C2  6E2B               	movwf	?_inputHandler+1,c
 19378  0036C4  0E01               	movlw	1
 19379  0036C6  6E2A               	movwf	?_inputHandler,c
 19380                           
 19381                           ;UI.c: 464: }
 19382  0036C8  0012               	return	
 19383  0036CA                     i2l6915:
 19384  0036CA  507D               	movf	_input,w,c	;volatile
 19385                           
 19386                           ; Switch size 1, requested type "space"
 19387                           ; Number of cases is 7, Range of values is 49 to 68
 19388                           ; switch strategies available:
 19389                           ; Name         Instructions Cycles
 19390                           ; simple_byte           22    12 (average)
 19391                           ;	Chosen strategy is simple_byte
 19392  0036CC  0A31               	xorlw	49	; case 49
 19393  0036CE  B4D8               	btfsc	status,2,c
 19394  0036D0  D789               	goto	i2l6845
 19395  0036D2  0A03               	xorlw	3	; case 50
 19396  0036D4  B4D8               	btfsc	status,2,c
 19397  0036D6  D799               	goto	i2l6859
 19398  0036D8  0A01               	xorlw	1	; case 51
 19399  0036DA  B4D8               	btfsc	status,2,c
 19400  0036DC  D7BA               	goto	i2l6879
 19401  0036DE  0A72               	xorlw	114	; case 65
 19402  0036E0  B4D8               	btfsc	status,2,c
 19403  0036E2  D7CA               	goto	i2l6893
 19404  0036E4  0A03               	xorlw	3	; case 66
 19405  0036E6  B4D8               	btfsc	status,2,c
 19406  0036E8  D7D0               	goto	i2l6897
 19407  0036EA  0A01               	xorlw	1	; case 67
 19408  0036EC  B4D8               	btfsc	status,2,c
 19409  0036EE  D7D6               	goto	i2l6901
 19410  0036F0  0A07               	xorlw	7	; case 68
 19411  0036F2  B4D8               	btfsc	status,2,c
 19412  0036F4  D7DC               	goto	i2l6905
 19413  0036F6  D7E4               	goto	i2l6909
 19414  0036F8                     __end_of_inputHandler:
 19415                           	opt stack 0
 19416                           pclatu	equ	0xFFB
 19417                           pclath	equ	0xFFA
 19418                           tblptru	equ	0xFF8
 19419                           tblptrh	equ	0xFF7
 19420                           tblptrl	equ	0xFF6
 19421                           tablat	equ	0xFF5
 19422                           prodh	equ	0xFF4
 19423                           prodl	equ	0xFF3
 19424                           intcon	equ	0xFF2
 19425                           intcon2	equ	0xFF1
 19426                           intcon3	equ	0xFF0
 19427                           indf0	equ	0xFEF
 19428                           postinc0	equ	0xFEE
 19429                           fsr0h	equ	0xFEA
 19430                           fsr0l	equ	0xFE9
 19431                           wreg	equ	0xFE8
 19432                           postdec1	equ	0xFE5
 19433                           fsr1h	equ	0xFE2
 19434                           fsr1l	equ	0xFE1
 19435                           indf2	equ	0xFDF
 19436                           postinc2	equ	0xFDE
 19437                           postdec2	equ	0xFDD
 19438                           fsr2h	equ	0xFDA
 19439                           fsr2l	equ	0xFD9
 19440                           status	equ	0xFD8
 19441                           
 19442 ;; *************** function i2_change_state_to_menu_22 *****************
 19443 ;; Defined at:
 19444 ;;		line 498 in file "UI.c"
 19445 ;; Parameters:    Size  Location     Type
 19446 ;;		None
 19447 ;; Auto vars:     Size  Location     Type
 19448 ;;		None
 19449 ;; Return value:  Size  Location     Type
 19450 ;;                  1    wreg      void 
 19451 ;; Registers used:
 19452 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19453 ;; Tracked objects:
 19454 ;;		On entry : 0/0
 19455 ;;		On exit  : 0/0
 19456 ;;		Unchanged: 0/0
 19457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19462 ;;Total ram usage:        0 bytes
 19463 ;; Hardware stack levels used:    1
 19464 ;; Hardware stack levels required when called:    3
 19465 ;; This function calls:
 19466 ;;		i2_lcdInst
 19467 ;;		i2_printf
 19468 ;; This function is called by:
 19469 ;;		_updateMenu
 19470 ;;		_inputHandler
 19471 ;; This function uses a non-reentrant model
 19472 ;;
 19473                           
 19474                           	psect	text65
 19475  004CB8                     __ptext65:
 19476                           	opt stack 0
 19477  004CB8                     i2_change_state_to_menu_22:
 19478                           	opt stack 19
 19479                           
 19480                           ;UI.c: 499: cur_state = 22;
 19481                           
 19482                           ;incstack = 0
 19483  004CB8  0E00               	movlw	0
 19484  004CBA  0100               	movlb	0	; () banked
 19485  004CBC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19486  004CBE  0E16               	movlw	22
 19487  004CC0  6FE6               	movwf	_cur_state& (0+255),b
 19488                           
 19489                           ; BSR set to: 0
 19490                           ;UI.c: 501: lcdInst(0b10000000);;
 19491  004CC2  0E80               	movlw	128
 19492  004CC4  ECA6  F028         	call	i2_lcdInst
 19493                           
 19494                           ;UI.c: 502: printf("2. SORT        <");
 19495  004CC8  0EC4               	movlw	low STR_34
 19496  004CCA  6E0D               	movwf	i2printf@f,c
 19497  004CCC  0EFD               	movlw	high STR_34
 19498  004CCE  6E0E               	movwf	i2printf@f+1,c
 19499  004CD0  ECDD  F00E         	call	i2_printf	;wreg free
 19500                           
 19501                           ;UI.c: 503: lcdInst(0b11000000);;
 19502  004CD4  0EC0               	movlw	192
 19503  004CD6  ECA6  F028         	call	i2_lcdInst
 19504                           
 19505                           ;UI.c: 504: printf("3. LOGS         ");
 19506  004CDA  0E09               	movlw	low STR_36
 19507  004CDC  6E0D               	movwf	i2printf@f,c
 19508  004CDE  0EFD               	movlw	high STR_36
 19509  004CE0  6E0E               	movwf	i2printf@f+1,c
 19510  004CE2  ECDD  F00E         	call	i2_printf	;wreg free
 19511  004CE6  0012               	return		;funcret
 19512  004CE8                     __end_ofi2_change_state_to_menu_22:
 19513                           	opt stack 0
 19514                           pclatu	equ	0xFFB
 19515                           pclath	equ	0xFFA
 19516                           tblptru	equ	0xFF8
 19517                           tblptrh	equ	0xFF7
 19518                           tblptrl	equ	0xFF6
 19519                           tablat	equ	0xFF5
 19520                           prodh	equ	0xFF4
 19521                           prodl	equ	0xFF3
 19522                           intcon	equ	0xFF2
 19523                           intcon2	equ	0xFF1
 19524                           intcon3	equ	0xFF0
 19525                           indf0	equ	0xFEF
 19526                           postinc0	equ	0xFEE
 19527                           fsr0h	equ	0xFEA
 19528                           fsr0l	equ	0xFE9
 19529                           wreg	equ	0xFE8
 19530                           postdec1	equ	0xFE5
 19531                           fsr1h	equ	0xFE2
 19532                           fsr1l	equ	0xFE1
 19533                           indf2	equ	0xFDF
 19534                           postinc2	equ	0xFDE
 19535                           postdec2	equ	0xFDD
 19536                           fsr2h	equ	0xFDA
 19537                           fsr2l	equ	0xFD9
 19538                           status	equ	0xFD8
 19539                           
 19540 ;; *************** function i2_change_state_to_menu_12 *****************
 19541 ;; Defined at:
 19542 ;;		line 490 in file "UI.c"
 19543 ;; Parameters:    Size  Location     Type
 19544 ;;		None
 19545 ;; Auto vars:     Size  Location     Type
 19546 ;;		None
 19547 ;; Return value:  Size  Location     Type
 19548 ;;                  1    wreg      void 
 19549 ;; Registers used:
 19550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19551 ;; Tracked objects:
 19552 ;;		On entry : 0/0
 19553 ;;		On exit  : 0/0
 19554 ;;		Unchanged: 0/0
 19555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;Total ram usage:        0 bytes
 19561 ;; Hardware stack levels used:    1
 19562 ;; Hardware stack levels required when called:    3
 19563 ;; This function calls:
 19564 ;;		i2_lcdInst
 19565 ;;		i2_printf
 19566 ;; This function is called by:
 19567 ;;		_updateMenu
 19568 ;;		_inputHandler
 19569 ;; This function uses a non-reentrant model
 19570 ;;
 19571                           
 19572                           	psect	text66
 19573  004CE8                     __ptext66:
 19574                           	opt stack 0
 19575  004CE8                     i2_change_state_to_menu_12:
 19576                           	opt stack 19
 19577                           
 19578                           ;UI.c: 491: cur_state = 12;
 19579                           
 19580                           ;incstack = 0
 19581  004CE8  0E00               	movlw	0
 19582  004CEA  0100               	movlb	0	; () banked
 19583  004CEC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19584  004CEE  0E0C               	movlw	12
 19585  004CF0  6FE6               	movwf	_cur_state& (0+255),b
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;UI.c: 493: lcdInst(0b10000000);;
 19589  004CF2  0E80               	movlw	128
 19590  004CF4  ECA6  F028         	call	i2_lcdInst
 19591                           
 19592                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19593  004CF8  0E2B               	movlw	low STR_33
 19594  004CFA  6E0D               	movwf	i2printf@f,c
 19595  004CFC  0EFD               	movlw	high STR_33
 19596  004CFE  6E0E               	movwf	i2printf@f+1,c
 19597  004D00  ECDD  F00E         	call	i2_printf	;wreg free
 19598                           
 19599                           ;UI.c: 495: lcdInst(0b11000000);;
 19600  004D04  0EC0               	movlw	192
 19601  004D06  ECA6  F028         	call	i2_lcdInst
 19602                           
 19603                           ;UI.c: 496: printf("2. SORT        <");
 19604  004D0A  0EC4               	movlw	low STR_34
 19605  004D0C  6E0D               	movwf	i2printf@f,c
 19606  004D0E  0EFD               	movlw	high STR_34
 19607  004D10  6E0E               	movwf	i2printf@f+1,c
 19608  004D12  ECDD  F00E         	call	i2_printf	;wreg free
 19609  004D16  0012               	return		;funcret
 19610  004D18                     __end_ofi2_change_state_to_menu_12:
 19611                           	opt stack 0
 19612                           pclatu	equ	0xFFB
 19613                           pclath	equ	0xFFA
 19614                           tblptru	equ	0xFF8
 19615                           tblptrh	equ	0xFF7
 19616                           tblptrl	equ	0xFF6
 19617                           tablat	equ	0xFF5
 19618                           prodh	equ	0xFF4
 19619                           prodl	equ	0xFF3
 19620                           intcon	equ	0xFF2
 19621                           intcon2	equ	0xFF1
 19622                           intcon3	equ	0xFF0
 19623                           indf0	equ	0xFEF
 19624                           postinc0	equ	0xFEE
 19625                           fsr0h	equ	0xFEA
 19626                           fsr0l	equ	0xFE9
 19627                           wreg	equ	0xFE8
 19628                           postdec1	equ	0xFE5
 19629                           fsr1h	equ	0xFE2
 19630                           fsr1l	equ	0xFE1
 19631                           indf2	equ	0xFDF
 19632                           postinc2	equ	0xFDE
 19633                           postdec2	equ	0xFDD
 19634                           fsr2h	equ	0xFDA
 19635                           fsr2l	equ	0xFD9
 19636                           status	equ	0xFD8
 19637                           
 19638 ;; *************** function _change_state_to_menu_23 *****************
 19639 ;; Defined at:
 19640 ;;		line 506 in file "UI.c"
 19641 ;; Parameters:    Size  Location     Type
 19642 ;;		None
 19643 ;; Auto vars:     Size  Location     Type
 19644 ;;		None
 19645 ;; Return value:  Size  Location     Type
 19646 ;;                  1    wreg      void 
 19647 ;; Registers used:
 19648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19649 ;; Tracked objects:
 19650 ;;		On entry : 0/0
 19651 ;;		On exit  : 0/0
 19652 ;;		Unchanged: 0/0
 19653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19658 ;;Total ram usage:        0 bytes
 19659 ;; Hardware stack levels used:    1
 19660 ;; Hardware stack levels required when called:    3
 19661 ;; This function calls:
 19662 ;;		i2_lcdInst
 19663 ;;		i2_printf
 19664 ;; This function is called by:
 19665 ;;		_updateMenu
 19666 ;;		_inputHandler
 19667 ;; This function uses a non-reentrant model
 19668 ;;
 19669                           
 19670                           	psect	text67
 19671  004D18                     __ptext67:
 19672                           	opt stack 0
 19673  004D18                     _change_state_to_menu_23:
 19674                           	opt stack 18
 19675                           
 19676                           ;UI.c: 507: cur_state = 23;
 19677                           
 19678                           ;incstack = 0
 19679  004D18  0E00               	movlw	0
 19680  004D1A  0100               	movlb	0	; () banked
 19681  004D1C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19682  004D1E  0E17               	movlw	23
 19683  004D20  6FE6               	movwf	_cur_state& (0+255),b
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;UI.c: 509: lcdInst(0b10000000);;
 19687  004D22  0E80               	movlw	128
 19688  004D24  ECA6  F028         	call	i2_lcdInst
 19689                           
 19690                           ;UI.c: 510: printf("2. SORT         ");
 19691  004D28  0E1A               	movlw	low STR_32
 19692  004D2A  6E0D               	movwf	i2printf@f,c
 19693  004D2C  0EFD               	movlw	high STR_32
 19694  004D2E  6E0E               	movwf	i2printf@f+1,c
 19695  004D30  ECDD  F00E         	call	i2_printf	;wreg free
 19696                           
 19697                           ;UI.c: 511: lcdInst(0b11000000);;
 19698  004D34  0EC0               	movlw	192
 19699  004D36  ECA6  F028         	call	i2_lcdInst
 19700                           
 19701                           ;UI.c: 512: printf("3. LOGS        <");
 19702  004D3A  0EB3               	movlw	low STR_38
 19703  004D3C  6E0D               	movwf	i2printf@f,c
 19704  004D3E  0EFD               	movlw	high STR_38
 19705  004D40  6E0E               	movwf	i2printf@f+1,c
 19706  004D42  ECDD  F00E         	call	i2_printf	;wreg free
 19707  004D46  0012               	return		;funcret
 19708  004D48                     __end_of_change_state_to_menu_23:
 19709                           	opt stack 0
 19710                           pclatu	equ	0xFFB
 19711                           pclath	equ	0xFFA
 19712                           tblptru	equ	0xFF8
 19713                           tblptrh	equ	0xFF7
 19714                           tblptrl	equ	0xFF6
 19715                           tablat	equ	0xFF5
 19716                           prodh	equ	0xFF4
 19717                           prodl	equ	0xFF3
 19718                           intcon	equ	0xFF2
 19719                           intcon2	equ	0xFF1
 19720                           intcon3	equ	0xFF0
 19721                           indf0	equ	0xFEF
 19722                           postinc0	equ	0xFEE
 19723                           fsr0h	equ	0xFEA
 19724                           fsr0l	equ	0xFE9
 19725                           wreg	equ	0xFE8
 19726                           postdec1	equ	0xFE5
 19727                           fsr1h	equ	0xFE2
 19728                           fsr1l	equ	0xFE1
 19729                           indf2	equ	0xFDF
 19730                           postinc2	equ	0xFDE
 19731                           postdec2	equ	0xFDD
 19732                           fsr2h	equ	0xFDA
 19733                           fsr2l	equ	0xFD9
 19734                           status	equ	0xFD8
 19735                           
 19736 ;; *************** function _change_state_to_menu_11 *****************
 19737 ;; Defined at:
 19738 ;;		line 482 in file "UI.c"
 19739 ;; Parameters:    Size  Location     Type
 19740 ;;		None
 19741 ;; Auto vars:     Size  Location     Type
 19742 ;;		None
 19743 ;; Return value:  Size  Location     Type
 19744 ;;                  1    wreg      void 
 19745 ;; Registers used:
 19746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19747 ;; Tracked objects:
 19748 ;;		On entry : 0/0
 19749 ;;		On exit  : 0/0
 19750 ;;		Unchanged: 0/0
 19751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19756 ;;Total ram usage:        0 bytes
 19757 ;; Hardware stack levels used:    1
 19758 ;; Hardware stack levels required when called:    3
 19759 ;; This function calls:
 19760 ;;		i2_lcdInst
 19761 ;;		i2_printf
 19762 ;; This function is called by:
 19763 ;;		_updateMenu
 19764 ;;		_inputHandler
 19765 ;; This function uses a non-reentrant model
 19766 ;;
 19767                           
 19768                           	psect	text68
 19769  004D48                     __ptext68:
 19770                           	opt stack 0
 19771  004D48                     _change_state_to_menu_11:
 19772                           	opt stack 18
 19773                           
 19774                           ;UI.c: 483: cur_state = 11;
 19775                           
 19776                           ;incstack = 0
 19777  004D48  0E00               	movlw	0
 19778  004D4A  0100               	movlb	0	; () banked
 19779  004D4C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19780  004D4E  0E0B               	movlw	11
 19781  004D50  6FE6               	movwf	_cur_state& (0+255),b
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;UI.c: 485: lcdInst(0b10000000);;
 19785  004D52  0E80               	movlw	128
 19786  004D54  ECA6  F028         	call	i2_lcdInst
 19787                           
 19788                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19789  004D58  0ED5               	movlw	low STR_31
 19790  004D5A  6E0D               	movwf	i2printf@f,c
 19791  004D5C  0EFD               	movlw	high STR_31
 19792  004D5E  6E0E               	movwf	i2printf@f+1,c
 19793  004D60  ECDD  F00E         	call	i2_printf	;wreg free
 19794                           
 19795                           ;UI.c: 487: lcdInst(0b11000000);;
 19796  004D64  0EC0               	movlw	192
 19797  004D66  ECA6  F028         	call	i2_lcdInst
 19798                           
 19799                           ;UI.c: 488: printf("2. SORT         ");
 19800  004D6A  0E1A               	movlw	low STR_32
 19801  004D6C  6E0D               	movwf	i2printf@f,c
 19802  004D6E  0EFD               	movlw	high STR_32
 19803  004D70  6E0E               	movwf	i2printf@f+1,c
 19804  004D72  ECDD  F00E         	call	i2_printf	;wreg free
 19805  004D76  0012               	return		;funcret
 19806  004D78                     __end_of_change_state_to_menu_11:
 19807                           	opt stack 0
 19808                           pclatu	equ	0xFFB
 19809                           pclath	equ	0xFFA
 19810                           tblptru	equ	0xFF8
 19811                           tblptrh	equ	0xFF7
 19812                           tblptrl	equ	0xFF6
 19813                           tablat	equ	0xFF5
 19814                           prodh	equ	0xFF4
 19815                           prodl	equ	0xFF3
 19816                           intcon	equ	0xFF2
 19817                           intcon2	equ	0xFF1
 19818                           intcon3	equ	0xFF0
 19819                           indf0	equ	0xFEF
 19820                           postinc0	equ	0xFEE
 19821                           fsr0h	equ	0xFEA
 19822                           fsr0l	equ	0xFE9
 19823                           wreg	equ	0xFE8
 19824                           postdec1	equ	0xFE5
 19825                           fsr1h	equ	0xFE2
 19826                           fsr1l	equ	0xFE1
 19827                           indf2	equ	0xFDF
 19828                           postinc2	equ	0xFDE
 19829                           postdec2	equ	0xFDD
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _change_state_to_logs_34 *****************
 19835 ;; Defined at:
 19836 ;;		line 549 in file "UI.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;		None
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      void 
 19843 ;; Registers used:
 19844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;Total ram usage:        0 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    3
 19857 ;; This function calls:
 19858 ;;		i2_lcdInst
 19859 ;;		i2_printf
 19860 ;; This function is called by:
 19861 ;;		_updateMenu
 19862 ;;		_inputHandler
 19863 ;; This function uses a non-reentrant model
 19864 ;;
 19865                           
 19866                           	psect	text69
 19867  004D78                     __ptext69:
 19868                           	opt stack 0
 19869  004D78                     _change_state_to_logs_34:
 19870                           	opt stack 18
 19871                           
 19872                           ;UI.c: 550: cur_state = 1034;
 19873                           
 19874                           ;incstack = 0
 19875  004D78  0E04               	movlw	4
 19876  004D7A  0100               	movlb	0	; () banked
 19877  004D7C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19878  004D7E  0E0A               	movlw	10
 19879  004D80  6FE6               	movwf	_cur_state& (0+255),b
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;UI.c: 551: lcdInst(0b10000000);;
 19883  004D82  0E80               	movlw	128
 19884  004D84  ECA6  F028         	call	i2_lcdInst
 19885                           
 19886                           ;UI.c: 552: printf("LOG 3           ");
 19887  004D88  0EE7               	movlw	low STR_44
 19888  004D8A  6E0D               	movwf	i2printf@f,c
 19889  004D8C  0EFC               	movlw	high STR_44
 19890  004D8E  6E0E               	movwf	i2printf@f+1,c
 19891  004D90  ECDD  F00E         	call	i2_printf	;wreg free
 19892                           
 19893                           ;UI.c: 553: lcdInst(0b11000000);;
 19894  004D94  0EC0               	movlw	192
 19895  004D96  ECA6  F028         	call	i2_lcdInst
 19896                           
 19897                           ;UI.c: 554: printf("LOG 4          <");
 19898  004D9A  0EA2               	movlw	low STR_50
 19899  004D9C  6E0D               	movwf	i2printf@f,c
 19900  004D9E  0EFD               	movlw	high STR_50
 19901  004DA0  6E0E               	movwf	i2printf@f+1,c
 19902  004DA2  ECDD  F00E         	call	i2_printf	;wreg free
 19903  004DA6  0012               	return		;funcret
 19904  004DA8                     __end_of_change_state_to_logs_34:
 19905                           	opt stack 0
 19906                           pclatu	equ	0xFFB
 19907                           pclath	equ	0xFFA
 19908                           tblptru	equ	0xFF8
 19909                           tblptrh	equ	0xFF7
 19910                           tblptrl	equ	0xFF6
 19911                           tablat	equ	0xFF5
 19912                           prodh	equ	0xFF4
 19913                           prodl	equ	0xFF3
 19914                           intcon	equ	0xFF2
 19915                           intcon2	equ	0xFF1
 19916                           intcon3	equ	0xFF0
 19917                           indf0	equ	0xFEF
 19918                           postinc0	equ	0xFEE
 19919                           fsr0h	equ	0xFEA
 19920                           fsr0l	equ	0xFE9
 19921                           wreg	equ	0xFE8
 19922                           postdec1	equ	0xFE5
 19923                           fsr1h	equ	0xFE2
 19924                           fsr1l	equ	0xFE1
 19925                           indf2	equ	0xFDF
 19926                           postinc2	equ	0xFDE
 19927                           postdec2	equ	0xFDD
 19928                           fsr2h	equ	0xFDA
 19929                           fsr2l	equ	0xFD9
 19930                           status	equ	0xFD8
 19931                           
 19932 ;; *************** function _change_state_to_logs_33 *****************
 19933 ;; Defined at:
 19934 ;;		line 542 in file "UI.c"
 19935 ;; Parameters:    Size  Location     Type
 19936 ;;		None
 19937 ;; Auto vars:     Size  Location     Type
 19938 ;;		None
 19939 ;; Return value:  Size  Location     Type
 19940 ;;                  1    wreg      void 
 19941 ;; Registers used:
 19942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19943 ;; Tracked objects:
 19944 ;;		On entry : 0/0
 19945 ;;		On exit  : 0/0
 19946 ;;		Unchanged: 0/0
 19947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19952 ;;Total ram usage:        0 bytes
 19953 ;; Hardware stack levels used:    1
 19954 ;; Hardware stack levels required when called:    3
 19955 ;; This function calls:
 19956 ;;		i2_lcdInst
 19957 ;;		i2_printf
 19958 ;; This function is called by:
 19959 ;;		_updateMenu
 19960 ;;		_inputHandler
 19961 ;; This function uses a non-reentrant model
 19962 ;;
 19963                           
 19964                           	psect	text70
 19965  004DA8                     __ptext70:
 19966                           	opt stack 0
 19967  004DA8                     _change_state_to_logs_33:
 19968                           	opt stack 18
 19969                           
 19970                           ;UI.c: 543: cur_state = 1033;
 19971                           
 19972                           ;incstack = 0
 19973  004DA8  0E04               	movlw	4
 19974  004DAA  0100               	movlb	0	; () banked
 19975  004DAC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19976  004DAE  0E09               	movlw	9
 19977  004DB0  6FE6               	movwf	_cur_state& (0+255),b
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;UI.c: 544: lcdInst(0b10000000);;
 19981  004DB2  0E80               	movlw	128
 19982  004DB4  ECA6  F028         	call	i2_lcdInst
 19983                           
 19984                           ;UI.c: 545: printf("LOG 3          <");
 19985  004DB8  0E91               	movlw	low STR_46
 19986  004DBA  6E0D               	movwf	i2printf@f,c
 19987  004DBC  0EFD               	movlw	high STR_46
 19988  004DBE  6E0E               	movwf	i2printf@f+1,c
 19989  004DC0  ECDD  F00E         	call	i2_printf	;wreg free
 19990                           
 19991                           ;UI.c: 546: lcdInst(0b11000000);;
 19992  004DC4  0EC0               	movlw	192
 19993  004DC6  ECA6  F028         	call	i2_lcdInst
 19994                           
 19995                           ;UI.c: 547: printf("LOG 4           ");
 19996  004DCA  0EF8               	movlw	low STR_48
 19997  004DCC  6E0D               	movwf	i2printf@f,c
 19998  004DCE  0EFC               	movlw	high STR_48
 19999  004DD0  6E0E               	movwf	i2printf@f+1,c
 20000  004DD2  ECDD  F00E         	call	i2_printf	;wreg free
 20001  004DD6  0012               	return		;funcret
 20002  004DD8                     __end_of_change_state_to_logs_33:
 20003                           	opt stack 0
 20004                           pclatu	equ	0xFFB
 20005                           pclath	equ	0xFFA
 20006                           tblptru	equ	0xFF8
 20007                           tblptrh	equ	0xFF7
 20008                           tblptrl	equ	0xFF6
 20009                           tablat	equ	0xFF5
 20010                           prodh	equ	0xFF4
 20011                           prodl	equ	0xFF3
 20012                           intcon	equ	0xFF2
 20013                           intcon2	equ	0xFF1
 20014                           intcon3	equ	0xFF0
 20015                           indf0	equ	0xFEF
 20016                           postinc0	equ	0xFEE
 20017                           fsr0h	equ	0xFEA
 20018                           fsr0l	equ	0xFE9
 20019                           wreg	equ	0xFE8
 20020                           postdec1	equ	0xFE5
 20021                           fsr1h	equ	0xFE2
 20022                           fsr1l	equ	0xFE1
 20023                           indf2	equ	0xFDF
 20024                           postinc2	equ	0xFDE
 20025                           postdec2	equ	0xFDD
 20026                           fsr2h	equ	0xFDA
 20027                           fsr2l	equ	0xFD9
 20028                           status	equ	0xFD8
 20029                           
 20030 ;; *************** function _change_state_to_logs_23 *****************
 20031 ;; Defined at:
 20032 ;;		line 535 in file "UI.c"
 20033 ;; Parameters:    Size  Location     Type
 20034 ;;		None
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;		None
 20037 ;; Return value:  Size  Location     Type
 20038 ;;                  1    wreg      void 
 20039 ;; Registers used:
 20040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20041 ;; Tracked objects:
 20042 ;;		On entry : 0/0
 20043 ;;		On exit  : 0/0
 20044 ;;		Unchanged: 0/0
 20045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20050 ;;Total ram usage:        0 bytes
 20051 ;; Hardware stack levels used:    1
 20052 ;; Hardware stack levels required when called:    3
 20053 ;; This function calls:
 20054 ;;		i2_lcdInst
 20055 ;;		i2_printf
 20056 ;; This function is called by:
 20057 ;;		_updateMenu
 20058 ;;		_inputHandler
 20059 ;; This function uses a non-reentrant model
 20060 ;;
 20061                           
 20062                           	psect	text71
 20063  004EC4                     __ptext71:
 20064                           	opt stack 0
 20065  004EC4                     _change_state_to_logs_23:
 20066                           	opt stack 18
 20067                           
 20068                           ;UI.c: 536: cur_state = 1023;
 20069                           
 20070                           ;incstack = 0
 20071  004EC4  0E03               	movlw	3
 20072  004EC6  0100               	movlb	0	; () banked
 20073  004EC8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20074  004ECA  69E6               	setf	_cur_state& (0+255),b
 20075                           
 20076                           ; BSR set to: 0
 20077                           ;UI.c: 537: lcdInst(0b10000000);;
 20078  004ECC  0E80               	movlw	128
 20079  004ECE  ECA6  F028         	call	i2_lcdInst
 20080                           
 20081                           ;UI.c: 538: printf("LOG 2           ");
 20082  004ED2  0ED6               	movlw	low STR_40
 20083  004ED4  6E0D               	movwf	i2printf@f,c
 20084  004ED6  0EFC               	movlw	high STR_40
 20085  004ED8  6E0E               	movwf	i2printf@f+1,c
 20086  004EDA  ECDD  F00E         	call	i2_printf	;wreg free
 20087                           
 20088                           ;UI.c: 539: lcdInst(0b11000000);;
 20089  004EDE  0EC0               	movlw	192
 20090  004EE0  ECA6  F028         	call	i2_lcdInst
 20091                           
 20092                           ;UI.c: 540: printf("LOG 3          <");
 20093  004EE4  0E91               	movlw	low STR_46
 20094  004EE6  6E0D               	movwf	i2printf@f,c
 20095  004EE8  0EFD               	movlw	high STR_46
 20096  004EEA  6E0E               	movwf	i2printf@f+1,c
 20097  004EEC  ECDD  F00E         	call	i2_printf	;wreg free
 20098  004EF0  0012               	return		;funcret
 20099  004EF2                     __end_of_change_state_to_logs_23:
 20100                           	opt stack 0
 20101                           pclatu	equ	0xFFB
 20102                           pclath	equ	0xFFA
 20103                           tblptru	equ	0xFF8
 20104                           tblptrh	equ	0xFF7
 20105                           tblptrl	equ	0xFF6
 20106                           tablat	equ	0xFF5
 20107                           prodh	equ	0xFF4
 20108                           prodl	equ	0xFF3
 20109                           intcon	equ	0xFF2
 20110                           intcon2	equ	0xFF1
 20111                           intcon3	equ	0xFF0
 20112                           indf0	equ	0xFEF
 20113                           postinc0	equ	0xFEE
 20114                           fsr0h	equ	0xFEA
 20115                           fsr0l	equ	0xFE9
 20116                           wreg	equ	0xFE8
 20117                           postdec1	equ	0xFE5
 20118                           fsr1h	equ	0xFE2
 20119                           fsr1l	equ	0xFE1
 20120                           indf2	equ	0xFDF
 20121                           postinc2	equ	0xFDE
 20122                           postdec2	equ	0xFDD
 20123                           fsr2h	equ	0xFDA
 20124                           fsr2l	equ	0xFD9
 20125                           status	equ	0xFD8
 20126                           
 20127 ;; *************** function _change_state_to_logs_22 *****************
 20128 ;; Defined at:
 20129 ;;		line 528 in file "UI.c"
 20130 ;; Parameters:    Size  Location     Type
 20131 ;;		None
 20132 ;; Auto vars:     Size  Location     Type
 20133 ;;		None
 20134 ;; Return value:  Size  Location     Type
 20135 ;;                  1    wreg      void 
 20136 ;; Registers used:
 20137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20138 ;; Tracked objects:
 20139 ;;		On entry : 0/0
 20140 ;;		On exit  : 0/0
 20141 ;;		Unchanged: 0/0
 20142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;Total ram usage:        0 bytes
 20148 ;; Hardware stack levels used:    1
 20149 ;; Hardware stack levels required when called:    3
 20150 ;; This function calls:
 20151 ;;		i2_lcdInst
 20152 ;;		i2_printf
 20153 ;; This function is called by:
 20154 ;;		_updateMenu
 20155 ;;		_inputHandler
 20156 ;; This function uses a non-reentrant model
 20157 ;;
 20158                           
 20159                           	psect	text72
 20160  004DD8                     __ptext72:
 20161                           	opt stack 0
 20162  004DD8                     _change_state_to_logs_22:
 20163                           	opt stack 18
 20164                           
 20165                           ;UI.c: 529: cur_state = 1022;
 20166                           
 20167                           ;incstack = 0
 20168  004DD8  0E03               	movlw	3
 20169  004DDA  0100               	movlb	0	; () banked
 20170  004DDC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20171  004DDE  0EFE               	movlw	254
 20172  004DE0  6FE6               	movwf	_cur_state& (0+255),b
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;UI.c: 530: lcdInst(0b10000000);;
 20176  004DE2  0E80               	movlw	128
 20177  004DE4  ECA6  F028         	call	i2_lcdInst
 20178                           
 20179                           ;UI.c: 531: printf("LOG 2          <");
 20180  004DE8  0E80               	movlw	low STR_42
 20181  004DEA  6E0D               	movwf	i2printf@f,c
 20182  004DEC  0EFD               	movlw	high STR_42
 20183  004DEE  6E0E               	movwf	i2printf@f+1,c
 20184  004DF0  ECDD  F00E         	call	i2_printf	;wreg free
 20185                           
 20186                           ;UI.c: 532: lcdInst(0b11000000);;
 20187  004DF4  0EC0               	movlw	192
 20188  004DF6  ECA6  F028         	call	i2_lcdInst
 20189                           
 20190                           ;UI.c: 533: printf("LOG 3           ");
 20191  004DFA  0EE7               	movlw	low STR_44
 20192  004DFC  6E0D               	movwf	i2printf@f,c
 20193  004DFE  0EFC               	movlw	high STR_44
 20194  004E00  6E0E               	movwf	i2printf@f+1,c
 20195  004E02  ECDD  F00E         	call	i2_printf	;wreg free
 20196  004E06  0012               	return		;funcret
 20197  004E08                     __end_of_change_state_to_logs_22:
 20198                           	opt stack 0
 20199                           pclatu	equ	0xFFB
 20200                           pclath	equ	0xFFA
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           intcon2	equ	0xFF1
 20209                           intcon3	equ	0xFF0
 20210                           indf0	equ	0xFEF
 20211                           postinc0	equ	0xFEE
 20212                           fsr0h	equ	0xFEA
 20213                           fsr0l	equ	0xFE9
 20214                           wreg	equ	0xFE8
 20215                           postdec1	equ	0xFE5
 20216                           fsr1h	equ	0xFE2
 20217                           fsr1l	equ	0xFE1
 20218                           indf2	equ	0xFDF
 20219                           postinc2	equ	0xFDE
 20220                           postdec2	equ	0xFDD
 20221                           fsr2h	equ	0xFDA
 20222                           fsr2l	equ	0xFD9
 20223                           status	equ	0xFD8
 20224                           
 20225 ;; *************** function _change_state_to_logs_12 *****************
 20226 ;; Defined at:
 20227 ;;		line 521 in file "UI.c"
 20228 ;; Parameters:    Size  Location     Type
 20229 ;;		None
 20230 ;; Auto vars:     Size  Location     Type
 20231 ;;		None
 20232 ;; Return value:  Size  Location     Type
 20233 ;;                  1    wreg      void 
 20234 ;; Registers used:
 20235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20236 ;; Tracked objects:
 20237 ;;		On entry : 0/0
 20238 ;;		On exit  : 0/0
 20239 ;;		Unchanged: 0/0
 20240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20245 ;;Total ram usage:        0 bytes
 20246 ;; Hardware stack levels used:    1
 20247 ;; Hardware stack levels required when called:    3
 20248 ;; This function calls:
 20249 ;;		i2_lcdInst
 20250 ;;		i2_printf
 20251 ;; This function is called by:
 20252 ;;		_updateMenu
 20253 ;;		_inputHandler
 20254 ;; This function uses a non-reentrant model
 20255 ;;
 20256                           
 20257                           	psect	text73
 20258  004E08                     __ptext73:
 20259                           	opt stack 0
 20260  004E08                     _change_state_to_logs_12:
 20261                           	opt stack 18
 20262                           
 20263                           ;UI.c: 522: cur_state = 1012;
 20264                           
 20265                           ;incstack = 0
 20266  004E08  0E03               	movlw	3
 20267  004E0A  0100               	movlb	0	; () banked
 20268  004E0C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20269  004E0E  0EF4               	movlw	244
 20270  004E10  6FE6               	movwf	_cur_state& (0+255),b
 20271                           
 20272                           ; BSR set to: 0
 20273                           ;UI.c: 523: lcdInst(0b10000000);;
 20274  004E12  0E80               	movlw	128
 20275  004E14  ECA6  F028         	call	i2_lcdInst
 20276                           
 20277                           ;UI.c: 524: printf("LOG 1           ");
 20278  004E18  0EC5               	movlw	low STR_41
 20279  004E1A  6E0D               	movwf	i2printf@f,c
 20280  004E1C  0EFC               	movlw	high STR_41
 20281  004E1E  6E0E               	movwf	i2printf@f+1,c
 20282  004E20  ECDD  F00E         	call	i2_printf	;wreg free
 20283                           
 20284                           ;UI.c: 525: lcdInst(0b11000000);;
 20285  004E24  0EC0               	movlw	192
 20286  004E26  ECA6  F028         	call	i2_lcdInst
 20287                           
 20288                           ;UI.c: 526: printf("LOG 2          <");
 20289  004E2A  0E80               	movlw	low STR_42
 20290  004E2C  6E0D               	movwf	i2printf@f,c
 20291  004E2E  0EFD               	movlw	high STR_42
 20292  004E30  6E0E               	movwf	i2printf@f+1,c
 20293  004E32  ECDD  F00E         	call	i2_printf	;wreg free
 20294  004E36  0012               	return		;funcret
 20295  004E38                     __end_of_change_state_to_logs_12:
 20296                           	opt stack 0
 20297                           pclatu	equ	0xFFB
 20298                           pclath	equ	0xFFA
 20299                           tblptru	equ	0xFF8
 20300                           tblptrh	equ	0xFF7
 20301                           tblptrl	equ	0xFF6
 20302                           tablat	equ	0xFF5
 20303                           prodh	equ	0xFF4
 20304                           prodl	equ	0xFF3
 20305                           intcon	equ	0xFF2
 20306                           intcon2	equ	0xFF1
 20307                           intcon3	equ	0xFF0
 20308                           indf0	equ	0xFEF
 20309                           postinc0	equ	0xFEE
 20310                           fsr0h	equ	0xFEA
 20311                           fsr0l	equ	0xFE9
 20312                           wreg	equ	0xFE8
 20313                           postdec1	equ	0xFE5
 20314                           fsr1h	equ	0xFE2
 20315                           fsr1l	equ	0xFE1
 20316                           indf2	equ	0xFDF
 20317                           postinc2	equ	0xFDE
 20318                           postdec2	equ	0xFDD
 20319                           fsr2h	equ	0xFDA
 20320                           fsr2l	equ	0xFD9
 20321                           status	equ	0xFD8
 20322                           
 20323 ;; *************** function _change_state_to_logs_11 *****************
 20324 ;; Defined at:
 20325 ;;		line 514 in file "UI.c"
 20326 ;; Parameters:    Size  Location     Type
 20327 ;;		None
 20328 ;; Auto vars:     Size  Location     Type
 20329 ;;		None
 20330 ;; Return value:  Size  Location     Type
 20331 ;;                  1    wreg      void 
 20332 ;; Registers used:
 20333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20334 ;; Tracked objects:
 20335 ;;		On entry : 0/0
 20336 ;;		On exit  : 0/0
 20337 ;;		Unchanged: 0/0
 20338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20343 ;;Total ram usage:        0 bytes
 20344 ;; Hardware stack levels used:    1
 20345 ;; Hardware stack levels required when called:    3
 20346 ;; This function calls:
 20347 ;;		i2_lcdInst
 20348 ;;		i2_printf
 20349 ;; This function is called by:
 20350 ;;		_updateMenu
 20351 ;;		_inputHandler
 20352 ;; This function uses a non-reentrant model
 20353 ;;
 20354                           
 20355                           	psect	text74
 20356  004E38                     __ptext74:
 20357                           	opt stack 0
 20358  004E38                     _change_state_to_logs_11:
 20359                           	opt stack 18
 20360                           
 20361                           ;UI.c: 515: cur_state = 1011;
 20362                           
 20363                           ;incstack = 0
 20364  004E38  0E03               	movlw	3
 20365  004E3A  0100               	movlb	0	; () banked
 20366  004E3C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20367  004E3E  0EF3               	movlw	243
 20368  004E40  6FE6               	movwf	_cur_state& (0+255),b
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;UI.c: 516: lcdInst(0b10000000);;
 20372  004E42  0E80               	movlw	128
 20373  004E44  ECA6  F028         	call	i2_lcdInst
 20374                           
 20375                           ;UI.c: 517: printf("LOG 1          <");
 20376  004E48  0E6F               	movlw	low STR_39
 20377  004E4A  6E0D               	movwf	i2printf@f,c
 20378  004E4C  0EFD               	movlw	high STR_39
 20379  004E4E  6E0E               	movwf	i2printf@f+1,c
 20380  004E50  ECDD  F00E         	call	i2_printf	;wreg free
 20381                           
 20382                           ;UI.c: 518: lcdInst(0b11000000);;
 20383  004E54  0EC0               	movlw	192
 20384  004E56  ECA6  F028         	call	i2_lcdInst
 20385                           
 20386                           ;UI.c: 519: printf("LOG 2           ");
 20387  004E5A  0ED6               	movlw	low STR_40
 20388  004E5C  6E0D               	movwf	i2printf@f,c
 20389  004E5E  0EFC               	movlw	high STR_40
 20390  004E60  6E0E               	movwf	i2printf@f+1,c
 20391  004E62  ECDD  F00E         	call	i2_printf	;wreg free
 20392  004E66  0012               	return		;funcret
 20393  004E68                     __end_of_change_state_to_logs_11:
 20394                           	opt stack 0
 20395                           pclatu	equ	0xFFB
 20396                           pclath	equ	0xFFA
 20397                           tblptru	equ	0xFF8
 20398                           tblptrh	equ	0xFF7
 20399                           tblptrl	equ	0xFF6
 20400                           tablat	equ	0xFF5
 20401                           prodh	equ	0xFF4
 20402                           prodl	equ	0xFF3
 20403                           intcon	equ	0xFF2
 20404                           intcon2	equ	0xFF1
 20405                           intcon3	equ	0xFF0
 20406                           indf0	equ	0xFEF
 20407                           postinc0	equ	0xFEE
 20408                           fsr0h	equ	0xFEA
 20409                           fsr0l	equ	0xFE9
 20410                           wreg	equ	0xFE8
 20411                           postdec1	equ	0xFE5
 20412                           fsr1h	equ	0xFE2
 20413                           fsr1l	equ	0xFE1
 20414                           indf2	equ	0xFDF
 20415                           postinc2	equ	0xFDE
 20416                           postdec2	equ	0xFDD
 20417                           fsr2h	equ	0xFDA
 20418                           fsr2l	equ	0xFD9
 20419                           status	equ	0xFD8
 20420                           
 20421 ;; *************** function _dispLogs *****************
 20422 ;; Defined at:
 20423 ;;		line 467 in file "UI.c"
 20424 ;; Parameters:    Size  Location     Type
 20425 ;;  myLog           2   17[COMRAM] int 
 20426 ;; Auto vars:     Size  Location     Type
 20427 ;;		None
 20428 ;; Return value:  Size  Location     Type
 20429 ;;                  1    wreg      void 
 20430 ;; Registers used:
 20431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20432 ;; Tracked objects:
 20433 ;;		On entry : 0/0
 20434 ;;		On exit  : 0/0
 20435 ;;		Unchanged: 0/0
 20436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20441 ;;Total ram usage:        2 bytes
 20442 ;; Hardware stack levels used:    1
 20443 ;; Hardware stack levels required when called:    2
 20444 ;; This function calls:
 20445 ;;		_retrieveLog
 20446 ;; This function is called by:
 20447 ;;		_updateMenu
 20448 ;; This function uses a non-reentrant model
 20449 ;;
 20450                           
 20451                           	psect	text75
 20452  005010                     __ptext75:
 20453                           	opt stack 0
 20454  005010                     _dispLogs:
 20455                           	opt stack 20
 20456                           
 20457                           ;UI.c: 468: logstate = 1;
 20458                           
 20459                           ;incstack = 0
 20460  005010  0E00               	movlw	0
 20461  005012  0100               	movlb	0	; () banked
 20462  005014  6FF7               	movwf	(_logstate+1)& (0+255),b
 20463  005016  0E01               	movlw	1
 20464  005018  6FF6               	movwf	_logstate& (0+255),b
 20465                           
 20466                           ; BSR set to: 0
 20467                           ;UI.c: 469: log = myLog;
 20468  00501A  C012  F0EC         	movff	dispLogs@myLog,_log
 20469  00501E  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;UI.c: 470: retrieveLog(myLog - 1);
 20473  005022  0EFF               	movlw	255
 20474  005024  2412               	addwf	dispLogs@myLog,w,c
 20475  005026  6E07               	movwf	retrieveLog@logNum,c
 20476  005028  0EFF               	movlw	255
 20477  00502A  2013               	addwfc	dispLogs@myLog+1,w,c
 20478  00502C  6E08               	movwf	retrieveLog@logNum+1,c
 20479  00502E  ECA2  F01D         	call	_retrieveLog	;wreg free
 20480  005032  0012               	return		;funcret
 20481  005034                     __end_of_dispLogs:
 20482                           	opt stack 0
 20483                           pclatu	equ	0xFFB
 20484                           pclath	equ	0xFFA
 20485                           tblptru	equ	0xFF8
 20486                           tblptrh	equ	0xFF7
 20487                           tblptrl	equ	0xFF6
 20488                           tablat	equ	0xFF5
 20489                           prodh	equ	0xFF4
 20490                           prodl	equ	0xFF3
 20491                           intcon	equ	0xFF2
 20492                           intcon2	equ	0xFF1
 20493                           intcon3	equ	0xFF0
 20494                           indf0	equ	0xFEF
 20495                           postinc0	equ	0xFEE
 20496                           fsr0h	equ	0xFEA
 20497                           fsr0l	equ	0xFE9
 20498                           wreg	equ	0xFE8
 20499                           postdec1	equ	0xFE5
 20500                           fsr1h	equ	0xFE2
 20501                           fsr1l	equ	0xFE1
 20502                           indf2	equ	0xFDF
 20503                           postinc2	equ	0xFDE
 20504                           postdec2	equ	0xFDD
 20505                           fsr2h	equ	0xFDA
 20506                           fsr2l	equ	0xFD9
 20507                           status	equ	0xFD8
 20508                           
 20509 ;; *************** function _retrieveLog *****************
 20510 ;; Defined at:
 20511 ;;		line 134 in file "EEPROM.c"
 20512 ;; Parameters:    Size  Location     Type
 20513 ;;  logNum          2    6[COMRAM] int 
 20514 ;; Auto vars:     Size  Location     Type
 20515 ;;  i               2   13[COMRAM] int 
 20516 ;;  addr            2   15[COMRAM] unsigned short 
 20517 ;;  byte3           1   12[COMRAM] unsigned char 
 20518 ;;  byte2           1   11[COMRAM] unsigned char 
 20519 ;;  byte1           1   10[COMRAM] unsigned char 
 20520 ;; Return value:  Size  Location     Type
 20521 ;;                  1    wreg      void 
 20522 ;; Registers used:
 20523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20524 ;; Tracked objects:
 20525 ;;		On entry : 0/0
 20526 ;;		On exit  : 0/0
 20527 ;;		Unchanged: 0/0
 20528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20530 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20532 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20533 ;;Total ram usage:       11 bytes
 20534 ;; Hardware stack levels used:    1
 20535 ;; Hardware stack levels required when called:    1
 20536 ;; This function calls:
 20537 ;;		i2_EEPROM_read
 20538 ;;		i2___wmul
 20539 ;; This function is called by:
 20540 ;;		_dispLogs
 20541 ;; This function uses a non-reentrant model
 20542 ;;
 20543                           
 20544                           	psect	text76
 20545  003B44                     __ptext76:
 20546                           	opt stack 0
 20547  003B44                     _retrieveLog:
 20548                           	opt stack 20
 20549                           
 20550                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20551                           
 20552                           ;incstack = 0
 20553  003B44  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20554  003B48  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20555  003B4C  0E00               	movlw	0
 20556  003B4E  6E04               	movwf	i2___wmul@multiplicand+1,c
 20557  003B50  0E0B               	movlw	11
 20558  003B52  6E03               	movwf	i2___wmul@multiplicand,c
 20559  003B54  ECE2  F027         	call	i2___wmul	;wreg free
 20560  003B58  0E01               	movlw	1
 20561  003B5A  2401               	addwf	?i2___wmul,w,c
 20562  003B5C  6E10               	movwf	retrieveLog@addr,c
 20563  003B5E  0E00               	movlw	0
 20564  003B60  2002               	addwfc	?i2___wmul+1,w,c
 20565  003B62  6E11               	movwf	retrieveLog@addr+1,c
 20566                           
 20567                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20568  003B64  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20569  003B68  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20570  003B6C  EC72  F028         	call	i2_EEPROM_read	;wreg free
 20571  003B70  6E0B               	movwf	retrieveLog@byte1,c
 20572                           
 20573                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20574  003B72  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20575  003B76  0E80               	movlw	128
 20576  003B78  1609               	andwf	??_retrieveLog,f,c
 20577  003B7A  5009               	movf	??_retrieveLog,w,c
 20578  003B7C  0100               	movlb	0	; () banked
 20579  003B7E  6FEE               	movwf	_log_completion& (0+255),b
 20580  003B80  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20581                           
 20582                           ; BSR set to: 0
 20583                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20584  003B82  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20585  003B86  0E0F               	movlw	15
 20586  003B88  1609               	andwf	??_retrieveLog,f,c
 20587  003B8A  5009               	movf	??_retrieveLog,w,c
 20588  003B8C  6E73               	movwf	_log_count_total,c
 20589  003B8E  6A74               	clrf	_log_count_total+1,c
 20590                           
 20591                           ; BSR set to: 0
 20592                           ;EEPROM.c: 146: addr++;
 20593  003B90  4A10               	infsnz	retrieveLog@addr,f,c
 20594  003B92  2A11               	incf	retrieveLog@addr+1,f,c
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20598  003B94  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20599  003B98  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20600  003B9C  EC72  F028         	call	i2_EEPROM_read	;wreg free
 20601  003BA0  6E0C               	movwf	retrieveLog@byte2,c
 20602                           
 20603                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20604  003BA2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20605  003BA6  3A09               	swapf	??_retrieveLog,f,c
 20606  003BA8  0E0F               	movlw	15
 20607  003BAA  1609               	andwf	??_retrieveLog,f,c
 20608  003BAC  0E0F               	movlw	15
 20609  003BAE  1609               	andwf	??_retrieveLog,f,c
 20610  003BB0  5009               	movf	??_retrieveLog,w,c
 20611  003BB2  0100               	movlb	0	; () banked
 20612  003BB4  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20613  003BB6  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20614                           
 20615                           ; BSR set to: 0
 20616                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20617  003BB8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20618  003BBC  0E0F               	movlw	15
 20619  003BBE  1609               	andwf	??_retrieveLog,f,c
 20620  003BC0  5009               	movf	??_retrieveLog,w,c
 20621  003BC2  0100               	movlb	0	; () banked
 20622  003BC4  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20623  003BC6  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20624                           
 20625                           ; BSR set to: 0
 20626                           ;EEPROM.c: 152: addr++;
 20627  003BC8  4A10               	infsnz	retrieveLog@addr,f,c
 20628  003BCA  2A11               	incf	retrieveLog@addr+1,f,c
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20632  003BCC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20633  003BD0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20634  003BD4  EC72  F028         	call	i2_EEPROM_read	;wreg free
 20635  003BD8  6E0D               	movwf	retrieveLog@byte3,c
 20636                           
 20637                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20638  003BDA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20639  003BDE  3A09               	swapf	??_retrieveLog,f,c
 20640  003BE0  0E0F               	movlw	15
 20641  003BE2  1609               	andwf	??_retrieveLog,f,c
 20642  003BE4  0E0F               	movlw	15
 20643  003BE6  1609               	andwf	??_retrieveLog,f,c
 20644  003BE8  5009               	movf	??_retrieveLog,w,c
 20645  003BEA  6E71               	movwf	_log_count_can_w_lab,c
 20646  003BEC  6A72               	clrf	_log_count_can_w_lab+1,c
 20647                           
 20648                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20649  003BEE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20650  003BF2  0E0F               	movlw	15
 20651  003BF4  1609               	andwf	??_retrieveLog,f,c
 20652  003BF6  5009               	movf	??_retrieveLog,w,c
 20653  003BF8  6E6F               	movwf	_log_count_can_no_lab,c
 20654  003BFA  6A70               	clrf	_log_count_can_no_lab+1,c
 20655                           
 20656                           ;EEPROM.c: 156: addr++;
 20657  003BFC  4A10               	infsnz	retrieveLog@addr,f,c
 20658  003BFE  2A11               	incf	retrieveLog@addr+1,f,c
 20659                           
 20660                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20661  003C00  0E00               	movlw	0
 20662  003C02  6E0F               	movwf	retrieveLog@i+1,c
 20663  003C04  0E00               	movlw	0
 20664  003C06  6E0E               	movwf	retrieveLog@i,c
 20665  003C08                     i2l6523:
 20666  003C08  BE0F               	btfsc	retrieveLog@i+1,7,c
 20667  003C0A  D006               	goto	i2l6527
 20668  003C0C  500F               	movf	retrieveLog@i+1,w,c
 20669  003C0E  E11E               	bnz	i2l6535
 20670  003C10  0E07               	movlw	7
 20671  003C12  5C0E               	subwf	retrieveLog@i,w,c
 20672  003C14  B0D8               	btfsc	status,0,c
 20673  003C16  D01A               	goto	i2l6535
 20674  003C18                     i2l6527:
 20675                           
 20676                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20677  003C18  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20678  003C1C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20679  003C20  EC72  F028         	call	i2_EEPROM_read	;wreg free
 20680  003C24  6E09               	movwf	??_retrieveLog& (0+255),c
 20681  003C26  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20682  003C28  90D8               	bcf	status,0,c
 20683  003C2A  340E               	rlcf	retrieveLog@i,w,c
 20684  003C2C  6ED9               	movwf	fsr2l,c
 20685  003C2E  340F               	rlcf	retrieveLog@i+1,w,c
 20686  003C30  6EDA               	movwf	fsr2h,c
 20687  003C32  0E00               	movlw	low _log_startTime
 20688  003C34  26D9               	addwf	fsr2l,f,c
 20689  003C36  0E01               	movlw	high _log_startTime
 20690  003C38  22DA               	addwfc	fsr2h,f,c
 20691  003C3A  C009  FFDE         	movff	??_retrieveLog,postinc2
 20692  003C3E  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20693                           
 20694                           ;EEPROM.c: 161: addr++;
 20695  003C42  4A10               	infsnz	retrieveLog@addr,f,c
 20696  003C44  2A11               	incf	retrieveLog@addr+1,f,c
 20697  003C46  4A0E               	infsnz	retrieveLog@i,f,c
 20698  003C48  2A0F               	incf	retrieveLog@i+1,f,c
 20699  003C4A  D7DE               	goto	i2l6523
 20700  003C4C                     i2l6535:
 20701                           
 20702                           ;EEPROM.c: 162: }
 20703                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20704  003C4C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20705  003C50  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20706  003C54  EC72  F028         	call	i2_EEPROM_read	;wreg free
 20707  003C58  6E09               	movwf	??_retrieveLog& (0+255),c
 20708  003C5A  5009               	movf	??_retrieveLog,w,c
 20709  003C5C  0100               	movlb	0	; () banked
 20710  003C5E  6FF4               	movwf	_log_total_time& (0+255),b
 20711  003C60  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20712                           
 20713                           ; BSR set to: 0
 20714  003C62  0012               	return		;funcret
 20715  003C64                     __end_of_retrieveLog:
 20716                           	opt stack 0
 20717                           pclatu	equ	0xFFB
 20718                           pclath	equ	0xFFA
 20719                           tblptru	equ	0xFF8
 20720                           tblptrh	equ	0xFF7
 20721                           tblptrl	equ	0xFF6
 20722                           tablat	equ	0xFF5
 20723                           prodh	equ	0xFF4
 20724                           prodl	equ	0xFF3
 20725                           intcon	equ	0xFF2
 20726                           intcon2	equ	0xFF1
 20727                           intcon3	equ	0xFF0
 20728                           indf0	equ	0xFEF
 20729                           postinc0	equ	0xFEE
 20730                           fsr0h	equ	0xFEA
 20731                           fsr0l	equ	0xFE9
 20732                           wreg	equ	0xFE8
 20733                           postdec1	equ	0xFE5
 20734                           fsr1h	equ	0xFE2
 20735                           fsr1l	equ	0xFE1
 20736                           indf2	equ	0xFDF
 20737                           postinc2	equ	0xFDE
 20738                           postdec2	equ	0xFDD
 20739                           fsr2h	equ	0xFDA
 20740                           fsr2l	equ	0xFD9
 20741                           status	equ	0xFD8
 20742                           
 20743 ;; *************** function i2_EEPROM_read *****************
 20744 ;; Defined at:
 20745 ;;		line 68 in file "EEPROM.c"
 20746 ;; Parameters:    Size  Location     Type
 20747 ;;  address         2    0[COMRAM] unsigned short 
 20748 ;; Auto vars:     Size  Location     Type
 20749 ;;		None
 20750 ;; Return value:  Size  Location     Type
 20751 ;;                  1    wreg      unsigned char 
 20752 ;; Registers used:
 20753 ;;		wreg, status,2
 20754 ;; Tracked objects:
 20755 ;;		On entry : 0/0
 20756 ;;		On exit  : 0/0
 20757 ;;		Unchanged: 0/0
 20758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20763 ;;Total ram usage:        2 bytes
 20764 ;; Hardware stack levels used:    1
 20765 ;; This function calls:
 20766 ;;		Nothing
 20767 ;; This function is called by:
 20768 ;;		_retrieveLog
 20769 ;; This function uses a non-reentrant model
 20770 ;;
 20771                           
 20772                           	psect	text77
 20773  0050E4                     __ptext77:
 20774                           	opt stack 0
 20775  0050E4                     i2_EEPROM_read:
 20776                           	opt stack 20
 20777                           
 20778                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20779                           
 20780                           ; BSR set to: 0
 20781                           ;incstack = 0
 20782  0050E4  5002               	movf	i2EEPROM_read@address+1,w,c
 20783  0050E6  6EAA               	movwf	4010,c	;volatile
 20784                           
 20785                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20786  0050E8  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20787                           
 20788                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20789  0050EC  9EA6               	bcf	4006,7,c	;volatile
 20790                           
 20791                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20792  0050EE  9CA6               	bcf	4006,6,c	;volatile
 20793                           
 20794                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20795  0050F0  80A6               	bsf	4006,0,c	;volatile
 20796  0050F2                     i2l1006:
 20797  0050F2  B0A6               	btfsc	4006,0,c	;volatile
 20798  0050F4  D7FE               	goto	i2l1006
 20799                           
 20800                           ;EEPROM.c: 81: return EEDATA;
 20801  0050F6  50A8               	movf	4008,w,c	;volatile
 20802  0050F8  0012               	return	
 20803  0050FA                     __end_ofi2_EEPROM_read:
 20804                           	opt stack 0
 20805                           pclatu	equ	0xFFB
 20806                           pclath	equ	0xFFA
 20807                           tblptru	equ	0xFF8
 20808                           tblptrh	equ	0xFF7
 20809                           tblptrl	equ	0xFF6
 20810                           tablat	equ	0xFF5
 20811                           prodh	equ	0xFF4
 20812                           prodl	equ	0xFF3
 20813                           intcon	equ	0xFF2
 20814                           intcon2	equ	0xFF1
 20815                           intcon3	equ	0xFF0
 20816                           indf0	equ	0xFEF
 20817                           postinc0	equ	0xFEE
 20818                           fsr0h	equ	0xFEA
 20819                           fsr0l	equ	0xFE9
 20820                           wreg	equ	0xFE8
 20821                           postdec1	equ	0xFE5
 20822                           fsr1h	equ	0xFE2
 20823                           fsr1l	equ	0xFE1
 20824                           indf2	equ	0xFDF
 20825                           postinc2	equ	0xFDE
 20826                           postdec2	equ	0xFDD
 20827                           fsr2h	equ	0xFDA
 20828                           fsr2l	equ	0xFD9
 20829                           status	equ	0xFD8
 20830                           
 20831 ;; *************** function _printSortTimer *****************
 20832 ;; Defined at:
 20833 ;;		line 445 in file "sort.c"
 20834 ;; Parameters:    Size  Location     Type
 20835 ;;		None
 20836 ;; Auto vars:     Size  Location     Type
 20837 ;;  i               2   70[COMRAM] int 
 20838 ;;  i               2   72[COMRAM] int 
 20839 ;;  curTime        14   44[COMRAM] int [7]
 20840 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20841 ;;  sec             2   64[COMRAM] int 
 20842 ;;  min             2   62[COMRAM] int 
 20843 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20844 ;;  start_sec       2   58[COMRAM] unsigned int 
 20845 ;; Return value:  Size  Location     Type
 20846 ;;                  1    wreg      void 
 20847 ;; Registers used:
 20848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20849 ;; Tracked objects:
 20850 ;;		On entry : 0/0
 20851 ;;		On exit  : 0/0
 20852 ;;		Unchanged: 0/0
 20853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20855 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20856 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20857 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20858 ;;Total ram usage:       33 bytes
 20859 ;; Hardware stack levels used:    1
 20860 ;; Hardware stack levels required when called:    3
 20861 ;; This function calls:
 20862 ;;		i2___lwdiv
 20863 ;;		i2___lwmod
 20864 ;;		i2___wmul
 20865 ;;		i2_delay_ms
 20866 ;;		i2_getRTC
 20867 ;;		i2_lcdInst
 20868 ;;		i2_printf
 20869 ;; This function is called by:
 20870 ;;		_handler
 20871 ;; This function uses a non-reentrant model
 20872 ;;
 20873                           
 20874                           	psect	text78
 20875  0029B0                     __ptext78:
 20876                           	opt stack 0
 20877  0029B0                     _printSortTimer:
 20878                           	opt stack 20
 20879                           
 20880                           ;sort.c: 446: getRTC();
 20881                           
 20882                           ;incstack = 0
 20883  0029B0  EC5A  F023         	call	i2_getRTC	;wreg free
 20884                           
 20885                           ;sort.c: 447: int curTime[7];
 20886                           ;sort.c: 448: for(int i = 0; i < 7; i++){
 20887  0029B4  0E00               	movlw	0
 20888  0029B6  6E4A               	movwf	printSortTimer@i+1,c
 20889  0029B8  0E00               	movlw	0
 20890  0029BA  6E49               	movwf	printSortTimer@i,c
 20891  0029BC                     i2l8933:
 20892  0029BC  BE4A               	btfsc	printSortTimer@i+1,7,c
 20893  0029BE  D006               	goto	i2l8937
 20894  0029C0  504A               	movf	printSortTimer@i+1,w,c
 20895  0029C2  E131               	bnz	i2l8943
 20896  0029C4  0E07               	movlw	7
 20897  0029C6  5C49               	subwf	printSortTimer@i,w,c
 20898  0029C8  B0D8               	btfsc	status,0,c
 20899  0029CA  D02D               	goto	i2l8943
 20900  0029CC                     i2l8937:
 20901                           
 20902                           ;sort.c: 449: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20903  0029CC  0E24               	movlw	low _time
 20904  0029CE  2449               	addwf	printSortTimer@i,w,c
 20905  0029D0  6ED9               	movwf	fsr2l,c
 20906  0029D2  0E01               	movlw	high _time
 20907  0029D4  204A               	addwfc	printSortTimer@i+1,w,c
 20908  0029D6  6EDA               	movwf	fsr2h,c
 20909  0029D8  50DF               	movf	indf2,w,c
 20910  0029DA  6E2A               	movwf	??_printSortTimer& (0+255),c
 20911  0029DC  3A2A               	swapf	??_printSortTimer,f,c
 20912  0029DE  0E0F               	movlw	15
 20913  0029E0  162A               	andwf	??_printSortTimer,f,c
 20914  0029E2  0E0F               	movlw	15
 20915  0029E4  162A               	andwf	??_printSortTimer,f,c
 20916  0029E6  502A               	movf	??_printSortTimer,w,c
 20917  0029E8  0D0A               	mullw	10
 20918  0029EA  0E24               	movlw	low _time
 20919  0029EC  2449               	addwf	printSortTimer@i,w,c
 20920  0029EE  6ED9               	movwf	fsr2l,c
 20921  0029F0  0E01               	movlw	high _time
 20922  0029F2  204A               	addwfc	printSortTimer@i+1,w,c
 20923  0029F4  6EDA               	movwf	fsr2h,c
 20924  0029F6  50DF               	movf	indf2,w,c
 20925  0029F8  0B0F               	andlw	15
 20926  0029FA  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20927  0029FC  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20928  0029FE  50F3               	movf	prodl,w,c
 20929  002A00  262B               	addwf	??_printSortTimer+1,f,c
 20930  002A02  50F4               	movf	prodh,w,c
 20931  002A04  222C               	addwfc	??_printSortTimer+2,f,c
 20932  002A06  90D8               	bcf	status,0,c
 20933  002A08  3449               	rlcf	printSortTimer@i,w,c
 20934  002A0A  6ED9               	movwf	fsr2l,c
 20935  002A0C  344A               	rlcf	printSortTimer@i+1,w,c
 20936  002A0E  6EDA               	movwf	fsr2h,c
 20937  002A10  0E2D               	movlw	low printSortTimer@curTime
 20938  002A12  26D9               	addwf	fsr2l,f,c
 20939  002A14  0E00               	movlw	high printSortTimer@curTime
 20940  002A16  22DA               	addwfc	fsr2h,f,c
 20941  002A18  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20942  002A1C  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20943  002A20  4A49               	infsnz	printSortTimer@i,f,c
 20944  002A22  2A4A               	incf	printSortTimer@i+1,f,c
 20945  002A24  D7CB               	goto	i2l8933
 20946  002A26                     i2l8943:
 20947                           
 20948                           ;sort.c: 450: }
 20949                           ;sort.c: 451: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20950  002A26  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20951  002A2A  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20952  002A2E  0E00               	movlw	0
 20953  002A30  6E04               	movwf	i2___wmul@multiplicand+1,c
 20954  002A32  0E3C               	movlw	60
 20955  002A34  6E03               	movwf	i2___wmul@multiplicand,c
 20956  002A36  ECE2  F027         	call	i2___wmul	;wreg free
 20957  002A3A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20958  002A3E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20959  002A42  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20960  002A46  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20961  002A4A  0E0E               	movlw	14
 20962  002A4C  6E04               	movwf	i2___wmul@multiplicand+1,c
 20963  002A4E  0E10               	movlw	16
 20964  002A50  6E03               	movwf	i2___wmul@multiplicand,c
 20965  002A52  ECE2  F027         	call	i2___wmul	;wreg free
 20966  002A56  5001               	movf	?i2___wmul,w,c
 20967  002A58  262A               	addwf	??_printSortTimer,f,c
 20968  002A5A  5002               	movf	?i2___wmul+1,w,c
 20969  002A5C  222B               	addwfc	??_printSortTimer+1,f,c
 20970  002A5E  0101               	movlb	1	; () banked
 20971  002A60  510E               	movf	_startTime& (0+255),w,b
 20972  002A62  242A               	addwf	??_printSortTimer,w,c
 20973  002A64  6E3B               	movwf	printSortTimer@start_sec,c
 20974  002A66  0101               	movlb	1	; () banked
 20975  002A68  510F               	movf	(_startTime+1)& (0+255),w,b
 20976  002A6A  202B               	addwfc	??_printSortTimer+1,w,c
 20977  002A6C  6E3C               	movwf	printSortTimer@start_sec+1,c
 20978                           
 20979                           ;sort.c: 452: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20980  002A6E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20981  002A72  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20982  002A76  0E00               	movlw	0
 20983  002A78  6E04               	movwf	i2___wmul@multiplicand+1,c
 20984  002A7A  0E3C               	movlw	60
 20985  002A7C  6E03               	movwf	i2___wmul@multiplicand,c
 20986  002A7E  ECE2  F027         	call	i2___wmul	;wreg free
 20987  002A82  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20988  002A86  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20989  002A8A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20990  002A8E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20991  002A92  0E0E               	movlw	14
 20992  002A94  6E04               	movwf	i2___wmul@multiplicand+1,c
 20993  002A96  0E10               	movlw	16
 20994  002A98  6E03               	movwf	i2___wmul@multiplicand,c
 20995  002A9A  ECE2  F027         	call	i2___wmul	;wreg free
 20996  002A9E  5001               	movf	?i2___wmul,w,c
 20997  002AA0  262A               	addwf	??_printSortTimer,f,c
 20998  002AA2  5002               	movf	?i2___wmul+1,w,c
 20999  002AA4  222B               	addwfc	??_printSortTimer+1,f,c
 21000  002AA6  502D               	movf	printSortTimer@curTime,w,c
 21001  002AA8  242A               	addwf	??_printSortTimer,w,c
 21002  002AAA  6E3D               	movwf	printSortTimer@cur_sec,c
 21003  002AAC  502E               	movf	printSortTimer@curTime+1,w,c
 21004  002AAE  202B               	addwfc	??_printSortTimer+1,w,c
 21005  002AB0  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21006                           
 21007                           ;sort.c: 453: unsigned int timeDiff = cur_sec - start_sec;
 21008  002AB2  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21009  002AB6  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21010  002ABA  1E2A               	comf	??_printSortTimer,f,c
 21011  002ABC  1E2B               	comf	??_printSortTimer+1,f,c
 21012  002ABE  4A2A               	infsnz	??_printSortTimer,f,c
 21013  002AC0  2A2B               	incf	??_printSortTimer+1,f,c
 21014  002AC2  503D               	movf	printSortTimer@cur_sec,w,c
 21015  002AC4  242A               	addwf	??_printSortTimer,w,c
 21016  002AC6  6E45               	movwf	printSortTimer@timeDiff,c
 21017  002AC8  503E               	movf	printSortTimer@cur_sec+1,w,c
 21018  002ACA  202B               	addwfc	??_printSortTimer+1,w,c
 21019  002ACC  6E46               	movwf	printSortTimer@timeDiff+1,c
 21020                           
 21021                           ;sort.c: 455: total_time = timeDiff;
 21022  002ACE  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21023  002AD2  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21024                           
 21025                           ;sort.c: 457: if(f_most_recent_sort_time){
 21026  002AD6  5069               	movf	_f_most_recent_sort_time,w,c
 21027  002AD8  106A               	iorwf	_f_most_recent_sort_time+1,w,c
 21028  002ADA  B4D8               	btfsc	status,2,c
 21029  002ADC  D008               	goto	i2l8955
 21030                           
 21031                           ;sort.c: 458: most_recent_sort_time = total_time;
 21032  002ADE  C0F8  F075         	movff	_total_time,_most_recent_sort_time
 21033  002AE2  C0F9  F076         	movff	_total_time+1,_most_recent_sort_time+1
 21034                           
 21035                           ;sort.c: 459: f_most_recent_sort_time = 0;
 21036  002AE6  0E00               	movlw	0
 21037  002AE8  6E6A               	movwf	_f_most_recent_sort_time+1,c
 21038  002AEA  0E00               	movlw	0
 21039  002AEC  6E69               	movwf	_f_most_recent_sort_time,c
 21040  002AEE                     i2l8955:
 21041                           
 21042                           ;sort.c: 460: }
 21043                           ;sort.c: 462: if(total_time - most_recent_sort_time == 20){
 21044  002AEE  C075  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21045  002AF2  C076  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21046  002AF6  1E2A               	comf	??_printSortTimer,f,c
 21047  002AF8  1E2B               	comf	??_printSortTimer+1,f,c
 21048  002AFA  4A2A               	infsnz	??_printSortTimer,f,c
 21049  002AFC  2A2B               	incf	??_printSortTimer+1,f,c
 21050  002AFE  0100               	movlb	0	; () banked
 21051  002B00  51F8               	movf	_total_time& (0+255),w,b
 21052  002B02  262A               	addwf	??_printSortTimer,f,c
 21053  002B04  0100               	movlb	0	; () banked
 21054  002B06  51F9               	movf	(_total_time+1)& (0+255),w,b
 21055  002B08  222B               	addwfc	??_printSortTimer+1,f,c
 21056  002B0A  0E14               	movlw	20
 21057  002B0C  182A               	xorwf	??_printSortTimer,w,c
 21058  002B0E  102B               	iorwf	??_printSortTimer+1,w,c
 21059  002B10  A4D8               	btfss	status,2,c
 21060  002B12  D033               	goto	i2l8975
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;sort.c: 463: LATAbits.LATA5 = 0;
 21064  002B14  9A89               	bcf	3977,5,c	;volatile
 21065                           
 21066                           ; BSR set to: 0
 21067                           ;sort.c: 464: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21068  002B16  0E52               	movlw	82
 21069  002B18  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21070  002B1A  0E2B               	movlw	43
 21071  002B1C  6E2A               	movwf	??_printSortTimer& (0+255),c
 21072  002B1E  0E00               	movlw	0
 21073  002B20                     i2u1000_47:
 21074  002B20  2EE8               	decfsz	wreg,f,c
 21075  002B22  D7FE               	bra	i2u1000_47
 21076  002B24  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21077  002B26  D7FC               	bra	i2u1000_47
 21078  002B28  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21079  002B2A  D7FA               	bra	i2u1000_47
 21080  002B2C  D000               	nop2	
 21081                           
 21082                           ;sort.c: 465: for(int i=0; i<46; i++){
 21083  002B2E  0E00               	movlw	0
 21084  002B30  6E48               	movwf	printSortTimer@i_1132+1,c
 21085  002B32  0E00               	movlw	0
 21086  002B34  6E47               	movwf	printSortTimer@i_1132,c
 21087  002B36  BE48               	btfsc	printSortTimer@i_1132+1,7,c
 21088  002B38  D006               	goto	i2l8967
 21089  002B3A  5048               	movf	printSortTimer@i_1132+1,w,c
 21090  002B3C  E11D               	bnz	i2l836
 21091  002B3E  0E2E               	movlw	46
 21092  002B40  5C47               	subwf	printSortTimer@i_1132,w,c
 21093  002B42  B0D8               	btfsc	status,0,c
 21094  002B44  D019               	goto	i2l836
 21095  002B46                     i2l8967:
 21096                           
 21097                           ;sort.c: 466: LATAbits.LATA5 = !LATAbits.LATA5;
 21098  002B46  BA89               	btfsc	3977,5,c	;volatile
 21099  002B48  D003               	goto	i2u820_40
 21100  002B4A  6A2A               	clrf	??_printSortTimer& (0+255),c
 21101  002B4C  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21102  002B4E  D001               	goto	i2u821_48
 21103  002B50                     i2u820_40:
 21104  002B50  6A2A               	clrf	??_printSortTimer& (0+255),c
 21105  002B52                     i2u821_48:
 21106  002B52  3A2A               	swapf	??_printSortTimer,f,c
 21107  002B54  462A               	rlncf	??_printSortTimer,f,c
 21108  002B56  5089               	movf	3977,w,c	;volatile
 21109  002B58  182A               	xorwf	??_printSortTimer,w,c
 21110  002B5A  0BDF               	andlw	-33
 21111  002B5C  182A               	xorwf	??_printSortTimer,w,c
 21112  002B5E  6E89               	movwf	3977,c	;volatile
 21113                           
 21114                           ;sort.c: 467: delay_ms(45-i);
 21115  002B60  5047               	movf	printSortTimer@i_1132,w,c
 21116  002B62  0800               	sublw	0
 21117  002B64  0F2D               	addlw	45
 21118  002B66  EC4B  F028         	call	i2_delay_ms
 21119  002B6A  4A47               	infsnz	printSortTimer@i_1132,f,c
 21120  002B6C  2A48               	incf	printSortTimer@i_1132+1,f,c
 21121  002B6E  BE48               	btfsc	printSortTimer@i_1132+1,7,c
 21122  002B70  D7EA               	goto	i2l8967
 21123  002B72  5048               	movf	printSortTimer@i_1132+1,w,c
 21124  002B74  E101               	bnz	i2u822_40
 21125  002B76  D7E3               	goto	L14
 21126  002B78                     i2u822_40:
 21127  002B78                     i2l836:
 21128                           
 21129                           ;sort.c: 468: }
 21130                           ;sort.c: 469: LATAbits.LATA5 = 1;
 21131  002B78  8A89               	bsf	3977,5,c	;volatile
 21132  002B7A                     i2l8975:
 21133                           
 21134                           ;sort.c: 470: }
 21135                           ;sort.c: 472: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21136  002B7A  C075  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21137  002B7E  C076  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21138  002B82  1E2A               	comf	??_printSortTimer,f,c
 21139  002B84  1E2B               	comf	??_printSortTimer+1,f,c
 21140  002B86  4A2A               	infsnz	??_printSortTimer,f,c
 21141  002B88  2A2B               	incf	??_printSortTimer+1,f,c
 21142  002B8A  0100               	movlb	0	; () banked
 21143  002B8C  51F8               	movf	_total_time& (0+255),w,b
 21144  002B8E  262A               	addwf	??_printSortTimer,f,c
 21145  002B90  0100               	movlb	0	; () banked
 21146  002B92  51F9               	movf	(_total_time+1)& (0+255),w,b
 21147  002B94  222B               	addwfc	??_printSortTimer+1,f,c
 21148  002B96  0E2A               	movlw	42
 21149  002B98  182A               	xorwf	??_printSortTimer,w,c
 21150  002B9A  102B               	iorwf	??_printSortTimer+1,w,c
 21151  002B9C  B4D8               	btfsc	status,2,c
 21152  002B9E  D007               	goto	i2l8979
 21153                           
 21154                           ; BSR set to: 0
 21155  002BA0  0EB3               	movlw	179
 21156  002BA2  0100               	movlb	0	; () banked
 21157  002BA4  19F8               	xorwf	_total_time& (0+255),w,b
 21158  002BA6  0100               	movlb	0	; () banked
 21159  002BA8  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21160  002BAA  A4D8               	btfss	status,2,c
 21161  002BAC  D003               	goto	i2l8981
 21162  002BAE                     i2l8979:
 21163                           
 21164                           ; BSR set to: 0
 21165                           ;sort.c: 473: machine_state = DoneSorting_state;
 21166  002BAE  0E02               	movlw	2
 21167  002BB0  0100               	movlb	0	; () banked
 21168  002BB2  6FFC               	movwf	_machine_state& (0+255),b
 21169  002BB4                     i2l8981:
 21170                           
 21171                           ; BSR set to: 0
 21172                           ;sort.c: 475: }
 21173                           ;sort.c: 477: int min = (timeDiff % 3600) / 60;
 21174  002BB4  0E0E               	movlw	14
 21175  002BB6  6E04               	movwf	i2___lwmod@divisor+1,c
 21176  002BB8  0E10               	movlw	16
 21177  002BBA  6E03               	movwf	i2___lwmod@divisor,c
 21178  002BBC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21179  002BC0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21180  002BC4  EC9B  F025         	call	i2___lwmod	;wreg free
 21181  002BC8  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21182  002BCC  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21183  002BD0  0E00               	movlw	0
 21184  002BD2  6E09               	movwf	i2___lwdiv@divisor+1,c
 21185  002BD4  0E3C               	movlw	60
 21186  002BD6  6E08               	movwf	i2___lwdiv@divisor,c
 21187  002BD8  ECDC  F024         	call	i2___lwdiv	;wreg free
 21188  002BDC  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21189  002BE0  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21190                           
 21191                           ;sort.c: 478: int sec = (timeDiff % 3600) % 60;
 21192  002BE4  0E0E               	movlw	14
 21193  002BE6  6E04               	movwf	i2___lwmod@divisor+1,c
 21194  002BE8  0E10               	movlw	16
 21195  002BEA  6E03               	movwf	i2___lwmod@divisor,c
 21196  002BEC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21197  002BF0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21198  002BF4  EC9B  F025         	call	i2___lwmod	;wreg free
 21199  002BF8  C001  F043         	movff	?i2___lwmod,_printSortTimer$2459
 21200  002BFC  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2459+1
 21201                           
 21202                           ;sort.c: 478: int sec = (timeDiff % 3600) % 60;
 21203  002C00  C043  F001         	movff	_printSortTimer$2459,i2___lwmod@dividend
 21204  002C04  C044  F002         	movff	_printSortTimer$2459+1,i2___lwmod@dividend+1
 21205  002C08  0E00               	movlw	0
 21206  002C0A  6E04               	movwf	i2___lwmod@divisor+1,c
 21207  002C0C  0E3C               	movlw	60
 21208  002C0E  6E03               	movwf	i2___lwmod@divisor,c
 21209  002C10  EC9B  F025         	call	i2___lwmod	;wreg free
 21210  002C14  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21211  002C18  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21212                           
 21213                           ;sort.c: 480: lcdInst(0b10000000);;
 21214  002C1C  0E80               	movlw	128
 21215  002C1E  ECA6  F028         	call	i2_lcdInst
 21216                           
 21217                           ;sort.c: 481: printf("SORTING...");
 21218  002C22  0E7C               	movlw	low STR_64
 21219  002C24  6E0D               	movwf	i2printf@f,c
 21220  002C26  0EFF               	movlw	high STR_64
 21221  002C28  6E0E               	movwf	i2printf@f+1,c
 21222  002C2A  ECDD  F00E         	call	i2_printf	;wreg free
 21223                           
 21224                           ;sort.c: 482: lcdInst(0b11000000);;
 21225  002C2E  0EC0               	movlw	192
 21226  002C30  ECA6  F028         	call	i2_lcdInst
 21227                           
 21228                           ;sort.c: 483: printf("TIME %d:%02d", min, sec);
 21229  002C34  0E42               	movlw	low STR_65
 21230  002C36  6E0D               	movwf	i2printf@f,c
 21231  002C38  0EFF               	movlw	high STR_65
 21232  002C3A  6E0E               	movwf	i2printf@f+1,c
 21233  002C3C  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21234  002C40  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21235  002C44  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21236  002C48  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21237  002C4C  ECDD  F00E         	call	i2_printf	;wreg free
 21238  002C50  0012               	return		;funcret
 21239  002C52                     __end_of_printSortTimer:
 21240                           	opt stack 0
 21241                           pclatu	equ	0xFFB
 21242                           pclath	equ	0xFFA
 21243                           tblptru	equ	0xFF8
 21244                           tblptrh	equ	0xFF7
 21245                           tblptrl	equ	0xFF6
 21246                           tablat	equ	0xFF5
 21247                           prodh	equ	0xFF4
 21248                           prodl	equ	0xFF3
 21249                           intcon	equ	0xFF2
 21250                           intcon2	equ	0xFF1
 21251                           intcon3	equ	0xFF0
 21252                           indf0	equ	0xFEF
 21253                           postinc0	equ	0xFEE
 21254                           fsr0h	equ	0xFEA
 21255                           fsr0l	equ	0xFE9
 21256                           wreg	equ	0xFE8
 21257                           postdec1	equ	0xFE5
 21258                           fsr1h	equ	0xFE2
 21259                           fsr1l	equ	0xFE1
 21260                           indf2	equ	0xFDF
 21261                           postinc2	equ	0xFDE
 21262                           postdec2	equ	0xFDD
 21263                           fsr2h	equ	0xFDA
 21264                           fsr2l	equ	0xFD9
 21265                           status	equ	0xFD8
 21266                           
 21267 ;; *************** function i2_printf *****************
 21268 ;; Defined at:
 21269 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21270 ;; Parameters:    Size  Location     Type
 21271 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21272 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21273 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21274 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21275 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21276 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21277 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21278 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21279 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21280 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21281 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21282 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21283 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21284 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21285 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21286 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21287 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21288 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21289 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21290 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21291 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21292 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21293 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21294 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21295 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21296 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21297 ;; Auto vars:     Size  Location     Type
 21298 ;;  printf          4    0        struct .
 21299 ;;  printf          2   39[COMRAM] int 
 21300 ;;  printf          2   35[COMRAM] unsigned int 
 21301 ;;  printf          2   33[COMRAM] unsigned int 
 21302 ;;  printf          2   31[COMRAM] PTR void [1]
 21303 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21304 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21305 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21306 ;;  printf          1   38[COMRAM] char 
 21307 ;;  printf          1   37[COMRAM] unsigned char 
 21308 ;;  printf          1   28[COMRAM] char 
 21309 ;; Return value:  Size  Location     Type
 21310 ;;                  2   12[COMRAM] int 
 21311 ;; Registers used:
 21312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21313 ;; Tracked objects:
 21314 ;;		On entry : 0/0
 21315 ;;		On exit  : 0/0
 21316 ;;		Unchanged: 0/0
 21317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21318 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21320 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21321 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21322 ;;Total ram usage:       29 bytes
 21323 ;; Hardware stack levels used:    1
 21324 ;; Hardware stack levels required when called:    2
 21325 ;; This function calls:
 21326 ;;		i2___lwdiv
 21327 ;;		i2___lwmod
 21328 ;;		i2___wmul
 21329 ;;		i2_isdigit
 21330 ;;		i2_putch
 21331 ;; This function is called by:
 21332 ;;		_change_state_to_menu_11
 21333 ;;		_change_state_to_menu_23
 21334 ;;		_change_state_to_logs_11
 21335 ;;		_change_state_to_logs_12
 21336 ;;		_change_state_to_logs_22
 21337 ;;		_change_state_to_logs_23
 21338 ;;		_change_state_to_logs_33
 21339 ;;		_change_state_to_logs_34
 21340 ;;		_printSortTimer
 21341 ;;		i2_change_state_to_menu_start
 21342 ;;		i2_change_state_to_menu_12
 21343 ;;		i2_change_state_to_menu_22
 21344 ;;		i2_printRTC
 21345 ;; This function uses a non-reentrant model
 21346 ;;
 21347                           
 21348                           	psect	text79
 21349  001DBA                     __ptext79:
 21350                           	opt stack 0
 21351  001DBA                     i2_printf:
 21352                           	opt stack 19
 21353                           
 21354                           ;doprnt.c: 466: va_list ap;
 21355                           ;doprnt.c: 499: signed char c;
 21356                           ;doprnt.c: 501: int width;
 21357                           ;doprnt.c: 506: signed char prec;
 21358                           ;doprnt.c: 508: unsigned char flag;
 21359                           ;doprnt.c: 523: union {
 21360                           ;doprnt.c: 524: unsigned long vd;
 21361                           ;doprnt.c: 525: double integ;
 21362                           ;doprnt.c: 526: } tmpval;
 21363                           ;doprnt.c: 528: unsigned int val;
 21364                           ;doprnt.c: 529: unsigned len;
 21365                           ;doprnt.c: 530: const char * cp;
 21366                           ;doprnt.c: 533: *ap = __va_start();
 21367                           
 21368                           ;incstack = 0
 21369  001DBA  0E0F               	movlw	low (?i2_printf+2)
 21370  001DBC  6E20               	movwf	i2printf@ap,c
 21371  001DBE  0E00               	movlw	high (?i2_printf+2)
 21372  001DC0  6E21               	movwf	i2printf@ap+1,c
 21373                           
 21374                           ;doprnt.c: 536: while(c = *f++) {
 21375  001DC2  D1A4               	goto	i2l6347
 21376  001DC4                     i2l6217:
 21377                           
 21378                           ;doprnt.c: 538: if(c != '%')
 21379  001DC4  0E25               	movlw	37
 21380  001DC6  1827               	xorwf	i2printf@c,w,c
 21381  001DC8  B4D8               	btfsc	status,2,c
 21382  001DCA  D004               	goto	i2l6221
 21383                           
 21384                           ;doprnt.c: 540: {
 21385                           ;doprnt.c: 541: (putch(c) );
 21386  001DCC  5027               	movf	i2printf@c,w,c
 21387  001DCE  ECA0  F028         	call	i2_putch
 21388                           
 21389                           ;doprnt.c: 542: continue;
 21390  001DD2  D19C               	goto	i2l6347
 21391  001DD4                     i2l6221:
 21392                           
 21393                           ;doprnt.c: 543: }
 21394                           ;doprnt.c: 546: width = 0;
 21395  001DD4  0E00               	movlw	0
 21396  001DD6  6E29               	movwf	i2printf@width+1,c
 21397  001DD8  0E00               	movlw	0
 21398  001DDA  6E28               	movwf	i2printf@width,c
 21399                           
 21400                           ;doprnt.c: 548: flag = 0;
 21401  001DDC  0E00               	movlw	0
 21402  001DDE  6E26               	movwf	i2printf@flag,c
 21403                           
 21404                           ;doprnt.c: 551: switch(*f) {
 21405                           
 21406                           ;doprnt.c: 550: for(;;) {
 21407  001DE0  D003               	goto	i2l6227
 21408  001DE2                     i2l6223:
 21409                           
 21410                           ;doprnt.c: 580: flag |= 0x04;
 21411  001DE2  8426               	bsf	i2printf@flag,2,c
 21412                           
 21413                           ;doprnt.c: 581: f++;
 21414  001DE4  4A0D               	infsnz	i2printf@f,f,c
 21415  001DE6  2A0E               	incf	i2printf@f+1,f,c
 21416  001DE8                     i2l6227:
 21417  001DE8  C00D  FFF6         	movff	i2printf@f,tblptrl
 21418  001DEC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21419  001DF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21420  001DF0  6AF8               	clrf	tblptru,c
 21421  001DF2                     	endif
 21422  001DF2                     	if	0	;tblptru may be non-zero
 21423  001DF2                     	endif
 21424  001DF2  0008               	tblrd		*
 21425  001DF4  50F5               	movf	tablat,w,c
 21426                           
 21427                           ; Switch size 1, requested type "space"
 21428                           ; Number of cases is 1, Range of values is 48 to 48
 21429                           ; switch strategies available:
 21430                           ; Name         Instructions Cycles
 21431                           ; simple_byte            4     3 (average)
 21432                           ;	Chosen strategy is simple_byte
 21433  001DF6  0A30               	xorlw	48	; case 48
 21434  001DF8  B4D8               	btfsc	status,2,c
 21435  001DFA  D7F3               	goto	i2l6223
 21436                           
 21437                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21438                           
 21439                           ;doprnt.c: 586: }
 21440                           
 21441                           ;doprnt.c: 585: break;
 21442  001DFC  C00D  FFF6         	movff	i2printf@f,tblptrl
 21443  001E00  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21444  001E04                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21445  001E04  6AF8               	clrf	tblptru,c
 21446  001E06                     	endif
 21447  001E06                     	if	0	;tblptru may be non-zero
 21448  001E06                     	endif
 21449  001E06  0008               	tblrd		*
 21450  001E08  50F5               	movf	tablat,w,c
 21451  001E0A  EC3C  F028         	call	i2_isdigit
 21452  001E0E  A0D8               	btfss	status,0,c
 21453  001E10  D0A6               	goto	i2l6275
 21454                           
 21455                           ;doprnt.c: 598: width = 0;
 21456  001E12  0E00               	movlw	0
 21457  001E14  6E29               	movwf	i2printf@width+1,c
 21458  001E16  0E00               	movlw	0
 21459  001E18  6E28               	movwf	i2printf@width,c
 21460  001E1A                     i2l6233:
 21461                           
 21462                           ;doprnt.c: 600: width *= 10;
 21463  001E1A  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21464  001E1E  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21465  001E22  0E00               	movlw	0
 21466  001E24  6E04               	movwf	i2___wmul@multiplicand+1,c
 21467  001E26  0E0A               	movlw	10
 21468  001E28  6E03               	movwf	i2___wmul@multiplicand,c
 21469  001E2A  ECE2  F027         	call	i2___wmul	;wreg free
 21470  001E2E  C001  F028         	movff	?i2___wmul,i2printf@width
 21471  001E32  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21472                           
 21473                           ;doprnt.c: 601: width += *f++ - '0';
 21474  001E36  0ED0               	movlw	208
 21475  001E38  6E19               	movwf	??i2_printf& (0+255),c
 21476  001E3A  0EFF               	movlw	255
 21477  001E3C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21478  001E3E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21479  001E42  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21480  001E46                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21481  001E46  6AF8               	clrf	tblptru,c
 21482  001E48                     	endif
 21483  001E48                     	if	0	;tblptru may be non-zero
 21484  001E48                     	endif
 21485  001E48  0008               	tblrd		*
 21486  001E4A  50F5               	movf	tablat,w,c
 21487  001E4C  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21488  001E4E  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21489  001E50  5019               	movf	??i2_printf,w,c
 21490  001E52  261B               	addwf	??i2_printf+2,f,c
 21491  001E54  501A               	movf	??i2_printf+1,w,c
 21492  001E56  221C               	addwfc	??i2_printf+3,f,c
 21493  001E58  501B               	movf	??i2_printf+2,w,c
 21494  001E5A  2628               	addwf	i2printf@width,f,c
 21495  001E5C  501C               	movf	??i2_printf+3,w,c
 21496  001E5E  2229               	addwfc	i2printf@width+1,f,c
 21497  001E60  4A0D               	infsnz	i2printf@f,f,c
 21498  001E62  2A0E               	incf	i2printf@f+1,f,c
 21499                           
 21500                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21501  001E64  C00D  FFF6         	movff	i2printf@f,tblptrl
 21502  001E68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21503  001E6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21504  001E6C  6AF8               	clrf	tblptru,c
 21505  001E6E                     	endif
 21506  001E6E                     	if	0	;tblptru may be non-zero
 21507  001E6E                     	endif
 21508  001E6E  0008               	tblrd		*
 21509  001E70  50F5               	movf	tablat,w,c
 21510  001E72  EC3C  F028         	call	i2_isdigit
 21511  001E76  A0D8               	btfss	status,0,c
 21512  001E78  D072               	goto	i2l6275
 21513  001E7A  D7CF               	goto	i2l6233
 21514  001E7C                     i2l6241:
 21515                           
 21516                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21517  001E7C  C020  FFD9         	movff	i2printf@ap,fsr2l
 21518  001E80  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21519  001E84  CFDE F01E          	movff	postinc2,i2printf@cp
 21520  001E88  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21521  001E8C  0E02               	movlw	2
 21522  001E8E  2620               	addwf	i2printf@ap,f,c
 21523  001E90  0E00               	movlw	0
 21524  001E92  2221               	addwfc	i2printf@ap+1,f,c
 21525                           
 21526                           ;doprnt.c: 740: if(!cp)
 21527  001E94  501E               	movf	i2printf@cp,w,c
 21528  001E96  101F               	iorwf	i2printf@cp+1,w,c
 21529  001E98  A4D8               	btfss	status,2,c
 21530  001E9A  D004               	goto	i2l6249
 21531                           
 21532                           ;doprnt.c: 741: cp = "(null)";
 21533  001E9C  0EB6               	movlw	low STR_126
 21534  001E9E  6E1E               	movwf	i2printf@cp,c
 21535  001EA0  0EFF               	movlw	high STR_126
 21536  001EA2  6E1F               	movwf	i2printf@cp+1,c
 21537  001EA4                     i2l6249:
 21538                           
 21539                           ;doprnt.c: 745: len = 0;
 21540  001EA4  0E00               	movlw	0
 21541  001EA6  6E23               	movwf	i2printf@len+1,c
 21542  001EA8  0E00               	movlw	0
 21543  001EAA  6E22               	movwf	i2printf@len,c
 21544                           
 21545                           ;doprnt.c: 746: while(cp[len])
 21546  001EAC  D002               	goto	i2l6253
 21547  001EAE                     i2l6251:
 21548                           
 21549                           ;doprnt.c: 747: len++;
 21550  001EAE  4A22               	infsnz	i2printf@len,f,c
 21551  001EB0  2A23               	incf	i2printf@len+1,f,c
 21552  001EB2                     i2l6253:
 21553  001EB2  5022               	movf	i2printf@len,w,c
 21554  001EB4  241E               	addwf	i2printf@cp,w,c
 21555  001EB6  6E19               	movwf	??i2_printf& (0+255),c
 21556  001EB8  5023               	movf	i2printf@len+1,w,c
 21557  001EBA  201F               	addwfc	i2printf@cp+1,w,c
 21558  001EBC  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21559  001EBE  C019  FFF6         	movff	??i2_printf,tblptrl
 21560  001EC2  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21561  001EC6  0E00               	movlw	low (__mediumconst shr (0+16))
 21562  001EC8  6EF8               	movwf	tblptru,c
 21563  001ECA  0E0F               	movlw	(high __ramtop+-1)
 21564  001ECC  64F7               	cpfsgt	tblptrh,c
 21565  001ECE  D003               	bra	i2u491_47
 21566  001ED0  0008               	tblrd		*
 21567  001ED2  50F5               	movf	tablat,w,c
 21568  001ED4  D005               	bra	i2u491_40
 21569  001ED6                     i2u491_47:
 21570  001ED6  CFF6 FFE9          	movff	tblptrl,fsr0l
 21571  001EDA  CFF7 FFEA          	movff	tblptrh,fsr0h
 21572  001EDE  50EF               	movf	indf0,w,c
 21573  001EE0                     i2u491_40:
 21574  001EE0  0900               	iorlw	0
 21575  001EE2  A4D8               	btfss	status,2,c
 21576  001EE4  D7E4               	goto	i2l6251
 21577                           
 21578                           ;doprnt.c: 757: if(width > len)
 21579  001EE6  5028               	movf	i2printf@width,w,c
 21580  001EE8  5C22               	subwf	i2printf@len,w,c
 21581  001EEA  5029               	movf	i2printf@width+1,w,c
 21582  001EEC  5823               	subwfb	i2printf@len+1,w,c
 21583  001EEE  B0D8               	btfsc	status,0,c
 21584  001EF0  D005               	goto	i2l6259
 21585                           
 21586                           ;doprnt.c: 758: width -= len;
 21587  001EF2  5022               	movf	i2printf@len,w,c
 21588  001EF4  5E28               	subwf	i2printf@width,f,c
 21589  001EF6  5023               	movf	i2printf@len+1,w,c
 21590  001EF8  5A29               	subwfb	i2printf@width+1,f,c
 21591  001EFA  D008               	goto	i2l6263
 21592  001EFC                     i2l6259:
 21593                           
 21594                           ;doprnt.c: 759: else
 21595                           ;doprnt.c: 760: width = 0;
 21596  001EFC  0E00               	movlw	0
 21597  001EFE  6E29               	movwf	i2printf@width+1,c
 21598  001F00  0E00               	movlw	0
 21599  001F02  6E28               	movwf	i2printf@width,c
 21600                           
 21601                           ;doprnt.c: 764: while(width--)
 21602  001F04  D003               	goto	i2l6263
 21603  001F06                     i2l6261:
 21604                           
 21605                           ;doprnt.c: 765: (putch(' ') );
 21606  001F06  0E20               	movlw	32
 21607  001F08  ECA0  F028         	call	i2_putch
 21608  001F0C                     i2l6263:
 21609  001F0C  0628               	decf	i2printf@width,f,c
 21610  001F0E  A0D8               	btfss	status,0,c
 21611  001F10  0629               	decf	i2printf@width+1,f,c
 21612  001F12  2828               	incf	i2printf@width,w,c
 21613  001F14  E1F8               	bnz	i2l6261
 21614  001F16  2829               	incf	i2printf@width+1,w,c
 21615  001F18  B4D8               	btfsc	status,2,c
 21616  001F1A  D016               	goto	i2l6269
 21617  001F1C  D7F4               	goto	i2l6261
 21618  001F1E                     i2l6265:
 21619                           
 21620                           ;doprnt.c: 768: (putch(*cp++) );
 21621  001F1E  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21622  001F22  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21623  001F26  0E00               	movlw	low (__mediumconst shr (0+16))
 21624  001F28  6EF8               	movwf	tblptru,c
 21625  001F2A  0E0F               	movlw	(high __ramtop+-1)
 21626  001F2C  64F7               	cpfsgt	tblptrh,c
 21627  001F2E  D003               	bra	i2u495_47
 21628  001F30  0008               	tblrd		*
 21629  001F32  50F5               	movf	tablat,w,c
 21630  001F34  D005               	bra	i2u495_40
 21631  001F36                     i2u495_47:
 21632  001F36  CFF6 FFE9          	movff	tblptrl,fsr0l
 21633  001F3A  CFF7 FFEA          	movff	tblptrh,fsr0h
 21634  001F3E  50EF               	movf	indf0,w,c
 21635  001F40                     i2u495_40:
 21636  001F40  ECA0  F028         	call	i2_putch
 21637  001F44  4A1E               	infsnz	i2printf@cp,f,c
 21638  001F46  2A1F               	incf	i2printf@cp+1,f,c
 21639  001F48                     i2l6269:
 21640  001F48  0622               	decf	i2printf@len,f,c
 21641  001F4A  A0D8               	btfss	status,0,c
 21642  001F4C  0623               	decf	i2printf@len+1,f,c
 21643  001F4E  2822               	incf	i2printf@len,w,c
 21644  001F50  E1E6               	bnz	i2l6265
 21645  001F52  2823               	incf	i2printf@len+1,w,c
 21646  001F54  B4D8               	btfsc	status,2,c
 21647  001F56  D0DA               	goto	i2l6347
 21648  001F58  D7E2               	goto	i2l6265
 21649  001F5A                     i2l6271:
 21650                           
 21651                           ;doprnt.c: 818: flag |= 0x40;
 21652  001F5A  8C26               	bsf	i2printf@flag,6,c
 21653                           
 21654                           ;doprnt.c: 822: }
 21655                           
 21656                           ;doprnt.c: 819: break;
 21657  001F5C  D01B               	goto	i2l1371
 21658  001F5E                     i2l6275:
 21659  001F5E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21660  001F62  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21661  001F66  4A0D               	infsnz	i2printf@f,f,c
 21662  001F68  2A0E               	incf	i2printf@f+1,f,c
 21663  001F6A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21664  001F6A  6AF8               	clrf	tblptru,c
 21665  001F6C                     	endif
 21666  001F6C                     	if	0	;tblptru may be non-zero
 21667  001F6C                     	endif
 21668  001F6C  0008               	tblrd		*
 21669  001F6E  CFF5 F027          	movff	tablat,i2printf@c
 21670  001F72  5027               	movf	i2printf@c,w,c
 21671                           
 21672                           ; Switch size 1, requested type "space"
 21673                           ; Number of cases is 5, Range of values is 0 to 117
 21674                           ; switch strategies available:
 21675                           ; Name         Instructions Cycles
 21676                           ; simple_byte           16     9 (average)
 21677                           ;	Chosen strategy is simple_byte
 21678  001F74  0A00               	xorlw	0	; case 0
 21679  001F76  B4D8               	btfsc	status,2,c
 21680  001F78  0012               	return	
 21681  001F7A  0A64               	xorlw	100	; case 100
 21682  001F7C  B4D8               	btfsc	status,2,c
 21683  001F7E  D00A               	goto	i2l1371
 21684  001F80  0A0D               	xorlw	13	; case 105
 21685  001F82  B4D8               	btfsc	status,2,c
 21686  001F84  D007               	goto	i2l1371
 21687  001F86  0A1A               	xorlw	26	; case 115
 21688  001F88  B4D8               	btfsc	status,2,c
 21689  001F8A  D778               	goto	i2l6241
 21690  001F8C  0A06               	xorlw	6	; case 117
 21691  001F8E  B4D8               	btfsc	status,2,c
 21692  001F90  D7E4               	goto	i2l6271
 21693  001F92  D0BC               	goto	i2l6347
 21694  001F94                     i2l1371:
 21695                           
 21696                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21697  001F94  BC26               	btfsc	i2printf@flag,6,c
 21698  001F96  D015               	goto	i2l6287
 21699                           
 21700                           ;doprnt.c: 1253: {
 21701                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21702  001F98  C020  FFD9         	movff	i2printf@ap,fsr2l
 21703  001F9C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21704  001FA0  CFDE F024          	movff	postinc2,i2printf@val
 21705  001FA4  CFDD F025          	movff	postdec2,i2printf@val+1
 21706  001FA8  0E02               	movlw	2
 21707  001FAA  2620               	addwf	i2printf@ap,f,c
 21708  001FAC  0E00               	movlw	0
 21709  001FAE  2221               	addwfc	i2printf@ap+1,f,c
 21710                           
 21711                           ;doprnt.c: 1261: if((int)val < 0) {
 21712  001FB0  AE25               	btfss	i2printf@val+1,7,c
 21713  001FB2  D013               	goto	i2l6291
 21714                           
 21715                           ;doprnt.c: 1262: flag |= 0x03;
 21716  001FB4  0E03               	movlw	3
 21717  001FB6  1226               	iorwf	i2printf@flag,f,c
 21718                           
 21719                           ;doprnt.c: 1263: val = -val;
 21720  001FB8  6C24               	negf	i2printf@val,c
 21721  001FBA  1E25               	comf	i2printf@val+1,f,c
 21722  001FBC  B0D8               	btfsc	status,0,c
 21723  001FBE  2A25               	incf	i2printf@val+1,f,c
 21724                           
 21725                           ;doprnt.c: 1264: }
 21726                           ;doprnt.c: 1266: }
 21727  001FC0  D00C               	goto	i2l6291
 21728  001FC2                     i2l6287:
 21729                           
 21730                           ;doprnt.c: 1268: else
 21731                           ;doprnt.c: 1273: {
 21732                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21733  001FC2  C020  FFD9         	movff	i2printf@ap,fsr2l
 21734  001FC6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21735  001FCA  CFDE F024          	movff	postinc2,i2printf@val
 21736  001FCE  CFDD F025          	movff	postdec2,i2printf@val+1
 21737  001FD2  0E02               	movlw	2
 21738  001FD4  2620               	addwf	i2printf@ap,f,c
 21739  001FD6  0E00               	movlw	0
 21740  001FD8  2221               	addwfc	i2printf@ap+1,f,c
 21741  001FDA                     i2l6291:
 21742                           
 21743                           ;doprnt.c: 1287: }
 21744                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21745  001FDA  0E01               	movlw	1
 21746  001FDC  6E27               	movwf	i2printf@c,c
 21747  001FDE                     i2l6293:
 21748  001FDE  0E05               	movlw	5
 21749  001FE0  1827               	xorwf	i2printf@c,w,c
 21750  001FE2  B4D8               	btfsc	status,2,c
 21751  001FE4  D015               	goto	i2l6305
 21752                           
 21753                           ;doprnt.c: 1306: if(val < dpowers[c])
 21754  001FE6  5027               	movf	i2printf@c,w,c
 21755  001FE8  0D02               	mullw	2
 21756  001FEA  0E00               	movlw	low _dpowers
 21757  001FEC  24F3               	addwf	prodl,w,c
 21758  001FEE  6EF6               	movwf	tblptrl,c
 21759  001FF0  0EFB               	movlw	high _dpowers
 21760  001FF2  20F4               	addwfc	prodh,w,c
 21761  001FF4  6EF7               	movwf	tblptrh,c
 21762  001FF6                     	if	1	;There are 3 active tblptr bytes
 21763  001FF6  6AF8               	clrf	tblptru,c
 21764  001FF8  0E00               	movlw	low (__mediumconst shr (0+16))
 21765  001FFA  22F8               	addwfc	tblptru,f,c
 21766  001FFC                     	endif
 21767  001FFC  0009               	tblrd		*+
 21768  001FFE  50F5               	movf	tablat,w,c
 21769  002000  5C24               	subwf	i2printf@val,w,c
 21770  002002  0009               	tblrd		*+
 21771  002004  50F5               	movf	tablat,w,c
 21772  002006  5825               	subwfb	i2printf@val+1,w,c
 21773  002008  A0D8               	btfss	status,0,c
 21774  00200A  D002               	goto	i2l6305
 21775                           
 21776                           ;doprnt.c: 1307: break;
 21777  00200C  2A27               	incf	i2printf@c,f,c
 21778  00200E  D7E7               	goto	i2l6293
 21779  002010                     i2l6305:
 21780                           
 21781                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21782  002010  5028               	movf	i2printf@width,w,c
 21783  002012  1029               	iorwf	i2printf@width+1,w,c
 21784  002014  B4D8               	btfsc	status,2,c
 21785  002016  D009               	goto	i2l6311
 21786  002018  C026  F019         	movff	i2printf@flag,??i2_printf
 21787  00201C  0E03               	movlw	3
 21788  00201E  1619               	andwf	??i2_printf,f,c
 21789  002020  B4D8               	btfsc	status,2,c
 21790  002022  D003               	goto	i2l6311
 21791                           
 21792                           ;doprnt.c: 1346: width--;
 21793  002024  0628               	decf	i2printf@width,f,c
 21794  002026  A0D8               	btfss	status,0,c
 21795  002028  0629               	decf	i2printf@width+1,f,c
 21796  00202A                     i2l6311:
 21797                           
 21798                           ;doprnt.c: 1381: if(width > c)
 21799  00202A  0E80               	movlw	128
 21800  00202C  BE27               	btfsc	i2printf@c,7,c
 21801  00202E  0E7F               	movlw	127
 21802  002030  6E19               	movwf	??i2_printf& (0+255),c
 21803  002032  5028               	movf	i2printf@width,w,c
 21804  002034  5C27               	subwf	i2printf@c,w,c
 21805  002036  5029               	movf	i2printf@width+1,w,c
 21806  002038  0A80               	xorlw	128
 21807  00203A  5819               	subwfb	??i2_printf& (0+255),w,c
 21808  00203C  B0D8               	btfsc	status,0,c
 21809  00203E  D007               	goto	i2l6315
 21810                           
 21811                           ;doprnt.c: 1382: width -= c;
 21812  002040  5027               	movf	i2printf@c,w,c
 21813  002042  5E28               	subwf	i2printf@width,f,c
 21814  002044  0E00               	movlw	0
 21815  002046  BE27               	btfsc	i2printf@c,7,c
 21816  002048  0EFF               	movlw	255
 21817  00204A  5A29               	subwfb	i2printf@width+1,f,c
 21818  00204C  D004               	goto	i2l6317
 21819  00204E                     i2l6315:
 21820                           
 21821                           ;doprnt.c: 1383: else
 21822                           ;doprnt.c: 1384: width = 0;
 21823  00204E  0E00               	movlw	0
 21824  002050  6E29               	movwf	i2printf@width+1,c
 21825  002052  0E00               	movlw	0
 21826  002054  6E28               	movwf	i2printf@width,c
 21827  002056                     i2l6317:
 21828                           
 21829                           ;doprnt.c: 1387: if(flag & 0x04) {
 21830  002056  A426               	btfss	i2printf@flag,2,c
 21831  002058  D014               	goto	i2l6329
 21832                           
 21833                           ;doprnt.c: 1392: if(flag & 0x03)
 21834  00205A  C026  F019         	movff	i2printf@flag,??i2_printf
 21835  00205E  0E03               	movlw	3
 21836  002060  1619               	andwf	??i2_printf,f,c
 21837  002062  B4D8               	btfsc	status,2,c
 21838  002064  D003               	goto	i2l6323
 21839                           
 21840                           ;doprnt.c: 1393: (putch('-') );
 21841  002066  0E2D               	movlw	45
 21842  002068  ECA0  F028         	call	i2_putch
 21843  00206C                     i2l6323:
 21844                           
 21845                           ;doprnt.c: 1415: if(width)
 21846  00206C  5028               	movf	i2printf@width,w,c
 21847  00206E  1029               	iorwf	i2printf@width+1,w,c
 21848  002070  B4D8               	btfsc	status,2,c
 21849  002072  D01E               	goto	i2l6339
 21850                           
 21851                           ;doprnt.c: 1417: (putch('0') );
 21852                           
 21853                           ;doprnt.c: 1416: do
 21854  002074  0E30               	movlw	48
 21855  002076  ECA0  F028         	call	i2_putch
 21856                           
 21857                           ;doprnt.c: 1418: while(--width);
 21858  00207A  0628               	decf	i2printf@width,f,c
 21859  00207C  A0D8               	btfss	status,0,c
 21860  00207E  0629               	decf	i2printf@width+1,f,c
 21861  002080  D7F5               	goto	i2l6323
 21862  002082                     i2l6329:
 21863                           
 21864                           ;doprnt.c: 1422: {
 21865                           ;doprnt.c: 1424: if(width
 21866                           ;doprnt.c: 1428: )
 21867  002082  5028               	movf	i2printf@width,w,c
 21868  002084  1029               	iorwf	i2printf@width+1,w,c
 21869  002086  B4D8               	btfsc	status,2,c
 21870  002088  D00A               	goto	i2l6335
 21871  00208A                     i2l6331:
 21872                           
 21873                           ;doprnt.c: 1430: (putch(' ') );
 21874  00208A  0E20               	movlw	32
 21875  00208C  ECA0  F028         	call	i2_putch
 21876                           
 21877                           ;doprnt.c: 1431: while(--width);
 21878  002090  0628               	decf	i2printf@width,f,c
 21879  002092  A0D8               	btfss	status,0,c
 21880  002094  0629               	decf	i2printf@width+1,f,c
 21881  002096  5028               	movf	i2printf@width,w,c
 21882  002098  1029               	iorwf	i2printf@width+1,w,c
 21883  00209A  A4D8               	btfss	status,2,c
 21884  00209C  D7F6               	goto	i2l6331
 21885  00209E                     i2l6335:
 21886                           
 21887                           ;doprnt.c: 1438: if(flag & 0x03)
 21888  00209E  C026  F019         	movff	i2printf@flag,??i2_printf
 21889  0020A2  0E03               	movlw	3
 21890  0020A4  1619               	andwf	??i2_printf,f,c
 21891  0020A6  B4D8               	btfsc	status,2,c
 21892  0020A8  D003               	goto	i2l6339
 21893                           
 21894                           ;doprnt.c: 1439: (putch('-') );
 21895  0020AA  0E2D               	movlw	45
 21896  0020AC  ECA0  F028         	call	i2_putch
 21897  0020B0                     i2l6339:
 21898                           
 21899                           ;doprnt.c: 1469: }
 21900                           ;doprnt.c: 1472: prec = c;
 21901  0020B0  C027  F01D         	movff	i2printf@c,i2printf@prec
 21902                           
 21903                           ;doprnt.c: 1474: while(prec--) {
 21904  0020B4  D027               	goto	i2l6345
 21905  0020B6                     i2l6341:
 21906                           
 21907                           ;doprnt.c: 1478: {
 21908                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21909  0020B6  501D               	movf	i2printf@prec,w,c
 21910  0020B8  0D02               	mullw	2
 21911  0020BA  0E00               	movlw	low _dpowers
 21912  0020BC  24F3               	addwf	prodl,w,c
 21913  0020BE  6EF6               	movwf	tblptrl,c
 21914  0020C0  0EFB               	movlw	high _dpowers
 21915  0020C2  20F4               	addwfc	prodh,w,c
 21916  0020C4  6EF7               	movwf	tblptrh,c
 21917  0020C6                     	if	1	;There are 3 active tblptr bytes
 21918  0020C6  6AF8               	clrf	tblptru,c
 21919  0020C8  0E00               	movlw	low (__mediumconst shr (0+16))
 21920  0020CA  22F8               	addwfc	tblptru,f,c
 21921  0020CC                     	endif
 21922  0020CC  0009               	tblrd		*+
 21923  0020CE  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21924  0020D2  000A               	tblrd		*-
 21925  0020D4  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21926  0020D8  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21927  0020DC  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21928  0020E0  ECDC  F024         	call	i2___lwdiv	;wreg free
 21929  0020E4  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21930  0020E8  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21931  0020EC  0E00               	movlw	0
 21932  0020EE  6E04               	movwf	i2___lwmod@divisor+1,c
 21933  0020F0  0E0A               	movlw	10
 21934  0020F2  6E03               	movwf	i2___lwmod@divisor,c
 21935  0020F4  EC9B  F025         	call	i2___lwmod	;wreg free
 21936  0020F8  5001               	movf	?i2___lwmod,w,c
 21937  0020FA  0F30               	addlw	48
 21938  0020FC  6E27               	movwf	i2printf@c,c
 21939                           
 21940                           ;doprnt.c: 1523: }
 21941                           ;doprnt.c: 1524: (putch(c) );
 21942  0020FE  5027               	movf	i2printf@c,w,c
 21943  002100  ECA0  F028         	call	i2_putch
 21944  002104                     i2l6345:
 21945  002104  061D               	decf	i2printf@prec,f,c
 21946  002106  281D               	incf	i2printf@prec,w,c
 21947  002108  A4D8               	btfss	status,2,c
 21948  00210A  D7D5               	goto	i2l6341
 21949  00210C                     i2l6347:
 21950  00210C  C00D  FFF6         	movff	i2printf@f,tblptrl
 21951  002110  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21952  002114  4A0D               	infsnz	i2printf@f,f,c
 21953  002116  2A0E               	incf	i2printf@f+1,f,c
 21954  002118                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21955  002118  6AF8               	clrf	tblptru,c
 21956  00211A                     	endif
 21957  00211A                     	if	0	;tblptru may be non-zero
 21958  00211A                     	endif
 21959  00211A  0008               	tblrd		*
 21960  00211C  CFF5 F027          	movff	tablat,i2printf@c
 21961  002120  5027               	movf	i2printf@c,w,c
 21962  002122  B4D8               	btfsc	status,2,c
 21963  002124  0012               	return	
 21964  002126  D64E               	goto	i2l6217
 21965  002128                     __end_ofi2_printf:
 21966                           	opt stack 0
 21967                           pclatu	equ	0xFFB
 21968                           pclath	equ	0xFFA
 21969                           tblptru	equ	0xFF8
 21970                           tblptrh	equ	0xFF7
 21971                           tblptrl	equ	0xFF6
 21972                           tablat	equ	0xFF5
 21973                           prodh	equ	0xFF4
 21974                           prodl	equ	0xFF3
 21975                           intcon	equ	0xFF2
 21976                           intcon2	equ	0xFF1
 21977                           intcon3	equ	0xFF0
 21978                           indf0	equ	0xFEF
 21979                           postinc0	equ	0xFEE
 21980                           fsr0h	equ	0xFEA
 21981                           fsr0l	equ	0xFE9
 21982                           wreg	equ	0xFE8
 21983                           postdec1	equ	0xFE5
 21984                           fsr1h	equ	0xFE2
 21985                           fsr1l	equ	0xFE1
 21986                           indf2	equ	0xFDF
 21987                           postinc2	equ	0xFDE
 21988                           postdec2	equ	0xFDD
 21989                           fsr2h	equ	0xFDA
 21990                           fsr2l	equ	0xFD9
 21991                           status	equ	0xFD8
 21992                           
 21993 ;; *************** function i2_putch *****************
 21994 ;; Defined at:
 21995 ;;		line 20 in file "lcd.c"
 21996 ;; Parameters:    Size  Location     Type
 21997 ;;  data            1    wreg     unsigned char 
 21998 ;; Auto vars:     Size  Location     Type
 21999 ;;  data            1    2[COMRAM] unsigned char 
 22000 ;; Return value:  Size  Location     Type
 22001 ;;                  1    wreg      void 
 22002 ;; Registers used:
 22003 ;;		wreg, status,2, status,0, cstack
 22004 ;; Tracked objects:
 22005 ;;		On entry : 0/0
 22006 ;;		On exit  : 0/0
 22007 ;;		Unchanged: 0/0
 22008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22013 ;;Total ram usage:        1 bytes
 22014 ;; Hardware stack levels used:    1
 22015 ;; Hardware stack levels required when called:    1
 22016 ;; This function calls:
 22017 ;;		i2_lcdNibble
 22018 ;; This function is called by:
 22019 ;;		i2_printf
 22020 ;; This function uses a non-reentrant model
 22021 ;;
 22022                           
 22023                           	psect	text80
 22024  005140                     __ptext80:
 22025                           	opt stack 0
 22026  005140                     i2_putch:
 22027                           	opt stack 19
 22028                           
 22029                           ;incstack = 0
 22030                           ;i2putch@data stored from wreg
 22031  005140  6E03               	movwf	i2putch@data,c
 22032                           
 22033                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22034  005142  848C               	bsf	3980,2,c	;volatile
 22035                           
 22036                           ;lcd.c: 22: lcdNibble(data);
 22037  005144  5003               	movf	i2putch@data,w,c
 22038  005146  ECB1  F024         	call	i2_lcdNibble
 22039  00514A  0012               	return		;funcret
 22040  00514C                     __end_ofi2_putch:
 22041                           	opt stack 0
 22042                           pclatu	equ	0xFFB
 22043                           pclath	equ	0xFFA
 22044                           tblptru	equ	0xFF8
 22045                           tblptrh	equ	0xFF7
 22046                           tblptrl	equ	0xFF6
 22047                           tablat	equ	0xFF5
 22048                           prodh	equ	0xFF4
 22049                           prodl	equ	0xFF3
 22050                           intcon	equ	0xFF2
 22051                           intcon2	equ	0xFF1
 22052                           intcon3	equ	0xFF0
 22053                           indf0	equ	0xFEF
 22054                           postinc0	equ	0xFEE
 22055                           fsr0h	equ	0xFEA
 22056                           fsr0l	equ	0xFE9
 22057                           wreg	equ	0xFE8
 22058                           postdec1	equ	0xFE5
 22059                           fsr1h	equ	0xFE2
 22060                           fsr1l	equ	0xFE1
 22061                           indf2	equ	0xFDF
 22062                           postinc2	equ	0xFDE
 22063                           postdec2	equ	0xFDD
 22064                           fsr2h	equ	0xFDA
 22065                           fsr2l	equ	0xFD9
 22066                           status	equ	0xFD8
 22067                           
 22068 ;; *************** function i2_isdigit *****************
 22069 ;; Defined at:
 22070 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22071 ;; Parameters:    Size  Location     Type
 22072 ;;  c               1    wreg     unsigned char 
 22073 ;; Auto vars:     Size  Location     Type
 22074 ;;  c               1    2[COMRAM] unsigned char 
 22075 ;; Return value:  Size  Location     Type
 22076 ;;		None               void
 22077 ;; Registers used:
 22078 ;;		wreg, status,2, status,0
 22079 ;; Tracked objects:
 22080 ;;		On entry : 0/0
 22081 ;;		On exit  : 0/0
 22082 ;;		Unchanged: 0/0
 22083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22087 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22088 ;;Total ram usage:        3 bytes
 22089 ;; Hardware stack levels used:    1
 22090 ;; This function calls:
 22091 ;;		Nothing
 22092 ;; This function is called by:
 22093 ;;		i2_printf
 22094 ;; This function uses a non-reentrant model
 22095 ;;
 22096                           
 22097                           	psect	text81
 22098  005078                     __ptext81:
 22099                           	opt stack 0
 22100  005078                     i2_isdigit:
 22101                           	opt stack 20
 22102                           
 22103                           ;incstack = 0
 22104                           ;i2isdigit@c stored from wreg
 22105  005078  6E03               	movwf	i2isdigit@c,c
 22106  00507A  0E00               	movlw	0
 22107  00507C  6E02               	movwf	i2_isdigit$1978,c
 22108  00507E  0E3A               	movlw	58
 22109  005080  6003               	cpfslt	i2isdigit@c,c
 22110  005082  D005               	goto	i2l5921
 22111  005084  0E2F               	movlw	47
 22112  005086  6403               	cpfsgt	i2isdigit@c,c
 22113  005088  D002               	goto	i2l5921
 22114  00508A  0E01               	movlw	1
 22115  00508C  6E02               	movwf	i2_isdigit$1978,c
 22116  00508E                     i2l5921:
 22117  00508E  C002  F001         	movff	i2_isdigit$1978,??i2_isdigit
 22118  005092  3001               	rrcf	??i2_isdigit,w,c
 22119  005094  0012               	return	
 22120  005096                     __end_ofi2_isdigit:
 22121                           	opt stack 0
 22122                           pclatu	equ	0xFFB
 22123                           pclath	equ	0xFFA
 22124                           tblptru	equ	0xFF8
 22125                           tblptrh	equ	0xFF7
 22126                           tblptrl	equ	0xFF6
 22127                           tablat	equ	0xFF5
 22128                           prodh	equ	0xFF4
 22129                           prodl	equ	0xFF3
 22130                           intcon	equ	0xFF2
 22131                           intcon2	equ	0xFF1
 22132                           intcon3	equ	0xFF0
 22133                           indf0	equ	0xFEF
 22134                           postinc0	equ	0xFEE
 22135                           fsr0h	equ	0xFEA
 22136                           fsr0l	equ	0xFE9
 22137                           wreg	equ	0xFE8
 22138                           postdec1	equ	0xFE5
 22139                           fsr1h	equ	0xFE2
 22140                           fsr1l	equ	0xFE1
 22141                           indf2	equ	0xFDF
 22142                           postinc2	equ	0xFDE
 22143                           postdec2	equ	0xFDD
 22144                           fsr2h	equ	0xFDA
 22145                           fsr2l	equ	0xFD9
 22146                           status	equ	0xFD8
 22147                           
 22148 ;; *************** function i2___wmul *****************
 22149 ;; Defined at:
 22150 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22151 ;; Parameters:    Size  Location     Type
 22152 ;;  multiplier      2    0[COMRAM] unsigned int 
 22153 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22154 ;; Auto vars:     Size  Location     Type
 22155 ;;  __wmul          2    4[COMRAM] unsigned int 
 22156 ;; Return value:  Size  Location     Type
 22157 ;;                  2    0[COMRAM] unsigned int 
 22158 ;; Registers used:
 22159 ;;		wreg, status,2, status,0, prodl, prodh
 22160 ;; Tracked objects:
 22161 ;;		On entry : 0/0
 22162 ;;		On exit  : 0/0
 22163 ;;		Unchanged: 0/0
 22164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;Total ram usage:        6 bytes
 22170 ;; Hardware stack levels used:    1
 22171 ;; This function calls:
 22172 ;;		Nothing
 22173 ;; This function is called by:
 22174 ;;		_printSortTimer
 22175 ;;		_retrieveLog
 22176 ;;		i2_printf
 22177 ;; This function uses a non-reentrant model
 22178 ;;
 22179                           
 22180                           	psect	text82
 22181  004FC4                     __ptext82:
 22182                           	opt stack 0
 22183  004FC4                     i2___wmul:
 22184                           	opt stack 20
 22185                           
 22186                           ;incstack = 0
 22187  004FC4  5001               	movf	i2___wmul@multiplier,w,c
 22188  004FC6  0203               	mulwf	i2___wmul@multiplicand,c
 22189  004FC8  CFF3 F005          	movff	prodl,i2___wmul@product
 22190  004FCC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22191  004FD0  5001               	movf	i2___wmul@multiplier,w,c
 22192  004FD2  0204               	mulwf	i2___wmul@multiplicand+1,c
 22193  004FD4  50F3               	movf	prodl,w,c
 22194  004FD6  2606               	addwf	i2___wmul@product+1,f,c
 22195  004FD8  5002               	movf	i2___wmul@multiplier+1,w,c
 22196  004FDA  0203               	mulwf	i2___wmul@multiplicand,c
 22197  004FDC  50F3               	movf	prodl,w,c
 22198  004FDE  2606               	addwf	i2___wmul@product+1,f,c
 22199  004FE0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22200  004FE4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22201  004FE8  0012               	return	
 22202  004FEA                     __end_ofi2___wmul:
 22203                           	opt stack 0
 22204                           pclatu	equ	0xFFB
 22205                           pclath	equ	0xFFA
 22206                           tblptru	equ	0xFF8
 22207                           tblptrh	equ	0xFF7
 22208                           tblptrl	equ	0xFF6
 22209                           tablat	equ	0xFF5
 22210                           prodh	equ	0xFF4
 22211                           prodl	equ	0xFF3
 22212                           intcon	equ	0xFF2
 22213                           intcon2	equ	0xFF1
 22214                           intcon3	equ	0xFF0
 22215                           indf0	equ	0xFEF
 22216                           postinc0	equ	0xFEE
 22217                           fsr0h	equ	0xFEA
 22218                           fsr0l	equ	0xFE9
 22219                           wreg	equ	0xFE8
 22220                           postdec1	equ	0xFE5
 22221                           fsr1h	equ	0xFE2
 22222                           fsr1l	equ	0xFE1
 22223                           indf2	equ	0xFDF
 22224                           postinc2	equ	0xFDE
 22225                           postdec2	equ	0xFDD
 22226                           fsr2h	equ	0xFDA
 22227                           fsr2l	equ	0xFD9
 22228                           status	equ	0xFD8
 22229                           
 22230 ;; *************** function i2___lwmod *****************
 22231 ;; Defined at:
 22232 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22233 ;; Parameters:    Size  Location     Type
 22234 ;;  dividend        2    0[COMRAM] unsigned int 
 22235 ;;  divisor         2    2[COMRAM] unsigned int 
 22236 ;; Auto vars:     Size  Location     Type
 22237 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22238 ;; Return value:  Size  Location     Type
 22239 ;;                  2    0[COMRAM] unsigned int 
 22240 ;; Registers used:
 22241 ;;		wreg, status,2, status,0
 22242 ;; Tracked objects:
 22243 ;;		On entry : 0/0
 22244 ;;		On exit  : 0/0
 22245 ;;		Unchanged: 0/0
 22246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22250 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22251 ;;Total ram usage:        5 bytes
 22252 ;; Hardware stack levels used:    1
 22253 ;; This function calls:
 22254 ;;		Nothing
 22255 ;; This function is called by:
 22256 ;;		_printSortTimer
 22257 ;;		i2_printf
 22258 ;; This function uses a non-reentrant model
 22259 ;;
 22260                           
 22261                           	psect	text83
 22262  004B36                     __ptext83:
 22263                           	opt stack 0
 22264  004B36                     i2___lwmod:
 22265                           	opt stack 20
 22266                           
 22267                           ;incstack = 0
 22268  004B36  5003               	movf	i2___lwmod@divisor,w,c
 22269  004B38  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22270  004B3A  B4D8               	btfsc	status,2,c
 22271  004B3C  D018               	goto	i2l1828
 22272  004B3E  0E01               	movlw	1
 22273  004B40  6E05               	movwf	i2___lwmod@counter,c
 22274  004B42  D004               	goto	i2l5953
 22275  004B44                     i2l5951:
 22276  004B44  90D8               	bcf	status,0,c
 22277  004B46  3603               	rlcf	i2___lwmod@divisor,f,c
 22278  004B48  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22279  004B4A  2A05               	incf	i2___lwmod@counter,f,c
 22280  004B4C                     i2l5953:
 22281  004B4C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22282  004B4E  D7FA               	goto	i2l5951
 22283  004B50                     i2l5955:
 22284  004B50  5003               	movf	i2___lwmod@divisor,w,c
 22285  004B52  5C01               	subwf	i2___lwmod@dividend,w,c
 22286  004B54  5004               	movf	i2___lwmod@divisor+1,w,c
 22287  004B56  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22288  004B58  A0D8               	btfss	status,0,c
 22289  004B5A  D004               	goto	i2l5959
 22290  004B5C  5003               	movf	i2___lwmod@divisor,w,c
 22291  004B5E  5E01               	subwf	i2___lwmod@dividend,f,c
 22292  004B60  5004               	movf	i2___lwmod@divisor+1,w,c
 22293  004B62  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22294  004B64                     i2l5959:
 22295  004B64  90D8               	bcf	status,0,c
 22296  004B66  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22297  004B68  3203               	rrcf	i2___lwmod@divisor,f,c
 22298  004B6A  2E05               	decfsz	i2___lwmod@counter,f,c
 22299  004B6C  D7F1               	goto	i2l5955
 22300  004B6E                     i2l1828:
 22301  004B6E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22302  004B72  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22303  004B76  0012               	return		;funcret
 22304  004B78                     __end_ofi2___lwmod:
 22305                           	opt stack 0
 22306                           pclatu	equ	0xFFB
 22307                           pclath	equ	0xFFA
 22308                           tblptru	equ	0xFF8
 22309                           tblptrh	equ	0xFF7
 22310                           tblptrl	equ	0xFF6
 22311                           tablat	equ	0xFF5
 22312                           prodh	equ	0xFF4
 22313                           prodl	equ	0xFF3
 22314                           intcon	equ	0xFF2
 22315                           intcon2	equ	0xFF1
 22316                           intcon3	equ	0xFF0
 22317                           indf0	equ	0xFEF
 22318                           postinc0	equ	0xFEE
 22319                           fsr0h	equ	0xFEA
 22320                           fsr0l	equ	0xFE9
 22321                           wreg	equ	0xFE8
 22322                           postdec1	equ	0xFE5
 22323                           fsr1h	equ	0xFE2
 22324                           fsr1l	equ	0xFE1
 22325                           indf2	equ	0xFDF
 22326                           postinc2	equ	0xFDE
 22327                           postdec2	equ	0xFDD
 22328                           fsr2h	equ	0xFDA
 22329                           fsr2l	equ	0xFD9
 22330                           status	equ	0xFD8
 22331                           
 22332 ;; *************** function i2___lwdiv *****************
 22333 ;; Defined at:
 22334 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22335 ;; Parameters:    Size  Location     Type
 22336 ;;  dividend        2    5[COMRAM] unsigned int 
 22337 ;;  divisor         2    7[COMRAM] unsigned int 
 22338 ;; Auto vars:     Size  Location     Type
 22339 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22340 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22341 ;; Return value:  Size  Location     Type
 22342 ;;                  2    5[COMRAM] unsigned int 
 22343 ;; Registers used:
 22344 ;;		wreg, status,2, status,0
 22345 ;; Tracked objects:
 22346 ;;		On entry : 0/0
 22347 ;;		On exit  : 0/0
 22348 ;;		Unchanged: 0/0
 22349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22350 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22351 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22353 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22354 ;;Total ram usage:        7 bytes
 22355 ;; Hardware stack levels used:    1
 22356 ;; This function calls:
 22357 ;;		Nothing
 22358 ;; This function is called by:
 22359 ;;		_printSortTimer
 22360 ;;		i2_printf
 22361 ;; This function uses a non-reentrant model
 22362 ;;
 22363                           
 22364                           	psect	text84
 22365  0049B8                     __ptext84:
 22366                           	opt stack 0
 22367  0049B8                     i2___lwdiv:
 22368                           	opt stack 20
 22369                           
 22370                           ;incstack = 0
 22371  0049B8  0E00               	movlw	0
 22372  0049BA  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22373  0049BC  0E00               	movlw	0
 22374  0049BE  6E0A               	movwf	i2___lwdiv@quotient,c
 22375  0049C0  5008               	movf	i2___lwdiv@divisor,w,c
 22376  0049C2  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22377  0049C4  B4D8               	btfsc	status,2,c
 22378  0049C6  D01C               	goto	i2l1818
 22379  0049C8  0E01               	movlw	1
 22380  0049CA  6E0C               	movwf	i2___lwdiv@counter,c
 22381  0049CC  D004               	goto	i2l5933
 22382  0049CE                     i2l5931:
 22383  0049CE  90D8               	bcf	status,0,c
 22384  0049D0  3608               	rlcf	i2___lwdiv@divisor,f,c
 22385  0049D2  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22386  0049D4  2A0C               	incf	i2___lwdiv@counter,f,c
 22387  0049D6                     i2l5933:
 22388  0049D6  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22389  0049D8  D7FA               	goto	i2l5931
 22390  0049DA                     i2l5935:
 22391  0049DA  90D8               	bcf	status,0,c
 22392  0049DC  360A               	rlcf	i2___lwdiv@quotient,f,c
 22393  0049DE  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22394  0049E0  5008               	movf	i2___lwdiv@divisor,w,c
 22395  0049E2  5C06               	subwf	i2___lwdiv@dividend,w,c
 22396  0049E4  5009               	movf	i2___lwdiv@divisor+1,w,c
 22397  0049E6  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22398  0049E8  A0D8               	btfss	status,0,c
 22399  0049EA  D005               	goto	i2l5943
 22400  0049EC  5008               	movf	i2___lwdiv@divisor,w,c
 22401  0049EE  5E06               	subwf	i2___lwdiv@dividend,f,c
 22402  0049F0  5009               	movf	i2___lwdiv@divisor+1,w,c
 22403  0049F2  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22404  0049F4  800A               	bsf	i2___lwdiv@quotient,0,c
 22405  0049F6                     i2l5943:
 22406  0049F6  90D8               	bcf	status,0,c
 22407  0049F8  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22408  0049FA  3208               	rrcf	i2___lwdiv@divisor,f,c
 22409  0049FC  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22410  0049FE  D7ED               	goto	i2l5935
 22411  004A00                     i2l1818:
 22412  004A00  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22413  004A04  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22414  004A08  0012               	return		;funcret
 22415  004A0A                     __end_ofi2___lwdiv:
 22416                           	opt stack 0
 22417                           pclatu	equ	0xFFB
 22418                           pclath	equ	0xFFA
 22419                           tblptru	equ	0xFF8
 22420                           tblptrh	equ	0xFF7
 22421                           tblptrl	equ	0xFF6
 22422                           tablat	equ	0xFF5
 22423                           prodh	equ	0xFF4
 22424                           prodl	equ	0xFF3
 22425                           intcon	equ	0xFF2
 22426                           intcon2	equ	0xFF1
 22427                           intcon3	equ	0xFF0
 22428                           indf0	equ	0xFEF
 22429                           postinc0	equ	0xFEE
 22430                           fsr0h	equ	0xFEA
 22431                           fsr0l	equ	0xFE9
 22432                           wreg	equ	0xFE8
 22433                           postdec1	equ	0xFE5
 22434                           fsr1h	equ	0xFE2
 22435                           fsr1l	equ	0xFE1
 22436                           indf2	equ	0xFDF
 22437                           postinc2	equ	0xFDE
 22438                           postdec2	equ	0xFDD
 22439                           fsr2h	equ	0xFDA
 22440                           fsr2l	equ	0xFD9
 22441                           status	equ	0xFD8
 22442                           
 22443 ;; *************** function i2_lcdInst *****************
 22444 ;; Defined at:
 22445 ;;		line 15 in file "lcd.c"
 22446 ;; Parameters:    Size  Location     Type
 22447 ;;  data            1    wreg     unsigned char 
 22448 ;; Auto vars:     Size  Location     Type
 22449 ;;  data            1    2[COMRAM] unsigned char 
 22450 ;; Return value:  Size  Location     Type
 22451 ;;                  1    wreg      void 
 22452 ;; Registers used:
 22453 ;;		wreg, status,2, status,0, cstack
 22454 ;; Tracked objects:
 22455 ;;		On entry : 0/0
 22456 ;;		On exit  : 0/0
 22457 ;;		Unchanged: 0/0
 22458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;Total ram usage:        1 bytes
 22464 ;; Hardware stack levels used:    1
 22465 ;; Hardware stack levels required when called:    1
 22466 ;; This function calls:
 22467 ;;		i2_lcdNibble
 22468 ;; This function is called by:
 22469 ;;		_change_state_to_menu_11
 22470 ;;		_change_state_to_menu_23
 22471 ;;		_change_state_to_logs_11
 22472 ;;		_change_state_to_logs_12
 22473 ;;		_change_state_to_logs_22
 22474 ;;		_change_state_to_logs_23
 22475 ;;		_change_state_to_logs_33
 22476 ;;		_change_state_to_logs_34
 22477 ;;		_printSortTimer
 22478 ;;		i2_change_state_to_menu_start
 22479 ;;		i2_change_state_to_menu_12
 22480 ;;		i2_change_state_to_menu_22
 22481 ;;		i2_printRTC
 22482 ;; This function uses a non-reentrant model
 22483 ;;
 22484                           
 22485                           	psect	text85
 22486  00514C                     __ptext85:
 22487                           	opt stack 0
 22488  00514C                     i2_lcdInst:
 22489                           	opt stack 19
 22490                           
 22491                           ;incstack = 0
 22492                           ;i2lcdInst@data stored from wreg
 22493  00514C  6E03               	movwf	i2lcdInst@data,c
 22494                           
 22495                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22496  00514E  948C               	bcf	3980,2,c	;volatile
 22497                           
 22498                           ;lcd.c: 17: lcdNibble(data);
 22499  005150  5003               	movf	i2lcdInst@data,w,c
 22500  005152  ECB1  F024         	call	i2_lcdNibble
 22501  005156  0012               	return		;funcret
 22502  005158                     __end_ofi2_lcdInst:
 22503                           	opt stack 0
 22504                           pclatu	equ	0xFFB
 22505                           pclath	equ	0xFFA
 22506                           tblptru	equ	0xFF8
 22507                           tblptrh	equ	0xFF7
 22508                           tblptrl	equ	0xFF6
 22509                           tablat	equ	0xFF5
 22510                           prodh	equ	0xFF4
 22511                           prodl	equ	0xFF3
 22512                           intcon	equ	0xFF2
 22513                           intcon2	equ	0xFF1
 22514                           intcon3	equ	0xFF0
 22515                           indf0	equ	0xFEF
 22516                           postinc0	equ	0xFEE
 22517                           fsr0h	equ	0xFEA
 22518                           fsr0l	equ	0xFE9
 22519                           wreg	equ	0xFE8
 22520                           postdec1	equ	0xFE5
 22521                           fsr1h	equ	0xFE2
 22522                           fsr1l	equ	0xFE1
 22523                           indf2	equ	0xFDF
 22524                           postinc2	equ	0xFDE
 22525                           postdec2	equ	0xFDD
 22526                           fsr2h	equ	0xFDA
 22527                           fsr2l	equ	0xFD9
 22528                           status	equ	0xFD8
 22529                           
 22530 ;; *************** function i2_lcdNibble *****************
 22531 ;; Defined at:
 22532 ;;		line 25 in file "lcd.c"
 22533 ;; Parameters:    Size  Location     Type
 22534 ;;  data            1    wreg     unsigned char 
 22535 ;; Auto vars:     Size  Location     Type
 22536 ;;  data            1    1[COMRAM] unsigned char 
 22537 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22538 ;; Return value:  Size  Location     Type
 22539 ;;                  1    wreg      void 
 22540 ;; Registers used:
 22541 ;;		wreg, status,2, status,0
 22542 ;; Tracked objects:
 22543 ;;		On entry : 0/0
 22544 ;;		On exit  : 0/0
 22545 ;;		Unchanged: 0/0
 22546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22551 ;;Total ram usage:        2 bytes
 22552 ;; Hardware stack levels used:    1
 22553 ;; This function calls:
 22554 ;;		Nothing
 22555 ;; This function is called by:
 22556 ;;		i2_lcdInst
 22557 ;;		i2_putch
 22558 ;; This function uses a non-reentrant model
 22559 ;;
 22560                           
 22561                           	psect	text86
 22562  004962                     __ptext86:
 22563                           	opt stack 0
 22564  004962                     i2_lcdNibble:
 22565                           	opt stack 19
 22566                           
 22567                           ;incstack = 0
 22568                           ;i2lcdNibble@data stored from wreg
 22569  004962  6E02               	movwf	i2lcdNibble@data,c
 22570                           
 22571                           ;lcd.c: 27: char temp = data & 0xF0;
 22572  004964  5002               	movf	i2lcdNibble@data,w,c
 22573  004966  0BF0               	andlw	240
 22574  004968  6E01               	movwf	i2lcdNibble@temp,c
 22575                           
 22576                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22577  00496A  508C               	movf	3980,w,c	;volatile
 22578  00496C  0B0F               	andlw	15
 22579  00496E  6E8C               	movwf	3980,c	;volatile
 22580                           
 22581                           ;lcd.c: 29: LATD = temp | LATD;
 22582  004970  5001               	movf	i2lcdNibble@temp,w,c
 22583  004972  108C               	iorwf	3980,w,c	;volatile
 22584  004974  6E8C               	movwf	3980,c	;volatile
 22585                           
 22586                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22587  004976  868C               	bsf	3980,3,c	;volatile
 22588                           
 22589                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22590  004978  0E42               	movlw	66
 22591  00497A                     i2u1001_47:
 22592  00497A  2EE8               	decfsz	wreg,f,c
 22593  00497C  D7FE               	bra	i2u1001_47
 22594  00497E  D000               	nop2	
 22595                           
 22596                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22597  004980  968C               	bcf	3980,3,c	;volatile
 22598                           
 22599                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22600  004982  0E42               	movlw	66
 22601  004984                     i2u1002_47:
 22602  004984  2EE8               	decfsz	wreg,f,c
 22603  004986  D7FE               	bra	i2u1002_47
 22604  004988  D000               	nop2	
 22605                           
 22606                           ;lcd.c: 36: data = data << 4;
 22607  00498A  3802               	swapf	i2lcdNibble@data,w,c
 22608  00498C  0BF0               	andlw	240
 22609  00498E  6E02               	movwf	i2lcdNibble@data,c
 22610                           
 22611                           ;lcd.c: 38: temp = data & 0xF0;
 22612  004990  5002               	movf	i2lcdNibble@data,w,c
 22613  004992  0BF0               	andlw	240
 22614  004994  6E01               	movwf	i2lcdNibble@temp,c
 22615                           
 22616                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22617  004996  508C               	movf	3980,w,c	;volatile
 22618  004998  0B0F               	andlw	15
 22619  00499A  6E8C               	movwf	3980,c	;volatile
 22620                           
 22621                           ;lcd.c: 40: LATD = temp | LATD;
 22622  00499C  5001               	movf	i2lcdNibble@temp,w,c
 22623  00499E  108C               	iorwf	3980,w,c	;volatile
 22624  0049A0  6E8C               	movwf	3980,c	;volatile
 22625                           
 22626                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22627  0049A2  868C               	bsf	3980,3,c	;volatile
 22628                           
 22629                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22630  0049A4  0E42               	movlw	66
 22631  0049A6                     i2u1003_47:
 22632  0049A6  2EE8               	decfsz	wreg,f,c
 22633  0049A8  D7FE               	bra	i2u1003_47
 22634  0049AA  D000               	nop2	
 22635                           
 22636                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22637  0049AC  968C               	bcf	3980,3,c	;volatile
 22638                           
 22639                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22640  0049AE  0E42               	movlw	66
 22641  0049B0                     i2u1004_47:
 22642  0049B0  2EE8               	decfsz	wreg,f,c
 22643  0049B2  D7FE               	bra	i2u1004_47
 22644  0049B4  D000               	nop2	
 22645  0049B6  0012               	return		;funcret
 22646  0049B8                     __end_ofi2_lcdNibble:
 22647                           	opt stack 0
 22648                           pclatu	equ	0xFFB
 22649                           pclath	equ	0xFFA
 22650                           tblptru	equ	0xFF8
 22651                           tblptrh	equ	0xFF7
 22652                           tblptrl	equ	0xFF6
 22653                           tablat	equ	0xFF5
 22654                           prodh	equ	0xFF4
 22655                           prodl	equ	0xFF3
 22656                           intcon	equ	0xFF2
 22657                           intcon2	equ	0xFF1
 22658                           intcon3	equ	0xFF0
 22659                           indf0	equ	0xFEF
 22660                           postinc0	equ	0xFEE
 22661                           fsr0h	equ	0xFEA
 22662                           fsr0l	equ	0xFE9
 22663                           wreg	equ	0xFE8
 22664                           postdec1	equ	0xFE5
 22665                           fsr1h	equ	0xFE2
 22666                           fsr1l	equ	0xFE1
 22667                           indf2	equ	0xFDF
 22668                           postinc2	equ	0xFDE
 22669                           postdec2	equ	0xFDD
 22670                           fsr2h	equ	0xFDA
 22671                           fsr2l	equ	0xFD9
 22672                           status	equ	0xFD8
 22673                           
 22674 ;; *************** function i2_getRTC *****************
 22675 ;; Defined at:
 22676 ;;		line 44 in file "RTC.c"
 22677 ;; Parameters:    Size  Location     Type
 22678 ;;		None
 22679 ;; Auto vars:     Size  Location     Type
 22680 ;;  getRTC          2    3[COMRAM] int 
 22681 ;; Return value:  Size  Location     Type
 22682 ;;                  1    wreg      void 
 22683 ;; Registers used:
 22684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22685 ;; Tracked objects:
 22686 ;;		On entry : 0/0
 22687 ;;		On exit  : 0/0
 22688 ;;		Unchanged: 0/0
 22689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;Total ram usage:        2 bytes
 22695 ;; Hardware stack levels used:    1
 22696 ;; Hardware stack levels required when called:    2
 22697 ;; This function calls:
 22698 ;;		i2_I2C_Master_Read
 22699 ;;		i2_I2C_Master_Start
 22700 ;;		i2_I2C_Master_Stop
 22701 ;;		i2_I2C_Master_Write
 22702 ;; This function is called by:
 22703 ;;		_printSortTimer
 22704 ;;		i2_printRTC
 22705 ;; This function uses a non-reentrant model
 22706 ;;
 22707                           
 22708                           	psect	text87
 22709  0046B4                     __ptext87:
 22710                           	opt stack 0
 22711  0046B4                     i2_getRTC:
 22712                           	opt stack 18
 22713                           
 22714                           ;RTC.c: 48: I2C_Master_Start();
 22715                           
 22716                           ;incstack = 0
 22717  0046B4  ECC6  F028         	call	i2_I2C_Master_Start	;wreg free
 22718                           
 22719                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22720  0046B8  0E00               	movlw	0
 22721  0046BA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22722  0046BC  0ED0               	movlw	208
 22723  0046BE  6E02               	movwf	i2I2C_Master_Write@d,c
 22724  0046C0  ECB1  F028         	call	i2_I2C_Master_Write	;wreg free
 22725                           
 22726                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22727  0046C4  0E00               	movlw	0
 22728  0046C6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22729  0046C8  0E00               	movlw	0
 22730  0046CA  6E02               	movwf	i2I2C_Master_Write@d,c
 22731  0046CC  ECB1  F028         	call	i2_I2C_Master_Write	;wreg free
 22732                           
 22733                           ;RTC.c: 51: I2C_Master_Stop();
 22734  0046D0  ECC2  F028         	call	i2_I2C_Master_Stop	;wreg free
 22735                           
 22736                           ;RTC.c: 54: I2C_Master_Start();
 22737  0046D4  ECC6  F028         	call	i2_I2C_Master_Start	;wreg free
 22738                           
 22739                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22740  0046D8  0E00               	movlw	0
 22741  0046DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22742  0046DC  0ED1               	movlw	209
 22743  0046DE  6E02               	movwf	i2I2C_Master_Write@d,c
 22744  0046E0  ECB1  F028         	call	i2_I2C_Master_Write	;wreg free
 22745                           
 22746                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22747  0046E4  0E00               	movlw	0
 22748  0046E6  6E05               	movwf	i2getRTC@i+1,c
 22749  0046E8  0E00               	movlw	0
 22750  0046EA  6E04               	movwf	i2getRTC@i,c
 22751  0046EC                     i2l6189:
 22752  0046EC  BE05               	btfsc	i2getRTC@i+1,7,c
 22753  0046EE  D006               	goto	i2l6193
 22754  0046F0  5005               	movf	i2getRTC@i+1,w,c
 22755  0046F2  E111               	bnz	i2l6199
 22756  0046F4  0E06               	movlw	6
 22757  0046F6  5C04               	subwf	i2getRTC@i,w,c
 22758  0046F8  B0D8               	btfsc	status,0,c
 22759  0046FA  D00D               	goto	i2l6199
 22760  0046FC                     i2l6193:
 22761                           
 22762                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22763  0046FC  0E24               	movlw	low _time
 22764  0046FE  2404               	addwf	i2getRTC@i,w,c
 22765  004700  6ED9               	movwf	fsr2l,c
 22766  004702  0E01               	movlw	high _time
 22767  004704  2005               	addwfc	i2getRTC@i+1,w,c
 22768  004706  6EDA               	movwf	fsr2h,c
 22769  004708  0E01               	movlw	1
 22770  00470A  ECF5  F027         	call	i2_I2C_Master_Read
 22771  00470E  6EDF               	movwf	indf2,c
 22772  004710  4A04               	infsnz	i2getRTC@i,f,c
 22773  004712  2A05               	incf	i2getRTC@i+1,f,c
 22774  004714  D7EB               	goto	i2l6189
 22775  004716                     i2l6199:
 22776                           
 22777                           ;RTC.c: 58: }
 22778                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22779  004716  0E00               	movlw	0
 22780  004718  ECF5  F027         	call	i2_I2C_Master_Read
 22781  00471C  0101               	movlb	1	; () banked
 22782  00471E  6F2A               	movwf	(_time+6)& (0+255),b
 22783                           
 22784                           ;RTC.c: 60: I2C_Master_Stop();
 22785  004720  ECC2  F028         	call	i2_I2C_Master_Stop	;wreg free
 22786  004724  0012               	return		;funcret
 22787  004726                     __end_ofi2_getRTC:
 22788                           	opt stack 0
 22789                           pclatu	equ	0xFFB
 22790                           pclath	equ	0xFFA
 22791                           tblptru	equ	0xFF8
 22792                           tblptrh	equ	0xFF7
 22793                           tblptrl	equ	0xFF6
 22794                           tablat	equ	0xFF5
 22795                           prodh	equ	0xFF4
 22796                           prodl	equ	0xFF3
 22797                           intcon	equ	0xFF2
 22798                           intcon2	equ	0xFF1
 22799                           intcon3	equ	0xFF0
 22800                           indf0	equ	0xFEF
 22801                           postinc0	equ	0xFEE
 22802                           fsr0h	equ	0xFEA
 22803                           fsr0l	equ	0xFE9
 22804                           wreg	equ	0xFE8
 22805                           postdec1	equ	0xFE5
 22806                           fsr1h	equ	0xFE2
 22807                           fsr1l	equ	0xFE1
 22808                           indf2	equ	0xFDF
 22809                           postinc2	equ	0xFDE
 22810                           postdec2	equ	0xFDD
 22811                           fsr2h	equ	0xFDA
 22812                           fsr2l	equ	0xFD9
 22813                           status	equ	0xFD8
 22814                           
 22815 ;; *************** function i2_I2C_Master_Write *****************
 22816 ;; Defined at:
 22817 ;;		line 49 in file "I2C.c"
 22818 ;; Parameters:    Size  Location     Type
 22819 ;;  d               2    1[COMRAM] unsigned int 
 22820 ;; Auto vars:     Size  Location     Type
 22821 ;;		None
 22822 ;; Return value:  Size  Location     Type
 22823 ;;                  1    wreg      void 
 22824 ;; Registers used:
 22825 ;;		wreg, status,2, status,0, cstack
 22826 ;; Tracked objects:
 22827 ;;		On entry : 0/0
 22828 ;;		On exit  : 0/0
 22829 ;;		Unchanged: 0/0
 22830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22835 ;;Total ram usage:        2 bytes
 22836 ;; Hardware stack levels used:    1
 22837 ;; Hardware stack levels required when called:    1
 22838 ;; This function calls:
 22839 ;;		i2_I2C_Master_Wait
 22840 ;; This function is called by:
 22841 ;;		i2_getRTC
 22842 ;; This function uses a non-reentrant model
 22843 ;;
 22844                           
 22845                           	psect	text88
 22846  005162                     __ptext88:
 22847                           	opt stack 0
 22848  005162                     i2_I2C_Master_Write:
 22849                           	opt stack 18
 22850                           
 22851                           ;I2C.c: 51: I2C_Master_Wait();
 22852                           
 22853                           ;incstack = 0
 22854  005162  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 22855                           
 22856                           ;I2C.c: 52: SSPBUF = d;
 22857  005166  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22858  00516A  0012               	return		;funcret
 22859  00516C                     __end_ofi2_I2C_Master_Write:
 22860                           	opt stack 0
 22861                           pclatu	equ	0xFFB
 22862                           pclath	equ	0xFFA
 22863                           tblptru	equ	0xFF8
 22864                           tblptrh	equ	0xFF7
 22865                           tblptrl	equ	0xFF6
 22866                           tablat	equ	0xFF5
 22867                           prodh	equ	0xFF4
 22868                           prodl	equ	0xFF3
 22869                           intcon	equ	0xFF2
 22870                           intcon2	equ	0xFF1
 22871                           intcon3	equ	0xFF0
 22872                           indf0	equ	0xFEF
 22873                           postinc0	equ	0xFEE
 22874                           fsr0h	equ	0xFEA
 22875                           fsr0l	equ	0xFE9
 22876                           wreg	equ	0xFE8
 22877                           postdec1	equ	0xFE5
 22878                           fsr1h	equ	0xFE2
 22879                           fsr1l	equ	0xFE1
 22880                           indf2	equ	0xFDF
 22881                           postinc2	equ	0xFDE
 22882                           postdec2	equ	0xFDD
 22883                           fsr2h	equ	0xFDA
 22884                           fsr2l	equ	0xFD9
 22885                           status	equ	0xFD8
 22886                           
 22887 ;; *************** function i2_I2C_Master_Stop *****************
 22888 ;; Defined at:
 22889 ;;		line 43 in file "I2C.c"
 22890 ;; Parameters:    Size  Location     Type
 22891 ;;		None
 22892 ;; Auto vars:     Size  Location     Type
 22893 ;;		None
 22894 ;; Return value:  Size  Location     Type
 22895 ;;                  1    wreg      void 
 22896 ;; Registers used:
 22897 ;;		wreg, status,2, status,0, cstack
 22898 ;; Tracked objects:
 22899 ;;		On entry : 0/0
 22900 ;;		On exit  : 0/0
 22901 ;;		Unchanged: 0/0
 22902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22907 ;;Total ram usage:        0 bytes
 22908 ;; Hardware stack levels used:    1
 22909 ;; Hardware stack levels required when called:    1
 22910 ;; This function calls:
 22911 ;;		i2_I2C_Master_Wait
 22912 ;; This function is called by:
 22913 ;;		i2_getRTC
 22914 ;; This function uses a non-reentrant model
 22915 ;;
 22916                           
 22917                           	psect	text89
 22918  005184                     __ptext89:
 22919                           	opt stack 0
 22920  005184                     i2_I2C_Master_Stop:
 22921                           	opt stack 18
 22922                           
 22923                           ;I2C.c: 45: I2C_Master_Wait();
 22924                           
 22925                           ;incstack = 0
 22926  005184  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 22927                           
 22928                           ;I2C.c: 46: PEN = 1;
 22929  005188  84C5               	bsf	4037,2,c	;volatile
 22930  00518A  0012               	return		;funcret
 22931  00518C                     __end_ofi2_I2C_Master_Stop:
 22932                           	opt stack 0
 22933                           pclatu	equ	0xFFB
 22934                           pclath	equ	0xFFA
 22935                           tblptru	equ	0xFF8
 22936                           tblptrh	equ	0xFF7
 22937                           tblptrl	equ	0xFF6
 22938                           tablat	equ	0xFF5
 22939                           prodh	equ	0xFF4
 22940                           prodl	equ	0xFF3
 22941                           intcon	equ	0xFF2
 22942                           intcon2	equ	0xFF1
 22943                           intcon3	equ	0xFF0
 22944                           indf0	equ	0xFEF
 22945                           postinc0	equ	0xFEE
 22946                           fsr0h	equ	0xFEA
 22947                           fsr0l	equ	0xFE9
 22948                           wreg	equ	0xFE8
 22949                           postdec1	equ	0xFE5
 22950                           fsr1h	equ	0xFE2
 22951                           fsr1l	equ	0xFE1
 22952                           indf2	equ	0xFDF
 22953                           postinc2	equ	0xFDE
 22954                           postdec2	equ	0xFDD
 22955                           fsr2h	equ	0xFDA
 22956                           fsr2l	equ	0xFD9
 22957                           status	equ	0xFD8
 22958                           
 22959 ;; *************** function i2_I2C_Master_Start *****************
 22960 ;; Defined at:
 22961 ;;		line 31 in file "I2C.c"
 22962 ;; Parameters:    Size  Location     Type
 22963 ;;		None
 22964 ;; Auto vars:     Size  Location     Type
 22965 ;;		None
 22966 ;; Return value:  Size  Location     Type
 22967 ;;                  1    wreg      void 
 22968 ;; Registers used:
 22969 ;;		wreg, status,2, status,0, cstack
 22970 ;; Tracked objects:
 22971 ;;		On entry : 0/0
 22972 ;;		On exit  : 0/0
 22973 ;;		Unchanged: 0/0
 22974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22979 ;;Total ram usage:        0 bytes
 22980 ;; Hardware stack levels used:    1
 22981 ;; Hardware stack levels required when called:    1
 22982 ;; This function calls:
 22983 ;;		i2_I2C_Master_Wait
 22984 ;; This function is called by:
 22985 ;;		i2_getRTC
 22986 ;; This function uses a non-reentrant model
 22987 ;;
 22988                           
 22989                           	psect	text90
 22990  00518C                     __ptext90:
 22991                           	opt stack 0
 22992  00518C                     i2_I2C_Master_Start:
 22993                           	opt stack 18
 22994                           
 22995                           ;I2C.c: 33: I2C_Master_Wait();
 22996                           
 22997                           ;incstack = 0
 22998  00518C  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 22999                           
 23000                           ;I2C.c: 34: SEN = 1;
 23001  005190  80C5               	bsf	4037,0,c	;volatile
 23002  005192  0012               	return		;funcret
 23003  005194                     __end_ofi2_I2C_Master_Start:
 23004                           	opt stack 0
 23005                           pclatu	equ	0xFFB
 23006                           pclath	equ	0xFFA
 23007                           tblptru	equ	0xFF8
 23008                           tblptrh	equ	0xFF7
 23009                           tblptrl	equ	0xFF6
 23010                           tablat	equ	0xFF5
 23011                           prodh	equ	0xFF4
 23012                           prodl	equ	0xFF3
 23013                           intcon	equ	0xFF2
 23014                           intcon2	equ	0xFF1
 23015                           intcon3	equ	0xFF0
 23016                           indf0	equ	0xFEF
 23017                           postinc0	equ	0xFEE
 23018                           fsr0h	equ	0xFEA
 23019                           fsr0l	equ	0xFE9
 23020                           wreg	equ	0xFE8
 23021                           postdec1	equ	0xFE5
 23022                           fsr1h	equ	0xFE2
 23023                           fsr1l	equ	0xFE1
 23024                           indf2	equ	0xFDF
 23025                           postinc2	equ	0xFDE
 23026                           postdec2	equ	0xFDD
 23027                           fsr2h	equ	0xFDA
 23028                           fsr2l	equ	0xFD9
 23029                           status	equ	0xFD8
 23030                           
 23031 ;; *************** function i2_I2C_Master_Read *****************
 23032 ;; Defined at:
 23033 ;;		line 55 in file "I2C.c"
 23034 ;; Parameters:    Size  Location     Type
 23035 ;;  a               1    wreg     unsigned char 
 23036 ;; Auto vars:     Size  Location     Type
 23037 ;;  a               1    1[COMRAM] unsigned char 
 23038 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23039 ;; Return value:  Size  Location     Type
 23040 ;;                  1    wreg      unsigned char 
 23041 ;; Registers used:
 23042 ;;		wreg, status,2, status,0, cstack
 23043 ;; Tracked objects:
 23044 ;;		On entry : 0/0
 23045 ;;		On exit  : 0/0
 23046 ;;		Unchanged: 0/0
 23047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23051 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23052 ;;Total ram usage:        2 bytes
 23053 ;; Hardware stack levels used:    1
 23054 ;; Hardware stack levels required when called:    1
 23055 ;; This function calls:
 23056 ;;		i2_I2C_Master_Wait
 23057 ;; This function is called by:
 23058 ;;		i2_getRTC
 23059 ;; This function uses a non-reentrant model
 23060 ;;
 23061                           
 23062                           	psect	text91
 23063  004FEA                     __ptext91:
 23064                           	opt stack 0
 23065  004FEA                     i2_I2C_Master_Read:
 23066                           	opt stack 18
 23067                           
 23068                           ;incstack = 0
 23069                           ;i2I2C_Master_Read@a stored from wreg
 23070  004FEA  6E02               	movwf	i2I2C_Master_Read@a,c
 23071                           
 23072                           ;I2C.c: 57: unsigned char temp;
 23073                           ;I2C.c: 58: I2C_Master_Wait();
 23074  004FEC  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 23075                           
 23076                           ;I2C.c: 59: RCEN = 1;
 23077  004FF0  86C5               	bsf	4037,3,c	;volatile
 23078                           
 23079                           ;I2C.c: 60: I2C_Master_Wait();
 23080  004FF2  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 23081                           
 23082                           ;I2C.c: 61: temp = SSPBUF;
 23083  004FF6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23084                           
 23085                           ;I2C.c: 62: I2C_Master_Wait();
 23086  004FFA  EC87  F028         	call	i2_I2C_Master_Wait	;wreg free
 23087                           
 23088                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23089  004FFE  5002               	movf	i2I2C_Master_Read@a,w,c
 23090  005000  A4D8               	btfss	status,2,c
 23091  005002  D002               	goto	i2u436_40
 23092  005004  8AC5               	bsf	4037,5,c	;volatile
 23093  005006  D001               	goto	i2l5897
 23094  005008                     i2u436_40:
 23095  005008  9AC5               	bcf	4037,5,c	;volatile
 23096  00500A                     i2l5897:
 23097                           
 23098                           ;I2C.c: 64: ACKEN = 1;
 23099  00500A  88C5               	bsf	4037,4,c	;volatile
 23100                           
 23101                           ;I2C.c: 65: return temp;
 23102  00500C  5003               	movf	i2I2C_Master_Read@temp,w,c
 23103  00500E  0012               	return	
 23104  005010                     __end_ofi2_I2C_Master_Read:
 23105                           	opt stack 0
 23106                           pclatu	equ	0xFFB
 23107                           pclath	equ	0xFFA
 23108                           tblptru	equ	0xFF8
 23109                           tblptrh	equ	0xFF7
 23110                           tblptrl	equ	0xFF6
 23111                           tablat	equ	0xFF5
 23112                           prodh	equ	0xFF4
 23113                           prodl	equ	0xFF3
 23114                           intcon	equ	0xFF2
 23115                           intcon2	equ	0xFF1
 23116                           intcon3	equ	0xFF0
 23117                           indf0	equ	0xFEF
 23118                           postinc0	equ	0xFEE
 23119                           fsr0h	equ	0xFEA
 23120                           fsr0l	equ	0xFE9
 23121                           wreg	equ	0xFE8
 23122                           postdec1	equ	0xFE5
 23123                           fsr1h	equ	0xFE2
 23124                           fsr1l	equ	0xFE1
 23125                           indf2	equ	0xFDF
 23126                           postinc2	equ	0xFDE
 23127                           postdec2	equ	0xFDD
 23128                           fsr2h	equ	0xFDA
 23129                           fsr2l	equ	0xFD9
 23130                           status	equ	0xFD8
 23131                           
 23132 ;; *************** function i2_I2C_Master_Wait *****************
 23133 ;; Defined at:
 23134 ;;		line 26 in file "I2C.c"
 23135 ;; Parameters:    Size  Location     Type
 23136 ;;		None
 23137 ;; Auto vars:     Size  Location     Type
 23138 ;;		None
 23139 ;; Return value:  Size  Location     Type
 23140 ;;                  1    wreg      void 
 23141 ;; Registers used:
 23142 ;;		wreg, status,2, status,0
 23143 ;; Tracked objects:
 23144 ;;		On entry : 0/0
 23145 ;;		On exit  : 0/0
 23146 ;;		Unchanged: 0/0
 23147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23152 ;;Total ram usage:        1 bytes
 23153 ;; Hardware stack levels used:    1
 23154 ;; This function calls:
 23155 ;;		Nothing
 23156 ;; This function is called by:
 23157 ;;		i2_I2C_Master_Start
 23158 ;;		i2_I2C_Master_Stop
 23159 ;;		i2_I2C_Master_Write
 23160 ;;		i2_I2C_Master_Read
 23161 ;; This function uses a non-reentrant model
 23162 ;;
 23163                           
 23164                           	psect	text92
 23165  00510E                     __ptext92:
 23166                           	opt stack 0
 23167  00510E                     i2_I2C_Master_Wait:
 23168                           	opt stack 18
 23169  00510E                     i2l66:
 23170  00510E  B4C7               	btfsc	4039,2,c	;volatile
 23171  005110  D7FE               	goto	i2l66
 23172  005112  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23173  005116  0E1F               	movlw	31
 23174  005118  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23175  00511A  B4D8               	btfsc	status,2,c
 23176  00511C  0012               	return	
 23177  00511E  D7F7               	goto	i2l66
 23178  005120                     __end_ofi2_I2C_Master_Wait:
 23179                           	opt stack 0
 23180                           pclatu	equ	0xFFB
 23181                           pclath	equ	0xFFA
 23182                           tblptru	equ	0xFF8
 23183                           tblptrh	equ	0xFF7
 23184                           tblptrl	equ	0xFF6
 23185                           tablat	equ	0xFF5
 23186                           prodh	equ	0xFF4
 23187                           prodl	equ	0xFF3
 23188                           intcon	equ	0xFF2
 23189                           intcon2	equ	0xFF1
 23190                           intcon3	equ	0xFF0
 23191                           indf0	equ	0xFEF
 23192                           postinc0	equ	0xFEE
 23193                           fsr0h	equ	0xFEA
 23194                           fsr0l	equ	0xFE9
 23195                           wreg	equ	0xFE8
 23196                           postdec1	equ	0xFE5
 23197                           fsr1h	equ	0xFE2
 23198                           fsr1l	equ	0xFE1
 23199                           indf2	equ	0xFDF
 23200                           postinc2	equ	0xFDE
 23201                           postdec2	equ	0xFDD
 23202                           fsr2h	equ	0xFDA
 23203                           fsr2l	equ	0xFD9
 23204                           status	equ	0xFD8
 23205                           
 23206 ;; *************** function i2_delay_ms *****************
 23207 ;; Defined at:
 23208 ;;		line 523 in file "sort.c"
 23209 ;; Parameters:    Size  Location     Type
 23210 ;;  milliseconds    1    wreg     unsigned char 
 23211 ;; Auto vars:     Size  Location     Type
 23212 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23213 ;; Return value:  Size  Location     Type
 23214 ;;                  1    wreg      void 
 23215 ;; Registers used:
 23216 ;;		wreg, status,2, status,0, cstack
 23217 ;; Tracked objects:
 23218 ;;		On entry : 0/0
 23219 ;;		On exit  : 0/0
 23220 ;;		Unchanged: 0/0
 23221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23226 ;;Total ram usage:        2 bytes
 23227 ;; Hardware stack levels used:    1
 23228 ;; This function calls:
 23229 ;;		Nothing
 23230 ;; This function is called by:
 23231 ;;		_printSortTimer
 23232 ;; This function uses a non-reentrant model
 23233 ;;
 23234                           
 23235                           	psect	text93
 23236  005096                     __ptext93:
 23237                           	opt stack 0
 23238  005096                     i2_delay_ms:
 23239                           	opt stack 22
 23240                           
 23241                           ;incstack = 0
 23242                           ;i2delay_ms@milliseconds stored from wreg
 23243  005096  6E02               	movwf	i2delay_ms@milliseconds,c
 23244                           
 23245                           ;sort.c: 524: while(milliseconds > 0)
 23246  005098  D008               	goto	i2l8231
 23247  00509A                     i2l8227:
 23248                           
 23249                           ;sort.c: 525: {
 23250                           ;sort.c: 526: milliseconds--;
 23251  00509A  0602               	decf	i2delay_ms@milliseconds,f,c
 23252                           
 23253                           ;sort.c: 527: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23254  00509C  0E0B               	movlw	11
 23255  00509E  6E01               	movwf	??i2_delay_ms& (0+255),c
 23256  0050A0  0E48               	movlw	72
 23257  0050A2                     i2u1005_47:
 23258  0050A2  2EE8               	decfsz	wreg,f,c
 23259  0050A4  D7FE               	bra	i2u1005_47
 23260  0050A6  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23261  0050A8  D7FC               	bra	i2u1005_47
 23262  0050AA                     i2l8231:
 23263  0050AA  5002               	movf	i2delay_ms@milliseconds,w,c
 23264  0050AC  B4D8               	btfsc	status,2,c
 23265  0050AE  0012               	return	
 23266  0050B0  D7F4               	goto	i2l8227
 23267  0050B2                     __end_ofi2_delay_ms:
 23268                           	opt stack 0
 23269                           pclatu	equ	0xFFB
 23270                           pclath	equ	0xFFA
 23271                           tblptru	equ	0xFF8
 23272                           tblptrh	equ	0xFF7
 23273                           tblptrl	equ	0xFF6
 23274                           tablat	equ	0xFF5
 23275                           prodh	equ	0xFF4
 23276                           prodl	equ	0xFF3
 23277                           intcon	equ	0xFF2
 23278                           intcon2	equ	0xFF1
 23279                           intcon3	equ	0xFF0
 23280                           indf0	equ	0xFEF
 23281                           postinc0	equ	0xFEE
 23282                           fsr0h	equ	0xFEA
 23283                           fsr0l	equ	0xFE9
 23284                           wreg	equ	0xFE8
 23285                           postdec1	equ	0xFE5
 23286                           fsr1h	equ	0xFE2
 23287                           fsr1l	equ	0xFE1
 23288                           indf2	equ	0xFDF
 23289                           postinc2	equ	0xFDE
 23290                           postdec2	equ	0xFDD
 23291                           fsr2h	equ	0xFDA
 23292                           fsr2l	equ	0xFD9
 23293                           status	equ	0xFD8
 23294                           pclatu	equ	0xFFB
 23295                           pclath	equ	0xFFA
 23296                           tblptru	equ	0xFF8
 23297                           tblptrh	equ	0xFF7
 23298                           tblptrl	equ	0xFF6
 23299                           tablat	equ	0xFF5
 23300                           prodh	equ	0xFF4
 23301                           prodl	equ	0xFF3
 23302                           intcon	equ	0xFF2
 23303                           intcon2	equ	0xFF1
 23304                           intcon3	equ	0xFF0
 23305                           indf0	equ	0xFEF
 23306                           postinc0	equ	0xFEE
 23307                           fsr0h	equ	0xFEA
 23308                           fsr0l	equ	0xFE9
 23309                           wreg	equ	0xFE8
 23310                           postdec1	equ	0xFE5
 23311                           fsr1h	equ	0xFE2
 23312                           fsr1l	equ	0xFE1
 23313                           indf2	equ	0xFDF
 23314                           postinc2	equ	0xFDE
 23315                           postdec2	equ	0xFDD
 23316                           fsr2h	equ	0xFDA
 23317                           fsr2l	equ	0xFD9
 23318                           status	equ	0xFD8
 23319                           
 23320                           	psect	rparam
 23321  0000                     pclatu	equ	0xFFB
 23322                           pclath	equ	0xFFA
 23323                           tblptru	equ	0xFF8
 23324                           tblptrh	equ	0xFF7
 23325                           tblptrl	equ	0xFF6
 23326                           tablat	equ	0xFF5
 23327                           prodh	equ	0xFF4
 23328                           prodl	equ	0xFF3
 23329                           intcon	equ	0xFF2
 23330                           intcon2	equ	0xFF1
 23331                           intcon3	equ	0xFF0
 23332                           indf0	equ	0xFEF
 23333                           postinc0	equ	0xFEE
 23334                           fsr0h	equ	0xFEA
 23335                           fsr0l	equ	0xFE9
 23336                           wreg	equ	0xFE8
 23337                           postdec1	equ	0xFE5
 23338                           fsr1h	equ	0xFE2
 23339                           fsr1l	equ	0xFE1
 23340                           indf2	equ	0xFDF
 23341                           postinc2	equ	0xFDE
 23342                           postdec2	equ	0xFDD
 23343                           fsr2h	equ	0xFDA
 23344                           fsr2l	equ	0xFD9
 23345                           status	equ	0xFD8
 23346                           
 23347                           	psect	temp
 23348  00007E                     btemp:
 23349                           	opt stack 0
 23350  00007E                     	ds	1
 23351  0000                     int$flags	set	btemp
 23352                           pclatu	equ	0xFFB
 23353                           pclath	equ	0xFFA
 23354                           tblptru	equ	0xFF8
 23355                           tblptrh	equ	0xFF7
 23356                           tblptrl	equ	0xFF6
 23357                           tablat	equ	0xFF5
 23358                           prodh	equ	0xFF4
 23359                           prodl	equ	0xFF3
 23360                           intcon	equ	0xFF2
 23361                           intcon2	equ	0xFF1
 23362                           intcon3	equ	0xFF0
 23363                           indf0	equ	0xFEF
 23364                           postinc0	equ	0xFEE
 23365                           fsr0h	equ	0xFEA
 23366                           fsr0l	equ	0xFE9
 23367                           wreg	equ	0xFE8
 23368                           postdec1	equ	0xFE5
 23369                           fsr1h	equ	0xFE2
 23370                           fsr1l	equ	0xFE1
 23371                           indf2	equ	0xFDF
 23372                           postinc2	equ	0xFDE
 23373                           postdec2	equ	0xFDD
 23374                           fsr2h	equ	0xFDA
 23375                           fsr2l	equ	0xFD9
 23376                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      63
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201753
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23225
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17707
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75734
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3F       7       24.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13C      34        0.0%
DATA                 0      0     13C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 16:15:41 2017

                                    _i 0135                     i2_I2C_Master_Start 518C  
                   i2_I2C_Master_Write 5162                                     l66 50FA  
                                   _ID 30D0                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 24DC                                    l491 3FCC  
                                  l740 123C                                    l750 12E8  
                                  l761 13F6                                    l753 1322  
                                  l773 14FA                                    l758 13BC  
                                  l783 15F2                                    l775 150C  
                                  l767 15A8                                    l776 1520  
                                  l857 4608                                    l793 323C  
                                  l777 1534                                    l794 3256  
                                  l778 1548                                    l779 155E  
                                  l797 32EE                                    l993 3D9A  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 387C                    _log_count_can_w_lab 0071  
                           i2_delay_ms 5096        __end_of_change_state_to_menu_11 4D78  
      __end_of_change_state_to_menu_12 4BE8        __end_of_change_state_to_menu_22 4BB0  
      __end_of_change_state_to_menu_23 4D48           _f_can_coming_to_distribution 0067  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4E68  
      __end_of_change_state_to_logs_12 4E38        __end_of_change_state_to_logs_22 4E08  
      __end_of_change_state_to_logs_23 4EF2        __end_of_change_state_to_logs_33 4DD8  
      __end_of_change_state_to_logs_34 4DA8                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1110 3CE2  
                                 l1006 50DC                                   l1015 3B2E  
                                 l1203 05E8                                   l1131 3EBA  
                                 l1107 3CC2                                   l1220 0858  
                                 l1140 2186                                   l1134 3EBE  
                                 l1215 0782                                   l1143 218A  
                                 l1240 4472                                   l1241 4476  
                                 l1233 444E                                   l1313 441E  
                                 l1330 37CE                                   l1242 447A  
                                 l1306 440E                                   l1243 447E  
                                 l1260 4900                                   l1245 44BC  
                                 l1237 446A                                   l1173 0126  
                                 l1254 48F0                                   l1166 007C  
                                 l1335 381A                                   l1239 446E  
                                 l1336 3834                                   l1176 018C  
                                 l1177 01DA                                   l1169 0080  
                                 l1282 2E76                                   l1178 0240  
                                 l1371 1844                                   l1275 2E96  
                                 l1179 028E                                   l1284 2E90  
                                 l1278 2E32                                   l1818 45C2  
                                 l1828 47E6                                   l6013 171E  
                                 l6005 16EC                                   l1765 415A  
                                 l6103 19AC                                   l6023 1796  
                                 l6015 172A                                   l6111 1A16  
                                 l6105 19B2                                   l6033 17EC  
                                 l6025 17A2                                   l6017 1730  
                                 l7001 12D2                                   l6051 187C  
                                 l6035 1804                                   l6027 17A8  
                                 l6123 4384                                   l6115 4BF2  
                                 l7011 1302                                   l6109 1A0A  
                                 l6029 17C0                                   l6133 43BA  
                                 l6117 4BFE                                   l7013 130C  
                                 l6055 1896                                   l6039 180A  
                                 l6151 45F4                                   l6127 439A  
                                 l7023 133C                                   l6081 193C  
                                 l6057 189C                                   l6153 461E  
                                 l6401 2630                                   l7121 15A0  
                                 l6075 18FA                                   l7051 13E0  
                                 l6093 1972                                   l6069 18D8  
                                 l6405 264E                                   l6165 40DE  
                                 l7221 32AC                                   l7061 1410  
                                 l7141 15F4                                   l6095 197E  
                                 l6087 1956                                   l6079 1932  
                                 l6407 26AC                                   l6167 40EE  
                                 l7119 156A                                   l7127 15B0  
                                 l7039 13A6                                   l6177 4148  
                                 l6169 40F4                                   l6601 3E3A  
                                 l7241 3352                                   l7073 1474  
                                 l7065 1436                                   l7049 13D6  
                                 l6099 1998                                   l8115 37FA  
                                 l8107 37D0                                   l7411 23E8  
                                 l7403 23D6                                   l8211 42AE  
                                 l8203 428C                                   l5811 4EBC  
                                 l7251 33D0                                   l7235 3304  
                                 l6611 4F7A                                   l7091 14E2  
                                 l7139 15E6                                   l8117 3804  
                                 l8109 37E0                                   l8133 3876  
                                 l6381 2504                                   l6373 245A  
                                 l8301 0A62                                   l6605 3E44  
                                 l7253 33EA                                   l7261 3438  
                                 l7237 331E                                   l7245 336C  
                                 l7229 32F0                                   l9013 3FA0  
                                 l8127 3836                                   l7415 241E  
                                 l7343 21DA                                   l8143 400E  
                                 l8207 429A                                   l6391 259A  
                                 l6383 2522                                   l7255 3404  
                                 l7263 3466                                   l7239 3338  
                                 l7247 339A                                   l6615 4F90  
                                 l7191 31FC                                   l7175 31B4  
                                 l6543 417A                                   l9015 3FA6  
                                 l9031 3FCE                                   l9007 3F7C  
                                 _ADIE 007CEE                                   l8129 3846  
                                 l7601 0434                                   l7361 2292  
                                 l6393 25B8                                   l6385 2540  
                                 l8401 0DB8                                   l8305 0A6C  
                                 l7257 341E                                   l6553 4206  
                                 l7089 14D8                                   l9025 3FC2  
                                 l9017 3FAC                                   l9009 3F92  
                                 l8091 379C                                   l7611 045C  
                                 l7603 043A                                   l8155 4042  
                                 l8171 4092                                   l6395 25D6  
                                 l6387 255E                                   l6379 24E6  
                                 l8315 0A92                                   l7187 31EC  
                                 l7179 31C4                                   l6651 4690  
                                 l6635 4650                                   l6547 4190  
                                 l9027 3FC8                                   l5845 4572  
                                 l5829 4F6A                                   l7541 030A  
                                 l7461 00FA                                   l7373 22E2  
                                 l8157 404E                                   l8149 4024  
                                 l6397 25F4                                   l6389 257C  
                                 l8501 0FCE                                   l8405 0DC2  
                                 l8333 0AEE                                   l8309 0A84  
                                 l5847 457E                                   l8087 376C  
                                 l7703 063A                                   l7623 04A0  
                                 l7607 0444                                   l7551 0332  
                                 l7455 00EA                                   l7391 2370  
                                 l8175 40A6                                   l8167 4084  
                                 l8159 4054                                   l8191 4242  
                                 l6399 2612                                   l8423 0E0E  
                                 l8415 0DEC                                   l8351 0B3A  
                                 l8343 0B18                                   l6743 42FA  
                                 l6655 46A8                                   l6639 4666  
                                 l5857 45B4                                   l5849 4584  
                                 l5873 47D8                                   l5865 47A2  
                                 l7713 0662                                   l7633 04C8  
                                 l7545 0314                                   l7465 0112  
                                 l7457 00F0                                   l8505 0FE6  
                                 l8409 0DDA                                   l8337 0B06  
                                 l8329 0AE4                                   l8281 09F2  
                                 l8273 09D0                                   l6753 433C  
                                 l6593 3E0C                                   l5867 47AE  
                                 l5787 4F32                                   l7803 081C  
                                 l7707 0652                                   l7627 04B8  
                                 l7619 0496                                   l7571 0398  
                                 l7555 033C                                   l7379 2324  
                                 l8195 4256                                   l8187 4232  
                                 l8531 106E                                   l8523 104C  
                                 l8451 0EF6                                   l8443 0ED4  
                                 l8419 0DF6                                   l8371 0BC8  
                                 l8347 0B22                                   l8267 09B8  
                                 l6747 4310                                   l5869 47B4  
                                 l5981 160C                                   l5789 4F44  
                                 l7821 0878                                   l7733 06D6  
                                 l7725 06B4                                   l7717 067A  
                                 l7709 0658                                   l7653 053C  
                                 l7645 051A                                   l7637 04E0  
                                 l7629 04BE                                   l7581 03C0  
                                 l7549 032C                                   l8197 4262  
                                 l8541 108A                                   l8461 0F12  
                                 l8381 0C5E                                   l8373 0BE6  
                                 l8285 0A04                                   l8277 09DA  
                                 l8269 09BE                                   l6589 3E02  
                                 l6597 3E24                                   l5991 163C  
                                 l7911 2D3C                                   l7831 08A0  
                                 l7751 0738                                   l7743 06FE  
                                 l7735 06DC                                   l7671 059E  
                                 l7663 0564                                   l7655 0542  
                                 l7575 03B0                                   l7567 038E  
                                 l7559 0354                                   l7399 23A0  
                                 l8199 4268                                   l8527 1056  
                                 l8447 0EDE                                   l8391 0CF4  
                                 l8383 0C7C                                   l8375 0C04  
                                 l8367 0B8C                                   l5985 1620  
                                 l7913 2D42                                   l7825 0882  
                                 l7809 0842                                   l7761 0760  
                                 l7729 06BE                                   l7681 05C6  
                                 l7649 0524                                   l7593 0412  
                                 l7585 03D8                                   l7577 03B6  
                                 l8545 10A2                                   l8537 1080  
                                 l8465 0F2A                                   l8457 0F08  
                                 l8385 0C9A                                   l8377 0C22  
                                 l8369 0BAA                                   l5987 1632  
                                 l7931 2DFA                                   l7835 08AA  
                                 l7819 0872                                   l7755 0742  
                                 l7739 06E6                                   l7675 05A8  
                                 l7659 054C                                   l8571 1122  
                                 l8563 1100                                   l8491 0FB2  
                                 l8483 0F90                                   l8387 0CB8  
                                 l8379 0C40                                   l8395 0D12  
                                 l8299 0A5C                                   l5997 1670  
                                 l7829 089A                                   l7765 076A  
                                 l7685 05D0                                   l7597 041C  
                                 l8901 3CE8                                   l8581 113E  
                                 l8389 0CD6                                   l8397 0D76  
                                 l7943 2E1C                                   l7839 08C2  
                                 l7759 075A                                   l7679 05C0  
                                 l8911 3D06                                   l8903 3CEE  
                                 l8567 110A                                   l8487 0F9A  
                                 l6959 11FA                                   l7953 2E4C  
                                 l7881 4446                                   l7793 07F4  
                                 l7785 07D2                                   l8913 3D0C  
                                 l8905 3CF4                                   l8585 1156  
                                 l8577 1134                                   l8497 0FC4  
                                 l6985 1280                                   l6969 1244  
                                 l7971 4482                                   l7795 07FA  
                                 l7699 0630                                   l8915 3D12  
                                 l8907 3CFA                                   l8923 3D24  
                                 l7957 2E60                                   l7893 2C84  
                                 l7789 07DC                                   l8917 3D18  
                                 l8909 3D00                                   l8589 1162  
                                 l8845 3A4C                                   l7799 0804  
                                 l8919 3D1E                                   l8871 3AE8  
                                 l8847 3A60                                   l8883 3C64  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u6020 221C                                   u4260 4EBA  
                                 u6030 221E                                   u6200 028E  
                                 u7001 37F0                                   u7010 37F2  
                                 u5170 24DC                                   u5155 4820  
                                 _PEIE 007F96                                   u4540 176A  
                                 u6060 23C4                                   u4460 4A9A  
                                 u4470 4A9C                                   u6160 0126  
                                 u4480 4AE6                                   u5520 1206  
                                 u4481 4AE2                                   u4490 4AE8  
                                 u6090 240C                                   u4547 1760  
                                 u4580 17E2                                   u7060 3864  
                                 u6180 01DA                                   u6068 23C8  
                                 u5540 123C                                   _RCEN 007E2B  
                                 u8120 3B2E                                   u5720 1454  
                                 u6098 2410                                   u5538 120A  
                                 u4587 17D8                                   u7068 3868  
                                 u5830 311E                                   u9007 0F44  
                                 u5840 3174                                   u9017 0FA2  
                                 i2l66 510E                                   u6730 2CC6  
                                 u5930 32B8                                   u5738 1458  
                                 u9107 3CB6                                   u9027 0FD6  
                                 u6900 378A                                   u6740 2CC8  
                                 u9117 2136                                   u9037 1000  
                                 u5950 32EE                                   u5838 3122  
                                 u9207 2336                                   u9127 217A  
                                 u9047 105E                                   u6760 2D84  
                                 u5848 3178                                   u9217 2364  
                                 u9137 219C                                   u9057 1092  
                                 u8417 118A                                   u6770 2D86  
                                 u9307 0136                                   u9227 237E  
                                 u9147 21CA                                   u9067 10BC  
                                 u8507 13C8                                   u8427 12A0  
                                 u6908 378E                                   u5948 32BC  
                                 u9317 019C                                   u9237 3E6A  
                                 u9157 2232                                   u9077 1112  
                                 u8517 13FA                                   u8437 12EC  
                                 u6951 37C4                                   u9407 03C8  
                                 u9327 01BA                                   u9247 3EAE  
                                 u9167 2286                                   u9087 1146  
                                 u8607 1524                                   u8527 1404  
                                 u8447 12F4                                   u6960 37C6  
                                 u9417 0424                                   u9337 01EA  
                                 u9257 3ED0                                   u9177 22A6  
                                 u9097 3C72                                   u8617 152E  
                                 u8537 141E                                   u8457 1326  
                                 u6890 372E                                   u9507 066A  
                                 u9427 044C                                   u9347 0250  
                                 u9267 002C                                   u9187 22D4  
                                 u8707 30E6                                   u8627 1538  
                                 u8547 148E                                   u8467 1330  
                                 u9517 06C6                                   u9437 04A8  
                                 u9357 026E                                   u9277 0070  
                                 u9197 2318                                   u8717 3104  
                                 u8637 1540                                   u8557 14C6  
                                 u8477 134A                                   u9607 088A  
                                 u9527 06EE                                   u9447 04D0  
                                 u9367 029E                                   u9287 0092  
                                 u8807 3474                                   u8727 313C  
                                 u8647 154C                                   u8567 14FE  
                                 u8487 1374                                   u9617 08B2  
                                 u9537 074A                                   u9457 052C  
                                 u9377 031C                                   u9297 0102  
                                 u8817 34A6                                   u8737 315A  
                                 u8657 1556                                   u8577 1506  
                                 u8497 13C0                                   u6898 3732  
                                 u9707 2E36                                   u9627 43D8  
                                 u9547 0772                                   u9467 0554  
                                 u9387 0344                                   u8907 0A74  
                                 u8827 3DB8                                   u8747 320C  
                                 u8667 1562                                   u8587 1510  
                                 u9717 2E3E                                   u9637 4428  
                                 u9557 0794                                   u9477 05B0  
                                 u9397 03A0                                   u8917 0AA0  
                                 u8837 3E14                                   u8757 3240  
                                 u8677 15CA                                   u8597 151A  
                                 u9807 1B42                                   u9727 2E7A  
                                 u9647 443C                                   u9567 07E4  
                                 u9487 05D8                                   u8927 0AF6  
                                 u8847 3E4C                                   u8767 324A  
                                 u8687 4C72                                   u9817 1B8E  
                                 u9737 2E84                                   u9657 2C60  
                                 u9577 080C                                   u9497 0642  
                                 u8937 0B2A                                   u8857 4AF8  
                                 u8777 3270                                   u8697 466E  
                                 u9907 1DA4                                   u9827 1BC2  
                                 u9747 4F3A                                   u9667 2CDC  
                                 u9587 085C                                   u8947 0B54  
                                 u8867 4B2C                                   u8787 4F86  
                                 u9917 494A                                   u9837 1BF4  
                                 u9757 48BA                                   u9677 2D30  
                                 u9597 0866                                   u8957 0DCA  
                                 u8877 08E2                                   u8797 33C0  
                                 u9927 3706                                   u9847 1C40  
                                 u9767 1A44                                   u9687 2D9A  
                                 u8967 0DFE                                   u8887 09E2  
                                 u9937 381E                                   u9857 1C8C  
                                 u9777 1A90                                   u9697 2DEE  
                                 u8977 0E28                                   u8897 0A1E  
                                 u9947 3828                                   u9867 1CC0  
                                 u9787 1ADC                                   u8987 0EE6  
                                 u9957 4746                                   u9877 1CF2  
                                 u9797 1B10                                   u8997 0F1A  
                                 u9967 4750                                   u9887 1D3E  
                                 u9977 477C                                   u9897 1D72  
                                 u9987 4786                                   _RSEN 007E29  
                          _stopSignals 50B2                                   _Test 3C64  
                                 _back 005B                                   _main 3F32  
                                 _down 005F                                   _keys FAEF  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5034                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 006F                        __end_ofi2_putch 514C  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2E9A  
                          i2_lcdNibble 4962                        __end_of_Loading 15FE  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3E5C                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 40B0                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB0A  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 42B8  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB0A                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB22  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_68 FC92  
                                STR_92 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC81  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 416C                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 45CC  
                      __end_of___lwmod 47F0                                  i2l257 29AC  
                                i2l606 2F28                                  i2l930 39C4  
                                i2l836 2B78                                  i2l924 3958  
                                i2l928 39A4                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A36                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5140                        __end_of_handler 3A00  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4F4A  
                      __end_of_initLCD 4B36                         __CFG_EBTRB$OFF 000000  
                                _debug 005D                             i2isdigit@c 0003  
                                _getIR 4642                        __end_of_loadRTC 4344  
                      __end_of_readMAG 4AF0                        __end_of_dpowers FB0A  
                                _first 006B                                  _enter 0061  
                      __end_of_isdigit 4F74                                  _input 007D  
                                _putch 5120                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4FEA  
                     __end_ofi2_getRTC 4726                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 2128  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4CB8                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   printSortTimer@i_1132 0047  
                 __size_of_EEPROM_read 0018                        __initialization 4A0A  
                         __end_of_Test 3D78                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3FF2                           __end_of_keys FB00  
                         __end_of_sort 5056                             i2printf@ap 0020  
                           i2printf@cp 001E                          PusherTest@res 00AD  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1713 00B3  
                          _BlockerTest 36F8                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4CE8  
            i2_change_state_to_menu_22 4CB8                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1006 50F2                                 i2l1371 1F94  
                               i2l1818 4A00                                 i2l1828 4B6E  
                               i2l6221 1DD4                                 i2l6311 202A  
                               i2l6223 1DE2                                 i2l6305 2010  
                               i2l6241 1E7C                                 i2l6233 1E1A  
                               i2l6217 1DC4                                 i2l6331 208A  
                               i2l6323 206C                                 i2l6315 204E  
                               i2l6251 1EAE                                 i2l6227 1DE8  
                               i2l6341 20B6                                 i2l6317 2056  
                               i2l6261 1F06                                 i2l6253 1EB2  
                               i2l6335 209E                                 i2l6271 1F5A  
                               i2l6263 1F0C                                 i2l6351 4C90  
                               i2l6193 46FC                                 i2l6345 2104  
                               i2l6329 2082                                 i2l6265 1F1E  
                               i2l6249 1EA4                                 i2l6353 4C98  
                               i2l6339 20B0                                 i2l6291 1FDA  
                               i2l6259 1EFC                                 i2l6275 1F5E  
                               i2l6347 210C                                 i2l6523 3C08  
                               i2l6189 46EC                                 i2l6293 1FDE  
                               i2l6269 1F48                                 i2l6701 2F32  
                               i2l8231 50AA                                 i2l6199 4716  
                               i2l6287 1FC2                                 i2l6535 3C4C  
                               i2l6527 3C18                                 i2l6711 2FA0  
                               i2l6703 2F48                                 i2l5921 508E  
                               i2l6721 300E                                 i2l6713 2FB6  
                               i2l6705 2F5E                                 i2l9113 39C2  
                               i2l8227 509A                                 i2l5931 49CE  
                               i2l6723 3024                                 i2l6715 2FCC  
                               i2l6707 2F74                                 i2l5933 49D6  
                               i2l6901 369C                                 i2l6821 3582  
                               i2l6805 354A                                 i2l6717 2FE2  
                               i2l6709 2F8A                                 i2l9045 38F6  
                               i2l9053 3910                                 i2l5943 49F6  
                               i2l5935 49DA                                 i2l5951 4B44  
                               i2l6823 3588                                 i2l6807 355A  
                               i2l6815 3568                                 i2l6719 2FF8  
                               i2l6727 303A                                 i2l9047 38FA  
                               i2l5953 4B4C                                 i2l6905 36AE  
                               i2l6825 358E                                 i2l6833 35A0  
                               i2l6809 355E                                 i2l6729 3094  
                               i2l5955 4B50                                 i2l6827 3594  
                               i2l6819 357C                                 i2l6915 36CA  
                               i2l8603 2720                                 i2l9091 3978  
                               i2l9067 392C                                 i2l6909 36C0  
                               i2l6853 35FC                                 i2l6845 35E4  
                               i2l6829 359A                                 i2l8701 2882  
                               i2l8621 275E                                 i2l8613 2742  
                               i2l8605 2726                                 i2l5959 4B64  
                               i2l6863 3626                                 i2l6695 2EC6  
                               i2l5897 500A                                 i2l6873 3644  
                               i2l8721 28D0                                 i2l8713 28B4  
                               i2l8705 2890                                 i2l8641 2798  
                               i2l8633 277A                                 i2l8617 2750  
                               i2l8609 2734                                 i2l9089 3976  
                               i2l6875 3648                                 i2l6859 360A  
                               i2l6893 3678                                 i2l6869 3630  
                               i2l6797 3530                                 i2l8741 291E  
                               i2l8733 2902                                 i2l8725 28DE  
                               i2l8717 28C2                                 i2l8709 289E  
                               i2l8661 27DE                                 i2l8653 27C2  
                               i2l8645 27A6                                 i2l8637 2788  
                               i2l8629 276C                                 i2l6887 366A  
                               i2l6879 3652                                 i2l9463 35B8  
                               i2l9455 2960                                 i2l8751 2942  
                               i2l6897 368A                                 i2l9465 35D4  
                               i2l9457 2982                                 i2l8745 2934  
                               i2l8737 2910                                 i2l8729 28F4  
                               i2l8681 2834                                 i2l8673 2810  
                               i2l8665 27F4                                 i2l8657 27D0  
                               i2l8649 27B4                                 i2l9459 299E  
                               i2l8933 29BC                                 i2l8693 285E  
                               i2l8685 2842                                 i2l8677 281E  
                               i2l8669 2802                                 i2l8943 2A26  
                               i2l8937 29CC                                 i2l8697 2874  
                               i2l8689 2850                                 i2l8955 2AEE  
                               i2l8981 2BB4                                 i2l8967 2B46  
                               i2l8975 2B7A                                 i2l8979 2BAE  
              _f_most_recent_sort_time 0069                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4F9C                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5034  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 3512                                 ___wmul 4C1E  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4C54                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 4344  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5078                                 _initUI 4E68  
                               _readIR 4A58                                 _logRun 3A00  
                               getIR@i 0087                                 clear_0 4A30  
                               clear_1 4A3C                                 clear_2 4A48  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 48AC                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 15FE  
                            ??_handler 004B                __size_of_initGlobalVars 0082  
                         ?_retrieveLog 0007                                 _strcpy 4BE8  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4FC4  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4F9C  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4A0A                       __end_of_printRTC 26F0  
                         __mediumconst FAEE                      __end_ofi2___lwmod 4B78  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 3F32                      __end_ofi2_lcdInst 5158  
                           _PusherTest 2C52                      __end_ofi2_isdigit 5096  
                           __accesstop 0080                __end_of__initialization 4A4E  
                        ?_inputHandler 002A                  _most_recent_sort_time 0075  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 50E4  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 5196                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 516C                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 46B4                            i2printRTC@i 0041  
                        _initSortTimer 416C            __end_of_updateServoPosition 4642  
                        __end_of_putch 5130                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 32FA  
                           __end_of_UI 1170                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 4F1E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4EF2                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 012F  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3D78  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3228 0137                      __end_of_SpeedTest 444E  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 44D2                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2334 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 5140                              ?_initTime 0080  
                      _f_loadingNewCan 00EA                        i2printRTC@month 003D  
                __size_of_Distribution 0218            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 478E                                _Loading 1170  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3FF2  
                              ___awmod 4216                             _initServos 4908  
                              ___lldiv 40B0                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4554  
                              ___lwmod 478E                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4A0A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 44D2                                _lcdInst 5130  
                              _handler 0008                                __ptext0 3F32  
                              __ptext1 50B2                                __ptext2 5034  
                              __ptext3 1170                                __ptext4 416C  
                              __ptext5 44D2                                __ptext6 4C54  
                              __ptext7 4642                                __ptext8 4A58  
                              __ptext9 30D0                        __size_of_printf 0438  
                              _readADC 4F1E                        __size_of_strcpy 0036  
                              _initLCD 4AF0                                _cur_can 00E4  
                              _loadRTC 42B8                                _readMAG 4AA4  
                              _dpowers FB00                     actuatorTest@i_1661 00AE  
                   actuatorTest@i_1670 00B4                     actuatorTest@i_1662 00AF  
                   actuatorTest@i_1654 00AD                     actuatorTest@i_1671 00B5  
                   actuatorTest@i_1680 00BA                     actuatorTest@i_1664 00B0  
                   actuatorTest@i_1681 00BB                     actuatorTest@i_1673 00B6  
                   actuatorTest@i_1665 00B1                     actuatorTest@i_1690 00C0  
                   actuatorTest@i_1674 00B7                     actuatorTest@i_1691 00C1  
                   actuatorTest@i_1683 00BC                     actuatorTest@i_1667 00B2  
                   actuatorTest@i_1684 00BD                     actuatorTest@i_1676 00B8  
                   actuatorTest@i_1668 00B3                     actuatorTest@i_1693 00C2  
                   actuatorTest@i_1677 00B9                     actuatorTest@i_1694 00C3  
                   actuatorTest@i_1686 00BE                     actuatorTest@i_1687 00BF  
                              _isdigit 4F4A                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 32FA                         __pintcode_body 387C  
                 end_of_initialization 4A4E                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 387C                    i2___wmul@multiplier 0001  
                            i2u1000_47 2B20                              i2u1001_47 497A  
                            i2u1002_47 4984                              i2u1003_47 49A6  
                            i2u1004_47 49B0                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C                              i2u1005_47 50A2  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 50B2  
               __end_of_initGlobalVars 4554                             _sensorTest 2128  
                  __size_of_PusherTest 0248                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 36F8                           ??_BothServos 00AB  
                __end_of_machineConfig 48AC                             _updateMenu 26F0  
                    i2_I2C_Master_Read 4FEA                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 510E                      i2_I2C_Master_Stop 5184  
                    i2___lwdiv@divisor 0008                        _log_count_total 0073  
                            i2___lwdiv 49B8                              i2___lwmod 4B36  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 30D0  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 514C  
                        Loading@i_1103 00B6                          Loading@i_1104 00B8  
                        Loading@i_1106 00BA                          Loading@i_1107 00BC  
                        Loading@i_1109 00BE                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 001A  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5078  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1DBA  
                          PusherTest@i 00B1                    __end_of_EEPROM_read 50E4  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4C54                         __end_of_getMAG 4C86  
                       __end_of_getRTC 43CA                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4E96                         __end_of_readIR 4AA4  
                       __end_of_logRun 3B44                       i2___wmul@product 0005  
                       __end_of_printf 1A36                           i2printf@flag 0026  
                       __end_of_strcpy 4C1E              __end_ofi2_I2C_Master_Read 5010  
            __end_ofi2_I2C_Master_Wait 5120                           i2printf@prec 001D  
                  start_initialization 4A0A              __end_ofi2_I2C_Master_Stop 518C  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1340 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 43CA                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 444E  
                          ?_sensorTest 0001                            __pdataBANK1 0137  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1120 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2459 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1978 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1709 00AF  
                      _count_pop_w_tab 0131                            _EEPROM_read 50CC  
                   __end_of_PortTestA5 4908                       _I2C_Master_Start 517C  
                            _f_lastCan 00E8                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5158  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 4726                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 2E9A                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 006D  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3E5C  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 022A  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5194             __end_ofi2_I2C_Master_Write 516C  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 3512                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               _PIR2bits 000FA1  
                             i2u436_40 5008                               i2u536_40 2F28  
                             i2u491_40 1EE0                               i2u491_47 1ED6  
                             i2u820_40 2B50                               i2u822_40 2B78  
                             i2u821_48 2B52                               i2u495_40 1F40  
                             i2u495_47 1F36                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                       __CFG_WDTPS$32768 000000  
                             i2u999_47 3550                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4FC4                          lcdNibble@data 0081  
                             i2_getRTC 46B4                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DBA                               i2_strcpy 4C86  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4A1E                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 50FA                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 048E  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4216                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4D48  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4BB0  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4B78  
              _change_state_to_menu_23 4D18                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4E38                _change_state_to_logs_12 4E08  
              _change_state_to_logs_22 4DD8                _change_state_to_logs_23 4EC4  
              _change_state_to_logs_33 4DA8                _change_state_to_logs_34 4D78  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 39F8                             _EEPROMTest 5194  
                      _I2C_Master_Init 47F0                       __size_of_readADC 002C  
                      _I2C_Master_Read 4E96                       __size_of_initLCD 0046  
                         _f_ID_receive 0063                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 50FA  
                      _I2C_Master_Stop 5174                       __size_of_isdigit 002A  
                             _delay_ms 4F74                         _printSortTimer 29B0  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3C64                               __ptext10 4F74  
                             __ptext11 32FA                               __ptext20 4EF2  
                             __ptext12 4850                               __ptext21 5056  
                             __ptext13 3A00                               __ptext30 4E96  
                             __ptext22 4AF0                               __ptext14 3D78  
                             __ptext31 50FA                               __ptext23 08CA  
                             __ptext15 50CC                               __ptext40 0012  
                             __ptext32 4B78                               __ptext24 2426  
                             __ptext16 4E68                               __ptext41 43CA  
                             __ptext33 4BB0                               __ptext25 4BE8  
                             __ptext17 42B8                               __ptext50 36F8  
                             __ptext42 2C52                               __ptext34 4216  
                             __ptext26 4344                               __ptext18 47F0  
                             __ptext51 15FE                               __ptext43 4F1E  
                             __ptext35 3FF2                               __ptext27 5158  
                             __ptext19 40B0                               __ptext60 26F0  
                             __ptext52 5120                               __ptext44 444E  
                             __ptext36 3C64                               __ptext28 5174  
                             __ptext61 4F9C                               __ptext53 4F4A  
                             __ptext45 48AC                               __ptext37 2128  
                             __ptext29 517C                               __ptext70 4DA8  
                             __ptext62 2E9A                               __ptext54 4C1E  
                             __ptext46 5194                               __ptext38 4AA4  
                             __ptext71 4EC4                               __ptext63 4C86  
                             __ptext55 478E                               __ptext47 1A36  
                             __ptext39 3E5C                               __ptext80 5140  
                             __ptext72 4DD8                               __ptext64 3512  
                             __ptext56 4554                               __ptext48 4908  
                             __ptext81 5078                               __ptext73 4E08  
                             __ptext65 4CB8                               __ptext57 5130  
                             __ptext49 45CC                               __ptext90 518C  
                             __ptext82 4FC4                               __ptext74 4E38  
                             __ptext66 4CE8                               __ptext58 4726  
                             __ptext91 4FEA                               __ptext83 4B36  
                             __ptext75 5010                               __ptext67 4D18  
                             __ptext92 510E                               __ptext84 49B8  
                             __ptext76 3B44                               __ptext68 4D48  
                             __ptext93 5096                               __ptext85 514C  
                             __ptext77 50E4                               __ptext69 4D78  
                             __ptext86 4962                               __ptext78 29B0  
                             __ptext87 46B4                               __ptext79 1DBA  
                             __ptext88 5162                               __ptext89 5184  
                             _dispLogs 5010                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1978 0002                     __end_of_initServos 4962  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 5056                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 45CC  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 2426                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0065                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4D18  
    __end_ofi2_change_state_to_menu_22 4CE8                               loadRTC@i 0096  
               __end_of_printSortTimer 2C52                              putch@data 0082  
             __end_of_I2C_Master_Start 5184                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5162                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E0  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2426  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 50CC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29B0                __end_of_I2C_Master_Init 4850  
              __end_of_I2C_Master_Read 4EC4                __end_of_I2C_Master_Wait 510E  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 517C  
                          lcdInst@data 0082                          printRTC@F3219 013B  
                         retrieveLog@i 000E                            _retrieveLog 3B44  
                  __end_ofi2_lcdNibble 49B8                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0133  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4850                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
