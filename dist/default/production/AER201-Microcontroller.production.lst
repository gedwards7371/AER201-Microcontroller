

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 03:48:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.40
    99                           ; Generated 01/12/2016 GMT
   100                           ; 
   101                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4620 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK1
   134  0032BC                     __pidataBANK1:
   135                           	opt stack 0
   136                           
   137                           ;initializer for UI@F3220
   138  0032BC  4D                 	db	77
   139  0032BD  4D                 	db	77
   140  0032BE  4D                 	db	77
   141  0032BF  00                 	db	0
   142                           
   143                           ;initializer for printRTC@F3213
   144  0032C0  4D                 	db	77
   145  0032C1  4D                 	db	77
   146  0032C2  4D                 	db	77
   147  0032C3  00                 	db	0
   148                           
   149                           	psect	mediumconst
   150  00FD90                     __pmediumconst:
   151                           	opt stack 0
   152  00FD90  00                 	db	0
   153  00FD91                     _keys:
   154                           	opt stack 0
   155  00FD91  31                 	db	49
   156  00FD92  32                 	db	50
   157  00FD93  33                 	db	51
   158  00FD94  41                 	db	65
   159  00FD95  34                 	db	52
   160  00FD96  35                 	db	53
   161  00FD97  36                 	db	54
   162  00FD98  42                 	db	66
   163  00FD99  37                 	db	55
   164  00FD9A  38                 	db	56
   165  00FD9B  39                 	db	57
   166  00FD9C  43                 	db	67
   167  00FD9D  2A                 	db	42
   168  00FD9E  30                 	db	48
   169  00FD9F  23                 	db	35
   170  00FDA0  44                 	db	68
   171  00FDA1  00                 	db	0
   172  00FDA2                     __end_of_keys:
   173                           	opt stack 0
   174  00FDA2                     _dpowers:
   175                           	opt stack 0
   176  00FDA2  0001               	dw	1
   177  00FDA4  000A               	dw	10
   178  00FDA6  0064               	dw	100
   179  00FDA8  03E8               	dw	1000
   180  00FDAA  2710               	dw	10000
   181  00FDAC                     __end_of_dpowers:
   182                           	opt stack 0
   183  0000                     _ADCON0	set	4034
   184  0000                     _ADCON0bits	set	4034
   185  0000                     _ADCON1	set	4033
   186  0000                     _ADRESH	set	4036
   187  0000                     _ADRESL	set	4035
   188  0000                     _CMCONbits	set	4020
   189  0000                     _CVRCON	set	4021
   190  0000                     _EEADR	set	4009
   191  0000                     _EEADRH	set	4010
   192  0000                     _EECON1bits	set	4006
   193  0000                     _EECON2	set	4007
   194  0000                     _EEDATA	set	4008
   195  0000                     _INTCONbits	set	4082
   196  0000                     _LATA	set	3977
   197  0000                     _LATAbits	set	3977
   198  0000                     _LATB	set	3978
   199  0000                     _LATC	set	3979
   200  0000                     _LATCbits	set	3979
   201  0000                     _LATD	set	3980
   202  0000                     _LATDbits	set	3980
   203  0000                     _LATE	set	3981
   204  0000                     _OSCCON	set	4051
   205  0000                     _OSCTUNEbits	set	3995
   206  0000                     _PIR2bits	set	4001
   207  0000                     _PORTAbits	set	3968
   208  0000                     _PORTB	set	3969
   209  0000                     _PORTBbits	set	3969
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _TMR0H	set	4055
   218  0000                     _TMR0L	set	4054
   219  0000                     _TMR1H	set	4047
   220  0000                     _TMR1L	set	4046
   221  0000                     _TMR3H	set	4019
   222  0000                     _TMR3L	set	4018
   223  0000                     _TRISA	set	3986
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISE	set	3990
   228  0000                     _ACKDT	set	32301
   229  0000                     _ACKEN	set	32300
   230  0000                     _ADFM	set	32263
   231  0000                     _ADIE	set	31982
   232  0000                     _ADON	set	32272
   233  0000                     _INT1IE	set	32643
   234  0000                     _INT1IF	set	32640
   235  0000                     _PEIE	set	32662
   236  0000                     _PEN	set	32298
   237  0000                     _RCEN	set	32299
   238  0000                     _RSEN	set	32297
   239  0000                     _SEN	set	32296
   240  0000                     _TMR0IE	set	32661
   241  0000                     _TMR0IF	set	32658
   242  0000                     _TMR0ON	set	32431
   243  0000                     _TMR1IE	set	31976
   244  0000                     _TMR1IF	set	31984
   245  0000                     _TMR1ON	set	32360
   246  0000                     _TMR2IE	set	31977
   247  0000                     _TMR3IE	set	32001
   248  0000                     _TMR3IF	set	32009
   249  0000                     _TMR3ON	set	32136
   250  0000                     _TRISC3	set	31907
   251  0000                     _TRISC4	set	31908
   252  0000                     _VCFG0	set	32268
   253  0000                     _VCFG1	set	32269
   254  0000                     _nRBPU	set	32655
   255  00FDAC                     STR_21:
   256  00FDAC  25                 	db	37
   257  00FDAD  30                 	db	48	;'0'
   258  00FDAE  32                 	db	50	;'2'
   259  00FDAF  64                 	db	100	;'d'
   260  00FDB0  25                 	db	37
   261  00FDB1  73                 	db	115	;'s'
   262  00FDB2  20                 	db	32
   263  00FDB3  7C                 	db	124
   264  00FDB4  20                 	db	32
   265  00FDB5  25                 	db	37
   266  00FDB6  30                 	db	48	;'0'
   267  00FDB7  32                 	db	50	;'2'
   268  00FDB8  64                 	db	100	;'d'
   269  00FDB9  3A                 	db	58	;':'
   270  00FDBA  25                 	db	37
   271  00FDBB  30                 	db	48	;'0'
   272  00FDBC  32                 	db	50	;'2'
   273  00FDBD  64                 	db	100	;'d'
   274  00FDBE  3A                 	db	58	;':'
   275  00FDBF  25                 	db	37
   276  00FDC0  30                 	db	48	;'0'
   277  00FDC1  32                 	db	50	;'2'
   278  00FDC2  64                 	db	100	;'d'
   279  00FDC3  00                 	db	0
   280  00FDC4                     STR_2:
   281  00FDC4  54                 	db	84	;'T'
   282  00FDC5  49                 	db	73	;'I'
   283  00FDC6  4D                 	db	77	;'M'
   284  00FDC7  45                 	db	69	;'E'
   285  00FDC8  3A                 	db	58	;':'
   286  00FDC9  20                 	db	32
   287  00FDCA  25                 	db	37
   288  00FDCB  30                 	db	48	;'0'
   289  00FDCC  32                 	db	50	;'2'
   290  00FDCD  64                 	db	100	;'d'
   291  00FDCE  3A                 	db	58	;':'
   292  00FDCF  25                 	db	37
   293  00FDD0  30                 	db	48	;'0'
   294  00FDD1  32                 	db	50	;'2'
   295  00FDD2  64                 	db	100	;'d'
   296  00FDD3  3A                 	db	58	;':'
   297  00FDD4  25                 	db	37
   298  00FDD5  30                 	db	48	;'0'
   299  00FDD6  32                 	db	50	;'2'
   300  00FDD7  64                 	db	100	;'d'
   301  00FDD8  00                 	db	0
   302  00FDD9                     STR_65:
   303  00FDD9  54                 	db	84	;'T'
   304  00FDDA  49                 	db	73	;'I'
   305  00FDDB  4D                 	db	77	;'M'
   306  00FDDC  45                 	db	69	;'E'
   307  00FDDD  20                 	db	32
   308  00FDDE  25                 	db	37
   309  00FDDF  30                 	db	48	;'0'
   310  00FDE0  32                 	db	50	;'2'
   311  00FDE1  64                 	db	100	;'d'
   312  00FDE2  3A                 	db	58	;':'
   313  00FDE3  25                 	db	37
   314  00FDE4  30                 	db	48	;'0'
   315  00FDE5  32                 	db	50	;'2'
   316  00FDE6  64                 	db	100	;'d'
   317  00FDE7  3A                 	db	58	;':'
   318  00FDE8  25                 	db	37
   319  00FDE9  30                 	db	48	;'0'
   320  00FDEA  32                 	db	50	;'2'
   321  00FDEB  64                 	db	100	;'d'
   322  00FDEC  00                 	db	0
   323  00FDED                     STR_27:
   324  00FDED  4E                 	db	78	;'N'
   325  00FDEE  4F                 	db	79	;'O'
   326  00FDEF  20                 	db	32
   327  00FDF0  4C                 	db	76	;'L'
   328  00FDF1  41                 	db	65	;'A'
   329  00FDF2  42                 	db	66	;'B'
   330  00FDF3  3A                 	db	58	;':'
   331  00FDF4  20                 	db	32
   332  00FDF5  25                 	db	37
   333  00FDF6  64                 	db	100	;'d'
   334  00FDF7  7C                 	db	124
   335  00FDF8  4C                 	db	76	;'L'
   336  00FDF9  41                 	db	65	;'A'
   337  00FDFA  42                 	db	66	;'B'
   338  00FDFB  3A                 	db	58	;':'
   339  00FDFC  20                 	db	32
   340  00FDFD  25                 	db	37
   341  00FDFE  64                 	db	100	;'d'
   342  00FDFF  00                 	db	0
   343  00FE00                     STR_25:
   344  00FE00  4E                 	db	78	;'N'
   345  00FE01  4F                 	db	79	;'O'
   346  00FE02  20                 	db	32
   347  00FE03  54                 	db	84	;'T'
   348  00FE04  41                 	db	65	;'A'
   349  00FE05  42                 	db	66	;'B'
   350  00FE06  3A                 	db	58	;':'
   351  00FE07  20                 	db	32
   352  00FE08  25                 	db	37
   353  00FE09  64                 	db	100	;'d'
   354  00FE0A  7C                 	db	124
   355  00FE0B  54                 	db	84	;'T'
   356  00FE0C  41                 	db	65	;'A'
   357  00FE0D  42                 	db	66	;'B'
   358  00FE0E  3A                 	db	58	;':'
   359  00FE0F  20                 	db	32
   360  00FE10  25                 	db	37
   361  00FE11  64                 	db	100	;'d'
   362  00FE12  00                 	db	0
   363  00FE13                     STR_3:
   364  00FE13  2D                 	db	45
   365  00FE14  2D                 	db	45
   366  00FE15  20                 	db	32
   367  00FE16  4C                 	db	76	;'L'
   368  00FE17  4F                 	db	79	;'O'
   369  00FE18  47                 	db	71	;'G'
   370  00FE19  20                 	db	32
   371  00FE1A  25                 	db	37
   372  00FE1B  32                 	db	50	;'2'
   373  00FE1C  64                 	db	100	;'d'
   374  00FE1D  20                 	db	32
   375  00FE1E  48                 	db	72	;'H'
   376  00FE1F  45                 	db	69	;'E'
   377  00FE20  52                 	db	82	;'R'
   378  00FE21  45                 	db	69	;'E'
   379  00FE22  2D                 	db	45
   380  00FE23  2D                 	db	45
   381  00FE24  00                 	db	0
   382  00FE25                     STR_41:
   383  00FE25  4C                 	db	76	;'L'
   384  00FE26  4F                 	db	79	;'O'
   385  00FE27  47                 	db	71	;'G'
   386  00FE28  20                 	db	32
   387  00FE29  31                 	db	49	;'1'
   388  00FE2A  20                 	db	32
   389  00FE2B  20                 	db	32
   390  00FE2C  20                 	db	32
   391  00FE2D  20                 	db	32
   392  00FE2E  20                 	db	32
   393  00FE2F  20                 	db	32
   394  00FE30  20                 	db	32
   395  00FE31  20                 	db	32
   396  00FE32  20                 	db	32
   397  00FE33  20                 	db	32
   398  00FE34  20                 	db	32
   399  00FE35  00                 	db	0
   400  00FE36                     STR_40:
   401  00FE36  4C                 	db	76	;'L'
   402  00FE37  4F                 	db	79	;'O'
   403  00FE38  47                 	db	71	;'G'
   404  00FE39  20                 	db	32
   405  00FE3A  32                 	db	50	;'2'
   406  00FE3B  20                 	db	32
   407  00FE3C  20                 	db	32
   408  00FE3D  20                 	db	32
   409  00FE3E  20                 	db	32
   410  00FE3F  20                 	db	32
   411  00FE40  20                 	db	32
   412  00FE41  20                 	db	32
   413  00FE42  20                 	db	32
   414  00FE43  20                 	db	32
   415  00FE44  20                 	db	32
   416  00FE45  20                 	db	32
   417  00FE46  00                 	db	0
   418  00FE47                     STR_44:
   419  00FE47  4C                 	db	76	;'L'
   420  00FE48  4F                 	db	79	;'O'
   421  00FE49  47                 	db	71	;'G'
   422  00FE4A  20                 	db	32
   423  00FE4B  33                 	db	51	;'3'
   424  00FE4C  20                 	db	32
   425  00FE4D  20                 	db	32
   426  00FE4E  20                 	db	32
   427  00FE4F  20                 	db	32
   428  00FE50  20                 	db	32
   429  00FE51  20                 	db	32
   430  00FE52  20                 	db	32
   431  00FE53  20                 	db	32
   432  00FE54  20                 	db	32
   433  00FE55  20                 	db	32
   434  00FE56  20                 	db	32
   435  00FE57  00                 	db	0
   436  00FE58                     STR_48:
   437  00FE58  4C                 	db	76	;'L'
   438  00FE59  4F                 	db	79	;'O'
   439  00FE5A  47                 	db	71	;'G'
   440  00FE5B  20                 	db	32
   441  00FE5C  34                 	db	52	;'4'
   442  00FE5D  20                 	db	32
   443  00FE5E  20                 	db	32
   444  00FE5F  20                 	db	32
   445  00FE60  20                 	db	32
   446  00FE61  20                 	db	32
   447  00FE62  20                 	db	32
   448  00FE63  20                 	db	32
   449  00FE64  20                 	db	32
   450  00FE65  20                 	db	32
   451  00FE66  20                 	db	32
   452  00FE67  20                 	db	32
   453  00FE68  00                 	db	0
   454  00FE69                     STR_36:
   455  00FE69  33                 	db	51	;'3'
   456  00FE6A  2E                 	db	46
   457  00FE6B  20                 	db	32
   458  00FE6C  4C                 	db	76	;'L'
   459  00FE6D  4F                 	db	79	;'O'
   460  00FE6E  47                 	db	71	;'G'
   461  00FE6F  53                 	db	83	;'S'
   462  00FE70  20                 	db	32
   463  00FE71  20                 	db	32
   464  00FE72  20                 	db	32
   465  00FE73  20                 	db	32
   466  00FE74  20                 	db	32
   467  00FE75  20                 	db	32
   468  00FE76  20                 	db	32
   469  00FE77  20                 	db	32
   470  00FE78  20                 	db	32
   471  00FE79  00                 	db	0
   472  00FE7A                     STR_32:
   473  00FE7A  32                 	db	50	;'2'
   474  00FE7B  2E                 	db	46
   475  00FE7C  20                 	db	32
   476  00FE7D  53                 	db	83	;'S'
   477  00FE7E  4F                 	db	79	;'O'
   478  00FE7F  52                 	db	82	;'R'
   479  00FE80  54                 	db	84	;'T'
   480  00FE81  20                 	db	32
   481  00FE82  20                 	db	32
   482  00FE83  20                 	db	32
   483  00FE84  20                 	db	32
   484  00FE85  20                 	db	32
   485  00FE86  20                 	db	32
   486  00FE87  20                 	db	32
   487  00FE88  20                 	db	32
   488  00FE89  20                 	db	32
   489  00FE8A  00                 	db	0
   490  00FE8B                     STR_33:
   491  00FE8B  31                 	db	49	;'1'
   492  00FE8C  2E                 	db	46
   493  00FE8D  20                 	db	32
   494  00FE8E  44                 	db	68	;'D'
   495  00FE8F  41                 	db	65	;'A'
   496  00FE90  54                 	db	84	;'T'
   497  00FE91  45                 	db	69	;'E'
   498  00FE92  2F                 	db	47
   499  00FE93  54                 	db	84	;'T'
   500  00FE94  49                 	db	73	;'I'
   501  00FE95  4D                 	db	77	;'M'
   502  00FE96  45                 	db	69	;'E'
   503  00FE97  20                 	db	32
   504  00FE98  20                 	db	32
   505  00FE99  20                 	db	32
   506  00FE9A  20                 	db	32
   507  00FE9B  00                 	db	0
   508  00FE9C                     STR_24:
   509  00FE9C  20                 	db	32
   510  00FE9D  2D                 	db	45
   511  00FE9E  2D                 	db	45
   512  00FE9F  20                 	db	32
   513  00FEA0  50                 	db	80	;'P'
   514  00FEA1  4F                 	db	79	;'O'
   515  00FEA2  50                 	db	80	;'P'
   516  00FEA3  20                 	db	32
   517  00FEA4  20                 	db	32
   518  00FEA5  43                 	db	67	;'C'
   519  00FEA6  41                 	db	65	;'A'
   520  00FEA7  4E                 	db	78	;'N'
   521  00FEA8  20                 	db	32
   522  00FEA9  2D                 	db	45
   523  00FEAA  2D                 	db	45
   524  00FEAB  20                 	db	32
   525  00FEAC  00                 	db	0
   526  00FEAD                     STR_26:
   527  00FEAD  20                 	db	32
   528  00FEAE  2D                 	db	45
   529  00FEAF  2D                 	db	45
   530  00FEB0  20                 	db	32
   531  00FEB1  53                 	db	83	;'S'
   532  00FEB2  4F                 	db	79	;'O'
   533  00FEB3  55                 	db	85	;'U'
   534  00FEB4  50                 	db	80	;'P'
   535  00FEB5  20                 	db	32
   536  00FEB6  43                 	db	67	;'C'
   537  00FEB7  41                 	db	65	;'A'
   538  00FEB8  4E                 	db	78	;'N'
   539  00FEB9  20                 	db	32
   540  00FEBA  2D                 	db	45
   541  00FEBB  2D                 	db	45
   542  00FEBC  20                 	db	32
   543  00FEBD  00                 	db	0
   544  00FEBE                     STR_1:
   545  00FEBE  21                 	db	33
   546  00FEBF  53                 	db	83	;'S'
   547  00FEC0  4F                 	db	79	;'O'
   548  00FEC1  52                 	db	82	;'R'
   549  00FEC2  54                 	db	84	;'T'
   550  00FEC3  20                 	db	32
   551  00FEC4  43                 	db	67	;'C'
   552  00FEC5  4F                 	db	79	;'O'
   553  00FEC6  4E                 	db	78	;'N'
   554  00FEC7  43                 	db	67	;'C'
   555  00FEC8  4C                 	db	76	;'L'
   556  00FEC9  55                 	db	85	;'U'
   557  00FECA  44                 	db	68	;'D'
   558  00FECB  45                 	db	69	;'E'
   559  00FECC  44                 	db	68	;'D'
   560  00FECD  21                 	db	33
   561  00FECE  00                 	db	0
   562  00FECF                     STR_28:
   563  00FECF  2D                 	db	45
   564  00FED0  2D                 	db	45
   565  00FED1  20                 	db	32
   566  00FED2  54                 	db	84	;'T'
   567  00FED3  4F                 	db	79	;'O'
   568  00FED4  54                 	db	84	;'T'
   569  00FED5  41                 	db	65	;'A'
   570  00FED6  4C                 	db	76	;'L'
   571  00FED7  20                 	db	32
   572  00FED8  43                 	db	67	;'C'
   573  00FED9  41                 	db	65	;'A'
   574  00FEDA  4E                 	db	78	;'N'
   575  00FEDB  53                 	db	83	;'S'
   576  00FEDC  20                 	db	32
   577  00FEDD  2D                 	db	45
   578  00FEDE  2D                 	db	45
   579  00FEDF  00                 	db	0
   580  00FEE0                     STR_39:
   581  00FEE0  4C                 	db	76	;'L'
   582  00FEE1  4F                 	db	79	;'O'
   583  00FEE2  47                 	db	71	;'G'
   584  00FEE3  20                 	db	32
   585  00FEE4  31                 	db	49	;'1'
   586  00FEE5  20                 	db	32
   587  00FEE6  20                 	db	32
   588  00FEE7  20                 	db	32
   589  00FEE8  20                 	db	32
   590  00FEE9  20                 	db	32
   591  00FEEA  20                 	db	32
   592  00FEEB  20                 	db	32
   593  00FEEC  20                 	db	32
   594  00FEED  20                 	db	32
   595  00FEEE  20                 	db	32
   596  00FEEF  3C                 	db	60	;'<'
   597  00FEF0  00                 	db	0
   598  00FEF1                     STR_42:
   599  00FEF1  4C                 	db	76	;'L'
   600  00FEF2  4F                 	db	79	;'O'
   601  00FEF3  47                 	db	71	;'G'
   602  00FEF4  20                 	db	32
   603  00FEF5  32                 	db	50	;'2'
   604  00FEF6  20                 	db	32
   605  00FEF7  20                 	db	32
   606  00FEF8  20                 	db	32
   607  00FEF9  20                 	db	32
   608  00FEFA  20                 	db	32
   609  00FEFB  20                 	db	32
   610  00FEFC  20                 	db	32
   611  00FEFD  20                 	db	32
   612  00FEFE  20                 	db	32
   613  00FEFF  20                 	db	32
   614  00FF00  3C                 	db	60	;'<'
   615  00FF01  00                 	db	0
   616  00FF02                     STR_46:
   617  00FF02  4C                 	db	76	;'L'
   618  00FF03  4F                 	db	79	;'O'
   619  00FF04  47                 	db	71	;'G'
   620  00FF05  20                 	db	32
   621  00FF06  33                 	db	51	;'3'
   622  00FF07  20                 	db	32
   623  00FF08  20                 	db	32
   624  00FF09  20                 	db	32
   625  00FF0A  20                 	db	32
   626  00FF0B  20                 	db	32
   627  00FF0C  20                 	db	32
   628  00FF0D  20                 	db	32
   629  00FF0E  20                 	db	32
   630  00FF0F  20                 	db	32
   631  00FF10  20                 	db	32
   632  00FF11  3C                 	db	60	;'<'
   633  00FF12  00                 	db	0
   634  00FF13                     STR_50:
   635  00FF13  4C                 	db	76	;'L'
   636  00FF14  4F                 	db	79	;'O'
   637  00FF15  47                 	db	71	;'G'
   638  00FF16  20                 	db	32
   639  00FF17  34                 	db	52	;'4'
   640  00FF18  20                 	db	32
   641  00FF19  20                 	db	32
   642  00FF1A  20                 	db	32
   643  00FF1B  20                 	db	32
   644  00FF1C  20                 	db	32
   645  00FF1D  20                 	db	32
   646  00FF1E  20                 	db	32
   647  00FF1F  20                 	db	32
   648  00FF20  20                 	db	32
   649  00FF21  20                 	db	32
   650  00FF22  3C                 	db	60	;'<'
   651  00FF23  00                 	db	0
   652  00FF24                     STR_38:
   653  00FF24  33                 	db	51	;'3'
   654  00FF25  2E                 	db	46
   655  00FF26  20                 	db	32
   656  00FF27  4C                 	db	76	;'L'
   657  00FF28  4F                 	db	79	;'O'
   658  00FF29  47                 	db	71	;'G'
   659  00FF2A  53                 	db	83	;'S'
   660  00FF2B  20                 	db	32
   661  00FF2C  20                 	db	32
   662  00FF2D  20                 	db	32
   663  00FF2E  20                 	db	32
   664  00FF2F  20                 	db	32
   665  00FF30  20                 	db	32
   666  00FF31  20                 	db	32
   667  00FF32  20                 	db	32
   668  00FF33  3C                 	db	60	;'<'
   669  00FF34  00                 	db	0
   670  00FF35                     STR_34:
   671  00FF35  32                 	db	50	;'2'
   672  00FF36  2E                 	db	46
   673  00FF37  20                 	db	32
   674  00FF38  53                 	db	83	;'S'
   675  00FF39  4F                 	db	79	;'O'
   676  00FF3A  52                 	db	82	;'R'
   677  00FF3B  54                 	db	84	;'T'
   678  00FF3C  20                 	db	32
   679  00FF3D  20                 	db	32
   680  00FF3E  20                 	db	32
   681  00FF3F  20                 	db	32
   682  00FF40  20                 	db	32
   683  00FF41  20                 	db	32
   684  00FF42  20                 	db	32
   685  00FF43  20                 	db	32
   686  00FF44  3C                 	db	60	;'<'
   687  00FF45  00                 	db	0
   688  00FF46                     STR_31:
   689  00FF46  31                 	db	49	;'1'
   690  00FF47  2E                 	db	46
   691  00FF48  20                 	db	32
   692  00FF49  44                 	db	68	;'D'
   693  00FF4A  41                 	db	65	;'A'
   694  00FF4B  54                 	db	84	;'T'
   695  00FF4C  45                 	db	69	;'E'
   696  00FF4D  2F                 	db	47
   697  00FF4E  54                 	db	84	;'T'
   698  00FF4F  49                 	db	73	;'I'
   699  00FF50  4D                 	db	77	;'M'
   700  00FF51  45                 	db	69	;'E'
   701  00FF52  20                 	db	32
   702  00FF53  20                 	db	32
   703  00FF54  20                 	db	32
   704  00FF55  3C                 	db	60	;'<'
   705  00FF56  00                 	db	0
   706  00FF57                     STR_6:
   707  00FF57  50                 	db	80	;'P'
   708  00FF58  41                 	db	65	;'A'
   709  00FF59  55                 	db	85	;'U'
   710  00FF5A  53                 	db	83	;'S'
   711  00FF5B  45                 	db	69	;'E'
   712  00FF5C  20                 	db	32
   713  00FF5D  3C                 	db	60	;'<'
   714  00FF5E  20                 	db	32
   715  00FF5F  7C                 	db	124
   716  00FF60  20                 	db	32
   717  00FF61  42                 	db	66	;'B'
   718  00FF62  41                 	db	65	;'A'
   719  00FF63  43                 	db	67	;'C'
   720  00FF64  4B                 	db	75	;'K'
   721  00FF65  20                 	db	32
   722  00FF66  3E                 	db	62	;'>'
   723  00FF67  00                 	db	0
   724  00FF68                     STR_30:
   725  00FF68  50                 	db	80	;'P'
   726  00FF69  55                 	db	85	;'U'
   727  00FF6A  53                 	db	83	;'S'
   728  00FF6B  48                 	db	72	;'H'
   729  00FF6C  20                 	db	32
   730  00FF6D  54                 	db	84	;'T'
   731  00FF6E  4F                 	db	79	;'O'
   732  00FF6F  20                 	db	32
   733  00FF70  43                 	db	67	;'C'
   734  00FF71  4F                 	db	79	;'O'
   735  00FF72  4E                 	db	78	;'N'
   736  00FF73  54                 	db	84	;'T'
   737  00FF74  49                 	db	73	;'I'
   738  00FF75  4E                 	db	78	;'N'
   739  00FF76  55                 	db	85	;'U'
   740  00FF77  45                 	db	69	;'E'
   741  00FF78  00                 	db	0
   742  00FF79                     STR_4:
   743  00FF79  44                 	db	68	;'D'
   744  00FF7A  49                 	db	73	;'I'
   745  00FF7B  44                 	db	68	;'D'
   746  00FF7C  4E                 	db	78	;'N'
   747  00FF7D  27                 	db	39
   748  00FF7E  54                 	db	84	;'T'
   749  00FF7F  20                 	db	32
   750  00FF80  43                 	db	67	;'C'
   751  00FF81  4F                 	db	79	;'O'
   752  00FF82  4D                 	db	77	;'M'
   753  00FF83  50                 	db	80	;'P'
   754  00FF84  4C                 	db	76	;'L'
   755  00FF85  45                 	db	69	;'E'
   756  00FF86  54                 	db	84	;'T'
   757  00FF87  45                 	db	69	;'E'
   758  00FF88  00                 	db	0
   759  00FF89                     STR_23:
   760  00FF89  25                 	db	37
   761  00FF8A  64                 	db	100	;'d'
   762  00FF8B  20                 	db	32
   763  00FF8C  4D                 	db	77	;'M'
   764  00FF8D  49                 	db	73	;'I'
   765  00FF8E  4E                 	db	78	;'N'
   766  00FF8F  20                 	db	32
   767  00FF90  25                 	db	37
   768  00FF91  64                 	db	100	;'d'
   769  00FF92  20                 	db	32
   770  00FF93  53                 	db	83	;'S'
   771  00FF94  45                 	db	69	;'E'
   772  00FF95  43                 	db	67	;'C'
   773  00FF96  00                 	db	0
   774  00FF97                     STR_64:
   775  00FF97  53                 	db	83	;'S'
   776  00FF98  4F                 	db	79	;'O'
   777  00FF99  52                 	db	82	;'R'
   778  00FF9A  54                 	db	84	;'T'
   779  00FF9B  49                 	db	73	;'I'
   780  00FF9C  4E                 	db	78	;'N'
   781  00FF9D  47                 	db	71	;'G'
   782  00FF9E  2E                 	db	46
   783  00FF9F  2E                 	db	46
   784  00FFA0  2E                 	db	46
   785  00FFA1  00                 	db	0
   786  00FFA2                     STR_22:
   787  00FFA2  44                 	db	68	;'D'
   788  00FFA3  55                 	db	85	;'U'
   789  00FFA4  52                 	db	82	;'R'
   790  00FFA5  41                 	db	65	;'A'
   791  00FFA6  54                 	db	84	;'T'
   792  00FFA7  49                 	db	73	;'I'
   793  00FFA8  4F                 	db	79	;'O'
   794  00FFA9  4E                 	db	78	;'N'
   795  00FFAA  3A                 	db	58	;':'
   796  00FFAB  00                 	db	0
   797  00FFAC                     STR_66:
   798  00FFAC  28                 	db	40
   799  00FFAD  25                 	db	37
   800  00FFAE  75                 	db	117	;'u'
   801  00FFAF  2C                 	db	44
   802  00FFB0  20                 	db	32
   803  00FFB1  25                 	db	37
   804  00FFB2  75                 	db	117	;'u'
   805  00FFB3  29                 	db	41
   806  00FFB4  00                 	db	0
   807  00FFB5                     STR_68:
   808  00FFB5  28                 	db	40
   809  00FFB6  6E                 	db	110	;'n'
   810  00FFB7  75                 	db	117	;'u'
   811  00FFB8  6C                 	db	108	;'l'
   812  00FFB9  6C                 	db	108	;'l'
   813  00FFBA  29                 	db	41
   814  00FFBB  00                 	db	0
   815  00FFBC                     STR_67:
   816  00FFBC  46                 	db	70	;'F'
   817  00FFBD  41                 	db	65	;'A'
   818  00FFBE  49                 	db	73	;'I'
   819  00FFBF  4C                 	db	76	;'L'
   820  00FFC0  45                 	db	69	;'E'
   821  00FFC1  44                 	db	68	;'D'
   822  00FFC2  00                 	db	0
   823  00FFC3                     STR_7:
   824  00FFC3  53                 	db	83	;'S'
   825  00FFC4  54                 	db	84	;'T'
   826  00FFC5  41                 	db	65	;'A'
   827  00FFC6  52                 	db	82	;'R'
   828  00FFC7  54                 	db	84	;'T'
   829  00FFC8  3A                 	db	58	;':'
   830  00FFC9  00                 	db	0
   831  00FFCA                     STR_9:
   832  00FFCA  46                 	db	70	;'F'
   833  00FFCB  45                 	db	69	;'E'
   834  00FFCC  42                 	db	66	;'B'
   835  00FFCD  00                 	db	0
   836  00FFCE                     STR_19:
   837  00FFCE  44                 	db	68	;'D'
   838  00FFCF  45                 	db	69	;'E'
   839  00FFD0  43                 	db	67	;'C'
   840  00FFD1  00                 	db	0
   841  00FFD2                     STR_15:
   842  00FFD2  41                 	db	65	;'A'
   843  00FFD3  55                 	db	85	;'U'
   844  00FFD4  47                 	db	71	;'G'
   845  00FFD5  00                 	db	0
   846  00FFD6                     STR_14:
   847  00FFD6  4A                 	db	74	;'J'
   848  00FFD7  55                 	db	85	;'U'
   849  00FFD8  4C                 	db	76	;'L'
   850  00FFD9  00                 	db	0
   851  00FFDA                     STR_8:
   852  00FFDA  4A                 	db	74	;'J'
   853  00FFDB  41                 	db	65	;'A'
   854  00FFDC  4E                 	db	78	;'N'
   855  00FFDD  00                 	db	0
   856  00FFDE                     STR_13:
   857  00FFDE  4A                 	db	74	;'J'
   858  00FFDF  55                 	db	85	;'U'
   859  00FFE0  4E                 	db	78	;'N'
   860  00FFE1  00                 	db	0
   861  00FFE2                     STR_16:
   862  00FFE2  53                 	db	83	;'S'
   863  00FFE3  45                 	db	69	;'E'
   864  00FFE4  50                 	db	80	;'P'
   865  00FFE5  00                 	db	0
   866  00FFE6                     STR_10:
   867  00FFE6  4D                 	db	77	;'M'
   868  00FFE7  41                 	db	65	;'A'
   869  00FFE8  52                 	db	82	;'R'
   870  00FFE9  00                 	db	0
   871  00FFEA                     STR_11:
   872  00FFEA  41                 	db	65	;'A'
   873  00FFEB  50                 	db	80	;'P'
   874  00FFEC  52                 	db	82	;'R'
   875  00FFED  00                 	db	0
   876  00FFEE                     STR_20:
   877  00FFEE  45                 	db	69	;'E'
   878  00FFEF  52                 	db	82	;'R'
   879  00FFF0  52                 	db	82	;'R'
   880  00FFF1  00                 	db	0
   881  00FFF2                     STR_17:
   882  00FFF2  4F                 	db	79	;'O'
   883  00FFF3  43                 	db	67	;'C'
   884  00FFF4  54                 	db	84	;'T'
   885  00FFF5  00                 	db	0
   886  00FFF6                     STR_18:
   887  00FFF6  4E                 	db	78	;'N'
   888  00FFF7  4F                 	db	79	;'O'
   889  00FFF8  56                 	db	86	;'V'
   890  00FFF9  00                 	db	0
   891  00FFFA                     STR_12:
   892  00FFFA  4D                 	db	77	;'M'
   893  00FFFB  41                 	db	65	;'A'
   894  00FFFC  59                 	db	89	;'Y'
   895  00FFFD  00                 	db	0
   896  0000                     
   897                           ; #config settings
   898  00FFFE  00                 	db	0	; dummy byte at the end
   899  0000                     
   900                           	psect	cinit
   901  002BD0                     __pcinit:
   902                           	opt stack 0
   903  002BD0                     start_initialization:
   904                           	opt stack 0
   905  002BD0                     __initialization:
   906                           	opt stack 0
   907                           
   908                           ; Initialize objects allocated to BANK1 (8 bytes)
   909                           ; load TBLPTR registers with __pidataBANK1
   910  002BD0  0EBC               	movlw	low __pidataBANK1
   911  002BD2  6EF6               	movwf	tblptrl,c
   912  002BD4  0E32               	movlw	high __pidataBANK1
   913  002BD6  6EF7               	movwf	tblptrh,c
   914  002BD8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   915  002BDA  6EF8               	movwf	tblptru,c
   916  002BDC  EE01  F028         	lfsr	0,__pdataBANK1
   917  002BE0  EE10 F008          	lfsr	1,8
   918  002BE4                     copy_data0:
   919  002BE4  0009               	tblrd		*+
   920  002BE6  CFF5 FFEE          	movff	tablat,postinc0
   921  002BEA  50E5               	movf	postdec1,w,c
   922  002BEC  50E1               	movf	fsr1l,w,c
   923  002BEE  E1FA               	bnz	copy_data0
   924                           
   925                           ; Clear objects allocated to BANK1 (40 bytes)
   926  002BF0  EE01  F000         	lfsr	0,__pbssBANK1
   927  002BF4  0E28               	movlw	40
   928  002BF6                     clear_0:
   929  002BF6  6AEE               	clrf	postinc0,c
   930  002BF8  06E8               	decf	wreg,f,c
   931  002BFA  E1FD               	bnz	clear_0
   932                           
   933                           ; Clear objects allocated to BANK0 (38 bytes)
   934  002BFC  EE00  F0D9         	lfsr	0,__pbssBANK0
   935  002C00  0E26               	movlw	38
   936  002C02                     clear_1:
   937  002C02  6AEE               	clrf	postinc0,c
   938  002C04  06E8               	decf	wreg,f,c
   939  002C06  E1FD               	bnz	clear_1
   940                           
   941                           ; Clear objects allocated to COMRAM (36 bytes)
   942  002C08  EE00  F05B         	lfsr	0,__pbssCOMRAM
   943  002C0C  0E24               	movlw	36
   944  002C0E                     clear_2:
   945  002C0E  6AEE               	clrf	postinc0,c
   946  002C10  06E8               	decf	wreg,f,c
   947  002C12  E1FD               	bnz	clear_2
   948  002C14                     end_of_initialization:
   949                           	opt stack 0
   950  002C14                     __end_of__initialization:
   951                           	opt stack 0
   952  002C14  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   953  002C16  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   954  002C18  0100               	movlb	0
   955  002C1A  EF13  F013         	goto	_main	;jump to C main() function
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1l	equ	0xFE1
   964                           
   965                           	psect	bssCOMRAM
   966  00005B                     __pbssCOMRAM:
   967                           	opt stack 0
   968  00005B                     _time:
   969                           	opt stack 0
   970  00005B                     	ds	7
   971  000062                     _IR_signal:
   972                           	opt stack 0
   973  000062                     	ds	2
   974  000064                     _back:
   975                           	opt stack 0
   976  000064                     	ds	2
   977  000066                     _count_can_no_lab:
   978                           	opt stack 0
   979  000066                     	ds	2
   980  000068                     _count_can_w_lab:
   981                           	opt stack 0
   982  000068                     	ds	2
   983  00006A                     _count_pop_no_tab:
   984                           	opt stack 0
   985  00006A                     	ds	2
   986  00006C                     _count_pop_w_tab:
   987                           	opt stack 0
   988  00006C                     	ds	2
   989  00006E                     _cur_can:
   990                           	opt stack 0
   991  00006E                     	ds	2
   992  000070                     _down:
   993                           	opt stack 0
   994  000070                     	ds	2
   995  000072                     _enter:
   996                           	opt stack 0
   997  000072                     	ds	2
   998  000074                     _f_can_coming_to_distribution:
   999                           	opt stack 0
  1000  000074                     	ds	2
  1001  000076                     _firstboot:
  1002                           	opt stack 0
  1003  000076                     	ds	2
  1004  000078                     _up:
  1005                           	opt stack 0
  1006  000078                     	ds	2
  1007  00007A                     _was_low_1:
  1008                           	opt stack 0
  1009  00007A                     	ds	2
  1010  00007C                     _was_low_3:
  1011                           	opt stack 0
  1012  00007C                     	ds	2
  1013  00007E                     _input:
  1014                           	opt stack 0
  1015  00007E                     	ds	1
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025                           	psect	bssBANK0
  1026  0000D9                     __pbssBANK0:
  1027                           	opt stack 0
  1028  0000D9                     _MAG_signal:
  1029                           	opt stack 0
  1030  0000D9                     	ds	2
  1031  0000DB                     _cur_state:
  1032                           	opt stack 0
  1033  0000DB                     	ds	2
  1034  0000DD                     _debug:
  1035                           	opt stack 0
  1036  0000DD                     	ds	2
  1037  0000DF                     _f_ID_receive:
  1038                           	opt stack 0
  1039  0000DF                     	ds	2
  1040  0000E1                     _f_can_coming_to_ID:
  1041                           	opt stack 0
  1042  0000E1                     	ds	2
  1043  0000E3                     _f_loadingNewCan:
  1044                           	opt stack 0
  1045  0000E3                     	ds	2
  1046  0000E5                     _first:
  1047                           	opt stack 0
  1048  0000E5                     	ds	2
  1049  0000E7                     _log:
  1050                           	opt stack 0
  1051  0000E7                     	ds	2
  1052  0000E9                     _log_completion:
  1053                           	opt stack 0
  1054  0000E9                     	ds	2
  1055  0000EB                     _log_count_can_no_lab:
  1056                           	opt stack 0
  1057  0000EB                     	ds	2
  1058  0000ED                     _log_count_can_w_lab:
  1059                           	opt stack 0
  1060  0000ED                     	ds	2
  1061  0000EF                     _log_count_pop_no_tab:
  1062                           	opt stack 0
  1063  0000EF                     	ds	2
  1064  0000F1                     _log_count_pop_w_tab:
  1065                           	opt stack 0
  1066  0000F1                     	ds	2
  1067  0000F3                     _log_count_total:
  1068                           	opt stack 0
  1069  0000F3                     	ds	2
  1070  0000F5                     _log_total_time:
  1071                           	opt stack 0
  1072  0000F5                     	ds	2
  1073  0000F7                     _logstate:
  1074                           	opt stack 0
  1075  0000F7                     	ds	2
  1076  0000F9                     _total_time:
  1077                           	opt stack 0
  1078  0000F9                     	ds	2
  1079  0000FB                     _machine_state:
  1080                           	opt stack 0
  1081  0000FB                     	ds	1
  1082  0000FC                     _sel:
  1083                           	opt stack 0
  1084  0000FC                     	ds	1
  1085  0000FD                     _count_total:
  1086                           	opt stack 0
  1087  0000FD                     	ds	2
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           postdec1	equ	0xFE5
  1095                           fsr1l	equ	0xFE1
  1096                           
  1097                           	psect	bssBANK1
  1098  000100                     __pbssBANK1:
  1099                           	opt stack 0
  1100  000100                     _log_startTime:
  1101                           	opt stack 0
  1102  000100                     	ds	14
  1103  00010E                     _startTime:
  1104                           	opt stack 0
  1105  00010E                     	ds	14
  1106  00011C                     _servoTimes:
  1107                           	opt stack 0
  1108  00011C                     	ds	8
  1109  000124                     _f_can_distributed:
  1110                           	opt stack 0
  1111  000124                     	ds	2
  1112  000126                     _f_lastCan:
  1113                           	opt stack 0
  1114  000126                     	ds	2
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           
  1124                           	psect	dataBANK1
  1125  000128                     __pdataBANK1:
  1126                           	opt stack 0
  1127  000128                     UI@F3220:
  1128                           	opt stack 0
  1129  000128                     	ds	4
  1130  00012C                     printRTC@F3213:
  1131                           	opt stack 0
  1132  00012C                     	ds	4
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           postdec1	equ	0xFE5
  1140                           fsr1l	equ	0xFE1
  1141                           
  1142                           	psect	cstackBANK0
  1143  000080                     __pcstackBANK0:
  1144                           	opt stack 0
  1145  000080                     ??_isdigit:
  1146  000080                     ??_readADC:
  1147  000080                     ??_I2C_Master_Wait:
  1148  000080                     ?___wmul:
  1149                           	opt stack 0
  1150  000080                     ?___awmod:
  1151                           	opt stack 0
  1152  000080                     ?___lwdiv:
  1153                           	opt stack 0
  1154  000080                     ?___lldiv:
  1155                           	opt stack 0
  1156  000080                     lcdNibble@temp:
  1157                           	opt stack 0
  1158  000080                     initTime@m:
  1159                           	opt stack 0
  1160  000080                     updateServoPosition@time_us:
  1161                           	opt stack 0
  1162  000080                     EEPROM_read@address:
  1163                           	opt stack 0
  1164  000080                     ___wmul@multiplier:
  1165                           	opt stack 0
  1166  000080                     ___awmod@dividend:
  1167                           	opt stack 0
  1168  000080                     ___lwdiv@dividend:
  1169                           	opt stack 0
  1170  000080                     strcpy@to:
  1171                           	opt stack 0
  1172  000080                     ___lldiv@dividend:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0x0
  1176  000080                     	ds	1
  1177  000081                     readADC@channel:
  1178                           	opt stack 0
  1179  000081                     I2C_Master_Read@a:
  1180                           	opt stack 0
  1181  000081                     lcdNibble@data:
  1182                           	opt stack 0
  1183  000081                     initTime@h:
  1184                           	opt stack 0
  1185  000081                     _isdigit$1630:
  1186                           	opt stack 0
  1187  000081                     I2C_Master_Write@d:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x1
  1191  000081                     	ds	1
  1192  000082                     ??_readMAG:
  1193  000082                     I2C_Master_Read@temp:
  1194                           	opt stack 0
  1195  000082                     lcdInst@data:
  1196                           	opt stack 0
  1197  000082                     putch@data:
  1198                           	opt stack 0
  1199  000082                     initTime@w:
  1200                           	opt stack 0
  1201  000082                     isdigit@c:
  1202                           	opt stack 0
  1203  000082                     updateServoPosition@timer:
  1204                           	opt stack 0
  1205  000082                     ___wmul@multiplicand:
  1206                           	opt stack 0
  1207  000082                     ___awmod@divisor:
  1208                           	opt stack 0
  1209  000082                     ___lwdiv@divisor:
  1210                           	opt stack 0
  1211  000082                     strcpy@from:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x2
  1215  000082                     	ds	1
  1216  000083                     ??_initLCD:
  1217  000083                     initTime@DD:
  1218                           	opt stack 0
  1219  000083                     getRTC@i:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x3
  1223  000083                     	ds	1
  1224  000084                     ??_updateServoPosition:
  1225  000084                     initTime@MM:
  1226                           	opt stack 0
  1227  000084                     ___awmod@counter:
  1228                           	opt stack 0
  1229  000084                     readMAG@res:
  1230                           	opt stack 0
  1231  000084                     ___wmul@product:
  1232                           	opt stack 0
  1233  000084                     ___lwdiv@quotient:
  1234                           	opt stack 0
  1235  000084                     strcpy@cp:
  1236                           	opt stack 0
  1237  000084                     ___lldiv@divisor:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x4
  1241  000084                     	ds	1
  1242  000085                     ??_initSortTimer:
  1243  000085                     initTime@YY:
  1244                           	opt stack 0
  1245  000085                     ___awmod@sign:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x5
  1249  000085                     	ds	1
  1250  000086                     ??_ID:
  1251  000086                     ?___awdiv:
  1252                           	opt stack 0
  1253  000086                     initTime@s:
  1254                           	opt stack 0
  1255  000086                     ___lwdiv@counter:
  1256                           	opt stack 0
  1257  000086                     updateServoPosition@my_time:
  1258                           	opt stack 0
  1259  000086                     ___awdiv@dividend:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x6
  1263  000086                     	ds	1
  1264  000087                     ?___lwmod:
  1265                           	opt stack 0
  1266  000087                     ___lwmod@dividend:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x7
  1270  000087                     	ds	1
  1271  000088                     ??_Distribution:
  1272  000088                     ??_initServos:
  1273  000088                     initSortTimer@i:
  1274                           	opt stack 0
  1275  000088                     ___awdiv@divisor:
  1276                           	opt stack 0
  1277  000088                     ___lldiv@quotient:
  1278                           	opt stack 0
  1279  000088                     ID@sensor_outputs:
  1280                           	opt stack 0
  1281                           
  1282                           ; 6 bytes @ 0x8
  1283  000088                     	ds	1
  1284  000089                     ___lwmod@divisor:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x9
  1288  000089                     	ds	1
  1289  00008A                     ??_Loading:
  1290  00008A                     ___awdiv@counter:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0xA
  1294  00008A                     	ds	1
  1295  00008B                     ___awdiv@sign:
  1296                           	opt stack 0
  1297  00008B                     ___lwmod@counter:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0xB
  1301  00008B                     	ds	1
  1302  00008C                     ___lldiv@counter:
  1303                           	opt stack 0
  1304  00008C                     ___awdiv@quotient:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0xC
  1308  00008C                     	ds	1
  1309  00008D                     I2C_Master_Init@c:
  1310                           	opt stack 0
  1311                           
  1312                           ; 4 bytes @ 0xD
  1313  00008D                     	ds	1
  1314  00008E                     ?_printf:
  1315                           	opt stack 0
  1316  00008E                     printf@f:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0xE
  1320  00008E                     	ds	3
  1321  000091                     ??_I2C_Master_Init:
  1322                           
  1323                           ; 1 bytes @ 0x11
  1324  000091                     	ds	4
  1325  000095                     ??_loadRTC:
  1326                           
  1327                           ; 1 bytes @ 0x15
  1328  000095                     	ds	1
  1329  000096                     loadRTC@i:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x16
  1333  000096                     	ds	4
  1334  00009A                     ??_printf:
  1335                           
  1336                           ; 1 bytes @ 0x1A
  1337  00009A                     	ds	4
  1338  00009E                     printf@prec:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x1E
  1342  00009E                     	ds	1
  1343  00009F                     printf@cp:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x1F
  1347  00009F                     	ds	2
  1348  0000A1                     printf@ap:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x21
  1352  0000A1                     	ds	2
  1353  0000A3                     printf@len:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x23
  1357  0000A3                     	ds	2
  1358  0000A5                     printf@val:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x25
  1362  0000A5                     	ds	2
  1363  0000A7                     printf@flag:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x27
  1367  0000A7                     	ds	1
  1368  0000A8                     printf@c:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x28
  1372  0000A8                     	ds	1
  1373  0000A9                     printf@width:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x29
  1377  0000A9                     	ds	2
  1378  0000AB                     ??_printRTC:
  1379  0000AB                     EEPROM_write@address:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x2B
  1383  0000AB                     	ds	2
  1384  0000AD                     EEPROM_write@data:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x2D
  1388  0000AD                     	ds	1
  1389  0000AE                     ??_EEPROM_write:
  1390  0000AE                     printRTC@INT_time:
  1391                           	opt stack 0
  1392                           
  1393                           ; 14 bytes @ 0x2E
  1394  0000AE                     	ds	1
  1395  0000AF                     EEPROM_write@i:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x2F
  1399  0000AF                     	ds	1
  1400  0000B0                     EEPROM_write@i_1363:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x30
  1404  0000B0                     	ds	1
  1405  0000B1                     logRun@byte1:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x31
  1409  0000B1                     	ds	1
  1410  0000B2                     logRun@byte2:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x32
  1414  0000B2                     	ds	1
  1415  0000B3                     logRun@byte3:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x33
  1419  0000B3                     	ds	1
  1420  0000B4                     logRun@byte_i:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x34
  1424  0000B4                     	ds	1
  1425  0000B5                     logRun@byte11:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x35
  1429  0000B5                     	ds	1
  1430  0000B6                     logRun@i:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x36
  1434  0000B6                     	ds	2
  1435  0000B8                     logRun@addr:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x38
  1439  0000B8                     	ds	4
  1440  0000BC                     printRTC@RTC_month:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x3C
  1444  0000BC                     	ds	2
  1445  0000BE                     printRTC@month:
  1446                           	opt stack 0
  1447                           
  1448                           ; 4 bytes @ 0x3E
  1449  0000BE                     	ds	4
  1450  0000C2                     printRTC@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x42
  1454  0000C2                     	ds	2
  1455  0000C4                     ??_UI:
  1456                           
  1457                           ; 1 bytes @ 0x44
  1458  0000C4                     	ds	2
  1459  0000C6                     _UI$1990:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x46
  1463  0000C6                     	ds	2
  1464  0000C8                     UI@i:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x48
  1468  0000C8                     	ds	1
  1469  0000C9                     UI@i_504:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x49
  1473  0000C9                     	ds	1
  1474  0000CA                     UI@i_505:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x4A
  1478  0000CA                     	ds	1
  1479  0000CB                     UI@i_523:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x4B
  1483  0000CB                     	ds	1
  1484  0000CC                     UI@i_524:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x4C
  1488  0000CC                     	ds	1
  1489  0000CD                     UI@i_527:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x4D
  1493  0000CD                     	ds	1
  1494  0000CE                     UI@i_528:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x4E
  1498  0000CE                     	ds	1
  1499  0000CF                     UI@i_531:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x4F
  1503  0000CF                     	ds	1
  1504  0000D0                     UI@i_532:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x50
  1508  0000D0                     	ds	1
  1509  0000D1                     UI@i_535:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x51
  1513  0000D1                     	ds	1
  1514  0000D2                     UI@i_536:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x52
  1518  0000D2                     	ds	1
  1519  0000D3                     UI@i_539:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x53
  1523  0000D3                     	ds	1
  1524  0000D4                     UI@i_540:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x54
  1528  0000D4                     	ds	1
  1529  0000D5                     UI@month:
  1530                           	opt stack 0
  1531                           
  1532                           ; 4 bytes @ 0x55
  1533  0000D5                     	ds	4
  1534  0000D9                     tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           postdec1	equ	0xFE5
  1541                           fsr1l	equ	0xFE1
  1542                           
  1543                           ; 1 bytes @ 0x59
  1544                           
  1545                           	psect	cstackCOMRAM
  1546  000001                     __pcstackCOMRAM:
  1547                           	opt stack 0
  1548  000001                     ??i2_I2C_Master_Wait:
  1549  000001                     ??i2_isdigit:
  1550  000001                     ?i2___wmul:
  1551                           	opt stack 0
  1552  000001                     ?i2___lwmod:
  1553                           	opt stack 0
  1554  000001                     i2lcdNibble@temp:
  1555                           	opt stack 0
  1556  000001                     i2EEPROM_read@address:
  1557                           	opt stack 0
  1558  000001                     i2___wmul@multiplier:
  1559                           	opt stack 0
  1560  000001                     i2___lwmod@dividend:
  1561                           	opt stack 0
  1562  000001                     i2strcpy@to:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x0
  1566  000001                     	ds	1
  1567  000002                     i2I2C_Master_Read@a:
  1568                           	opt stack 0
  1569  000002                     i2lcdNibble@data:
  1570                           	opt stack 0
  1571  000002                     i2_isdigit$1630:
  1572                           	opt stack 0
  1573  000002                     i2I2C_Master_Write@d:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x1
  1577  000002                     	ds	1
  1578  000003                     i2I2C_Master_Read@temp:
  1579                           	opt stack 0
  1580  000003                     i2lcdInst@data:
  1581                           	opt stack 0
  1582  000003                     i2putch@data:
  1583                           	opt stack 0
  1584  000003                     i2isdigit@c:
  1585                           	opt stack 0
  1586  000003                     i2___wmul@multiplicand:
  1587                           	opt stack 0
  1588  000003                     i2___lwmod@divisor:
  1589                           	opt stack 0
  1590  000003                     i2strcpy@from:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x2
  1594  000003                     	ds	1
  1595  000004                     i2getRTC@i:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x3
  1599  000004                     	ds	1
  1600  000005                     i2___lwmod@counter:
  1601                           	opt stack 0
  1602  000005                     i2___wmul@product:
  1603                           	opt stack 0
  1604  000005                     i2strcpy@cp:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x4
  1608  000005                     	ds	1
  1609  000006                     ?i2___lwdiv:
  1610                           	opt stack 0
  1611  000006                     i2___lwdiv@dividend:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x5
  1615  000006                     	ds	1
  1616  000007                     retrieveLog@logNum:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x6
  1620  000007                     	ds	1
  1621  000008                     i2___lwdiv@divisor:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x7
  1625  000008                     	ds	1
  1626  000009                     ??_retrieveLog:
  1627                           
  1628                           ; 1 bytes @ 0x8
  1629  000009                     	ds	1
  1630  00000A                     i2___lwdiv@quotient:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x9
  1634  00000A                     	ds	1
  1635  00000B                     retrieveLog@byte1:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0xA
  1639  00000B                     	ds	1
  1640  00000C                     retrieveLog@byte2:
  1641                           	opt stack 0
  1642  00000C                     i2___lwdiv@counter:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0xB
  1646  00000C                     	ds	1
  1647  00000D                     ?i2_printf:
  1648                           	opt stack 0
  1649  00000D                     retrieveLog@byte3:
  1650                           	opt stack 0
  1651  00000D                     i2printf@f:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0xC
  1655  00000D                     	ds	1
  1656  00000E                     retrieveLog@i:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0xD
  1660  00000E                     	ds	2
  1661  000010                     retrieveLog@addr:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0xF
  1665  000010                     	ds	2
  1666  000012                     dispLogs@myLog:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x11
  1670  000012                     	ds	2
  1671  000014                     
  1672                           ; 1 bytes @ 0x13
  1673  000014                     	ds	5
  1674  000019                     ??i2_printf:
  1675                           
  1676                           ; 1 bytes @ 0x18
  1677  000019                     	ds	4
  1678  00001D                     i2printf@prec:
  1679                           	opt stack 0
  1680                           
  1681                           ; 1 bytes @ 0x1C
  1682  00001D                     	ds	1
  1683  00001E                     i2printf@cp:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x1D
  1687  00001E                     	ds	2
  1688  000020                     i2printf@ap:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x1F
  1692  000020                     	ds	2
  1693  000022                     i2printf@len:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x21
  1697  000022                     	ds	2
  1698  000024                     i2printf@val:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x23
  1702  000024                     	ds	2
  1703  000026                     i2printf@flag:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x25
  1707  000026                     	ds	1
  1708  000027                     i2printf@c:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x26
  1712  000027                     	ds	1
  1713  000028                     i2printf@width:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x27
  1717  000028                     	ds	2
  1718  00002A                     ??_printSortTimer:
  1719  00002A                     ??i2_printRTC:
  1720  00002A                     ?_inputHandler:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x29
  1724  00002A                     	ds	2
  1725  00002C                     ??_inputHandler:
  1726                           
  1727                           ; 1 bytes @ 0x2B
  1728  00002C                     	ds	1
  1729  00002D                     printSortTimer@curTime:
  1730                           	opt stack 0
  1731  00002D                     i2printRTC@INT_time:
  1732                           	opt stack 0
  1733                           
  1734                           ; 14 bytes @ 0x2C
  1735  00002D                     	ds	14
  1736  00003B                     printSortTimer@start_sec:
  1737                           	opt stack 0
  1738  00003B                     i2printRTC@RTC_month:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x3A
  1742  00003B                     	ds	2
  1743  00003D                     printSortTimer@cur_sec:
  1744                           	opt stack 0
  1745  00003D                     i2printRTC@month:
  1746                           	opt stack 0
  1747                           
  1748                           ; 4 bytes @ 0x3C
  1749  00003D                     	ds	2
  1750  00003F                     printSortTimer@hour:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x3E
  1754  00003F                     	ds	2
  1755  000041                     printSortTimer@min:
  1756                           	opt stack 0
  1757  000041                     i2printRTC@i:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x40
  1761  000041                     	ds	2
  1762  000043                     ??_updateMenu:
  1763  000043                     printSortTimer@sec:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x42
  1767  000043                     	ds	2
  1768  000045                     _printSortTimer$2110:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x44
  1772  000045                     	ds	2
  1773  000047                     printSortTimer@timeDiff:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x46
  1777  000047                     	ds	2
  1778  000049                     printSortTimer@i:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x48
  1782  000049                     	ds	2
  1783  00004B                     ??_handler:
  1784                           
  1785                           ; 1 bytes @ 0x4A
  1786  00004B                     	ds	16
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           
  1796 ;;
  1797 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1798 ;;
  1799 ;; *************** function _main *****************
  1800 ;; Defined at:
  1801 ;;		line 17 in file "main.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels required when called:   13
  1821 ;; This function calls:
  1822 ;;		_PortTestA5
  1823 ;;		_UI
  1824 ;;		_initLCD
  1825 ;;		_initTime
  1826 ;;		_initUI
  1827 ;;		_logRun
  1828 ;;		_machineConfig
  1829 ;;		_sort
  1830 ;;		_stopSignals
  1831 ;; This function is called by:
  1832 ;;		Startup code after reset
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text0
  1837  002626                     __ptext0:
  1838                           	opt stack 0
  1839  002626                     _main:
  1840                           	opt stack 18
  1841                           
  1842                           ;main.c: 18: machineConfig();
  1843                           
  1844                           ;incstack = 0
  1845  002626  EC67  F015         	call	_machineConfig	;wreg free
  1846                           
  1847                           ;main.c: 19: initLCD();
  1848  00262A  EC59  F016         	call	_initLCD	;wreg free
  1849                           
  1850                           ;main.c: 20: initTime(0x42, 0x44, 0x02, 0x04, 0x01, 0x03, 0x17);
  1851  00262E  0E44               	movlw	68
  1852  002630  0100               	movlb	0	; () banked
  1853  002632  6F80               	movwf	initTime@m& (0+255),b
  1854  002634  0E02               	movlw	2
  1855  002636  0100               	movlb	0	; () banked
  1856  002638  6F81               	movwf	initTime@h& (0+255),b
  1857  00263A  0E04               	movlw	4
  1858  00263C  0100               	movlb	0	; () banked
  1859  00263E  6F82               	movwf	initTime@w& (0+255),b
  1860  002640  0E01               	movlw	1
  1861  002642  0100               	movlb	0	; () banked
  1862  002644  6F83               	movwf	initTime@DD& (0+255),b
  1863  002646  0E03               	movlw	3
  1864  002648  0100               	movlb	0	; () banked
  1865  00264A  6F84               	movwf	initTime@MM& (0+255),b
  1866  00264C  0E17               	movlw	23
  1867  00264E  0100               	movlb	0	; () banked
  1868  002650  6F85               	movwf	initTime@YY& (0+255),b
  1869  002652  0E42               	movlw	66
  1870  002654  ECDA  F018         	call	_initTime
  1871                           
  1872                           ;main.c: 21: initUI();
  1873  002658  ECA5  F018         	call	_initUI	;wreg free
  1874                           
  1875                           ;main.c: 22: first = 1;
  1876  00265C  0E00               	movlw	0
  1877  00265E  0100               	movlb	0	; () banked
  1878  002660  6FE6               	movwf	(_first+1)& (0+255),b
  1879  002662  0E01               	movlw	1
  1880  002664  6FE5               	movwf	_first& (0+255),b
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 25: debug = 1;
  1884  002666  0E00               	movlw	0
  1885  002668  0100               	movlb	0	; () banked
  1886  00266A  6FDE               	movwf	(_debug+1)& (0+255),b
  1887  00266C  0E01               	movlw	1
  1888  00266E  6FDD               	movwf	_debug& (0+255),b
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 28: switch(machine_state){
  1892                           
  1893                           ;main.c: 27: while(1){
  1894  002670  D018               	goto	l6055
  1895  002672                     l6037:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 30: UI();
  1899  002672  EC09  F000         	call	_UI	;wreg free
  1900                           
  1901                           ;main.c: 31: break;
  1902  002676  D015               	goto	l6055
  1903  002678                     l6039:
  1904                           
  1905                           ;main.c: 33: sort();
  1906  002678  ECC9  F018         	call	_sort	;wreg free
  1907                           
  1908                           ;main.c: 34: break;
  1909  00267C  D012               	goto	l6055
  1910  00267E                     l6041:
  1911                           
  1912                           ;main.c: 36: stopSignals();
  1913  00267E  EC06  F019         	call	_stopSignals	;wreg free
  1914                           
  1915                           ;main.c: 37: logRun();
  1916  002682  EC90  F00E         	call	_logRun	;wreg free
  1917                           
  1918                           ;main.c: 38: first = 1;
  1919  002686  0E00               	movlw	0
  1920  002688  0100               	movlb	0	; () banked
  1921  00268A  6FE6               	movwf	(_first+1)& (0+255),b
  1922  00268C  0E01               	movlw	1
  1923  00268E  6FE5               	movwf	_first& (0+255),b
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 39: UI();
  1927  002690  EC09  F000         	call	_UI	;wreg free
  1928                           
  1929                           ;main.c: 40: break;
  1930  002694  D006               	goto	l6055
  1931  002696                     l6049:
  1932                           
  1933                           ;main.c: 42: PortTestA5();
  1934  002696  EC26  F019         	call	_PortTestA5	;wreg free
  1935                           
  1936                           ;main.c: 43: break;
  1937  00269A  D003               	goto	l6055
  1938  00269C                     l6051:
  1939                           
  1940                           ;main.c: 45: stopSignals();
  1941  00269C  EC06  F019         	call	_stopSignals	;wreg free
  1942  0026A0                     l491:
  1943  0026A0  D7FF               	goto	l491
  1944  0026A2                     l6055:
  1945  0026A2  0100               	movlb	0	; () banked
  1946  0026A4  51FB               	movf	_machine_state& (0+255),w,b
  1947                           
  1948                           ; Switch size 1, requested type "space"
  1949                           ; Number of cases is 5, Range of values is 0 to 4
  1950                           ; switch strategies available:
  1951                           ; Name         Instructions Cycles
  1952                           ; simple_byte           16     9 (average)
  1953                           ;	Chosen strategy is simple_byte
  1954  0026A6  0A00               	xorlw	0	; case 0
  1955  0026A8  B4D8               	btfsc	status,2,c
  1956  0026AA  D7E3               	goto	l6037
  1957  0026AC  0A01               	xorlw	1	; case 1
  1958  0026AE  B4D8               	btfsc	status,2,c
  1959  0026B0  D7E3               	goto	l6039
  1960  0026B2  0A03               	xorlw	3	; case 2
  1961  0026B4  B4D8               	btfsc	status,2,c
  1962  0026B6  D7E3               	goto	l6041
  1963  0026B8  0A01               	xorlw	1	; case 3
  1964  0026BA  B4D8               	btfsc	status,2,c
  1965  0026BC  D7EC               	goto	l6049
  1966  0026BE  0A07               	xorlw	7	; case 4
  1967  0026C0  B4D8               	btfsc	status,2,c
  1968  0026C2  D7EC               	goto	l6051
  1969                           
  1970                           ; BSR set to: 0
  1971                           
  1972                           ; BSR set to: 0
  1973  0026C4  D7EE               	goto	l6055
  1974  0026C6                     __end_of_main:
  1975                           	opt stack 0
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _stopSignals *****************
  1987 ;; Defined at:
  1988 ;;		line 54 in file "main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;Total ram usage:        0 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    7
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text1
  2017  00320C                     __ptext1:
  2018                           	opt stack 0
  2019  00320C                     _stopSignals:
  2020                           	opt stack 23
  2021                           
  2022                           ;main.c: 55: LATA = 0x00;
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;incstack = 0
  2026  00320C  0E00               	movlw	0
  2027  00320E  6E89               	movwf	3977,c	;volatile
  2028                           
  2029                           ;main.c: 56: LATB = 0x00;
  2030  003210  0E00               	movlw	0
  2031  003212  6E8A               	movwf	3978,c	;volatile
  2032                           
  2033                           ;main.c: 57: LATC = 0x00;
  2034  003214  0E00               	movlw	0
  2035  003216  6E8B               	movwf	3979,c	;volatile
  2036                           
  2037                           ;main.c: 58: LATD = 0x00;
  2038  003218  0E00               	movlw	0
  2039  00321A  6E8C               	movwf	3980,c	;volatile
  2040                           
  2041                           ;main.c: 59: LATE = 0x00;
  2042  00321C  0E00               	movlw	0
  2043  00321E  6E8D               	movwf	3981,c	;volatile
  2044  003220  0012               	return		;funcret
  2045  003222                     __end_of_stopSignals:
  2046                           	opt stack 0
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           postdec1	equ	0xFE5
  2054                           fsr1l	equ	0xFE1
  2055                           status	equ	0xFD8
  2056                           
  2057 ;; *************** function _sort *****************
  2058 ;; Defined at:
  2059 ;;		line 55 in file "sort.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;Total ram usage:        0 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:   12
  2080 ;; This function calls:
  2081 ;;		_Distribution
  2082 ;;		_ID
  2083 ;;		_Loading
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text2
  2090  003192                     __ptext2:
  2091                           	opt stack 0
  2092  003192                     _sort:
  2093                           	opt stack 18
  2094                           
  2095                           ;sort.c: 56: if(machine_state == Sorting_state){
  2096                           
  2097                           ;incstack = 0
  2098  003192  0100               	movlb	0	; () banked
  2099  003194  05FB               	decf	_machine_state& (0+255),w,b
  2100  003196  B4D8               	btfsc	status,2,c
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;sort.c: 57: Loading();
  2104  003198  EC17  F012         	call	_Loading	;wreg free
  2105                           
  2106                           ;sort.c: 58: }
  2107                           ;sort.c: 59: if(machine_state == Sorting_state){
  2108  00319C  0100               	movlb	0	; () banked
  2109  00319E  05FB               	decf	_machine_state& (0+255),w,b
  2110  0031A0  B4D8               	btfsc	status,2,c
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;sort.c: 60: ID();
  2114  0031A2  ECC6  F00F         	call	_ID	;wreg free
  2115                           
  2116                           ;sort.c: 61: }
  2117                           ;sort.c: 62: if(machine_state == Sorting_state){
  2118  0031A6  0100               	movlb	0	; () banked
  2119  0031A8  05FB               	decf	_machine_state& (0+255),w,b
  2120  0031AA  A4D8               	btfss	status,2,c
  2121  0031AC  0012               	return	
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;sort.c: 63: Distribution();
  2125  0031AE  EC2C  F00F         	call	_Distribution	;wreg free
  2126  0031B2  0012               	return	
  2127  0031B4                     __end_of_sort:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _Loading *****************
  2140 ;; Defined at:
  2141 ;;		line 67 in file "sort.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        2 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:   11
  2162 ;; This function calls:
  2163 ;;		_initGlobalVars
  2164 ;;		_initServos
  2165 ;;		_initSortTimer
  2166 ;;		_lcdInst
  2167 ;; This function is called by:
  2168 ;;		_sort
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text3
  2173  00242E                     __ptext3:
  2174                           	opt stack 0
  2175  00242E                     _Loading:
  2176                           	opt stack 18
  2177                           
  2178                           ;sort.c: 68: if(first){
  2179                           
  2180                           ;incstack = 0
  2181  00242E  0100               	movlb	0	; () banked
  2182  002430  51E5               	movf	_first& (0+255),w,b
  2183  002432  0100               	movlb	0	; () banked
  2184  002434  11E6               	iorwf	(_first+1)& (0+255),w,b
  2185  002436  B4D8               	btfsc	status,2,c
  2186  002438  D014               	goto	l5089
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;sort.c: 69: initGlobalVars();
  2190  00243A  EC62  F014         	call	_initGlobalVars	;wreg free
  2191                           
  2192                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2193  00243E  0E01               	movlw	1
  2194  002440  EC40  F019         	call	_lcdInst
  2195  002444  0E68               	movlw	104
  2196  002446  0100               	movlb	0	; () banked
  2197  002448  6F8A               	movwf	??_Loading& (0+255),b
  2198  00244A  0EE4               	movlw	228
  2199  00244C                     u5097:
  2200  00244C  2EE8               	decfsz	wreg,f,c
  2201  00244E  D7FE               	bra	u5097
  2202  002450  2F8A               	decfsz	??_Loading& (0+255),f,b
  2203  002452  D7FC               	bra	u5097
  2204  002454  F000               	nop	
  2205                           
  2206                           ;sort.c: 71: initSortTimer();
  2207  002456  EC6D  F012         	call	_initSortTimer	;wreg free
  2208                           
  2209                           ;sort.c: 74: LATAbits.LATA5 = 1;
  2210  00245A  8A89               	bsf	3977,5,c	;volatile
  2211                           
  2212                           ;sort.c: 77: initServos();
  2213  00245C  EC0F  F016         	call	_initServos	;wreg free
  2214                           
  2215                           ;sort.c: 78: }
  2216  002460  0012               	return	
  2217  002462                     l5089:
  2218                           
  2219                           ;sort.c: 79: else{
  2220                           ;sort.c: 82: if(!f_loadingNewCan){
  2221  002462  0100               	movlb	0	; () banked
  2222  002464  51E3               	movf	_f_loadingNewCan& (0+255),w,b
  2223  002466  0100               	movlb	0	; () banked
  2224  002468  11E4               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2225  00246A  A4D8               	btfss	status,2,c
  2226  00246C  D016               	goto	l5103
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;sort.c: 86: if(!f_loadingNewCan){
  2230  00246E  0100               	movlb	0	; () banked
  2231  002470  51E3               	movf	_f_loadingNewCan& (0+255),w,b
  2232  002472  0100               	movlb	0	; () banked
  2233  002474  11E4               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2234  002476  B4D8               	btfsc	status,2,c
  2235  002478  0012               	return	
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;sort.c: 90: else{
  2239                           ;sort.c: 91: count_total++;
  2240                           
  2241                           ; BSR set to: 0
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;sort.c: 88: }
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;sort.c: 87: return;
  2248  00247A  0100               	movlb	0	; () banked
  2249  00247C  4BFD               	infsnz	_count_total& (0+255),f,b
  2250  00247E  2BFE               	incf	(_count_total+1)& (0+255),f,b
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;sort.c: 92: if(count_total == 12){
  2254  002480  0E0C               	movlw	12
  2255  002482  0100               	movlb	0	; () banked
  2256  002484  19FD               	xorwf	_count_total& (0+255),w,b
  2257  002486  0100               	movlb	0	; () banked
  2258  002488  11FE               	iorwf	(_count_total+1)& (0+255),w,b
  2259  00248A  A4D8               	btfss	status,2,c
  2260  00248C  0012               	return	
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;sort.c: 93: f_lastCan = 1;
  2264  00248E  0E00               	movlw	0
  2265  002490  0101               	movlb	1	; () banked
  2266  002492  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2267  002494  0E01               	movlw	1
  2268  002496  6F26               	movwf	_f_lastCan& (0+255),b
  2269                           
  2270                           ; BSR set to: 1
  2271                           ;sort.c: 94: }
  2272                           ;sort.c: 95: }
  2273                           ;sort.c: 96: }
  2274                           
  2275                           ; BSR set to: 1
  2276  002498  0012               	return	
  2277  00249A                     l5103:
  2278                           
  2279                           ;sort.c: 99: else if(f_ID_receive){
  2280  00249A  0100               	movlb	0	; () banked
  2281  00249C  51DF               	movf	_f_ID_receive& (0+255),w,b
  2282  00249E  0100               	movlb	0	; () banked
  2283  0024A0  11E0               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2284  0024A2  B4D8               	btfsc	status,2,c
  2285  0024A4  0012               	return	
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;sort.c: 100: f_loadingNewCan = 0;
  2289  0024A6  0E00               	movlw	0
  2290  0024A8  0100               	movlb	0	; () banked
  2291  0024AA  6FE4               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2292  0024AC  0E00               	movlw	0
  2293  0024AE  6FE3               	movwf	_f_loadingNewCan& (0+255),b
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;sort.c: 101: LATAbits.LATA4 = 1;
  2297  0024B0  8889               	bsf	3977,4,c	;volatile
  2298                           
  2299                           ;sort.c: 102: f_can_coming_to_ID = 1;
  2300  0024B2  0E00               	movlw	0
  2301  0024B4  0100               	movlb	0	; () banked
  2302  0024B6  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2303  0024B8  0E01               	movlw	1
  2304  0024BA  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;sort.c: 103: _delay((unsigned long)((100)*(32000000/4000.0)));
  2308  0024BC  0E05               	movlw	5
  2309  0024BE  0100               	movlb	0	; () banked
  2310  0024C0  6F8B               	movwf	(??_Loading+1)& (0+255),b
  2311  0024C2  0E0F               	movlw	15
  2312  0024C4  0100               	movlb	0	; () banked
  2313  0024C6  6F8A               	movwf	??_Loading& (0+255),b
  2314  0024C8  0EF1               	movlw	241
  2315  0024CA                     u5107:
  2316  0024CA  2EE8               	decfsz	wreg,f,c
  2317  0024CC  D7FE               	bra	u5107
  2318  0024CE  2F8A               	decfsz	??_Loading& (0+255),f,b
  2319  0024D0  D7FC               	bra	u5107
  2320  0024D2  2F8B               	decfsz	(??_Loading+1)& (0+255),f,b
  2321  0024D4  D7FA               	bra	u5107
  2322                           
  2323                           ;sort.c: 104: LATAbits.LATA4 = 0;
  2324  0024D6  9889               	bcf	3977,4,c	;volatile
  2325  0024D8  0012               	return	
  2326  0024DA                     __end_of_Loading:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           fsr1l	equ	0xFE1
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _initSortTimer *****************
  2339 ;; Defined at:
  2340 ;;		line 217 in file "sort.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  i               2    8[BANK0 ] int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        5 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:   10
  2361 ;; This function calls:
  2362 ;;		_getRTC
  2363 ;; This function is called by:
  2364 ;;		_Loading
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text4
  2369  0024DA                     __ptext4:
  2370                           	opt stack 0
  2371  0024DA                     _initSortTimer:
  2372                           	opt stack 18
  2373                           
  2374                           ;sort.c: 219: getRTC();
  2375                           
  2376                           ;incstack = 0
  2377  0024DA  ECA9  F013         	call	_getRTC	;wreg free
  2378                           
  2379                           ;sort.c: 220: for(int i = 0; i < 7; i++){
  2380  0024DE  0E00               	movlw	0
  2381  0024E0  0100               	movlb	0	; () banked
  2382  0024E2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2383  0024E4  0E00               	movlw	0
  2384  0024E6  6F88               	movwf	initSortTimer@i& (0+255),b
  2385  0024E8                     l4771:
  2386                           
  2387                           ; BSR set to: 0
  2388  0024E8  0100               	movlb	0	; () banked
  2389  0024EA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2390  0024EC  D008               	goto	l4775
  2391  0024EE  0100               	movlb	0	; () banked
  2392  0024F0  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2393  0024F2  E140               	bnz	l4781
  2394  0024F4  0E07               	movlw	7
  2395  0024F6  0100               	movlb	0	; () banked
  2396  0024F8  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2397  0024FA  B0D8               	btfsc	status,0,c
  2398  0024FC  D03B               	goto	l4781
  2399  0024FE                     l4775:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;sort.c: 221: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2403  0024FE  0E5B               	movlw	low _time
  2404  002500  0100               	movlb	0	; () banked
  2405  002502  2588               	addwf	initSortTimer@i& (0+255),w,b
  2406  002504  6ED9               	movwf	fsr2l,c
  2407  002506  0E00               	movlw	high _time
  2408  002508  0100               	movlb	0	; () banked
  2409  00250A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2410  00250C  6EDA               	movwf	fsr2h,c
  2411  00250E  50DF               	movf	indf2,w,c
  2412  002510  0100               	movlb	0	; () banked
  2413  002512  6F85               	movwf	??_initSortTimer& (0+255),b
  2414  002514  0100               	movlb	0	; () banked
  2415  002516  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2416  002518  0E0F               	movlw	15
  2417  00251A  1785               	andwf	??_initSortTimer& (0+255),f,b
  2418  00251C  0E0F               	movlw	15
  2419  00251E  0100               	movlb	0	; () banked
  2420  002520  1785               	andwf	??_initSortTimer& (0+255),f,b
  2421  002522  0100               	movlb	0	; () banked
  2422  002524  5185               	movf	??_initSortTimer& (0+255),w,b
  2423  002526  0D0A               	mullw	10
  2424  002528  0E5B               	movlw	low _time
  2425  00252A  0100               	movlb	0	; () banked
  2426  00252C  2588               	addwf	initSortTimer@i& (0+255),w,b
  2427  00252E  6ED9               	movwf	fsr2l,c
  2428  002530  0E00               	movlw	high _time
  2429  002532  0100               	movlb	0	; () banked
  2430  002534  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2431  002536  6EDA               	movwf	fsr2h,c
  2432  002538  50DF               	movf	indf2,w,c
  2433  00253A  0B0F               	andlw	15
  2434  00253C  0100               	movlb	0	; () banked
  2435  00253E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2436  002540  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2437  002542  50F3               	movf	prodl,w,c
  2438  002544  0100               	movlb	0	; () banked
  2439  002546  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2440  002548  50F4               	movf	prodh,w,c
  2441  00254A  0100               	movlb	0	; () banked
  2442  00254C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2443  00254E  90D8               	bcf	status,0,c
  2444  002550  0100               	movlb	0	; () banked
  2445  002552  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2446  002554  6ED9               	movwf	fsr2l,c
  2447  002556  0100               	movlb	0	; () banked
  2448  002558  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2449  00255A  6EDA               	movwf	fsr2h,c
  2450  00255C  0E0E               	movlw	low _startTime
  2451  00255E  26D9               	addwf	fsr2l,f,c
  2452  002560  0E01               	movlw	high _startTime
  2453  002562  22DA               	addwfc	fsr2h,f,c
  2454  002564  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2455  002568  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2456                           
  2457                           ; BSR set to: 0
  2458  00256C  0100               	movlb	0	; () banked
  2459  00256E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2460  002570  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2461  002572  D7BA               	goto	l4771
  2462  002574                     l4781:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;sort.c: 222: }
  2466                           ;sort.c: 224: T0CON = 0b00010111;
  2467  002574  0E17               	movlw	23
  2468  002576  6ED5               	movwf	4053,c	;volatile
  2469                           
  2470                           ;sort.c: 233: TMR0H = 0b10000101;
  2471  002578  0E85               	movlw	133
  2472  00257A  6ED7               	movwf	4055,c	;volatile
  2473                           
  2474                           ;sort.c: 234: TMR0L = 0b11101110;
  2475  00257C  0EEE               	movlw	238
  2476  00257E  6ED6               	movwf	4054,c	;volatile
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;sort.c: 235: TMR0ON = 1;
  2480  002580  8ED5               	bsf	4053,7,c	;volatile
  2481                           
  2482                           ; BSR set to: 0
  2483  002582  0012               	return		;funcret
  2484  002584                     __end_of_initSortTimer:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           fsr1l	equ	0xFE1
  2496                           indf2	equ	0xFDF
  2497                           postinc2	equ	0xFDE
  2498                           postdec2	equ	0xFDD
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function _initServos *****************
  2504 ;; Defined at:
  2505 ;;		line 237 in file "sort.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        1 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    8
  2526 ;; This function calls:
  2527 ;;		_updateServoPosition
  2528 ;; This function is called by:
  2529 ;;		_Loading
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text5
  2534  002C1E                     __ptext5:
  2535                           	opt stack 0
  2536  002C1E                     _initServos:
  2537                           	opt stack 20
  2538                           
  2539                           ;sort.c: 238: updateServoPosition(2000, 1);
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;incstack = 0
  2543  002C1E  0E07               	movlw	7
  2544  002C20  0100               	movlb	0	; () banked
  2545  002C22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2546  002C24  0ED0               	movlw	208
  2547  002C26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2548  002C28  0E00               	movlw	0
  2549  002C2A  0100               	movlb	0	; () banked
  2550  002C2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2551  002C2E  0E01               	movlw	1
  2552  002C30  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2553  002C32  EC27  F014         	call	_updateServoPosition	;wreg free
  2554                           
  2555                           ;sort.c: 239: updateServoPosition(1000, 3);
  2556  002C36  0E03               	movlw	3
  2557  002C38  0100               	movlb	0	; () banked
  2558  002C3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2559  002C3C  0EE8               	movlw	232
  2560  002C3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2561  002C40  0E00               	movlw	0
  2562  002C42  0100               	movlb	0	; () banked
  2563  002C44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2564  002C46  0E03               	movlw	3
  2565  002C48  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2566  002C4A  EC27  F014         	call	_updateServoPosition	;wreg free
  2567                           
  2568                           ;sort.c: 240: TMR1ON = 1;
  2569  002C4E  80CD               	bsf	4045,0,c	;volatile
  2570                           
  2571                           ;sort.c: 241: _delay((unsigned long)((5)*(32000000/4000.0)));
  2572  002C50  0E34               	movlw	52
  2573  002C52  0100               	movlb	0	; () banked
  2574  002C54  6F88               	movwf	??_initServos& (0+255),b
  2575  002C56  0EF1               	movlw	241
  2576  002C58                     u5117:
  2577  002C58  2EE8               	decfsz	wreg,f,c
  2578  002C5A  D7FE               	bra	u5117
  2579  002C5C  2F88               	decfsz	??_initServos& (0+255),f,b
  2580  002C5E  D7FC               	bra	u5117
  2581  002C60  D000               	nop2	
  2582                           
  2583                           ;sort.c: 242: TMR3ON = 1;
  2584  002C62  80B1               	bsf	4017,0,c	;volatile
  2585                           
  2586                           ;sort.c: 243: LATCbits.LATC0 = 0;
  2587  002C64  908B               	bcf	3979,0,c	;volatile
  2588  002C66  0012               	return		;funcret
  2589  002C68                     __end_of_initServos:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postdec1	equ	0xFE5
  2600                           fsr1l	equ	0xFE1
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _initGlobalVars *****************
  2609 ;; Defined at:
  2610 ;;		line 198 in file "sort.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, status,2
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;Total ram usage:        0 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    7
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_Loading
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text6
  2639  0028C4                     __ptext6:
  2640                           	opt stack 0
  2641  0028C4                     _initGlobalVars:
  2642                           	opt stack 21
  2643                           
  2644                           ;sort.c: 200: first = 0;
  2645                           
  2646                           ;incstack = 0
  2647  0028C4  0E00               	movlw	0
  2648  0028C6  0100               	movlb	0	; () banked
  2649  0028C8  6FE6               	movwf	(_first+1)& (0+255),b
  2650  0028CA  0E00               	movlw	0
  2651  0028CC  6FE5               	movwf	_first& (0+255),b
  2652                           
  2653                           ;sort.c: 203: f_loadingNewCan = 0;
  2654  0028CE  0E00               	movlw	0
  2655  0028D0  0100               	movlb	0	; () banked
  2656  0028D2  6FE4               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2657  0028D4  0E00               	movlw	0
  2658  0028D6  6FE3               	movwf	_f_loadingNewCan& (0+255),b
  2659                           
  2660                           ;sort.c: 204: f_lastCan = 0;
  2661  0028D8  0E00               	movlw	0
  2662  0028DA  0101               	movlb	1	; () banked
  2663  0028DC  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2664  0028DE  0E00               	movlw	0
  2665  0028E0  6F26               	movwf	_f_lastCan& (0+255),b
  2666                           
  2667                           ;sort.c: 205: f_ID_receive = 1;
  2668  0028E2  0E00               	movlw	0
  2669  0028E4  0100               	movlb	0	; () banked
  2670  0028E6  6FE0               	movwf	(_f_ID_receive+1)& (0+255),b
  2671  0028E8  0E01               	movlw	1
  2672  0028EA  6FDF               	movwf	_f_ID_receive& (0+255),b
  2673                           
  2674                           ;sort.c: 206: f_can_coming_to_ID = 0;
  2675  0028EC  0E00               	movlw	0
  2676  0028EE  0100               	movlb	0	; () banked
  2677  0028F0  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2678  0028F2  0E00               	movlw	0
  2679  0028F4  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2680                           
  2681                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  2682  0028F6  0E00               	movlw	0
  2683  0028F8  6E75               	movwf	_f_can_coming_to_distribution+1,c
  2684  0028FA  0E00               	movlw	0
  2685  0028FC  6E74               	movwf	_f_can_coming_to_distribution,c
  2686                           
  2687                           ;sort.c: 208: f_can_distributed = 0;
  2688  0028FE  0E00               	movlw	0
  2689  002900  0101               	movlb	1	; () banked
  2690  002902  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  2691  002904  0E00               	movlw	0
  2692  002906  6F24               	movwf	_f_can_distributed& (0+255),b
  2693                           
  2694                           ;sort.c: 211: count_total = 0;
  2695  002908  0E00               	movlw	0
  2696  00290A  0100               	movlb	0	; () banked
  2697  00290C  6FFE               	movwf	(_count_total+1)& (0+255),b
  2698  00290E  0E00               	movlw	0
  2699  002910  6FFD               	movwf	_count_total& (0+255),b
  2700                           
  2701                           ;sort.c: 212: count_pop_no_tab = 0;
  2702  002912  0E00               	movlw	0
  2703  002914  6E6B               	movwf	_count_pop_no_tab+1,c
  2704  002916  0E00               	movlw	0
  2705  002918  6E6A               	movwf	_count_pop_no_tab,c
  2706                           
  2707                           ;sort.c: 213: count_pop_w_tab = 0;
  2708  00291A  0E00               	movlw	0
  2709  00291C  6E6D               	movwf	_count_pop_w_tab+1,c
  2710  00291E  0E00               	movlw	0
  2711  002920  6E6C               	movwf	_count_pop_w_tab,c
  2712                           
  2713                           ;sort.c: 214: count_can_w_lab = 0;
  2714  002922  0E00               	movlw	0
  2715  002924  6E69               	movwf	_count_can_w_lab+1,c
  2716  002926  0E00               	movlw	0
  2717  002928  6E68               	movwf	_count_can_w_lab,c
  2718                           
  2719                           ;sort.c: 215: count_can_no_lab = 0;
  2720  00292A  0E00               	movlw	0
  2721  00292C  6E67               	movwf	_count_can_no_lab+1,c
  2722  00292E  0E00               	movlw	0
  2723  002930  6E66               	movwf	_count_can_no_lab,c
  2724                           
  2725                           ; BSR set to: 0
  2726  002932  0012               	return		;funcret
  2727  002934                     __end_of_initGlobalVars:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postdec1	equ	0xFE5
  2738                           fsr1l	equ	0xFE1
  2739                           indf2	equ	0xFDF
  2740                           postinc2	equ	0xFDE
  2741                           postdec2	equ	0xFDD
  2742                           fsr2h	equ	0xFDA
  2743                           fsr2l	equ	0xFD9
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _ID *****************
  2747 ;; Defined at:
  2748 ;;		line 108 in file "sort.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;Total ram usage:        8 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    9
  2769 ;; This function calls:
  2770 ;;		_readMAG
  2771 ;; This function is called by:
  2772 ;;		_sort
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text7
  2777  001F8C                     __ptext7:
  2778                           	opt stack 0
  2779  001F8C                     _ID:
  2780                           	opt stack 20
  2781                           
  2782                           ;sort.c: 109: if(f_can_coming_to_ID){
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;incstack = 0
  2786  001F8C  0100               	movlb	0	; () banked
  2787  001F8E  51E1               	movf	_f_can_coming_to_ID& (0+255),w,b
  2788  001F90  0100               	movlb	0	; () banked
  2789  001F92  11E2               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2790  001F94  B4D8               	btfsc	status,2,c
  2791  001F96  0012               	return	
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;sort.c: 111: _delay((unsigned long)((500)*(32000000/4000.0)));
  2795  001F98  0E15               	movlw	21
  2796  001F9A  0100               	movlb	0	; () banked
  2797  001F9C  6F87               	movwf	(??_ID+1)& (0+255),b
  2798  001F9E  0E4B               	movlw	75
  2799  001FA0  0100               	movlb	0	; () banked
  2800  001FA2  6F86               	movwf	??_ID& (0+255),b
  2801  001FA4  0EBE               	movlw	190
  2802  001FA6                     u5127:
  2803  001FA6  2EE8               	decfsz	wreg,f,c
  2804  001FA8  D7FE               	bra	u5127
  2805  001FAA  2F86               	decfsz	??_ID& (0+255),f,b
  2806  001FAC  D7FC               	bra	u5127
  2807  001FAE  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2808  001FB0  D7FA               	bra	u5127
  2809  001FB2  F000               	nop	
  2810                           
  2811                           ;sort.c: 116: int sensor_outputs[3];
  2812                           ;sort.c: 120: sensor_outputs[0] = PORTAbits.RA2;
  2813  001FB4  A480               	btfss	3968,2,c	;volatile
  2814  001FB6  D004               	goto	u3750
  2815  001FB8  0100               	movlb	0	; () banked
  2816  001FBA  6B86               	clrf	??_ID& (0+255),b
  2817  001FBC  2B86               	incf	??_ID& (0+255),f,b
  2818  001FBE  D002               	goto	u3758
  2819  001FC0                     u3750:
  2820  001FC0  0100               	movlb	0	; () banked
  2821  001FC2  6B86               	clrf	??_ID& (0+255),b
  2822  001FC4                     u3758:
  2823  001FC4  0100               	movlb	0	; () banked
  2824  001FC6  5186               	movf	??_ID& (0+255),w,b
  2825  001FC8  0100               	movlb	0	; () banked
  2826  001FCA  6F88               	movwf	ID@sensor_outputs& (0+255),b
  2827  001FCC  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;sort.c: 122: if(!sensor_outputs[0]){
  2831  001FCE  0100               	movlb	0	; () banked
  2832  001FD0  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2833  001FD2  0100               	movlb	0	; () banked
  2834  001FD4  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2835  001FD6  A4D8               	btfss	status,2,c
  2836  001FD8  D028               	goto	l5135
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;sort.c: 123: readMAG();
  2840  001FDA  EC34  F016         	call	_readMAG	;wreg free
  2841                           
  2842                           ;sort.c: 124: sensor_outputs[1] = MAG_signal;
  2843  001FDE  C0D9  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  2844  001FE2  C0DA  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  2845                           
  2846                           ;sort.c: 125: if(!sensor_outputs[1]){
  2847  001FE6  0100               	movlb	0	; () banked
  2848  001FE8  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2849  001FEA  0100               	movlb	0	; () banked
  2850  001FEC  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2851  001FEE  A4D8               	btfss	status,2,c
  2852  001FF0  D01C               	goto	l5135
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;sort.c: 126: LATAbits.LATA3 = 1;
  2856  001FF2  8689               	bsf	3977,3,c	;volatile
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;sort.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
  2860  001FF4  0E05               	movlw	5
  2861  001FF6  0100               	movlb	0	; () banked
  2862  001FF8  6F87               	movwf	(??_ID+1)& (0+255),b
  2863  001FFA  0E0F               	movlw	15
  2864  001FFC  0100               	movlb	0	; () banked
  2865  001FFE  6F86               	movwf	??_ID& (0+255),b
  2866  002000  0EF1               	movlw	241
  2867  002002                     u5137:
  2868  002002  2EE8               	decfsz	wreg,f,c
  2869  002004  D7FE               	bra	u5137
  2870  002006  2F86               	decfsz	??_ID& (0+255),f,b
  2871  002008  D7FC               	bra	u5137
  2872  00200A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2873  00200C  D7FA               	bra	u5137
  2874                           
  2875                           ;sort.c: 129: sensor_outputs[2] = PORTAbits.RA2;
  2876  00200E  A480               	btfss	3968,2,c	;volatile
  2877  002010  D004               	goto	u3780
  2878  002012  0100               	movlb	0	; () banked
  2879  002014  6B86               	clrf	??_ID& (0+255),b
  2880  002016  2B86               	incf	??_ID& (0+255),f,b
  2881  002018  D002               	goto	u3788
  2882  00201A                     u3780:
  2883  00201A  0100               	movlb	0	; () banked
  2884  00201C  6B86               	clrf	??_ID& (0+255),b
  2885  00201E                     u3788:
  2886  00201E  0100               	movlb	0	; () banked
  2887  002020  5186               	movf	??_ID& (0+255),w,b
  2888  002022  0100               	movlb	0	; () banked
  2889  002024  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  2890  002026  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;sort.c: 130: LATAbits.LATA3 = 0;
  2894  002028  9689               	bcf	3977,3,c	;volatile
  2895  00202A                     l5135:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;sort.c: 131: }
  2899                           ;sort.c: 132: }
  2900                           ;sort.c: 135: if(!sensor_outputs[0]){
  2901  00202A  0100               	movlb	0	; () banked
  2902  00202C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2903  00202E  0100               	movlb	0	; () banked
  2904  002030  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2905  002032  A4D8               	btfss	status,2,c
  2906  002034  D01E               	goto	l5153
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;sort.c: 136: if(!sensor_outputs[1]){
  2910  002036  0100               	movlb	0	; () banked
  2911  002038  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2912  00203A  0100               	movlb	0	; () banked
  2913  00203C  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2914  00203E  A4D8               	btfss	status,2,c
  2915  002040  D012               	goto	l5149
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;sort.c: 137: if(!sensor_outputs[2]){
  2919  002042  0100               	movlb	0	; () banked
  2920  002044  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  2921  002046  0100               	movlb	0	; () banked
  2922  002048  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  2923  00204A  A4D8               	btfss	status,2,c
  2924  00204C  D006               	goto	l5145
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;sort.c: 138: count_pop_no_tab++;
  2928  00204E  4A6A               	infsnz	_count_pop_no_tab,f,c
  2929  002050  2A6B               	incf	_count_pop_no_tab+1,f,c
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;sort.c: 139: cur_can = 0;
  2933  002052  0E00               	movlw	0
  2934  002054  6E6F               	movwf	_cur_can+1,c
  2935  002056  0E00               	movlw	0
  2936  002058  D011               	goto	L3
  2937  00205A                     l5145:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;sort.c: 141: else{
  2941                           ;sort.c: 142: count_pop_w_tab++;
  2942  00205A  4A6C               	infsnz	_count_pop_w_tab,f,c
  2943  00205C  2A6D               	incf	_count_pop_w_tab+1,f,c
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;sort.c: 143: cur_can = 1;
  2947  00205E  0E00               	movlw	0
  2948  002060  6E6F               	movwf	_cur_can+1,c
  2949  002062  0E01               	movlw	1
  2950  002064  D00B               	goto	L3
  2951  002066                     l5149:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;sort.c: 146: else{
  2955                           ;sort.c: 147: count_can_w_lab++;
  2956  002066  4A68               	infsnz	_count_can_w_lab,f,c
  2957  002068  2A69               	incf	_count_can_w_lab+1,f,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;sort.c: 148: cur_can = 2;
  2961  00206A  0E00               	movlw	0
  2962  00206C  6E6F               	movwf	_cur_can+1,c
  2963  00206E  0E02               	movlw	2
  2964  002070  D005               	goto	L3
  2965  002072                     l5153:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;sort.c: 151: else{
  2969                           ;sort.c: 152: count_can_no_lab++;
  2970  002072  4A66               	infsnz	_count_can_no_lab,f,c
  2971  002074  2A67               	incf	_count_can_no_lab+1,f,c
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;sort.c: 153: cur_can = 3;
  2975  002076  0E00               	movlw	0
  2976  002078  6E6F               	movwf	_cur_can+1,c
  2977  00207A  0E03               	movlw	3
  2978  00207C                     L3:
  2979  00207C  6E6E               	movwf	_cur_can,c
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;sort.c: 154: }
  2983                           ;sort.c: 156: LATCbits.LATC0 = 1;
  2984                           
  2985                           ; BSR set to: 0
  2986  00207E  808B               	bsf	3979,0,c	;volatile
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;sort.c: 157: f_can_coming_to_distribution = 1;
  2990  002080  0E00               	movlw	0
  2991  002082  6E75               	movwf	_f_can_coming_to_distribution+1,c
  2992  002084  0E01               	movlw	1
  2993  002086  6E74               	movwf	_f_can_coming_to_distribution,c
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;sort.c: 158: _delay((unsigned long)((500)*(32000000/4000.0)));
  2997  002088  0E15               	movlw	21
  2998  00208A  0100               	movlb	0	; () banked
  2999  00208C  6F87               	movwf	(??_ID+1)& (0+255),b
  3000  00208E  0E4B               	movlw	75
  3001  002090  0100               	movlb	0	; () banked
  3002  002092  6F86               	movwf	??_ID& (0+255),b
  3003  002094  0EBE               	movlw	190
  3004  002096                     u5147:
  3005  002096  2EE8               	decfsz	wreg,f,c
  3006  002098  D7FE               	bra	u5147
  3007  00209A  2F86               	decfsz	??_ID& (0+255),f,b
  3008  00209C  D7FC               	bra	u5147
  3009  00209E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3010  0020A0  D7FA               	bra	u5147
  3011  0020A2  F000               	nop	
  3012                           
  3013                           ;sort.c: 159: LATCbits.LATC0 = 0;
  3014  0020A4  908B               	bcf	3979,0,c	;volatile
  3015                           
  3016                           ;sort.c: 161: f_can_coming_to_ID = 0;
  3017  0020A6  0E00               	movlw	0
  3018  0020A8  0100               	movlb	0	; () banked
  3019  0020AA  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3020  0020AC  0E00               	movlw	0
  3021  0020AE  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  3022  0020B0  0012               	return	
  3023  0020B2                     __end_of_ID:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1l	equ	0xFE1
  3035                           indf2	equ	0xFDF
  3036                           postinc2	equ	0xFDE
  3037                           postdec2	equ	0xFDD
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _readMAG *****************
  3043 ;; Defined at:
  3044 ;;		line 29 in file "ADCFunctionality.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  res             2    4[BANK0 ] int 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        4 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    8
  3065 ;; This function calls:
  3066 ;;		_readADC
  3067 ;; This function is called by:
  3068 ;;		_ID
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text8
  3073  002C68                     __ptext8:
  3074                           	opt stack 0
  3075  002C68                     _readMAG:
  3076                           	opt stack 20
  3077                           
  3078                           ;ADCFunctionality.c: 30: readADC(1);
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;incstack = 0
  3082  002C68  0E01               	movlw	1
  3083  002C6A  EC2A  F018         	call	_readADC
  3084                           
  3085                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  3086  002C6E  50C3               	movf	4035,w,c	;volatile
  3087  002C70  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3088  002C74  0100               	movlb	0	; () banked
  3089  002C76  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3090  002C78  C082  F083         	movff	??_readMAG,??_readMAG+1
  3091  002C7C  0100               	movlb	0	; () banked
  3092  002C7E  6B82               	clrf	??_readMAG& (0+255),b
  3093  002C80  0100               	movlb	0	; () banked
  3094  002C82  1182               	iorwf	??_readMAG& (0+255),w,b
  3095  002C84  0100               	movlb	0	; () banked
  3096  002C86  6F84               	movwf	readMAG@res& (0+255),b
  3097  002C88  0100               	movlb	0	; () banked
  3098  002C8A  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3099  002C8C  0100               	movlb	0	; () banked
  3100  002C8E  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;ADCFunctionality.c: 32: MAG_signal = (res < 255) ? 1 : 0;
  3104  002C90  0100               	movlb	0	; () banked
  3105  002C92  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  3106  002C94  D007               	goto	u3441
  3107  002C96  0100               	movlb	0	; () banked
  3108  002C98  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3109  002C9A  E106               	bnz	u3440
  3110  002C9C  0100               	movlb	0	; () banked
  3111  002C9E  2984               	incf	readMAG@res& (0+255),w,b
  3112  002CA0  B0D8               	btfsc	status,0,c
  3113  002CA2  D002               	goto	u3440
  3114  002CA4                     u3441:
  3115  002CA4  0E01               	movlw	1
  3116  002CA6  D001               	goto	u3450
  3117  002CA8                     u3440:
  3118  002CA8  0E00               	movlw	0
  3119  002CAA                     u3450:
  3120  002CAA  0100               	movlb	0	; () banked
  3121  002CAC  6FD9               	movwf	_MAG_signal& (0+255),b
  3122  002CAE  6BDA               	clrf	(_MAG_signal+1)& (0+255),b
  3123                           
  3124                           ; BSR set to: 0
  3125  002CB0  0012               	return		;funcret
  3126  002CB2                     __end_of_readMAG:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postdec1	equ	0xFE5
  3137                           fsr1l	equ	0xFE1
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _readADC *****************
  3146 ;; Defined at:
  3147 ;;		line 15 in file "ADCFunctionality.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  channel         1    wreg     unsigned char 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  channel         1    1[BANK0 ] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        2 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    7
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_readMAG
  3172 ;;		_readIR
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text9
  3177  003054                     __ptext9:
  3178                           	opt stack 0
  3179  003054                     _readADC:
  3180                           	opt stack 20
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;incstack = 0
  3184                           ;readADC@channel stored from wreg
  3185  003054  0100               	movlb	0	; () banked
  3186  003056  6F81               	movwf	readADC@channel& (0+255),b
  3187                           
  3188                           ;ADCFunctionality.c: 17: ADCON0 = ((channel <<2));
  3189  003058  0100               	movlb	0	; () banked
  3190  00305A  4581               	rlncf	readADC@channel& (0+255),w,b
  3191  00305C  46E8               	rlncf	wreg,f,c
  3192  00305E  0BFC               	andlw	252
  3193  003060  6EC2               	movwf	4034,c	;volatile
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;ADCFunctionality.c: 18: ADON = 1;
  3197  003062  80C2               	bsf	4034,0,c	;volatile
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  3201  003064  82C2               	bsf	4034,1,c	;volatile
  3202                           
  3203                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3204  003066  D009               	goto	l4209
  3205  003068                     l4207:
  3206  003068  0E34               	movlw	52
  3207  00306A  0100               	movlb	0	; () banked
  3208  00306C  6F80               	movwf	??_readADC& (0+255),b
  3209  00306E  0EF1               	movlw	241
  3210  003070                     u5157:
  3211  003070  2EE8               	decfsz	wreg,f,c
  3212  003072  D7FE               	bra	u5157
  3213  003074  2F80               	decfsz	??_readADC& (0+255),f,b
  3214  003076  D7FC               	bra	u5157
  3215  003078  D000               	nop2	
  3216  00307A                     l4209:
  3217  00307A  A2C2               	btfss	4034,1,c	;volatile
  3218  00307C  0012               	return	
  3219  00307E  D7F4               	goto	l4207
  3220  003080                     __end_of_readADC:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           postinc0	equ	0xFEE
  3229                           wreg	equ	0xFE8
  3230                           postdec1	equ	0xFE5
  3231                           fsr1l	equ	0xFE1
  3232                           indf2	equ	0xFDF
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _Distribution *****************
  3240 ;; Defined at:
  3241 ;;		line 164 in file "sort.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;Total ram usage:        2 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    8
  3262 ;; This function calls:
  3263 ;;		_updateServoPosition
  3264 ;; This function is called by:
  3265 ;;		_sort
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text10
  3270  001E58                     __ptext10:
  3271                           	opt stack 0
  3272  001E58                     _Distribution:
  3273                           	opt stack 21
  3274                           
  3275                           ;sort.c: 165: if(f_can_coming_to_distribution){
  3276                           
  3277                           ;incstack = 0
  3278  001E58  5074               	movf	_f_can_coming_to_distribution,w,c
  3279  001E5A  1075               	iorwf	_f_can_coming_to_distribution+1,w,c
  3280  001E5C  B4D8               	btfsc	status,2,c
  3281  001E5E  0012               	return	
  3282  001E60  D034               	goto	l5181
  3283  001E62                     l5171:
  3284                           
  3285                           ;sort.c: 170: updateServoPosition(1000, 1);
  3286  001E62  0E03               	movlw	3
  3287  001E64  0100               	movlb	0	; () banked
  3288  001E66  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3289  001E68  0EE8               	movlw	232
  3290  001E6A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3291  001E6C  0E00               	movlw	0
  3292  001E6E  0100               	movlb	0	; () banked
  3293  001E70  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3294  001E72  0E01               	movlw	1
  3295  001E74  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3296  001E76  EC27  F014         	call	_updateServoPosition	;wreg free
  3297                           
  3298                           ;sort.c: 171: break;
  3299  001E7A  D03E               	goto	l5183
  3300  001E7C                     l5173:
  3301                           
  3302                           ;sort.c: 173: updateServoPosition(1333, 1);
  3303  001E7C  0E05               	movlw	5
  3304  001E7E  0100               	movlb	0	; () banked
  3305  001E80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3306  001E82  0E35               	movlw	53
  3307  001E84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3308  001E86  0E00               	movlw	0
  3309  001E88  0100               	movlb	0	; () banked
  3310  001E8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3311  001E8C  0E01               	movlw	1
  3312  001E8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3313  001E90  EC27  F014         	call	_updateServoPosition	;wreg free
  3314                           
  3315                           ;sort.c: 174: break;
  3316  001E94  D031               	goto	l5183
  3317  001E96                     l5175:
  3318                           
  3319                           ;sort.c: 176: updateServoPosition(1666, 1);
  3320  001E96  0E06               	movlw	6
  3321  001E98  0100               	movlb	0	; () banked
  3322  001E9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3323  001E9C  0E82               	movlw	130
  3324  001E9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3325  001EA0  0E00               	movlw	0
  3326  001EA2  0100               	movlb	0	; () banked
  3327  001EA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3328  001EA6  0E01               	movlw	1
  3329  001EA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3330  001EAA  EC27  F014         	call	_updateServoPosition	;wreg free
  3331                           
  3332                           ;sort.c: 177: break;
  3333  001EAE  D024               	goto	l5183
  3334  001EB0                     l5177:
  3335                           
  3336                           ;sort.c: 179: updateServoPosition(2000, 1);
  3337  001EB0  0E07               	movlw	7
  3338  001EB2  0100               	movlb	0	; () banked
  3339  001EB4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3340  001EB6  0ED0               	movlw	208
  3341  001EB8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3342  001EBA  0E00               	movlw	0
  3343  001EBC  0100               	movlb	0	; () banked
  3344  001EBE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3345  001EC0  0E01               	movlw	1
  3346  001EC2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3347  001EC4  EC27  F014         	call	_updateServoPosition	;wreg free
  3348                           
  3349                           ;sort.c: 183: }
  3350                           
  3351                           ;sort.c: 182: break;
  3352                           
  3353                           ;sort.c: 181: default:
  3354                           
  3355                           ;sort.c: 180: break;
  3356  001EC8  D017               	goto	l5183
  3357  001ECA                     l5181:
  3358  001ECA  C06E  F088         	movff	_cur_can,??_Distribution
  3359  001ECE  C06F  F089         	movff	_cur_can+1,??_Distribution+1
  3360                           
  3361                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3362                           ; Switch size 1, requested type "space"
  3363                           ; Number of cases is 1, Range of values is 0 to 0
  3364                           ; switch strategies available:
  3365                           ; Name         Instructions Cycles
  3366                           ; simple_byte            4     3 (average)
  3367                           ;	Chosen strategy is simple_byte
  3368  001ED2  0100               	movlb	0	; () banked
  3369  001ED4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3370  001ED6  0A00               	xorlw	0	; case 0
  3371  001ED8  A4D8               	btfss	status,2,c
  3372  001EDA  D00E               	goto	l5183
  3373                           
  3374                           ; BSR set to: 0
  3375                           ; Switch size 1, requested type "space"
  3376                           ; Number of cases is 4, Range of values is 0 to 3
  3377                           ; switch strategies available:
  3378                           ; Name         Instructions Cycles
  3379                           ; simple_byte           13     7 (average)
  3380                           ;	Chosen strategy is simple_byte
  3381  001EDC  0100               	movlb	0	; () banked
  3382  001EDE  5188               	movf	??_Distribution& (0+255),w,b
  3383  001EE0  0A00               	xorlw	0	; case 0
  3384  001EE2  B4D8               	btfsc	status,2,c
  3385  001EE4  D7BE               	goto	l5171
  3386  001EE6  0A01               	xorlw	1	; case 1
  3387  001EE8  B4D8               	btfsc	status,2,c
  3388  001EEA  D7C8               	goto	l5173
  3389  001EEC  0A03               	xorlw	3	; case 2
  3390  001EEE  B4D8               	btfsc	status,2,c
  3391  001EF0  D7D2               	goto	l5175
  3392  001EF2  0A01               	xorlw	1	; case 3
  3393  001EF4  B4D8               	btfsc	status,2,c
  3394  001EF6  D7DC               	goto	l5177
  3395  001EF8                     l5183:
  3396                           
  3397                           ;sort.c: 184: _delay((unsigned long)((500)*(32000000/4000.0)));
  3398  001EF8  0E15               	movlw	21
  3399  001EFA  0100               	movlb	0	; () banked
  3400  001EFC  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3401  001EFE  0E4B               	movlw	75
  3402  001F00  0100               	movlb	0	; () banked
  3403  001F02  6F88               	movwf	??_Distribution& (0+255),b
  3404  001F04  0EBE               	movlw	190
  3405  001F06                     u5167:
  3406  001F06  2EE8               	decfsz	wreg,f,c
  3407  001F08  D7FE               	bra	u5167
  3408  001F0A  2F88               	decfsz	??_Distribution& (0+255),f,b
  3409  001F0C  D7FC               	bra	u5167
  3410  001F0E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3411  001F10  D7FA               	bra	u5167
  3412  001F12  F000               	nop	
  3413                           
  3414                           ;sort.c: 187: updateServoPosition(1500, 3);
  3415  001F14  0E05               	movlw	5
  3416  001F16  0100               	movlb	0	; () banked
  3417  001F18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3418  001F1A  0EDC               	movlw	220
  3419  001F1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3420  001F1E  0E00               	movlw	0
  3421  001F20  0100               	movlb	0	; () banked
  3422  001F22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3423  001F24  0E03               	movlw	3
  3424  001F26  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3425  001F28  EC27  F014         	call	_updateServoPosition	;wreg free
  3426                           
  3427                           ;sort.c: 188: _delay((unsigned long)((500)*(32000000/4000.0)));
  3428  001F2C  0E15               	movlw	21
  3429  001F2E  0100               	movlb	0	; () banked
  3430  001F30  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3431  001F32  0E4B               	movlw	75
  3432  001F34  0100               	movlb	0	; () banked
  3433  001F36  6F88               	movwf	??_Distribution& (0+255),b
  3434  001F38  0EBE               	movlw	190
  3435  001F3A                     u5177:
  3436  001F3A  2EE8               	decfsz	wreg,f,c
  3437  001F3C  D7FE               	bra	u5177
  3438  001F3E  2F88               	decfsz	??_Distribution& (0+255),f,b
  3439  001F40  D7FC               	bra	u5177
  3440  001F42  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3441  001F44  D7FA               	bra	u5177
  3442  001F46  F000               	nop	
  3443                           
  3444                           ;sort.c: 191: updateServoPosition(1500, 1);
  3445  001F48  0E05               	movlw	5
  3446  001F4A  0100               	movlb	0	; () banked
  3447  001F4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3448  001F4E  0EDC               	movlw	220
  3449  001F50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3450  001F52  0E00               	movlw	0
  3451  001F54  0100               	movlb	0	; () banked
  3452  001F56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3453  001F58  0E01               	movlw	1
  3454  001F5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3455  001F5C  EC27  F014         	call	_updateServoPosition	;wreg free
  3456                           
  3457                           ;sort.c: 192: updateServoPosition(1000, 3);
  3458  001F60  0E03               	movlw	3
  3459  001F62  0100               	movlb	0	; () banked
  3460  001F64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3461  001F66  0EE8               	movlw	232
  3462  001F68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3463  001F6A  0E00               	movlw	0
  3464  001F6C  0100               	movlb	0	; () banked
  3465  001F6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3466  001F70  0E03               	movlw	3
  3467  001F72  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3468  001F74  EC27  F014         	call	_updateServoPosition	;wreg free
  3469                           
  3470                           ;sort.c: 193: f_can_coming_to_distribution = 0;
  3471  001F78  0E00               	movlw	0
  3472  001F7A  6E75               	movwf	_f_can_coming_to_distribution+1,c
  3473  001F7C  0E00               	movlw	0
  3474  001F7E  6E74               	movwf	_f_can_coming_to_distribution,c
  3475                           
  3476                           ;sort.c: 194: f_can_distributed = 1;
  3477  001F80  0E00               	movlw	0
  3478  001F82  0101               	movlb	1	; () banked
  3479  001F84  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  3480  001F86  0E01               	movlw	1
  3481  001F88  6F24               	movwf	_f_can_distributed& (0+255),b
  3482  001F8A  0012               	return	
  3483  001F8C                     __end_of_Distribution:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postdec1	equ	0xFE5
  3494                           fsr1l	equ	0xFE1
  3495                           indf2	equ	0xFDF
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _updateServoPosition *****************
  3503 ;; Defined at:
  3504 ;;		line 285 in file "sort.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  time_us         2    0[BANK0 ] int 
  3507 ;;  timer           2    2[BANK0 ] int 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  my_time         2    6[BANK0 ] unsigned int 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:        8 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    7
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_Distribution
  3530 ;;		_initServos
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text11
  3535  00284E                     __ptext11:
  3536                           	opt stack 0
  3537  00284E                     _updateServoPosition:
  3538                           	opt stack 20
  3539                           
  3540                           ;sort.c: 286: unsigned int my_time = 65535 - time_us;
  3541                           
  3542                           ;incstack = 0
  3543  00284E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  3544  002852  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  3545  002856  0100               	movlb	0	; () banked
  3546  002858  1F84               	comf	??_updateServoPosition& (0+255),f,b
  3547  00285A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  3548  00285C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  3549  00285E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  3550  002860  0EFF               	movlw	255
  3551  002862  0100               	movlb	0	; () banked
  3552  002864  2584               	addwf	??_updateServoPosition& (0+255),w,b
  3553  002866  0100               	movlb	0	; () banked
  3554  002868  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  3555  00286A  0EFF               	movlw	255
  3556  00286C  0100               	movlb	0	; () banked
  3557  00286E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  3558  002870  0100               	movlb	0	; () banked
  3559  002872  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  3560                           
  3561                           ;sort.c: 287: switch(timer){
  3562  002874  D015               	goto	l4375
  3563  002876                     l4373:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 289: servoTimes[0] = my_time >> 8;
  3567  002876  0100               	movlb	0	; () banked
  3568  002878  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3569  00287A  0101               	movlb	1	; () banked
  3570  00287C  6F1C               	movwf	_servoTimes& (0+255),b
  3571  00287E  6B1D               	clrf	(_servoTimes+1)& (0+255),b
  3572                           
  3573                           ;sort.c: 290: servoTimes[1] = my_time & 0xFF;
  3574  002880  0100               	movlb	0	; () banked
  3575  002882  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3576  002884  0101               	movlb	1	; () banked
  3577  002886  6F1E               	movwf	(_servoTimes+2)& (0+255),b
  3578  002888  6B1F               	clrf	(_servoTimes+3)& (0+255),b
  3579  00288A                     l781:
  3580                           
  3581                           ;sort.c: 292: servoTimes[2] = my_time >> 8;
  3582  00288A  0100               	movlb	0	; () banked
  3583  00288C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3584  00288E  0101               	movlb	1	; () banked
  3585  002890  6F20               	movwf	(_servoTimes+4)& (0+255),b
  3586  002892  6B21               	clrf	(_servoTimes+5)& (0+255),b
  3587                           
  3588                           ;sort.c: 293: servoTimes[3] = my_time & 0xFF;
  3589  002894  0100               	movlb	0	; () banked
  3590  002896  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3591  002898  0101               	movlb	1	; () banked
  3592  00289A  6F22               	movwf	(_servoTimes+6)& (0+255),b
  3593  00289C  6B23               	clrf	(_servoTimes+7)& (0+255),b
  3594                           
  3595                           ;sort.c: 294: }
  3596  00289E  0012               	return	
  3597  0028A0                     l4375:
  3598  0028A0  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  3599  0028A4  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  3600                           
  3601                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3602                           ; Switch size 1, requested type "space"
  3603                           ; Number of cases is 1, Range of values is 0 to 0
  3604                           ; switch strategies available:
  3605                           ; Name         Instructions Cycles
  3606                           ; simple_byte            4     3 (average)
  3607                           ;	Chosen strategy is simple_byte
  3608  0028A8  0100               	movlb	0	; () banked
  3609  0028AA  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  3610  0028AC  0A00               	xorlw	0	; case 0
  3611  0028AE  A4D8               	btfss	status,2,c
  3612  0028B0  0012               	return	
  3613                           
  3614                           ; BSR set to: 0
  3615                           ; Switch size 1, requested type "space"
  3616                           ; Number of cases is 2, Range of values is 1 to 3
  3617                           ; switch strategies available:
  3618                           ; Name         Instructions Cycles
  3619                           ; simple_byte            7     4 (average)
  3620                           ;	Chosen strategy is simple_byte
  3621  0028B2  0100               	movlb	0	; () banked
  3622  0028B4  5184               	movf	??_updateServoPosition& (0+255),w,b
  3623  0028B6  0A01               	xorlw	1	; case 1
  3624  0028B8  B4D8               	btfsc	status,2,c
  3625  0028BA  D7DD               	goto	l4373
  3626  0028BC  0A02               	xorlw	2	; case 3
  3627  0028BE  A4D8               	btfss	status,2,c
  3628  0028C0  0012               	return	
  3629  0028C2  D7E3               	goto	l781
  3630  0028C4                     __end_of_updateServoPosition:
  3631                           	opt stack 0
  3632                           tblptru	equ	0xFF8
  3633                           tblptrh	equ	0xFF7
  3634                           tblptrl	equ	0xFF6
  3635                           tablat	equ	0xFF5
  3636                           prodh	equ	0xFF4
  3637                           prodl	equ	0xFF3
  3638                           postinc0	equ	0xFEE
  3639                           wreg	equ	0xFE8
  3640                           postdec1	equ	0xFE5
  3641                           fsr1l	equ	0xFE1
  3642                           indf2	equ	0xFDF
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _machineConfig *****************
  3650 ;; Defined at:
  3651 ;;		line 15 in file "MachineConfig.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;		None
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;		None
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;Total ram usage:        0 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    7
  3672 ;; This function calls:
  3673 ;;		Nothing
  3674 ;; This function is called by:
  3675 ;;		_main
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text12
  3680  002ACE                     __ptext12:
  3681                           	opt stack 0
  3682  002ACE                     _machineConfig:
  3683                           	opt stack 23
  3684                           
  3685                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  3686                           
  3687                           ;incstack = 0
  3688  002ACE  0EF0               	movlw	240
  3689  002AD0  6ED3               	movwf	4051,c	;volatile
  3690                           
  3691                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  3692  002AD2  8C9B               	bsf	3995,6,c	;volatile
  3693                           
  3694                           ;MachineConfig.c: 21: ADCON0 = 0x00;
  3695  002AD4  0E00               	movlw	0
  3696  002AD6  6EC2               	movwf	4034,c	;volatile
  3697                           
  3698                           ;MachineConfig.c: 22: ADCON1 = 0x0D;
  3699  002AD8  0E0D               	movlw	13
  3700  002ADA  6EC1               	movwf	4033,c	;volatile
  3701                           
  3702                           ;MachineConfig.c: 25: VCFG1 = 0;
  3703  002ADC  9AC1               	bcf	4033,5,c	;volatile
  3704                           
  3705                           ;MachineConfig.c: 26: VCFG0 = 0;
  3706  002ADE  98C1               	bcf	4033,4,c	;volatile
  3707                           
  3708                           ;MachineConfig.c: 27: CVRCON = 0x00;
  3709  002AE0  0E00               	movlw	0
  3710  002AE2  6EB5               	movwf	4021,c	;volatile
  3711                           
  3712                           ;MachineConfig.c: 28: CMCONbits.CIS = 0;
  3713  002AE4  96B4               	bcf	4020,3,c	;volatile
  3714                           
  3715                           ;MachineConfig.c: 29: ADFM = 1;
  3716  002AE6  8EC0               	bsf	4032,7,c	;volatile
  3717                           
  3718                           ;MachineConfig.c: 30: nRBPU = 0;
  3719  002AE8  9EF1               	bcf	intcon2,7,c	;volatile
  3720                           
  3721                           ;MachineConfig.c: 34: TRISA = 0b01000111;
  3722  002AEA  0E47               	movlw	71
  3723  002AEC  6E92               	movwf	3986,c	;volatile
  3724                           
  3725                           ;MachineConfig.c: 36: TRISB = 0b11110010;
  3726  002AEE  0EF2               	movlw	242
  3727  002AF0  6E93               	movwf	3987,c	;volatile
  3728                           
  3729                           ;MachineConfig.c: 39: TRISC = 0x00;
  3730  002AF2  0E00               	movlw	0
  3731  002AF4  6E94               	movwf	3988,c	;volatile
  3732                           
  3733                           ;MachineConfig.c: 43: TRISD = 0x00;
  3734  002AF6  0E00               	movlw	0
  3735  002AF8  6E95               	movwf	3989,c	;volatile
  3736                           
  3737                           ;MachineConfig.c: 46: TRISE = 0x00;
  3738  002AFA  0E00               	movlw	0
  3739  002AFC  6E96               	movwf	3990,c	;volatile
  3740                           
  3741                           ;MachineConfig.c: 49: LATA = 0x00;
  3742  002AFE  0E00               	movlw	0
  3743  002B00  6E89               	movwf	3977,c	;volatile
  3744                           
  3745                           ;MachineConfig.c: 50: LATB = 0x00;
  3746  002B02  0E00               	movlw	0
  3747  002B04  6E8A               	movwf	3978,c	;volatile
  3748                           
  3749                           ;MachineConfig.c: 51: LATC = 0x00;
  3750  002B06  0E00               	movlw	0
  3751  002B08  6E8B               	movwf	3979,c	;volatile
  3752                           
  3753                           ;MachineConfig.c: 52: LATD = 0x00;
  3754  002B0A  0E00               	movlw	0
  3755  002B0C  6E8C               	movwf	3980,c	;volatile
  3756                           
  3757                           ;MachineConfig.c: 53: LATE = 0x00;
  3758  002B0E  0E00               	movlw	0
  3759  002B10  6E8D               	movwf	3981,c	;volatile
  3760                           
  3761                           ;MachineConfig.c: 56: INT1IE = 1;
  3762  002B12  86F0               	bsf	intcon3,3,c	;volatile
  3763                           
  3764                           ;MachineConfig.c: 58: TMR0IE = 1;
  3765  002B14  8AF2               	bsf	intcon,5,c	;volatile
  3766                           
  3767                           ;MachineConfig.c: 59: TMR1IE = 1;
  3768  002B16  809D               	bsf	3997,0,c	;volatile
  3769                           
  3770                           ;MachineConfig.c: 60: T1CON = 0b10110000;
  3771  002B18  0EB0               	movlw	176
  3772  002B1A  6ECD               	movwf	4045,c	;volatile
  3773                           
  3774                           ;MachineConfig.c: 61: TMR2IE = 1;
  3775  002B1C  829D               	bsf	3997,1,c	;volatile
  3776                           
  3777                           ;MachineConfig.c: 62: TMR3IE = 1;
  3778  002B1E  82A0               	bsf	4000,1,c	;volatile
  3779                           
  3780                           ;MachineConfig.c: 63: PEIE = 1;
  3781  002B20  8CF2               	bsf	intcon,6,c	;volatile
  3782                           
  3783                           ;MachineConfig.c: 65: ADIE = 1;
  3784  002B22  8C9D               	bsf	3997,6,c	;volatile
  3785                           
  3786                           ;MachineConfig.c: 66: (INTCONbits.GIE = 0);
  3787  002B24  9EF2               	bcf	intcon,7,c	;volatile
  3788  002B26  0012               	return		;funcret
  3789  002B28                     __end_of_machineConfig:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           intcon	equ	0xFF2
  3798                           intcon2	equ	0xFF1
  3799                           intcon3	equ	0xFF0
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _logRun *****************
  3812 ;; Defined at:
  3813 ;;		line 84 in file "EEPROM.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  byte_i          1   52[BANK0 ] unsigned char 
  3818 ;;  i               2   54[BANK0 ] int 
  3819 ;;  addr            2   56[BANK0 ] unsigned short 
  3820 ;;  byte11          1   53[BANK0 ] unsigned char 
  3821 ;;  byte3           1   51[BANK0 ] unsigned char 
  3822 ;;  byte2           1   50[BANK0 ] unsigned char 
  3823 ;;  byte1           1   49[BANK0 ] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;Total ram usage:        9 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:   11
  3840 ;; This function calls:
  3841 ;;		_EEPROM_read
  3842 ;;		_EEPROM_write
  3843 ;; This function is called by:
  3844 ;;		_main
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text13
  3849  001D20                     __ptext13:
  3850                           	opt stack 0
  3851  001D20                     _logRun:
  3852                           	opt stack 19
  3853                           
  3854                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  3855                           
  3856                           ;incstack = 0
  3857  001D20  0E00               	movlw	0
  3858  001D22  0100               	movlb	0	; () banked
  3859  001D24  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3860  001D26  0E00               	movlw	0
  3861  001D28  6F80               	movwf	EEPROM_read@address& (0+255),b
  3862  001D2A  ECFA  F018         	call	_EEPROM_read	;wreg free
  3863  001D2E  0100               	movlb	0	; () banked
  3864  001D30  6FFC               	movwf	_sel& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  3868  001D32  0100               	movlb	0	; () banked
  3869  001D34  51FC               	movf	_sel& (0+255),w,b
  3870  001D36  0D0B               	mullw	11
  3871  001D38  0E01               	movlw	1
  3872  001D3A  24F3               	addwf	prodl,w,c
  3873  001D3C  0100               	movlb	0	; () banked
  3874  001D3E  6FB8               	movwf	logRun@addr& (0+255),b
  3875  001D40  0E00               	movlw	0
  3876  001D42  20F4               	addwfc	prodh,w,c
  3877  001D44  0100               	movlb	0	; () banked
  3878  001D46  6FB9               	movwf	(logRun@addr+1)& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;EEPROM.c: 101: if (sel < 3){
  3882  001D48  0E03               	movlw	3
  3883  001D4A  0100               	movlb	0	; () banked
  3884  001D4C  61FC               	cpfslt	_sel& (0+255),b
  3885  001D4E  D00C               	goto	l5943
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;EEPROM.c: 102: sel++;
  3889  001D50  0100               	movlb	0	; () banked
  3890  001D52  2BFC               	incf	_sel& (0+255),f,b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;EEPROM.c: 103: EEPROM_write(0, sel);
  3894  001D54  0E00               	movlw	0
  3895  001D56  0100               	movlb	0	; () banked
  3896  001D58  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3897  001D5A  0E00               	movlw	0
  3898  001D5C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3899  001D5E  C0FC  F0AD         	movff	_sel,EEPROM_write@data
  3900  001D62  ECE6  F010         	call	_EEPROM_write	;wreg free
  3901                           
  3902                           ;EEPROM.c: 104: }
  3903  001D66  D00A               	goto	l5945
  3904  001D68                     l5943:
  3905                           
  3906                           ;EEPROM.c: 105: else{
  3907                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  3908  001D68  0E00               	movlw	0
  3909  001D6A  0100               	movlb	0	; () banked
  3910  001D6C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3911  001D6E  0E00               	movlw	0
  3912  001D70  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3913  001D72  0E00               	movlw	0
  3914  001D74  0100               	movlb	0	; () banked
  3915  001D76  6FAD               	movwf	EEPROM_write@data& (0+255),b
  3916  001D78  ECE6  F010         	call	_EEPROM_write	;wreg free
  3917  001D7C                     l5945:
  3918                           
  3919                           ;EEPROM.c: 107: }
  3920                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  3921  001D7C  0100               	movlb	0	; () banked
  3922  001D7E  51FD               	movf	_count_total& (0+255),w,b
  3923  001D80  0980               	iorlw	128
  3924  001D82  0100               	movlb	0	; () banked
  3925  001D84  6FB1               	movwf	logRun@byte1& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  3929  001D86  C0B8  F0AB         	movff	logRun@addr,EEPROM_write@address
  3930  001D8A  C0B9  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3931  001D8E  C0B1  F0AD         	movff	logRun@byte1,EEPROM_write@data
  3932  001D92  ECE6  F010         	call	_EEPROM_write	;wreg free
  3933                           
  3934                           ;EEPROM.c: 112: addr++;
  3935  001D96  0100               	movlb	0	; () banked
  3936  001D98  4BB8               	infsnz	logRun@addr& (0+255),f,b
  3937  001D9A  2BB9               	incf	(logRun@addr+1)& (0+255),f,b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  3941  001D9C  386A               	swapf	_count_pop_no_tab,w,c
  3942  001D9E  0BF0               	andlw	240
  3943  001DA0  106C               	iorwf	_count_pop_w_tab,w,c
  3944  001DA2  0100               	movlb	0	; () banked
  3945  001DA4  6FB2               	movwf	logRun@byte2& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  3949  001DA6  C0B8  F0AB         	movff	logRun@addr,EEPROM_write@address
  3950  001DAA  C0B9  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3951  001DAE  C0B2  F0AD         	movff	logRun@byte2,EEPROM_write@data
  3952  001DB2  ECE6  F010         	call	_EEPROM_write	;wreg free
  3953                           
  3954                           ;EEPROM.c: 117: addr++;
  3955  001DB6  0100               	movlb	0	; () banked
  3956  001DB8  4BB8               	infsnz	logRun@addr& (0+255),f,b
  3957  001DBA  2BB9               	incf	(logRun@addr+1)& (0+255),f,b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  3961  001DBC  3868               	swapf	_count_can_w_lab,w,c
  3962  001DBE  0BF0               	andlw	240
  3963  001DC0  1066               	iorwf	_count_can_no_lab,w,c
  3964  001DC2  0100               	movlb	0	; () banked
  3965  001DC4  6FB3               	movwf	logRun@byte3& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  3969  001DC6  C0B8  F0AB         	movff	logRun@addr,EEPROM_write@address
  3970  001DCA  C0B9  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3971  001DCE  C0B3  F0AD         	movff	logRun@byte3,EEPROM_write@data
  3972  001DD2  ECE6  F010         	call	_EEPROM_write	;wreg free
  3973                           
  3974                           ;EEPROM.c: 120: addr++;
  3975  001DD6  0100               	movlb	0	; () banked
  3976  001DD8  4BB8               	infsnz	logRun@addr& (0+255),f,b
  3977  001DDA  2BB9               	incf	(logRun@addr+1)& (0+255),f,b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  3981  001DDC  0E00               	movlw	0
  3982  001DDE  0100               	movlb	0	; () banked
  3983  001DE0  6FB7               	movwf	(logRun@i+1)& (0+255),b
  3984  001DE2  0E00               	movlw	0
  3985  001DE4  6FB6               	movwf	logRun@i& (0+255),b
  3986                           
  3987                           ; BSR set to: 0
  3988  001DE6  0100               	movlb	0	; () banked
  3989  001DE8  BFB7               	btfsc	(logRun@i+1)& (0+255),7,b
  3990  001DEA  D008               	goto	l5969
  3991  001DEC  0100               	movlb	0	; () banked
  3992  001DEE  51B7               	movf	(logRun@i+1)& (0+255),w,b
  3993  001DF0  E128               	bnz	l929
  3994  001DF2  0E07               	movlw	7
  3995  001DF4  0100               	movlb	0	; () banked
  3996  001DF6  5DB6               	subwf	logRun@i& (0+255),w,b
  3997  001DF8  B0D8               	btfsc	status,0,c
  3998  001DFA  D023               	goto	l929
  3999  001DFC                     l5969:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4003  001DFC  90D8               	bcf	status,0,c
  4004  001DFE  0100               	movlb	0	; () banked
  4005  001E00  35B6               	rlcf	logRun@i& (0+255),w,b
  4006  001E02  6ED9               	movwf	fsr2l,c
  4007  001E04  0100               	movlb	0	; () banked
  4008  001E06  35B7               	rlcf	(logRun@i+1)& (0+255),w,b
  4009  001E08  6EDA               	movwf	fsr2h,c
  4010  001E0A  0E0E               	movlw	low _startTime
  4011  001E0C  26D9               	addwf	fsr2l,f,c
  4012  001E0E  0E01               	movlw	high _startTime
  4013  001E10  22DA               	addwfc	fsr2h,f,c
  4014  001E12  50DF               	movf	indf2,w,c
  4015  001E14  0100               	movlb	0	; () banked
  4016  001E16  6FB4               	movwf	logRun@byte_i& (0+255),b
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4020  001E18  C0B8  F0AB         	movff	logRun@addr,EEPROM_write@address
  4021  001E1C  C0B9  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4022  001E20  C0B4  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4023  001E24  ECE6  F010         	call	_EEPROM_write	;wreg free
  4024                           
  4025                           ;EEPROM.c: 126: addr++;
  4026  001E28  0100               	movlb	0	; () banked
  4027  001E2A  4BB8               	infsnz	logRun@addr& (0+255),f,b
  4028  001E2C  2BB9               	incf	(logRun@addr+1)& (0+255),f,b
  4029                           
  4030                           ; BSR set to: 0
  4031  001E2E  0100               	movlb	0	; () banked
  4032  001E30  4BB6               	infsnz	logRun@i& (0+255),f,b
  4033  001E32  2BB7               	incf	(logRun@i+1)& (0+255),f,b
  4034                           
  4035                           ; BSR set to: 0
  4036  001E34  0100               	movlb	0	; () banked
  4037  001E36  BFB7               	btfsc	(logRun@i+1)& (0+255),7,b
  4038  001E38  D7E1               	goto	l5969
  4039  001E3A  0100               	movlb	0	; () banked
  4040  001E3C  51B7               	movf	(logRun@i+1)& (0+255),w,b
  4041  001E3E  E101               	bnz	u4930
  4042  001E40  D7D8               	goto	L4
  4043  001E42                     u4930:
  4044  001E42                     l929:
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;EEPROM.c: 127: }
  4048                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4049  001E42  C0F9  F0B5         	movff	_total_time,logRun@byte11
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4053  001E46  C0B8  F0AB         	movff	logRun@addr,EEPROM_write@address
  4054  001E4A  C0B9  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4055  001E4E  C0B5  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4056  001E52  ECE6  F010         	call	_EEPROM_write	;wreg free
  4057  001E56  0012               	return		;funcret
  4058  001E58                     __end_of_logRun:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           intcon2	equ	0xFF1
  4068                           intcon3	equ	0xFF0
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _EEPROM_write *****************
  4081 ;; Defined at:
  4082 ;;		line 32 in file "EEPROM.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  address         2   43[BANK0 ] unsigned short 
  4085 ;;  data            1   45[BANK0 ] unsigned char 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  i               1   48[BANK0 ] unsigned char 
  4088 ;;  i               1   47[BANK0 ] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4098 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;Total ram usage:        6 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:   10
  4105 ;; This function calls:
  4106 ;;		_EEPROM_read
  4107 ;;		_lcdInst
  4108 ;;		_printf
  4109 ;; This function is called by:
  4110 ;;		_logRun
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text14
  4115  0021CC                     __ptext14:
  4116                           	opt stack 0
  4117  0021CC                     _EEPROM_write:
  4118                           	opt stack 19
  4119                           
  4120                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4121                           
  4122                           ;incstack = 0
  4123  0021CC  84A6               	bsf	4006,2,c	;volatile
  4124                           
  4125                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4126  0021CE  0100               	movlb	0	; () banked
  4127  0021D0  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4128  0021D2  6EAA               	movwf	4010,c	;volatile
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4132  0021D4  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;EEPROM.c: 39: EEDATA = data;
  4136  0021D8  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4140  0021DC  9EA6               	bcf	4006,7,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4144  0021DE  9CA6               	bcf	4006,6,c	;volatile
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4148  0021E0  9EF2               	bcf	intcon,7,c	;volatile
  4149                           
  4150                           ;EEPROM.c: 45: EECON2 = 0x55;
  4151  0021E2  0E55               	movlw	85
  4152  0021E4  6EA7               	movwf	4007,c	;volatile
  4153                           
  4154                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4155  0021E6  0EAA               	movlw	170
  4156  0021E8  6EA7               	movwf	4007,c	;volatile
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4160  0021EA  82A6               	bsf	4006,1,c	;volatile
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4164  0021EC  8EF2               	bsf	intcon,7,c	;volatile
  4165  0021EE                     l907:
  4166  0021EE  A8A1               	btfss	4001,4,c	;volatile
  4167  0021F0  D7FE               	goto	l907
  4168                           
  4169                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4170  0021F2  98A1               	bcf	4001,4,c	;volatile
  4171                           
  4172                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4173  0021F4  94A6               	bcf	4006,2,c	;volatile
  4174                           
  4175                           ;EEPROM.c: 57: if(debug){
  4176  0021F6  0100               	movlb	0	; () banked
  4177  0021F8  51DD               	movf	_debug& (0+255),w,b
  4178  0021FA  0100               	movlb	0	; () banked
  4179  0021FC  11DE               	iorwf	(_debug+1)& (0+255),w,b
  4180  0021FE  B4D8               	btfsc	status,2,c
  4181  002200  0012               	return	
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4185  002202  0E01               	movlw	1
  4186  002204  EC40  F019         	call	_lcdInst
  4187  002208  0E68               	movlw	104
  4188  00220A  0100               	movlb	0	; () banked
  4189  00220C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4190  00220E  0EE4               	movlw	228
  4191  002210                     u5187:
  4192  002210  2EE8               	decfsz	wreg,f,c
  4193  002212  D7FE               	bra	u5187
  4194  002214  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4195  002216  D7FC               	bra	u5187
  4196  002218  F000               	nop	
  4197                           
  4198                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4199  00221A  0E80               	movlw	128
  4200  00221C  EC40  F019         	call	_lcdInst
  4201                           
  4202                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4203  002220  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4204  002224  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4205  002228  ECFA  F018         	call	_EEPROM_read	;wreg free
  4206  00222C  0100               	movlb	0	; () banked
  4207  00222E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4208  002230  A4D8               	btfss	status,2,c
  4209  002232  D024               	goto	l5237
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;EEPROM.c: 61: printf("(%u, %u)", data, address);
  4213  002234  0EAC               	movlw	low STR_66
  4214  002236  0100               	movlb	0	; () banked
  4215  002238  6F8E               	movwf	printf@f& (0+255),b
  4216  00223A  0EFF               	movlw	high STR_66
  4217  00223C  0100               	movlb	0	; () banked
  4218  00223E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4219  002240  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4220  002244  0100               	movlb	0	; () banked
  4221  002246  6B91               	clrf	(?_printf+3)& (0+255),b
  4222  002248  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4223  00224C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4224  002250  EC3E  F004         	call	_printf	;wreg free
  4225                           
  4226                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4227  002254  0E00               	movlw	0
  4228  002256  0100               	movlb	0	; () banked
  4229  002258  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4230  00225A                     l5229:
  4231                           
  4232                           ; BSR set to: 0
  4233  00225A  0E63               	movlw	99
  4234  00225C  0100               	movlb	0	; () banked
  4235  00225E  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4236  002260  D001               	goto	l5233
  4237  002262  0012               	return	
  4238  002264                     l5233:
  4239                           
  4240                           ; BSR set to: 0
  4241  002264  0E68               	movlw	104
  4242  002266  0100               	movlb	0	; () banked
  4243  002268  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4244  00226A  0EE4               	movlw	228
  4245  00226C                     u5197:
  4246  00226C  2EE8               	decfsz	wreg,f,c
  4247  00226E  D7FE               	bra	u5197
  4248  002270  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4249  002272  D7FC               	bra	u5197
  4250  002274  F000               	nop	
  4251  002276  0100               	movlb	0	; () banked
  4252  002278  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4253  00227A  D7EF               	goto	l5229
  4254  00227C                     l5237:
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4258  00227C  0EBC               	movlw	low STR_67
  4259  00227E  0100               	movlb	0	; () banked
  4260  002280  6F8E               	movwf	printf@f& (0+255),b
  4261  002282  0EFF               	movlw	high STR_67
  4262  002284  0100               	movlb	0	; () banked
  4263  002286  6F8F               	movwf	(printf@f+1)& (0+255),b
  4264  002288  EC3E  F004         	call	_printf	;wreg free
  4265  00228C  0E00               	movlw	0
  4266  00228E  0100               	movlb	0	; () banked
  4267  002290  6FB0               	movwf	EEPROM_write@i_1363& (0+255),b
  4268  002292                     l5241:
  4269                           
  4270                           ; BSR set to: 0
  4271  002292  0E63               	movlw	99
  4272  002294  0100               	movlb	0	; () banked
  4273  002296  65B0               	cpfsgt	EEPROM_write@i_1363& (0+255),b
  4274  002298  D001               	goto	l5245
  4275  00229A  0012               	return	
  4276  00229C                     l5245:
  4277                           
  4278                           ; BSR set to: 0
  4279  00229C  0E68               	movlw	104
  4280  00229E  0100               	movlb	0	; () banked
  4281  0022A0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4282  0022A2  0EE4               	movlw	228
  4283  0022A4                     u5207:
  4284  0022A4  2EE8               	decfsz	wreg,f,c
  4285  0022A6  D7FE               	bra	u5207
  4286  0022A8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4287  0022AA  D7FC               	bra	u5207
  4288  0022AC  F000               	nop	
  4289  0022AE  0100               	movlb	0	; () banked
  4290  0022B0  2BB0               	incf	EEPROM_write@i_1363& (0+255),f,b
  4291  0022B2  D7EF               	goto	l5241
  4292  0022B4                     __end_of_EEPROM_write:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           intcon2	equ	0xFF1
  4302                           intcon3	equ	0xFF0
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _EEPROM_read *****************
  4315 ;; Defined at:
  4316 ;;		line 68 in file "EEPROM.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  address         2    0[BANK0 ] unsigned short 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      unsigned char 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4330 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;Total ram usage:        2 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    7
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_EEPROM_write
  4341 ;;		_logRun
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text15
  4346  0031F4                     __ptext15:
  4347                           	opt stack 0
  4348  0031F4                     _EEPROM_read:
  4349                           	opt stack 21
  4350                           
  4351                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;incstack = 0
  4355  0031F4  0100               	movlb	0	; () banked
  4356  0031F6  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4357  0031F8  6EAA               	movwf	4010,c	;volatile
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4361  0031FA  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4365  0031FE  9EA6               	bcf	4006,7,c	;volatile
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4369  003200  9CA6               	bcf	4006,6,c	;volatile
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4373  003202  80A6               	bsf	4006,0,c	;volatile
  4374  003204                     l920:
  4375  003204  B0A6               	btfsc	4006,0,c	;volatile
  4376  003206  D7FE               	goto	l920
  4377                           
  4378                           ;EEPROM.c: 81: return EEDATA;
  4379  003208  50A8               	movf	4008,w,c	;volatile
  4380  00320A  0012               	return	
  4381  00320C                     __end_of_EEPROM_read:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           intcon2	equ	0xFF1
  4391                           intcon3	equ	0xFF0
  4392                           postinc0	equ	0xFEE
  4393                           wreg	equ	0xFE8
  4394                           postdec1	equ	0xFE5
  4395                           fsr1l	equ	0xFE1
  4396                           indf2	equ	0xFDF
  4397                           postinc2	equ	0xFDE
  4398                           postdec2	equ	0xFDD
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _initUI *****************
  4404 ;; Defined at:
  4405 ;;		line 62 in file "UI.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        0 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:   12
  4426 ;; This function calls:
  4427 ;;		_change_state_to_menu_start
  4428 ;;		_loadRTC
  4429 ;; This function is called by:
  4430 ;;		_main
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text16
  4435  00314A                     __ptext16:
  4436                           	opt stack 0
  4437  00314A                     _initUI:
  4438                           	opt stack 18
  4439                           
  4440                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4441                           
  4442                           ;incstack = 0
  4443  00314A  8EF2               	bsf	intcon,7,c	;volatile
  4444                           
  4445                           ;UI.c: 64: machine_state = UI_state;
  4446  00314C  0E00               	movlw	0
  4447  00314E  0100               	movlb	0	; () banked
  4448  003150  6FFB               	movwf	_machine_state& (0+255),b
  4449                           
  4450                           ;UI.c: 65: logstate = 0;
  4451  003152  0E00               	movlw	0
  4452  003154  0100               	movlb	0	; () banked
  4453  003156  6FF8               	movwf	(_logstate+1)& (0+255),b
  4454  003158  0E00               	movlw	0
  4455  00315A  6FF7               	movwf	_logstate& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;UI.c: 67: loadRTC();
  4459  00315C  EC63  F013         	call	_loadRTC	;wreg free
  4460                           
  4461                           ;UI.c: 69: change_state_to_menu_start();
  4462  003160  EC40  F018         	call	_change_state_to_menu_start	;wreg free
  4463                           
  4464                           ;UI.c: 70: firstboot = 1;
  4465  003164  0E00               	movlw	0
  4466  003166  6E77               	movwf	_firstboot+1,c
  4467  003168  0E01               	movlw	1
  4468  00316A  6E76               	movwf	_firstboot,c
  4469  00316C  0012               	return		;funcret
  4470  00316E                     __end_of_initUI:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           intcon	equ	0xFF2
  4479                           intcon2	equ	0xFF1
  4480                           intcon3	equ	0xFF0
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1l	equ	0xFE1
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function _loadRTC *****************
  4493 ;; Defined at:
  4494 ;;		line 28 in file "RTC.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  i               2   22[BANK0 ] int 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;Total ram usage:        3 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    9
  4515 ;; This function calls:
  4516 ;;		_I2C_Master_Init
  4517 ;;		_I2C_Master_Start
  4518 ;;		_I2C_Master_Stop
  4519 ;;		_I2C_Master_Write
  4520 ;; This function is called by:
  4521 ;;		_initUI
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text17
  4526  0026C6                     __ptext17:
  4527                           	opt stack 0
  4528  0026C6                     _loadRTC:
  4529                           	opt stack 20
  4530                           
  4531                           ;RTC.c: 30: I2C_Master_Init(10000);
  4532                           
  4533                           ;incstack = 0
  4534  0026C6  0E10               	movlw	16
  4535  0026C8  0100               	movlb	0	; () banked
  4536  0026CA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4537  0026CC  0E27               	movlw	39
  4538  0026CE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4539  0026D0  0E00               	movlw	0
  4540  0026D2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4541  0026D4  0E00               	movlw	0
  4542  0026D6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4543  0026D8  EC37  F015         	call	_I2C_Master_Init	;wreg free
  4544                           
  4545                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4546  0026DC  9EF2               	bcf	intcon,7,c	;volatile
  4547                           
  4548                           ;RTC.c: 34: I2C_Master_Start();
  4549  0026DE  EC66  F019         	call	_I2C_Master_Start	;wreg free
  4550                           
  4551                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  4552  0026E2  0E00               	movlw	0
  4553  0026E4  0100               	movlb	0	; () banked
  4554  0026E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4555  0026E8  0ED0               	movlw	208
  4556  0026EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4557  0026EC  EC54  F019         	call	_I2C_Master_Write	;wreg free
  4558                           
  4559                           ;RTC.c: 36: I2C_Master_Write(0x00);
  4560  0026F0  0E00               	movlw	0
  4561  0026F2  0100               	movlb	0	; () banked
  4562  0026F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4563  0026F6  0E00               	movlw	0
  4564  0026F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4565  0026FA  EC54  F019         	call	_I2C_Master_Write	;wreg free
  4566                           
  4567                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  4568  0026FE  0E00               	movlw	0
  4569  002700  0100               	movlb	0	; () banked
  4570  002702  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  4571  002704  0E00               	movlw	0
  4572  002706  6F96               	movwf	loadRTC@i& (0+255),b
  4573  002708                     l4887:
  4574                           
  4575                           ; BSR set to: 0
  4576  002708  0100               	movlb	0	; () banked
  4577  00270A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  4578  00270C  D008               	goto	l4891
  4579  00270E  0100               	movlb	0	; () banked
  4580  002710  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  4581  002712  E11B               	bnz	l4897
  4582  002714  0E07               	movlw	7
  4583  002716  0100               	movlb	0	; () banked
  4584  002718  5D96               	subwf	loadRTC@i& (0+255),w,b
  4585  00271A  B0D8               	btfsc	status,0,c
  4586  00271C  D016               	goto	l4897
  4587  00271E                     l4891:
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  4591  00271E  0E5B               	movlw	low _time
  4592  002720  0100               	movlb	0	; () banked
  4593  002722  2596               	addwf	loadRTC@i& (0+255),w,b
  4594  002724  6ED9               	movwf	fsr2l,c
  4595  002726  0E00               	movlw	high _time
  4596  002728  0100               	movlb	0	; () banked
  4597  00272A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  4598  00272C  6EDA               	movwf	fsr2h,c
  4599  00272E  50DF               	movf	indf2,w,c
  4600  002730  0100               	movlb	0	; () banked
  4601  002732  6F95               	movwf	??_loadRTC& (0+255),b
  4602  002734  0100               	movlb	0	; () banked
  4603  002736  5195               	movf	??_loadRTC& (0+255),w,b
  4604  002738  0100               	movlb	0	; () banked
  4605  00273A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4606  00273C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4607  00273E  EC54  F019         	call	_I2C_Master_Write	;wreg free
  4608  002742  0100               	movlb	0	; () banked
  4609  002744  4B96               	infsnz	loadRTC@i& (0+255),f,b
  4610  002746  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  4611  002748  D7DF               	goto	l4887
  4612  00274A                     l4897:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;RTC.c: 39: }
  4616                           ;RTC.c: 40: I2C_Master_Stop();
  4617  00274A  EC62  F019         	call	_I2C_Master_Stop	;wreg free
  4618                           
  4619                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  4620  00274E  8EF2               	bsf	intcon,7,c	;volatile
  4621  002750  0012               	return		;funcret
  4622  002752                     __end_of_loadRTC:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           intcon2	equ	0xFF1
  4632                           intcon3	equ	0xFF0
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           postdec1	equ	0xFE5
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function _I2C_Master_Init *****************
  4645 ;; Defined at:
  4646 ;;		line 15 in file "I2C.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  c               4   13[BANK0 ] const unsigned long 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      void 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:        8 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    8
  4667 ;; This function calls:
  4668 ;;		___lldiv
  4669 ;; This function is called by:
  4670 ;;		_loadRTC
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text18
  4675  002A6E                     __ptext18:
  4676                           	opt stack 0
  4677  002A6E                     _I2C_Master_Init:
  4678                           	opt stack 20
  4679                           
  4680                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  4681                           
  4682                           ;incstack = 0
  4683  002A6E  0E00               	movlw	0
  4684  002A70  6EC7               	movwf	4039,c	;volatile
  4685                           
  4686                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  4687  002A72  0E28               	movlw	40
  4688  002A74  6EC6               	movwf	4038,c	;volatile
  4689                           
  4690                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  4691  002A76  0E00               	movlw	0
  4692  002A78  6EC5               	movwf	4037,c	;volatile
  4693                           
  4694                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  4695  002A7A  0E00               	movlw	0
  4696  002A7C  0100               	movlb	0	; () banked
  4697  002A7E  6F80               	movwf	___lldiv@dividend& (0+255),b
  4698  002A80  0E48               	movlw	72
  4699  002A82  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4700  002A84  0EE8               	movlw	232
  4701  002A86  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4702  002A88  0E01               	movlw	1
  4703  002A8A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4704  002A8C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4705  002A90  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4706  002A94  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4707  002A98  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4708  002A9C  0E02               	movlw	2
  4709  002A9E                     u3465:
  4710  002A9E  90D8               	bcf	status,0,c
  4711  002AA0  0100               	movlb	0	; () banked
  4712  002AA2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4713  002AA4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4714  002AA6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4715  002AA8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4716  002AAA  2EE8               	decfsz	wreg,f,c
  4717  002AAC  D7F8               	goto	u3465
  4718  002AAE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4719  002AB2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4720  002AB6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4721  002ABA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4722  002ABE  ECB9  F011         	call	___lldiv	;wreg free
  4723  002AC2  0100               	movlb	0	; () banked
  4724  002AC4  0580               	decf	?___lldiv& (0+255),w,b
  4725  002AC6  6EC8               	movwf	4040,c	;volatile
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;I2C.c: 22: TRISC3 = 1;
  4729  002AC8  8694               	bsf	3988,3,c	;volatile
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;I2C.c: 23: TRISC4 = 1;
  4733  002ACA  8894               	bsf	3988,4,c	;volatile
  4734                           
  4735                           ; BSR set to: 0
  4736  002ACC  0012               	return		;funcret
  4737  002ACE                     __end_of_I2C_Master_Init:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           intcon2	equ	0xFF1
  4747                           intcon3	equ	0xFF0
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           postdec1	equ	0xFE5
  4751                           fsr1l	equ	0xFE1
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function ___lldiv *****************
  4760 ;; Defined at:
  4761 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  dividend        4    0[BANK0 ] unsigned long 
  4764 ;;  divisor         4    4[BANK0 ] unsigned long 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  quotient        4    8[BANK0 ] unsigned long 
  4767 ;;  counter         1   12[BANK0 ] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  4    0[BANK0 ] unsigned long 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4777 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;Total ram usage:       13 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_I2C_Master_Init
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text19
  4792  002372                     __ptext19:
  4793                           	opt stack 0
  4794  002372                     ___lldiv:
  4795                           	opt stack 20
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;incstack = 0
  4799  002372  0E00               	movlw	0
  4800  002374  0100               	movlb	0	; () banked
  4801  002376  6F88               	movwf	___lldiv@quotient& (0+255),b
  4802  002378  0E00               	movlw	0
  4803  00237A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4804  00237C  0E00               	movlw	0
  4805  00237E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4806  002380  0E00               	movlw	0
  4807  002382  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810  002384  0100               	movlb	0	; () banked
  4811  002386  5184               	movf	___lldiv@divisor& (0+255),w,b
  4812  002388  0100               	movlb	0	; () banked
  4813  00238A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4814  00238C  0100               	movlb	0	; () banked
  4815  00238E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4816  002390  0100               	movlb	0	; () banked
  4817  002392  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4818  002394  B4D8               	btfsc	status,2,c
  4819  002396  D042               	goto	l1359
  4820                           
  4821                           ; BSR set to: 0
  4822  002398  0E01               	movlw	1
  4823  00239A  0100               	movlb	0	; () banked
  4824  00239C  6F8C               	movwf	___lldiv@counter& (0+255),b
  4825  00239E  D008               	goto	l4389
  4826  0023A0                     l4387:
  4827                           
  4828                           ; BSR set to: 0
  4829  0023A0  0100               	movlb	0	; () banked
  4830  0023A2  90D8               	bcf	status,0,c
  4831  0023A4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4832  0023A6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4833  0023A8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4834  0023AA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4835  0023AC  0100               	movlb	0	; () banked
  4836  0023AE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4837  0023B0                     l4389:
  4838                           
  4839                           ; BSR set to: 0
  4840  0023B0  0100               	movlb	0	; () banked
  4841  0023B2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4842  0023B4  D7F5               	goto	l4387
  4843  0023B6                     l4391:
  4844                           
  4845                           ; BSR set to: 0
  4846  0023B6  0100               	movlb	0	; () banked
  4847  0023B8  90D8               	bcf	status,0,c
  4848  0023BA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4849  0023BC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4850  0023BE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4851  0023C0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4852                           
  4853                           ; BSR set to: 0
  4854  0023C2  0100               	movlb	0	; () banked
  4855  0023C4  5184               	movf	___lldiv@divisor& (0+255),w,b
  4856  0023C6  0100               	movlb	0	; () banked
  4857  0023C8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4858  0023CA  0100               	movlb	0	; () banked
  4859  0023CC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4860  0023CE  0100               	movlb	0	; () banked
  4861  0023D0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4862  0023D2  0100               	movlb	0	; () banked
  4863  0023D4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4864  0023D6  0100               	movlb	0	; () banked
  4865  0023D8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4866  0023DA  0100               	movlb	0	; () banked
  4867  0023DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4868  0023DE  0100               	movlb	0	; () banked
  4869  0023E0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4870  0023E2  A0D8               	btfss	status,0,c
  4871  0023E4  D012               	goto	l4399
  4872                           
  4873                           ; BSR set to: 0
  4874  0023E6  0100               	movlb	0	; () banked
  4875  0023E8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4876  0023EA  0100               	movlb	0	; () banked
  4877  0023EC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4878  0023EE  0100               	movlb	0	; () banked
  4879  0023F0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4880  0023F2  0100               	movlb	0	; () banked
  4881  0023F4  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4882  0023F6  0100               	movlb	0	; () banked
  4883  0023F8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4884  0023FA  0100               	movlb	0	; () banked
  4885  0023FC  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4886  0023FE  0100               	movlb	0	; () banked
  4887  002400  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4888  002402  0100               	movlb	0	; () banked
  4889  002404  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4890                           
  4891                           ; BSR set to: 0
  4892  002406  0100               	movlb	0	; () banked
  4893  002408  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4894  00240A                     l4399:
  4895                           
  4896                           ; BSR set to: 0
  4897  00240A  0100               	movlb	0	; () banked
  4898  00240C  90D8               	bcf	status,0,c
  4899  00240E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4900  002410  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4901  002412  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4902  002414  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4903                           
  4904                           ; BSR set to: 0
  4905  002416  0100               	movlb	0	; () banked
  4906  002418  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4907  00241A  D7CD               	goto	l4391
  4908  00241C                     l1359:
  4909                           
  4910                           ; BSR set to: 0
  4911  00241C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4912  002420  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4913  002424  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4914  002428  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4915                           
  4916                           ; BSR set to: 0
  4917  00242C  0012               	return		;funcret
  4918  00242E                     __end_of___lldiv:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           intcon	equ	0xFF2
  4927                           intcon2	equ	0xFF1
  4928                           intcon3	equ	0xFF0
  4929                           postinc0	equ	0xFEE
  4930                           wreg	equ	0xFE8
  4931                           postdec1	equ	0xFE5
  4932                           fsr1l	equ	0xFE1
  4933                           indf2	equ	0xFDF
  4934                           postinc2	equ	0xFDE
  4935                           postdec2	equ	0xFDD
  4936                           fsr2h	equ	0xFDA
  4937                           fsr2l	equ	0xFD9
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function _change_state_to_menu_start *****************
  4941 ;; Defined at:
  4942 ;;		line 470 in file "UI.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;		None
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;		None
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      void 
  4949 ;; Registers used:
  4950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;Total ram usage:        0 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:   11
  4963 ;; This function calls:
  4964 ;;		_lcdInst
  4965 ;;		_printRTC
  4966 ;;		_printf
  4967 ;; This function is called by:
  4968 ;;		_initUI
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text20
  4973  003080                     __ptext20:
  4974                           	opt stack 0
  4975  003080                     _change_state_to_menu_start:
  4976                           	opt stack 18
  4977                           
  4978                           ;UI.c: 471: cur_state = 0;
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;incstack = 0
  4982  003080  0E00               	movlw	0
  4983  003082  0100               	movlb	0	; () banked
  4984  003084  6FDC               	movwf	(_cur_state+1)& (0+255),b
  4985  003086  0E00               	movlw	0
  4986  003088  6FDB               	movwf	_cur_state& (0+255),b
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;UI.c: 473: lcdInst(0b10000000);;
  4990  00308A  0E80               	movlw	128
  4991  00308C  EC40  F019         	call	_lcdInst
  4992                           
  4993                           ;UI.c: 474: printRTC();
  4994  003090  EC11  F008         	call	_printRTC	;wreg free
  4995                           
  4996                           ;UI.c: 475: lcdInst(0b11000000);;
  4997  003094  0EC0               	movlw	192
  4998  003096  EC40  F019         	call	_lcdInst
  4999                           
  5000                           ;UI.c: 476: printf("PUSH TO CONTINUE");
  5001  00309A  0E68               	movlw	low STR_30
  5002  00309C  0100               	movlb	0	; () banked
  5003  00309E  6F8E               	movwf	printf@f& (0+255),b
  5004  0030A0  0EFF               	movlw	high STR_30
  5005  0030A2  0100               	movlb	0	; () banked
  5006  0030A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5007  0030A6  EC3E  F004         	call	_printf	;wreg free
  5008  0030AA  0012               	return		;funcret
  5009  0030AC                     __end_of_change_state_to_menu_start:
  5010                           	opt stack 0
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           intcon	equ	0xFF2
  5018                           intcon2	equ	0xFF1
  5019                           intcon3	equ	0xFF0
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _initTime *****************
  5032 ;; Defined at:
  5033 ;;		line 17 in file "RTC.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  s               1    wreg     unsigned char 
  5036 ;;  m               1    0[BANK0 ] unsigned char 
  5037 ;;  h               1    1[BANK0 ] unsigned char 
  5038 ;;  w               1    2[BANK0 ] unsigned char 
  5039 ;;  DD              1    3[BANK0 ] unsigned char 
  5040 ;;  MM              1    4[BANK0 ] unsigned char 
  5041 ;;  YY              1    5[BANK0 ] unsigned char 
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;  s               1    6[BANK0 ] unsigned char 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		wreg
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5053 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;Total ram usage:        7 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    7
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text21
  5068  0031B4                     __ptext21:
  5069                           	opt stack 0
  5070  0031B4                     _initTime:
  5071                           	opt stack 23
  5072                           
  5073                           ;incstack = 0
  5074                           ;initTime@s stored from wreg
  5075  0031B4  0100               	movlb	0	; () banked
  5076  0031B6  6F86               	movwf	initTime@s& (0+255),b
  5077                           
  5078                           ;RTC.c: 19: time[0] = s;
  5079  0031B8  C086  F05B         	movff	initTime@s,_time
  5080                           
  5081                           ;RTC.c: 20: time[1] = m;
  5082  0031BC  C080  F05C         	movff	initTime@m,_time+1
  5083                           
  5084                           ;RTC.c: 21: time[2] = h;
  5085  0031C0  C081  F05D         	movff	initTime@h,_time+2
  5086                           
  5087                           ;RTC.c: 22: time[3] = w;
  5088  0031C4  C082  F05E         	movff	initTime@w,_time+3
  5089                           
  5090                           ;RTC.c: 23: time[4] = DD;
  5091  0031C8  C083  F05F         	movff	initTime@DD,_time+4
  5092                           
  5093                           ;RTC.c: 24: time[5] = MM;
  5094  0031CC  C084  F060         	movff	initTime@MM,_time+5
  5095                           
  5096                           ;RTC.c: 25: time[6] = YY;
  5097  0031D0  C085  F061         	movff	initTime@YY,_time+6
  5098  0031D4  0012               	return		;funcret
  5099  0031D6                     __end_of_initTime:
  5100                           	opt stack 0
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           intcon2	equ	0xFF1
  5109                           intcon3	equ	0xFF0
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _initLCD *****************
  5122 ;; Defined at:
  5123 ;;		line 48 in file "lcd.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, status,2, status,0, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:        1 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    9
  5144 ;; This function calls:
  5145 ;;		_lcdInst
  5146 ;; This function is called by:
  5147 ;;		_main
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text22
  5152  002CB2                     __ptext22:
  5153                           	opt stack 0
  5154  002CB2                     _initLCD:
  5155                           	opt stack 21
  5156                           
  5157                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5158                           
  5159                           ;incstack = 0
  5160  002CB2  0E9C               	movlw	156
  5161  002CB4  0100               	movlb	0	; () banked
  5162  002CB6  6F83               	movwf	??_initLCD& (0+255),b
  5163  002CB8  0ED7               	movlw	215
  5164  002CBA                     u5217:
  5165  002CBA  2EE8               	decfsz	wreg,f,c
  5166  002CBC  D7FE               	bra	u5217
  5167  002CBE  2F83               	decfsz	??_initLCD& (0+255),f,b
  5168  002CC0  D7FC               	bra	u5217
  5169                           
  5170                           ;lcd.c: 50: lcdInst(0b00110011);
  5171  002CC2  0E33               	movlw	51
  5172  002CC4  EC40  F019         	call	_lcdInst
  5173                           
  5174                           ;lcd.c: 51: lcdInst(0b00110010);
  5175  002CC8  0E32               	movlw	50
  5176  002CCA  EC40  F019         	call	_lcdInst
  5177                           
  5178                           ;lcd.c: 53: lcdInst(0b00101000);
  5179  002CCE  0E28               	movlw	40
  5180  002CD0  EC40  F019         	call	_lcdInst
  5181                           
  5182                           ;lcd.c: 54: lcdInst(0b00001100);
  5183  002CD4  0E0C               	movlw	12
  5184  002CD6  EC40  F019         	call	_lcdInst
  5185                           
  5186                           ;lcd.c: 55: lcdInst(0b00000110);
  5187  002CDA  0E06               	movlw	6
  5188  002CDC  EC40  F019         	call	_lcdInst
  5189                           
  5190                           ;lcd.c: 56: lcdInst(0b00000001);
  5191  002CE0  0E01               	movlw	1
  5192  002CE2  EC40  F019         	call	_lcdInst
  5193                           
  5194                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5195  002CE6  0E9C               	movlw	156
  5196  002CE8  0100               	movlb	0	; () banked
  5197  002CEA  6F83               	movwf	??_initLCD& (0+255),b
  5198  002CEC  0ED7               	movlw	215
  5199  002CEE                     u5227:
  5200  002CEE  2EE8               	decfsz	wreg,f,c
  5201  002CF0  D7FE               	bra	u5227
  5202  002CF2  2F83               	decfsz	??_initLCD& (0+255),f,b
  5203  002CF4  D7FC               	bra	u5227
  5204  002CF6  0012               	return		;funcret
  5205  002CF8                     __end_of_initLCD:
  5206                           	opt stack 0
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           intcon2	equ	0xFF1
  5215                           intcon3	equ	0xFF0
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           postdec1	equ	0xFE5
  5219                           fsr1l	equ	0xFE1
  5220                           indf2	equ	0xFDF
  5221                           postinc2	equ	0xFDE
  5222                           postdec2	equ	0xFDD
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _UI *****************
  5228 ;; Defined at:
  5229 ;;		line 74 in file "UI.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  i               1   84[BANK0 ] unsigned char 
  5234 ;;  i               1   83[BANK0 ] unsigned char 
  5235 ;;  i               1   82[BANK0 ] unsigned char 
  5236 ;;  i               1   81[BANK0 ] unsigned char 
  5237 ;;  i               1   80[BANK0 ] unsigned char 
  5238 ;;  i               1   79[BANK0 ] unsigned char 
  5239 ;;  i               1   78[BANK0 ] unsigned char 
  5240 ;;  i               1   77[BANK0 ] unsigned char 
  5241 ;;  i               1   76[BANK0 ] unsigned char 
  5242 ;;  i               1   75[BANK0 ] unsigned char 
  5243 ;;  i               1   74[BANK0 ] unsigned char 
  5244 ;;  i               1   73[BANK0 ] unsigned char 
  5245 ;;  month           4   85[BANK0 ] unsigned char [4]
  5246 ;;  i               1   72[BANK0 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;Total ram usage:       21 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:   11
  5263 ;; This function calls:
  5264 ;;		___awdiv
  5265 ;;		___awmod
  5266 ;;		_change_state_to_menu_12
  5267 ;;		_change_state_to_menu_22
  5268 ;;		_lcdInst
  5269 ;;		_printRTC
  5270 ;;		_printf
  5271 ;;		_strcpy
  5272 ;; This function is called by:
  5273 ;;		_main
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text23
  5278  000012                     __ptext23:
  5279                           	opt stack 0
  5280  000012                     _UI:
  5281                           	opt stack 19
  5282                           
  5283                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5284                           
  5285                           ;incstack = 0
  5286  000012  0E02               	movlw	2
  5287  000014  0100               	movlb	0	; () banked
  5288  000016  19FB               	xorwf	_machine_state& (0+255),w,b
  5289  000018  A4D8               	btfss	status,2,c
  5290  00001A  D071               	goto	l5381
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5294  00001C  0E01               	movlw	1
  5295  00001E  EC40  F019         	call	_lcdInst
  5296  000022  0E68               	movlw	104
  5297  000024  0100               	movlb	0	; () banked
  5298  000026  6FC4               	movwf	??_UI& (0+255),b
  5299  000028  0EE4               	movlw	228
  5300  00002A                     u5237:
  5301  00002A  2EE8               	decfsz	wreg,f,c
  5302  00002C  D7FE               	bra	u5237
  5303  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5304  000030  D7FC               	bra	u5237
  5305  000032  F000               	nop	
  5306                           
  5307                           ;UI.c: 77: lcdInst(0b10000000);;
  5308  000034  0E80               	movlw	128
  5309  000036  EC40  F019         	call	_lcdInst
  5310                           
  5311                           ;UI.c: 78: printf("!SORT CONCLUDED!");
  5312  00003A  0EBE               	movlw	low STR_1
  5313  00003C  0100               	movlb	0	; () banked
  5314  00003E  6F8E               	movwf	printf@f& (0+255),b
  5315  000040  0EFE               	movlw	high STR_1
  5316  000042  0100               	movlb	0	; () banked
  5317  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5318  000046  EC3E  F004         	call	_printf	;wreg free
  5319                           
  5320                           ;UI.c: 79: lcdInst(0b11000000);;
  5321  00004A  0EC0               	movlw	192
  5322  00004C  EC40  F019         	call	_lcdInst
  5323                           
  5324                           ;UI.c: 80: printf("TIME: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  5325  000050  0E0E               	movlw	14
  5326  000052  0100               	movlb	0	; () banked
  5327  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5328  000056  0E10               	movlw	16
  5329  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  5330  00005A  C0F9  F080         	movff	_total_time,___awmod@dividend
  5331  00005E  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5332  000062  ECC2  F012         	call	___awmod	;wreg free
  5333  000066  C080  F0C6         	movff	?___awmod,_UI$1990
  5334  00006A  C081  F0C7         	movff	?___awmod+1,_UI$1990+1
  5335                           
  5336                           ;UI.c: 80: printf("TIME: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  5337  00006E  0EC4               	movlw	low STR_2
  5338  000070  0100               	movlb	0	; () banked
  5339  000072  6F8E               	movwf	printf@f& (0+255),b
  5340  000074  0EFD               	movlw	high STR_2
  5341  000076  0100               	movlb	0	; () banked
  5342  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  5343  00007A  0E00               	movlw	0
  5344  00007C  0100               	movlb	0	; () banked
  5345  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  5346  000080  0E00               	movlw	0
  5347  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  5348  000084  0E0E               	movlw	14
  5349  000086  0100               	movlb	0	; () banked
  5350  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5351  00008A  0E10               	movlw	16
  5352  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  5353  00008E  C0F9  F080         	movff	_total_time,___awmod@dividend
  5354  000092  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5355  000096  ECC2  F012         	call	___awmod	;wreg free
  5356  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  5357  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5358  0000A2  0E00               	movlw	0
  5359  0000A4  0100               	movlb	0	; () banked
  5360  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5361  0000A8  0E3C               	movlw	60
  5362  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5363  0000AC  EC5A  F011         	call	___awdiv	;wreg free
  5364  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  5365  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  5366  0000B8  C0C6  F080         	movff	_UI$1990,___awmod@dividend
  5367  0000BC  C0C7  F081         	movff	_UI$1990+1,___awmod@dividend+1
  5368  0000C0  0E00               	movlw	0
  5369  0000C2  0100               	movlb	0	; () banked
  5370  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5371  0000C6  0E3C               	movlw	60
  5372  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  5373  0000CA  ECC2  F012         	call	___awmod	;wreg free
  5374  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  5375  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  5376  0000D6  EC3E  F004         	call	_printf	;wreg free
  5377                           
  5378                           ;UI.c: 81: machine_state = UI_state;
  5379  0000DA  0E00               	movlw	0
  5380  0000DC  0100               	movlb	0	; () banked
  5381  0000DE  6FFB               	movwf	_machine_state& (0+255),b
  5382  0000E0                     l196:
  5383  0000E0  A281               	btfss	3969,1,c	;volatile
  5384  0000E2  D7FE               	goto	l196
  5385                           
  5386                           ;UI.c: 84: }
  5387                           ;UI.c: 85: if(cur_state==12){
  5388  0000E4  0E0C               	movlw	12
  5389  0000E6  0100               	movlb	0	; () banked
  5390  0000E8  19DB               	xorwf	_cur_state& (0+255),w,b
  5391  0000EA  0100               	movlb	0	; () banked
  5392  0000EC  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5393  0000EE  A4D8               	btfss	status,2,c
  5394  0000F0  D003               	goto	l5379
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;UI.c: 86: change_state_to_menu_12();
  5398  0000F2  ECB9  F016         	call	_change_state_to_menu_12	;wreg free
  5399                           
  5400                           ;UI.c: 87: }
  5401  0000F6  D3BB               	goto	l5685
  5402  0000F8                     l5379:
  5403                           
  5404                           ;UI.c: 88: else{
  5405                           ;UI.c: 89: change_state_to_menu_22();
  5406  0000F8  EC9D  F016         	call	_change_state_to_menu_22	;wreg free
  5407                           
  5408                           ;UI.c: 90: }
  5409                           ;UI.c: 91: }
  5410  0000FC  D3B8               	goto	l5685
  5411  0000FE                     l5381:
  5412                           
  5413                           ;UI.c: 92: else if(cur_state == 0){
  5414  0000FE  0100               	movlb	0	; () banked
  5415  000100  51DB               	movf	_cur_state& (0+255),w,b
  5416  000102  0100               	movlb	0	; () banked
  5417  000104  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5418  000106  A4D8               	btfss	status,2,c
  5419  000108  D3B2               	goto	l5685
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5423  00010A  0E00               	movlw	0
  5424  00010C  0100               	movlb	0	; () banked
  5425  00010E  6FC8               	movwf	UI@i& (0+255),b
  5426  000110                     l5385:
  5427                           
  5428                           ; BSR set to: 0
  5429  000110  0E63               	movlw	99
  5430  000112  0100               	movlb	0	; () banked
  5431  000114  65C8               	cpfsgt	UI@i& (0+255),b
  5432  000116  D001               	goto	l5389
  5433  000118  D00C               	goto	l5393
  5434  00011A                     l5389:
  5435                           
  5436                           ; BSR set to: 0
  5437  00011A  0E68               	movlw	104
  5438  00011C  0100               	movlb	0	; () banked
  5439  00011E  6FC4               	movwf	??_UI& (0+255),b
  5440  000120  0EE4               	movlw	228
  5441  000122                     u5247:
  5442  000122  2EE8               	decfsz	wreg,f,c
  5443  000124  D7FE               	bra	u5247
  5444  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  5445  000128  D7FC               	bra	u5247
  5446  00012A  F000               	nop	
  5447  00012C  0100               	movlb	0	; () banked
  5448  00012E  2BC8               	incf	UI@i& (0+255),f,b
  5449  000130  D7EF               	goto	l5385
  5450  000132                     l5393:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;UI.c: 94: if(cur_state == 0){
  5454  000132  0100               	movlb	0	; () banked
  5455  000134  51DB               	movf	_cur_state& (0+255),w,b
  5456  000136  0100               	movlb	0	; () banked
  5457  000138  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5458  00013A  A4D8               	btfss	status,2,c
  5459  00013C  D398               	goto	l5685
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;UI.c: 95: printRTC();
  5463  00013E  EC11  F008         	call	_printRTC	;wreg free
  5464                           
  5465                           ;UI.c: 96: }
  5466                           ;UI.c: 97: }
  5467                           ;UI.c: 98: while(logstate){
  5468  000142  D395               	goto	l5685
  5469  000144                     l5397:
  5470                           
  5471                           ;UI.c: 100: if(!log_completion){
  5472  000144  0100               	movlb	0	; () banked
  5473  000146  51E9               	movf	_log_completion& (0+255),w,b
  5474  000148  0100               	movlb	0	; () banked
  5475  00014A  11EA               	iorwf	(_log_completion+1)& (0+255),w,b
  5476  00014C  A4D8               	btfss	status,2,c
  5477  00014E  D027               	goto	l5411
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5481  000150  0E01               	movlw	1
  5482  000152  EC40  F019         	call	_lcdInst
  5483  000156  0E68               	movlw	104
  5484  000158  0100               	movlb	0	; () banked
  5485  00015A  6FC4               	movwf	??_UI& (0+255),b
  5486  00015C  0EE4               	movlw	228
  5487  00015E                     u5257:
  5488  00015E  2EE8               	decfsz	wreg,f,c
  5489  000160  D7FE               	bra	u5257
  5490  000162  2FC4               	decfsz	??_UI& (0+255),f,b
  5491  000164  D7FC               	bra	u5257
  5492  000166  F000               	nop	
  5493                           
  5494                           ;UI.c: 102: lcdInst(0b10000000);;
  5495  000168  0E80               	movlw	128
  5496  00016A  EC40  F019         	call	_lcdInst
  5497                           
  5498                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  5499  00016E  0E13               	movlw	low STR_3
  5500  000170  0100               	movlb	0	; () banked
  5501  000172  6F8E               	movwf	printf@f& (0+255),b
  5502  000174  0EFE               	movlw	high STR_3
  5503  000176  0100               	movlb	0	; () banked
  5504  000178  6F8F               	movwf	(printf@f+1)& (0+255),b
  5505  00017A  C0E7  F090         	movff	_log,?_printf+2
  5506  00017E  C0E8  F091         	movff	_log+1,?_printf+3
  5507  000182  EC3E  F004         	call	_printf	;wreg free
  5508                           
  5509                           ;UI.c: 104: lcdInst(0b11000000);;
  5510  000186  0EC0               	movlw	192
  5511  000188  EC40  F019         	call	_lcdInst
  5512                           
  5513                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  5514  00018C  0E79               	movlw	low STR_4
  5515  00018E  0100               	movlb	0	; () banked
  5516  000190  6F8E               	movwf	printf@f& (0+255),b
  5517  000192  0EFF               	movlw	high STR_4
  5518  000194  0100               	movlb	0	; () banked
  5519  000196  6F8F               	movwf	(printf@f+1)& (0+255),b
  5520  000198  EC3E  F004         	call	_printf	;wreg free
  5521                           
  5522                           ;UI.c: 106: }
  5523  00019C  D368               	goto	l5685
  5524  00019E                     l5411:
  5525                           
  5526                           ;UI.c: 107: else{
  5527                           ;UI.c: 108: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5528  00019E  0E01               	movlw	1
  5529  0001A0  EC40  F019         	call	_lcdInst
  5530  0001A4  0E68               	movlw	104
  5531  0001A6  0100               	movlb	0	; () banked
  5532  0001A8  6FC4               	movwf	??_UI& (0+255),b
  5533  0001AA  0EE4               	movlw	228
  5534  0001AC                     u5267:
  5535  0001AC  2EE8               	decfsz	wreg,f,c
  5536  0001AE  D7FE               	bra	u5267
  5537  0001B0  2FC4               	decfsz	??_UI& (0+255),f,b
  5538  0001B2  D7FC               	bra	u5267
  5539  0001B4  F000               	nop	
  5540                           
  5541                           ;UI.c: 109: lcdInst(0b10000000);;
  5542  0001B6  0E80               	movlw	128
  5543  0001B8  EC40  F019         	call	_lcdInst
  5544                           
  5545                           ;UI.c: 110: printf("-- LOG %2d HERE--", log);
  5546  0001BC  0E13               	movlw	low STR_3
  5547  0001BE  0100               	movlb	0	; () banked
  5548  0001C0  6F8E               	movwf	printf@f& (0+255),b
  5549  0001C2  0EFE               	movlw	high STR_3
  5550  0001C4  0100               	movlb	0	; () banked
  5551  0001C6  6F8F               	movwf	(printf@f+1)& (0+255),b
  5552  0001C8  C0E7  F090         	movff	_log,?_printf+2
  5553  0001CC  C0E8  F091         	movff	_log+1,?_printf+3
  5554  0001D0  EC3E  F004         	call	_printf	;wreg free
  5555                           
  5556                           ;UI.c: 111: lcdInst(0b11000000);;
  5557  0001D4  0EC0               	movlw	192
  5558  0001D6  EC40  F019         	call	_lcdInst
  5559                           
  5560                           ;UI.c: 112: printf("PAUSE < | BACK >");
  5561  0001DA  0E57               	movlw	low STR_6
  5562  0001DC  0100               	movlb	0	; () banked
  5563  0001DE  6F8E               	movwf	printf@f& (0+255),b
  5564  0001E0  0EFF               	movlw	high STR_6
  5565  0001E2  0100               	movlb	0	; () banked
  5566  0001E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5567  0001E6  EC3E  F004         	call	_printf	;wreg free
  5568                           
  5569                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5570  0001EA  0E00               	movlw	0
  5571  0001EC  0100               	movlb	0	; () banked
  5572  0001EE  6FC9               	movwf	UI@i_504& (0+255),b
  5573  0001F0                     l5425:
  5574                           
  5575                           ; BSR set to: 0
  5576  0001F0  0E63               	movlw	99
  5577  0001F2  0100               	movlb	0	; () banked
  5578  0001F4  65C9               	cpfsgt	UI@i_504& (0+255),b
  5579  0001F6  D001               	goto	l5429
  5580  0001F8  D00C               	goto	l5433
  5581  0001FA                     l5429:
  5582                           
  5583                           ; BSR set to: 0
  5584  0001FA  0E68               	movlw	104
  5585  0001FC  0100               	movlb	0	; () banked
  5586  0001FE  6FC4               	movwf	??_UI& (0+255),b
  5587  000200  0EE4               	movlw	228
  5588  000202                     u5277:
  5589  000202  2EE8               	decfsz	wreg,f,c
  5590  000204  D7FE               	bra	u5277
  5591  000206  2FC4               	decfsz	??_UI& (0+255),f,b
  5592  000208  D7FC               	bra	u5277
  5593  00020A  F000               	nop	
  5594  00020C  0100               	movlb	0	; () banked
  5595  00020E  2BC9               	incf	UI@i_504& (0+255),f,b
  5596  000210  D7EF               	goto	l5425
  5597  000212                     l5433:
  5598                           
  5599                           ; BSR set to: 0
  5600  000212  0100               	movlb	0	; () banked
  5601  000214  51F7               	movf	_logstate& (0+255),w,b
  5602  000216  0100               	movlb	0	; () banked
  5603  000218  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5604  00021A  B4D8               	btfsc	status,2,c
  5605  00021C  0012               	return	
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;UI.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5609                           
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613  00021E  0E00               	movlw	0
  5614  000220  0100               	movlb	0	; () banked
  5615  000222  6FCA               	movwf	UI@i_505& (0+255),b
  5616  000224                     l5439:
  5617                           
  5618                           ; BSR set to: 0
  5619  000224  0E63               	movlw	99
  5620  000226  0100               	movlb	0	; () banked
  5621  000228  65CA               	cpfsgt	UI@i_505& (0+255),b
  5622  00022A  D001               	goto	l5443
  5623  00022C  D00C               	goto	l5447
  5624  00022E                     l5443:
  5625                           
  5626                           ; BSR set to: 0
  5627  00022E  0E68               	movlw	104
  5628  000230  0100               	movlb	0	; () banked
  5629  000232  6FC4               	movwf	??_UI& (0+255),b
  5630  000234  0EE4               	movlw	228
  5631  000236                     u5287:
  5632  000236  2EE8               	decfsz	wreg,f,c
  5633  000238  D7FE               	bra	u5287
  5634  00023A  2FC4               	decfsz	??_UI& (0+255),f,b
  5635  00023C  D7FC               	bra	u5287
  5636  00023E  F000               	nop	
  5637  000240  0100               	movlb	0	; () banked
  5638  000242  2BCA               	incf	UI@i_505& (0+255),f,b
  5639  000244  D7EF               	goto	l5439
  5640  000246                     l5447:
  5641                           
  5642                           ; BSR set to: 0
  5643  000246  0100               	movlb	0	; () banked
  5644  000248  51F7               	movf	_logstate& (0+255),w,b
  5645  00024A  0100               	movlb	0	; () banked
  5646  00024C  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5647  00024E  B4D8               	btfsc	status,2,c
  5648  000250  0012               	return	
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;UI.c: 117: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5652                           
  5653                           ; BSR set to: 0
  5654                           
  5655                           ; BSR set to: 0
  5656  000252  0E01               	movlw	1
  5657  000254  EC40  F019         	call	_lcdInst
  5658  000258  0E68               	movlw	104
  5659  00025A  0100               	movlb	0	; () banked
  5660  00025C  6FC4               	movwf	??_UI& (0+255),b
  5661  00025E  0EE4               	movlw	228
  5662  000260                     u5297:
  5663  000260  2EE8               	decfsz	wreg,f,c
  5664  000262  D7FE               	bra	u5297
  5665  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  5666  000266  D7FC               	bra	u5297
  5667  000268  F000               	nop	
  5668                           
  5669                           ;UI.c: 118: lcdInst(0b10000000);;
  5670  00026A  0E80               	movlw	128
  5671  00026C  EC40  F019         	call	_lcdInst
  5672                           
  5673                           ;UI.c: 119: printf("START:");
  5674  000270  0EC3               	movlw	low STR_7
  5675  000272  0100               	movlb	0	; () banked
  5676  000274  6F8E               	movwf	printf@f& (0+255),b
  5677  000276  0EFF               	movlw	high STR_7
  5678  000278  0100               	movlb	0	; () banked
  5679  00027A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5680  00027C  EC3E  F004         	call	_printf	;wreg free
  5681                           
  5682                           ;UI.c: 120: lcdInst(0b11000000);;
  5683  000280  0EC0               	movlw	192
  5684  000282  EC40  F019         	call	_lcdInst
  5685                           
  5686                           ;UI.c: 121: char month[] = "MMM";
  5687  000286  C128  F0D5         	movff	UI@F3220,UI@month
  5688  00028A  C129  F0D6         	movff	UI@F3220+1,UI@month+1
  5689  00028E  C12A  F0D7         	movff	UI@F3220+2,UI@month+2
  5690  000292  C12B  F0D8         	movff	UI@F3220+3,UI@month+3
  5691                           
  5692                           ;UI.c: 122: switch(log_startTime[5]){
  5693  000296  D0C3               	goto	l5491
  5694  000298                     l5463:
  5695                           
  5696                           ;UI.c: 124: strcpy(month, "JAN");
  5697  000298  0ED5               	movlw	low UI@month
  5698  00029A  0100               	movlb	0	; () banked
  5699  00029C  6F80               	movwf	strcpy@to& (0+255),b
  5700  00029E  0E00               	movlw	high UI@month
  5701  0002A0  0100               	movlb	0	; () banked
  5702  0002A2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5703  0002A4  0EDA               	movlw	low STR_8
  5704  0002A6  0100               	movlb	0	; () banked
  5705  0002A8  6F82               	movwf	strcpy@from& (0+255),b
  5706  0002AA  0EFF               	movlw	high STR_8
  5707  0002AC  0100               	movlb	0	; () banked
  5708  0002AE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5709  0002B0  ECD5  F016         	call	_strcpy	;wreg free
  5710                           
  5711                           ;UI.c: 125: break;
  5712  0002B4  D0E6               	goto	l5493
  5713  0002B6                     l5465:
  5714                           
  5715                           ;UI.c: 127: strcpy(month, "FEB");
  5716  0002B6  0ED5               	movlw	low UI@month
  5717  0002B8  0100               	movlb	0	; () banked
  5718  0002BA  6F80               	movwf	strcpy@to& (0+255),b
  5719  0002BC  0E00               	movlw	high UI@month
  5720  0002BE  0100               	movlb	0	; () banked
  5721  0002C0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5722  0002C2  0ECA               	movlw	low STR_9
  5723  0002C4  0100               	movlb	0	; () banked
  5724  0002C6  6F82               	movwf	strcpy@from& (0+255),b
  5725  0002C8  0EFF               	movlw	high STR_9
  5726  0002CA  0100               	movlb	0	; () banked
  5727  0002CC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5728  0002CE  ECD5  F016         	call	_strcpy	;wreg free
  5729                           
  5730                           ;UI.c: 128: break;
  5731  0002D2  D0D7               	goto	l5493
  5732  0002D4                     l5467:
  5733                           
  5734                           ;UI.c: 130: strcpy(month, "MAR");
  5735  0002D4  0ED5               	movlw	low UI@month
  5736  0002D6  0100               	movlb	0	; () banked
  5737  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  5738  0002DA  0E00               	movlw	high UI@month
  5739  0002DC  0100               	movlb	0	; () banked
  5740  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5741  0002E0  0EE6               	movlw	low STR_10
  5742  0002E2  0100               	movlb	0	; () banked
  5743  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  5744  0002E6  0EFF               	movlw	high STR_10
  5745  0002E8  0100               	movlb	0	; () banked
  5746  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5747  0002EC  ECD5  F016         	call	_strcpy	;wreg free
  5748                           
  5749                           ;UI.c: 131: break;
  5750  0002F0  D0C8               	goto	l5493
  5751  0002F2                     l5469:
  5752                           
  5753                           ;UI.c: 133: strcpy(month, "APR");
  5754  0002F2  0ED5               	movlw	low UI@month
  5755  0002F4  0100               	movlb	0	; () banked
  5756  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  5757  0002F8  0E00               	movlw	high UI@month
  5758  0002FA  0100               	movlb	0	; () banked
  5759  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5760  0002FE  0EEA               	movlw	low STR_11
  5761  000300  0100               	movlb	0	; () banked
  5762  000302  6F82               	movwf	strcpy@from& (0+255),b
  5763  000304  0EFF               	movlw	high STR_11
  5764  000306  0100               	movlb	0	; () banked
  5765  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5766  00030A  ECD5  F016         	call	_strcpy	;wreg free
  5767                           
  5768                           ;UI.c: 134: break;
  5769  00030E  D0B9               	goto	l5493
  5770  000310                     l5471:
  5771                           
  5772                           ;UI.c: 136: strcpy(month, "MAY");
  5773  000310  0ED5               	movlw	low UI@month
  5774  000312  0100               	movlb	0	; () banked
  5775  000314  6F80               	movwf	strcpy@to& (0+255),b
  5776  000316  0E00               	movlw	high UI@month
  5777  000318  0100               	movlb	0	; () banked
  5778  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5779  00031C  0EFA               	movlw	low STR_12
  5780  00031E  0100               	movlb	0	; () banked
  5781  000320  6F82               	movwf	strcpy@from& (0+255),b
  5782  000322  0EFF               	movlw	high STR_12
  5783  000324  0100               	movlb	0	; () banked
  5784  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5785  000328  ECD5  F016         	call	_strcpy	;wreg free
  5786                           
  5787                           ;UI.c: 137: break;
  5788  00032C  D0AA               	goto	l5493
  5789  00032E                     l5473:
  5790                           
  5791                           ;UI.c: 139: strcpy(month, "JUN");
  5792  00032E  0ED5               	movlw	low UI@month
  5793  000330  0100               	movlb	0	; () banked
  5794  000332  6F80               	movwf	strcpy@to& (0+255),b
  5795  000334  0E00               	movlw	high UI@month
  5796  000336  0100               	movlb	0	; () banked
  5797  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5798  00033A  0EDE               	movlw	low STR_13
  5799  00033C  0100               	movlb	0	; () banked
  5800  00033E  6F82               	movwf	strcpy@from& (0+255),b
  5801  000340  0EFF               	movlw	high STR_13
  5802  000342  0100               	movlb	0	; () banked
  5803  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5804  000346  ECD5  F016         	call	_strcpy	;wreg free
  5805                           
  5806                           ;UI.c: 140: break;
  5807  00034A  D09B               	goto	l5493
  5808  00034C                     l5475:
  5809                           
  5810                           ;UI.c: 142: strcpy(month, "JUL");
  5811  00034C  0ED5               	movlw	low UI@month
  5812  00034E  0100               	movlb	0	; () banked
  5813  000350  6F80               	movwf	strcpy@to& (0+255),b
  5814  000352  0E00               	movlw	high UI@month
  5815  000354  0100               	movlb	0	; () banked
  5816  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5817  000358  0ED6               	movlw	low STR_14
  5818  00035A  0100               	movlb	0	; () banked
  5819  00035C  6F82               	movwf	strcpy@from& (0+255),b
  5820  00035E  0EFF               	movlw	high STR_14
  5821  000360  0100               	movlb	0	; () banked
  5822  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5823  000364  ECD5  F016         	call	_strcpy	;wreg free
  5824                           
  5825                           ;UI.c: 143: break;
  5826  000368  D08C               	goto	l5493
  5827  00036A                     l5477:
  5828                           
  5829                           ;UI.c: 145: strcpy(month, "AUG");
  5830  00036A  0ED5               	movlw	low UI@month
  5831  00036C  0100               	movlb	0	; () banked
  5832  00036E  6F80               	movwf	strcpy@to& (0+255),b
  5833  000370  0E00               	movlw	high UI@month
  5834  000372  0100               	movlb	0	; () banked
  5835  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5836  000376  0ED2               	movlw	low STR_15
  5837  000378  0100               	movlb	0	; () banked
  5838  00037A  6F82               	movwf	strcpy@from& (0+255),b
  5839  00037C  0EFF               	movlw	high STR_15
  5840  00037E  0100               	movlb	0	; () banked
  5841  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5842  000382  ECD5  F016         	call	_strcpy	;wreg free
  5843                           
  5844                           ;UI.c: 146: break;
  5845  000386  D07D               	goto	l5493
  5846  000388                     l5479:
  5847                           
  5848                           ;UI.c: 148: strcpy(month, "SEP");
  5849  000388  0ED5               	movlw	low UI@month
  5850  00038A  0100               	movlb	0	; () banked
  5851  00038C  6F80               	movwf	strcpy@to& (0+255),b
  5852  00038E  0E00               	movlw	high UI@month
  5853  000390  0100               	movlb	0	; () banked
  5854  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5855  000394  0EE2               	movlw	low STR_16
  5856  000396  0100               	movlb	0	; () banked
  5857  000398  6F82               	movwf	strcpy@from& (0+255),b
  5858  00039A  0EFF               	movlw	high STR_16
  5859  00039C  0100               	movlb	0	; () banked
  5860  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5861  0003A0  ECD5  F016         	call	_strcpy	;wreg free
  5862                           
  5863                           ;UI.c: 149: break;
  5864  0003A4  D06E               	goto	l5493
  5865  0003A6                     l5481:
  5866                           
  5867                           ;UI.c: 151: strcpy(month, "OCT");
  5868  0003A6  0ED5               	movlw	low UI@month
  5869  0003A8  0100               	movlb	0	; () banked
  5870  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  5871  0003AC  0E00               	movlw	high UI@month
  5872  0003AE  0100               	movlb	0	; () banked
  5873  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5874  0003B2  0EF2               	movlw	low STR_17
  5875  0003B4  0100               	movlb	0	; () banked
  5876  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  5877  0003B8  0EFF               	movlw	high STR_17
  5878  0003BA  0100               	movlb	0	; () banked
  5879  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5880  0003BE  ECD5  F016         	call	_strcpy	;wreg free
  5881                           
  5882                           ;UI.c: 152: break;
  5883  0003C2  D05F               	goto	l5493
  5884  0003C4                     l5483:
  5885                           
  5886                           ;UI.c: 154: strcpy(month, "NOV");
  5887  0003C4  0ED5               	movlw	low UI@month
  5888  0003C6  0100               	movlb	0	; () banked
  5889  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  5890  0003CA  0E00               	movlw	high UI@month
  5891  0003CC  0100               	movlb	0	; () banked
  5892  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5893  0003D0  0EF6               	movlw	low STR_18
  5894  0003D2  0100               	movlb	0	; () banked
  5895  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  5896  0003D6  0EFF               	movlw	high STR_18
  5897  0003D8  0100               	movlb	0	; () banked
  5898  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5899  0003DC  ECD5  F016         	call	_strcpy	;wreg free
  5900                           
  5901                           ;UI.c: 155: break;
  5902  0003E0  D050               	goto	l5493
  5903  0003E2                     l5485:
  5904                           
  5905                           ;UI.c: 157: strcpy(month, "DEC");
  5906  0003E2  0ED5               	movlw	low UI@month
  5907  0003E4  0100               	movlb	0	; () banked
  5908  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  5909  0003E8  0E00               	movlw	high UI@month
  5910  0003EA  0100               	movlb	0	; () banked
  5911  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5912  0003EE  0ECE               	movlw	low STR_19
  5913  0003F0  0100               	movlb	0	; () banked
  5914  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  5915  0003F4  0EFF               	movlw	high STR_19
  5916  0003F6  0100               	movlb	0	; () banked
  5917  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5918  0003FA  ECD5  F016         	call	_strcpy	;wreg free
  5919                           
  5920                           ;UI.c: 158: break;
  5921  0003FE  D041               	goto	l5493
  5922  000400                     l5487:
  5923                           
  5924                           ;UI.c: 160: strcpy(month, "ERR");
  5925  000400  0ED5               	movlw	low UI@month
  5926  000402  0100               	movlb	0	; () banked
  5927  000404  6F80               	movwf	strcpy@to& (0+255),b
  5928  000406  0E00               	movlw	high UI@month
  5929  000408  0100               	movlb	0	; () banked
  5930  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5931  00040C  0EEE               	movlw	low STR_20
  5932  00040E  0100               	movlb	0	; () banked
  5933  000410  6F82               	movwf	strcpy@from& (0+255),b
  5934  000412  0EFF               	movlw	high STR_20
  5935  000414  0100               	movlb	0	; () banked
  5936  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5937  000418  ECD5  F016         	call	_strcpy	;wreg free
  5938                           
  5939                           ;UI.c: 162: }
  5940                           
  5941                           ;UI.c: 161: break;
  5942  00041C  D032               	goto	l5493
  5943  00041E                     l5491:
  5944  00041E  EE21  F00A         	lfsr	2,_log_startTime+10
  5945  000422  CFDE F0C4          	movff	postinc2,??_UI
  5946  000426  CFDD F0C5          	movff	postdec2,??_UI+1
  5947                           
  5948                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5949                           ; Switch size 1, requested type "space"
  5950                           ; Number of cases is 1, Range of values is 0 to 0
  5951                           ; switch strategies available:
  5952                           ; Name         Instructions Cycles
  5953                           ; simple_byte            4     3 (average)
  5954                           ;	Chosen strategy is simple_byte
  5955  00042A  0100               	movlb	0	; () banked
  5956  00042C  51C5               	movf	(??_UI+1)& (0+255),w,b
  5957  00042E  0A00               	xorlw	0	; case 0
  5958  000430  A4D8               	btfss	status,2,c
  5959  000432  D7E6               	goto	l5487
  5960                           
  5961                           ; BSR set to: 0
  5962                           ; Switch size 1, requested type "space"
  5963                           ; Number of cases is 12, Range of values is 1 to 12
  5964                           ; switch strategies available:
  5965                           ; Name         Instructions Cycles
  5966                           ; simple_byte           37    19 (average)
  5967                           ;	Chosen strategy is simple_byte
  5968  000434  0100               	movlb	0	; () banked
  5969  000436  51C4               	movf	??_UI& (0+255),w,b
  5970  000438  0A01               	xorlw	1	; case 1
  5971  00043A  B4D8               	btfsc	status,2,c
  5972  00043C  D72D               	goto	l5463
  5973  00043E  0A03               	xorlw	3	; case 2
  5974  000440  B4D8               	btfsc	status,2,c
  5975  000442  D739               	goto	l5465
  5976  000444  0A01               	xorlw	1	; case 3
  5977  000446  B4D8               	btfsc	status,2,c
  5978  000448  D745               	goto	l5467
  5979  00044A  0A07               	xorlw	7	; case 4
  5980  00044C  B4D8               	btfsc	status,2,c
  5981  00044E  D751               	goto	l5469
  5982  000450  0A01               	xorlw	1	; case 5
  5983  000452  B4D8               	btfsc	status,2,c
  5984  000454  D75D               	goto	l5471
  5985  000456  0A03               	xorlw	3	; case 6
  5986  000458  B4D8               	btfsc	status,2,c
  5987  00045A  D769               	goto	l5473
  5988  00045C  0A01               	xorlw	1	; case 7
  5989  00045E  B4D8               	btfsc	status,2,c
  5990  000460  D775               	goto	l5475
  5991  000462  0A0F               	xorlw	15	; case 8
  5992  000464  B4D8               	btfsc	status,2,c
  5993  000466  D781               	goto	l5477
  5994  000468  0A01               	xorlw	1	; case 9
  5995  00046A  B4D8               	btfsc	status,2,c
  5996  00046C  D78D               	goto	l5479
  5997  00046E  0A03               	xorlw	3	; case 10
  5998  000470  B4D8               	btfsc	status,2,c
  5999  000472  D799               	goto	l5481
  6000  000474  0A01               	xorlw	1	; case 11
  6001  000476  B4D8               	btfsc	status,2,c
  6002  000478  D7A5               	goto	l5483
  6003  00047A  0A07               	xorlw	7	; case 12
  6004  00047C  B4D8               	btfsc	status,2,c
  6005  00047E  D7B1               	goto	l5485
  6006  000480  D7BF               	goto	l5487
  6007  000482                     l5493:
  6008                           
  6009                           ;UI.c: 163: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6010  000482  0EAC               	movlw	low STR_21
  6011  000484  0100               	movlb	0	; () banked
  6012  000486  6F8E               	movwf	printf@f& (0+255),b
  6013  000488  0EFD               	movlw	high STR_21
  6014  00048A  0100               	movlb	0	; () banked
  6015  00048C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6016  00048E  C108  F090         	movff	_log_startTime+8,?_printf+2
  6017  000492  C109  F091         	movff	_log_startTime+9,?_printf+3
  6018  000496  0ED5               	movlw	low UI@month
  6019  000498  0100               	movlb	0	; () banked
  6020  00049A  6F92               	movwf	(?_printf+4)& (0+255),b
  6021  00049C  0E00               	movlw	high UI@month
  6022  00049E  0100               	movlb	0	; () banked
  6023  0004A0  6F93               	movwf	(?_printf+5)& (0+255),b
  6024  0004A2  C104  F094         	movff	_log_startTime+4,?_printf+6
  6025  0004A6  C105  F095         	movff	_log_startTime+5,?_printf+7
  6026  0004AA  C102  F096         	movff	_log_startTime+2,?_printf+8
  6027  0004AE  C103  F097         	movff	_log_startTime+3,?_printf+9
  6028  0004B2  C100  F098         	movff	_log_startTime,?_printf+10
  6029  0004B6  C101  F099         	movff	_log_startTime+1,?_printf+11
  6030  0004BA  EC3E  F004         	call	_printf	;wreg free
  6031                           
  6032                           ;UI.c: 165: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6033  0004BE  0E00               	movlw	0
  6034  0004C0  0100               	movlb	0	; () banked
  6035  0004C2  6FCB               	movwf	UI@i_523& (0+255),b
  6036  0004C4                     l5497:
  6037                           
  6038                           ; BSR set to: 0
  6039  0004C4  0E63               	movlw	99
  6040  0004C6  0100               	movlb	0	; () banked
  6041  0004C8  65CB               	cpfsgt	UI@i_523& (0+255),b
  6042  0004CA  D001               	goto	l5501
  6043  0004CC  D00C               	goto	l5505
  6044  0004CE                     l5501:
  6045                           
  6046                           ; BSR set to: 0
  6047  0004CE  0E68               	movlw	104
  6048  0004D0  0100               	movlb	0	; () banked
  6049  0004D2  6FC4               	movwf	??_UI& (0+255),b
  6050  0004D4  0EE4               	movlw	228
  6051  0004D6                     u5307:
  6052  0004D6  2EE8               	decfsz	wreg,f,c
  6053  0004D8  D7FE               	bra	u5307
  6054  0004DA  2FC4               	decfsz	??_UI& (0+255),f,b
  6055  0004DC  D7FC               	bra	u5307
  6056  0004DE  F000               	nop	
  6057  0004E0  0100               	movlb	0	; () banked
  6058  0004E2  2BCB               	incf	UI@i_523& (0+255),f,b
  6059  0004E4  D7EF               	goto	l5497
  6060  0004E6                     l5505:
  6061                           
  6062                           ; BSR set to: 0
  6063  0004E6  0100               	movlb	0	; () banked
  6064  0004E8  51F7               	movf	_logstate& (0+255),w,b
  6065  0004EA  0100               	movlb	0	; () banked
  6066  0004EC  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6067  0004EE  B4D8               	btfsc	status,2,c
  6068  0004F0  0012               	return	
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;UI.c: 166: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6072                           
  6073                           ; BSR set to: 0
  6074                           
  6075                           ; BSR set to: 0
  6076  0004F2  0E00               	movlw	0
  6077  0004F4  0100               	movlb	0	; () banked
  6078  0004F6  6FCC               	movwf	UI@i_524& (0+255),b
  6079  0004F8                     l5511:
  6080                           
  6081                           ; BSR set to: 0
  6082  0004F8  0E63               	movlw	99
  6083  0004FA  0100               	movlb	0	; () banked
  6084  0004FC  65CC               	cpfsgt	UI@i_524& (0+255),b
  6085  0004FE  D001               	goto	l5515
  6086  000500  D00C               	goto	l5519
  6087  000502                     l5515:
  6088                           
  6089                           ; BSR set to: 0
  6090  000502  0E68               	movlw	104
  6091  000504  0100               	movlb	0	; () banked
  6092  000506  6FC4               	movwf	??_UI& (0+255),b
  6093  000508  0EE4               	movlw	228
  6094  00050A                     u5317:
  6095  00050A  2EE8               	decfsz	wreg,f,c
  6096  00050C  D7FE               	bra	u5317
  6097  00050E  2FC4               	decfsz	??_UI& (0+255),f,b
  6098  000510  D7FC               	bra	u5317
  6099  000512  F000               	nop	
  6100  000514  0100               	movlb	0	; () banked
  6101  000516  2BCC               	incf	UI@i_524& (0+255),f,b
  6102  000518  D7EF               	goto	l5511
  6103  00051A                     l5519:
  6104                           
  6105                           ; BSR set to: 0
  6106  00051A  0100               	movlb	0	; () banked
  6107  00051C  51F7               	movf	_logstate& (0+255),w,b
  6108  00051E  0100               	movlb	0	; () banked
  6109  000520  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6110  000522  B4D8               	btfsc	status,2,c
  6111  000524  0012               	return	
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;UI.c: 168: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6115                           
  6116                           ; BSR set to: 0
  6117                           
  6118                           ; BSR set to: 0
  6119  000526  0E01               	movlw	1
  6120  000528  EC40  F019         	call	_lcdInst
  6121  00052C  0E68               	movlw	104
  6122  00052E  0100               	movlb	0	; () banked
  6123  000530  6FC4               	movwf	??_UI& (0+255),b
  6124  000532  0EE4               	movlw	228
  6125  000534                     u5327:
  6126  000534  2EE8               	decfsz	wreg,f,c
  6127  000536  D7FE               	bra	u5327
  6128  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  6129  00053A  D7FC               	bra	u5327
  6130  00053C  F000               	nop	
  6131                           
  6132                           ;UI.c: 169: lcdInst(0b10000000);;
  6133  00053E  0E80               	movlw	128
  6134  000540  EC40  F019         	call	_lcdInst
  6135                           
  6136                           ;UI.c: 170: printf("DURATION:");
  6137  000544  0EA2               	movlw	low STR_22
  6138  000546  0100               	movlb	0	; () banked
  6139  000548  6F8E               	movwf	printf@f& (0+255),b
  6140  00054A  0EFF               	movlw	high STR_22
  6141  00054C  0100               	movlb	0	; () banked
  6142  00054E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6143  000550  EC3E  F004         	call	_printf	;wreg free
  6144                           
  6145                           ;UI.c: 171: lcdInst(0b11000000);;
  6146  000554  0EC0               	movlw	192
  6147  000556  EC40  F019         	call	_lcdInst
  6148                           
  6149                           ;UI.c: 172: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6150  00055A  0E0E               	movlw	14
  6151  00055C  0100               	movlb	0	; () banked
  6152  00055E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6153  000560  0E10               	movlw	16
  6154  000562  6F82               	movwf	___awmod@divisor& (0+255),b
  6155  000564  C0F5  F080         	movff	_log_total_time,___awmod@dividend
  6156  000568  C0F6  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6157  00056C  ECC2  F012         	call	___awmod	;wreg free
  6158  000570  C080  F0C6         	movff	?___awmod,_UI$1990
  6159  000574  C081  F0C7         	movff	?___awmod+1,_UI$1990+1
  6160                           
  6161                           ;UI.c: 172: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6162  000578  0E89               	movlw	low STR_23
  6163  00057A  0100               	movlb	0	; () banked
  6164  00057C  6F8E               	movwf	printf@f& (0+255),b
  6165  00057E  0EFF               	movlw	high STR_23
  6166  000580  0100               	movlb	0	; () banked
  6167  000582  6F8F               	movwf	(printf@f+1)& (0+255),b
  6168  000584  0E0E               	movlw	14
  6169  000586  0100               	movlb	0	; () banked
  6170  000588  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6171  00058A  0E10               	movlw	16
  6172  00058C  6F82               	movwf	___awmod@divisor& (0+255),b
  6173  00058E  C0F5  F080         	movff	_log_total_time,___awmod@dividend
  6174  000592  C0F6  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6175  000596  ECC2  F012         	call	___awmod	;wreg free
  6176  00059A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6177  00059E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6178  0005A2  0E00               	movlw	0
  6179  0005A4  0100               	movlb	0	; () banked
  6180  0005A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6181  0005A8  0E3C               	movlw	60
  6182  0005AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6183  0005AC  EC5A  F011         	call	___awdiv	;wreg free
  6184  0005B0  C086  F090         	movff	?___awdiv,?_printf+2
  6185  0005B4  C087  F091         	movff	?___awdiv+1,?_printf+3
  6186  0005B8  C0C6  F080         	movff	_UI$1990,___awmod@dividend
  6187  0005BC  C0C7  F081         	movff	_UI$1990+1,___awmod@dividend+1
  6188  0005C0  0E00               	movlw	0
  6189  0005C2  0100               	movlb	0	; () banked
  6190  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6191  0005C6  0E3C               	movlw	60
  6192  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6193  0005CA  ECC2  F012         	call	___awmod	;wreg free
  6194  0005CE  C080  F092         	movff	?___awmod,?_printf+4
  6195  0005D2  C081  F093         	movff	?___awmod+1,?_printf+5
  6196  0005D6  EC3E  F004         	call	_printf	;wreg free
  6197                           
  6198                           ;UI.c: 174: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6199  0005DA  0E00               	movlw	0
  6200  0005DC  0100               	movlb	0	; () banked
  6201  0005DE  6FCD               	movwf	UI@i_527& (0+255),b
  6202  0005E0                     l5539:
  6203                           
  6204                           ; BSR set to: 0
  6205  0005E0  0E63               	movlw	99
  6206  0005E2  0100               	movlb	0	; () banked
  6207  0005E4  65CD               	cpfsgt	UI@i_527& (0+255),b
  6208  0005E6  D001               	goto	l5543
  6209  0005E8  D00C               	goto	l5547
  6210  0005EA                     l5543:
  6211                           
  6212                           ; BSR set to: 0
  6213  0005EA  0E68               	movlw	104
  6214  0005EC  0100               	movlb	0	; () banked
  6215  0005EE  6FC4               	movwf	??_UI& (0+255),b
  6216  0005F0  0EE4               	movlw	228
  6217  0005F2                     u5337:
  6218  0005F2  2EE8               	decfsz	wreg,f,c
  6219  0005F4  D7FE               	bra	u5337
  6220  0005F6  2FC4               	decfsz	??_UI& (0+255),f,b
  6221  0005F8  D7FC               	bra	u5337
  6222  0005FA  F000               	nop	
  6223  0005FC  0100               	movlb	0	; () banked
  6224  0005FE  2BCD               	incf	UI@i_527& (0+255),f,b
  6225  000600  D7EF               	goto	l5539
  6226  000602                     l5547:
  6227                           
  6228                           ; BSR set to: 0
  6229  000602  0100               	movlb	0	; () banked
  6230  000604  51F7               	movf	_logstate& (0+255),w,b
  6231  000606  0100               	movlb	0	; () banked
  6232  000608  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6233  00060A  B4D8               	btfsc	status,2,c
  6234  00060C  0012               	return	
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;UI.c: 175: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6238                           
  6239                           ; BSR set to: 0
  6240                           
  6241                           ; BSR set to: 0
  6242  00060E  0E00               	movlw	0
  6243  000610  0100               	movlb	0	; () banked
  6244  000612  6FCE               	movwf	UI@i_528& (0+255),b
  6245  000614                     l5553:
  6246                           
  6247                           ; BSR set to: 0
  6248  000614  0E63               	movlw	99
  6249  000616  0100               	movlb	0	; () banked
  6250  000618  65CE               	cpfsgt	UI@i_528& (0+255),b
  6251  00061A  D001               	goto	l5557
  6252  00061C  D00C               	goto	l5561
  6253  00061E                     l5557:
  6254                           
  6255                           ; BSR set to: 0
  6256  00061E  0E68               	movlw	104
  6257  000620  0100               	movlb	0	; () banked
  6258  000622  6FC4               	movwf	??_UI& (0+255),b
  6259  000624  0EE4               	movlw	228
  6260  000626                     u5347:
  6261  000626  2EE8               	decfsz	wreg,f,c
  6262  000628  D7FE               	bra	u5347
  6263  00062A  2FC4               	decfsz	??_UI& (0+255),f,b
  6264  00062C  D7FC               	bra	u5347
  6265  00062E  F000               	nop	
  6266  000630  0100               	movlb	0	; () banked
  6267  000632  2BCE               	incf	UI@i_528& (0+255),f,b
  6268  000634  D7EF               	goto	l5553
  6269  000636                     l5561:
  6270                           
  6271                           ; BSR set to: 0
  6272  000636  0100               	movlb	0	; () banked
  6273  000638  51F7               	movf	_logstate& (0+255),w,b
  6274  00063A  0100               	movlb	0	; () banked
  6275  00063C  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6276  00063E  B4D8               	btfsc	status,2,c
  6277  000640  0012               	return	
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;UI.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6281                           
  6282                           ; BSR set to: 0
  6283                           
  6284                           ; BSR set to: 0
  6285  000642  0E01               	movlw	1
  6286  000644  EC40  F019         	call	_lcdInst
  6287  000648  0E68               	movlw	104
  6288  00064A  0100               	movlb	0	; () banked
  6289  00064C  6FC4               	movwf	??_UI& (0+255),b
  6290  00064E  0EE4               	movlw	228
  6291  000650                     u5357:
  6292  000650  2EE8               	decfsz	wreg,f,c
  6293  000652  D7FE               	bra	u5357
  6294  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  6295  000656  D7FC               	bra	u5357
  6296  000658  F000               	nop	
  6297                           
  6298                           ;UI.c: 178: lcdInst(0b10000000);;
  6299  00065A  0E80               	movlw	128
  6300  00065C  EC40  F019         	call	_lcdInst
  6301                           
  6302                           ;UI.c: 179: printf(" -- POP  CAN -- ");
  6303  000660  0E9C               	movlw	low STR_24
  6304  000662  0100               	movlb	0	; () banked
  6305  000664  6F8E               	movwf	printf@f& (0+255),b
  6306  000666  0EFE               	movlw	high STR_24
  6307  000668  0100               	movlb	0	; () banked
  6308  00066A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6309  00066C  EC3E  F004         	call	_printf	;wreg free
  6310                           
  6311                           ;UI.c: 180: lcdInst(0b11000000);;
  6312  000670  0EC0               	movlw	192
  6313  000672  EC40  F019         	call	_lcdInst
  6314                           
  6315                           ;UI.c: 181: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6316  000676  0E00               	movlw	low STR_25
  6317  000678  0100               	movlb	0	; () banked
  6318  00067A  6F8E               	movwf	printf@f& (0+255),b
  6319  00067C  0EFE               	movlw	high STR_25
  6320  00067E  0100               	movlb	0	; () banked
  6321  000680  6F8F               	movwf	(printf@f+1)& (0+255),b
  6322  000682  C0EF  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6323  000686  C0F0  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6324  00068A  C0F1  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6325  00068E  C0F2  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6326  000692  EC3E  F004         	call	_printf	;wreg free
  6327                           
  6328                           ;UI.c: 183: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6329  000696  0E00               	movlw	0
  6330  000698  0100               	movlb	0	; () banked
  6331  00069A  6FCF               	movwf	UI@i_531& (0+255),b
  6332  00069C                     l5579:
  6333                           
  6334                           ; BSR set to: 0
  6335  00069C  0E63               	movlw	99
  6336  00069E  0100               	movlb	0	; () banked
  6337  0006A0  65CF               	cpfsgt	UI@i_531& (0+255),b
  6338  0006A2  D001               	goto	l5583
  6339  0006A4  D00C               	goto	l5587
  6340  0006A6                     l5583:
  6341                           
  6342                           ; BSR set to: 0
  6343  0006A6  0E68               	movlw	104
  6344  0006A8  0100               	movlb	0	; () banked
  6345  0006AA  6FC4               	movwf	??_UI& (0+255),b
  6346  0006AC  0EE4               	movlw	228
  6347  0006AE                     u5367:
  6348  0006AE  2EE8               	decfsz	wreg,f,c
  6349  0006B0  D7FE               	bra	u5367
  6350  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  6351  0006B4  D7FC               	bra	u5367
  6352  0006B6  F000               	nop	
  6353  0006B8  0100               	movlb	0	; () banked
  6354  0006BA  2BCF               	incf	UI@i_531& (0+255),f,b
  6355  0006BC  D7EF               	goto	l5579
  6356  0006BE                     l5587:
  6357                           
  6358                           ; BSR set to: 0
  6359  0006BE  0100               	movlb	0	; () banked
  6360  0006C0  51F7               	movf	_logstate& (0+255),w,b
  6361  0006C2  0100               	movlb	0	; () banked
  6362  0006C4  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6363  0006C6  B4D8               	btfsc	status,2,c
  6364  0006C8  0012               	return	
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;UI.c: 184: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6368                           
  6369                           ; BSR set to: 0
  6370                           
  6371                           ; BSR set to: 0
  6372  0006CA  0E00               	movlw	0
  6373  0006CC  0100               	movlb	0	; () banked
  6374  0006CE  6FD0               	movwf	UI@i_532& (0+255),b
  6375  0006D0                     l5593:
  6376                           
  6377                           ; BSR set to: 0
  6378  0006D0  0E63               	movlw	99
  6379  0006D2  0100               	movlb	0	; () banked
  6380  0006D4  65D0               	cpfsgt	UI@i_532& (0+255),b
  6381  0006D6  D001               	goto	l5597
  6382  0006D8  D00C               	goto	l5601
  6383  0006DA                     l5597:
  6384                           
  6385                           ; BSR set to: 0
  6386  0006DA  0E68               	movlw	104
  6387  0006DC  0100               	movlb	0	; () banked
  6388  0006DE  6FC4               	movwf	??_UI& (0+255),b
  6389  0006E0  0EE4               	movlw	228
  6390  0006E2                     u5377:
  6391  0006E2  2EE8               	decfsz	wreg,f,c
  6392  0006E4  D7FE               	bra	u5377
  6393  0006E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6394  0006E8  D7FC               	bra	u5377
  6395  0006EA  F000               	nop	
  6396  0006EC  0100               	movlb	0	; () banked
  6397  0006EE  2BD0               	incf	UI@i_532& (0+255),f,b
  6398  0006F0  D7EF               	goto	l5593
  6399  0006F2                     l5601:
  6400                           
  6401                           ; BSR set to: 0
  6402  0006F2  0100               	movlb	0	; () banked
  6403  0006F4  51F7               	movf	_logstate& (0+255),w,b
  6404  0006F6  0100               	movlb	0	; () banked
  6405  0006F8  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6406  0006FA  B4D8               	btfsc	status,2,c
  6407  0006FC  0012               	return	
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;UI.c: 186: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6411                           
  6412                           ; BSR set to: 0
  6413                           
  6414                           ; BSR set to: 0
  6415  0006FE  0E01               	movlw	1
  6416  000700  EC40  F019         	call	_lcdInst
  6417  000704  0E68               	movlw	104
  6418  000706  0100               	movlb	0	; () banked
  6419  000708  6FC4               	movwf	??_UI& (0+255),b
  6420  00070A  0EE4               	movlw	228
  6421  00070C                     u5387:
  6422  00070C  2EE8               	decfsz	wreg,f,c
  6423  00070E  D7FE               	bra	u5387
  6424  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  6425  000712  D7FC               	bra	u5387
  6426  000714  F000               	nop	
  6427                           
  6428                           ;UI.c: 187: lcdInst(0b10000000);;
  6429  000716  0E80               	movlw	128
  6430  000718  EC40  F019         	call	_lcdInst
  6431                           
  6432                           ;UI.c: 188: printf(" -- SOUP CAN -- ");
  6433  00071C  0EAD               	movlw	low STR_26
  6434  00071E  0100               	movlb	0	; () banked
  6435  000720  6F8E               	movwf	printf@f& (0+255),b
  6436  000722  0EFE               	movlw	high STR_26
  6437  000724  0100               	movlb	0	; () banked
  6438  000726  6F8F               	movwf	(printf@f+1)& (0+255),b
  6439  000728  EC3E  F004         	call	_printf	;wreg free
  6440                           
  6441                           ;UI.c: 189: lcdInst(0b11000000);;
  6442  00072C  0EC0               	movlw	192
  6443  00072E  EC40  F019         	call	_lcdInst
  6444                           
  6445                           ;UI.c: 190: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6446  000732  0EED               	movlw	low STR_27
  6447  000734  0100               	movlb	0	; () banked
  6448  000736  6F8E               	movwf	printf@f& (0+255),b
  6449  000738  0EFD               	movlw	high STR_27
  6450  00073A  0100               	movlb	0	; () banked
  6451  00073C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6452  00073E  C0EB  F090         	movff	_log_count_can_no_lab,?_printf+2
  6453  000742  C0EC  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6454  000746  C0ED  F092         	movff	_log_count_can_w_lab,?_printf+4
  6455  00074A  C0EE  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6456  00074E  EC3E  F004         	call	_printf	;wreg free
  6457                           
  6458                           ;UI.c: 192: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6459  000752  0E00               	movlw	0
  6460  000754  0100               	movlb	0	; () banked
  6461  000756  6FD1               	movwf	UI@i_535& (0+255),b
  6462  000758                     l5619:
  6463                           
  6464                           ; BSR set to: 0
  6465  000758  0E63               	movlw	99
  6466  00075A  0100               	movlb	0	; () banked
  6467  00075C  65D1               	cpfsgt	UI@i_535& (0+255),b
  6468  00075E  D001               	goto	l5623
  6469  000760  D00C               	goto	l5627
  6470  000762                     l5623:
  6471                           
  6472                           ; BSR set to: 0
  6473  000762  0E68               	movlw	104
  6474  000764  0100               	movlb	0	; () banked
  6475  000766  6FC4               	movwf	??_UI& (0+255),b
  6476  000768  0EE4               	movlw	228
  6477  00076A                     u5397:
  6478  00076A  2EE8               	decfsz	wreg,f,c
  6479  00076C  D7FE               	bra	u5397
  6480  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  6481  000770  D7FC               	bra	u5397
  6482  000772  F000               	nop	
  6483  000774  0100               	movlb	0	; () banked
  6484  000776  2BD1               	incf	UI@i_535& (0+255),f,b
  6485  000778  D7EF               	goto	l5619
  6486  00077A                     l5627:
  6487                           
  6488                           ; BSR set to: 0
  6489  00077A  0100               	movlb	0	; () banked
  6490  00077C  51F7               	movf	_logstate& (0+255),w,b
  6491  00077E  0100               	movlb	0	; () banked
  6492  000780  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6493  000782  B4D8               	btfsc	status,2,c
  6494  000784  0012               	return	
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;UI.c: 193: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6498                           
  6499                           ; BSR set to: 0
  6500                           
  6501                           ; BSR set to: 0
  6502  000786  0E00               	movlw	0
  6503  000788  0100               	movlb	0	; () banked
  6504  00078A  6FD2               	movwf	UI@i_536& (0+255),b
  6505  00078C                     l5633:
  6506                           
  6507                           ; BSR set to: 0
  6508  00078C  0E63               	movlw	99
  6509  00078E  0100               	movlb	0	; () banked
  6510  000790  65D2               	cpfsgt	UI@i_536& (0+255),b
  6511  000792  D001               	goto	l5637
  6512  000794  D00C               	goto	l5641
  6513  000796                     l5637:
  6514                           
  6515                           ; BSR set to: 0
  6516  000796  0E68               	movlw	104
  6517  000798  0100               	movlb	0	; () banked
  6518  00079A  6FC4               	movwf	??_UI& (0+255),b
  6519  00079C  0EE4               	movlw	228
  6520  00079E                     u5407:
  6521  00079E  2EE8               	decfsz	wreg,f,c
  6522  0007A0  D7FE               	bra	u5407
  6523  0007A2  2FC4               	decfsz	??_UI& (0+255),f,b
  6524  0007A4  D7FC               	bra	u5407
  6525  0007A6  F000               	nop	
  6526  0007A8  0100               	movlb	0	; () banked
  6527  0007AA  2BD2               	incf	UI@i_536& (0+255),f,b
  6528  0007AC  D7EF               	goto	l5633
  6529  0007AE                     l5641:
  6530                           
  6531                           ; BSR set to: 0
  6532  0007AE  0100               	movlb	0	; () banked
  6533  0007B0  51F7               	movf	_logstate& (0+255),w,b
  6534  0007B2  0100               	movlb	0	; () banked
  6535  0007B4  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6536  0007B6  B4D8               	btfsc	status,2,c
  6537  0007B8  0012               	return	
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;UI.c: 195: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6541                           
  6542                           ; BSR set to: 0
  6543                           
  6544                           ; BSR set to: 0
  6545  0007BA  0E01               	movlw	1
  6546  0007BC  EC40  F019         	call	_lcdInst
  6547  0007C0  0E68               	movlw	104
  6548  0007C2  0100               	movlb	0	; () banked
  6549  0007C4  6FC4               	movwf	??_UI& (0+255),b
  6550  0007C6  0EE4               	movlw	228
  6551  0007C8                     u5417:
  6552  0007C8  2EE8               	decfsz	wreg,f,c
  6553  0007CA  D7FE               	bra	u5417
  6554  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  6555  0007CE  D7FC               	bra	u5417
  6556  0007D0  F000               	nop	
  6557                           
  6558                           ;UI.c: 196: lcdInst(0b10000000);;
  6559  0007D2  0E80               	movlw	128
  6560  0007D4  EC40  F019         	call	_lcdInst
  6561                           
  6562                           ;UI.c: 197: printf("-- TOTAL CANS --");
  6563  0007D8  0ECF               	movlw	low STR_28
  6564  0007DA  0100               	movlb	0	; () banked
  6565  0007DC  6F8E               	movwf	printf@f& (0+255),b
  6566  0007DE  0EFE               	movlw	high STR_28
  6567  0007E0  0100               	movlb	0	; () banked
  6568  0007E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  6569  0007E4  EC3E  F004         	call	_printf	;wreg free
  6570                           
  6571                           ;UI.c: 198: lcdInst(0b11000000);;
  6572  0007E8  0EC0               	movlw	192
  6573  0007EA  EC40  F019         	call	_lcdInst
  6574                           
  6575                           ;UI.c: 199: printf("%d", log_count_total);
  6576  0007EE  0EFD               	movlw	low (STR_27+16)
  6577  0007F0  0100               	movlb	0	; () banked
  6578  0007F2  6F8E               	movwf	printf@f& (0+255),b
  6579  0007F4  0EFD               	movlw	high (STR_27+16)
  6580  0007F6  0100               	movlb	0	; () banked
  6581  0007F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6582  0007FA  C0F3  F090         	movff	_log_count_total,?_printf+2
  6583  0007FE  C0F4  F091         	movff	_log_count_total+1,?_printf+3
  6584  000802  EC3E  F004         	call	_printf	;wreg free
  6585                           
  6586                           ;UI.c: 201: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6587  000806  0E00               	movlw	0
  6588  000808  0100               	movlb	0	; () banked
  6589  00080A  6FD3               	movwf	UI@i_539& (0+255),b
  6590  00080C                     l5659:
  6591                           
  6592                           ; BSR set to: 0
  6593  00080C  0E63               	movlw	99
  6594  00080E  0100               	movlb	0	; () banked
  6595  000810  65D3               	cpfsgt	UI@i_539& (0+255),b
  6596  000812  D001               	goto	l5663
  6597  000814  D00C               	goto	l5667
  6598  000816                     l5663:
  6599                           
  6600                           ; BSR set to: 0
  6601  000816  0E68               	movlw	104
  6602  000818  0100               	movlb	0	; () banked
  6603  00081A  6FC4               	movwf	??_UI& (0+255),b
  6604  00081C  0EE4               	movlw	228
  6605  00081E                     u5427:
  6606  00081E  2EE8               	decfsz	wreg,f,c
  6607  000820  D7FE               	bra	u5427
  6608  000822  2FC4               	decfsz	??_UI& (0+255),f,b
  6609  000824  D7FC               	bra	u5427
  6610  000826  F000               	nop	
  6611  000828  0100               	movlb	0	; () banked
  6612  00082A  2BD3               	incf	UI@i_539& (0+255),f,b
  6613  00082C  D7EF               	goto	l5659
  6614  00082E                     l5667:
  6615                           
  6616                           ; BSR set to: 0
  6617  00082E  0100               	movlb	0	; () banked
  6618  000830  51F7               	movf	_logstate& (0+255),w,b
  6619  000832  0100               	movlb	0	; () banked
  6620  000834  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6621  000836  B4D8               	btfsc	status,2,c
  6622  000838  0012               	return	
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;UI.c: 202: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6626                           
  6627                           ; BSR set to: 0
  6628                           
  6629                           ; BSR set to: 0
  6630  00083A  0E00               	movlw	0
  6631  00083C  0100               	movlb	0	; () banked
  6632  00083E  6FD4               	movwf	UI@i_540& (0+255),b
  6633  000840                     l5673:
  6634                           
  6635                           ; BSR set to: 0
  6636  000840  0E63               	movlw	99
  6637  000842  0100               	movlb	0	; () banked
  6638  000844  65D4               	cpfsgt	UI@i_540& (0+255),b
  6639  000846  D001               	goto	l5677
  6640  000848  D00C               	goto	l5681
  6641  00084A                     l5677:
  6642                           
  6643                           ; BSR set to: 0
  6644  00084A  0E68               	movlw	104
  6645  00084C  0100               	movlb	0	; () banked
  6646  00084E  6FC4               	movwf	??_UI& (0+255),b
  6647  000850  0EE4               	movlw	228
  6648  000852                     u5437:
  6649  000852  2EE8               	decfsz	wreg,f,c
  6650  000854  D7FE               	bra	u5437
  6651  000856  2FC4               	decfsz	??_UI& (0+255),f,b
  6652  000858  D7FC               	bra	u5437
  6653  00085A  F000               	nop	
  6654  00085C  0100               	movlb	0	; () banked
  6655  00085E  2BD4               	incf	UI@i_540& (0+255),f,b
  6656  000860  D7EF               	goto	l5673
  6657  000862                     l5681:
  6658                           
  6659                           ; BSR set to: 0
  6660  000862  0100               	movlb	0	; () banked
  6661  000864  51F7               	movf	_logstate& (0+255),w,b
  6662  000866  0100               	movlb	0	; () banked
  6663  000868  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6664  00086A  B4D8               	btfsc	status,2,c
  6665  00086C  0012               	return	
  6666  00086E                     l5685:
  6667  00086E  0100               	movlb	0	; () banked
  6668  000870  51F7               	movf	_logstate& (0+255),w,b
  6669  000872  0100               	movlb	0	; () banked
  6670  000874  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6671  000876  B4D8               	btfsc	status,2,c
  6672  000878  0012               	return	
  6673  00087A  D464               	goto	l5397
  6674  00087C                     __end_of_UI:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           intcon	equ	0xFF2
  6683                           intcon2	equ	0xFF1
  6684                           intcon3	equ	0xFF0
  6685                           postinc0	equ	0xFEE
  6686                           wreg	equ	0xFE8
  6687                           postdec1	equ	0xFE5
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           fsr2h	equ	0xFDA
  6693                           fsr2l	equ	0xFD9
  6694                           status	equ	0xFD8
  6695                           
  6696 ;; *************** function _printRTC *****************
  6697 ;; Defined at:
  6698 ;;		line 63 in file "RTC.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  i               2   66[BANK0 ] int 
  6703 ;;  INT_time       14   46[BANK0 ] int [7]
  6704 ;;  month           4   62[BANK0 ] unsigned char [4]
  6705 ;;  RTC_month       2   60[BANK0 ] int 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  1    wreg      void 
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;Total ram usage:       25 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:   10
  6722 ;; This function calls:
  6723 ;;		_getRTC
  6724 ;;		_lcdInst
  6725 ;;		_printf
  6726 ;;		_strcpy
  6727 ;; This function is called by:
  6728 ;;		_UI
  6729 ;;		_change_state_to_menu_start
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text24
  6734  001022                     __ptext24:
  6735                           	opt stack 0
  6736  001022                     _printRTC:
  6737                           	opt stack 18
  6738                           
  6739                           ;RTC.c: 64: getRTC();
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;incstack = 0
  6743  001022  ECA9  F013         	call	_getRTC	;wreg free
  6744                           
  6745                           ;RTC.c: 65: char month[] = "MMM";
  6746  001026  C12C  F0BE         	movff	printRTC@F3213,printRTC@month
  6747  00102A  C12D  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  6748  00102E  C12E  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  6749  001032  C12F  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  6750                           
  6751                           ;RTC.c: 66: int INT_time[7];
  6752                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  6753  001036  0E00               	movlw	0
  6754  001038  0100               	movlb	0	; () banked
  6755  00103A  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  6756  00103C  0E00               	movlw	0
  6757  00103E  6FC2               	movwf	printRTC@i& (0+255),b
  6758                           
  6759                           ; BSR set to: 0
  6760  001040  0100               	movlb	0	; () banked
  6761  001042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6762  001044  D008               	goto	l4601
  6763  001046  0100               	movlb	0	; () banked
  6764  001048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6765  00104A  E146               	bnz	l608
  6766  00104C  0E07               	movlw	7
  6767  00104E  0100               	movlb	0	; () banked
  6768  001050  5DC2               	subwf	printRTC@i& (0+255),w,b
  6769  001052  B0D8               	btfsc	status,0,c
  6770  001054  D041               	goto	l608
  6771  001056                     l4601:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6775  001056  0E5B               	movlw	low _time
  6776  001058  0100               	movlb	0	; () banked
  6777  00105A  25C2               	addwf	printRTC@i& (0+255),w,b
  6778  00105C  6ED9               	movwf	fsr2l,c
  6779  00105E  0E00               	movlw	high _time
  6780  001060  0100               	movlb	0	; () banked
  6781  001062  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6782  001064  6EDA               	movwf	fsr2h,c
  6783  001066  50DF               	movf	indf2,w,c
  6784  001068  0100               	movlb	0	; () banked
  6785  00106A  6FAB               	movwf	??_printRTC& (0+255),b
  6786  00106C  0100               	movlb	0	; () banked
  6787  00106E  3BAB               	swapf	??_printRTC& (0+255),f,b
  6788  001070  0E0F               	movlw	15
  6789  001072  17AB               	andwf	??_printRTC& (0+255),f,b
  6790  001074  0E0F               	movlw	15
  6791  001076  0100               	movlb	0	; () banked
  6792  001078  17AB               	andwf	??_printRTC& (0+255),f,b
  6793  00107A  0100               	movlb	0	; () banked
  6794  00107C  51AB               	movf	??_printRTC& (0+255),w,b
  6795  00107E  0D0A               	mullw	10
  6796  001080  0E5B               	movlw	low _time
  6797  001082  0100               	movlb	0	; () banked
  6798  001084  25C2               	addwf	printRTC@i& (0+255),w,b
  6799  001086  6ED9               	movwf	fsr2l,c
  6800  001088  0E00               	movlw	high _time
  6801  00108A  0100               	movlb	0	; () banked
  6802  00108C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6803  00108E  6EDA               	movwf	fsr2h,c
  6804  001090  50DF               	movf	indf2,w,c
  6805  001092  0B0F               	andlw	15
  6806  001094  0100               	movlb	0	; () banked
  6807  001096  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  6808  001098  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  6809  00109A  50F3               	movf	prodl,w,c
  6810  00109C  0100               	movlb	0	; () banked
  6811  00109E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  6812  0010A0  50F4               	movf	prodh,w,c
  6813  0010A2  0100               	movlb	0	; () banked
  6814  0010A4  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  6815  0010A6  90D8               	bcf	status,0,c
  6816  0010A8  0100               	movlb	0	; () banked
  6817  0010AA  35C2               	rlcf	printRTC@i& (0+255),w,b
  6818  0010AC  6ED9               	movwf	fsr2l,c
  6819  0010AE  0100               	movlb	0	; () banked
  6820  0010B0  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  6821  0010B2  6EDA               	movwf	fsr2h,c
  6822  0010B4  0EAE               	movlw	low printRTC@INT_time
  6823  0010B6  26D9               	addwf	fsr2l,f,c
  6824  0010B8  0E00               	movlw	high printRTC@INT_time
  6825  0010BA  22DA               	addwfc	fsr2h,f,c
  6826  0010BC  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  6827  0010C0  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  6828                           
  6829                           ; BSR set to: 0
  6830  0010C4  0100               	movlb	0	; () banked
  6831  0010C6  4BC2               	infsnz	printRTC@i& (0+255),f,b
  6832  0010C8  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  6833                           
  6834                           ; BSR set to: 0
  6835  0010CA  0100               	movlb	0	; () banked
  6836  0010CC  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6837  0010CE  D7C3               	goto	l4601
  6838  0010D0  0100               	movlb	0	; () banked
  6839  0010D2  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6840  0010D4  E101               	bnz	u3480
  6841  0010D6  D7BA               	goto	L5
  6842  0010D8                     u3480:
  6843  0010D8                     l608:
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;RTC.c: 69: }
  6847                           ;RTC.c: 70: int RTC_month = INT_time[5];
  6848  0010D8  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  6849  0010DC  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  6850                           
  6851                           ;RTC.c: 71: switch(RTC_month){
  6852  0010E0  D0B4               	goto	l4633
  6853  0010E2                     l4607:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;RTC.c: 73: strcpy(month, "JAN");
  6857  0010E2  0EBE               	movlw	low printRTC@month
  6858  0010E4  0100               	movlb	0	; () banked
  6859  0010E6  6F80               	movwf	strcpy@to& (0+255),b
  6860  0010E8  0E00               	movlw	high printRTC@month
  6861  0010EA  0100               	movlb	0	; () banked
  6862  0010EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6863  0010EE  0EDA               	movlw	low STR_8
  6864  0010F0  0100               	movlb	0	; () banked
  6865  0010F2  6F82               	movwf	strcpy@from& (0+255),b
  6866  0010F4  0EFF               	movlw	high STR_8
  6867  0010F6  0100               	movlb	0	; () banked
  6868  0010F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6869  0010FA  ECD5  F016         	call	_strcpy	;wreg free
  6870                           
  6871                           ;RTC.c: 74: break;
  6872  0010FE  D0D4               	goto	l4635
  6873  001100                     l4609:
  6874                           
  6875                           ;RTC.c: 76: strcpy(month, "FEB");
  6876  001100  0EBE               	movlw	low printRTC@month
  6877  001102  0100               	movlb	0	; () banked
  6878  001104  6F80               	movwf	strcpy@to& (0+255),b
  6879  001106  0E00               	movlw	high printRTC@month
  6880  001108  0100               	movlb	0	; () banked
  6881  00110A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6882  00110C  0ECA               	movlw	low STR_9
  6883  00110E  0100               	movlb	0	; () banked
  6884  001110  6F82               	movwf	strcpy@from& (0+255),b
  6885  001112  0EFF               	movlw	high STR_9
  6886  001114  0100               	movlb	0	; () banked
  6887  001116  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6888  001118  ECD5  F016         	call	_strcpy	;wreg free
  6889                           
  6890                           ;RTC.c: 77: break;
  6891  00111C  D0C5               	goto	l4635
  6892  00111E                     l4611:
  6893                           
  6894                           ;RTC.c: 79: strcpy(month, "MAR");
  6895  00111E  0EBE               	movlw	low printRTC@month
  6896  001120  0100               	movlb	0	; () banked
  6897  001122  6F80               	movwf	strcpy@to& (0+255),b
  6898  001124  0E00               	movlw	high printRTC@month
  6899  001126  0100               	movlb	0	; () banked
  6900  001128  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6901  00112A  0EE6               	movlw	low STR_10
  6902  00112C  0100               	movlb	0	; () banked
  6903  00112E  6F82               	movwf	strcpy@from& (0+255),b
  6904  001130  0EFF               	movlw	high STR_10
  6905  001132  0100               	movlb	0	; () banked
  6906  001134  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6907  001136  ECD5  F016         	call	_strcpy	;wreg free
  6908                           
  6909                           ;RTC.c: 80: break;
  6910  00113A  D0B6               	goto	l4635
  6911  00113C                     l4613:
  6912                           
  6913                           ;RTC.c: 82: strcpy(month, "APR");
  6914  00113C  0EBE               	movlw	low printRTC@month
  6915  00113E  0100               	movlb	0	; () banked
  6916  001140  6F80               	movwf	strcpy@to& (0+255),b
  6917  001142  0E00               	movlw	high printRTC@month
  6918  001144  0100               	movlb	0	; () banked
  6919  001146  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6920  001148  0EEA               	movlw	low STR_11
  6921  00114A  0100               	movlb	0	; () banked
  6922  00114C  6F82               	movwf	strcpy@from& (0+255),b
  6923  00114E  0EFF               	movlw	high STR_11
  6924  001150  0100               	movlb	0	; () banked
  6925  001152  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6926  001154  ECD5  F016         	call	_strcpy	;wreg free
  6927                           
  6928                           ;RTC.c: 83: break;
  6929  001158  D0A7               	goto	l4635
  6930  00115A                     l4615:
  6931                           
  6932                           ;RTC.c: 85: strcpy(month, "MAY");
  6933  00115A  0EBE               	movlw	low printRTC@month
  6934  00115C  0100               	movlb	0	; () banked
  6935  00115E  6F80               	movwf	strcpy@to& (0+255),b
  6936  001160  0E00               	movlw	high printRTC@month
  6937  001162  0100               	movlb	0	; () banked
  6938  001164  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6939  001166  0EFA               	movlw	low STR_12
  6940  001168  0100               	movlb	0	; () banked
  6941  00116A  6F82               	movwf	strcpy@from& (0+255),b
  6942  00116C  0EFF               	movlw	high STR_12
  6943  00116E  0100               	movlb	0	; () banked
  6944  001170  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6945  001172  ECD5  F016         	call	_strcpy	;wreg free
  6946                           
  6947                           ;RTC.c: 86: break;
  6948  001176  D098               	goto	l4635
  6949  001178                     l4617:
  6950                           
  6951                           ;RTC.c: 88: strcpy(month, "JUN");
  6952  001178  0EBE               	movlw	low printRTC@month
  6953  00117A  0100               	movlb	0	; () banked
  6954  00117C  6F80               	movwf	strcpy@to& (0+255),b
  6955  00117E  0E00               	movlw	high printRTC@month
  6956  001180  0100               	movlb	0	; () banked
  6957  001182  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6958  001184  0EDE               	movlw	low STR_13
  6959  001186  0100               	movlb	0	; () banked
  6960  001188  6F82               	movwf	strcpy@from& (0+255),b
  6961  00118A  0EFF               	movlw	high STR_13
  6962  00118C  0100               	movlb	0	; () banked
  6963  00118E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6964  001190  ECD5  F016         	call	_strcpy	;wreg free
  6965                           
  6966                           ;RTC.c: 89: break;
  6967  001194  D089               	goto	l4635
  6968  001196                     l4619:
  6969                           
  6970                           ;RTC.c: 91: strcpy(month, "JUL");
  6971  001196  0EBE               	movlw	low printRTC@month
  6972  001198  0100               	movlb	0	; () banked
  6973  00119A  6F80               	movwf	strcpy@to& (0+255),b
  6974  00119C  0E00               	movlw	high printRTC@month
  6975  00119E  0100               	movlb	0	; () banked
  6976  0011A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6977  0011A2  0ED6               	movlw	low STR_14
  6978  0011A4  0100               	movlb	0	; () banked
  6979  0011A6  6F82               	movwf	strcpy@from& (0+255),b
  6980  0011A8  0EFF               	movlw	high STR_14
  6981  0011AA  0100               	movlb	0	; () banked
  6982  0011AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6983  0011AE  ECD5  F016         	call	_strcpy	;wreg free
  6984                           
  6985                           ;RTC.c: 92: break;
  6986  0011B2  D07A               	goto	l4635
  6987  0011B4                     l4621:
  6988                           
  6989                           ;RTC.c: 94: strcpy(month, "AUG");
  6990  0011B4  0EBE               	movlw	low printRTC@month
  6991  0011B6  0100               	movlb	0	; () banked
  6992  0011B8  6F80               	movwf	strcpy@to& (0+255),b
  6993  0011BA  0E00               	movlw	high printRTC@month
  6994  0011BC  0100               	movlb	0	; () banked
  6995  0011BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6996  0011C0  0ED2               	movlw	low STR_15
  6997  0011C2  0100               	movlb	0	; () banked
  6998  0011C4  6F82               	movwf	strcpy@from& (0+255),b
  6999  0011C6  0EFF               	movlw	high STR_15
  7000  0011C8  0100               	movlb	0	; () banked
  7001  0011CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7002  0011CC  ECD5  F016         	call	_strcpy	;wreg free
  7003                           
  7004                           ;RTC.c: 95: break;
  7005  0011D0  D06B               	goto	l4635
  7006  0011D2                     l4623:
  7007                           
  7008                           ;RTC.c: 97: strcpy(month, "SEP");
  7009  0011D2  0EBE               	movlw	low printRTC@month
  7010  0011D4  0100               	movlb	0	; () banked
  7011  0011D6  6F80               	movwf	strcpy@to& (0+255),b
  7012  0011D8  0E00               	movlw	high printRTC@month
  7013  0011DA  0100               	movlb	0	; () banked
  7014  0011DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7015  0011DE  0EE2               	movlw	low STR_16
  7016  0011E0  0100               	movlb	0	; () banked
  7017  0011E2  6F82               	movwf	strcpy@from& (0+255),b
  7018  0011E4  0EFF               	movlw	high STR_16
  7019  0011E6  0100               	movlb	0	; () banked
  7020  0011E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7021  0011EA  ECD5  F016         	call	_strcpy	;wreg free
  7022                           
  7023                           ;RTC.c: 98: break;
  7024  0011EE  D05C               	goto	l4635
  7025  0011F0                     l4625:
  7026                           
  7027                           ;RTC.c: 100: strcpy(month, "OCT");
  7028  0011F0  0EBE               	movlw	low printRTC@month
  7029  0011F2  0100               	movlb	0	; () banked
  7030  0011F4  6F80               	movwf	strcpy@to& (0+255),b
  7031  0011F6  0E00               	movlw	high printRTC@month
  7032  0011F8  0100               	movlb	0	; () banked
  7033  0011FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7034  0011FC  0EF2               	movlw	low STR_17
  7035  0011FE  0100               	movlb	0	; () banked
  7036  001200  6F82               	movwf	strcpy@from& (0+255),b
  7037  001202  0EFF               	movlw	high STR_17
  7038  001204  0100               	movlb	0	; () banked
  7039  001206  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7040  001208  ECD5  F016         	call	_strcpy	;wreg free
  7041                           
  7042                           ;RTC.c: 101: break;
  7043  00120C  D04D               	goto	l4635
  7044  00120E                     l4627:
  7045                           
  7046                           ;RTC.c: 103: strcpy(month, "NOV");
  7047  00120E  0EBE               	movlw	low printRTC@month
  7048  001210  0100               	movlb	0	; () banked
  7049  001212  6F80               	movwf	strcpy@to& (0+255),b
  7050  001214  0E00               	movlw	high printRTC@month
  7051  001216  0100               	movlb	0	; () banked
  7052  001218  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7053  00121A  0EF6               	movlw	low STR_18
  7054  00121C  0100               	movlb	0	; () banked
  7055  00121E  6F82               	movwf	strcpy@from& (0+255),b
  7056  001220  0EFF               	movlw	high STR_18
  7057  001222  0100               	movlb	0	; () banked
  7058  001224  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7059  001226  ECD5  F016         	call	_strcpy	;wreg free
  7060                           
  7061                           ;RTC.c: 104: break;
  7062  00122A  D03E               	goto	l4635
  7063  00122C                     l4629:
  7064                           
  7065                           ;RTC.c: 106: strcpy(month, "DEC");
  7066  00122C  0EBE               	movlw	low printRTC@month
  7067  00122E  0100               	movlb	0	; () banked
  7068  001230  6F80               	movwf	strcpy@to& (0+255),b
  7069  001232  0E00               	movlw	high printRTC@month
  7070  001234  0100               	movlb	0	; () banked
  7071  001236  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7072  001238  0ECE               	movlw	low STR_19
  7073  00123A  0100               	movlb	0	; () banked
  7074  00123C  6F82               	movwf	strcpy@from& (0+255),b
  7075  00123E  0EFF               	movlw	high STR_19
  7076  001240  0100               	movlb	0	; () banked
  7077  001242  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7078  001244  ECD5  F016         	call	_strcpy	;wreg free
  7079                           
  7080                           ;RTC.c: 108: }
  7081                           
  7082                           ;RTC.c: 107: break;
  7083  001248  D02F               	goto	l4635
  7084  00124A                     l4633:
  7085  00124A  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7086  00124E  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7087                           
  7088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7089                           ; Switch size 1, requested type "space"
  7090                           ; Number of cases is 1, Range of values is 0 to 0
  7091                           ; switch strategies available:
  7092                           ; Name         Instructions Cycles
  7093                           ; simple_byte            4     3 (average)
  7094                           ;	Chosen strategy is simple_byte
  7095  001252  0100               	movlb	0	; () banked
  7096  001254  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7097  001256  0A00               	xorlw	0	; case 0
  7098  001258  A4D8               	btfss	status,2,c
  7099  00125A  D026               	goto	l4635
  7100                           
  7101                           ; BSR set to: 0
  7102                           ; Switch size 1, requested type "space"
  7103                           ; Number of cases is 12, Range of values is 1 to 12
  7104                           ; switch strategies available:
  7105                           ; Name         Instructions Cycles
  7106                           ; simple_byte           37    19 (average)
  7107                           ;	Chosen strategy is simple_byte
  7108  00125C  0100               	movlb	0	; () banked
  7109  00125E  51AB               	movf	??_printRTC& (0+255),w,b
  7110  001260  0A01               	xorlw	1	; case 1
  7111  001262  B4D8               	btfsc	status,2,c
  7112  001264  D73E               	goto	l4607
  7113  001266  0A03               	xorlw	3	; case 2
  7114  001268  B4D8               	btfsc	status,2,c
  7115  00126A  D74A               	goto	l4609
  7116  00126C  0A01               	xorlw	1	; case 3
  7117  00126E  B4D8               	btfsc	status,2,c
  7118  001270  D756               	goto	l4611
  7119  001272  0A07               	xorlw	7	; case 4
  7120  001274  B4D8               	btfsc	status,2,c
  7121  001276  D762               	goto	l4613
  7122  001278  0A01               	xorlw	1	; case 5
  7123  00127A  B4D8               	btfsc	status,2,c
  7124  00127C  D76E               	goto	l4615
  7125  00127E  0A03               	xorlw	3	; case 6
  7126  001280  B4D8               	btfsc	status,2,c
  7127  001282  D77A               	goto	l4617
  7128  001284  0A01               	xorlw	1	; case 7
  7129  001286  B4D8               	btfsc	status,2,c
  7130  001288  D786               	goto	l4619
  7131  00128A  0A0F               	xorlw	15	; case 8
  7132  00128C  B4D8               	btfsc	status,2,c
  7133  00128E  D792               	goto	l4621
  7134  001290  0A01               	xorlw	1	; case 9
  7135  001292  B4D8               	btfsc	status,2,c
  7136  001294  D79E               	goto	l4623
  7137  001296  0A03               	xorlw	3	; case 10
  7138  001298  B4D8               	btfsc	status,2,c
  7139  00129A  D7AA               	goto	l4625
  7140  00129C  0A01               	xorlw	1	; case 11
  7141  00129E  B4D8               	btfsc	status,2,c
  7142  0012A0  D7B6               	goto	l4627
  7143  0012A2  0A07               	xorlw	7	; case 12
  7144  0012A4  B4D8               	btfsc	status,2,c
  7145  0012A6  D7C2               	goto	l4629
  7146  0012A8                     l4635:
  7147                           
  7148                           ;RTC.c: 109: lcdInst(0b10000000);;
  7149  0012A8  0E80               	movlw	128
  7150  0012AA  EC40  F019         	call	_lcdInst
  7151                           
  7152                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7153  0012AE  0EAC               	movlw	low STR_21
  7154  0012B0  0100               	movlb	0	; () banked
  7155  0012B2  6F8E               	movwf	printf@f& (0+255),b
  7156  0012B4  0EFD               	movlw	high STR_21
  7157  0012B6  0100               	movlb	0	; () banked
  7158  0012B8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7159  0012BA  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7160  0012BE  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7161  0012C2  0EBE               	movlw	low printRTC@month
  7162  0012C4  0100               	movlb	0	; () banked
  7163  0012C6  6F92               	movwf	(?_printf+4)& (0+255),b
  7164  0012C8  0E00               	movlw	high printRTC@month
  7165  0012CA  0100               	movlb	0	; () banked
  7166  0012CC  6F93               	movwf	(?_printf+5)& (0+255),b
  7167  0012CE  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7168  0012D2  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7169  0012D6  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7170  0012DA  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7171  0012DE  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7172  0012E2  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7173  0012E6  EC3E  F004         	call	_printf	;wreg free
  7174  0012EA  0012               	return		;funcret
  7175  0012EC                     __end_of_printRTC:
  7176                           	opt stack 0
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           intcon2	equ	0xFF1
  7185                           intcon3	equ	0xFF0
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           postdec1	equ	0xFE5
  7189                           fsr1l	equ	0xFE1
  7190                           indf2	equ	0xFDF
  7191                           postinc2	equ	0xFDE
  7192                           postdec2	equ	0xFDD
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _strcpy *****************
  7198 ;; Defined at:
  7199 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7202 ;;		 -> printRTC@month(4), UI@month(4), 
  7203 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7204 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7205 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7206 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7207 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7208 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7209 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7210 ;;		 -> STR_8(4), 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7213 ;;		 -> printRTC@month(4), UI@month(4), 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  2    0[BANK0 ] PTR unsigned char 
  7216 ;; Registers used:
  7217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;Total ram usage:        6 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    7
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_UI
  7234 ;;		_printRTC
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text25
  7239  002DAA                     __ptext25:
  7240                           	opt stack 0
  7241  002DAA                     _strcpy:
  7242                           	opt stack 20
  7243                           
  7244                           ;incstack = 0
  7245  002DAA  C080  F084         	movff	strcpy@to,strcpy@cp
  7246  002DAE  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7247  002DB2  D006               	goto	l4353
  7248  002DB4                     l4351:
  7249  002DB4  0100               	movlb	0	; () banked
  7250  002DB6  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7251  002DB8  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7252  002DBA  0100               	movlb	0	; () banked
  7253  002DBC  4B82               	infsnz	strcpy@from& (0+255),f,b
  7254  002DBE  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7255  002DC0                     l4353:
  7256  002DC0  C082  FFF6         	movff	strcpy@from,tblptrl
  7257  002DC4  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7258  002DC8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7259  002DC8  6AF8               	clrf	tblptru,c
  7260  002DCA                     	endif
  7261  002DCA                     	if	0	;tblptru may be non-zero
  7262  002DCA                     	endif
  7263  002DCA  C084  FFD9         	movff	strcpy@cp,fsr2l
  7264  002DCE  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7265  002DD2  0008               	tblrd		*
  7266  002DD4  CFF5 FFDF          	movff	tablat,indf2
  7267  002DD8  50DF               	movf	indf2,w,c
  7268  002DDA  B4D8               	btfsc	status,2,c
  7269  002DDC  0012               	return	
  7270  002DDE  D7EA               	goto	l4351
  7271  002DE0                     __end_of_strcpy:
  7272                           	opt stack 0
  7273                           tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           intcon	equ	0xFF2
  7280                           intcon2	equ	0xFF1
  7281                           intcon3	equ	0xFF0
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1l	equ	0xFE1
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _getRTC *****************
  7294 ;; Defined at:
  7295 ;;		line 44 in file "RTC.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  i               2    3[BANK0 ] int 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      void 
  7302 ;; Registers used:
  7303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;Total ram usage:        2 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    9
  7316 ;; This function calls:
  7317 ;;		_I2C_Master_Read
  7318 ;;		_I2C_Master_Start
  7319 ;;		_I2C_Master_Stop
  7320 ;;		_I2C_Master_Write
  7321 ;; This function is called by:
  7322 ;;		_printRTC
  7323 ;;		_initSortTimer
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text26
  7328  002752                     __ptext26:
  7329                           	opt stack 0
  7330  002752                     _getRTC:
  7331                           	opt stack 18
  7332                           
  7333                           ;RTC.c: 48: I2C_Master_Start();
  7334                           
  7335                           ;incstack = 0
  7336  002752  EC66  F019         	call	_I2C_Master_Start	;wreg free
  7337                           
  7338                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7339  002756  0E00               	movlw	0
  7340  002758  0100               	movlb	0	; () banked
  7341  00275A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7342  00275C  0ED0               	movlw	208
  7343  00275E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7344  002760  EC54  F019         	call	_I2C_Master_Write	;wreg free
  7345                           
  7346                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7347  002764  0E00               	movlw	0
  7348  002766  0100               	movlb	0	; () banked
  7349  002768  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7350  00276A  0E00               	movlw	0
  7351  00276C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7352  00276E  EC54  F019         	call	_I2C_Master_Write	;wreg free
  7353                           
  7354                           ;RTC.c: 51: I2C_Master_Stop();
  7355  002772  EC62  F019         	call	_I2C_Master_Stop	;wreg free
  7356                           
  7357                           ;RTC.c: 54: I2C_Master_Start();
  7358  002776  EC66  F019         	call	_I2C_Master_Start	;wreg free
  7359                           
  7360                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7361  00277A  0E00               	movlw	0
  7362  00277C  0100               	movlb	0	; () banked
  7363  00277E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7364  002780  0ED1               	movlw	209
  7365  002782  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7366  002784  EC54  F019         	call	_I2C_Master_Write	;wreg free
  7367                           
  7368                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7369  002788  0E00               	movlw	0
  7370  00278A  0100               	movlb	0	; () banked
  7371  00278C  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7372  00278E  0E00               	movlw	0
  7373  002790  6F83               	movwf	getRTC@i& (0+255),b
  7374  002792                     l4359:
  7375                           
  7376                           ; BSR set to: 0
  7377  002792  0100               	movlb	0	; () banked
  7378  002794  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7379  002796  D008               	goto	l4363
  7380  002798  0100               	movlb	0	; () banked
  7381  00279A  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7382  00279C  E115               	bnz	l4369
  7383  00279E  0E06               	movlw	6
  7384  0027A0  0100               	movlb	0	; () banked
  7385  0027A2  5D83               	subwf	getRTC@i& (0+255),w,b
  7386  0027A4  B0D8               	btfsc	status,0,c
  7387  0027A6  D010               	goto	l4369
  7388  0027A8                     l4363:
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7392  0027A8  0E5B               	movlw	low _time
  7393  0027AA  0100               	movlb	0	; () banked
  7394  0027AC  2583               	addwf	getRTC@i& (0+255),w,b
  7395  0027AE  6ED9               	movwf	fsr2l,c
  7396  0027B0  0E00               	movlw	high _time
  7397  0027B2  0100               	movlb	0	; () banked
  7398  0027B4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7399  0027B6  6EDA               	movwf	fsr2h,c
  7400  0027B8  0E01               	movlw	1
  7401  0027BA  ECFC  F017         	call	_I2C_Master_Read
  7402  0027BE  6EDF               	movwf	indf2,c
  7403  0027C0  0100               	movlb	0	; () banked
  7404  0027C2  4B83               	infsnz	getRTC@i& (0+255),f,b
  7405  0027C4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7406  0027C6  D7E5               	goto	l4359
  7407  0027C8                     l4369:
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;RTC.c: 58: }
  7411                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7412  0027C8  0E00               	movlw	0
  7413  0027CA  ECFC  F017         	call	_I2C_Master_Read
  7414  0027CE  6E61               	movwf	_time+6,c
  7415                           
  7416                           ;RTC.c: 60: I2C_Master_Stop();
  7417  0027D0  EC62  F019         	call	_I2C_Master_Stop	;wreg free
  7418  0027D4  0012               	return		;funcret
  7419  0027D6                     __end_of_getRTC:
  7420                           	opt stack 0
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           intcon	equ	0xFF2
  7428                           intcon2	equ	0xFF1
  7429                           intcon3	equ	0xFF0
  7430                           postinc0	equ	0xFEE
  7431                           wreg	equ	0xFE8
  7432                           postdec1	equ	0xFE5
  7433                           fsr1l	equ	0xFE1
  7434                           indf2	equ	0xFDF
  7435                           postinc2	equ	0xFDE
  7436                           postdec2	equ	0xFDD
  7437                           fsr2h	equ	0xFDA
  7438                           fsr2l	equ	0xFD9
  7439                           status	equ	0xFD8
  7440                           
  7441 ;; *************** function _I2C_Master_Write *****************
  7442 ;; Defined at:
  7443 ;;		line 49 in file "I2C.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  d               2    1[BANK0 ] unsigned int 
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;		None
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;Total ram usage:        2 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    8
  7464 ;; This function calls:
  7465 ;;		_I2C_Master_Wait
  7466 ;; This function is called by:
  7467 ;;		_loadRTC
  7468 ;;		_getRTC
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text27
  7473  0032A8                     __ptext27:
  7474                           	opt stack 0
  7475  0032A8                     _I2C_Master_Write:
  7476                           	opt stack 18
  7477                           
  7478                           ;I2C.c: 51: I2C_Master_Wait();
  7479                           
  7480                           ;incstack = 0
  7481  0032A8  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7482                           
  7483                           ;I2C.c: 52: SSPBUF = d;
  7484  0032AC  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7485  0032B0  0012               	return		;funcret
  7486  0032B2                     __end_of_I2C_Master_Write:
  7487                           	opt stack 0
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           intcon2	equ	0xFF1
  7496                           intcon3	equ	0xFF0
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           fsr1l	equ	0xFE1
  7501                           indf2	equ	0xFDF
  7502                           postinc2	equ	0xFDE
  7503                           postdec2	equ	0xFDD
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           
  7508 ;; *************** function _I2C_Master_Stop *****************
  7509 ;; Defined at:
  7510 ;;		line 43 in file "I2C.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;		None
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;Total ram usage:        0 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    8
  7531 ;; This function calls:
  7532 ;;		_I2C_Master_Wait
  7533 ;; This function is called by:
  7534 ;;		_loadRTC
  7535 ;;		_getRTC
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text28
  7540  0032C4                     __ptext28:
  7541                           	opt stack 0
  7542  0032C4                     _I2C_Master_Stop:
  7543                           	opt stack 18
  7544                           
  7545                           ;I2C.c: 45: I2C_Master_Wait();
  7546                           
  7547                           ;incstack = 0
  7548  0032C4  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7549                           
  7550                           ;I2C.c: 46: PEN = 1;
  7551  0032C8  84C5               	bsf	4037,2,c	;volatile
  7552  0032CA  0012               	return		;funcret
  7553  0032CC                     __end_of_I2C_Master_Stop:
  7554                           	opt stack 0
  7555                           tblptru	equ	0xFF8
  7556                           tblptrh	equ	0xFF7
  7557                           tblptrl	equ	0xFF6
  7558                           tablat	equ	0xFF5
  7559                           prodh	equ	0xFF4
  7560                           prodl	equ	0xFF3
  7561                           intcon	equ	0xFF2
  7562                           intcon2	equ	0xFF1
  7563                           intcon3	equ	0xFF0
  7564                           postinc0	equ	0xFEE
  7565                           wreg	equ	0xFE8
  7566                           postdec1	equ	0xFE5
  7567                           fsr1l	equ	0xFE1
  7568                           indf2	equ	0xFDF
  7569                           postinc2	equ	0xFDE
  7570                           postdec2	equ	0xFDD
  7571                           fsr2h	equ	0xFDA
  7572                           fsr2l	equ	0xFD9
  7573                           status	equ	0xFD8
  7574                           
  7575 ;; *************** function _I2C_Master_Start *****************
  7576 ;; Defined at:
  7577 ;;		line 31 in file "I2C.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, status,0, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;Total ram usage:        0 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    8
  7598 ;; This function calls:
  7599 ;;		_I2C_Master_Wait
  7600 ;; This function is called by:
  7601 ;;		_loadRTC
  7602 ;;		_getRTC
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text29
  7607  0032CC                     __ptext29:
  7608                           	opt stack 0
  7609  0032CC                     _I2C_Master_Start:
  7610                           	opt stack 18
  7611                           
  7612                           ;I2C.c: 33: I2C_Master_Wait();
  7613                           
  7614                           ;incstack = 0
  7615  0032CC  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7616                           
  7617                           ;I2C.c: 34: SEN = 1;
  7618  0032D0  80C5               	bsf	4037,0,c	;volatile
  7619  0032D2  0012               	return		;funcret
  7620  0032D4                     __end_of_I2C_Master_Start:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon2	equ	0xFF1
  7630                           intcon3	equ	0xFF0
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           postdec1	equ	0xFE5
  7634                           fsr1l	equ	0xFE1
  7635                           indf2	equ	0xFDF
  7636                           postinc2	equ	0xFDE
  7637                           postdec2	equ	0xFDD
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function _I2C_Master_Read *****************
  7643 ;; Defined at:
  7644 ;;		line 55 in file "I2C.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  a               1    wreg     unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  a               1    1[BANK0 ] unsigned char 
  7649 ;;  temp            1    2[BANK0 ] unsigned char 
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      unsigned char 
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0, cstack
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;Total ram usage:        2 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    8
  7666 ;; This function calls:
  7667 ;;		_I2C_Master_Wait
  7668 ;; This function is called by:
  7669 ;;		_getRTC
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text30
  7674  002FF8                     __ptext30:
  7675                           	opt stack 0
  7676  002FF8                     _I2C_Master_Read:
  7677                           	opt stack 18
  7678                           
  7679                           ;incstack = 0
  7680                           ;I2C_Master_Read@a stored from wreg
  7681  002FF8  0100               	movlb	0	; () banked
  7682  002FFA  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7683                           
  7684                           ;I2C.c: 57: unsigned char temp;
  7685                           ;I2C.c: 58: I2C_Master_Wait();
  7686  002FFC  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7687                           
  7688                           ;I2C.c: 59: RCEN = 1;
  7689  003000  86C5               	bsf	4037,3,c	;volatile
  7690                           
  7691                           ;I2C.c: 60: I2C_Master_Wait();
  7692  003002  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7693                           
  7694                           ;I2C.c: 61: temp = SSPBUF;
  7695  003006  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7696                           
  7697                           ;I2C.c: 62: I2C_Master_Wait();
  7698  00300A  EC1C  F019         	call	_I2C_Master_Wait	;wreg free
  7699                           
  7700                           ;I2C.c: 63: ACKDT = (a)?0:1;
  7701  00300E  0100               	movlb	0	; () banked
  7702  003010  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7703  003012  0100               	movlb	0	; () banked
  7704  003014  A4D8               	btfss	status,2,c
  7705  003016  D002               	goto	u2590
  7706  003018  8AC5               	bsf	4037,5,c	;volatile
  7707  00301A  D001               	goto	l4049
  7708  00301C                     u2590:
  7709  00301C  9AC5               	bcf	4037,5,c	;volatile
  7710  00301E                     l4049:
  7711                           
  7712                           ;I2C.c: 64: ACKEN = 1;
  7713  00301E  88C5               	bsf	4037,4,c	;volatile
  7714                           
  7715                           ;I2C.c: 65: return temp;
  7716  003020  0100               	movlb	0	; () banked
  7717  003022  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7718  003024  0012               	return	
  7719  003026                     __end_of_I2C_Master_Read:
  7720                           	opt stack 0
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon2	equ	0xFF1
  7729                           intcon3	equ	0xFF0
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           postdec1	equ	0xFE5
  7733                           fsr1l	equ	0xFE1
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _I2C_Master_Wait *****************
  7742 ;; Defined at:
  7743 ;;		line 26 in file "I2C.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;		None
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      void 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;Total ram usage:        1 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    7
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_I2C_Master_Start
  7768 ;;		_I2C_Master_Stop
  7769 ;;		_I2C_Master_Write
  7770 ;;		_I2C_Master_Read
  7771 ;;		_I2C_Master_RepeatedStart
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           	psect	text31
  7776  003238                     __ptext31:
  7777                           	opt stack 0
  7778  003238                     _I2C_Master_Wait:
  7779                           	opt stack 18
  7780  003238                     l68:
  7781  003238  B4C7               	btfsc	4039,2,c	;volatile
  7782  00323A  D7FE               	goto	l68
  7783  00323C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7784  003240  0E1F               	movlw	31
  7785  003242  0100               	movlb	0	; () banked
  7786  003244  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7787  003246  B4D8               	btfsc	status,2,c
  7788  003248  0012               	return	
  7789  00324A  D7F6               	goto	l68
  7790  00324C                     __end_of_I2C_Master_Wait:
  7791                           	opt stack 0
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           intcon2	equ	0xFF1
  7800                           intcon3	equ	0xFF0
  7801                           postinc0	equ	0xFEE
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           fsr1l	equ	0xFE1
  7805                           indf2	equ	0xFDF
  7806                           postinc2	equ	0xFDE
  7807                           postdec2	equ	0xFDD
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function _change_state_to_menu_22 *****************
  7813 ;; Defined at:
  7814 ;;		line 494 in file "UI.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;		None
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;		None
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  1    wreg      void 
  7821 ;; Registers used:
  7822 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:        0 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:   10
  7835 ;; This function calls:
  7836 ;;		_lcdInst
  7837 ;;		_printf
  7838 ;; This function is called by:
  7839 ;;		_UI
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           	psect	text32
  7844  002D3A                     __ptext32:
  7845                           	opt stack 0
  7846  002D3A                     _change_state_to_menu_22:
  7847                           	opt stack 19
  7848                           
  7849                           ;UI.c: 495: cur_state = 22;
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;incstack = 0
  7853  002D3A  0E00               	movlw	0
  7854  002D3C  0100               	movlb	0	; () banked
  7855  002D3E  6FDC               	movwf	(_cur_state+1)& (0+255),b
  7856  002D40  0E16               	movlw	22
  7857  002D42  6FDB               	movwf	_cur_state& (0+255),b
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;UI.c: 497: lcdInst(0b10000000);;
  7861  002D44  0E80               	movlw	128
  7862  002D46  EC40  F019         	call	_lcdInst
  7863                           
  7864                           ;UI.c: 498: printf("2. SORT        <");
  7865  002D4A  0E35               	movlw	low STR_34
  7866  002D4C  0100               	movlb	0	; () banked
  7867  002D4E  6F8E               	movwf	printf@f& (0+255),b
  7868  002D50  0EFF               	movlw	high STR_34
  7869  002D52  0100               	movlb	0	; () banked
  7870  002D54  6F8F               	movwf	(printf@f+1)& (0+255),b
  7871  002D56  EC3E  F004         	call	_printf	;wreg free
  7872                           
  7873                           ;UI.c: 499: lcdInst(0b11000000);;
  7874  002D5A  0EC0               	movlw	192
  7875  002D5C  EC40  F019         	call	_lcdInst
  7876                           
  7877                           ;UI.c: 500: printf("3. LOGS         ");
  7878  002D60  0E69               	movlw	low STR_36
  7879  002D62  0100               	movlb	0	; () banked
  7880  002D64  6F8E               	movwf	printf@f& (0+255),b
  7881  002D66  0EFE               	movlw	high STR_36
  7882  002D68  0100               	movlb	0	; () banked
  7883  002D6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7884  002D6C  EC3E  F004         	call	_printf	;wreg free
  7885  002D70  0012               	return		;funcret
  7886  002D72                     __end_of_change_state_to_menu_22:
  7887                           	opt stack 0
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon	equ	0xFF2
  7895                           intcon2	equ	0xFF1
  7896                           intcon3	equ	0xFF0
  7897                           postinc0	equ	0xFEE
  7898                           wreg	equ	0xFE8
  7899                           postdec1	equ	0xFE5
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _change_state_to_menu_12 *****************
  7909 ;; Defined at:
  7910 ;;		line 486 in file "UI.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;		None
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      void 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;Total ram usage:        0 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:   10
  7931 ;; This function calls:
  7932 ;;		_lcdInst
  7933 ;;		_printf
  7934 ;; This function is called by:
  7935 ;;		_UI
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text33
  7940  002D72                     __ptext33:
  7941                           	opt stack 0
  7942  002D72                     _change_state_to_menu_12:
  7943                           	opt stack 19
  7944                           
  7945                           ;UI.c: 487: cur_state = 12;
  7946                           
  7947                           ;incstack = 0
  7948  002D72  0E00               	movlw	0
  7949  002D74  0100               	movlb	0	; () banked
  7950  002D76  6FDC               	movwf	(_cur_state+1)& (0+255),b
  7951  002D78  0E0C               	movlw	12
  7952  002D7A  6FDB               	movwf	_cur_state& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;UI.c: 489: lcdInst(0b10000000);;
  7956  002D7C  0E80               	movlw	128
  7957  002D7E  EC40  F019         	call	_lcdInst
  7958                           
  7959                           ;UI.c: 490: printf("1. DATE/TIME    ");
  7960  002D82  0E8B               	movlw	low STR_33
  7961  002D84  0100               	movlb	0	; () banked
  7962  002D86  6F8E               	movwf	printf@f& (0+255),b
  7963  002D88  0EFE               	movlw	high STR_33
  7964  002D8A  0100               	movlb	0	; () banked
  7965  002D8C  6F8F               	movwf	(printf@f+1)& (0+255),b
  7966  002D8E  EC3E  F004         	call	_printf	;wreg free
  7967                           
  7968                           ;UI.c: 491: lcdInst(0b11000000);;
  7969  002D92  0EC0               	movlw	192
  7970  002D94  EC40  F019         	call	_lcdInst
  7971                           
  7972                           ;UI.c: 492: printf("2. SORT        <");
  7973  002D98  0E35               	movlw	low STR_34
  7974  002D9A  0100               	movlb	0	; () banked
  7975  002D9C  6F8E               	movwf	printf@f& (0+255),b
  7976  002D9E  0EFF               	movlw	high STR_34
  7977  002DA0  0100               	movlb	0	; () banked
  7978  002DA2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7979  002DA4  EC3E  F004         	call	_printf	;wreg free
  7980  002DA8  0012               	return		;funcret
  7981  002DAA                     __end_of_change_state_to_menu_12:
  7982                           	opt stack 0
  7983                           tblptru	equ	0xFF8
  7984                           tblptrh	equ	0xFF7
  7985                           tblptrl	equ	0xFF6
  7986                           tablat	equ	0xFF5
  7987                           prodh	equ	0xFF4
  7988                           prodl	equ	0xFF3
  7989                           intcon	equ	0xFF2
  7990                           intcon2	equ	0xFF1
  7991                           intcon3	equ	0xFF0
  7992                           postinc0	equ	0xFEE
  7993                           wreg	equ	0xFE8
  7994                           postdec1	equ	0xFE5
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _printf *****************
  8004 ;; Defined at:
  8005 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8008 ;;		 -> STR_67(7), STR_66(9), STR_65(20), STR_64(11), 
  8009 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
  8010 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
  8011 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
  8012 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
  8013 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
  8014 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
  8015 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
  8016 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
  8017 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
  8018 ;;		 -> STR_2(21), STR_1(17), 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  tmpval          4    0        struct .
  8021 ;;  width           2   41[BANK0 ] int 
  8022 ;;  val             2   37[BANK0 ] unsigned int 
  8023 ;;  len             2   35[BANK0 ] unsigned int 
  8024 ;;  ap              2   33[BANK0 ] PTR void [1]
  8025 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8026 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
  8027 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
  8028 ;;  c               1   40[BANK0 ] char 
  8029 ;;  flag            1   39[BANK0 ] unsigned char 
  8030 ;;  prec            1   30[BANK0 ] char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  2   14[BANK0 ] int 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8040 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:       29 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    9
  8047 ;; This function calls:
  8048 ;;		___lwdiv
  8049 ;;		___lwmod
  8050 ;;		___wmul
  8051 ;;		_isdigit
  8052 ;;		_putch
  8053 ;; This function is called by:
  8054 ;;		_UI
  8055 ;;		_change_state_to_menu_start
  8056 ;;		_change_state_to_menu_12
  8057 ;;		_change_state_to_menu_22
  8058 ;;		_printRTC
  8059 ;;		_EEPROM_write
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text34
  8064  00087C                     __ptext34:
  8065                           	opt stack 0
  8066  00087C                     _printf:
  8067                           	opt stack 19
  8068                           
  8069                           ;doprnt.c: 466: va_list ap;
  8070                           ;doprnt.c: 499: signed char c;
  8071                           ;doprnt.c: 501: int width;
  8072                           ;doprnt.c: 506: signed char prec;
  8073                           ;doprnt.c: 508: unsigned char flag;
  8074                           ;doprnt.c: 523: union {
  8075                           ;doprnt.c: 524: unsigned long vd;
  8076                           ;doprnt.c: 525: double integ;
  8077                           ;doprnt.c: 526: } tmpval;
  8078                           ;doprnt.c: 528: unsigned int val;
  8079                           ;doprnt.c: 529: unsigned len;
  8080                           ;doprnt.c: 530: const char * cp;
  8081                           ;doprnt.c: 533: *ap = __va_start();
  8082                           
  8083                           ;incstack = 0
  8084  00087C  0E90               	movlw	low (?_printf+2)
  8085  00087E  0100               	movlb	0	; () banked
  8086  000880  6FA1               	movwf	printf@ap& (0+255),b
  8087  000882  0E00               	movlw	high (?_printf+2)
  8088  000884  0100               	movlb	0	; () banked
  8089  000886  6FA2               	movwf	(printf@ap+1)& (0+255),b
  8090                           
  8091                           ;doprnt.c: 536: while(c = *f++) {
  8092  000888  D205               	goto	l4347
  8093  00088A                     l4217:
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;doprnt.c: 538: if(c != '%')
  8097  00088A  0E25               	movlw	37
  8098  00088C  0100               	movlb	0	; () banked
  8099  00088E  19A8               	xorwf	printf@c& (0+255),w,b
  8100  000890  B4D8               	btfsc	status,2,c
  8101  000892  D005               	goto	l4221
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;doprnt.c: 540: {
  8105                           ;doprnt.c: 541: (putch(c) );
  8106  000894  0100               	movlb	0	; () banked
  8107  000896  51A8               	movf	printf@c& (0+255),w,b
  8108  000898  EC38  F019         	call	_putch
  8109                           
  8110                           ;doprnt.c: 542: continue;
  8111  00089C  D1FB               	goto	l4347
  8112  00089E                     l4221:
  8113                           
  8114                           ;doprnt.c: 543: }
  8115                           ;doprnt.c: 546: width = 0;
  8116  00089E  0E00               	movlw	0
  8117  0008A0  0100               	movlb	0	; () banked
  8118  0008A2  6FAA               	movwf	(printf@width+1)& (0+255),b
  8119  0008A4  0E00               	movlw	0
  8120  0008A6  6FA9               	movwf	printf@width& (0+255),b
  8121                           
  8122                           ;doprnt.c: 548: flag = 0;
  8123  0008A8  0E00               	movlw	0
  8124  0008AA  0100               	movlb	0	; () banked
  8125  0008AC  6FA7               	movwf	printf@flag& (0+255),b
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;doprnt.c: 551: switch(*f) {
  8129                           
  8130                           ;doprnt.c: 550: for(;;) {
  8131  0008AE  D005               	goto	l4227
  8132  0008B0                     l4223:
  8133                           
  8134                           ;doprnt.c: 580: flag |= 0x04;
  8135  0008B0  0100               	movlb	0	; () banked
  8136  0008B2  85A7               	bsf	printf@flag& (0+255),2,b
  8137                           
  8138                           ;doprnt.c: 581: f++;
  8139  0008B4  0100               	movlb	0	; () banked
  8140  0008B6  4B8E               	infsnz	printf@f& (0+255),f,b
  8141  0008B8  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8142  0008BA                     l4227:
  8143  0008BA  C08E  FFF6         	movff	printf@f,tblptrl
  8144  0008BE  C08F  FFF7         	movff	printf@f+1,tblptrh
  8145  0008C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8146  0008C2  6AF8               	clrf	tblptru,c
  8147  0008C4                     	endif
  8148  0008C4                     	if	0	;tblptru may be non-zero
  8149  0008C4                     	endif
  8150  0008C4  0008               	tblrd		*
  8151  0008C6  50F5               	movf	tablat,w,c
  8152                           
  8153                           ; Switch size 1, requested type "space"
  8154                           ; Number of cases is 1, Range of values is 48 to 48
  8155                           ; switch strategies available:
  8156                           ; Name         Instructions Cycles
  8157                           ; simple_byte            4     3 (average)
  8158                           ;	Chosen strategy is simple_byte
  8159  0008C8  0A30               	xorlw	48	; case 48
  8160  0008CA  B4D8               	btfsc	status,2,c
  8161  0008CC  D7F1               	goto	l4223
  8162                           
  8163                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8164                           
  8165                           ;doprnt.c: 586: }
  8166                           
  8167                           ;doprnt.c: 585: break;
  8168  0008CE  C08E  FFF6         	movff	printf@f,tblptrl
  8169  0008D2  C08F  FFF7         	movff	printf@f+1,tblptrh
  8170  0008D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8171  0008D6  6AF8               	clrf	tblptru,c
  8172  0008D8                     	endif
  8173  0008D8                     	if	0	;tblptru may be non-zero
  8174  0008D8                     	endif
  8175  0008D8  0008               	tblrd		*
  8176  0008DA  50F5               	movf	tablat,w,c
  8177  0008DC  EC56  F018         	call	_isdigit
  8178  0008E0  A0D8               	btfss	status,0,c
  8179  0008E2  D0D2               	goto	l4275
  8180                           
  8181                           ;doprnt.c: 598: width = 0;
  8182  0008E4  0E00               	movlw	0
  8183  0008E6  0100               	movlb	0	; () banked
  8184  0008E8  6FAA               	movwf	(printf@width+1)& (0+255),b
  8185  0008EA  0E00               	movlw	0
  8186  0008EC  6FA9               	movwf	printf@width& (0+255),b
  8187  0008EE                     l4233:
  8188                           
  8189                           ;doprnt.c: 600: width *= 10;
  8190  0008EE  C0A9  F080         	movff	printf@width,___wmul@multiplier
  8191  0008F2  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  8192  0008F6  0E00               	movlw	0
  8193  0008F8  0100               	movlb	0	; () banked
  8194  0008FA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8195  0008FC  0E0A               	movlw	10
  8196  0008FE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8197  000900  ECF0  F016         	call	___wmul	;wreg free
  8198  000904  C080  F0A9         	movff	?___wmul,printf@width
  8199  000908  C081  F0AA         	movff	?___wmul+1,printf@width+1
  8200                           
  8201                           ;doprnt.c: 601: width += *f++ - '0';
  8202  00090C  0ED0               	movlw	208
  8203  00090E  0100               	movlb	0	; () banked
  8204  000910  6F9A               	movwf	??_printf& (0+255),b
  8205  000912  0EFF               	movlw	255
  8206  000914  0100               	movlb	0	; () banked
  8207  000916  6F9B               	movwf	(??_printf+1)& (0+255),b
  8208  000918  C08E  FFF6         	movff	printf@f,tblptrl
  8209  00091C  C08F  FFF7         	movff	printf@f+1,tblptrh
  8210  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8211  000920  6AF8               	clrf	tblptru,c
  8212  000922                     	endif
  8213  000922                     	if	0	;tblptru may be non-zero
  8214  000922                     	endif
  8215  000922  0008               	tblrd		*
  8216  000924  50F5               	movf	tablat,w,c
  8217  000926  0100               	movlb	0	; () banked
  8218  000928  6F9C               	movwf	(??_printf+2)& (0+255),b
  8219  00092A  6B9D               	clrf	(??_printf+3)& (0+255),b
  8220  00092C  0100               	movlb	0	; () banked
  8221  00092E  519A               	movf	??_printf& (0+255),w,b
  8222  000930  0100               	movlb	0	; () banked
  8223  000932  279C               	addwf	(??_printf+2)& (0+255),f,b
  8224  000934  0100               	movlb	0	; () banked
  8225  000936  519B               	movf	(??_printf+1)& (0+255),w,b
  8226  000938  0100               	movlb	0	; () banked
  8227  00093A  239D               	addwfc	(??_printf+3)& (0+255),f,b
  8228  00093C  0100               	movlb	0	; () banked
  8229  00093E  519C               	movf	(??_printf+2)& (0+255),w,b
  8230  000940  0100               	movlb	0	; () banked
  8231  000942  27A9               	addwf	printf@width& (0+255),f,b
  8232  000944  0100               	movlb	0	; () banked
  8233  000946  519D               	movf	(??_printf+3)& (0+255),w,b
  8234  000948  0100               	movlb	0	; () banked
  8235  00094A  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  8236                           
  8237                           ; BSR set to: 0
  8238  00094C  0100               	movlb	0	; () banked
  8239  00094E  4B8E               	infsnz	printf@f& (0+255),f,b
  8240  000950  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8244  000952  C08E  FFF6         	movff	printf@f,tblptrl
  8245  000956  C08F  FFF7         	movff	printf@f+1,tblptrh
  8246  00095A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8247  00095A  6AF8               	clrf	tblptru,c
  8248  00095C                     	endif
  8249  00095C                     	if	0	;tblptru may be non-zero
  8250  00095C                     	endif
  8251  00095C  0008               	tblrd		*
  8252  00095E  50F5               	movf	tablat,w,c
  8253  000960  EC56  F018         	call	_isdigit
  8254  000964  A0D8               	btfss	status,0,c
  8255  000966  D090               	goto	l4275
  8256  000968  D7C2               	goto	l4233
  8257  00096A                     l4241:
  8258                           
  8259                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8260  00096A  C0A1  FFD9         	movff	printf@ap,fsr2l
  8261  00096E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8262  000972  CFDE F09F          	movff	postinc2,printf@cp
  8263  000976  CFDD F0A0          	movff	postdec2,printf@cp+1
  8264  00097A  0E02               	movlw	2
  8265  00097C  0100               	movlb	0	; () banked
  8266  00097E  27A1               	addwf	printf@ap& (0+255),f,b
  8267  000980  0E00               	movlw	0
  8268  000982  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;doprnt.c: 740: if(!cp)
  8272  000984  0100               	movlb	0	; () banked
  8273  000986  519F               	movf	printf@cp& (0+255),w,b
  8274  000988  0100               	movlb	0	; () banked
  8275  00098A  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
  8276  00098C  A4D8               	btfss	status,2,c
  8277  00098E  D006               	goto	l4249
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;doprnt.c: 741: cp = "(null)";
  8281  000990  0EB5               	movlw	low STR_68
  8282  000992  0100               	movlb	0	; () banked
  8283  000994  6F9F               	movwf	printf@cp& (0+255),b
  8284  000996  0EFF               	movlw	high STR_68
  8285  000998  0100               	movlb	0	; () banked
  8286  00099A  6FA0               	movwf	(printf@cp+1)& (0+255),b
  8287  00099C                     l4249:
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;doprnt.c: 745: len = 0;
  8291  00099C  0E00               	movlw	0
  8292  00099E  0100               	movlb	0	; () banked
  8293  0009A0  6FA4               	movwf	(printf@len+1)& (0+255),b
  8294  0009A2  0E00               	movlw	0
  8295  0009A4  6FA3               	movwf	printf@len& (0+255),b
  8296                           
  8297                           ;doprnt.c: 746: while(cp[len])
  8298  0009A6  D003               	goto	l4253
  8299  0009A8                     l4251:
  8300                           
  8301                           ;doprnt.c: 747: len++;
  8302  0009A8  0100               	movlb	0	; () banked
  8303  0009AA  4BA3               	infsnz	printf@len& (0+255),f,b
  8304  0009AC  2BA4               	incf	(printf@len+1)& (0+255),f,b
  8305  0009AE                     l4253:
  8306                           
  8307                           ; BSR set to: 0
  8308  0009AE  0100               	movlb	0	; () banked
  8309  0009B0  51A3               	movf	printf@len& (0+255),w,b
  8310  0009B2  0100               	movlb	0	; () banked
  8311  0009B4  259F               	addwf	printf@cp& (0+255),w,b
  8312  0009B6  0100               	movlb	0	; () banked
  8313  0009B8  6F9A               	movwf	??_printf& (0+255),b
  8314  0009BA  0100               	movlb	0	; () banked
  8315  0009BC  51A4               	movf	(printf@len+1)& (0+255),w,b
  8316  0009BE  0100               	movlb	0	; () banked
  8317  0009C0  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
  8318  0009C2  0100               	movlb	0	; () banked
  8319  0009C4  6F9B               	movwf	(??_printf+1)& (0+255),b
  8320  0009C6  C09A  FFF6         	movff	??_printf,tblptrl
  8321  0009CA  C09B  FFF7         	movff	??_printf+1,tblptrh
  8322  0009CE  0E00               	movlw	low (__mediumconst shr (0+16))
  8323  0009D0  6EF8               	movwf	tblptru,c
  8324  0009D2  0E0F               	movlw	(high __ramtop+-1)
  8325  0009D4  64F7               	cpfsgt	tblptrh,c
  8326  0009D6  D003               	bra	u2847
  8327  0009D8  0008               	tblrd		*
  8328  0009DA  50F5               	movf	tablat,w,c
  8329  0009DC  D005               	bra	u2840
  8330  0009DE                     u2847:
  8331  0009DE  CFF6 FFE9          	movff	tblptrl,fsr0l
  8332  0009E2  CFF7 FFEA          	movff	tblptrh,fsr0h
  8333  0009E6  50EF               	movf	indf0,w,c
  8334  0009E8                     u2840:
  8335  0009E8  0900               	iorlw	0
  8336  0009EA  A4D8               	btfss	status,2,c
  8337  0009EC  D7DD               	goto	l4251
  8338                           
  8339                           ;doprnt.c: 757: if(width > len)
  8340  0009EE  0100               	movlb	0	; () banked
  8341  0009F0  51A9               	movf	printf@width& (0+255),w,b
  8342  0009F2  0100               	movlb	0	; () banked
  8343  0009F4  5DA3               	subwf	printf@len& (0+255),w,b
  8344  0009F6  0100               	movlb	0	; () banked
  8345  0009F8  51AA               	movf	(printf@width+1)& (0+255),w,b
  8346  0009FA  0100               	movlb	0	; () banked
  8347  0009FC  59A4               	subwfb	(printf@len+1)& (0+255),w,b
  8348  0009FE  B0D8               	btfsc	status,0,c
  8349  000A00  D009               	goto	l4259
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;doprnt.c: 758: width -= len;
  8353  000A02  0100               	movlb	0	; () banked
  8354  000A04  51A3               	movf	printf@len& (0+255),w,b
  8355  000A06  0100               	movlb	0	; () banked
  8356  000A08  5FA9               	subwf	printf@width& (0+255),f,b
  8357  000A0A  0100               	movlb	0	; () banked
  8358  000A0C  51A4               	movf	(printf@len+1)& (0+255),w,b
  8359  000A0E  0100               	movlb	0	; () banked
  8360  000A10  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8361  000A12  D009               	goto	l4263
  8362  000A14                     l4259:
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;doprnt.c: 759: else
  8366                           ;doprnt.c: 760: width = 0;
  8367  000A14  0E00               	movlw	0
  8368  000A16  0100               	movlb	0	; () banked
  8369  000A18  6FAA               	movwf	(printf@width+1)& (0+255),b
  8370  000A1A  0E00               	movlw	0
  8371  000A1C  6FA9               	movwf	printf@width& (0+255),b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;doprnt.c: 764: while(width--)
  8375  000A1E  D003               	goto	l4263
  8376  000A20                     l4261:
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;doprnt.c: 765: (putch(' ') );
  8380  000A20  0E20               	movlw	32
  8381  000A22  EC38  F019         	call	_putch
  8382  000A26                     l4263:
  8383  000A26  0100               	movlb	0	; () banked
  8384  000A28  07A9               	decf	printf@width& (0+255),f,b
  8385  000A2A  A0D8               	btfss	status,0,c
  8386  000A2C  07AA               	decf	(printf@width+1)& (0+255),f,b
  8387  000A2E  0100               	movlb	0	; () banked
  8388  000A30  29A9               	incf	printf@width& (0+255),w,b
  8389  000A32  E1F6               	bnz	l4261
  8390  000A34  0100               	movlb	0	; () banked
  8391  000A36  29AA               	incf	(printf@width+1)& (0+255),w,b
  8392  000A38  B4D8               	btfsc	status,2,c
  8393  000A3A  D017               	goto	l4269
  8394  000A3C  D7F1               	goto	l4261
  8395  000A3E                     l4265:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;doprnt.c: 768: (putch(*cp++) );
  8399  000A3E  C09F  FFF6         	movff	printf@cp,tblptrl
  8400  000A42  C0A0  FFF7         	movff	printf@cp+1,tblptrh
  8401  000A46  0E00               	movlw	low (__mediumconst shr (0+16))
  8402  000A48  6EF8               	movwf	tblptru,c
  8403  000A4A  0E0F               	movlw	(high __ramtop+-1)
  8404  000A4C  64F7               	cpfsgt	tblptrh,c
  8405  000A4E  D003               	bra	u2887
  8406  000A50  0008               	tblrd		*
  8407  000A52  50F5               	movf	tablat,w,c
  8408  000A54  D005               	bra	u2880
  8409  000A56                     u2887:
  8410  000A56  CFF6 FFE9          	movff	tblptrl,fsr0l
  8411  000A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  8412  000A5E  50EF               	movf	indf0,w,c
  8413  000A60                     u2880:
  8414  000A60  EC38  F019         	call	_putch
  8415  000A64  0100               	movlb	0	; () banked
  8416  000A66  4B9F               	infsnz	printf@cp& (0+255),f,b
  8417  000A68  2BA0               	incf	(printf@cp+1)& (0+255),f,b
  8418  000A6A                     l4269:
  8419                           
  8420                           ; BSR set to: 0
  8421  000A6A  0100               	movlb	0	; () banked
  8422  000A6C  07A3               	decf	printf@len& (0+255),f,b
  8423  000A6E  A0D8               	btfss	status,0,c
  8424  000A70  07A4               	decf	(printf@len+1)& (0+255),f,b
  8425  000A72  0100               	movlb	0	; () banked
  8426  000A74  29A3               	incf	printf@len& (0+255),w,b
  8427  000A76  E1E3               	bnz	l4265
  8428  000A78  0100               	movlb	0	; () banked
  8429  000A7A  29A4               	incf	(printf@len+1)& (0+255),w,b
  8430  000A7C  B4D8               	btfsc	status,2,c
  8431  000A7E  D10A               	goto	l4347
  8432  000A80  D7DE               	goto	l4265
  8433  000A82                     l4271:
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;doprnt.c: 818: flag |= 0x40;
  8437  000A82  0100               	movlb	0	; () banked
  8438  000A84  8DA7               	bsf	printf@flag& (0+255),6,b
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;doprnt.c: 822: }
  8442                           
  8443                           ;doprnt.c: 819: break;
  8444  000A86  D01D               	goto	l965
  8445  000A88                     l4275:
  8446  000A88  C08E  FFF6         	movff	printf@f,tblptrl
  8447  000A8C  C08F  FFF7         	movff	printf@f+1,tblptrh
  8448  000A90  0100               	movlb	0	; () banked
  8449  000A92  4B8E               	infsnz	printf@f& (0+255),f,b
  8450  000A94  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8451  000A96                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8452  000A96  6AF8               	clrf	tblptru,c
  8453  000A98                     	endif
  8454  000A98                     	if	0	;tblptru may be non-zero
  8455  000A98                     	endif
  8456  000A98  0008               	tblrd		*
  8457  000A9A  CFF5 F0A8          	movff	tablat,printf@c
  8458  000A9E  0100               	movlb	0	; () banked
  8459  000AA0  51A8               	movf	printf@c& (0+255),w,b
  8460                           
  8461                           ; Switch size 1, requested type "space"
  8462                           ; Number of cases is 5, Range of values is 0 to 117
  8463                           ; switch strategies available:
  8464                           ; Name         Instructions Cycles
  8465                           ; simple_byte           16     9 (average)
  8466                           ;	Chosen strategy is simple_byte
  8467  000AA2  0A00               	xorlw	0	; case 0
  8468  000AA4  B4D8               	btfsc	status,2,c
  8469  000AA6  0012               	return	
  8470  000AA8  0A64               	xorlw	100	; case 100
  8471  000AAA  B4D8               	btfsc	status,2,c
  8472  000AAC  D00A               	goto	l965
  8473  000AAE  0A0D               	xorlw	13	; case 105
  8474  000AB0  B4D8               	btfsc	status,2,c
  8475  000AB2  D007               	goto	l965
  8476  000AB4  0A1A               	xorlw	26	; case 115
  8477  000AB6  B4D8               	btfsc	status,2,c
  8478  000AB8  D758               	goto	l4241
  8479  000ABA  0A06               	xorlw	6	; case 117
  8480  000ABC  B4D8               	btfsc	status,2,c
  8481  000ABE  D7E1               	goto	l4271
  8482  000AC0  D0E9               	goto	l4347
  8483  000AC2                     l965:
  8484                           
  8485                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8486  000AC2  0100               	movlb	0	; () banked
  8487  000AC4  BDA7               	btfsc	printf@flag& (0+255),6,b
  8488  000AC6  D019               	goto	l4287
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;doprnt.c: 1253: {
  8492                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8493  000AC8  C0A1  FFD9         	movff	printf@ap,fsr2l
  8494  000ACC  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8495  000AD0  CFDE F0A5          	movff	postinc2,printf@val
  8496  000AD4  CFDD F0A6          	movff	postdec2,printf@val+1
  8497                           
  8498                           ; BSR set to: 0
  8499  000AD8  0E02               	movlw	2
  8500  000ADA  0100               	movlb	0	; () banked
  8501  000ADC  27A1               	addwf	printf@ap& (0+255),f,b
  8502  000ADE  0E00               	movlw	0
  8503  000AE0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;doprnt.c: 1261: if((int)val < 0) {
  8507  000AE2  0100               	movlb	0	; () banked
  8508  000AE4  AFA6               	btfss	(printf@val+1)& (0+255),7,b
  8509  000AE6  D016               	goto	l4291
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;doprnt.c: 1262: flag |= 0x03;
  8513  000AE8  0E03               	movlw	3
  8514  000AEA  0100               	movlb	0	; () banked
  8515  000AEC  13A7               	iorwf	printf@flag& (0+255),f,b
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;doprnt.c: 1263: val = -val;
  8519  000AEE  0100               	movlb	0	; () banked
  8520  000AF0  6DA5               	negf	printf@val& (0+255),b
  8521  000AF2  1FA6               	comf	(printf@val+1)& (0+255),f,b
  8522  000AF4  B0D8               	btfsc	status,0,c
  8523  000AF6  2BA6               	incf	(printf@val+1)& (0+255),f,b
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;doprnt.c: 1264: }
  8527                           ;doprnt.c: 1266: }
  8528  000AF8  D00D               	goto	l4291
  8529  000AFA                     l4287:
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;doprnt.c: 1268: else
  8533                           ;doprnt.c: 1273: {
  8534                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8535  000AFA  C0A1  FFD9         	movff	printf@ap,fsr2l
  8536  000AFE  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8537  000B02  CFDE F0A5          	movff	postinc2,printf@val
  8538  000B06  CFDD F0A6          	movff	postdec2,printf@val+1
  8539                           
  8540                           ; BSR set to: 0
  8541  000B0A  0E02               	movlw	2
  8542  000B0C  0100               	movlb	0	; () banked
  8543  000B0E  27A1               	addwf	printf@ap& (0+255),f,b
  8544  000B10  0E00               	movlw	0
  8545  000B12  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8546  000B14                     l4291:
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;doprnt.c: 1287: }
  8550                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8551  000B14  0E01               	movlw	1
  8552  000B16  0100               	movlb	0	; () banked
  8553  000B18  6FA8               	movwf	printf@c& (0+255),b
  8554  000B1A                     l4293:
  8555                           
  8556                           ; BSR set to: 0
  8557  000B1A  0E05               	movlw	5
  8558  000B1C  0100               	movlb	0	; () banked
  8559  000B1E  19A8               	xorwf	printf@c& (0+255),w,b
  8560  000B20  B4D8               	btfsc	status,2,c
  8561  000B22  D019               	goto	l4305
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;doprnt.c: 1306: if(val < dpowers[c])
  8565                           
  8566                           ; BSR set to: 0
  8567                           
  8568                           ; BSR set to: 0
  8569  000B24  0100               	movlb	0	; () banked
  8570  000B26  51A8               	movf	printf@c& (0+255),w,b
  8571  000B28  0D02               	mullw	2
  8572  000B2A  0EA2               	movlw	low _dpowers
  8573  000B2C  24F3               	addwf	prodl,w,c
  8574  000B2E  6EF6               	movwf	tblptrl,c
  8575  000B30  0EFD               	movlw	high _dpowers
  8576  000B32  20F4               	addwfc	prodh,w,c
  8577  000B34  6EF7               	movwf	tblptrh,c
  8578  000B36                     	if	1	;There are 3 active tblptr bytes
  8579  000B36  6AF8               	clrf	tblptru,c
  8580  000B38  0E00               	movlw	low (__mediumconst shr (0+16))
  8581  000B3A  22F8               	addwfc	tblptru,f,c
  8582  000B3C                     	endif
  8583  000B3C  0009               	tblrd		*+
  8584  000B3E  50F5               	movf	tablat,w,c
  8585  000B40  0100               	movlb	0	; () banked
  8586  000B42  5DA5               	subwf	printf@val& (0+255),w,b
  8587  000B44  0009               	tblrd		*+
  8588  000B46  50F5               	movf	tablat,w,c
  8589  000B48  0100               	movlb	0	; () banked
  8590  000B4A  59A6               	subwfb	(printf@val+1)& (0+255),w,b
  8591  000B4C  A0D8               	btfss	status,0,c
  8592  000B4E  D003               	goto	l4305
  8593                           
  8594                           ; BSR set to: 0
  8595                           
  8596                           ; BSR set to: 0
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;doprnt.c: 1307: break;
  8600  000B50  0100               	movlb	0	; () banked
  8601  000B52  2BA8               	incf	printf@c& (0+255),f,b
  8602  000B54  D7E2               	goto	l4293
  8603  000B56                     l4305:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8607  000B56  0100               	movlb	0	; () banked
  8608  000B58  51A9               	movf	printf@width& (0+255),w,b
  8609  000B5A  0100               	movlb	0	; () banked
  8610  000B5C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8611  000B5E  B4D8               	btfsc	status,2,c
  8612  000B60  D00B               	goto	l4311
  8613                           
  8614                           ; BSR set to: 0
  8615  000B62  C0A7  F09A         	movff	printf@flag,??_printf
  8616  000B66  0E03               	movlw	3
  8617  000B68  0100               	movlb	0	; () banked
  8618  000B6A  179A               	andwf	??_printf& (0+255),f,b
  8619  000B6C  B4D8               	btfsc	status,2,c
  8620  000B6E  D004               	goto	l4311
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;doprnt.c: 1346: width--;
  8624  000B70  0100               	movlb	0	; () banked
  8625  000B72  07A9               	decf	printf@width& (0+255),f,b
  8626  000B74  A0D8               	btfss	status,0,c
  8627  000B76  07AA               	decf	(printf@width+1)& (0+255),f,b
  8628  000B78                     l4311:
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;doprnt.c: 1381: if(width > c)
  8632  000B78  0E80               	movlw	128
  8633  000B7A  0100               	movlb	0	; () banked
  8634  000B7C  BFA8               	btfsc	printf@c& (0+255),7,b
  8635  000B7E  0E7F               	movlw	127
  8636  000B80  0100               	movlb	0	; () banked
  8637  000B82  6F9A               	movwf	??_printf& (0+255),b
  8638  000B84  0100               	movlb	0	; () banked
  8639  000B86  51A9               	movf	printf@width& (0+255),w,b
  8640  000B88  0100               	movlb	0	; () banked
  8641  000B8A  5DA8               	subwf	printf@c& (0+255),w,b
  8642  000B8C  0100               	movlb	0	; () banked
  8643  000B8E  51AA               	movf	(printf@width+1)& (0+255),w,b
  8644  000B90  0A80               	xorlw	128
  8645  000B92  0100               	movlb	0	; () banked
  8646  000B94  599A               	subwfb	??_printf& (0+255),w,b
  8647  000B96  B0D8               	btfsc	status,0,c
  8648  000B98  D00B               	goto	l4315
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;doprnt.c: 1382: width -= c;
  8652  000B9A  0100               	movlb	0	; () banked
  8653  000B9C  51A8               	movf	printf@c& (0+255),w,b
  8654  000B9E  0100               	movlb	0	; () banked
  8655  000BA0  5FA9               	subwf	printf@width& (0+255),f,b
  8656  000BA2  0E00               	movlw	0
  8657  000BA4  0100               	movlb	0	; () banked
  8658  000BA6  BFA8               	btfsc	printf@c& (0+255),7,b
  8659  000BA8  0EFF               	movlw	255
  8660  000BAA  0100               	movlb	0	; () banked
  8661  000BAC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8662  000BAE  D005               	goto	l4317
  8663  000BB0                     l4315:
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;doprnt.c: 1383: else
  8667                           ;doprnt.c: 1384: width = 0;
  8668  000BB0  0E00               	movlw	0
  8669  000BB2  0100               	movlb	0	; () banked
  8670  000BB4  6FAA               	movwf	(printf@width+1)& (0+255),b
  8671  000BB6  0E00               	movlw	0
  8672  000BB8  6FA9               	movwf	printf@width& (0+255),b
  8673  000BBA                     l4317:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;doprnt.c: 1387: if(flag & 0x04) {
  8677  000BBA  0100               	movlb	0	; () banked
  8678  000BBC  A5A7               	btfss	printf@flag& (0+255),2,b
  8679  000BBE  D018               	goto	l4329
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;doprnt.c: 1392: if(flag & 0x03)
  8683  000BC0  C0A7  F09A         	movff	printf@flag,??_printf
  8684  000BC4  0E03               	movlw	3
  8685  000BC6  0100               	movlb	0	; () banked
  8686  000BC8  179A               	andwf	??_printf& (0+255),f,b
  8687  000BCA  B4D8               	btfsc	status,2,c
  8688  000BCC  D003               	goto	l4323
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;doprnt.c: 1393: (putch('-') );
  8692  000BCE  0E2D               	movlw	45
  8693  000BD0  EC38  F019         	call	_putch
  8694  000BD4                     l4323:
  8695                           
  8696                           ;doprnt.c: 1415: if(width)
  8697  000BD4  0100               	movlb	0	; () banked
  8698  000BD6  51A9               	movf	printf@width& (0+255),w,b
  8699  000BD8  0100               	movlb	0	; () banked
  8700  000BDA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8701  000BDC  B4D8               	btfsc	status,2,c
  8702  000BDE  D025               	goto	l4339
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;doprnt.c: 1417: (putch('0') );
  8706                           
  8707                           ; BSR set to: 0
  8708                           
  8709                           ;doprnt.c: 1416: do
  8710  000BE0  0E30               	movlw	48
  8711  000BE2  EC38  F019         	call	_putch
  8712                           
  8713                           ;doprnt.c: 1418: while(--width);
  8714  000BE6  0100               	movlb	0	; () banked
  8715  000BE8  07A9               	decf	printf@width& (0+255),f,b
  8716  000BEA  A0D8               	btfss	status,0,c
  8717  000BEC  07AA               	decf	(printf@width+1)& (0+255),f,b
  8718  000BEE  D7F2               	goto	l4323
  8719  000BF0                     l4329:
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;doprnt.c: 1422: {
  8723                           ;doprnt.c: 1424: if(width
  8724                           ;doprnt.c: 1428: )
  8725  000BF0  0100               	movlb	0	; () banked
  8726  000BF2  51A9               	movf	printf@width& (0+255),w,b
  8727  000BF4  0100               	movlb	0	; () banked
  8728  000BF6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8729  000BF8  B4D8               	btfsc	status,2,c
  8730  000BFA  D00D               	goto	l4335
  8731  000BFC                     l4331:
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;doprnt.c: 1430: (putch(' ') );
  8735  000BFC  0E20               	movlw	32
  8736  000BFE  EC38  F019         	call	_putch
  8737                           
  8738                           ;doprnt.c: 1431: while(--width);
  8739  000C02  0100               	movlb	0	; () banked
  8740  000C04  07A9               	decf	printf@width& (0+255),f,b
  8741  000C06  A0D8               	btfss	status,0,c
  8742  000C08  07AA               	decf	(printf@width+1)& (0+255),f,b
  8743  000C0A  0100               	movlb	0	; () banked
  8744  000C0C  51A9               	movf	printf@width& (0+255),w,b
  8745  000C0E  0100               	movlb	0	; () banked
  8746  000C10  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8747  000C12  A4D8               	btfss	status,2,c
  8748  000C14  D7F3               	goto	l4331
  8749  000C16                     l4335:
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;doprnt.c: 1438: if(flag & 0x03)
  8753  000C16  C0A7  F09A         	movff	printf@flag,??_printf
  8754  000C1A  0E03               	movlw	3
  8755  000C1C  0100               	movlb	0	; () banked
  8756  000C1E  179A               	andwf	??_printf& (0+255),f,b
  8757  000C20  B4D8               	btfsc	status,2,c
  8758  000C22  D003               	goto	l4339
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;doprnt.c: 1439: (putch('-') );
  8762  000C24  0E2D               	movlw	45
  8763  000C26  EC38  F019         	call	_putch
  8764  000C2A                     l4339:
  8765                           
  8766                           ;doprnt.c: 1469: }
  8767                           ;doprnt.c: 1472: prec = c;
  8768  000C2A  C0A8  F09E         	movff	printf@c,printf@prec
  8769                           
  8770                           ;doprnt.c: 1474: while(prec--) {
  8771  000C2E  D02C               	goto	l4345
  8772  000C30                     l4341:
  8773                           
  8774                           ;doprnt.c: 1478: {
  8775                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8776  000C30  0100               	movlb	0	; () banked
  8777  000C32  519E               	movf	printf@prec& (0+255),w,b
  8778  000C34  0D02               	mullw	2
  8779  000C36  0EA2               	movlw	low _dpowers
  8780  000C38  24F3               	addwf	prodl,w,c
  8781  000C3A  6EF6               	movwf	tblptrl,c
  8782  000C3C  0EFD               	movlw	high _dpowers
  8783  000C3E  20F4               	addwfc	prodh,w,c
  8784  000C40  6EF7               	movwf	tblptrh,c
  8785  000C42                     	if	1	;There are 3 active tblptr bytes
  8786  000C42  6AF8               	clrf	tblptru,c
  8787  000C44  0E00               	movlw	low (__mediumconst shr (0+16))
  8788  000C46  22F8               	addwfc	tblptru,f,c
  8789  000C48                     	endif
  8790  000C48  0009               	tblrd		*+
  8791  000C4A  CFF5 F082          	movff	tablat,___lwdiv@divisor
  8792  000C4E  000A               	tblrd		*-
  8793  000C50  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  8794  000C54  C0A5  F080         	movff	printf@val,___lwdiv@dividend
  8795  000C58  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
  8796  000C5C  ECEB  F013         	call	___lwdiv	;wreg free
  8797  000C60  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  8798  000C64  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  8799  000C68  0E00               	movlw	0
  8800  000C6A  0100               	movlb	0	; () banked
  8801  000C6C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8802  000C6E  0E0A               	movlw	10
  8803  000C70  6F89               	movwf	___lwmod@divisor& (0+255),b
  8804  000C72  EC06  F015         	call	___lwmod	;wreg free
  8805  000C76  0100               	movlb	0	; () banked
  8806  000C78  5187               	movf	?___lwmod& (0+255),w,b
  8807  000C7A  0F30               	addlw	48
  8808  000C7C  0100               	movlb	0	; () banked
  8809  000C7E  6FA8               	movwf	printf@c& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;doprnt.c: 1523: }
  8813                           ;doprnt.c: 1524: (putch(c) );
  8814  000C80  0100               	movlb	0	; () banked
  8815  000C82  51A8               	movf	printf@c& (0+255),w,b
  8816  000C84  EC38  F019         	call	_putch
  8817  000C88                     l4345:
  8818  000C88  0100               	movlb	0	; () banked
  8819  000C8A  079E               	decf	printf@prec& (0+255),f,b
  8820  000C8C  0100               	movlb	0	; () banked
  8821  000C8E  299E               	incf	printf@prec& (0+255),w,b
  8822  000C90  A4D8               	btfss	status,2,c
  8823  000C92  D7CE               	goto	l4341
  8824  000C94                     l4347:
  8825  000C94  C08E  FFF6         	movff	printf@f,tblptrl
  8826  000C98  C08F  FFF7         	movff	printf@f+1,tblptrh
  8827  000C9C  0100               	movlb	0	; () banked
  8828  000C9E  4B8E               	infsnz	printf@f& (0+255),f,b
  8829  000CA0  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8830  000CA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8831  000CA2  6AF8               	clrf	tblptru,c
  8832  000CA4                     	endif
  8833  000CA4                     	if	0	;tblptru may be non-zero
  8834  000CA4                     	endif
  8835  000CA4  0008               	tblrd		*
  8836  000CA6  CFF5 F0A8          	movff	tablat,printf@c
  8837  000CAA  0100               	movlb	0	; () banked
  8838  000CAC  51A8               	movf	printf@c& (0+255),w,b
  8839  000CAE  B4D8               	btfsc	status,2,c
  8840  000CB0  0012               	return	
  8841  000CB2  D5EB               	goto	l4217
  8842  000CB4                     __end_of_printf:
  8843                           	opt stack 0
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           intcon	equ	0xFF2
  8851                           intcon2	equ	0xFF1
  8852                           intcon3	equ	0xFF0
  8853                           indf0	equ	0xFEF
  8854                           postinc0	equ	0xFEE
  8855                           fsr0h	equ	0xFEA
  8856                           fsr0l	equ	0xFE9
  8857                           wreg	equ	0xFE8
  8858                           postdec1	equ	0xFE5
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _putch *****************
  8868 ;; Defined at:
  8869 ;;		line 20 in file "lcd.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  data            1    wreg     unsigned char 
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  data            1    2[BANK0 ] unsigned char 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;Total ram usage:        1 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    8
  8890 ;; This function calls:
  8891 ;;		_lcdNibble
  8892 ;; This function is called by:
  8893 ;;		_printf
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text35
  8898  003270                     __ptext35:
  8899                           	opt stack 0
  8900  003270                     _putch:
  8901                           	opt stack 19
  8902                           
  8903                           ;incstack = 0
  8904                           ;putch@data stored from wreg
  8905  003270  0100               	movlb	0	; () banked
  8906  003272  6F82               	movwf	putch@data& (0+255),b
  8907                           
  8908                           ;lcd.c: 21: LATDbits.LATD2 = 1;
  8909  003274  848C               	bsf	3980,2,c	;volatile
  8910                           
  8911                           ;lcd.c: 22: lcdNibble(data);
  8912  003276  0100               	movlb	0	; () banked
  8913  003278  5182               	movf	putch@data& (0+255),w,b
  8914  00327A  ECD2  F014         	call	_lcdNibble
  8915  00327E  0012               	return		;funcret
  8916  003280                     __end_of_putch:
  8917                           	opt stack 0
  8918                           tblptru	equ	0xFF8
  8919                           tblptrh	equ	0xFF7
  8920                           tblptrl	equ	0xFF6
  8921                           tablat	equ	0xFF5
  8922                           prodh	equ	0xFF4
  8923                           prodl	equ	0xFF3
  8924                           intcon	equ	0xFF2
  8925                           intcon2	equ	0xFF1
  8926                           intcon3	equ	0xFF0
  8927                           indf0	equ	0xFEF
  8928                           postinc0	equ	0xFEE
  8929                           fsr0h	equ	0xFEA
  8930                           fsr0l	equ	0xFE9
  8931                           wreg	equ	0xFE8
  8932                           postdec1	equ	0xFE5
  8933                           fsr1l	equ	0xFE1
  8934                           indf2	equ	0xFDF
  8935                           postinc2	equ	0xFDE
  8936                           postdec2	equ	0xFDD
  8937                           fsr2h	equ	0xFDA
  8938                           fsr2l	equ	0xFD9
  8939                           status	equ	0xFD8
  8940                           
  8941 ;; *************** function _isdigit *****************
  8942 ;; Defined at:
  8943 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  c               1    wreg     unsigned char 
  8946 ;; Auto vars:     Size  Location     Type
  8947 ;;  c               1    2[BANK0 ] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;		None               void
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;Total ram usage:        3 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    7
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_printf
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text36
  8972  0030AC                     __ptext36:
  8973                           	opt stack 0
  8974  0030AC                     _isdigit:
  8975                           	opt stack 20
  8976                           
  8977                           ;incstack = 0
  8978                           ;isdigit@c stored from wreg
  8979  0030AC  0100               	movlb	0	; () banked
  8980  0030AE  6F82               	movwf	isdigit@c& (0+255),b
  8981  0030B0  0E00               	movlw	0
  8982  0030B2  0100               	movlb	0	; () banked
  8983  0030B4  6F81               	movwf	_isdigit$1630& (0+255),b
  8984                           
  8985                           ; BSR set to: 0
  8986  0030B6  0E3A               	movlw	58
  8987  0030B8  0100               	movlb	0	; () banked
  8988  0030BA  6182               	cpfslt	isdigit@c& (0+255),b
  8989  0030BC  D007               	goto	l4067
  8990                           
  8991                           ; BSR set to: 0
  8992  0030BE  0E2F               	movlw	47
  8993  0030C0  0100               	movlb	0	; () banked
  8994  0030C2  6582               	cpfsgt	isdigit@c& (0+255),b
  8995  0030C4  D003               	goto	l4067
  8996                           
  8997                           ; BSR set to: 0
  8998  0030C6  0E01               	movlw	1
  8999  0030C8  0100               	movlb	0	; () banked
  9000  0030CA  6F81               	movwf	_isdigit$1630& (0+255),b
  9001  0030CC                     l4067:
  9002                           
  9003                           ; BSR set to: 0
  9004  0030CC  C081  F080         	movff	_isdigit$1630,??_isdigit
  9005  0030D0  0100               	movlb	0	; () banked
  9006  0030D2  3180               	rrcf	??_isdigit& (0+255),w,b
  9007  0030D4  0012               	return	
  9008  0030D6                     __end_of_isdigit:
  9009                           	opt stack 0
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon	equ	0xFF2
  9017                           intcon2	equ	0xFF1
  9018                           intcon3	equ	0xFF0
  9019                           indf0	equ	0xFEF
  9020                           postinc0	equ	0xFEE
  9021                           fsr0h	equ	0xFEA
  9022                           fsr0l	equ	0xFE9
  9023                           wreg	equ	0xFE8
  9024                           postdec1	equ	0xFE5
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function ___wmul *****************
  9034 ;; Defined at:
  9035 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9038 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  product         2    4[BANK0 ] unsigned int 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  2    0[BANK0 ] unsigned int 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, status,0, prodl, prodh
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;Total ram usage:        6 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    7
  9057 ;; This function calls:
  9058 ;;		Nothing
  9059 ;; This function is called by:
  9060 ;;		_printf
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           	psect	text37
  9065  002DE0                     __ptext37:
  9066                           	opt stack 0
  9067  002DE0                     ___wmul:
  9068                           	opt stack 20
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;incstack = 0
  9072  002DE0  0100               	movlb	0	; () banked
  9073  002DE2  5180               	movf	___wmul@multiplier& (0+255),w,b
  9074  002DE4  0100               	movlb	0	; () banked
  9075  002DE6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9076  002DE8  CFF3 F084          	movff	prodl,___wmul@product
  9077  002DEC  CFF4 F085          	movff	prodh,___wmul@product+1
  9078  002DF0  0100               	movlb	0	; () banked
  9079  002DF2  5180               	movf	___wmul@multiplier& (0+255),w,b
  9080  002DF4  0100               	movlb	0	; () banked
  9081  002DF6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9082  002DF8  50F3               	movf	prodl,w,c
  9083  002DFA  0100               	movlb	0	; () banked
  9084  002DFC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9085  002DFE  0100               	movlb	0	; () banked
  9086  002E00  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9087  002E02  0100               	movlb	0	; () banked
  9088  002E04  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9089  002E06  50F3               	movf	prodl,w,c
  9090  002E08  0100               	movlb	0	; () banked
  9091  002E0A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9092                           
  9093                           ; BSR set to: 0
  9094  002E0C  C084  F080         	movff	___wmul@product,?___wmul
  9095  002E10  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9096  002E14  0012               	return	
  9097  002E16                     __end_of___wmul:
  9098                           	opt stack 0
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon	equ	0xFF2
  9106                           intcon2	equ	0xFF1
  9107                           intcon3	equ	0xFF0
  9108                           indf0	equ	0xFEF
  9109                           postinc0	equ	0xFEE
  9110                           fsr0h	equ	0xFEA
  9111                           fsr0l	equ	0xFE9
  9112                           wreg	equ	0xFE8
  9113                           postdec1	equ	0xFE5
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           fsr2h	equ	0xFDA
  9119                           fsr2l	equ	0xFD9
  9120                           status	equ	0xFD8
  9121                           
  9122 ;; *************** function ___lwmod *****************
  9123 ;; Defined at:
  9124 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  dividend        2    7[BANK0 ] unsigned int 
  9127 ;;  divisor         2    9[BANK0 ] unsigned int 
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  counter         1   11[BANK0 ] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  2    7[BANK0 ] unsigned int 
  9132 ;; Registers used:
  9133 ;;		wreg, status,2, status,0
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9139 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;Total ram usage:        5 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    7
  9146 ;; This function calls:
  9147 ;;		Nothing
  9148 ;; This function is called by:
  9149 ;;		_printf
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text38
  9154  002A0C                     __ptext38:
  9155                           	opt stack 0
  9156  002A0C                     ___lwmod:
  9157                           	opt stack 20
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;incstack = 0
  9161  002A0C  0100               	movlb	0	; () banked
  9162  002A0E  5189               	movf	___lwmod@divisor& (0+255),w,b
  9163  002A10  0100               	movlb	0	; () banked
  9164  002A12  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9165  002A14  B4D8               	btfsc	status,2,c
  9166  002A16  D026               	goto	l1422
  9167                           
  9168                           ; BSR set to: 0
  9169  002A18  0E01               	movlw	1
  9170  002A1A  0100               	movlb	0	; () banked
  9171  002A1C  6F8B               	movwf	___lwmod@counter& (0+255),b
  9172  002A1E  D006               	goto	l4105
  9173  002A20                     l4103:
  9174                           
  9175                           ; BSR set to: 0
  9176  002A20  0100               	movlb	0	; () banked
  9177  002A22  90D8               	bcf	status,0,c
  9178  002A24  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  9179  002A26  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9180  002A28  0100               	movlb	0	; () banked
  9181  002A2A  2B8B               	incf	___lwmod@counter& (0+255),f,b
  9182  002A2C                     l4105:
  9183                           
  9184                           ; BSR set to: 0
  9185  002A2C  0100               	movlb	0	; () banked
  9186  002A2E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9187  002A30  D7F7               	goto	l4103
  9188  002A32                     l4107:
  9189                           
  9190                           ; BSR set to: 0
  9191  002A32  0100               	movlb	0	; () banked
  9192  002A34  5189               	movf	___lwmod@divisor& (0+255),w,b
  9193  002A36  0100               	movlb	0	; () banked
  9194  002A38  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  9195  002A3A  0100               	movlb	0	; () banked
  9196  002A3C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9197  002A3E  0100               	movlb	0	; () banked
  9198  002A40  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9199  002A42  A0D8               	btfss	status,0,c
  9200  002A44  D008               	goto	l4111
  9201                           
  9202                           ; BSR set to: 0
  9203  002A46  0100               	movlb	0	; () banked
  9204  002A48  5189               	movf	___lwmod@divisor& (0+255),w,b
  9205  002A4A  0100               	movlb	0	; () banked
  9206  002A4C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  9207  002A4E  0100               	movlb	0	; () banked
  9208  002A50  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9209  002A52  0100               	movlb	0	; () banked
  9210  002A54  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9211  002A56                     l4111:
  9212                           
  9213                           ; BSR set to: 0
  9214  002A56  0100               	movlb	0	; () banked
  9215  002A58  90D8               	bcf	status,0,c
  9216  002A5A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9217  002A5C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  9218                           
  9219                           ; BSR set to: 0
  9220  002A5E  0100               	movlb	0	; () banked
  9221  002A60  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  9222  002A62  D7E7               	goto	l4107
  9223  002A64                     l1422:
  9224                           
  9225                           ; BSR set to: 0
  9226  002A64  C087  F087         	movff	___lwmod@dividend,?___lwmod
  9227  002A68  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  9228                           
  9229                           ; BSR set to: 0
  9230  002A6C  0012               	return		;funcret
  9231  002A6E                     __end_of___lwmod:
  9232                           	opt stack 0
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           intcon	equ	0xFF2
  9240                           intcon2	equ	0xFF1
  9241                           intcon3	equ	0xFF0
  9242                           indf0	equ	0xFEF
  9243                           postinc0	equ	0xFEE
  9244                           fsr0h	equ	0xFEA
  9245                           fsr0l	equ	0xFE9
  9246                           wreg	equ	0xFE8
  9247                           postdec1	equ	0xFE5
  9248                           fsr1l	equ	0xFE1
  9249                           indf2	equ	0xFDF
  9250                           postinc2	equ	0xFDE
  9251                           postdec2	equ	0xFDD
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function ___lwdiv *****************
  9257 ;; Defined at:
  9258 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  dividend        2    0[BANK0 ] unsigned int 
  9261 ;;  divisor         2    2[BANK0 ] unsigned int 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  quotient        2    4[BANK0 ] unsigned int 
  9264 ;;  counter         1    6[BANK0 ] unsigned char 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  2    0[BANK0 ] unsigned int 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;Total ram usage:        7 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    7
  9281 ;; This function calls:
  9282 ;;		Nothing
  9283 ;; This function is called by:
  9284 ;;		_printf
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text39
  9289  0027D6                     __ptext39:
  9290                           	opt stack 0
  9291  0027D6                     ___lwdiv:
  9292                           	opt stack 20
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;incstack = 0
  9296  0027D6  0E00               	movlw	0
  9297  0027D8  0100               	movlb	0	; () banked
  9298  0027DA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9299  0027DC  0E00               	movlw	0
  9300  0027DE  6F84               	movwf	___lwdiv@quotient& (0+255),b
  9301                           
  9302                           ; BSR set to: 0
  9303  0027E0  0100               	movlb	0	; () banked
  9304  0027E2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9305  0027E4  0100               	movlb	0	; () banked
  9306  0027E6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9307  0027E8  B4D8               	btfsc	status,2,c
  9308  0027EA  D02C               	goto	l1412
  9309                           
  9310                           ; BSR set to: 0
  9311  0027EC  0E01               	movlw	1
  9312  0027EE  0100               	movlb	0	; () banked
  9313  0027F0  6F86               	movwf	___lwdiv@counter& (0+255),b
  9314  0027F2  D006               	goto	l4085
  9315  0027F4                     l4083:
  9316                           
  9317                           ; BSR set to: 0
  9318  0027F4  0100               	movlb	0	; () banked
  9319  0027F6  90D8               	bcf	status,0,c
  9320  0027F8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  9321  0027FA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9322  0027FC  0100               	movlb	0	; () banked
  9323  0027FE  2B86               	incf	___lwdiv@counter& (0+255),f,b
  9324  002800                     l4085:
  9325                           
  9326                           ; BSR set to: 0
  9327  002800  0100               	movlb	0	; () banked
  9328  002802  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9329  002804  D7F7               	goto	l4083
  9330  002806                     l4087:
  9331                           
  9332                           ; BSR set to: 0
  9333  002806  0100               	movlb	0	; () banked
  9334  002808  90D8               	bcf	status,0,c
  9335  00280A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  9336  00280C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9337                           
  9338                           ; BSR set to: 0
  9339  00280E  0100               	movlb	0	; () banked
  9340  002810  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9341  002812  0100               	movlb	0	; () banked
  9342  002814  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  9343  002816  0100               	movlb	0	; () banked
  9344  002818  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9345  00281A  0100               	movlb	0	; () banked
  9346  00281C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9347  00281E  A0D8               	btfss	status,0,c
  9348  002820  D00A               	goto	l4095
  9349                           
  9350                           ; BSR set to: 0
  9351  002822  0100               	movlb	0	; () banked
  9352  002824  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9353  002826  0100               	movlb	0	; () banked
  9354  002828  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  9355  00282A  0100               	movlb	0	; () banked
  9356  00282C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9357  00282E  0100               	movlb	0	; () banked
  9358  002830  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9359                           
  9360                           ; BSR set to: 0
  9361  002832  0100               	movlb	0	; () banked
  9362  002834  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  9363  002836                     l4095:
  9364                           
  9365                           ; BSR set to: 0
  9366  002836  0100               	movlb	0	; () banked
  9367  002838  90D8               	bcf	status,0,c
  9368  00283A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9369  00283C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  9370                           
  9371                           ; BSR set to: 0
  9372  00283E  0100               	movlb	0	; () banked
  9373  002840  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  9374  002842  D7E1               	goto	l4087
  9375  002844                     l1412:
  9376                           
  9377                           ; BSR set to: 0
  9378  002844  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  9379  002848  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9380                           
  9381                           ; BSR set to: 0
  9382  00284C  0012               	return		;funcret
  9383  00284E                     __end_of___lwdiv:
  9384                           	opt stack 0
  9385                           tblptru	equ	0xFF8
  9386                           tblptrh	equ	0xFF7
  9387                           tblptrl	equ	0xFF6
  9388                           tablat	equ	0xFF5
  9389                           prodh	equ	0xFF4
  9390                           prodl	equ	0xFF3
  9391                           intcon	equ	0xFF2
  9392                           intcon2	equ	0xFF1
  9393                           intcon3	equ	0xFF0
  9394                           indf0	equ	0xFEF
  9395                           postinc0	equ	0xFEE
  9396                           fsr0h	equ	0xFEA
  9397                           fsr0l	equ	0xFE9
  9398                           wreg	equ	0xFE8
  9399                           postdec1	equ	0xFE5
  9400                           fsr1l	equ	0xFE1
  9401                           indf2	equ	0xFDF
  9402                           postinc2	equ	0xFDE
  9403                           postdec2	equ	0xFDD
  9404                           fsr2h	equ	0xFDA
  9405                           fsr2l	equ	0xFD9
  9406                           status	equ	0xFD8
  9407                           
  9408 ;; *************** function _lcdInst *****************
  9409 ;; Defined at:
  9410 ;;		line 15 in file "lcd.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;  data            1    wreg     unsigned char 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  data            1    2[BANK0 ] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  1    wreg      void 
  9417 ;; Registers used:
  9418 ;;		wreg, status,2, status,0, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;Total ram usage:        1 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    8
  9431 ;; This function calls:
  9432 ;;		_lcdNibble
  9433 ;; This function is called by:
  9434 ;;		_UI
  9435 ;;		_change_state_to_menu_start
  9436 ;;		_change_state_to_menu_12
  9437 ;;		_change_state_to_menu_22
  9438 ;;		_initLCD
  9439 ;;		_printRTC
  9440 ;;		_Loading
  9441 ;;		_EEPROM_write
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text40
  9446  003280                     __ptext40:
  9447                           	opt stack 0
  9448  003280                     _lcdInst:
  9449                           	opt stack 20
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;incstack = 0
  9453                           ;lcdInst@data stored from wreg
  9454  003280  0100               	movlb	0	; () banked
  9455  003282  6F82               	movwf	lcdInst@data& (0+255),b
  9456                           
  9457                           ;lcd.c: 16: LATDbits.LATD2 = 0;
  9458  003284  948C               	bcf	3980,2,c	;volatile
  9459                           
  9460                           ;lcd.c: 17: lcdNibble(data);
  9461  003286  0100               	movlb	0	; () banked
  9462  003288  5182               	movf	lcdInst@data& (0+255),w,b
  9463  00328A  ECD2  F014         	call	_lcdNibble
  9464  00328E  0012               	return		;funcret
  9465  003290                     __end_of_lcdInst:
  9466                           	opt stack 0
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           intcon2	equ	0xFF1
  9475                           intcon3	equ	0xFF0
  9476                           indf0	equ	0xFEF
  9477                           postinc0	equ	0xFEE
  9478                           fsr0h	equ	0xFEA
  9479                           fsr0l	equ	0xFE9
  9480                           wreg	equ	0xFE8
  9481                           postdec1	equ	0xFE5
  9482                           fsr1l	equ	0xFE1
  9483                           indf2	equ	0xFDF
  9484                           postinc2	equ	0xFDE
  9485                           postdec2	equ	0xFDD
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function _lcdNibble *****************
  9491 ;; Defined at:
  9492 ;;		line 25 in file "lcd.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  data            1    wreg     unsigned char 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  data            1    1[BANK0 ] unsigned char 
  9497 ;;  temp            1    0[BANK0 ] unsigned char 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      void 
  9500 ;; Registers used:
  9501 ;;		wreg, status,2, status,0
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;Total ram usage:        2 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    7
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_lcdInst
  9518 ;;		_putch
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           	psect	text41
  9523  0029A4                     __ptext41:
  9524                           	opt stack 0
  9525  0029A4                     _lcdNibble:
  9526                           	opt stack 20
  9527                           
  9528                           ;incstack = 0
  9529                           ;lcdNibble@data stored from wreg
  9530  0029A4  0100               	movlb	0	; () banked
  9531  0029A6  6F81               	movwf	lcdNibble@data& (0+255),b
  9532                           
  9533                           ;lcd.c: 27: char temp = data & 0xF0;
  9534  0029A8  0100               	movlb	0	; () banked
  9535  0029AA  5181               	movf	lcdNibble@data& (0+255),w,b
  9536  0029AC  0BF0               	andlw	240
  9537  0029AE  0100               	movlb	0	; () banked
  9538  0029B0  6F80               	movwf	lcdNibble@temp& (0+255),b
  9539                           
  9540                           ;lcd.c: 28: LATD = LATD & 0x0F;
  9541  0029B2  508C               	movf	3980,w,c	;volatile
  9542  0029B4  0B0F               	andlw	15
  9543  0029B6  6E8C               	movwf	3980,c	;volatile
  9544                           
  9545                           ;lcd.c: 29: LATD = temp | LATD;
  9546  0029B8  0100               	movlb	0	; () banked
  9547  0029BA  5180               	movf	lcdNibble@temp& (0+255),w,b
  9548  0029BC  108C               	iorwf	3980,w,c	;volatile
  9549  0029BE  6E8C               	movwf	3980,c	;volatile
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  9553  0029C0  868C               	bsf	3980,3,c	;volatile
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9557  0029C2  0E42               	movlw	66
  9558  0029C4                     u5447:
  9559  0029C4  2EE8               	decfsz	wreg,f,c
  9560  0029C6  D7FE               	bra	u5447
  9561  0029C8  D000               	nop2	
  9562                           
  9563                           ;lcd.c: 33: LATDbits.LATD3 = 0;
  9564  0029CA  968C               	bcf	3980,3,c	;volatile
  9565                           
  9566                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9567  0029CC  0E42               	movlw	66
  9568  0029CE                     u5457:
  9569  0029CE  2EE8               	decfsz	wreg,f,c
  9570  0029D0  D7FE               	bra	u5457
  9571  0029D2  D000               	nop2	
  9572                           
  9573                           ;lcd.c: 36: data = data << 4;
  9574  0029D4  0100               	movlb	0	; () banked
  9575  0029D6  3981               	swapf	lcdNibble@data& (0+255),w,b
  9576  0029D8  0BF0               	andlw	240
  9577  0029DA  0100               	movlb	0	; () banked
  9578  0029DC  6F81               	movwf	lcdNibble@data& (0+255),b
  9579                           
  9580                           ;lcd.c: 38: temp = data & 0xF0;
  9581  0029DE  0100               	movlb	0	; () banked
  9582  0029E0  5181               	movf	lcdNibble@data& (0+255),w,b
  9583  0029E2  0BF0               	andlw	240
  9584  0029E4  0100               	movlb	0	; () banked
  9585  0029E6  6F80               	movwf	lcdNibble@temp& (0+255),b
  9586                           
  9587                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9588  0029E8  508C               	movf	3980,w,c	;volatile
  9589  0029EA  0B0F               	andlw	15
  9590  0029EC  6E8C               	movwf	3980,c	;volatile
  9591                           
  9592                           ;lcd.c: 40: LATD = temp | LATD;
  9593  0029EE  0100               	movlb	0	; () banked
  9594  0029F0  5180               	movf	lcdNibble@temp& (0+255),w,b
  9595  0029F2  108C               	iorwf	3980,w,c	;volatile
  9596  0029F4  6E8C               	movwf	3980,c	;volatile
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;lcd.c: 42: LATDbits.LATD3 = 1;
  9600  0029F6  868C               	bsf	3980,3,c	;volatile
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9604  0029F8  0E42               	movlw	66
  9605  0029FA                     u5467:
  9606  0029FA  2EE8               	decfsz	wreg,f,c
  9607  0029FC  D7FE               	bra	u5467
  9608  0029FE  D000               	nop2	
  9609                           
  9610                           ;lcd.c: 44: LATDbits.LATD3 = 0;
  9611  002A00  968C               	bcf	3980,3,c	;volatile
  9612                           
  9613                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9614  002A02  0E42               	movlw	66
  9615  002A04                     u5477:
  9616  002A04  2EE8               	decfsz	wreg,f,c
  9617  002A06  D7FE               	bra	u5477
  9618  002A08  D000               	nop2	
  9619  002A0A  0012               	return		;funcret
  9620  002A0C                     __end_of_lcdNibble:
  9621                           	opt stack 0
  9622                           tblptru	equ	0xFF8
  9623                           tblptrh	equ	0xFF7
  9624                           tblptrl	equ	0xFF6
  9625                           tablat	equ	0xFF5
  9626                           prodh	equ	0xFF4
  9627                           prodl	equ	0xFF3
  9628                           intcon	equ	0xFF2
  9629                           intcon2	equ	0xFF1
  9630                           intcon3	equ	0xFF0
  9631                           indf0	equ	0xFEF
  9632                           postinc0	equ	0xFEE
  9633                           fsr0h	equ	0xFEA
  9634                           fsr0l	equ	0xFE9
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function ___awmod *****************
  9646 ;; Defined at:
  9647 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  dividend        2    0[BANK0 ] int 
  9650 ;;  divisor         2    2[BANK0 ] int 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  sign            1    5[BANK0 ] unsigned char 
  9653 ;;  counter         1    4[BANK0 ] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  2    0[BANK0 ] int 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:        6 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    7
  9670 ;; This function calls:
  9671 ;;		Nothing
  9672 ;; This function is called by:
  9673 ;;		_UI
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text42
  9678  002584                     __ptext42:
  9679                           	opt stack 0
  9680  002584                     ___awmod:
  9681                           	opt stack 22
  9682                           
  9683                           ;incstack = 0
  9684  002584  0E00               	movlw	0
  9685  002586  0100               	movlb	0	; () banked
  9686  002588  6F85               	movwf	___awmod@sign& (0+255),b
  9687                           
  9688                           ; BSR set to: 0
  9689  00258A  0100               	movlb	0	; () banked
  9690  00258C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9691  00258E  D008               	goto	l5301
  9692                           
  9693                           ; BSR set to: 0
  9694  002590  0100               	movlb	0	; () banked
  9695  002592  6D80               	negf	___awmod@dividend& (0+255),b
  9696  002594  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9697  002596  B0D8               	btfsc	status,0,c
  9698  002598  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9699                           
  9700                           ; BSR set to: 0
  9701  00259A  0E01               	movlw	1
  9702  00259C  0100               	movlb	0	; () banked
  9703  00259E  6F85               	movwf	___awmod@sign& (0+255),b
  9704  0025A0                     l5301:
  9705                           
  9706                           ; BSR set to: 0
  9707  0025A0  0100               	movlb	0	; () banked
  9708  0025A2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9709  0025A4  D005               	goto	l5305
  9710                           
  9711                           ; BSR set to: 0
  9712  0025A6  0100               	movlb	0	; () banked
  9713  0025A8  6D82               	negf	___awmod@divisor& (0+255),b
  9714  0025AA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9715  0025AC  B0D8               	btfsc	status,0,c
  9716  0025AE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9717  0025B0                     l5305:
  9718                           
  9719                           ; BSR set to: 0
  9720  0025B0  0100               	movlb	0	; () banked
  9721  0025B2  5182               	movf	___awmod@divisor& (0+255),w,b
  9722  0025B4  0100               	movlb	0	; () banked
  9723  0025B6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9724  0025B8  B4D8               	btfsc	status,2,c
  9725  0025BA  D026               	goto	l5321
  9726                           
  9727                           ; BSR set to: 0
  9728  0025BC  0E01               	movlw	1
  9729  0025BE  0100               	movlb	0	; () banked
  9730  0025C0  6F84               	movwf	___awmod@counter& (0+255),b
  9731  0025C2  D006               	goto	l5311
  9732  0025C4                     l5309:
  9733                           
  9734                           ; BSR set to: 0
  9735  0025C4  0100               	movlb	0	; () banked
  9736  0025C6  90D8               	bcf	status,0,c
  9737  0025C8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9738  0025CA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9739  0025CC  0100               	movlb	0	; () banked
  9740  0025CE  2B84               	incf	___awmod@counter& (0+255),f,b
  9741  0025D0                     l5311:
  9742                           
  9743                           ; BSR set to: 0
  9744  0025D0  0100               	movlb	0	; () banked
  9745  0025D2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9746  0025D4  D7F7               	goto	l5309
  9747  0025D6                     l5313:
  9748                           
  9749                           ; BSR set to: 0
  9750  0025D6  0100               	movlb	0	; () banked
  9751  0025D8  5182               	movf	___awmod@divisor& (0+255),w,b
  9752  0025DA  0100               	movlb	0	; () banked
  9753  0025DC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9754  0025DE  0100               	movlb	0	; () banked
  9755  0025E0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9756  0025E2  0100               	movlb	0	; () banked
  9757  0025E4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9758  0025E6  A0D8               	btfss	status,0,c
  9759  0025E8  D008               	goto	l5317
  9760                           
  9761                           ; BSR set to: 0
  9762  0025EA  0100               	movlb	0	; () banked
  9763  0025EC  5182               	movf	___awmod@divisor& (0+255),w,b
  9764  0025EE  0100               	movlb	0	; () banked
  9765  0025F0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9766  0025F2  0100               	movlb	0	; () banked
  9767  0025F4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9768  0025F6  0100               	movlb	0	; () banked
  9769  0025F8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9770  0025FA                     l5317:
  9771                           
  9772                           ; BSR set to: 0
  9773  0025FA  0100               	movlb	0	; () banked
  9774  0025FC  90D8               	bcf	status,0,c
  9775  0025FE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9776  002600  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9777                           
  9778                           ; BSR set to: 0
  9779  002602  0100               	movlb	0	; () banked
  9780  002604  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9781  002606  D7E7               	goto	l5313
  9782  002608                     l5321:
  9783                           
  9784                           ; BSR set to: 0
  9785  002608  0100               	movlb	0	; () banked
  9786  00260A  5185               	movf	___awmod@sign& (0+255),w,b
  9787  00260C  0100               	movlb	0	; () banked
  9788  00260E  B4D8               	btfsc	status,2,c
  9789  002610  D005               	goto	l5325
  9790                           
  9791                           ; BSR set to: 0
  9792  002612  0100               	movlb	0	; () banked
  9793  002614  6D80               	negf	___awmod@dividend& (0+255),b
  9794  002616  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9795  002618  B0D8               	btfsc	status,0,c
  9796  00261A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9797  00261C                     l5325:
  9798                           
  9799                           ; BSR set to: 0
  9800  00261C  C080  F080         	movff	___awmod@dividend,?___awmod
  9801  002620  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9802  002624  0012               	return	
  9803  002626                     __end_of___awmod:
  9804                           	opt stack 0
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           intcon3	equ	0xFF0
  9814                           indf0	equ	0xFEF
  9815                           postinc0	equ	0xFEE
  9816                           fsr0h	equ	0xFEA
  9817                           fsr0l	equ	0xFE9
  9818                           wreg	equ	0xFE8
  9819                           postdec1	equ	0xFE5
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function ___awdiv *****************
  9829 ;; Defined at:
  9830 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  dividend        2    6[BANK0 ] int 
  9833 ;;  divisor         2    8[BANK0 ] int 
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  quotient        2   12[BANK0 ] int 
  9836 ;;  sign            1   11[BANK0 ] unsigned char 
  9837 ;;  counter         1   10[BANK0 ] unsigned char 
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  2    6[BANK0 ] int 
  9840 ;; Registers used:
  9841 ;;		wreg, status,2, status,0
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 0/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;Total ram usage:        8 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    7
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		_UI
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           	psect	text43
  9862  0022B4                     __ptext43:
  9863                           	opt stack 0
  9864  0022B4                     ___awdiv:
  9865                           	opt stack 22
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;incstack = 0
  9869  0022B4  0E00               	movlw	0
  9870  0022B6  0100               	movlb	0	; () banked
  9871  0022B8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874  0022BA  0100               	movlb	0	; () banked
  9875  0022BC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9876  0022BE  D008               	goto	l5257
  9877                           
  9878                           ; BSR set to: 0
  9879  0022C0  0100               	movlb	0	; () banked
  9880  0022C2  6D88               	negf	___awdiv@divisor& (0+255),b
  9881  0022C4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9882  0022C6  B0D8               	btfsc	status,0,c
  9883  0022C8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9884                           
  9885                           ; BSR set to: 0
  9886  0022CA  0E01               	movlw	1
  9887  0022CC  0100               	movlb	0	; () banked
  9888  0022CE  6F8B               	movwf	___awdiv@sign& (0+255),b
  9889  0022D0                     l5257:
  9890                           
  9891                           ; BSR set to: 0
  9892  0022D0  0100               	movlb	0	; () banked
  9893  0022D2  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9894  0022D4  D008               	goto	l5263
  9895                           
  9896                           ; BSR set to: 0
  9897  0022D6  0100               	movlb	0	; () banked
  9898  0022D8  6D86               	negf	___awdiv@dividend& (0+255),b
  9899  0022DA  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9900  0022DC  B0D8               	btfsc	status,0,c
  9901  0022DE  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9902                           
  9903                           ; BSR set to: 0
  9904  0022E0  0E01               	movlw	1
  9905  0022E2  0100               	movlb	0	; () banked
  9906  0022E4  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9907  0022E6                     l5263:
  9908                           
  9909                           ; BSR set to: 0
  9910  0022E6  0E00               	movlw	0
  9911  0022E8  0100               	movlb	0	; () banked
  9912  0022EA  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9913  0022EC  0E00               	movlw	0
  9914  0022EE  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9915                           
  9916                           ; BSR set to: 0
  9917  0022F0  0100               	movlb	0	; () banked
  9918  0022F2  5188               	movf	___awdiv@divisor& (0+255),w,b
  9919  0022F4  0100               	movlb	0	; () banked
  9920  0022F6  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9921  0022F8  B4D8               	btfsc	status,2,c
  9922  0022FA  D02C               	goto	l5285
  9923                           
  9924                           ; BSR set to: 0
  9925  0022FC  0E01               	movlw	1
  9926  0022FE  0100               	movlb	0	; () banked
  9927  002300  6F8A               	movwf	___awdiv@counter& (0+255),b
  9928  002302  D006               	goto	l5271
  9929  002304                     l5269:
  9930                           
  9931                           ; BSR set to: 0
  9932  002304  0100               	movlb	0	; () banked
  9933  002306  90D8               	bcf	status,0,c
  9934  002308  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9935  00230A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9936  00230C  0100               	movlb	0	; () banked
  9937  00230E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9938  002310                     l5271:
  9939                           
  9940                           ; BSR set to: 0
  9941  002310  0100               	movlb	0	; () banked
  9942  002312  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9943  002314  D7F7               	goto	l5269
  9944  002316                     l5273:
  9945                           
  9946                           ; BSR set to: 0
  9947  002316  0100               	movlb	0	; () banked
  9948  002318  90D8               	bcf	status,0,c
  9949  00231A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9950  00231C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9951                           
  9952                           ; BSR set to: 0
  9953  00231E  0100               	movlb	0	; () banked
  9954  002320  5188               	movf	___awdiv@divisor& (0+255),w,b
  9955  002322  0100               	movlb	0	; () banked
  9956  002324  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9957  002326  0100               	movlb	0	; () banked
  9958  002328  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9959  00232A  0100               	movlb	0	; () banked
  9960  00232C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9961  00232E  A0D8               	btfss	status,0,c
  9962  002330  D00A               	goto	l5281
  9963                           
  9964                           ; BSR set to: 0
  9965  002332  0100               	movlb	0	; () banked
  9966  002334  5188               	movf	___awdiv@divisor& (0+255),w,b
  9967  002336  0100               	movlb	0	; () banked
  9968  002338  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9969  00233A  0100               	movlb	0	; () banked
  9970  00233C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9971  00233E  0100               	movlb	0	; () banked
  9972  002340  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9973                           
  9974                           ; BSR set to: 0
  9975  002342  0100               	movlb	0	; () banked
  9976  002344  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9977  002346                     l5281:
  9978                           
  9979                           ; BSR set to: 0
  9980  002346  0100               	movlb	0	; () banked
  9981  002348  90D8               	bcf	status,0,c
  9982  00234A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9983  00234C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9984                           
  9985                           ; BSR set to: 0
  9986  00234E  0100               	movlb	0	; () banked
  9987  002350  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9988  002352  D7E1               	goto	l5273
  9989  002354                     l5285:
  9990                           
  9991                           ; BSR set to: 0
  9992  002354  0100               	movlb	0	; () banked
  9993  002356  518B               	movf	___awdiv@sign& (0+255),w,b
  9994  002358  0100               	movlb	0	; () banked
  9995  00235A  B4D8               	btfsc	status,2,c
  9996  00235C  D005               	goto	l5289
  9997                           
  9998                           ; BSR set to: 0
  9999  00235E  0100               	movlb	0	; () banked
 10000  002360  6D8C               	negf	___awdiv@quotient& (0+255),b
 10001  002362  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10002  002364  B0D8               	btfsc	status,0,c
 10003  002366  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10004  002368                     l5289:
 10005                           
 10006                           ; BSR set to: 0
 10007  002368  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10008  00236C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10009  002370  0012               	return	
 10010  002372                     __end_of___awdiv:
 10011                           	opt stack 0
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           intcon2	equ	0xFF1
 10020                           intcon3	equ	0xFF0
 10021                           indf0	equ	0xFEF
 10022                           postinc0	equ	0xFEE
 10023                           fsr0h	equ	0xFEA
 10024                           fsr0l	equ	0xFE9
 10025                           wreg	equ	0xFE8
 10026                           postdec1	equ	0xFE5
 10027                           fsr1l	equ	0xFE1
 10028                           indf2	equ	0xFDF
 10029                           postinc2	equ	0xFDE
 10030                           postdec2	equ	0xFDD
 10031                           fsr2h	equ	0xFDA
 10032                           fsr2l	equ	0xFD9
 10033                           status	equ	0xFD8
 10034                           
 10035 ;; *************** function _PortTestA5 *****************
 10036 ;; Defined at:
 10037 ;;		line 15 in file "PortHigh.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;		None
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;		None
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  1    wreg      void 
 10044 ;; Registers used:
 10045 ;;		None
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;Total ram usage:        0 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    7
 10058 ;; This function calls:
 10059 ;;		Nothing
 10060 ;; This function is called by:
 10061 ;;		_main
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           	psect	text44
 10066  00324C                     __ptext44:
 10067                           	opt stack 0
 10068  00324C                     _PortTestA5:
 10069                           	opt stack 23
 10070  00324C                     l99:
 10071  00324C  A281               	btfss	3969,1,c	;volatile
 10072  00324E  D7FE               	goto	l99
 10073                           
 10074                           ;PortHigh.c: 19: }
 10075                           ;PortHigh.c: 20: LATAbits.LATA5 = 1;
 10076  003250  8A89               	bsf	3977,5,c	;volatile
 10077  003252                     l102:
 10078  003252  B281               	btfsc	3969,1,c	;volatile
 10079  003254  D7FE               	goto	l102
 10080                           
 10081                           ;PortHigh.c: 23: }
 10082                           ;PortHigh.c: 24: __nop();
 10083  003256  F000               	nop	
 10084                           
 10085                           ;PortHigh.c: 25: __nop();
 10086  003258  F000               	nop	
 10087                           
 10088                           ;PortHigh.c: 26: LATAbits.LATA5 = 0;
 10089  00325A  9A89               	bcf	3977,5,c	;volatile
 10090  00325C  0012               	return		;funcret
 10091  00325E                     __end_of_PortTestA5:
 10092                           	opt stack 0
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           intcon	equ	0xFF2
 10100                           intcon2	equ	0xFF1
 10101                           intcon3	equ	0xFF0
 10102                           indf0	equ	0xFEF
 10103                           postinc0	equ	0xFEE
 10104                           fsr0h	equ	0xFEA
 10105                           fsr0l	equ	0xFE9
 10106                           wreg	equ	0xFE8
 10107                           postdec1	equ	0xFE5
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function _handler *****************
 10117 ;; Defined at:
 10118 ;;		line 16 in file "interruptHandler.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;		None
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10135 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;Total ram usage:       16 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    6
 10139 ;; This function calls:
 10140 ;;		_printSortTimer
 10141 ;;		_updateMenu
 10142 ;; This function is called by:
 10143 ;;		Interrupt level 2
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	intcode
 10148  000008                     __pintcode:
 10149                           	opt stack 0
 10150  000008                     _handler:
 10151                           	opt stack 18
 10152                           
 10153                           ;incstack = 0
 10154  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10155  00000A  EDE1  F00D         	call	int_func,f	;refresh shadow registers
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon2	equ	0xFF1
 10164                           intcon3	equ	0xFF0
 10165                           indf0	equ	0xFEF
 10166                           postinc0	equ	0xFEE
 10167                           fsr0h	equ	0xFEA
 10168                           fsr0l	equ	0xFE9
 10169                           wreg	equ	0xFE8
 10170                           postdec1	equ	0xFE5
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179                           	psect	intcode_body
 10180  001BC2                     __pintcode_body:
 10181                           	opt stack 18
 10182  001BC2                     int_func:
 10183                           	opt stack 18
 10184  001BC2  0006               	pop		; remove dummy address from shadow register refresh
 10185  001BC4  CFFA F04D          	movff	pclath,??_handler+2
 10186  001BC8  CFFB F04E          	movff	pclatu,??_handler+3
 10187  001BCC  CFE9 F04F          	movff	fsr0l,??_handler+4
 10188  001BD0  CFEA F050          	movff	fsr0h,??_handler+5
 10189  001BD4  CFE1 F051          	movff	fsr1l,??_handler+6
 10190  001BD8  CFE2 F052          	movff	fsr1h,??_handler+7
 10191  001BDC  CFD9 F053          	movff	fsr2l,??_handler+8
 10192  001BE0  CFDA F054          	movff	fsr2h,??_handler+9
 10193  001BE4  CFF3 F055          	movff	prodl,??_handler+10
 10194  001BE8  CFF4 F056          	movff	prodh,??_handler+11
 10195  001BEC  CFF6 F057          	movff	tblptrl,??_handler+12
 10196  001BF0  CFF7 F058          	movff	tblptrh,??_handler+13
 10197  001BF4  CFF8 F059          	movff	tblptru,??_handler+14
 10198  001BF8  CFF5 F05A          	movff	tablat,??_handler+15
 10199                           
 10200                           ;interruptHandler.c: 18: if(INT1IF){
 10201  001BFC  A0F0               	btfss	intcon3,0,c	;volatile
 10202  001BFE  D018               	goto	i2l6079
 10203                           
 10204                           ;interruptHandler.c: 19: INT1IF = 0;
 10205  001C00  90F0               	bcf	intcon3,0,c	;volatile
 10206                           
 10207                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 10208  001C02  0100               	movlb	0	; () banked
 10209  001C04  51FB               	movf	_machine_state& (0+255),w,b
 10210  001C06  A4D8               	btfss	status,2,c
 10211  001C08  D013               	goto	i2l6079
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 10215  001C0A  3881               	swapf	3969,w,c	;volatile
 10216  001C0C  0B0F               	andlw	15
 10217  001C0E  0B0F               	andlw	15
 10218  001C10  6E4B               	movwf	??_handler& (0+255),c
 10219  001C12  6A4C               	clrf	(??_handler+1)& (0+255),c
 10220  001C14  0E91               	movlw	low _keys
 10221  001C16  244B               	addwf	??_handler,w,c
 10222  001C18  6EF6               	movwf	tblptrl,c
 10223  001C1A  0EFD               	movlw	high _keys
 10224  001C1C  204C               	addwfc	??_handler+1,w,c
 10225  001C1E  6EF7               	movwf	tblptrh,c
 10226  001C20                     	if	1	;There are 3 active tblptr bytes
 10227  001C20  6AF8               	clrf	tblptru,c
 10228  001C22  0E00               	movlw	low (__mediumconst shr (0+16))
 10229  001C24  22F8               	addwfc	tblptru,f,c
 10230  001C26                     	endif
 10231  001C26  0008               	tblrd		*
 10232  001C28  CFF5 F07E          	movff	tablat,_input	;volatile
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;interruptHandler.c: 22: updateMenu();
 10236  001C2C  EC76  F009         	call	_updateMenu	;wreg free
 10237  001C30                     i2l6079:
 10238                           
 10239                           ;interruptHandler.c: 23: }
 10240                           ;interruptHandler.c: 24: }
 10241                           ;interruptHandler.c: 27: if(TMR0IF){
 10242  001C30  A4F2               	btfss	intcon,2,c	;volatile
 10243  001C32  D00C               	goto	i2l6093
 10244                           
 10245                           ;interruptHandler.c: 28: TMR0IF = 0;
 10246  001C34  94F2               	bcf	intcon,2,c	;volatile
 10247                           
 10248                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 10249  001C36  0100               	movlb	0	; () banked
 10250  001C38  05FB               	decf	_machine_state& (0+255),w,b
 10251  001C3A  A4D8               	btfss	status,2,c
 10252  001C3C  D007               	goto	i2l6093
 10253                           
 10254                           ; BSR set to: 0
 10255                           ;interruptHandler.c: 30: printSortTimer();
 10256  001C3E  ECF1  F00B         	call	_printSortTimer	;wreg free
 10257                           
 10258                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 10259  001C42  0E85               	movlw	133
 10260  001C44  6ED7               	movwf	4055,c	;volatile
 10261                           
 10262                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 10263  001C46  0EEE               	movlw	238
 10264  001C48  6ED6               	movwf	4054,c	;volatile
 10265                           
 10266                           ;interruptHandler.c: 34: TMR0ON = 1;
 10267  001C4A  8ED5               	bsf	4053,7,c	;volatile
 10268  001C4C                     i2l6093:
 10269                           
 10270                           ;interruptHandler.c: 35: }
 10271                           ;interruptHandler.c: 36: }
 10272                           ;interruptHandler.c: 39: if(TMR1IF){
 10273  001C4C  A09E               	btfss	3998,0,c	;volatile
 10274  001C4E  D024               	goto	i2l6117
 10275                           
 10276                           ;interruptHandler.c: 40: TMR1IF = 0;
 10277  001C50  909E               	bcf	3998,0,c	;volatile
 10278                           
 10279                           ;interruptHandler.c: 41: TMR1ON = 0;
 10280  001C52  90CD               	bcf	4045,0,c	;volatile
 10281                           
 10282                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 10283  001C54  0100               	movlb	0	; () banked
 10284  001C56  05FB               	decf	_machine_state& (0+255),w,b
 10285  001C58  A4D8               	btfss	status,2,c
 10286  001C5A  D01E               	goto	i2l6117
 10287                           
 10288                           ; BSR set to: 0
 10289                           ;interruptHandler.c: 43: if(was_low_1){
 10290  001C5C  507A               	movf	_was_low_1,w,c	;volatile
 10291  001C5E  107B               	iorwf	_was_low_1+1,w,c	;volatile
 10292  001C60  B4D8               	btfsc	status,2,c
 10293  001C62  D00A               	goto	i2l838
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 10297  001C64  828B               	bsf	3979,1,c	;volatile
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;interruptHandler.c: 45: was_low_1 = 0;
 10301  001C66  0E00               	movlw	0
 10302  001C68  6E7B               	movwf	_was_low_1+1,c	;volatile
 10303  001C6A  0E00               	movlw	0
 10304  001C6C  6E7A               	movwf	_was_low_1,c	;volatile
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 10308  001C6E  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 10312  001C72  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 10313                           
 10314                           ;interruptHandler.c: 48: }
 10315  001C76  D00F               	goto	i2l6115
 10316  001C78                     i2l838:
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;interruptHandler.c: 49: else{
 10320                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 10321  001C78  928B               	bcf	3979,1,c	;volatile
 10322                           
 10323                           ; BSR set to: 0
 10324                           ;interruptHandler.c: 51: was_low_1 = 1;
 10325  001C7A  0E00               	movlw	0
 10326  001C7C  6E7B               	movwf	_was_low_1+1,c	;volatile
 10327  001C7E  0E01               	movlw	1
 10328  001C80  6E7A               	movwf	_was_low_1,c	;volatile
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 10332  001C82  0101               	movlb	1	; () banked
 10333  001C84  511C               	movf	_servoTimes& (0+255),w,b
 10334  001C86  0800               	sublw	0
 10335  001C88  0F20               	addlw	32
 10336  001C8A  6ECF               	movwf	4047,c	;volatile
 10337                           
 10338                           ; BSR set to: 1
 10339                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 10340  001C8C  0101               	movlb	1	; () banked
 10341  001C8E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 10342  001C90  0800               	sublw	0
 10343  001C92  0F20               	addlw	32
 10344  001C94  6ECE               	movwf	4046,c	;volatile
 10345  001C96                     i2l6115:
 10346                           
 10347                           ;interruptHandler.c: 54: }
 10348                           ;interruptHandler.c: 55: TMR1ON = 1;
 10349  001C96  80CD               	bsf	4045,0,c	;volatile
 10350  001C98                     i2l6117:
 10351                           
 10352                           ;interruptHandler.c: 56: }
 10353                           ;interruptHandler.c: 57: }
 10354                           ;interruptHandler.c: 59: if(TMR3IF){
 10355  001C98  A2A1               	btfss	4001,1,c	;volatile
 10356  001C9A  D024               	goto	i2l844
 10357                           
 10358                           ;interruptHandler.c: 60: TMR3IF = 0;
 10359  001C9C  92A1               	bcf	4001,1,c	;volatile
 10360                           
 10361                           ;interruptHandler.c: 61: TMR3ON = 0;
 10362  001C9E  90B1               	bcf	4017,0,c	;volatile
 10363                           
 10364                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 10365  001CA0  0100               	movlb	0	; () banked
 10366  001CA2  05FB               	decf	_machine_state& (0+255),w,b
 10367  001CA4  A4D8               	btfss	status,2,c
 10368  001CA6  D01E               	goto	i2l844
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;interruptHandler.c: 63: if(was_low_3){
 10372  001CA8  507C               	movf	_was_low_3,w,c	;volatile
 10373  001CAA  107D               	iorwf	_was_low_3+1,w,c	;volatile
 10374  001CAC  B4D8               	btfsc	status,2,c
 10375  001CAE  D00A               	goto	i2l842
 10376                           
 10377                           ; BSR set to: 0
 10378                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 10379  001CB0  848B               	bsf	3979,2,c	;volatile
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;interruptHandler.c: 65: was_low_3 = 0;
 10383  001CB2  0E00               	movlw	0
 10384  001CB4  6E7D               	movwf	_was_low_3+1,c	;volatile
 10385  001CB6  0E00               	movlw	0
 10386  001CB8  6E7C               	movwf	_was_low_3,c	;volatile
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 10390  001CBA  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 10394  001CBE  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 10395                           
 10396                           ;interruptHandler.c: 68: }
 10397  001CC2  D00F               	goto	i2l6139
 10398  001CC4                     i2l842:
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;interruptHandler.c: 69: else{
 10402                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 10403  001CC4  948B               	bcf	3979,2,c	;volatile
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;interruptHandler.c: 71: was_low_3 = 1;
 10407  001CC6  0E00               	movlw	0
 10408  001CC8  6E7D               	movwf	_was_low_3+1,c	;volatile
 10409  001CCA  0E01               	movlw	1
 10410  001CCC  6E7C               	movwf	_was_low_3,c	;volatile
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 10414  001CCE  0101               	movlb	1	; () banked
 10415  001CD0  5120               	movf	(_servoTimes+4)& (0+255),w,b
 10416  001CD2  0800               	sublw	0
 10417  001CD4  0F20               	addlw	32
 10418  001CD6  6EB3               	movwf	4019,c	;volatile
 10419                           
 10420                           ; BSR set to: 1
 10421                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 10422  001CD8  0101               	movlb	1	; () banked
 10423  001CDA  5122               	movf	(_servoTimes+6)& (0+255),w,b
 10424  001CDC  0800               	sublw	0
 10425  001CDE  0F20               	addlw	32
 10426  001CE0  6EB2               	movwf	4018,c	;volatile
 10427  001CE2                     i2l6139:
 10428                           
 10429                           ;interruptHandler.c: 74: }
 10430                           ;interruptHandler.c: 75: TMR3ON = 1;
 10431  001CE2  80B1               	bsf	4017,0,c	;volatile
 10432  001CE4                     i2l844:
 10433  001CE4  C05A  FFF5         	movff	??_handler+15,tablat
 10434  001CE8  C059  FFF8         	movff	??_handler+14,tblptru
 10435  001CEC  C058  FFF7         	movff	??_handler+13,tblptrh
 10436  001CF0  C057  FFF6         	movff	??_handler+12,tblptrl
 10437  001CF4  C056  FFF4         	movff	??_handler+11,prodh
 10438  001CF8  C055  FFF3         	movff	??_handler+10,prodl
 10439  001CFC  C054  FFDA         	movff	??_handler+9,fsr2h
 10440  001D00  C053  FFD9         	movff	??_handler+8,fsr2l
 10441  001D04  C052  FFE2         	movff	??_handler+7,fsr1h
 10442  001D08  C051  FFE1         	movff	??_handler+6,fsr1l
 10443  001D0C  C050  FFEA         	movff	??_handler+5,fsr0h
 10444  001D10  C04F  FFE9         	movff	??_handler+4,fsr0l
 10445  001D14  C04E  FFFB         	movff	??_handler+3,pclatu
 10446  001D18  C04D  FFFA         	movff	??_handler+2,pclath
 10447  001D1C  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10448  001D1E  0011               	retfie		f
 10449  001D20                     __end_of_handler:
 10450                           	opt stack 0
 10451                           pclatu	equ	0xFFB
 10452                           pclath	equ	0xFFA
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           intcon2	equ	0xFF1
 10461                           intcon3	equ	0xFF0
 10462                           indf0	equ	0xFEF
 10463                           postinc0	equ	0xFEE
 10464                           fsr0h	equ	0xFEA
 10465                           fsr0l	equ	0xFE9
 10466                           wreg	equ	0xFE8
 10467                           postdec1	equ	0xFE5
 10468                           fsr1h	equ	0xFE2
 10469                           fsr1l	equ	0xFE1
 10470                           indf2	equ	0xFDF
 10471                           postinc2	equ	0xFDE
 10472                           postdec2	equ	0xFDD
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _updateMenu *****************
 10478 ;; Defined at:
 10479 ;;		line 209 in file "UI.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;		None
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  1    wreg      void 
 10486 ;; Registers used:
 10487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;Total ram usage:        2 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    5
 10500 ;; This function calls:
 10501 ;;		_change_state_to_logs_11
 10502 ;;		_change_state_to_logs_12
 10503 ;;		_change_state_to_logs_22
 10504 ;;		_change_state_to_logs_23
 10505 ;;		_change_state_to_logs_33
 10506 ;;		_change_state_to_logs_34
 10507 ;;		_change_state_to_menu_11
 10508 ;;		_change_state_to_menu_23
 10509 ;;		_dispLogs
 10510 ;;		_inputHandler
 10511 ;;		i2_change_state_to_menu_12
 10512 ;;		i2_change_state_to_menu_22
 10513 ;;		i2_change_state_to_menu_start
 10514 ;; This function is called by:
 10515 ;;		_handler
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text46
 10520  0012EC                     __ptext46:
 10521                           	opt stack 0
 10522  0012EC                     _updateMenu:
 10523                           	opt stack 18
 10524                           
 10525                           ;UI.c: 210: up = 0; down = 0; enter = 0; back = 0;
 10526                           
 10527                           ;incstack = 0
 10528  0012EC  0E00               	movlw	0
 10529  0012EE  6E79               	movwf	_up+1,c
 10530  0012F0  0E00               	movlw	0
 10531  0012F2  6E78               	movwf	_up,c
 10532  0012F4  0E00               	movlw	0
 10533  0012F6  6E71               	movwf	_down+1,c
 10534  0012F8  0E00               	movlw	0
 10535  0012FA  6E70               	movwf	_down,c
 10536  0012FC  0E00               	movlw	0
 10537  0012FE  6E73               	movwf	_enter+1,c
 10538  001300  0E00               	movlw	0
 10539  001302  6E72               	movwf	_enter,c
 10540  001304  0E00               	movlw	0
 10541  001306  6E65               	movwf	_back+1,c
 10542  001308  0E00               	movlw	0
 10543  00130A  6E64               	movwf	_back,c
 10544                           
 10545                           ;UI.c: 211: (INTCONbits.GIE = 0);
 10546  00130C  9EF2               	bcf	intcon,7,c	;volatile
 10547                           
 10548                           ;UI.c: 213: if (inputHandler()
 10549                           ;UI.c: 216: ){
 10550  00130E  ECEE  F00C         	call	_inputHandler	;wreg free
 10551  001312  502A               	movf	?_inputHandler,w,c
 10552  001314  102B               	iorwf	?_inputHandler+1,w,c
 10553  001316  A4D8               	btfss	status,2,c
 10554  001318  D112               	goto	i2l5847
 10555  00131A  D146               	goto	i2l267
 10556  00131C                     i2l5699:
 10557                           
 10558                           ;UI.c: 220: change_state_to_menu_11();
 10559  00131C  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 10560                           
 10561                           ;UI.c: 221: break;
 10562  001320  D143               	goto	i2l267
 10563  001322                     i2l5701:
 10564                           
 10565                           ;UI.c: 224: if(up){
 10566  001322  5078               	movf	_up,w,c
 10567  001324  1079               	iorwf	_up+1,w,c
 10568  001326  B4D8               	btfsc	status,2,c
 10569  001328  D003               	goto	i2l5705
 10570                           
 10571                           ;UI.c: 225: change_state_to_menu_23();
 10572  00132A  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10573                           
 10574                           ;UI.c: 226: }
 10575  00132E  D13C               	goto	i2l267
 10576  001330                     i2l5705:
 10577                           
 10578                           ;UI.c: 227: else if(down){
 10579  001330  5070               	movf	_down,w,c
 10580  001332  1071               	iorwf	_down+1,w,c
 10581  001334  B4D8               	btfsc	status,2,c
 10582  001336  D003               	goto	i2l5709
 10583                           
 10584                           ;UI.c: 228: change_state_to_menu_12();
 10585  001338  EC3C  F017         	call	i2_change_state_to_menu_12	;wreg free
 10586                           
 10587                           ;UI.c: 229: }
 10588  00133C  D135               	goto	i2l267
 10589  00133E                     i2l5709:
 10590                           
 10591                           ;UI.c: 230: else if(enter){
 10592  00133E  5072               	movf	_enter,w,c
 10593  001340  1073               	iorwf	_enter+1,w,c
 10594  001342  B4D8               	btfsc	status,2,c
 10595  001344  D131               	goto	i2l267
 10596                           
 10597                           ;UI.c: 231: change_state_to_menu_start();
 10598  001346  EC6B  F018         	call	i2_change_state_to_menu_start	;wreg free
 10599                           
 10600                           ;UI.c: 232: }
 10601                           ;UI.c: 233: break;
 10602  00134A  D12E               	goto	i2l267
 10603  00134C                     i2l5713:
 10604                           
 10605                           ;UI.c: 236: if(up){
 10606  00134C  5078               	movf	_up,w,c
 10607  00134E  1079               	iorwf	_up+1,w,c
 10608  001350  B4D8               	btfsc	status,2,c
 10609  001352  D003               	goto	i2l5717
 10610                           
 10611                           ;UI.c: 237: change_state_to_menu_11();
 10612  001354  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 10613                           
 10614                           ;UI.c: 238: }
 10615  001358  D127               	goto	i2l267
 10616  00135A                     i2l5717:
 10617                           
 10618                           ;UI.c: 239: else if(down){
 10619  00135A  5070               	movf	_down,w,c
 10620  00135C  1071               	iorwf	_down+1,w,c
 10621  00135E  B4D8               	btfsc	status,2,c
 10622  001360  D011               	goto	i2l5733
 10623                           
 10624                           ;UI.c: 240: change_state_to_menu_23();
 10625  001362  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10626                           
 10627                           ;UI.c: 241: }
 10628  001366  D120               	goto	i2l267
 10629  001368                     i2l5725:
 10630                           
 10631                           ;UI.c: 248: if(up){
 10632  001368  5078               	movf	_up,w,c
 10633  00136A  1079               	iorwf	_up+1,w,c
 10634  00136C  B4D8               	btfsc	status,2,c
 10635  00136E  D003               	goto	i2l5729
 10636                           
 10637                           ;UI.c: 249: change_state_to_menu_11();
 10638  001370  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 10639                           
 10640                           ;UI.c: 250: }
 10641  001374  D119               	goto	i2l267
 10642  001376                     i2l5729:
 10643                           
 10644                           ;UI.c: 251: else if(down){
 10645  001376  5070               	movf	_down,w,c
 10646  001378  1071               	iorwf	_down+1,w,c
 10647  00137A  B4D8               	btfsc	status,2,c
 10648  00137C  D003               	goto	i2l5733
 10649                           
 10650                           ;UI.c: 252: change_state_to_menu_23();
 10651  00137E  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10652                           
 10653                           ;UI.c: 253: }
 10654  001382  D112               	goto	i2l267
 10655  001384                     i2l5733:
 10656                           
 10657                           ;UI.c: 254: else if(enter){
 10658  001384  5072               	movf	_enter,w,c
 10659  001386  1073               	iorwf	_enter+1,w,c
 10660  001388  B4D8               	btfsc	status,2,c
 10661  00138A  D10E               	goto	i2l267
 10662                           
 10663                           ;UI.c: 255: machine_state = Sorting_state;
 10664  00138C  0E01               	movlw	1
 10665  00138E  0100               	movlb	0	; () banked
 10666  001390  6FFB               	movwf	_machine_state& (0+255),b
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;UI.c: 256: }
 10670                           ;UI.c: 257: break;
 10671                           
 10672                           ; BSR set to: 0
 10673                           
 10674                           ; BSR set to: 0
 10675  001392  D10A               	goto	i2l267
 10676  001394                     i2l5737:
 10677                           
 10678                           ;UI.c: 260: if(up){
 10679  001394  5078               	movf	_up,w,c
 10680  001396  1079               	iorwf	_up+1,w,c
 10681  001398  B4D8               	btfsc	status,2,c
 10682  00139A  D003               	goto	i2l5741
 10683                           
 10684                           ;UI.c: 261: change_state_to_menu_22();
 10685  00139C  EC24  F017         	call	i2_change_state_to_menu_22	;wreg free
 10686                           
 10687                           ;UI.c: 262: }
 10688  0013A0  D103               	goto	i2l267
 10689  0013A2                     i2l5741:
 10690                           
 10691                           ;UI.c: 263: else if(down){
 10692  0013A2  5070               	movf	_down,w,c
 10693  0013A4  1071               	iorwf	_down+1,w,c
 10694  0013A6  B4D8               	btfsc	status,2,c
 10695  0013A8  D003               	goto	i2l5745
 10696                           
 10697                           ;UI.c: 264: change_state_to_menu_11();
 10698  0013AA  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 10699                           
 10700                           ;UI.c: 265: }
 10701  0013AE  D0FC               	goto	i2l267
 10702  0013B0                     i2l5745:
 10703                           
 10704                           ;UI.c: 266: else if(enter){
 10705  0013B0  5072               	movf	_enter,w,c
 10706  0013B2  1073               	iorwf	_enter+1,w,c
 10707  0013B4  B4D8               	btfsc	status,2,c
 10708  0013B6  D0F8               	goto	i2l267
 10709                           
 10710                           ;UI.c: 267: change_state_to_logs_11();
 10711  0013B8  ECE4  F017         	call	_change_state_to_logs_11	;wreg free
 10712                           
 10713                           ;UI.c: 268: }
 10714                           ;UI.c: 269: break;
 10715  0013BC  D0F5               	goto	i2l267
 10716  0013BE                     i2l5749:
 10717                           
 10718                           ;UI.c: 272: if(up){
 10719  0013BE  5078               	movf	_up,w,c
 10720  0013C0  1079               	iorwf	_up+1,w,c
 10721  0013C2  B4D8               	btfsc	status,2,c
 10722  0013C4  D003               	goto	i2l5753
 10723                           
 10724                           ;UI.c: 273: change_state_to_logs_34();
 10725  0013C6  EC84  F017         	call	_change_state_to_logs_34	;wreg free
 10726                           
 10727                           ;UI.c: 274: }
 10728  0013CA  D0EE               	goto	i2l267
 10729  0013CC                     i2l5753:
 10730                           
 10731                           ;UI.c: 275: else if(down){
 10732  0013CC  5070               	movf	_down,w,c
 10733  0013CE  1071               	iorwf	_down+1,w,c
 10734  0013D0  B4D8               	btfsc	status,2,c
 10735  0013D2  D003               	goto	i2l5757
 10736                           
 10737                           ;UI.c: 276: change_state_to_logs_12();
 10738  0013D4  ECCC  F017         	call	_change_state_to_logs_12	;wreg free
 10739                           
 10740                           ;UI.c: 277: }
 10741  0013D8  D0E7               	goto	i2l267
 10742  0013DA                     i2l5757:
 10743                           
 10744                           ;UI.c: 278: else if(enter){
 10745  0013DA  5072               	movf	_enter,w,c
 10746  0013DC  1073               	iorwf	_enter+1,w,c
 10747  0013DE  B4D8               	btfsc	status,2,c
 10748  0013E0  D007               	goto	i2l5761
 10749                           
 10750                           ;UI.c: 279: dispLogs(1);
 10751  0013E2  0E00               	movlw	0
 10752  0013E4  6E13               	movwf	dispLogs@myLog+1,c
 10753  0013E6  0E01               	movlw	1
 10754  0013E8  6E12               	movwf	dispLogs@myLog,c
 10755  0013EA  ECB7  F018         	call	_dispLogs	;wreg free
 10756                           
 10757                           ;UI.c: 280: }
 10758  0013EE  D0DC               	goto	i2l267
 10759  0013F0                     i2l5761:
 10760                           
 10761                           ;UI.c: 281: else if(back){
 10762  0013F0  5064               	movf	_back,w,c
 10763  0013F2  1065               	iorwf	_back+1,w,c
 10764  0013F4  B4D8               	btfsc	status,2,c
 10765  0013F6  D0D8               	goto	i2l267
 10766                           
 10767                           ;UI.c: 282: change_state_to_menu_23();
 10768  0013F8  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10769                           
 10770                           ;UI.c: 283: }
 10771                           ;UI.c: 284: break;
 10772  0013FC  D0D5               	goto	i2l267
 10773  0013FE                     i2l5765:
 10774                           
 10775                           ;UI.c: 287: if(up){
 10776  0013FE  5078               	movf	_up,w,c
 10777  001400  1079               	iorwf	_up+1,w,c
 10778  001402  B4D8               	btfsc	status,2,c
 10779  001404  D003               	goto	i2l5769
 10780                           
 10781                           ;UI.c: 288: change_state_to_logs_11();
 10782  001406  ECE4  F017         	call	_change_state_to_logs_11	;wreg free
 10783                           
 10784                           ;UI.c: 289: }
 10785  00140A  D0CE               	goto	i2l267
 10786  00140C                     i2l5769:
 10787                           
 10788                           ;UI.c: 290: else if(down){
 10789  00140C  5070               	movf	_down,w,c
 10790  00140E  1071               	iorwf	_down+1,w,c
 10791  001410  B4D8               	btfsc	status,2,c
 10792  001412  D003               	goto	i2l5773
 10793                           
 10794                           ;UI.c: 291: change_state_to_logs_23();
 10795  001414  EC13  F018         	call	_change_state_to_logs_23	;wreg free
 10796                           
 10797                           ;UI.c: 292: }
 10798  001418  D0C7               	goto	i2l267
 10799  00141A                     i2l5773:
 10800                           
 10801                           ;UI.c: 293: else if(enter){
 10802  00141A  5072               	movf	_enter,w,c
 10803  00141C  1073               	iorwf	_enter+1,w,c
 10804  00141E  B4D8               	btfsc	status,2,c
 10805  001420  D007               	goto	i2l5777
 10806                           
 10807                           ;UI.c: 294: dispLogs(2);
 10808  001422  0E00               	movlw	0
 10809  001424  6E13               	movwf	dispLogs@myLog+1,c
 10810  001426  0E02               	movlw	2
 10811  001428  6E12               	movwf	dispLogs@myLog,c
 10812  00142A  ECB7  F018         	call	_dispLogs	;wreg free
 10813                           
 10814                           ;UI.c: 295: }
 10815  00142E  D0BC               	goto	i2l267
 10816  001430                     i2l5777:
 10817                           
 10818                           ;UI.c: 296: else if(back){
 10819  001430  5064               	movf	_back,w,c
 10820  001432  1065               	iorwf	_back+1,w,c
 10821  001434  B4D8               	btfsc	status,2,c
 10822  001436  D0B8               	goto	i2l267
 10823                           
 10824                           ;UI.c: 297: change_state_to_menu_23();
 10825  001438  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10826                           
 10827                           ;UI.c: 298: }
 10828                           ;UI.c: 299: break;
 10829  00143C  D0B5               	goto	i2l267
 10830  00143E                     i2l5781:
 10831                           
 10832                           ;UI.c: 302: if(up){
 10833  00143E  5078               	movf	_up,w,c
 10834  001440  1079               	iorwf	_up+1,w,c
 10835  001442  B4D8               	btfsc	status,2,c
 10836  001444  D003               	goto	i2l5785
 10837                           
 10838                           ;UI.c: 303: change_state_to_logs_11();
 10839  001446  ECE4  F017         	call	_change_state_to_logs_11	;wreg free
 10840                           
 10841                           ;UI.c: 304: }
 10842  00144A  D0AE               	goto	i2l267
 10843  00144C                     i2l5785:
 10844                           
 10845                           ;UI.c: 305: else if(down){
 10846  00144C  5070               	movf	_down,w,c
 10847  00144E  1071               	iorwf	_down+1,w,c
 10848  001450  B4D8               	btfsc	status,2,c
 10849  001452  D003               	goto	i2l5789
 10850                           
 10851                           ;UI.c: 306: change_state_to_logs_23();
 10852  001454  EC13  F018         	call	_change_state_to_logs_23	;wreg free
 10853                           
 10854                           ;UI.c: 307: }
 10855  001458  D0A7               	goto	i2l267
 10856  00145A                     i2l5789:
 10857                           
 10858                           ;UI.c: 308: else if(enter){
 10859  00145A  5072               	movf	_enter,w,c
 10860  00145C  1073               	iorwf	_enter+1,w,c
 10861  00145E  B4D8               	btfsc	status,2,c
 10862  001460  D007               	goto	i2l5793
 10863                           
 10864                           ;UI.c: 309: dispLogs(2);
 10865  001462  0E00               	movlw	0
 10866  001464  6E13               	movwf	dispLogs@myLog+1,c
 10867  001466  0E02               	movlw	2
 10868  001468  6E12               	movwf	dispLogs@myLog,c
 10869  00146A  ECB7  F018         	call	_dispLogs	;wreg free
 10870                           
 10871                           ;UI.c: 310: }
 10872  00146E  D09C               	goto	i2l267
 10873  001470                     i2l5793:
 10874                           
 10875                           ;UI.c: 311: else if(back){
 10876  001470  5064               	movf	_back,w,c
 10877  001472  1065               	iorwf	_back+1,w,c
 10878  001474  B4D8               	btfsc	status,2,c
 10879  001476  D098               	goto	i2l267
 10880                           
 10881                           ;UI.c: 312: change_state_to_menu_23();
 10882  001478  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10883                           
 10884                           ;UI.c: 313: }
 10885                           ;UI.c: 314: break;
 10886  00147C  D095               	goto	i2l267
 10887  00147E                     i2l5797:
 10888                           
 10889                           ;UI.c: 317: if(up){
 10890  00147E  5078               	movf	_up,w,c
 10891  001480  1079               	iorwf	_up+1,w,c
 10892  001482  B4D8               	btfsc	status,2,c
 10893  001484  D003               	goto	i2l5801
 10894                           
 10895                           ;UI.c: 318: change_state_to_logs_22();
 10896  001486  ECB4  F017         	call	_change_state_to_logs_22	;wreg free
 10897                           
 10898                           ;UI.c: 319: }
 10899  00148A  D08E               	goto	i2l267
 10900  00148C                     i2l5801:
 10901                           
 10902                           ;UI.c: 320: else if(down){
 10903  00148C  5070               	movf	_down,w,c
 10904  00148E  1071               	iorwf	_down+1,w,c
 10905  001490  B4D8               	btfsc	status,2,c
 10906  001492  D003               	goto	i2l5805
 10907                           
 10908                           ;UI.c: 321: change_state_to_logs_34();
 10909  001494  EC84  F017         	call	_change_state_to_logs_34	;wreg free
 10910                           
 10911                           ;UI.c: 322: }
 10912  001498  D087               	goto	i2l267
 10913  00149A                     i2l5805:
 10914                           
 10915                           ;UI.c: 323: else if(enter){
 10916  00149A  5072               	movf	_enter,w,c
 10917  00149C  1073               	iorwf	_enter+1,w,c
 10918  00149E  B4D8               	btfsc	status,2,c
 10919  0014A0  D007               	goto	i2l5809
 10920                           
 10921                           ;UI.c: 324: dispLogs(3);
 10922  0014A2  0E00               	movlw	0
 10923  0014A4  6E13               	movwf	dispLogs@myLog+1,c
 10924  0014A6  0E03               	movlw	3
 10925  0014A8  6E12               	movwf	dispLogs@myLog,c
 10926  0014AA  ECB7  F018         	call	_dispLogs	;wreg free
 10927                           
 10928                           ;UI.c: 325: }
 10929  0014AE  D07C               	goto	i2l267
 10930  0014B0                     i2l5809:
 10931                           
 10932                           ;UI.c: 326: else if(back){
 10933  0014B0  5064               	movf	_back,w,c
 10934  0014B2  1065               	iorwf	_back+1,w,c
 10935  0014B4  B4D8               	btfsc	status,2,c
 10936  0014B6  D078               	goto	i2l267
 10937                           
 10938                           ;UI.c: 327: change_state_to_menu_23();
 10939  0014B8  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10940                           
 10941                           ;UI.c: 328: }
 10942                           ;UI.c: 329: break;
 10943  0014BC  D075               	goto	i2l267
 10944  0014BE                     i2l5813:
 10945                           
 10946                           ;UI.c: 332: if(up){
 10947  0014BE  5078               	movf	_up,w,c
 10948  0014C0  1079               	iorwf	_up+1,w,c
 10949  0014C2  B4D8               	btfsc	status,2,c
 10950  0014C4  D003               	goto	i2l5817
 10951                           
 10952                           ;UI.c: 333: change_state_to_logs_22();
 10953  0014C6  ECB4  F017         	call	_change_state_to_logs_22	;wreg free
 10954                           
 10955                           ;UI.c: 334: }
 10956  0014CA  D06E               	goto	i2l267
 10957  0014CC                     i2l5817:
 10958                           
 10959                           ;UI.c: 335: else if(down){
 10960  0014CC  5070               	movf	_down,w,c
 10961  0014CE  1071               	iorwf	_down+1,w,c
 10962  0014D0  B4D8               	btfsc	status,2,c
 10963  0014D2  D003               	goto	i2l5821
 10964                           
 10965                           ;UI.c: 336: change_state_to_logs_34();
 10966  0014D4  EC84  F017         	call	_change_state_to_logs_34	;wreg free
 10967                           
 10968                           ;UI.c: 337: }
 10969  0014D8  D067               	goto	i2l267
 10970  0014DA                     i2l5821:
 10971                           
 10972                           ;UI.c: 338: else if(enter){
 10973  0014DA  5072               	movf	_enter,w,c
 10974  0014DC  1073               	iorwf	_enter+1,w,c
 10975  0014DE  B4D8               	btfsc	status,2,c
 10976  0014E0  D007               	goto	i2l5825
 10977                           
 10978                           ;UI.c: 339: dispLogs(3);
 10979  0014E2  0E00               	movlw	0
 10980  0014E4  6E13               	movwf	dispLogs@myLog+1,c
 10981  0014E6  0E03               	movlw	3
 10982  0014E8  6E12               	movwf	dispLogs@myLog,c
 10983  0014EA  ECB7  F018         	call	_dispLogs	;wreg free
 10984                           
 10985                           ;UI.c: 340: }
 10986  0014EE  D05C               	goto	i2l267
 10987  0014F0                     i2l5825:
 10988                           
 10989                           ;UI.c: 341: else if(back){
 10990  0014F0  5064               	movf	_back,w,c
 10991  0014F2  1065               	iorwf	_back+1,w,c
 10992  0014F4  B4D8               	btfsc	status,2,c
 10993  0014F6  D058               	goto	i2l267
 10994                           
 10995                           ;UI.c: 342: change_state_to_menu_23();
 10996  0014F8  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 10997                           
 10998                           ;UI.c: 343: }
 10999                           ;UI.c: 344: break;
 11000  0014FC  D055               	goto	i2l267
 11001  0014FE                     i2l5829:
 11002                           
 11003                           ;UI.c: 347: if(up){
 11004  0014FE  5078               	movf	_up,w,c
 11005  001500  1079               	iorwf	_up+1,w,c
 11006  001502  B4D8               	btfsc	status,2,c
 11007  001504  D003               	goto	i2l5833
 11008                           
 11009                           ;UI.c: 348: change_state_to_logs_33();
 11010  001506  EC9C  F017         	call	_change_state_to_logs_33	;wreg free
 11011                           
 11012                           ;UI.c: 349: }
 11013  00150A  D04E               	goto	i2l267
 11014  00150C                     i2l5833:
 11015                           
 11016                           ;UI.c: 350: else if(down){
 11017  00150C  5070               	movf	_down,w,c
 11018  00150E  1071               	iorwf	_down+1,w,c
 11019  001510  B4D8               	btfsc	status,2,c
 11020  001512  D003               	goto	i2l5837
 11021                           
 11022                           ;UI.c: 351: change_state_to_logs_11();
 11023  001514  ECE4  F017         	call	_change_state_to_logs_11	;wreg free
 11024                           
 11025                           ;UI.c: 352: }
 11026  001518  D047               	goto	i2l267
 11027  00151A                     i2l5837:
 11028                           
 11029                           ;UI.c: 353: else if(enter){
 11030  00151A  5072               	movf	_enter,w,c
 11031  00151C  1073               	iorwf	_enter+1,w,c
 11032  00151E  B4D8               	btfsc	status,2,c
 11033  001520  D007               	goto	i2l5841
 11034                           
 11035                           ;UI.c: 354: dispLogs(4);
 11036  001522  0E00               	movlw	0
 11037  001524  6E13               	movwf	dispLogs@myLog+1,c
 11038  001526  0E04               	movlw	4
 11039  001528  6E12               	movwf	dispLogs@myLog,c
 11040  00152A  ECB7  F018         	call	_dispLogs	;wreg free
 11041                           
 11042                           ;UI.c: 355: }
 11043  00152E  D03C               	goto	i2l267
 11044  001530                     i2l5841:
 11045                           
 11046                           ;UI.c: 356: else if(back){
 11047  001530  5064               	movf	_back,w,c
 11048  001532  1065               	iorwf	_back+1,w,c
 11049  001534  B4D8               	btfsc	status,2,c
 11050  001536  D038               	goto	i2l267
 11051                           
 11052                           ;UI.c: 357: change_state_to_menu_23();
 11053  001538  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 11054                           
 11055                           ;UI.c: 363: }
 11056                           
 11057                           ;UI.c: 362: break;
 11058                           
 11059                           ;UI.c: 361: default:
 11060                           
 11061                           ;UI.c: 358: }
 11062                           ;UI.c: 359: break;
 11063  00153C  D035               	goto	i2l267
 11064  00153E                     i2l5847:
 11065  00153E  C0DB  F043         	movff	_cur_state,??_updateMenu
 11066  001542  C0DC  F044         	movff	_cur_state+1,??_updateMenu+1
 11067                           
 11068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 11069                           ; Switch size 1, requested type "space"
 11070                           ; Number of cases is 3, Range of values is 0 to 4
 11071                           ; switch strategies available:
 11072                           ; Name         Instructions Cycles
 11073                           ; simple_byte           10     6 (average)
 11074                           ;	Chosen strategy is simple_byte
 11075  001546  5044               	movf	??_updateMenu+1,w,c
 11076  001548  0A00               	xorlw	0	; case 0
 11077  00154A  B4D8               	btfsc	status,2,c
 11078  00154C  D007               	goto	i2l6349
 11079  00154E  0A03               	xorlw	3	; case 3
 11080  001550  B4D8               	btfsc	status,2,c
 11081  001552  D015               	goto	i2l6351
 11082  001554  0A07               	xorlw	7	; case 4
 11083  001556  B4D8               	btfsc	status,2,c
 11084  001558  D020               	goto	i2l6353
 11085  00155A  D026               	goto	i2l267
 11086  00155C                     i2l6349:
 11087                           
 11088                           ; Switch size 1, requested type "space"
 11089                           ; Number of cases is 5, Range of values is 0 to 23
 11090                           ; switch strategies available:
 11091                           ; Name         Instructions Cycles
 11092                           ; simple_byte           16     9 (average)
 11093                           ;	Chosen strategy is simple_byte
 11094  00155C  5043               	movf	??_updateMenu,w,c
 11095  00155E  0A00               	xorlw	0	; case 0
 11096  001560  B4D8               	btfsc	status,2,c
 11097  001562  D6DC               	goto	i2l5699
 11098  001564  0A0B               	xorlw	11	; case 11
 11099  001566  B4D8               	btfsc	status,2,c
 11100  001568  D6DC               	goto	i2l5701
 11101  00156A  0A07               	xorlw	7	; case 12
 11102  00156C  B4D8               	btfsc	status,2,c
 11103  00156E  D6EE               	goto	i2l5713
 11104  001570  0A1A               	xorlw	26	; case 22
 11105  001572  B4D8               	btfsc	status,2,c
 11106  001574  D6F9               	goto	i2l5725
 11107  001576  0A01               	xorlw	1	; case 23
 11108  001578  B4D8               	btfsc	status,2,c
 11109  00157A  D70C               	goto	i2l5737
 11110  00157C  D015               	goto	i2l267
 11111  00157E                     i2l6351:
 11112                           
 11113                           ; Switch size 1, requested type "space"
 11114                           ; Number of cases is 4, Range of values is 243 to 255
 11115                           ; switch strategies available:
 11116                           ; Name         Instructions Cycles
 11117                           ; simple_byte           13     7 (average)
 11118                           ;	Chosen strategy is simple_byte
 11119  00157E  5043               	movf	??_updateMenu,w,c
 11120  001580  0AF3               	xorlw	243	; case 243
 11121  001582  B4D8               	btfsc	status,2,c
 11122  001584  D71C               	goto	i2l5749
 11123  001586  0A07               	xorlw	7	; case 244
 11124  001588  B4D8               	btfsc	status,2,c
 11125  00158A  D739               	goto	i2l5765
 11126  00158C  0A0A               	xorlw	10	; case 254
 11127  00158E  B4D8               	btfsc	status,2,c
 11128  001590  D756               	goto	i2l5781
 11129  001592  0A01               	xorlw	1	; case 255
 11130  001594  B4D8               	btfsc	status,2,c
 11131  001596  D773               	goto	i2l5797
 11132  001598  D007               	goto	i2l267
 11133  00159A                     i2l6353:
 11134                           
 11135                           ; Switch size 1, requested type "space"
 11136                           ; Number of cases is 2, Range of values is 9 to 10
 11137                           ; switch strategies available:
 11138                           ; Name         Instructions Cycles
 11139                           ; simple_byte            7     4 (average)
 11140                           ;	Chosen strategy is simple_byte
 11141  00159A  5043               	movf	??_updateMenu,w,c
 11142  00159C  0A09               	xorlw	9	; case 9
 11143  00159E  B4D8               	btfsc	status,2,c
 11144  0015A0  D78E               	goto	i2l5813
 11145  0015A2  0A03               	xorlw	3	; case 10
 11146  0015A4  B4D8               	btfsc	status,2,c
 11147  0015A6  D7AB               	goto	i2l5829
 11148  0015A8                     i2l267:
 11149                           
 11150                           ;UI.c: 364: }
 11151                           ;UI.c: 365: (INTCONbits.GIE = 1);
 11152  0015A8  8EF2               	bsf	intcon,7,c	;volatile
 11153  0015AA  0012               	return		;funcret
 11154  0015AC                     __end_of_updateMenu:
 11155                           	opt stack 0
 11156                           pclatu	equ	0xFFB
 11157                           pclath	equ	0xFFA
 11158                           tblptru	equ	0xFF8
 11159                           tblptrh	equ	0xFF7
 11160                           tblptrl	equ	0xFF6
 11161                           tablat	equ	0xFF5
 11162                           prodh	equ	0xFF4
 11163                           prodl	equ	0xFF3
 11164                           intcon	equ	0xFF2
 11165                           intcon2	equ	0xFF1
 11166                           intcon3	equ	0xFF0
 11167                           indf0	equ	0xFEF
 11168                           postinc0	equ	0xFEE
 11169                           fsr0h	equ	0xFEA
 11170                           fsr0l	equ	0xFE9
 11171                           wreg	equ	0xFE8
 11172                           postdec1	equ	0xFE5
 11173                           fsr1h	equ	0xFE2
 11174                           fsr1l	equ	0xFE1
 11175                           indf2	equ	0xFDF
 11176                           postinc2	equ	0xFDE
 11177                           postdec2	equ	0xFDD
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function i2_change_state_to_menu_start *****************
 11183 ;; Defined at:
 11184 ;;		line 470 in file "UI.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;                  1    wreg      void 
 11191 ;; Registers used:
 11192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;Total ram usage:        0 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    4
 11205 ;; This function calls:
 11206 ;;		i2_lcdInst
 11207 ;;		i2_printRTC
 11208 ;;		i2_printf
 11209 ;; This function is called by:
 11210 ;;		_updateMenu
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           	psect	text47
 11215  0030D6                     __ptext47:
 11216                           	opt stack 0
 11217  0030D6                     i2_change_state_to_menu_start:
 11218                           	opt stack 18
 11219                           
 11220                           ;UI.c: 471: cur_state = 0;
 11221                           
 11222                           ;incstack = 0
 11223  0030D6  0E00               	movlw	0
 11224  0030D8  0100               	movlb	0	; () banked
 11225  0030DA  6FDC               	movwf	(_cur_state+1)& (0+255),b
 11226  0030DC  0E00               	movlw	0
 11227  0030DE  6FDB               	movwf	_cur_state& (0+255),b
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;UI.c: 473: lcdInst(0b10000000);;
 11231  0030E0  0E80               	movlw	128
 11232  0030E2  EC4E  F019         	call	i2_lcdInst
 11233                           
 11234                           ;UI.c: 474: printRTC();
 11235  0030E6  ECD6  F00A         	call	i2_printRTC	;wreg free
 11236                           
 11237                           ;UI.c: 475: lcdInst(0b11000000);;
 11238  0030EA  0EC0               	movlw	192
 11239  0030EC  EC4E  F019         	call	i2_lcdInst
 11240                           
 11241                           ;UI.c: 476: printf("PUSH TO CONTINUE");
 11242  0030F0  0E68               	movlw	low STR_30
 11243  0030F2  6E0D               	movwf	i2printf@f,c
 11244  0030F4  0EFF               	movlw	high STR_30
 11245  0030F6  6E0E               	movwf	i2printf@f+1,c
 11246  0030F8  EC5A  F006         	call	i2_printf	;wreg free
 11247  0030FC  0012               	return		;funcret
 11248  0030FE                     __end_ofi2_change_state_to_menu_start:
 11249                           	opt stack 0
 11250                           pclatu	equ	0xFFB
 11251                           pclath	equ	0xFFA
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon2	equ	0xFF1
 11260                           intcon3	equ	0xFF0
 11261                           indf0	equ	0xFEF
 11262                           postinc0	equ	0xFEE
 11263                           fsr0h	equ	0xFEA
 11264                           fsr0l	equ	0xFE9
 11265                           wreg	equ	0xFE8
 11266                           postdec1	equ	0xFE5
 11267                           fsr1h	equ	0xFE2
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           fsr2h	equ	0xFDA
 11273                           fsr2l	equ	0xFD9
 11274                           status	equ	0xFD8
 11275                           
 11276 ;; *************** function i2_printRTC *****************
 11277 ;; Defined at:
 11278 ;;		line 63 in file "RTC.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  printRTC       14   44[COMRAM] int [7]
 11283 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 11284 ;;  printRTC        2   64[COMRAM] int 
 11285 ;;  printRTC        2   58[COMRAM] int 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  1    wreg      void 
 11288 ;; Registers used:
 11289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;Total ram usage:       25 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    3
 11302 ;; This function calls:
 11303 ;;		i2_getRTC
 11304 ;;		i2_lcdInst
 11305 ;;		i2_printf
 11306 ;;		i2_strcpy
 11307 ;; This function is called by:
 11308 ;;		i2_change_state_to_menu_start
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text48
 11313  0015AC                     __ptext48:
 11314                           	opt stack 0
 11315  0015AC                     i2_printRTC:
 11316                           	opt stack 18
 11317                           
 11318                           ;RTC.c: 64: getRTC();
 11319                           
 11320                           ;incstack = 0
 11321  0015AC  EC9A  F014         	call	i2_getRTC	;wreg free
 11322                           
 11323                           ;RTC.c: 65: char month[] = "MMM";
 11324  0015B0  C12C  F03D         	movff	printRTC@F3213,i2printRTC@month
 11325  0015B4  C12D  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 11326  0015B8  C12E  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 11327  0015BC  C12F  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 11328                           
 11329                           ;RTC.c: 66: int INT_time[7];
 11330                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 11331  0015C0  0E00               	movlw	0
 11332  0015C2  6E42               	movwf	i2printRTC@i+1,c
 11333  0015C4  0E00               	movlw	0
 11334  0015C6  6E41               	movwf	i2printRTC@i,c
 11335  0015C8  BE42               	btfsc	i2printRTC@i+1,7,c
 11336  0015CA  D006               	goto	i2l4839
 11337  0015CC  5042               	movf	i2printRTC@i+1,w,c
 11338  0015CE  E135               	bnz	i2l608
 11339  0015D0  0E07               	movlw	7
 11340  0015D2  5C41               	subwf	i2printRTC@i,w,c
 11341  0015D4  B0D8               	btfsc	status,0,c
 11342  0015D6  D031               	goto	i2l608
 11343  0015D8                     i2l4839:
 11344                           
 11345                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11346  0015D8  0E5B               	movlw	low _time
 11347  0015DA  2441               	addwf	i2printRTC@i,w,c
 11348  0015DC  6ED9               	movwf	fsr2l,c
 11349  0015DE  0E00               	movlw	high _time
 11350  0015E0  2042               	addwfc	i2printRTC@i+1,w,c
 11351  0015E2  6EDA               	movwf	fsr2h,c
 11352  0015E4  50DF               	movf	indf2,w,c
 11353  0015E6  6E2A               	movwf	??i2_printRTC& (0+255),c
 11354  0015E8  3A2A               	swapf	??i2_printRTC,f,c
 11355  0015EA  0E0F               	movlw	15
 11356  0015EC  162A               	andwf	??i2_printRTC,f,c
 11357  0015EE  0E0F               	movlw	15
 11358  0015F0  162A               	andwf	??i2_printRTC,f,c
 11359  0015F2  502A               	movf	??i2_printRTC,w,c
 11360  0015F4  0D0A               	mullw	10
 11361  0015F6  0E5B               	movlw	low _time
 11362  0015F8  2441               	addwf	i2printRTC@i,w,c
 11363  0015FA  6ED9               	movwf	fsr2l,c
 11364  0015FC  0E00               	movlw	high _time
 11365  0015FE  2042               	addwfc	i2printRTC@i+1,w,c
 11366  001600  6EDA               	movwf	fsr2h,c
 11367  001602  50DF               	movf	indf2,w,c
 11368  001604  0B0F               	andlw	15
 11369  001606  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 11370  001608  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 11371  00160A  50F3               	movf	prodl,w,c
 11372  00160C  262B               	addwf	??i2_printRTC+1,f,c
 11373  00160E  50F4               	movf	prodh,w,c
 11374  001610  222C               	addwfc	??i2_printRTC+2,f,c
 11375  001612  90D8               	bcf	status,0,c
 11376  001614  3441               	rlcf	i2printRTC@i,w,c
 11377  001616  6ED9               	movwf	fsr2l,c
 11378  001618  3442               	rlcf	i2printRTC@i+1,w,c
 11379  00161A  6EDA               	movwf	fsr2h,c
 11380  00161C  0E2D               	movlw	low i2printRTC@INT_time
 11381  00161E  26D9               	addwf	fsr2l,f,c
 11382  001620  0E00               	movlw	high i2printRTC@INT_time
 11383  001622  22DA               	addwfc	fsr2h,f,c
 11384  001624  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 11385  001628  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 11386  00162C  4A41               	infsnz	i2printRTC@i,f,c
 11387  00162E  2A42               	incf	i2printRTC@i+1,f,c
 11388  001630  BE42               	btfsc	i2printRTC@i+1,7,c
 11389  001632  D7D2               	goto	i2l4839
 11390  001634  5042               	movf	i2printRTC@i+1,w,c
 11391  001636  E101               	bnz	i2u355_40
 11392  001638  D7CB               	goto	L6
 11393  00163A                     i2u355_40:
 11394  00163A                     i2l608:
 11395                           
 11396                           ;RTC.c: 69: }
 11397                           ;RTC.c: 70: int RTC_month = INT_time[5];
 11398  00163A  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 11399  00163E  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 11400                           
 11401                           ;RTC.c: 71: switch(RTC_month){
 11402  001642  D084               	goto	i2l4871
 11403  001644                     i2l4845:
 11404                           
 11405                           ;RTC.c: 73: strcpy(month, "JAN");
 11406  001644  0E3D               	movlw	low i2printRTC@month
 11407  001646  6E01               	movwf	i2strcpy@to,c
 11408  001648  0E00               	movlw	high i2printRTC@month
 11409  00164A  6E02               	movwf	i2strcpy@to+1,c
 11410  00164C  0EDA               	movlw	low STR_8
 11411  00164E  6E03               	movwf	i2strcpy@from,c
 11412  001650  0EFF               	movlw	high STR_8
 11413  001652  6E04               	movwf	i2strcpy@from+1,c
 11414  001654  EC0B  F017         	call	i2_strcpy	;wreg free
 11415                           
 11416                           ;RTC.c: 74: break;
 11417  001658  D0A6               	goto	i2l4873
 11418  00165A                     i2l4847:
 11419                           
 11420                           ;RTC.c: 76: strcpy(month, "FEB");
 11421  00165A  0E3D               	movlw	low i2printRTC@month
 11422  00165C  6E01               	movwf	i2strcpy@to,c
 11423  00165E  0E00               	movlw	high i2printRTC@month
 11424  001660  6E02               	movwf	i2strcpy@to+1,c
 11425  001662  0ECA               	movlw	low STR_9
 11426  001664  6E03               	movwf	i2strcpy@from,c
 11427  001666  0EFF               	movlw	high STR_9
 11428  001668  6E04               	movwf	i2strcpy@from+1,c
 11429  00166A  EC0B  F017         	call	i2_strcpy	;wreg free
 11430                           
 11431                           ;RTC.c: 77: break;
 11432  00166E  D09B               	goto	i2l4873
 11433  001670                     i2l4849:
 11434                           
 11435                           ;RTC.c: 79: strcpy(month, "MAR");
 11436  001670  0E3D               	movlw	low i2printRTC@month
 11437  001672  6E01               	movwf	i2strcpy@to,c
 11438  001674  0E00               	movlw	high i2printRTC@month
 11439  001676  6E02               	movwf	i2strcpy@to+1,c
 11440  001678  0EE6               	movlw	low STR_10
 11441  00167A  6E03               	movwf	i2strcpy@from,c
 11442  00167C  0EFF               	movlw	high STR_10
 11443  00167E  6E04               	movwf	i2strcpy@from+1,c
 11444  001680  EC0B  F017         	call	i2_strcpy	;wreg free
 11445                           
 11446                           ;RTC.c: 80: break;
 11447  001684  D090               	goto	i2l4873
 11448  001686                     i2l4851:
 11449                           
 11450                           ;RTC.c: 82: strcpy(month, "APR");
 11451  001686  0E3D               	movlw	low i2printRTC@month
 11452  001688  6E01               	movwf	i2strcpy@to,c
 11453  00168A  0E00               	movlw	high i2printRTC@month
 11454  00168C  6E02               	movwf	i2strcpy@to+1,c
 11455  00168E  0EEA               	movlw	low STR_11
 11456  001690  6E03               	movwf	i2strcpy@from,c
 11457  001692  0EFF               	movlw	high STR_11
 11458  001694  6E04               	movwf	i2strcpy@from+1,c
 11459  001696  EC0B  F017         	call	i2_strcpy	;wreg free
 11460                           
 11461                           ;RTC.c: 83: break;
 11462  00169A  D085               	goto	i2l4873
 11463  00169C                     i2l4853:
 11464                           
 11465                           ;RTC.c: 85: strcpy(month, "MAY");
 11466  00169C  0E3D               	movlw	low i2printRTC@month
 11467  00169E  6E01               	movwf	i2strcpy@to,c
 11468  0016A0  0E00               	movlw	high i2printRTC@month
 11469  0016A2  6E02               	movwf	i2strcpy@to+1,c
 11470  0016A4  0EFA               	movlw	low STR_12
 11471  0016A6  6E03               	movwf	i2strcpy@from,c
 11472  0016A8  0EFF               	movlw	high STR_12
 11473  0016AA  6E04               	movwf	i2strcpy@from+1,c
 11474  0016AC  EC0B  F017         	call	i2_strcpy	;wreg free
 11475                           
 11476                           ;RTC.c: 86: break;
 11477  0016B0  D07A               	goto	i2l4873
 11478  0016B2                     i2l4855:
 11479                           
 11480                           ;RTC.c: 88: strcpy(month, "JUN");
 11481  0016B2  0E3D               	movlw	low i2printRTC@month
 11482  0016B4  6E01               	movwf	i2strcpy@to,c
 11483  0016B6  0E00               	movlw	high i2printRTC@month
 11484  0016B8  6E02               	movwf	i2strcpy@to+1,c
 11485  0016BA  0EDE               	movlw	low STR_13
 11486  0016BC  6E03               	movwf	i2strcpy@from,c
 11487  0016BE  0EFF               	movlw	high STR_13
 11488  0016C0  6E04               	movwf	i2strcpy@from+1,c
 11489  0016C2  EC0B  F017         	call	i2_strcpy	;wreg free
 11490                           
 11491                           ;RTC.c: 89: break;
 11492  0016C6  D06F               	goto	i2l4873
 11493  0016C8                     i2l4857:
 11494                           
 11495                           ;RTC.c: 91: strcpy(month, "JUL");
 11496  0016C8  0E3D               	movlw	low i2printRTC@month
 11497  0016CA  6E01               	movwf	i2strcpy@to,c
 11498  0016CC  0E00               	movlw	high i2printRTC@month
 11499  0016CE  6E02               	movwf	i2strcpy@to+1,c
 11500  0016D0  0ED6               	movlw	low STR_14
 11501  0016D2  6E03               	movwf	i2strcpy@from,c
 11502  0016D4  0EFF               	movlw	high STR_14
 11503  0016D6  6E04               	movwf	i2strcpy@from+1,c
 11504  0016D8  EC0B  F017         	call	i2_strcpy	;wreg free
 11505                           
 11506                           ;RTC.c: 92: break;
 11507  0016DC  D064               	goto	i2l4873
 11508  0016DE                     i2l4859:
 11509                           
 11510                           ;RTC.c: 94: strcpy(month, "AUG");
 11511  0016DE  0E3D               	movlw	low i2printRTC@month
 11512  0016E0  6E01               	movwf	i2strcpy@to,c
 11513  0016E2  0E00               	movlw	high i2printRTC@month
 11514  0016E4  6E02               	movwf	i2strcpy@to+1,c
 11515  0016E6  0ED2               	movlw	low STR_15
 11516  0016E8  6E03               	movwf	i2strcpy@from,c
 11517  0016EA  0EFF               	movlw	high STR_15
 11518  0016EC  6E04               	movwf	i2strcpy@from+1,c
 11519  0016EE  EC0B  F017         	call	i2_strcpy	;wreg free
 11520                           
 11521                           ;RTC.c: 95: break;
 11522  0016F2  D059               	goto	i2l4873
 11523  0016F4                     i2l4861:
 11524                           
 11525                           ;RTC.c: 97: strcpy(month, "SEP");
 11526  0016F4  0E3D               	movlw	low i2printRTC@month
 11527  0016F6  6E01               	movwf	i2strcpy@to,c
 11528  0016F8  0E00               	movlw	high i2printRTC@month
 11529  0016FA  6E02               	movwf	i2strcpy@to+1,c
 11530  0016FC  0EE2               	movlw	low STR_16
 11531  0016FE  6E03               	movwf	i2strcpy@from,c
 11532  001700  0EFF               	movlw	high STR_16
 11533  001702  6E04               	movwf	i2strcpy@from+1,c
 11534  001704  EC0B  F017         	call	i2_strcpy	;wreg free
 11535                           
 11536                           ;RTC.c: 98: break;
 11537  001708  D04E               	goto	i2l4873
 11538  00170A                     i2l4863:
 11539                           
 11540                           ;RTC.c: 100: strcpy(month, "OCT");
 11541  00170A  0E3D               	movlw	low i2printRTC@month
 11542  00170C  6E01               	movwf	i2strcpy@to,c
 11543  00170E  0E00               	movlw	high i2printRTC@month
 11544  001710  6E02               	movwf	i2strcpy@to+1,c
 11545  001712  0EF2               	movlw	low STR_17
 11546  001714  6E03               	movwf	i2strcpy@from,c
 11547  001716  0EFF               	movlw	high STR_17
 11548  001718  6E04               	movwf	i2strcpy@from+1,c
 11549  00171A  EC0B  F017         	call	i2_strcpy	;wreg free
 11550                           
 11551                           ;RTC.c: 101: break;
 11552  00171E  D043               	goto	i2l4873
 11553  001720                     i2l4865:
 11554                           
 11555                           ;RTC.c: 103: strcpy(month, "NOV");
 11556  001720  0E3D               	movlw	low i2printRTC@month
 11557  001722  6E01               	movwf	i2strcpy@to,c
 11558  001724  0E00               	movlw	high i2printRTC@month
 11559  001726  6E02               	movwf	i2strcpy@to+1,c
 11560  001728  0EF6               	movlw	low STR_18
 11561  00172A  6E03               	movwf	i2strcpy@from,c
 11562  00172C  0EFF               	movlw	high STR_18
 11563  00172E  6E04               	movwf	i2strcpy@from+1,c
 11564  001730  EC0B  F017         	call	i2_strcpy	;wreg free
 11565                           
 11566                           ;RTC.c: 104: break;
 11567  001734  D038               	goto	i2l4873
 11568  001736                     i2l4867:
 11569                           
 11570                           ;RTC.c: 106: strcpy(month, "DEC");
 11571  001736  0E3D               	movlw	low i2printRTC@month
 11572  001738  6E01               	movwf	i2strcpy@to,c
 11573  00173A  0E00               	movlw	high i2printRTC@month
 11574  00173C  6E02               	movwf	i2strcpy@to+1,c
 11575  00173E  0ECE               	movlw	low STR_19
 11576  001740  6E03               	movwf	i2strcpy@from,c
 11577  001742  0EFF               	movlw	high STR_19
 11578  001744  6E04               	movwf	i2strcpy@from+1,c
 11579  001746  EC0B  F017         	call	i2_strcpy	;wreg free
 11580                           
 11581                           ;RTC.c: 108: }
 11582                           
 11583                           ;RTC.c: 107: break;
 11584  00174A  D02D               	goto	i2l4873
 11585  00174C                     i2l4871:
 11586  00174C  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 11587  001750  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 11588                           
 11589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11590                           ; Switch size 1, requested type "space"
 11591                           ; Number of cases is 1, Range of values is 0 to 0
 11592                           ; switch strategies available:
 11593                           ; Name         Instructions Cycles
 11594                           ; simple_byte            4     3 (average)
 11595                           ;	Chosen strategy is simple_byte
 11596  001754  502B               	movf	??i2_printRTC+1,w,c
 11597  001756  0A00               	xorlw	0	; case 0
 11598  001758  A4D8               	btfss	status,2,c
 11599  00175A  D025               	goto	i2l4873
 11600                           
 11601                           ; Switch size 1, requested type "space"
 11602                           ; Number of cases is 12, Range of values is 1 to 12
 11603                           ; switch strategies available:
 11604                           ; Name         Instructions Cycles
 11605                           ; simple_byte           37    19 (average)
 11606                           ;	Chosen strategy is simple_byte
 11607  00175C  502A               	movf	??i2_printRTC,w,c
 11608  00175E  0A01               	xorlw	1	; case 1
 11609  001760  B4D8               	btfsc	status,2,c
 11610  001762  D770               	goto	i2l4845
 11611  001764  0A03               	xorlw	3	; case 2
 11612  001766  B4D8               	btfsc	status,2,c
 11613  001768  D778               	goto	i2l4847
 11614  00176A  0A01               	xorlw	1	; case 3
 11615  00176C  B4D8               	btfsc	status,2,c
 11616  00176E  D780               	goto	i2l4849
 11617  001770  0A07               	xorlw	7	; case 4
 11618  001772  B4D8               	btfsc	status,2,c
 11619  001774  D788               	goto	i2l4851
 11620  001776  0A01               	xorlw	1	; case 5
 11621  001778  B4D8               	btfsc	status,2,c
 11622  00177A  D790               	goto	i2l4853
 11623  00177C  0A03               	xorlw	3	; case 6
 11624  00177E  B4D8               	btfsc	status,2,c
 11625  001780  D798               	goto	i2l4855
 11626  001782  0A01               	xorlw	1	; case 7
 11627  001784  B4D8               	btfsc	status,2,c
 11628  001786  D7A0               	goto	i2l4857
 11629  001788  0A0F               	xorlw	15	; case 8
 11630  00178A  B4D8               	btfsc	status,2,c
 11631  00178C  D7A8               	goto	i2l4859
 11632  00178E  0A01               	xorlw	1	; case 9
 11633  001790  B4D8               	btfsc	status,2,c
 11634  001792  D7B0               	goto	i2l4861
 11635  001794  0A03               	xorlw	3	; case 10
 11636  001796  B4D8               	btfsc	status,2,c
 11637  001798  D7B8               	goto	i2l4863
 11638  00179A  0A01               	xorlw	1	; case 11
 11639  00179C  B4D8               	btfsc	status,2,c
 11640  00179E  D7C0               	goto	i2l4865
 11641  0017A0  0A07               	xorlw	7	; case 12
 11642  0017A2  B4D8               	btfsc	status,2,c
 11643  0017A4  D7C8               	goto	i2l4867
 11644  0017A6                     i2l4873:
 11645                           
 11646                           ;RTC.c: 109: lcdInst(0b10000000);;
 11647  0017A6  0E80               	movlw	128
 11648  0017A8  EC4E  F019         	call	i2_lcdInst
 11649                           
 11650                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11651  0017AC  0EAC               	movlw	low STR_21
 11652  0017AE  6E0D               	movwf	i2printf@f,c
 11653  0017B0  0EFD               	movlw	high STR_21
 11654  0017B2  6E0E               	movwf	i2printf@f+1,c
 11655  0017B4  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 11656  0017B8  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 11657  0017BC  0E3D               	movlw	low i2printRTC@month
 11658  0017BE  6E11               	movwf	?i2_printf+4,c
 11659  0017C0  0E00               	movlw	high i2printRTC@month
 11660  0017C2  6E12               	movwf	?i2_printf+5,c
 11661  0017C4  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 11662  0017C8  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 11663  0017CC  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 11664  0017D0  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 11665  0017D4  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 11666  0017D8  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 11667  0017DC  EC5A  F006         	call	i2_printf	;wreg free
 11668  0017E0  0012               	return		;funcret
 11669  0017E2                     __end_ofi2_printRTC:
 11670                           	opt stack 0
 11671                           pclatu	equ	0xFFB
 11672                           pclath	equ	0xFFA
 11673                           tblptru	equ	0xFF8
 11674                           tblptrh	equ	0xFF7
 11675                           tblptrl	equ	0xFF6
 11676                           tablat	equ	0xFF5
 11677                           prodh	equ	0xFF4
 11678                           prodl	equ	0xFF3
 11679                           intcon	equ	0xFF2
 11680                           intcon2	equ	0xFF1
 11681                           intcon3	equ	0xFF0
 11682                           indf0	equ	0xFEF
 11683                           postinc0	equ	0xFEE
 11684                           fsr0h	equ	0xFEA
 11685                           fsr0l	equ	0xFE9
 11686                           wreg	equ	0xFE8
 11687                           postdec1	equ	0xFE5
 11688                           fsr1h	equ	0xFE2
 11689                           fsr1l	equ	0xFE1
 11690                           indf2	equ	0xFDF
 11691                           postinc2	equ	0xFDE
 11692                           postdec2	equ	0xFDD
 11693                           fsr2h	equ	0xFDA
 11694                           fsr2l	equ	0xFD9
 11695                           status	equ	0xFD8
 11696                           
 11697 ;; *************** function i2_strcpy *****************
 11698 ;; Defined at:
 11699 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;  to              2    0[COMRAM] PTR unsigned char 
 11702 ;;		 -> printRTC@month(4), UI@month(4), 
 11703 ;;  from            2    2[COMRAM] PTR const unsigned char 
 11704 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11705 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11706 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11707 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11708 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11709 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11710 ;;		 -> STR_8(4), 
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 11713 ;;		 -> printRTC@month(4), UI@month(4), 
 11714 ;; Return value:  Size  Location     Type
 11715 ;;                  2    0[COMRAM] PTR unsigned char 
 11716 ;; Registers used:
 11717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11723 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11727 ;;Total ram usage:        6 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; This function calls:
 11730 ;;		Nothing
 11731 ;; This function is called by:
 11732 ;;		i2_printRTC
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           	psect	text49
 11737  002E16                     __ptext49:
 11738                           	opt stack 0
 11739  002E16                     i2_strcpy:
 11740                           	opt stack 20
 11741                           
 11742                           ;incstack = 0
 11743  002E16  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 11744  002E1A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 11745  002E1E  D004               	goto	i2l4575
 11746  002E20                     i2l4573:
 11747  002E20  4A05               	infsnz	i2strcpy@cp,f,c
 11748  002E22  2A06               	incf	i2strcpy@cp+1,f,c
 11749  002E24  4A03               	infsnz	i2strcpy@from,f,c
 11750  002E26  2A04               	incf	i2strcpy@from+1,f,c
 11751  002E28                     i2l4575:
 11752  002E28  C003  FFF6         	movff	i2strcpy@from,tblptrl
 11753  002E2C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 11754  002E30                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11755  002E30  6AF8               	clrf	tblptru,c
 11756  002E32                     	endif
 11757  002E32                     	if	0	;tblptru may be non-zero
 11758  002E32                     	endif
 11759  002E32  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 11760  002E36  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 11761  002E3A  0008               	tblrd		*
 11762  002E3C  CFF5 FFDF          	movff	tablat,indf2
 11763  002E40  50DF               	movf	indf2,w,c
 11764  002E42  B4D8               	btfsc	status,2,c
 11765  002E44  0012               	return	
 11766  002E46  D7EC               	goto	i2l4573
 11767  002E48                     __end_ofi2_strcpy:
 11768                           	opt stack 0
 11769                           pclatu	equ	0xFFB
 11770                           pclath	equ	0xFFA
 11771                           tblptru	equ	0xFF8
 11772                           tblptrh	equ	0xFF7
 11773                           tblptrl	equ	0xFF6
 11774                           tablat	equ	0xFF5
 11775                           prodh	equ	0xFF4
 11776                           prodl	equ	0xFF3
 11777                           intcon	equ	0xFF2
 11778                           intcon2	equ	0xFF1
 11779                           intcon3	equ	0xFF0
 11780                           indf0	equ	0xFEF
 11781                           postinc0	equ	0xFEE
 11782                           fsr0h	equ	0xFEA
 11783                           fsr0l	equ	0xFE9
 11784                           wreg	equ	0xFE8
 11785                           postdec1	equ	0xFE5
 11786                           fsr1h	equ	0xFE2
 11787                           fsr1l	equ	0xFE1
 11788                           indf2	equ	0xFDF
 11789                           postinc2	equ	0xFDE
 11790                           postdec2	equ	0xFDD
 11791                           fsr2h	equ	0xFDA
 11792                           fsr2l	equ	0xFD9
 11793                           status	equ	0xFD8
 11794                           
 11795 ;; *************** function _inputHandler *****************
 11796 ;; Defined at:
 11797 ;;		line 368 in file "UI.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;		None
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;		None
 11802 ;; Return value:  Size  Location     Type
 11803 ;;                  2   41[COMRAM] int 
 11804 ;; Registers used:
 11805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11806 ;; Tracked objects:
 11807 ;;		On entry : 0/0
 11808 ;;		On exit  : 0/0
 11809 ;;		Unchanged: 0/0
 11810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;Total ram usage:        4 bytes
 11816 ;; Hardware stack levels used:    1
 11817 ;; Hardware stack levels required when called:    4
 11818 ;; This function calls:
 11819 ;;		_change_state_to_logs_11
 11820 ;;		_change_state_to_logs_12
 11821 ;;		_change_state_to_logs_22
 11822 ;;		_change_state_to_logs_23
 11823 ;;		_change_state_to_logs_33
 11824 ;;		_change_state_to_logs_34
 11825 ;;		_change_state_to_menu_11
 11826 ;;		_change_state_to_menu_23
 11827 ;;		i2_change_state_to_menu_12
 11828 ;;		i2_change_state_to_menu_22
 11829 ;; This function is called by:
 11830 ;;		_updateMenu
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text50
 11835  0019DC                     __ptext50:
 11836                           	opt stack 0
 11837  0019DC                     _inputHandler:
 11838                           	opt stack 18
 11839                           
 11840                           ;UI.c: 373: if(firstboot){
 11841                           
 11842                           ;incstack = 0
 11843  0019DC  5076               	movf	_firstboot,w,c
 11844  0019DE  1077               	iorwf	_firstboot+1,w,c
 11845  0019E0  B4D8               	btfsc	status,2,c
 11846  0019E2  D00B               	goto	i2l4941
 11847                           
 11848                           ;UI.c: 374: change_state_to_menu_11();
 11849  0019E4  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 11850                           
 11851                           ;UI.c: 375: firstboot = 0;
 11852  0019E8  0E00               	movlw	0
 11853  0019EA  6E77               	movwf	_firstboot+1,c
 11854  0019EC  0E00               	movlw	0
 11855  0019EE  6E76               	movwf	_firstboot,c
 11856                           
 11857                           ;UI.c: 376: return 0;
 11858  0019F0  0E00               	movlw	0
 11859  0019F2  6E2B               	movwf	?_inputHandler+1,c
 11860  0019F4  0E00               	movlw	0
 11861  0019F6  6E2A               	movwf	?_inputHandler,c
 11862  0019F8  0012               	return	
 11863  0019FA                     i2l4941:
 11864                           
 11865                           ;UI.c: 377: }
 11866                           ;UI.c: 378: if (logstate){
 11867  0019FA  0100               	movlb	0	; () banked
 11868  0019FC  51F7               	movf	_logstate& (0+255),w,b
 11869  0019FE  0100               	movlb	0	; () banked
 11870  001A00  11F8               	iorwf	(_logstate+1)& (0+255),w,b
 11871  001A02  B4D8               	btfsc	status,2,c
 11872  001A04  D0C7               	goto	i2l5059
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;UI.c: 379: if(input == 'C' && PORTBbits.RB1 == 1){
 11876  001A06  0E43               	movlw	67
 11877  001A08  187E               	xorwf	_input,w,c	;volatile
 11878  001A0A  A4D8               	btfss	status,2,c
 11879  001A0C  D012               	goto	i2l4959
 11880                           
 11881                           ; BSR set to: 0
 11882  001A0E  B281               	btfsc	3969,1,c	;volatile
 11883  001A10  D009               	goto	i2l4951
 11884  001A12  D00F               	goto	i2l4959
 11885  001A14                     i2l4949:
 11886                           
 11887                           ;UI.c: 382: _delay((unsigned long)((10)*(32000000/4000.0)));
 11888  001A14  0E68               	movlw	104
 11889  001A16  6E2C               	movwf	??_inputHandler& (0+255),c
 11890  001A18  0EE4               	movlw	228
 11891  001A1A                     i2u548_47:
 11892  001A1A  2EE8               	decfsz	wreg,f,c
 11893  001A1C  D7FE               	bra	i2u548_47
 11894  001A1E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 11895  001A20  D7FC               	bra	i2u548_47
 11896  001A22  D000               	nop2	
 11897  001A24                     i2l4951:
 11898  001A24  B281               	btfsc	3969,1,c	;volatile
 11899  001A26  D7F6               	goto	i2l4949
 11900  001A28                     i2l4953:
 11901                           
 11902                           ;UI.c: 383: }
 11903                           ;UI.c: 384: return 0;
 11904  001A28  0E00               	movlw	0
 11905  001A2A  6E2B               	movwf	?_inputHandler+1,c
 11906  001A2C  0E00               	movlw	0
 11907  001A2E  6E2A               	movwf	?_inputHandler,c
 11908  001A30  0012               	return	
 11909  001A32                     i2l4959:
 11910                           
 11911                           ;UI.c: 386: else if (input == 'D'){
 11912  001A32  0E44               	movlw	68
 11913  001A34  187E               	xorwf	_input,w,c	;volatile
 11914  001A36  A4D8               	btfss	status,2,c
 11915  001A38  D7F7               	goto	i2l4953
 11916                           
 11917                           ;UI.c: 388: logstate = 0;
 11918  001A3A  0E00               	movlw	0
 11919  001A3C  0100               	movlb	0	; () banked
 11920  001A3E  6FF8               	movwf	(_logstate+1)& (0+255),b
 11921  001A40  0E00               	movlw	0
 11922  001A42  6FF7               	movwf	_logstate& (0+255),b
 11923                           
 11924                           ;UI.c: 389: switch(cur_state){
 11925  001A44  D012               	goto	i2l4977
 11926  001A46                     i2l4963:
 11927                           
 11928                           ;UI.c: 391: change_state_to_logs_11();
 11929  001A46  ECE4  F017         	call	_change_state_to_logs_11	;wreg free
 11930                           
 11931                           ;UI.c: 392: break;
 11932  001A4A  D7EE               	goto	i2l4953
 11933  001A4C                     i2l4965:
 11934                           
 11935                           ;UI.c: 394: change_state_to_logs_12();
 11936  001A4C  ECCC  F017         	call	_change_state_to_logs_12	;wreg free
 11937                           
 11938                           ;UI.c: 395: break;
 11939  001A50  D7EB               	goto	i2l4953
 11940  001A52                     i2l4967:
 11941                           
 11942                           ;UI.c: 397: change_state_to_logs_22();
 11943  001A52  ECB4  F017         	call	_change_state_to_logs_22	;wreg free
 11944                           
 11945                           ;UI.c: 398: break;
 11946  001A56  D7E8               	goto	i2l4953
 11947  001A58                     i2l4969:
 11948                           
 11949                           ;UI.c: 400: change_state_to_logs_23();
 11950  001A58  EC13  F018         	call	_change_state_to_logs_23	;wreg free
 11951                           
 11952                           ;UI.c: 401: break;
 11953  001A5C  D7E5               	goto	i2l4953
 11954  001A5E                     i2l4971:
 11955                           
 11956                           ;UI.c: 403: change_state_to_logs_33();
 11957  001A5E  EC9C  F017         	call	_change_state_to_logs_33	;wreg free
 11958                           
 11959                           ;UI.c: 404: break;
 11960  001A62  D7E2               	goto	i2l4953
 11961  001A64                     i2l4973:
 11962                           
 11963                           ;UI.c: 406: change_state_to_logs_34();
 11964  001A64  EC84  F017         	call	_change_state_to_logs_34	;wreg free
 11965                           
 11966                           ;UI.c: 408: }
 11967                           
 11968                           ;UI.c: 407: break;
 11969  001A68  D7DF               	goto	i2l4953
 11970  001A6A                     i2l4977:
 11971  001A6A  C0DB  F02C         	movff	_cur_state,??_inputHandler
 11972  001A6E  C0DC  F02D         	movff	_cur_state+1,??_inputHandler+1
 11973                           
 11974                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 11975                           ; Switch size 1, requested type "space"
 11976                           ; Number of cases is 2, Range of values is 3 to 4
 11977                           ; switch strategies available:
 11978                           ; Name         Instructions Cycles
 11979                           ; simple_byte            7     4 (average)
 11980                           ;	Chosen strategy is simple_byte
 11981  001A72  502D               	movf	??_inputHandler+1,w,c
 11982  001A74  0A03               	xorlw	3	; case 3
 11983  001A76  B4D8               	btfsc	status,2,c
 11984  001A78  D004               	goto	i2l6357
 11985  001A7A  0A07               	xorlw	7	; case 4
 11986  001A7C  B4D8               	btfsc	status,2,c
 11987  001A7E  D00F               	goto	i2l6359
 11988  001A80  D7D3               	goto	i2l4953
 11989  001A82                     i2l6357:
 11990                           
 11991                           ; Switch size 1, requested type "space"
 11992                           ; Number of cases is 4, Range of values is 243 to 255
 11993                           ; switch strategies available:
 11994                           ; Name         Instructions Cycles
 11995                           ; simple_byte           13     7 (average)
 11996                           ;	Chosen strategy is simple_byte
 11997  001A82  502C               	movf	??_inputHandler,w,c
 11998  001A84  0AF3               	xorlw	243	; case 243
 11999  001A86  B4D8               	btfsc	status,2,c
 12000  001A88  D7DE               	goto	i2l4963
 12001  001A8A  0A07               	xorlw	7	; case 244
 12002  001A8C  B4D8               	btfsc	status,2,c
 12003  001A8E  D7DE               	goto	i2l4965
 12004  001A90  0A0A               	xorlw	10	; case 254
 12005  001A92  B4D8               	btfsc	status,2,c
 12006  001A94  D7DE               	goto	i2l4967
 12007  001A96  0A01               	xorlw	1	; case 255
 12008  001A98  B4D8               	btfsc	status,2,c
 12009  001A9A  D7DE               	goto	i2l4969
 12010  001A9C  D7C5               	goto	i2l4953
 12011  001A9E                     i2l6359:
 12012                           
 12013                           ; Switch size 1, requested type "space"
 12014                           ; Number of cases is 2, Range of values is 9 to 10
 12015                           ; switch strategies available:
 12016                           ; Name         Instructions Cycles
 12017                           ; simple_byte            7     4 (average)
 12018                           ;	Chosen strategy is simple_byte
 12019  001A9E  502C               	movf	??_inputHandler,w,c
 12020  001AA0  0A09               	xorlw	9	; case 9
 12021  001AA2  B4D8               	btfsc	status,2,c
 12022  001AA4  D7DC               	goto	i2l4971
 12023  001AA6  0A03               	xorlw	3	; case 10
 12024  001AA8  B4D8               	btfsc	status,2,c
 12025  001AAA  D7DC               	goto	i2l4973
 12026  001AAC  D7BD               	goto	i2l4953
 12027  001AAE                     i2l4989:
 12028                           
 12029                           ;UI.c: 418: if(cur_state == 11){
 12030  001AAE  0E0B               	movlw	11
 12031  001AB0  0100               	movlb	0	; () banked
 12032  001AB2  19DB               	xorwf	_cur_state& (0+255),w,b
 12033  001AB4  0100               	movlb	0	; () banked
 12034  001AB6  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12035  001AB8  A4D8               	btfss	status,2,c
 12036  001ABA  D005               	goto	i2l4997
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;UI.c: 419: return 0;
 12040  001ABC  0E00               	movlw	0
 12041  001ABE  6E2B               	movwf	?_inputHandler+1,c
 12042  001AC0  0E00               	movlw	0
 12043  001AC2  6E2A               	movwf	?_inputHandler,c
 12044                           
 12045                           ; BSR set to: 0
 12046  001AC4  0012               	return	
 12047  001AC6                     i2l4997:
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;UI.c: 421: else{
 12051                           ;UI.c: 422: change_state_to_menu_11();
 12052  001AC6  EC6C  F017         	call	_change_state_to_menu_11	;wreg free
 12053                           
 12054                           ;UI.c: 423: }
 12055                           ;UI.c: 424: return 0;
 12056  001ACA  0E00               	movlw	0
 12057  001ACC  6E2B               	movwf	?_inputHandler+1,c
 12058  001ACE  0E00               	movlw	0
 12059  001AD0  6E2A               	movwf	?_inputHandler,c
 12060  001AD2  0012               	return	
 12061  001AD4                     i2l5003:
 12062                           
 12063                           ;UI.c: 426: if(cur_state == 22 | cur_state == 12){
 12064  001AD4  0E16               	movlw	22
 12065  001AD6  0100               	movlb	0	; () banked
 12066  001AD8  19DB               	xorwf	_cur_state& (0+255),w,b
 12067  001ADA  0100               	movlb	0	; () banked
 12068  001ADC  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12069  001ADE  B4D8               	btfsc	status,2,c
 12070  001AE0  D007               	goto	i2l5007
 12071                           
 12072                           ; BSR set to: 0
 12073  001AE2  0E0C               	movlw	12
 12074  001AE4  0100               	movlb	0	; () banked
 12075  001AE6  19DB               	xorwf	_cur_state& (0+255),w,b
 12076  001AE8  0100               	movlb	0	; () banked
 12077  001AEA  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12078  001AEC  A4D8               	btfss	status,2,c
 12079  001AEE  D005               	goto	i2l5013
 12080  001AF0                     i2l5007:
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;UI.c: 427: return 0;
 12084  001AF0  0E00               	movlw	0
 12085  001AF2  6E2B               	movwf	?_inputHandler+1,c
 12086  001AF4  0E00               	movlw	0
 12087  001AF6  6E2A               	movwf	?_inputHandler,c
 12088                           
 12089                           ; BSR set to: 0
 12090  001AF8  0012               	return	
 12091  001AFA                     i2l5013:
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;UI.c: 429: else if(cur_state == 23){
 12095  001AFA  0E17               	movlw	23
 12096  001AFC  0100               	movlb	0	; () banked
 12097  001AFE  19DB               	xorwf	_cur_state& (0+255),w,b
 12098  001B00  0100               	movlb	0	; () banked
 12099  001B02  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12100  001B04  A4D8               	btfss	status,2,c
 12101  001B06  D003               	goto	i2l5017
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;UI.c: 430: change_state_to_menu_22();
 12105  001B08  EC24  F017         	call	i2_change_state_to_menu_22	;wreg free
 12106                           
 12107                           ;UI.c: 431: }
 12108  001B0C  D002               	goto	i2l5019
 12109  001B0E                     i2l5017:
 12110                           
 12111                           ;UI.c: 432: else{
 12112                           ;UI.c: 433: change_state_to_menu_12();
 12113  001B0E  EC3C  F017         	call	i2_change_state_to_menu_12	;wreg free
 12114  001B12                     i2l5019:
 12115                           
 12116                           ;UI.c: 434: }
 12117                           ;UI.c: 435: return 0;
 12118  001B12  0E00               	movlw	0
 12119  001B14  6E2B               	movwf	?_inputHandler+1,c
 12120  001B16  0E00               	movlw	0
 12121  001B18  6E2A               	movwf	?_inputHandler,c
 12122  001B1A  0012               	return	
 12123  001B1C                     i2l5023:
 12124                           
 12125                           ;UI.c: 437: if(cur_state == 23){
 12126  001B1C  0E17               	movlw	23
 12127  001B1E  0100               	movlb	0	; () banked
 12128  001B20  19DB               	xorwf	_cur_state& (0+255),w,b
 12129  001B22  0100               	movlb	0	; () banked
 12130  001B24  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12131  001B26  A4D8               	btfss	status,2,c
 12132  001B28  D005               	goto	i2l5031
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;UI.c: 438: return 0;
 12136  001B2A  0E00               	movlw	0
 12137  001B2C  6E2B               	movwf	?_inputHandler+1,c
 12138  001B2E  0E00               	movlw	0
 12139  001B30  6E2A               	movwf	?_inputHandler,c
 12140                           
 12141                           ; BSR set to: 0
 12142  001B32  0012               	return	
 12143  001B34                     i2l5031:
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;UI.c: 440: else{
 12147                           ;UI.c: 441: change_state_to_menu_23();
 12148  001B34  EC54  F017         	call	_change_state_to_menu_23	;wreg free
 12149                           
 12150                           ;UI.c: 442: }
 12151                           ;UI.c: 443: return 0;
 12152  001B38  0E00               	movlw	0
 12153  001B3A  6E2B               	movwf	?_inputHandler+1,c
 12154  001B3C  0E00               	movlw	0
 12155  001B3E  6E2A               	movwf	?_inputHandler,c
 12156  001B40  0012               	return	
 12157  001B42                     i2l5037:
 12158                           
 12159                           ;UI.c: 446: up = 1;
 12160  001B42  0E00               	movlw	0
 12161  001B44  6E79               	movwf	_up+1,c
 12162  001B46  0E01               	movlw	1
 12163  001B48  6E78               	movwf	_up,c
 12164                           
 12165                           ;UI.c: 447: return 1;
 12166  001B4A  0E00               	movlw	0
 12167  001B4C  6E2B               	movwf	?_inputHandler+1,c
 12168  001B4E  0E01               	movlw	1
 12169  001B50  6E2A               	movwf	?_inputHandler,c
 12170  001B52  0012               	return	
 12171  001B54                     i2l5041:
 12172                           
 12173                           ;UI.c: 449: down = 1;
 12174  001B54  0E00               	movlw	0
 12175  001B56  6E71               	movwf	_down+1,c
 12176  001B58  0E01               	movlw	1
 12177  001B5A  6E70               	movwf	_down,c
 12178                           
 12179                           ;UI.c: 450: return 1;
 12180  001B5C  0E00               	movlw	0
 12181  001B5E  6E2B               	movwf	?_inputHandler+1,c
 12182  001B60  0E01               	movlw	1
 12183  001B62  6E2A               	movwf	?_inputHandler,c
 12184  001B64  0012               	return	
 12185  001B66                     i2l5045:
 12186                           
 12187                           ;UI.c: 452: enter = 1;
 12188  001B66  0E00               	movlw	0
 12189  001B68  6E73               	movwf	_enter+1,c
 12190  001B6A  0E01               	movlw	1
 12191  001B6C  6E72               	movwf	_enter,c
 12192                           
 12193                           ;UI.c: 453: return 1;
 12194  001B6E  0E00               	movlw	0
 12195  001B70  6E2B               	movwf	?_inputHandler+1,c
 12196  001B72  0E01               	movlw	1
 12197  001B74  6E2A               	movwf	?_inputHandler,c
 12198  001B76  0012               	return	
 12199  001B78                     i2l5049:
 12200                           
 12201                           ;UI.c: 455: back = 1;
 12202  001B78  0E00               	movlw	0
 12203  001B7A  6E65               	movwf	_back+1,c
 12204  001B7C  0E01               	movlw	1
 12205  001B7E  6E64               	movwf	_back,c
 12206                           
 12207                           ;UI.c: 456: return 1;
 12208  001B80  0E00               	movlw	0
 12209  001B82  6E2B               	movwf	?_inputHandler+1,c
 12210  001B84  0E01               	movlw	1
 12211  001B86  6E2A               	movwf	?_inputHandler,c
 12212  001B88  0012               	return	
 12213  001B8A                     i2l5053:
 12214                           
 12215                           ;UI.c: 459: return 1;
 12216  001B8A  0E00               	movlw	0
 12217  001B8C  6E2B               	movwf	?_inputHandler+1,c
 12218  001B8E  0E01               	movlw	1
 12219  001B90  6E2A               	movwf	?_inputHandler,c
 12220                           
 12221                           ;UI.c: 460: }
 12222  001B92  0012               	return	
 12223  001B94                     i2l5059:
 12224  001B94  507E               	movf	_input,w,c	;volatile
 12225                           
 12226                           ; Switch size 1, requested type "space"
 12227                           ; Number of cases is 7, Range of values is 49 to 68
 12228                           ; switch strategies available:
 12229                           ; Name         Instructions Cycles
 12230                           ; simple_byte           22    12 (average)
 12231                           ;	Chosen strategy is simple_byte
 12232  001B96  0A31               	xorlw	49	; case 49
 12233  001B98  B4D8               	btfsc	status,2,c
 12234  001B9A  D789               	goto	i2l4989
 12235  001B9C  0A03               	xorlw	3	; case 50
 12236  001B9E  B4D8               	btfsc	status,2,c
 12237  001BA0  D799               	goto	i2l5003
 12238  001BA2  0A01               	xorlw	1	; case 51
 12239  001BA4  B4D8               	btfsc	status,2,c
 12240  001BA6  D7BA               	goto	i2l5023
 12241  001BA8  0A72               	xorlw	114	; case 65
 12242  001BAA  B4D8               	btfsc	status,2,c
 12243  001BAC  D7CA               	goto	i2l5037
 12244  001BAE  0A03               	xorlw	3	; case 66
 12245  001BB0  B4D8               	btfsc	status,2,c
 12246  001BB2  D7D0               	goto	i2l5041
 12247  001BB4  0A01               	xorlw	1	; case 67
 12248  001BB6  B4D8               	btfsc	status,2,c
 12249  001BB8  D7D6               	goto	i2l5045
 12250  001BBA  0A07               	xorlw	7	; case 68
 12251  001BBC  B4D8               	btfsc	status,2,c
 12252  001BBE  D7DC               	goto	i2l5049
 12253  001BC0  D7E4               	goto	i2l5053
 12254  001BC2                     __end_of_inputHandler:
 12255                           	opt stack 0
 12256                           pclatu	equ	0xFFB
 12257                           pclath	equ	0xFFA
 12258                           tblptru	equ	0xFF8
 12259                           tblptrh	equ	0xFF7
 12260                           tblptrl	equ	0xFF6
 12261                           tablat	equ	0xFF5
 12262                           prodh	equ	0xFF4
 12263                           prodl	equ	0xFF3
 12264                           intcon	equ	0xFF2
 12265                           intcon2	equ	0xFF1
 12266                           intcon3	equ	0xFF0
 12267                           indf0	equ	0xFEF
 12268                           postinc0	equ	0xFEE
 12269                           fsr0h	equ	0xFEA
 12270                           fsr0l	equ	0xFE9
 12271                           wreg	equ	0xFE8
 12272                           postdec1	equ	0xFE5
 12273                           fsr1h	equ	0xFE2
 12274                           fsr1l	equ	0xFE1
 12275                           indf2	equ	0xFDF
 12276                           postinc2	equ	0xFDE
 12277                           postdec2	equ	0xFDD
 12278                           fsr2h	equ	0xFDA
 12279                           fsr2l	equ	0xFD9
 12280                           status	equ	0xFD8
 12281                           
 12282 ;; *************** function i2_change_state_to_menu_22 *****************
 12283 ;; Defined at:
 12284 ;;		line 494 in file "UI.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;		None
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;		None
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      void 
 12291 ;; Registers used:
 12292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;Total ram usage:        0 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:    3
 12305 ;; This function calls:
 12306 ;;		i2_lcdInst
 12307 ;;		i2_printf
 12308 ;; This function is called by:
 12309 ;;		_updateMenu
 12310 ;;		_inputHandler
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	text51
 12315  002E48                     __ptext51:
 12316                           	opt stack 0
 12317  002E48                     i2_change_state_to_menu_22:
 12318                           	opt stack 19
 12319                           
 12320                           ;UI.c: 495: cur_state = 22;
 12321                           
 12322                           ;incstack = 0
 12323  002E48  0E00               	movlw	0
 12324  002E4A  0100               	movlb	0	; () banked
 12325  002E4C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12326  002E4E  0E16               	movlw	22
 12327  002E50  6FDB               	movwf	_cur_state& (0+255),b
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;UI.c: 497: lcdInst(0b10000000);;
 12331  002E52  0E80               	movlw	128
 12332  002E54  EC4E  F019         	call	i2_lcdInst
 12333                           
 12334                           ;UI.c: 498: printf("2. SORT        <");
 12335  002E58  0E35               	movlw	low STR_34
 12336  002E5A  6E0D               	movwf	i2printf@f,c
 12337  002E5C  0EFF               	movlw	high STR_34
 12338  002E5E  6E0E               	movwf	i2printf@f+1,c
 12339  002E60  EC5A  F006         	call	i2_printf	;wreg free
 12340                           
 12341                           ;UI.c: 499: lcdInst(0b11000000);;
 12342  002E64  0EC0               	movlw	192
 12343  002E66  EC4E  F019         	call	i2_lcdInst
 12344                           
 12345                           ;UI.c: 500: printf("3. LOGS         ");
 12346  002E6A  0E69               	movlw	low STR_36
 12347  002E6C  6E0D               	movwf	i2printf@f,c
 12348  002E6E  0EFE               	movlw	high STR_36
 12349  002E70  6E0E               	movwf	i2printf@f+1,c
 12350  002E72  EC5A  F006         	call	i2_printf	;wreg free
 12351  002E76  0012               	return		;funcret
 12352  002E78                     __end_ofi2_change_state_to_menu_22:
 12353                           	opt stack 0
 12354                           pclatu	equ	0xFFB
 12355                           pclath	equ	0xFFA
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           intcon2	equ	0xFF1
 12364                           intcon3	equ	0xFF0
 12365                           indf0	equ	0xFEF
 12366                           postinc0	equ	0xFEE
 12367                           fsr0h	equ	0xFEA
 12368                           fsr0l	equ	0xFE9
 12369                           wreg	equ	0xFE8
 12370                           postdec1	equ	0xFE5
 12371                           fsr1h	equ	0xFE2
 12372                           fsr1l	equ	0xFE1
 12373                           indf2	equ	0xFDF
 12374                           postinc2	equ	0xFDE
 12375                           postdec2	equ	0xFDD
 12376                           fsr2h	equ	0xFDA
 12377                           fsr2l	equ	0xFD9
 12378                           status	equ	0xFD8
 12379                           
 12380 ;; *************** function i2_change_state_to_menu_12 *****************
 12381 ;; Defined at:
 12382 ;;		line 486 in file "UI.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;		None
 12385 ;; Auto vars:     Size  Location     Type
 12386 ;;		None
 12387 ;; Return value:  Size  Location     Type
 12388 ;;                  1    wreg      void 
 12389 ;; Registers used:
 12390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12391 ;; Tracked objects:
 12392 ;;		On entry : 0/0
 12393 ;;		On exit  : 0/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;Total ram usage:        0 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; Hardware stack levels required when called:    3
 12403 ;; This function calls:
 12404 ;;		i2_lcdInst
 12405 ;;		i2_printf
 12406 ;; This function is called by:
 12407 ;;		_updateMenu
 12408 ;;		_inputHandler
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text52
 12413  002E78                     __ptext52:
 12414                           	opt stack 0
 12415  002E78                     i2_change_state_to_menu_12:
 12416                           	opt stack 19
 12417                           
 12418                           ;UI.c: 487: cur_state = 12;
 12419                           
 12420                           ;incstack = 0
 12421  002E78  0E00               	movlw	0
 12422  002E7A  0100               	movlb	0	; () banked
 12423  002E7C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12424  002E7E  0E0C               	movlw	12
 12425  002E80  6FDB               	movwf	_cur_state& (0+255),b
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;UI.c: 489: lcdInst(0b10000000);;
 12429  002E82  0E80               	movlw	128
 12430  002E84  EC4E  F019         	call	i2_lcdInst
 12431                           
 12432                           ;UI.c: 490: printf("1. DATE/TIME    ");
 12433  002E88  0E8B               	movlw	low STR_33
 12434  002E8A  6E0D               	movwf	i2printf@f,c
 12435  002E8C  0EFE               	movlw	high STR_33
 12436  002E8E  6E0E               	movwf	i2printf@f+1,c
 12437  002E90  EC5A  F006         	call	i2_printf	;wreg free
 12438                           
 12439                           ;UI.c: 491: lcdInst(0b11000000);;
 12440  002E94  0EC0               	movlw	192
 12441  002E96  EC4E  F019         	call	i2_lcdInst
 12442                           
 12443                           ;UI.c: 492: printf("2. SORT        <");
 12444  002E9A  0E35               	movlw	low STR_34
 12445  002E9C  6E0D               	movwf	i2printf@f,c
 12446  002E9E  0EFF               	movlw	high STR_34
 12447  002EA0  6E0E               	movwf	i2printf@f+1,c
 12448  002EA2  EC5A  F006         	call	i2_printf	;wreg free
 12449  002EA6  0012               	return		;funcret
 12450  002EA8                     __end_ofi2_change_state_to_menu_12:
 12451                           	opt stack 0
 12452                           pclatu	equ	0xFFB
 12453                           pclath	equ	0xFFA
 12454                           tblptru	equ	0xFF8
 12455                           tblptrh	equ	0xFF7
 12456                           tblptrl	equ	0xFF6
 12457                           tablat	equ	0xFF5
 12458                           prodh	equ	0xFF4
 12459                           prodl	equ	0xFF3
 12460                           intcon	equ	0xFF2
 12461                           intcon2	equ	0xFF1
 12462                           intcon3	equ	0xFF0
 12463                           indf0	equ	0xFEF
 12464                           postinc0	equ	0xFEE
 12465                           fsr0h	equ	0xFEA
 12466                           fsr0l	equ	0xFE9
 12467                           wreg	equ	0xFE8
 12468                           postdec1	equ	0xFE5
 12469                           fsr1h	equ	0xFE2
 12470                           fsr1l	equ	0xFE1
 12471                           indf2	equ	0xFDF
 12472                           postinc2	equ	0xFDE
 12473                           postdec2	equ	0xFDD
 12474                           fsr2h	equ	0xFDA
 12475                           fsr2l	equ	0xFD9
 12476                           status	equ	0xFD8
 12477                           
 12478 ;; *************** function _change_state_to_menu_23 *****************
 12479 ;; Defined at:
 12480 ;;		line 502 in file "UI.c"
 12481 ;; Parameters:    Size  Location     Type
 12482 ;;		None
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;		None
 12485 ;; Return value:  Size  Location     Type
 12486 ;;                  1    wreg      void 
 12487 ;; Registers used:
 12488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;Total ram usage:        0 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; Hardware stack levels required when called:    3
 12501 ;; This function calls:
 12502 ;;		i2_lcdInst
 12503 ;;		i2_printf
 12504 ;; This function is called by:
 12505 ;;		_updateMenu
 12506 ;;		_inputHandler
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           	psect	text53
 12511  002EA8                     __ptext53:
 12512                           	opt stack 0
 12513  002EA8                     _change_state_to_menu_23:
 12514                           	opt stack 18
 12515                           
 12516                           ;UI.c: 503: cur_state = 23;
 12517                           
 12518                           ;incstack = 0
 12519  002EA8  0E00               	movlw	0
 12520  002EAA  0100               	movlb	0	; () banked
 12521  002EAC  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12522  002EAE  0E17               	movlw	23
 12523  002EB0  6FDB               	movwf	_cur_state& (0+255),b
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;UI.c: 505: lcdInst(0b10000000);;
 12527  002EB2  0E80               	movlw	128
 12528  002EB4  EC4E  F019         	call	i2_lcdInst
 12529                           
 12530                           ;UI.c: 506: printf("2. SORT         ");
 12531  002EB8  0E7A               	movlw	low STR_32
 12532  002EBA  6E0D               	movwf	i2printf@f,c
 12533  002EBC  0EFE               	movlw	high STR_32
 12534  002EBE  6E0E               	movwf	i2printf@f+1,c
 12535  002EC0  EC5A  F006         	call	i2_printf	;wreg free
 12536                           
 12537                           ;UI.c: 507: lcdInst(0b11000000);;
 12538  002EC4  0EC0               	movlw	192
 12539  002EC6  EC4E  F019         	call	i2_lcdInst
 12540                           
 12541                           ;UI.c: 508: printf("3. LOGS        <");
 12542  002ECA  0E24               	movlw	low STR_38
 12543  002ECC  6E0D               	movwf	i2printf@f,c
 12544  002ECE  0EFF               	movlw	high STR_38
 12545  002ED0  6E0E               	movwf	i2printf@f+1,c
 12546  002ED2  EC5A  F006         	call	i2_printf	;wreg free
 12547  002ED6  0012               	return		;funcret
 12548  002ED8                     __end_of_change_state_to_menu_23:
 12549                           	opt stack 0
 12550                           pclatu	equ	0xFFB
 12551                           pclath	equ	0xFFA
 12552                           tblptru	equ	0xFF8
 12553                           tblptrh	equ	0xFF7
 12554                           tblptrl	equ	0xFF6
 12555                           tablat	equ	0xFF5
 12556                           prodh	equ	0xFF4
 12557                           prodl	equ	0xFF3
 12558                           intcon	equ	0xFF2
 12559                           intcon2	equ	0xFF1
 12560                           intcon3	equ	0xFF0
 12561                           indf0	equ	0xFEF
 12562                           postinc0	equ	0xFEE
 12563                           fsr0h	equ	0xFEA
 12564                           fsr0l	equ	0xFE9
 12565                           wreg	equ	0xFE8
 12566                           postdec1	equ	0xFE5
 12567                           fsr1h	equ	0xFE2
 12568                           fsr1l	equ	0xFE1
 12569                           indf2	equ	0xFDF
 12570                           postinc2	equ	0xFDE
 12571                           postdec2	equ	0xFDD
 12572                           fsr2h	equ	0xFDA
 12573                           fsr2l	equ	0xFD9
 12574                           status	equ	0xFD8
 12575                           
 12576 ;; *************** function _change_state_to_menu_11 *****************
 12577 ;; Defined at:
 12578 ;;		line 478 in file "UI.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;		None
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;		None
 12583 ;; Return value:  Size  Location     Type
 12584 ;;                  1    wreg      void 
 12585 ;; Registers used:
 12586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;Total ram usage:        0 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; Hardware stack levels required when called:    3
 12599 ;; This function calls:
 12600 ;;		i2_lcdInst
 12601 ;;		i2_printf
 12602 ;; This function is called by:
 12603 ;;		_updateMenu
 12604 ;;		_inputHandler
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           	psect	text54
 12609  002ED8                     __ptext54:
 12610                           	opt stack 0
 12611  002ED8                     _change_state_to_menu_11:
 12612                           	opt stack 18
 12613                           
 12614                           ;UI.c: 479: cur_state = 11;
 12615                           
 12616                           ;incstack = 0
 12617  002ED8  0E00               	movlw	0
 12618  002EDA  0100               	movlb	0	; () banked
 12619  002EDC  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12620  002EDE  0E0B               	movlw	11
 12621  002EE0  6FDB               	movwf	_cur_state& (0+255),b
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;UI.c: 481: lcdInst(0b10000000);;
 12625  002EE2  0E80               	movlw	128
 12626  002EE4  EC4E  F019         	call	i2_lcdInst
 12627                           
 12628                           ;UI.c: 482: printf("1. DATE/TIME   <");
 12629  002EE8  0E46               	movlw	low STR_31
 12630  002EEA  6E0D               	movwf	i2printf@f,c
 12631  002EEC  0EFF               	movlw	high STR_31
 12632  002EEE  6E0E               	movwf	i2printf@f+1,c
 12633  002EF0  EC5A  F006         	call	i2_printf	;wreg free
 12634                           
 12635                           ;UI.c: 483: lcdInst(0b11000000);;
 12636  002EF4  0EC0               	movlw	192
 12637  002EF6  EC4E  F019         	call	i2_lcdInst
 12638                           
 12639                           ;UI.c: 484: printf("2. SORT         ");
 12640  002EFA  0E7A               	movlw	low STR_32
 12641  002EFC  6E0D               	movwf	i2printf@f,c
 12642  002EFE  0EFE               	movlw	high STR_32
 12643  002F00  6E0E               	movwf	i2printf@f+1,c
 12644  002F02  EC5A  F006         	call	i2_printf	;wreg free
 12645  002F06  0012               	return		;funcret
 12646  002F08                     __end_of_change_state_to_menu_11:
 12647                           	opt stack 0
 12648                           pclatu	equ	0xFFB
 12649                           pclath	equ	0xFFA
 12650                           tblptru	equ	0xFF8
 12651                           tblptrh	equ	0xFF7
 12652                           tblptrl	equ	0xFF6
 12653                           tablat	equ	0xFF5
 12654                           prodh	equ	0xFF4
 12655                           prodl	equ	0xFF3
 12656                           intcon	equ	0xFF2
 12657                           intcon2	equ	0xFF1
 12658                           intcon3	equ	0xFF0
 12659                           indf0	equ	0xFEF
 12660                           postinc0	equ	0xFEE
 12661                           fsr0h	equ	0xFEA
 12662                           fsr0l	equ	0xFE9
 12663                           wreg	equ	0xFE8
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _change_state_to_logs_34 *****************
 12675 ;; Defined at:
 12676 ;;		line 545 in file "UI.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;		None
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;Total ram usage:        0 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    3
 12697 ;; This function calls:
 12698 ;;		i2_lcdInst
 12699 ;;		i2_printf
 12700 ;; This function is called by:
 12701 ;;		_updateMenu
 12702 ;;		_inputHandler
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text55
 12707  002F08                     __ptext55:
 12708                           	opt stack 0
 12709  002F08                     _change_state_to_logs_34:
 12710                           	opt stack 18
 12711                           
 12712                           ;UI.c: 546: cur_state = 1034;
 12713                           
 12714                           ;incstack = 0
 12715  002F08  0E04               	movlw	4
 12716  002F0A  0100               	movlb	0	; () banked
 12717  002F0C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12718  002F0E  0E0A               	movlw	10
 12719  002F10  6FDB               	movwf	_cur_state& (0+255),b
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;UI.c: 547: lcdInst(0b10000000);;
 12723  002F12  0E80               	movlw	128
 12724  002F14  EC4E  F019         	call	i2_lcdInst
 12725                           
 12726                           ;UI.c: 548: printf("LOG 3           ");
 12727  002F18  0E47               	movlw	low STR_44
 12728  002F1A  6E0D               	movwf	i2printf@f,c
 12729  002F1C  0EFE               	movlw	high STR_44
 12730  002F1E  6E0E               	movwf	i2printf@f+1,c
 12731  002F20  EC5A  F006         	call	i2_printf	;wreg free
 12732                           
 12733                           ;UI.c: 549: lcdInst(0b11000000);;
 12734  002F24  0EC0               	movlw	192
 12735  002F26  EC4E  F019         	call	i2_lcdInst
 12736                           
 12737                           ;UI.c: 550: printf("LOG 4          <");
 12738  002F2A  0E13               	movlw	low STR_50
 12739  002F2C  6E0D               	movwf	i2printf@f,c
 12740  002F2E  0EFF               	movlw	high STR_50
 12741  002F30  6E0E               	movwf	i2printf@f+1,c
 12742  002F32  EC5A  F006         	call	i2_printf	;wreg free
 12743  002F36  0012               	return		;funcret
 12744  002F38                     __end_of_change_state_to_logs_34:
 12745                           	opt stack 0
 12746                           pclatu	equ	0xFFB
 12747                           pclath	equ	0xFFA
 12748                           tblptru	equ	0xFF8
 12749                           tblptrh	equ	0xFF7
 12750                           tblptrl	equ	0xFF6
 12751                           tablat	equ	0xFF5
 12752                           prodh	equ	0xFF4
 12753                           prodl	equ	0xFF3
 12754                           intcon	equ	0xFF2
 12755                           intcon2	equ	0xFF1
 12756                           intcon3	equ	0xFF0
 12757                           indf0	equ	0xFEF
 12758                           postinc0	equ	0xFEE
 12759                           fsr0h	equ	0xFEA
 12760                           fsr0l	equ	0xFE9
 12761                           wreg	equ	0xFE8
 12762                           postdec1	equ	0xFE5
 12763                           fsr1h	equ	0xFE2
 12764                           fsr1l	equ	0xFE1
 12765                           indf2	equ	0xFDF
 12766                           postinc2	equ	0xFDE
 12767                           postdec2	equ	0xFDD
 12768                           fsr2h	equ	0xFDA
 12769                           fsr2l	equ	0xFD9
 12770                           status	equ	0xFD8
 12771                           
 12772 ;; *************** function _change_state_to_logs_33 *****************
 12773 ;; Defined at:
 12774 ;;		line 538 in file "UI.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;		None
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;		None
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  1    wreg      void 
 12781 ;; Registers used:
 12782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12792 ;;Total ram usage:        0 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    3
 12795 ;; This function calls:
 12796 ;;		i2_lcdInst
 12797 ;;		i2_printf
 12798 ;; This function is called by:
 12799 ;;		_updateMenu
 12800 ;;		_inputHandler
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           	psect	text56
 12805  002F38                     __ptext56:
 12806                           	opt stack 0
 12807  002F38                     _change_state_to_logs_33:
 12808                           	opt stack 18
 12809                           
 12810                           ;UI.c: 539: cur_state = 1033;
 12811                           
 12812                           ;incstack = 0
 12813  002F38  0E04               	movlw	4
 12814  002F3A  0100               	movlb	0	; () banked
 12815  002F3C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12816  002F3E  0E09               	movlw	9
 12817  002F40  6FDB               	movwf	_cur_state& (0+255),b
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;UI.c: 540: lcdInst(0b10000000);;
 12821  002F42  0E80               	movlw	128
 12822  002F44  EC4E  F019         	call	i2_lcdInst
 12823                           
 12824                           ;UI.c: 541: printf("LOG 3          <");
 12825  002F48  0E02               	movlw	low STR_46
 12826  002F4A  6E0D               	movwf	i2printf@f,c
 12827  002F4C  0EFF               	movlw	high STR_46
 12828  002F4E  6E0E               	movwf	i2printf@f+1,c
 12829  002F50  EC5A  F006         	call	i2_printf	;wreg free
 12830                           
 12831                           ;UI.c: 542: lcdInst(0b11000000);;
 12832  002F54  0EC0               	movlw	192
 12833  002F56  EC4E  F019         	call	i2_lcdInst
 12834                           
 12835                           ;UI.c: 543: printf("LOG 4           ");
 12836  002F5A  0E58               	movlw	low STR_48
 12837  002F5C  6E0D               	movwf	i2printf@f,c
 12838  002F5E  0EFE               	movlw	high STR_48
 12839  002F60  6E0E               	movwf	i2printf@f+1,c
 12840  002F62  EC5A  F006         	call	i2_printf	;wreg free
 12841  002F66  0012               	return		;funcret
 12842  002F68                     __end_of_change_state_to_logs_33:
 12843                           	opt stack 0
 12844                           pclatu	equ	0xFFB
 12845                           pclath	equ	0xFFA
 12846                           tblptru	equ	0xFF8
 12847                           tblptrh	equ	0xFF7
 12848                           tblptrl	equ	0xFF6
 12849                           tablat	equ	0xFF5
 12850                           prodh	equ	0xFF4
 12851                           prodl	equ	0xFF3
 12852                           intcon	equ	0xFF2
 12853                           intcon2	equ	0xFF1
 12854                           intcon3	equ	0xFF0
 12855                           indf0	equ	0xFEF
 12856                           postinc0	equ	0xFEE
 12857                           fsr0h	equ	0xFEA
 12858                           fsr0l	equ	0xFE9
 12859                           wreg	equ	0xFE8
 12860                           postdec1	equ	0xFE5
 12861                           fsr1h	equ	0xFE2
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           fsr2h	equ	0xFDA
 12867                           fsr2l	equ	0xFD9
 12868                           status	equ	0xFD8
 12869                           
 12870 ;; *************** function _change_state_to_logs_23 *****************
 12871 ;; Defined at:
 12872 ;;		line 531 in file "UI.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;		None
 12875 ;; Auto vars:     Size  Location     Type
 12876 ;;		None
 12877 ;; Return value:  Size  Location     Type
 12878 ;;                  1    wreg      void 
 12879 ;; Registers used:
 12880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12881 ;; Tracked objects:
 12882 ;;		On entry : 0/0
 12883 ;;		On exit  : 0/0
 12884 ;;		Unchanged: 0/0
 12885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;Total ram usage:        0 bytes
 12891 ;; Hardware stack levels used:    1
 12892 ;; Hardware stack levels required when called:    3
 12893 ;; This function calls:
 12894 ;;		i2_lcdInst
 12895 ;;		i2_printf
 12896 ;; This function is called by:
 12897 ;;		_updateMenu
 12898 ;;		_inputHandler
 12899 ;; This function uses a non-reentrant model
 12900 ;;
 12901                           
 12902                           	psect	text57
 12903  003026                     __ptext57:
 12904                           	opt stack 0
 12905  003026                     _change_state_to_logs_23:
 12906                           	opt stack 18
 12907                           
 12908                           ;UI.c: 532: cur_state = 1023;
 12909                           
 12910                           ;incstack = 0
 12911  003026  0E03               	movlw	3
 12912  003028  0100               	movlb	0	; () banked
 12913  00302A  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12914  00302C  69DB               	setf	_cur_state& (0+255),b
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;UI.c: 533: lcdInst(0b10000000);;
 12918  00302E  0E80               	movlw	128
 12919  003030  EC4E  F019         	call	i2_lcdInst
 12920                           
 12921                           ;UI.c: 534: printf("LOG 2           ");
 12922  003034  0E36               	movlw	low STR_40
 12923  003036  6E0D               	movwf	i2printf@f,c
 12924  003038  0EFE               	movlw	high STR_40
 12925  00303A  6E0E               	movwf	i2printf@f+1,c
 12926  00303C  EC5A  F006         	call	i2_printf	;wreg free
 12927                           
 12928                           ;UI.c: 535: lcdInst(0b11000000);;
 12929  003040  0EC0               	movlw	192
 12930  003042  EC4E  F019         	call	i2_lcdInst
 12931                           
 12932                           ;UI.c: 536: printf("LOG 3          <");
 12933  003046  0E02               	movlw	low STR_46
 12934  003048  6E0D               	movwf	i2printf@f,c
 12935  00304A  0EFF               	movlw	high STR_46
 12936  00304C  6E0E               	movwf	i2printf@f+1,c
 12937  00304E  EC5A  F006         	call	i2_printf	;wreg free
 12938  003052  0012               	return		;funcret
 12939  003054                     __end_of_change_state_to_logs_23:
 12940                           	opt stack 0
 12941                           pclatu	equ	0xFFB
 12942                           pclath	equ	0xFFA
 12943                           tblptru	equ	0xFF8
 12944                           tblptrh	equ	0xFF7
 12945                           tblptrl	equ	0xFF6
 12946                           tablat	equ	0xFF5
 12947                           prodh	equ	0xFF4
 12948                           prodl	equ	0xFF3
 12949                           intcon	equ	0xFF2
 12950                           intcon2	equ	0xFF1
 12951                           intcon3	equ	0xFF0
 12952                           indf0	equ	0xFEF
 12953                           postinc0	equ	0xFEE
 12954                           fsr0h	equ	0xFEA
 12955                           fsr0l	equ	0xFE9
 12956                           wreg	equ	0xFE8
 12957                           postdec1	equ	0xFE5
 12958                           fsr1h	equ	0xFE2
 12959                           fsr1l	equ	0xFE1
 12960                           indf2	equ	0xFDF
 12961                           postinc2	equ	0xFDE
 12962                           postdec2	equ	0xFDD
 12963                           fsr2h	equ	0xFDA
 12964                           fsr2l	equ	0xFD9
 12965                           status	equ	0xFD8
 12966                           
 12967 ;; *************** function _change_state_to_logs_22 *****************
 12968 ;; Defined at:
 12969 ;;		line 524 in file "UI.c"
 12970 ;; Parameters:    Size  Location     Type
 12971 ;;		None
 12972 ;; Auto vars:     Size  Location     Type
 12973 ;;		None
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  1    wreg      void 
 12976 ;; Registers used:
 12977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/0
 12980 ;;		On exit  : 0/0
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12987 ;;Total ram usage:        0 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    3
 12990 ;; This function calls:
 12991 ;;		i2_lcdInst
 12992 ;;		i2_printf
 12993 ;; This function is called by:
 12994 ;;		_updateMenu
 12995 ;;		_inputHandler
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text58
 13000  002F68                     __ptext58:
 13001                           	opt stack 0
 13002  002F68                     _change_state_to_logs_22:
 13003                           	opt stack 18
 13004                           
 13005                           ;UI.c: 525: cur_state = 1022;
 13006                           
 13007                           ;incstack = 0
 13008  002F68  0E03               	movlw	3
 13009  002F6A  0100               	movlb	0	; () banked
 13010  002F6C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13011  002F6E  0EFE               	movlw	254
 13012  002F70  6FDB               	movwf	_cur_state& (0+255),b
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;UI.c: 526: lcdInst(0b10000000);;
 13016  002F72  0E80               	movlw	128
 13017  002F74  EC4E  F019         	call	i2_lcdInst
 13018                           
 13019                           ;UI.c: 527: printf("LOG 2          <");
 13020  002F78  0EF1               	movlw	low STR_42
 13021  002F7A  6E0D               	movwf	i2printf@f,c
 13022  002F7C  0EFE               	movlw	high STR_42
 13023  002F7E  6E0E               	movwf	i2printf@f+1,c
 13024  002F80  EC5A  F006         	call	i2_printf	;wreg free
 13025                           
 13026                           ;UI.c: 528: lcdInst(0b11000000);;
 13027  002F84  0EC0               	movlw	192
 13028  002F86  EC4E  F019         	call	i2_lcdInst
 13029                           
 13030                           ;UI.c: 529: printf("LOG 3           ");
 13031  002F8A  0E47               	movlw	low STR_44
 13032  002F8C  6E0D               	movwf	i2printf@f,c
 13033  002F8E  0EFE               	movlw	high STR_44
 13034  002F90  6E0E               	movwf	i2printf@f+1,c
 13035  002F92  EC5A  F006         	call	i2_printf	;wreg free
 13036  002F96  0012               	return		;funcret
 13037  002F98                     __end_of_change_state_to_logs_22:
 13038                           	opt stack 0
 13039                           pclatu	equ	0xFFB
 13040                           pclath	equ	0xFFA
 13041                           tblptru	equ	0xFF8
 13042                           tblptrh	equ	0xFF7
 13043                           tblptrl	equ	0xFF6
 13044                           tablat	equ	0xFF5
 13045                           prodh	equ	0xFF4
 13046                           prodl	equ	0xFF3
 13047                           intcon	equ	0xFF2
 13048                           intcon2	equ	0xFF1
 13049                           intcon3	equ	0xFF0
 13050                           indf0	equ	0xFEF
 13051                           postinc0	equ	0xFEE
 13052                           fsr0h	equ	0xFEA
 13053                           fsr0l	equ	0xFE9
 13054                           wreg	equ	0xFE8
 13055                           postdec1	equ	0xFE5
 13056                           fsr1h	equ	0xFE2
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           fsr2h	equ	0xFDA
 13062                           fsr2l	equ	0xFD9
 13063                           status	equ	0xFD8
 13064                           
 13065 ;; *************** function _change_state_to_logs_12 *****************
 13066 ;; Defined at:
 13067 ;;		line 517 in file "UI.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;		None
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;		None
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  1    wreg      void 
 13074 ;; Registers used:
 13075 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : 0/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13085 ;;Total ram usage:        0 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    3
 13088 ;; This function calls:
 13089 ;;		i2_lcdInst
 13090 ;;		i2_printf
 13091 ;; This function is called by:
 13092 ;;		_updateMenu
 13093 ;;		_inputHandler
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           	psect	text59
 13098  002F98                     __ptext59:
 13099                           	opt stack 0
 13100  002F98                     _change_state_to_logs_12:
 13101                           	opt stack 18
 13102                           
 13103                           ;UI.c: 518: cur_state = 1012;
 13104                           
 13105                           ;incstack = 0
 13106  002F98  0E03               	movlw	3
 13107  002F9A  0100               	movlb	0	; () banked
 13108  002F9C  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13109  002F9E  0EF4               	movlw	244
 13110  002FA0  6FDB               	movwf	_cur_state& (0+255),b
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;UI.c: 519: lcdInst(0b10000000);;
 13114  002FA2  0E80               	movlw	128
 13115  002FA4  EC4E  F019         	call	i2_lcdInst
 13116                           
 13117                           ;UI.c: 520: printf("LOG 1           ");
 13118  002FA8  0E25               	movlw	low STR_41
 13119  002FAA  6E0D               	movwf	i2printf@f,c
 13120  002FAC  0EFE               	movlw	high STR_41
 13121  002FAE  6E0E               	movwf	i2printf@f+1,c
 13122  002FB0  EC5A  F006         	call	i2_printf	;wreg free
 13123                           
 13124                           ;UI.c: 521: lcdInst(0b11000000);;
 13125  002FB4  0EC0               	movlw	192
 13126  002FB6  EC4E  F019         	call	i2_lcdInst
 13127                           
 13128                           ;UI.c: 522: printf("LOG 2          <");
 13129  002FBA  0EF1               	movlw	low STR_42
 13130  002FBC  6E0D               	movwf	i2printf@f,c
 13131  002FBE  0EFE               	movlw	high STR_42
 13132  002FC0  6E0E               	movwf	i2printf@f+1,c
 13133  002FC2  EC5A  F006         	call	i2_printf	;wreg free
 13134  002FC6  0012               	return		;funcret
 13135  002FC8                     __end_of_change_state_to_logs_12:
 13136                           	opt stack 0
 13137                           pclatu	equ	0xFFB
 13138                           pclath	equ	0xFFA
 13139                           tblptru	equ	0xFF8
 13140                           tblptrh	equ	0xFF7
 13141                           tblptrl	equ	0xFF6
 13142                           tablat	equ	0xFF5
 13143                           prodh	equ	0xFF4
 13144                           prodl	equ	0xFF3
 13145                           intcon	equ	0xFF2
 13146                           intcon2	equ	0xFF1
 13147                           intcon3	equ	0xFF0
 13148                           indf0	equ	0xFEF
 13149                           postinc0	equ	0xFEE
 13150                           fsr0h	equ	0xFEA
 13151                           fsr0l	equ	0xFE9
 13152                           wreg	equ	0xFE8
 13153                           postdec1	equ	0xFE5
 13154                           fsr1h	equ	0xFE2
 13155                           fsr1l	equ	0xFE1
 13156                           indf2	equ	0xFDF
 13157                           postinc2	equ	0xFDE
 13158                           postdec2	equ	0xFDD
 13159                           fsr2h	equ	0xFDA
 13160                           fsr2l	equ	0xFD9
 13161                           status	equ	0xFD8
 13162                           
 13163 ;; *************** function _change_state_to_logs_11 *****************
 13164 ;; Defined at:
 13165 ;;		line 510 in file "UI.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;		None
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;		None
 13170 ;; Return value:  Size  Location     Type
 13171 ;;                  1    wreg      void 
 13172 ;; Registers used:
 13173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13174 ;; Tracked objects:
 13175 ;;		On entry : 0/0
 13176 ;;		On exit  : 0/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;Total ram usage:        0 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:    3
 13186 ;; This function calls:
 13187 ;;		i2_lcdInst
 13188 ;;		i2_printf
 13189 ;; This function is called by:
 13190 ;;		_updateMenu
 13191 ;;		_inputHandler
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195                           	psect	text60
 13196  002FC8                     __ptext60:
 13197                           	opt stack 0
 13198  002FC8                     _change_state_to_logs_11:
 13199                           	opt stack 18
 13200                           
 13201                           ;UI.c: 511: cur_state = 1011;
 13202                           
 13203                           ;incstack = 0
 13204  002FC8  0E03               	movlw	3
 13205  002FCA  0100               	movlb	0	; () banked
 13206  002FCC  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13207  002FCE  0EF3               	movlw	243
 13208  002FD0  6FDB               	movwf	_cur_state& (0+255),b
 13209                           
 13210                           ; BSR set to: 0
 13211                           ;UI.c: 512: lcdInst(0b10000000);;
 13212  002FD2  0E80               	movlw	128
 13213  002FD4  EC4E  F019         	call	i2_lcdInst
 13214                           
 13215                           ;UI.c: 513: printf("LOG 1          <");
 13216  002FD8  0EE0               	movlw	low STR_39
 13217  002FDA  6E0D               	movwf	i2printf@f,c
 13218  002FDC  0EFE               	movlw	high STR_39
 13219  002FDE  6E0E               	movwf	i2printf@f+1,c
 13220  002FE0  EC5A  F006         	call	i2_printf	;wreg free
 13221                           
 13222                           ;UI.c: 514: lcdInst(0b11000000);;
 13223  002FE4  0EC0               	movlw	192
 13224  002FE6  EC4E  F019         	call	i2_lcdInst
 13225                           
 13226                           ;UI.c: 515: printf("LOG 2           ");
 13227  002FEA  0E36               	movlw	low STR_40
 13228  002FEC  6E0D               	movwf	i2printf@f,c
 13229  002FEE  0EFE               	movlw	high STR_40
 13230  002FF0  6E0E               	movwf	i2printf@f+1,c
 13231  002FF2  EC5A  F006         	call	i2_printf	;wreg free
 13232  002FF6  0012               	return		;funcret
 13233  002FF8                     __end_of_change_state_to_logs_11:
 13234                           	opt stack 0
 13235                           pclatu	equ	0xFFB
 13236                           pclath	equ	0xFFA
 13237                           tblptru	equ	0xFF8
 13238                           tblptrh	equ	0xFF7
 13239                           tblptrl	equ	0xFF6
 13240                           tablat	equ	0xFF5
 13241                           prodh	equ	0xFF4
 13242                           prodl	equ	0xFF3
 13243                           intcon	equ	0xFF2
 13244                           intcon2	equ	0xFF1
 13245                           intcon3	equ	0xFF0
 13246                           indf0	equ	0xFEF
 13247                           postinc0	equ	0xFEE
 13248                           fsr0h	equ	0xFEA
 13249                           fsr0l	equ	0xFE9
 13250                           wreg	equ	0xFE8
 13251                           postdec1	equ	0xFE5
 13252                           fsr1h	equ	0xFE2
 13253                           fsr1l	equ	0xFE1
 13254                           indf2	equ	0xFDF
 13255                           postinc2	equ	0xFDE
 13256                           postdec2	equ	0xFDD
 13257                           fsr2h	equ	0xFDA
 13258                           fsr2l	equ	0xFD9
 13259                           status	equ	0xFD8
 13260                           
 13261 ;; *************** function _dispLogs *****************
 13262 ;; Defined at:
 13263 ;;		line 463 in file "UI.c"
 13264 ;; Parameters:    Size  Location     Type
 13265 ;;  myLog           2   17[COMRAM] int 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;		None
 13268 ;; Return value:  Size  Location     Type
 13269 ;;                  1    wreg      void 
 13270 ;; Registers used:
 13271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13277 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13280 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13281 ;;Total ram usage:        2 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:    2
 13284 ;; This function calls:
 13285 ;;		_retrieveLog
 13286 ;; This function is called by:
 13287 ;;		_updateMenu
 13288 ;; This function uses a non-reentrant model
 13289 ;;
 13290                           
 13291                           	psect	text61
 13292  00316E                     __ptext61:
 13293                           	opt stack 0
 13294  00316E                     _dispLogs:
 13295                           	opt stack 20
 13296                           
 13297                           ;UI.c: 464: logstate = 1;
 13298                           
 13299                           ;incstack = 0
 13300  00316E  0E00               	movlw	0
 13301  003170  0100               	movlb	0	; () banked
 13302  003172  6FF8               	movwf	(_logstate+1)& (0+255),b
 13303  003174  0E01               	movlw	1
 13304  003176  6FF7               	movwf	_logstate& (0+255),b
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;UI.c: 465: log = myLog;
 13308  003178  C012  F0E7         	movff	dispLogs@myLog,_log
 13309  00317C  C013  F0E8         	movff	dispLogs@myLog+1,_log+1
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;UI.c: 466: retrieveLog(myLog - 1);
 13313  003180  0EFF               	movlw	255
 13314  003182  2412               	addwf	dispLogs@myLog,w,c
 13315  003184  6E07               	movwf	retrieveLog@logNum,c
 13316  003186  0EFF               	movlw	255
 13317  003188  2013               	addwfc	dispLogs@myLog+1,w,c
 13318  00318A  6E08               	movwf	retrieveLog@logNum+1,c
 13319  00318C  EC59  F010         	call	_retrieveLog	;wreg free
 13320  003190  0012               	return		;funcret
 13321  003192                     __end_of_dispLogs:
 13322                           	opt stack 0
 13323                           pclatu	equ	0xFFB
 13324                           pclath	equ	0xFFA
 13325                           tblptru	equ	0xFF8
 13326                           tblptrh	equ	0xFF7
 13327                           tblptrl	equ	0xFF6
 13328                           tablat	equ	0xFF5
 13329                           prodh	equ	0xFF4
 13330                           prodl	equ	0xFF3
 13331                           intcon	equ	0xFF2
 13332                           intcon2	equ	0xFF1
 13333                           intcon3	equ	0xFF0
 13334                           indf0	equ	0xFEF
 13335                           postinc0	equ	0xFEE
 13336                           fsr0h	equ	0xFEA
 13337                           fsr0l	equ	0xFE9
 13338                           wreg	equ	0xFE8
 13339                           postdec1	equ	0xFE5
 13340                           fsr1h	equ	0xFE2
 13341                           fsr1l	equ	0xFE1
 13342                           indf2	equ	0xFDF
 13343                           postinc2	equ	0xFDE
 13344                           postdec2	equ	0xFDD
 13345                           fsr2h	equ	0xFDA
 13346                           fsr2l	equ	0xFD9
 13347                           status	equ	0xFD8
 13348                           
 13349 ;; *************** function _retrieveLog *****************
 13350 ;; Defined at:
 13351 ;;		line 134 in file "EEPROM.c"
 13352 ;; Parameters:    Size  Location     Type
 13353 ;;  logNum          2    6[COMRAM] int 
 13354 ;; Auto vars:     Size  Location     Type
 13355 ;;  i               2   13[COMRAM] int 
 13356 ;;  addr            2   15[COMRAM] unsigned short 
 13357 ;;  byte3           1   12[COMRAM] unsigned char 
 13358 ;;  byte2           1   11[COMRAM] unsigned char 
 13359 ;;  byte1           1   10[COMRAM] unsigned char 
 13360 ;; Return value:  Size  Location     Type
 13361 ;;                  1    wreg      void 
 13362 ;; Registers used:
 13363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13364 ;; Tracked objects:
 13365 ;;		On entry : 0/0
 13366 ;;		On exit  : 0/0
 13367 ;;		Unchanged: 0/0
 13368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13369 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13370 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;Total ram usage:       11 bytes
 13374 ;; Hardware stack levels used:    1
 13375 ;; Hardware stack levels required when called:    1
 13376 ;; This function calls:
 13377 ;;		i2_EEPROM_read
 13378 ;;		i2___wmul
 13379 ;; This function is called by:
 13380 ;;		_dispLogs
 13381 ;; This function uses a non-reentrant model
 13382 ;;
 13383                           
 13384                           	psect	text62
 13385  0020B2                     __ptext62:
 13386                           	opt stack 0
 13387  0020B2                     _retrieveLog:
 13388                           	opt stack 20
 13389                           
 13390                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 13391                           
 13392                           ;incstack = 0
 13393  0020B2  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 13394  0020B6  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 13395  0020BA  0E00               	movlw	0
 13396  0020BC  6E04               	movwf	i2___wmul@multiplicand+1,c
 13397  0020BE  0E0B               	movlw	11
 13398  0020C0  6E03               	movwf	i2___wmul@multiplicand,c
 13399  0020C2  EC7F  F018         	call	i2___wmul	;wreg free
 13400  0020C6  0E01               	movlw	1
 13401  0020C8  2401               	addwf	?i2___wmul,w,c
 13402  0020CA  6E10               	movwf	retrieveLog@addr,c
 13403  0020CC  0E00               	movlw	0
 13404  0020CE  2002               	addwfc	?i2___wmul+1,w,c
 13405  0020D0  6E11               	movwf	retrieveLog@addr+1,c
 13406                           
 13407                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 13408  0020D2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13409  0020D6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13410  0020DA  EC11  F019         	call	i2_EEPROM_read	;wreg free
 13411  0020DE  6E0B               	movwf	retrieveLog@byte1,c
 13412                           
 13413                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 13414  0020E0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13415  0020E4  0E80               	movlw	128
 13416  0020E6  1609               	andwf	??_retrieveLog,f,c
 13417  0020E8  5009               	movf	??_retrieveLog,w,c
 13418  0020EA  0100               	movlb	0	; () banked
 13419  0020EC  6FE9               	movwf	_log_completion& (0+255),b
 13420  0020EE  6BEA               	clrf	(_log_completion+1)& (0+255),b
 13421                           
 13422                           ; BSR set to: 0
 13423                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 13424  0020F0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13425  0020F4  0E0F               	movlw	15
 13426  0020F6  1609               	andwf	??_retrieveLog,f,c
 13427  0020F8  5009               	movf	??_retrieveLog,w,c
 13428  0020FA  0100               	movlb	0	; () banked
 13429  0020FC  6FF3               	movwf	_log_count_total& (0+255),b
 13430  0020FE  6BF4               	clrf	(_log_count_total+1)& (0+255),b
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;EEPROM.c: 146: addr++;
 13434  002100  4A10               	infsnz	retrieveLog@addr,f,c
 13435  002102  2A11               	incf	retrieveLog@addr+1,f,c
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 13439  002104  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13440  002108  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13441  00210C  EC11  F019         	call	i2_EEPROM_read	;wreg free
 13442  002110  6E0C               	movwf	retrieveLog@byte2,c
 13443                           
 13444                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 13445  002112  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13446  002116  0EF0               	movlw	240
 13447  002118  1609               	andwf	??_retrieveLog,f,c
 13448  00211A  5009               	movf	??_retrieveLog,w,c
 13449  00211C  0100               	movlb	0	; () banked
 13450  00211E  6FEF               	movwf	_log_count_pop_no_tab& (0+255),b
 13451  002120  6BF0               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 13455  002122  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13456  002126  0E0F               	movlw	15
 13457  002128  1609               	andwf	??_retrieveLog,f,c
 13458  00212A  5009               	movf	??_retrieveLog,w,c
 13459  00212C  0100               	movlb	0	; () banked
 13460  00212E  6FF1               	movwf	_log_count_pop_w_tab& (0+255),b
 13461  002130  6BF2               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;EEPROM.c: 152: addr++;
 13465  002132  4A10               	infsnz	retrieveLog@addr,f,c
 13466  002134  2A11               	incf	retrieveLog@addr+1,f,c
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 13470  002136  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13471  00213A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13472  00213E  EC11  F019         	call	i2_EEPROM_read	;wreg free
 13473  002142  6E0D               	movwf	retrieveLog@byte3,c
 13474                           
 13475                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 13476  002144  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13477  002148  0EF0               	movlw	240
 13478  00214A  1609               	andwf	??_retrieveLog,f,c
 13479  00214C  5009               	movf	??_retrieveLog,w,c
 13480  00214E  0100               	movlb	0	; () banked
 13481  002150  6FED               	movwf	_log_count_can_w_lab& (0+255),b
 13482  002152  6BEE               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 13486  002154  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13487  002158  0E0F               	movlw	15
 13488  00215A  1609               	andwf	??_retrieveLog,f,c
 13489  00215C  5009               	movf	??_retrieveLog,w,c
 13490  00215E  0100               	movlb	0	; () banked
 13491  002160  6FEB               	movwf	_log_count_can_no_lab& (0+255),b
 13492  002162  6BEC               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 13493                           
 13494                           ; BSR set to: 0
 13495                           ;EEPROM.c: 156: addr++;
 13496  002164  4A10               	infsnz	retrieveLog@addr,f,c
 13497  002166  2A11               	incf	retrieveLog@addr+1,f,c
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 13501  002168  0E00               	movlw	0
 13502  00216A  6E0F               	movwf	retrieveLog@i+1,c
 13503  00216C  0E00               	movlw	0
 13504  00216E  6E0E               	movwf	retrieveLog@i,c
 13505  002170                     i2l4751:
 13506                           
 13507                           ; BSR set to: 0
 13508  002170  BE0F               	btfsc	retrieveLog@i+1,7,c
 13509  002172  D006               	goto	i2l4755
 13510  002174  500F               	movf	retrieveLog@i+1,w,c
 13511  002176  E11E               	bnz	i2l4763
 13512  002178  0E07               	movlw	7
 13513  00217A  5C0E               	subwf	retrieveLog@i,w,c
 13514  00217C  B0D8               	btfsc	status,0,c
 13515  00217E  D01A               	goto	i2l4763
 13516  002180                     i2l4755:
 13517                           
 13518                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 13519  002180  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13520  002184  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13521  002188  EC11  F019         	call	i2_EEPROM_read	;wreg free
 13522  00218C  6E09               	movwf	??_retrieveLog& (0+255),c
 13523  00218E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 13524  002190  90D8               	bcf	status,0,c
 13525  002192  340E               	rlcf	retrieveLog@i,w,c
 13526  002194  6ED9               	movwf	fsr2l,c
 13527  002196  340F               	rlcf	retrieveLog@i+1,w,c
 13528  002198  6EDA               	movwf	fsr2h,c
 13529  00219A  0E00               	movlw	low _log_startTime
 13530  00219C  26D9               	addwf	fsr2l,f,c
 13531  00219E  0E01               	movlw	high _log_startTime
 13532  0021A0  22DA               	addwfc	fsr2h,f,c
 13533  0021A2  C009  FFDE         	movff	??_retrieveLog,postinc2
 13534  0021A6  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 13535                           
 13536                           ;EEPROM.c: 161: addr++;
 13537  0021AA  4A10               	infsnz	retrieveLog@addr,f,c
 13538  0021AC  2A11               	incf	retrieveLog@addr+1,f,c
 13539  0021AE  4A0E               	infsnz	retrieveLog@i,f,c
 13540  0021B0  2A0F               	incf	retrieveLog@i+1,f,c
 13541  0021B2  D7DE               	goto	i2l4751
 13542  0021B4                     i2l4763:
 13543                           
 13544                           ;EEPROM.c: 162: }
 13545                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 13546  0021B4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13547  0021B8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13548  0021BC  EC11  F019         	call	i2_EEPROM_read	;wreg free
 13549  0021C0  6E09               	movwf	??_retrieveLog& (0+255),c
 13550  0021C2  5009               	movf	??_retrieveLog,w,c
 13551  0021C4  0100               	movlb	0	; () banked
 13552  0021C6  6FF5               	movwf	_log_total_time& (0+255),b
 13553  0021C8  6BF6               	clrf	(_log_total_time+1)& (0+255),b
 13554                           
 13555                           ; BSR set to: 0
 13556  0021CA  0012               	return		;funcret
 13557  0021CC                     __end_of_retrieveLog:
 13558                           	opt stack 0
 13559                           pclatu	equ	0xFFB
 13560                           pclath	equ	0xFFA
 13561                           tblptru	equ	0xFF8
 13562                           tblptrh	equ	0xFF7
 13563                           tblptrl	equ	0xFF6
 13564                           tablat	equ	0xFF5
 13565                           prodh	equ	0xFF4
 13566                           prodl	equ	0xFF3
 13567                           intcon	equ	0xFF2
 13568                           intcon2	equ	0xFF1
 13569                           intcon3	equ	0xFF0
 13570                           indf0	equ	0xFEF
 13571                           postinc0	equ	0xFEE
 13572                           fsr0h	equ	0xFEA
 13573                           fsr0l	equ	0xFE9
 13574                           wreg	equ	0xFE8
 13575                           postdec1	equ	0xFE5
 13576                           fsr1h	equ	0xFE2
 13577                           fsr1l	equ	0xFE1
 13578                           indf2	equ	0xFDF
 13579                           postinc2	equ	0xFDE
 13580                           postdec2	equ	0xFDD
 13581                           fsr2h	equ	0xFDA
 13582                           fsr2l	equ	0xFD9
 13583                           status	equ	0xFD8
 13584                           
 13585 ;; *************** function i2_EEPROM_read *****************
 13586 ;; Defined at:
 13587 ;;		line 68 in file "EEPROM.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;  address         2    0[COMRAM] unsigned short 
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;		None
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  1    wreg      unsigned char 
 13594 ;; Registers used:
 13595 ;;		wreg, status,2
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;Total ram usage:        2 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; This function calls:
 13608 ;;		Nothing
 13609 ;; This function is called by:
 13610 ;;		_retrieveLog
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           	psect	text63
 13615  003222                     __ptext63:
 13616                           	opt stack 0
 13617  003222                     i2_EEPROM_read:
 13618                           	opt stack 20
 13619                           
 13620                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 13621                           
 13622                           ; BSR set to: 0
 13623                           ;incstack = 0
 13624  003222  5002               	movf	i2EEPROM_read@address+1,w,c
 13625  003224  6EAA               	movwf	4010,c	;volatile
 13626                           
 13627                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 13628  003226  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 13629                           
 13630                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 13631  00322A  9EA6               	bcf	4006,7,c	;volatile
 13632                           
 13633                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 13634  00322C  9CA6               	bcf	4006,6,c	;volatile
 13635                           
 13636                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 13637  00322E  80A6               	bsf	4006,0,c	;volatile
 13638  003230                     i2l920:
 13639  003230  B0A6               	btfsc	4006,0,c	;volatile
 13640  003232  D7FE               	goto	i2l920
 13641                           
 13642                           ;EEPROM.c: 81: return EEDATA;
 13643  003234  50A8               	movf	4008,w,c	;volatile
 13644  003236  0012               	return	
 13645  003238                     __end_ofi2_EEPROM_read:
 13646                           	opt stack 0
 13647                           pclatu	equ	0xFFB
 13648                           pclath	equ	0xFFA
 13649                           tblptru	equ	0xFF8
 13650                           tblptrh	equ	0xFF7
 13651                           tblptrl	equ	0xFF6
 13652                           tablat	equ	0xFF5
 13653                           prodh	equ	0xFF4
 13654                           prodl	equ	0xFF3
 13655                           intcon	equ	0xFF2
 13656                           intcon2	equ	0xFF1
 13657                           intcon3	equ	0xFF0
 13658                           indf0	equ	0xFEF
 13659                           postinc0	equ	0xFEE
 13660                           fsr0h	equ	0xFEA
 13661                           fsr0l	equ	0xFE9
 13662                           wreg	equ	0xFE8
 13663                           postdec1	equ	0xFE5
 13664                           fsr1h	equ	0xFE2
 13665                           fsr1l	equ	0xFE1
 13666                           indf2	equ	0xFDF
 13667                           postinc2	equ	0xFDE
 13668                           postdec2	equ	0xFDD
 13669                           fsr2h	equ	0xFDA
 13670                           fsr2l	equ	0xFD9
 13671                           status	equ	0xFD8
 13672                           
 13673 ;; *************** function _printSortTimer *****************
 13674 ;; Defined at:
 13675 ;;		line 245 in file "sort.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;		None
 13678 ;; Auto vars:     Size  Location     Type
 13679 ;;  i               2   72[COMRAM] int 
 13680 ;;  curTime        14   44[COMRAM] int [7]
 13681 ;;  timeDiff        2   70[COMRAM] unsigned int 
 13682 ;;  sec             2   66[COMRAM] int 
 13683 ;;  min             2   64[COMRAM] int 
 13684 ;;  hour            2   62[COMRAM] int 
 13685 ;;  cur_sec         2   60[COMRAM] unsigned int 
 13686 ;;  start_sec       2   58[COMRAM] unsigned int 
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  1    wreg      void 
 13689 ;; Registers used:
 13690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13697 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13698 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;Total ram usage:       33 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    3
 13703 ;; This function calls:
 13704 ;;		i2___lwdiv
 13705 ;;		i2___lwmod
 13706 ;;		i2___wmul
 13707 ;;		i2_getRTC
 13708 ;;		i2_lcdInst
 13709 ;;		i2_printf
 13710 ;; This function is called by:
 13711 ;;		_handler
 13712 ;; This function uses a non-reentrant model
 13713 ;;
 13714                           
 13715                           	psect	text64
 13716  0017E2                     __ptext64:
 13717                           	opt stack 0
 13718  0017E2                     _printSortTimer:
 13719                           	opt stack 20
 13720                           
 13721                           ;sort.c: 246: getRTC();
 13722                           
 13723                           ;incstack = 0
 13724  0017E2  EC9A  F014         	call	i2_getRTC	;wreg free
 13725                           
 13726                           ;sort.c: 247: int curTime[7];
 13727                           ;sort.c: 248: for(int i = 0; i < 7; i++){
 13728  0017E6  0E00               	movlw	0
 13729  0017E8  6E4A               	movwf	printSortTimer@i+1,c
 13730  0017EA  0E00               	movlw	0
 13731  0017EC  6E49               	movwf	printSortTimer@i,c
 13732  0017EE                     i2l5985:
 13733  0017EE  BE4A               	btfsc	printSortTimer@i+1,7,c
 13734  0017F0  D006               	goto	i2l5989
 13735  0017F2  504A               	movf	printSortTimer@i+1,w,c
 13736  0017F4  E131               	bnz	i2l5995
 13737  0017F6  0E07               	movlw	7
 13738  0017F8  5C49               	subwf	printSortTimer@i,w,c
 13739  0017FA  B0D8               	btfsc	status,0,c
 13740  0017FC  D02D               	goto	i2l5995
 13741  0017FE                     i2l5989:
 13742                           
 13743                           ;sort.c: 249: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 13744  0017FE  0E5B               	movlw	low _time
 13745  001800  2449               	addwf	printSortTimer@i,w,c
 13746  001802  6ED9               	movwf	fsr2l,c
 13747  001804  0E00               	movlw	high _time
 13748  001806  204A               	addwfc	printSortTimer@i+1,w,c
 13749  001808  6EDA               	movwf	fsr2h,c
 13750  00180A  50DF               	movf	indf2,w,c
 13751  00180C  6E2A               	movwf	??_printSortTimer& (0+255),c
 13752  00180E  3A2A               	swapf	??_printSortTimer,f,c
 13753  001810  0E0F               	movlw	15
 13754  001812  162A               	andwf	??_printSortTimer,f,c
 13755  001814  0E0F               	movlw	15
 13756  001816  162A               	andwf	??_printSortTimer,f,c
 13757  001818  502A               	movf	??_printSortTimer,w,c
 13758  00181A  0D0A               	mullw	10
 13759  00181C  0E5B               	movlw	low _time
 13760  00181E  2449               	addwf	printSortTimer@i,w,c
 13761  001820  6ED9               	movwf	fsr2l,c
 13762  001822  0E00               	movlw	high _time
 13763  001824  204A               	addwfc	printSortTimer@i+1,w,c
 13764  001826  6EDA               	movwf	fsr2h,c
 13765  001828  50DF               	movf	indf2,w,c
 13766  00182A  0B0F               	andlw	15
 13767  00182C  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 13768  00182E  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 13769  001830  50F3               	movf	prodl,w,c
 13770  001832  262B               	addwf	??_printSortTimer+1,f,c
 13771  001834  50F4               	movf	prodh,w,c
 13772  001836  222C               	addwfc	??_printSortTimer+2,f,c
 13773  001838  90D8               	bcf	status,0,c
 13774  00183A  3449               	rlcf	printSortTimer@i,w,c
 13775  00183C  6ED9               	movwf	fsr2l,c
 13776  00183E  344A               	rlcf	printSortTimer@i+1,w,c
 13777  001840  6EDA               	movwf	fsr2h,c
 13778  001842  0E2D               	movlw	low printSortTimer@curTime
 13779  001844  26D9               	addwf	fsr2l,f,c
 13780  001846  0E00               	movlw	high printSortTimer@curTime
 13781  001848  22DA               	addwfc	fsr2h,f,c
 13782  00184A  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 13783  00184E  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 13784  001852  4A49               	infsnz	printSortTimer@i,f,c
 13785  001854  2A4A               	incf	printSortTimer@i+1,f,c
 13786  001856  D7CB               	goto	i2l5985
 13787  001858                     i2l5995:
 13788                           
 13789                           ;sort.c: 250: }
 13790                           ;sort.c: 251: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 13791  001858  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 13792  00185C  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 13793  001860  0E00               	movlw	0
 13794  001862  6E04               	movwf	i2___wmul@multiplicand+1,c
 13795  001864  0E3C               	movlw	60
 13796  001866  6E03               	movwf	i2___wmul@multiplicand,c
 13797  001868  EC7F  F018         	call	i2___wmul	;wreg free
 13798  00186C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13799  001870  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13800  001874  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 13801  001878  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 13802  00187C  0E0E               	movlw	14
 13803  00187E  6E04               	movwf	i2___wmul@multiplicand+1,c
 13804  001880  0E10               	movlw	16
 13805  001882  6E03               	movwf	i2___wmul@multiplicand,c
 13806  001884  EC7F  F018         	call	i2___wmul	;wreg free
 13807  001888  5001               	movf	?i2___wmul,w,c
 13808  00188A  262A               	addwf	??_printSortTimer,f,c
 13809  00188C  5002               	movf	?i2___wmul+1,w,c
 13810  00188E  222B               	addwfc	??_printSortTimer+1,f,c
 13811  001890  0101               	movlb	1	; () banked
 13812  001892  510E               	movf	_startTime& (0+255),w,b
 13813  001894  242A               	addwf	??_printSortTimer,w,c
 13814  001896  6E3B               	movwf	printSortTimer@start_sec,c
 13815  001898  0101               	movlb	1	; () banked
 13816  00189A  510F               	movf	(_startTime+1)& (0+255),w,b
 13817  00189C  202B               	addwfc	??_printSortTimer+1,w,c
 13818  00189E  6E3C               	movwf	printSortTimer@start_sec+1,c
 13819                           
 13820                           ;sort.c: 252: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 13821  0018A0  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 13822  0018A4  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 13823  0018A8  0E00               	movlw	0
 13824  0018AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 13825  0018AC  0E3C               	movlw	60
 13826  0018AE  6E03               	movwf	i2___wmul@multiplicand,c
 13827  0018B0  EC7F  F018         	call	i2___wmul	;wreg free
 13828  0018B4  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13829  0018B8  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13830  0018BC  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 13831  0018C0  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 13832  0018C4  0E0E               	movlw	14
 13833  0018C6  6E04               	movwf	i2___wmul@multiplicand+1,c
 13834  0018C8  0E10               	movlw	16
 13835  0018CA  6E03               	movwf	i2___wmul@multiplicand,c
 13836  0018CC  EC7F  F018         	call	i2___wmul	;wreg free
 13837  0018D0  5001               	movf	?i2___wmul,w,c
 13838  0018D2  262A               	addwf	??_printSortTimer,f,c
 13839  0018D4  5002               	movf	?i2___wmul+1,w,c
 13840  0018D6  222B               	addwfc	??_printSortTimer+1,f,c
 13841  0018D8  502D               	movf	printSortTimer@curTime,w,c
 13842  0018DA  242A               	addwf	??_printSortTimer,w,c
 13843  0018DC  6E3D               	movwf	printSortTimer@cur_sec,c
 13844  0018DE  502E               	movf	printSortTimer@curTime+1,w,c
 13845  0018E0  202B               	addwfc	??_printSortTimer+1,w,c
 13846  0018E2  6E3E               	movwf	printSortTimer@cur_sec+1,c
 13847                           
 13848                           ;sort.c: 253: unsigned int timeDiff = cur_sec - start_sec;
 13849  0018E4  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 13850  0018E8  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 13851  0018EC  1E2A               	comf	??_printSortTimer,f,c
 13852  0018EE  1E2B               	comf	??_printSortTimer+1,f,c
 13853  0018F0  4A2A               	infsnz	??_printSortTimer,f,c
 13854  0018F2  2A2B               	incf	??_printSortTimer+1,f,c
 13855  0018F4  503D               	movf	printSortTimer@cur_sec,w,c
 13856  0018F6  242A               	addwf	??_printSortTimer,w,c
 13857  0018F8  6E47               	movwf	printSortTimer@timeDiff,c
 13858  0018FA  503E               	movf	printSortTimer@cur_sec+1,w,c
 13859  0018FC  202B               	addwfc	??_printSortTimer+1,w,c
 13860  0018FE  6E48               	movwf	printSortTimer@timeDiff+1,c
 13861                           
 13862                           ;sort.c: 255: total_time = timeDiff;
 13863  001900  C047  F0F9         	movff	printSortTimer@timeDiff,_total_time
 13864  001904  C048  F0FA         	movff	printSortTimer@timeDiff+1,_total_time+1
 13865                           
 13866                           ;sort.c: 257: if(timeDiff >= 10){
 13867  001908  5048               	movf	printSortTimer@timeDiff+1,w,c
 13868  00190A  E104               	bnz	i2u496_40
 13869  00190C  0E0A               	movlw	10
 13870  00190E  5C47               	subwf	printSortTimer@timeDiff,w,c
 13871  001910  A0D8               	btfss	status,0,c
 13872  001912  D003               	goto	i2l6005
 13873  001914                     i2u496_40:
 13874                           
 13875                           ;sort.c: 258: machine_state = DoneSorting_state;
 13876  001914  0E02               	movlw	2
 13877  001916  0100               	movlb	0	; () banked
 13878  001918  6FFB               	movwf	_machine_state& (0+255),b
 13879  00191A                     i2l6005:
 13880                           
 13881                           ;sort.c: 260: }
 13882                           ;sort.c: 262: int hour = timeDiff / 3600;
 13883  00191A  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 13884  00191E  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 13885  001922  0E0E               	movlw	14
 13886  001924  6E09               	movwf	i2___lwdiv@divisor+1,c
 13887  001926  0E10               	movlw	16
 13888  001928  6E08               	movwf	i2___lwdiv@divisor,c
 13889  00192A  ECBF  F015         	call	i2___lwdiv	;wreg free
 13890  00192E  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 13891  001932  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 13892                           
 13893                           ;sort.c: 263: int min = (timeDiff % 3600) / 60;
 13894  001936  0E0E               	movlw	14
 13895  001938  6E04               	movwf	i2___lwmod@divisor+1,c
 13896  00193A  0E10               	movlw	16
 13897  00193C  6E03               	movwf	i2___lwmod@divisor,c
 13898  00193E  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13899  001942  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13900  001946  EC7C  F016         	call	i2___lwmod	;wreg free
 13901  00194A  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 13902  00194E  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 13903  001952  0E00               	movlw	0
 13904  001954  6E09               	movwf	i2___lwdiv@divisor+1,c
 13905  001956  0E3C               	movlw	60
 13906  001958  6E08               	movwf	i2___lwdiv@divisor,c
 13907  00195A  ECBF  F015         	call	i2___lwdiv	;wreg free
 13908  00195E  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 13909  001962  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 13910                           
 13911                           ;sort.c: 264: int sec = (timeDiff % 3600) % 60;
 13912  001966  0E0E               	movlw	14
 13913  001968  6E04               	movwf	i2___lwmod@divisor+1,c
 13914  00196A  0E10               	movlw	16
 13915  00196C  6E03               	movwf	i2___lwmod@divisor,c
 13916  00196E  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13917  001972  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13918  001976  EC7C  F016         	call	i2___lwmod	;wreg free
 13919  00197A  C001  F045         	movff	?i2___lwmod,_printSortTimer$2110
 13920  00197E  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2110+1
 13921                           
 13922                           ;sort.c: 264: int sec = (timeDiff % 3600) % 60;
 13923  001982  C045  F001         	movff	_printSortTimer$2110,i2___lwmod@dividend
 13924  001986  C046  F002         	movff	_printSortTimer$2110+1,i2___lwmod@dividend+1
 13925  00198A  0E00               	movlw	0
 13926  00198C  6E04               	movwf	i2___lwmod@divisor+1,c
 13927  00198E  0E3C               	movlw	60
 13928  001990  6E03               	movwf	i2___lwmod@divisor,c
 13929  001992  EC7C  F016         	call	i2___lwmod	;wreg free
 13930  001996  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 13931  00199A  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 13932                           
 13933                           ;sort.c: 266: lcdInst(0b10000000);;
 13934  00199E  0E80               	movlw	128
 13935  0019A0  EC4E  F019         	call	i2_lcdInst
 13936                           
 13937                           ;sort.c: 267: printf("SORTING...");
 13938  0019A4  0E97               	movlw	low STR_64
 13939  0019A6  6E0D               	movwf	i2printf@f,c
 13940  0019A8  0EFF               	movlw	high STR_64
 13941  0019AA  6E0E               	movwf	i2printf@f+1,c
 13942  0019AC  EC5A  F006         	call	i2_printf	;wreg free
 13943                           
 13944                           ;sort.c: 268: lcdInst(0b11000000);;
 13945  0019B0  0EC0               	movlw	192
 13946  0019B2  EC4E  F019         	call	i2_lcdInst
 13947                           
 13948                           ;sort.c: 269: printf("TIME %02d:%02d:%02d", hour, min, sec);
 13949  0019B6  0ED9               	movlw	low STR_65
 13950  0019B8  6E0D               	movwf	i2printf@f,c
 13951  0019BA  0EFD               	movlw	high STR_65
 13952  0019BC  6E0E               	movwf	i2printf@f+1,c
 13953  0019BE  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 13954  0019C2  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 13955  0019C6  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 13956  0019CA  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 13957  0019CE  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 13958  0019D2  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 13959  0019D6  EC5A  F006         	call	i2_printf	;wreg free
 13960  0019DA  0012               	return		;funcret
 13961  0019DC                     __end_of_printSortTimer:
 13962                           	opt stack 0
 13963                           pclatu	equ	0xFFB
 13964                           pclath	equ	0xFFA
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           intcon2	equ	0xFF1
 13973                           intcon3	equ	0xFF0
 13974                           indf0	equ	0xFEF
 13975                           postinc0	equ	0xFEE
 13976                           fsr0h	equ	0xFEA
 13977                           fsr0l	equ	0xFE9
 13978                           wreg	equ	0xFE8
 13979                           postdec1	equ	0xFE5
 13980                           fsr1h	equ	0xFE2
 13981                           fsr1l	equ	0xFE1
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           fsr2h	equ	0xFDA
 13986                           fsr2l	equ	0xFD9
 13987                           status	equ	0xFD8
 13988                           
 13989 ;; *************** function i2_printf *****************
 13990 ;; Defined at:
 13991 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13994 ;;		 -> STR_67(7), STR_66(9), STR_65(20), STR_64(11), 
 13995 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13996 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13997 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13998 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13999 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14000 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14001 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 14002 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14003 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14004 ;;		 -> STR_2(21), STR_1(17), 
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;  printf          4    0        struct .
 14007 ;;  printf          2   39[COMRAM] int 
 14008 ;;  printf          2   35[COMRAM] unsigned int 
 14009 ;;  printf          2   33[COMRAM] unsigned int 
 14010 ;;  printf          2   31[COMRAM] PTR void [1]
 14011 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14012 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 14013 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
 14014 ;;  printf          1   38[COMRAM] char 
 14015 ;;  printf          1   37[COMRAM] unsigned char 
 14016 ;;  printf          1   28[COMRAM] char 
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  2   12[COMRAM] int 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14026 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;Total ram usage:       29 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    2
 14033 ;; This function calls:
 14034 ;;		i2___lwdiv
 14035 ;;		i2___lwmod
 14036 ;;		i2___wmul
 14037 ;;		i2_isdigit
 14038 ;;		i2_putch
 14039 ;; This function is called by:
 14040 ;;		_change_state_to_menu_11
 14041 ;;		_change_state_to_menu_23
 14042 ;;		_change_state_to_logs_11
 14043 ;;		_change_state_to_logs_12
 14044 ;;		_change_state_to_logs_22
 14045 ;;		_change_state_to_logs_23
 14046 ;;		_change_state_to_logs_33
 14047 ;;		_change_state_to_logs_34
 14048 ;;		_printSortTimer
 14049 ;;		i2_change_state_to_menu_start
 14050 ;;		i2_change_state_to_menu_12
 14051 ;;		i2_change_state_to_menu_22
 14052 ;;		i2_printRTC
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           	psect	text65
 14057  000CB4                     __ptext65:
 14058                           	opt stack 0
 14059  000CB4                     i2_printf:
 14060                           	opt stack 19
 14061                           
 14062                           ;doprnt.c: 466: va_list ap;
 14063                           ;doprnt.c: 499: signed char c;
 14064                           ;doprnt.c: 501: int width;
 14065                           ;doprnt.c: 506: signed char prec;
 14066                           ;doprnt.c: 508: unsigned char flag;
 14067                           ;doprnt.c: 523: union {
 14068                           ;doprnt.c: 524: unsigned long vd;
 14069                           ;doprnt.c: 525: double integ;
 14070                           ;doprnt.c: 526: } tmpval;
 14071                           ;doprnt.c: 528: unsigned int val;
 14072                           ;doprnt.c: 529: unsigned len;
 14073                           ;doprnt.c: 530: const char * cp;
 14074                           ;doprnt.c: 533: *ap = __va_start();
 14075                           
 14076                           ;incstack = 0
 14077  000CB4  0E0F               	movlw	low (?i2_printf+2)
 14078  000CB6  6E20               	movwf	i2printf@ap,c
 14079  000CB8  0E00               	movlw	high (?i2_printf+2)
 14080  000CBA  6E21               	movwf	i2printf@ap+1,c
 14081                           
 14082                           ;doprnt.c: 536: while(c = *f++) {
 14083  000CBC  D1A4               	goto	i2l4569
 14084  000CBE                     i2l4439:
 14085                           
 14086                           ;doprnt.c: 538: if(c != '%')
 14087  000CBE  0E25               	movlw	37
 14088  000CC0  1827               	xorwf	i2printf@c,w,c
 14089  000CC2  B4D8               	btfsc	status,2,c
 14090  000CC4  D004               	goto	i2l4443
 14091                           
 14092                           ;doprnt.c: 540: {
 14093                           ;doprnt.c: 541: (putch(c) );
 14094  000CC6  5027               	movf	i2printf@c,w,c
 14095  000CC8  EC48  F019         	call	i2_putch
 14096                           
 14097                           ;doprnt.c: 542: continue;
 14098  000CCC  D19C               	goto	i2l4569
 14099  000CCE                     i2l4443:
 14100                           
 14101                           ;doprnt.c: 543: }
 14102                           ;doprnt.c: 546: width = 0;
 14103  000CCE  0E00               	movlw	0
 14104  000CD0  6E29               	movwf	i2printf@width+1,c
 14105  000CD2  0E00               	movlw	0
 14106  000CD4  6E28               	movwf	i2printf@width,c
 14107                           
 14108                           ;doprnt.c: 548: flag = 0;
 14109  000CD6  0E00               	movlw	0
 14110  000CD8  6E26               	movwf	i2printf@flag,c
 14111                           
 14112                           ;doprnt.c: 551: switch(*f) {
 14113                           
 14114                           ;doprnt.c: 550: for(;;) {
 14115  000CDA  D003               	goto	i2l4449
 14116  000CDC                     i2l4445:
 14117                           
 14118                           ;doprnt.c: 580: flag |= 0x04;
 14119  000CDC  8426               	bsf	i2printf@flag,2,c
 14120                           
 14121                           ;doprnt.c: 581: f++;
 14122  000CDE  4A0D               	infsnz	i2printf@f,f,c
 14123  000CE0  2A0E               	incf	i2printf@f+1,f,c
 14124  000CE2                     i2l4449:
 14125  000CE2  C00D  FFF6         	movff	i2printf@f,tblptrl
 14126  000CE6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14127  000CEA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14128  000CEA  6AF8               	clrf	tblptru,c
 14129  000CEC                     	endif
 14130  000CEC                     	if	0	;tblptru may be non-zero
 14131  000CEC                     	endif
 14132  000CEC  0008               	tblrd		*
 14133  000CEE  50F5               	movf	tablat,w,c
 14134                           
 14135                           ; Switch size 1, requested type "space"
 14136                           ; Number of cases is 1, Range of values is 48 to 48
 14137                           ; switch strategies available:
 14138                           ; Name         Instructions Cycles
 14139                           ; simple_byte            4     3 (average)
 14140                           ;	Chosen strategy is simple_byte
 14141  000CF0  0A30               	xorlw	48	; case 48
 14142  000CF2  B4D8               	btfsc	status,2,c
 14143  000CF4  D7F3               	goto	i2l4445
 14144                           
 14145                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14146                           
 14147                           ;doprnt.c: 586: }
 14148                           
 14149                           ;doprnt.c: 585: break;
 14150  000CF6  C00D  FFF6         	movff	i2printf@f,tblptrl
 14151  000CFA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14152  000CFE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14153  000CFE  6AF8               	clrf	tblptru,c
 14154  000D00                     	endif
 14155  000D00                     	if	0	;tblptru may be non-zero
 14156  000D00                     	endif
 14157  000D00  0008               	tblrd		*
 14158  000D02  50F5               	movf	tablat,w,c
 14159  000D04  ECEB  F018         	call	i2_isdigit
 14160  000D08  A0D8               	btfss	status,0,c
 14161  000D0A  D0A6               	goto	i2l4497
 14162                           
 14163                           ;doprnt.c: 598: width = 0;
 14164  000D0C  0E00               	movlw	0
 14165  000D0E  6E29               	movwf	i2printf@width+1,c
 14166  000D10  0E00               	movlw	0
 14167  000D12  6E28               	movwf	i2printf@width,c
 14168  000D14                     i2l4455:
 14169                           
 14170                           ;doprnt.c: 600: width *= 10;
 14171  000D14  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 14172  000D18  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14173  000D1C  0E00               	movlw	0
 14174  000D1E  6E04               	movwf	i2___wmul@multiplicand+1,c
 14175  000D20  0E0A               	movlw	10
 14176  000D22  6E03               	movwf	i2___wmul@multiplicand,c
 14177  000D24  EC7F  F018         	call	i2___wmul	;wreg free
 14178  000D28  C001  F028         	movff	?i2___wmul,i2printf@width
 14179  000D2C  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 14180                           
 14181                           ;doprnt.c: 601: width += *f++ - '0';
 14182  000D30  0ED0               	movlw	208
 14183  000D32  6E19               	movwf	??i2_printf& (0+255),c
 14184  000D34  0EFF               	movlw	255
 14185  000D36  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14186  000D38  C00D  FFF6         	movff	i2printf@f,tblptrl
 14187  000D3C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14188  000D40                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14189  000D40  6AF8               	clrf	tblptru,c
 14190  000D42                     	endif
 14191  000D42                     	if	0	;tblptru may be non-zero
 14192  000D42                     	endif
 14193  000D42  0008               	tblrd		*
 14194  000D44  50F5               	movf	tablat,w,c
 14195  000D46  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 14196  000D48  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 14197  000D4A  5019               	movf	??i2_printf,w,c
 14198  000D4C  261B               	addwf	??i2_printf+2,f,c
 14199  000D4E  501A               	movf	??i2_printf+1,w,c
 14200  000D50  221C               	addwfc	??i2_printf+3,f,c
 14201  000D52  501B               	movf	??i2_printf+2,w,c
 14202  000D54  2628               	addwf	i2printf@width,f,c
 14203  000D56  501C               	movf	??i2_printf+3,w,c
 14204  000D58  2229               	addwfc	i2printf@width+1,f,c
 14205  000D5A  4A0D               	infsnz	i2printf@f,f,c
 14206  000D5C  2A0E               	incf	i2printf@f+1,f,c
 14207                           
 14208                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14209  000D5E  C00D  FFF6         	movff	i2printf@f,tblptrl
 14210  000D62  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14211  000D66                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14212  000D66  6AF8               	clrf	tblptru,c
 14213  000D68                     	endif
 14214  000D68                     	if	0	;tblptru may be non-zero
 14215  000D68                     	endif
 14216  000D68  0008               	tblrd		*
 14217  000D6A  50F5               	movf	tablat,w,c
 14218  000D6C  ECEB  F018         	call	i2_isdigit
 14219  000D70  A0D8               	btfss	status,0,c
 14220  000D72  D072               	goto	i2l4497
 14221  000D74  D7CF               	goto	i2l4455
 14222  000D76                     i2l4463:
 14223                           
 14224                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14225  000D76  C020  FFD9         	movff	i2printf@ap,fsr2l
 14226  000D7A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14227  000D7E  CFDE F01E          	movff	postinc2,i2printf@cp
 14228  000D82  CFDD F01F          	movff	postdec2,i2printf@cp+1
 14229  000D86  0E02               	movlw	2
 14230  000D88  2620               	addwf	i2printf@ap,f,c
 14231  000D8A  0E00               	movlw	0
 14232  000D8C  2221               	addwfc	i2printf@ap+1,f,c
 14233                           
 14234                           ;doprnt.c: 740: if(!cp)
 14235  000D8E  501E               	movf	i2printf@cp,w,c
 14236  000D90  101F               	iorwf	i2printf@cp+1,w,c
 14237  000D92  A4D8               	btfss	status,2,c
 14238  000D94  D004               	goto	i2l4471
 14239                           
 14240                           ;doprnt.c: 741: cp = "(null)";
 14241  000D96  0EB5               	movlw	low STR_68
 14242  000D98  6E1E               	movwf	i2printf@cp,c
 14243  000D9A  0EFF               	movlw	high STR_68
 14244  000D9C  6E1F               	movwf	i2printf@cp+1,c
 14245  000D9E                     i2l4471:
 14246                           
 14247                           ;doprnt.c: 745: len = 0;
 14248  000D9E  0E00               	movlw	0
 14249  000DA0  6E23               	movwf	i2printf@len+1,c
 14250  000DA2  0E00               	movlw	0
 14251  000DA4  6E22               	movwf	i2printf@len,c
 14252                           
 14253                           ;doprnt.c: 746: while(cp[len])
 14254  000DA6  D002               	goto	i2l4475
 14255  000DA8                     i2l4473:
 14256                           
 14257                           ;doprnt.c: 747: len++;
 14258  000DA8  4A22               	infsnz	i2printf@len,f,c
 14259  000DAA  2A23               	incf	i2printf@len+1,f,c
 14260  000DAC                     i2l4475:
 14261  000DAC  5022               	movf	i2printf@len,w,c
 14262  000DAE  241E               	addwf	i2printf@cp,w,c
 14263  000DB0  6E19               	movwf	??i2_printf& (0+255),c
 14264  000DB2  5023               	movf	i2printf@len+1,w,c
 14265  000DB4  201F               	addwfc	i2printf@cp+1,w,c
 14266  000DB6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14267  000DB8  C019  FFF6         	movff	??i2_printf,tblptrl
 14268  000DBC  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 14269  000DC0  0E00               	movlw	low (__mediumconst shr (0+16))
 14270  000DC2  6EF8               	movwf	tblptru,c
 14271  000DC4  0E0F               	movlw	(high __ramtop+-1)
 14272  000DC6  64F7               	cpfsgt	tblptrh,c
 14273  000DC8  D003               	bra	i2u320_47
 14274  000DCA  0008               	tblrd		*
 14275  000DCC  50F5               	movf	tablat,w,c
 14276  000DCE  D005               	bra	i2u320_40
 14277  000DD0                     i2u320_47:
 14278  000DD0  CFF6 FFE9          	movff	tblptrl,fsr0l
 14279  000DD4  CFF7 FFEA          	movff	tblptrh,fsr0h
 14280  000DD8  50EF               	movf	indf0,w,c
 14281  000DDA                     i2u320_40:
 14282  000DDA  0900               	iorlw	0
 14283  000DDC  A4D8               	btfss	status,2,c
 14284  000DDE  D7E4               	goto	i2l4473
 14285                           
 14286                           ;doprnt.c: 757: if(width > len)
 14287  000DE0  5028               	movf	i2printf@width,w,c
 14288  000DE2  5C22               	subwf	i2printf@len,w,c
 14289  000DE4  5029               	movf	i2printf@width+1,w,c
 14290  000DE6  5823               	subwfb	i2printf@len+1,w,c
 14291  000DE8  B0D8               	btfsc	status,0,c
 14292  000DEA  D005               	goto	i2l4481
 14293                           
 14294                           ;doprnt.c: 758: width -= len;
 14295  000DEC  5022               	movf	i2printf@len,w,c
 14296  000DEE  5E28               	subwf	i2printf@width,f,c
 14297  000DF0  5023               	movf	i2printf@len+1,w,c
 14298  000DF2  5A29               	subwfb	i2printf@width+1,f,c
 14299  000DF4  D008               	goto	i2l4485
 14300  000DF6                     i2l4481:
 14301                           
 14302                           ;doprnt.c: 759: else
 14303                           ;doprnt.c: 760: width = 0;
 14304  000DF6  0E00               	movlw	0
 14305  000DF8  6E29               	movwf	i2printf@width+1,c
 14306  000DFA  0E00               	movlw	0
 14307  000DFC  6E28               	movwf	i2printf@width,c
 14308                           
 14309                           ;doprnt.c: 764: while(width--)
 14310  000DFE  D003               	goto	i2l4485
 14311  000E00                     i2l4483:
 14312                           
 14313                           ;doprnt.c: 765: (putch(' ') );
 14314  000E00  0E20               	movlw	32
 14315  000E02  EC48  F019         	call	i2_putch
 14316  000E06                     i2l4485:
 14317  000E06  0628               	decf	i2printf@width,f,c
 14318  000E08  A0D8               	btfss	status,0,c
 14319  000E0A  0629               	decf	i2printf@width+1,f,c
 14320  000E0C  2828               	incf	i2printf@width,w,c
 14321  000E0E  E1F8               	bnz	i2l4483
 14322  000E10  2829               	incf	i2printf@width+1,w,c
 14323  000E12  B4D8               	btfsc	status,2,c
 14324  000E14  D016               	goto	i2l4491
 14325  000E16  D7F4               	goto	i2l4483
 14326  000E18                     i2l4487:
 14327                           
 14328                           ;doprnt.c: 768: (putch(*cp++) );
 14329  000E18  C01E  FFF6         	movff	i2printf@cp,tblptrl
 14330  000E1C  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 14331  000E20  0E00               	movlw	low (__mediumconst shr (0+16))
 14332  000E22  6EF8               	movwf	tblptru,c
 14333  000E24  0E0F               	movlw	(high __ramtop+-1)
 14334  000E26  64F7               	cpfsgt	tblptrh,c
 14335  000E28  D003               	bra	i2u324_47
 14336  000E2A  0008               	tblrd		*
 14337  000E2C  50F5               	movf	tablat,w,c
 14338  000E2E  D005               	bra	i2u324_40
 14339  000E30                     i2u324_47:
 14340  000E30  CFF6 FFE9          	movff	tblptrl,fsr0l
 14341  000E34  CFF7 FFEA          	movff	tblptrh,fsr0h
 14342  000E38  50EF               	movf	indf0,w,c
 14343  000E3A                     i2u324_40:
 14344  000E3A  EC48  F019         	call	i2_putch
 14345  000E3E  4A1E               	infsnz	i2printf@cp,f,c
 14346  000E40  2A1F               	incf	i2printf@cp+1,f,c
 14347  000E42                     i2l4491:
 14348  000E42  0622               	decf	i2printf@len,f,c
 14349  000E44  A0D8               	btfss	status,0,c
 14350  000E46  0623               	decf	i2printf@len+1,f,c
 14351  000E48  2822               	incf	i2printf@len,w,c
 14352  000E4A  E1E6               	bnz	i2l4487
 14353  000E4C  2823               	incf	i2printf@len+1,w,c
 14354  000E4E  B4D8               	btfsc	status,2,c
 14355  000E50  D0DA               	goto	i2l4569
 14356  000E52  D7E2               	goto	i2l4487
 14357  000E54                     i2l4493:
 14358                           
 14359                           ;doprnt.c: 818: flag |= 0x40;
 14360  000E54  8C26               	bsf	i2printf@flag,6,c
 14361                           
 14362                           ;doprnt.c: 822: }
 14363                           
 14364                           ;doprnt.c: 819: break;
 14365  000E56  D01B               	goto	i2l965
 14366  000E58                     i2l4497:
 14367  000E58  C00D  FFF6         	movff	i2printf@f,tblptrl
 14368  000E5C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14369  000E60  4A0D               	infsnz	i2printf@f,f,c
 14370  000E62  2A0E               	incf	i2printf@f+1,f,c
 14371  000E64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14372  000E64  6AF8               	clrf	tblptru,c
 14373  000E66                     	endif
 14374  000E66                     	if	0	;tblptru may be non-zero
 14375  000E66                     	endif
 14376  000E66  0008               	tblrd		*
 14377  000E68  CFF5 F027          	movff	tablat,i2printf@c
 14378  000E6C  5027               	movf	i2printf@c,w,c
 14379                           
 14380                           ; Switch size 1, requested type "space"
 14381                           ; Number of cases is 5, Range of values is 0 to 117
 14382                           ; switch strategies available:
 14383                           ; Name         Instructions Cycles
 14384                           ; simple_byte           16     9 (average)
 14385                           ;	Chosen strategy is simple_byte
 14386  000E6E  0A00               	xorlw	0	; case 0
 14387  000E70  B4D8               	btfsc	status,2,c
 14388  000E72  0012               	return	
 14389  000E74  0A64               	xorlw	100	; case 100
 14390  000E76  B4D8               	btfsc	status,2,c
 14391  000E78  D00A               	goto	i2l965
 14392  000E7A  0A0D               	xorlw	13	; case 105
 14393  000E7C  B4D8               	btfsc	status,2,c
 14394  000E7E  D007               	goto	i2l965
 14395  000E80  0A1A               	xorlw	26	; case 115
 14396  000E82  B4D8               	btfsc	status,2,c
 14397  000E84  D778               	goto	i2l4463
 14398  000E86  0A06               	xorlw	6	; case 117
 14399  000E88  B4D8               	btfsc	status,2,c
 14400  000E8A  D7E4               	goto	i2l4493
 14401  000E8C  D0BC               	goto	i2l4569
 14402  000E8E                     i2l965:
 14403                           
 14404                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14405  000E8E  BC26               	btfsc	i2printf@flag,6,c
 14406  000E90  D015               	goto	i2l4509
 14407                           
 14408                           ;doprnt.c: 1253: {
 14409                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14410  000E92  C020  FFD9         	movff	i2printf@ap,fsr2l
 14411  000E96  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14412  000E9A  CFDE F024          	movff	postinc2,i2printf@val
 14413  000E9E  CFDD F025          	movff	postdec2,i2printf@val+1
 14414  000EA2  0E02               	movlw	2
 14415  000EA4  2620               	addwf	i2printf@ap,f,c
 14416  000EA6  0E00               	movlw	0
 14417  000EA8  2221               	addwfc	i2printf@ap+1,f,c
 14418                           
 14419                           ;doprnt.c: 1261: if((int)val < 0) {
 14420  000EAA  AE25               	btfss	i2printf@val+1,7,c
 14421  000EAC  D013               	goto	i2l4513
 14422                           
 14423                           ;doprnt.c: 1262: flag |= 0x03;
 14424  000EAE  0E03               	movlw	3
 14425  000EB0  1226               	iorwf	i2printf@flag,f,c
 14426                           
 14427                           ;doprnt.c: 1263: val = -val;
 14428  000EB2  6C24               	negf	i2printf@val,c
 14429  000EB4  1E25               	comf	i2printf@val+1,f,c
 14430  000EB6  B0D8               	btfsc	status,0,c
 14431  000EB8  2A25               	incf	i2printf@val+1,f,c
 14432                           
 14433                           ;doprnt.c: 1264: }
 14434                           ;doprnt.c: 1266: }
 14435  000EBA  D00C               	goto	i2l4513
 14436  000EBC                     i2l4509:
 14437                           
 14438                           ;doprnt.c: 1268: else
 14439                           ;doprnt.c: 1273: {
 14440                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14441  000EBC  C020  FFD9         	movff	i2printf@ap,fsr2l
 14442  000EC0  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14443  000EC4  CFDE F024          	movff	postinc2,i2printf@val
 14444  000EC8  CFDD F025          	movff	postdec2,i2printf@val+1
 14445  000ECC  0E02               	movlw	2
 14446  000ECE  2620               	addwf	i2printf@ap,f,c
 14447  000ED0  0E00               	movlw	0
 14448  000ED2  2221               	addwfc	i2printf@ap+1,f,c
 14449  000ED4                     i2l4513:
 14450                           
 14451                           ;doprnt.c: 1287: }
 14452                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14453  000ED4  0E01               	movlw	1
 14454  000ED6  6E27               	movwf	i2printf@c,c
 14455  000ED8                     i2l4515:
 14456  000ED8  0E05               	movlw	5
 14457  000EDA  1827               	xorwf	i2printf@c,w,c
 14458  000EDC  B4D8               	btfsc	status,2,c
 14459  000EDE  D015               	goto	i2l4527
 14460                           
 14461                           ;doprnt.c: 1306: if(val < dpowers[c])
 14462  000EE0  5027               	movf	i2printf@c,w,c
 14463  000EE2  0D02               	mullw	2
 14464  000EE4  0EA2               	movlw	low _dpowers
 14465  000EE6  24F3               	addwf	prodl,w,c
 14466  000EE8  6EF6               	movwf	tblptrl,c
 14467  000EEA  0EFD               	movlw	high _dpowers
 14468  000EEC  20F4               	addwfc	prodh,w,c
 14469  000EEE  6EF7               	movwf	tblptrh,c
 14470  000EF0                     	if	1	;There are 3 active tblptr bytes
 14471  000EF0  6AF8               	clrf	tblptru,c
 14472  000EF2  0E00               	movlw	low (__mediumconst shr (0+16))
 14473  000EF4  22F8               	addwfc	tblptru,f,c
 14474  000EF6                     	endif
 14475  000EF6  0009               	tblrd		*+
 14476  000EF8  50F5               	movf	tablat,w,c
 14477  000EFA  5C24               	subwf	i2printf@val,w,c
 14478  000EFC  0009               	tblrd		*+
 14479  000EFE  50F5               	movf	tablat,w,c
 14480  000F00  5825               	subwfb	i2printf@val+1,w,c
 14481  000F02  A0D8               	btfss	status,0,c
 14482  000F04  D002               	goto	i2l4527
 14483                           
 14484                           ;doprnt.c: 1307: break;
 14485  000F06  2A27               	incf	i2printf@c,f,c
 14486  000F08  D7E7               	goto	i2l4515
 14487  000F0A                     i2l4527:
 14488                           
 14489                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14490  000F0A  5028               	movf	i2printf@width,w,c
 14491  000F0C  1029               	iorwf	i2printf@width+1,w,c
 14492  000F0E  B4D8               	btfsc	status,2,c
 14493  000F10  D009               	goto	i2l4533
 14494  000F12  C026  F019         	movff	i2printf@flag,??i2_printf
 14495  000F16  0E03               	movlw	3
 14496  000F18  1619               	andwf	??i2_printf,f,c
 14497  000F1A  B4D8               	btfsc	status,2,c
 14498  000F1C  D003               	goto	i2l4533
 14499                           
 14500                           ;doprnt.c: 1346: width--;
 14501  000F1E  0628               	decf	i2printf@width,f,c
 14502  000F20  A0D8               	btfss	status,0,c
 14503  000F22  0629               	decf	i2printf@width+1,f,c
 14504  000F24                     i2l4533:
 14505                           
 14506                           ;doprnt.c: 1381: if(width > c)
 14507  000F24  0E80               	movlw	128
 14508  000F26  BE27               	btfsc	i2printf@c,7,c
 14509  000F28  0E7F               	movlw	127
 14510  000F2A  6E19               	movwf	??i2_printf& (0+255),c
 14511  000F2C  5028               	movf	i2printf@width,w,c
 14512  000F2E  5C27               	subwf	i2printf@c,w,c
 14513  000F30  5029               	movf	i2printf@width+1,w,c
 14514  000F32  0A80               	xorlw	128
 14515  000F34  5819               	subwfb	??i2_printf& (0+255),w,c
 14516  000F36  B0D8               	btfsc	status,0,c
 14517  000F38  D007               	goto	i2l4537
 14518                           
 14519                           ;doprnt.c: 1382: width -= c;
 14520  000F3A  5027               	movf	i2printf@c,w,c
 14521  000F3C  5E28               	subwf	i2printf@width,f,c
 14522  000F3E  0E00               	movlw	0
 14523  000F40  BE27               	btfsc	i2printf@c,7,c
 14524  000F42  0EFF               	movlw	255
 14525  000F44  5A29               	subwfb	i2printf@width+1,f,c
 14526  000F46  D004               	goto	i2l4539
 14527  000F48                     i2l4537:
 14528                           
 14529                           ;doprnt.c: 1383: else
 14530                           ;doprnt.c: 1384: width = 0;
 14531  000F48  0E00               	movlw	0
 14532  000F4A  6E29               	movwf	i2printf@width+1,c
 14533  000F4C  0E00               	movlw	0
 14534  000F4E  6E28               	movwf	i2printf@width,c
 14535  000F50                     i2l4539:
 14536                           
 14537                           ;doprnt.c: 1387: if(flag & 0x04) {
 14538  000F50  A426               	btfss	i2printf@flag,2,c
 14539  000F52  D014               	goto	i2l4551
 14540                           
 14541                           ;doprnt.c: 1392: if(flag & 0x03)
 14542  000F54  C026  F019         	movff	i2printf@flag,??i2_printf
 14543  000F58  0E03               	movlw	3
 14544  000F5A  1619               	andwf	??i2_printf,f,c
 14545  000F5C  B4D8               	btfsc	status,2,c
 14546  000F5E  D003               	goto	i2l4545
 14547                           
 14548                           ;doprnt.c: 1393: (putch('-') );
 14549  000F60  0E2D               	movlw	45
 14550  000F62  EC48  F019         	call	i2_putch
 14551  000F66                     i2l4545:
 14552                           
 14553                           ;doprnt.c: 1415: if(width)
 14554  000F66  5028               	movf	i2printf@width,w,c
 14555  000F68  1029               	iorwf	i2printf@width+1,w,c
 14556  000F6A  B4D8               	btfsc	status,2,c
 14557  000F6C  D01E               	goto	i2l4561
 14558                           
 14559                           ;doprnt.c: 1417: (putch('0') );
 14560                           
 14561                           ;doprnt.c: 1416: do
 14562  000F6E  0E30               	movlw	48
 14563  000F70  EC48  F019         	call	i2_putch
 14564                           
 14565                           ;doprnt.c: 1418: while(--width);
 14566  000F74  0628               	decf	i2printf@width,f,c
 14567  000F76  A0D8               	btfss	status,0,c
 14568  000F78  0629               	decf	i2printf@width+1,f,c
 14569  000F7A  D7F5               	goto	i2l4545
 14570  000F7C                     i2l4551:
 14571                           
 14572                           ;doprnt.c: 1422: {
 14573                           ;doprnt.c: 1424: if(width
 14574                           ;doprnt.c: 1428: )
 14575  000F7C  5028               	movf	i2printf@width,w,c
 14576  000F7E  1029               	iorwf	i2printf@width+1,w,c
 14577  000F80  B4D8               	btfsc	status,2,c
 14578  000F82  D00A               	goto	i2l4557
 14579  000F84                     i2l4553:
 14580                           
 14581                           ;doprnt.c: 1430: (putch(' ') );
 14582  000F84  0E20               	movlw	32
 14583  000F86  EC48  F019         	call	i2_putch
 14584                           
 14585                           ;doprnt.c: 1431: while(--width);
 14586  000F8A  0628               	decf	i2printf@width,f,c
 14587  000F8C  A0D8               	btfss	status,0,c
 14588  000F8E  0629               	decf	i2printf@width+1,f,c
 14589  000F90  5028               	movf	i2printf@width,w,c
 14590  000F92  1029               	iorwf	i2printf@width+1,w,c
 14591  000F94  A4D8               	btfss	status,2,c
 14592  000F96  D7F6               	goto	i2l4553
 14593  000F98                     i2l4557:
 14594                           
 14595                           ;doprnt.c: 1438: if(flag & 0x03)
 14596  000F98  C026  F019         	movff	i2printf@flag,??i2_printf
 14597  000F9C  0E03               	movlw	3
 14598  000F9E  1619               	andwf	??i2_printf,f,c
 14599  000FA0  B4D8               	btfsc	status,2,c
 14600  000FA2  D003               	goto	i2l4561
 14601                           
 14602                           ;doprnt.c: 1439: (putch('-') );
 14603  000FA4  0E2D               	movlw	45
 14604  000FA6  EC48  F019         	call	i2_putch
 14605  000FAA                     i2l4561:
 14606                           
 14607                           ;doprnt.c: 1469: }
 14608                           ;doprnt.c: 1472: prec = c;
 14609  000FAA  C027  F01D         	movff	i2printf@c,i2printf@prec
 14610                           
 14611                           ;doprnt.c: 1474: while(prec--) {
 14612  000FAE  D027               	goto	i2l4567
 14613  000FB0                     i2l4563:
 14614                           
 14615                           ;doprnt.c: 1478: {
 14616                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14617  000FB0  501D               	movf	i2printf@prec,w,c
 14618  000FB2  0D02               	mullw	2
 14619  000FB4  0EA2               	movlw	low _dpowers
 14620  000FB6  24F3               	addwf	prodl,w,c
 14621  000FB8  6EF6               	movwf	tblptrl,c
 14622  000FBA  0EFD               	movlw	high _dpowers
 14623  000FBC  20F4               	addwfc	prodh,w,c
 14624  000FBE  6EF7               	movwf	tblptrh,c
 14625  000FC0                     	if	1	;There are 3 active tblptr bytes
 14626  000FC0  6AF8               	clrf	tblptru,c
 14627  000FC2  0E00               	movlw	low (__mediumconst shr (0+16))
 14628  000FC4  22F8               	addwfc	tblptru,f,c
 14629  000FC6                     	endif
 14630  000FC6  0009               	tblrd		*+
 14631  000FC8  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 14632  000FCC  000A               	tblrd		*-
 14633  000FCE  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 14634  000FD2  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 14635  000FD6  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14636  000FDA  ECBF  F015         	call	i2___lwdiv	;wreg free
 14637  000FDE  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 14638  000FE2  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 14639  000FE6  0E00               	movlw	0
 14640  000FE8  6E04               	movwf	i2___lwmod@divisor+1,c
 14641  000FEA  0E0A               	movlw	10
 14642  000FEC  6E03               	movwf	i2___lwmod@divisor,c
 14643  000FEE  EC7C  F016         	call	i2___lwmod	;wreg free
 14644  000FF2  5001               	movf	?i2___lwmod,w,c
 14645  000FF4  0F30               	addlw	48
 14646  000FF6  6E27               	movwf	i2printf@c,c
 14647                           
 14648                           ;doprnt.c: 1523: }
 14649                           ;doprnt.c: 1524: (putch(c) );
 14650  000FF8  5027               	movf	i2printf@c,w,c
 14651  000FFA  EC48  F019         	call	i2_putch
 14652  000FFE                     i2l4567:
 14653  000FFE  061D               	decf	i2printf@prec,f,c
 14654  001000  281D               	incf	i2printf@prec,w,c
 14655  001002  A4D8               	btfss	status,2,c
 14656  001004  D7D5               	goto	i2l4563
 14657  001006                     i2l4569:
 14658  001006  C00D  FFF6         	movff	i2printf@f,tblptrl
 14659  00100A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14660  00100E  4A0D               	infsnz	i2printf@f,f,c
 14661  001010  2A0E               	incf	i2printf@f+1,f,c
 14662  001012                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14663  001012  6AF8               	clrf	tblptru,c
 14664  001014                     	endif
 14665  001014                     	if	0	;tblptru may be non-zero
 14666  001014                     	endif
 14667  001014  0008               	tblrd		*
 14668  001016  CFF5 F027          	movff	tablat,i2printf@c
 14669  00101A  5027               	movf	i2printf@c,w,c
 14670  00101C  B4D8               	btfsc	status,2,c
 14671  00101E  0012               	return	
 14672  001020  D64E               	goto	i2l4439
 14673  001022                     __end_ofi2_printf:
 14674                           	opt stack 0
 14675                           pclatu	equ	0xFFB
 14676                           pclath	equ	0xFFA
 14677                           tblptru	equ	0xFF8
 14678                           tblptrh	equ	0xFF7
 14679                           tblptrl	equ	0xFF6
 14680                           tablat	equ	0xFF5
 14681                           prodh	equ	0xFF4
 14682                           prodl	equ	0xFF3
 14683                           intcon	equ	0xFF2
 14684                           intcon2	equ	0xFF1
 14685                           intcon3	equ	0xFF0
 14686                           indf0	equ	0xFEF
 14687                           postinc0	equ	0xFEE
 14688                           fsr0h	equ	0xFEA
 14689                           fsr0l	equ	0xFE9
 14690                           wreg	equ	0xFE8
 14691                           postdec1	equ	0xFE5
 14692                           fsr1h	equ	0xFE2
 14693                           fsr1l	equ	0xFE1
 14694                           indf2	equ	0xFDF
 14695                           postinc2	equ	0xFDE
 14696                           postdec2	equ	0xFDD
 14697                           fsr2h	equ	0xFDA
 14698                           fsr2l	equ	0xFD9
 14699                           status	equ	0xFD8
 14700                           
 14701 ;; *************** function i2_putch *****************
 14702 ;; Defined at:
 14703 ;;		line 20 in file "lcd.c"
 14704 ;; Parameters:    Size  Location     Type
 14705 ;;  data            1    wreg     unsigned char 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  data            1    2[COMRAM] unsigned char 
 14708 ;; Return value:  Size  Location     Type
 14709 ;;                  1    wreg      void 
 14710 ;; Registers used:
 14711 ;;		wreg, status,2, status,0, cstack
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14721 ;;Total ram usage:        1 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; Hardware stack levels required when called:    1
 14724 ;; This function calls:
 14725 ;;		i2_lcdNibble
 14726 ;; This function is called by:
 14727 ;;		i2_printf
 14728 ;; This function uses a non-reentrant model
 14729 ;;
 14730                           
 14731                           	psect	text66
 14732  003290                     __ptext66:
 14733                           	opt stack 0
 14734  003290                     i2_putch:
 14735                           	opt stack 19
 14736                           
 14737                           ;incstack = 0
 14738                           ;i2putch@data stored from wreg
 14739  003290  6E03               	movwf	i2putch@data,c
 14740                           
 14741                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14742  003292  848C               	bsf	3980,2,c	;volatile
 14743                           
 14744                           ;lcd.c: 22: lcdNibble(data);
 14745  003294  5003               	movf	i2putch@data,w,c
 14746  003296  EC94  F015         	call	i2_lcdNibble
 14747  00329A  0012               	return		;funcret
 14748  00329C                     __end_ofi2_putch:
 14749                           	opt stack 0
 14750                           pclatu	equ	0xFFB
 14751                           pclath	equ	0xFFA
 14752                           tblptru	equ	0xFF8
 14753                           tblptrh	equ	0xFF7
 14754                           tblptrl	equ	0xFF6
 14755                           tablat	equ	0xFF5
 14756                           prodh	equ	0xFF4
 14757                           prodl	equ	0xFF3
 14758                           intcon	equ	0xFF2
 14759                           intcon2	equ	0xFF1
 14760                           intcon3	equ	0xFF0
 14761                           indf0	equ	0xFEF
 14762                           postinc0	equ	0xFEE
 14763                           fsr0h	equ	0xFEA
 14764                           fsr0l	equ	0xFE9
 14765                           wreg	equ	0xFE8
 14766                           postdec1	equ	0xFE5
 14767                           fsr1h	equ	0xFE2
 14768                           fsr1l	equ	0xFE1
 14769                           indf2	equ	0xFDF
 14770                           postinc2	equ	0xFDE
 14771                           postdec2	equ	0xFDD
 14772                           fsr2h	equ	0xFDA
 14773                           fsr2l	equ	0xFD9
 14774                           status	equ	0xFD8
 14775                           
 14776 ;; *************** function i2_isdigit *****************
 14777 ;; Defined at:
 14778 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14779 ;; Parameters:    Size  Location     Type
 14780 ;;  c               1    wreg     unsigned char 
 14781 ;; Auto vars:     Size  Location     Type
 14782 ;;  c               1    2[COMRAM] unsigned char 
 14783 ;; Return value:  Size  Location     Type
 14784 ;;		None               void
 14785 ;; Registers used:
 14786 ;;		wreg, status,2, status,0
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;Total ram usage:        3 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; This function calls:
 14799 ;;		Nothing
 14800 ;; This function is called by:
 14801 ;;		i2_printf
 14802 ;; This function uses a non-reentrant model
 14803 ;;
 14804                           
 14805                           	psect	text67
 14806  0031D6                     __ptext67:
 14807                           	opt stack 0
 14808  0031D6                     i2_isdigit:
 14809                           	opt stack 20
 14810                           
 14811                           ;incstack = 0
 14812                           ;i2isdigit@c stored from wreg
 14813  0031D6  6E03               	movwf	i2isdigit@c,c
 14814  0031D8  0E00               	movlw	0
 14815  0031DA  6E02               	movwf	i2_isdigit$1630,c
 14816  0031DC  0E3A               	movlw	58
 14817  0031DE  6003               	cpfslt	i2isdigit@c,c
 14818  0031E0  D005               	goto	i2l4159
 14819  0031E2  0E2F               	movlw	47
 14820  0031E4  6403               	cpfsgt	i2isdigit@c,c
 14821  0031E6  D002               	goto	i2l4159
 14822  0031E8  0E01               	movlw	1
 14823  0031EA  6E02               	movwf	i2_isdigit$1630,c
 14824  0031EC                     i2l4159:
 14825  0031EC  C002  F001         	movff	i2_isdigit$1630,??i2_isdigit
 14826  0031F0  3001               	rrcf	??i2_isdigit,w,c
 14827  0031F2  0012               	return	
 14828  0031F4                     __end_ofi2_isdigit:
 14829                           	opt stack 0
 14830                           pclatu	equ	0xFFB
 14831                           pclath	equ	0xFFA
 14832                           tblptru	equ	0xFF8
 14833                           tblptrh	equ	0xFF7
 14834                           tblptrl	equ	0xFF6
 14835                           tablat	equ	0xFF5
 14836                           prodh	equ	0xFF4
 14837                           prodl	equ	0xFF3
 14838                           intcon	equ	0xFF2
 14839                           intcon2	equ	0xFF1
 14840                           intcon3	equ	0xFF0
 14841                           indf0	equ	0xFEF
 14842                           postinc0	equ	0xFEE
 14843                           fsr0h	equ	0xFEA
 14844                           fsr0l	equ	0xFE9
 14845                           wreg	equ	0xFE8
 14846                           postdec1	equ	0xFE5
 14847                           fsr1h	equ	0xFE2
 14848                           fsr1l	equ	0xFE1
 14849                           indf2	equ	0xFDF
 14850                           postinc2	equ	0xFDE
 14851                           postdec2	equ	0xFDD
 14852                           fsr2h	equ	0xFDA
 14853                           fsr2l	equ	0xFD9
 14854                           status	equ	0xFD8
 14855                           
 14856 ;; *************** function i2___wmul *****************
 14857 ;; Defined at:
 14858 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14859 ;; Parameters:    Size  Location     Type
 14860 ;;  multiplier      2    0[COMRAM] unsigned int 
 14861 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;  __wmul          2    4[COMRAM] unsigned int 
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  2    0[COMRAM] unsigned int 
 14866 ;; Registers used:
 14867 ;;		wreg, status,2, status,0, prodl, prodh
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14876 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14877 ;;Total ram usage:        6 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; This function calls:
 14880 ;;		Nothing
 14881 ;; This function is called by:
 14882 ;;		_printSortTimer
 14883 ;;		_retrieveLog
 14884 ;;		i2_printf
 14885 ;; This function uses a non-reentrant model
 14886 ;;
 14887                           
 14888                           	psect	text68
 14889  0030FE                     __ptext68:
 14890                           	opt stack 0
 14891  0030FE                     i2___wmul:
 14892                           	opt stack 20
 14893                           
 14894                           ;incstack = 0
 14895  0030FE  5001               	movf	i2___wmul@multiplier,w,c
 14896  003100  0203               	mulwf	i2___wmul@multiplicand,c
 14897  003102  CFF3 F005          	movff	prodl,i2___wmul@product
 14898  003106  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14899  00310A  5001               	movf	i2___wmul@multiplier,w,c
 14900  00310C  0204               	mulwf	i2___wmul@multiplicand+1,c
 14901  00310E  50F3               	movf	prodl,w,c
 14902  003110  2606               	addwf	i2___wmul@product+1,f,c
 14903  003112  5002               	movf	i2___wmul@multiplier+1,w,c
 14904  003114  0203               	mulwf	i2___wmul@multiplicand,c
 14905  003116  50F3               	movf	prodl,w,c
 14906  003118  2606               	addwf	i2___wmul@product+1,f,c
 14907  00311A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14908  00311E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14909  003122  0012               	return	
 14910  003124                     __end_ofi2___wmul:
 14911                           	opt stack 0
 14912                           pclatu	equ	0xFFB
 14913                           pclath	equ	0xFFA
 14914                           tblptru	equ	0xFF8
 14915                           tblptrh	equ	0xFF7
 14916                           tblptrl	equ	0xFF6
 14917                           tablat	equ	0xFF5
 14918                           prodh	equ	0xFF4
 14919                           prodl	equ	0xFF3
 14920                           intcon	equ	0xFF2
 14921                           intcon2	equ	0xFF1
 14922                           intcon3	equ	0xFF0
 14923                           indf0	equ	0xFEF
 14924                           postinc0	equ	0xFEE
 14925                           fsr0h	equ	0xFEA
 14926                           fsr0l	equ	0xFE9
 14927                           wreg	equ	0xFE8
 14928                           postdec1	equ	0xFE5
 14929                           fsr1h	equ	0xFE2
 14930                           fsr1l	equ	0xFE1
 14931                           indf2	equ	0xFDF
 14932                           postinc2	equ	0xFDE
 14933                           postdec2	equ	0xFDD
 14934                           fsr2h	equ	0xFDA
 14935                           fsr2l	equ	0xFD9
 14936                           status	equ	0xFD8
 14937                           
 14938 ;; *************** function i2___lwmod *****************
 14939 ;; Defined at:
 14940 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14941 ;; Parameters:    Size  Location     Type
 14942 ;;  dividend        2    0[COMRAM] unsigned int 
 14943 ;;  divisor         2    2[COMRAM] unsigned int 
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  __lwmod         1    4[COMRAM] unsigned char 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  2    0[COMRAM] unsigned int 
 14948 ;; Registers used:
 14949 ;;		wreg, status,2, status,0
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14958 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14959 ;;Total ram usage:        5 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; This function calls:
 14962 ;;		Nothing
 14963 ;; This function is called by:
 14964 ;;		_printSortTimer
 14965 ;;		i2_printf
 14966 ;; This function uses a non-reentrant model
 14967 ;;
 14968                           
 14969                           	psect	text69
 14970  002CF8                     __ptext69:
 14971                           	opt stack 0
 14972  002CF8                     i2___lwmod:
 14973                           	opt stack 20
 14974                           
 14975                           ;incstack = 0
 14976  002CF8  5003               	movf	i2___lwmod@divisor,w,c
 14977  002CFA  1004               	iorwf	i2___lwmod@divisor+1,w,c
 14978  002CFC  B4D8               	btfsc	status,2,c
 14979  002CFE  D018               	goto	i2l1422
 14980  002D00  0E01               	movlw	1
 14981  002D02  6E05               	movwf	i2___lwmod@counter,c
 14982  002D04  D004               	goto	i2l4191
 14983  002D06                     i2l4189:
 14984  002D06  90D8               	bcf	status,0,c
 14985  002D08  3603               	rlcf	i2___lwmod@divisor,f,c
 14986  002D0A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 14987  002D0C  2A05               	incf	i2___lwmod@counter,f,c
 14988  002D0E                     i2l4191:
 14989  002D0E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 14990  002D10  D7FA               	goto	i2l4189
 14991  002D12                     i2l4193:
 14992  002D12  5003               	movf	i2___lwmod@divisor,w,c
 14993  002D14  5C01               	subwf	i2___lwmod@dividend,w,c
 14994  002D16  5004               	movf	i2___lwmod@divisor+1,w,c
 14995  002D18  5802               	subwfb	i2___lwmod@dividend+1,w,c
 14996  002D1A  A0D8               	btfss	status,0,c
 14997  002D1C  D004               	goto	i2l4197
 14998  002D1E  5003               	movf	i2___lwmod@divisor,w,c
 14999  002D20  5E01               	subwf	i2___lwmod@dividend,f,c
 15000  002D22  5004               	movf	i2___lwmod@divisor+1,w,c
 15001  002D24  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15002  002D26                     i2l4197:
 15003  002D26  90D8               	bcf	status,0,c
 15004  002D28  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15005  002D2A  3203               	rrcf	i2___lwmod@divisor,f,c
 15006  002D2C  2E05               	decfsz	i2___lwmod@counter,f,c
 15007  002D2E  D7F1               	goto	i2l4193
 15008  002D30                     i2l1422:
 15009  002D30  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15010  002D34  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15011  002D38  0012               	return		;funcret
 15012  002D3A                     __end_ofi2___lwmod:
 15013                           	opt stack 0
 15014                           pclatu	equ	0xFFB
 15015                           pclath	equ	0xFFA
 15016                           tblptru	equ	0xFF8
 15017                           tblptrh	equ	0xFF7
 15018                           tblptrl	equ	0xFF6
 15019                           tablat	equ	0xFF5
 15020                           prodh	equ	0xFF4
 15021                           prodl	equ	0xFF3
 15022                           intcon	equ	0xFF2
 15023                           intcon2	equ	0xFF1
 15024                           intcon3	equ	0xFF0
 15025                           indf0	equ	0xFEF
 15026                           postinc0	equ	0xFEE
 15027                           fsr0h	equ	0xFEA
 15028                           fsr0l	equ	0xFE9
 15029                           wreg	equ	0xFE8
 15030                           postdec1	equ	0xFE5
 15031                           fsr1h	equ	0xFE2
 15032                           fsr1l	equ	0xFE1
 15033                           indf2	equ	0xFDF
 15034                           postinc2	equ	0xFDE
 15035                           postdec2	equ	0xFDD
 15036                           fsr2h	equ	0xFDA
 15037                           fsr2l	equ	0xFD9
 15038                           status	equ	0xFD8
 15039                           
 15040 ;; *************** function i2___lwdiv *****************
 15041 ;; Defined at:
 15042 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15043 ;; Parameters:    Size  Location     Type
 15044 ;;  dividend        2    5[COMRAM] unsigned int 
 15045 ;;  divisor         2    7[COMRAM] unsigned int 
 15046 ;; Auto vars:     Size  Location     Type
 15047 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 15048 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 15049 ;; Return value:  Size  Location     Type
 15050 ;;                  2    5[COMRAM] unsigned int 
 15051 ;; Registers used:
 15052 ;;		wreg, status,2, status,0
 15053 ;; Tracked objects:
 15054 ;;		On entry : 0/0
 15055 ;;		On exit  : 0/0
 15056 ;;		Unchanged: 0/0
 15057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15059 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;Total ram usage:        7 bytes
 15063 ;; Hardware stack levels used:    1
 15064 ;; This function calls:
 15065 ;;		Nothing
 15066 ;; This function is called by:
 15067 ;;		_printSortTimer
 15068 ;;		i2_printf
 15069 ;; This function uses a non-reentrant model
 15070 ;;
 15071                           
 15072                           	psect	text70
 15073  002B7E                     __ptext70:
 15074                           	opt stack 0
 15075  002B7E                     i2___lwdiv:
 15076                           	opt stack 20
 15077                           
 15078                           ;incstack = 0
 15079  002B7E  0E00               	movlw	0
 15080  002B80  6E0B               	movwf	i2___lwdiv@quotient+1,c
 15081  002B82  0E00               	movlw	0
 15082  002B84  6E0A               	movwf	i2___lwdiv@quotient,c
 15083  002B86  5008               	movf	i2___lwdiv@divisor,w,c
 15084  002B88  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 15085  002B8A  B4D8               	btfsc	status,2,c
 15086  002B8C  D01C               	goto	i2l1412
 15087  002B8E  0E01               	movlw	1
 15088  002B90  6E0C               	movwf	i2___lwdiv@counter,c
 15089  002B92  D004               	goto	i2l4171
 15090  002B94                     i2l4169:
 15091  002B94  90D8               	bcf	status,0,c
 15092  002B96  3608               	rlcf	i2___lwdiv@divisor,f,c
 15093  002B98  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 15094  002B9A  2A0C               	incf	i2___lwdiv@counter,f,c
 15095  002B9C                     i2l4171:
 15096  002B9C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 15097  002B9E  D7FA               	goto	i2l4169
 15098  002BA0                     i2l4173:
 15099  002BA0  90D8               	bcf	status,0,c
 15100  002BA2  360A               	rlcf	i2___lwdiv@quotient,f,c
 15101  002BA4  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 15102  002BA6  5008               	movf	i2___lwdiv@divisor,w,c
 15103  002BA8  5C06               	subwf	i2___lwdiv@dividend,w,c
 15104  002BAA  5009               	movf	i2___lwdiv@divisor+1,w,c
 15105  002BAC  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 15106  002BAE  A0D8               	btfss	status,0,c
 15107  002BB0  D005               	goto	i2l4181
 15108  002BB2  5008               	movf	i2___lwdiv@divisor,w,c
 15109  002BB4  5E06               	subwf	i2___lwdiv@dividend,f,c
 15110  002BB6  5009               	movf	i2___lwdiv@divisor+1,w,c
 15111  002BB8  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 15112  002BBA  800A               	bsf	i2___lwdiv@quotient,0,c
 15113  002BBC                     i2l4181:
 15114  002BBC  90D8               	bcf	status,0,c
 15115  002BBE  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 15116  002BC0  3208               	rrcf	i2___lwdiv@divisor,f,c
 15117  002BC2  2E0C               	decfsz	i2___lwdiv@counter,f,c
 15118  002BC4  D7ED               	goto	i2l4173
 15119  002BC6                     i2l1412:
 15120  002BC6  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 15121  002BCA  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 15122  002BCE  0012               	return		;funcret
 15123  002BD0                     __end_ofi2___lwdiv:
 15124                           	opt stack 0
 15125                           pclatu	equ	0xFFB
 15126                           pclath	equ	0xFFA
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           intcon2	equ	0xFF1
 15135                           intcon3	equ	0xFF0
 15136                           indf0	equ	0xFEF
 15137                           postinc0	equ	0xFEE
 15138                           fsr0h	equ	0xFEA
 15139                           fsr0l	equ	0xFE9
 15140                           wreg	equ	0xFE8
 15141                           postdec1	equ	0xFE5
 15142                           fsr1h	equ	0xFE2
 15143                           fsr1l	equ	0xFE1
 15144                           indf2	equ	0xFDF
 15145                           postinc2	equ	0xFDE
 15146                           postdec2	equ	0xFDD
 15147                           fsr2h	equ	0xFDA
 15148                           fsr2l	equ	0xFD9
 15149                           status	equ	0xFD8
 15150                           
 15151 ;; *************** function i2_lcdInst *****************
 15152 ;; Defined at:
 15153 ;;		line 15 in file "lcd.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;  data            1    wreg     unsigned char 
 15156 ;; Auto vars:     Size  Location     Type
 15157 ;;  data            1    2[COMRAM] unsigned char 
 15158 ;; Return value:  Size  Location     Type
 15159 ;;                  1    wreg      void 
 15160 ;; Registers used:
 15161 ;;		wreg, status,2, status,0, cstack
 15162 ;; Tracked objects:
 15163 ;;		On entry : 0/0
 15164 ;;		On exit  : 0/0
 15165 ;;		Unchanged: 0/0
 15166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15171 ;;Total ram usage:        1 bytes
 15172 ;; Hardware stack levels used:    1
 15173 ;; Hardware stack levels required when called:    1
 15174 ;; This function calls:
 15175 ;;		i2_lcdNibble
 15176 ;; This function is called by:
 15177 ;;		_change_state_to_menu_11
 15178 ;;		_change_state_to_menu_23
 15179 ;;		_change_state_to_logs_11
 15180 ;;		_change_state_to_logs_12
 15181 ;;		_change_state_to_logs_22
 15182 ;;		_change_state_to_logs_23
 15183 ;;		_change_state_to_logs_33
 15184 ;;		_change_state_to_logs_34
 15185 ;;		_printSortTimer
 15186 ;;		i2_change_state_to_menu_start
 15187 ;;		i2_change_state_to_menu_12
 15188 ;;		i2_change_state_to_menu_22
 15189 ;;		i2_printRTC
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text71
 15194  00329C                     __ptext71:
 15195                           	opt stack 0
 15196  00329C                     i2_lcdInst:
 15197                           	opt stack 19
 15198                           
 15199                           ;incstack = 0
 15200                           ;i2lcdInst@data stored from wreg
 15201  00329C  6E03               	movwf	i2lcdInst@data,c
 15202                           
 15203                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15204  00329E  948C               	bcf	3980,2,c	;volatile
 15205                           
 15206                           ;lcd.c: 17: lcdNibble(data);
 15207  0032A0  5003               	movf	i2lcdInst@data,w,c
 15208  0032A2  EC94  F015         	call	i2_lcdNibble
 15209  0032A6  0012               	return		;funcret
 15210  0032A8                     __end_ofi2_lcdInst:
 15211                           	opt stack 0
 15212                           pclatu	equ	0xFFB
 15213                           pclath	equ	0xFFA
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           intcon2	equ	0xFF1
 15222                           intcon3	equ	0xFF0
 15223                           indf0	equ	0xFEF
 15224                           postinc0	equ	0xFEE
 15225                           fsr0h	equ	0xFEA
 15226                           fsr0l	equ	0xFE9
 15227                           wreg	equ	0xFE8
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function i2_lcdNibble *****************
 15239 ;; Defined at:
 15240 ;;		line 25 in file "lcd.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;  data            1    wreg     unsigned char 
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;  data            1    1[COMRAM] unsigned char 
 15245 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 15246 ;; Return value:  Size  Location     Type
 15247 ;;                  1    wreg      void 
 15248 ;; Registers used:
 15249 ;;		wreg, status,2, status,0
 15250 ;; Tracked objects:
 15251 ;;		On entry : 0/0
 15252 ;;		On exit  : 0/0
 15253 ;;		Unchanged: 0/0
 15254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;Total ram usage:        2 bytes
 15260 ;; Hardware stack levels used:    1
 15261 ;; This function calls:
 15262 ;;		Nothing
 15263 ;; This function is called by:
 15264 ;;		i2_lcdInst
 15265 ;;		i2_putch
 15266 ;; This function uses a non-reentrant model
 15267 ;;
 15268                           
 15269                           	psect	text72
 15270  002B28                     __ptext72:
 15271                           	opt stack 0
 15272  002B28                     i2_lcdNibble:
 15273                           	opt stack 19
 15274                           
 15275                           ;incstack = 0
 15276                           ;i2lcdNibble@data stored from wreg
 15277  002B28  6E02               	movwf	i2lcdNibble@data,c
 15278                           
 15279                           ;lcd.c: 27: char temp = data & 0xF0;
 15280  002B2A  5002               	movf	i2lcdNibble@data,w,c
 15281  002B2C  0BF0               	andlw	240
 15282  002B2E  6E01               	movwf	i2lcdNibble@temp,c
 15283                           
 15284                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15285  002B30  508C               	movf	3980,w,c	;volatile
 15286  002B32  0B0F               	andlw	15
 15287  002B34  6E8C               	movwf	3980,c	;volatile
 15288                           
 15289                           ;lcd.c: 29: LATD = temp | LATD;
 15290  002B36  5001               	movf	i2lcdNibble@temp,w,c
 15291  002B38  108C               	iorwf	3980,w,c	;volatile
 15292  002B3A  6E8C               	movwf	3980,c	;volatile
 15293                           
 15294                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15295  002B3C  868C               	bsf	3980,3,c	;volatile
 15296                           
 15297                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15298  002B3E  0E42               	movlw	66
 15299  002B40                     i2u549_47:
 15300  002B40  2EE8               	decfsz	wreg,f,c
 15301  002B42  D7FE               	bra	i2u549_47
 15302  002B44  D000               	nop2	
 15303                           
 15304                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15305  002B46  968C               	bcf	3980,3,c	;volatile
 15306                           
 15307                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15308  002B48  0E42               	movlw	66
 15309  002B4A                     i2u550_47:
 15310  002B4A  2EE8               	decfsz	wreg,f,c
 15311  002B4C  D7FE               	bra	i2u550_47
 15312  002B4E  D000               	nop2	
 15313                           
 15314                           ;lcd.c: 36: data = data << 4;
 15315  002B50  3802               	swapf	i2lcdNibble@data,w,c
 15316  002B52  0BF0               	andlw	240
 15317  002B54  6E02               	movwf	i2lcdNibble@data,c
 15318                           
 15319                           ;lcd.c: 38: temp = data & 0xF0;
 15320  002B56  5002               	movf	i2lcdNibble@data,w,c
 15321  002B58  0BF0               	andlw	240
 15322  002B5A  6E01               	movwf	i2lcdNibble@temp,c
 15323                           
 15324                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15325  002B5C  508C               	movf	3980,w,c	;volatile
 15326  002B5E  0B0F               	andlw	15
 15327  002B60  6E8C               	movwf	3980,c	;volatile
 15328                           
 15329                           ;lcd.c: 40: LATD = temp | LATD;
 15330  002B62  5001               	movf	i2lcdNibble@temp,w,c
 15331  002B64  108C               	iorwf	3980,w,c	;volatile
 15332  002B66  6E8C               	movwf	3980,c	;volatile
 15333                           
 15334                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15335  002B68  868C               	bsf	3980,3,c	;volatile
 15336                           
 15337                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15338  002B6A  0E42               	movlw	66
 15339  002B6C                     i2u551_47:
 15340  002B6C  2EE8               	decfsz	wreg,f,c
 15341  002B6E  D7FE               	bra	i2u551_47
 15342  002B70  D000               	nop2	
 15343                           
 15344                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15345  002B72  968C               	bcf	3980,3,c	;volatile
 15346                           
 15347                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15348  002B74  0E42               	movlw	66
 15349  002B76                     i2u552_47:
 15350  002B76  2EE8               	decfsz	wreg,f,c
 15351  002B78  D7FE               	bra	i2u552_47
 15352  002B7A  D000               	nop2	
 15353  002B7C  0012               	return		;funcret
 15354  002B7E                     __end_ofi2_lcdNibble:
 15355                           	opt stack 0
 15356                           pclatu	equ	0xFFB
 15357                           pclath	equ	0xFFA
 15358                           tblptru	equ	0xFF8
 15359                           tblptrh	equ	0xFF7
 15360                           tblptrl	equ	0xFF6
 15361                           tablat	equ	0xFF5
 15362                           prodh	equ	0xFF4
 15363                           prodl	equ	0xFF3
 15364                           intcon	equ	0xFF2
 15365                           intcon2	equ	0xFF1
 15366                           intcon3	equ	0xFF0
 15367                           indf0	equ	0xFEF
 15368                           postinc0	equ	0xFEE
 15369                           fsr0h	equ	0xFEA
 15370                           fsr0l	equ	0xFE9
 15371                           wreg	equ	0xFE8
 15372                           postdec1	equ	0xFE5
 15373                           fsr1h	equ	0xFE2
 15374                           fsr1l	equ	0xFE1
 15375                           indf2	equ	0xFDF
 15376                           postinc2	equ	0xFDE
 15377                           postdec2	equ	0xFDD
 15378                           fsr2h	equ	0xFDA
 15379                           fsr2l	equ	0xFD9
 15380                           status	equ	0xFD8
 15381                           
 15382 ;; *************** function i2_getRTC *****************
 15383 ;; Defined at:
 15384 ;;		line 44 in file "RTC.c"
 15385 ;; Parameters:    Size  Location     Type
 15386 ;;		None
 15387 ;; Auto vars:     Size  Location     Type
 15388 ;;  getRTC          2    3[COMRAM] int 
 15389 ;; Return value:  Size  Location     Type
 15390 ;;                  1    wreg      void 
 15391 ;; Registers used:
 15392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15393 ;; Tracked objects:
 15394 ;;		On entry : 0/0
 15395 ;;		On exit  : 0/0
 15396 ;;		Unchanged: 0/0
 15397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15401 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15402 ;;Total ram usage:        2 bytes
 15403 ;; Hardware stack levels used:    1
 15404 ;; Hardware stack levels required when called:    2
 15405 ;; This function calls:
 15406 ;;		i2_I2C_Master_Read
 15407 ;;		i2_I2C_Master_Start
 15408 ;;		i2_I2C_Master_Stop
 15409 ;;		i2_I2C_Master_Write
 15410 ;; This function is called by:
 15411 ;;		_printSortTimer
 15412 ;;		i2_printRTC
 15413 ;; This function uses a non-reentrant model
 15414 ;;
 15415                           
 15416                           	psect	text73
 15417  002934                     __ptext73:
 15418                           	opt stack 0
 15419  002934                     i2_getRTC:
 15420                           	opt stack 18
 15421                           
 15422                           ;RTC.c: 48: I2C_Master_Start();
 15423                           
 15424                           ;incstack = 0
 15425  002934  EC6E  F019         	call	i2_I2C_Master_Start	;wreg free
 15426                           
 15427                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 15428  002938  0E00               	movlw	0
 15429  00293A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15430  00293C  0ED0               	movlw	208
 15431  00293E  6E02               	movwf	i2I2C_Master_Write@d,c
 15432  002940  EC59  F019         	call	i2_I2C_Master_Write	;wreg free
 15433                           
 15434                           ;RTC.c: 50: I2C_Master_Write(0x00);
 15435  002944  0E00               	movlw	0
 15436  002946  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15437  002948  0E00               	movlw	0
 15438  00294A  6E02               	movwf	i2I2C_Master_Write@d,c
 15439  00294C  EC59  F019         	call	i2_I2C_Master_Write	;wreg free
 15440                           
 15441                           ;RTC.c: 51: I2C_Master_Stop();
 15442  002950  EC6A  F019         	call	i2_I2C_Master_Stop	;wreg free
 15443                           
 15444                           ;RTC.c: 54: I2C_Master_Start();
 15445  002954  EC6E  F019         	call	i2_I2C_Master_Start	;wreg free
 15446                           
 15447                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 15448  002958  0E00               	movlw	0
 15449  00295A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15450  00295C  0ED1               	movlw	209
 15451  00295E  6E02               	movwf	i2I2C_Master_Write@d,c
 15452  002960  EC59  F019         	call	i2_I2C_Master_Write	;wreg free
 15453                           
 15454                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 15455  002964  0E00               	movlw	0
 15456  002966  6E05               	movwf	i2getRTC@i+1,c
 15457  002968  0E00               	movlw	0
 15458  00296A  6E04               	movwf	i2getRTC@i,c
 15459  00296C                     i2l4411:
 15460  00296C  BE05               	btfsc	i2getRTC@i+1,7,c
 15461  00296E  D006               	goto	i2l4415
 15462  002970  5005               	movf	i2getRTC@i+1,w,c
 15463  002972  E111               	bnz	i2l4421
 15464  002974  0E06               	movlw	6
 15465  002976  5C04               	subwf	i2getRTC@i,w,c
 15466  002978  B0D8               	btfsc	status,0,c
 15467  00297A  D00D               	goto	i2l4421
 15468  00297C                     i2l4415:
 15469                           
 15470                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 15471  00297C  0E5B               	movlw	low _time
 15472  00297E  2404               	addwf	i2getRTC@i,w,c
 15473  002980  6ED9               	movwf	fsr2l,c
 15474  002982  0E00               	movlw	high _time
 15475  002984  2005               	addwfc	i2getRTC@i+1,w,c
 15476  002986  6EDA               	movwf	fsr2h,c
 15477  002988  0E01               	movlw	1
 15478  00298A  EC92  F018         	call	i2_I2C_Master_Read
 15479  00298E  6EDF               	movwf	indf2,c
 15480  002990  4A04               	infsnz	i2getRTC@i,f,c
 15481  002992  2A05               	incf	i2getRTC@i+1,f,c
 15482  002994  D7EB               	goto	i2l4411
 15483  002996                     i2l4421:
 15484                           
 15485                           ;RTC.c: 58: }
 15486                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 15487  002996  0E00               	movlw	0
 15488  002998  EC92  F018         	call	i2_I2C_Master_Read
 15489  00299C  6E61               	movwf	_time+6,c
 15490                           
 15491                           ;RTC.c: 60: I2C_Master_Stop();
 15492  00299E  EC6A  F019         	call	i2_I2C_Master_Stop	;wreg free
 15493  0029A2  0012               	return		;funcret
 15494  0029A4                     __end_ofi2_getRTC:
 15495                           	opt stack 0
 15496                           pclatu	equ	0xFFB
 15497                           pclath	equ	0xFFA
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           intcon2	equ	0xFF1
 15506                           intcon3	equ	0xFF0
 15507                           indf0	equ	0xFEF
 15508                           postinc0	equ	0xFEE
 15509                           fsr0h	equ	0xFEA
 15510                           fsr0l	equ	0xFE9
 15511                           wreg	equ	0xFE8
 15512                           postdec1	equ	0xFE5
 15513                           fsr1h	equ	0xFE2
 15514                           fsr1l	equ	0xFE1
 15515                           indf2	equ	0xFDF
 15516                           postinc2	equ	0xFDE
 15517                           postdec2	equ	0xFDD
 15518                           fsr2h	equ	0xFDA
 15519                           fsr2l	equ	0xFD9
 15520                           status	equ	0xFD8
 15521                           
 15522 ;; *************** function i2_I2C_Master_Write *****************
 15523 ;; Defined at:
 15524 ;;		line 49 in file "I2C.c"
 15525 ;; Parameters:    Size  Location     Type
 15526 ;;  d               2    1[COMRAM] unsigned int 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;		None
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  1    wreg      void 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15542 ;;Total ram usage:        2 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    1
 15545 ;; This function calls:
 15546 ;;		i2_I2C_Master_Wait
 15547 ;; This function is called by:
 15548 ;;		i2_getRTC
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           	psect	text74
 15553  0032B2                     __ptext74:
 15554                           	opt stack 0
 15555  0032B2                     i2_I2C_Master_Write:
 15556                           	opt stack 18
 15557                           
 15558                           ;I2C.c: 51: I2C_Master_Wait();
 15559                           
 15560                           ;incstack = 0
 15561  0032B2  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15562                           
 15563                           ;I2C.c: 52: SSPBUF = d;
 15564  0032B6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 15565  0032BA  0012               	return		;funcret
 15566  0032BC                     __end_ofi2_I2C_Master_Write:
 15567                           	opt stack 0
 15568                           pclatu	equ	0xFFB
 15569                           pclath	equ	0xFFA
 15570                           tblptru	equ	0xFF8
 15571                           tblptrh	equ	0xFF7
 15572                           tblptrl	equ	0xFF6
 15573                           tablat	equ	0xFF5
 15574                           prodh	equ	0xFF4
 15575                           prodl	equ	0xFF3
 15576                           intcon	equ	0xFF2
 15577                           intcon2	equ	0xFF1
 15578                           intcon3	equ	0xFF0
 15579                           indf0	equ	0xFEF
 15580                           postinc0	equ	0xFEE
 15581                           fsr0h	equ	0xFEA
 15582                           fsr0l	equ	0xFE9
 15583                           wreg	equ	0xFE8
 15584                           postdec1	equ	0xFE5
 15585                           fsr1h	equ	0xFE2
 15586                           fsr1l	equ	0xFE1
 15587                           indf2	equ	0xFDF
 15588                           postinc2	equ	0xFDE
 15589                           postdec2	equ	0xFDD
 15590                           fsr2h	equ	0xFDA
 15591                           fsr2l	equ	0xFD9
 15592                           status	equ	0xFD8
 15593                           
 15594 ;; *************** function i2_I2C_Master_Stop *****************
 15595 ;; Defined at:
 15596 ;;		line 43 in file "I2C.c"
 15597 ;; Parameters:    Size  Location     Type
 15598 ;;		None
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;		None
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  1    wreg      void 
 15603 ;; Registers used:
 15604 ;;		wreg, status,2, status,0, cstack
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;Total ram usage:        0 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    1
 15617 ;; This function calls:
 15618 ;;		i2_I2C_Master_Wait
 15619 ;; This function is called by:
 15620 ;;		i2_getRTC
 15621 ;; This function uses a non-reentrant model
 15622 ;;
 15623                           
 15624                           	psect	text75
 15625  0032D4                     __ptext75:
 15626                           	opt stack 0
 15627  0032D4                     i2_I2C_Master_Stop:
 15628                           	opt stack 18
 15629                           
 15630                           ;I2C.c: 45: I2C_Master_Wait();
 15631                           
 15632                           ;incstack = 0
 15633  0032D4  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15634                           
 15635                           ;I2C.c: 46: PEN = 1;
 15636  0032D8  84C5               	bsf	4037,2,c	;volatile
 15637  0032DA  0012               	return		;funcret
 15638  0032DC                     __end_ofi2_I2C_Master_Stop:
 15639                           	opt stack 0
 15640                           pclatu	equ	0xFFB
 15641                           pclath	equ	0xFFA
 15642                           tblptru	equ	0xFF8
 15643                           tblptrh	equ	0xFF7
 15644                           tblptrl	equ	0xFF6
 15645                           tablat	equ	0xFF5
 15646                           prodh	equ	0xFF4
 15647                           prodl	equ	0xFF3
 15648                           intcon	equ	0xFF2
 15649                           intcon2	equ	0xFF1
 15650                           intcon3	equ	0xFF0
 15651                           indf0	equ	0xFEF
 15652                           postinc0	equ	0xFEE
 15653                           fsr0h	equ	0xFEA
 15654                           fsr0l	equ	0xFE9
 15655                           wreg	equ	0xFE8
 15656                           postdec1	equ	0xFE5
 15657                           fsr1h	equ	0xFE2
 15658                           fsr1l	equ	0xFE1
 15659                           indf2	equ	0xFDF
 15660                           postinc2	equ	0xFDE
 15661                           postdec2	equ	0xFDD
 15662                           fsr2h	equ	0xFDA
 15663                           fsr2l	equ	0xFD9
 15664                           status	equ	0xFD8
 15665                           
 15666 ;; *************** function i2_I2C_Master_Start *****************
 15667 ;; Defined at:
 15668 ;;		line 31 in file "I2C.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;		None
 15671 ;; Auto vars:     Size  Location     Type
 15672 ;;		None
 15673 ;; Return value:  Size  Location     Type
 15674 ;;                  1    wreg      void 
 15675 ;; Registers used:
 15676 ;;		wreg, status,2, status,0, cstack
 15677 ;; Tracked objects:
 15678 ;;		On entry : 0/0
 15679 ;;		On exit  : 0/0
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15686 ;;Total ram usage:        0 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; Hardware stack levels required when called:    1
 15689 ;; This function calls:
 15690 ;;		i2_I2C_Master_Wait
 15691 ;; This function is called by:
 15692 ;;		i2_getRTC
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           	psect	text76
 15697  0032DC                     __ptext76:
 15698                           	opt stack 0
 15699  0032DC                     i2_I2C_Master_Start:
 15700                           	opt stack 18
 15701                           
 15702                           ;I2C.c: 33: I2C_Master_Wait();
 15703                           
 15704                           ;incstack = 0
 15705  0032DC  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15706                           
 15707                           ;I2C.c: 34: SEN = 1;
 15708  0032E0  80C5               	bsf	4037,0,c	;volatile
 15709  0032E2  0012               	return		;funcret
 15710  0032E4                     __end_ofi2_I2C_Master_Start:
 15711                           	opt stack 0
 15712                           pclatu	equ	0xFFB
 15713                           pclath	equ	0xFFA
 15714                           tblptru	equ	0xFF8
 15715                           tblptrh	equ	0xFF7
 15716                           tblptrl	equ	0xFF6
 15717                           tablat	equ	0xFF5
 15718                           prodh	equ	0xFF4
 15719                           prodl	equ	0xFF3
 15720                           intcon	equ	0xFF2
 15721                           intcon2	equ	0xFF1
 15722                           intcon3	equ	0xFF0
 15723                           indf0	equ	0xFEF
 15724                           postinc0	equ	0xFEE
 15725                           fsr0h	equ	0xFEA
 15726                           fsr0l	equ	0xFE9
 15727                           wreg	equ	0xFE8
 15728                           postdec1	equ	0xFE5
 15729                           fsr1h	equ	0xFE2
 15730                           fsr1l	equ	0xFE1
 15731                           indf2	equ	0xFDF
 15732                           postinc2	equ	0xFDE
 15733                           postdec2	equ	0xFDD
 15734                           fsr2h	equ	0xFDA
 15735                           fsr2l	equ	0xFD9
 15736                           status	equ	0xFD8
 15737                           
 15738 ;; *************** function i2_I2C_Master_Read *****************
 15739 ;; Defined at:
 15740 ;;		line 55 in file "I2C.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;  a               1    wreg     unsigned char 
 15743 ;; Auto vars:     Size  Location     Type
 15744 ;;  a               1    1[COMRAM] unsigned char 
 15745 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 15746 ;; Return value:  Size  Location     Type
 15747 ;;                  1    wreg      unsigned char 
 15748 ;; Registers used:
 15749 ;;		wreg, status,2, status,0, cstack
 15750 ;; Tracked objects:
 15751 ;;		On entry : 0/0
 15752 ;;		On exit  : 0/0
 15753 ;;		Unchanged: 0/0
 15754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15758 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15759 ;;Total ram usage:        2 bytes
 15760 ;; Hardware stack levels used:    1
 15761 ;; Hardware stack levels required when called:    1
 15762 ;; This function calls:
 15763 ;;		i2_I2C_Master_Wait
 15764 ;; This function is called by:
 15765 ;;		i2_getRTC
 15766 ;; This function uses a non-reentrant model
 15767 ;;
 15768                           
 15769                           	psect	text77
 15770  003124                     __ptext77:
 15771                           	opt stack 0
 15772  003124                     i2_I2C_Master_Read:
 15773                           	opt stack 18
 15774                           
 15775                           ;incstack = 0
 15776                           ;i2I2C_Master_Read@a stored from wreg
 15777  003124  6E02               	movwf	i2I2C_Master_Read@a,c
 15778                           
 15779                           ;I2C.c: 57: unsigned char temp;
 15780                           ;I2C.c: 58: I2C_Master_Wait();
 15781  003126  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15782                           
 15783                           ;I2C.c: 59: RCEN = 1;
 15784  00312A  86C5               	bsf	4037,3,c	;volatile
 15785                           
 15786                           ;I2C.c: 60: I2C_Master_Wait();
 15787  00312C  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15788                           
 15789                           ;I2C.c: 61: temp = SSPBUF;
 15790  003130  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 15791                           
 15792                           ;I2C.c: 62: I2C_Master_Wait();
 15793  003134  EC2F  F019         	call	i2_I2C_Master_Wait	;wreg free
 15794                           
 15795                           ;I2C.c: 63: ACKDT = (a)?0:1;
 15796  003138  5002               	movf	i2I2C_Master_Read@a,w,c
 15797  00313A  A4D8               	btfss	status,2,c
 15798  00313C  D002               	goto	i2u269_40
 15799  00313E  8AC5               	bsf	4037,5,c	;volatile
 15800  003140  D001               	goto	i2l4135
 15801  003142                     i2u269_40:
 15802  003142  9AC5               	bcf	4037,5,c	;volatile
 15803  003144                     i2l4135:
 15804                           
 15805                           ;I2C.c: 64: ACKEN = 1;
 15806  003144  88C5               	bsf	4037,4,c	;volatile
 15807                           
 15808                           ;I2C.c: 65: return temp;
 15809  003146  5003               	movf	i2I2C_Master_Read@temp,w,c
 15810  003148  0012               	return	
 15811  00314A                     __end_ofi2_I2C_Master_Read:
 15812                           	opt stack 0
 15813                           pclatu	equ	0xFFB
 15814                           pclath	equ	0xFFA
 15815                           tblptru	equ	0xFF8
 15816                           tblptrh	equ	0xFF7
 15817                           tblptrl	equ	0xFF6
 15818                           tablat	equ	0xFF5
 15819                           prodh	equ	0xFF4
 15820                           prodl	equ	0xFF3
 15821                           intcon	equ	0xFF2
 15822                           intcon2	equ	0xFF1
 15823                           intcon3	equ	0xFF0
 15824                           indf0	equ	0xFEF
 15825                           postinc0	equ	0xFEE
 15826                           fsr0h	equ	0xFEA
 15827                           fsr0l	equ	0xFE9
 15828                           wreg	equ	0xFE8
 15829                           postdec1	equ	0xFE5
 15830                           fsr1h	equ	0xFE2
 15831                           fsr1l	equ	0xFE1
 15832                           indf2	equ	0xFDF
 15833                           postinc2	equ	0xFDE
 15834                           postdec2	equ	0xFDD
 15835                           fsr2h	equ	0xFDA
 15836                           fsr2l	equ	0xFD9
 15837                           status	equ	0xFD8
 15838                           
 15839 ;; *************** function i2_I2C_Master_Wait *****************
 15840 ;; Defined at:
 15841 ;;		line 26 in file "I2C.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;		None
 15844 ;; Auto vars:     Size  Location     Type
 15845 ;;		None
 15846 ;; Return value:  Size  Location     Type
 15847 ;;                  1    wreg      void 
 15848 ;; Registers used:
 15849 ;;		wreg, status,2, status,0
 15850 ;; Tracked objects:
 15851 ;;		On entry : 0/0
 15852 ;;		On exit  : 0/0
 15853 ;;		Unchanged: 0/0
 15854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15859 ;;Total ram usage:        1 bytes
 15860 ;; Hardware stack levels used:    1
 15861 ;; This function calls:
 15862 ;;		Nothing
 15863 ;; This function is called by:
 15864 ;;		i2_I2C_Master_Start
 15865 ;;		i2_I2C_Master_Stop
 15866 ;;		i2_I2C_Master_Write
 15867 ;;		i2_I2C_Master_Read
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           	psect	text78
 15872  00325E                     __ptext78:
 15873                           	opt stack 0
 15874  00325E                     i2_I2C_Master_Wait:
 15875                           	opt stack 18
 15876  00325E                     i2l68:
 15877  00325E  B4C7               	btfsc	4039,2,c	;volatile
 15878  003260  D7FE               	goto	i2l68
 15879  003262  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 15880  003266  0E1F               	movlw	31
 15881  003268  1601               	andwf	??i2_I2C_Master_Wait,f,c
 15882  00326A  B4D8               	btfsc	status,2,c
 15883  00326C  0012               	return	
 15884  00326E  D7F7               	goto	i2l68
 15885  003270                     __end_ofi2_I2C_Master_Wait:
 15886                           	opt stack 0
 15887                           pclatu	equ	0xFFB
 15888                           pclath	equ	0xFFA
 15889                           tblptru	equ	0xFF8
 15890                           tblptrh	equ	0xFF7
 15891                           tblptrl	equ	0xFF6
 15892                           tablat	equ	0xFF5
 15893                           prodh	equ	0xFF4
 15894                           prodl	equ	0xFF3
 15895                           intcon	equ	0xFF2
 15896                           intcon2	equ	0xFF1
 15897                           intcon3	equ	0xFF0
 15898                           indf0	equ	0xFEF
 15899                           postinc0	equ	0xFEE
 15900                           fsr0h	equ	0xFEA
 15901                           fsr0l	equ	0xFE9
 15902                           wreg	equ	0xFE8
 15903                           postdec1	equ	0xFE5
 15904                           fsr1h	equ	0xFE2
 15905                           fsr1l	equ	0xFE1
 15906                           indf2	equ	0xFDF
 15907                           postinc2	equ	0xFDE
 15908                           postdec2	equ	0xFDD
 15909                           fsr2h	equ	0xFDA
 15910                           fsr2l	equ	0xFD9
 15911                           status	equ	0xFD8
 15912                           pclatu	equ	0xFFB
 15913                           pclath	equ	0xFFA
 15914                           tblptru	equ	0xFF8
 15915                           tblptrh	equ	0xFF7
 15916                           tblptrl	equ	0xFF6
 15917                           tablat	equ	0xFF5
 15918                           prodh	equ	0xFF4
 15919                           prodl	equ	0xFF3
 15920                           intcon	equ	0xFF2
 15921                           intcon2	equ	0xFF1
 15922                           intcon3	equ	0xFF0
 15923                           indf0	equ	0xFEF
 15924                           postinc0	equ	0xFEE
 15925                           fsr0h	equ	0xFEA
 15926                           fsr0l	equ	0xFE9
 15927                           wreg	equ	0xFE8
 15928                           postdec1	equ	0xFE5
 15929                           fsr1h	equ	0xFE2
 15930                           fsr1l	equ	0xFE1
 15931                           indf2	equ	0xFDF
 15932                           postinc2	equ	0xFDE
 15933                           postdec2	equ	0xFDD
 15934                           fsr2h	equ	0xFDA
 15935                           fsr2l	equ	0xFD9
 15936                           status	equ	0xFD8
 15937                           
 15938                           	psect	rparam
 15939  0000                     pclatu	equ	0xFFB
 15940                           pclath	equ	0xFFA
 15941                           tblptru	equ	0xFF8
 15942                           tblptrh	equ	0xFF7
 15943                           tblptrl	equ	0xFF6
 15944                           tablat	equ	0xFF5
 15945                           prodh	equ	0xFF4
 15946                           prodl	equ	0xFF3
 15947                           intcon	equ	0xFF2
 15948                           intcon2	equ	0xFF1
 15949                           intcon3	equ	0xFF0
 15950                           indf0	equ	0xFEF
 15951                           postinc0	equ	0xFEE
 15952                           fsr0h	equ	0xFEA
 15953                           fsr0l	equ	0xFE9
 15954                           wreg	equ	0xFE8
 15955                           postdec1	equ	0xFE5
 15956                           fsr1h	equ	0xFE2
 15957                           fsr1l	equ	0xFE1
 15958                           indf2	equ	0xFDF
 15959                           postinc2	equ	0xFDE
 15960                           postdec2	equ	0xFDD
 15961                           fsr2h	equ	0xFDA
 15962                           fsr2l	equ	0xFD9
 15963                           status	equ	0xFD8
 15964                           
 15965                           	psect	temp
 15966  00007F                     btemp:
 15967                           	opt stack 0
 15968  00007F                     	ds	1
 15969  0000                     int$flags	set	btemp
 15970                           pclatu	equ	0xFFB
 15971                           pclath	equ	0xFFA
 15972                           tblptru	equ	0xFF8
 15973                           tblptrh	equ	0xFF7
 15974                           tblptrl	equ	0xFF6
 15975                           tablat	equ	0xFF5
 15976                           prodh	equ	0xFF4
 15977                           prodl	equ	0xFF3
 15978                           intcon	equ	0xFF2
 15979                           intcon2	equ	0xFF1
 15980                           intcon3	equ	0xFF0
 15981                           indf0	equ	0xFEF
 15982                           postinc0	equ	0xFEE
 15983                           fsr0h	equ	0xFEA
 15984                           fsr0l	equ	0xFE9
 15985                           wreg	equ	0xFE8
 15986                           postdec1	equ	0xFE5
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           indf2	equ	0xFDF
 15990                           postinc2	equ	0xFDE
 15991                           postdec2	equ	0xFDD
 15992                           fsr2h	equ	0xFDA
 15993                           fsr2l	equ	0xFD9
 15994                           status	equ	0xFD8


Data Sizes:
    Strings     594
    Constant    27
    Data        8
    BSS         114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     126
    BANK0           128     89     127
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_67(CODE[7]), STR_66(CODE[9]), STR_65(CODE[20]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   58317
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3543
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              2     2      0    2051
                                             10 BANK0      2     2      0
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    1285
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    1285
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    1285
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                               9     9      0    7371
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         6     3      3    6711
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _EEPROM_read                                          2     0      2     362
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   15632
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   14782
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  23    23      0   31098
                                             68 BANK0     21    21      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    9575
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    5072
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76958
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4959
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      30       7       18.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12D      34        0.0%
DATA                 0      0     12D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 03:48:27 2017

                   i2_I2C_Master_Start 32DC                     i2_I2C_Master_Write 32B2  
                                   _ID 1F8C                                     l68 3238  
                                   l99 324C                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0078  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l102 3252  
                                  l196 00E0                                    l608 10D8  
                                  l491 26A0                                    l920 3204  
                                  l907 21EE                                    l781 288A  
                                  l929 1E42                                    l965 0AC2  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E7  
                                  _sel 00FC                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00ED        __end_of_change_state_to_menu_11 2F08  
      __end_of_change_state_to_menu_12 2DAA        __end_of_change_state_to_menu_22 2D72  
      __end_of_change_state_to_menu_23 2ED8           _f_can_coming_to_distribution 0074  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 2FF8  
      __end_of_change_state_to_logs_12 2FC8        __end_of_change_state_to_logs_22 2F98  
      __end_of_change_state_to_logs_23 3054        __end_of_change_state_to_logs_33 2F68  
      __end_of_change_state_to_logs_34 2F38                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1412 2844  
                                 l1422 2A64                                   l4111 2A56  
                                 l4103 2A20                                   l1359 241C  
                                 l4105 2A2C                                   l4107 2A32  
                                 l4221 089E                                   l4311 0B78  
                                 l4223 08B0                                   l4207 3068  
                                 l5103 249A                                   l4305 0B56  
                                 l4241 096A                                   l4233 08EE  
                                 l4217 088A                                   l4049 301E  
                                 l4209 307A                                   l4083 27F4  
                                 l4067 30CC                                   l4331 0BFC  
                                 l4323 0BD4                                   l4315 0BB0  
                                 l4251 09A8                                   l4227 08BA  
                                 l5301 25A0                                   l4085 2800  
                                 l4341 0C30                                   l4317 0BBA  
                                 l4261 0A20                                   l4253 09AE  
                                 l5311 25D0                                   l4095 2836  
                                 l4087 2806                                   l4335 0C16  
                                 l4271 0A82                                   l4263 0A26  
                                 l4351 2DB4                                   l5135 202A  
                                 l5313 25D6                                   l5321 2608  
                                 l5305 25B0                                   l4345 0C88  
                                 l4329 0BF0                                   l4265 0A3E  
                                 l4249 099C                                   l4353 2DC0  
                                 l4601 1056                                   l5241 2292  
                                 l5233 2264                                   l5145 205A  
                                 l5153 2072                                   l6041 267E  
                                 l4339 0C2A                                   l4291 0B14  
                                 l4259 0A14                                   l4275 0A88  
                                 l4347 0C94                                   l4363 27A8  
                                 l4611 111E                                   l5411 019E  
                                 l5171 1E62                                   l6051 269C  
                                 l5325 261C                                   l5317 25FA  
                                 l5309 25C4                                   l4293 0B1A  
                                 l4269 0A6A                                   l4621 11B4  
                                 l4613 113C                                   l5501 04CE  
                                 l5245 229C                                   l5229 225A  
                                 l5237 227C                                   l4373 2876  
                                 l5173 1E7C                                   l5181 1ECA  
                                 l5149 2066                                   l6037 2672  
                                 l5271 2310                                   l5263 22E6  
                                 l4287 0AFA                                   l4359 2792  
                                 l4623 11D2                                   l4615 115A  
                                 l4607 10E2                                   l5511 04F8  
                                 l4391 23B6                                   l4375 28A0  
                                 l5175 1E96                                   l5183 1EF8  
                                 l6039 2678                                   l6055 26A2  
                                 l5281 2346                                   l5273 2316  
                                 l5257 22D0                                   l4369 27C8  
                                 l4625 11F0                                   l4617 1178  
                                 l4609 1100                                   l4633 124A  
                                 l5601 06F2                                   l5505 04E6  
                                 l5433 0212                                   l5425 01F0  
                                 l5177 1EB0                                   l5089 2462  
                                 l6049 2696                                   l4627 120E  
                                 l4619 1196                                   l4635 12A8  
                                 l5515 0502                                   l5443 022E  
                                 l4387 23A0                                   l5269 2304  
                                 l5285 2354                                   l4629 122C  
                                 l5429 01FA                                   l5381 00FE  
                                 l4389 23B0                                   l5623 0762  
                                 l5543 05EA                                   l5519 051A  
                                 l5471 0310                                   l5463 0298  
                                 l5447 0246                                   l5439 0224  
                                 l4399 240A                                   l5289 2368  
                                 l5641 07AE                                   l5633 078C  
                                 l5561 0636                                   l5553 0614  
                                 l5481 03A6                                   l5473 032E  
                                 l5465 02B6                                   l5393 0132  
                                 l5385 0110                                   l5627 077A  
                                 l5619 0758                                   l5547 0602  
                                 l5539 05E0                                   l5483 03C4  
                                 l5475 034C                                   l5467 02D4  
                                 l5491 041E                                   l5379 00F8  
                                 l4771 24E8                                   l5637 0796  
                                 l5557 061E                                   l5485 03E2  
                                 l5477 036A                                   l5469 02F2  
                                 l5493 0482                                   l5397 0144  
                                 l5389 011A                                   l4781 2574  
                                 l5663 0816                                   l5583 06A6  
                                 l5487 0400                                   l5479 0388  
                                 l4775 24FE                                   _ADIE 007CEE  
                                 l5681 0862                                   l5673 0840  
                                 l5593 06D0                                   l5497 04C4  
                                 _ADFM 007E07                                   l5667 082E  
                                 l5659 080C                                   l5587 06BE  
                                 l5579 069C                                   l4891 271E  
                                 l5677 084A                                   l5597 06DA  
                                 l5685 086E                                   l4887 2708  
                                 l5943 1D68                                   l4897 274A  
                                 l5945 1D7C                                   l5969 1DFC  
                                 _ADON 007E10                                   STR_1 FEBE  
                                 STR_2 FDC4                                   STR_3 FE13  
                                 STR_4 FF79                                   STR_5 FE13  
                                 STR_6 FF57                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3440 2CA8  
                                 u3441 2CA4                                   u3450 2CAA  
                                 u5107 24CA                                   u5117 2C58  
                                 u2590 301C                                   u5207 22A4  
                                 u5127 1FA6                                   u2840 09E8  
                                 u3480 10D8                                   u5217 2CBA  
                                 u3465 2A9E                                   u5137 2002  
                                 u5307 04D6                                   u5227 2CEE  
                                 u5147 2096                                   _PEIE 007F96  
                                 u5317 050A                                   u5237 002A  
                                 u5157 3070                                   u3750 1FC0  
                                 u2847 09DE                                   u5407 079E  
                                 u5327 0534                                   u5247 0122  
                                 u5167 1F06                                   u2880 0A60  
                                 u5417 07C8                                   u5337 05F2  
                                 u5257 015E                                   u5177 1F3A  
                                 u5097 244C                                   u5427 081E  
                                 u5347 0626                                   u5267 01AC  
                                 u5187 2210                                   u3780 201A  
                                 _RCEN 007E2B                                   u5437 0852  
                                 u5357 0650                                   u5277 0202  
                                 u5197 226C                                   u3758 1FC4  
                                 u5447 29C4                                   u2887 0A56  
                                 u5367 06AE                                   u5287 0236  
                                 u5457 29CE                                   u5377 06E2  
                                 u5297 0260                                   u4930 1E42  
                                 u5467 29FA                                   u5387 070C  
                                 u3788 201E                                   u5477 2A04  
                                 u5397 076A                                   i2l68 325E  
                                 _RSEN 007E29                            _stopSignals 320C  
                                 _back 0064                                   _main 2626  
                                 _down 0070                                   _keys FD91  
                                 _time 005B                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3192                                   btemp 007F  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EB                        __end_ofi2_putch 329C  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 15AC                            i2_lcdNibble 2B28  
                      __end_of_Loading 24DA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                   __end_of_EEPROM_write 22B4  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 2372  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FDAC                                  STR_14 FFD6  
                                STR_22 FFA2                                  STR_30 FF68  
                                STR_15 FFD2                                  STR_23 FF89  
                                STR_31 FF46                                  STR_16 FFE2  
                                STR_24 FE9C                                  STR_32 FE7A  
                                STR_40 FE36                                  STR_17 FFF2  
                                STR_33 FE8B                                  STR_41 FE25  
                                STR_25 FE00                                  STR_18 FFF6  
                                STR_34 FF35                                  STR_50 FF13  
                                STR_42 FEF1                                  STR_26 FEAD  
                                STR_43 FEF1                                  STR_35 FF35  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FDED                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FECF  
                                STR_36 FE69                                  STR_44 FE47  
                      __end_of___awmod 2626                                  STR_45 FE36  
                                STR_37 FE7A                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FDFD  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_38 FF24                                  STR_46 FF02  
                                STR_47 FF02                                  STR_55 FFFA  
                                STR_63 FDAC                                  STR_39 FEE0  
                                STR_56 FFDE                                  STR_64 FF97  
                                STR_48 FE58                                  STR_49 FE47  
                                STR_57 FFD6                                  STR_65 FDD9  
                                STR_58 FFD2                                  STR_66 FFAC  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_68 FFB5                                  ?_sort 0001  
                      __end_of___lldiv 242E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 284E                        __end_of___lwmod 2A6E  
                                i2l267 15A8                                  i2l608 163A  
                                i2l920 3230                                  i2l842 1CC4  
                                i2l844 1CE4                                  i2l838 1C78  
                      ___awdiv@counter 008A                                  i2l965 0E8E  
                                _VCFG0 007E0C                                  _VCFG1 007E0D  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 3290  
                      __end_of_handler 1D20                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 3080                        __end_of_initLCD 2CF8  
                       __CFG_EBTRB$OFF 000000                                  _debug 00DD  
                           i2isdigit@c 0003                        __end_of_loadRTC 2752  
                      __end_of_readMAG 2CB2                        __end_of_dpowers FDAC  
                                _first 00E5                                  _enter 0072  
                      __end_of_isdigit 30D6                                  _input 007E  
                                _putch 3270                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3124  
                     __end_ofi2_getRTC 29A4                    _log_count_pop_w_tab 00F1  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1022  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 2E48                       _count_can_no_lab 0066  
                 __size_of_EEPROM_read 0018                        __initialization 2BD0  
                   __size_ofi2_lcdInst 000C                           __end_of_main 26C6  
                         __end_of_keys FDA2                           __end_of_sort 31B4  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D9  
                               ??_sort 008E                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESH 000FC4                                 _EEADRH 000FAA  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 2E78              i2_change_state_to_menu_22 2E48  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1412 2BC6  
                               i2l1422 2D30                                 i2l5003 1AD4  
                               i2l5013 1AFA                                 i2l4135 3144  
                               i2l5031 1B34                                 i2l5023 1B1C  
                               i2l5007 1AF0                                 i2l5041 1B54  
                               i2l5017 1B0E                                 i2l4411 296C  
                               i2l4171 2B9C                                 i2l5019 1B12  
                               i2l4421 2996                                 i2l4181 2BBC  
                               i2l4173 2BA0                                 i2l6005 191A  
                               i2l5053 1B8A                                 i2l5045 1B66  
                               i2l5037 1B42                                 i2l4415 297C  
                               i2l4191 2D0E                                 i2l4159 31EC  
                               i2l4169 2B94                                 i2l4193 2D12  
                               i2l4513 0ED4                                 i2l5049 1B78  
                               i2l4515 0ED8                                 i2l4443 0CCE  
                               i2l5059 1B94                                 i2l6115 1C96  
                               i2l4197 2D26                                 i2l4189 2D06  
                               i2l4533 0F24                                 i2l4509 0EBC  
                               i2l4445 0CDC                                 i2l6117 1C98  
                               i2l4551 0F7C                                 i2l4527 0F0A  
                               i2l4471 0D9E                                 i2l4463 0D76  
                               i2l4455 0D14                                 i2l4439 0CBE  
                               i2l4553 0F84                                 i2l4561 0FAA  
                               i2l4545 0F66                                 i2l4537 0F48  
                               i2l4481 0DF6                                 i2l4473 0DA8  
                               i2l4449 0CE2                                 i2l4563 0FB0  
                               i2l4539 0F50                                 i2l4491 0E42  
                               i2l4483 0E00                                 i2l4475 0DAC  
                               i2l6139 1CE2                                 i2l4557 0F98  
                               i2l4493 0E54                                 i2l4485 0E06  
                               i2l4573 2E20                                 i2l5701 1322  
                               i2l6093 1C4C                                 i2l4567 0FFE  
                               i2l4487 0E18                                 i2l4751 2170  
                               i2l4575 2E28                                 i2l6351 157E  
                               i2l6079 1C30                                 i2l4497 0E58  
                               i2l4569 1006                                 i2l6353 159A  
                               i2l5801 148C                                 i2l5713 134C  
                               i2l5705 1330                                 i2l4763 21B4  
                               i2l4755 2180                                 i2l4851 1686  
                               i2l6357 1A82                                 i2l4941 19FA  
                               i2l4861 16F4                                 i2l4853 169C  
                               i2l4845 1644                                 i2l6349 155C  
                               i2l5821 14DA                                 i2l5813 14BE  
                               i2l5805 149A                                 i2l5741 13A2  
                               i2l5733 1384                                 i2l5725 1368  
                               i2l5717 135A                                 i2l5709 133E  
                               i2l6359 1A9E                                 i2l4951 1A24  
                               i2l4863 170A                                 i2l4855 16B2  
                               i2l4847 165A                                 i2l4871 174C  
                               i2l4839 15D8                                 i2l4953 1A28  
                               i2l4865 1720                                 i2l4857 16C8  
                               i2l4849 1670                                 i2l4873 17A6  
                               i2l5841 1530                                 i2l5833 150C  
                               i2l5825 14F0                                 i2l5817 14CC  
                               i2l5809 14B0                                 i2l5761 13F0  
                               i2l5753 13CC                                 i2l5745 13B0  
                               i2l5737 1394                                 i2l5729 1376  
                               i2l4971 1A5E                                 i2l4963 1A46  
                               i2l4867 1736                                 i2l4859 16DE  
                               i2l4973 1A64                                 i2l4965 1A4C  
                               i2l4949 1A14                                 i2l5837 151A  
                               i2l5829 14FE                                 i2l5781 143E  
                               i2l5773 141A                                 i2l5765 13FE  
                               i2l5757 13DA                                 i2l5749 13BE  
                               i2l4967 1A52                                 i2l4959 1A32  
                               i2l5847 153E                                 i2l4969 1A58  
                               i2l4977 1A6A                                 i2l5793 1470  
                               i2l5785 144C                                 i2l5777 1430  
                               i2l5769 140C                                 i2l5699 131C  
                               i2l4997 1AC6                                 i2l4989 1AAE  
                               i2l5797 147E                                 i2l5789 145A  
                               i2l5985 17EE                                 i2l5995 1858  
                               i2l5989 17FE                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 3192                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 1F8C  
                               ___wmul 2DE0                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B1                            logRun@byte2 00B2  
                          logRun@byte3 00B3                                 _getRTC 2752  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 31D6                                 _initUI 314A  
                               _logRun 1D20                                 clear_0 2BF6  
                               clear_1 2C02                                 clear_2 2C0E  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 324C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 087C  
                            ??_handler 004B                __size_of_initGlobalVars 0070  
                         ?_retrieveLog 0007                                 _strcpy 2DAA  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 30FE  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 30D6                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 2BD0                       __end_of_printRTC 12EC  
                         __mediumconst FD90                      __end_ofi2___lwmod 2D3A  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EF  
                    __end_ofi2_lcdInst 32A8                      __end_ofi2_isdigit 31F4  
                           __accesstop 0080                __end_of__initialization 2C14  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                          i2_EEPROM_read 3222  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 32BC  
                          i2printRTC@i 0041                          _initSortTimer 24DA  
          __end_of_updateServoPosition 28C4                          __end_of_putch 3280  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 20B2                             __end_of_UI 087C  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 30AC          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 3080                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 006A                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00D9  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 21CC  
                              UI@F3220 0128               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_504 00C9                                UI@i_505 00CA  
                              UI@i_531 00CF                                UI@i_523 00CB  
                              UI@i_540 00D4                                UI@i_532 00D0  
                              UI@i_524 00CC                                UI@i_535 00D1  
                              UI@i_527 00CD                                UI@i_536 00D2  
                              UI@i_528 00CE                                UI@i_539 00D3  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D5                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$1990 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 3290  
                            ?_initTime 0080                        _f_loadingNewCan 00E3  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2A0C  
                              _Loading 242E            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 22B4                                ___awmod 2584  
                           _initServos 2C1E                                ___lldiv 2372  
                      __size_of___wmul 0036                                ___lwdiv 27D6  
                              ___lwmod 2A0C                        __size_of_getRTC 0084  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B5  
                      __size_of_initUI 0024                                __pcinit 2BD0  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0138  
                         logRun@byte_i 00B4                                __ramtop 1000  
                       _initGlobalVars 28C4                                _lcdInst 3280  
                              _handler 0008                                __ptext0 2626  
                              __ptext1 320C                                __ptext2 3192  
                              __ptext3 242E                                __ptext4 24DA  
                              __ptext5 2C1E                                __ptext6 28C4  
                              __ptext7 1F8C                                __ptext8 2C68  
                              __ptext9 3054                        __size_of_printf 0438  
                              _readADC 3054                        __size_of_strcpy 0036  
                              _initLCD 2CB2                                _cur_can 006E  
                              _loadRTC 26C6                                _readMAG 2C68  
                              _dpowers FDA2                                _isdigit 30AC  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 1E58  
                       __pintcode_body 1BC2                   end_of_initialization 2C14  
                              logRun@i 00B6                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 1BC2  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0012              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 2934                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 1BC2                  __end_of_machineConfig 2B28  
                           _updateMenu 12EC                      i2_I2C_Master_Read 3124  
                            _IR_signal 0062                      i2_I2C_Master_Wait 325E  
                    i2_I2C_Master_Stop 32D4                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F3                              i2___lwdiv 2B7E  
                            i2___lwmod 2CF8                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 17E2                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 329C  
                           _total_time 00F9                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 31D6                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                  __end_of_EEPROM_read 320C                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 2E16  
                       __end_of_getRTC 27D6                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 316E                         __end_of_logRun 1E58  
                     i2___wmul@product 0005                         __end_of_printf 0CB4  
                         i2printf@flag 0026                         __end_of_strcpy 2DE0  
            __end_ofi2_I2C_Master_Read 314A              __end_ofi2_I2C_Master_Wait 3270  
                         i2printf@prec 001D                    start_initialization 2BD0  
            __end_ofi2_I2C_Master_Stop 32DC                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0068  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0070  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1363 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B8  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK1 0128                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_logRun 00B1  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2110 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1630 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 004A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 006C  
                          _EEPROM_read 31F4                     __end_of_PortTestA5 325E  
                     _I2C_Master_Start 32CC                              _f_lastCan 0126  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 32A8                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FD90  
                            _lcdNibble 29A4                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0076                              _cur_state 00DB  
                     ___lwdiv@quotient 0084                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0126                            __size_of_UI 086A  
           __end_ofi2_I2C_Master_Start 32E4             __end_ofi2_I2C_Master_Write 32BC  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 19DC  
                          ??i2_isdigit 0001                               i2u320_40 0DDA  
                             i2u320_47 0DD0                               i2u324_40 0E3A  
                             i2u324_47 0E30                               i2u355_40 163A  
                             _PIR2bits 000FA1                               i2u269_40 3142  
                             i2u550_47 2B4A                               i2u551_47 2B6C  
                             i2u552_47 2B76                               i2u548_47 1A1A  
                             i2u549_47 2B40                               i2u496_40 1914  
                  __size_of_updateMenu 02C0                         _log_completion 00E9  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 007A                              _was_low_3 007C  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 30FE                          lcdNibble@data 0081  
                             i2_getRTC 2934                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 0CB4                               i2_strcpy 2E16  
                  I2C_Master_Read@temp 0082                              copy_data0 2BE4  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 3238                            _count_total 00FD  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00AC                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 2584  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 2ED8  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 2D72  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 2D3A  
              _change_state_to_menu_23 2EA8                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 2FC8                _change_state_to_logs_12 2F98  
              _change_state_to_logs_22 2F68                _change_state_to_logs_23 3026  
              _change_state_to_logs_33 2F38                _change_state_to_logs_34 2F08  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1D18                        _I2C_Master_Init 2A6E  
                     __size_of_readADC 002C                        _I2C_Master_Read 2FF8  
                     __size_of_initLCD 0046                           _f_ID_receive 00DF  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004A  
                      _I2C_Master_Wait 3238                        _I2C_Master_Stop 32C4  
                     __size_of_isdigit 002A                         _printSortTimer 17E2  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 21CC                               __ptext10 1E58  
                             __ptext11 284E                               __ptext20 3080  
                             __ptext12 2ACE                               __ptext21 31B4  
                             __ptext13 1D20                               __ptext30 2FF8  
                             __ptext22 2CB2                               __ptext14 21CC  
                             __ptext31 3238                               __ptext23 0012  
                             __ptext15 31F4                               __ptext40 3280  
                             __ptext32 2D3A                               __ptext24 1022  
                             __ptext16 314A                               __ptext41 29A4  
                             __ptext33 2D72                               __ptext25 2DAA  
                             __ptext17 26C6                               __ptext50 19DC  
                             __ptext42 2584                               __ptext34 087C  
                             __ptext26 2752                               __ptext18 2A6E  
                             __ptext51 2E48                               __ptext43 22B4  
                             __ptext35 3270                               __ptext27 32A8  
                             __ptext19 2372                               __ptext60 2FC8  
                             __ptext52 2E78                               __ptext44 324C  
                             __ptext36 30AC                               __ptext28 32C4  
                             __ptext61 316E                               __ptext53 2EA8  
                             __ptext37 2DE0                               __ptext29 32CC  
                             __ptext70 2B7E                               __ptext62 20B2  
                             __ptext54 2ED8                               __ptext46 12EC  
                             __ptext38 2A0C                               __ptext71 329C  
                             __ptext63 3222                               __ptext55 2F08  
                             __ptext47 30D6                               __ptext39 27D6  
                             __ptext72 2B28                               __ptext64 17E2  
                             __ptext56 2F38                               __ptext48 15AC  
                             __ptext73 2934                               __ptext65 0CB4  
                             __ptext57 3026                               __ptext49 2E16  
                             __ptext74 32B2                               __ptext66 3290  
                             __ptext58 2F68                               __ptext75 32D4  
                             __ptext67 31D6                               __ptext59 2F98  
                             __ptext76 32DC                               __ptext68 30FE  
                             __ptext77 3124                               __ptext69 2CF8  
                             __ptext78 325E                               _dispLogs 316E  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1630 0002                     __end_of_initServos 2C68  
                        ?_EEPROM_write 00AB                               _initTime 31B4  
                        __size_of_main 00A0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F7  
                  _updateServoPosition 284E                 __size_of_machineConfig 005A  
                        ??i2_lcdNibble 0001                               _printRTC 1022  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007F                         _log_total_time 00F5  
                   _f_can_coming_to_ID 00E1                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 2EA8  
    __end_ofi2_change_state_to_menu_22 2E78                               loadRTC@i 0096  
               __end_of_printSortTimer 19DC                              putch@data 0082  
             __end_of_I2C_Master_Start 32D4                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 32B2                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                           _MAG_signal 00D9                               isdigit@c 0082  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 3222  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 15AC                __end_of_I2C_Master_Init 2ACE  
              __end_of_I2C_Master_Read 3026                __end_of_I2C_Master_Wait 324C  
              __end_of_I2C_Master_Stop 32CC                          printRTC@F3213 012C  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 20B2                    __end_ofi2_lcdNibble 2B7E  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 0124  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 2ACE                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FB                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
